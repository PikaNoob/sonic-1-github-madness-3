00000000                            ; /=========================================================================\
00000000                            ; ยบ	This file is generated by The Interactive Disassembler (IDA)	    ยบ
00000000                            ; ยบ	Copyright (c) 2003 by DataRescue sa/nv,	<ida@datarescue.com>	    ยบ
00000000                            ; \=========================================================================/
00000000                            ;
00000000                            ; Disassembly created by Hivebrain
00000000                            ; thanks to drx and Stealth
00000000                            
00000000                            ; Processor:	    68000
00000000                            ; Target Assembler: 680x0 Assembler in MRI compatible mode
00000000                            ; This file should be compiled with "as	-M"
00000000                            
00000000                            ; ===========================================================================
00000000                            align macro
00000000                            	cnop 0,\1
00000000                            	endm
00000000                            		include	"sound/smps2asm_inc.asm"
00000000                            ; =============================================================================================
00000000                            ; Created by Flamewing, based on S1SMPS2ASM version 1.1 by Marc Gordon (AKA Cinossu)
00000000                            ; =============================================================================================
00000000 =00000005                  SonicDriverVer:	equ	5
00000000                            align0	macro	val
00000000                            	cnop	0,\val
00000000                                endm
00000000                            	
00000000                            smpsWeirdD1LRR macro
00000000                            		dc.b	$F9
00000000                            	endm
00000000                            nMaxPSG		EQU nA5
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Standard Octave Pitch Equates
00000000 =FFFFFF88                  smpsPitch10lo:	EQU -120	; $88
00000000 =FFFFFF94                  smpsPitch09lo:	EQU -108	; $94
00000000 =FFFFFFA0                  smpsPitch08lo:	EQU  -96	; $A0
00000000 =FFFFFFAC                  smpsPitch07lo:	EQU  -84	; $AC
00000000 =FFFFFFB8                  smpsPitch06lo:	EQU  -72	; $B8
00000000 =FFFFFFC4                  smpsPitch05lo:	EQU  -60	; $C4
00000000 =FFFFFFD0                  smpsPitch04lo:	EQU  -48	; $D0
00000000 =FFFFFFDC                  smpsPitch03lo:	EQU  -36	; $DC
00000000 =FFFFFFE8                  smpsPitch02lo:	EQU  -24	; $E8
00000000 =FFFFFFF4                  smpsPitch01lo:	EQU  -12	; $F4
00000000 =00000000                  smpsPitch00:	EQU    0	; $00
00000000 =0000000C                  smpsPitch01hi:	EQU  +12	; $0C
00000000 =00000018                  smpsPitch02hi:	EQU  +24	; $18
00000000 =00000024                  smpsPitch03hi:	EQU  +36	; $24
00000000 =00000030                  smpsPitch04hi:	EQU  +48	; $30
00000000 =0000003C                  smpsPitch05hi:	EQU  +60	; $3C
00000000 =00000048                  smpsPitch06hi:	EQU  +72	; $48
00000000 =00000054                  smpsPitch07hi:	EQU  +84	; $54
00000000 =00000060                  smpsPitch08hi:	EQU  +96	; $60
00000000 =0000006C                  smpsPitch09hi:	EQU +108	; $6C
00000000 =00000078                  smpsPitch10hi:	EQU +120	; $78
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Note Equates
00000000 =00000080                  nRst:	EQU $80		; $80
00000000 =00000081                  nC0:	EQU $81		; $81
00000000 =00000082                  nCs0:	EQU nC0+1	; $82
00000000 =00000083                  nD0:	EQU nCs0+1	; $83
00000000 =00000084                  nEb0:	EQU nD0+1	; $84
00000000 =00000085                  nE0:	EQU nEb0+1	; $85
00000000 =00000086                  nF0:	EQU nE0+1	; $86
00000000 =00000087                  nFs0:	EQU nF0+1	; $87
00000000 =00000088                  nG0:	EQU nFs0+1	; $88
00000000 =00000089                  nAb0:	EQU nG0+1	; $89
00000000 =0000008A                  nA0:	EQU nAb0+1	; $8A
00000000 =0000008B                  nBb0:	EQU nA0+1	; $8B
00000000 =0000008C                  nB0:	EQU nBb0+1	; $8C
00000000 =0000008D                  nC1:	EQU nB0+1	; $8D
00000000 =0000008E                  nCs1:	EQU nC1+1	; $8E
00000000 =0000008F                  nD1:	EQU nCs1+1	; $8F
00000000 =00000090                  nEb1:	EQU nD1+1	; $90
00000000 =00000091                  nE1:	EQU nEb1+1	; $91
00000000 =00000092                  nF1:	EQU nE1+1	; $92
00000000 =00000093                  nFs1:	EQU nF1+1	; $93
00000000 =00000094                  nG1:	EQU nFs1+1	; $94
00000000 =00000095                  nAb1:	EQU nG1+1	; $95
00000000 =00000096                  nA1:	EQU nAb1+1	; $96
00000000 =00000097                  nBb1:	EQU nA1+1	; $97
00000000 =00000098                  nB1:	EQU nBb1+1	; $98
00000000 =00000099                  nC2:	EQU nB1+1	; $99
00000000 =0000009A                  nCs2:	EQU nC2+1	; $9A
00000000 =0000009B                  nD2:	EQU nCs2+1	; $9B
00000000 =0000009C                  nEb2:	EQU nD2+1	; $9C
00000000 =0000009D                  nE2:	EQU nEb2+1	; $9D
00000000 =0000009E                  nF2:	EQU nE2+1	; $9E
00000000 =0000009F                  nFs2:	EQU nF2+1	; $9F
00000000 =000000A0                  nG2:	EQU nFs2+1	; $A0
00000000 =000000A1                  nAb2:	EQU nG2+1	; $A1
00000000 =000000A2                  nA2:	EQU nAb2+1	; $A2
00000000 =000000A3                  nBb2:	EQU nA2+1	; $A3
00000000 =000000A4                  nB2:	EQU nBb2+1	; $A4
00000000 =000000A5                  nC3:	EQU nB2+1	; $A5
00000000 =000000A6                  nCs3:	EQU nC3+1	; $A6
00000000 =000000A7                  nD3:	EQU nCs3+1	; $A7
00000000 =000000A8                  nEb3:	EQU nD3+1	; $A8
00000000 =000000A9                  nE3:	EQU nEb3+1	; $A9
00000000 =000000AA                  nF3:	EQU nE3+1	; $AA
00000000 =000000AB                  nFs3:	EQU nF3+1	; $AB
00000000 =000000AC                  nG3:	EQU nFs3+1	; $AC
00000000 =000000AD                  nAb3:	EQU nG3+1	; $AD
00000000 =000000AE                  nA3:	EQU nAb3+1	; $AE
00000000 =000000AF                  nBb3:	EQU nA3+1	; $AF
00000000 =000000B0                  nB3:	EQU nBb3+1	; $B0
00000000 =000000B1                  nC4:	EQU nB3+1	; $B1
00000000 =000000B2                  nCs4:	EQU nC4+1	; $B2
00000000 =000000B3                  nD4:	EQU nCs4+1	; $B3
00000000 =000000B4                  nEb4:	EQU nD4+1	; $B4
00000000 =000000B5                  nE4:	EQU nEb4+1	; $B5
00000000 =000000B6                  nF4:	EQU nE4+1	; $B6
00000000 =000000B7                  nFs4:	EQU nF4+1	; $B7
00000000 =000000B8                  nG4:	EQU nFs4+1	; $B8
00000000 =000000B9                  nAb4:	EQU nG4+1	; $B9
00000000 =000000BA                  nA4:	EQU nAb4+1	; $BA
00000000 =000000BB                  nBb4:	EQU nA4+1	; $BB
00000000 =000000BC                  nB4:	EQU nBb4+1	; $BC
00000000 =000000BD                  nC5:	EQU nB4+1	; $BD
00000000 =000000BE                  nCs5:	EQU nC5+1	; $BE
00000000 =000000BF                  nD5:	EQU nCs5+1	; $BF
00000000 =000000C0                  nEb5:	EQU nD5+1	; $C0
00000000 =000000C1                  nE5:	EQU nEb5+1	; $C1
00000000 =000000C2                  nF5:	EQU nE5+1	; $C2
00000000 =000000C3                  nFs5:	EQU nF5+1	; $C3
00000000 =000000C4                  nG5:	EQU nFs5+1	; $C4
00000000 =000000C5                  nAb5:	EQU nG5+1	; $C5
00000000 =000000C6                  nA5:	EQU nAb5+1	; $C6
00000000 =000000C7                  nBb5:	EQU nA5+1	; $C7
00000000 =000000C8                  nB5:	EQU nBb5+1	; $C8
00000000 =000000C9                  nC6:	EQU nB5+1	; $C9
00000000 =000000CA                  nCs6:	EQU nC6+1	; $CA
00000000 =000000CB                  nD6:	EQU nCs6+1	; $CB
00000000 =000000CC                  nEb6:	EQU nD6+1	; $CC
00000000 =000000CD                  nE6:	EQU nEb6+1	; $CD
00000000 =000000CE                  nF6:	EQU nE6+1	; $CE
00000000 =000000CF                  nFs6:	EQU nF6+1	; $CF
00000000 =000000D0                  nG6:	EQU nFs6+1	; $D0
00000000 =000000D1                  nAb6:	EQU nG6+1	; $D1
00000000 =000000D2                  nA6:	EQU nAb6+1	; $D2
00000000 =000000D3                  nBb6:	EQU nA6+1	; $D3
00000000 =000000D4                  nB6:	EQU nBb6+1	; $D4
00000000 =000000D5                  nC7:	EQU nB6+1	; $D5
00000000 =000000D6                  nCs7:	EQU nC7+1	; $D6
00000000 =000000D7                  nD7:	EQU nCs7+1	; $D7
00000000 =000000D8                  nEb7:	EQU nD7+1	; $D8
00000000 =000000D9                  nE7:	EQU nEb7+1	; $D9
00000000 =000000DA                  nF7:	EQU nE7+1	; $DA
00000000 =000000DB                  nFs7:	EQU nF7+1	; $DB
00000000 =000000DC                  nG7:	EQU nFs7+1	; $DC
00000000 =000000DD                  nAb7:	EQU nG7+1	; $DD
00000000 =000000DE                  nA7:	EQU nAb7+1	; $DE
00000000 =000000DF                  nBb7:	EQU nA7+1	; $DF
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG envelope equates
00000000 =00000000                  fTone_00:	EQU $00
00000000 =00000001                  fTone_01:	EQU fTone_00+1
00000000 =00000002                  fTone_02:	EQU fTone_01+1
00000000 =00000003                  fTone_03:	EQU fTone_02+1
00000000 =00000004                  fTone_04:	EQU fTone_03+1
00000000 =00000005                  fTone_05:	EQU fTone_04+1
00000000 =00000006                  fTone_06:	EQU fTone_05+1
00000000 =00000007                  fTone_07:	EQU fTone_06+1
00000000 =00000008                  fTone_08:	EQU fTone_07+1
00000000 =00000009                  fTone_09:	EQU fTone_08+1
00000000 =0000000A                  fTone_0A:	EQU fTone_09+1
00000000 =0000000B                  fTone_0B:	EQU fTone_0A+1
00000000 =0000000C                  fTone_0C:	EQU fTone_0B+1
00000000 =0000000D                  fTone_0D:	EQU fTone_0C+1
00000000 =0000000E                  fTone_0E:	EQU fTone_0D+1
00000000 =0000000F                  fTone_0F:	EQU fTone_0E+1
00000000 =00000010                  fTone_10:	EQU fTone_0F+1
00000000 =00000011                  fTone_11:	EQU fTone_10+1
00000000 =00000012                  fTone_12:	EQU fTone_11+1
00000000 =00000013                  fTone_13:	EQU fTone_12+1
00000000 =00000014                  fTone_14:	EQU fTone_13+1
00000000 =00000015                  fTone_15:	EQU fTone_14+1
00000000 =00000016                  fTone_16:	EQU fTone_15+1
00000000 =00000017                  fTone_17:	EQU fTone_16+1
00000000 =00000018                  fTone_18:	EQU fTone_17+1
00000000 =00000019                  fTone_19:	EQU fTone_18+1
00000000 =0000001A                  fTone_1A:	EQU fTone_19+1
00000000 =0000001B                  fTone_1B:	EQU fTone_1A+1
00000000 =0000001C                  fTone_1C:	EQU fTone_1B+1
00000000 =0000001D                  fTone_1D:	EQU fTone_1C+1
00000000 =0000001E                  fTone_1E:	EQU fTone_1D+1
00000000 =0000001F                  fTone_1F:	EQU fTone_1E+1
00000000 =00000020                  fTone_20:	EQU fTone_1F+1
00000000 =00000021                  fTone_21:	EQU fTone_20+1
00000000 =00000022                  fTone_22:	EQU fTone_21+1
00000000 =00000023                  fTone_23:	EQU fTone_22+1
00000000 =00000024                  fTone_24:	EQU fTone_23+1
00000000 =00000025                  fTone_25:	EQU fTone_24+1
00000000 =00000026                  fTone_26:	EQU fTone_25+1
00000000 =00000027                  fTone_27:	EQU fTone_26+1
00000000 =00000028                  fTone_28:	EQU fTone_27+1
00000000 =00000029                  fTone_29:	EQU fTone_28+1
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; DAC Equates
00000000 =00000081                  dKick			EQU	$81
00000000 =00000082                  dSnare			EQU	$82
00000000 =00000082                  dMuffledSnare			EQU	$82
00000000 =00000083                  dTimpani		EQU	$83
00000000 =00000088                  dHiTimpani		EQU	$88
00000000 =00000089                  dMidTimpani		EQU	$89
00000000 =0000008A                  dLowTimpani		EQU	$8A
00000000 =0000008B                  dVLowTimpani		EQU	$8B
00000000 =00000083                  dCrashCymbal	EQU $83
00000000 =00000081                  dKickS3			EQU	$81
00000000 =00000082                  dSnareS3			EQU	$82
00000000 =0000008A                  delectriclowtom	EQU	$8A
00000000 =0000008B                  delectricfloortom	EQU	$8B
00000000 =00000088                  delectrichightom	EQU	$88
00000000 =00000089                  delectricmidtom	EQU	$89
00000000 =00000082                  dClapS3			EQU	$82
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Channel IDs for SFX
00000000 =00000080                  cPSG1				EQU $80
00000000 =000000A0                  cPSG2				EQU $A0
00000000 =000000C0                  cPSG3				EQU $C0
00000000 =000000E0                  cNoise				EQU $E0	; Not for use in S3/S&K/S3D
00000000 =00000002                  cFM3				EQU $02
00000000 =00000004                  cFM4				EQU $04
00000000 =00000005                  cFM5				EQU $05
00000000 =00000006                  cFM6				EQU $06	; Only in S3/S&K/S3D, overrides DAC
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ;---------------------------------------------
00000000                            ; SMPS F_Tone Equates 
00000000                            ;---------------------------------------------	
00000000 =00000000                  fTone_00:	EQU $00
00000000 =00000001                  fTone_01:	EQU fTone_00+1
00000000 =00000002                  fTone_02:	EQU fTone_01+1
00000000 =00000003                  fTone_03:	EQU fTone_02+1
00000000 =00000004                  fTone_04:	EQU fTone_03+1
00000000 =00000005                  fTone_05:	EQU fTone_04+1
00000000 =00000006                  fTone_06:	EQU fTone_05+1
00000000 =00000007                  fTone_07:	EQU fTone_06+1
00000000 =00000008                  fTone_08:	EQU fTone_07+1
00000000 =00000009                  fTone_09:	EQU fTone_08+1
00000000 =0000000A                  fTone_0A:	EQU fTone_09+1
00000000 =0000000B                  fTone_0B:	EQU fTone_0A+1
00000000 =0000000C                  fTone_0C:	EQU fTone_0B+1
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG conversion to S3/S&K/S3D drivers require a tone shift of 12 semi-tones.
00000000                            conv0To256  macro val 
00000000                            	if val<$01
00000000                            		dc.b (256-val+$FF)&$FF
00000000                            	else	
00000000                            		dc.b (256-val)&$FF	
00000000                            	endc
00000000                            	endm
00000000                            SMPSModFix:	macro steps
00000000                            	dc.b (steps/(speed-1))
00000000                            	endm	
00000000 =0000000C                  psgdelta	EQU $0C
00000000                            PSGPitch macro pitch
00000000                            		dc.b	(pitch+psgdelta)&$FF
00000000                            	endm
00000000                            
00000000                            s1TempotoS2 macro tmod
00000000                            	if tmod<$01
00000000                            		dc.b ((($FF+tmod-1)*256+($FF+tmod/2))/$FF+tmod)&$FF 	
00000000                            	else
00000000                            		dc.b (((tmod-1)*256+(tmod/2))/tmod)&$FF
00000000                            	endc
00000000                            	endm
00000000                            	
00000000                            s3TempotoS2 macro tmod
00000000                            	if tmod<$01
00000000                            		dc.b (256-tmod+$FF)&$FF
00000000                            	else	
00000000                            		dc.b (256-tmod)&$FF	
00000000                            	endc
00000000                            	endm
00000000                            	
00000000                            convertMainTempoMod	macro tmod
00000000                            	if 		smpsHeaderStartSong=2
00000000                            		dc.b tmod
00000000                            	elseif 		smpsHeaderStartSong<2
00000000                            		s1TempotoS2 	\tmod
00000000                            	elseif	smpsHeaderStartSong>2
00000000                            		s3TempotoS2  	\tmod
00000000                            	endc
00000000                            	endm	
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Header Macros
00000000 =00000000                  smpsHeaderStartSong = 0
00000000                            
00000000                            smpsHeaderVoiceNull macro
00000000                            	dc.w	$0000
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoice macro loc
00000000                            songStart set *
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location as S3's Universal Voice Bank
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoiceUVB macro
00000000                            	if songStart<>*
00000000                            		fail "Missing smpsHeaderStartSong or smpsHeaderStartSongConvert"
00000000                            	endc
00000000                            	;dc.w	little_endian(z80_UniVoiceBank)
00000000                            	z80_ptr	z80_UniVoiceBank
00000000                            	endm
00000000                            
00000000                            ; Header macros for music (not for SFX)
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChan macro fm,psg
00000000                            	dc.b	fm,psg
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempo macro tdiv,tmod
00000000                            	dc.b	tdiv,tmod
00000000                            	endm
00000000                            
00000000                            ; Header - Set up DAC Channel
00000000                            smpsHeaderDAC macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	if narg>=2
00000000                            		dc.b	\pitch
00000000                            	else
00000000                            		dc.b	$00
00000000                            	endc
00000000                            	if narg>=3
00000000                            		dc.b	\vol
00000000                            	else
00000000                            		dc.b	$00
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderFM macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol
00000000                            	endm
00000000                            
00000000                            ; Header - Set up PSG Channel
00000000                            smpsHeaderPSG macro loc,pitch,vol,mod,voice
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol,mod,voice
00000000                            	endm
00000000                            
00000000                            ; Header macros for SFX (not for music)
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempoSFX macro div
00000000                            	dc.b	div
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChanSFX macro chan
00000000                            	dc.b	chan
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderSFXChannel macro chanid,loc,pitch,vol
00000000                            	if (chanid=cNoise)
00000000                            		fail "Using channel ID of cNoise ($E0) in Sonic 3 driver is dangerous. Fix the song so that it turns into a noise channel instead."
00000000                            	endc
00000000                            	dc.b	$80,chanid
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch, vol
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Co-ord Flag Macros and Equates
00000000                            ; E0xx - Panning, AMS, FMS
00000000                            smpsPan macro direction,amsfms
00000000                            panNone set $00
00000000                            panRight set $40
00000000                            panLeft set $80
00000000                            panCentre set $C0
00000000                            panCenter set $C0 ; silly Americans :U
00000000                            	dc.b $E0,direction+amsfms
00000000                            	endm
00000000                            
00000000                            ; E1xx - Set channel frequency displacement to xx
00000000                            smpsAlterNote macro val
00000000                            	dc.b	$E1,val
00000000                            	endm
00000000                            
00000000                            ; E2xx - Useless
00000000                            smpsNop macro val
00000000                            	dc.b	$E2,val
00000000                            	endm
00000000                            ; Return (used after smpsCall)
00000000                            smpsReturn macro val
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Fade in previous song (ie. 1-Up)
00000000                            smpsFade macro val
00000000                            	dc.b	$E4
00000000                            	endm
00000000                            
00000000                            ; E5xx - Set channel tempo divider to xx
00000000                            smpsChanTempoDiv macro val
00000000                            	dc.b	$E5,val
00000000                            ;	endc
00000000                            	endm
00000000                            
00000000                            ; E6xx - Alter Volume by xx
00000000                            smpsAlterVol macro val
00000000                            	dc.b	$E6,val
00000000                            	endm
00000000                            
00000000                            sVol  macro val
00000000                            	$E6,val
00000000                            	endm
00000000                            ; E7 - Prevent attack of next note
00000000 =000000E7                  smpsNoAttack	EQU $E7
00000000                            
00000000                            ; E8xx - Set note fill to xx
00000000                            smpsNoteFill macro val
00000000                            		dc.b	$E8,val
00000000                            ;	endc
00000000                            	endm
00000000                            smpsAlterPitch 	macro	value
00000000                            	dc.b $E9,value
00000000                            	endm
00000000                            
00000000                            
00000000                            ; Set music tempo modifier to xx
00000000                            smpsSetTempoMod macro mod
00000000                            	dc.b	$EA,mod
00000000                            	endm
00000000                            
00000000                            ; Set music tempo divider to xx
00000000                            smpsSetTempoDiv macro val
00000000                            	dc.b	$EB,val
00000000                            	endm
00000000                            
00000000                            ; ECxx - Set Volume to xx
00000000                            smpsSetVol macro val
00000000                            	dc.b	$EC,val
00000000                            	endm
00000000                            
00000000                            ; Works on all drivers
00000000                            smpsPSGAlterVol macro vol
00000000                            	dc.b	$EC,vol
00000000                            	endm
00000000                            
00000000                            ; Clears pushing sound flag in S1
00000000                            smpsClearPush macro	
00000000                            	dc.b	$ED
00000000                            	endm
00000000                            
00000000                            ; Stops special SFX (S1 only) and restarts overridden music track
00000000                            smpsStopSpecial macro
00000000                            		dc.b	$EE
00000000                            	endm
00000000                            
00000000                            ; EFxx[yy] - Set Voice of FM channel to xx; xx < 0 means yy present
00000000                            smpsSetvoice macro voice,songID
00000000                            	if narg<=1
00000000                            		dc.b	$EF,voice
00000000                            	else
00000000                            		dc.b	$EF,voice|$80,songID+$81
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; F0wwxxyyzz - Modulation - ww: wait time - xx: modulation speed - yy: change per step - zz: number of steps
00000000                            smpsModSet macro wait,speed,change,step
00000000                            	dc.b	$F0
00000000                            	dc.b	wait,speed,change,step
00000000                            	endm
00000000                            
00000000                            ; Turn on Modulation
00000000                            smpsModOn macro
00000000                            	dc.b	$F1
00000000                            	endm
00000000                            
00000000                            ; F2 - End of channel
00000000                            smpsStop macro
00000000                            	dc.b	$F2
00000000                            	endm
00000000                            
00000000                            ; F3xx - PSG waveform to xx
00000000                            smpsPSGform macro form
00000000                            	dc.b	$F3,form
00000000                            	endm
00000000                            
00000000                            ; Turn off Modulation
00000000                            smpsModOff macro
00000000                            	dc.b	$F4
00000000                            	endm
00000000                            
00000000                            ; F5xx - PSG voice to xx
00000000                            smpsPSGvoice macro voice
00000000                            	dc.b	$F5,voice
00000000                            	endm
00000000                            
00000000                            ; F6xxxx - Jump to xxxx
00000000                            smpsJump macro loc
00000000                            	dc.b	$F6
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F7xxyyzzzz - Loop back to zzzz yy times, xx being the loop index for loop recursion fixing
00000000                            smpsLoop macro index,loops,loc
00000000                            	dc.b	$F7
00000000                            	dc.b	index,loops
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F8xxxx - Call pattern at xxxx, saving return point
00000000                            smpsCall macro loc
00000000                            	dc.b	$F8
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Alter Volume
00000000                            smpsFMAlterVol macro val1,val2
00000000                            	if narg<=1
00000000                            		dc.b	$E6,val1
00000000                            	else
00000000                            		dc.b	$E5,val1,val2
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; S3/S&K/S3D-only coordination flags
00000000                            ; Silences FM channel then stops as per smpsStop
00000000                            smpsStopFM macro
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Spindash Rev
00000000                            smpsSpindashRev macro
00000000                            	dc.b	$E9
00000000                            	endm
00000000                            	
00000000                            smpsPlayDACSample macro sample
00000000                            	dc.b	$EA,sample
00000000                            	endm
00000000                            	
00000000                            smpsConditionalJump macro index,loc
00000000                            	dc.b	$EB
00000000                            	dc.b	index
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Set note values to xx-$40
00000000                            smpsSetNote macro val
00000000                            	dc.b	$ED,val
00000000                            	endm
00000000                            
00000000                            smpsFMICommand macro reg,val
00000000                            	dc.b	$EE,reg,val
00000000                            	endm
00000000                            
00000000                            ; Set Modulation
00000000                            smpsModChange2 macro fmmod,psgmod
00000000                            	dc.b	$F1,fmmod,psgmod
00000000                            	endm
00000000                            
00000000                            ; Set Modulation
00000000                            smpsModChange macro val
00000000                            	dc.b	$F4,val
00000000                            	endm
00000000                            
00000000                            ; FCxxxx - Jump to xxxx
00000000                            smpsContinuousLoop macro loc
00000000                            	dc.b	$FC
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            smpsAlternateSMPS macro flag
00000000                            	dc.b	$FD,flag
00000000                            	endm
00000000                            
00000000                            smpsFM3SpecialMode macro ind1,ind2,ind3,ind4
00000000                            	dc.b	$FE,ind1,ind2,ind3,ind4
00000000                            	endm
00000000                            
00000000                            smpsPlaySound macro index
00000000                            	dc.b	$FF,$01,index
00000000                            	endm
00000000                            
00000000                            smpsHaltMusic macro flag
00000000                            	dc.b	$FF,$02,flag
00000000                            	endm
00000000                            
00000000                            smpsCopyData macro data,len
00000000                            	fail "Coord. Flag to copy data should not be used. Complain to Flamewing if any music uses it."
00000000                            	dc.b	$FF,$03
00000000                            	;dc.w	little_endian(data)
00000000                            	z80_ptr	data
00000000                            	dc.b	len
00000000                            	endm
00000000                            
00000000                            smpsSSGEG macro op1,op2,op3,op4
00000000                            	dc.b	$FF,$05,op1,op2,op3,op4
00000000                            	endm
00000000                            
00000000                            smpsFMFlutter macro tone,mask
00000000                            	dc.b	$FF,$06,tone,mask
00000000                            	endm
00000000                            
00000000                            smpsResetSpindashRev macro val
00000000                            	dc.b	$FF,$07
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Macros for FM instruments
00000000                            ; Voices - Feedback
00000000                            smpsVcFeedback macro val
00000000                            vcFeedback set \val
00000000                            	endm
00000000                            
00000000                            ; Voices - Algorithm
00000000                            smpsVcAlgorithm macro val
00000000                            vcAlgorithm set \val
00000000                            	endm
00000000                            
00000000                            smpsVcUnusedBits macro val
00000000                            vcUnusedBits set \val
00000000                            	endm
00000000                            
00000000                            ; Voices - Detune
00000000                            smpsVcDetune macro op1,op2,op3,op4
00000000                            vcDT1 set \op1
00000000                            vcDT2 set \op2
00000000                            vcDT3 set \op3
00000000                            vcDT4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Coarse-Frequency
00000000                            smpsVcCoarseFreq macro op1,op2,op3,op4
00000000                            vcCF1 set \op1
00000000                            vcCF2 set \op2
00000000                            vcCF3 set \op3
00000000                            vcCF4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Rate Scale
00000000                            smpsVcRateScale macro op1,op2,op3,op4
00000000                            vcRS1 set \op1
00000000                            vcRS2 set \op2
00000000                            vcRS3 set \op3
00000000                            vcRS4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Attack Rate
00000000                            smpsVcAttackRate macro op1,op2,op3,op4
00000000                            vcAR1 set \op1
00000000                            vcAR2 set \op2
00000000                            vcAR3 set \op3
00000000                            vcAR4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Amplitude Modulation
00000000                            smpsVcAmpMod macro op1,op2,op3,op4
00000000                            vcAM1 set \op1
00000000                            vcAM2 set \op2
00000000                            vcAM3 set \op3
00000000                            vcAM4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - First Decay Rate
00000000                            smpsVcDecayRate1 macro op1,op2,op3,op4
00000000                            vcD1R1 set \op1
00000000                            vcD1R2 set \op2
00000000                            vcD1R3 set \op3
00000000                            vcD1R4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Second Decay Rate
00000000                            smpsVcDecayRate2 macro op1,op2,op3,op4
00000000                            vcD2R1 set \op1
00000000                            vcD2R2 set \op2
00000000                            vcD2R3 set \op3
00000000                            vcD2R4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Decay Level
00000000                            smpsVcDecayLevel macro op1,op2,op3,op4
00000000                            vcDL1 set \op1
00000000                            vcDL2 set \op2
00000000                            vcDL3 set \op3
00000000                            vcDL4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Release Rate
00000000                            smpsVcReleaseRate macro op1,op2,op3,op4
00000000                            vcRR1 set \op1
00000000                            vcRR2 set \op2
00000000                            vcRR3 set \op3
00000000                            vcRR4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Total Level
00000000                            smpsVcTotalLevel macro op1,op2,op3,op4
00000000                            vcTL1 set \op1
00000000                            vcTL2 set \op2
00000000                            vcTL3 set \op3
00000000                            vcTL4 set \op4
00000000                            	dc.b	(vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
00000000                            ;   0     1     2     3     4     5     6     7
00000000                            ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
00000000                            vcTLMask4 set ((vcAlgorithm=7)<<7)
00000000                            vcTLMask3 set ((vcAlgorithm>=4)<<7)
00000000                            vcTLMask2 set ((vcAlgorithm>=5)<<7)
00000000                            vcTLMask1 set $80
00000000                            ;	dc.b	(vcDT4<<4)+vcCF4 ,(vcDT3<<4)+vcCF3 ,(vcDT2<<4)+vcCF2 ,(vcDT1<<4)+vcCF1
00000000                            ;	dc.b	(vcRS4<<6)+vcAR4 ,(vcRS3<<6)+vcAR3 ,(vcRS2<<6)+vcAR2 ,(vcRS1<<6)+vcAR1
00000000                            ;	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
00000000                            ;	dc.b	vcD2R4           ,vcD2R3           ,vcD2R2           ,vcD2R1
00000000                            ;	dc.b	(vcDL4<<4)+vcRR4 ,(vcDL3<<4)+vcRR3 ,(vcDL2<<4)+vcRR2 ,(vcDL1<<4)+vcRR1
00000000                            ;	dc.b	vcTL4|vcTLMask4  ,vcTL3|vcTLMask3  ,vcTL2|vcTLMask2  ,vcTL1|vcTLMask1
00000000                            	dc.b	(vcDT4<<4)+vcCF4,(vcDT3<<4)+vcCF3,(vcDT2<<4)+vcCF2,(vcDT1<<4)+vcCF1
00000000                            	dc.b	(vcRS4<<6)+vcAR4,(vcRS3<<6)+vcAR3,(vcRS2<<6)+vcAR2,(vcRS1<<6)+vcAR1
00000000                            	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
00000000                            	dc.b	vcD2R4,vcD2R3,vcD2R2,vcD2R1
00000000                            	dc.b	(vcDL4<<4)+vcRR4,(vcDL3<<4)+vcRR3,(vcDL2<<4)+vcRR2,(vcDL1<<4)+vcRR1
00000000                            	dc.b	vcTL4|vcTLMask4,vcTL3|vcTLMask3,vcTL2|vcTLMask2,vcTL1|vcTLMask1
00000000                            	endm
00000000                            
00000000                            
00000000                            
00000000                            ;level select constants (to not give the foward reference warning this was moved here)
00000000 =60860003                  lsscrpos = $60860003 ; level select screen position
00000000 =00240000                  lsoff = $240000 ; second row jump
00000000 =64C20003                  lsstpos = lsscrpos+$43C0000 ; sound test
00000000 =6C820003                  lsnppos = $6C820003	; now playing
00000000 =6D020003                  lsctrlpos = $6D020003 ; control help
00000000                            lsrow1size: equ (LMTSecondRow-LevelMenuText)/16
00000000                            lsrow2size: equ (LMTEnd-LMTSecondRow)/16
00000000                            lsselectable: equ ((LMTSelectableEnd-LevelMenuText)/16)-1 ; last selectable item
00000000                            ; level select item constants
00000000                            lssndtest: equ lsrow2size+8
00000000                            lswifi: equ lsrow2size+9
00000000                            
00000000                            
00000000                            ; NOTES FOR ANYONE MAKING CHARACTERS
00000000 =FFFFFFE8                  v_character = $FFFFFFE8
00000000                            ; pointers for:
00000000                            ; PLAYER MAPPINGS -> Player_Maps
00000000                            ; PLAYER ANIM SCRIPTS -> Player_Anim
00000000                            ; PLAYER ART -> Player_Art
00000000                            ; PLAYER DPLC -> Player_DPLC
00000000                            ; PLAYER PALETTE -> Player_Palette
00000000                            
00000000                            
00000000                            StartOfRom:
00000000 00FF FE00 0000 0000 0000+  Vectors:	dc.l $FFFE00, EntryPoint, BusError, AddressError
00000010 0000 0000 0000 0000 0000+  		dc.l IllegalInstr, ZeroDivide, ChkInstr, TrapvInstr
00000020 0000 0000 0000 0000 0000+  		dc.l PrivilegeViol, Trace, Line1010Emu,	Line1111Emu
00000030 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000040 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000050 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000060 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorTrap, ErrorTrap,	ErrorTrap
00000070 0000 0000 0000 0000 0000+  		dc.l PalToCRAM,	ErrorTrap, loc_B10, ErrorTrap
00000080 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000090 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000A0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000B0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000C0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000D0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000E0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000F0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000100 5345 4741 204D 4547 4120+  Console:	dc.b 'SEGA MEGA DRIVE ' ; Hardware system ID
00000110 2843 2949 444B 2032 3030+  Date:		dc.b '(C)IDK 2001.SEP '
00000120 686F 7720 746F 2064 6973+  Title_Local:	dc.b 'how to disassemble vhs tapes on a slab of wood  ' ; Domestic name
00000150 686F 7720 746F 2064 6973+  Title_Int:	dc.b 'how to disassemble vhs tapes on a slab of wood  '
00000180 474D 2030 3030 3031 3030+  Serial:		dc.b 'GM 00001009-00'   ; Serial/version number
0000018E 0000                       Checksum:	dc.w 0
00000190 4A20 2020 2020 2020 2020+  		dc.b 'J               ' ; I/O support
000001A0 0000 0000                  RomStartLoc:	dc.l StartOfRom		; ROM start
000001A4 0000 0000                  RomEndLoc:	dc.l EndOfRom-1		; ROM end
000001A8 00FF 0000                  RamStartLoc:	dc.l $FF0000		; RAM start
000001AC 00FF FFFF                  RamEndLoc:	dc.l $FFFFFF		; RAM end
000001B0 2020 2020                  SRAMSupport:	dc.l $20202020		; change to $5241E020 to create	SRAM
000001B4 2020 2020                  		dc.l $20202020		; SRAM start
000001B8 2020 2020                  		dc.l $20202020		; SRAM end
000001BC 2020 2020 2020 2020 2020+  Notes:		dc.b '                                                    '
000001F0 4A55 4520 2020 2020 2020+  Region:		dc.b 'JUE             ' ; Region
00000200                            
00000200                            ; ===========================================================================
00000200                            
00000200                            ErrorTrap:
00000200 4E71                       		nop	
00000202 4E71                       		nop	
00000204 60FA                       		bra.s	ErrorTrap
00000206                            ; ===========================================================================
00000206                            
00000206                            EntryPoint:
00000206 4AB9 00A1 0008             		tst.l	($A10008).l	; test port A control
0000020C 6600                       		bne.s	PortA_Ok
0000020E 4A79 00A1 000C             		tst.w	($A1000C).l	; test port C control
00000214                            
00000214                            PortA_Ok:
00000214 6600                       		bne.s	PortC_Ok
00000216 4BFA 0000                  		lea	SetupValues(pc),a5
0000021A 4C9D 00E0                  		movem.w	(a5)+,d5-d7
0000021E 4CDD 1F00                  		movem.l	(a5)+,a0-a4
00000222 1029 EF01                  		move.b	-$10FF(a1),d0	; get hardware version
00000226 0200 000F                  		andi.b	#$F,d0
0000022A 6700                       		beq.s	SkipSecurity
0000022C 237C 5345 4741 2F00        		move.l	#'SEGA',$2F00(a1)
00000234                            
00000234                            SkipSecurity:
00000234 3014                       		move.w	(a4),d0		; check	if VDP works
00000236 7000                       		moveq	#0,d0
00000238 2C40                       		movea.l	d0,a6
0000023A 4E66                       		move.l	a6,usp		; set usp to $0
0000023C 7217                       		moveq	#$17,d1
0000023E                            
0000023E                            VDPInitLoop:
0000023E 1A1D                       		move.b	(a5)+,d5	; add $8000 to value
00000240 3885                       		move.w	d5,(a4)		; move value to	VDP register
00000242 DA47                       		add.w	d7,d5		; next register
00000244 51C9 FFF8                  		dbf	d1,VDPInitLoop
00000248 289D                       		move.l	(a5)+,(a4)
0000024A 3680                       		move.w	d0,(a3)		; clear	the screen
0000024C 3287                       		move.w	d7,(a1)		; stop the Z80
0000024E 3487                       		move.w	d7,(a2)		; reset	the Z80
00000250                            
00000250                            WaitForZ80:
00000250 0111                       		btst	d0,(a1)		; has the Z80 stopped?
00000252 66FC                       		bne.s	WaitForZ80	; if not, branch
00000254 7425                       		moveq	#$25,d2
00000256                            
00000256                            Z80InitLoop:
00000256 10DD                       		move.b	(a5)+,(a0)+
00000258 51CA FFFC                  		dbf	d2,Z80InitLoop
0000025C 3480                       		move.w	d0,(a2)
0000025E 3280                       		move.w	d0,(a1)		; start	the Z80
00000260 3487                       		move.w	d7,(a2)		; reset	the Z80
00000262                            
00000262                            ClrRAMLoop:
00000262 2D00                       		move.l	d0,-(a6)
00000264 51CE FFFC                  		dbf	d6,ClrRAMLoop	; clear	the entire RAM
00000268 289D                       		move.l	(a5)+,(a4)	; set VDP display mode and increment
0000026A 289D                       		move.l	(a5)+,(a4)	; set VDP to CRAM write
0000026C 761F                       		moveq	#$1F,d3
0000026E                            
0000026E                            ClrCRAMLoop:
0000026E 2680                       		move.l	d0,(a3)
00000270 51CB FFFC                  		dbf	d3,ClrCRAMLoop	; clear	the CRAM
00000274 289D                       		move.l	(a5)+,(a4)
00000276 7813                       		moveq	#$13,d4
00000278                            
00000278                            ClrVDPStuff:
00000278 2680                       		move.l	d0,(a3)
0000027A 51CC FFFC                  		dbf	d4,ClrVDPStuff
0000027E 7A03                       		moveq	#3,d5
00000280                            
00000280                            PSGInitLoop:
00000280 175D 0011                  		move.b	(a5)+,$11(a3)	; reset	the PSG
00000284 51CD FFFA                  		dbf	d5,PSGInitLoop
00000288 3480                       		move.w	d0,(a2)
0000028A 4CD6 7FFF                  		movem.l	(a6),d0-a6	; clear	all registers
0000028E 46FC 2700                  		move	#$2700,sr	; set the sr
00000292                            
00000292                            PortC_Ok:
00000292 6000                       		bra.s	GameProgram
00000294                            ; ===========================================================================
00000294 8000                       SetupValues:	dc.w $8000		; XREF: PortA_Ok
00000296 3FFF                       		dc.w $3FFF
00000298 0100                       		dc.w $100
0000029A                            
0000029A 00A0 0000                  		dc.l $A00000		; start	of Z80 RAM
0000029E 00A1 1100                  		dc.l $A11100		; Z80 bus request
000002A2 00A1 1200                  		dc.l $A11200		; Z80 reset
000002A6 00C0 0000                  		dc.l $C00000
000002AA 00C0 0004                  		dc.l $C00004		; address for VDP registers
000002AE                            
000002AE 0414 303C                  		dc.b 4,	$14, $30, $3C	; values for VDP registers
000002B2 076C 0000                  		dc.b 7,	$6C, 0,	0
000002B6 0000 FF00                  		dc.b 0,	0, $FF,	0
000002BA 8137 0001                  		dc.b $81, $37, 0, 1
000002BE 0100 00FF                  		dc.b 1,	0, 0, $FF
000002C2 FF00 0080                  		dc.b $FF, 0, 0,	$80
000002C6                            
000002C6 4000 0080                  		dc.l $40000080
000002CA                            
000002CA AF01 D91F 1127 0021 2600+  		dc.b $AF, 1, $D9, $1F, $11, $27, 0, $21, $26, 0, $F9, $77 ; Z80	instructions
000002D6 EDB0 DDE1 FDE1 ED47 ED4F   		dc.b $ED, $B0, $DD, $E1, $FD, $E1, $ED,	$47, $ED, $4F
000002E0 D1E1 F108 D9C1 D1E1 F1F9+  		dc.b $D1, $E1, $F1, 8, $D9, $C1, $D1, $E1, $F1,	$F9, $F3
000002EB ED56 36E9 E9               		dc.b $ED, $56, $36, $E9, $E9
000002F0                            
000002F0 8104                       		dc.w $8104		; value	for VDP	display	mode
000002F2 8F02                       		dc.w $8F02		; value	for VDP	increment
000002F4 C000 0000                  		dc.l $C0000000		; value	for CRAM write mode
000002F8 4000 0010                  		dc.l $40000010
000002FC                            
000002FC 9FBF DFFF                  		dc.b $9F, $BF, $DF, $FF	; values for PSG channel volumes
00000300                            ; ===========================================================================
00000300                            
00000300                            GameProgram:
00000300 4A79 00C0 0004             		tst.w	($C00004).l
00000306 0839 0006 00A1 000D        		btst	#6,($A1000D).l
0000030E 6700                       		beq.s	CheckSumCheck
00000310 0CB8 696E 6974 FFFC        		cmpi.l	#'init',($FFFFFFFC).w ; has checksum routine already run?
00000318 6700 0000                  		beq.w	GameInit	; if yes, branch
0000031C                            
0000031C                            CheckSumCheck:
0000031C 207C 0000 0200             		movea.l	#ErrorTrap,a0	; start	checking bytes after the header	($200)
00000322 227C 0000 01A4             		movea.l	#RomEndLoc,a1	; stop at end of ROM
00000328 2011                       		move.l	(a1),d0
0000032A 7200                       		moveq	#0,d1
0000032C                            
0000032C                            loc_32C:
0000032C D258                       		add.w	(a0)+,d1
0000032E B088                       		cmp.l	a0,d0
00000330 64FA                       		bcc.s	loc_32C
00000332 227C 0000 018E             		movea.l	#Checksum,a1	; read the checksum
00000338 B251                       		cmp.w	(a1),d1		; compare correct checksum to the one in ROM
0000033A 6600 0000                  		bne.w	CheckSumError	; if they don't match, branch
0000033E 4DF8 FE00                  		lea	($FFFFFE00).w,a6
00000342 7E00                       		moveq	#0,d7
00000344 3C3C 007F                  		move.w	#$7F,d6
00000348                            
00000348                            loc_348:
00000348 2CC7                       		move.l	d7,(a6)+
0000034A 51CE FFFC                  		dbf	d6,loc_348
0000034E 1039 00A1 0001             		move.b	($A10001).l,d0
00000354 0200 00C0                  		andi.b	#$C0,d0
00000358 11C0 FFF8                  		move.b	d0,($FFFFFFF8).w
0000035C 21FC 696E 6974 FFFC        		move.l	#'init',($FFFFFFFC).w ; set flag so checksum won't be run again
00000364                            
00000364                            GameInit:
00000364 4DF9 00FF 0000             		lea	($FF0000).l,a6
0000036A 7E00                       		moveq	#0,d7
0000036C 3C3C 3F7F                  		move.w	#$3F7F,d6
00000370                            
00000370                            GameClrRAM:
00000370 2CC7                       		move.l	d7,(a6)+
00000372 51CE FFFC                  		dbf	d6,GameClrRAM	; fill RAM ($0000-$FDFF) with $0
00000376 6100 0000                  		bsr.w	VDPSetupGame
0000037A 6100 0000                  		bsr.w	SoundDriverLoad
0000037E 6100 0000                  		bsr.w	JoypadInit
00000382 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set Game Mode to Sega Screen
00000388                            
00000388                            	;	move.b	#$20,($FFFFF600).w ; set Game Mode to Minecraft
00000388                            
00000388                            MainGameLoop:
00000388 1038 F600                  		move.b	($FFFFF600).w,d0 ; load	Game Mode
0000038C 0240 003C                  		andi.w	#$3C,d0
00000390 4EBB 0000                  		jsr	GameModeArray(pc,d0.w) ; jump to apt location in ROM
00000394 60F2                       		bra.s	MainGameLoop
00000396                            ; ===========================================================================
00000396                            ; ---------------------------------------------------------------------------
00000396                            ; Main game mode array
00000396                            ; ---------------------------------------------------------------------------
00000396                            
00000396                            GameModeArray:
00000396 6000 0000                  		bra.w	SegaScreen	; Sega Screen ($00)
0000039A                            ; ===========================================================================
0000039A 6000 0000                  		bra.w	TitleScreen	; Title	Screen ($04)
0000039E                            ; ===========================================================================
0000039E 6000 0000                  		bra.w	Level		; Demo Mode ($08)
000003A2                            ; ===========================================================================
000003A2 6000 0000                  		bra.w	Level		; Normal Level ($0C)
000003A6                            ; ===========================================================================
000003A6 6000 0000                  		bra.w	SpecialStage	; Special Stage	($10)
000003AA                            ; ===========================================================================
000003AA 6000 0000                  		bra.w	ContinueScreen	; Continue Screen ($14)
000003AE                            ; ===========================================================================
000003AE 6000 0000                  		bra.w	EndingSequence	; End of game sequence ($18)
000003B2                            ; ===========================================================================
000003B2 6000 0000                  		bra.w	Credits		; Credits ($1C)
000003B6                            ; ===========================================================================
000003B6 4EF9 0000 0000             		jmp	Minecraft	; Minecraft ($20)	
000003BC                            ; ===========================================================================
000003BC                            
000003BC                            CheckSumError:
000003BC 6100 0000                  		bsr.w	VDPSetupGame
000003C0 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
000003CA 7E3F                       		moveq	#$3F,d7
000003CC                            
000003CC                            CheckSum_Red:
000003CC 33FC 000E 00C0 0000        		move.w	#$E,($C00000).l	; fill screen with colour red
000003D4 51CF FFF6                  		dbf	d7,CheckSum_Red	; repeat $3F more times
000003D8                            
000003D8                            CheckSum_Loop:
000003D8 60FE                       		bra.s	CheckSum_Loop
000003DA                            ; ===========================================================================
000003DA                            
000003DA                            BusError:
000003DA 11FC 0002 FC44             		move.b	#2,($FFFFFC44).w
000003E0 6000                       		bra.s	loc_43A
000003E2                            ; ===========================================================================
000003E2                            
000003E2                            AddressError:
000003E2 11FC 0004 FC44             		move.b	#4,($FFFFFC44).w
000003E8 6000                       		bra.s	loc_43A
000003EA                            ; ===========================================================================
000003EA                            
000003EA                            IllegalInstr:
000003EA 11FC 0006 FC44             		move.b	#6,($FFFFFC44).w
000003F0 54AF 0002                  		addq.l	#2,2(sp)
000003F4 6000                       		bra.s	loc_462
000003F6                            ; ===========================================================================
000003F6                            
000003F6                            ZeroDivide:
000003F6 11FC 0008 FC44             		move.b	#8,($FFFFFC44).w
000003FC 6000                       		bra.s	loc_462
000003FE                            ; ===========================================================================
000003FE                            
000003FE                            ChkInstr:
000003FE 11FC 000A FC44             		move.b	#$A,($FFFFFC44).w
00000404 6000                       		bra.s	loc_462
00000406                            ; ===========================================================================
00000406                            
00000406                            TrapvInstr:
00000406 11FC 000C FC44             		move.b	#$C,($FFFFFC44).w
0000040C 6000                       		bra.s	loc_462
0000040E                            ; ===========================================================================
0000040E                            
0000040E                            PrivilegeViol:
0000040E 11FC 000E FC44             		move.b	#$E,($FFFFFC44).w
00000414 6000                       		bra.s	loc_462
00000416                            ; ===========================================================================
00000416                            
00000416                            Trace:
00000416 11FC 0010 FC44             		move.b	#$10,($FFFFFC44).w
0000041C 6000                       		bra.s	loc_462
0000041E                            ; ===========================================================================
0000041E                            
0000041E                            Line1010Emu:
0000041E 11FC 0012 FC44             		move.b	#$12,($FFFFFC44).w
00000424 54AF 0002                  		addq.l	#2,2(sp)
00000428 6000                       		bra.s	loc_462
0000042A                            ; ===========================================================================
0000042A                            
0000042A                            Line1111Emu:
0000042A 11FC 0014 FC44             		move.b	#$14,($FFFFFC44).w
00000430 54AF 0002                  		addq.l	#2,2(sp)
00000434 6000                       		bra.s	loc_462
00000436                            ; ===========================================================================
00000436                            
00000436                            ErrorExcept:
00000436 11FC 0000 FC44             		move.b	#0,($FFFFFC44).w
0000043C 6000                       		bra.s	loc_462
0000043E                            ; ===========================================================================
0000043E                            
0000043E                            loc_43A:
0000043E 46FC 2700                  		move	#$2700,sr
00000442 544F                       		addq.w	#2,sp
00000444 21DF FC40                  		move.l	(sp)+,($FFFFFC40).w
00000448 544F                       		addq.w	#2,sp
0000044A 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
00000450 6100 0000                  		bsr.w	ShowErrorMsg
00000454 202F 0002                  		move.l	2(sp),d0
00000458 6100 0000                  		bsr.w	sub_5BA
0000045C 2038 FC40                  		move.l	($FFFFFC40).w,d0
00000460 6100 0000                  		bsr.w	sub_5BA
00000464 6000                       		bra.s	loc_478
00000466                            ; ===========================================================================
00000466                            
00000466                            loc_462:
00000466 46FC 2700                  		move	#$2700,sr
0000046A 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
00000470 6100 0000                  		bsr.w	ShowErrorMsg
00000474 202F 0002                  		move.l	2(sp),d0
00000478 6100 0000                  		bsr.w	sub_5BA
0000047C                            
0000047C                            loc_478:
0000047C 6100 0000                  		bsr.w	ErrorWaitForC
00000480 4CF8 FFFF FC00             		movem.l	($FFFFFC00).w,d0-a7
00000486 46FC 2300                  		move	#$2300,sr
0000048A 4E73                       		rte	
0000048C                            
0000048C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000048C                            
0000048C                            
0000048C                            ShowErrorMsg:				; XREF: loc_43A; loc_462
0000048C 4DF9 00C0 0000             		lea	($C00000).l,a6
00000492 23FC 7800 0003 00C0 0004   		move.l	#$78000003,($C00004).l
0000049C 41F9 0000 0000             		lea	(Art_Text).l,a0
000004A2 323C 027F                  		move.w	#$27F,d1
000004A6                            
000004A6                            Error_LoadGfx:
000004A6 3C98                       		move.w	(a0)+,(a6)
000004A8 51C9 FFFC                  		dbf	d1,Error_LoadGfx
000004AC 7000                       		moveq	#0,d0		; clear	d0
000004AE 1038 FC44                  		move.b	($FFFFFC44).w,d0 ; load	error code
000004B2 303B 0000                  		move.w	ErrorText(pc,d0.w),d0
000004B6 41FB 0000                  		lea	ErrorText(pc,d0.w),a0
000004BA 23FC 4604 0003 00C0 0004   		move.l	#$46040003,($C00004).l ; position
000004C4 7212                       		moveq	#$12,d1		; number of characters
000004C6                            
000004C6                            Error_LoopChars:
000004C6 7000                       		moveq	#0,d0
000004C8 1018                       		move.b	(a0)+,d0
000004CA 0640 0790                  		addi.w	#$790,d0
000004CE 3C80                       		move.w	d0,(a6)
000004D0 51C9 FFF4                  		dbf	d1,Error_LoopChars ; repeat for	number of characters
000004D4 4E75                       		rts	
000004D6                            ; End of function ShowErrorMsg
000004D6                            
000004D6                            ; ===========================================================================
000004D6 0000 0000                  ErrorText:	dc.w asc_4E8-ErrorText,	asc_4FB-ErrorText ; XREF: ShowErrorMsg
000004DA 0000 0000                  		dc.w asc_50E-ErrorText,	asc_521-ErrorText
000004DE 0000 0000                  		dc.w asc_534-ErrorText,	asc_547-ErrorText
000004E2 0000 0000                  		dc.w asc_55A-ErrorText,	asc_56D-ErrorText
000004E6 0000 0000                  		dc.w asc_580-ErrorText,	asc_593-ErrorText
000004EA 0000                       		dc.w asc_5A6-ErrorText
000004EC 4552 524F 5220 4558 4345+  asc_4E8:	dc.b 'ERROR EXCEPTION    '
000004FF 4255 5320 4552 524F 5220+  asc_4FB:	dc.b 'BUS ERROR          '
00000512 4144 4452 4553 5320 4552+  asc_50E:	dc.b 'ADDRESS ERROR      '
00000525 494C 4C45 4741 4C20 494E+  asc_521:	dc.b 'ILLEGAL INSTRUCTION'
00000538 4045 524F 2044 4956 4944+  asc_534:	dc.b '@ERO DIVIDE        '
0000054B 4348 4B20 494E 5354 5255+  asc_547:	dc.b 'CHK INSTRUCTION    '
0000055E 5452 4150 5620 494E 5354+  asc_55A:	dc.b 'TRAPV INSTRUCTION  '
00000571 5052 4956 494C 4547 4520+  asc_56D:	dc.b 'PRIVILEGE VIOLATION'
00000584 5452 4143 4520 2020 2020+  asc_580:	dc.b 'TRACE              '
00000597 4C49 4E45 2031 3031 3020+  asc_593:	dc.b 'LINE 1010 EMULATOR '
000005AA 4C49 4E45 2031 3131 3120+  asc_5A6:	dc.b 'LINE 1111 EMULATOR '
000005BE 00                         		even
000005BE                            
000005BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005BE                            
000005BE                            
000005BE                            sub_5BA:				; XREF: loc_43A; loc_462
000005BE 3CBC 07CA                  		move.w	#$7CA,(a6)
000005C2 7407                       		moveq	#7,d2
000005C4                            
000005C4                            loc_5C0:
000005C4 E998                       		rol.l	#4,d0
000005C6 6100                       		bsr.s	sub_5CA
000005C8 51CA FFFA                  		dbf	d2,loc_5C0
000005CC 4E75                       		rts	
000005CE                            ; End of function sub_5BA
000005CE                            
000005CE                            
000005CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005CE                            
000005CE                            
000005CE                            sub_5CA:				; XREF: sub_5BA
000005CE 3200                       		move.w	d0,d1
000005D0 0241 000F                  		andi.w	#$F,d1
000005D4 0C41 000A                  		cmpi.w	#$A,d1
000005D8 6500                       		bcs.s	loc_5D8
000005DA 5E41                       		addq.w	#7,d1
000005DC                            
000005DC                            loc_5D8:
000005DC 0641 07C0                  		addi.w	#$7C0,d1
000005E0 3C81                       		move.w	d1,(a6)
000005E2 4E75                       		rts	
000005E4                            ; End of function sub_5CA
000005E4                            
000005E4                            
000005E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005E4                            
000005E4                            
000005E4                            ErrorWaitForC:				; XREF: loc_478
000005E4 6100 0000                  		bsr.w	ReadJoypads
000005E8 0C38 0020 F605             		cmpi.b	#$20,($FFFFF605).w ; is	button C pressed?
000005EE 6600 FFF4                  		bne.w	ErrorWaitForC	; if not, branch
000005F2 4E75                       		rts	
000005F4                            ; End of function ErrorWaitForC
000005F4                            
000005F4                            ; ===========================================================================
000005F4                            
000005F4                            Art_Text:	incbin	artunc\menutext.bin	; text used in level select and debug mode
00000D34                            Art_Text_end:		even
00000D34                            
00000D34                            ; ===========================================================================
00000D34                            ;VBlank
00000D34                            loc_B10:				; XREF: Vectors
00000D34 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00000D38 4A38 F62A                  		tst.b	($FFFFF62A).w
00000D3C 6700                       		beq.s	loc_B88
00000D3E 3039 00C0 0004             		move.w	($C00004).l,d0
00000D44 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00000D4E 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00000D56 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000D5C 6700                       		beq.s	loc_B42
00000D5E 303C 0700                  		move.w	#$700,d0
00000D62                            
00000D62                            loc_B3E:
00000D62 51C8 FFFE                  		dbf	d0,loc_B3E
00000D66                            
00000D66                            loc_B42:
00000D66 1038 F62A                  		move.b	($FFFFF62A).w,d0
00000D6A 11FC 0000 F62A             		move.b	#0,($FFFFF62A).w
00000D70 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000D76 0240 003E                  		andi.w	#$3E,d0
00000D7A 303B 0000                  		move.w	off_B6E(pc,d0.w),d0
00000D7E 4EBB 0000                  		jsr	off_B6E(pc,d0.w)
00000D82                            
00000D82                            loc_B5E:				; XREF: loc_B88
00000D82 4EB9 0000 0000             		jsr	sub_71B4C
00000D88                            
00000D88                            loc_B64:				; XREF: loc_D50
00000D88 52B8 FE0C                  		addq.l	#1,($FFFFFE0C).w
00000D8C 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00000D90 4E73                       		rte	
00000D92                            ; ===========================================================================
00000D92 0000 0000                  off_B6E:	dc.w loc_B88-off_B6E, loc_C32-off_B6E
00000D96 0000 0000                  		dc.w loc_C44-off_B6E, loc_C5E-off_B6E
00000D9A 0000 0000                  		dc.w loc_C6E-off_B6E, loc_DA6-off_B6E
00000D9E 0000 0000                  		dc.w loc_E72-off_B6E, loc_F8A-off_B6E
00000DA2 0000 0000                  		dc.w loc_C64-off_B6E, loc_F9A-off_B6E
00000DA6 0000 0000                  		dc.w loc_C36-off_B6E, loc_FA6-off_B6E
00000DAA 0000                       		dc.w loc_E72-off_B6E
00000DAC                            ; ===========================================================================
00000DAC                            
00000DAC                            loc_B88:				; XREF: loc_B10; off_B6E
00000DAC 0C38 008C F600             		cmpi.b	#$8C,($FFFFF600).w
00000DB2 6700                       		beq.s	loc_B9A
00000DB4 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00000DBA 6600 FFC6                  		bne.w	loc_B5E
00000DBE                            
00000DBE                            loc_B9A:
00000DBE 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ ?
00000DC4 6600 FFBC                  		bne.w	loc_B5E		; if not, branch
00000DC8 3039 00C0 0004             		move.w	($C00004).l,d0
00000DCE 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000DD4 6700                       		beq.s	loc_BBA
00000DD6 303C 0700                  		move.w	#$700,d0
00000DDA                            
00000DDA                            loc_BB6:
00000DDA 51C8 FFFE                  		dbf	d0,loc_BB6
00000DDE                            
00000DDE                            loc_BBA:
00000DDE 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000DE4 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l
00000DEC                            
00000DEC                            loc_BC8:
00000DEC 0839 0000 00A1 1100        		btst	#0,($A11100).l
00000DF4 66F6                       		bne.s	loc_BC8
00000DF6 4A38 F64E                  		tst.b	($FFFFF64E).w
00000DFA 6600                       		bne.s	loc_BFE
00000DFC 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E02 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000E08 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000E0E 3ABC 977F                  		move.w	#$977F,(a5)
00000E12 3ABC C000                  		move.w	#$C000,(a5)
00000E16 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000E1C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E20 6000                       		bra.s	loc_C22
00000E22                            ; ===========================================================================
00000E22                            
00000E22                            loc_BFE:				; XREF: loc_BC8
00000E22 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E28 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000E2E 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000E34 3ABC 977F                  		move.w	#$977F,(a5)
00000E38 3ABC C000                  		move.w	#$C000,(a5)
00000E3C 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000E42 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E46                            
00000E46                            loc_C22:				; XREF: loc_BC8
00000E46 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000E4A 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000E52 6000 FF2E                  		bra.w	loc_B5E
00000E56                            ; ===========================================================================
00000E56                            
00000E56                            loc_C32:				; XREF: off_B6E
00000E56 6100 0000                  		bsr.w	sub_106E
00000E5A                            
00000E5A                            loc_C36:				; XREF: off_B6E
00000E5A 4A78 F614                  		tst.w	($FFFFF614).w
00000E5E 6700 0000                  		beq.w	locret_C42
00000E62 5378 F614                  		subq.w	#1,($FFFFF614).w
00000E66                            
00000E66                            locret_C42:
00000E66 4E75                       		rts	
00000E68                            ; ===========================================================================
00000E68                            
00000E68                            loc_C44:				; XREF: off_B6E
00000E68 6100 0000                  		bsr.w	sub_106E
00000E6C 6100 0000                  		bsr.w	sub_6886
00000E70 6100 0000                  		bsr.w	sub_1642
00000E74 4A78 F614                  		tst.w	($FFFFF614).w
00000E78 6700 0000                  		beq.w	locret_C5C
00000E7C 5378 F614                  		subq.w	#1,($FFFFF614).w
00000E80                            
00000E80                            locret_C5C:
00000E80 4E75                       		rts	
00000E82                            ; ===========================================================================
00000E82                            
00000E82                            loc_C5E:				; XREF: off_B6E
00000E82 6100 0000                  		bsr.w	sub_106E
00000E86 4E75                       		rts	
00000E88                            ; ===========================================================================
00000E88                            
00000E88                            loc_C64:				; XREF: off_B6E
00000E88 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)	?
00000E8E 6700 0000                  		beq.w	loc_DA6		; if yes, branch
00000E92                            
00000E92                            loc_C6E:				; XREF: off_B6E
00000E92 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000E9A                            
00000E9A                            loc_C76:
00000E9A 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000EA2 66F6                       		bne.s	loc_C76		; if not, branch
00000EA4 6100 0000                  		bsr.w	ReadJoypads
00000EA8 4A38 F64E                  		tst.b	($FFFFF64E).w
00000EAC 6600                       		bne.s	loc_CB0
00000EAE 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EB4 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000EBA 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000EC0 3ABC 977F                  		move.w	#$977F,(a5)
00000EC4 3ABC C000                  		move.w	#$C000,(a5)
00000EC8 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000ECE 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000ED2 6000                       		bra.s	loc_CD4
00000ED4                            ; ===========================================================================
00000ED4                            
00000ED4                            loc_CB0:				; XREF: loc_C76
00000ED4 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EDA 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000EE0 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000EE6 3ABC 977F                  		move.w	#$977F,(a5)
00000EEA 3ABC C000                  		move.w	#$C000,(a5)
00000EEE 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000EF4 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000EF8                            
00000EF8                            loc_CD4:				; XREF: loc_C76
00000EF8 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000EFC 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F02 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000F08 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000F0E 3ABC 977F                  		move.w	#$977F,(a5)
00000F12 3ABC 7C00                  		move.w	#$7C00,(a5)
00000F16 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F1C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F20 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F26 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000F2C 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000F32 3ABC 977F                  		move.w	#$977F,(a5)
00000F36 3ABC 7800                  		move.w	#$7800,(a5)
00000F3A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F40 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F44 4A38 F767                  		tst.b	($FFFFF767).w
00000F48 6700                       		beq.s	loc_D50
00000F4A 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F50 2ABC 9401 9370             		move.l	#$94019370,(a5)
00000F56 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00000F5C 3ABC 977F                  		move.w	#$977F,(a5)
00000F60 3ABC 7000                  		move.w	#$7000,(a5)
00000F64 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F6A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F6E 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00000F74                            
00000F74                            loc_D50:
00000F74 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000F7C 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00000F82 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00000F88 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00000F8E 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00000F94 0C38 0060 F625             		cmpi.b	#$60,($FFFFF625).w
00000F9A 6400                       		bcc.s	Demo_Time
00000F9C 11FC 0001 F64F             		move.b	#1,($FFFFF64F).w
00000FA2 588F                       		addq.l	#4,sp
00000FA4 6000 FDE2                  		bra.w	loc_B64
00000FA8                            
00000FA8                            ; ---------------------------------------------------------------------------
00000FA8                            ; Subroutine to	run a demo for an amount of time
00000FA8                            ; ---------------------------------------------------------------------------
00000FA8                            
00000FA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000FA8                            
00000FA8                            
00000FA8                            Demo_Time:				; XREF: loc_D50; PalToCRAM
00000FA8 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000FAC 4EB9 0000 0000             		jsr	AniArt_Load
00000FB2 4EB9 0000 0000             		jsr	HudUpdate
00000FB8 6100 0000                  		bsr.w	sub_165E
00000FBC 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00000FC0 6700 0000                  		beq.w	Demo_TimeEnd	; if not, branch
00000FC4 5378 F614                  		subq.w	#1,($FFFFF614).w ; subtract 1 from time	left
00000FC8                            
00000FC8                            Demo_TimeEnd:
00000FC8 4E75                       		rts	
00000FCA                            ; End of function Demo_Time
00000FCA                            
00000FCA                            ; ===========================================================================
00000FCA                            
00000FCA                            loc_DA6:				; XREF: off_B6E
00000FCA 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000FD2                            
00000FD2                            loc_DAE:
00000FD2 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000FDA 66F6                       		bne.s	loc_DAE		; if not, branch
00000FDC 6100 0000                  		bsr.w	ReadJoypads
00000FE0 4BF9 00C0 0004             		lea	($C00004).l,a5
00000FE6 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000FEC 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000FF2 3ABC 977F                  		move.w	#$977F,(a5)
00000FF6 3ABC C000                  		move.w	#$C000,(a5)
00000FFA 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00001000 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001004 4BF9 00C0 0004             		lea	($C00004).l,a5
0000100A 2ABC 9401 9340             		move.l	#$94019340,(a5)
00001010 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001016 3ABC 977F                  		move.w	#$977F,(a5)
0000101A 3ABC 7800                  		move.w	#$7800,(a5)
0000101E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001024 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001028 4BF9 00C0 0004             		lea	($C00004).l,a5
0000102E 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001034 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
0000103A 3ABC 977F                  		move.w	#$977F,(a5)
0000103E 3ABC 7C00                  		move.w	#$7C00,(a5)
00001042 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001048 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000104C 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00001054 6100 0000                  		bsr.w	PalCycle_SS
00001058 4A38 F767                  		tst.b	($FFFFF767).w
0000105C 6700                       		beq.s	loc_E64
0000105E 4BF9 00C0 0004             		lea	($C00004).l,a5
00001064 2ABC 9401 9370             		move.l	#$94019370,(a5)
0000106A 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00001070 3ABC 977F                  		move.w	#$977F,(a5)
00001074 3ABC 7000                  		move.w	#$7000,(a5)
00001078 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000107E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001082 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00001088                            
00001088                            loc_E64:
00001088 4A78 F614                  		tst.w	($FFFFF614).w
0000108C 6700 0000                  		beq.w	locret_E70
00001090 5378 F614                  		subq.w	#1,($FFFFF614).w
00001094                            
00001094                            locret_E70:
00001094 4E75                       		rts	
00001096                            ; ===========================================================================
00001096                            
00001096                            loc_E72:				; XREF: off_B6E
00001096 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
0000109E                            
0000109E                            loc_E7A:
0000109E 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
000010A6 66F6                       		bne.s	loc_E7A		; if not, branch
000010A8 6100 0000                  		bsr.w	ReadJoypads
000010AC 4A38 F64E                  		tst.b	($FFFFF64E).w
000010B0 6600                       		bne.s	loc_EB4
000010B2 4BF9 00C0 0004             		lea	($C00004).l,a5
000010B8 2ABC 9400 9340             		move.l	#$94009340,(a5)
000010BE 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
000010C4 3ABC 977F                  		move.w	#$977F,(a5)
000010C8 3ABC C000                  		move.w	#$C000,(a5)
000010CC 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000010D2 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000010D6 6000                       		bra.s	loc_ED8
000010D8                            ; ===========================================================================
000010D8                            
000010D8                            loc_EB4:				; XREF: loc_E7A
000010D8 4BF9 00C0 0004             		lea	($C00004).l,a5
000010DE 2ABC 9400 9340             		move.l	#$94009340,(a5)
000010E4 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
000010EA 3ABC 977F                  		move.w	#$977F,(a5)
000010EE 3ABC C000                  		move.w	#$C000,(a5)
000010F2 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000010F8 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000010FC                            
000010FC                            loc_ED8:				; XREF: loc_E7A
000010FC 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00001100 4BF9 00C0 0004             		lea	($C00004).l,a5
00001106 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
0000110C 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00001112                            
00001112                            loc_EEE:
00001112 3ABC 977F                  		move.w	#$977F,(a5)
00001116 3ABC 7C00                  		move.w	#$7C00,(a5)
0000111A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001120 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001124 4BF9 00C0 0004             		lea	($C00004).l,a5
0000112A 2ABC 9401 9340             		move.l	#$94019340,(a5)
00001130 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001136 3ABC 977F                  		move.w	#$977F,(a5)
0000113A 3ABC 7800                  		move.w	#$7800,(a5)
0000113E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001144 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001148 4A38 F767                  		tst.b	($FFFFF767).w
0000114C 6700                       		beq.s	loc_F54
0000114E 4BF9 00C0 0004             		lea	($C00004).l,a5
00001154 2ABC 9401 9370             		move.l	#$94019370,(a5)
0000115A 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00001160 3ABC 977F                  		move.w	#$977F,(a5)
00001164 3ABC 7000                  		move.w	#$7000,(a5)
00001168 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000116E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001172 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00001178                            
00001178                            loc_F54:
00001178 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001180 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00001186 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
0000118C 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00001192 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00001198 6100 0000                  		bsr.w	LoadTilesAsYouMove
0000119C 4EB9 0000 0000             		jsr	AniArt_Load
000011A2 4EB9 0000 0000             		jsr	HudUpdate
000011A8 6100 0000                  		bsr.w	sub_1642
000011AC 4E75                       		rts	
000011AE                            ; ===========================================================================
000011AE                            
000011AE                            loc_F8A:				; XREF: off_B6E
000011AE 6100 0000                  		bsr.w	sub_106E
000011B2 5238 F628                  		addq.b	#1,($FFFFF628).w
000011B6 11FC 000E F62A             		move.b	#$E,($FFFFF62A).w
000011BC 4E75                       		rts	
000011BE                            ; ===========================================================================
000011BE                            
000011BE                            loc_F9A:				; XREF: off_B6E
000011BE 6100 0000                  		bsr.w	sub_106E
000011C2 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
000011C6 6000 0000                  		bra.w	sub_1642
000011CA                            ; ===========================================================================
000011CA                            
000011CA                            loc_FA6:				; XREF: off_B6E
000011CA 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000011D2                            
000011D2                            loc_FAE:
000011D2 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
000011DA 66F6                       		bne.s	loc_FAE		; if not, branch
000011DC 6100 0000                  		bsr.w	ReadJoypads
000011E0 4BF9 00C0 0004             		lea	($C00004).l,a5
000011E6 2ABC 9400 9340             		move.l	#$94009340,(a5)
000011EC 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
000011F2 3ABC 977F                  		move.w	#$977F,(a5)
000011F6 3ABC C000                  		move.w	#$C000,(a5)
000011FA 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00001200 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001204 4BF9 00C0 0004             		lea	($C00004).l,a5
0000120A 2ABC 9401 9340             		move.l	#$94019340,(a5)
00001210 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001216 3ABC 977F                  		move.w	#$977F,(a5)
0000121A 3ABC 7800                  		move.w	#$7800,(a5)
0000121E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001224 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001228 4BF9 00C0 0004             		lea	($C00004).l,a5
0000122E 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001234 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
0000123A 3ABC 977F                  		move.w	#$977F,(a5)
0000123E 3ABC 7C00                  		move.w	#$7C00,(a5)
00001242 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001248 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000124C 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001254 4A38 F767                  		tst.b	($FFFFF767).w
00001258 6700                       		beq.s	loc_1060
0000125A 4BF9 00C0 0004             		lea	($C00004).l,a5
00001260 2ABC 9401 9370             		move.l	#$94019370,(a5)
00001266 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
0000126C 3ABC 977F                  		move.w	#$977F,(a5)
00001270 3ABC 7000                  		move.w	#$7000,(a5)
00001274 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000127A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000127E 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00001284                            
00001284                            loc_1060:
00001284 4A78 F614                  		tst.w	($FFFFF614).w
00001288 6700 0000                  		beq.w	locret_106C
0000128C 5378 F614                  		subq.w	#1,($FFFFF614).w
00001290                            
00001290                            locret_106C:
00001290 4E75                       		rts	
00001292                            
00001292                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001292                            
00001292                            
00001292                            sub_106E:				; XREF: loc_C32; et al
00001292 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
0000129A                            
0000129A                            loc_1076:
0000129A 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
000012A2 66F6                       		bne.s	loc_1076	; if not, branch
000012A4 6100 0000                  		bsr.w	ReadJoypads
000012A8 4A38 F64E                  		tst.b	($FFFFF64E).w
000012AC 6600                       		bne.s	loc_10B0
000012AE 4BF9 00C0 0004             		lea	($C00004).l,a5
000012B4 2ABC 9400 9340             		move.l	#$94009340,(a5)
000012BA 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
000012C0 3ABC 977F                  		move.w	#$977F,(a5)
000012C4 3ABC C000                  		move.w	#$C000,(a5)
000012C8 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000012CE 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000012D2 6000                       		bra.s	loc_10D4
000012D4                            ; ===========================================================================
000012D4                            
000012D4                            loc_10B0:				; XREF: sub_106E
000012D4 4BF9 00C0 0004             		lea	($C00004).l,a5
000012DA 2ABC 9400 9340             		move.l	#$94009340,(a5)
000012E0 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
000012E6 3ABC 977F                  		move.w	#$977F,(a5)
000012EA 3ABC C000                  		move.w	#$C000,(a5)
000012EE 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000012F4 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000012F8                            
000012F8                            loc_10D4:				; XREF: sub_106E
000012F8 4BF9 00C0 0004             		lea	($C00004).l,a5
000012FE 2ABC 9401 9340             		move.l	#$94019340,(a5)
00001304 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
0000130A 3ABC 977F                  		move.w	#$977F,(a5)
0000130E 3ABC 7800                  		move.w	#$7800,(a5)
00001312 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001318 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000131C 4BF9 00C0 0004             		lea	($C00004).l,a5
00001322 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001328 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
0000132E 3ABC 977F                  		move.w	#$977F,(a5)
00001332 3ABC 7C00                  		move.w	#$7C00,(a5)
00001336 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000133C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001340 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001348 4E75                       		rts	
0000134A                            ; End of function sub_106E
0000134A                            
0000134A                            ; ---------------------------------------------------------------------------
0000134A                            ; Subroutine to	move pallets from the RAM to CRAM
0000134A                            ; ---------------------------------------------------------------------------
0000134A                            
0000134A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000134A                            
0000134A                            
0000134A                            PalToCRAM:
0000134A 46FC 2700                  		move	#$2700,sr
0000134E 4A78 F644                  		tst.w	($FFFFF644).w
00001352 6700                       		beq.s	locret_119C
00001354 31FC 0000 F644             		move.w	#0,($FFFFF644).w
0000135A 48E7 00C0                  		movem.l	a0-a1,-(sp)
0000135E 43F9 00C0 0000             		lea	($C00000).l,a1
00001364 41F8 FA80                  		lea	($FFFFFA80).w,a0 ; load	pallet from RAM
00001368 237C C000 0000 0004        		move.l	#$C0000000,4(a1) ; set VDP to CRAM write
00001370 2298                       		move.l	(a0)+,(a1)	; move pallet to CRAM
00001372 2298                       		move.l	(a0)+,(a1)
00001374 2298                       		move.l	(a0)+,(a1)
00001376 2298                       		move.l	(a0)+,(a1)
00001378 2298                       		move.l	(a0)+,(a1)
0000137A 2298                       		move.l	(a0)+,(a1)
0000137C 2298                       		move.l	(a0)+,(a1)
0000137E 2298                       		move.l	(a0)+,(a1)
00001380 2298                       		move.l	(a0)+,(a1)
00001382 2298                       		move.l	(a0)+,(a1)
00001384 2298                       		move.l	(a0)+,(a1)
00001386 2298                       		move.l	(a0)+,(a1)
00001388 2298                       		move.l	(a0)+,(a1)
0000138A 2298                       		move.l	(a0)+,(a1)
0000138C 2298                       		move.l	(a0)+,(a1)
0000138E 2298                       		move.l	(a0)+,(a1)
00001390 2298                       		move.l	(a0)+,(a1)
00001392 2298                       		move.l	(a0)+,(a1)
00001394 2298                       		move.l	(a0)+,(a1)
00001396 2298                       		move.l	(a0)+,(a1)
00001398 2298                       		move.l	(a0)+,(a1)
0000139A 2298                       		move.l	(a0)+,(a1)
0000139C 2298                       		move.l	(a0)+,(a1)
0000139E 2298                       		move.l	(a0)+,(a1)
000013A0 2298                       		move.l	(a0)+,(a1)
000013A2 2298                       		move.l	(a0)+,(a1)
000013A4 2298                       		move.l	(a0)+,(a1)
000013A6 2298                       		move.l	(a0)+,(a1)
000013A8 2298                       		move.l	(a0)+,(a1)
000013AA 2298                       		move.l	(a0)+,(a1)
000013AC 2298                       		move.l	(a0)+,(a1)
000013AE 2298                       		move.l	(a0)+,(a1)
000013B0 337C 8ADF 0004             		move.w	#$8ADF,4(a1)
000013B6 4CDF 0300                  		movem.l	(sp)+,a0-a1
000013BA 4A38 F64F                  		tst.b	($FFFFF64F).w
000013BE 6600                       		bne.s	loc_119E
000013C0                            
000013C0                            locret_119C:
000013C0 4E73                       		rte	
000013C2                            ; ===========================================================================
000013C2                            
000013C2                            loc_119E:				; XREF: PalToCRAM
000013C2 4238 F64F                  		clr.b	($FFFFF64F).w
000013C6 48E7 FFFE                  		movem.l	d0-a6,-(sp)
000013CA 6100 FBDC                  		bsr.w	Demo_Time
000013CE 4EB9 0000 0000             		jsr	sub_71B4C
000013D4 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
000013D8 4E73                       		rte	
000013DA                            ; End of function PalToCRAM
000013DA                            
000013DA                            ; ---------------------------------------------------------------------------
000013DA                            ; Subroutine to	initialise joypads
000013DA                            ; ---------------------------------------------------------------------------
000013DA                            
000013DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000013DA                            
000013DA                            
000013DA                            JoypadInit:				; XREF: GameClrRAM
000013DA 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000013E2                            
000013E2                            Joypad_WaitZ80:
000013E2 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has the Z80 stopped?
000013EA 66F6                       		bne.s	Joypad_WaitZ80	; if not, branch
000013EC 7040                       		moveq	#$40,d0
000013EE 13C0 00A1 0009             		move.b	d0,($A10009).l	; init port 1 (joypad 1)
000013F4 13C0 00A1 000B             		move.b	d0,($A1000B).l	; init port 2 (joypad 2)
000013FA 13C0 00A1 000D             		move.b	d0,($A1000D).l	; init port 3 (extra)
00001400 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001408 4E75                       		rts	
0000140A                            ; End of function JoypadInit
0000140A                            
0000140A                            ; ---------------------------------------------------------------------------
0000140A                            ; Subroutine to	read joypad input, and send it to the RAM
0000140A                            ; ---------------------------------------------------------------------------
0000140A                            
0000140A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000140A                            
0000140A                            
0000140A                            ReadJoypads:
0000140A 41F8 F604                  		lea	($FFFFF604).w,a0 ; address where joypad	states are written
0000140E 43F9 00A1 0003             		lea	($A10003).l,a1	; first	joypad port
00001414 6100                       		bsr.s	Joypad_Read	; do the first joypad
00001416 5449                       		addq.w	#2,a1		; do the second	joypad
00001418                            
00001418                            Joypad_Read:
00001418 12BC 0000                  		move.b	#0,(a1)
0000141C 4E71                       		nop	
0000141E 4E71                       		nop	
00001420 1011                       		move.b	(a1),d0
00001422 E508                       		lsl.b	#2,d0
00001424 0200 00C0                  		andi.b	#$C0,d0
00001428 12BC 0040                  		move.b	#$40,(a1)
0000142C 4E71                       		nop	
0000142E 4E71                       		nop	
00001430 1211                       		move.b	(a1),d1
00001432 0201 003F                  		andi.b	#$3F,d1
00001436 8001                       		or.b	d1,d0
00001438 4600                       		not.b	d0
0000143A 1210                       		move.b	(a0),d1
0000143C B101                       		eor.b	d0,d1
0000143E 10C0                       		move.b	d0,(a0)+
00001440 C200                       		and.b	d0,d1
00001442 10C1                       		move.b	d1,(a0)+
00001444 4E75                       		rts	
00001446                            ; End of function ReadJoypads
00001446                            
00001446                            
00001446                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001446                            
00001446                            
00001446                            VDPSetupGame:				; XREF: GameClrRAM; ChecksumError
00001446 41F9 00C0 0004             		lea	($C00004).l,a0
0000144C 43F9 00C0 0000             		lea	($C00000).l,a1
00001452 45F9 0000 0000             		lea	(VDPSetupArray).l,a2
00001458 7E12                       		moveq	#$12,d7
0000145A                            
0000145A                            VDP_Loop:
0000145A 309A                       		move.w	(a2)+,(a0)
0000145C 51CF FFFC                  		dbf	d7,VDP_Loop	; set the VDP registers
00001460                            
00001460 3039 0000 0000             		move.w	(VDPSetupArray+2).l,d0
00001466 31C0 F60C                  		move.w	d0,($FFFFF60C).w
0000146A 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00001470 7000                       		moveq	#0,d0
00001472 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
0000147C 3E3C 003F                  		move.w	#$3F,d7
00001480                            
00001480                            VDP_ClrCRAM:
00001480 3280                       		move.w	d0,(a1)
00001482 51CF FFFC                  		dbf	d7,VDP_ClrCRAM	; clear	the CRAM
00001486                            
00001486 42B8 F616                  		clr.l	($FFFFF616).w
0000148A 42B8 F61A                  		clr.l	($FFFFF61A).w
0000148E 2F01                       		move.l	d1,-(sp)
00001490 4BF9 00C0 0004             		lea	($C00004).l,a5
00001496 3ABC 8F01                  		move.w	#$8F01,(a5)
0000149A 2ABC 94FF 93FF             		move.l	#$94FF93FF,(a5)
000014A0 3ABC 9780                  		move.w	#$9780,(a5)
000014A4 2ABC 4000 0080             		move.l	#$40000080,(a5)
000014AA 33FC 0000 00C0 0000        		move.w	#0,($C00000).l	; clear	the screen
000014B2                            
000014B2                            loc_128E:
000014B2 3215                       		move.w	(a5),d1
000014B4 0801 0001                  		btst	#1,d1
000014B8 66F8                       		bne.s	loc_128E
000014BA                            
000014BA 3ABC 8F02                  		move.w	#$8F02,(a5)
000014BE 221F                       		move.l	(sp)+,d1
000014C0 4E75                       		rts	
000014C2                            ; End of function VDPSetupGame
000014C2                            
000014C2                            ; ===========================================================================
000014C2 8004 8134 8230 8328        VDPSetupArray:	dc.w $8004, $8134, $8230, $8328	; XREF: VDPSetupGame
000014CA 8407 857C 8600 8700        		dc.w $8407, $857C, $8600, $8700
000014D2 8800 8900 8A00 8B00        		dc.w $8800, $8900, $8A00, $8B00
000014DA 8C81 8D3F 8E00 8F02        		dc.w $8C81, $8D3F, $8E00, $8F02
000014E2 9001 9100 9200             		dc.w $9001, $9100, $9200
000014E8                            
000014E8                            ; ---------------------------------------------------------------------------
000014E8                            ; Subroutine to	clear the screen
000014E8                            ; ---------------------------------------------------------------------------
000014E8                            
000014E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000014E8                            
000014E8                            
000014E8                            ClearScreen:
000014E8 4BF9 00C0 0004             		lea	($C00004).l,a5
000014EE 3ABC 8F01                  		move.w	#$8F01,(a5)
000014F2 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
000014F8 3ABC 9780                  		move.w	#$9780,(a5)
000014FC 2ABC 4000 0083             		move.l	#$40000083,(a5)
00001502 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
0000150A                            
0000150A                            loc_12E6:
0000150A 3215                       		move.w	(a5),d1
0000150C 0801 0001                  		btst	#1,d1
00001510 66F8                       		bne.s	loc_12E6
00001512                            
00001512 3ABC 8F02                  		move.w	#$8F02,(a5)
00001516 4BF9 00C0 0004             		lea	($C00004).l,a5
0000151C 3ABC 8F01                  		move.w	#$8F01,(a5)
00001520 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
00001526 3ABC 9780                  		move.w	#$9780,(a5)
0000152A 2ABC 6000 0083             		move.l	#$60000083,(a5)
00001530 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00001538                            
00001538                            loc_1314:
00001538 3215                       		move.w	(a5),d1
0000153A 0801 0001                  		btst	#1,d1
0000153E 66F8                       		bne.s	loc_1314
00001540                            
00001540 3ABC 8F02                  		move.w	#$8F02,(a5)
00001544 21FC 0000 0000 F616        		move.l	#0,($FFFFF616).w
0000154C 21FC 0000 0000 F61A        		move.l	#0,($FFFFF61A).w
00001554 43F8 F800                  		lea	($FFFFF800).w,a1
00001558 7000                       		moveq	#0,d0
0000155A 323C 009F                  		move.w	#$9F,d1
0000155E                            
0000155E                            loc_133A:
0000155E 22C0                       		move.l	d0,(a1)+
00001560 51C9 FFFC                  		dbf	d1,loc_133A
00001564                            
00001564 43F8 CC00                  		lea	($FFFFCC00).w,a1
00001568 7000                       		moveq	#0,d0
0000156A 323C 00FF                  		move.w	#$FF,d1
0000156E                            
0000156E                            loc_134A:
0000156E 22C0                       		move.l	d0,(a1)+
00001570 51C9 FFFC                  		dbf	d1,loc_134A
00001574 4E75                       		rts	
00001576                            ; End of function ClearScreen
00001576                            
00001576                            ; ---------------------------------------------------------------------------
00001576                            ; Subroutine to	load the sound driver
00001576                            ; ---------------------------------------------------------------------------
00001576                            
00001576                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001576                            
00001576                            
00001576                            SoundDriverLoad:			; XREF: GameClrRAM; TitleScreen
00001576 4E71                       		nop	
00001578 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00001580 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l ; reset the Z80
00001588 41F9 0000 0000             		lea	(Kos_Z80).l,a0	; load sound driver
0000158E 43F9 00A0 0000             		lea	($A00000).l,a1
00001594 6100 0000                  		bsr.w	KosDec		; decompress
00001598 33FC 0000 00A1 1200        		move.w	#0,($A11200).l
000015A0 4E71                       		nop	
000015A2 4E71                       		nop	
000015A4 4E71                       		nop	
000015A6 4E71                       		nop	
000015A8 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l ; reset the Z80
000015B0 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
000015B8 4E75                       		rts	
000015BA                            ; End of function SoundDriverLoad
000015BA                            
000015BA                            ; ---------------------------------------------------------------------------
000015BA                            ; Subroutine to	play a sound or	music track
000015BA                            ; ---------------------------------------------------------------------------
000015BA                            
000015BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015BA                            
000015BA                            
000015BA                            PlaySound:
000015BA 11C0 F00A                  		move.b	d0,($FFFFF00A).w
000015BE 4E75                       		rts	
000015C0                            ; End of function PlaySound
000015C0                            
000015C0                            ; ---------------------------------------------------------------------------
000015C0                            ; Subroutine to	play a special sound/music (E0-E4)
000015C0                            ;
000015C0                            ; E0 - Fade out
000015C0                            ; E1 - Sega
000015C0                            ; E2 - Speed up
000015C0                            ; E3 - Normal speed
000015C0                            ; E4 - Stop
000015C0                            ; ---------------------------------------------------------------------------
000015C0                            
000015C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015C0                            
000015C0                            
000015C0                            PlaySound_Special:
000015C0 11C0 F00B                  		move.b	d0,($FFFFF00B).w
000015C4 4E75                       		rts	
000015C6                            ; End of function PlaySound_Special
000015C6                            
000015C6                            ; ===========================================================================
000015C6                            ; ---------------------------------------------------------------------------
000015C6                            ; Unused sound/music subroutine
000015C6                            ; ---------------------------------------------------------------------------
000015C6                            
000015C6                            PlaySound_Unk:
000015C6 11C0 F00C                  		move.b	d0,($FFFFF00C).w
000015CA 4E75                       		rts	
000015CC                            
000015CC                            ; ---------------------------------------------------------------------------
000015CC                            ; Subroutine to	pause the game
000015CC                            ; ---------------------------------------------------------------------------
000015CC                            
000015CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015CC                            
000015CC                            
000015CC                            PauseGame:				; XREF: Level_MainLoop; et al
000015CC 4E71                       		nop	
000015CE 4A38 FE12                  		tst.b	($FFFFFE12).w	; do you have any lives	left?
000015D2 6700                       		beq.s	Unpause		; if not, branch
000015D4 4A78 F63A                  		tst.w	($FFFFF63A).w	; is game already paused?
000015D8 6600                       		bne.s	loc_13BE	; if yes, branch
000015DA 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
000015E0 6700                       		beq.s	Pause_DoNothing	; if not, branch
000015E2                            
000015E2                            loc_13BE:
000015E2 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w ; freeze time
000015E8 11FC 0001 F003             		move.b	#1,($FFFFF003).w ; pause music
000015EE                            
000015EE                            loc_13CA:
000015EE 11FC 0010 F62A             		move.b	#$10,($FFFFF62A).w
000015F4 6100 0000                  		bsr.w	DelayProgram
000015F8 4A38 FFE1                  		tst.b	($FFFFFFE1).w	; is slow-motion cheat on?
000015FC 6700                       		beq.s	Pause_ChkStart	; if not, branch
000015FE 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
00001604 6700                       		beq.s	Pause_ChkBC	; if not, branch
00001606 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; set game mode to 4 (title screen)
0000160C 4E71                       		nop	
0000160E 6000                       		bra.s	loc_1404
00001610                            ; ===========================================================================
00001610                            
00001610                            Pause_ChkBC:				; XREF: PauseGame
00001610 0838 0004 F604             		btst	#4,($FFFFF604).w ; is button B pressed?
00001616 6600                       		bne.s	Pause_SlowMo	; if yes, branch
00001618 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0000161E 6600                       		bne.s	Pause_SlowMo	; if yes, branch
00001620                            
00001620                            Pause_ChkStart:				; XREF: PauseGame
00001620 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00001626 67C6                       		beq.s	loc_13CA	; if not, branch
00001628                            
00001628                            loc_1404:				; XREF: PauseGame
00001628 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
0000162E                            
0000162E                            Unpause:				; XREF: PauseGame
0000162E 31FC 0000 F63A             		move.w	#0,($FFFFF63A).w ; unpause the game
00001634                            
00001634                            Pause_DoNothing:			; XREF: PauseGame
00001634 4E75                       		rts	
00001636                            ; ===========================================================================
00001636                            
00001636                            Pause_SlowMo:				; XREF: PauseGame
00001636 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w
0000163C 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
00001642 4E75                       		rts	
00001644                            ; End of function PauseGame
00001644                            
00001644                            ; ---------------------------------------------------------------------------
00001644                            ; Subroutine to	display	patterns via the VDP
00001644                            ; ---------------------------------------------------------------------------
00001644                            
00001644                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001644                            
00001644                            
00001644                            ShowVDPGraphics:			; XREF: SegaScreen; TitleScreen; SS_BGLoad
00001644 4DF9 00C0 0000             		lea	($C00000).l,a6
0000164A 283C 0080 0000             		move.l	#$800000,d4
00001650                            
00001650                            loc_142C:
00001650 2D40 0004                  		move.l	d0,4(a6)
00001654 3601                       		move.w	d1,d3
00001656                            
00001656                            loc_1432:
00001656 3C99                       		move.w	(a1)+,(a6)
00001658 51CB FFFC                  		dbf	d3,loc_1432
0000165C D084                       		add.l	d4,d0
0000165E 51CA FFF0                  		dbf	d2,loc_142C
00001662 4E75                       		rts	
00001664                            ; End of function ShowVDPGraphics
00001664                            
00001664                            ; ---------------------------------------------------------------------------
00001664                            ; Nemesis decompression	algorithm
00001664                            ; ---------------------------------------------------------------------------
00001664                            
00001664                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001664                            
00001664                            
00001664                            NemDec:
00001664 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
00001668 47F9 0000 0000             		lea	(loc_1502).l,a3
0000166E 49F9 00C0 0000             		lea	($C00000).l,a4
00001674 6000                       		bra.s	loc_145C
00001676                            ; ===========================================================================
00001676 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
0000167A 47F9 0000 0000             		lea	(loc_1518).l,a3
00001680                            
00001680                            loc_145C:				; XREF: NemDec
00001680 43F8 AA00                  		lea	($FFFFAA00).w,a1
00001684 3418                       		move.w	(a0)+,d2
00001686 E34A                       		lsl.w	#1,d2
00001688 6400                       		bcc.s	loc_146A
0000168A D6FC 000A                  		adda.w	#$A,a3
0000168E                            
0000168E                            loc_146A:
0000168E E54A                       		lsl.w	#2,d2
00001690 3A42                       		movea.w	d2,a5
00001692 7608                       		moveq	#8,d3
00001694 7400                       		moveq	#0,d2
00001696 7800                       		moveq	#0,d4
00001698 6100 0000                  		bsr.w	NemDec4
0000169C 1A18                       		move.b	(a0)+,d5
0000169E E145                       		asl.w	#8,d5
000016A0 1A18                       		move.b	(a0)+,d5
000016A2 3C3C 0010                  		move.w	#$10,d6
000016A6 6100                       		bsr.s	NemDec2
000016A8 4CDF 3BFF                  		movem.l	(sp)+,d0-a1/a3-a5
000016AC 4E75                       		rts	
000016AE                            ; End of function NemDec
000016AE                            
000016AE                            
000016AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000016AE                            
000016AE                            
000016AE                            NemDec2:				; XREF: NemDec
000016AE 3E06                       		move.w	d6,d7
000016B0 5147                       		subq.w	#8,d7
000016B2 3205                       		move.w	d5,d1
000016B4 EE69                       		lsr.w	d7,d1
000016B6 0C01 00FC                  		cmpi.b	#-4,d1
000016BA 6400                       		bcc.s	loc_14D6
000016BC 0241 00FF                  		andi.w	#$FF,d1
000016C0 D241                       		add.w	d1,d1
000016C2 1031 1000                  		move.b	(a1,d1.w),d0
000016C6 4880                       		ext.w	d0
000016C8 9C40                       		sub.w	d0,d6
000016CA 0C46 0009                  		cmpi.w	#9,d6
000016CE 6400                       		bcc.s	loc_14B2
000016D0 5046                       		addq.w	#8,d6
000016D2 E145                       		asl.w	#8,d5
000016D4 1A18                       		move.b	(a0)+,d5
000016D6                            
000016D6                            loc_14B2:
000016D6 1231 1001                  		move.b	1(a1,d1.w),d1
000016DA 3001                       		move.w	d1,d0
000016DC 0241 000F                  		andi.w	#$F,d1
000016E0 0240 00F0                  		andi.w	#$F0,d0
000016E4                            
000016E4                            loc_14C0:				; XREF: NemDec3
000016E4 E848                       		lsr.w	#4,d0
000016E6                            
000016E6                            loc_14C2:				; XREF: NemDec3
000016E6 E98C                       		lsl.l	#4,d4
000016E8 8801                       		or.b	d1,d4
000016EA 5343                       		subq.w	#1,d3
000016EC 6600                       		bne.s	loc_14D0
000016EE 4ED3                       		jmp	(a3)
000016F0                            ; End of function NemDec2
000016F0                            
000016F0                            
000016F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000016F0                            
000016F0                            
000016F0                            NemDec3:				; XREF: loc_1502
000016F0 7800                       		moveq	#0,d4
000016F2 7608                       		moveq	#8,d3
000016F4                            
000016F4                            loc_14D0:				; XREF: NemDec2
000016F4 51C8 FFF0                  		dbf	d0,loc_14C2
000016F8 60B4                       		bra.s	NemDec2
000016FA                            ; ===========================================================================
000016FA                            
000016FA                            loc_14D6:				; XREF: NemDec2
000016FA 5D46                       		subq.w	#6,d6
000016FC 0C46 0009                  		cmpi.w	#9,d6
00001700 6400                       		bcc.s	loc_14E4
00001702 5046                       		addq.w	#8,d6
00001704 E145                       		asl.w	#8,d5
00001706 1A18                       		move.b	(a0)+,d5
00001708                            
00001708                            loc_14E4:				; XREF: NemDec3
00001708 5F46                       		subq.w	#7,d6
0000170A 3205                       		move.w	d5,d1
0000170C EC69                       		lsr.w	d6,d1
0000170E 3001                       		move.w	d1,d0
00001710 0241 000F                  		andi.w	#$F,d1
00001714 0240 0070                  		andi.w	#$70,d0
00001718 0C46 0009                  		cmpi.w	#9,d6
0000171C 64C6                       		bcc.s	loc_14C0
0000171E 5046                       		addq.w	#8,d6
00001720 E145                       		asl.w	#8,d5
00001722 1A18                       		move.b	(a0)+,d5
00001724 60BE                       		bra.s	loc_14C0
00001726                            ; End of function NemDec3
00001726                            
00001726                            ; ===========================================================================
00001726                            
00001726                            loc_1502:				; XREF: NemDec
00001726 2884                       		move.l	d4,(a4)
00001728 534D                       		subq.w	#1,a5
0000172A 380D                       		move.w	a5,d4
0000172C 66C2                       		bne.s	NemDec3
0000172E 4E75                       		rts	
00001730                            ; ===========================================================================
00001730 B982                       		eor.l	d4,d2
00001732 2882                       		move.l	d2,(a4)
00001734 534D                       		subq.w	#1,a5
00001736 380D                       		move.w	a5,d4
00001738 66B6                       		bne.s	NemDec3
0000173A 4E75                       		rts	
0000173C                            ; ===========================================================================
0000173C                            
0000173C                            loc_1518:				; XREF: NemDec
0000173C 28C4                       		move.l	d4,(a4)+
0000173E 534D                       		subq.w	#1,a5
00001740 380D                       		move.w	a5,d4
00001742 66AC                       		bne.s	NemDec3
00001744 4E75                       		rts	
00001746                            ; ===========================================================================
00001746 B982                       		eor.l	d4,d2
00001748 28C2                       		move.l	d2,(a4)+
0000174A 534D                       		subq.w	#1,a5
0000174C 380D                       		move.w	a5,d4
0000174E 66A0                       		bne.s	NemDec3
00001750 4E75                       		rts	
00001752                            
00001752                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001752                            
00001752                            
00001752                            NemDec4:				; XREF: NemDec
00001752 1018                       		move.b	(a0)+,d0
00001754                            
00001754                            loc_1530:
00001754 0C00 00FF                  		cmpi.b	#-1,d0
00001758 6600                       		bne.s	loc_1538
0000175A 4E75                       		rts	
0000175C                            ; ===========================================================================
0000175C                            
0000175C                            loc_1538:				; XREF: NemDec4
0000175C 3E00                       		move.w	d0,d7
0000175E                            
0000175E                            loc_153A:
0000175E 1018                       		move.b	(a0)+,d0
00001760 0C00 0080                  		cmpi.b	#$80,d0
00001764 64EE                       		bcc.s	loc_1530
00001766 1200                       		move.b	d0,d1
00001768 0247 000F                  		andi.w	#$F,d7
0000176C 0241 0070                  		andi.w	#$70,d1
00001770 8E41                       		or.w	d1,d7
00001772 0240 000F                  		andi.w	#$F,d0
00001776 1200                       		move.b	d0,d1
00001778 E149                       		lsl.w	#8,d1
0000177A 8E41                       		or.w	d1,d7
0000177C 7208                       		moveq	#8,d1
0000177E 9240                       		sub.w	d0,d1
00001780 6600                       		bne.s	loc_1568
00001782 1018                       		move.b	(a0)+,d0
00001784 D040                       		add.w	d0,d0
00001786 3387 0000                  		move.w	d7,(a1,d0.w)
0000178A 60D2                       		bra.s	loc_153A
0000178C                            ; ===========================================================================
0000178C                            
0000178C                            loc_1568:				; XREF: NemDec4
0000178C 1018                       		move.b	(a0)+,d0
0000178E E368                       		lsl.w	d1,d0
00001790 D040                       		add.w	d0,d0
00001792 7A01                       		moveq	#1,d5
00001794 E36D                       		lsl.w	d1,d5
00001796 5345                       		subq.w	#1,d5
00001798                            
00001798                            loc_1574:
00001798 3387 0000                  		move.w	d7,(a1,d0.w)
0000179C 5440                       		addq.w	#2,d0
0000179E 51CD FFF8                  		dbf	d5,loc_1574
000017A2 60BA                       		bra.s	loc_153A
000017A4                            ; End of function NemDec4
000017A4                            
000017A4                            ; ---------------------------------------------------------------------------
000017A4                            ; Subroutine to	load pattern load cues
000017A4                            ; ---------------------------------------------------------------------------
000017A4                            
000017A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017A4                            
000017A4                            
000017A4                            LoadPLC:
000017A4 48E7 0060                  		movem.l	a1-a2,-(sp)
000017A8 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
000017AE D040                       		add.w	d0,d0
000017B0 3031 0000                  		move.w	(a1,d0.w),d0
000017B4 43F1 0000                  		lea	(a1,d0.w),a1
000017B8 45F8 F680                  		lea	($FFFFF680).w,a2
000017BC                            
000017BC                            loc_1598:
000017BC 4A92                       		tst.l	(a2)
000017BE 6700                       		beq.s	loc_15A0
000017C0 5C4A                       		addq.w	#6,a2
000017C2 60F8                       		bra.s	loc_1598
000017C4                            ; ===========================================================================
000017C4                            
000017C4                            loc_15A0:				; XREF: LoadPLC
000017C4 3019                       		move.w	(a1)+,d0
000017C6 6B00                       		bmi.s	loc_15AC
000017C8                            
000017C8                            loc_15A4:
000017C8 24D9                       		move.l	(a1)+,(a2)+
000017CA 34D9                       		move.w	(a1)+,(a2)+
000017CC 51C8 FFFA                  		dbf	d0,loc_15A4
000017D0                            
000017D0                            loc_15AC:
000017D0 4CDF 0600                  		movem.l	(sp)+,a1-a2
000017D4 4E75                       		rts	
000017D6                            ; End of function LoadPLC
000017D6                            
000017D6                            
000017D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017D6                            
000017D6                            
000017D6                            LoadPLC2:
000017D6 48E7 0060                  		movem.l	a1-a2,-(sp)
000017DA 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
000017E0 D040                       		add.w	d0,d0
000017E2 3031 0000                  		move.w	(a1,d0.w),d0
000017E6 43F1 0000                  		lea	(a1,d0.w),a1
000017EA 6100                       		bsr.s	ClearPLC
000017EC 45F8 F680                  		lea	($FFFFF680).w,a2
000017F0 3019                       		move.w	(a1)+,d0
000017F2 6B00                       		bmi.s	loc_15D8
000017F4                            
000017F4                            loc_15D0:
000017F4 24D9                       		move.l	(a1)+,(a2)+
000017F6 34D9                       		move.w	(a1)+,(a2)+
000017F8 51C8 FFFA                  		dbf	d0,loc_15D0
000017FC                            
000017FC                            loc_15D8:
000017FC 4CDF 0600                  		movem.l	(sp)+,a1-a2
00001800 4E75                       		rts	
00001802                            ; End of function LoadPLC2
00001802                            
00001802                            ; ---------------------------------------------------------------------------
00001802                            ; Subroutine to	clear the pattern load cues
00001802                            ; ---------------------------------------------------------------------------
00001802                            
00001802                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001802                            
00001802                            
00001802                            ClearPLC:				; XREF: LoadPLC2
00001802 45F8 F680                  		lea	($FFFFF680).w,a2
00001806 701F                       		moveq	#$1F,d0
00001808                            
00001808                            ClearPLC_Loop:
00001808 429A                       		clr.l	(a2)+
0000180A 51C8 FFFC                  		dbf	d0,ClearPLC_Loop
0000180E 4E75                       		rts	
00001810                            ; End of function ClearPLC
00001810                            
00001810                            ; ---------------------------------------------------------------------------
00001810                            ; Subroutine to	use graphics listed in a pattern load cue
00001810                            ; ---------------------------------------------------------------------------
00001810                            
00001810                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001810                            
00001810                            
00001810                            RunPLC_RAM:				; XREF: Pal_FadeTo
00001810 4AB8 F680                  		tst.l	($FFFFF680).w
00001814 6700                       		beq.s	locret_1640
00001816 4A78 F6F8                  		tst.w	($FFFFF6F8).w
0000181A 6600                       		bne.s	locret_1640
0000181C 2078 F680                  		movea.l	($FFFFF680).w,a0
00001820 47F9 0000 1726             		lea	(loc_1502).l,a3
00001826 43F8 AA00                  		lea	($FFFFAA00).w,a1
0000182A 3418                       		move.w	(a0)+,d2
0000182C 6A00                       		bpl.s	loc_160E
0000182E D6FC 000A                  		adda.w	#$A,a3
00001832                            
00001832                            loc_160E:
00001832 0242 7FFF                  		andi.w	#$7FFF,d2
00001836 31C2 F6F8                  		move.w	d2,($FFFFF6F8).w
0000183A 6100 FF16                  		bsr.w	NemDec4
0000183E 1A18                       		move.b	(a0)+,d5
00001840 E145                       		asl.w	#8,d5
00001842 1A18                       		move.b	(a0)+,d5
00001844 7C10                       		moveq	#$10,d6
00001846 7000                       		moveq	#0,d0
00001848 21C8 F680                  		move.l	a0,($FFFFF680).w
0000184C 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
00001850 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
00001854 21C0 F6E8                  		move.l	d0,($FFFFF6E8).w
00001858 21C0 F6EC                  		move.l	d0,($FFFFF6EC).w
0000185C 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
00001860 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
00001864                            
00001864                            locret_1640:
00001864 4E75                       		rts	
00001866                            ; End of function RunPLC_RAM
00001866                            
00001866                            
00001866                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001866                            
00001866                            
00001866                            sub_1642:				; XREF: loc_C44; loc_F54; loc_F9A
00001866 4A78 F6F8                  		tst.w	($FFFFF6F8).w
0000186A 6700 0000                  		beq.w	locret_16DA
0000186E 31FC 0009 F6FA             		move.w	#9,($FFFFF6FA).w
00001874 7000                       		moveq	#0,d0
00001876 3038 F684                  		move.w	($FFFFF684).w,d0
0000187A 0678 0120 F684             		addi.w	#$120,($FFFFF684).w
00001880 6000                       		bra.s	loc_1676
00001882                            ; End of function sub_1642
00001882                            
00001882                            
00001882                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001882                            
00001882                            
00001882                            sub_165E:				; XREF: Demo_Time
00001882 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001886 6700                       		beq.s	locret_16DA
00001888 31FC 0003 F6FA             		move.w	#3,($FFFFF6FA).w
0000188E 7000                       		moveq	#0,d0
00001890 3038 F684                  		move.w	($FFFFF684).w,d0
00001894 0678 0060 F684             		addi.w	#$60,($FFFFF684).w
0000189A                            
0000189A                            loc_1676:				; XREF: sub_1642
0000189A 49F9 00C0 0004             		lea	($C00004).l,a4
000018A0 E588                       		lsl.l	#2,d0
000018A2 E448                       		lsr.w	#2,d0
000018A4 0040 4000                  		ori.w	#$4000,d0
000018A8 4840                       		swap	d0
000018AA 2880                       		move.l	d0,(a4)
000018AC 594C                       		subq.w	#4,a4
000018AE 2078 F680                  		movea.l	($FFFFF680).w,a0
000018B2 2678 F6E0                  		movea.l	($FFFFF6E0).w,a3
000018B6 2038 F6E4                  		move.l	($FFFFF6E4).w,d0
000018BA 2238 F6E8                  		move.l	($FFFFF6E8).w,d1
000018BE 2438 F6EC                  		move.l	($FFFFF6EC).w,d2
000018C2 2A38 F6F0                  		move.l	($FFFFF6F0).w,d5
000018C6 2C38 F6F4                  		move.l	($FFFFF6F4).w,d6
000018CA 43F8 AA00                  		lea	($FFFFAA00).w,a1
000018CE                            
000018CE                            loc_16AA:				; XREF: sub_165E
000018CE 3A7C 0008                  		movea.w	#8,a5
000018D2 6100 FE1C                  		bsr.w	NemDec3
000018D6 5378 F6F8                  		subq.w	#1,($FFFFF6F8).w
000018DA 6700                       		beq.s	loc_16DC
000018DC 5378 F6FA                  		subq.w	#1,($FFFFF6FA).w
000018E0 66EC                       		bne.s	loc_16AA
000018E2 21C8 F680                  		move.l	a0,($FFFFF680).w
000018E6 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
000018EA 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
000018EE 21C1 F6E8                  		move.l	d1,($FFFFF6E8).w
000018F2 21C2 F6EC                  		move.l	d2,($FFFFF6EC).w
000018F6 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
000018FA 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
000018FE                            
000018FE                            locret_16DA:				; XREF: sub_1642
000018FE 4E75                       		rts	
00001900                            ; ===========================================================================
00001900                            
00001900                            loc_16DC:				; XREF: sub_165E
00001900 41F8 F680                  		lea	($FFFFF680).w,a0
00001904 7015                       		moveq	#$15,d0
00001906                            
00001906                            loc_16E2:				; XREF: sub_165E
00001906 20E8 0006                  		move.l	6(a0),(a0)+
0000190A 51C8 FFFA                  		dbf	d0,loc_16E2
0000190E 4E75                       		rts	
00001910                            ; End of function sub_165E
00001910                            
00001910                            ; ---------------------------------------------------------------------------
00001910                            ; Subroutine to	execute	the pattern load cue
00001910                            ; ---------------------------------------------------------------------------
00001910                            
00001910                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001910                            
00001910                            
00001910                            RunPLC_ROM:
00001910 43F9 0000 0000             		lea	(ArtLoadCues).l,a1 ; load the PLC index
00001916 D040                       		add.w	d0,d0
00001918 3031 0000                  		move.w	(a1,d0.w),d0
0000191C 43F1 0000                  		lea	(a1,d0.w),a1
00001920 3219                       		move.w	(a1)+,d1	; load number of entries in the	PLC
00001922                            
00001922                            RunPLC_Loop:
00001922 2059                       		movea.l	(a1)+,a0	; get art pointer
00001924 7000                       		moveq	#0,d0
00001926 3019                       		move.w	(a1)+,d0	; get VRAM address
00001928 E588                       		lsl.l	#2,d0		; divide address by $20
0000192A E448                       		lsr.w	#2,d0
0000192C 0040 4000                  		ori.w	#$4000,d0
00001930 4840                       		swap	d0
00001932 23C0 00C0 0004             		move.l	d0,($C00004).l	; put the VRAM address into VDP
00001938 6100 FD2A                  		bsr.w	NemDec		; decompress
0000193C 51C9 FFE4                  		dbf	d1,RunPLC_Loop	; loop for number of entries
00001940 4E75                       		rts	
00001942                            ; End of function RunPLC_ROM
00001942                            
00001942                            ; ---------------------------------------------------------------------------
00001942                            ; Enigma decompression algorithm
00001942                            ; ---------------------------------------------------------------------------
00001942                            
00001942                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001942                            
00001942                            
00001942                            EniDec:
00001942 48E7 FF7C                  		movem.l	d0-d7/a1-a5,-(sp)
00001946 3640                       		movea.w	d0,a3
00001948 1018                       		move.b	(a0)+,d0
0000194A 4880                       		ext.w	d0
0000194C 3A40                       		movea.w	d0,a5
0000194E 1818                       		move.b	(a0)+,d4
00001950 E70C                       		lsl.b	#3,d4
00001952 3458                       		movea.w	(a0)+,a2
00001954 D4CB                       		adda.w	a3,a2
00001956 3858                       		movea.w	(a0)+,a4
00001958 D8CB                       		adda.w	a3,a4
0000195A 1A18                       		move.b	(a0)+,d5
0000195C E145                       		asl.w	#8,d5
0000195E 1A18                       		move.b	(a0)+,d5
00001960 7C10                       		moveq	#$10,d6
00001962                            
00001962                            loc_173E:				; XREF: loc_1768
00001962 7007                       		moveq	#7,d0
00001964 3E06                       		move.w	d6,d7
00001966 9E40                       		sub.w	d0,d7
00001968 3205                       		move.w	d5,d1
0000196A EE69                       		lsr.w	d7,d1
0000196C 0241 007F                  		andi.w	#$7F,d1
00001970 3401                       		move.w	d1,d2
00001972 0C41 0040                  		cmpi.w	#$40,d1
00001976 6400                       		bcc.s	loc_1758
00001978 7006                       		moveq	#6,d0
0000197A E24A                       		lsr.w	#1,d2
0000197C                            
0000197C                            loc_1758:
0000197C 6100 0000                  		bsr.w	sub_188C
00001980 0242 000F                  		andi.w	#$F,d2
00001984 E849                       		lsr.w	#4,d1
00001986 D241                       		add.w	d1,d1
00001988 4EFB 1000                  		jmp	loc_17B4(pc,d1.w)
0000198C                            ; End of function EniDec
0000198C                            
0000198C                            ; ===========================================================================
0000198C                            
0000198C                            loc_1768:				; XREF: loc_17B4
0000198C 32CA                       		move.w	a2,(a1)+
0000198E 524A                       		addq.w	#1,a2
00001990 51CA FFFA                  		dbf	d2,loc_1768
00001994 60CC                       		bra.s	loc_173E
00001996                            ; ===========================================================================
00001996                            
00001996                            loc_1772:				; XREF: loc_17B4
00001996 32CC                       		move.w	a4,(a1)+
00001998 51CA FFFC                  		dbf	d2,loc_1772
0000199C 60C4                       		bra.s	loc_173E
0000199E                            ; ===========================================================================
0000199E                            
0000199E                            loc_177A:				; XREF: loc_17B4
0000199E 6100 0000                  		bsr.w	loc_17DC
000019A2                            
000019A2                            loc_177E:
000019A2 32C1                       		move.w	d1,(a1)+
000019A4 51CA FFFC                  		dbf	d2,loc_177E
000019A8 60B8                       		bra.s	loc_173E
000019AA                            ; ===========================================================================
000019AA                            
000019AA                            loc_1786:				; XREF: loc_17B4
000019AA 6100 0000                  		bsr.w	loc_17DC
000019AE                            
000019AE                            loc_178A:
000019AE 32C1                       		move.w	d1,(a1)+
000019B0 5241                       		addq.w	#1,d1
000019B2 51CA FFFA                  		dbf	d2,loc_178A
000019B6 60AA                       		bra.s	loc_173E
000019B8                            ; ===========================================================================
000019B8                            
000019B8                            loc_1794:				; XREF: loc_17B4
000019B8 6100 0000                  		bsr.w	loc_17DC
000019BC                            
000019BC                            loc_1798:
000019BC 32C1                       		move.w	d1,(a1)+
000019BE 5341                       		subq.w	#1,d1
000019C0 51CA FFFA                  		dbf	d2,loc_1798
000019C4 609C                       		bra.s	loc_173E
000019C6                            ; ===========================================================================
000019C6                            
000019C6                            loc_17A2:				; XREF: loc_17B4
000019C6 0C42 000F                  		cmpi.w	#$F,d2
000019CA 6700                       		beq.s	loc_17C4
000019CC                            
000019CC                            loc_17A8:
000019CC 6100 0000                  		bsr.w	loc_17DC
000019D0 32C1                       		move.w	d1,(a1)+
000019D2 51CA FFF8                  		dbf	d2,loc_17A8
000019D6 608A                       		bra.s	loc_173E
000019D8                            ; ===========================================================================
000019D8                            
000019D8                            loc_17B4:				; XREF: EniDec
000019D8 60B2                       		bra.s	loc_1768
000019DA                            ; ===========================================================================
000019DA 60B0                       		bra.s	loc_1768
000019DC                            ; ===========================================================================
000019DC 60B8                       		bra.s	loc_1772
000019DE                            ; ===========================================================================
000019DE 60B6                       		bra.s	loc_1772
000019E0                            ; ===========================================================================
000019E0 60BC                       		bra.s	loc_177A
000019E2                            ; ===========================================================================
000019E2 60C6                       		bra.s	loc_1786
000019E4                            ; ===========================================================================
000019E4 60D2                       		bra.s	loc_1794
000019E6                            ; ===========================================================================
000019E6 60DE                       		bra.s	loc_17A2
000019E8                            ; ===========================================================================
000019E8                            
000019E8                            loc_17C4:				; XREF: loc_17A2
000019E8 5348                       		subq.w	#1,a0
000019EA 0C46 0010                  		cmpi.w	#$10,d6
000019EE 6600                       		bne.s	loc_17CE
000019F0 5348                       		subq.w	#1,a0
000019F2                            
000019F2                            loc_17CE:
000019F2 3008                       		move.w	a0,d0
000019F4 E248                       		lsr.w	#1,d0
000019F6 6400                       		bcc.s	loc_17D6
000019F8 5248                       		addq.w	#1,a0
000019FA                            
000019FA                            loc_17D6:
000019FA 4CDF 3EFF                  		movem.l	(sp)+,d0-d7/a1-a5
000019FE 4E75                       		rts	
00001A00                            ; ===========================================================================
00001A00                            
00001A00                            loc_17DC:				; XREF: loc_17A2
00001A00 360B                       		move.w	a3,d3
00001A02 1204                       		move.b	d4,d1
00001A04 D201                       		add.b	d1,d1
00001A06 6400                       		bcc.s	loc_17EE
00001A08 5346                       		subq.w	#1,d6
00001A0A 0D05                       		btst	d6,d5
00001A0C 6700                       		beq.s	loc_17EE
00001A0E 0043 8000                  		ori.w	#-$8000,d3
00001A12                            
00001A12                            loc_17EE:
00001A12 D201                       		add.b	d1,d1
00001A14 6400                       		bcc.s	loc_17FC
00001A16 5346                       		subq.w	#1,d6
00001A18 0D05                       		btst	d6,d5
00001A1A 6700                       		beq.s	loc_17FC
00001A1C 0643 4000                  		addi.w	#$4000,d3
00001A20                            
00001A20                            loc_17FC:
00001A20 D201                       		add.b	d1,d1
00001A22 6400                       		bcc.s	loc_180A
00001A24 5346                       		subq.w	#1,d6
00001A26 0D05                       		btst	d6,d5
00001A28 6700                       		beq.s	loc_180A
00001A2A 0643 2000                  		addi.w	#$2000,d3
00001A2E                            
00001A2E                            loc_180A:
00001A2E D201                       		add.b	d1,d1
00001A30 6400                       		bcc.s	loc_1818
00001A32 5346                       		subq.w	#1,d6
00001A34 0D05                       		btst	d6,d5
00001A36 6700                       		beq.s	loc_1818
00001A38 0043 1000                  		ori.w	#$1000,d3
00001A3C                            
00001A3C                            loc_1818:
00001A3C D201                       		add.b	d1,d1
00001A3E 6400                       		bcc.s	loc_1826
00001A40 5346                       		subq.w	#1,d6
00001A42 0D05                       		btst	d6,d5
00001A44 6700                       		beq.s	loc_1826
00001A46 0043 0800                  		ori.w	#$800,d3
00001A4A                            
00001A4A                            loc_1826:
00001A4A 3205                       		move.w	d5,d1
00001A4C 3E06                       		move.w	d6,d7
00001A4E 9E4D                       		sub.w	a5,d7
00001A50 6400                       		bcc.s	loc_1856
00001A52 3C07                       		move.w	d7,d6
00001A54 0646 0010                  		addi.w	#$10,d6
00001A58 4447                       		neg.w	d7
00001A5A EF69                       		lsl.w	d7,d1
00001A5C 1A10                       		move.b	(a0),d5
00001A5E EF3D                       		rol.b	d7,d5
00001A60 DE47                       		add.w	d7,d7
00001A62 CA7B 7000                  		and.w	word_186C-2(pc,d7.w),d5
00001A66 D245                       		add.w	d5,d1
00001A68                            
00001A68                            loc_1844:				; XREF: loc_1868
00001A68 300D                       		move.w	a5,d0
00001A6A D040                       		add.w	d0,d0
00001A6C C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00001A70 D243                       		add.w	d3,d1
00001A72 1A18                       		move.b	(a0)+,d5
00001A74 E14D                       		lsl.w	#8,d5
00001A76 1A18                       		move.b	(a0)+,d5
00001A78 4E75                       		rts	
00001A7A                            ; ===========================================================================
00001A7A                            
00001A7A                            loc_1856:				; XREF: loc_1826
00001A7A 6700                       		beq.s	loc_1868
00001A7C EE69                       		lsr.w	d7,d1
00001A7E 300D                       		move.w	a5,d0
00001A80 D040                       		add.w	d0,d0
00001A82 C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00001A86 D243                       		add.w	d3,d1
00001A88 300D                       		move.w	a5,d0
00001A8A 6000                       		bra.s	sub_188C
00001A8C                            ; ===========================================================================
00001A8C                            
00001A8C                            loc_1868:				; XREF: loc_1856
00001A8C 7C10                       		moveq	#$10,d6
00001A8E                            
00001A8E                            loc_186A:
00001A8E 60D8                       		bra.s	loc_1844
00001A90                            ; ===========================================================================
00001A90 0001 0003 0007 000F 001F+  word_186C:	dc.w 1,	3, 7, $F, $1F, $3F, $7F, $FF, $1FF, $3FF, $7FF
00001AA6 0FFF 1FFF 3FFF 7FFF FFFF   		dc.w $FFF, $1FFF, $3FFF, $7FFF,	$FFFF	; XREF: loc_1856
00001AB0                            
00001AB0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001AB0                            
00001AB0                            
00001AB0                            sub_188C:				; XREF: EniDec
00001AB0 9C40                       		sub.w	d0,d6
00001AB2 0C46 0009                  		cmpi.w	#9,d6
00001AB6 6400                       		bcc.s	locret_189A
00001AB8 5046                       		addq.w	#8,d6
00001ABA E145                       		asl.w	#8,d5
00001ABC 1A18                       		move.b	(a0)+,d5
00001ABE                            
00001ABE                            locret_189A:
00001ABE 4E75                       		rts	
00001AC0                            ; End of function sub_188C
00001AC0                            
00001AC0                            ; ---------------------------------------------------------------------------
00001AC0                            ; Kosinski decompression algorithm
00001AC0                            ; ---------------------------------------------------------------------------
00001AC0                            
00001AC0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001AC0                            
00001AC0                            
00001AC0                            KosDec:
00001AC0                            
00001AC0 =FFFFFFFE                  var_2		= -2
00001AC0 =FFFFFFFF                  var_1		= -1
00001AC0                            
00001AC0 558F                       		subq.l	#2,sp
00001AC2 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001AC6 1E98                       		move.b	(a0)+,(sp)
00001AC8 3A17                       		move.w	(sp),d5
00001ACA 780F                       		moveq	#$F,d4
00001ACC                            
00001ACC                            loc_18A8:
00001ACC E24D                       		lsr.w	#1,d5
00001ACE 40C6                       		move	sr,d6
00001AD0 51CC 0000                  		dbf	d4,loc_18BA
00001AD4 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001AD8 1E98                       		move.b	(a0)+,(sp)
00001ADA 3A17                       		move.w	(sp),d5
00001ADC 780F                       		moveq	#$F,d4
00001ADE                            
00001ADE                            loc_18BA:
00001ADE 44C6                       		move	d6,ccr
00001AE0 6400                       		bcc.s	loc_18C2
00001AE2 12D8                       		move.b	(a0)+,(a1)+
00001AE4 60E6                       		bra.s	loc_18A8
00001AE6                            ; ===========================================================================
00001AE6                            
00001AE6                            loc_18C2:				; XREF: KosDec
00001AE6 7600                       		moveq	#0,d3
00001AE8 E24D                       		lsr.w	#1,d5
00001AEA 40C6                       		move	sr,d6
00001AEC 51CC 0000                  		dbf	d4,loc_18D6
00001AF0 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001AF4 1E98                       		move.b	(a0)+,(sp)
00001AF6 3A17                       		move.w	(sp),d5
00001AF8 780F                       		moveq	#$F,d4
00001AFA                            
00001AFA                            loc_18D6:
00001AFA 44C6                       		move	d6,ccr
00001AFC 6500                       		bcs.s	loc_1906
00001AFE E24D                       		lsr.w	#1,d5
00001B00 51CC 0000                  		dbf	d4,loc_18EA
00001B04 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001B08 1E98                       		move.b	(a0)+,(sp)
00001B0A 3A17                       		move.w	(sp),d5
00001B0C 780F                       		moveq	#$F,d4
00001B0E                            
00001B0E                            loc_18EA:
00001B0E E353                       		roxl.w	#1,d3
00001B10 E24D                       		lsr.w	#1,d5
00001B12 51CC 0000                  		dbf	d4,loc_18FC
00001B16 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001B1A 1E98                       		move.b	(a0)+,(sp)
00001B1C 3A17                       		move.w	(sp),d5
00001B1E 780F                       		moveq	#$F,d4
00001B20                            
00001B20                            loc_18FC:
00001B20 E353                       		roxl.w	#1,d3
00001B22 5243                       		addq.w	#1,d3
00001B24 74FF                       		moveq	#-1,d2
00001B26 1418                       		move.b	(a0)+,d2
00001B28 6000                       		bra.s	loc_191C
00001B2A                            ; ===========================================================================
00001B2A                            
00001B2A                            loc_1906:				; XREF: loc_18C2
00001B2A 1018                       		move.b	(a0)+,d0
00001B2C 1218                       		move.b	(a0)+,d1
00001B2E 74FF                       		moveq	#-1,d2
00001B30 1401                       		move.b	d1,d2
00001B32 EB4A                       		lsl.w	#5,d2
00001B34 1400                       		move.b	d0,d2
00001B36 0241 0007                  		andi.w	#7,d1
00001B3A 6700                       		beq.s	loc_1928
00001B3C 1601                       		move.b	d1,d3
00001B3E 5243                       		addq.w	#1,d3
00001B40                            
00001B40                            loc_191C:
00001B40 1031 2000                  		move.b	(a1,d2.w),d0
00001B44 12C0                       		move.b	d0,(a1)+
00001B46 51CB FFF8                  		dbf	d3,loc_191C
00001B4A 6080                       		bra.s	loc_18A8
00001B4C                            ; ===========================================================================
00001B4C                            
00001B4C                            loc_1928:				; XREF: loc_1906
00001B4C 1218                       		move.b	(a0)+,d1
00001B4E 6700                       		beq.s	loc_1938
00001B50 0C01 0001                  		cmpi.b	#1,d1
00001B54 6700 FF76                  		beq.w	loc_18A8
00001B58 1601                       		move.b	d1,d3
00001B5A 60E4                       		bra.s	loc_191C
00001B5C                            ; ===========================================================================
00001B5C                            
00001B5C                            loc_1938:				; XREF: loc_1928
00001B5C 548F                       		addq.l	#2,sp
00001B5E 4E75                       		rts	
00001B60                            ; End of function KosDec
00001B60                            
00001B60                            ; ---------------------------------------------------------------------------
00001B60                            ; Pallet cycling routine loading subroutine
00001B60                            ; ---------------------------------------------------------------------------
00001B60                            
00001B60                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001B60                            
00001B60                            
00001B60                            PalCycle_Load:				; XREF: Demo; Level_MainLoop; End_MainLoop
00001B60 7400                       		moveq	#0,d2
00001B62 7000                       		moveq	#0,d0
00001B64 1038 FE10                  		move.b	($FFFFFE10).w,d0 ; get level number
00001B68 D040                       		add.w	d0,d0		; multiply by 2
00001B6A 303B 0000                  		move.w	PalCycle(pc,d0.w),d0 ; load animated pallets offset index into d0
00001B6E 4EFB 0000                  		jmp	PalCycle(pc,d0.w) ; jump to PalCycle + offset index
00001B72                            ; End of function PalCycle_Load
00001B72                            
00001B72                            ; ===========================================================================
00001B72                            ; ---------------------------------------------------------------------------
00001B72                            ; Pallet cycling routines
00001B72                            ; ---------------------------------------------------------------------------
00001B72 0000                       PalCycle:	dc.w PalCycle_GHZ-PalCycle
00001B74 0000                       		dc.w PalCycle_LZ-PalCycle
00001B76 0000                       		dc.w PalCycle_MZ-PalCycle
00001B78 0000                       		dc.w PalCycle_SLZ-PalCycle
00001B7A 0000                       		dc.w PalCycle_SYZ-PalCycle
00001B7C 0000                       		dc.w PalCycle_SBZ-PalCycle
00001B7E 0000                       		dc.w PalCycle_GHZ-PalCycle
00001B80                            
00001B80                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001B80                            
00001B80                            
00001B80                            PalCycle_Title:				; XREF: TitleScreen
00001B80 41F9 0000 0000             		lea	(Pal_TitleCyc).l,a0
00001B86 6000                       		bra.s	loc_196A
00001B88                            ; ===========================================================================
00001B88                            
00001B88                            PalCycle_GHZ:				; XREF: PalCycle
00001B88 41F9 0000 0000             		lea	(Pal_GHZCyc).l,a0
00001B8E                            
00001B8E                            loc_196A:				; XREF: PalCycle_Title
00001B8E 5378 F634                  		subq.w	#1,($FFFFF634).w
00001B92 6A00                       		bpl.s	locret_1990
00001B94 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001B9A 3038 F632                  		move.w	($FFFFF632).w,d0
00001B9E 5278 F632                  		addq.w	#1,($FFFFF632).w
00001BA2 0240 0003                  		andi.w	#3,d0
00001BA6 E748                       		lsl.w	#3,d0
00001BA8 43F8 FB50                  		lea	($FFFFFB50).w,a1
00001BAC 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001BB0 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001BB4                            
00001BB4                            locret_1990:
00001BB4 4E75                       		rts	
00001BB6                            ; End of function PalCycle_Title
00001BB6                            
00001BB6                            
00001BB6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001BB6                            
00001BB6                            
00001BB6                            PalCycle_LZ:				; XREF: PalCycle
00001BB6 5378 F634                  		subq.w	#1,($FFFFF634).w
00001BBA 6A00                       		bpl.s	loc_19D8
00001BBC 31FC 0002 F634             		move.w	#2,($FFFFF634).w
00001BC2 3038 F632                  		move.w	($FFFFF632).w,d0
00001BC6 5278 F632                  		addq.w	#1,($FFFFF632).w
00001BCA 0240 0003                  		andi.w	#3,d0
00001BCE E748                       		lsl.w	#3,d0
00001BD0 41F9 0000 0000             		lea	(Pal_LZCyc1).l,a0
00001BD6 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; check if level is SBZ3
00001BDC 6600                       		bne.s	loc_19C0
00001BDE 41F9 0000 0000             		lea	(Pal_SBZ3Cyc1).l,a0 ; load SBZ3	pallet instead
00001BE4                            
00001BE4                            loc_19C0:
00001BE4 43F8 FB56                  		lea	($FFFFFB56).w,a1
00001BE8 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001BEC 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001BF0 43F8 FAD6                  		lea	($FFFFFAD6).w,a1
00001BF4 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001BF8 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001BFC                            
00001BFC                            loc_19D8:
00001BFC 3038 FE04                  		move.w	($FFFFFE04).w,d0
00001C00 0240 0007                  		andi.w	#7,d0
00001C04 103B 0000                  		move.b	byte_1A3C(pc,d0.w),d0
00001C08 6700                       		beq.s	locret_1A3A
00001C0A 7201                       		moveq	#1,d1
00001C0C 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001C10 6700                       		beq.s	loc_19F0
00001C12 4441                       		neg.w	d1
00001C14                            
00001C14                            loc_19F0:
00001C14 3038 F650                  		move.w	($FFFFF650).w,d0
00001C18 0240 0003                  		andi.w	#3,d0
00001C1C D041                       		add.w	d1,d0
00001C1E 0C40 0003                  		cmpi.w	#3,d0
00001C22 6500                       		bcs.s	loc_1A0A
00001C24 3200                       		move.w	d0,d1
00001C26 7000                       		moveq	#0,d0
00001C28 4A41                       		tst.w	d1
00001C2A 6A00                       		bpl.s	loc_1A0A
00001C2C 7002                       		moveq	#2,d0
00001C2E                            
00001C2E                            loc_1A0A:
00001C2E 31C0 F650                  		move.w	d0,($FFFFF650).w
00001C32 D040                       		add.w	d0,d0
00001C34 3200                       		move.w	d0,d1
00001C36 D040                       		add.w	d0,d0
00001C38 D041                       		add.w	d1,d0
00001C3A 41F9 0000 0000             		lea	(Pal_LZCyc2).l,a0
00001C40 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001C44 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C48 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001C4C 41F9 0000 0000             		lea	(Pal_LZCyc3).l,a0
00001C52 43F8 FAF6                  		lea	($FFFFFAF6).w,a1
00001C56 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C5A 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001C5E                            
00001C5E                            locret_1A3A:
00001C5E 4E75                       		rts	
00001C60                            ; End of function PalCycle_LZ
00001C60                            
00001C60                            ; ===========================================================================
00001C60 0100 0001 0000 0100        byte_1A3C:	dc.b 1,	0, 0, 1, 0, 0, 1, 0
00001C68                            ; ===========================================================================
00001C68                            
00001C68                            PalCycle_MZ:				; XREF: PalCycle
00001C68 4E75                       		rts	
00001C6A                            
00001C6A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001C6A                            
00001C6A                            
00001C6A                            PalCycle_SLZ:				; XREF: PalCycle
00001C6A 4E75                       		rts	
00001C6C                            ; End of function PalCycle_SLZ
00001C6C                            
00001C6C                            
00001C6C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001C6C                            
00001C6C                            
00001C6C                            PalCycle_SYZ:				; XREF: PalCycle
00001C6C 5378 F634                  		subq.w	#1,($FFFFF634).w
00001C70 6A00                       		bpl.s	locret_1AC6
00001C72 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001C78 3038 F632                  		move.w	($FFFFF632).w,d0
00001C7C 5278 F632                  		addq.w	#1,($FFFFF632).w
00001C80 0240 0003                  		andi.w	#3,d0
00001C84 E548                       		lsl.w	#2,d0
00001C86 3200                       		move.w	d0,d1
00001C88 D040                       		add.w	d0,d0
00001C8A 41F9 0000 0000             		lea	(Pal_SYZCyc1).l,a0
00001C90 43F8 FB6E                  		lea	($FFFFFB6E).w,a1
00001C94 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C98 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001C9C 41F9 0000 0000             		lea	(Pal_SYZCyc2).l,a0
00001CA2 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001CA6 32B0 1000                  		move.w	(a0,d1.w),(a1)
00001CAA 3370 1002 0004             		move.w	2(a0,d1.w),4(a1)
00001CB0                            
00001CB0                            locret_1AC6:
00001CB0 4E75                       		rts	
00001CB2                            ; End of function PalCycle_SYZ
00001CB2                            
00001CB2                            
00001CB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001CB2                            
00001CB2                            
00001CB2                            PalCycle_SBZ:				; XREF: PalCycle
00001CB2 45F9 0000 0000             		lea	(Pal_SBZCycList).l,a2
00001CB8 4A38 FE11                  		tst.b	($FFFFFE11).w
00001CBC 6700                       		beq.s	loc_1ADA
00001CBE 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001CC4                            
00001CC4                            loc_1ADA:
00001CC4 43F8 F650                  		lea	($FFFFF650).w,a1
00001CC8 321A                       		move.w	(a2)+,d1
00001CCA                            
00001CCA                            loc_1AE0:
00001CCA 5311                       		subq.b	#1,(a1)
00001CCC 6B00                       		bmi.s	loc_1AEA
00001CCE 5489                       		addq.l	#2,a1
00001CD0 5C8A                       		addq.l	#6,a2
00001CD2 6000                       		bra.s	loc_1B06
00001CD4                            ; ===========================================================================
00001CD4                            
00001CD4                            loc_1AEA:				; XREF: PalCycle_SBZ
00001CD4 12DA                       		move.b	(a2)+,(a1)+
00001CD6 1011                       		move.b	(a1),d0
00001CD8 5200                       		addq.b	#1,d0
00001CDA B01A                       		cmp.b	(a2)+,d0
00001CDC 6500                       		bcs.s	loc_1AF6
00001CDE 7000                       		moveq	#0,d0
00001CE0                            
00001CE0                            loc_1AF6:
00001CE0 12C0                       		move.b	d0,(a1)+
00001CE2 0240 000F                  		andi.w	#$F,d0
00001CE6 D040                       		add.w	d0,d0
00001CE8 305A                       		movea.w	(a2)+,a0
00001CEA 365A                       		movea.w	(a2)+,a3
00001CEC 36B0 0000                  		move.w	(a0,d0.w),(a3)
00001CF0                            
00001CF0                            loc_1B06:				; XREF: PalCycle_SBZ
00001CF0 51C9 FFD8                  		dbf	d1,loc_1AE0
00001CF4 5378 F634                  		subq.w	#1,($FFFFF634).w
00001CF8 6A00                       		bpl.s	locret_1B64
00001CFA 41F9 0000 0000             		lea	(Pal_SBZCyc4).l,a0
00001D00 31FC 0001 F634             		move.w	#1,($FFFFF634).w
00001D06 4A38 FE11                  		tst.b	($FFFFFE11).w
00001D0A 6700                       		beq.s	loc_1B2E
00001D0C 41F9 0000 0000             		lea	(Pal_SBZCyc10).l,a0
00001D12 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00001D18                            
00001D18                            loc_1B2E:
00001D18 72FF                       		moveq	#-1,d1
00001D1A 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001D1E 6700                       		beq.s	loc_1B38
00001D20 4441                       		neg.w	d1
00001D22                            
00001D22                            loc_1B38:
00001D22 3038 F632                  		move.w	($FFFFF632).w,d0
00001D26 0240 0003                  		andi.w	#3,d0
00001D2A D041                       		add.w	d1,d0
00001D2C 0C40 0003                  		cmpi.w	#3,d0
00001D30 6500                       		bcs.s	loc_1B52
00001D32 3200                       		move.w	d0,d1
00001D34 7000                       		moveq	#0,d0
00001D36 4A41                       		tst.w	d1
00001D38 6A00                       		bpl.s	loc_1B52
00001D3A 7002                       		moveq	#2,d0
00001D3C                            
00001D3C                            loc_1B52:
00001D3C 31C0 F632                  		move.w	d0,($FFFFF632).w
00001D40 D040                       		add.w	d0,d0
00001D42 43F8 FB58                  		lea	($FFFFFB58).w,a1
00001D46 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001D4A 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001D4E                            
00001D4E                            locret_1B64:
00001D4E 4E75                       		rts	
00001D50                            ; End of function PalCycle_SBZ
00001D50                            
00001D50                            ; ===========================================================================
00001D50                            Pal_TitleCyc:	incbin	pallet\c_title.bin
00001D70                            Pal_GHZCyc:	incbin	pallet\c_ghz.bin
00001D90                            Pal_LZCyc1:	incbin	pallet\c_lz_wat.bin	; waterfalls pallet
00001DB0                            Pal_LZCyc2:	incbin	pallet\c_lz_bel.bin	; conveyor belt pallet
00001DC2                            Pal_LZCyc3:	incbin	pallet\c_lz_buw.bin	; conveyor belt (underwater) pallet
00001DD4                            Pal_SBZ3Cyc1:	incbin	pallet\c_sbz3_w.bin	; waterfalls pallet
00001E3C                            Pal_SLZCyc:	incbin	pallet\c_slz.bin
00001E60                            Pal_SYZCyc1:	incbin	pallet\c_syz_1.bin
00001E80                            Pal_SYZCyc2:	incbin	pallet\c_syz_2.bin
00001E90                            
00001E90                            Pal_SBZCycList:
00001E90                            	include "_inc\SBZ pallet script 1.asm"
00001E90                            ; ---------------------------------------------------------------------------
00001E90                            ; Scrap Brain Zone 1 pallet cycling script
00001E90                            ; ---------------------------------------------------------------------------
00001E90 0008                       	dc.w 8			; number of entries - 1
00001E92 0708                       	dc.b 7,	8		; duration in frames, number of	colours
00001E94 0000                       	dc.w Pal_SBZCyc1	; pallet pointer
00001E96 FB50                       	dc.w $FB50		; RAM address
00001E98 0D08                       	dc.b $D, 8
00001E9A 0000                       	dc.w Pal_SBZCyc2
00001E9C FB52                       	dc.w $FB52
00001E9E 0E08                       	dc.b $E, 8
00001EA0 0000                       	dc.w Pal_SBZCyc3
00001EA2 FB6E                       	dc.w $FB6E
00001EA4 0B08                       	dc.b $B, 8
00001EA6 0000                       	dc.w Pal_SBZCyc5
00001EA8 FB70                       	dc.w $FB70
00001EAA 0708                       	dc.b 7,	8
00001EAC 0000                       	dc.w Pal_SBZCyc6
00001EAE FB72                       	dc.w $FB72
00001EB0 1C10                       	dc.b $1C, $10
00001EB2 0000                       	dc.w Pal_SBZCyc7
00001EB4 FB7E                       	dc.w $FB7E
00001EB6 0303                       	dc.b 3,	3
00001EB8 0000                       	dc.w Pal_SBZCyc8
00001EBA FB78                       	dc.w $FB78
00001EBC 0303                       	dc.b 3,	3
00001EBE 0000                       	dc.w Pal_SBZCyc8+2
00001EC0 FB7A                       	dc.w $FB7A
00001EC2 0303                       	dc.b 3,	3
00001EC4 0000                       	dc.w Pal_SBZCyc8+4
00001EC6 FB7C                       	dc.w $FB7C
00001EC8                            	even
00001EC8                            	even
00001EC8                            
00001EC8                            Pal_SBZCycList2:
00001EC8                            	include "_inc\SBZ pallet script 2.asm"
00001EC8                            ; ---------------------------------------------------------------------------
00001EC8                            ; Scrap Brain Zone 2 pallet cycling script
00001EC8                            ; ---------------------------------------------------------------------------
00001EC8 0006                       	dc.w 6
00001ECA 0708                       	dc.b 7,	8
00001ECC 0000                       	dc.w Pal_SBZCyc1
00001ECE FB50                       	dc.w $FB50
00001ED0 0D08                       	dc.b $D, 8
00001ED2 0000                       	dc.w Pal_SBZCyc2
00001ED4 FB52                       	dc.w $FB52
00001ED6 0908                       	dc.b 9,	8
00001ED8 0000                       	dc.w Pal_SBZCyc9
00001EDA FB70                       	dc.w $FB70
00001EDC 0708                       	dc.b 7,	8
00001EDE 0000                       	dc.w Pal_SBZCyc6
00001EE0 FB72                       	dc.w $FB72
00001EE2 0303                       	dc.b 3,	3
00001EE4 0000                       	dc.w Pal_SBZCyc8
00001EE6 FB78                       	dc.w $FB78
00001EE8 0303                       	dc.b 3,	3
00001EEA 0000                       	dc.w Pal_SBZCyc8+2
00001EEC FB7A                       	dc.w $FB7A
00001EEE 0303                       	dc.b 3,	3
00001EF0 0000                       	dc.w Pal_SBZCyc8+4
00001EF2 FB7C                       	dc.w $FB7C
00001EF4                            	even
00001EF4                            	even
00001EF4                            
00001EF4                            Pal_SBZCyc1:	incbin	pallet\c_sbz_1.bin
00001F04                            Pal_SBZCyc2:	incbin	pallet\c_sbz_2.bin
00001F14                            Pal_SBZCyc3:	incbin	pallet\c_sbz_3.bin
00001F24                            Pal_SBZCyc4:	incbin	pallet\c_sbz_4.bin
00001F30                            Pal_SBZCyc5:	incbin	pallet\c_sbz_5.bin
00001F40                            Pal_SBZCyc6:	incbin	pallet\c_sbz_6.bin
00001F50                            Pal_SBZCyc7:	incbin	pallet\c_sbz_7.bin
00001F70                            Pal_SBZCyc8:	incbin	pallet\c_sbz_8.bin
00001F7A                            Pal_SBZCyc9:	incbin	pallet\c_sbz_9.bin
00001F8A                            Pal_SBZCyc10:	incbin	pallet\c_sbz_10.bin
00001F96                            ; ---------------------------------------------------------------------------
00001F96                            ; Subroutine to	fade out and fade in
00001F96                            ; ---------------------------------------------------------------------------
00001F96                            
00001F96                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F96                            
00001F96                            
00001F96                            Pal_FadeTo:
00001F96 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00001F9C                            
00001F9C                            Pal_FadeTo2:
00001F9C 7000                       		moveq	#0,d0
00001F9E 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001FA2 1038 F626                  		move.b	($FFFFF626).w,d0
00001FA6 D0C0                       		adda.w	d0,a0
00001FA8 7200                       		moveq	#0,d1
00001FAA 1038 F627                  		move.b	($FFFFF627).w,d0
00001FAE                            
00001FAE                            Pal_ToBlack:
00001FAE 30C1                       		move.w	d1,(a0)+
00001FB0 51C8 FFFC                  		dbf	d0,Pal_ToBlack	; fill pallet with $000	(black)
00001FB4                            
00001FB4 383C 0015                  		move.w	#$15,d4
00001FB8                            
00001FB8                            loc_1DCE:
00001FB8 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001FBE 6100 0000                  		bsr.w	DelayProgram
00001FC2 6100                       		bsr.s	Pal_FadeIn
00001FC4 6100 F84A                  		bsr.w	RunPLC_RAM
00001FC8 51CC FFEE                  		dbf	d4,loc_1DCE
00001FCC 4E75                       		rts	
00001FCE                            ; End of function Pal_FadeTo
00001FCE                            
00001FCE                            ; ---------------------------------------------------------------------------
00001FCE                            ; Pallet fade-in subroutine
00001FCE                            ; ---------------------------------------------------------------------------
00001FCE                            
00001FCE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001FCE                            
00001FCE                            
00001FCE                            Pal_FadeIn:				; XREF: Pal_FadeTo
00001FCE 7000                       		moveq	#0,d0
00001FD0 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001FD4 43F8 FB80                  		lea	($FFFFFB80).w,a1
00001FD8 1038 F626                  		move.b	($FFFFF626).w,d0
00001FDC D0C0                       		adda.w	d0,a0
00001FDE D2C0                       		adda.w	d0,a1
00001FE0 1038 F627                  		move.b	($FFFFF627).w,d0
00001FE4                            
00001FE4                            loc_1DFA:
00001FE4 6100                       		bsr.s	Pal_AddColor
00001FE6 51C8 FFFC                  		dbf	d0,loc_1DFA
00001FEA 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00001FF0 6600                       		bne.s	locret_1E24
00001FF2 7000                       		moveq	#0,d0
00001FF4 41F8 FA80                  		lea	($FFFFFA80).w,a0
00001FF8 43F8 FA00                  		lea	($FFFFFA00).w,a1
00001FFC 1038 F626                  		move.b	($FFFFF626).w,d0
00002000 D0C0                       		adda.w	d0,a0
00002002 D2C0                       		adda.w	d0,a1
00002004 1038 F627                  		move.b	($FFFFF627).w,d0
00002008                            
00002008                            loc_1E1E:
00002008 6100                       		bsr.s	Pal_AddColor
0000200A 51C8 FFFC                  		dbf	d0,loc_1E1E
0000200E                            
0000200E                            locret_1E24:
0000200E 4E75                       		rts	
00002010                            ; End of function Pal_FadeIn
00002010                            
00002010                            
00002010                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002010                            
00002010                            
00002010                            Pal_AddColor:				; XREF: Pal_FadeIn
00002010 3419                       		move.w	(a1)+,d2
00002012 3610                       		move.w	(a0),d3
00002014 B642                       		cmp.w	d2,d3
00002016 6700                       		beq.s	loc_1E4E
00002018 3203                       		move.w	d3,d1
0000201A 0641 0200                  		addi.w	#$200,d1	; increase blue	value
0000201E B242                       		cmp.w	d2,d1		; has blue reached threshold level?
00002020 6200                       		bhi.s	Pal_AddGreen	; if yes, branch
00002022 30C1                       		move.w	d1,(a0)+	; update pallet
00002024 4E75                       		rts	
00002026                            ; ===========================================================================
00002026                            
00002026                            Pal_AddGreen:				; XREF: Pal_AddColor
00002026 3203                       		move.w	d3,d1
00002028 0641 0020                  		addi.w	#$20,d1		; increase green value
0000202C B242                       		cmp.w	d2,d1
0000202E 6200                       		bhi.s	Pal_AddRed
00002030 30C1                       		move.w	d1,(a0)+	; update pallet
00002032 4E75                       		rts	
00002034                            ; ===========================================================================
00002034                            
00002034                            Pal_AddRed:				; XREF: Pal_AddGreen
00002034 5458                       		addq.w	#2,(a0)+	; increase red value
00002036 4E75                       		rts	
00002038                            ; ===========================================================================
00002038                            
00002038                            loc_1E4E:				; XREF: Pal_AddColor
00002038 5448                       		addq.w	#2,a0
0000203A 4E75                       		rts	
0000203C                            ; End of function Pal_AddColor
0000203C                            
0000203C                            
0000203C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000203C                            
0000203C                            
0000203C                            Pal_FadeFrom:
0000203C 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00002042 383C 0015                  		move.w	#$15,d4
00002046                            
00002046                            loc_1E5C:
00002046 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
0000204C 6100 0000                  		bsr.w	DelayProgram
00002050 6100                       		bsr.s	Pal_FadeOut
00002052 6100 F7BC                  		bsr.w	RunPLC_RAM
00002056 51CC FFEE                  		dbf	d4,loc_1E5C
0000205A 4E75                       		rts	
0000205C                            ; End of function Pal_FadeFrom
0000205C                            
0000205C                            ; ---------------------------------------------------------------------------
0000205C                            ; Pallet fade-out subroutine
0000205C                            ; ---------------------------------------------------------------------------
0000205C                            
0000205C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000205C                            
0000205C                            
0000205C                            Pal_FadeOut:				; XREF: Pal_FadeFrom
0000205C 7000                       		moveq	#0,d0
0000205E 41F8 FB00                  		lea	($FFFFFB00).w,a0
00002062 1038 F626                  		move.b	($FFFFF626).w,d0
00002066 D0C0                       		adda.w	d0,a0
00002068 1038 F627                  		move.b	($FFFFF627).w,d0
0000206C                            
0000206C                            loc_1E82:
0000206C 6100                       		bsr.s	Pal_DecColor
0000206E 51C8 FFFC                  		dbf	d0,loc_1E82
00002072                            
00002072 7000                       		moveq	#0,d0
00002074 41F8 FA80                  		lea	($FFFFFA80).w,a0
00002078 1038 F626                  		move.b	($FFFFF626).w,d0
0000207C D0C0                       		adda.w	d0,a0
0000207E 1038 F627                  		move.b	($FFFFF627).w,d0
00002082                            
00002082                            loc_1E98:
00002082 6100                       		bsr.s	Pal_DecColor
00002084 51C8 FFFC                  		dbf	d0,loc_1E98
00002088 4E75                       		rts	
0000208A                            ; End of function Pal_FadeOut
0000208A                            
0000208A                            
0000208A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000208A                            
0000208A                            
0000208A                            Pal_DecColor:				; XREF: Pal_FadeOut
0000208A 3410                       		move.w	(a0),d2
0000208C 6700                       		beq.s	loc_1ECC
0000208E 3202                       		move.w	d2,d1
00002090 0241 000E                  		andi.w	#$E,d1
00002094 6700                       		beq.s	Pal_DecGreen
00002096 5558                       		subq.w	#2,(a0)+	; decrease red value
00002098 4E75                       		rts	
0000209A                            ; ===========================================================================
0000209A                            
0000209A                            Pal_DecGreen:				; XREF: Pal_DecColor
0000209A 3202                       		move.w	d2,d1
0000209C 0241 00E0                  		andi.w	#$E0,d1
000020A0 6700                       		beq.s	Pal_DecBlue
000020A2 0458 0020                  		subi.w	#$20,(a0)+	; decrease green value
000020A6 4E75                       		rts	
000020A8                            ; ===========================================================================
000020A8                            
000020A8                            Pal_DecBlue:				; XREF: Pal_DecGreen
000020A8 3202                       		move.w	d2,d1
000020AA 0241 0E00                  		andi.w	#$E00,d1
000020AE 6700                       		beq.s	loc_1ECC
000020B0 0458 0200                  		subi.w	#$200,(a0)+	; decrease blue	value
000020B4 4E75                       		rts	
000020B6                            ; ===========================================================================
000020B6                            
000020B6                            loc_1ECC:				; XREF: Pal_DecColor
000020B6 5448                       		addq.w	#2,a0
000020B8 4E75                       		rts	
000020BA                            ; End of function Pal_DecColor
000020BA                            
000020BA                            ; ---------------------------------------------------------------------------
000020BA                            ; Subroutine to	fill the pallet	with white (special stage)
000020BA                            ; ---------------------------------------------------------------------------
000020BA                            
000020BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020BA                            
000020BA                            
000020BA                            Pal_MakeWhite:				; XREF: SpecialStage
000020BA 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000020C0 7000                       		moveq	#0,d0
000020C2 41F8 FB00                  		lea	($FFFFFB00).w,a0
000020C6 1038 F626                  		move.b	($FFFFF626).w,d0
000020CA D0C0                       		adda.w	d0,a0
000020CC 323C 0EEE                  		move.w	#$EEE,d1
000020D0 1038 F627                  		move.b	($FFFFF627).w,d0
000020D4                            
000020D4                            PalWhite_Loop:
000020D4 30C1                       		move.w	d1,(a0)+
000020D6 51C8 FFFC                  		dbf	d0,PalWhite_Loop
000020DA 383C 0015                  		move.w	#$15,d4
000020DE                            
000020DE                            loc_1EF4:
000020DE 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
000020E4 6100 0000                  		bsr.w	DelayProgram
000020E8 6100                       		bsr.s	Pal_WhiteToBlack
000020EA 6100 F724                  		bsr.w	RunPLC_RAM
000020EE 51CC FFEE                  		dbf	d4,loc_1EF4
000020F2 4E75                       		rts	
000020F4                            ; End of function Pal_MakeWhite
000020F4                            
000020F4                            
000020F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020F4                            
000020F4                            
000020F4                            Pal_WhiteToBlack:			; XREF: Pal_MakeWhite
000020F4 7000                       		moveq	#0,d0
000020F6 41F8 FB00                  		lea	($FFFFFB00).w,a0
000020FA 43F8 FB80                  		lea	($FFFFFB80).w,a1
000020FE 1038 F626                  		move.b	($FFFFF626).w,d0
00002102 D0C0                       		adda.w	d0,a0
00002104 D2C0                       		adda.w	d0,a1
00002106 1038 F627                  		move.b	($FFFFF627).w,d0
0000210A                            
0000210A                            loc_1F20:
0000210A 6100                       		bsr.s	Pal_DecColor2
0000210C 51C8 FFFC                  		dbf	d0,loc_1F20
00002110                            
00002110 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00002116 6600                       		bne.s	locret_1F4A
00002118 7000                       		moveq	#0,d0
0000211A 41F8 FA80                  		lea	($FFFFFA80).w,a0
0000211E 43F8 FA00                  		lea	($FFFFFA00).w,a1
00002122 1038 F626                  		move.b	($FFFFF626).w,d0
00002126 D0C0                       		adda.w	d0,a0
00002128 D2C0                       		adda.w	d0,a1
0000212A 1038 F627                  		move.b	($FFFFF627).w,d0
0000212E                            
0000212E                            loc_1F44:
0000212E 6100                       		bsr.s	Pal_DecColor2
00002130 51C8 FFFC                  		dbf	d0,loc_1F44
00002134                            
00002134                            locret_1F4A:
00002134 4E75                       		rts	
00002136                            ; End of function Pal_WhiteToBlack
00002136                            
00002136                            
00002136                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002136                            
00002136                            
00002136                            Pal_DecColor2:				; XREF: Pal_WhiteToBlack
00002136 3419                       		move.w	(a1)+,d2
00002138 3610                       		move.w	(a0),d3
0000213A B642                       		cmp.w	d2,d3
0000213C 6700                       		beq.s	loc_1F78
0000213E 3203                       		move.w	d3,d1
00002140 0441 0200                  		subi.w	#$200,d1	; decrease blue	value
00002144 6500                       		bcs.s	loc_1F64
00002146 B242                       		cmp.w	d2,d1
00002148 6500                       		bcs.s	loc_1F64
0000214A 30C1                       		move.w	d1,(a0)+
0000214C 4E75                       		rts	
0000214E                            ; ===========================================================================
0000214E                            
0000214E                            loc_1F64:				; XREF: Pal_DecColor2
0000214E 3203                       		move.w	d3,d1
00002150 0441 0020                  		subi.w	#$20,d1		; decrease green value
00002154 6500                       		bcs.s	loc_1F74
00002156 B242                       		cmp.w	d2,d1
00002158 6500                       		bcs.s	loc_1F74
0000215A 30C1                       		move.w	d1,(a0)+
0000215C 4E75                       		rts	
0000215E                            ; ===========================================================================
0000215E                            
0000215E                            loc_1F74:				; XREF: loc_1F64
0000215E 5558                       		subq.w	#2,(a0)+	; decrease red value
00002160 4E75                       		rts	
00002162                            ; ===========================================================================
00002162                            
00002162                            loc_1F78:				; XREF: Pal_DecColor2
00002162 5448                       		addq.w	#2,a0
00002164 4E75                       		rts	
00002166                            ; End of function Pal_DecColor2
00002166                            
00002166                            ; ---------------------------------------------------------------------------
00002166                            ; Subroutine to	make a white flash when	you enter a special stage
00002166                            ; ---------------------------------------------------------------------------
00002166                            
00002166                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002166                            
00002166                            
00002166                            Pal_MakeFlash:				; XREF: SpecialStage
00002166 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
0000216C 383C 0015                  		move.w	#$15,d4
00002170                            
00002170                            loc_1F86:
00002170 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00002176 6100 0000                  		bsr.w	DelayProgram
0000217A 6100                       		bsr.s	Pal_ToWhite
0000217C 6100 F692                  		bsr.w	RunPLC_RAM
00002180 51CC FFEE                  		dbf	d4,loc_1F86
00002184 4E75                       		rts	
00002186                            ; End of function Pal_MakeFlash
00002186                            
00002186                            
00002186                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002186                            
00002186                            
00002186                            Pal_ToWhite:				; XREF: Pal_MakeFlash
00002186 7000                       		moveq	#0,d0
00002188 41F8 FB00                  		lea	($FFFFFB00).w,a0
0000218C 1038 F626                  		move.b	($FFFFF626).w,d0
00002190 D0C0                       		adda.w	d0,a0
00002192 1038 F627                  		move.b	($FFFFF627).w,d0
00002196                            
00002196                            loc_1FAC:
00002196 6100                       		bsr.s	Pal_AddColor2
00002198 51C8 FFFC                  		dbf	d0,loc_1FAC
0000219C 7000                       		moveq	#0,d0
0000219E 41F8 FA80                  		lea	($FFFFFA80).w,a0
000021A2 1038 F626                  		move.b	($FFFFF626).w,d0
000021A6 D0C0                       		adda.w	d0,a0
000021A8 1038 F627                  		move.b	($FFFFF627).w,d0
000021AC                            
000021AC                            loc_1FC2:
000021AC 6100                       		bsr.s	Pal_AddColor2
000021AE 51C8 FFFC                  		dbf	d0,loc_1FC2
000021B2 4E75                       		rts	
000021B4                            ; End of function Pal_ToWhite
000021B4                            
000021B4                            
000021B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021B4                            
000021B4                            
000021B4                            Pal_AddColor2:				; XREF: Pal_ToWhite
000021B4 3410                       		move.w	(a0),d2
000021B6 0C42 0EEE                  		cmpi.w	#$EEE,d2
000021BA 6700                       		beq.s	loc_2006
000021BC 3202                       		move.w	d2,d1
000021BE 0241 000E                  		andi.w	#$E,d1
000021C2 0C41 000E                  		cmpi.w	#$E,d1
000021C6 6700                       		beq.s	loc_1FE2
000021C8 5458                       		addq.w	#2,(a0)+	; increase red value
000021CA 4E75                       		rts	
000021CC                            ; ===========================================================================
000021CC                            
000021CC                            loc_1FE2:				; XREF: Pal_AddColor2
000021CC 3202                       		move.w	d2,d1
000021CE 0241 00E0                  		andi.w	#$E0,d1
000021D2 0C41 00E0                  		cmpi.w	#$E0,d1
000021D6 6700                       		beq.s	loc_1FF4
000021D8 0658 0020                  		addi.w	#$20,(a0)+	; increase green value
000021DC 4E75                       		rts	
000021DE                            ; ===========================================================================
000021DE                            
000021DE                            loc_1FF4:				; XREF: loc_1FE2
000021DE 3202                       		move.w	d2,d1
000021E0 0241 0E00                  		andi.w	#$E00,d1
000021E4 0C41 0E00                  		cmpi.w	#$E00,d1
000021E8 6700                       		beq.s	loc_2006
000021EA 0658 0200                  		addi.w	#$200,(a0)+	; increase blue	value
000021EE 4E75                       		rts	
000021F0                            ; ===========================================================================
000021F0                            
000021F0                            loc_2006:				; XREF: Pal_AddColor2
000021F0 5448                       		addq.w	#2,a0
000021F2 4E75                       		rts	
000021F4                            ; End of function Pal_AddColor2
000021F4                            
000021F4                            ; ---------------------------------------------------------------------------
000021F4                            ; Pallet cycling routine - Sega	logo
000021F4                            ; ---------------------------------------------------------------------------
000021F4                            
000021F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021F4                            
000021F4                            
000021F4                            PalCycle_Sega:				; XREF: SegaScreen
000021F4 4A38 F635                  		tst.b	($FFFFF635).w
000021F8 6600                       		bne.s	loc_206A
000021FA 43F8 FB20                  		lea	($FFFFFB20).w,a1
000021FE 41F9 0000 0000             		lea	(Pal_Sega1).l,a0
00002204 7205                       		moveq	#5,d1
00002206 3038 F632                  		move.w	($FFFFF632).w,d0
0000220A                            
0000220A                            loc_2020:
0000220A 6A00                       		bpl.s	loc_202A
0000220C 5448                       		addq.w	#2,a0
0000220E 5341                       		subq.w	#1,d1
00002210 5440                       		addq.w	#2,d0
00002212 60F6                       		bra.s	loc_2020
00002214                            ; ===========================================================================
00002214                            
00002214                            loc_202A:				; XREF: PalCycle_Sega
00002214 3400                       		move.w	d0,d2
00002216 0242 001E                  		andi.w	#$1E,d2
0000221A 6600                       		bne.s	loc_2034
0000221C 5440                       		addq.w	#2,d0
0000221E                            
0000221E                            loc_2034:
0000221E 0C40 0060                  		cmpi.w	#$60,d0
00002222 6400                       		bcc.s	loc_203E
00002224 3398 0000                  		move.w	(a0)+,(a1,d0.w)
00002228                            
00002228                            loc_203E:
00002228 5440                       		addq.w	#2,d0
0000222A 51C9 FFE8                  		dbf	d1,loc_202A
0000222E 3038 F632                  		move.w	($FFFFF632).w,d0
00002232 5440                       		addq.w	#2,d0
00002234 3400                       		move.w	d0,d2
00002236 0242 001E                  		andi.w	#$1E,d2
0000223A 6600                       		bne.s	loc_2054
0000223C 5440                       		addq.w	#2,d0
0000223E                            
0000223E                            loc_2054:
0000223E 0C40 0064                  		cmpi.w	#$64,d0
00002242 6D00                       		blt.s	loc_2062
00002244 31FC 0401 F634             		move.w	#$401,($FFFFF634).w
0000224A 70F4                       		moveq	#-$C,d0
0000224C                            
0000224C                            loc_2062:
0000224C 31C0 F632                  		move.w	d0,($FFFFF632).w
00002250 7001                       		moveq	#1,d0
00002252 4E75                       		rts	
00002254                            ; ===========================================================================
00002254                            
00002254                            loc_206A:				; XREF: loc_202A
00002254 5338 F634                  		subq.b	#1,($FFFFF634).w
00002258 6A00                       		bpl.s	loc_20BC
0000225A 11FC 0004 F634             		move.b	#4,($FFFFF634).w
00002260 3038 F632                  		move.w	($FFFFF632).w,d0
00002264 0640 000C                  		addi.w	#$C,d0
00002268 0C40 0030                  		cmpi.w	#$30,d0
0000226C 6500                       		bcs.s	loc_2088
0000226E 7000                       		moveq	#0,d0
00002270 4E75                       		rts	
00002272                            ; ===========================================================================
00002272                            
00002272                            loc_2088:				; XREF: loc_206A
00002272 31C0 F632                  		move.w	d0,($FFFFF632).w
00002276 41F9 0000 0000             		lea	(Pal_Sega2).l,a0
0000227C 41F0 0000                  		lea	(a0,d0.w),a0
00002280 43F8 FB04                  		lea	($FFFFFB04).w,a1
00002284 22D8                       		move.l	(a0)+,(a1)+
00002286 22D8                       		move.l	(a0)+,(a1)+
00002288 3298                       		move.w	(a0)+,(a1)
0000228A 43F8 FB20                  		lea	($FFFFFB20).w,a1
0000228E 7000                       		moveq	#0,d0
00002290 722C                       		moveq	#$2C,d1
00002292                            
00002292                            loc_20A8:
00002292 3400                       		move.w	d0,d2
00002294 0242 001E                  		andi.w	#$1E,d2
00002298 6600                       		bne.s	loc_20B2
0000229A 5440                       		addq.w	#2,d0
0000229C                            
0000229C                            loc_20B2:
0000229C 3390 0000                  		move.w	(a0),(a1,d0.w)
000022A0 5440                       		addq.w	#2,d0
000022A2 51C9 FFEE                  		dbf	d1,loc_20A8
000022A6                            
000022A6                            loc_20BC:
000022A6 7001                       		moveq	#1,d0
000022A8 4E75                       		rts	
000022AA                            ; End of function PalCycle_Sega
000022AA                            
000022AA                            ; ===========================================================================
000022AA                            
000022AA                            Pal_Sega1:	incbin	pallet\sega1.bin
000022B6                            Pal_Sega2:	incbin	pallet\sega2.bin
000022E6                            
000022E6                            ; ---------------------------------------------------------------------------
000022E6                            ; Subroutines to load pallets
000022E6                            ; ---------------------------------------------------------------------------
000022E6                            
000022E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000022E6                            
000022E6                            
000022E6                            PalLoad1:
000022E6 43F9 0000 0000             		lea	(PalPointers).l,a1
000022EC E748                       		lsl.w	#3,d0
000022EE D2C0                       		adda.w	d0,a1
000022F0 2459                       		movea.l	(a1)+,a2
000022F2 3659                       		movea.w	(a1)+,a3
000022F4 D6FC 0080                  		adda.w	#$80,a3
000022F8 3E19                       		move.w	(a1)+,d7
000022FA                            
000022FA                            loc_2110:
000022FA 26DA                       		move.l	(a2)+,(a3)+
000022FC 51CF FFFC                  		dbf	d7,loc_2110
00002300 4E75                       		rts	
00002302                            ; End of function PalLoad1
00002302                            
00002302                            
00002302                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002302                            
00002302                            
00002302                            PalLoad2:
00002302 43F9 0000 0000             		lea	(PalPointers).l,a1
00002308 E748                       		lsl.w	#3,d0
0000230A D2C0                       		adda.w	d0,a1
0000230C 2459                       		movea.l	(a1)+,a2
0000230E 3659                       		movea.w	(a1)+,a3
00002310 3E19                       		move.w	(a1)+,d7
00002312                            
00002312                            loc_2128:
00002312 26DA                       		move.l	(a2)+,(a3)+
00002314 51CF FFFC                  		dbf	d7,loc_2128
00002318 4E75                       		rts	
0000231A                            ; End of function PalLoad2
0000231A                            
0000231A                            ; ---------------------------------------------------------------------------
0000231A                            ; Underwater pallet loading subroutine
0000231A                            ; ---------------------------------------------------------------------------
0000231A                            
0000231A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000231A                            
0000231A                            
0000231A                            PalLoad3_Water:
0000231A 43F9 0000 0000             		lea	(PalPointers).l,a1
00002320 E748                       		lsl.w	#3,d0
00002322 D2C0                       		adda.w	d0,a1
00002324 2459                       		movea.l	(a1)+,a2
00002326 3659                       		movea.w	(a1)+,a3
00002328 96FC 0080                  		suba.w	#$80,a3
0000232C 3E19                       		move.w	(a1)+,d7
0000232E                            
0000232E                            loc_2144:
0000232E 26DA                       		move.l	(a2)+,(a3)+
00002330 51CF FFFC                  		dbf	d7,loc_2144
00002334 4E75                       		rts	
00002336                            ; End of function PalLoad3_Water
00002336                            
00002336                            
00002336                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002336                            
00002336                            
00002336                            PalLoad4_Water:
00002336 43F9 0000 0000             		lea	(PalPointers).l,a1
0000233C E748                       		lsl.w	#3,d0
0000233E D2C0                       		adda.w	d0,a1
00002340 2459                       		movea.l	(a1)+,a2
00002342 3659                       		movea.w	(a1)+,a3
00002344 96FC 0100                  		suba.w	#$100,a3
00002348 3E19                       		move.w	(a1)+,d7
0000234A                            
0000234A                            loc_2160:
0000234A 26DA                       		move.l	(a2)+,(a3)+
0000234C 51CF FFFC                  		dbf	d7,loc_2160
00002350 4E75                       		rts	
00002352                            ; End of function PalLoad4_Water
00002352                            
00002352                            ; ===========================================================================
00002352                            ; ---------------------------------------------------------------------------
00002352                            ; Pallet pointers
00002352                            ; ---------------------------------------------------------------------------
00002352                            PalPointers:
00002352                            	include "_inc\Pallet pointers.asm"
00002352                            ; ---------------------------------------------------------------------------
00002352                            ; Pallet pointers
00002352                            ; ---------------------------------------------------------------------------
00002352 0000 0000                  	dc.l Pal_SegaBG		; pallet address
00002356 FB00                       	dc.w $FB00		; RAM address
00002358 001F                       	dc.w $1F		; (pallet length / 2) - 1
0000235A 0000 0000                  	dc.l Pal_Title
0000235E FB00                       	dc.w $FB00
00002360 001F                       	dc.w $1F
00002362 0000 0000                  	dc.l Pal_LevelSel
00002366 FB00                       	dc.w $FB00
00002368 001F                       	dc.w $1F
0000236A 0000 0000                  	dc.l Pal_Sonic
0000236E FB00                       	dc.w $FB00
00002370 0007                       	dc.w 7
00002372 0000 0000                  	dc.l Pal_GHZ
00002376 FB20                       	dc.w $FB20
00002378 0017                       	dc.w $17
0000237A 0000 0000                  	dc.l Pal_LZ
0000237E FB20                       	dc.w $FB20
00002380 0017                       	dc.w $17
00002382 0000 0000                  	dc.l Pal_MZ
00002386 FB20                       	dc.w $FB20
00002388 0017                       	dc.w $17
0000238A 0000 0000                  	dc.l Pal_SLZ
0000238E FB20                       	dc.w $FB20
00002390 0017                       	dc.w $17
00002392 0000 0000                  	dc.l Pal_SYZ
00002396 FB20                       	dc.w $FB20
00002398 0017                       	dc.w $17
0000239A 0000 0000                  	dc.l Pal_SBZ1
0000239E FB20                       	dc.w $FB20
000023A0 0017                       	dc.w $17
000023A2 0000 0000                  	dc.l Pal_Special
000023A6 FB00                       	dc.w $FB00
000023A8 001F                       	dc.w $1F
000023AA 0000 0000                  	dc.l Pal_LZWater
000023AE FB00                       	dc.w $FB00
000023B0 001F                       	dc.w $1F
000023B2 0000 0000                  	dc.l Pal_SBZ3
000023B6 FB20                       	dc.w $FB20
000023B8 0017                       	dc.w $17
000023BA 0000 0000                  	dc.l Pal_SBZ3Water
000023BE FB00                       	dc.w $FB00
000023C0 001F                       	dc.w $1F
000023C2 0000 0000                  	dc.l Pal_SBZ2
000023C6 FB20                       	dc.w $FB20
000023C8 0017                       	dc.w $17
000023CA 0000 0000                  	dc.l Pal_LZSonWater
000023CE FB00                       	dc.w $FB00
000023D0 0007                       	dc.w 7
000023D2 0000 0000                  	dc.l Pal_SBZ3SonWat
000023D6 FB00                       	dc.w $FB00
000023D8 0007                       	dc.w 7
000023DA 0000 0000                  	dc.l Pal_SpeResult
000023DE FB00                       	dc.w $FB00
000023E0 001F                       	dc.w $1F
000023E2 0000 0000                  	dc.l Pal_SpeContinue
000023E6 FB00                       	dc.w $FB00
000023E8 000F                       	dc.w $F
000023EA 0000 0000                  	dc.l Pal_Ending
000023EE FB00                       	dc.w $FB00
000023F0 001F                       	dc.w $1F
000023F2 0000 0000                  	dc.l Pal_Idiot
000023F6 FB20                       	dc.w $FB20
000023F8 0007                       	dc.w 7
000023FA 0000 0000                  	dc.l Pal_Gronic
000023FE FB00                       	dc.w $FB00
00002400 0007                       	dc.w 7
00002402 0000 0000                  	dc.l Pal_LZGroWater
00002406 FB00                       	dc.w $FB00
00002408 0007                       	dc.w 7
0000240A 0000 0000                  	dc.l Pal_SBZ3GroWat
0000240E FB00                       	dc.w $FB00
00002410 0007                       	dc.w 7
00002410 0007                       	dc.w 7
00002412                            
00002412                            ; ---------------------------------------------------------------------------
00002412                            ; Pallet data
00002412                            ; ---------------------------------------------------------------------------
00002412                            Pal_SegaBG:	incbin	pallet\sega_bg.bin
00002492                            Pal_Title:	incbin	pallet\title.bin
00002512                            Pal_LevelSel:	incbin	pallet\levelsel.bin
00002592                            Pal_Sonic:	incbin	pallet\sonic.bin
00002612                            Pal_GHZ:	incbin	pallet\ghz.bin
00002672                            Pal_LZ:		incbin	pallet\lz.bin
000026D2                            Pal_LZWater:	incbin	pallet\lz_uw.bin	; LZ underwater pallets
00002752                            Pal_MZ:		incbin	pallet\mz.bin
000027B2                            Pal_SLZ:	incbin	pallet\slz.bin
00002812                            Pal_SYZ:	incbin	pallet\syz.bin
00002872                            Pal_SBZ1:	incbin	pallet\sbz_act1.bin	; SBZ act 1 pallets
000028D2                            Pal_SBZ2:	incbin	pallet\sbz_act2.bin	; SBZ act 2 & Final Zone pallets
00002932                            Pal_Special:	incbin	pallet\special.bin	; special stage pallets
000029B2                            Pal_SBZ3:	incbin	pallet\sbz_act3.bin	; SBZ act 3 pallets
00002A12                            Pal_SBZ3Water:	incbin	pallet\sbz_a3uw.bin	; SBZ act 3 (underwater) pallets
00002A92                            Pal_LZSonWater:	incbin	pallet\son_lzuw.bin	; Sonic (underwater in LZ) pallet
00002AB2                            Pal_SBZ3SonWat:	incbin	pallet\son_sbzu.bin	; Sonic (underwater in SBZ act 3) pallet
00002AD2                            Pal_SpeResult:	incbin	pallet\ssresult.bin	; special stage results screen pallets
00002B52                            Pal_SpeContinue:incbin	pallet\sscontin.bin	; special stage results screen continue pallet
00002B92                            Pal_Ending:	incbin	pallet\ending.bin	; ending sequence pallets
00002C12                            Pal_Idiot:	incbin	pallet\idiot.bin	; idiot pallet
00002C32                            Pal_Gronic:	incbin	pallet\gronic.bin	; gronic char
00002C52                            Pal_LZGroWater:	incbin	pallet\groniclzuw.bin	; Gronic (underwater in SBZ act 3) pallet
00002C72                            Pal_SBZ3GroWat:	incbin	pallet\gronicsbz3uw.bin	; Gronic (underwater in SBZ act 3) pallet
00002C92                            
00002C92                            ; ---------------------------------------------------------------------------
00002C92                            ; Subroutine to	delay the program by ($FFFFF62A) frames
00002C92                            ; ---------------------------------------------------------------------------
00002C92                            
00002C92                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002C92                            
00002C92                            
00002C92                            DelayProgram:				; XREF: PauseGame
00002C92 46FC 2300                  		move	#$2300,sr
00002C96                            
00002C96                            loc_29AC:
00002C96 4A38 F62A                  		tst.b	($FFFFF62A).w
00002C9A 66FA                       		bne.s	loc_29AC
00002C9C 4E75                       		rts	
00002C9E                            ; End of function DelayProgram
00002C9E                            
00002C9E                            ; ---------------------------------------------------------------------------
00002C9E                            ; Subroutine to	generate a pseudo-random number	in d0
00002C9E                            ; ---------------------------------------------------------------------------
00002C9E                            
00002C9E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002C9E                            
00002C9E                            
00002C9E                            RandomNumber:
00002C9E 2238 F636                  		move.l	($FFFFF636).w,d1
00002CA2 6600                       		bne.s	loc_29C0
00002CA4 223C 2A6D 365A             		move.l	#$2A6D365A,d1
00002CAA                            
00002CAA                            loc_29C0:
00002CAA 2001                       		move.l	d1,d0
00002CAC E581                       		asl.l	#2,d1
00002CAE D280                       		add.l	d0,d1
00002CB0 E781                       		asl.l	#3,d1
00002CB2 D280                       		add.l	d0,d1
00002CB4 3001                       		move.w	d1,d0
00002CB6 4841                       		swap	d1
00002CB8 D041                       		add.w	d1,d0
00002CBA 3200                       		move.w	d0,d1
00002CBC 4841                       		swap	d1
00002CBE 21C1 F636                  		move.l	d1,($FFFFF636).w
00002CC2 4E75                       		rts	
00002CC4                            ; End of function RandomNumber
00002CC4                            
00002CC4                            
00002CC4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002CC4                            
00002CC4                            
00002CC4                            CalcSine:				; XREF: SS_BGAnimate; et al
00002CC4 0240 00FF                  		andi.w	#$FF,d0
00002CC8 D040                       		add.w	d0,d0
00002CCA 0640 0080                  		addi.w	#$80,d0
00002CCE 323B 0000                  		move.w	Sine_Data(pc,d0.w),d1
00002CD2 0440 0080                  		subi.w	#$80,d0
00002CD6 303B 0000                  		move.w	Sine_Data(pc,d0.w),d0
00002CDA 4E75                       		rts	
00002CDC                            ; End of function CalcSine
00002CDC                            
00002CDC                            ; ===========================================================================
00002CDC                            
00002CDC                            Sine_Data:	incbin	misc\sinewave.bin	; values for a 360ยบ sine wave
00002F5C                            
00002F5C                            ; ===========================================================================
00002F5C 48E7 6000                  		movem.l	d1-d2,-(sp)
00002F60 3200                       		move.w	d0,d1
00002F62 4841                       		swap	d1
00002F64 7000                       		moveq	#0,d0
00002F66 3200                       		move.w	d0,d1
00002F68 7407                       		moveq	#7,d2
00002F6A                            
00002F6A                            loc_2C80:
00002F6A E599                       		rol.l	#2,d1
00002F6C D040                       		add.w	d0,d0
00002F6E 5240                       		addq.w	#1,d0
00002F70 9240                       		sub.w	d0,d1
00002F72 6400                       		bcc.s	loc_2C9A
00002F74 D240                       		add.w	d0,d1
00002F76 5340                       		subq.w	#1,d0
00002F78 51CA FFF0                  		dbf	d2,loc_2C80
00002F7C E248                       		lsr.w	#1,d0
00002F7E 4CDF 0006                  		movem.l	(sp)+,d1-d2
00002F82 4E75                       		rts	
00002F84                            ; ===========================================================================
00002F84                            
00002F84                            loc_2C9A:
00002F84 5240                       		addq.w	#1,d0
00002F86 51CA FFE2                  		dbf	d2,loc_2C80
00002F8A E248                       		lsr.w	#1,d0
00002F8C 4CDF 0006                  		movem.l	(sp)+,d1-d2
00002F90 4E75                       		rts	
00002F92                            
00002F92                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002F92                            
00002F92                            
00002F92                            CalcAngle:
00002F92 48E7 1800                  		movem.l	d3-d4,-(sp)
00002F96 7600                       		moveq	#0,d3
00002F98 7800                       		moveq	#0,d4
00002F9A 3601                       		move.w	d1,d3
00002F9C 3802                       		move.w	d2,d4
00002F9E 8843                       		or.w	d3,d4
00002FA0 6700                       		beq.s	loc_2D04
00002FA2 3802                       		move.w	d2,d4
00002FA4 4A43                       		tst.w	d3
00002FA6 6A00 0000                  		bpl.w	loc_2CC2
00002FAA 4443                       		neg.w	d3
00002FAC                            
00002FAC                            loc_2CC2:
00002FAC 4A44                       		tst.w	d4
00002FAE 6A00 0000                  		bpl.w	loc_2CCA
00002FB2 4444                       		neg.w	d4
00002FB4                            
00002FB4                            loc_2CCA:
00002FB4 B843                       		cmp.w	d3,d4
00002FB6 6400 0000                  		bcc.w	loc_2CDC
00002FBA E18C                       		lsl.l	#8,d4
00002FBC 88C3                       		divu.w	d3,d4
00002FBE 7000                       		moveq	#0,d0
00002FC0 103B 4000                  		move.b	Angle_Data(pc,d4.w),d0
00002FC4 6000                       		bra.s	loc_2CE6
00002FC6                            ; ===========================================================================
00002FC6                            
00002FC6                            loc_2CDC:				; XREF: CalcAngle
00002FC6 E18B                       		lsl.l	#8,d3
00002FC8 86C4                       		divu.w	d4,d3
00002FCA 7040                       		moveq	#$40,d0
00002FCC 903B 3000                  		sub.b	Angle_Data(pc,d3.w),d0
00002FD0                            
00002FD0                            loc_2CE6:
00002FD0 4A41                       		tst.w	d1
00002FD2 6A00 0000                  		bpl.w	loc_2CF2
00002FD6 4440                       		neg.w	d0
00002FD8 0640 0080                  		addi.w	#$80,d0
00002FDC                            
00002FDC                            loc_2CF2:
00002FDC 4A42                       		tst.w	d2
00002FDE 6A00 0000                  		bpl.w	loc_2CFE
00002FE2 4440                       		neg.w	d0
00002FE4 0640 0100                  		addi.w	#$100,d0
00002FE8                            
00002FE8                            loc_2CFE:
00002FE8 4CDF 0018                  		movem.l	(sp)+,d3-d4
00002FEC 4E75                       		rts	
00002FEE                            ; ===========================================================================
00002FEE                            
00002FEE                            loc_2D04:				; XREF: CalcAngle
00002FEE 303C 0040                  		move.w	#$40,d0
00002FF2 4CDF 0018                  		movem.l	(sp)+,d3-d4
00002FF6 4E75                       		rts	
00002FF8                            ; End of function CalcAngle
00002FF8                            
00002FF8                            ; ===========================================================================
00002FF8                            
00002FF8                            Angle_Data:	incbin	misc\angles.bin
000030FA                            
000030FA                            ; ===========================================================================
000030FA                            
000030FA                            ; ---------------------------------------------------------------------------
000030FA                            ; Sega screen
000030FA                            ; ---------------------------------------------------------------------------
000030FA                            
000030FA                            SegaScreen:				; XREF: GameModeArray
000030FA 103C 00E4                  		move.b	#$E4,d0
000030FE 6100 E4C0                  		bsr.w	PlaySound_Special ; stop music
00003102 6100 E6FE                  		bsr.w	ClearPLC
00003106 6100 EF34                  		bsr.w	Pal_FadeFrom
0000310A 4DF9 00C0 0004             		lea	($C00004).l,a6
00003110 3CBC 8004                  		move.w	#$8004,(a6)
00003114 3CBC 8230                  		move.w	#$8230,(a6)
00003118 3CBC 8407                  		move.w	#$8407,(a6)
0000311C 3CBC 8700                  		move.w	#$8700,(a6)
00003120 3CBC 8B00                  		move.w	#$8B00,(a6)
00003124 4238 F64E                  		clr.b	($FFFFF64E).w
00003128 46FC 2700                  		move	#$2700,sr
0000312C 3038 F60C                  		move.w	($FFFFF60C).w,d0
00003130 0200 00BF                  		andi.b	#$BF,d0
00003134 33C0 00C0 0004             		move.w	d0,($C00004).l
0000313A 6100 E3AC                  		bsr.w	ClearScreen
0000313E 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00003148 41F9 0000 0000             		lea	(Nem_SegaLogo).l,a0 ; load Sega	logo patterns
0000314E 6100 E514                  		bsr.w	NemDec
00003152 43F9 00FF 0000             		lea	($FF0000).l,a1
00003158 41F9 0000 0000             		lea	(Eni_SegaLogo).l,a0 ; load Sega	logo mappings
0000315E 303C 0000                  		move.w	#0,d0
00003162 6100 E7DE                  		bsr.w	EniDec
00003166 43F9 00FF 0000             		lea	($FF0000).l,a1
0000316C 203C 6510 0003             		move.l	#$65100003,d0
00003172 7217                       		moveq	#$17,d1
00003174 7407                       		moveq	#7,d2
00003176 6100 E4CC                  		bsr.w	ShowVDPGraphics
0000317A 43F9 00FF 0180             		lea	($FF0180).l,a1
00003180 203C 4000 0003             		move.l	#$40000003,d0
00003186 7227                       		moveq	#$27,d1
00003188 741B                       		moveq	#$1B,d2
0000318A 6100 E4B8                  		bsr.w	ShowVDPGraphics
0000318E 7000                       		moveq	#0,d0
00003190 6100 F170                  		bsr.w	PalLoad2	; load Sega logo pallet
00003194 31FC FFF6 F632             		move.w	#-$A,($FFFFF632).w
0000319A 31FC 0000 F634             		move.w	#0,($FFFFF634).w
000031A0 31FC 0000 F662             		move.w	#0,($FFFFF662).w
000031A6 31FC 0000 F660             		move.w	#0,($FFFFF660).w
000031AC 3038 F60C                  		move.w	($FFFFF60C).w,d0
000031B0 0000 0040                  		ori.b	#$40,d0
000031B4 33C0 00C0 0004             		move.w	d0,($C00004).l
000031BA                            
000031BA                            Sega_WaitPallet:
000031BA 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
000031C0 6100 FAD0                  		bsr.w	DelayProgram
000031C4 6100 F02E                  		bsr.w	PalCycle_Sega
000031C8 66F0                       		bne.s	Sega_WaitPallet
000031CA                            
000031CA 103C 00E1                  		move.b	#$E1,d0
000031CE 6100 E3F0                  		bsr.w	PlaySound_Special ; play "SEGA"	sound
000031D2 11FC 0014 F62A             		move.b	#$14,($FFFFF62A).w
000031D8 6100 FAB8                  		bsr.w	DelayProgram
000031DC 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
000031E2                            
000031E2                            Sega_WaitEnd:
000031E2 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
000031E8 6100 FAA8                  		bsr.w	DelayProgram
000031EC 4A78 F614                  		tst.w	($FFFFF614).w
000031F0 6700                       		beq.s	Sega_GotoTitle
000031F2 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
000031F8 67E8                       		beq.s	Sega_WaitEnd	; if not, branch
000031FA                            
000031FA                            Sega_GotoTitle:
000031FA 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; go to title screen
00003200 4E75                       		rts	
00003202                            ; ===========================================================================
00003202                            
00003202                            ; ---------------------------------------------------------------------------
00003202                            ; Title	screen
00003202                            ; ---------------------------------------------------------------------------
00003202                            
00003202                            TitleScreen:				; XREF: GameModeArray
00003202 103C 00E4                  		move.b	#$E4,d0
00003206 6100 E3B8                  		bsr.w	PlaySound_Special ; stop music
0000320A 6100 EE30                  		bsr.w	Pal_FadeFrom
0000320E 6100 E5F2                  		bsr.w	ClearPLC
00003212 46FC 2700                  		move	#$2700,sr
00003216 6100 E35E                  		bsr.w	SoundDriverLoad
0000321A 4DF9 00C0 0004             		lea	($C00004).l,a6
00003220 3CBC 8004                  		move.w	#$8004,(a6)
00003224 3CBC 8230                  		move.w	#$8230,(a6)
00003228 3CBC 8407                  		move.w	#$8407,(a6)
0000322C 3CBC 9001                  		move.w	#$9001,(a6)
00003230 3CBC 9200                  		move.w	#$9200,(a6)
00003234 3CBC 8B03                  		move.w	#$8B03,(a6)
00003238 3CBC 8720                  		move.w	#$8720,(a6)
0000323C 4238 F64E                  		clr.b	($FFFFF64E).w
00003240 6100 E2A6                  		bsr.w	ClearScreen
00003244 43F8 D000                  		lea	($FFFFD000).w,a1
00003248 7000                       		moveq	#0,d0
0000324A 323C 07FF                  		move.w	#$7FF,d1
0000324E                            
0000324E                            Title_ClrObjRam:
0000324E 22C0                       		move.l	d0,(a1)+
00003250 51C9 FFFC                  		dbf	d1,Title_ClrObjRam ; fill object RAM ($D000-$EFFF) with	$0
00003254                            
00003254                            ; gomer
00003254 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
0000325E 41F9 0000 0000             		lea	(Nem_Gomer).l,a0 ; load Gomer patterns
00003264 6100 E3FE                  		bsr.w	NemDec
00003268 7003                       		moveq	#3,d0		; load Sonic's pallet
0000326A 6100 F07A                  		bsr.w	PalLoad1
0000326E                            
0000326E 43F9 00FF 0000             		lea	($FF0000).l,a1
00003274 41F9 0000 0000             		lea	(Eni_Gomer).l,a0 ; load mappings for	Gomer credits
0000327A 303C 0000                  		move.w	#0,d0
0000327E 6100 E6C2                  		bsr.w	EniDec
00003282                            ; help how the fuck can i do this IT SHOWS NOTHING
00003282 43F9 00FF 0000             		lea	($FF0000).l,a1
00003288 203C 4000 0003             		move.l	#$40000003,d0
0000328E 7227                       		moveq	#$27,d1
00003290 741B                       		moveq	#$1B,d2
00003292 6100 E3B0                  		bsr.w	ShowVDPGraphics
00003296                            
00003296                            
00003296 43F9 00FF 0000             		lea	($FF0000).l,a1
0000329C 203C 6000 0003             		move.l	#$60000003,d0
000032A2 7227                       		moveq	#$27,d1
000032A4 741B                       		moveq	#$1B,d2
000032A6                            
000032A6 6100 ECEE                  		bsr.w	Pal_FadeTo
000032AA 6100 ED90                  		bsr.w	Pal_FadeFrom
000032AE                            
000032AE                            
000032AE 6100 E238                  		bsr.w	ClearScreen
000032B2 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
000032BC 41F9 0000 0000             		lea	(Nem_JapNames).l,a0 ; load Japanese credits
000032C2 6100 E3A0                  		bsr.w	NemDec
000032C6 23FC 54C0 0000 00C0 0004   		move.l	#$54C00000,($C00004).l
000032D0 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load alphabet
000032D6 6100 E38C                  		bsr.w	NemDec
000032DA 43F9 00FF 0000             		lea	($FF0000).l,a1
000032E0 41F9 0000 0000             		lea	(Eni_JapNames).l,a0 ; load mappings for	Japanese credits
000032E6 303C 0000                  		move.w	#0,d0
000032EA 6100 E656                  		bsr.w	EniDec
000032EE 43F9 00FF 0000             		lea	($FF0000).l,a1
000032F4 203C 4000 0003             		move.l	#$40000003,d0
000032FA 7227                       		moveq	#$27,d1
000032FC 741B                       		moveq	#$1B,d2
000032FE 6100 E344                  		bsr.w	ShowVDPGraphics
00003302 6100 ED38                  		bsr.w	Pal_FadeFrom
00003306 43F8 FB80                  		lea	($FFFFFB80).w,a1
0000330A 7000                       		moveq	#0,d0
0000330C 323C 001F                  		move.w	#$1F,d1
00003310                            
00003310                            
00003310                            Title_ClrPallet:
00003310 22C0                       		move.l	d0,(a1)+
00003312 51C9 FFFC                  		dbf	d1,Title_ClrPallet ; fill pallet with 0	(black)
00003316                            
00003316 7003                       		moveq	#3,d0		; load Sonic's pallet
00003318 6100 EFCC                  		bsr.w	PalLoad1
0000331C 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load "SONIC TEAM PRESENTS"	object
00003322 4EB9 0000 0000             		jsr	ObjectsLoad
00003328 4EB9 0000 0000             		jsr	BuildSprites
0000332E 6100 EC66                  		bsr.w	Pal_FadeTo
00003332 46FC 2700                  		move	#$2700,sr
00003336 23FC 4000 0001 00C0 0004   		move.l	#$40000001,($C00004).l
00003340 41F9 0000 0000             		lea	(Nem_TitleFg).l,a0 ; load title	screen patterns
00003346 6100 E31C                  		bsr.w	NemDec
0000334A 23FC 6000 0001 00C0 0004   		move.l	#$60000001,($C00004).l
00003354 41F9 0000 0000             		lea	(Nem_TitleSonic).l,a0 ;	load Sonic title screen	patterns
0000335A 6100 E308                  		bsr.w	NemDec
0000335E 23FC 6200 0002 00C0 0004   		move.l	#$62000002,($C00004).l
00003368 41F9 0000 0000             		lea	(Nem_TitleTM).l,a0 ; load "TM" patterns
0000336E 6100 E2F4                  		bsr.w	NemDec
00003372 4DF9 00C0 0000             		lea	($C00000).l,a6
00003378 2D7C 5000 0003 0004        		move.l	#$50000003,4(a6)
00003380 4BF9 0000 05F4             		lea	(Art_Text).l,a5
00003386 323C 0BB6                  		move.w	#(Art_Text_end-Art_Text/4)-1,d1
0000338A                            
0000338A                            Title_LoadText:
0000338A 2C9D                       		move.l	(a5)+,(a6)
0000338C 51C9 FFFC                  		dbf	d1,Title_LoadText ; load uncompressed text patterns
00003390                            
00003390 11FC 0000 FE30             		move.b	#0,($FFFFFE30).w ; clear lamppost counter
00003396 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w ; disable debug item placement	mode
0000339C 31FC 0000 FFF0             		move.w	#0,($FFFFFFF0).w ; disable debug mode
000033A2 31FC 0000 FFEA             		move.w	#0,($FFFFFFEA).w
000033A8 31FC 0000 FE10             		move.w	#0,($FFFFFE10).w ; set level to	GHZ (00)
000033AE 31FC 0000 F634             		move.w	#0,($FFFFF634).w ; disable pallet cycling
000033B4 6100 0000                  		bsr.w	LevelSizeLoad
000033B8 6100 0000                  		bsr.w	DeformBgLayer
000033BC                            
000033BC 43F8 B000                  		lea	($FFFFB000).w,a1
000033C0 41F9 0000 0000             		lea	(Blk16_GHZ).l,a0 ; load	GHZ 16x16 mappings
000033C6 303C 0000                  		move.w	#0,d0
000033CA 6100 E576                  		bsr.w	EniDec
000033CE 41F9 0000 0000             		lea	(Blk256_GHZ).l,a0 ; load GHZ 256x256 mappings
000033D4 43F9 00FF 0000             		lea	($FF0000).l,a1
000033DA 6100 E6E4                  		bsr.w	KosDec
000033DE 6100 0000                  		bsr.w	LevelLayoutLoad
000033E2                            
000033E2 46FC 2700                  		move	#$2700,sr
000033E6 6100 E100                  		bsr.w	ClearScreen
000033EA 4BF9 00C0 0004             		lea	($C00004).l,a5
000033F0 4DF9 00C0 0000             		lea	($C00000).l,a6
000033F6 47F8 F708                  		lea	($FFFFF708).w,a3
000033FA 49F8 A440                  		lea	($FFFFA440).w,a4
000033FE 343C 6000                  		move.w	#$6000,d2
00003402 6100 0000                  		bsr.w	LoadTilesFromStart2
00003406 43F9 00FF 0000             		lea	($FF0000).l,a1
0000340C 41F9 0000 0000             		lea	(Eni_Title).l,a0 ; load	title screen mappings
00003412 303C 0000                  		move.w	#0,d0
00003416 6100 E52A                  		bsr.w	EniDec
0000341A 43F9 00FF 0000             		lea	($FF0000).l,a1
00003420 203C 4206 0003             		move.l	#$42060003,d0
00003426 7221                       		moveq	#$21,d1
00003428 7415                       		moveq	#$15,d2
0000342A 6100 E218                  		bsr.w	ShowVDPGraphics
0000342E 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00003438 41F9 0000 0000             		lea	(Nem_GHZ_1st).l,a0 ; load GHZ patterns
0000343E 6100 E224                  		bsr.w	NemDec
00003442 7001                       		moveq	#1,d0		; load title screen pallet
00003444 6100 EEA0                  		bsr.w	PalLoad1
00003448 103C 008A                  		move.b	#$8A,d0		; play title screen music
0000344C 6100 E172                  		bsr.w	PlaySound_Special
00003450 11FC 0000 FFFA             		move.b	#0,($FFFFFFFA).w ; disable debug mode
00003456 31FC 0178 F614             		move.w	#$178,($FFFFF614).w ; run title	screen for $178	frames
0000345C 43F8 D080                  		lea	($FFFFD080).w,a1
00003460 7000                       		moveq	#0,d0
00003462 323C 000F                  		move.w	#$F,d1
00003466                            
00003466                            Title_ClrObjRam2:
00003466 22C0                       		move.l	d0,(a1)+
00003468 51C9 FFFC                  		dbf	d1,Title_ClrObjRam2
0000346C                            
0000346C 11FC 000E D040             		move.b	#$E,($FFFFD040).w ; load big Sonic object
00003472 11FC 000F D080             		move.b	#$F,($FFFFD080).w ; load "PRESS	START BUTTON" object
00003478 11FC 000F D0C0             		move.b	#$F,($FFFFD0C0).w ; load "TM" object
0000347E 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
00003484 11FC 000F D100             		move.b	#$F,($FFFFD100).w
0000348A 11FC 0002 D11A             		move.b	#2,($FFFFD11A).w
00003490 4EB9 0000 0000             		jsr	ObjectsLoad
00003496 6100 0000                  		bsr.w	DeformBgLayer
0000349A 4EB9 0000 0000             		jsr	BuildSprites
000034A0 7000                       		moveq	#0,d0
000034A2 6100 E332                  		bsr.w	LoadPLC2
000034A6 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
000034AC 31FC 0000 FFE6             		move.w	#0,($FFFFFFE6).w
000034B2 3038 F60C                  		move.w	($FFFFF60C).w,d0
000034B6 0000 0040                  		ori.b	#$40,d0
000034BA 33C0 00C0 0004             		move.w	d0,($C00004).l
000034C0 6100 EAD4                  		bsr.w	Pal_FadeTo
000034C4                            
000034C4                            loc_317C:
000034C4 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000034CA 6100 F7C6                  		bsr.w	DelayProgram
000034CE 4EB9 0000 0000             		jsr	ObjectsLoad
000034D4 6100 0000                  		bsr.w	DeformBgLayer
000034D8 4EB9 0000 0000             		jsr	BuildSprites
000034DE 6100 E6A0                  		bsr.w	PalCycle_Title
000034E2 6100 E32C                  		bsr.w	RunPLC_RAM
000034E6 3038 D008                  		move.w	($FFFFD008).w,d0
000034EA 5440                       		addq.w	#2,d0
000034EC 31C0 D008                  		move.w	d0,($FFFFD008).w ; move	Sonic to the right
000034F0 0C40 1C00                  		cmpi.w	#$1C00,d0	; has Sonic object passed x-position $1C00?
000034F4 6500                       		bcs.s	Title_ChkRegion	; if not, branch
000034F6 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
000034FC 4E75                       		rts	
000034FE                            ; ===========================================================================
000034FE                            
000034FE                            Title_ChkRegion:
000034FE 4A38 FFF8                  		tst.b	($FFFFFFF8).w	; check	if the machine is US or	Japanese
00003502 6A00                       		bpl.s	Title_RegionJ	; if Japanese, branch
00003504 41F9 0000 0000             		lea	(LevelSelectCode_US).l,a0 ; load US code
0000350A 6000                       		bra.s	Title_EnterCheat
0000350C                            ; ===========================================================================
0000350C                            
0000350C                            Title_RegionJ:				; XREF: Title_ChkRegion
0000350C 41F9 0000 0000             		lea	(LevelSelectCode_J).l,a0 ; load	J code
00003512                            
00003512                            Title_EnterCheat:			; XREF: Title_ChkRegion
00003512 3038 FFE4                  		move.w	($FFFFFFE4).w,d0
00003516 D0C0                       		adda.w	d0,a0
00003518 1038 F605                  		move.b	($FFFFF605).w,d0 ; get button press
0000351C 0200 000F                  		andi.b	#$F,d0		; read only up/down/left/right buttons
00003520 B010                       		cmp.b	(a0),d0		; does button press match the cheat code?
00003522 6600                       		bne.s	loc_3210	; if not, branch
00003524 5278 FFE4                  		addq.w	#1,($FFFFFFE4).w ; next	button press
00003528 4A00                       		tst.b	d0
0000352A 6600                       		bne.s	Title_CountC
0000352C 41F8 FFE0                  		lea	($FFFFFFE0).w,a0
00003530 3238 FFE6                  		move.w	($FFFFFFE6).w,d1
00003534 E249                       		lsr.w	#1,d1
00003536 0241 0003                  		andi.w	#3,d1
0000353A 6700                       		beq.s	Title_PlayRing
0000353C 4A38 FFF8                  		tst.b	($FFFFFFF8).w
00003540 6A00                       		bpl.s	Title_PlayRing
00003542 7201                       		moveq	#1,d1
00003544 1181 1001                  		move.b	d1,1(a0,d1.w)
00003548                            
00003548                            Title_PlayRing:
00003548 11BC 0001 1000             		move.b	#1,(a0,d1.w)	; activate cheat
0000354E 103C 00B5                  		move.b	#$B5,d0		; play ring sound when code is entered
00003552 6100 E06C                  		bsr.w	PlaySound_Special
00003556 6000                       		bra.s	Title_CountC
00003558                            ; ===========================================================================
00003558                            
00003558                            loc_3210:				; XREF: Title_EnterCheat
00003558 4A00                       		tst.b	d0
0000355A 6700                       		beq.s	Title_CountC
0000355C 0C78 0009 FFE4             		cmpi.w	#9,($FFFFFFE4).w
00003562 6700                       		beq.s	Title_CountC
00003564 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
0000356A                            
0000356A                            Title_CountC:
0000356A 1038 F605                  		move.b	($FFFFF605).w,d0
0000356E 0200 0020                  		andi.b	#$20,d0		; is C button pressed?
00003572 6700                       		beq.s	loc_3230	; if not, branch
00003574 5278 FFE6                  		addq.w	#1,($FFFFFFE6).w ; increment C button counter
00003578                            
00003578                            loc_3230:
00003578 4A78 F614                  		tst.w	($FFFFF614).w
0000357C 6700 0000                  		beq.w	Demo
00003580                            		; (temporary until we have an actual options screen)
00003580 0838 0005 F605             		btst	#5,	($FFFFF605).w ; check if c pressed
00003586 6700                       		beq.s	@notc
00003588                            
00003588 0A38 0001 FFE8             		eor.b	#1,(v_character) ; sonic/gronic 
0000358E 103C 00B5                  		move.b	#$B5,d0		; play ring sound when code is entered
00003592 6100 E02C                  		bsr.w	PlaySound_Special
00003596                            	@notc:
00003596 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; check if Start is pressed
0000359C 6700 FF26                  		beq.w	loc_317C	; if not, branch
000035A0                            
000035A0                            Title_ChkLevSel:
000035A0 4A38 FFE0                  		tst.b	($FFFFFFE0).w	; check	if level select	code is	on
000035A4 6700 0000                  		beq.w	PlayLevel	; if not, play level
000035A8 0838 0006 F604             		btst	#6,($FFFFF604).w ; check if A is pressed
000035AE 6700 0000                  		beq.w	PlayLevel	; if not, play level
000035B2                            		
000035B2                            		
000035B2 7002                       		moveq	#2,d0
000035B4 6100 ED4C                  		bsr.w	PalLoad2	; load level select pallet
000035B8 43F8 CC00                  		lea	($FFFFCC00).w,a1
000035BC 7000                       		moveq	#0,d0
000035BE 323C 00DF                  		move.w	#$DF,d1
000035C2                            
000035C2                            Title_ClrScroll:
000035C2 22C0                       		move.l	d0,(a1)+
000035C4 51C9 FFFC                  		dbf	d1,Title_ClrScroll ; fill scroll data with 0
000035C8                            
000035C8 21C0 F616                  		move.l	d0,($FFFFF616).w
000035CC 46FC 2700                  		move	#$2700,sr
000035D0 4DF9 00C0 0000             		lea	($C00000).l,a6
000035D6 23FC 6000 0003 00C0 0004   		move.l	#$60000003,($C00004).l
000035E0 323C 03FF                  		move.w	#$3FF,d1
000035E4                            
000035E4                            Title_ClrVram:
000035E4 2C80                       		move.l	d0,(a6)
000035E6 51C9 FFFC                  		dbf	d1,Title_ClrVram ; fill	VRAM with 0
000035EA                            
000035EA 6100 0000                  		bsr.w	LevSelTextLoad
000035EE                            		
000035EE                            		; sound test fix
000035EE 3C38 FF82                  		move.w	($FFFFFF82).w,d6
000035F2 31FC 0014 FF82             		move.w	#$14,($FFFFFF82).w
000035F8                            		
000035F8 363C C65F                  		move.w	#$C680-$21,d3 ; selected
000035FC 0C46 0014                  		cmpi.w	#$14,d6
00003600 6700                       		beq.s	@issndtst
00003602 363C E65F                  		move.w	#$E680-$21,d3 ; not selected
00003606                            	@issndtst:
00003606 6100 0000                  		bsr.w	LevSelSndTest	; refresh text
0000360A 31C6 FF82                  		move.w	d6,($FFFFFF82).w
0000360E                            		
0000360E 363C C65F                  		move.w	#$C680-$21,d3	; VRAM setting
00003612 2D7C 6D02 0003 0004        		move.l	#lsctrlpos,4(a6)
0000361A                            		
0000361A 0C78 0014 FF82             		cmpi.w	#$14,($FFFFFF82).w
00003620 6700                       		beq.s	@issndtst2
00003622                            		
00003622 43F9 0000 0000             		lea	(Controls_Normal).l,a1 ; control help
00003628 6100 0000                  		bsr.w	CStringSlop
0000362C 6000                       		bra.s	LevelSelect
0000362E                            	@issndtst2:
0000362E 43F9 0000 0000             		lea	(Controls_SND).l,a1
00003634 6100 0000                  		bsr.w	CStringSlop
00003638                            ; ---------------------------------------------------------------------------
00003638                            ; Level	Select
00003638                            ; ---------------------------------------------------------------------------
00003638                            LevelSelect:
00003638 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
0000363E 6100 F652                  		bsr.w	DelayProgram
00003642 6100 0000                  		bsr.w	LevSelControls
00003646 6100 E1C8                  		bsr.w	RunPLC_RAM
0000364A 4AB8 F680                  		tst.l	($FFFFF680).w
0000364E 66E8                       		bne.s	LevelSelect
00003650 0238 00F0 F605             		andi.b	#$F0,($FFFFF605).w ; is	A, B, C, or Start pressed?
00003656 67E0                       		beq.s	LevelSelect	; if not, branch
00003658 3038 FF82                  		move.w	($FFFFFF82).w,d0
0000365C 0C40 0000                  		cmpi.w	#lswifi,d0		; have you selected item $15 (free wifi)?
00003660 6600                       		bne.s	@dont	; if not, dont blow this place up
00003662                            			
00003662 11FC 00E5 F00B             		move.b	#$E5,($FFFFF00B).w ; YOU ARE AN IDIOT BOOM
00003668 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
0000366E 6100 F622                  		bsr.w	DelayProgram
00003672                            	@dont:
00003672 0C40 0000                  		cmpi.w	#lssndtest,d0		; have you selected item $14 (sound test)?
00003676 6600                       		bne.s	LevSel_Level_SS	; if not, go to	Level/SS subroutine
00003678                            		
00003678 0238 00A0 F605             		andi.b	#$A0,($FFFFF605).w ; is C or Start pressed?
0000367E 67B8                       		beq.s	LevelSelect	; if not, branch
00003680                            		
00003680 0838 0007 F605             		btst	#7,($FFFFF605).w ; was it start?
00003686 6600                       		bne.s	LevSel_SEGA ; then go to sega screen
00003688                            		
00003688 1038 FF84                  		move.b	($FFFFFF84).w,d0
0000368C 11C0 F00B                  		move.b	d0,($FFFFF00B).w ; PlaySound_Special but faster
00003690                            		
00003690 4EB9 0000 0000             		jsr		ShowNow_Playing
00003696 60A0                       		bra.s	LevelSelect
00003698                            ; ===========================================================================
00003698                            
00003698                            LevSel_SEGA:				; XREF: LevelSelect
00003698 11FC 0000 F600             		move.b	#$0,($FFFFF600).w ; set screen	mode to	$0 SEGA
0000369E 4E75                       		rts	
000036A0                            ; ===========================================================================
000036A0                            
000036A0                            LevSel_Ending:				; XREF: LevelSelect
000036A0 11FC 0018 F600             		move.b	#$18,($FFFFF600).w ; set screen	mode to	$18 (Ending)
000036A6 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	to 0600	(Ending)
000036AC 4E75                       		rts	
000036AE                            ; ===========================================================================
000036AE                            
000036AE                            LevSel_Credits:				; XREF: LevelSelect
000036AE 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set screen	mode to	$1C (Credits)
000036B4 103C 0091                  		move.b	#$91,d0
000036B8 6100 DF06                  		bsr.w	PlaySound_Special ; play credits music
000036BC 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w
000036C2 4E75                       		rts	
000036C4                            ; ===========================================================================
000036C4                            
000036C4                            LevSel_Level_SS:			; XREF: LevelSelect
000036C4 D040                       		add.w	d0,d0
000036C6 303B 0000                  		move.w	LSelectPointers(pc,d0.w),d0 ; load level number
000036CA 6B00 FF6C                  		bmi.w	LevelSelect
000036CE 0C40 0700                  		cmpi.w	#$700,d0	; check	if level is 0700 (Special Stage)
000036D2 6600                       		bne.s	LevSel_Level	; if not, branch
000036D4 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
000036DA 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level
000036DE 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
000036E4 7000                       		moveq	#0,d0
000036E6 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
000036EA 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
000036EE 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
000036F2 4E75                       		rts	
000036F4                            ; ===========================================================================
000036F4                            
000036F4                            LevSel_Level:				; XREF: LevSel_Level_SS
000036F4 0240 3FFF                  		andi.w	#$3FFF,d0
000036F8 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
000036FC                            
000036FC                            PlayLevel:				; XREF: ROM:00003246j ...
000036FC 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00003702 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
00003708 7000                       		moveq	#0,d0
0000370A 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
0000370E 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003712 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00003716 11C0 FE16                  		move.b	d0,($FFFFFE16).w ; clear special stage number
0000371A 11C0 FE57                  		move.b	d0,($FFFFFE57).w ; clear emeralds
0000371E 21C0 FE58                  		move.l	d0,($FFFFFE58).w ; clear emeralds
00003722 21C0 FE5C                  		move.l	d0,($FFFFFE5C).w ; clear emeralds
00003726 11C0 FE18                  		move.b	d0,($FFFFFE18).w ; clear continues
0000372A 103C 00E0                  		move.b	#$E0,d0
0000372E 6100 DE90                  		bsr.w	PlaySound_Special ; fade out music
00003732 4E75                       		rts	
00003734                            ; ===========================================================================
00003734                            ; ---------------------------------------------------------------------------
00003734                            ; Level	select - level pointers
00003734                            ; ---------------------------------------------------------------------------
00003734                            LSelectPointers:
00003734                            		incbin	misc\ls_point.bin
0000375E                            		even
0000375E                            ; ---------------------------------------------------------------------------
0000375E                            ; Level	select codes
0000375E                            ; ---------------------------------------------------------------------------
0000375E                            LevelSelectCode_J:
0000375E                            		incbin	misc\ls_jcode.bin
00003764                            		even
00003764                            
00003764                            LevelSelectCode_US:
00003764                            		incbin	misc\ls_ucode.bin
0000376A                            		even
0000376A                            ; ===========================================================================
0000376A                            
0000376A                            ; ---------------------------------------------------------------------------
0000376A                            ; Demo mode
0000376A                            ; ---------------------------------------------------------------------------
0000376A                            
0000376A                            Demo:					; XREF: TitleScreen
0000376A 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
00003770                            
00003770                            loc_33B6:				; XREF: loc_33E4
00003770 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003776 6100 F51A                  		bsr.w	DelayProgram
0000377A 6100 0000                  		bsr.w	DeformBgLayer
0000377E 6100 E3E0                  		bsr.w	PalCycle_Load
00003782 6100 E08C                  		bsr.w	RunPLC_RAM
00003786 3038 D008                  		move.w	($FFFFD008).w,d0
0000378A 5440                       		addq.w	#2,d0
0000378C 31C0 D008                  		move.w	d0,($FFFFD008).w
00003790 0C40 1C00                  		cmpi.w	#$1C00,d0
00003794 6500                       		bcs.s	loc_33E4
00003796 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (level)
0000379C 4E75                       		rts	
0000379E                            ; ===========================================================================
0000379E                            
0000379E                            loc_33E4:				; XREF: Demo
0000379E 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
000037A4 6600 FDFA                  		bne.w	Title_ChkLevSel	; if yes, branch
000037A8 4A78 F614                  		tst.w	($FFFFF614).w
000037AC 6600 FFC2                  		bne.w	loc_33B6
000037B0 103C 00E0                  		move.b	#$E0,d0
000037B4 6100 DE0A                  		bsr.w	PlaySound_Special ; fade out music
000037B8 3038 FFF2                  		move.w	($FFFFFFF2).w,d0 ; load	demo number
000037BC 0240 0007                  		andi.w	#7,d0
000037C0 D040                       		add.w	d0,d0
000037C2 303B 0000                  		move.w	Demo_Levels(pc,d0.w),d0	; load level number for	demo
000037C6 31C0 FE10                  		move.w	d0,($FFFFFE10).w
000037CA 5278 FFF2                  		addq.w	#1,($FFFFFFF2).w ; add 1 to demo number
000037CE 0C78 0004 FFF2             		cmpi.w	#4,($FFFFFFF2).w ; is demo number less than 4?
000037D4 6500                       		bcs.s	loc_3422	; if yes, branch
000037D6 31FC 0000 FFF2             		move.w	#0,($FFFFFFF2).w ; reset demo number to	0
000037DC                            
000037DC                            loc_3422:
000037DC 31FC 0001 FFF0             		move.w	#1,($FFFFFFF0).w ; turn	demo mode on
000037E2 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set screen mode to 08 (demo)
000037E8 0C40 0600                  		cmpi.w	#$600,d0	; is level number 0600 (special	stage)?
000037EC 6600                       		bne.s	Demo_Level	; if not, branch
000037EE 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
000037F4 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level number
000037F8 4238 FE16                  		clr.b	($FFFFFE16).w	; clear	special	stage number
000037FC                            
000037FC                            Demo_Level:
000037FC 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
00003802 7000                       		moveq	#0,d0
00003804 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003808 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
0000380C 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00003810 4E75                       		rts	
00003812                            ; ===========================================================================
00003812                            ; ---------------------------------------------------------------------------
00003812                            ; Levels used in demos
00003812                            ; ---------------------------------------------------------------------------
00003812                            Demo_Levels:	incbin	misc\dm_ord1.bin
0000381A                            		even
0000381A                            
0000381A                            ; ---------------------------------------------------------------------------
0000381A                            ; Subroutine to	change what you're selecting in the level select
0000381A                            ; ---------------------------------------------------------------------------
0000381A                            
0000381A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000381A                            
0000381A                            
0000381A                            LevSelControls:				; XREF: LevelSelect
0000381A 1238 F605                  		move.b	($FFFFF605).w,d1
0000381E 0201 0003                  		andi.b	#3,d1		; is up/down pressed and held?
00003822 6600                       		bne.s	LevSel_UpDown	; if yes, branch
00003824 5378 FF80                  		subq.w	#1,($FFFFFF80).w ; subtract 1 from time	to next	move
00003828 6A00 0000                  		bpl.w	LevSel_SndTest	; if time remains, branch
0000382C                            
0000382C                            LevSel_UpDown:
0000382C 31FC 000B FF80             		move.w	#$B,($FFFFFF80).w ; reset time delay
00003832 1238 F604                  		move.b	($FFFFF604).w,d1
00003836 0201 0003                  		andi.b	#3,d1		; is up/down pressed?
0000383A 6700 0000                  		beq.w	LevSel_SndTest	; if not, branch
0000383E 3C38 FF82                  		move.w	($FFFFFF82).w,d6
00003842 0801 0000                  		btst	#0,d1		; is up	pressed?
00003846 6700                       		beq.s	LevSel_Down	; if not, branch
00003848 5346                       		subq.w	#1,d6		; move up 1 selection
0000384A 6400                       		bcc.s	LevSel_Down
0000384C 7C00                       		moveq	#lsselectable,d6		; if selection moves below 0, jump to last selection
0000384E                            
0000384E                            LevSel_Down:
0000384E 0801 0001                  		btst	#1,d1		; is down pressed?
00003852 6700                       		beq.s	LevSel_Refresh	; if not, branch
00003854 5246                       		addq.w	#1,d6		; move down 1 selection
00003856 0C46 0000                  		cmpi.w	#lsselectable+1,d6
0000385A 6500                       		bcs.s	LevSel_Refresh
0000385C 7C00                       		moveq	#0,d6		; if selection moves above last selectable,	jump to	selection 0
0000385E 6000                       		bra.s	LevSel_Refresh
00003860                            		
00003860                            LevSel_LR:
00003860 0801 0002                  		btst	#2,d1		; is left pressed?
00003864 6700                       		beq.s	LevSel_Right	; if not, branch
00003866 0446 0000                  		sub.w	#lsrow2size,d6
0000386A 64E2                       		bcc.s	LevSel_Down
0000386C 0646 0000                  		add.w	#lsrow2size,d6	; don't jump
00003870                            LevSel_Right:
00003870 0801 0003                  		btst	#3,d1		; is right pressed?
00003874 6700                       		beq.s	LevSel_Refresh	; if not, branch
00003876 0646 0000                  		add.w	#lsrow1size,d6
0000387A 0C46 0000                  		cmpi.w	#lsselectable+1,d6
0000387E 6500                       		bcs.s	LevSel_Refresh
00003880 0446 0000                  		sub.w	#lsrow1size,d6	; don't jump
00003884                            ; ===========================================================================
00003884                            LevSel_Refresh:
00003884                            		
00003884 363C E65F                  		move.w	#$E680-$21,d3	; VRAM setting
00003888 6100 0000                  		bsr.w	LevSelHighlightCode	; refresh text
0000388C                            		
0000388C 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w
00003892 6600                       		bne.s	@exitsndtest
00003894                            		
00003894 363C C65F                  		move.w	#$C680-$21,d3	; VRAM setting
00003898 43F9 0000 0000             		lea	(Controls_Normal).l,a1
0000389E 2D7C 6D02 0003 0004        		move.l	#lsctrlpos,4(a6)
000038A6 6100 0000                  		bsr.w	CStringSlop
000038AA                            	@exitsndtest:
000038AA                            	
000038AA 363C C65F                  		move.w	#$C680-$21,d3
000038AE 31C6 FF82                  		move.w	d6,($FFFFFF82).w ; set new selection
000038B2 6100 0000                  		bsr.w	LevSelHighlightCode	; refresh text
000038B6                            		
000038B6 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w 
000038BC 6600                       		bne.s	@entersndtest
000038BE                            		
000038BE 363C C65F                  		move.w	#$C680-$21,d3
000038C2 43F9 0000 0000             		lea	(Controls_SND).l,a1
000038C8 2D7C 6D02 0003 0004        		move.l	#lsctrlpos,4(a6)
000038D0 6100 0000                  		bsr.w	CStringSlop
000038D4                            	@entersndtest:
000038D4 4E75                       		rts	
000038D6                            		
000038D6                            LevSel_SndTest:				; XREF: LevSelControls
000038D6 1238 F605                  		move.b	($FFFFF605).w,d1
000038DA 0201 005C                  		andi.b	#$5C,d1		; is left/right/a/b	pressed?
000038DE 6700                       		beq.s	LevSel_NoMove	; if not, branch
000038E0 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w ; is item $14 selected?
000038E6 6600 FF78                  		bne.w	LevSel_LR	; if not, branch
000038EA                            		
000038EA 1038 FF84                  		move.b	($FFFFFF84).w,d0
000038EE 0801 0002                  		btst	#2,d1		; is left pressed?
000038F2 6700                       		beq.s	SndTest_Right	; if not, branch
000038F4 5300                       		subq.b	#1,d0		; subtract 1 from sound	test
000038F6                            		; no need the fact it's a byte does the trick
000038F6                            
000038F6                            SndTest_Right:
000038F6 0801 0003                  		btst	#3,d1		; is right pressed?
000038FA 6700                       		beq.s	SndTest_A	; if not, branch
000038FC 5200                       		addq.b	#1,d0		; add 1	to sound test
000038FE                            		; same here
000038FE                            		
000038FE                            SndTest_A:
000038FE 0801 0006                  		btst	#6,d1		; is A pressed?
00003902 6700                       		beq.s	SndTest_B	; if not, branch
00003904 5100                       		subq.b	#8,d0		; subtract $10 to sound test
00003906 5100                       		subq.b	#8,d0
00003908                            		
00003908                            SndTest_B:
00003908 0801 0004                  		btst	#4,d1		; is B pressed?
0000390C 6700                       		beq.s	SndTest_Refresh	; if not, branch
0000390E 5000                       		addq.b	#8,d0		; add $10 to sound test
00003910 5000                       		addq.b	#8,d0
00003912                            
00003912                            SndTest_Refresh:
00003912 363C C65F                  		move.w	#$C680-$21,d3
00003916 11C0 FF84                  		move.b	d0,($FFFFFF84).w ; set sound test number
0000391A 6000 0000                  		bra.w	LevSelSndTest	; refresh text
0000391E                            
0000391E                            LevSel_NoMove:
0000391E 4E75                       		rts	
00003920                            ; End of function LevSelControls
00003920                            
00003920                            ; ---------------------------------------------------------------------------
00003920                            ; Subroutine to load level select text
00003920                            ; ---------------------------------------------------------------------------
00003920                            
00003920                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003920                            
00003920                            LevSelTextLoad_loop:
00003920 2D44 0004                  		move.l	d4,4(a6)
00003924 6100 0000                  		bsr.w	LevSel_ChgLine
00003928 0684 0080 0000             		addi.l	#$800000,d4
0000392E 51C9 FFF0                  		dbf.w	d1,LevSelTextLoad_loop
00003932 4E75                       		rts
00003934                            LevSelTextLoad:				; XREF: TitleScreen
00003934 43F9 0000 0000             		lea	(LevelMenuText).l,a1
0000393A 4DF9 00C0 0000             		lea	($C00000).l,a6
00003940 363C E65F                  		move.w	#$E680-$21,d3	; VRAM setting
00003944 283C 6086 0003             		move.l	#lsscrpos,d4	; screen position (text)
0000394A                            		
0000394A 323C 0000                  		move.w	#lsrow1size-1,d1		; number of lines of text (first row)
0000394E 61D0                       		bsr.s	LevSelTextLoad_loop
00003950                            		
00003950                            		
00003950 283C 60AA 0003             		move.l	#lsscrpos+lsoff,d4
00003956 323C 0000                  		move.w	#lsrow2size-1,d1		; number of lines of text (second row)
0000395A 61C4                       		bsr.s	LevSelTextLoad_loop
0000395C 363C C65F                  		move.w	#$C680-$21,d3
00003960                            		
00003960                            LevSelHighlightCode:
00003960 4DF9 00C0 0000             		lea	($C00000).l,a6
00003966 7000                       		moveq	#0,d0
00003968 3038 FF82                  		move.w	($FFFFFF82).w,d0
0000396C 3200                       		move.w	d0,d1
0000396E 283C 6086 0003             		move.l	#lsscrpos,d4
00003974                            		
00003974 0C40 0000                  		cmpi.w	#lsrow1size,d0
00003978 6D00                       		blt.s	@notsecond
0000397A                            		
0000397A 0440 0000                  		sub.w	#lsrow1size,d0
0000397E 0684 0024 0000             		addi.l	#lsoff,d4
00003984                            	@notsecond:
00003984 EF48                       		lsl.w	#7,d0
00003986 4840                       		swap	d0
00003988 D880                       		add.l	d0,d4
0000398A 43F9 0000 0000             		lea	(LevelMenuText).l,a1
00003990 E749                       		lsl.w	#3,d1
00003992 D241                       		add.w	d1,d1
00003994 D2C1                       		adda.w	d1,a1
00003996 2D44 0004                  		move.l	d4,4(a6)
0000399A 6100 0000                  		bsr.w	LevSel_ChgLine
0000399E 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w
000039A4 6700                       		beq.s	LevSelSndTest
000039A6 4E75                       		rts
000039A8                            
000039A8                            LevSelSndTest:
000039A8 0643 0030                  		add.w	#$30,d3
000039AC 23FC 64C2 0003 00C0 0004   		move.l	#lsstpos,($C00004).l ; screen	position (sound	test)
000039B6 1038 FF84                  		move.b	($FFFFFF84).w,d0
000039BA 1400                       		move.b	d0,d2
000039BC E808                       		lsr.b	#4,d0
000039BE 6100 0000                  		bsr.w	LevSel_ChgSnd
000039C2 1002                       		move.b	d2,d0
000039C4 6100 0000                  		bsr.w	LevSel_ChgSnd
000039C8 4E75                       		rts	
000039CA                            ; End of function LevSelTextLoad
000039CA                            
000039CA                            
000039CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000039CA                            
000039CA                            
000039CA                            LevSel_ChgSnd:				; XREF: LevSelTextLoad
000039CA 0240 000F                  		andi.w	#$F,d0
000039CE 0C00 000A                  		cmpi.b	#$A,d0
000039D2 6500                       		bcs.s	loc_3580
000039D4 5E00                       		addi.b	#7,d0
000039D6                            
000039D6                            loc_3580:
000039D6 D043                       		add.w	d3,d0
000039D8 3C80                       		move.w	d0,(a6)
000039DA 4E75                       		rts	
000039DC                            ; End of function LevSel_ChgSnd
000039DC                            
000039DC                            
000039DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000039DC                            
000039DC                            
000039DC                            LevSel_ChgLine:				; XREF: LevSelTextLoad
000039DC 740F                       		moveq	#$10-1,d2		; number of characters per line
000039DE                            
000039DE                            @loop:
000039DE 7000                       		moveq	#0,d0
000039E0 1019                       		move.b	(a1)+,d0
000039E2 0C00 0020                  		cmpi.b	#$20,d0
000039E6 6E00                       		bgt.s	@draw
000039E8 3CBC 0000                  		move.w	#0,(a6)
000039EC 51CA FFF0                  		dbf	d2,@loop
000039F0 4E75                       		rts	
000039F2                            ; ===========================================================================
000039F2                            
000039F2                            @draw:				; XREF: LevSel_ChgLine
000039F2 D043                       		add.w	d3,d0
000039F4 3C80                       		move.w	d0,(a6)
000039F6 51CA FFE6                  		dbf	d2,@loop
000039FA 4E75                       		rts	
000039FC                            ; End of function LevSel_ChgLine
000039FC                            		
000039FC                            CStringSlop_draw:
000039FC D043                       		add.w	d3,d0
000039FE 3C80                       		move.w	d0,(a6)
00003A00                            CStringSlop:				; XREF: LevSelTextLoad
00003A00 7000                       		moveq	#0,d0
00003A02 1019                       		move.b	(a1)+,d0
00003A04 0C00 0020                  		cmpi.b	#$20,d0
00003A08 6EF2                       		bgt.s	CStringSlop_draw
00003A0A                            		
00003A0A 0C00 0001                  		cmpi.b	#1,d0
00003A0E 6700                       		beq.s	@InsertSpaces
00003A10 6500                       		blo.s	@end
00003A12                            		
00003A12 3CBC 0000                  		move.w	#0,(a6)
00003A16 60E8                       		bra.s	CStringSlop
00003A18                            	@end:
00003A18 4E75                       		rts
00003A1A                            	@InsertSpaces:
00003A1A 7000                       		moveq	#0,d0
00003A1C 1019                       		move.b	(a1)+,d0
00003A1E                            		
00003A1E                            	@insert:
00003A1E 3CBC 0000                  		move.w	#0,(a6)
00003A22 51C8 FFFA                  		dbf.w	d0,@insert
00003A26 60D8                       		bra.s	CStringSlop
00003A28                            ; End of function LevSel_ChgLine
00003A28                            
00003A28                            ; ===========================================================================
00003A28                            ; ---------------------------------------------------------------------------
00003A28                            ; Level	select menu text ( this stupid level select code was brought to you by the meltdown guy )
00003A28                            ; ---------------------------------------------------------------------------
00003A28                            LevelMenuText:	
00003A28 4352 554E 4348 5920 524F+  		dc.b    "CRUNCHY ROLL   1"
00003A38 2020 2020 2020 2020 2020+          dc.b    "               2"
00003A48 6B61 6D61 2073 6F20 676F+          dc.b    "kama so goated 3"
00003A58 4920 4C49 4B45 2046 494C+          dc.b    "I LIKE FILE    1"
00003A68 2045 5850 4C4F 5245 5220+          dc.b    " EXPLORER      2"
00003A78 4841 4D42 5552 4752 2020+          dc.b    "HAMBURGR       3"
00003A88 4D41 5242 4C45 2020 2020+          dc.b    "MARBLE         1"
00003A98 2020 2020 2020 2020 2020+          dc.b    "               2"
00003AA8 2020 2020 2020 2020 2020+          dc.b    "               3"
00003AB8 444F 4E54 4745 5452 4944+          dc.b    "DONTGETRIDOTHIS1"
00003AC8 2020 2020 2020 2020 2020+          dc.b    "               2"
00003AD8 2020 2020 2020 2020 2020+          dc.b    "               3"
00003AE8                            LMTSecondRow:
00003AE8 5448 4520 5049 4720 4652+          dc.b    "THE PIG FROM   1"
00003AF8 2042 4152 4E59 4152 4420+          dc.b    " BARNYARD      2"
00003B08 2020 2020 2020 2020 2020+          dc.b    "               3"
00003B18 5A20 5A20 5A20 5A20 2020+          dc.b    "Z Z Z Z        1"
00003B28 2020 2020 2020 2020 2020+          dc.b    "               2"
00003B38 2020 2020 2020 2020 2020+          dc.b    "               3"
00003B48 4649 4E41 4C20 5A4F 4E45+          dc.b    "FINAL ZONE      "
00003B58 5350 4543 4941 4C20 5354+          dc.b    "SPECIAL STAGE   "
00003B68 534F 554E 4420 5445 5354+          dc.b    "SOUND TEST $    "
00003B78 4652 4545 2057 4946 4920+  		dc.b	"FREE WIFI VIRUS "
00003B88 4F50 5449 4F4E 5320 4C41+  		dc.b	"OPTIONS LATER   "
00003B98                            LMTSelectableEnd:
00003B98 4341 4E54 2054 4F55 4348+  		dc.b	"CANT TOUCH ME XD"
00003BA8                            LMTEnd:
00003BA8                            
00003BA8                            Now_Playing:
00003BA8 3E3E 3E4E 4F57 2050 4C41+  		dc.b	">>>NOW PLAYING ",0
00003BB8                            		even
00003BB8                            NP_Track:
00003BB8 5452 4143 4B20 2400        		dc.b	"TRACK $",0
00003BC0                            		even
00003BC0                            NP_SFX:
00003BC0 534F 554E 4420 2400        		dc.b	"SOUND $",0
00003BC8                            		even
00003BC8                            
00003BC8                            ShowNow_Playing:
00003BC8 1C00                       		move.b	d0,d6
00003BCA 363C C65F                  		move.w	#$C680-$21,d3	; VRAM setting
00003BCE 43FA FFD8                  		lea	Now_Playing(pc),a1
00003BD2 4DF9 00C0 0000             		lea		($C00000).l,a6
00003BD8 2D7C 6C82 0003 0004        		move.l	#lsnppos,4(a6)
00003BE0 6100 FE1E                  		bsr.w	CStringSlop
00003BE4                            		
00003BE4 43FA FFD2                  		lea	NP_Track(pc),a1
00003BE8 0C06 00A0                  		cmpi.b	#$A0,d6
00003BEC 6D00                       		blt.s	@track
00003BEE                            		
00003BEE 43FA FFD0                  		lea	NP_SFX(pc),a1
00003BF2                            	@track:
00003BF2 6100 FE0C                  		bsr.w	CStringSlop
00003BF6                            		
00003BF6 0643 0030                  		add.w	#$30,d3
00003BFA 1006                       		move.b	d6,d0
00003BFC 1400                       		move.b	d0,d2
00003BFE E808                       		lsr.b	#4,d0
00003C00 6100 FDC8                  		bsr.w	LevSel_ChgSnd
00003C04 1002                       		move.b	d2,d0
00003C06 6100 FDC2                  		bsr.w	LevSel_ChgSnd
00003C0A 4E75                       		rts	
00003C0C                            
00003C0C                            ; 1 is insert spaces btw
00003C0C                            Controls_Normal:
00003C0C 414E 593A 2050 4C41 5901+  		dc.b	"ANY: PLAY",1,27,0
00003C18                            		even		
00003C18                            Controls_SND:
00003C18 413A 202D 3130 2020 423A+  		dc.b	"A: -10  B: +10  C: PLAY  START: QUIT",0
00003C3E 00                         		even
00003C3E                            ; ---------------------------------------------------------------------------
00003C3E                            ; Music	playlist
00003C3E                            ; ---------------------------------------------------------------------------
00003C3E                            MusicList1:	incbin	misc\muslist1.bin
00003C46                            		even
00003C46                            MusicList2:	incbin	misc\muslist2.bin
00003C4C                            		even
00003C4C                            MusicList3:	incbin	misc\muslist3.bin
00003C52                            		even
00003C52                            MusicList4:	incbin	misc\muslist4.bin
00003C58                            		even
00003C58                            ; ===========================================================================
00003C58                            
00003C58                            ; ---------------------------------------------------------------------------
00003C58                            ; Level
00003C58                            ; ---------------------------------------------------------------------------
00003C58                            
00003C58                            Level:					; XREF: GameModeArray
00003C58 08F8 0007 F600             		bset	#7,($FFFFF600).w ; add $80 to screen mode (for pre level sequence)
00003C5E 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003C62 6B00                       		bmi.s	loc_37B6
00003C64 103C 00E0                  		move.b	#$E0,d0
00003C68 6100 D956                  		bsr.w	PlaySound_Special ; fade out music
00003C6C                            
00003C6C                            loc_37B6:
00003C6C 6100 DB94                  		bsr.w	ClearPLC
00003C70 6100 E3CA                  		bsr.w	Pal_FadeFrom
00003C74 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003C78 6B00                       		bmi.s	Level_ClrRam
00003C7A 46FC 2700                  		move	#$2700,sr
00003C7E 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00003C88 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00003C8E 6100 D9D4                  		bsr.w	NemDec
00003C92 46FC 2300                  		move	#$2300,sr
00003C96 7000                       		moveq	#0,d0
00003C98 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003C9C E948                       		lsl.w	#4,d0
00003C9E 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
00003CA4 45F2 0000                  		lea	(a2,d0.w),a2
00003CA8 7000                       		moveq	#0,d0
00003CAA 1012                       		move.b	(a2),d0
00003CAC 6700                       		beq.s	loc_37FC
00003CAE 6100 DAF4                  		bsr.w	LoadPLC		; load level patterns
00003CB2                            
00003CB2                            loc_37FC:
00003CB2 7001                       		moveq	#1,d0
00003CB4 6100 DAEE                  		bsr.w	LoadPLC		; load standard	patterns
00003CB8                            
00003CB8                            Level_ClrRam:
00003CB8 43F8 D000                  		lea	($FFFFD000).w,a1
00003CBC 7000                       		moveq	#0,d0
00003CBE 323C 07FF                  		move.w	#$7FF,d1
00003CC2                            
00003CC2                            Level_ClrObjRam:
00003CC2 22C0                       		move.l	d0,(a1)+
00003CC4 51C9 FFFC                  		dbf	d1,Level_ClrObjRam ; clear object RAM
00003CC8                            
00003CC8 43F8 F628                  		lea	($FFFFF628).w,a1
00003CCC 7000                       		moveq	#0,d0
00003CCE 323C 0015                  		move.w	#$15,d1
00003CD2                            
00003CD2                            Level_ClrVars:
00003CD2 22C0                       		move.l	d0,(a1)+
00003CD4 51C9 FFFC                  		dbf	d1,Level_ClrVars ; clear misc variables
00003CD8                            
00003CD8 43F8 F700                  		lea	($FFFFF700).w,a1
00003CDC 7000                       		moveq	#0,d0
00003CDE 323C 003F                  		move.w	#$3F,d1
00003CE2                            
00003CE2                            Level_ClrVars2:
00003CE2 22C0                       		move.l	d0,(a1)+
00003CE4 51C9 FFFC                  		dbf	d1,Level_ClrVars2 ; clear misc variables
00003CE8                            
00003CE8 43F8 FE60                  		lea	($FFFFFE60).w,a1
00003CEC 7000                       		moveq	#0,d0
00003CEE 323C 0047                  		move.w	#$47,d1
00003CF2                            
00003CF2                            Level_ClrVars3:
00003CF2 22C0                       		move.l	d0,(a1)+
00003CF4 51C9 FFFC                  		dbf	d1,Level_ClrVars3 ; clear object variables
00003CF8                            
00003CF8 46FC 2700                  		move	#$2700,sr
00003CFC 6100 D7EA                  		bsr.w	ClearScreen
00003D00 4DF9 00C0 0004             		lea	($C00004).l,a6
00003D06 3CBC 8B03                  		move.w	#$8B03,(a6)
00003D0A 3CBC 8230                  		move.w	#$8230,(a6)
00003D0E 3CBC 8407                  		move.w	#$8407,(a6)
00003D12 3CBC 857C                  		move.w	#$857C,(a6)
00003D16 3CBC 9001                  		move.w	#$9001,(a6)
00003D1A 3CBC 8004                  		move.w	#$8004,(a6)
00003D1E 3CBC 8720                  		move.w	#$8720,(a6)
00003D22 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00003D28 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
00003D2C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003D32 6600                       		bne.s	Level_LoadPal	; if not, branch
00003D34 3CBC 8014                  		move.w	#$8014,(a6)
00003D38 7000                       		moveq	#0,d0
00003D3A 1038 FE11                  		move.b	($FFFFFE11).w,d0
00003D3E D040                       		add.w	d0,d0
00003D40 43F9 0000 0000             		lea	(WaterHeight).l,a1 ; load water	height array
00003D46 3031 0000                  		move.w	(a1,d0.w),d0
00003D4A 31C0 F646                  		move.w	d0,($FFFFF646).w ; set water heights
00003D4E 31C0 F648                  		move.w	d0,($FFFFF648).w
00003D52 31C0 F64A                  		move.w	d0,($FFFFF64A).w
00003D56 4238 F64D                  		clr.b	($FFFFF64D).w	; clear	water routine counter
00003D5A 4238 F64E                  		clr.b	($FFFFF64E).w	; clear	water movement
00003D5E 11FC 0001 F64C             		move.b	#1,($FFFFF64C).w ; enable water
00003D64 6000 0000                  		bra.w	Level_LoadPal
00003D68                            Player_Palette:
00003D68                            		; normal, lz, sbz, blank
00003D68 0003 000F 0010 0000        		dc.w	3,$F,$10,0 ; Sonic 
00003D70                            		
00003D70 0015 0016 0017 0000        		dc.w	21,22,23,0 ; Pal_Gronic 
00003D78                            		; add more player palettes
00003D78                            Level_LoadPal:
00003D78 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00003D7E 46FC 2300                  		move	#$2300,sr
00003D82                            
00003D82 7200                       		moveq	#0,d1
00003D84 1238 FFE8                  		move.b	(v_character),d1
00003D88 D241                       		add.w	d1,d1
00003D8A D241                       		add.w	d1,d1
00003D8C D241                       		add.w	d1,d1
00003D8E 303B 10D8                  		move.w	Player_Palette(pc,d1.w),d0	; load palette
00003D92                            		
00003D92 6100 E56E                  		bsr.w	PalLoad2	; load Sonic's pallet line
00003D96 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003D9C 6600                       		bne.s	Level_GetBgm	; if not, branch
00003D9E 303B 10CA                  		move.w	Player_Palette+2(pc,d1.w),d0	; load palette
00003DA2 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is act number 3?
00003DA8 6600                       		bne.s	Level_WaterPal	; if not, branch
00003DAA 303B 10C0                  		move.w	Player_Palette+4(pc,d1.w),d0	; load palette
00003DAE                            
00003DAE                            Level_WaterPal:
00003DAE 6100 E56A                  		bsr.w	PalLoad3_Water	; load underwater pallet (see d0)
00003DB2 4A38 FE30                  		tst.b	($FFFFFE30).w
00003DB6 6700                       		beq.s	Level_GetBgm
00003DB8 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
00003DBE                            
00003DBE                            ; NineKode begins here - How to play different songs on different acts
00003DBE                             
00003DBE                            Level_GetBgm:
00003DBE 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003DC2 6B00 0000                  		bmi.w	loc_3946	; change from bmi.s to bmi.w or you'll get an error
00003DC6 7000                       		moveq	#0,d0
00003DC8 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003DCC                             
00003DCC 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
00003DD2 6600                       		bne.s	Level_GetBgm2	; if not, branch
00003DD4 43F9 0000 3C3E             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
00003DDA 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003DDC                             
00003DDC                            Level_GetBgm2:
00003DDC 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
00003DE2 6600                       		bne.s	Level_GetBgm3	; if not, branch
00003DE4 43F9 0000 3C46             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
00003DEA 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003DEC                             
00003DEC                            Level_GetBgm3:
00003DEC 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
00003DF2 6600                       		bne.s	Level_GetBgm4	; if not, branch
00003DF4 43F9 0000 3C4C             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 3
00003DFA 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003DFC                             
00003DFC                            Level_GetBgm4:
00003DFC 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
00003E02 6600                       		bne.s	Level_PlayBgm	; if not, branch
00003E04 43F9 0000 3C52             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
00003E0A                             
00003E0A                            Level_PlayBgm:
00003E0A 1031 0000                  		move.b	(a1,d0.w),d0	; get d0-th entry from the playlist
00003E0E 6100 D7AA                  		bsr.w	PlaySound	; play music
00003E12 11FC 0034 D080             		move.b	#$34,($FFFFD080).w ; load title	card object
00003E18                             
00003E18                            ; NineKode ends here
00003E18                            
00003E18                            Level_TtlCard:
00003E18 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00003E1E 6100 EE72                  		bsr.w	DelayProgram
00003E22 4EB9 0000 0000             		jsr	ObjectsLoad
00003E28 4EB9 0000 0000             		jsr	BuildSprites
00003E2E 6100 D9E0                  		bsr.w	RunPLC_RAM
00003E32 3038 D108                  		move.w	($FFFFD108).w,d0
00003E36 B078 D130                  		cmp.w	($FFFFD130).w,d0 ; has title card sequence finished?
00003E3A 66DC                       		bne.s	Level_TtlCard	; if not, branch
00003E3C 4AB8 F680                  		tst.l	($FFFFF680).w	; are there any	items in the pattern load cue?
00003E40 66D6                       		bne.s	Level_TtlCard	; if yes, branch
00003E42 4EB9 0000 0000             		jsr	Hud_Base
00003E48                            
00003E48                            loc_3946:
00003E48 7003                       		moveq	#3,d0
00003E4A 6100 E49A                  		bsr.w	PalLoad1	; load Sonic's pallet line
00003E4E 6100 0000                  		bsr.w	LevelSizeLoad
00003E52 6100 0000                  		bsr.w	DeformBgLayer
00003E56 08F8 0002 F754             		bset	#2,($FFFFF754).w
00003E5C 6100 0000                  		bsr.w	MainLoadBlockLoad ; load block mappings	and pallets
00003E60 6100 0000                  		bsr.w	LoadTilesFromStart
00003E64 4EB9 0000 0000             		jsr	FloorLog_Unk
00003E6A 6100 0000                  		bsr.w	ColIndexLoad
00003E6E 6100 0000                  		bsr.w	LZWaterEffects
00003E72 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00003E78 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003E7C 6B00                       		bmi.s	Level_ChkDebug
00003E7E 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
00003E84                            
00003E84                            Level_ChkDebug:
00003E84 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00003E88 6700                       		beq.s	Level_ChkWater	; if not, branch
00003E8A 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
00003E90 6700                       		beq.s	Level_ChkWater	; if not, branch
00003E92 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00003E98                            
00003E98                            Level_ChkWater:
00003E98 31FC 0000 F602             		move.w	#0,($FFFFF602).w
00003E9E 31FC 0000 F604             		move.w	#0,($FFFFF604).w
00003EA4 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003EAA 6600                       		bne.s	Level_LoadObj	; if not, branch
00003EAC 11FC 001B D780             		move.b	#$1B,($FFFFD780).w ; load water	surface	object
00003EB2 31FC 0060 D788             		move.w	#$60,($FFFFD788).w
00003EB8 11FC 001B D7C0             		move.b	#$1B,($FFFFD7C0).w
00003EBE 31FC 0120 D7C8             		move.w	#$120,($FFFFD7C8).w
00003EC4                            
00003EC4                            Level_LoadObj:
00003EC4 4EB9 0000 0000             		jsr	ObjPosLoad
00003ECA 4EB9 0000 0000             		jsr	ObjectsLoad
00003ED0 4EB9 0000 0000             		jsr	BuildSprites
00003ED6 7000                       		moveq	#0,d0
00003ED8 4A38 FE30                  		tst.b	($FFFFFE30).w	; are you starting from	a lamppost?
00003EDC 6600                       		bne.s	loc_39E8	; if yes, branch
00003EDE 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003EE2 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003EE6 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w ; clear lives counter
00003EEA                            
00003EEA                            loc_39E8:
00003EEA 11C0 FE1A                  		move.b	d0,($FFFFFE1A).w
00003EEE 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w ; clear shield
00003EF2 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w ; clear invincibility
00003EF6 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w ; clear speed shoes
00003EFA                            		; move.b	d0,($FFFFFE2F).w
00003EFA 0238 0001 FE2F             		andi.b	#%00000001,($FFFFFE2F).w	; GMZ: Clear every flag in FE2F aside from reversed controls
00003F00 31C0 FE08                  		move.w	d0,($FFFFFE08).w
00003F04 31C0 FE02                  		move.w	d0,($FFFFFE02).w
00003F08 31C0 FE04                  		move.w	d0,($FFFFFE04).w
00003F0C 6100 0000                  		bsr.w	OscillateNumInit
00003F10 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00003F16 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w ; update rings	counter
00003F1C 11FC 0001 FE1E             		move.b	#1,($FFFFFE1E).w ; update time counter
00003F22 31FC 0000 F790             		move.w	#0,($FFFFF790).w
00003F28 43F9 0000 0000             		lea	(Demo_Index).l,a1 ; load demo data
00003F2E 7000                       		moveq	#0,d0
00003F30 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003F34 E548                       		lsl.w	#2,d0
00003F36 2271 0000                  		movea.l	(a1,d0.w),a1
00003F3A 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00003F3E 6A00                       		bpl.s	Level_Demo	; if yes, branch
00003F40 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1 ; load ending demo	data
00003F46 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00003F4A 5340                       		subq.w	#1,d0
00003F4C E548                       		lsl.w	#2,d0
00003F4E 2271 0000                  		movea.l	(a1,d0.w),a1
00003F52                            
00003F52                            Level_Demo:
00003F52 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w ; load key press duration
00003F58 5338 F792                  		subq.b	#1,($FFFFF792).w ; subtract 1 from duration
00003F5C 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00003F62 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003F66 6A00                       		bpl.s	Level_ChkWaterPal
00003F68 31FC 021C F614             		move.w	#540,($FFFFF614).w
00003F6E 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w
00003F74 6600                       		bne.s	Level_ChkWaterPal
00003F76 31FC 01FE F614             		move.w	#510,($FFFFF614).w
00003F7C                            
00003F7C                            Level_ChkWaterPal:
00003F7C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ/SBZ3?
00003F82 6600                       		bne.s	Level_Delay	; if not, branch
00003F84 700B                       		moveq	#$B,d0		; pallet $0B (LZ underwater)
00003F86 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is level SBZ3?
00003F8C 6600                       		bne.s	Level_WaterPal2	; if not, branch
00003F8E 700D                       		moveq	#$D,d0		; pallet $0D (SBZ3 underwater)
00003F90                            
00003F90                            Level_WaterPal2:
00003F90 6100 E3A4                  		bsr.w	PalLoad4_Water
00003F94                            
00003F94                            Level_Delay:
00003F94 323C 0003                  		move.w	#3,d1
00003F98                            
00003F98                            Level_DelayLoop:
00003F98 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003F9E 6100 ECF2                  		bsr.w	DelayProgram
00003FA2 51C9 FFF4                  		dbf	d1,Level_DelayLoop
00003FA6                            
00003FA6 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00003FAC 6100 DFEE                  		bsr.w	Pal_FadeTo2
00003FB0 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003FB4 6B00                       		bmi.s	Level_ClrCardArt
00003FB6 5438 D0A4                  		addq.b	#2,($FFFFD0A4).w ; make	title card move
00003FBA 5838 D0E4                  		addq.b	#4,($FFFFD0E4).w
00003FBE 5838 D124                  		addq.b	#4,($FFFFD124).w
00003FC2 5838 D164                  		addq.b	#4,($FFFFD164).w
00003FC6 6000                       		bra.s	Level_StartGame
00003FC8                            ; ===========================================================================
00003FC8                            
00003FC8                            Level_ClrCardArt:
00003FC8 7002                       		moveq	#2,d0
00003FCA 4EB9 0000 17A4             		jsr	(LoadPLC).l	; load explosion patterns
00003FD0 7000                       		moveq	#0,d0
00003FD2 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003FD6 0640 0015                  		addi.w	#$15,d0
00003FDA 4EB9 0000 17A4             		jsr	(LoadPLC).l	; load animal patterns (level no. + $15)
00003FE0                            
00003FE0                            Level_StartGame:
00003FE0 08B8 0007 F600             		bclr	#7,($FFFFF600).w ; subtract 80 from screen mode
00003FE6                            
00003FE6                            ; ---------------------------------------------------------------------------
00003FE6                            ; Main level loop (when	all title card and loading sequences are finished)
00003FE6                            ; ---------------------------------------------------------------------------
00003FE6                            
00003FE6                            Level_MainLoop:
00003FE6 6100 D5E4                  		bsr.w	PauseGame
00003FEA 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003FF0 6100 ECA0                  		bsr.w	DelayProgram
00003FF4 5278 FE04                  		addq.w	#1,($FFFFFE04).w ; add 1 to level timer
00003FF8 6100 0000                  		bsr.w	MoveSonicInDemo
00003FFC 6100 0000                  		bsr.w	LZWaterEffects
00004000 4EB9 0000 0000             		jsr	ObjectsLoad
00004006 4A78 FE08                  		tst.w	($FFFFFE08).w
0000400A 6600                       		bne.s	loc_3B10
0000400C 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004012 6400                       		bcc.s	loc_3B14
00004014                            
00004014                            loc_3B10:
00004014 6100 0000                  		bsr.w	DeformBgLayer
00004018                            
00004018                            loc_3B14:
00004018 4EB9 0000 0000             		jsr	BuildSprites
0000401E 4EB9 0000 0000             		jsr	ObjPosLoad
00004024 6100 DB3A                  		bsr.w	PalCycle_Load
00004028 6100 D7E6                  		bsr.w	RunPLC_RAM
0000402C 6100 0000                  		bsr.w	OscillateNumDo
00004030 6100 0000                  		bsr.w	ChangeRingFrame
00004034 6100 0000                  		bsr.w	SignpostArtLoad
00004038 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
0000403E 6700                       		beq.s	Level_ChkDemo	; if screen mode is 08 (demo), branch
00004040 4A78 FE02                  		tst.w	($FFFFFE02).w	; is the level set to restart?
00004044 6600 FC12                  		bne.w	Level		; if yes, branch
00004048 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
0000404E 6700 FF96                  		beq.w	Level_MainLoop	; if screen mode is $0C	(level), branch
00004052 4E75                       		rts	
00004054                            ; ===========================================================================
00004054                            
00004054                            Level_ChkDemo:				; XREF: Level_MainLoop
00004054 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
00004058 6600                       		bne.s	Level_EndDemo	; if yes, branch
0000405A 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
0000405E 6700                       		beq.s	Level_EndDemo	; if not, branch
00004060 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
00004066 6700 FF7E                  		beq.w	Level_MainLoop	; if screen mode is 08 (demo), branch
0000406A 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00004070 4E75                       		rts	
00004072                            ; ===========================================================================
00004072                            
00004072                            Level_EndDemo:				; XREF: Level_ChkDemo
00004072 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w ; is screen mode 08 (demo)?
00004078 6600                       		bne.s	loc_3B88	; if not, branch
0000407A 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00004080 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004084 6A00                       		bpl.s	loc_3B88	; if yes, branch
00004086 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; go	to credits
0000408C                            
0000408C                            loc_3B88:
0000408C 31FC 003C F614             		move.w	#$3C,($FFFFF614).w
00004092 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00004098 4278 F794                  		clr.w	($FFFFF794).w
0000409C                            
0000409C                            loc_3B98:
0000409C 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
000040A2 6100 EBEE                  		bsr.w	DelayProgram
000040A6 6100 0000                  		bsr.w	MoveSonicInDemo
000040AA 4EB9 0000 0000             		jsr	ObjectsLoad
000040B0 4EB9 0000 0000             		jsr	BuildSprites
000040B6 4EB9 0000 0000             		jsr	ObjPosLoad
000040BC 5378 F794                  		subq.w	#1,($FFFFF794).w
000040C0 6A00                       		bpl.s	loc_3BC8
000040C2 31FC 0002 F794             		move.w	#2,($FFFFF794).w
000040C8 6100 DF92                  		bsr.w	Pal_FadeOut
000040CC                            
000040CC                            loc_3BC8:
000040CC 4A78 F614                  		tst.w	($FFFFF614).w
000040D0 66CA                       		bne.s	loc_3B98
000040D2 4E75                       		rts	
000040D4                            ; ===========================================================================
000040D4                            ; ---------------------------------------------------------------------------
000040D4                            ; Subroutine to	do special water effects in Labyrinth Zone
000040D4                            ; ---------------------------------------------------------------------------
000040D4                            
000040D4                            LZWaterEffects:				; XREF: Level
000040D4 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
000040DA 6600                       		bne.s	locret_3C28	; if not, branch
000040DC 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000040E2 6400                       		bcc.s	LZMoveWater
000040E4 6100 0000                  		bsr.w	LZWindTunnels
000040E8 6100 0000                  		bsr.w	LZWaterSlides
000040EC 6100 0000                  		bsr.w	LZDynamicWater
000040F0                            
000040F0                            LZMoveWater:
000040F0 4238 F64E                  		clr.b	($FFFFF64E).w
000040F4 7000                       		moveq	#0,d0
000040F6 1038 FE60                  		move.b	($FFFFFE60).w,d0
000040FA E248                       		lsr.w	#1,d0
000040FC D078 F648                  		add.w	($FFFFF648).w,d0
00004100 31C0 F646                  		move.w	d0,($FFFFF646).w
00004104 3038 F646                  		move.w	($FFFFF646).w,d0
00004108 9078 F704                  		sub.w	($FFFFF704).w,d0
0000410C 6400                       		bcc.s	loc_3C1A
0000410E 4A40                       		tst.w	d0
00004110 6A00                       		bpl.s	loc_3C1A
00004112 11FC 00DF F625             		move.b	#-$21,($FFFFF625).w
00004118 11FC 0001 F64E             		move.b	#1,($FFFFF64E).w
0000411E                            
0000411E                            loc_3C1A:
0000411E 0C40 00DF                  		cmpi.w	#$DF,d0
00004122 6500                       		bcs.s	loc_3C24
00004124 303C 00DF                  		move.w	#$DF,d0
00004128                            
00004128                            loc_3C24:
00004128 11C0 F625                  		move.b	d0,($FFFFF625).w
0000412C                            
0000412C                            locret_3C28:
0000412C 4E75                       		rts	
0000412E                            ; ===========================================================================
0000412E                            ; ---------------------------------------------------------------------------
0000412E                            ; Labyrinth default water heights
0000412E                            ; ---------------------------------------------------------------------------
0000412E                            WaterHeight:	incbin	misc\lz_heigh.bin
00004136                            		even
00004136                            ; ===========================================================================
00004136                            
00004136                            ; ---------------------------------------------------------------------------
00004136                            ; Labyrinth dynamic water routines
00004136                            ; ---------------------------------------------------------------------------
00004136                            
00004136                            LZDynamicWater:				; XREF: LZWaterEffects
00004136 7000                       		moveq	#0,d0
00004138 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000413C D040                       		add.w	d0,d0
0000413E 303B 0000                  		move.w	DynWater_Index(pc,d0.w),d0
00004142 4EBB 0000                  		jsr	DynWater_Index(pc,d0.w)
00004146 7200                       		moveq	#0,d1
00004148 1238 F64C                  		move.b	($FFFFF64C).w,d1
0000414C 3038 F64A                  		move.w	($FFFFF64A).w,d0
00004150 9078 F648                  		sub.w	($FFFFF648).w,d0
00004154 6700                       		beq.s	locret_3C5A
00004156 6400                       		bcc.s	loc_3C56
00004158 4441                       		neg.w	d1
0000415A                            
0000415A                            loc_3C56:
0000415A D378 F648                  		add.w	d1,($FFFFF648).w
0000415E                            
0000415E                            locret_3C5A:
0000415E 4E75                       		rts	
00004160                            ; ===========================================================================
00004160 0000                       DynWater_Index:	dc.w DynWater_LZ1-DynWater_Index
00004162 0000                       		dc.w DynWater_LZ2-DynWater_Index
00004164 0000                       		dc.w DynWater_LZ3-DynWater_Index
00004166 0000                       		dc.w DynWater_SBZ3-DynWater_Index
00004168                            ; ===========================================================================
00004168                            
00004168                            DynWater_LZ1:				; XREF: DynWater_Index
00004168 3038 F700                  		move.w	($FFFFF700).w,d0
0000416C 1438 F64D                  		move.b	($FFFFF64D).w,d2
00004170 6600                       		bne.s	loc_3CD0
00004172 323C 00B8                  		move.w	#$B8,d1
00004176 0C40 0600                  		cmpi.w	#$600,d0
0000417A 6500                       		bcs.s	loc_3CB4
0000417C 323C 0108                  		move.w	#$108,d1
00004180 0C78 0200 D00C             		cmpi.w	#$200,($FFFFD00C).w
00004186 6500                       		bcs.s	loc_3CBA
00004188 0C40 0C00                  		cmpi.w	#$C00,d0
0000418C 6500                       		bcs.s	loc_3CB4
0000418E 323C 0318                  		move.w	#$318,d1
00004192 0C40 1080                  		cmpi.w	#$1080,d0
00004196 6500                       		bcs.s	loc_3CB4
00004198 11FC 0080 F7E5             		move.b	#-$80,($FFFFF7E5).w
0000419E 323C 05C8                  		move.w	#$5C8,d1
000041A2 0C40 1380                  		cmpi.w	#$1380,d0
000041A6 6500                       		bcs.s	loc_3CB4
000041A8 323C 03A8                  		move.w	#$3A8,d1
000041AC B278 F648                  		cmp.w	($FFFFF648).w,d1
000041B0 6600                       		bne.s	loc_3CB4
000041B2 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
000041B8                            
000041B8                            loc_3CB4:
000041B8 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000041BC 4E75                       		rts	
000041BE                            ; ===========================================================================
000041BE                            
000041BE                            loc_3CBA:				; XREF: DynWater_LZ1
000041BE 0C40 0C80                  		cmpi.w	#$C80,d0
000041C2 65F4                       		bcs.s	loc_3CB4
000041C4 323C 00E8                  		move.w	#$E8,d1
000041C8 0C40 1500                  		cmpi.w	#$1500,d0
000041CC 65EA                       		bcs.s	loc_3CB4
000041CE 323C 0108                  		move.w	#$108,d1
000041D2 60E4                       		bra.s	loc_3CB4
000041D4                            ; ===========================================================================
000041D4                            
000041D4                            loc_3CD0:				; XREF: DynWater_LZ1
000041D4 5302                       		subq.b	#1,d2
000041D6 6600                       		bne.s	locret_3CF4
000041D8 0C78 02E0 D00C             		cmpi.w	#$2E0,($FFFFD00C).w
000041DE 6400                       		bcc.s	locret_3CF4
000041E0 323C 03A8                  		move.w	#$3A8,d1
000041E4 0C40 1300                  		cmpi.w	#$1300,d0
000041E8 6500                       		bcs.s	loc_3CF0
000041EA 323C 0108                  		move.w	#$108,d1
000041EE 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
000041F4                            
000041F4                            loc_3CF0:
000041F4 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000041F8                            
000041F8                            locret_3CF4:
000041F8 4E75                       		rts	
000041FA                            ; ===========================================================================
000041FA                            
000041FA                            DynWater_LZ2:				; XREF: DynWater_Index
000041FA 3038 F700                  		move.w	($FFFFF700).w,d0
000041FE 323C 0328                  		move.w	#$328,d1
00004202 0C40 0500                  		cmpi.w	#$500,d0
00004206 6500                       		bcs.s	loc_3D12
00004208 323C 03C8                  		move.w	#$3C8,d1
0000420C 0C40 0B00                  		cmpi.w	#$B00,d0
00004210 6500                       		bcs.s	loc_3D12
00004212 323C 0428                  		move.w	#$428,d1
00004216                            
00004216                            loc_3D12:
00004216 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000421A 4E75                       		rts	
0000421C                            ; ===========================================================================
0000421C                            
0000421C                            DynWater_LZ3:				; XREF: DynWater_Index
0000421C 3038 F700                  		move.w	($FFFFF700).w,d0
00004220 1438 F64D                  		move.b	($FFFFF64D).w,d2
00004224 6600                       		bne.s	loc_3D5E
00004226 323C 0500                  		move.w	#$500,d1
0000422A 0C40 0600                  		cmpi.w	#$600,d0
0000422E 6500                       		bcs.s	loc_3D54
00004230 0C40 1B00                  		cmpi.w	#$1B00,d0
00004234 6500                       		bcs.s	loc_3D54
00004236 323C 0850                  		move.w	#$850,d1
0000423A                            
0000423A                            loc_3D54:
0000423A 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000423E 31C1 F648                  		move.w	d1,($FFFFF648).w
00004242 4E75                       		rts	
00004244                            ; ===========================================================================
00004244                            
00004244                            loc_3D5E:				; XREF: DynWater_LZ3
00004244 5302                       		subq.b	#1,d2
00004246 6600                       		bne.s	loc_3DA8
00004248 323C 04C8                  		move.w	#$4C8,d1
0000424C 0C40 0770                  		cmpi.w	#$770,d0
00004250 6500                       		bcs.s	loc_3DA2
00004252 323C 0308                  		move.w	#$308,d1
00004256 0C40 1400                  		cmpi.w	#$1400,d0
0000425A 6500                       		bcs.s	loc_3DA2
0000425C 0C78 0508 F64A             		cmpi.w	#$508,($FFFFF64A).w
00004262 6700                       		beq.s	loc_3D8E
00004264 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
0000426A 6400                       		bcc.s	loc_3D8E
0000426C 0C78 0280 D00C             		cmpi.w	#$280,($FFFFD00C).w
00004272 6400                       		bcc.s	loc_3DA2
00004274                            
00004274                            loc_3D8E:
00004274 323C 0508                  		move.w	#$508,d1
00004278 31C1 F648                  		move.w	d1,($FFFFF648).w
0000427C 0C40 1770                  		cmpi.w	#$1770,d0
00004280 6500                       		bcs.s	loc_3DA2
00004282 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
00004288                            
00004288                            loc_3DA2:
00004288 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000428C 4E75                       		rts	
0000428E                            ; ===========================================================================
0000428E                            
0000428E                            loc_3DA8:
0000428E 5302                       		subq.b	#1,d2
00004290 6600                       		bne.s	loc_3DD2
00004292 323C 0508                  		move.w	#$508,d1
00004296 0C40 1860                  		cmpi.w	#$1860,d0
0000429A 6500                       		bcs.s	loc_3DCC
0000429C 323C 0188                  		move.w	#$188,d1
000042A0 0C40 1AF0                  		cmpi.w	#$1AF0,d0
000042A4 6400                       		bcc.s	loc_3DC6
000042A6 B278 F648                  		cmp.w	($FFFFF648).w,d1
000042AA 6600                       		bne.s	loc_3DCC
000042AC                            
000042AC                            loc_3DC6:
000042AC 11FC 0003 F64D             		move.b	#3,($FFFFF64D).w
000042B2                            
000042B2                            loc_3DCC:
000042B2 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000042B6 4E75                       		rts	
000042B8                            ; ===========================================================================
000042B8                            
000042B8                            loc_3DD2:
000042B8 5302                       		subq.b	#1,d2
000042BA 6600                       		bne.s	loc_3E0E
000042BC 323C 0188                  		move.w	#$188,d1
000042C0 0C40 1AF0                  		cmpi.w	#$1AF0,d0
000042C4 6500                       		bcs.s	loc_3E04
000042C6 323C 0900                  		move.w	#$900,d1
000042CA 0C40 1BC0                  		cmpi.w	#$1BC0,d0
000042CE 6500                       		bcs.s	loc_3E04
000042D0 11FC 0004 F64D             		move.b	#4,($FFFFF64D).w
000042D6 31FC 0608 F64A             		move.w	#$608,($FFFFF64A).w
000042DC 31FC 07C0 F648             		move.w	#$7C0,($FFFFF648).w
000042E2 11FC 0001 F7E8             		move.b	#1,($FFFFF7E8).w
000042E8 4E75                       		rts	
000042EA                            ; ===========================================================================
000042EA                            
000042EA                            loc_3E04:
000042EA 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000042EE 31C1 F648                  		move.w	d1,($FFFFF648).w
000042F2 4E75                       		rts	
000042F4                            ; ===========================================================================
000042F4                            
000042F4                            loc_3E0E:
000042F4 0C40 1E00                  		cmpi.w	#$1E00,d0
000042F8 6500                       		bcs.s	locret_3E1A
000042FA 31FC 0128 F64A             		move.w	#$128,($FFFFF64A).w
00004300                            
00004300                            locret_3E1A:
00004300 4E75                       		rts	
00004302                            ; ===========================================================================
00004302                            
00004302                            DynWater_SBZ3:				; XREF: DynWater_Index
00004302 323C 0228                  		move.w	#$228,d1
00004306 0C78 0F00 F700             		cmpi.w	#$F00,($FFFFF700).w
0000430C 6500                       		bcs.s	loc_3E2C
0000430E 323C 04C8                  		move.w	#$4C8,d1
00004312                            
00004312                            loc_3E2C:
00004312 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004316 4E75                       		rts
00004318                            
00004318                            ; ---------------------------------------------------------------------------
00004318                            ; Labyrinth Zone "wind tunnels"	subroutine
00004318                            ; ---------------------------------------------------------------------------
00004318                            
00004318                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004318                            
00004318                            
00004318                            LZWindTunnels:				; XREF: LZWaterEffects
00004318 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
0000431C 6600 0000                  		bne.w	locret_3F0A	; if yes, branch
00004320 45F9 0000 0000             		lea	(LZWind_Data).l,a2
00004326 7000                       		moveq	#0,d0
00004328 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000432C E748                       		lsl.w	#3,d0
0000432E D4C0                       		adda.w	d0,a2
00004330 7200                       		moveq	#0,d1
00004332 4A38 FE11                  		tst.b	($FFFFFE11).w
00004336 6600                       		bne.s	loc_3E56
00004338 7201                       		moveq	#1,d1
0000433A 514A                       		subq.w	#8,a2
0000433C                            
0000433C                            loc_3E56:
0000433C 43F8 D000                  		lea	($FFFFD000).w,a1
00004340                            
00004340                            LZWind_Loop:
00004340 3029 0008                  		move.w	8(a1),d0
00004344 B052                       		cmp.w	(a2),d0
00004346 6500 0000                  		bcs.w	loc_3EF4
0000434A B06A 0004                  		cmp.w	4(a2),d0
0000434E 6400 0000                  		bcc.w	loc_3EF4
00004352 3429 000C                  		move.w	$C(a1),d2
00004356 B46A 0002                  		cmp.w	2(a2),d2
0000435A 6500                       		bcs.s	loc_3EF4
0000435C B46A 0006                  		cmp.w	6(a2),d2
00004360 6400                       		bcc.s	loc_3EF4
00004362 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00004366 0200 003F                  		andi.b	#$3F,d0
0000436A 6600                       		bne.s	loc_3E90
0000436C 303C 00D0                  		move.w	#$D0,d0
00004370 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play rushing water sound
00004376                            
00004376                            loc_3E90:
00004376 4A38 F7C9                  		tst.b	($FFFFF7C9).w
0000437A 6600 0000                  		bne.w	locret_3F0A
0000437E 0C29 0004 0024             		cmpi.b	#4,$24(a1)
00004384 6400                       		bcc.s	loc_3F06
00004386 11FC 0001 F7C7             		move.b	#1,($FFFFF7C7).w
0000438C 0440 0080                  		subi.w	#$80,d0
00004390 B052                       		cmp.w	(a2),d0
00004392 6400                       		bcc.s	LZWind_Move
00004394 7002                       		moveq	#2,d0
00004396 0C38 0001 FE11             		cmpi.b	#1,($FFFFFE11).w
0000439C 6600                       		bne.s	loc_3EBA
0000439E 4440                       		neg.w	d0
000043A0                            
000043A0                            loc_3EBA:
000043A0 D169 000C                  		add.w	d0,$C(a1)
000043A4                            
000043A4                            LZWind_Move:
000043A4 5869 0008                  		addq.w	#4,8(a1)
000043A8 337C 0400 0010             		move.w	#$400,$10(a1)	; move Sonic horizontally
000043AE 337C 0000 0012             		move.w	#0,$12(a1)
000043B4 137C 000F 001C             		move.b	#$F,$1C(a1)	; use floating animation
000043BA 08E9 0001 0022             		bset	#1,$22(a1)
000043C0 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up pressed?
000043C6 6700                       		beq.s	LZWind_MoveDown	; if not, branch
000043C8 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
000043CC                            
000043CC                            LZWind_MoveDown:
000043CC 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
000043D2 6700                       		beq.s	locret_3EF2	; if not, branch
000043D4 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
000043D8                            
000043D8                            locret_3EF2:
000043D8 4E75                       		rts	
000043DA                            ; ===========================================================================
000043DA                            
000043DA                            loc_3EF4:				; XREF: LZWindTunnels
000043DA 504A                       		addq.w	#8,a2
000043DC 51C9 FF62                  		dbf	d1,LZWind_Loop
000043E0 4A38 F7C7                  		tst.b	($FFFFF7C7).w
000043E4 6700                       		beq.s	locret_3F0A
000043E6 137C 0000 001C             		move.b	#0,$1C(a1)
000043EC                            
000043EC                            loc_3F06:
000043EC 4238 F7C7                  		clr.b	($FFFFF7C7).w
000043F0                            
000043F0                            locret_3F0A:
000043F0 4E75                       		rts	
000043F2                            ; End of function LZWindTunnels
000043F2                            
000043F2                            ; ===========================================================================
000043F2 0A80 0300 0C10 0380        		dc.w $A80, $300, $C10, $380
000043FA 0F80 0100 1410 0180 0460+  LZWind_Data:	dc.w $F80, $100, $1410,	$180, $460, $400, $710,	$480, $A20
0000440C 0600 1610 06E0 0C80 0600+  		dc.w $600, $1610, $6E0,	$C80, $600, $13D0, $680
0000441A                            					; XREF: LZWindTunnels
0000441A                            		even
0000441A                            
0000441A                            ; ---------------------------------------------------------------------------
0000441A                            ; Labyrinth Zone water slide subroutine
0000441A                            ; ---------------------------------------------------------------------------
0000441A                            
0000441A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000441A                            
0000441A                            
0000441A                            LZWaterSlides:				; XREF: LZWaterEffects
0000441A 43F8 D000                  		lea	($FFFFD000).w,a1
0000441E 0829 0001 0022             		btst	#1,$22(a1)
00004424 6600                       		bne.s	loc_3F6A
00004426 3029 000C                  		move.w	$C(a1),d0
0000442A E248                       		lsr.w	#1,d0
0000442C 0240 0380                  		andi.w	#$380,d0
00004430 1229 0008                  		move.b	8(a1),d1
00004434 0241 007F                  		andi.w	#$7F,d1
00004438 D041                       		add.w	d1,d0
0000443A 45F8 A400                  		lea	($FFFFA400).w,a2
0000443E 1032 0000                  		move.b	(a2,d0.w),d0
00004442 45FA 0000                  		lea	byte_3FCF(pc),a2
00004446 7206                       		moveq	#6,d1
00004448                            
00004448                            loc_3F62:
00004448 B022                       		cmp.b	-(a2),d0
0000444A 57C9 FFFC                  		dbeq	d1,loc_3F62
0000444E 6700                       		beq.s	LZSlide_Move
00004450                            
00004450                            loc_3F6A:
00004450 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00004454 6700                       		beq.s	locret_3F7A
00004456 337C 0005 003E             		move.w	#5,$3E(a1)
0000445C 4238 F7CA                  		clr.b	($FFFFF7CA).w
00004460                            
00004460                            locret_3F7A:
00004460 4E75                       		rts	
00004462                            ; ===========================================================================
00004462                            
00004462                            LZSlide_Move:				; XREF: LZWaterSlides
00004462 0C41 0003                  		cmpi.w	#3,d1
00004466 6400                       		bcc.s	loc_3F84
00004468 4E71                       		nop	
0000446A                            
0000446A                            loc_3F84:
0000446A 08A9 0000 0022             		bclr	#0,$22(a1)
00004470 103B 1000                  		move.b	byte_3FC0(pc,d1.w),d0
00004474 1340 0014                  		move.b	d0,$14(a1)
00004478 6A00                       		bpl.s	loc_3F9A
0000447A 08E9 0000 0022             		bset	#0,$22(a1)
00004480                            
00004480                            loc_3F9A:
00004480 4229 0015                  		clr.b	$15(a1)
00004484 137C 001B 001C             		move.b	#$1B,$1C(a1)	; use Sonic's "sliding" animation
0000448A 11FC 0001 F7CA             		move.b	#1,($FFFFF7CA).w ; lock	controls (except jumping)
00004490 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00004494 0200 001F                  		andi.b	#$1F,d0
00004498 6600                       		bne.s	locret_3FBE
0000449A 303C 00D0                  		move.w	#$D0,d0
0000449E 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play water sound
000044A4                            
000044A4                            locret_3FBE:
000044A4 4E75                       		rts	
000044A6                            ; End of function LZWaterSlides
000044A6                            
000044A6                            ; ===========================================================================
000044A6 0AF5 0AF6 F5F4 0B00 0207+  byte_3FC0:	dc.b $A, $F5, $A, $F6, $F5, $F4, $B, 0,	2, 7, 3, $4C, $4B, 8, 4
000044B5 00                         byte_3FCF:	dc.b 0			; XREF: LZWaterSlides
000044B6                            		even
000044B6                            
000044B6                            ; ---------------------------------------------------------------------------
000044B6                            ; Subroutine to	move Sonic in demo mode
000044B6                            ; ---------------------------------------------------------------------------
000044B6                            
000044B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000044B6                            
000044B6                            
000044B6                            MoveSonicInDemo:			; XREF: Level_MainLoop; et al
000044B6 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000044BA 6600                       		bne.s	MoveDemo_On	; if yes, branch
000044BC 4E75                       		rts	
000044BE                            ; ===========================================================================
000044BE                            
000044BE                            ; This is an unused subroutine for recording a demo
000044BE                            
000044BE                            MoveDemo_Record:
000044BE 43F9 0008 0000             		lea	($80000).l,a1
000044C4 3038 F790                  		move.w	($FFFFF790).w,d0
000044C8 D2C0                       		adda.w	d0,a1
000044CA 1038 F604                  		move.b	($FFFFF604).w,d0
000044CE B011                       		cmp.b	(a1),d0
000044D0 6600                       		bne.s	loc_3FFA
000044D2 5229 0001                  		addq.b	#1,1(a1)
000044D6 0C29 00FF 0001             		cmpi.b	#$FF,1(a1)
000044DC 6700                       		beq.s	loc_3FFA
000044DE 4E75                       		rts	
000044E0                            ; ===========================================================================
000044E0                            
000044E0                            loc_3FFA:				; XREF: MoveDemo_Record
000044E0 1340 0002                  		move.b	d0,2(a1)
000044E4 137C 0000 0003             		move.b	#0,3(a1)
000044EA 5478 F790                  		addq.w	#2,($FFFFF790).w
000044EE 0278 03FF F790             		andi.w	#$3FF,($FFFFF790).w
000044F4 4E75                       		rts	
000044F6                            ; ===========================================================================
000044F6                            
000044F6                            MoveDemo_On:				; XREF: MoveSonicInDemo
000044F6 4A38 F604                  		tst.b	($FFFFF604).w
000044FA 6A00                       		bpl.s	loc_4022
000044FC 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00004500 6B00                       		bmi.s	loc_4022
00004502 11FC 0004 F600             		move.b	#4,($FFFFF600).w
00004508                            
00004508                            loc_4022:
00004508 43F9 0000 0000             		lea	(Demo_Index).l,a1
0000450E 7000                       		moveq	#0,d0
00004510 1038 FE10                  		move.b	($FFFFFE10).w,d0
00004514 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
0000451A 6600                       		bne.s	loc_4038
0000451C 7006                       		moveq	#6,d0
0000451E                            
0000451E                            loc_4038:
0000451E E548                       		lsl.w	#2,d0
00004520 2271 0000                  		movea.l	(a1,d0.w),a1
00004524 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00004528 6A00                       		bpl.s	loc_4056
0000452A 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1
00004530 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00004534 5340                       		subq.w	#1,d0
00004536 E548                       		lsl.w	#2,d0
00004538 2271 0000                  		movea.l	(a1,d0.w),a1
0000453C                            
0000453C                            loc_4056:
0000453C 3038 F790                  		move.w	($FFFFF790).w,d0
00004540 D2C0                       		adda.w	d0,a1
00004542 1011                       		move.b	(a1),d0
00004544 41F8 F604                  		lea	($FFFFF604).w,a0
00004548 1200                       		move.b	d0,d1
0000454A 1410                       		move.b	(a0),d2
0000454C B500                       		eor.b	d2,d0
0000454E 10C1                       		move.b	d1,(a0)+
00004550 C001                       		and.b	d1,d0
00004552 10C0                       		move.b	d0,(a0)+
00004554 5338 F792                  		subq.b	#1,($FFFFF792).w
00004558 6400                       		bcc.s	locret_407E
0000455A 11E9 0003 F792             		move.b	3(a1),($FFFFF792).w
00004560 5478 F790                  		addq.w	#2,($FFFFF790).w
00004564                            
00004564                            locret_407E:
00004564 4E75                       		rts	
00004566                            ; End of function MoveSonicInDemo
00004566                            
00004566                            ; ===========================================================================
00004566                            ; ---------------------------------------------------------------------------
00004566                            ; Demo sequence	pointers
00004566                            ; ---------------------------------------------------------------------------
00004566                            Demo_Index:
00004566                            	include "_inc\Demo pointers for intro.asm"
00004566                            ; ---------------------------------------------------------------------------
00004566                            ; Demo sequence	pointers
00004566                            ; ---------------------------------------------------------------------------
00004566 0000 0000                  	dc.l Demo_GHZ
0000456A 0000 0000                  	dc.l Demo_GHZ
0000456E 0000 0000                  	dc.l Demo_MZ
00004572 0000 0000                  	dc.l Demo_MZ
00004576 0000 0000                  	dc.l Demo_SYZ
0000457A 0000 0000                  	dc.l Demo_SYZ
0000457E 0000 0000                  	dc.l Demo_SS
00004582 0000 0000                  	dc.l Demo_SS
00004582 0000 0000                  	dc.l Demo_SS
00004586                            
00004586                            Demo_EndIndex:
00004586                            	include "_inc\Demo pointers for ending.asm"
00004586                            ; ---------------------------------------------------------------------------
00004586                            ; Demo (ending) sequence pointers
00004586                            ; ---------------------------------------------------------------------------
00004586 0000 0000                  	dc.l Demo_EndGHZ1
0000458A 0000 0000                  	dc.l Demo_EndMZ
0000458E 0000 0000                  	dc.l Demo_EndSYZ
00004592 0000 0000                  	dc.l Demo_EndLZ
00004596 0000 0000                  	dc.l Demo_EndSLZ
0000459A 0000 0000                  	dc.l Demo_EndSBZ1
0000459E 0000 0000                  	dc.l Demo_EndSBZ2
000045A2 0000 0000                  	dc.l Demo_EndGHZ2
000045A2 0000 0000                  	dc.l Demo_EndGHZ2
000045A6                            
000045A6 008B 0837 0042 085C 006A+  		dc.b 0,	$8B, 8,	$37, 0,	$42, 8,	$5C, 0,	$6A, 8,	$5F, 0,	$2F, 8,	$2C
000045B6 0021 0803 2830 0808 002E+  		dc.b 0,	$21, 8,	3, $28,	$30, 8,	8, 0, $2E, 8, $15, 0, $F, 8, $46
000045C6 001A 08FF 08CA 0000 0000+  		dc.b 0,	$1A, 8,	$FF, 8,	$CA, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0
000045D6                            		even
000045D6                            
000045D6                            ; ---------------------------------------------------------------------------
000045D6                            ; Collision index loading subroutine
000045D6                            ; ---------------------------------------------------------------------------
000045D6                            
000045D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000045D6                            
000045D6                            
000045D6                            ColIndexLoad:				; XREF: Level
000045D6 7000                       		moveq	#0,d0
000045D8 1038 FE10                  		move.b	($FFFFFE10).w,d0
000045DC E548                       		lsl.w	#2,d0
000045DE 21FB 0000 F796             		move.l	ColPointers(pc,d0.w),($FFFFF796).w
000045E4 4E75                       		rts	
000045E6                            ; End of function ColIndexLoad
000045E6                            
000045E6                            ; ===========================================================================
000045E6                            ; ---------------------------------------------------------------------------
000045E6                            ; Collision index pointers
000045E6                            ; ---------------------------------------------------------------------------
000045E6                            ColPointers:
000045E6                            	include "_inc\Collision index pointers.asm"
000045E6                            ; ---------------------------------------------------------------------------
000045E6                            ; Collision index pointers
000045E6                            ; ---------------------------------------------------------------------------
000045E6 0000 0000                  	dc.l Col_GHZ
000045EA 0000 0000                  	dc.l Col_LZ
000045EE 0000 0000                  	dc.l Col_MZ
000045F2 0000 0000                  	dc.l Col_SLZ
000045F6 0000 0000                  	dc.l Col_SYZ
000045FA 0000 0000                  	dc.l Col_SBZ
000045FA 0000 0000                  	dc.l Col_SBZ
000045FE                            
000045FE                            ; ---------------------------------------------------------------------------
000045FE                            ; Oscillating number subroutine
000045FE                            ; ---------------------------------------------------------------------------
000045FE                            
000045FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000045FE                            
000045FE                            
000045FE                            OscillateNumInit:			; XREF: Level
000045FE 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
00004602 45F9 0000 0000             		lea	(Osc_Data).l,a2
00004608 7220                       		moveq	#$20,d1
0000460A                            
0000460A                            Osc_Loop:
0000460A 32DA                       		move.w	(a2)+,(a1)+
0000460C 51C9 FFFC                  		dbf	d1,Osc_Loop
00004610 4E75                       		rts	
00004612                            ; End of function OscillateNumInit
00004612                            
00004612                            ; ===========================================================================
00004612 007C 0080                  Osc_Data:	dc.w $7C, $80		; baseline values
00004616 0000 0080                  		dc.w 0,	$80
0000461A 0000 0080                  		dc.w 0,	$80
0000461E 0000 0080                  		dc.w 0,	$80
00004622 0000 0080                  		dc.w 0,	$80
00004626 0000 0080                  		dc.w 0,	$80
0000462A 0000 0080                  		dc.w 0,	$80
0000462E 0000 0080                  		dc.w 0,	$80
00004632 0000 0080                  		dc.w 0,	$80
00004636 0000 50F0                  		dc.w 0,	$50F0
0000463A 011E 2080                  		dc.w $11E, $2080
0000463E 00B4 3080                  		dc.w $B4, $3080
00004642 010E 5080                  		dc.w $10E, $5080
00004646 01C2 7080                  		dc.w $1C2, $7080
0000464A 0276 0080                  		dc.w $276, $80
0000464E 0000 0080                  		dc.w 0,	$80
00004652 0000                       		dc.w 0
00004654                            		even
00004654                            
00004654                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004654                            
00004654                            
00004654                            OscillateNumDo:				; XREF: Level
00004654 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000465A 6400                       		bcc.s	locret_41C4
0000465C 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
00004660 45F9 0000 0000             		lea	(Osc_Data2).l,a2
00004666 3619                       		move.w	(a1)+,d3
00004668 720F                       		moveq	#$F,d1
0000466A                            
0000466A                            loc_4184:
0000466A 341A                       		move.w	(a2)+,d2
0000466C 381A                       		move.w	(a2)+,d4
0000466E 0303                       		btst	d1,d3
00004670 6600                       		bne.s	loc_41A4
00004672 3029 0002                  		move.w	2(a1),d0
00004676 D042                       		add.w	d2,d0
00004678 3340 0002                  		move.w	d0,2(a1)
0000467C D151                       		add.w	d0,0(a1)
0000467E B811                       		cmp.b	0(a1),d4
00004680 6200                       		bhi.s	loc_41BA
00004682 03C3                       		bset	d1,d3
00004684 6000                       		bra.s	loc_41BA
00004686                            ; ===========================================================================
00004686                            
00004686                            loc_41A4:				; XREF: OscillateNumDo
00004686 3029 0002                  		move.w	2(a1),d0
0000468A 9042                       		sub.w	d2,d0
0000468C 3340 0002                  		move.w	d0,2(a1)
00004690 D151                       		add.w	d0,0(a1)
00004692 B811                       		cmp.b	0(a1),d4
00004694 6300                       		bls.s	loc_41BA
00004696 0383                       		bclr	d1,d3
00004698                            
00004698                            loc_41BA:
00004698 5849                       		addq.w	#4,a1
0000469A 51C9 FFCE                  		dbf	d1,loc_4184
0000469E 31C3 FE5E                  		move.w	d3,($FFFFFE5E).w
000046A2                            
000046A2                            locret_41C4:
000046A2 4E75                       		rts	
000046A4                            ; End of function OscillateNumDo
000046A4                            
000046A4                            ; ===========================================================================
000046A4 0002 0010                  Osc_Data2:	dc.w 2,	$10		; XREF: OscillateNumDo
000046A8 0002 0018                  		dc.w 2,	$18
000046AC 0002 0020                  		dc.w 2,	$20
000046B0 0002 0030                  		dc.w 2,	$30
000046B4 0004 0020                  		dc.w 4,	$20
000046B8 0008 0008                  		dc.w 8,	8
000046BC 0008 0040                  		dc.w 8,	$40
000046C0 0004 0040                  		dc.w 4,	$40
000046C4 0002 0050                  		dc.w 2,	$50
000046C8 0002 0050                  		dc.w 2,	$50
000046CC 0002 0020                  		dc.w 2,	$20
000046D0 0003 0030                  		dc.w 3,	$30
000046D4 0005 0050                  		dc.w 5,	$50
000046D8 0007 0070                  		dc.w 7,	$70
000046DC 0002 0010                  		dc.w 2,	$10
000046E0 0002 0010                  		dc.w 2,	$10
000046E4                            		even
000046E4                            
000046E4                            ; ---------------------------------------------------------------------------
000046E4                            ; Subroutine to	change object animation	variables (rings, giant	rings)
000046E4                            ; ---------------------------------------------------------------------------
000046E4                            
000046E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000046E4                            
000046E4                            
000046E4                            ChangeRingFrame:			; XREF: Level
000046E4 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
000046E8 6A00                       		bpl.s	loc_421C
000046EA 11FC 000B FEC0             		move.b	#$B,($FFFFFEC0).w
000046F0 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
000046F4 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
000046FA                            
000046FA                            loc_421C:
000046FA 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
000046FE 6A00                       		bpl.s	loc_4232
00004700 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
00004706 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
0000470A 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
00004710                            
00004710                            loc_4232:
00004710 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
00004714 6A00                       		bpl.s	loc_4250
00004716 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
0000471C 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
00004720 0C38 0006 FEC5             		cmpi.b	#6,($FFFFFEC5).w
00004726 6500                       		bcs.s	loc_4250
00004728 11FC 0000 FEC5             		move.b	#0,($FFFFFEC5).w
0000472E                            
0000472E                            loc_4250:
0000472E 4A38 FEC6                  		tst.b	($FFFFFEC6).w
00004732 6700                       		beq.s	locret_4272
00004734 7000                       		moveq	#0,d0
00004736 1038 FEC6                  		move.b	($FFFFFEC6).w,d0
0000473A D078 FEC8                  		add.w	($FFFFFEC8).w,d0
0000473E 31C0 FEC8                  		move.w	d0,($FFFFFEC8).w
00004742 EF58                       		rol.w	#7,d0
00004744 0240 0003                  		andi.w	#3,d0
00004748 11C0 FEC7                  		move.b	d0,($FFFFFEC7).w
0000474C 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
00004750                            
00004750                            locret_4272:
00004750 4E75                       		rts	
00004752                            ; End of function ChangeRingFrame
00004752                            
00004752                            ; ---------------------------------------------------------------------------
00004752                            ; End-of-act signpost pattern loading subroutine
00004752                            ; ---------------------------------------------------------------------------
00004752                            
00004752                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004752                            
00004752                            
00004752                            SignpostArtLoad:			; XREF: Level
00004752 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00004756 6600 0000                  		bne.w	Signpost_Exit	; if yes, branch
0000475A 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; is act number 02 (act 3)?
00004760 6700                       		beq.s	Signpost_Exit	; if yes, branch
00004762 3038 F700                  		move.w	($FFFFF700).w,d0
00004766 3238 F72A                  		move.w	($FFFFF72A).w,d1
0000476A 0441 0100                  		subi.w	#$100,d1
0000476E B041                       		cmp.w	d1,d0		; has Sonic reached the	edge of	the level?
00004770 6D00                       		blt.s	Signpost_Exit	; if not, branch
00004772 4A38 FE1E                  		tst.b	($FFFFFE1E).w
00004776 6700                       		beq.s	Signpost_Exit
00004778 B278 F728                  		cmp.w	($FFFFF728).w,d1
0000477C 6700                       		beq.s	Signpost_Exit
0000477E 31C1 F728                  		move.w	d1,($FFFFF728).w ; move	left boundary to current screen	position
00004782 7012                       		moveq	#$12,d0
00004784 6000 D050                  		bra.w	LoadPLC2	; load signpost	patterns
00004788                            ; ===========================================================================
00004788                            
00004788                            Signpost_Exit:
00004788 4E75                       		rts	
0000478A                            ; End of function SignpostArtLoad
0000478A                            
0000478A                            ; ===========================================================================
0000478A                            Demo_GHZ:	incbin	demodata\i_ghz.bin
0000480A                            Demo_MZ:	incbin	demodata\i_mz.bin
0000493A                            Demo_SYZ:	incbin	demodata\i_syz.bin
000049BA                            Demo_SS:	incbin	demodata\i_ss.bin
00004ABA                            ; ===========================================================================
00004ABA                            
00004ABA                            ; ---------------------------------------------------------------------------
00004ABA                            ; Special Stage
00004ABA                            ; ---------------------------------------------------------------------------
00004ABA                            
00004ABA                            SpecialStage:				; XREF: GameModeArray
00004ABA 303C 00CA                  		move.w	#$CA,d0
00004ABE 6100 CB00                  		bsr.w	PlaySound_Special ; play special stage entry sound
00004AC2 6100 D6A2                  		bsr.w	Pal_MakeFlash
00004AC6 46FC 2700                  		move	#$2700,sr
00004ACA 4DF9 00C0 0004             		lea	($C00004).l,a6
00004AD0 3CBC 8B03                  		move.w	#$8B03,(a6)
00004AD4 3CBC 8004                  		move.w	#$8004,(a6)
00004AD8 31FC 8AAF F624             		move.w	#$8AAF,($FFFFF624).w
00004ADE 3CBC 9011                  		move.w	#$9011,(a6)
00004AE2 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004AE6 0200 00BF                  		andi.b	#$BF,d0
00004AEA 33C0 00C0 0004             		move.w	d0,($C00004).l
00004AF0 6100 C9F6                  		bsr.w	ClearScreen
00004AF4 46FC 2300                  		move	#$2300,sr
00004AF8 4BF9 00C0 0004             		lea	($C00004).l,a5
00004AFE 3ABC 8F01                  		move.w	#$8F01,(a5)
00004B02 2ABC 946F 93FF             		move.l	#$946F93FF,(a5)
00004B08 3ABC 9780                  		move.w	#$9780,(a5)
00004B0C 2ABC 5000 0081             		move.l	#$50000081,(a5)
00004B12 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00004B1A                            
00004B1A                            loc_463C:
00004B1A 3215                       		move.w	(a5),d1
00004B1C 0801 0001                  		btst	#1,d1
00004B20 66F8                       		bne.s	loc_463C
00004B22 3ABC 8F02                  		move.w	#$8F02,(a5)
00004B26 6100 0000                  		bsr.w	SS_BGLoad
00004B2A 7014                       		moveq	#$14,d0
00004B2C 6100 CDE2                  		bsr.w	RunPLC_ROM	; load special stage patterns
00004B30 43F8 D000                  		lea	($FFFFD000).w,a1
00004B34 7000                       		moveq	#0,d0
00004B36 323C 07FF                  		move.w	#$7FF,d1
00004B3A                            
00004B3A                            SS_ClrObjRam:
00004B3A 22C0                       		move.l	d0,(a1)+
00004B3C 51C9 FFFC                  		dbf	d1,SS_ClrObjRam	; clear	the object RAM
00004B40                            
00004B40 43F8 F700                  		lea	($FFFFF700).w,a1
00004B44 7000                       		moveq	#0,d0
00004B46 323C 003F                  		move.w	#$3F,d1
00004B4A                            
00004B4A                            SS_ClrRam:
00004B4A 22C0                       		move.l	d0,(a1)+
00004B4C 51C9 FFFC                  		dbf	d1,SS_ClrRam	; clear	variables
00004B50                            
00004B50 43F8 FE60                  		lea	($FFFFFE60).w,a1
00004B54 7000                       		moveq	#0,d0
00004B56 323C 0027                  		move.w	#$27,d1
00004B5A                            
00004B5A                            SS_ClrRam2:
00004B5A 22C0                       		move.l	d0,(a1)+
00004B5C 51C9 FFFC                  		dbf	d1,SS_ClrRam2	; clear	variables
00004B60                            
00004B60 43F8 AA00                  		lea	($FFFFAA00).w,a1
00004B64 7000                       		moveq	#0,d0
00004B66 323C 007F                  		move.w	#$7F,d1
00004B6A                            
00004B6A                            SS_ClrNemRam:
00004B6A 22C0                       		move.l	d0,(a1)+
00004B6C 51C9 FFFC                  		dbf	d1,SS_ClrNemRam	; clear	Nemesis	buffer
00004B70                            
00004B70 4238 F64E                  		clr.b	($FFFFF64E).w
00004B74 4278 FE02                  		clr.w	($FFFFFE02).w
00004B78 700A                       		moveq	#$A,d0
00004B7A 6100 D76A                  		bsr.w	PalLoad1	; load special stage pallet
00004B7E 4EB9 0000 0000             		jsr	SS_Load
00004B84 21FC 0000 0000 F700        		move.l	#0,($FFFFF700).w
00004B8C 21FC 0000 0000 F704        		move.l	#0,($FFFFF704).w
00004B94 11FC 0009 D000             		move.b	#9,($FFFFD000).w ; load	special	stage Sonic object
00004B9A 6100 0000                  		bsr.w	PalCycle_SS
00004B9E 4278 F780                  		clr.w	($FFFFF780).w	; set stage angle to "upright"
00004BA2 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set stage rotation	speed
00004BA8 303C 0089                  		move.w	#$89,d0
00004BAC 6100 CA0C                  		bsr.w	PlaySound	; play special stage BG	music
00004BB0 31FC 0000 F790             		move.w	#0,($FFFFF790).w
00004BB6 43F9 0000 4566             		lea	(Demo_Index).l,a1
00004BBC 7006                       		moveq	#6,d0
00004BBE E548                       		lsl.w	#2,d0
00004BC0 2271 0000                  		movea.l	(a1,d0.w),a1
00004BC4 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w
00004BCA 5338 F792                  		subq.b	#1,($FFFFF792).w
00004BCE 4278 FE20                  		clr.w	($FFFFFE20).w
00004BD2 4238 FE1B                  		clr.b	($FFFFFE1B).w
00004BD6 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w
00004BDC 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00004BE2 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00004BE6 6700                       		beq.s	SS_NoDebug	; if not, branch
00004BE8 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
00004BEE 6700                       		beq.s	SS_NoDebug	; if not, branch
00004BF0 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00004BF6                            
00004BF6                            SS_NoDebug:
00004BF6 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004BFA 0000 0040                  		ori.b	#$40,d0
00004BFE 33C0 00C0 0004             		move.w	d0,($C00004).l
00004C04 6100 D4B4                  		bsr.w	Pal_MakeWhite
00004C08                            
00004C08                            ; ---------------------------------------------------------------------------
00004C08                            ; Main Special Stage loop
00004C08                            ; ---------------------------------------------------------------------------
00004C08                            
00004C08                            SS_MainLoop:
00004C08 6100 C9C2                  		bsr.w	PauseGame
00004C0C 11FC 000A F62A             		move.b	#$A,($FFFFF62A).w
00004C12 6100 E07E                  		bsr.w	DelayProgram
00004C16 6100 F89E                  		bsr.w	MoveSonicInDemo
00004C1A 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
00004C20 4EB9 0000 0000             		jsr	ObjectsLoad
00004C26 4EB9 0000 0000             		jsr	BuildSprites
00004C2C 4EB9 0000 0000             		jsr	SS_ShowLayout
00004C32 6100 0000                  		bsr.w	SS_BGAnimate
00004C36 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004C3A 6700                       		beq.s	SS_ChkEnd	; if not, branch
00004C3C 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00004C40 6700 0000                  		beq.w	SS_ToSegaScreen	; if not, branch
00004C44                            
00004C44                            SS_ChkEnd:
00004C44 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode $10 (special stage)?
00004C4A 6700 FFBC                  		beq.w	SS_MainLoop	; if yes, branch
00004C4E                            
00004C4E 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004C52 6600 0000                  		bne.w	SS_ToSegaScreen	; if yes, branch
00004C56 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00004C5C 0C78 0503 FE10             		cmpi.w	#$503,($FFFFFE10).w ; is level number higher than FZ?
00004C62 6500                       		bcs.s	SS_End		; if not, branch
00004C64 4278 FE10                  		clr.w	($FFFFFE10).w	; set to GHZ1
00004C68                            
00004C68                            SS_End:
00004C68 31FC 003C F614             		move.w	#60,($FFFFF614).w ; set	delay time to 1	second
00004C6E 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00004C74 4278 F794                  		clr.w	($FFFFF794).w
00004C78                            
00004C78                            SS_EndLoop:
00004C78 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
00004C7E 6100 E012                  		bsr.w	DelayProgram
00004C82 6100 F832                  		bsr.w	MoveSonicInDemo
00004C86 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
00004C8C 4EB9 0000 0000             		jsr	ObjectsLoad
00004C92 4EB9 0000 0000             		jsr	BuildSprites
00004C98 4EB9 0000 0000             		jsr	SS_ShowLayout
00004C9E 6100 0000                  		bsr.w	SS_BGAnimate
00004CA2 5378 F794                  		subq.w	#1,($FFFFF794).w
00004CA6 6A00                       		bpl.s	loc_47D4
00004CA8 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00004CAE 6100 D4D6                  		bsr.w	Pal_ToWhite
00004CB2                            
00004CB2                            loc_47D4:
00004CB2 4A78 F614                  		tst.w	($FFFFF614).w
00004CB6 66C0                       		bne.s	SS_EndLoop
00004CB8                            
00004CB8 46FC 2700                  		move	#$2700,sr
00004CBC 4DF9 00C0 0004             		lea	($C00004).l,a6
00004CC2 3CBC 8230                  		move.w	#$8230,(a6)
00004CC6 3CBC 8407                  		move.w	#$8407,(a6)
00004CCA 3CBC 9001                  		move.w	#$9001,(a6)
00004CCE 6100 C818                  		bsr.w	ClearScreen
00004CD2 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00004CDC 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00004CE2 6100 C980                  		bsr.w	NemDec
00004CE6 4EB9 0000 0000             		jsr	Hud_Base
00004CEC 46FC 2300                  		move	#$2300,sr
00004CF0 7011                       		moveq	#$11,d0
00004CF2 6100 D60E                  		bsr.w	PalLoad2	; load results screen pallet
00004CF6 7000                       		moveq	#0,d0
00004CF8 6100 CADC                  		bsr.w	LoadPLC2
00004CFC 701B                       		moveq	#$1B,d0
00004CFE 6100 CAA4                  		bsr.w	LoadPLC		; load results screen patterns
00004D02 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00004D08 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; update ring bonus counter
00004D0E 3038 FE20                  		move.w	($FFFFFE20).w,d0
00004D12 C0FC 000A                  		mulu.w	#10,d0		; multiply rings by 10
00004D16 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set rings bonus
00004D1A 303C 008E                  		move.w	#$8E,d0
00004D1E 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play end-of-level music
00004D24 43F8 D000                  		lea	($FFFFD000).w,a1
00004D28 7000                       		moveq	#0,d0
00004D2A 323C 07FF                  		move.w	#$7FF,d1
00004D2E                            
00004D2E                            SS_EndClrObjRam:
00004D2E 22C0                       		move.l	d0,(a1)+
00004D30 51C9 FFFC                  		dbf	d1,SS_EndClrObjRam ; clear object RAM
00004D34                            
00004D34 11FC 007E D5C0             		move.b	#$7E,($FFFFD5C0).w ; load results screen object
00004D3A                            
00004D3A                            SS_NormalExit:
00004D3A 6100 C890                  		bsr.w	PauseGame
00004D3E 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00004D44 6100 DF4C                  		bsr.w	DelayProgram
00004D48 4EB9 0000 0000             		jsr	ObjectsLoad
00004D4E 4EB9 0000 0000             		jsr	BuildSprites
00004D54 6100 CABA                  		bsr.w	RunPLC_RAM
00004D58 4A78 FE02                  		tst.w	($FFFFFE02).w
00004D5C 67DC                       		beq.s	SS_NormalExit
00004D5E 4AB8 F680                  		tst.l	($FFFFF680).w
00004D62 66D6                       		bne.s	SS_NormalExit
00004D64 303C 00CA                  		move.w	#$CA,d0
00004D68 6100 C856                  		bsr.w	PlaySound_Special ; play special stage exit sound
00004D6C 6100 D3F8                  		bsr.w	Pal_MakeFlash
00004D70 4E75                       		rts	
00004D72                            ; ===========================================================================
00004D72                            
00004D72                            SS_ToSegaScreen:
00004D72 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (Sega screen)
00004D78 4E75                       		rts
00004D7A                            
00004D7A                            ; ---------------------------------------------------------------------------
00004D7A                            ; Special stage	background loading subroutine
00004D7A                            ; ---------------------------------------------------------------------------
00004D7A                            
00004D7A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004D7A                            
00004D7A                            
00004D7A                            SS_BGLoad:				; XREF: SpecialStage
00004D7A 43F9 00FF 0000             		lea	($FF0000).l,a1
00004D80 41F9 0000 0000             		lea	(Eni_SSBg1).l,a0 ; load	mappings for the birds and fish
00004D86 303C 4051                  		move.w	#$4051,d0
00004D8A 6100 CBB6                  		bsr.w	EniDec
00004D8E 263C 5000 0001             		move.l	#$50000001,d3
00004D94 45F9 00FF 0080             		lea	($FF0080).l,a2
00004D9A 7E06                       		moveq	#6,d7
00004D9C                            
00004D9C                            loc_48BE:
00004D9C 2003                       		move.l	d3,d0
00004D9E 7C03                       		moveq	#3,d6
00004DA0 7800                       		moveq	#0,d4
00004DA2 0C47 0003                  		cmpi.w	#3,d7
00004DA6 6400                       		bcc.s	loc_48CC
00004DA8 7801                       		moveq	#1,d4
00004DAA                            
00004DAA                            loc_48CC:
00004DAA 7A07                       		moveq	#7,d5
00004DAC                            
00004DAC                            loc_48CE:
00004DAC 224A                       		movea.l	a2,a1
00004DAE 0A04 0001                  		eori.b	#1,d4
00004DB2 6600                       		bne.s	loc_48E2
00004DB4 0C47 0006                  		cmpi.w	#6,d7
00004DB8 6600                       		bne.s	loc_48F2
00004DBA 43F9 00FF 0000             		lea	($FF0000).l,a1
00004DC0                            
00004DC0                            loc_48E2:
00004DC0 48E7 F800                  		movem.l	d0-d4,-(sp)
00004DC4 7207                       		moveq	#7,d1
00004DC6 7407                       		moveq	#7,d2
00004DC8 6100 C87A                  		bsr.w	ShowVDPGraphics
00004DCC 4CDF 001F                  		movem.l	(sp)+,d0-d4
00004DD0                            
00004DD0                            loc_48F2:
00004DD0 0680 0010 0000             		addi.l	#$100000,d0
00004DD6 51CD FFD4                  		dbf	d5,loc_48CE
00004DDA 0680 0380 0000             		addi.l	#$3800000,d0
00004DE0 0A04 0001                  		eori.b	#1,d4
00004DE4 51CE FFC4                  		dbf	d6,loc_48CC
00004DE8 0683 1000 0000             		addi.l	#$10000000,d3
00004DEE 6A00                       		bpl.s	loc_491C
00004DF0 4843                       		swap	d3
00004DF2 0683 0000 C000             		addi.l	#$C000,d3
00004DF8 4843                       		swap	d3
00004DFA                            
00004DFA                            loc_491C:
00004DFA D4FC 0080                  		adda.w	#$80,a2
00004DFE 51CF FF9C                  		dbf	d7,loc_48BE
00004E02 43F9 00FF 0000             		lea	($FF0000).l,a1
00004E08 41F9 0000 0000             		lea	(Eni_SSBg2).l,a0 ; load	mappings for the clouds
00004E0E 303C 4000                  		move.w	#$4000,d0
00004E12 6100 CB2E                  		bsr.w	EniDec
00004E16 43F9 00FF 0000             		lea	($FF0000).l,a1
00004E1C 203C 4000 0003             		move.l	#$40000003,d0
00004E22 723F                       		moveq	#$3F,d1
00004E24 741F                       		moveq	#$1F,d2
00004E26 6100 C81C                  		bsr.w	ShowVDPGraphics
00004E2A 43F9 00FF 0000             		lea	($FF0000).l,a1
00004E30 203C 5000 0003             		move.l	#$50000003,d0
00004E36 723F                       		moveq	#$3F,d1
00004E38 743F                       		moveq	#$3F,d2
00004E3A 6100 C808                  		bsr.w	ShowVDPGraphics
00004E3E 4E75                       		rts	
00004E40                            ; End of function SS_BGLoad
00004E40                            
00004E40                            ; ---------------------------------------------------------------------------
00004E40                            ; Pallet cycling routine - special stage
00004E40                            ; ---------------------------------------------------------------------------
00004E40                            
00004E40                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004E40                            
00004E40                            
00004E40                            PalCycle_SS:				; XREF: loc_DA6; SpecialStage
00004E40 4A78 F63A                  		tst.w	($FFFFF63A).w
00004E44 6600                       		bne.s	locret_49E6
00004E46 5378 F79C                  		subq.w	#1,($FFFFF79C).w
00004E4A 6A00                       		bpl.s	locret_49E6
00004E4C 4DF9 00C0 0004             		lea	($C00004).l,a6
00004E52 3038 F79A                  		move.w	($FFFFF79A).w,d0
00004E56 5278 F79A                  		addq.w	#1,($FFFFF79A).w
00004E5A 0240 001F                  		andi.w	#$1F,d0
00004E5E E548                       		lsl.w	#2,d0
00004E60 41F9 0000 0000             		lea	(byte_4A3C).l,a0
00004E66 D0C0                       		adda.w	d0,a0
00004E68 1018                       		move.b	(a0)+,d0
00004E6A 6A00                       		bpl.s	loc_4992
00004E6C 303C 01FF                  		move.w	#$1FF,d0
00004E70                            
00004E70                            loc_4992:
00004E70 31C0 F79C                  		move.w	d0,($FFFFF79C).w
00004E74 7000                       		moveq	#0,d0
00004E76 1018                       		move.b	(a0)+,d0
00004E78 31C0 F7A0                  		move.w	d0,($FFFFF7A0).w
00004E7C 43F9 0000 0000             		lea	(byte_4ABC).l,a1
00004E82 43F1 0000                  		lea	(a1,d0.w),a1
00004E86 303C 8200                  		move.w	#-$7E00,d0
00004E8A 1019                       		move.b	(a1)+,d0
00004E8C 3C80                       		move.w	d0,(a6)
00004E8E 11D1 F616                  		move.b	(a1),($FFFFF616).w
00004E92 303C 8400                  		move.w	#-$7C00,d0
00004E96 1018                       		move.b	(a0)+,d0
00004E98 3C80                       		move.w	d0,(a6)
00004E9A 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00004EA4 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00004EAC 7000                       		moveq	#0,d0
00004EAE 1018                       		move.b	(a0)+,d0
00004EB0 6B00                       		bmi.s	loc_49E8
00004EB2 43F9 0000 0000             		lea	(Pal_SSCyc1).l,a1
00004EB8 D2C0                       		adda.w	d0,a1
00004EBA 45F8 FB4E                  		lea	($FFFFFB4E).w,a2
00004EBE 24D9                       		move.l	(a1)+,(a2)+
00004EC0 24D9                       		move.l	(a1)+,(a2)+
00004EC2 24D9                       		move.l	(a1)+,(a2)+
00004EC4                            
00004EC4                            locret_49E6:
00004EC4 4E75                       		rts	
00004EC6                            ; ===========================================================================
00004EC6                            
00004EC6                            loc_49E8:				; XREF: PalCycle_SS
00004EC6 3238 F79E                  		move.w	($FFFFF79E).w,d1
00004ECA 0C40 008A                  		cmpi.w	#$8A,d0
00004ECE 6500                       		bcs.s	loc_49F4
00004ED0 5241                       		addq.w	#1,d1
00004ED2                            
00004ED2                            loc_49F4:
00004ED2 C2FC 002A                  		mulu.w	#$2A,d1
00004ED6 43F9 0000 0000             		lea	(Pal_SSCyc2).l,a1
00004EDC D2C1                       		adda.w	d1,a1
00004EDE 0240 007F                  		andi.w	#$7F,d0
00004EE2 0880 0000                  		bclr	#0,d0
00004EE6 6700                       		beq.s	loc_4A18
00004EE8 45F8 FB6E                  		lea	($FFFFFB6E).w,a2
00004EEC 24D1                       		move.l	(a1),(a2)+
00004EEE 24E9 0004                  		move.l	4(a1),(a2)+
00004EF2 24E9 0008                  		move.l	8(a1),(a2)+
00004EF6                            
00004EF6                            loc_4A18:
00004EF6 D2FC 000C                  		adda.w	#$C,a1
00004EFA 45F8 FB5A                  		lea	($FFFFFB5A).w,a2
00004EFE 0C40 000A                  		cmpi.w	#$A,d0
00004F02 6500                       		bcs.s	loc_4A2E
00004F04 0440 000A                  		subi.w	#$A,d0
00004F08 45F8 FB7A                  		lea	($FFFFFB7A).w,a2
00004F0C                            
00004F0C                            loc_4A2E:
00004F0C 3200                       		move.w	d0,d1
00004F0E D040                       		add.w	d0,d0
00004F10 D041                       		add.w	d1,d0
00004F12 D2C0                       		adda.w	d0,a1
00004F14 24D9                       		move.l	(a1)+,(a2)+
00004F16 34D9                       		move.w	(a1)+,(a2)+
00004F18 4E75                       		rts	
00004F1A                            ; End of function PalCycle_SS
00004F1A                            
00004F1A                            ; ===========================================================================
00004F1A 0300 0792 0300 0790 0300+  byte_4A3C:	dc.b 3,	0, 7, $92, 3, 0, 7, $90, 3, 0, 7, $8E, 3, 0, 7,	$8C
00004F2A                            					; XREF: PalCycle_SS
00004F2A 0300 078B 0300 0780 0300+  		dc.b 3,	0, 7, $8B, 3, 0, 7, $80, 3, 0, 7, $82, 3, 0, 7,	$84
00004F3A 0300 0786 0300 0788 0708+  		dc.b 3,	0, 7, $86, 3, 0, 7, $88, 7, 8, 7, 0, 7,	$A, 7, $C
00004F4A FF0C 0718 FF0C 0718 070A+  		dc.b $FF, $C, 7, $18, $FF, $C, 7, $18, 7, $A, 7, $C, 7,	8, 7, 0
00004F5A 0300 0688 0300 0686 0300+  		dc.b 3,	0, 6, $88, 3, 0, 6, $86, 3, 0, 6, $84, 3, 0, 6,	$82
00004F6A 0300 0681 0300 068A 0300+  		dc.b 3,	0, 6, $81, 3, 0, 6, $8A, 3, 0, 6, $8C, 3, 0, 6,	$8E
00004F7A 0300 0690 0300 0692 0702+  		dc.b 3,	0, 6, $90, 3, 0, 6, $92, 7, 2, 6, $24, 7, 4, 6,	$30
00004F8A FF06 063C FF06 063C 0704+  		dc.b $FF, 6, 6,	$3C, $FF, 6, 6,	$3C, 7,	4, 6, $30, 7, 2, 6, $24
00004F9A                            		even
00004F9A 1001 1800 1801 2000 2001+  byte_4ABC:	dc.b $10, 1, $18, 0, $18, 1, $20, 0, $20, 1, $28, 0, $28, 1
00004FA8                            					; XREF: PalCycle_SS
00004FA8                            		even
00004FA8                            
00004FA8                            Pal_SSCyc1:	incbin	pallet\c_ss_1.bin
00004FF0                            		even
00004FF0                            Pal_SSCyc2:	incbin	pallet\c_ss_2.bin
000050C2                            		even
000050C2                            
000050C2                            ; ---------------------------------------------------------------------------
000050C2                            ; Subroutine to	make the special stage background animated
000050C2                            ; ---------------------------------------------------------------------------
000050C2                            
000050C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000050C2                            
000050C2                            
000050C2                            SS_BGAnimate:				; XREF: SpecialStage
000050C2 3038 F7A0                  		move.w	($FFFFF7A0).w,d0
000050C6 6600                       		bne.s	loc_4BF6
000050C8 31FC 0000 F70C             		move.w	#0,($FFFFF70C).w
000050CE 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000050D4                            
000050D4                            loc_4BF6:
000050D4 0C40 0008                  		cmpi.w	#8,d0
000050D8 6400                       		bcc.s	loc_4C4E
000050DA 0C40 0006                  		cmpi.w	#6,d0
000050DE 6600                       		bne.s	loc_4C10
000050E0 5278 F718                  		addq.w	#1,($FFFFF718).w
000050E4 5278 F70C                  		addq.w	#1,($FFFFF70C).w
000050E8 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000050EE                            
000050EE                            loc_4C10:
000050EE 7000                       		moveq	#0,d0
000050F0 3038 F708                  		move.w	($FFFFF708).w,d0
000050F4 4440                       		neg.w	d0
000050F6 4840                       		swap	d0
000050F8 43F9 0000 0000             		lea	(byte_4CCC).l,a1
000050FE 47F8 AA00                  		lea	($FFFFAA00).w,a3
00005102 7609                       		moveq	#9,d3
00005104                            
00005104                            loc_4C26:
00005104 302B 0002                  		move.w	2(a3),d0
00005108 6100 DBBA                  		bsr.w	CalcSine
0000510C 7400                       		moveq	#0,d2
0000510E 1419                       		move.b	(a1)+,d2
00005110 C1C2                       		muls.w	d2,d0
00005112 E080                       		asr.l	#8,d0
00005114 36C0                       		move.w	d0,(a3)+
00005116 1419                       		move.b	(a1)+,d2
00005118 4882                       		ext.w	d2
0000511A D55B                       		add.w	d2,(a3)+
0000511C 51CB FFE6                  		dbf	d3,loc_4C26
00005120 47F8 AA00                  		lea	($FFFFAA00).w,a3
00005124 45F9 0000 0000             		lea	(byte_4CB8).l,a2
0000512A 6000                       		bra.s	loc_4C7E
0000512C                            ; ===========================================================================
0000512C                            
0000512C                            loc_4C4E:				; XREF: SS_BGAnimate
0000512C 0C40 000C                  		cmpi.w	#$C,d0
00005130 6600                       		bne.s	loc_4C74
00005132 5378 F718                  		subq.w	#1,($FFFFF718).w
00005136 47F8 AB00                  		lea	($FFFFAB00).w,a3
0000513A 243C 0001 8000             		move.l	#$18000,d2
00005140 7206                       		moveq	#6,d1
00005142                            
00005142                            loc_4C64:
00005142 2013                       		move.l	(a3),d0
00005144 9082                       		sub.l	d2,d0
00005146 26C0                       		move.l	d0,(a3)+
00005148 0482 0000 2000             		subi.l	#$2000,d2
0000514E 51C9 FFF2                  		dbf	d1,loc_4C64
00005152                            
00005152                            loc_4C74:
00005152 47F8 AB00                  		lea	($FFFFAB00).w,a3
00005156 45F9 0000 0000             		lea	(byte_4CC4).l,a2
0000515C                            
0000515C                            loc_4C7E:
0000515C 43F8 CC00                  		lea	($FFFFCC00).w,a1
00005160 3038 F718                  		move.w	($FFFFF718).w,d0
00005164 4440                       		neg.w	d0
00005166 4840                       		swap	d0
00005168 7600                       		moveq	#0,d3
0000516A 161A                       		move.b	(a2)+,d3
0000516C 3438 F70C                  		move.w	($FFFFF70C).w,d2
00005170 4442                       		neg.w	d2
00005172 0242 00FF                  		andi.w	#$FF,d2
00005176 E54A                       		lsl.w	#2,d2
00005178                            
00005178                            loc_4C9A:
00005178 301B                       		move.w	(a3)+,d0
0000517A 544B                       		addq.w	#2,a3
0000517C 7200                       		moveq	#0,d1
0000517E 121A                       		move.b	(a2)+,d1
00005180 5341                       		subq.w	#1,d1
00005182                            
00005182                            loc_4CA4:
00005182 2380 2000                  		move.l	d0,(a1,d2.w)
00005186 5842                       		addq.w	#4,d2
00005188 0242 03FC                  		andi.w	#$3FC,d2
0000518C 51C9 FFF4                  		dbf	d1,loc_4CA4
00005190 51CB FFE6                  		dbf	d3,loc_4C9A
00005194 4E75                       		rts	
00005196                            ; End of function SS_BGAnimate
00005196                            
00005196                            ; ===========================================================================
00005196 0928 1810 2818 1030 1808+  byte_4CB8:	dc.b 9,	$28, $18, $10, $28, $18, $10, $30, $18,	8, $10,	0
000051A2                            		even
000051A2 0630 3030 2818 1818        byte_4CC4:	dc.b 6,	$30, $30, $30, $28, $18, $18, $18
000051AA                            		even
000051AA 0802 04FF 0203 08FF 0402+  byte_4CCC:	dc.b 8,	2, 4, $FF, 2, 3, 8, $FF, 4, 2, 2, 3, 8,	$FD, 4,	2, 2, 3, 2, $FF
000051BE                            		even
000051BE                            					; XREF: SS_BGAnimate
000051BE                            ; ===========================================================================
000051BE                            
000051BE                            ; ---------------------------------------------------------------------------
000051BE                            ; Continue screen
000051BE                            ; ---------------------------------------------------------------------------
000051BE                            
000051BE                            ContinueScreen:				; XREF: GameModeArray
000051BE 6100 CE7C                  		bsr.w	Pal_FadeFrom
000051C2 46FC 2700                  		move	#$2700,sr
000051C6 3038 F60C                  		move.w	($FFFFF60C).w,d0
000051CA 0200 00BF                  		andi.b	#$BF,d0
000051CE 33C0 00C0 0004             		move.w	d0,($C00004).l
000051D4 4DF9 00C0 0004             		lea	($C00004).l,a6
000051DA 3CBC 8004                  		move.w	#$8004,(a6)
000051DE 3CBC 8700                  		move.w	#$8700,(a6)
000051E2 6100 C304                  		bsr.w	ClearScreen
000051E6 43F8 D000                  		lea	($FFFFD000).w,a1
000051EA 7000                       		moveq	#0,d0
000051EC 323C 07FF                  		move.w	#$7FF,d1
000051F0                            
000051F0                            Cont_ClrObjRam:
000051F0 22C0                       		move.l	d0,(a1)+
000051F2 51C9 FFFC                  		dbf	d1,Cont_ClrObjRam ; clear object RAM
000051F6                            
000051F6 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00005200 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00005206 6100 C45C                  		bsr.w	NemDec
0000520A 23FC 6000 0002 00C0 0004   		move.l	#$60000002,($C00004).l
00005214 41F9 0000 0000             		lea	(Nem_ContSonic).l,a0 ; load Sonic patterns
0000521A 6100 C448                  		bsr.w	NemDec
0000521E 23FC 6A20 0002 00C0 0004   		move.l	#$6A200002,($C00004).l
00005228 41F9 0000 0000             		lea	(Nem_MiniSonic).l,a0 ; load continue screen patterns
0000522E 6100 C434                  		bsr.w	NemDec
00005232 720A                       		moveq	#10,d1
00005234 4EB9 0000 0000             		jsr	ContScrCounter	; run countdown	(start from 10)
0000523A 7012                       		moveq	#$12,d0
0000523C 6100 D0A8                  		bsr.w	PalLoad1	; load continue	screen pallet
00005240 103C 0090                  		move.b	#$90,d0
00005244 6100 C374                  		bsr.w	PlaySound	; play continue	music
00005248 31FC 0293 F614             		move.w	#659,($FFFFF614).w ; set time delay to 11 seconds
0000524E 42B8 F700                  		clr.l	($FFFFF700).w
00005252 21FC 0100 0000 F704        		move.l	#$1000000,($FFFFF704).w
0000525A 11FC 0081 D000             		move.b	#$81,($FFFFD000).w ; load Sonic	object
00005260 11FC 0080 D040             		move.b	#$80,($FFFFD040).w ; load continue screen objects
00005266 11FC 0080 D080             		move.b	#$80,($FFFFD080).w
0000526C 11FC 0003 D098             		move.b	#3,($FFFFD098).w
00005272 11FC 0004 D09A             		move.b	#4,($FFFFD09A).w
00005278 11FC 0080 D0C0             		move.b	#$80,($FFFFD0C0).w
0000527E 11FC 0004 D0E4             		move.b	#4,($FFFFD0E4).w
00005284 4EB9 0000 0000             		jsr	ObjectsLoad
0000528A 4EB9 0000 0000             		jsr	BuildSprites
00005290 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005294 0000 0040                  		ori.b	#$40,d0
00005298 33C0 00C0 0004             		move.w	d0,($C00004).l
0000529E 6100 CCF6                  		bsr.w	Pal_FadeTo
000052A2                            
000052A2                            ; ---------------------------------------------------------------------------
000052A2                            ; Continue screen main loop
000052A2                            ; ---------------------------------------------------------------------------
000052A2                            
000052A2                            Cont_MainLoop:
000052A2 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
000052A8 6100 D9E8                  		bsr.w	DelayProgram
000052AC 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000052B2 6400                       		bcc.s	loc_4DF2
000052B4 46FC 2700                  		move	#$2700,sr
000052B8 3238 F614                  		move.w	($FFFFF614).w,d1
000052BC 82FC 003C                  		divu.w	#$3C,d1
000052C0 0281 0000 000F             		andi.l	#$F,d1
000052C6 4EB9 0000 0000             		jsr	ContScrCounter
000052CC 46FC 2300                  		move	#$2300,sr
000052D0                            
000052D0                            loc_4DF2:
000052D0 4EB9 0000 0000             		jsr	ObjectsLoad
000052D6 4EB9 0000 0000             		jsr	BuildSprites
000052DC 0C78 0180 D008             		cmpi.w	#$180,($FFFFD008).w ; has Sonic	run off	screen?
000052E2 6400                       		bcc.s	Cont_GotoLevel	; if yes, branch
000052E4 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000052EA 64B6                       		bcc.s	Cont_MainLoop
000052EC 4A78 F614                  		tst.w	($FFFFF614).w
000052F0 6600 FFB0                  		bne.w	Cont_MainLoop
000052F4 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
000052FA 4E75                       		rts	
000052FC                            ; ===========================================================================
000052FC                            
000052FC                            Cont_GotoLevel:				; XREF: Cont_MainLoop
000052FC 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00005302 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
00005308 7000                       		moveq	#0,d0
0000530A 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
0000530E 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00005312 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00005316 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost count
0000531A 5338 FE18                  		subq.b	#1,($FFFFFE18).w ; subtract 1 from continues
0000531E 4E75                       		rts	
00005320                            ; ===========================================================================
00005320                            
00005320                            ; ---------------------------------------------------------------------------
00005320                            ; Object 80 - Continue screen elements
00005320                            ; ---------------------------------------------------------------------------
00005320                            
00005320                            Obj80:					; XREF: Obj_Index
00005320 7000                       		moveq	#0,d0
00005322 1028 0024                  		move.b	$24(a0),d0
00005326 323B 0000                  		move.w	Obj80_Index(pc,d0.w),d1
0000532A 4EFB 1000                  		jmp	Obj80_Index(pc,d1.w)
0000532E                            ; ===========================================================================
0000532E 0000                       Obj80_Index:	dc.w Obj80_Main-Obj80_Index
00005330 0000                       		dc.w Obj80_Display-Obj80_Index
00005332 0000                       		dc.w Obj80_MakeMiniSonic-Obj80_Index
00005334 0000                       		dc.w Obj80_ChkType-Obj80_Index
00005336                            ; ===========================================================================
00005336                            
00005336                            Obj80_Main:				; XREF: Obj80_Index
00005336 5428 0024                  		addq.b	#2,$24(a0)
0000533A 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
00005342 317C 8500 0002             		move.w	#$8500,2(a0)
00005348 117C 0000 0001             		move.b	#0,1(a0)
0000534E 117C 003C 0019             		move.b	#$3C,$19(a0)
00005354 317C 0120 0008             		move.w	#$120,8(a0)
0000535A 317C 00C0 000A             		move.w	#$C0,$A(a0)
00005360 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; clear rings
00005366                            
00005366                            Obj80_Display:				; XREF: Obj80_Index
00005366 4EF9 0000 0000             		jmp	DisplaySprite
0000536C                            ; ===========================================================================
0000536C                            Obj80_MiniSonicPos:
0000536C 0116 012A 0102 013E 00EE+  		dc.w $116, $12A, $102, $13E, $EE, $152, $DA, $166, $C6
0000537E 017A 00B2 018E 009E 01A2+  		dc.w $17A, $B2,	$18E, $9E, $1A2, $8A
0000538A                            ; ===========================================================================
0000538A                            
0000538A                            Obj80_MakeMiniSonic:			; XREF: Obj80_Index
0000538A 2248                       		movea.l	a0,a1
0000538C 45F9 0000 536C             		lea	(Obj80_MiniSonicPos).l,a2
00005392 7200                       		moveq	#0,d1
00005394 1238 FE18                  		move.b	($FFFFFE18).w,d1
00005398 5501                       		subq.b	#2,d1
0000539A 6400                       		bcc.s	loc_4EC4
0000539C 4EF9 0000 0000             		jmp	DeleteObject
000053A2                            ; ===========================================================================
000053A2                            
000053A2                            loc_4EC4:				; XREF: Obj80_MakeMiniSonic
000053A2 7601                       		moveq	#1,d3
000053A4 0C01 000E                  		cmpi.b	#$E,d1
000053A8 6500                       		bcs.s	loc_4ED0
000053AA 7600                       		moveq	#0,d3
000053AC 720E                       		moveq	#$E,d1
000053AE                            
000053AE                            loc_4ED0:
000053AE 1401                       		move.b	d1,d2
000053B0 0202 0001                  		andi.b	#1,d2
000053B4                            
000053B4                            Obj80_MiniSonLoop:
000053B4 12BC 0080                  		move.b	#$80,0(a1)	; load mini Sonic object
000053B8 335A 0008                  		move.w	(a2)+,8(a1)
000053BC 4A02                       		tst.b	d2
000053BE 6700                       		beq.s	loc_4EEA
000053C0 0469 000A 0008             		subi.w	#$A,8(a1)
000053C6                            
000053C6                            loc_4EEA:
000053C6 337C 00D0 000A             		move.w	#$D0,$A(a1)
000053CC 137C 0006 001A             		move.b	#6,$1A(a1)
000053D2 137C 0006 0024             		move.b	#6,$24(a1)
000053D8 237C 0000 0000 0004        		move.l	#Map_obj80,4(a1)
000053E0 337C 8551 0002             		move.w	#$8551,2(a1)
000053E6 137C 0000 0001             		move.b	#0,1(a1)
000053EC 43E9 0040                  		lea	$40(a1),a1
000053F0 51C9 FFC2                  		dbf	d1,Obj80_MiniSonLoop ; repeat for number of continues
000053F4 43E9 FFC0                  		lea	-$40(a1),a1
000053F8 1343 0028                  		move.b	d3,$28(a1)
000053FC                            
000053FC                            Obj80_ChkType:				; XREF: Obj80_Index
000053FC 4A28 0028                  		tst.b	$28(a0)
00005400 6700                       		beq.s	loc_4F40
00005402 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00005408 6500                       		bcs.s	loc_4F40
0000540A 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000540E 0200 0001                  		andi.b	#1,d0
00005412 6600                       		bne.s	loc_4F40
00005414 4A78 D010                  		tst.w	($FFFFD010).w
00005418 6600                       		bne.s	Obj80_Delete
0000541A 4E75                       		rts	
0000541C                            ; ===========================================================================
0000541C                            
0000541C                            loc_4F40:				; XREF: Obj80_ChkType
0000541C 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00005420 0200 000F                  		andi.b	#$F,d0
00005424 6600                       		bne.s	Obj80_Display2
00005426 0868 0000 001A             		bchg	#0,$1A(a0)
0000542C                            
0000542C                            Obj80_Display2:
0000542C 4EF9 0000 0000             		jmp	DisplaySprite
00005432                            ; ===========================================================================
00005432                            
00005432                            Obj80_Delete:				; XREF: Obj80_ChkType
00005432 4EF9 0000 0000             		jmp	DeleteObject
00005438                            ; ===========================================================================
00005438                            
00005438                            ; ---------------------------------------------------------------------------
00005438                            ; Object 81 - Sonic on the continue screen
00005438                            ; ---------------------------------------------------------------------------
00005438                            
00005438                            Obj81:					; XREF: Obj_Index
00005438 7000                       		moveq	#0,d0
0000543A 1028 0024                  		move.b	$24(a0),d0
0000543E 323B 0000                  		move.w	Obj81_Index(pc,d0.w),d1
00005442 4EBB 1000                  		jsr	Obj81_Index(pc,d1.w)
00005446 4EF9 0000 0000             		jmp	DisplaySprite
0000544C                            ; ===========================================================================
0000544C 0000                       Obj81_Index:	dc.w Obj81_Main-Obj81_Index
0000544E 0000                       		dc.w Obj81_ChkLand-Obj81_Index
00005450 0000                       		dc.w Obj81_Animate-Obj81_Index
00005452 0000                       		dc.w Obj81_Run-Obj81_Index
00005454                            ; ===========================================================================
00005454                            
00005454                            Obj81_Main:				; XREF: Obj81_Index
00005454 5428 0024                  		addq.b	#2,$24(a0)
00005458 317C 00A0 0008             		move.w	#$A0,8(a0)
0000545E 317C 00C0 000C             		move.w	#$C0,$C(a0)
00005464 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
0000546C 317C 0780 0002             		move.w	#$780,2(a0)
00005472 117C 0004 0001             		move.b	#4,1(a0)
00005478 117C 0002 0018             		move.b	#2,$18(a0)
0000547E 117C 001D 001C             		move.b	#$1D,$1C(a0)	; use "floating" animation
00005484 317C 0400 0012             		move.w	#$400,$12(a0)	; make Sonic fall from above
0000548A                            
0000548A                            Obj81_ChkLand:				; XREF: Obj81_Index
0000548A 0C68 01A0 000C             		cmpi.w	#$1A0,$C(a0)	; has Sonic landed yet?
00005490 6600                       		bne.s	Obj81_ShowFall	; if not, branch
00005492 5428 0024                  		addq.b	#2,$24(a0)
00005496 4268 0012                  		clr.w	$12(a0)		; stop Sonic falling
0000549A 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
000054A2 317C 8500 0002             		move.w	#$8500,2(a0)
000054A8 117C 0000 001C             		move.b	#0,$1C(a0)
000054AE 6000                       		bra.s	Obj81_Animate
000054B0                            ; ===========================================================================
000054B0                            
000054B0                            Obj81_ShowFall:				; XREF: Obj81_ChkLand
000054B0 4EB9 0000 0000             		jsr	SpeedToPos
000054B6 4EB9 0000 0000             		jsr	Sonic_Animate
000054BC 4EF9 0000 0000             		jmp	LoadSonicDynPLC
000054C2                            ; ===========================================================================
000054C2                            
000054C2                            Obj81_Animate:				; XREF: Obj81_Index
000054C2 4A38 F605                  		tst.b	($FFFFF605).w	; is any button	pressed?
000054C6 6B00                       		bmi.s	Obj81_GetUp	; if yes, branch
000054C8 43F9 0000 0000             		lea	(Ani_obj81).l,a1
000054CE 4EF9 0000 0000             		jmp	AnimateSprite
000054D4                            ; ===========================================================================
000054D4                            
000054D4                            Obj81_GetUp:				; XREF: Obj81_Animate
000054D4 5428 0024                  		addq.b	#2,$24(a0)
000054D8 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
000054E0 317C 0780 0002             		move.w	#$780,2(a0)
000054E6 117C 001E 001C             		move.b	#$1E,$1C(a0)	; use "getting up" animation
000054EC 4268 0014                  		clr.w	$14(a0)
000054F0 5168 000C                  		subq.w	#8,$C(a0)
000054F4 103C 00E0                  		move.b	#$E0,d0
000054F8 6100 C0C6                  		bsr.w	PlaySound_Special ; fade out music
000054FC                            
000054FC                            Obj81_Run:				; XREF: Obj81_Index
000054FC 0C68 0800 0014             		cmpi.w	#$800,$14(a0)	; check	Sonic's "run speed" (not moving)
00005502 6600                       		bne.s	Obj81_AddSpeed	; if too low, branch
00005504 317C 1000 0010             		move.w	#$1000,$10(a0)	; move Sonic to	the right
0000550A 6000                       		bra.s	Obj81_ShowRun
0000550C                            ; ===========================================================================
0000550C                            
0000550C                            Obj81_AddSpeed:				; XREF: Obj81_Run
0000550C 0668 0020 0014             		addi.w	#$20,$14(a0)	; increase "run	speed"
00005512                            
00005512                            Obj81_ShowRun:				; XREF: Obj81_Run
00005512 4EB9 0000 0000             		jsr	SpeedToPos
00005518 4EB9 0000 0000             		jsr	Sonic_Animate
0000551E 4EF9 0000 0000             		jmp	LoadSonicDynPLC
00005524                            ; ===========================================================================
00005524                            Ani_obj81:
00005524                            	include "_anim\obj81.asm"
00005524                            ; ---------------------------------------------------------------------------
00005524                            ; Animation script - Sonic on the continue screen
00005524                            ; ---------------------------------------------------------------------------
00005524 0000                       		dc.w byte_504A-Ani_obj81
00005526 0401 0101 0102 0202 0303+  byte_504A:	dc.b 4,	1, 1, 1, 1, 2, 2, 2, 3,	3, $FF
00005532 00                         		even
00005532 00                         		even
00005532                            
00005532                            ; ---------------------------------------------------------------------------
00005532                            ; Sprite mappings - Continue screen
00005532                            ; ---------------------------------------------------------------------------
00005532                            Map_obj80:
00005532                            	include "_maps\obj80.asm"
00005532                            ; ---------------------------------------------------------------------------
00005532                            ; Sprite mappings - Continue screen
00005532                            ; ---------------------------------------------------------------------------
00005532 0000 0000                  		dc.w byte_5066-Map_obj80, byte_509E-Map_obj80
00005536 0000 0000                  		dc.w byte_50AE-Map_obj80, byte_50BE-Map_obj80
0000553A 0000 0000                  		dc.w byte_50CE-Map_obj80, byte_50D9-Map_obj80
0000553E 0000 0000                  		dc.w byte_50D9-Map_obj80, byte_50DF-Map_obj80
00005542 0B                         byte_5066:	dc.b $B
00005543 F805 0088 C4               		dc.b $F8, 5, 0,	$88, $C4 ; "CONTINUE", stars and countdown
00005548 F805 00B2 D4               		dc.b $F8, 5, 0,	$B2, $D4
0000554D F805 00AE E4               		dc.b $F8, 5, 0,	$AE, $E4
00005552 F805 00C2 F4               		dc.b $F8, 5, 0,	$C2, $F4
00005557 F801 00A0 04               		dc.b $F8, 1, 0,	$A0, 4
0000555C F805 00AE 0C               		dc.b $F8, 5, 0,	$AE, $C
00005561 F805 00C6 1C               		dc.b $F8, 5, 0,	$C6, $1C
00005566 F805 0090 2C               		dc.b $F8, 5, 0,	$90, $2C
0000556B 3805 2021 E8               		dc.b $38, 5, $20, $21, $E8
00005570 3805 2021 08               		dc.b $38, 5, $20, $21, 8
00005575 3605 01FC F8               		dc.b $36, 5, 1,	$FC, $F8
0000557A 03                         byte_509E:	dc.b 3
0000557B 0405 0015 FC               		dc.b 4,	5, 0, $15, $FC	; Sonic	on floor
00005580 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
00005585 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
0000558A 03                         byte_50AE:	dc.b 3
0000558B 0405 0019 FC               		dc.b 4,	5, 0, $19, $FC	; Sonic	on floor #2
00005590 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
00005595 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
0000559A 03                         byte_50BE:	dc.b 3
0000559B 0405 001D FC               		dc.b 4,	5, 0, $1D, $FC	; Sonic	on floor #3
000055A0 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
000055A5 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
000055AA 02                         byte_50CE:	dc.b 2
000055AB 6009 2000 E8               		dc.b $60, 9, $20, 0, $E8 ; circle on the floor
000055B0 6009 2800 00               		dc.b $60, 9, $28, 0, 0
000055B5 01                         byte_50D9:	dc.b 1
000055B6 0006 0012 00               		dc.b 0,	6, 0, $12, 0	; mini Sonic
000055BB 01                         byte_50DF:	dc.b 1
000055BC 0006 0018 00               		dc.b 0,	6, 0, $18, 0	; mini Sonic #2
000055C2 00                         		even
000055C2 00                         		even
000055C2                            
000055C2                            ; ===========================================================================
000055C2                            ; ---------------------------------------------------------------------------
000055C2                            ; Ending sequence in Green Hill	Zone
000055C2                            ; ---------------------------------------------------------------------------
000055C2                            
000055C2                            EndingSequence:				; XREF: GameModeArray
000055C2 103C 00E4                  		move.b	#$E4,d0
000055C6 6100 BFF8                  		bsr.w	PlaySound_Special ; stop music
000055CA 6100 CA70                  		bsr.w	Pal_FadeFrom
000055CE 43F8 D000                  		lea	($FFFFD000).w,a1
000055D2 7000                       		moveq	#0,d0
000055D4 323C 07FF                  		move.w	#$7FF,d1
000055D8                            
000055D8                            End_ClrObjRam:
000055D8 22C0                       		move.l	d0,(a1)+
000055DA 51C9 FFFC                  		dbf	d1,End_ClrObjRam ; clear object	RAM
000055DE                            
000055DE 43F8 F628                  		lea	($FFFFF628).w,a1
000055E2 7000                       		moveq	#0,d0
000055E4 323C 0015                  		move.w	#$15,d1
000055E8                            
000055E8                            End_ClrRam:
000055E8 22C0                       		move.l	d0,(a1)+
000055EA 51C9 FFFC                  		dbf	d1,End_ClrRam	; clear	variables
000055EE                            
000055EE 43F8 F700                  		lea	($FFFFF700).w,a1
000055F2 7000                       		moveq	#0,d0
000055F4 323C 003F                  		move.w	#$3F,d1
000055F8                            
000055F8                            End_ClrRam2:
000055F8 22C0                       		move.l	d0,(a1)+
000055FA 51C9 FFFC                  		dbf	d1,End_ClrRam2	; clear	variables
000055FE                            
000055FE 43F8 FE60                  		lea	($FFFFFE60).w,a1
00005602 7000                       		moveq	#0,d0
00005604 323C 0047                  		move.w	#$47,d1
00005608                            
00005608                            End_ClrRam3:
00005608 22C0                       		move.l	d0,(a1)+
0000560A 51C9 FFFC                  		dbf	d1,End_ClrRam3	; clear	variables
0000560E                            
0000560E 46FC 2700                  		move	#$2700,sr
00005612 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005616 0200 00BF                  		andi.b	#$BF,d0
0000561A 33C0 00C0 0004             		move.w	d0,($C00004).l
00005620 6100 BEC6                  		bsr.w	ClearScreen
00005624 4DF9 00C0 0004             		lea	($C00004).l,a6
0000562A 3CBC 8B03                  		move.w	#$8B03,(a6)
0000562E 3CBC 8230                  		move.w	#$8230,(a6)
00005632 3CBC 8407                  		move.w	#$8407,(a6)
00005636 3CBC 857C                  		move.w	#$857C,(a6)
0000563A 3CBC 9001                  		move.w	#$9001,(a6)
0000563E 3CBC 8004                  		move.w	#$8004,(a6)
00005642 3CBC 8720                  		move.w	#$8720,(a6)
00005646 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
0000564C 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
00005650 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00005656 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	number to 0600 (extra flowers)
0000565C 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005662 6700                       		beq.s	End_LoadData	; if yes, branch
00005664 31FC 0601 FE10             		move.w	#$601,($FFFFFE10).w ; set level	number to 0601 (no flowers)
0000566A                            
0000566A                            End_LoadData:
0000566A 701C                       		moveq	#$1C,d0
0000566C 6100 C2A2                  		bsr.w	RunPLC_ROM	; load ending sequence patterns
00005670 4EB9 0000 0000             		jsr	Hud_Base
00005676 6100 0000                  		bsr.w	LevelSizeLoad
0000567A 6100 0000                  		bsr.w	DeformBgLayer
0000567E 08F8 0002 F754             		bset	#2,($FFFFF754).w
00005684 6100 0000                  		bsr.w	MainLoadBlockLoad
00005688 6100 0000                  		bsr.w	LoadTilesFromStart
0000568C 21FC 0000 0000 F796        		move.l	#Col_GHZ,($FFFFF796).w ; load collision	index
00005694 46FC 2300                  		move	#$2300,sr
00005698 41F9 0000 0000             		lea	(Kos_EndFlowers).l,a0 ;	load extra flower patterns
0000569E 43F8 9400                  		lea	($FFFF9400).w,a1 ; RAM address to buffer the patterns
000056A2 6100 C41C                  		bsr.w	KosDec
000056A6 7003                       		moveq	#3,d0
000056A8 6100 CC3C                  		bsr.w	PalLoad1	; load Sonic's pallet
000056AC 303C 008B                  		move.w	#$8B,d0
000056B0 6100 BF08                  		bsr.w	PlaySound	; play ending sequence music
000056B4 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
000056BA 6700                       		beq.s	End_LoadSonic	; if not, branch
000056BC 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
000056C2                            
000056C2                            End_LoadSonic:
000056C2 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
000056C8 08F8 0000 D022             		bset	#0,($FFFFD022).w ; make	Sonic face left
000056CE 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
000056D4 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; move Sonic to the	left
000056DA 31FC F800 D014             		move.w	#$F800,($FFFFD014).w ; set Sonic's speed
000056E0 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
000056E6 4EB9 0000 0000             		jsr	ObjPosLoad
000056EC 4EB9 0000 0000             		jsr	ObjectsLoad
000056F2 4EB9 0000 0000             		jsr	BuildSprites
000056F8 7000                       		moveq	#0,d0
000056FA 31C0 FE20                  		move.w	d0,($FFFFFE20).w
000056FE 21C0 FE22                  		move.l	d0,($FFFFFE22).w
00005702 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w
00005706 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w
0000570A 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w
0000570E 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w
00005712 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
00005716 31C0 FE08                  		move.w	d0,($FFFFFE08).w
0000571A 31C0 FE02                  		move.w	d0,($FFFFFE02).w
0000571E 31C0 FE04                  		move.w	d0,($FFFFFE04).w
00005722 6100 EEDA                  		bsr.w	OscillateNumInit
00005726 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w
0000572C 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w
00005732 11FC 0000 FE1E             		move.b	#0,($FFFFFE1E).w
00005738 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
0000573E 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
00005744 6100 D54C                  		bsr.w	DelayProgram
00005748 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000574C 0000 0040                  		ori.b	#$40,d0
00005750 33C0 00C0 0004             		move.w	d0,($C00004).l
00005756 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
0000575C 6100 C838                  		bsr.w	Pal_FadeTo
00005760                            
00005760                            ; ---------------------------------------------------------------------------
00005760                            ; Main ending sequence loop
00005760                            ; ---------------------------------------------------------------------------
00005760                            
00005760                            End_MainLoop:
00005760 6100 BE6A                  		bsr.w	PauseGame
00005764 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
0000576A 6100 D526                  		bsr.w	DelayProgram
0000576E 5278 FE04                  		addq.w	#1,($FFFFFE04).w
00005772 6100 0000                  		bsr.w	End_MoveSonic
00005776 4EB9 0000 0000             		jsr	ObjectsLoad
0000577C 6100 0000                  		bsr.w	DeformBgLayer
00005780 4EB9 0000 0000             		jsr	BuildSprites
00005786 4EB9 0000 0000             		jsr	ObjPosLoad
0000578C 6100 C3D2                  		bsr.w	PalCycle_Load
00005790 6100 EEC2                  		bsr.w	OscillateNumDo
00005794 6100 EF4E                  		bsr.w	ChangeRingFrame
00005798 0C38 0018 F600             		cmpi.b	#$18,($FFFFF600).w ; is	scene number $18 (ending)?
0000579E 6700                       		beq.s	loc_52DA	; if yes, branch
000057A0 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set scene to $1C (credits)
000057A6 103C 0091                  		move.b	#$91,d0
000057AA 6100 BE14                  		bsr.w	PlaySound_Special ; play credits music
000057AE 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w ; set credits index number to 0
000057B4 4E75                       		rts	
000057B6                            ; ===========================================================================
000057B6                            
000057B6                            loc_52DA:
000057B6 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
000057BA 6700 FFA4                  		beq.w	End_MainLoop	; if not, branch
000057BE                            
000057BE 4278 FE02                  		clr.w	($FFFFFE02).w
000057C2 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000057C8 4278 F794                  		clr.w	($FFFFF794).w
000057CC                            
000057CC                            End_AllEmlds:				; XREF: loc_5334
000057CC 6100 BDFE                  		bsr.w	PauseGame
000057D0 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
000057D6 6100 D4BA                  		bsr.w	DelayProgram
000057DA 5278 FE04                  		addq.w	#1,($FFFFFE04).w
000057DE 6100 0000                  		bsr.w	End_MoveSonic
000057E2 4EB9 0000 0000             		jsr	ObjectsLoad
000057E8 6100 0000                  		bsr.w	DeformBgLayer
000057EC 4EB9 0000 0000             		jsr	BuildSprites
000057F2 4EB9 0000 0000             		jsr	ObjPosLoad
000057F8 6100 EE5A                  		bsr.w	OscillateNumDo
000057FC 6100 EEE6                  		bsr.w	ChangeRingFrame
00005800 5378 F794                  		subq.w	#1,($FFFFF794).w
00005804 6A00                       		bpl.s	loc_5334
00005806 31FC 0002 F794             		move.w	#2,($FFFFF794).w
0000580C 6100 C978                  		bsr.w	Pal_ToWhite
00005810                            
00005810                            loc_5334:
00005810 4A78 FE02                  		tst.w	($FFFFFE02).w
00005814 6700 FFB6                  		beq.w	End_AllEmlds
00005818 4278 FE02                  		clr.w	($FFFFFE02).w
0000581C 31FC 2E2F A480             		move.w	#$2E2F,($FFFFA480).w ; modify level layout
00005822 4BF9 00C0 0004             		lea	($C00004).l,a5
00005828 4DF9 00C0 0000             		lea	($C00000).l,a6
0000582E 47F8 F700                  		lea	($FFFFF700).w,a3
00005832 49F8 A400                  		lea	($FFFFA400).w,a4
00005836 343C 4000                  		move.w	#$4000,d2
0000583A 6100 0000                  		bsr.w	LoadTilesFromStart2
0000583E 7013                       		moveq	#$13,d0
00005840 6100 CAA4                  		bsr.w	PalLoad1	; load ending pallet
00005844 6100 C874                  		bsr.w	Pal_MakeWhite
00005848 6000 FF16                  		bra.w	End_MainLoop
0000584C                            
0000584C                            ; ---------------------------------------------------------------------------
0000584C                            ; Subroutine controlling Sonic on the ending sequence
0000584C                            ; ---------------------------------------------------------------------------
0000584C                            
0000584C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000584C                            
0000584C                            
0000584C                            End_MoveSonic:				; XREF: End_MainLoop
0000584C 1038 F7D7                  		move.b	($FFFFF7D7).w,d0
00005850 6600                       		bne.s	End_MoveSonic2
00005852 0C78 0090 D008             		cmpi.w	#$90,($FFFFD008).w ; has Sonic passed $90 on y-axis?
00005858 6400                       		bcc.s	End_MoveSonExit	; if not, branch
0000585A 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
0000585E 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	player's controls
00005864 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; move Sonic to the	right
0000586A 4E75                       		rts	
0000586C                            ; ===========================================================================
0000586C                            
0000586C                            End_MoveSonic2:				; XREF: End_MoveSonic
0000586C 5500                       		subq.b	#2,d0
0000586E 6600                       		bne.s	End_MoveSonic3
00005870 0C78 00A0 D008             		cmpi.w	#$A0,($FFFFD008).w ; has Sonic passed $A0 on y-axis?
00005876 6500                       		bcs.s	End_MoveSonExit	; if not, branch
00005878 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
0000587C 7000                       		moveq	#0,d0
0000587E 11C0 F7CC                  		move.b	d0,($FFFFF7CC).w
00005882 31C0 F602                  		move.w	d0,($FFFFF602).w ; stop	Sonic moving
00005886 31C0 D014                  		move.w	d0,($FFFFD014).w
0000588A 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w
00005890 11FC 0003 D01A             		move.b	#3,($FFFFD01A).w
00005896 31FC 0505 D01C             		move.w	#$505,($FFFFD01C).w ; use "standing" animation
0000589C 11FC 0003 D01E             		move.b	#3,($FFFFD01E).w
000058A2 4E75                       		rts	
000058A4                            ; ===========================================================================
000058A4                            
000058A4                            End_MoveSonic3:				; XREF: End_MoveSonic
000058A4 5500                       		subq.b	#2,d0
000058A6 6600                       		bne.s	End_MoveSonExit
000058A8 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
000058AC 31FC 00A0 D008             		move.w	#$A0,($FFFFD008).w
000058B2 11FC 0087 D000             		move.b	#$87,($FFFFD000).w ; load Sonic	ending sequence	object
000058B8 4278 D024                  		clr.w	($FFFFD024).w
000058BC                            
000058BC                            End_MoveSonExit:
000058BC 4E75                       		rts	
000058BE                            ; End of function End_MoveSonic
000058BE                            
000058BE                            ; ===========================================================================
000058BE                            ; ---------------------------------------------------------------------------
000058BE                            ; Object 87 - Sonic on ending sequence
000058BE                            ; ---------------------------------------------------------------------------
000058BE                            
000058BE                            Obj87:					; XREF: Obj_Index
000058BE 7000                       		moveq	#0,d0
000058C0 1028 0025                  		move.b	$25(a0),d0
000058C4 323B 0000                  		move.w	Obj87_Index(pc,d0.w),d1
000058C8 4EBB 1000                  		jsr	Obj87_Index(pc,d1.w)
000058CC 4EF9 0000 0000             		jmp	DisplaySprite
000058D2                            ; ===========================================================================
000058D2 0000 0000                  Obj87_Index:	dc.w Obj87_Main-Obj87_Index, Obj87_MakeEmlds-Obj87_Index
000058D6 0000 0000                  		dc.w Obj87_Animate-Obj87_Index,	Obj87_LookUp-Obj87_Index
000058DA 0000 0000                  		dc.w Obj87_ClrObjRam-Obj87_Index, Obj87_Animate-Obj87_Index
000058DE 0000 0000                  		dc.w Obj87_MakeLogo-Obj87_Index, Obj87_Animate-Obj87_Index
000058E2 0000 0000                  		dc.w Obj87_Leap-Obj87_Index, Obj87_Animate-Obj87_Index
000058E6                            ; ===========================================================================
000058E6                            
000058E6                            Obj87_Main:				; XREF: Obj87_Index
000058E6 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
000058EC 6700                       		beq.s	Obj87_Main2	; if yes, branch
000058EE 0628 0010 0025             		addi.b	#$10,$25(a0)	; else,	skip emerald sequence
000058F4 317C 00D8 0030             		move.w	#$D8,$30(a0)
000058FA 4E75                       		rts	
000058FC                            ; ===========================================================================
000058FC                            
000058FC                            Obj87_Main2:				; XREF: Obj87_Main
000058FC 5428 0025                  		addq.b	#2,$25(a0)
00005900 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
00005908 317C 03E1 0002             		move.w	#$3E1,2(a0)
0000590E 117C 0004 0001             		move.b	#4,1(a0)
00005914 4228 0022                  		clr.b	$22(a0)
00005918 117C 0002 0018             		move.b	#2,$18(a0)
0000591E 117C 0000 001A             		move.b	#0,$1A(a0)
00005924 317C 0050 0030             		move.w	#$50,$30(a0)	; set duration for Sonic to pause
0000592A                            
0000592A                            Obj87_MakeEmlds:			; XREF: Obj87_Index
0000592A 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
0000592E 6600                       		bne.s	Obj87_Wait
00005930 5428 0025                  		addq.b	#2,$25(a0)
00005934 317C 0001 001C             		move.w	#1,$1C(a0)
0000593A 11FC 0088 D400             		move.b	#$88,($FFFFD400).w ; load chaos	emeralds objects
00005940                            
00005940                            Obj87_Wait:
00005940 4E75                       		rts	
00005942                            ; ===========================================================================
00005942                            
00005942                            Obj87_LookUp:				; XREF: Obj87_Index
00005942 0C79 2000 00FF D43C        		cmpi.w	#$2000,($FFD43C).l
0000594A 6600                       		bne.s	locret_5480
0000594C 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; set level to	restart	(causes	flash)
00005952 317C 005A 0030             		move.w	#$5A,$30(a0)
00005958 5428 0025                  		addq.b	#2,$25(a0)
0000595C                            
0000595C                            locret_5480:
0000595C 4E75                       		rts	
0000595E                            ; ===========================================================================
0000595E                            
0000595E                            Obj87_ClrObjRam:			; XREF: Obj87_Index
0000595E 5368 0030                  		subq.w	#1,$30(a0)
00005962 6600                       		bne.s	Obj87_Wait2
00005964 43F8 D400                  		lea	($FFFFD400).w,a1
00005968 323C 00FF                  		move.w	#$FF,d1
0000596C                            
0000596C                            Obj87_ClrLoop:
0000596C 4299                       		clr.l	(a1)+
0000596E 51C9 FFFC                  		dbf	d1,Obj87_ClrLoop ; clear the object RAM
00005972 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w
00005978 5428 0025                  		addq.b	#2,$25(a0)
0000597C 117C 0001 001C             		move.b	#1,$1C(a0)
00005982 317C 003C 0030             		move.w	#$3C,$30(a0)
00005988                            
00005988                            Obj87_Wait2:
00005988 4E75                       		rts	
0000598A                            ; ===========================================================================
0000598A                            
0000598A                            Obj87_MakeLogo:				; XREF: Obj87_Index
0000598A 5368 0030                  		subq.w	#1,$30(a0)
0000598E 6600                       		bne.s	Obj87_Wait3
00005990 5428 0025                  		addq.b	#2,$25(a0)
00005994 317C 00B4 0030             		move.w	#$B4,$30(a0)
0000599A 117C 0002 001C             		move.b	#2,$1C(a0)
000059A0 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
000059A6                            
000059A6                            Obj87_Wait3:
000059A6 4E75                       		rts	
000059A8                            ; ===========================================================================
000059A8                            
000059A8                            Obj87_Animate:				; XREF: Obj87_Index
000059A8 43F9 0000 0000             		lea	(Ani_obj87).l,a1
000059AE 4EF9 0000 0000             		jmp	AnimateSprite
000059B4                            ; ===========================================================================
000059B4                            
000059B4                            Obj87_Leap:				; XREF: Obj87_Index
000059B4 5368 0030                  		subq.w	#1,$30(a0)
000059B8 6600                       		bne.s	Obj87_Wait4
000059BA 5428 0025                  		addq.b	#2,$25(a0)
000059BE 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
000059C6 317C 03E1 0002             		move.w	#$3E1,2(a0)
000059CC 117C 0004 0001             		move.b	#4,1(a0)
000059D2 4228 0022                  		clr.b	$22(a0)
000059D6 117C 0002 0018             		move.b	#2,$18(a0)
000059DC 117C 0005 001A             		move.b	#5,$1A(a0)
000059E2 117C 0002 001C             		move.b	#2,$1C(a0)	; use "leaping"	animation
000059E8 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
000059EE 60B8                       		bra.s	Obj87_Animate
000059F0                            ; ===========================================================================
000059F0                            
000059F0                            Obj87_Wait4:				; XREF: Obj87_Leap
000059F0 4E75                       		rts	
000059F2                            ; ===========================================================================
000059F2                            Ani_obj87:
000059F2                            	include "_anim\obj87.asm"
000059F2                            ; ---------------------------------------------------------------------------
000059F2                            ; Animation script - Sonic on the ending sequence
000059F2                            ; ---------------------------------------------------------------------------
000059F2 0000                       		dc.w byte_551C-Ani_obj87
000059F4 0000                       		dc.w byte_552A-Ani_obj87
000059F6 0000                       		dc.w byte_5534-Ani_obj87
000059F8 0301 0001 0001 0001 0001+  byte_551C:	dc.b 3,	1, 0, 1, 0, 1, 0, 1, 0,	1, 0, 1, 2, $FA
00005A06 0503 0403 0403 0403 FA00   byte_552A:	dc.b 5,	3, 4, 3, 4, 3, 4, 3, $FA, 0
00005A10 0305 0505 0607 FE01        byte_5534:	dc.b 3,	5, 5, 5, 6, 7, $FE, 1
00005A18                            		even
00005A18                            		even
00005A18                            
00005A18                            ; ===========================================================================
00005A18                            ; ---------------------------------------------------------------------------
00005A18                            ; Object 88 - chaos emeralds on	the ending sequence
00005A18                            ; ---------------------------------------------------------------------------
00005A18                            
00005A18                            Obj88:					; XREF: Obj_Index
00005A18 7000                       		moveq	#0,d0
00005A1A 1028 0024                  		move.b	$24(a0),d0
00005A1E 323B 0000                  		move.w	Obj88_Index(pc,d0.w),d1
00005A22 4EBB 1000                  		jsr	Obj88_Index(pc,d1.w)
00005A26 4EF9 0000 0000             		jmp	DisplaySprite
00005A2C                            ; ===========================================================================
00005A2C 0000                       Obj88_Index:	dc.w Obj88_Main-Obj88_Index
00005A2E 0000                       		dc.w Obj88_Move-Obj88_Index
00005A30                            ; ===========================================================================
00005A30                            
00005A30                            Obj88_Main:				; XREF: Obj88_Index
00005A30 0C38 0002 D01A             		cmpi.b	#2,($FFFFD01A).w
00005A36 6700                       		beq.s	Obj88_Main2
00005A38 588F                       		addq.l	#4,sp
00005A3A 4E75                       		rts	
00005A3C                            ; ===========================================================================
00005A3C                            
00005A3C                            Obj88_Main2:				; XREF: Obj88_Main
00005A3C 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; match X position with Sonic
00005A42 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0) ; match Y position	with Sonic
00005A48 2248                       		movea.l	a0,a1
00005A4A 7600                       		moveq	#0,d3
00005A4C 7401                       		moveq	#1,d2
00005A4E 7205                       		moveq	#5,d1
00005A50                            
00005A50                            Obj88_MainLoop:
00005A50 12BC 0088                  		move.b	#$88,(a1)	; load chaos emerald object
00005A54 5429 0024                  		addq.b	#2,$24(a1)
00005A58 237C 0000 0000 0004        		move.l	#Map_obj88,4(a1)
00005A60 337C 03C5 0002             		move.w	#$3C5,2(a1)
00005A66 137C 0004 0001             		move.b	#4,1(a1)
00005A6C 137C 0001 0018             		move.b	#1,$18(a1)
00005A72 3368 0008 0038             		move.w	8(a0),$38(a1)
00005A78 3368 000C 003A             		move.w	$C(a0),$3A(a1)
00005A7E 1342 001C                  		move.b	d2,$1C(a1)
00005A82 1342 001A                  		move.b	d2,$1A(a1)
00005A86 5202                       		addq.b	#1,d2
00005A88 1343 0026                  		move.b	d3,$26(a1)
00005A8C 0603 002A                  		addi.b	#$2A,d3
00005A90 43E9 0040                  		lea	$40(a1),a1
00005A94 51C9 FFBA                  		dbf	d1,Obj88_MainLoop ; repeat 5 more times
00005A98                            
00005A98                            Obj88_Move:				; XREF: Obj88_Index
00005A98 3028 003E                  		move.w	$3E(a0),d0
00005A9C D168 0026                  		add.w	d0,$26(a0)
00005AA0 1028 0026                  		move.b	$26(a0),d0
00005AA4 4EB9 0000 2CC4             		jsr	(CalcSine).l
00005AAA 7800                       		moveq	#0,d4
00005AAC 1828 003C                  		move.b	$3C(a0),d4
00005AB0 C3C4                       		muls.w	d4,d1
00005AB2 E081                       		asr.l	#8,d1
00005AB4 C1C4                       		muls.w	d4,d0
00005AB6 E080                       		asr.l	#8,d0
00005AB8 D268 0038                  		add.w	$38(a0),d1
00005ABC D068 003A                  		add.w	$3A(a0),d0
00005AC0 3141 0008                  		move.w	d1,8(a0)
00005AC4 3140 000C                  		move.w	d0,$C(a0)
00005AC8 0C68 2000 003C             		cmpi.w	#$2000,$3C(a0)
00005ACE 6700                       		beq.s	loc_55FA
00005AD0 0668 0020 003C             		addi.w	#$20,$3C(a0)
00005AD6                            
00005AD6                            loc_55FA:
00005AD6 0C68 2000 003E             		cmpi.w	#$2000,$3E(a0)
00005ADC 6700                       		beq.s	loc_5608
00005ADE 0668 0020 003E             		addi.w	#$20,$3E(a0)
00005AE4                            
00005AE4                            loc_5608:
00005AE4 0C68 0140 003A             		cmpi.w	#$140,$3A(a0)
00005AEA 6700                       		beq.s	locret_5614
00005AEC 5368 003A                  		subq.w	#1,$3A(a0)
00005AF0                            
00005AF0                            locret_5614:
00005AF0 4E75                       		rts	
00005AF2                            ; ===========================================================================
00005AF2                            ; ---------------------------------------------------------------------------
00005AF2                            ; Object 89 - "SONIC THE HEDGEHOG" text	on the ending sequence
00005AF2                            ; ---------------------------------------------------------------------------
00005AF2                            
00005AF2                            Obj89:					; XREF: Obj_Index
00005AF2 7000                       		moveq	#0,d0
00005AF4 1028 0024                  		move.b	$24(a0),d0
00005AF8 323B 0000                  		move.w	Obj89_Index(pc,d0.w),d1
00005AFC 4EFB 1000                  		jmp	Obj89_Index(pc,d1.w)
00005B00                            ; ===========================================================================
00005B00 0000                       Obj89_Index:	dc.w Obj89_Main-Obj89_Index
00005B02 0000                       		dc.w Obj89_Move-Obj89_Index
00005B04 0000                       		dc.w Obj89_GotoCredits-Obj89_Index
00005B06                            ; ===========================================================================
00005B06                            
00005B06                            Obj89_Main:				; XREF: Obj89_Index
00005B06 5428 0024                  		addq.b	#2,$24(a0)
00005B0A 317C FFE0 0008             		move.w	#-$20,8(a0)	; object starts	outside	the level boundary
00005B10 317C 00D8 000A             		move.w	#$D8,$A(a0)
00005B16 217C 0000 0000 0004        		move.l	#Map_obj89,4(a0)
00005B1E 317C 05C5 0002             		move.w	#$5C5,2(a0)
00005B24 117C 0000 0001             		move.b	#0,1(a0)
00005B2A 117C 0000 0018             		move.b	#0,$18(a0)
00005B30                            
00005B30                            Obj89_Move:				; XREF: Obj89_Index
00005B30 0C68 00C0 0008             		cmpi.w	#$C0,8(a0)	; has object reached $C0?
00005B36 6700                       		beq.s	Obj89_Delay	; if yes, branch
00005B38 0668 0010 0008             		addi.w	#$10,8(a0)	; move object to the right
00005B3E 4EB9 0000 0000             		jsr	DisplaySprite
00005B44                            ; ===========================================================================
00005B44                            
00005B44                            Obj89_Delay:				; XREF: Obj89_Move
00005B44 5428 0024                  		addq.b	#2,$24(a0)
00005B48 317C 0078 0030             		move.w	#120,$30(a0)	; set duration for delay (2 seconds)
00005B4E                            
00005B4E                            Obj89_GotoCredits:			; XREF: Obj89_Index
00005B4E 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
00005B52 6A00                       		bpl.s	Obj89_Display
00005B54 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; exit to credits
00005B5A                            
00005B5A                            Obj89_Display:
00005B5A 4EB9 0000 0000             		jsr	DisplaySprite
00005B60                            ; ===========================================================================
00005B60                            ; ---------------------------------------------------------------------------
00005B60                            ; Sprite mappings - Sonic on the ending	sequence
00005B60                            ; ---------------------------------------------------------------------------
00005B60                            Map_obj87:
00005B60                            	include "_maps\obj87.asm"
00005B60                            ; ---------------------------------------------------------------------------
00005B60                            ; Sprite mappings - Sonic on the ending	sequence
00005B60                            ; ---------------------------------------------------------------------------
00005B60 0000 0000                  		dc.w byte_5690-Map_obj87, byte_569B-Map_obj87
00005B64 0000 0000                  		dc.w byte_56AB-Map_obj87, byte_56B6-Map_obj87
00005B68 0000 0000                  		dc.w byte_56C1-Map_obj87, byte_56CC-Map_obj87
00005B6C 0000 0000                  		dc.w byte_56DC-Map_obj87, byte_5700-Map_obj87
00005B70 02                         byte_5690:	dc.b 2
00005B71 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8	; holding emeralds
00005B76 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
00005B7B 03                         byte_569B:	dc.b 3
00005B7C FC0D 0010 F0               		dc.b $FC, $D, 0, $10, $F0 ; holding emeralds (glowing)
00005B81 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8
00005B86 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
00005B8B 02                         byte_56AB:	dc.b 2
00005B8C EC09 0018 F8               		dc.b $EC, 9, 0,	$18, $F8 ; looking up
00005B91 FC0E 001E F0               		dc.b $FC, $E, 0, $1E, $F0
00005B96 02                         byte_56B6:	dc.b 2
00005B97 EC09 002A F8               		dc.b $EC, 9, 0,	$2A, $F8 ; confused
00005B9C FC0E 0030 F0               		dc.b $FC, $E, 0, $30, $F0
00005BA1 02                         byte_56C1:	dc.b 2
00005BA2 EC09 082A F0               		dc.b $EC, 9, 8,	$2A, $F0 ; confused #2
00005BA7 FC0E 0830 F0               		dc.b $FC, $E, 8, $30, $F0
00005BAC 03                         byte_56CC:	dc.b 3
00005BAD EC06 003C F0               		dc.b $EC, 6, 0,	$3C, $F0 ; leaping
00005BB2 EC06 083C 00               		dc.b $EC, 6, 8,	$3C, 0
00005BB7 040D 0042 F0               		dc.b 4,	$D, 0, $42, $F0
00005BBC 07                         byte_56DC:	dc.b 7
00005BBD B20C 004A F8               		dc.b $B2, $C, 0, $4A, $F8 ; leaping #2
00005BC2 BA0F 004E F0               		dc.b $BA, $F, 0, $4E, $F0
00005BC7 BA05 005E 10               		dc.b $BA, 5, 0,	$5E, $10
00005BCC CA02 0062 10               		dc.b $CA, 2, 0,	$62, $10
00005BD1 DA0C 0065 F0               		dc.b $DA, $C, 0, $65, $F0
00005BD6 E208 0069 F8               		dc.b $E2, 8, 0,	$69, $F8
00005BDB EA05 006C F8               		dc.b $EA, 5, 0,	$6C, $F8
00005BE0 18                         byte_5700:	dc.b $18
00005BE1 800F 0070 F8               		dc.b $80, $F, 0, $70, $F8 ; leaping #3
00005BE6 900B 0080 E0               		dc.b $90, $B, 0, $80, $E0
00005BEB 900B 008C 18               		dc.b $90, $B, 0, $8C, $18
00005BF0 980B 0098 30               		dc.b $98, $B, 0, $98, $30
00005BF5 A00F 00A4 58               		dc.b $A0, $F, 0, $A4, $58
00005BFA 8800 00B4 F0               		dc.b $88, 0, 0,	$B4, $F0
00005BFF 8005 00B5 18               		dc.b $80, 5, 0,	$B5, $18
00005C04 A00F 00B9 F8               		dc.b $A0, $F, 0, $B9, $F8
00005C09 B00B 00C9 E0               		dc.b $B0, $B, 0, $C9, $E0
00005C0E B80F 00D5 38               		dc.b $B8, $F, 0, $D5, $38
00005C13 A805 00E5 48               		dc.b $A8, 5, 0,	$E5, $48
00005C18 C002 00E9 58               		dc.b $C0, 2, 0,	$E9, $58
00005C1D C00F 00EC F8               		dc.b $C0, $F, 0, $EC, $F8
00005C22 B80F 00FC 18               		dc.b $B8, $F, 0, $FC, $18
00005C27 B008 010C 18               		dc.b $B0, 8, 1,	$C, $18
00005C2C D80D 010F 30               		dc.b $D8, $D, 1, $F, $30
00005C31 D808 0117 18               		dc.b $D8, 8, 1,	$17, $18
00005C36 D80F 011A D8               		dc.b $D8, $F, 1, $1A, $D8
00005C3B E00D 012A F8               		dc.b $E0, $D, 1, $2A, $F8
00005C40 E000 0132 28               		dc.b $E0, 0, 1,	$32, $28
00005C45 D004 0133 E0               		dc.b $D0, 4, 1,	$33, $E0
00005C4A E805 0135 C8               		dc.b $E8, 5, 1,	$35, $C8
00005C4F F80C 0139 C8               		dc.b $F8, $C, 1, $39, $C8
00005C54 F006 013D F8               		dc.b $F0, 6, 1,	$3D, $F8
00005C5A 00                         		even
00005C5A 00                         		even
00005C5A                            
00005C5A                            ; ---------------------------------------------------------------------------
00005C5A                            ; Sprite mappings - chaos emeralds on the ending sequence
00005C5A                            ; ---------------------------------------------------------------------------
00005C5A                            Map_obj88:
00005C5A                            	include "_maps\obj88.asm"
00005C5A                            ; ---------------------------------------------------------------------------
00005C5A                            ; Sprite mappings - chaos emeralds on the ending sequence
00005C5A                            ; ---------------------------------------------------------------------------
00005C5A 0000 0000                  		dc.w byte_5788-Map_obj88, byte_578E-Map_obj88
00005C5E 0000 0000                  		dc.w byte_5794-Map_obj88, byte_579A-Map_obj88
00005C62 0000 0000                  		dc.w byte_57A0-Map_obj88, byte_57A6-Map_obj88
00005C66 0000                       		dc.w byte_57AC-Map_obj88
00005C68 01                         byte_5788:	dc.b 1
00005C69 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00005C6E 01                         byte_578E:	dc.b 1
00005C6F F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
00005C74 01                         byte_5794:	dc.b 1
00005C75 F805 4010 F8               		dc.b $F8, 5, $40, $10, $F8
00005C7A 01                         byte_579A:	dc.b 1
00005C7B F805 2018 F8               		dc.b $F8, 5, $20, $18, $F8
00005C80 01                         byte_57A0:	dc.b 1
00005C81 F805 4014 F8               		dc.b $F8, 5, $40, $14, $F8
00005C86 01                         byte_57A6:	dc.b 1
00005C87 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
00005C8C 01                         byte_57AC:	dc.b 1
00005C8D F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
00005C92                            		even
00005C92                            		even
00005C92                            
00005C92                            ; ---------------------------------------------------------------------------
00005C92                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
00005C92                            ; ---------------------------------------------------------------------------
00005C92                            Map_obj89:
00005C92                            	include "_maps\obj89.asm"
00005C92                            ; ---------------------------------------------------------------------------
00005C92                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
00005C92                            ; ---------------------------------------------------------------------------
00005C92 0000                       		dc.w byte_57B4-Map_obj89
00005C94 03                         byte_57B4:	dc.b 3
00005C95 F00F 0000 D0               		dc.b $F0, $F, 0, 0, $D0
00005C9A F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00005C9F F00F 0020 10               		dc.b $F0, $F, 0, $20, $10
00005CA4                            		even
00005CA4                            		even
00005CA4                            
00005CA4                            ; ===========================================================================
00005CA4                            ; ---------------------------------------------------------------------------
00005CA4                            ; Credits ending sequence
00005CA4                            ; ---------------------------------------------------------------------------
00005CA4                            
00005CA4                            Credits:				; XREF: GameModeArray
00005CA4 6100 BB5C                  		bsr.w	ClearPLC
00005CA8 6100 C392                  		bsr.w	Pal_FadeFrom
00005CAC 4DF9 00C0 0004             		lea	($C00004).l,a6
00005CB2 3CBC 8004                  		move.w	#$8004,(a6)
00005CB6 3CBC 8230                  		move.w	#$8230,(a6)
00005CBA 3CBC 8407                  		move.w	#$8407,(a6)
00005CBE 3CBC 9001                  		move.w	#$9001,(a6)
00005CC2 3CBC 9200                  		move.w	#$9200,(a6)
00005CC6 3CBC 8B03                  		move.w	#$8B03,(a6)
00005CCA 3CBC 8720                  		move.w	#$8720,(a6)
00005CCE 4238 F64E                  		clr.b	($FFFFF64E).w
00005CD2 6100 B814                  		bsr.w	ClearScreen
00005CD6 43F8 D000                  		lea	($FFFFD000).w,a1
00005CDA 7000                       		moveq	#0,d0
00005CDC 323C 07FF                  		move.w	#$7FF,d1
00005CE0                            
00005CE0                            Cred_ClrObjRam:
00005CE0 22C0                       		move.l	d0,(a1)+
00005CE2 51C9 FFFC                  		dbf	d1,Cred_ClrObjRam ; clear object RAM
00005CE6                            
00005CE6 23FC 7400 0002 00C0 0004   		move.l	#$74000002,($C00004).l
00005CF0 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load credits alphabet patterns
00005CF6 6100 B96C                  		bsr.w	NemDec
00005CFA 43F8 FB80                  		lea	($FFFFFB80).w,a1
00005CFE 7000                       		moveq	#0,d0
00005D00 323C 001F                  		move.w	#$1F,d1
00005D04                            
00005D04                            Cred_ClrPallet:
00005D04 22C0                       		move.l	d0,(a1)+
00005D06 51C9 FFFC                  		dbf	d1,Cred_ClrPallet ; fill pallet	with black ($0000)
00005D0A                            
00005D0A 7003                       		moveq	#3,d0
00005D0C 6100 C5D8                  		bsr.w	PalLoad1	; load Sonic's pallet
00005D10 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load credits object
00005D16 4EB9 0000 0000             		jsr	ObjectsLoad
00005D1C 4EB9 0000 0000             		jsr	BuildSprites
00005D22 6100 0000                  		bsr.w	EndingDemoLoad
00005D26 7000                       		moveq	#0,d0
00005D28 1038 FE10                  		move.b	($FFFFFE10).w,d0
00005D2C E948                       		lsl.w	#4,d0
00005D2E 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2 ;	load block mappings etc
00005D34 45F2 0000                  		lea	(a2,d0.w),a2
00005D38 7000                       		moveq	#0,d0
00005D3A 1012                       		move.b	(a2),d0
00005D3C 6700                       		beq.s	loc_5862
00005D3E 6100 BA64                  		bsr.w	LoadPLC		; load level patterns
00005D42                            
00005D42                            loc_5862:
00005D42 7001                       		moveq	#1,d0
00005D44 6100 BA5E                  		bsr.w	LoadPLC		; load standard	level patterns
00005D48 31FC 0078 F614             		move.w	#120,($FFFFF614).w ; display a credit for 2 seconds
00005D4E 6100 C246                  		bsr.w	Pal_FadeTo
00005D52                            
00005D52                            Cred_WaitLoop:
00005D52 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00005D58 6100 CF38                  		bsr.w	DelayProgram
00005D5C 6100 BAB2                  		bsr.w	RunPLC_RAM
00005D60 4A78 F614                  		tst.w	($FFFFF614).w	; have 2 seconds elapsed?
00005D64 66EC                       		bne.s	Cred_WaitLoop	; if not, branch
00005D66 4AB8 F680                  		tst.l	($FFFFF680).w	; have level gfx finished decompressing?
00005D6A 66E6                       		bne.s	Cred_WaitLoop	; if not, branch
00005D6C 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	the credits finished?
00005D72 6700 0000                  		beq.w	TryAgainEnd	; if yes, branch
00005D76 4E75                       		rts	
00005D78                            
00005D78                            ; ---------------------------------------------------------------------------
00005D78                            ; Ending sequence demo loading subroutine
00005D78                            ; ---------------------------------------------------------------------------
00005D78                            
00005D78                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005D78                            
00005D78                            
00005D78                            EndingDemoLoad:				; XREF: Credits
00005D78 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00005D7C 0240 000F                  		andi.w	#$F,d0
00005D80 D040                       		add.w	d0,d0
00005D82 303B 0000                  		move.w	EndDemo_Levels(pc,d0.w),d0 ; load level	array
00005D86 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level from level	array
00005D8A 5278 FFF4                  		addq.w	#1,($FFFFFFF4).w
00005D8E 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	credits	finished?
00005D94 6400                       		bcc.s	EndDemo_Exit	; if yes, branch
00005D96 31FC 8001 FFF0             		move.w	#$8001,($FFFFFFF0).w ; force demo mode
00005D9C 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set game mode to 08 (demo)
00005DA2 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
00005DA8 7000                       		moveq	#0,d0
00005DAA 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00005DAE 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00005DB2 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00005DB6 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost counter
00005DBA 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w ; is SLZ demo running?
00005DC0 6600                       		bne.s	EndDemo_Exit	; if not, branch
00005DC2 43F9 0000 0000             		lea	(EndDemo_LampVar).l,a1 ; load lamppost variables
00005DC8 45F8 FE30                  		lea	($FFFFFE30).w,a2
00005DCC 303C 0008                  		move.w	#8,d0
00005DD0                            
00005DD0                            EndDemo_LampLoad:
00005DD0 24D9                       		move.l	(a1)+,(a2)+
00005DD2 51C8 FFFC                  		dbf	d0,EndDemo_LampLoad
00005DD6                            
00005DD6                            EndDemo_Exit:
00005DD6 4E75                       		rts	
00005DD8                            ; End of function EndingDemoLoad
00005DD8                            
00005DD8                            ; ===========================================================================
00005DD8                            ; ---------------------------------------------------------------------------
00005DD8                            ; Levels used in the end sequence demos
00005DD8                            ; ---------------------------------------------------------------------------
00005DD8                            EndDemo_Levels:	incbin	misc\dm_ord2.bin
00005DE8                            
00005DE8                            ; ---------------------------------------------------------------------------
00005DE8                            ; Lamppost variables in the end sequence demo (Star Light Zone)
00005DE8                            ; ---------------------------------------------------------------------------
00005DE8                            EndDemo_LampVar:
00005DE8 0101                       		dc.b 1,	1		; XREF: EndingDemoLoad
00005DEA 0A00 062C 000D             		dc.w $A00, $62C, $D
00005DF0 0000 0000                  		dc.l 0
00005DF4 0000                       		dc.b 0,	0
00005DF6 0800 0957 05CC 04AB 03A6+  		dc.w $800, $957, $5CC, $4AB, $3A6, 0, $28C, 0, 0, $308
00005E0A 0101                       		dc.b 1,	1
00005E0C                            ; ===========================================================================
00005E0C                            ; ---------------------------------------------------------------------------
00005E0C                            ; "TRY AGAIN" and "END"	screens
00005E0C                            ; ---------------------------------------------------------------------------
00005E0C                            
00005E0C                            TryAgainEnd:				; XREF: Credits
00005E0C 6100 B9F4                  		bsr.w	ClearPLC
00005E10 6100 C22A                  		bsr.w	Pal_FadeFrom
00005E14 4DF9 00C0 0004             		lea	($C00004).l,a6
00005E1A 3CBC 8004                  		move.w	#$8004,(a6)
00005E1E 3CBC 8230                  		move.w	#$8230,(a6)
00005E22 3CBC 8407                  		move.w	#$8407,(a6)
00005E26 3CBC 9001                  		move.w	#$9001,(a6)
00005E2A 3CBC 9200                  		move.w	#$9200,(a6)
00005E2E 3CBC 8B03                  		move.w	#$8B03,(a6)
00005E32 3CBC 8720                  		move.w	#$8720,(a6)
00005E36 4238 F64E                  		clr.b	($FFFFF64E).w
00005E3A 6100 B6AC                  		bsr.w	ClearScreen
00005E3E 43F8 D000                  		lea	($FFFFD000).w,a1
00005E42 7000                       		moveq	#0,d0
00005E44 323C 07FF                  		move.w	#$7FF,d1
00005E48                            
00005E48                            TryAg_ClrObjRam:
00005E48 22C0                       		move.l	d0,(a1)+
00005E4A 51C9 FFFC                  		dbf	d1,TryAg_ClrObjRam ; clear object RAM
00005E4E                            
00005E4E 701D                       		moveq	#$1D,d0
00005E50 6100 BABE                  		bsr.w	RunPLC_ROM	; load "TRY AGAIN" or "END" patterns
00005E54 43F8 FB80                  		lea	($FFFFFB80).w,a1
00005E58 7000                       		moveq	#0,d0
00005E5A 323C 001F                  		move.w	#$1F,d1
00005E5E                            
00005E5E                            TryAg_ClrPallet:
00005E5E 22C0                       		move.l	d0,(a1)+
00005E60 51C9 FFFC                  		dbf	d1,TryAg_ClrPallet ; fill pallet with black ($0000)
00005E64                            
00005E64 7013                       		moveq	#$13,d0
00005E66 6100 C47E                  		bsr.w	PalLoad1	; load ending pallet
00005E6A 4278 FBC0                  		clr.w	($FFFFFBC0).w
00005E6E 11FC 008B D080             		move.b	#$8B,($FFFFD080).w ; load Eggman object
00005E74 4EB9 0000 0000             		jsr	ObjectsLoad
00005E7A 4EB9 0000 0000             		jsr	BuildSprites
00005E80 31FC 0708 F614             		move.w	#1800,($FFFFF614).w ; show screen for 30 seconds
00005E86 6100 C10E                  		bsr.w	Pal_FadeTo
00005E8A                            
00005E8A                            ; ---------------------------------------------------------------------------
00005E8A                            ; "TRY AGAIN" and "END"	screen main loop
00005E8A                            ; ---------------------------------------------------------------------------
00005E8A                            TryAg_MainLoop:
00005E8A 6100 B740                  		bsr.w	PauseGame
00005E8E 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00005E94 6100 CDFC                  		bsr.w	DelayProgram
00005E98 4EB9 0000 0000             		jsr	ObjectsLoad
00005E9E 4EB9 0000 0000             		jsr	BuildSprites
00005EA4 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00005EAA 6600                       		bne.s	TryAg_Exit	; if yes, branch
00005EAC 4A78 F614                  		tst.w	($FFFFF614).w	; has 30 seconds elapsed?
00005EB0 6700                       		beq.s	TryAg_Exit	; if yes, branch
00005EB2 0C38 001C F600             		cmpi.b	#$1C,($FFFFF600).w
00005EB8 67D0                       		beq.s	TryAg_MainLoop
00005EBA                            
00005EBA                            TryAg_Exit:
00005EBA 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00005EC0 4E75                       		rts	
00005EC2                            
00005EC2                            ; ===========================================================================
00005EC2                            ; ---------------------------------------------------------------------------
00005EC2                            ; Object 8B - Eggman on "TRY AGAIN" and "END"	screens
00005EC2                            ; ---------------------------------------------------------------------------
00005EC2                            
00005EC2                            Obj8B:					; XREF: Obj_Index
00005EC2 7000                       		moveq	#0,d0
00005EC4 1028 0024                  		move.b	$24(a0),d0
00005EC8 323B 0000                  		move.w	Obj8B_Index(pc,d0.w),d1
00005ECC 4EBB 1000                  		jsr	Obj8B_Index(pc,d1.w)
00005ED0 4EF9 0000 0000             		jmp	DisplaySprite
00005ED6                            ; ===========================================================================
00005ED6 0000                       Obj8B_Index:	dc.w Obj8B_Main-Obj8B_Index
00005ED8 0000                       		dc.w Obj8B_Animate-Obj8B_Index
00005EDA 0000                       		dc.w Obj8B_Juggle-Obj8B_Index
00005EDC 0000                       		dc.w loc_5A8E-Obj8B_Index
00005EDE                            ; ===========================================================================
00005EDE                            
00005EDE                            Obj8B_Main:				; XREF: Obj8B_Index
00005EDE 5428 0024                  		addq.b	#2,$24(a0)
00005EE2 317C 0120 0008             		move.w	#$120,8(a0)
00005EE8 317C 00F4 000A             		move.w	#$F4,$A(a0)
00005EEE 217C 0000 0000 0004        		move.l	#Map_obj8B,4(a0)
00005EF6 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005EFC 117C 0000 0001             		move.b	#0,1(a0)
00005F02 117C 0002 0018             		move.b	#2,$18(a0)
00005F08 117C 0002 001C             		move.b	#2,$1C(a0)	; use "END" animation
00005F0E 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005F14 6700                       		beq.s	Obj8B_Animate	; if yes, branch
00005F16 11FC 008A D0C0             		move.b	#$8A,($FFFFD0C0).w ; load credits object
00005F1C 31FC 0009 FFF4             		move.w	#9,($FFFFFFF4).w ; use "TRY AGAIN" text
00005F22 11FC 008C D800             		move.b	#$8C,($FFFFD800).w ; load emeralds object on "TRY AGAIN" screen
00005F28 117C 0000 001C             		move.b	#0,$1C(a0)	; use "TRY AGAIN" animation
00005F2E                            
00005F2E                            Obj8B_Animate:				; XREF: Obj8B_Index
00005F2E 43F9 0000 0000             		lea	(Ani_obj8B).l,a1
00005F34 4EF9 0000 0000             		jmp	AnimateSprite
00005F3A                            ; ===========================================================================
00005F3A                            
00005F3A                            Obj8B_Juggle:				; XREF: Obj8B_Index
00005F3A 5428 0024                  		addq.b	#2,$24(a0)
00005F3E 7002                       		moveq	#2,d0
00005F40 0828 0000 001C             		btst	#0,$1C(a0)
00005F46 6700                       		beq.s	loc_5A6A
00005F48 4440                       		neg.w	d0
00005F4A                            
00005F4A                            loc_5A6A:
00005F4A 43F8 D800                  		lea	($FFFFD800).w,a1
00005F4E 7205                       		moveq	#5,d1
00005F50                            
00005F50                            loc_5A70:
00005F50 1340 003E                  		move.b	d0,$3E(a1)
00005F54 3400                       		move.w	d0,d2
00005F56 E742                       		asl.w	#3,d2
00005F58 D529 0026                  		add.b	d2,$26(a1)
00005F5C 43E9 0040                  		lea	$40(a1),a1
00005F60 51C9 FFEE                  		dbf	d1,loc_5A70
00005F64 5228 001A                  		addq.b	#1,$1A(a0)
00005F68 317C 0070 0030             		move.w	#112,$30(a0)
00005F6E                            
00005F6E                            loc_5A8E:				; XREF: Obj8B_Index
00005F6E 5368 0030                  		subq.w	#1,$30(a0)
00005F72 6A00                       		bpl.s	locret_5AA0
00005F74 0868 0000 001C             		bchg	#0,$1C(a0)
00005F7A 117C 0002 0024             		move.b	#2,$24(a0)
00005F80                            
00005F80                            locret_5AA0:
00005F80 4E75                       		rts	
00005F82                            ; ===========================================================================
00005F82                            Ani_obj8B:
00005F82                            	include "_anim\obj8B.asm"
00005F82                            ; ---------------------------------------------------------------------------
00005F82                            ; Animation script - Eggman on the "TRY AGAIN" and "END" screens
00005F82                            ; ---------------------------------------------------------------------------
00005F82 0000                       		dc.w byte_5AA8-Ani_obj8B
00005F84 0000                       		dc.w byte_5AAC-Ani_obj8B
00005F86 0000                       		dc.w byte_5AB0-Ani_obj8B
00005F88 0500 FC01                  byte_5AA8:	dc.b 5,	0, $FC,	1
00005F8C 0502 FC03                  byte_5AAC:	dc.b 5,	2, $FC,	3
00005F90 0704 0506 0504 0506 0504+  byte_5AB0:	dc.b 7,	4, 5, 6, 5, 4, 5, 6, 5,	4, 5, 6, 5, 7, 5, 6, 5,	$FF
00005FA2                            		even
00005FA2                            		even
00005FA2                            
00005FA2                            ; ===========================================================================
00005FA2                            ; ---------------------------------------------------------------------------
00005FA2                            ; Object 8C - chaos emeralds on	the "TRY AGAIN"	screen
00005FA2                            ; ---------------------------------------------------------------------------
00005FA2                            
00005FA2                            Obj8C:					; XREF: Obj_Index
00005FA2 7000                       		moveq	#0,d0
00005FA4 1028 0024                  		move.b	$24(a0),d0
00005FA8 323B 0000                  		move.w	Obj8C_Index(pc,d0.w),d1
00005FAC 4EBB 1000                  		jsr	Obj8C_Index(pc,d1.w)
00005FB0 4EF9 0000 0000             		jmp	DisplaySprite
00005FB6                            ; ===========================================================================
00005FB6 0000                       Obj8C_Index:	dc.w Obj8C_Main-Obj8C_Index
00005FB8 0000                       		dc.w Obj8C_Move-Obj8C_Index
00005FBA                            ; ===========================================================================
00005FBA                            
00005FBA                            Obj8C_Main:				; XREF: Obj8C_Index
00005FBA 2248                       		movea.l	a0,a1
00005FBC 7400                       		moveq	#0,d2
00005FBE 7600                       		moveq	#0,d3
00005FC0 7205                       		moveq	#5,d1
00005FC2 9238 FE57                  		sub.b	($FFFFFE57).w,d1
00005FC6                            
00005FC6                            Obj8C_MakeEms:				; XREF: loc_5B42
00005FC6 12BC 008C                  		move.b	#$8C,(a1)	; load emerald object
00005FCA 5429 0024                  		addq.b	#2,$24(a1)
00005FCE 237C 0000 5C5A 0004        		move.l	#Map_obj88,4(a1)
00005FD6 337C 03C5 0002             		move.w	#$3C5,2(a1)
00005FDC 137C 0000 0001             		move.b	#0,1(a1)
00005FE2 137C 0001 0018             		move.b	#1,$18(a1)
00005FE8 337C 0104 0008             		move.w	#$104,8(a1)
00005FEE 337C 0120 0038             		move.w	#$120,$38(a1)
00005FF4 337C 00EC 000A             		move.w	#$EC,$A(a1)
00005FFA 3369 000A 003A             		move.w	$A(a1),$3A(a1)
00006000 137C 001C 003C             		move.b	#$1C,$3C(a1)
00006006 47F8 FE58                  		lea	($FFFFFE58).w,a3
0000600A                            
0000600A                            Obj8C_ChkEms:
0000600A 7000                       		moveq	#0,d0
0000600C 1038 FE57                  		move.b	($FFFFFE57).w,d0
00006010 5340                       		subq.w	#1,d0
00006012 6500                       		bcs.s	loc_5B42
00006014                            
00006014                            Obj8C_ChkEmLoop:
00006014 B433 0000                  		cmp.b	(a3,d0.w),d2
00006018 6600                       		bne.s	loc_5B3E
0000601A 5202                       		addq.b	#1,d2
0000601C 60EC                       		bra.s	Obj8C_ChkEms
0000601E                            ; ===========================================================================
0000601E                            
0000601E                            loc_5B3E:
0000601E 51C8 FFF4                  		dbf	d0,Obj8C_ChkEmLoop ; checks which emeralds you have
00006022                            
00006022                            loc_5B42:
00006022 1342 001A                  		move.b	d2,$1A(a1)
00006026 5229 001A                  		addq.b	#1,$1A(a1)
0000602A 5202                       		addq.b	#1,d2
0000602C 137C 0080 0026             		move.b	#$80,$26(a1)
00006032 1343 001E                  		move.b	d3,$1E(a1)
00006036 1343 001F                  		move.b	d3,$1F(a1)
0000603A 0643 000A                  		addi.w	#$A,d3
0000603E 43E9 0040                  		lea	$40(a1),a1
00006042 51C9 FF82                  		dbf	d1,Obj8C_MakeEms
00006046                            
00006046                            Obj8C_Move:				; XREF: Obj8C_Index
00006046 4A68 003E                  		tst.w	$3E(a0)
0000604A 6700                       		beq.s	locret_5BBA
0000604C 4A28 001E                  		tst.b	$1E(a0)
00006050 6700                       		beq.s	loc_5B78
00006052 5328 001E                  		subq.b	#1,$1E(a0)
00006056 6600                       		bne.s	loc_5B80
00006058                            
00006058                            loc_5B78:
00006058 3028 003E                  		move.w	$3E(a0),d0
0000605C D168 0026                  		add.w	d0,$26(a0)
00006060                            
00006060                            loc_5B80:
00006060 1028 0026                  		move.b	$26(a0),d0
00006064 6700                       		beq.s	loc_5B8C
00006066 0C00 0080                  		cmpi.b	#$80,d0
0000606A 6600                       		bne.s	loc_5B96
0000606C                            
0000606C                            loc_5B8C:
0000606C 4268 003E                  		clr.w	$3E(a0)
00006070 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00006076                            
00006076                            loc_5B96:
00006076 4EB9 0000 2CC4             		jsr	(CalcSine).l
0000607C 7800                       		moveq	#0,d4
0000607E 1828 003C                  		move.b	$3C(a0),d4
00006082 C3C4                       		muls.w	d4,d1
00006084 E081                       		asr.l	#8,d1
00006086 C1C4                       		muls.w	d4,d0
00006088 E080                       		asr.l	#8,d0
0000608A D268 0038                  		add.w	$38(a0),d1
0000608E D068 003A                  		add.w	$3A(a0),d0
00006092 3141 0008                  		move.w	d1,8(a0)
00006096 3140 000A                  		move.w	d0,$A(a0)
0000609A                            
0000609A                            locret_5BBA:
0000609A 4E75                       		rts	
0000609C                            ; ===========================================================================
0000609C                            ; ---------------------------------------------------------------------------
0000609C                            ; Sprite mappings - Eggman on	the "TRY AGAIN"	and "END" screens
0000609C                            ; ---------------------------------------------------------------------------
0000609C                            Map_obj8B:
0000609C                            	include "_maps\obj8B.asm"
0000609C                            ; ---------------------------------------------------------------------------
0000609C                            ; Sprite mappings - Robotnik on	the "TRY AGAIN"	and "END" screens
0000609C                            ; ---------------------------------------------------------------------------
0000609C 0000 0000                  		dc.w byte_5BCC-Map_obj8B, byte_5BF5-Map_obj8B
000060A0 0000 0000                  		dc.w byte_5C1E-Map_obj8B, byte_5C47-Map_obj8B
000060A4 0000 0000                  		dc.w byte_5C70-Map_obj8B, byte_5CAD-Map_obj8B
000060A8 0000 0000                  		dc.w byte_5CE0-Map_obj8B, byte_5D13-Map_obj8B
000060AC 08                         byte_5BCC:	dc.b 8
000060AD E905 0000 F0               		dc.b $E9, 5, 0,	0, $F0
000060B2 F90C 0004 E0               		dc.b $F9, $C, 0, 4, $E0
000060B7 E904 0008 00               		dc.b $E9, 4, 0,	8, 0
000060BC F10D 000A 00               		dc.b $F1, $D, 0, $A, 0
000060C1 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
000060C6 0106 0823 00               		dc.b 1,	6, 8, $23, 0
000060CB 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
000060D0 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
000060D5 08                         byte_5BF5:	dc.b 8
000060D6 E80D 0012 E0               		dc.b $E8, $D, 0, $12, $E0
000060DB F808 001A E8               		dc.b $F8, 8, 0,	$1A, $E8
000060E0 E805 0800 00               		dc.b $E8, 5, 8,	0, 0
000060E5 F80C 0804 00               		dc.b $F8, $C, 8, 4, 0
000060EA 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
000060EF 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
000060F4 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
000060F9 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
000060FE 08                         byte_5C1E:	dc.b 8
000060FF E904 0808 F0               		dc.b $E9, 4, 8,	8, $F0
00006104 F10D 080A E0               		dc.b $F1, $D, 8, $A, $E0
00006109 E905 0800 00               		dc.b $E9, 5, 8,	0, 0
0000610E F90C 0804 00               		dc.b $F9, $C, 8, 4, 0
00006113 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00006118 0106 0823 00               		dc.b 1,	6, 8, $23, 0
0000611D 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006122 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006127 08                         byte_5C47:	dc.b 8
00006128 E805 0000 F0               		dc.b $E8, 5, 0,	0, $F0
0000612D F80C 0004 E0               		dc.b $F8, $C, 0, 4, $E0
00006132 E80D 0812 00               		dc.b $E8, $D, 8, $12, 0
00006137 F808 081A 00               		dc.b $F8, 8, 8,	$1A, 0
0000613C 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00006141 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00006146 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
0000614B 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006150 0C                         byte_5C70:	dc.b $C
00006151 ED0A 002B E8               		dc.b $ED, $A, 0, $2B, $E8
00006156 F500 0034 E0               		dc.b $F5, 0, 0,	$34, $E0
0000615B 0504 0035 F0               		dc.b 5,	4, 0, $35, $F0
00006160 0D08 0037 E8               		dc.b $D, 8, 0, $37, $E8
00006165 ED0A 082B 00               		dc.b $ED, $A, 8, $2B, 0
0000616A F500 0834 18               		dc.b $F5, 0, 8,	$34, $18
0000616F 0504 0835 00               		dc.b 5,	4, 8, $35, 0
00006174 0D08 0837 00               		dc.b $D, 8, 8, $37, 0
00006179 100D 0073 E0               		dc.b $10, $D, 0, $73, $E0
0000617E 100D 007B 00               		dc.b $10, $D, 0, $7B, 0
00006183 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00006188 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
0000618D 0A                         byte_5CAD:	dc.b $A
0000618E D207 003A F0               		dc.b $D2, 7, 0,	$3A, $F0
00006193 DA00 0042 E8               		dc.b $DA, 0, 0,	$42, $E8
00006198 F207 0043 F0               		dc.b $F2, 7, 0,	$43, $F0
0000619D D207 083A 00               		dc.b $D2, 7, 8,	$3A, 0
000061A2 DA00 0842 10               		dc.b $DA, 0, 8,	$42, $10
000061A7 F207 0843 00               		dc.b $F2, 7, 8,	$43, 0
000061AC 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
000061B1 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
000061B6 1C0C 005F E0               		dc.b $1C, $C, 0, $5F, $E0
000061BB 1C0C 085F 00               		dc.b $1C, $C, 8, $5F, 0
000061C0 0A                         byte_5CE0:	dc.b $A
000061C1 C40B 004B E8               		dc.b $C4, $B, 0, $4B, $E8
000061C6 E408 0057 E8               		dc.b $E4, 8, 0,	$57, $E8
000061CB EC00 005A F0               		dc.b $EC, 0, 0,	$5A, $F0
000061D0 C40B 084B 00               		dc.b $C4, $B, 8, $4B, 0
000061D5 E408 0857 00               		dc.b $E4, 8, 8,	$57, 0
000061DA EC00 085A 08               		dc.b $EC, 0, 8,	$5A, 8
000061DF 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
000061E4 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
000061E9 1C0C 0063 E0               		dc.b $1C, $C, 0, $63, $E0
000061EE 1C0C 0863 00               		dc.b $1C, $C, 8, $63, 0
000061F3 0C                         byte_5D13:	dc.b $C
000061F4 F40A 002B E8               		dc.b $F4, $A, 0, $2B, $E8
000061F9 FC00 0034 E0               		dc.b $FC, 0, 0,	$34, $E0
000061FE 0C04 0035 F0               		dc.b $C, 4, 0, $35, $F0
00006203 1408 0037 E8               		dc.b $14, 8, 0,	$37, $E8
00006208 F40A 082B 00               		dc.b $F4, $A, 8, $2B, 0
0000620D FC00 0834 18               		dc.b $FC, 0, 8,	$34, $18
00006212 0C04 0835 00               		dc.b $C, 4, 8, $35, 0
00006217 1408 0837 00               		dc.b $14, 8, 8,	$37, 0
0000621C 180C 0083 E0               		dc.b $18, $C, 0, $83, $E0
00006221 180C 0087 00               		dc.b $18, $C, 0, $87, 0
00006226 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
0000622B 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00006230                            		even
00006230                            		even
00006230                            
00006230                            ; ---------------------------------------------------------------------------
00006230                            ; Ending sequence demos
00006230                            ; ---------------------------------------------------------------------------
00006230                            Demo_EndGHZ1:	incbin	demodata\e_ghz1.bin
0000625E                            		even
0000625E                            Demo_EndMZ:	incbin	demodata\e_mz.bin
0000629E                            		even
0000629E                            Demo_EndSYZ:	incbin	demodata\e_syz.bin
000062CE                            		even
000062CE                            Demo_EndLZ:	incbin	demodata\e_lz.bin
000062FE                            		even
000062FE                            Demo_EndSLZ:	incbin	demodata\e_slz.bin
0000631E                            		even
0000631E                            Demo_EndSBZ1:	incbin	demodata\e_sbz1.bin
0000633E                            		even
0000633E                            Demo_EndSBZ2:	incbin	demodata\e_sbz2.bin
0000636E                            		even
0000636E                            Demo_EndGHZ2:	incbin	demodata\e_ghz2.bin
0000639E                            		even
0000639E                            
0000639E                            ; ---------------------------------------------------------------------------
0000639E                            ; Subroutine to	load level boundaries and start	locations
0000639E                            ; ---------------------------------------------------------------------------
0000639E                            
0000639E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000639E                            
0000639E                            
0000639E                            LevelSizeLoad:				; XREF: TitleScreen; Level; EndingSequence
0000639E 7000                       		moveq	#0,d0
000063A0 11C0 F740                  		move.b	d0,($FFFFF740).w
000063A4 11C0 F741                  		move.b	d0,($FFFFF741).w
000063A8 11C0 F746                  		move.b	d0,($FFFFF746).w
000063AC 11C0 F748                  		move.b	d0,($FFFFF748).w
000063B0 11C0 F742                  		move.b	d0,($FFFFF742).w
000063B4 3038 FE10                  		move.w	($FFFFFE10).w,d0
000063B8 ED08                       		lsl.b	#6,d0
000063BA E848                       		lsr.w	#4,d0
000063BC 3200                       		move.w	d0,d1
000063BE D040                       		add.w	d0,d0
000063C0 D041                       		add.w	d1,d0
000063C2 41FB 0000                  		lea	LevelSizeArray(pc,d0.w),a0 ; load level	boundaries
000063C6 3018                       		move.w	(a0)+,d0
000063C8 31C0 F730                  		move.w	d0,($FFFFF730).w
000063CC 2018                       		move.l	(a0)+,d0
000063CE 21C0 F728                  		move.l	d0,($FFFFF728).w
000063D2 21C0 F720                  		move.l	d0,($FFFFF720).w
000063D6 2018                       		move.l	(a0)+,d0
000063D8 21C0 F72C                  		move.l	d0,($FFFFF72C).w
000063DC 21C0 F724                  		move.l	d0,($FFFFF724).w
000063E0 3038 F728                  		move.w	($FFFFF728).w,d0
000063E4 0640 0240                  		addi.w	#$240,d0
000063E8 31C0 F732                  		move.w	d0,($FFFFF732).w
000063EC 31FC 1010 F74A             		move.w	#$1010,($FFFFF74A).w
000063F2 3018                       		move.w	(a0)+,d0
000063F4 31C0 F73E                  		move.w	d0,($FFFFF73E).w
000063F8 6000 0000                  		bra.w	LevSz_ChkLamp
000063FC                            ; ===========================================================================
000063FC                            ; ---------------------------------------------------------------------------
000063FC                            ; Level size array and ending start location array
000063FC                            ; ---------------------------------------------------------------------------
000063FC                            LevelSizeArray:        ; GHZ
000063FC 0004 0000 24BF 0000 0300+          dc.w $0004, $0000, $24BF, $0000, $0300, $0060 ; Act 1
00006408 0004 0000 1EBF 0000 0300+          dc.w $0004, $0000, $1EBF, $0000, $0300, $0060 ; Act 2
00006414 0004 0000 2960 0000 0300+          dc.w $0004, $0000, $2960, $0000, $0300, $0060 ; Act 3
00006420 0004 0000 2ABF 0000 0300+          dc.w $0004, $0000, $2ABF, $0000, $0300, $0060 ; Act 4 (Unused)
0000642C                                    ; LZ
0000642C 0004 0000 19BF 0000 0530+          dc.w $0004, $0000, $19BF, $0000, $0530, $0060 ; Act 1
00006438 0004 0000 10AF 0000 0720+          dc.w $0004, $0000, $10AF, $0000, $0720, $0060 ; Act 2
00006444 0004 0000 1D00 FF00 0800+          dc.w $0004, $0000, $1D00, $FF00, $0800, $0060 ; Act 3
00006450 0004 0000 20BF 0000 0720+          dc.w $0004, $0000, $20BF, $0000, $0720, $0060 ; Act 4 (Scrap Brain Act 3)
0000645C                                    ; MZ
0000645C 0004 0000 17BF 0000 01D0+          dc.w $0004, $0000, $17BF, $0000, $01D0, $0060 ; Act 1
00006468 0004 0000 17BF 0000 0520+          dc.w $0004, $0000, $17BF, $0000, $0520, $0060 ; Act 2
00006474 0004 0000 1800 0000 0720+          dc.w $0004, $0000, $1800, $0000, $0720, $0060 ; Act 3
00006480 0004 0000 16BF 0000 0720+          dc.w $0004, $0000, $16BF, $0000, $0720, $0060 ; Act 4 (Unused)
0000648C                                    ; SLZ
0000648C 0004 0000 1FBF 0000 0640+          dc.w $0004, $0000, $1FBF, $0000, $0640, $0060 ; Act 1
00006498 0004 0000 1FBF 0000 0640+          dc.w $0004, $0000, $1FBF, $0000, $0640, $0060 ; Act 2
000064A4 0004 0000 2000 0000 06C0+          dc.w $0004, $0000, $2000, $0000, $06C0, $0060 ; Act 3
000064B0 0004 0000 3EC0 0000 0720+          dc.w $0004, $0000, $3EC0, $0000, $0720, $0060 ; Act 4 (Unused)
000064BC                                    ; SYZ
000064BC 0004 0000 22C0 0000 0420+          dc.w $0004, $0000, $22C0, $0000, $0420, $0060 ; Act 1
000064C8 0004 0000 28C0 0000 0520+          dc.w $0004, $0000, $28C0, $0000, $0520, $0060 ; Act 2
000064D4 0004 0000 2C00 0000 0620+          dc.w $0004, $0000, $2C00, $0000, $0620, $0060 ; Act 3
000064E0 0004 0000 2EC0 0000 0620+          dc.w $0004, $0000, $2EC0, $0000, $0620, $0060 ; Act 4 (Unused)
000064EC                                    ; SBZ
000064EC 0004 0000 21C0 0000 0720+          dc.w $0004, $0000, $21C0, $0000, $0720, $0060 ; Act 1
000064F8 0004 0000 1E40 FF00 0800+          dc.w $0004, $0000, $1E40, $FF00, $0800, $0060 ; Act 2
00006504 0004 2080 2460 0510 0510+          dc.w $0004, $2080, $2460, $0510, $0510, $0060 ; Act 3 (Final Zone)
00006510 0004 0000 3EC0 0000 0720+          dc.w $0004, $0000, $3EC0, $0000, $0720, $0060 ; Act 4 (Unused)
0000651C                                    ; Ending
0000651C 0004 0000 0500 0110 0110+          dc.w $0004, $0000, $0500, $0110, $0110, $0060 ; Act 1 (Good Ending)
00006528 0004 0000 0DC0 0110 0110+          dc.w $0004, $0000, $0DC0, $0110, $0110, $0060 ; Act 2 (Bad Ending)
00006534 0004 0000 2FFF 0000 0320+          dc.w $0004, $0000, $2FFF, $0000, $0320, $0060 ; Act 3 (Unused)
00006540 0004 0000 2FFF 0000 0320+          dc.w $0004, $0000, $2FFF, $0000, $0320, $0060 ; Act 4 (Unused)
0000654C                                    even
0000654C                            EndingStLocArray:
0000654C                            		incbin	misc\sloc_end.bin
0000656C                            		even
0000656C                            
0000656C                            ; ===========================================================================
0000656C                            
0000656C                            LevSz_ChkLamp:				; XREF: LevelSizeLoad
0000656C 4A38 FE30                  		tst.b	($FFFFFE30).w	; have any lampposts been hit?
00006570 6700                       		beq.s	LevSz_StartLoc	; if not, branch
00006572 4EB9 0000 0000             		jsr	Obj79_LoadInfo
00006578 3238 D008                  		move.w	($FFFFD008).w,d1
0000657C 3038 D00C                  		move.w	($FFFFD00C).w,d0
00006580 6000                       		bra.s	loc_60D0
00006582                            ; ===========================================================================
00006582                            
00006582                            LevSz_StartLoc:				; XREF: LevelSizeLoad
00006582 3038 FE10                  		move.w	($FFFFFE10).w,d0
00006586 ED08                       		lsl.b	#6,d0
00006588 E848                       		lsr.w	#4,d0
0000658A 43FB 0000                  		lea	StartLocArray(pc,d0.w),a1 ; load Sonic's start location
0000658E 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00006592 6A00                       		bpl.s	LevSz_SonicPos	; if not, branch
00006594 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00006598 5340                       		subq.w	#1,d0
0000659A E548                       		lsl.w	#2,d0
0000659C 43FB 00AE                  		lea	EndingStLocArray(pc,d0.w),a1 ; load Sonic's start location
000065A0                            
000065A0                            LevSz_SonicPos:
000065A0 7200                       		moveq	#0,d1
000065A2 3219                       		move.w	(a1)+,d1
000065A4 31C1 D008                  		move.w	d1,($FFFFD008).w ; set Sonic's position on x-axis
000065A8 7000                       		moveq	#0,d0
000065AA 3011                       		move.w	(a1),d0
000065AC 31C0 D00C                  		move.w	d0,($FFFFD00C).w ; set Sonic's position on y-axis
000065B0                            
000065B0                            loc_60D0:				; XREF: LevSz_ChkLamp
000065B0 0441 00A0                  		subi.w	#$A0,d1
000065B4 6400                       		bcc.s	loc_60D8
000065B6 7200                       		moveq	#0,d1
000065B8                            
000065B8                            loc_60D8:
000065B8 3438 F72A                  		move.w	($FFFFF72A).w,d2
000065BC B242                       		cmp.w	d2,d1
000065BE 6500                       		bcs.s	loc_60E2
000065C0 3202                       		move.w	d2,d1
000065C2                            
000065C2                            loc_60E2:
000065C2 31C1 F700                  		move.w	d1,($FFFFF700).w
000065C6 0440 0060                  		subi.w	#$60,d0
000065CA 6400                       		bcc.s	loc_60EE
000065CC 7000                       		moveq	#0,d0
000065CE                            
000065CE                            loc_60EE:
000065CE B078 F72E                  		cmp.w	($FFFFF72E).w,d0
000065D2 6D00                       		blt.s	loc_60F8
000065D4 3038 F72E                  		move.w	($FFFFF72E).w,d0
000065D8                            
000065D8                            loc_60F8:
000065D8 31C0 F704                  		move.w	d0,($FFFFF704).w
000065DC 6100 0000                  		bsr.w	BgScrollSpeed
000065E0 7000                       		moveq	#0,d0
000065E2 1038 FE10                  		move.b	($FFFFFE10).w,d0
000065E6 E508                       		lsl.b	#2,d0
000065E8 21FB 0000 F7AC             		move.l	LoopTileNums(pc,d0.w),($FFFFF7AC).w
000065EE 6000 0000                  		bra.w	LevSz_Unk
000065F2                            ; ===========================================================================
000065F2                            ; ---------------------------------------------------------------------------
000065F2                            ; Sonic	start location array
000065F2                            ; ---------------------------------------------------------------------------
000065F2                            StartLocArray:	incbin	misc\sloc_lev.bin
00006662                            		even
00006662                            
00006662                            ; ---------------------------------------------------------------------------
00006662                            ; Which	256x256	tiles contain loops or roll-tunnels
00006662                            ; ---------------------------------------------------------------------------
00006662                            ; Format - 4 bytes per zone, referring to which 256x256 evoke special events:
00006662                            ; loop,	loop, tunnel, tunnel
00006662                            ; ---------------------------------------------------------------------------
00006662                            LoopTileNums:	incbin	misc\loopnums.bin
0000667E                            		even
0000667E                            
0000667E                            ; ===========================================================================
0000667E                            
0000667E                            LevSz_Unk:				; XREF: LevelSizeLoad
0000667E 7000                       		moveq	#0,d0
00006680 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006684 E748                       		lsl.w	#3,d0
00006686 43FB 0000                  		lea	dword_61B4(pc,d0.w),a1
0000668A 45F8 F7F0                  		lea	($FFFFF7F0).w,a2
0000668E 24D9                       		move.l	(a1)+,(a2)+
00006690 24D9                       		move.l	(a1)+,(a2)+
00006692 4E75                       		rts	
00006694                            ; End of function LevelSizeLoad
00006694                            
00006694                            ; ===========================================================================
00006694 0070 0100 0100 0100        dword_61B4:	dc.l $700100, $1000100
0000669C 0800 0100 0100 0000        		dc.l $8000100, $1000000
000066A4 0800 0100 0100 0000        		dc.l $8000100, $1000000
000066AC 0800 0100 0100 0000        		dc.l $8000100, $1000000
000066B4 0800 0100 0100 0000        		dc.l $8000100, $1000000
000066BC 0800 0100 0100 0000        		dc.l $8000100, $1000000
000066C4 0070 0100 0100 0100        		dc.l $700100, $1000100
000066CC                            
000066CC                            ; ---------------------------------------------------------------------------
000066CC                            ; Subroutine to	set scroll speed of some backgrounds
000066CC                            ; ---------------------------------------------------------------------------
000066CC                            
000066CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000066CC                            
000066CC                            
000066CC                            BgScrollSpeed:				; XREF: LevelSizeLoad
000066CC 4A38 FE30                  		tst.b	($FFFFFE30).w
000066D0 6600                       		bne.s	loc_6206
000066D2 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000066D6 31C0 F714                  		move.w	d0,($FFFFF714).w
000066DA 31C1 F708                  		move.w	d1,($FFFFF708).w
000066DE 31C1 F710                  		move.w	d1,($FFFFF710).w
000066E2 31C1 F718                  		move.w	d1,($FFFFF718).w
000066E6                            
000066E6                            loc_6206:
000066E6 7400                       		moveq	#0,d2
000066E8 1438 FE10                  		move.b	($FFFFFE10).w,d2
000066EC D442                       		add.w	d2,d2
000066EE 343B 2000                  		move.w	BgScroll_Index(pc,d2.w),d2
000066F2 4EFB 2000                  		jmp	BgScroll_Index(pc,d2.w)
000066F6                            ; End of function BgScrollSpeed
000066F6                            
000066F6                            ; ===========================================================================
000066F6 0000 0000                  BgScroll_Index:	dc.w BgScroll_GHZ-BgScroll_Index, BgScroll_LZ-BgScroll_Index
000066FA 0000 0000                  		dc.w BgScroll_MZ-BgScroll_Index, BgScroll_SLZ-BgScroll_Index
000066FE 0000 0000                  		dc.w BgScroll_SYZ-BgScroll_Index, BgScroll_SBZ-BgScroll_Index
00006702 0000                       		dc.w BgScroll_End-BgScroll_Index
00006704                            ; ===========================================================================
00006704                            
00006704                            BgScroll_GHZ:				; XREF: BgScroll_Index
00006704 6000 0000                  		bra.w	Deform_GHZ
00006708                            ; ===========================================================================
00006708                            
00006708                            BgScroll_LZ:				; XREF: BgScroll_Index
00006708 E280                       		asr.l	#1,d0
0000670A 31C0 F70C                  		move.w	d0,($FFFFF70C).w
0000670E 4E75                       		rts	
00006710                            ; ===========================================================================
00006710                            
00006710                            BgScroll_MZ:				; XREF: BgScroll_Index
00006710 4E75                       		rts	
00006712                            ; ===========================================================================
00006712                            
00006712                            BgScroll_SLZ:				; XREF: BgScroll_Index
00006712 E280                       		asr.l	#1,d0
00006714 0640 00C0                  		addi.w	#$C0,d0
00006718 31C0 F70C                  		move.w	d0,($FFFFF70C).w
0000671C 4E75                       		rts	
0000671E                            ; ===========================================================================
0000671E                            
0000671E                            BgScroll_SYZ:				; XREF: BgScroll_Index
0000671E E980                       		asl.l	#4,d0
00006720 2400                       		move.l	d0,d2
00006722 E380                       		asl.l	#1,d0
00006724 D082                       		add.l	d2,d0
00006726 E080                       		asr.l	#8,d0
00006728 31C0 F70C                  		move.w	d0,($FFFFF70C).w
0000672C 31C0 F714                  		move.w	d0,($FFFFF714).w
00006730 4E75                       		rts	
00006732                            ; ===========================================================================
00006732                            
00006732                            BgScroll_SBZ:				; XREF: BgScroll_Index
00006732 E980                       		asl.l	#4,d0
00006734 E380                       		asl.l	#1,d0
00006736 E080                       		asr.l	#8,d0
00006738 31C0 F70C                  		move.w	d0,($FFFFF70C).w
0000673C 4E75                       		rts	
0000673E                            ; ===========================================================================
0000673E                            
0000673E                            BgScroll_End:				; XREF: BgScroll_Index
0000673E 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
00006744 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
0000674A 4E75                       		rts	
0000674C                            ; ===========================================================================
0000674C 31FC 00A8 F708             		move.w	#$A8,($FFFFF708).w
00006752 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
00006758 31FC FFC0 F710             		move.w	#-$40,($FFFFF710).w
0000675E 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
00006764 4E75                       		rts
00006766                            
00006766                            ; ---------------------------------------------------------------------------
00006766                            ; Background layer deformation subroutines
00006766                            ; ---------------------------------------------------------------------------
00006766                            
00006766                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006766                            
00006766                            
00006766                            DeformBgLayer:				; XREF: TitleScreen; Level; EndingSequence
00006766 4A38 F744                  		tst.b	($FFFFF744).w
0000676A 6700                       		beq.s	loc_628E
0000676C 4E75                       		rts	
0000676E                            ; ===========================================================================
0000676E                            
0000676E                            loc_628E:
0000676E 4278 F754                  		clr.w	($FFFFF754).w
00006772 4278 F756                  		clr.w	($FFFFF756).w
00006776 4278 F758                  		clr.w	($FFFFF758).w
0000677A 4278 F75A                  		clr.w	($FFFFF75A).w
0000677E 6100 0000                  		bsr.w	ScrollHoriz
00006782 6100 0000                  		bsr.w	ScrollVertical
00006786 6100 0000                  		bsr.w	DynScrResizeLoad
0000678A 31F8 F700 F61A             		move.w	($FFFFF700).w,($FFFFF61A).w
00006790 31F8 F704 F616             		move.w	($FFFFF704).w,($FFFFF616).w
00006796 31F8 F708 F61C             		move.w	($FFFFF708).w,($FFFFF61C).w
0000679C 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000067A2 31F8 F718 F620             		move.w	($FFFFF718).w,($FFFFF620).w
000067A8 31F8 F71C F61E             		move.w	($FFFFF71C).w,($FFFFF61E).w
000067AE 7000                       		moveq	#0,d0
000067B0 1038 FE10                  		move.b	($FFFFFE10).w,d0
000067B4 D040                       		add.w	d0,d0
000067B6 303B 0000                  		move.w	Deform_Index(pc,d0.w),d0
000067BA 4EFB 0000                  		jmp	Deform_Index(pc,d0.w)
000067BE                            ; End of function DeformBgLayer
000067BE                            
000067BE                            ; ===========================================================================
000067BE                            ; ---------------------------------------------------------------------------
000067BE                            ; Offset index for background layer deformation	code
000067BE                            ; ---------------------------------------------------------------------------
000067BE 0000 0000                  Deform_Index:	dc.w Deform_GHZ-Deform_Index, Deform_LZ-Deform_Index
000067C2 0000 0000                  		dc.w Deform_MZ-Deform_Index, Deform_SLZ-Deform_Index
000067C6 0000 0000                  		dc.w Deform_SYZ-Deform_Index, Deform_SBZ-Deform_Index
000067CA 0000                       		dc.w Deform_GHZ-Deform_Index
000067CC                            ; ---------------------------------------------------------------------------
000067CC                            ; Green	Hill Zone background layer deformation code
000067CC                            ; ---------------------------------------------------------------------------
000067CC                            
000067CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000067CC                            
000067CC                            
000067CC                            Deform_GHZ:				; XREF: Deform_Index
000067CC 3838 F73A                  		move.w	($FFFFF73A).w,d4
000067D0 48C4                       		ext.l	d4
000067D2 EB84                       		asl.l	#5,d4
000067D4 2204                       		move.l	d4,d1
000067D6 E384                       		asl.l	#1,d4
000067D8 D881                       		add.l	d1,d4
000067DA 7A00                       		moveq	#0,d5
000067DC 6100 0000                  		bsr.w	ScrollBlock1
000067E0 6100 0000                  		bsr.w	ScrollBlock4
000067E4 43F8 CC00                  		lea	($FFFFCC00).w,a1
000067E8 3038 F704                  		move.w	($FFFFF704).w,d0
000067EC 0240 07FF                  		andi.w	#$7FF,d0
000067F0 EA48                       		lsr.w	#5,d0
000067F2 4440                       		neg.w	d0
000067F4 0640 0026                  		addi.w	#$26,d0
000067F8 31C0 F714                  		move.w	d0,($FFFFF714).w
000067FC 3800                       		move.w	d0,d4
000067FE 6100 0000                  		bsr.w	ScrollBlock3
00006802 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006808 323C 006F                  		move.w	#$6F,d1
0000680C 9244                       		sub.w	d4,d1
0000680E 3038 F700                  		move.w	($FFFFF700).w,d0
00006812 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w
00006818 6600                       		bne.s	loc_633C
0000681A 7000                       		moveq	#0,d0
0000681C                            
0000681C                            loc_633C:
0000681C 4440                       		neg.w	d0
0000681E 4840                       		swap	d0
00006820 3038 F708                  		move.w	($FFFFF708).w,d0
00006824 4440                       		neg.w	d0
00006826                            
00006826                            loc_6346:
00006826 22C0                       		move.l	d0,(a1)+
00006828 51C9 FFFC                  		dbf	d1,loc_6346
0000682C 323C 0027                  		move.w	#$27,d1
00006830 3038 F710                  		move.w	($FFFFF710).w,d0
00006834 4440                       		neg.w	d0
00006836                            
00006836                            loc_6356:
00006836 22C0                       		move.l	d0,(a1)+
00006838 51C9 FFFC                  		dbf	d1,loc_6356
0000683C 3038 F710                  		move.w	($FFFFF710).w,d0
00006840 0640 0000                  		addi.w	#0,d0
00006844 3438 F700                  		move.w	($FFFFF700).w,d2
00006848 0642 FE00                  		addi.w	#-$200,d2
0000684C 9440                       		sub.w	d0,d2
0000684E 48C2                       		ext.l	d2
00006850 E182                       		asl.l	#8,d2
00006852 85FC 0068                  		divs.w	#$68,d2
00006856 48C2                       		ext.l	d2
00006858 E182                       		asl.l	#8,d2
0000685A 7600                       		moveq	#0,d3
0000685C 3600                       		move.w	d0,d3
0000685E 323C 0047                  		move.w	#$47,d1
00006862 D244                       		add.w	d4,d1
00006864                            
00006864                            loc_6384:
00006864 3003                       		move.w	d3,d0
00006866 4440                       		neg.w	d0
00006868 22C0                       		move.l	d0,(a1)+
0000686A 4843                       		swap	d3
0000686C D682                       		add.l	d2,d3
0000686E 4843                       		swap	d3
00006870 51C9 FFF2                  		dbf	d1,loc_6384
00006874 4E75                       		rts	
00006876                            ; End of function Deform_GHZ
00006876                            
00006876                            ; ---------------------------------------------------------------------------
00006876                            ; Labyrinth Zone background layer deformation code
00006876                            ; ---------------------------------------------------------------------------
00006876                            
00006876                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006876                            
00006876                            
00006876                            Deform_LZ:				; XREF: Deform_Index
00006876 3838 F73A                  		move.w	($FFFFF73A).w,d4
0000687A 48C4                       		ext.l	d4
0000687C EF84                       		asl.l	#7,d4
0000687E 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006882 48C5                       		ext.l	d5
00006884 EF85                       		asl.l	#7,d5
00006886 6100 0000                  		bsr.w	ScrollBlock1
0000688A 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006890 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006894 323C 00DF                  		move.w	#$DF,d1
00006898 3038 F700                  		move.w	($FFFFF700).w,d0
0000689C 4440                       		neg.w	d0
0000689E 4840                       		swap	d0
000068A0 3038 F708                  		move.w	($FFFFF708).w,d0
000068A4 4440                       		neg.w	d0
000068A6                            
000068A6                            loc_63C6:
000068A6 22C0                       		move.l	d0,(a1)+
000068A8 51C9 FFFC                  		dbf	d1,loc_63C6
000068AC 3038 F646                  		move.w	($FFFFF646).w,d0
000068B0 9078 F704                  		sub.w	($FFFFF704).w,d0
000068B4 4E75                       		rts	
000068B6                            ; End of function Deform_LZ
000068B6                            
000068B6                            ; ---------------------------------------------------------------------------
000068B6                            ; Marble Zone background layer deformation code
000068B6                            ; ---------------------------------------------------------------------------
000068B6                            
000068B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000068B6                            
000068B6                            
000068B6                            Deform_MZ:				; XREF: Deform_Index
000068B6 3838 F73A                  		move.w	($FFFFF73A).w,d4
000068BA 48C4                       		ext.l	d4
000068BC ED84                       		asl.l	#6,d4
000068BE 2204                       		move.l	d4,d1
000068C0 E384                       		asl.l	#1,d4
000068C2 D881                       		add.l	d1,d4
000068C4 7A00                       		moveq	#0,d5
000068C6 6100 0000                  		bsr.w	ScrollBlock1
000068CA 303C 0200                  		move.w	#$200,d0
000068CE 3238 F704                  		move.w	($FFFFF704).w,d1
000068D2 0441 01C8                  		subi.w	#$1C8,d1
000068D6 6500                       		bcs.s	loc_6402
000068D8 3401                       		move.w	d1,d2
000068DA D241                       		add.w	d1,d1
000068DC D242                       		add.w	d2,d1
000068DE E441                       		asr.w	#2,d1
000068E0 D041                       		add.w	d1,d0
000068E2                            
000068E2                            loc_6402:
000068E2 31C0 F714                  		move.w	d0,($FFFFF714).w
000068E6 6100 0000                  		bsr.w	ScrollBlock3
000068EA 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000068F0 43F8 CC00                  		lea	($FFFFCC00).w,a1
000068F4 323C 00DF                  		move.w	#$DF,d1
000068F8 3038 F700                  		move.w	($FFFFF700).w,d0
000068FC 4440                       		neg.w	d0
000068FE 4840                       		swap	d0
00006900 3038 F708                  		move.w	($FFFFF708).w,d0
00006904 4440                       		neg.w	d0
00006906                            
00006906                            loc_6426:
00006906 22C0                       		move.l	d0,(a1)+
00006908 51C9 FFFC                  		dbf	d1,loc_6426
0000690C 4E75                       		rts	
0000690E                            ; End of function Deform_MZ
0000690E                            
0000690E                            ; ---------------------------------------------------------------------------
0000690E                            ; Star Light Zone background layer deformation code
0000690E                            ; ---------------------------------------------------------------------------
0000690E                            
0000690E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000690E                            
0000690E                            
0000690E                            Deform_SLZ:				; XREF: Deform_Index
0000690E 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006912 48C4                       		ext.l	d4
00006914 EB84                       		asl.l	#5,d4
00006916 2204                       		move.l	d4,d1
00006918 E384                       		asl.l	#1,d4
0000691A D881                       		add.l	d1,d4
0000691C 7A00                       		moveq	#0,d5
0000691E 6100 0000                  		bsr.w	ScrollBlock1
00006922 6100 0000                  		bsr.w	ScrollBlock3
00006926 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000692A                            	;	move.w	($FFFFF704).w,d0
0000692A                            	;	andi.w	#$7FF,d0
0000692A EA48                       		lsr.w	#5,d0
0000692C 4440                       		neg.w	d0
0000692E 0640 0026                  		addi.w	#$26,d0
00006932 31C0 F714                  		move.w	d0,($FFFFF714).w
00006936 3800                       		move.w	d0,d4
00006938                            	;	bsr.w	ScrollBlock3
00006938 31FC FFFA F70C                     move.w #-$6,($FFFFF70C).w ; lock the background vertically in place
0000693E 43F8 CC00                  		lea	($FFFFCC00).w,a1	; load beginning address of horizontal scroll buffer to a1
00006942                            
00006942 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006946 4440                       		neg.w	d0			; negate (positive to negative)
00006948 4840                       		swap	d0			; send to the left side of d0
0000694A 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
0000694E 45F8 A800                  		lea	($FFFFA800).w,a2
00006952 069A 0000 5000             		addi.l	#$5000,(a2)+
00006958 069A 0000 C000             		addi.l	#$C000,(a2)+
0000695E 3038 A800                  		move.w	($FFFFA800).w,d0
00006962 4440                       		neg.w	d0			; negate (positive to negative)
00006964 E240                       		asr.w	#1,d0			; divide by 2 (Slow down the scroll position)
00006966 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
0000696A                            slz_DeformLoop_1:
0000696A 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
0000696C 51C9 FFFC                  		dbf	d1,slz_DeformLoop_1	; repeat d1 number of scanlines
00006970                            
00006970 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006974 4440                       		neg.w	d0			; negate (positive to negative)
00006976 4840                       		swap	d0			; send to the left side of d0
00006978 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
0000697C 45F8 A800                  		lea	($FFFFA800).w,a2
00006980 069A 0000 5000             		addi.l	#$5000,(a2)+
00006986 069A 0000 C000             		addi.l	#$C000,(a2)+
0000698C 3038 A800                  		move.w	($FFFFA800).w,d0
00006990 4440                       		neg.w	d0			; negate (positive to negative)
00006992 E440                       		asr.w	#2,d0			; divide by 4 (Slow down the scroll position)
00006994 323C 001A                  		move.w	#27-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006998                            slz_DeformLoop_2:
00006998 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
0000699A 51C9 FFFC                  		dbf	d1,slz_DeformLoop_2	; repeat d1 number of scanlines
0000699E                            
0000699E 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000069A2 4440                       		neg.w	d0			; negate (positive to negative)
000069A4 4840                       		swap	d0			; send to the left side of d0
000069A6 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000069AA 45F8 A800                  		lea	($FFFFA800).w,a2
000069AE 069A 0000 5000             		addi.l	#$5000,(a2)+
000069B4 069A 0000 C000             		addi.l	#$C000,(a2)+
000069BA 3038 A800                  		move.w	($FFFFA800).w,d0
000069BE 4440                       		neg.w	d0			; negate (positive to negative)
000069C0 E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
000069C2 323C 0011                  		move.w	#18-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000069C6                            slz_DeformLoop_3:
000069C6 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000069C8 51C9 FFFC                  		dbf	d1,slz_DeformLoop_3	; repeat d1 number of scanlines
000069CC                            
000069CC 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000069D0 4440                       		neg.w	d0			; negate (positive to negative)
000069D2 4840                       		swap	d0			; send to the left side of d0
000069D4 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000069D8 45F8 A800                  		lea	($FFFFA800).w,a2
000069DC 069A 0000 5000             		addi.l	#$5000,(a2)+
000069E2 069A 0000 C000             		addi.l	#$C000,(a2)+
000069E8 3038 A800                  		move.w	($FFFFA800).w,d0
000069EC 4440                       		neg.w	d0			; negate (positive to negative)
000069EE E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
000069F0 323C 0009                  		move.w	#10-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000069F4                            slz_DeformLoop_4:
000069F4 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000069F6 51C9 FFFC                  		dbf	d1,slz_DeformLoop_4	; repeat d1 number of scanlines
000069FA                            
000069FA 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000069FE 4440                       		neg.w	d0			; negate (positive to negative)
00006A00 4840                       		swap	d0			; send to the left side of d0
00006A02 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006A06 45F8 A800                  		lea	($FFFFA800).w,a2
00006A0A 069A 0000 5000             		addi.l	#$5000,(a2)+
00006A10 069A 0000 C000             		addi.l	#$C000,(a2)+
00006A16 3038 A800                  		move.w	($FFFFA800).w,d0
00006A1A 4440                       		neg.w	d0			; negate (positive to negative)
00006A1C E840                       		asr.w	#4,d0			; divide by 16 (Slow down the scroll position)
00006A1E 323C 000F                  		move.w	#16-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006A22                            slz_DeformLoop_5:
00006A22 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006A24 51C9 FFFC                  		dbf	d1,slz_DeformLoop_5	; repeat d1 number of scanlines
00006A28                            
00006A28 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006A2C 4440                       		neg.w	d0			; negate (positive to negative)
00006A2E 4840                       		swap	d0			; send to the left side of d0
00006A30 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006A34 4440                       		neg.w	d0			; negate (positive to negative)
00006A36 EA40                       		asr.w	#5,d0			; divide by 32 (Slow down the scroll position)
00006A38 323C 001C                  		move.w	#29-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006A3C                            slz_DeformLoop_6:
00006A3C 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006A3E 51C9 FFFC                  		dbf	d1,slz_DeformLoop_6	; repeat d1 number of scanlines
00006A42                            
00006A42 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006A46 4440                       		neg.w	d0			; negate (positive to negative)
00006A48 4840                       		swap	d0			; send to the left side of d0
00006A4A 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006A4E 4440                       		neg.w	d0			; negate (positive to negative)
00006A50 EE40                       		asr.w	#7,d0			; divide by 128 (Slow down the scroll position)
00006A52 323C 0005                  		move.w	#6-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006A56                            slz_DeformLoop_7:
00006A56 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006A58 51C9 FFFC                  		dbf	d1,slz_DeformLoop_7	; repeat d1 number of scanlines
00006A5C                            
00006A5C 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006A60 4440                       		neg.w	d0			; negate (positive to negative)
00006A62 4840                       		swap	d0			; send to the left side of d0
00006A64 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006A68 4440                       		neg.w	d0			; negate (positive to negative)
00006A6A EC40                       		asr.w	#6,d0			; divide by 64 (Slow down the scroll position)
00006A6C 323C 0004                  		move.w	#5-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006A70                            slz_DeformLoop_8:
00006A70 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006A72 51C9 FFFC                  		dbf	d1,slz_DeformLoop_8	; repeat d1 number of scanlines
00006A76                            
00006A76 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006A7A 4440                       		neg.w	d0			; negate (positive to negative)
00006A7C 4840                       		swap	d0			; send to the left side of d0
00006A7E 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006A82 4440                       		neg.w	d0			; negate (positive to negative)
00006A84 EA40                       		asr.w	#5,d0			; divide by 32 (Slow down the scroll position)
00006A86 323C 0007                  		move.w	#8-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006A8A                            slz_DeformLoop_9:
00006A8A 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006A8C 51C9 FFFC                  		dbf	d1,slz_DeformLoop_9	; repeat d1 number of scanlines
00006A90                            
00006A90 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006A94 4440                       		neg.w	d0			; negate (positive to negative)
00006A96 4840                       		swap	d0			; send to the left side of d0
00006A98 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006A9C 4440                       		neg.w	d0			; negate (positive to negative)
00006A9E E840                       		asr.w	#4,d0			; divide by 16 (Slow down the scroll position)
00006AA0 323C 0006                  		move.w	#7-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006AA4                            slz_DeformLoop_10:
00006AA4 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006AA6 51C9 FFFC                  		dbf	d1,slz_DeformLoop_10	; repeat d1 number of scanlines
00006AAA                            
00006AAA 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006AAE 4440                       		neg.w	d0			; negate (positive to negative)
00006AB0 4840                       		swap	d0			; send to the left side of d0
00006AB2 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006AB6 4440                       		neg.w	d0			; negate (positive to negative)
00006AB8 E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
00006ABA 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006ABE                            slz_DeformLoop_11:
00006ABE 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006AC0 51C9 FFFC                  		dbf	d1,slz_DeformLoop_11	; repeat d1 number of scanlines
00006AC4                            
00006AC4 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006AC8 4440                       		neg.w	d0			; negate (positive to negative)
00006ACA 4840                       		swap	d0			; send to the left side of d0
00006ACC 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006AD0 4440                       		neg.w	d0			; negate (positive to negative)
00006AD2 E440                       		asr.w	#2,d0			; divide by 4 (Slow down the scroll position)
00006AD4 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006AD8                            slz_DeformLoop_12:
00006AD8 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006ADA 51C9 FFFC                  		dbf	d1,slz_DeformLoop_12	; repeat d1 number of scanlines
00006ADE                            
00006ADE 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006AE2 4440                       		neg.w	d0			; negate (positive to negative)
00006AE4 4840                       		swap	d0			; send to the left side of d0
00006AE6 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006AEA 4440                       		neg.w	d0			; negate (positive to negative)
00006AEC E240                       		asr.w	#1,d0			; divide by 2 (Slow down the scroll position)
00006AEE 323C 0031                  		move.w	#50-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006AF2                            slz_DeformLoop_13:
00006AF2 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006AF4 51C9 FFFC                  		dbf	d1,slz_DeformLoop_13	; repeat d1 number of scanlines
00006AF8 4E75                       		rts	
00006AFA                            ; End of function Deform_SLZ
00006AFA 4E75                       		rts	
00006AFC                            ; End of function Deform_SLZ_2
00006AFC                            
00006AFC                            ; ---------------------------------------------------------------------------
00006AFC                            ; Spring Yard Zone background layer deformation	code
00006AFC                            ; ---------------------------------------------------------------------------
00006AFC                            
00006AFC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006AFC                            
00006AFC                            
00006AFC                            Deform_SYZ:				; XREF: Deform_Index
00006AFC 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006B00 48C4                       		ext.l	d4
00006B02 ED84                       		asl.l	#6,d4
00006B04 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006B08 48C5                       		ext.l	d5
00006B0A E985                       		asl.l	#4,d5
00006B0C 2205                       		move.l	d5,d1
00006B0E E385                       		asl.l	#1,d5
00006B10 DA81                       		add.l	d1,d5
00006B12 6100 0000                  		bsr.w	ScrollBlock1
00006B16 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006B1C 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006B20 323C 00DF                  		move.w	#$DF,d1
00006B24 3038 F700                  		move.w	($FFFFF700).w,d0
00006B28 4440                       		neg.w	d0
00006B2A 4840                       		swap	d0
00006B2C 3038 F708                  		move.w	($FFFFF708).w,d0
00006B30 4440                       		neg.w	d0
00006B32                            
00006B32                            loc_653C:
00006B32 22C0                       		move.l	d0,(a1)+
00006B34 51C9 FFFC                  		dbf	d1,loc_653C
00006B38 4E75                       		rts	
00006B3A                            ; End of function Deform_SYZ
00006B3A                            
00006B3A                            ; ---------------------------------------------------------------------------
00006B3A                            ; Scrap	Brain Zone background layer deformation	code
00006B3A                            ; ---------------------------------------------------------------------------
00006B3A                            
00006B3A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006B3A                            
00006B3A                            
00006B3A                            Deform_SBZ:				; XREF: Deform_Index
00006B3A 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006B3E 48C4                       		ext.l	d4
00006B40 ED84                       		asl.l	#6,d4
00006B42 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006B46 48C5                       		ext.l	d5
00006B48 E985                       		asl.l	#4,d5
00006B4A E385                       		asl.l	#1,d5
00006B4C 6100 0000                  		bsr.w	ScrollBlock1
00006B50 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006B56 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006B5A 323C 00DF                  		move.w	#$DF,d1
00006B5E 3038 F700                  		move.w	($FFFFF700).w,d0
00006B62 4440                       		neg.w	d0
00006B64 4840                       		swap	d0
00006B66 3038 F708                  		move.w	($FFFFF708).w,d0
00006B6A 4440                       		neg.w	d0
00006B6C                            
00006B6C                            loc_6576:
00006B6C 22C0                       		move.l	d0,(a1)+
00006B6E 51C9 FFFC                  		dbf	d1,loc_6576
00006B72 4E75                       		rts	
00006B74                            ; End of function Deform_SBZ
00006B74                            
00006B74                            ; ---------------------------------------------------------------------------
00006B74                            ; Subroutine to	scroll the level horizontally as Sonic moves
00006B74                            ; ---------------------------------------------------------------------------
00006B74                            
00006B74                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006B74                            
00006B74                            
00006B74                            ScrollHoriz:				; XREF: DeformBgLayer
00006B74 3838 F700                  		move.w	($FFFFF700).w,d4
00006B78 6100                       		bsr.s	ScrollHoriz2
00006B7A 3038 F700                  		move.w	($FFFFF700).w,d0
00006B7E 0240 0010                  		andi.w	#$10,d0
00006B82 1238 F74A                  		move.b	($FFFFF74A).w,d1
00006B86 B300                       		eor.b	d1,d0
00006B88 6600                       		bne.s	locret_65B0
00006B8A 0A38 0010 F74A             		eori.b	#$10,($FFFFF74A).w
00006B90 3038 F700                  		move.w	($FFFFF700).w,d0
00006B94 9044                       		sub.w	d4,d0
00006B96 6A00                       		bpl.s	loc_65AA
00006B98 08F8 0002 F754             		bset	#2,($FFFFF754).w
00006B9E 4E75                       		rts	
00006BA0                            ; ===========================================================================
00006BA0                            
00006BA0                            loc_65AA:
00006BA0 08F8 0003 F754             		bset	#3,($FFFFF754).w
00006BA6                            
00006BA6                            locret_65B0:
00006BA6 4E75                       		rts	
00006BA8                            ; End of function ScrollHoriz
00006BA8                            
00006BA8                            
00006BA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006BA8                            
00006BA8                            
00006BA8                            ScrollHoriz2:				; XREF: ScrollHoriz
00006BA8 3038 D008                  		move.w	($FFFFD008).w,d0
00006BAC 9078 F700                  		sub.w	($FFFFF700).w,d0
00006BB0 0440 0090                  		subi.w	#$90,d0
00006BB4 6500                       		bcs.s	loc_65F6
00006BB6 0440 0010                  		subi.w	#$10,d0
00006BBA 6400                       		bcc.s	loc_65CC
00006BBC 4278 F73A                  		clr.w	($FFFFF73A).w
00006BC0 4E75                       		rts	
00006BC2                            ; ===========================================================================
00006BC2                            
00006BC2                            loc_65CC:
00006BC2 0C40 0010                  		cmpi.w	#$10,d0
00006BC6 6500                       		bcs.s	loc_65D6
00006BC8 303C 0010                  		move.w	#$10,d0
00006BCC                            
00006BCC                            loc_65D6:
00006BCC D078 F700                  		add.w	($FFFFF700).w,d0
00006BD0 B078 F72A                  		cmp.w	($FFFFF72A).w,d0
00006BD4 6D00                       		blt.s	loc_65E4
00006BD6 3038 F72A                  		move.w	($FFFFF72A).w,d0
00006BDA                            
00006BDA                            loc_65E4:
00006BDA 3200                       		move.w	d0,d1
00006BDC 9278 F700                  		sub.w	($FFFFF700).w,d1
00006BE0 E141                       		asl.w	#8,d1
00006BE2 31C0 F700                  		move.w	d0,($FFFFF700).w
00006BE6 31C1 F73A                  		move.w	d1,($FFFFF73A).w
00006BEA 4E75                       		rts	
00006BEC                            ; ===========================================================================
00006BEC                            
00006BEC                            loc_65F6:				; XREF: ScrollHoriz2
00006BEC D078 F700                  		add.w	($FFFFF700).w,d0
00006BF0 B078 F728                  		cmp.w	($FFFFF728).w,d0
00006BF4 6EE4                       		bgt.s	loc_65E4
00006BF6 3038 F728                  		move.w	($FFFFF728).w,d0
00006BFA 60DE                       		bra.s	loc_65E4
00006BFC                            ; End of function ScrollHoriz2
00006BFC                            
00006BFC                            ; ===========================================================================
00006BFC 4A40                       		tst.w	d0
00006BFE 6A00                       		bpl.s	loc_6610
00006C00 303C FFFE                  		move.w	#-2,d0
00006C04 60E6                       		bra.s	loc_65F6
00006C06                            ; ===========================================================================
00006C06                            
00006C06                            loc_6610:
00006C06 303C 0002                  		move.w	#2,d0
00006C0A 60B6                       		bra.s	loc_65CC
00006C0C                            
00006C0C                            ; ---------------------------------------------------------------------------
00006C0C                            ; Subroutine to	scroll the level vertically as Sonic moves
00006C0C                            ; ---------------------------------------------------------------------------
00006C0C                            
00006C0C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006C0C                            
00006C0C                            
00006C0C                            ScrollVertical:				; XREF: DeformBgLayer
00006C0C 7200                       		moveq	#0,d1
00006C0E 3038 D00C                  		move.w	($FFFFD00C).w,d0
00006C12 9078 F704                  		sub.w	($FFFFF704).w,d0
00006C16 0838 0002 D022             		btst	#2,($FFFFD022).w
00006C1C 6700                       		beq.s	loc_662A
00006C1E 5B40                       		subq.w	#5,d0
00006C20                            
00006C20                            loc_662A:
00006C20 0838 0001 D022             		btst	#1,($FFFFD022).w
00006C26 6700                       		beq.s	loc_664A
00006C28 0640 0020                  		addi.w	#$20,d0
00006C2C 9078 F73E                  		sub.w	($FFFFF73E).w,d0
00006C30 6500                       		bcs.s	loc_6696
00006C32 0440 0040                  		subi.w	#$40,d0
00006C36 6400                       		bcc.s	loc_6696
00006C38 4A38 F75C                  		tst.b	($FFFFF75C).w
00006C3C 6600                       		bne.s	loc_66A8
00006C3E 6000                       		bra.s	loc_6656
00006C40                            ; ===========================================================================
00006C40                            
00006C40                            loc_664A:
00006C40 9078 F73E                  		sub.w	($FFFFF73E).w,d0
00006C44 6600                       		bne.s	loc_665C
00006C46 4A38 F75C                  		tst.b	($FFFFF75C).w
00006C4A 6600                       		bne.s	loc_66A8
00006C4C                            
00006C4C                            loc_6656:
00006C4C 4278 F73C                  		clr.w	($FFFFF73C).w
00006C50 4E75                       		rts	
00006C52                            ; ===========================================================================
00006C52                            
00006C52                            loc_665C:
00006C52 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
00006C58 6600                       		bne.s	loc_6684
00006C5A 3238 D014                  		move.w	($FFFFD014).w,d1
00006C5E 6A00                       		bpl.s	loc_666C
00006C60 4441                       		neg.w	d1
00006C62                            
00006C62                            loc_666C:
00006C62 0C41 0800                  		cmpi.w	#$800,d1
00006C66 6400                       		bcc.s	loc_6696
00006C68 323C 0600                  		move.w	#$600,d1
00006C6C 0C40 0006                  		cmpi.w	#6,d0
00006C70 6E00                       		bgt.s	loc_66F6
00006C72 0C40 FFFA                  		cmpi.w	#-6,d0
00006C76 6D00                       		blt.s	loc_66C0
00006C78 6000                       		bra.s	loc_66AE
00006C7A                            ; ===========================================================================
00006C7A                            
00006C7A                            loc_6684:
00006C7A 323C 0200                  		move.w	#$200,d1
00006C7E 0C40 0002                  		cmpi.w	#2,d0
00006C82 6E00                       		bgt.s	loc_66F6
00006C84 0C40 FFFE                  		cmpi.w	#-2,d0
00006C88 6D00                       		blt.s	loc_66C0
00006C8A 6000                       		bra.s	loc_66AE
00006C8C                            ; ===========================================================================
00006C8C                            
00006C8C                            loc_6696:
00006C8C 323C 1000                  		move.w	#$1000,d1
00006C90 0C40 0010                  		cmpi.w	#$10,d0
00006C94 6E00                       		bgt.s	loc_66F6
00006C96 0C40 FFF0                  		cmpi.w	#-$10,d0
00006C9A 6D00                       		blt.s	loc_66C0
00006C9C 6000                       		bra.s	loc_66AE
00006C9E                            ; ===========================================================================
00006C9E                            
00006C9E                            loc_66A8:
00006C9E 7000                       		moveq	#0,d0
00006CA0 11C0 F75C                  		move.b	d0,($FFFFF75C).w
00006CA4                            
00006CA4                            loc_66AE:
00006CA4 7200                       		moveq	#0,d1
00006CA6 3200                       		move.w	d0,d1
00006CA8 D278 F704                  		add.w	($FFFFF704).w,d1
00006CAC 4A40                       		tst.w	d0
00006CAE 6A00 0000                  		bpl.w	loc_6700
00006CB2 6000 0000                  		bra.w	loc_66CC
00006CB6                            ; ===========================================================================
00006CB6                            
00006CB6                            loc_66C0:
00006CB6 4441                       		neg.w	d1
00006CB8 48C1                       		ext.l	d1
00006CBA E181                       		asl.l	#8,d1
00006CBC D2B8 F704                  		add.l	($FFFFF704).w,d1
00006CC0 4841                       		swap	d1
00006CC2                            
00006CC2                            loc_66CC:
00006CC2 B278 F72C                  		cmp.w	($FFFFF72C).w,d1
00006CC6 6E00                       		bgt.s	loc_6724
00006CC8 0C41 FF00                  		cmpi.w	#-$100,d1
00006CCC 6E00                       		bgt.s	loc_66F0
00006CCE 0241 07FF                  		andi.w	#$7FF,d1
00006CD2 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00006CD8 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
00006CDE 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
00006CE4 6000                       		bra.s	loc_6724
00006CE6                            ; ===========================================================================
00006CE6                            
00006CE6                            loc_66F0:
00006CE6 3238 F72C                  		move.w	($FFFFF72C).w,d1
00006CEA 6000                       		bra.s	loc_6724
00006CEC                            ; ===========================================================================
00006CEC                            
00006CEC                            loc_66F6:
00006CEC 48C1                       		ext.l	d1
00006CEE E181                       		asl.l	#8,d1
00006CF0 D2B8 F704                  		add.l	($FFFFF704).w,d1
00006CF4 4841                       		swap	d1
00006CF6                            
00006CF6                            loc_6700:
00006CF6 B278 F72E                  		cmp.w	($FFFFF72E).w,d1
00006CFA 6D00                       		blt.s	loc_6724
00006CFC 0441 0800                  		subi.w	#$800,d1
00006D00 6500                       		bcs.s	loc_6720
00006D02 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00006D08 0478 0800 F704             		subi.w	#$800,($FFFFF704).w
00006D0E 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
00006D14 6000                       		bra.s	loc_6724
00006D16                            ; ===========================================================================
00006D16                            
00006D16                            loc_6720:
00006D16 3238 F72E                  		move.w	($FFFFF72E).w,d1
00006D1A                            
00006D1A                            loc_6724:
00006D1A 3838 F704                  		move.w	($FFFFF704).w,d4
00006D1E 4841                       		swap	d1
00006D20 2601                       		move.l	d1,d3
00006D22 96B8 F704                  		sub.l	($FFFFF704).w,d3
00006D26 E09B                       		ror.l	#8,d3
00006D28 31C3 F73C                  		move.w	d3,($FFFFF73C).w
00006D2C 21C1 F704                  		move.l	d1,($FFFFF704).w
00006D30 3038 F704                  		move.w	($FFFFF704).w,d0
00006D34 0240 0010                  		andi.w	#$10,d0
00006D38 1238 F74B                  		move.b	($FFFFF74B).w,d1
00006D3C B300                       		eor.b	d1,d0
00006D3E 6600                       		bne.s	locret_6766
00006D40 0A38 0010 F74B             		eori.b	#$10,($FFFFF74B).w
00006D46 3038 F704                  		move.w	($FFFFF704).w,d0
00006D4A 9044                       		sub.w	d4,d0
00006D4C 6A00                       		bpl.s	loc_6760
00006D4E 08F8 0000 F754             		bset	#0,($FFFFF754).w
00006D54 4E75                       		rts	
00006D56                            ; ===========================================================================
00006D56                            
00006D56                            loc_6760:
00006D56 08F8 0001 F754             		bset	#1,($FFFFF754).w
00006D5C                            
00006D5C                            locret_6766:
00006D5C 4E75                       		rts	
00006D5E                            ; End of function ScrollVertical
00006D5E                            
00006D5E                            
00006D5E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006D5E                            
00006D5E                            
00006D5E                            ScrollBlock1:				; XREF: Deform_GHZ; et al
00006D5E 2438 F708                  		move.l	($FFFFF708).w,d2
00006D62 2002                       		move.l	d2,d0
00006D64 D084                       		add.l	d4,d0
00006D66 21C0 F708                  		move.l	d0,($FFFFF708).w
00006D6A 2200                       		move.l	d0,d1
00006D6C 4841                       		swap	d1
00006D6E 0241 0010                  		andi.w	#$10,d1
00006D72 1638 F74C                  		move.b	($FFFFF74C).w,d3
00006D76 B701                       		eor.b	d3,d1
00006D78 6600                       		bne.s	loc_679C
00006D7A 0A38 0010 F74C             		eori.b	#$10,($FFFFF74C).w
00006D80 9082                       		sub.l	d2,d0
00006D82 6A00                       		bpl.s	loc_6796
00006D84 08F8 0002 F756             		bset	#2,($FFFFF756).w
00006D8A 6000                       		bra.s	loc_679C
00006D8C                            ; ===========================================================================
00006D8C                            
00006D8C                            loc_6796:
00006D8C 08F8 0003 F756             		bset	#3,($FFFFF756).w
00006D92                            
00006D92                            loc_679C:
00006D92 2638 F70C                  		move.l	($FFFFF70C).w,d3
00006D96 2003                       		move.l	d3,d0
00006D98 D085                       		add.l	d5,d0
00006D9A 21C0 F70C                  		move.l	d0,($FFFFF70C).w
00006D9E 2200                       		move.l	d0,d1
00006DA0 4841                       		swap	d1
00006DA2 0241 0010                  		andi.w	#$10,d1
00006DA6 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006DAA B501                       		eor.b	d2,d1
00006DAC 6600                       		bne.s	locret_67D0
00006DAE 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006DB4 9083                       		sub.l	d3,d0
00006DB6 6A00                       		bpl.s	loc_67CA
00006DB8 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006DBE 4E75                       		rts	
00006DC0                            ; ===========================================================================
00006DC0                            
00006DC0                            loc_67CA:
00006DC0 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006DC6                            
00006DC6                            locret_67D0:
00006DC6 4E75                       		rts	
00006DC8                            ; End of function ScrollBlock1
00006DC8                            
00006DC8                            
00006DC8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006DC8                            
00006DC8                            
00006DC8                            ScrollBlock2:				; XREF: Deform_SLZ
00006DC8 2438 F708                  		move.l	($FFFFF708).w,d2
00006DCC 2002                       		move.l	d2,d0
00006DCE D084                       		add.l	d4,d0
00006DD0 21C0 F708                  		move.l	d0,($FFFFF708).w
00006DD4 2638 F70C                  		move.l	($FFFFF70C).w,d3
00006DD8 2003                       		move.l	d3,d0
00006DDA D085                       		add.l	d5,d0
00006DDC 21C0 F70C                  		move.l	d0,($FFFFF70C).w
00006DE0 2200                       		move.l	d0,d1
00006DE2 4841                       		swap	d1
00006DE4 0241 0010                  		andi.w	#$10,d1
00006DE8 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006DEC B501                       		eor.b	d2,d1
00006DEE 6600                       		bne.s	locret_6812
00006DF0 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006DF6 9083                       		sub.l	d3,d0
00006DF8 6A00                       		bpl.s	loc_680C
00006DFA 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006E00 4E75                       		rts	
00006E02                            ; ===========================================================================
00006E02                            
00006E02                            loc_680C:
00006E02 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006E08                            
00006E08                            locret_6812:
00006E08 4E75                       		rts	
00006E0A                            ; End of function ScrollBlock2
00006E0A                            
00006E0A                            
00006E0A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006E0A                            
00006E0A                            
00006E0A                            ScrollBlock3:				; XREF: Deform_GHZ; et al
00006E0A 3638 F70C                  		move.w	($FFFFF70C).w,d3
00006E0E 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006E12 3200                       		move.w	d0,d1
00006E14 0241 0010                  		andi.w	#$10,d1
00006E18 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006E1C B501                       		eor.b	d2,d1
00006E1E 6600                       		bne.s	locret_6842
00006E20 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006E26 9043                       		sub.w	d3,d0
00006E28 6A00                       		bpl.s	loc_683C
00006E2A 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006E30 4E75                       		rts	
00006E32                            ; ===========================================================================
00006E32                            
00006E32                            loc_683C:
00006E32 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006E38                            
00006E38                            locret_6842:
00006E38 4E75                       		rts	
00006E3A                            ; End of function ScrollBlock3
00006E3A                            
00006E3A                            
00006E3A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006E3A                            
00006E3A                            
00006E3A                            ScrollBlock4:				; XREF: Deform_GHZ
00006E3A 3438 F710                  		move.w	($FFFFF710).w,d2
00006E3E 3638 F714                  		move.w	($FFFFF714).w,d3
00006E42 3038 F73A                  		move.w	($FFFFF73A).w,d0
00006E46 48C0                       		ext.l	d0
00006E48 EF80                       		asl.l	#7,d0
00006E4A D1B8 F710                  		add.l	d0,($FFFFF710).w
00006E4E 3038 F710                  		move.w	($FFFFF710).w,d0
00006E52 0240 0010                  		andi.w	#$10,d0
00006E56 1238 F74E                  		move.b	($FFFFF74E).w,d1
00006E5A B300                       		eor.b	d1,d0
00006E5C 6600                       		bne.s	locret_6884
00006E5E 0A38 0010 F74E             		eori.b	#$10,($FFFFF74E).w
00006E64 3038 F710                  		move.w	($FFFFF710).w,d0
00006E68 9042                       		sub.w	d2,d0
00006E6A 6A00                       		bpl.s	loc_687E
00006E6C 08F8 0002 F758             		bset	#2,($FFFFF758).w
00006E72 6000                       		bra.s	locret_6884
00006E74                            ; ===========================================================================
00006E74                            
00006E74                            loc_687E:
00006E74 08F8 0003 F758             		bset	#3,($FFFFF758).w
00006E7A                            
00006E7A                            locret_6884:
00006E7A 4E75                       		rts	
00006E7C                            ; End of function ScrollBlock4
00006E7C                            
00006E7C                            
00006E7C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006E7C                            
00006E7C                            
00006E7C                            sub_6886:				; XREF: loc_C44
00006E7C 4BF9 00C0 0004             		lea	($C00004).l,a5
00006E82 4DF9 00C0 0000             		lea	($C00000).l,a6
00006E88 45F8 F756                  		lea	($FFFFF756).w,a2
00006E8C 47F8 F708                  		lea	($FFFFF708).w,a3
00006E90 49F8 A440                  		lea	($FFFFA440).w,a4
00006E94 343C 6000                  		move.w	#$6000,d2
00006E98 6100 0000                  		bsr.w	sub_6954
00006E9C 45F8 F758                  		lea	($FFFFF758).w,a2
00006EA0 47F8 F710                  		lea	($FFFFF710).w,a3
00006EA4 6000 0000                  		bra.w	sub_69F4
00006EA8                            ; End of function sub_6886
00006EA8                            
00006EA8                            ; ---------------------------------------------------------------------------
00006EA8                            ; Subroutine to	display	correct	tiles as you move
00006EA8                            ; ---------------------------------------------------------------------------
00006EA8                            
00006EA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006EA8                            
00006EA8                            
00006EA8                            LoadTilesAsYouMove:			; XREF: Demo_Time
00006EA8 4BF9 00C0 0004             		lea	($C00004).l,a5
00006EAE 4DF9 00C0 0000             		lea	($C00000).l,a6
00006EB4 45F8 FF32                  		lea	($FFFFFF32).w,a2
00006EB8 47F8 FF18                  		lea	($FFFFFF18).w,a3
00006EBC 49F8 A440                  		lea	($FFFFA440).w,a4
00006EC0 343C 6000                  		move.w	#$6000,d2
00006EC4 6100 0000                  		bsr.w	sub_6954
00006EC8 45F8 FF34                  		lea	($FFFFFF34).w,a2
00006ECC 47F8 FF20                  		lea	($FFFFFF20).w,a3
00006ED0 6100 0000                  		bsr.w	sub_69F4
00006ED4 45F8 FF30                  		lea	($FFFFFF30).w,a2
00006ED8 47F8 FF10                  		lea	($FFFFFF10).w,a3
00006EDC 49F8 A400                  		lea	($FFFFA400).w,a4
00006EE0 343C 4000                  		move.w	#$4000,d2
00006EE4 4A12                       		tst.b	(a2)
00006EE6 6700                       		beq.s	locret_6952
00006EE8 0892 0000                  		bclr	#0,(a2)
00006EEC 6700                       		beq.s	loc_6908
00006EEE 78F0                       		moveq	#-$10,d4
00006EF0 7AF0                       		moveq	#-$10,d5
00006EF2 6100 0000                  		bsr.w	sub_6C20
00006EF6 78F0                       		moveq	#-$10,d4
00006EF8 7AF0                       		moveq	#-$10,d5
00006EFA 6100 0000                  		bsr.w	sub_6AD8
00006EFE                            
00006EFE                            loc_6908:
00006EFE 0892 0001                  		bclr	#1,(a2)
00006F02 6700                       		beq.s	loc_6922
00006F04 383C 00E0                  		move.w	#$E0,d4
00006F08 7AF0                       		moveq	#-$10,d5
00006F0A 6100 0000                  		bsr.w	sub_6C20
00006F0E 383C 00E0                  		move.w	#$E0,d4
00006F12 7AF0                       		moveq	#-$10,d5
00006F14 6100 0000                  		bsr.w	sub_6AD8
00006F18                            
00006F18                            loc_6922:
00006F18 0892 0002                  		bclr	#2,(a2)
00006F1C 6700                       		beq.s	loc_6938
00006F1E 78F0                       		moveq	#-$10,d4
00006F20 7AF0                       		moveq	#-$10,d5
00006F22 6100 0000                  		bsr.w	sub_6C20
00006F26 78F0                       		moveq	#-$10,d4
00006F28 7AF0                       		moveq	#-$10,d5
00006F2A 6100 0000                  		bsr.w	sub_6B04
00006F2E                            
00006F2E                            loc_6938:
00006F2E 0892 0003                  		bclr	#3,(a2)
00006F32 6700                       		beq.s	locret_6952
00006F34 78F0                       		moveq	#-$10,d4
00006F36 3A3C 0140                  		move.w	#$140,d5
00006F3A 6100 0000                  		bsr.w	sub_6C20
00006F3E 78F0                       		moveq	#-$10,d4
00006F40 3A3C 0140                  		move.w	#$140,d5
00006F44 6100 0000                  		bsr.w	sub_6B04
00006F48                            
00006F48                            locret_6952:
00006F48 4E75                       		rts	
00006F4A                            ; End of function LoadTilesAsYouMove
00006F4A                            
00006F4A                            
00006F4A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006F4A                            
00006F4A                            
00006F4A                            sub_6954:				; XREF: sub_6886; LoadTilesAsYouMove
00006F4A 4A12                       		tst.b	(a2)
00006F4C 6700 0000                  		beq.w	locret_69F2
00006F50 0892 0000                  		bclr	#0,(a2)
00006F54 6700                       		beq.s	loc_6972
00006F56 78F0                       		moveq	#-$10,d4
00006F58 7AF0                       		moveq	#-$10,d5
00006F5A 6100 0000                  		bsr.w	sub_6C20
00006F5E 78F0                       		moveq	#-$10,d4
00006F60 7AF0                       		moveq	#-$10,d5
00006F62 7C1F                       		moveq	#$1F,d6
00006F64 6100 0000                  		bsr.w	sub_6ADA
00006F68                            
00006F68                            loc_6972:
00006F68 0892 0001                  		bclr	#1,(a2)
00006F6C 6700                       		beq.s	loc_698E
00006F6E 383C 00E0                  		move.w	#$E0,d4
00006F72 7AF0                       		moveq	#-$10,d5
00006F74 6100 0000                  		bsr.w	sub_6C20
00006F78 383C 00E0                  		move.w	#$E0,d4
00006F7C 7AF0                       		moveq	#-$10,d5
00006F7E 7C1F                       		moveq	#$1F,d6
00006F80 6100 0000                  		bsr.w	sub_6ADA
00006F84                            
00006F84                            loc_698E:
00006F84 0892 0002                  		bclr	#2,(a2)
00006F88 6700                       		beq.s	loc_69BE
00006F8A 78F0                       		moveq	#-$10,d4
00006F8C 7AF0                       		moveq	#-$10,d5
00006F8E 6100 0000                  		bsr.w	sub_6C20
00006F92 78F0                       		moveq	#-$10,d4
00006F94 7AF0                       		moveq	#-$10,d5
00006F96 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006F9A 322B 0004                  		move.w	4(a3),d1
00006F9E 0241 FFF0                  		andi.w	#-$10,d1
00006FA2 9C41                       		sub.w	d1,d6
00006FA4 6D00                       		blt.s	loc_69BE
00006FA6 E84E                       		lsr.w	#4,d6
00006FA8 0C46 000F                  		cmpi.w	#$F,d6
00006FAC 6500                       		bcs.s	loc_69BA
00006FAE 7C0F                       		moveq	#$F,d6
00006FB0                            
00006FB0                            loc_69BA:
00006FB0 6100 0000                  		bsr.w	sub_6B06
00006FB4                            
00006FB4                            loc_69BE:
00006FB4 0892 0003                  		bclr	#3,(a2)
00006FB8 6700                       		beq.s	locret_69F2
00006FBA 78F0                       		moveq	#-$10,d4
00006FBC 3A3C 0140                  		move.w	#$140,d5
00006FC0 6100 0000                  		bsr.w	sub_6C20
00006FC4 78F0                       		moveq	#-$10,d4
00006FC6 3A3C 0140                  		move.w	#$140,d5
00006FCA 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006FCE 322B 0004                  		move.w	4(a3),d1
00006FD2 0241 FFF0                  		andi.w	#-$10,d1
00006FD6 9C41                       		sub.w	d1,d6
00006FD8 6D00                       		blt.s	locret_69F2
00006FDA E84E                       		lsr.w	#4,d6
00006FDC 0C46 000F                  		cmpi.w	#$F,d6
00006FE0 6500                       		bcs.s	loc_69EE
00006FE2 7C0F                       		moveq	#$F,d6
00006FE4                            
00006FE4                            loc_69EE:
00006FE4 6100 0000                  		bsr.w	sub_6B06
00006FE8                            
00006FE8                            locret_69F2:
00006FE8 4E75                       		rts	
00006FEA                            ; End of function sub_6954
00006FEA                            
00006FEA                            
00006FEA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006FEA                            
00006FEA                            
00006FEA                            sub_69F4:				; XREF: sub_6886; LoadTilesAsYouMove
00006FEA 4A12                       		tst.b	(a2)
00006FEC 6700 0000                  		beq.w	locret_6A80
00006FF0 0892 0002                  		bclr	#2,(a2)
00006FF4 6700                       		beq.s	loc_6A3E
00006FF6 0C53 0010                  		cmpi.w	#$10,(a3)
00006FFA 6500                       		bcs.s	loc_6A3E
00006FFC 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
00007000 322B 0004                  		move.w	4(a3),d1
00007004 0241 FFF0                  		andi.w	#-$10,d1
00007008 9841                       		sub.w	d1,d4
0000700A 3F04                       		move.w	d4,-(sp)
0000700C 7AF0                       		moveq	#-$10,d5
0000700E 6100 0000                  		bsr.w	sub_6C20
00007012 381F                       		move.w	(sp)+,d4
00007014 7AF0                       		moveq	#-$10,d5
00007016 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
0000701A 322B 0004                  		move.w	4(a3),d1
0000701E 0241 FFF0                  		andi.w	#-$10,d1
00007022 9C41                       		sub.w	d1,d6
00007024 6D00                       		blt.s	loc_6A3E
00007026 E84E                       		lsr.w	#4,d6
00007028 0446 000E                  		subi.w	#$E,d6
0000702C 6400                       		bcc.s	loc_6A3E
0000702E 4446                       		neg.w	d6
00007030 6100 0000                  		bsr.w	sub_6B06
00007034                            
00007034                            loc_6A3E:
00007034 0892 0003                  		bclr	#3,(a2)
00007038 6700                       		beq.s	locret_6A80
0000703A 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
0000703E 322B 0004                  		move.w	4(a3),d1
00007042 0241 FFF0                  		andi.w	#-$10,d1
00007046 9841                       		sub.w	d1,d4
00007048 3F04                       		move.w	d4,-(sp)
0000704A 3A3C 0140                  		move.w	#$140,d5
0000704E 6100 0000                  		bsr.w	sub_6C20
00007052 381F                       		move.w	(sp)+,d4
00007054 3A3C 0140                  		move.w	#$140,d5
00007058 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
0000705C 322B 0004                  		move.w	4(a3),d1
00007060 0241 FFF0                  		andi.w	#-$10,d1
00007064 9C41                       		sub.w	d1,d6
00007066 6D00                       		blt.s	locret_6A80
00007068 E84E                       		lsr.w	#4,d6
0000706A 0446 000E                  		subi.w	#$E,d6
0000706E 6400                       		bcc.s	locret_6A80
00007070 4446                       		neg.w	d6
00007072 6100 0000                  		bsr.w	sub_6B06
00007076                            
00007076                            locret_6A80:
00007076 4E75                       		rts	
00007078                            ; End of function sub_69F4
00007078                            
00007078                            ; ===========================================================================
00007078 4A12                       		tst.b	(a2)
0000707A 6700                       		beq.s	locret_6AD6
0000707C 0892 0002                  		bclr	#2,(a2)
00007080 6700                       		beq.s	loc_6AAC
00007082 383C 00D0                  		move.w	#$D0,d4
00007086 322B 0004                  		move.w	4(a3),d1
0000708A 0241 FFF0                  		andi.w	#-$10,d1
0000708E 9841                       		sub.w	d1,d4
00007090 3F04                       		move.w	d4,-(sp)
00007092 7AF0                       		moveq	#-$10,d5
00007094 6100 0000                  		bsr.w	sub_6C3C
00007098 381F                       		move.w	(sp)+,d4
0000709A 7AF0                       		moveq	#-$10,d5
0000709C 7C02                       		moveq	#2,d6
0000709E 6100 0000                  		bsr.w	sub_6B06
000070A2                            
000070A2                            loc_6AAC:
000070A2 0892 0003                  		bclr	#3,(a2)
000070A6 6700                       		beq.s	locret_6AD6
000070A8 383C 00D0                  		move.w	#$D0,d4
000070AC 322B 0004                  		move.w	4(a3),d1
000070B0 0241 FFF0                  		andi.w	#-$10,d1
000070B4 9841                       		sub.w	d1,d4
000070B6 3F04                       		move.w	d4,-(sp)
000070B8 3A3C 0140                  		move.w	#$140,d5
000070BC 6100 0000                  		bsr.w	sub_6C3C
000070C0 381F                       		move.w	(sp)+,d4
000070C2 3A3C 0140                  		move.w	#$140,d5
000070C6 7C02                       		moveq	#2,d6
000070C8 6100 0000                  		bsr.w	sub_6B06
000070CC                            
000070CC                            locret_6AD6:
000070CC 4E75                       		rts	
000070CE                            
000070CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000070CE                            
000070CE                            
000070CE                            sub_6AD8:				; XREF: LoadTilesAsYouMove
000070CE 7C15                       		moveq	#$15,d6
000070D0                            ; End of function sub_6AD8
000070D0                            
000070D0                            
000070D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000070D0                            
000070D0                            
000070D0                            sub_6ADA:				; XREF: sub_6954; LoadTilesFromStart2
000070D0 2E3C 0080 0000             		move.l	#$800000,d7
000070D6 2200                       		move.l	d0,d1
000070D8                            
000070D8                            loc_6AE2:
000070D8 48E7 0C00                  		movem.l	d4-d5,-(sp)
000070DC 6100 0000                  		bsr.w	sub_6BD6
000070E0 2001                       		move.l	d1,d0
000070E2 6100 0000                  		bsr.w	sub_6B32
000070E6 5801                       		addq.b	#4,d1
000070E8 0201 007F                  		andi.b	#$7F,d1
000070EC 4CDF 0030                  		movem.l	(sp)+,d4-d5
000070F0 0645 0010                  		addi.w	#$10,d5
000070F4 51CE FFE2                  		dbf	d6,loc_6AE2
000070F8 4E75                       		rts	
000070FA                            ; End of function sub_6ADA
000070FA                            
000070FA                            
000070FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000070FA                            
000070FA                            
000070FA                            sub_6B04:				; XREF: LoadTilesAsYouMove
000070FA 7C0F                       		moveq	#$F,d6
000070FC                            ; End of function sub_6B04
000070FC                            
000070FC                            
000070FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000070FC                            
000070FC                            
000070FC                            sub_6B06:				; XREF: sub_6954
000070FC 2E3C 0080 0000             		move.l	#$800000,d7
00007102 2200                       		move.l	d0,d1
00007104                            
00007104                            loc_6B0E:
00007104 48E7 0C00                  		movem.l	d4-d5,-(sp)
00007108 6100 0000                  		bsr.w	sub_6BD6
0000710C 2001                       		move.l	d1,d0
0000710E 6100 0000                  		bsr.w	sub_6B32
00007112 0641 0100                  		addi.w	#$100,d1
00007116 0241 0FFF                  		andi.w	#$FFF,d1
0000711A 4CDF 0030                  		movem.l	(sp)+,d4-d5
0000711E 0644 0010                  		addi.w	#$10,d4
00007122 51CE FFE0                  		dbf	d6,loc_6B0E
00007126 4E75                       		rts	
00007128                            ; End of function sub_6B06
00007128                            
00007128                            
00007128                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007128                            
00007128                            
00007128                            sub_6B32:				; XREF: sub_6ADA; sub_6B06
00007128 8042                       		or.w	d2,d0
0000712A 4840                       		swap	d0
0000712C 0810 0004                  		btst	#4,(a0)
00007130 6600                       		bne.s	loc_6B6E
00007132 0810 0003                  		btst	#3,(a0)
00007136 6600                       		bne.s	loc_6B4E
00007138 2A80                       		move.l	d0,(a5)
0000713A 2C99                       		move.l	(a1)+,(a6)
0000713C D087                       		add.l	d7,d0
0000713E 2A80                       		move.l	d0,(a5)
00007140 2C99                       		move.l	(a1)+,(a6)
00007142 4E75                       		rts	
00007144                            ; ===========================================================================
00007144                            
00007144                            loc_6B4E:
00007144 2A80                       		move.l	d0,(a5)
00007146 2819                       		move.l	(a1)+,d4
00007148 0A84 0800 0800             		eori.l	#$8000800,d4
0000714E 4844                       		swap	d4
00007150 2C84                       		move.l	d4,(a6)
00007152 D087                       		add.l	d7,d0
00007154 2A80                       		move.l	d0,(a5)
00007156 2819                       		move.l	(a1)+,d4
00007158 0A84 0800 0800             		eori.l	#$8000800,d4
0000715E 4844                       		swap	d4
00007160 2C84                       		move.l	d4,(a6)
00007162 4E75                       		rts	
00007164                            ; ===========================================================================
00007164                            
00007164                            loc_6B6E:
00007164 0810 0003                  		btst	#3,(a0)
00007168 6600                       		bne.s	loc_6B90
0000716A 2A80                       		move.l	d0,(a5)
0000716C 2A19                       		move.l	(a1)+,d5
0000716E 2819                       		move.l	(a1)+,d4
00007170 0A84 1000 1000             		eori.l	#$10001000,d4
00007176 2C84                       		move.l	d4,(a6)
00007178 D087                       		add.l	d7,d0
0000717A 2A80                       		move.l	d0,(a5)
0000717C 0A85 1000 1000             		eori.l	#$10001000,d5
00007182 2C85                       		move.l	d5,(a6)
00007184 4E75                       		rts	
00007186                            ; ===========================================================================
00007186                            
00007186                            loc_6B90:
00007186 2A80                       		move.l	d0,(a5)
00007188 2A19                       		move.l	(a1)+,d5
0000718A 2819                       		move.l	(a1)+,d4
0000718C 0A84 1800 1800             		eori.l	#$18001800,d4
00007192 4844                       		swap	d4
00007194 2C84                       		move.l	d4,(a6)
00007196 D087                       		add.l	d7,d0
00007198 2A80                       		move.l	d0,(a5)
0000719A 0A85 1800 1800             		eori.l	#$18001800,d5
000071A0 4845                       		swap	d5
000071A2 2C85                       		move.l	d5,(a6)
000071A4 4E75                       		rts	
000071A6                            ; End of function sub_6B32
000071A6                            
000071A6                            ; ===========================================================================
000071A6 4E75                       		rts	
000071A8                            ; ===========================================================================
000071A8 2A80                       		move.l	d0,(a5)
000071AA 3A3C 2000                  		move.w	#$2000,d5
000071AE 3819                       		move.w	(a1)+,d4
000071B0 D845                       		add.w	d5,d4
000071B2 3C84                       		move.w	d4,(a6)
000071B4 3819                       		move.w	(a1)+,d4
000071B6 D845                       		add.w	d5,d4
000071B8 3C84                       		move.w	d4,(a6)
000071BA D087                       		add.l	d7,d0
000071BC 2A80                       		move.l	d0,(a5)
000071BE 3819                       		move.w	(a1)+,d4
000071C0 D845                       		add.w	d5,d4
000071C2 3C84                       		move.w	d4,(a6)
000071C4 3819                       		move.w	(a1)+,d4
000071C6 D845                       		add.w	d5,d4
000071C8 3C84                       		move.w	d4,(a6)
000071CA 4E75                       		rts	
000071CC                            
000071CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000071CC                            
000071CC                            
000071CC                            sub_6BD6:				; XREF: sub_6ADA; sub_6B06
000071CC 43F8 B000                  		lea	($FFFFB000).w,a1
000071D0 D86B 0004                  		add.w	4(a3),d4
000071D4 DA53                       		add.w	(a3),d5
000071D6 3604                       		move.w	d4,d3
000071D8 E24B                       		lsr.w	#1,d3
000071DA 0243 0380                  		andi.w	#$380,d3
000071DE E64D                       		lsr.w	#3,d5
000071E0 3005                       		move.w	d5,d0
000071E2 EA48                       		lsr.w	#5,d0
000071E4 0240 007F                  		andi.w	#$7F,d0
000071E8 D043                       		add.w	d3,d0
000071EA 76FF                       		moveq	#-1,d3
000071EC 1634 0000                  		move.b	(a4,d0.w),d3
000071F0 6700                       		beq.s	locret_6C1E
000071F2 5303                       		subq.b	#1,d3
000071F4 0243 007F                  		andi.w	#$7F,d3
000071F8 EE5B                       		ror.w	#7,d3
000071FA D844                       		add.w	d4,d4
000071FC 0244 01E0                  		andi.w	#$1E0,d4
00007200 0245 001E                  		andi.w	#$1E,d5
00007204 D644                       		add.w	d4,d3
00007206 D645                       		add.w	d5,d3
00007208 2043                       		movea.l	d3,a0
0000720A 3610                       		move.w	(a0),d3
0000720C 0243 03FF                  		andi.w	#$3FF,d3
00007210 E74B                       		lsl.w	#3,d3
00007212 D2C3                       		adda.w	d3,a1
00007214                            
00007214                            locret_6C1E:
00007214 4E75                       		rts	
00007216                            ; End of function sub_6BD6
00007216                            
00007216                            
00007216                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007216                            
00007216                            
00007216                            sub_6C20:				; XREF: LoadTilesAsYouMove; et al
00007216 D86B 0004                  		add.w	4(a3),d4
0000721A DA53                       		add.w	(a3),d5
0000721C 0244 00F0                  		andi.w	#$F0,d4
00007220 0245 01F0                  		andi.w	#$1F0,d5
00007224 E94C                       		lsl.w	#4,d4
00007226 E44D                       		lsr.w	#2,d5
00007228 D845                       		add.w	d5,d4
0000722A 7003                       		moveq	#3,d0
0000722C 4840                       		swap	d0
0000722E 3004                       		move.w	d4,d0
00007230 4E75                       		rts	
00007232                            ; End of function sub_6C20
00007232                            
00007232                            
00007232                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007232                            ; not used
00007232                            
00007232                            
00007232                            sub_6C3C:
00007232 D86B 0004                  		add.w	4(a3),d4
00007236 DA53                       		add.w	(a3),d5
00007238 0244 00F0                  		andi.w	#$F0,d4
0000723C 0245 01F0                  		andi.w	#$1F0,d5
00007240 E94C                       		lsl.w	#4,d4
00007242 E44D                       		lsr.w	#2,d5
00007244 D845                       		add.w	d5,d4
00007246 7002                       		moveq	#2,d0
00007248 4840                       		swap	d0
0000724A 3004                       		move.w	d4,d0
0000724C 4E75                       		rts	
0000724E                            ; End of function sub_6C3C
0000724E                            
0000724E                            ; ---------------------------------------------------------------------------
0000724E                            ; Subroutine to	load tiles as soon as the level	appears
0000724E                            ; ---------------------------------------------------------------------------
0000724E                            
0000724E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000724E                            
0000724E                            
0000724E                            LoadTilesFromStart:			; XREF: Level; EndingSequence
0000724E 4BF9 00C0 0004             		lea	($C00004).l,a5
00007254 4DF9 00C0 0000             		lea	($C00000).l,a6
0000725A 47F8 F700                  		lea	($FFFFF700).w,a3
0000725E 49F8 A400                  		lea	($FFFFA400).w,a4
00007262 343C 4000                  		move.w	#$4000,d2
00007266 6100                       		bsr.s	LoadTilesFromStart2
00007268 47F8 F708                  		lea	($FFFFF708).w,a3
0000726C 49F8 A440                  		lea	($FFFFA440).w,a4
00007270 343C 6000                  		move.w	#$6000,d2
00007274                            ; End of function LoadTilesFromStart
00007274                            
00007274                            
00007274                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007274                            
00007274                            
00007274                            LoadTilesFromStart2:			; XREF: LoadTilesFromStart
00007274 78F0                       		moveq	#-$10,d4
00007276 7C0F                       		moveq	#$F,d6
00007278                            
00007278                            loc_6C82:
00007278 48E7 0E00                  		movem.l	d4-d6,-(sp)
0000727C 7A00                       		moveq	#0,d5
0000727E 3204                       		move.w	d4,d1
00007280 6100 FF94                  		bsr.w	sub_6C20
00007284 3801                       		move.w	d1,d4
00007286 7A00                       		moveq	#0,d5
00007288 7C1F                       		moveq	#$1F,d6
0000728A 6100 FE44                  		bsr.w	sub_6ADA
0000728E 4CDF 0070                  		movem.l	(sp)+,d4-d6
00007292 0644 0010                  		addi.w	#$10,d4
00007296 51CE FFE0                  		dbf	d6,loc_6C82
0000729A 4E75                       		rts	
0000729C                            ; End of function LoadTilesFromStart2
0000729C                            
0000729C                            ; ---------------------------------------------------------------------------
0000729C                            ; Main Load Block loading subroutine
0000729C                            ; ---------------------------------------------------------------------------
0000729C                            
0000729C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000729C                            
0000729C                            
0000729C                            MainLoadBlockLoad:			; XREF: Level; EndingSequence
0000729C 7000                       		moveq	#0,d0
0000729E 1038 FE10                  		move.b	($FFFFFE10).w,d0
000072A2 E948                       		lsl.w	#4,d0
000072A4 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
000072AA 45F2 0000                  		lea	(a2,d0.w),a2
000072AE 2F0A                       		move.l	a2,-(sp)
000072B0 588A                       		addq.l	#4,a2
000072B2 205A                       		movea.l	(a2)+,a0
000072B4 43F8 B000                  		lea	($FFFFB000).w,a1 ; RAM address for 16x16 mappings
000072B8 303C 0000                  		move.w	#0,d0
000072BC 6100 A684                  		bsr.w	EniDec
000072C0 205A                       		movea.l	(a2)+,a0
000072C2 43F9 00FF 0000             		lea	($FF0000).l,a1	; RAM address for 256x256 mappings
000072C8 6100 A7F6                  		bsr.w	KosDec
000072CC 6100 0000                  		bsr.w	LevelLayoutLoad
000072D0 301A                       		move.w	(a2)+,d0
000072D2 3012                       		move.w	(a2),d0
000072D4 0240 00FF                  		andi.w	#$FF,d0
000072D8 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; is level SBZ3 (LZ4) ?
000072DE 6600                       		bne.s	MLB_ChkSBZPal	; if not, branch
000072E0 700C                       		moveq	#$C,d0		; use SB3 pallet
000072E2                            
000072E2                            MLB_ChkSBZPal:
000072E2 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2?
000072E8 6700                       		beq.s	MLB_UsePal0E	; if yes, branch
000072EA 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; is level FZ?
000072F0 6600                       		bne.s	MLB_NormalPal	; if not, branch
000072F2                            
000072F2                            MLB_UsePal0E:
000072F2 700E                       		moveq	#$E,d0		; use SBZ2/FZ pallet
000072F4                            
000072F4                            MLB_NormalPal:
000072F4 6100 AFF0                  		bsr.w	PalLoad1	; load pallet (based on	d0)
000072F8 245F                       		movea.l	(sp)+,a2
000072FA 584A                       		addq.w	#4,a2
000072FC 7000                       		moveq	#0,d0
000072FE 1012                       		move.b	(a2),d0
00007300 6700                       		beq.s	locret_6D10
00007302 6100 A4A0                  		bsr.w	LoadPLC		; load pattern load cues
00007306                            
00007306                            locret_6D10:
00007306 4E75                       		rts	
00007308                            ; End of function MainLoadBlockLoad
00007308                            
00007308                            ; ---------------------------------------------------------------------------
00007308                            ; Level	layout loading subroutine
00007308                            ; ---------------------------------------------------------------------------
00007308                            
00007308                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007308                            
00007308                            
00007308                            LevelLayoutLoad:			; XREF: TitleScreen; MainLoadBlockLoad
00007308 47F8 A400                  		lea	($FFFFA400).w,a3
0000730C 323C 01FF                  		move.w	#$1FF,d1
00007310 7000                       		moveq	#0,d0
00007312                            
00007312                            LevLoad_ClrRam:
00007312 26C0                       		move.l	d0,(a3)+
00007314 51C9 FFFC                  		dbf	d1,LevLoad_ClrRam ; clear the RAM ($FFFFA400-A7FF)
00007318                            
00007318 47F8 A400                  		lea	($FFFFA400).w,a3 ; RAM address for level layout
0000731C 7200                       		moveq	#0,d1
0000731E 6100 0000                  		bsr.w	LevelLayoutLoad2 ; load	level layout into RAM
00007322 47F8 A440                  		lea	($FFFFA440).w,a3 ; RAM address for background layout
00007326 7202                       		moveq	#2,d1
00007328                            ; End of function LevelLayoutLoad
00007328                            
00007328                            ; "LevelLayoutLoad2" is	run twice - for	the level and the background
00007328                            
00007328                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007328                            
00007328                            
00007328                            LevelLayoutLoad2:			; XREF: LevelLayoutLoad
00007328 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000732C ED08                       		lsl.b	#6,d0
0000732E EA48                       		lsr.w	#5,d0
00007330 3400                       		move.w	d0,d2
00007332 D040                       		add.w	d0,d0
00007334 D042                       		add.w	d2,d0
00007336 D041                       		add.w	d1,d0
00007338 43F9 0000 0000             		lea	(Level_Index).l,a1
0000733E 3031 0000                  		move.w	(a1,d0.w),d0
00007342 43F1 0000                  		lea	(a1,d0.w),a1
00007346 7200                       		moveq	#0,d1
00007348 3401                       		move.w	d1,d2
0000734A 1219                       		move.b	(a1)+,d1	; load level width (in tiles)
0000734C 1419                       		move.b	(a1)+,d2	; load level height (in	tiles)
0000734E                            
0000734E                            LevLoad_NumRows:
0000734E 3001                       		move.w	d1,d0
00007350 204B                       		movea.l	a3,a0
00007352                            
00007352                            LevLoad_Row:
00007352 10D9                       		move.b	(a1)+,(a0)+
00007354 51C8 FFFC                  		dbf	d0,LevLoad_Row	; load 1 row
00007358 47EB 0080                  		lea	$80(a3),a3	; do next row
0000735C 51CA FFF0                  		dbf	d2,LevLoad_NumRows ; repeat for	number of rows
00007360 4E75                       		rts	
00007362                            ; End of function LevelLayoutLoad2
00007362                            
00007362                            ; ---------------------------------------------------------------------------
00007362                            ; Dynamic screen resize	loading	subroutine
00007362                            ; ---------------------------------------------------------------------------
00007362                            
00007362                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007362                            
00007362                            
00007362                            DynScrResizeLoad:			; XREF: DeformBgLayer
00007362 7000                       		moveq	#0,d0
00007364 1038 FE10                  		move.b	($FFFFFE10).w,d0
00007368 D040                       		add.w	d0,d0
0000736A 303B 0000                  		move.w	Resize_Index(pc,d0.w),d0
0000736E 4EBB 0000                  		jsr	Resize_Index(pc,d0.w)
00007372 7202                       		moveq	#2,d1
00007374 3038 F726                  		move.w	($FFFFF726).w,d0
00007378 9078 F72E                  		sub.w	($FFFFF72E).w,d0
0000737C 6700                       		beq.s	locret_6DAA
0000737E 6400                       		bcc.s	loc_6DAC
00007380 4441                       		neg.w	d1
00007382 3038 F704                  		move.w	($FFFFF704).w,d0
00007386 B078 F726                  		cmp.w	($FFFFF726).w,d0
0000738A 6300                       		bls.s	loc_6DA0
0000738C 31C0 F72E                  		move.w	d0,($FFFFF72E).w
00007390 0278 FFFE F72E             		andi.w	#-2,($FFFFF72E).w
00007396                            
00007396                            loc_6DA0:
00007396 D378 F72E                  		add.w	d1,($FFFFF72E).w
0000739A 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
000073A0                            
000073A0                            locret_6DAA:
000073A0 4E75                       		rts	
000073A2                            ; ===========================================================================
000073A2                            
000073A2                            loc_6DAC:				; XREF: DynScrResizeLoad
000073A2 3038 F704                  		move.w	($FFFFF704).w,d0
000073A6 5040                       		addq.w	#8,d0
000073A8 B078 F72E                  		cmp.w	($FFFFF72E).w,d0
000073AC 6500                       		bcs.s	loc_6DC4
000073AE 0838 0001 D022             		btst	#1,($FFFFD022).w
000073B4 6700                       		beq.s	loc_6DC4
000073B6 D241                       		add.w	d1,d1
000073B8 D241                       		add.w	d1,d1
000073BA                            
000073BA                            loc_6DC4:
000073BA D378 F72E                  		add.w	d1,($FFFFF72E).w
000073BE 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
000073C4 4E75                       		rts	
000073C6                            ; End of function DynScrResizeLoad
000073C6                            
000073C6                            ; ===========================================================================
000073C6                            ; ---------------------------------------------------------------------------
000073C6                            ; Offset index for dynamic screen resizing
000073C6                            ; ---------------------------------------------------------------------------
000073C6 0000 0000                  Resize_Index:	dc.w Resize_GHZ-Resize_Index, Resize_LZ-Resize_Index
000073CA 0000 0000                  		dc.w Resize_MZ-Resize_Index, Resize_SLZ-Resize_Index
000073CE 0000 0000                  		dc.w Resize_SYZ-Resize_Index, Resize_SBZ-Resize_Index
000073D2 0000                       		dc.w Resize_Ending-Resize_Index
000073D4                            ; ===========================================================================
000073D4                            ; ---------------------------------------------------------------------------
000073D4                            ; Green	Hill Zone dynamic screen resizing
000073D4                            ; ---------------------------------------------------------------------------
000073D4                            
000073D4                            Resize_GHZ:				; XREF: Resize_Index
000073D4 7000                       		moveq	#0,d0
000073D6 1038 FE11                  		move.b	($FFFFFE11).w,d0
000073DA D040                       		add.w	d0,d0
000073DC 303B 0000                  		move.w	Resize_GHZx(pc,d0.w),d0
000073E0 4EFB 0000                  		jmp	Resize_GHZx(pc,d0.w)
000073E4                            ; ===========================================================================
000073E4 0000                       Resize_GHZx:	dc.w Resize_GHZ1-Resize_GHZx
000073E6 0000                       		dc.w Resize_GHZ2-Resize_GHZx
000073E8 0000                       		dc.w Resize_GHZ3-Resize_GHZx
000073EA                            ; ===========================================================================
000073EA                            
000073EA                            Resize_GHZ1:
000073EA 31FC 0300 F726             		move.w	#$300,($FFFFF726).w ; set lower	y-boundary
000073F0 0C78 1780 F700             		cmpi.w	#$1780,($FFFFF700).w ; has the camera reached $1780 on x-axis?
000073F6 6500                       		bcs.s	locret_6E08	; if not, branch
000073F8 31FC 0400 F726             		move.w	#$400,($FFFFF726).w ; set lower	y-boundary
000073FE                            
000073FE                            locret_6E08:
000073FE 4E75                       		rts	
00007400                            ; ===========================================================================
00007400                            
00007400                            Resize_GHZ2:
00007400 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00007406 0C78 0ED0 F700             		cmpi.w	#$ED0,($FFFFF700).w
0000740C 6500                       		bcs.s	locret_6E3A
0000740E 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
00007414 0C78 1600 F700             		cmpi.w	#$1600,($FFFFF700).w
0000741A 6500                       		bcs.s	locret_6E3A
0000741C 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
00007422 0C78 1D60 F700             		cmpi.w	#$1D60,($FFFFF700).w
00007428 6500                       		bcs.s	locret_6E3A
0000742A 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00007430                            
00007430                            locret_6E3A:
00007430 4E75                       		rts	
00007432                            ; ===========================================================================
00007432                            
00007432                            Resize_GHZ3:
00007432 7000                       		moveq	#0,d0
00007434 1038 F742                  		move.b	($FFFFF742).w,d0
00007438 303B 0000                  		move.w	off_6E4A(pc,d0.w),d0
0000743C 4EFB 0000                  		jmp	off_6E4A(pc,d0.w)
00007440                            ; ===========================================================================
00007440 0000                       off_6E4A:	dc.w Resize_GHZ3main-off_6E4A
00007442 0000                       		dc.w Resize_GHZ3boss-off_6E4A
00007444 0000                       		dc.w Resize_GHZ3end-off_6E4A
00007446                            ; ===========================================================================
00007446                            
00007446                            Resize_GHZ3main:
00007446 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
0000744C 0C78 0380 F700             		cmpi.w	#$380,($FFFFF700).w
00007452 6500                       		bcs.s	locret_6E96
00007454 31FC 0310 F726             		move.w	#$310,($FFFFF726).w
0000745A 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
00007460 6500                       		bcs.s	locret_6E96
00007462 0C78 0280 F704             		cmpi.w	#$280,($FFFFF704).w
00007468 6500                       		bcs.s	loc_6E98
0000746A 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
00007470 0C78 1380 F700             		cmpi.w	#$1380,($FFFFF700).w
00007476 6400                       		bcc.s	loc_6E8E
00007478 31FC 04C0 F726             		move.w	#$4C0,($FFFFF726).w
0000747E 31FC 04C0 F72E             		move.w	#$4C0,($FFFFF72E).w
00007484                            
00007484                            loc_6E8E:
00007484 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
0000748A 6400                       		bcc.s	loc_6E98
0000748C                            
0000748C                            locret_6E96:
0000748C 4E75                       		rts	
0000748E                            ; ===========================================================================
0000748E                            
0000748E                            loc_6E98:
0000748E 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00007494 5438 F742                  		addq.b	#2,($FFFFF742).w
00007498 4E75                       		rts	
0000749A                            ; ===========================================================================
0000749A                            
0000749A                            Resize_GHZ3boss:
0000749A 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
000074A0 6400                       		bcc.s	loc_6EB0
000074A2 5538 F742                  		subq.b	#2,($FFFFF742).w
000074A6                            
000074A6                            loc_6EB0:
000074A6 0C78 2960 F700             		cmpi.w	#$2960,($FFFFF700).w
000074AC 6500                       		bcs.s	locret_6EE8
000074AE 6100 0000                  		bsr.w	SingleObjLoad
000074B2 6600                       		bne.s	loc_6ED0
000074B4 12BC 003D                  		move.b	#$3D,0(a1)	; load GHZ boss	object
000074B8 337C 2A60 0008             		move.w	#$2A60,8(a1)
000074BE 337C 0280 000C             		move.w	#$280,$C(a1)
000074C4                            
000074C4                            loc_6ED0:
000074C4 303C 008C                  		move.w	#$8C,d0
000074C8 6100 A0F0                  		bsr.w	PlaySound	; play boss music
000074CC 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000074D2 5438 F742                  		addq.b	#2,($FFFFF742).w
000074D6 7011                       		moveq	#$11,d0
000074D8 6000 A2CA                  		bra.w	LoadPLC		; load boss patterns
000074DC                            ; ===========================================================================
000074DC                            
000074DC                            locret_6EE8:
000074DC 4E75                       		rts	
000074DE                            ; ===========================================================================
000074DE                            
000074DE                            Resize_GHZ3end:
000074DE 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000074E4 4E75                       		rts	
000074E6                            ; ===========================================================================
000074E6                            ; ---------------------------------------------------------------------------
000074E6                            ; Labyrinth Zone dynamic screen	resizing
000074E6                            ; ---------------------------------------------------------------------------
000074E6                            
000074E6                            Resize_LZ:				; XREF: Resize_Index
000074E6 7000                       		moveq	#0,d0
000074E8 1038 FE11                  		move.b	($FFFFFE11).w,d0
000074EC D040                       		add.w	d0,d0
000074EE 303B 0000                  		move.w	Resize_LZx(pc,d0.w),d0
000074F2 4EFB 0000                  		jmp	Resize_LZx(pc,d0.w)
000074F6                            ; ===========================================================================
000074F6 0000                       Resize_LZx:	dc.w Resize_LZ12-Resize_LZx
000074F8 0000                       		dc.w Resize_LZ12-Resize_LZx
000074FA 0000                       		dc.w Resize_LZ3-Resize_LZx
000074FC 0000                       		dc.w Resize_SBZ3-Resize_LZx
000074FE                            ; ===========================================================================
000074FE                            
000074FE                            Resize_LZ12:
000074FE 4E75                       		rts	
00007500                            ; ===========================================================================
00007500                            
00007500                            Resize_LZ3:
00007500 7000                       		moveq	#0,d0
00007502 1038 F742                  		move.b	($FFFFF742).w,d0
00007506 303B 0000                  		move.w	off_6E4A2(pc,d0.w),d0
0000750A 4EFB 0000                  		jmp	off_6E4A2(pc,d0.w)
0000750E                            ; ===========================================================================
0000750E                            off_6E4A2:	
0000750E 0000                       		dc.w Resize_LZ3boss-off_6E4A2
00007510 0000                       		dc.w Resize_LZ3end-off_6E4A2
00007512                            ; ===========================================================================
00007512                            Resize_LZ3boss:
00007512 4A38 F742                  		tst.b	($FFFFF742).w
00007516 6600                       		bne.s	locret_6F62
00007518 0C78 1CA0 F700             		cmpi.w	#$1CA0,($FFFFF700).w
0000751E 6500                       		bcs.s	locret_6F62
00007520 31FC 0640 F726             		move.w	#$640,($FFFFF726).w ; set lower	y-boundary
00007526 31FC 0000 F634             		move.w	#0,($FFFFF634).w ; disable pallet cycling
0000752C                            
0000752C 6100 0000                  		bsr.w	SingleObjLoad
00007530 6600                       		bne.s	loc_6F4A
00007532 12BC 0077                  		move.b	#$77,0(a1)	; load LZ boss object
00007536 337C 1EA0 0008             		move.w	#$1EA0,8(a1)
0000753C 337C 06E0 000C             		move.w	#$6E0,$C(a1)
00007542                            loc_6F4A:
00007542 303C 008C                  		move.w	#$8C,d0
00007546 6100 A072                  		bsr.w	PlaySound	; play boss music
0000754A 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007550 5438 F742                  		addq.b	#2,($FFFFF742).w
00007554 7020                       		moveq	#$20,d0
00007556 6000 A24C                  		bra.w	LoadPLC		; load boss patterns
0000755A                            ; ===========================================================================
0000755A                            
0000755A                            locret_6F62:
0000755A 4E75                       		rts	
0000755C                            ; ===========================================================================
0000755C                            
0000755C                            Resize_LZ3end:
0000755C 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007562 4E75                       		rts	
00007564                            ; ===========================================================================
00007564                            
00007564                            Resize_SBZ3:
00007564 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
0000756A 6500                       		bcs.s	locret_6F8C
0000756C 0C78 0018 D00C             		cmpi.w	#$18,($FFFFD00C).w ; has Sonic reached the top of the level?
00007572 6400                       		bcc.s	locret_6F8C	; if not, branch
00007574 4238 FE30                  		clr.b	($FFFFFE30).w
00007578 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000757E 31FC 0502 FE10             		move.w	#$502,($FFFFFE10).w ; set level	number to 0502 (FZ)
00007584 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; freeze Sonic
0000758A                            
0000758A                            locret_6F8C:
0000758A 4E75                       		rts	
0000758C                            ; ===========================================================================
0000758C                            ; ---------------------------------------------------------------------------
0000758C                            ; Marble Zone dynamic screen resizing
0000758C                            ; ---------------------------------------------------------------------------
0000758C                            
0000758C                            Resize_MZ:				; XREF: Resize_Index
0000758C 7000                       		moveq	#0,d0
0000758E 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007592 D040                       		add.w	d0,d0
00007594 303B 0000                  		move.w	Resize_MZx(pc,d0.w),d0
00007598 4EFB 0000                  		jmp	Resize_MZx(pc,d0.w)
0000759C                            ; ===========================================================================
0000759C 0000                       Resize_MZx:	dc.w Resize_MZ1-Resize_MZx
0000759E 0000                       		dc.w Resize_MZ2-Resize_MZx
000075A0 0000                       		dc.w Resize_MZ3-Resize_MZx
000075A2                            ; ===========================================================================
000075A2                            
000075A2                            Resize_MZ1:
000075A2 7000                       		moveq	#0,d0
000075A4 1038 F742                  		move.b	($FFFFF742).w,d0
000075A8 303B 0000                  		move.w	off_6FB2(pc,d0.w),d0
000075AC 4EFB 0000                  		jmp	off_6FB2(pc,d0.w)
000075B0                            ; ===========================================================================
000075B0 0000                       off_6FB2:	dc.w loc_6FBA-off_6FB2
000075B2 0000                       		dc.w loc_6FEA-off_6FB2
000075B4 0000                       		dc.w loc_702E-off_6FB2
000075B6 0000                       		dc.w loc_7050-off_6FB2
000075B8                            ; ===========================================================================
000075B8                            
000075B8                            loc_6FBA:
000075B8 31FC 01D0 F726             		move.w	#$1D0,($FFFFF726).w
000075BE 0C78 0700 F700             		cmpi.w	#$700,($FFFFF700).w
000075C4 6500                       		bcs.s	locret_6FE8
000075C6 31FC 0220 F726             		move.w	#$220,($FFFFF726).w
000075CC 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
000075D2 6500                       		bcs.s	locret_6FE8
000075D4 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
000075DA 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
000075E0 6500                       		bcs.s	locret_6FE8
000075E2 5438 F742                  		addq.b	#2,($FFFFF742).w
000075E6                            
000075E6                            locret_6FE8:
000075E6 4E75                       		rts	
000075E8                            ; ===========================================================================
000075E8                            
000075E8                            loc_6FEA:
000075E8 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
000075EE 6400                       		bcc.s	loc_6FF8
000075F0 5538 F742                  		subq.b	#2,($FFFFF742).w
000075F4 4E75                       		rts	
000075F6                            ; ===========================================================================
000075F6                            
000075F6                            loc_6FF8:
000075F6 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
000075FC 0C78 0E00 F700             		cmpi.w	#$E00,($FFFFF700).w
00007602 6400                       		bcc.s	locret_702C
00007604 31FC 0340 F72C             		move.w	#$340,($FFFFF72C).w
0000760A 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
00007610 0C78 0A90 F700             		cmpi.w	#$A90,($FFFFF700).w
00007616 6400                       		bcc.s	locret_702C
00007618 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
0000761E 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
00007624 6500                       		bcs.s	locret_702C
00007626 5438 F742                  		addq.b	#2,($FFFFF742).w
0000762A                            
0000762A                            locret_702C:
0000762A 4E75                       		rts	
0000762C                            ; ===========================================================================
0000762C                            
0000762C                            loc_702E:
0000762C 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
00007632 6400                       		bcc.s	loc_703C
00007634 5538 F742                  		subq.b	#2,($FFFFF742).w
00007638 4E75                       		rts	
0000763A                            ; ===========================================================================
0000763A                            
0000763A                            loc_703C:
0000763A 0C78 0500 F704             		cmpi.w	#$500,($FFFFF704).w
00007640 6500                       		bcs.s	locret_704E
00007642 31FC 0500 F72C             		move.w	#$500,($FFFFF72C).w
00007648 5438 F742                  		addq.b	#2,($FFFFF742).w
0000764C                            
0000764C                            locret_704E:
0000764C 4E75                       		rts	
0000764E                            ; ===========================================================================
0000764E                            
0000764E                            loc_7050:
0000764E 0C78 0E70 F700             		cmpi.w	#$E70,($FFFFF700).w
00007654 6500                       		bcs.s	locret_7072
00007656 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0000765C 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
00007662 0C78 1430 F700             		cmpi.w	#$1430,($FFFFF700).w
00007668 6500                       		bcs.s	locret_7072
0000766A 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00007670                            
00007670                            locret_7072:
00007670 4E75                       		rts	
00007672                            ; ===========================================================================
00007672                            
00007672                            Resize_MZ2:
00007672 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
00007678 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
0000767E 6500                       		bcs.s	locret_7088
00007680 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
00007686                            
00007686                            locret_7088:
00007686 4E75                       		rts	
00007688                            ; ===========================================================================
00007688                            
00007688                            Resize_MZ3:
00007688 7000                       		moveq	#0,d0
0000768A 1038 F742                  		move.b	($FFFFF742).w,d0
0000768E 303B 0000                  		move.w	off_7098(pc,d0.w),d0
00007692 4EFB 0000                  		jmp	off_7098(pc,d0.w)
00007696                            ; ===========================================================================
00007696 0000                       off_7098:	dc.w Resize_MZ3boss-off_7098
00007698 0000                       		dc.w Resize_MZ3end-off_7098
0000769A                            ; ===========================================================================
0000769A                            
0000769A                            Resize_MZ3boss:
0000769A 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
000076A0 0C78 1560 F700             		cmpi.w	#$1560,($FFFFF700).w
000076A6 6500                       		bcs.s	locret_70E8
000076A8 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
000076AE 0C78 17F0 F700             		cmpi.w	#$17F0,($FFFFF700).w
000076B4 6500                       		bcs.s	locret_70E8
000076B6 6100 0000                  		bsr.w	SingleObjLoad
000076BA 6600                       		bne.s	loc_70D0
000076BC 12BC 0073                  		move.b	#$73,0(a1)	; load MZ boss object
000076C0 337C 19F0 0008             		move.w	#$19F0,8(a1)
000076C6 337C 022C 000C             		move.w	#$22C,$C(a1)
000076CC                            
000076CC                            loc_70D0:
000076CC 303C 008C                  		move.w	#$8C,d0
000076D0 6100 9EE8                  		bsr.w	PlaySound	; play boss music
000076D4 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000076DA 5438 F742                  		addq.b	#2,($FFFFF742).w
000076DE 7011                       		moveq	#$11,d0
000076E0 6000 A0C2                  		bra.w	LoadPLC		; load boss patterns
000076E4                            ; ===========================================================================
000076E4                            
000076E4                            locret_70E8:
000076E4 4E75                       		rts	
000076E6                            ; ===========================================================================
000076E6                            
000076E6                            Resize_MZ3end:
000076E6 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000076EC 4E75                       		rts	
000076EE                            ; ===========================================================================
000076EE                            ; ---------------------------------------------------------------------------
000076EE                            ; Star Light Zone dynamic screen resizing
000076EE                            ; ---------------------------------------------------------------------------
000076EE                            
000076EE                            Resize_SLZ:				; XREF: Resize_Index
000076EE 7000                       		moveq	#0,d0
000076F0 1038 FE11                  		move.b	($FFFFFE11).w,d0
000076F4 D040                       		add.w	d0,d0
000076F6 303B 0000                  		move.w	Resize_SLZx(pc,d0.w),d0
000076FA 4EFB 0000                  		jmp	Resize_SLZx(pc,d0.w)
000076FE                            ; ===========================================================================
000076FE 0000                       Resize_SLZx:	dc.w Resize_SLZ1-Resize_SLZx
00007700 0000                       		dc.w Resize_SLZ2-Resize_SLZx
00007702 0000                       		dc.w Resize_SLZ3-Resize_SLZx
00007704                            ; ===========================================================================
00007704                            
00007704                            Resize_SLZ1:
00007704 31FC 0100 F726             		move.w	#$100,($FFFFF726).w ; set lower	y-boundary
0000770A 4E75                       		rts	
0000770C                            
0000770C                            Resize_SLZ2:
0000770C 4E75                       		rts	
0000770E                            ; ===========================================================================
0000770E                            
0000770E                            Resize_SLZ3:
0000770E 7000                       		moveq	#0,d0
00007710 1038 F742                  		move.b	($FFFFF742).w,d0
00007714 303B 0000                  		move.w	off_7118(pc,d0.w),d0
00007718 4EFB 0000                  		jmp	off_7118(pc,d0.w)
0000771C                            ; ===========================================================================
0000771C 0000                       off_7118:	dc.w Resize_SLZ3main-off_7118
0000771E 0000                       		dc.w Resize_SLZ3boss-off_7118
00007720 0000                       		dc.w Resize_SLZ3end-off_7118
00007722                            ; ===========================================================================
00007722                            
00007722                            Resize_SLZ3main:
00007722 0C78 1E70 F700             		cmpi.w	#$1E70,($FFFFF700).w
00007728 6500                       		bcs.s	locret_7130
0000772A 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00007730 5438 F742                  		addq.b	#2,($FFFFF742).w
00007734                            
00007734                            locret_7130:
00007734 4E75                       		rts	
00007736                            ; ===========================================================================
00007736                            
00007736                            Resize_SLZ3boss:
00007736 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
0000773C 6500                       		bcs.s	locret_715C
0000773E 6100 0000                  		bsr.w	SingleObjLoad
00007742 6600                       		bne.s	loc_7144
00007744 12BC 007A                  		move.b	#$7A,(a1)	; load SLZ boss	object
00007748                            
00007748                            loc_7144:
00007748 303C 008C                  		move.w	#$8C,d0
0000774C 6100 9E6C                  		bsr.w	PlaySound	; play boss music
00007750 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007756 5438 F742                  		addq.b	#2,($FFFFF742).w
0000775A 7011                       		moveq	#$11,d0
0000775C 6000 A046                  		bra.w	LoadPLC		; load boss patterns
00007760                            ; ===========================================================================
00007760                            
00007760                            locret_715C:
00007760 4E75                       		rts	
00007762                            ; ===========================================================================
00007762                            
00007762                            Resize_SLZ3end:
00007762 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007768 4E75                       		rts
0000776A 4E75                       		rts
0000776C                            ; ===========================================================================
0000776C                            ; ---------------------------------------------------------------------------
0000776C                            ; Spring Yard Zone dynamic screen resizing
0000776C                            ; ---------------------------------------------------------------------------
0000776C                            
0000776C                            Resize_SYZ:				; XREF: Resize_Index
0000776C 7000                       		moveq	#0,d0
0000776E 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007772 D040                       		add.w	d0,d0
00007774 303B 0000                  		move.w	Resize_SYZx(pc,d0.w),d0
00007778 4EFB 0000                  		jmp	Resize_SYZx(pc,d0.w)
0000777C                            ; ===========================================================================
0000777C 0000                       Resize_SYZx:	dc.w Resize_SYZ1-Resize_SYZx
0000777E 0000                       		dc.w Resize_SYZ2-Resize_SYZx
00007780 0000                       		dc.w Resize_SYZ3-Resize_SYZx
00007782                            ; ===========================================================================
00007782                            
00007782                            Resize_SYZ1:
00007782 4E75                       		rts	
00007784                            ; ===========================================================================
00007784                            
00007784                            Resize_SYZ2:
00007784 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
0000778A 0C78 25A0 F700             		cmpi.w	#$25A0,($FFFFF700).w
00007790 6500                       		bcs.s	locret_71A2
00007792 31FC 0420 F726             		move.w	#$420,($FFFFF726).w
00007798 0C78 04D0 D00C             		cmpi.w	#$4D0,($FFFFD00C).w
0000779E 6500                       		bcs.s	locret_71A2
000077A0 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
000077A6                            
000077A6                            locret_71A2:
000077A6 4E75                       		rts	
000077A8                            ; ===========================================================================
000077A8                            
000077A8                            Resize_SYZ3:
000077A8 7000                       		moveq	#0,d0
000077AA 1038 F742                  		move.b	($FFFFF742).w,d0
000077AE 303B 0000                  		move.w	off_71B2(pc,d0.w),d0
000077B2 4EFB 0000                  		jmp	off_71B2(pc,d0.w)
000077B6                            ; ===========================================================================
000077B6 0000                       off_71B2:	dc.w Resize_SYZ3main-off_71B2
000077B8 0000                       		dc.w Resize_SYZ3boss-off_71B2
000077BA 0000                       		dc.w Resize_SYZ3end-off_71B2
000077BC                            ; ===========================================================================
000077BC                            
000077BC                            Resize_SYZ3main:
000077BC 0C78 2AC0 F700             		cmpi.w	#$2AC0,($FFFFF700).w
000077C2 6500                       		bcs.s	locret_71CE
000077C4 6100 0000                  		bsr.w	SingleObjLoad
000077C8 6600                       		bne.s	locret_71CE
000077CA 12BC 0076                  		move.b	#$76,(a1)	; load blocks that boss	picks up
000077CE 5438 F742                  		addq.b	#2,($FFFFF742).w
000077D2                            
000077D2                            locret_71CE:
000077D2 4E75                       		rts	
000077D4                            ; ===========================================================================
000077D4                            
000077D4                            Resize_SYZ3boss:
000077D4 0C78 2C00 F700             		cmpi.w	#$2C00,($FFFFF700).w
000077DA 6500                       		bcs.s	locret_7200
000077DC 31FC 04CC F726             		move.w	#$4CC,($FFFFF726).w
000077E2 6100 0000                  		bsr.w	SingleObjLoad
000077E6 6600                       		bne.s	loc_71EC
000077E8 12BC 0075                  		move.b	#$75,(a1)	; load SYZ boss	object
000077EC 5438 F742                  		addq.b	#2,($FFFFF742).w
000077F0                            
000077F0                            loc_71EC:
000077F0 303C 008C                  		move.w	#$8C,d0
000077F4 6100 9DC4                  		bsr.w	PlaySound	; play boss music
000077F8 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000077FE 7011                       		moveq	#$11,d0
00007800 6000 9FA2                  		bra.w	LoadPLC		; load boss patterns
00007804                            ; ===========================================================================
00007804                            
00007804                            locret_7200:
00007804 4E75                       		rts	
00007806                            ; ===========================================================================
00007806                            
00007806                            Resize_SYZ3end:
00007806 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
0000780C 4E75                       		rts	
0000780E                            ; ===========================================================================
0000780E                            ; ---------------------------------------------------------------------------
0000780E                            ; Scrap	Brain Zone dynamic screen resizing
0000780E                            ; ---------------------------------------------------------------------------
0000780E                            
0000780E                            Resize_SBZ:				; XREF: Resize_Index
0000780E 7000                       		moveq	#0,d0
00007810 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007814 D040                       		add.w	d0,d0
00007816 303B 0000                  		move.w	Resize_SBZx(pc,d0.w),d0
0000781A 4EFB 0000                  		jmp	Resize_SBZx(pc,d0.w)
0000781E                            ; ===========================================================================
0000781E 0000                       Resize_SBZx:	dc.w Resize_SBZ1-Resize_SBZx
00007820 0000                       		dc.w Resize_SBZ2-Resize_SBZx
00007822 0000                       		dc.w Resize_FZ-Resize_SBZx
00007824                            ; ===========================================================================
00007824                            
00007824                            Resize_SBZ1:
00007824 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
0000782A 0C78 1880 F700             		cmpi.w	#$1880,($FFFFF700).w
00007830 6500                       		bcs.s	locret_7242
00007832 31FC 0620 F726             		move.w	#$620,($FFFFF726).w
00007838 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
0000783E 6500                       		bcs.s	locret_7242
00007840 31FC 02A0 F726             		move.w	#$2A0,($FFFFF726).w
00007846                            
00007846                            locret_7242:
00007846 4E75                       		rts	
00007848                            ; ===========================================================================
00007848                            
00007848                            Resize_SBZ2:
00007848 7000                       		moveq	#0,d0
0000784A 1038 F742                  		move.b	($FFFFF742).w,d0
0000784E 303B 0000                  		move.w	off_7252(pc,d0.w),d0
00007852 4EFB 0000                  		jmp	off_7252(pc,d0.w)
00007856                            ; ===========================================================================
00007856 0000                       off_7252:	dc.w Resize_SBZ2main-off_7252
00007858 0000                       		dc.w Resize_SBZ2boss-off_7252
0000785A 0000                       		dc.w Resize_SBZ2boss2-off_7252
0000785C 0000                       		dc.w Resize_SBZ2end-off_7252
0000785E                            ; ===========================================================================
0000785E                            
0000785E                            Resize_SBZ2main:
0000785E 31FC 0800 F726             		move.w	#$800,($FFFFF726).w
00007864 0C78 1800 F700             		cmpi.w	#$1800,($FFFFF700).w
0000786A 6500                       		bcs.s	locret_727A
0000786C 31FC 0510 F726             		move.w	#$510,($FFFFF726).w
00007872 0C78 1E00 F700             		cmpi.w	#$1E00,($FFFFF700).w
00007878 6500                       		bcs.s	locret_727A
0000787A 5438 F742                  		addq.b	#2,($FFFFF742).w
0000787E                            
0000787E                            locret_727A:
0000787E 4E75                       		rts	
00007880                            ; ===========================================================================
00007880                            
00007880                            Resize_SBZ2boss:
00007880 0C78 1EB0 F700             		cmpi.w	#$1EB0,($FFFFF700).w
00007886 6500                       		bcs.s	locret_7298
00007888 6100 0000                  		bsr.w	SingleObjLoad
0000788C 6600                       		bne.s	locret_7298
0000788E 12BC 0083                  		move.b	#$83,(a1)	; load collapsing block	object
00007892 5438 F742                  		addq.b	#2,($FFFFF742).w
00007896 701E                       		moveq	#$1E,d0
00007898 6000 9F0A                  		bra.w	LoadPLC		; load SBZ2 Eggman patterns
0000789C                            ; ===========================================================================
0000789C                            
0000789C                            locret_7298:
0000789C 4E75                       		rts	
0000789E                            ; ===========================================================================
0000789E                            
0000789E                            Resize_SBZ2boss2:
0000789E 0C78 1F60 F700             		cmpi.w	#$1F60,($FFFFF700).w
000078A4 6500                       		bcs.s	loc_72B6
000078A6 6100 0000                  		bsr.w	SingleObjLoad
000078AA 6600                       		bne.s	loc_72B0
000078AC 12BC 0082                  		move.b	#$82,(a1)	; load SBZ2 Eggman object
000078B0 5438 F742                  		addq.b	#2,($FFFFF742).w
000078B4                            
000078B4                            loc_72B0:
000078B4 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000078BA                            
000078BA                            loc_72B6:
000078BA 6000                       		bra.s	loc_72C2
000078BC                            ; ===========================================================================
000078BC                            
000078BC                            Resize_SBZ2end:
000078BC 0C78 2050 F700             		cmpi.w	#$2050,($FFFFF700).w
000078C2 6500                       		bcs.s	loc_72C2
000078C4 4E75                       		rts	
000078C6                            ; ===========================================================================
000078C6                            
000078C6                            loc_72C2:
000078C6 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000078CC 4E75                       		rts	
000078CE                            ; ===========================================================================
000078CE                            
000078CE                            Resize_FZ:
000078CE 7000                       		moveq	#0,d0
000078D0 1038 F742                  		move.b	($FFFFF742).w,d0
000078D4 303B 0000                  		move.w	off_72D8(pc,d0.w),d0
000078D8 4EFB 0000                  		jmp	off_72D8(pc,d0.w)
000078DC                            ; ===========================================================================
000078DC 0000 0000                  off_72D8:	dc.w Resize_FZmain-off_72D8, Resize_FZboss-off_72D8
000078E0 0000 0000                  		dc.w Resize_FZend-off_72D8, locret_7322-off_72D8
000078E4 0000                       		dc.w Resize_FZend2-off_72D8
000078E6                            ; ===========================================================================
000078E6                            
000078E6                            Resize_FZmain:
000078E6 0C78 2148 F700             		cmpi.w	#$2148,($FFFFF700).w
000078EC 6500                       		bcs.s	loc_72F4
000078EE 5438 F742                  		addq.b	#2,($FFFFF742).w
000078F2 701F                       		moveq	#$1F,d0
000078F4 6100 9EAE                  		bsr.w	LoadPLC		; load FZ boss patterns
000078F8                            
000078F8                            loc_72F4:
000078F8 60CC                       		bra.s	loc_72C2
000078FA                            ; ===========================================================================
000078FA                            
000078FA                            Resize_FZboss:
000078FA 0C78 2300 F700             		cmpi.w	#$2300,($FFFFF700).w
00007900 6500                       		bcs.s	loc_7312
00007902 6100 0000                  		bsr.w	SingleObjLoad
00007906 6600                       		bne.s	loc_7312
00007908 12BC 0085                  		move.b	#$85,(a1)	; load FZ boss object
0000790C 5438 F742                  		addq.b	#2,($FFFFF742).w
00007910 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007916                            
00007916                            loc_7312:
00007916 60AE                       		bra.s	loc_72C2
00007918                            ; ===========================================================================
00007918                            
00007918                            Resize_FZend:
00007918 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
0000791E 6500                       		bcs.s	loc_7320
00007920 5438 F742                  		addq.b	#2,($FFFFF742).w
00007924                            
00007924                            loc_7320:
00007924 60A0                       		bra.s	loc_72C2
00007926                            ; ===========================================================================
00007926                            
00007926                            locret_7322:
00007926 4E75                       		rts	
00007928                            ; ===========================================================================
00007928                            
00007928                            Resize_FZend2:
00007928 609C                       		bra.s	loc_72C2
0000792A                            ; ===========================================================================
0000792A                            ; ---------------------------------------------------------------------------
0000792A                            ; Ending sequence dynamic screen resizing (empty)
0000792A                            ; ---------------------------------------------------------------------------
0000792A                            
0000792A                            Resize_Ending:				; XREF: Resize_Index
0000792A 4E75                       		rts	
0000792C                            ; ===========================================================================
0000792C                            ; ---------------------------------------------------------------------------
0000792C                            ; Object 11 - GHZ bridge
0000792C                            ; ---------------------------------------------------------------------------
0000792C                            
0000792C                            Obj11:					; XREF: Obj_Index
0000792C 7000                       		moveq	#0,d0
0000792E 1028 0024                  		move.b	$24(a0),d0
00007932 323B 0000                  		move.w	Obj11_Index(pc,d0.w),d1
00007936 4EFB 1000                  		jmp	Obj11_Index(pc,d1.w)
0000793A                            ; ===========================================================================
0000793A 0000 0000                  Obj11_Index:	dc.w Obj11_Main-Obj11_Index, Obj11_Action-Obj11_Index
0000793E 0000 0000                  		dc.w Obj11_Action2-Obj11_Index,	Obj11_Delete2-Obj11_Index
00007942 0000 0000                  		dc.w Obj11_Delete2-Obj11_Index,	Obj11_Display2-Obj11_Index
00007946                            ; ===========================================================================
00007946                            
00007946                            Obj11_Main:				; XREF: Obj11_Index
00007946 5428 0024                  		addq.b	#2,$24(a0)
0000794A 217C 0000 0000 0004        		move.l	#Map_obj11,4(a0)
00007952 317C 438E 0002             		move.w	#$438E,2(a0)
00007958 117C 0004 0001             		move.b	#4,1(a0)
0000795E 117C 0003 0018             		move.b	#3,$18(a0)
00007964 117C 0080 0019             		move.b	#$80,$19(a0)
0000796A 3428 000C                  		move.w	$C(a0),d2
0000796E 3628 0008                  		move.w	8(a0),d3
00007972 1810                       		move.b	0(a0),d4	; copy object number ($11) to d4
00007974 45E8 0028                  		lea	$28(a0),a2	; copy bridge subtype to a2
00007978 7200                       		moveq	#0,d1
0000797A 1212                       		move.b	(a2),d1		; copy a2 to d1
0000797C 14FC 0000                  		move.b	#0,(a2)+
00007980 3001                       		move.w	d1,d0
00007982 E248                       		lsr.w	#1,d0
00007984 E948                       		lsl.w	#4,d0
00007986 9640                       		sub.w	d0,d3
00007988 5501                       		subq.b	#2,d1
0000798A 6500                       		bcs.s	Obj11_Action
0000798C                            
0000798C                            Obj11_MakeBdg:
0000798C 6100 0000                  		bsr.w	SingleObjLoad
00007990 6600                       		bne.s	Obj11_Action
00007992 5228 0028                  		addq.b	#1,$28(a0)
00007996 B668 0008                  		cmp.w	8(a0),d3
0000799A 6600                       		bne.s	loc_73B8
0000799C 0643 0010                  		addi.w	#$10,d3
000079A0 3142 000C                  		move.w	d2,$C(a0)
000079A4 3142 003C                  		move.w	d2,$3C(a0)
000079A8 3A08                       		move.w	a0,d5
000079AA 0445 D000                  		subi.w	#-$3000,d5
000079AE EC4D                       		lsr.w	#6,d5
000079B0 0245 007F                  		andi.w	#$7F,d5
000079B4 14C5                       		move.b	d5,(a2)+
000079B6 5228 0028                  		addq.b	#1,$28(a0)
000079BA                            
000079BA                            loc_73B8:				; XREF: ROM:00007398j
000079BA 3A09                       		move.w	a1,d5
000079BC 0445 D000                  		subi.w	#-$3000,d5
000079C0 EC4D                       		lsr.w	#6,d5
000079C2 0245 007F                  		andi.w	#$7F,d5
000079C6 14C5                       		move.b	d5,(a2)+
000079C8 137C 000A 0024             		move.b	#$A,$24(a1)
000079CE 1284                       		move.b	d4,0(a1)	; load bridge object (d4 = $11)
000079D0 3342 000C                  		move.w	d2,$C(a1)
000079D4 3342 003C                  		move.w	d2,$3C(a1)
000079D8 3343 0008                  		move.w	d3,8(a1)
000079DC 237C 0000 0000 0004        		move.l	#Map_obj11,4(a1)
000079E4 337C 438E 0002             		move.w	#$438E,2(a1)
000079EA 137C 0004 0001             		move.b	#4,1(a1)
000079F0 137C 0003 0018             		move.b	#3,$18(a1)
000079F6 137C 0008 0019             		move.b	#8,$19(a1)
000079FC 0643 0010                  		addi.w	#$10,d3
00007A00 51C9 FF8A                  		dbf	d1,Obj11_MakeBdg ; repeat d1 times (length of bridge)
00007A04                            
00007A04                            Obj11_Action:				; XREF: Obj11_Index
00007A04 6100                       		bsr.s	Obj11_Solid
00007A06 4A28 003E                  		tst.b	$3E(a0)
00007A0A 6700                       		beq.s	Obj11_Display
00007A0C 5928 003E                  		subq.b	#4,$3E(a0)
00007A10 6100 0000                  		bsr.w	Obj11_Bend
00007A14                            
00007A14                            Obj11_Display:
00007A14 6100 0000                  		bsr.w	DisplaySprite
00007A18 6000 0000                  		bra.w	Obj11_ChkDel
00007A1C                            
00007A1C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007A1C                            
00007A1C                            
00007A1C                            Obj11_Solid:				; XREF: Obj11_Action
00007A1C 7200                       		moveq	#0,d1
00007A1E 1228 0028                  		move.b	$28(a0),d1
00007A22 E749                       		lsl.w	#3,d1
00007A24 3401                       		move.w	d1,d2
00007A26 5041                       		addq.w	#8,d1
00007A28 D442                       		add.w	d2,d2
00007A2A 43F8 D000                  		lea	($FFFFD000).w,a1
00007A2E 4A69 0012                  		tst.w	$12(a1)
00007A32 6B00 0000                  		bmi.w	locret_751E
00007A36 3029 0008                  		move.w	8(a1),d0
00007A3A 9068 0008                  		sub.w	8(a0),d0
00007A3E D041                       		add.w	d1,d0
00007A40 6B00 0000                  		bmi.w	locret_751E
00007A44 B042                       		cmp.w	d2,d0
00007A46 6400 0000                  		bcc.w	locret_751E
00007A4A 6000                       		bra.s	Platform2
00007A4C                            ; End of function Obj11_Solid
00007A4C                            
00007A4C                            ; ---------------------------------------------------------------------------
00007A4C                            ; Platform subroutine
00007A4C                            ; ---------------------------------------------------------------------------
00007A4C                            
00007A4C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007A4C                            
00007A4C                            
00007A4C                            PlatformObject:
00007A4C 43F8 D000                  		lea	($FFFFD000).w,a1
00007A50 4A69 0012                  		tst.w	$12(a1)
00007A54 6B00 0000                  		bmi.w	locret_751E
00007A58 3029 0008                  		move.w	8(a1),d0
00007A5C 9068 0008                  		sub.w	8(a0),d0
00007A60 D041                       		add.w	d1,d0
00007A62 6B00 0000                  		bmi.w	locret_751E
00007A66 D241                       		add.w	d1,d1
00007A68 B041                       		cmp.w	d1,d0
00007A6A 6400 0000                  		bcc.w	locret_751E
00007A6E                            
00007A6E                            Platform2:
00007A6E 3028 000C                  		move.w	$C(a0),d0
00007A72 5140                       		subq.w	#8,d0
00007A74                            
00007A74                            Platform3:
00007A74 3429 000C                  		move.w	$C(a1),d2
00007A78 1229 0016                  		move.b	$16(a1),d1
00007A7C 4881                       		ext.w	d1
00007A7E D242                       		add.w	d2,d1
00007A80 5841                       		addq.w	#4,d1
00007A82 9041                       		sub.w	d1,d0
00007A84 6200 0000                  		bhi.w	locret_751E
00007A88 0C40 FFF0                  		cmpi.w	#-$10,d0
00007A8C 6500 0000                  		bcs.w	locret_751E
00007A90 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00007A94 6B00 0000                  		bmi.w	locret_751E
00007A98 0C29 0006 0024             		cmpi.b	#6,$24(a1)
00007A9E 6400 0000                  		bcc.w	locret_751E
00007AA2 D440                       		add.w	d0,d2
00007AA4 5642                       		addq.w	#3,d2
00007AA6 3342 000C                  		move.w	d2,$C(a1)
00007AAA 5428 0024                  		addq.b	#2,$24(a0)
00007AAE                            
00007AAE                            loc_74AE:
00007AAE 0829 0003 0022             		btst	#3,$22(a1)
00007AB4 6700                       		beq.s	loc_74DC
00007AB6 7000                       		moveq	#0,d0
00007AB8 1029 003D                  		move.b	$3D(a1),d0
00007ABC ED48                       		lsl.w	#6,d0
00007ABE 0680 00FF D000             		addi.l	#$FFD000,d0
00007AC4 2440                       		movea.l	d0,a2
00007AC6 08AA 0003 0022             		bclr	#3,$22(a2)
00007ACC 422A 0025                  		clr.b	$25(a2)
00007AD0 0C2A 0004 0024             		cmpi.b	#4,$24(a2)
00007AD6 6600                       		bne.s	loc_74DC
00007AD8 552A 0024                  		subq.b	#2,$24(a2)
00007ADC                            
00007ADC                            loc_74DC:
00007ADC 3008                       		move.w	a0,d0
00007ADE 0440 D000                  		subi.w	#-$3000,d0
00007AE2 EC48                       		lsr.w	#6,d0
00007AE4 0240 007F                  		andi.w	#$7F,d0
00007AE8 1340 003D                  		move.b	d0,$3D(a1)
00007AEC 137C 0000 0026             		move.b	#0,$26(a1)
00007AF2 337C 0000 0012             		move.w	#0,$12(a1)
00007AF8 3369 0010 0014             		move.w	$10(a1),$14(a1)
00007AFE 0829 0001 0022             		btst	#1,$22(a1)
00007B04 6700                       		beq.s	loc_7512
00007B06 2F08                       		move.l	a0,-(sp)
00007B08 2049                       		movea.l	a1,a0
00007B0A 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
00007B10 205F                       		movea.l	(sp)+,a0
00007B12                            
00007B12                            loc_7512:
00007B12 08E9 0003 0022             		bset	#3,$22(a1)
00007B18 08E8 0003 0022             		bset	#3,$22(a0)
00007B1E                            
00007B1E                            locret_751E:
00007B1E 4E75                       		rts	
00007B20                            ; End of function PlatformObject
00007B20                            
00007B20                            ; ---------------------------------------------------------------------------
00007B20                            ; Sloped platform subroutine (GHZ collapsing ledges and	SLZ seesaws)
00007B20                            ; ---------------------------------------------------------------------------
00007B20                            
00007B20                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007B20                            
00007B20                            
00007B20                            SlopeObject:				; XREF: Obj1A_Slope; Obj5E_Slope
00007B20 43F8 D000                  		lea	($FFFFD000).w,a1
00007B24 4A69 0012                  		tst.w	$12(a1)
00007B28 6B00 FFF4                  		bmi.w	locret_751E
00007B2C 3029 0008                  		move.w	8(a1),d0
00007B30 9068 0008                  		sub.w	8(a0),d0
00007B34 D041                       		add.w	d1,d0
00007B36 6BE6                       		bmi.s	locret_751E
00007B38 D241                       		add.w	d1,d1
00007B3A B041                       		cmp.w	d1,d0
00007B3C 64E0                       		bcc.s	locret_751E
00007B3E 0828 0000 0001             		btst	#0,1(a0)
00007B44 6700                       		beq.s	loc_754A
00007B46 4640                       		not.w	d0
00007B48 D041                       		add.w	d1,d0
00007B4A                            
00007B4A                            loc_754A:
00007B4A E248                       		lsr.w	#1,d0
00007B4C 7600                       		moveq	#0,d3
00007B4E 1632 0000                  		move.b	(a2,d0.w),d3
00007B52 3028 000C                  		move.w	$C(a0),d0
00007B56 9043                       		sub.w	d3,d0
00007B58 6000 FF1A                  		bra.w	Platform3
00007B5C                            ; End of function SlopeObject
00007B5C                            
00007B5C                            
00007B5C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007B5C                            
00007B5C                            
00007B5C                            Obj15_Solid:				; XREF: Obj15_SetSolid
00007B5C 43F8 D000                  		lea	($FFFFD000).w,a1
00007B60 4A69 0012                  		tst.w	$12(a1)
00007B64 6B00 FFB8                  		bmi.w	locret_751E
00007B68 3029 0008                  		move.w	8(a1),d0
00007B6C 9068 0008                  		sub.w	8(a0),d0
00007B70 D041                       		add.w	d1,d0
00007B72 6B00 FFAA                  		bmi.w	locret_751E
00007B76 D241                       		add.w	d1,d1
00007B78 B041                       		cmp.w	d1,d0
00007B7A 6400 FFA2                  		bcc.w	locret_751E
00007B7E 3028 000C                  		move.w	$C(a0),d0
00007B82 9043                       		sub.w	d3,d0
00007B84 6000 FEEE                  		bra.w	Platform3
00007B88                            ; End of function Obj15_Solid
00007B88                            
00007B88                            ; ===========================================================================
00007B88                            
00007B88                            Obj11_Action2:				; XREF: Obj11_Index
00007B88 6100                       		bsr.s	Obj11_WalkOff
00007B8A 6100 0000                  		bsr.w	DisplaySprite
00007B8E 6000 0000                  		bra.w	Obj11_ChkDel
00007B92                            
00007B92                            ; ---------------------------------------------------------------------------
00007B92                            ; Subroutine allowing Sonic to walk off a bridge
00007B92                            ; ---------------------------------------------------------------------------
00007B92                            
00007B92                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007B92                            
00007B92                            
00007B92                            Obj11_WalkOff:				; XREF: Obj11_Action2
00007B92 7200                       		moveq	#0,d1
00007B94 1228 0028                  		move.b	$28(a0),d1
00007B98 E749                       		lsl.w	#3,d1
00007B9A 3401                       		move.w	d1,d2
00007B9C 5041                       		addq.w	#8,d1
00007B9E 6100                       		bsr.s	ExitPlatform2
00007BA0 6400                       		bcc.s	locret_75BE
00007BA2 E848                       		lsr.w	#4,d0
00007BA4 1140 003F                  		move.b	d0,$3F(a0)
00007BA8 1028 003E                  		move.b	$3E(a0),d0
00007BAC 0C00 0040                  		cmpi.b	#$40,d0
00007BB0 6700                       		beq.s	loc_75B6
00007BB2 5828 003E                  		addq.b	#4,$3E(a0)
00007BB6                            
00007BB6                            loc_75B6:
00007BB6 6100 0000                  		bsr.w	Obj11_Bend
00007BBA 6100 0000                  		bsr.w	Obj11_MoveSonic
00007BBE                            
00007BBE                            locret_75BE:
00007BBE 4E75                       		rts	
00007BC0                            ; End of function Obj11_WalkOff
00007BC0                            
00007BC0                            ; ---------------------------------------------------------------------------
00007BC0                            ; Subroutine allowing Sonic to walk or jump off	a platform
00007BC0                            ; ---------------------------------------------------------------------------
00007BC0                            
00007BC0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007BC0                            
00007BC0                            
00007BC0                            ExitPlatform:
00007BC0 3401                       		move.w	d1,d2
00007BC2                            
00007BC2                            ExitPlatform2:
00007BC2 D442                       		add.w	d2,d2
00007BC4 43F8 D000                  		lea	($FFFFD000).w,a1
00007BC8 0829 0001 0022             		btst	#1,$22(a1)
00007BCE 6600                       		bne.s	loc_75E0
00007BD0 3029 0008                  		move.w	8(a1),d0
00007BD4 9068 0008                  		sub.w	8(a0),d0
00007BD8 D041                       		add.w	d1,d0
00007BDA 6B00                       		bmi.s	loc_75E0
00007BDC B042                       		cmp.w	d2,d0
00007BDE 6500                       		bcs.s	locret_75F2
00007BE0                            
00007BE0                            loc_75E0:
00007BE0 08A9 0003 0022             		bclr	#3,$22(a1)
00007BE6 117C 0002 0024             		move.b	#2,$24(a0)
00007BEC 08A8 0003 0022             		bclr	#3,$22(a0)
00007BF2                            
00007BF2                            locret_75F2:
00007BF2 4E75                       		rts	
00007BF4                            ; End of function ExitPlatform
00007BF4                            
00007BF4                            
00007BF4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007BF4                            
00007BF4                            
00007BF4                            Obj11_MoveSonic:			; XREF: Obj11_WalkOff
00007BF4 7000                       		moveq	#0,d0
00007BF6 1028 003F                  		move.b	$3F(a0),d0
00007BFA 1030 0029                  		move.b	$29(a0,d0.w),d0
00007BFE ED48                       		lsl.w	#6,d0
00007C00 0680 00FF D000             		addi.l	#$FFD000,d0
00007C06 2440                       		movea.l	d0,a2
00007C08 43F8 D000                  		lea	($FFFFD000).w,a1
00007C0C 302A 000C                  		move.w	$C(a2),d0
00007C10 5140                       		subq.w	#8,d0
00007C12 7200                       		moveq	#0,d1
00007C14 1229 0016                  		move.b	$16(a1),d1
00007C18 9041                       		sub.w	d1,d0
00007C1A 3340 000C                  		move.w	d0,$C(a1)	; change Sonic's position on y-axis
00007C1E 4E75                       		rts	
00007C20                            ; End of function Obj11_MoveSonic
00007C20                            
00007C20                            
00007C20                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007C20                            
00007C20                            
00007C20                            Obj11_Bend:				; XREF: Obj11_Action; Obj11_WalkOff
00007C20 1028 003E                  		move.b	$3E(a0),d0
00007C24 6100 B09E                  		bsr.w	CalcSine
00007C28 3800                       		move.w	d0,d4
00007C2A 49F9 0000 0000             		lea	(Obj11_BendData2).l,a4
00007C30 7000                       		moveq	#0,d0
00007C32 1028 0028                  		move.b	$28(a0),d0
00007C36 E948                       		lsl.w	#4,d0
00007C38 7600                       		moveq	#0,d3
00007C3A 1628 003F                  		move.b	$3F(a0),d3
00007C3E 3403                       		move.w	d3,d2
00007C40 D640                       		add.w	d0,d3
00007C42 7A00                       		moveq	#0,d5
00007C44 4BF9 0000 0000             		lea	(Obj11_BendData).l,a5
00007C4A 1A35 3000                  		move.b	(a5,d3.w),d5
00007C4E 0243 000F                  		andi.w	#$F,d3
00007C52 E94B                       		lsl.w	#4,d3
00007C54 47F4 3000                  		lea	(a4,d3.w),a3
00007C58 45E8 0029                  		lea	$29(a0),a2
00007C5C                            
00007C5C                            loc_765C:
00007C5C 7000                       		moveq	#0,d0
00007C5E 101A                       		move.b	(a2)+,d0
00007C60 ED48                       		lsl.w	#6,d0
00007C62 0680 00FF D000             		addi.l	#$FFD000,d0
00007C68 2240                       		movea.l	d0,a1
00007C6A 7000                       		moveq	#0,d0
00007C6C 101B                       		move.b	(a3)+,d0
00007C6E 5240                       		addq.w	#1,d0
00007C70 C0C5                       		mulu.w	d5,d0
00007C72 C0C4                       		mulu.w	d4,d0
00007C74 4840                       		swap	d0
00007C76 D069 003C                  		add.w	$3C(a1),d0
00007C7A 3340 000C                  		move.w	d0,$C(a1)
00007C7E 51CA FFDC                  		dbf	d2,loc_765C
00007C82 7000                       		moveq	#0,d0
00007C84 1028 0028                  		move.b	$28(a0),d0
00007C88 7600                       		moveq	#0,d3
00007C8A 1628 003F                  		move.b	$3F(a0),d3
00007C8E 5203                       		addq.b	#1,d3
00007C90 9600                       		sub.b	d0,d3
00007C92 4403                       		neg.b	d3
00007C94 6B00                       		bmi.s	locret_76CA
00007C96 3403                       		move.w	d3,d2
00007C98 E94B                       		lsl.w	#4,d3
00007C9A 47F4 3000                  		lea	(a4,d3.w),a3
00007C9E D6C2                       		adda.w	d2,a3
00007CA0 5342                       		subq.w	#1,d2
00007CA2 6500                       		bcs.s	locret_76CA
00007CA4                            
00007CA4                            loc_76A4:
00007CA4 7000                       		moveq	#0,d0
00007CA6 101A                       		move.b	(a2)+,d0
00007CA8 ED48                       		lsl.w	#6,d0
00007CAA 0680 00FF D000             		addi.l	#$FFD000,d0
00007CB0 2240                       		movea.l	d0,a1
00007CB2 7000                       		moveq	#0,d0
00007CB4 1023                       		move.b	-(a3),d0
00007CB6 5240                       		addq.w	#1,d0
00007CB8 C0C5                       		mulu.w	d5,d0
00007CBA C0C4                       		mulu.w	d4,d0
00007CBC 4840                       		swap	d0
00007CBE D069 003C                  		add.w	$3C(a1),d0
00007CC2 3340 000C                  		move.w	d0,$C(a1)
00007CC6 51CA FFDC                  		dbf	d2,loc_76A4
00007CCA                            
00007CCA                            locret_76CA:
00007CCA 4E75                       		rts	
00007CCC                            ; End of function Obj11_Bend
00007CCC                            
00007CCC                            ; ===========================================================================
00007CCC                            ; ---------------------------------------------------------------------------
00007CCC                            ; GHZ bridge-bending data
00007CCC                            ; (Defines how the bridge bends	when Sonic walks across	it)
00007CCC                            ; ---------------------------------------------------------------------------
00007CCC                            Obj11_BendData:	incbin	misc\ghzbend1.bin
00007DDC                            		even
00007DDC                            Obj11_BendData2:incbin	misc\ghzbend2.bin
00007EDC                            		even
00007EDC                            
00007EDC                            ; ===========================================================================
00007EDC                            
00007EDC                            Obj11_ChkDel:				; XREF: Obj11_Display; Obj11_Action2
00007EDC 3028 0008                  		move.w	8(a0),d0
00007EE0 0240 FF80                  		andi.w	#$FF80,d0
00007EE4 3238 F700                  		move.w	($FFFFF700).w,d1
00007EE8 0441 0080                  		subi.w	#$80,d1
00007EEC 0241 FF80                  		andi.w	#$FF80,d1
00007EF0 9041                       		sub.w	d1,d0
00007EF2 0C40 0280                  		cmpi.w	#$280,d0
00007EF6 6200 0000                  		bhi.w	Obj11_DelAll
00007EFA 4E75                       		rts	
00007EFC                            ; ===========================================================================
00007EFC                            
00007EFC                            Obj11_DelAll:				; XREF: Obj11_ChkDel
00007EFC 7400                       		moveq	#0,d2
00007EFE 45E8 0028                  		lea	$28(a0),a2	; load bridge length
00007F02 141A                       		move.b	(a2)+,d2	; move bridge length to	d2
00007F04 5302                       		subq.b	#1,d2		; subtract 1
00007F06 6500                       		bcs.s	Obj11_Delete
00007F08                            
00007F08                            Obj11_DelLoop:
00007F08 7000                       		moveq	#0,d0
00007F0A 101A                       		move.b	(a2)+,d0
00007F0C ED48                       		lsl.w	#6,d0
00007F0E 0680 00FF D000             		addi.l	#$FFD000,d0
00007F14 2240                       		movea.l	d0,a1
00007F16 B048                       		cmp.w	a0,d0
00007F18 6700                       		beq.s	loc_791E
00007F1A 6100 0000                  		bsr.w	DeleteObject2
00007F1E                            
00007F1E                            loc_791E:
00007F1E 51CA FFE8                  		dbf	d2,Obj11_DelLoop ; repeat d2 times (bridge length)
00007F22                            
00007F22                            Obj11_Delete:
00007F22 6100 0000                  		bsr.w	DeleteObject
00007F26 4E75                       		rts	
00007F28                            ; ===========================================================================
00007F28                            
00007F28                            Obj11_Delete2:				; XREF: Obj11_Index
00007F28 6100 0000                  		bsr.w	DeleteObject
00007F2C 4E75                       		rts	
00007F2E                            ; ===========================================================================
00007F2E                            
00007F2E                            Obj11_Display2:				; XREF: Obj11_Index
00007F2E 6100 0000                  		bsr.w	DisplaySprite
00007F32 4E75                       		rts	
00007F34                            ; ===========================================================================
00007F34                            ; ---------------------------------------------------------------------------
00007F34                            ; Sprite mappings - GHZ	bridge
00007F34                            ; ---------------------------------------------------------------------------
00007F34                            Map_obj11:
00007F34                            	include "_maps\obj11.asm"
00007F34                            ; ---------------------------------------------------------------------------
00007F34                            ; Sprite mappings - GHZ	bridge
00007F34                            ; ---------------------------------------------------------------------------
00007F34 0000 0000                  		dc.w byte_793A-Map_obj11, byte_7940-Map_obj11
00007F38 0000                       		dc.w byte_794B-Map_obj11
00007F3A 01                         byte_793A:	dc.b 1
00007F3B F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00007F40 02                         byte_7940:	dc.b 2
00007F41 F804 0004 F0               		dc.b $F8, 4, 0,	4, $F0
00007F46 000C 0006 F0               		dc.b 0,	$C, 0, 6, $F0
00007F4B 01                         byte_794B:	dc.b 1
00007F4C FC04 0008 F8               		dc.b $FC, 4, 0,	8, $F8
00007F52 00                         		even
00007F52 00                         		even
00007F52                            
00007F52                            ; ===========================================================================
00007F52                            ; ---------------------------------------------------------------------------
00007F52                            ; Object 15 - swinging platforms (GHZ, MZ, SLZ)
00007F52                            ;	    - spiked ball on a chain (SBZ)
00007F52                            ; ---------------------------------------------------------------------------
00007F52                            
00007F52                            Obj15:					; XREF: Obj_Index
00007F52 7000                       		moveq	#0,d0
00007F54 1028 0024                  		move.b	$24(a0),d0
00007F58 323B 0000                  		move.w	Obj15_Index(pc,d0.w),d1
00007F5C 4EFB 1000                  		jmp	Obj15_Index(pc,d1.w)
00007F60                            ; ===========================================================================
00007F60 0000 0000                  Obj15_Index:	dc.w Obj15_Main-Obj15_Index, Obj15_SetSolid-Obj15_Index
00007F64 0000 0000                  		dc.w Obj15_Action2-Obj15_Index,	Obj15_Delete-Obj15_Index
00007F68 0000 0000                  		dc.w Obj15_Delete-Obj15_Index, Obj15_Display-Obj15_Index
00007F6C 0000                       		dc.w Obj15_Action-Obj15_Index
00007F6E                            ; ===========================================================================
00007F6E                            
00007F6E                            Obj15_Main:				; XREF: Obj15_Index
00007F6E 5428 0024                  		addq.b	#2,$24(a0)
00007F72 217C 0000 0000 0004        		move.l	#Map_obj15,4(a0) ; GHZ and MZ specific code
00007F7A 317C 4380 0002             		move.w	#$4380,2(a0)
00007F80 117C 0004 0001             		move.b	#4,1(a0)
00007F86 117C 0003 0018             		move.b	#3,$18(a0)
00007F8C 117C 0018 0019             		move.b	#$18,$19(a0)
00007F92 117C 0008 0016             		move.b	#8,$16(a0)
00007F98 3168 000C 0038             		move.w	$C(a0),$38(a0)
00007F9E 3168 0008 003A             		move.w	8(a0),$3A(a0)
00007FA4 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00007FAA 6600                       		bne.s	Obj15_NotSLZ
00007FAC 217C 0000 0000 0004        		move.l	#Map_obj15a,4(a0) ; SLZ	specific code
00007FB4 317C 43DC 0002             		move.w	#$43DC,2(a0)
00007FBA 117C 0020 0019             		move.b	#$20,$19(a0)
00007FC0 117C 0010 0016             		move.b	#$10,$16(a0)
00007FC6 117C 0099 0020             		move.b	#$99,$20(a0)
00007FCC                            
00007FCC                            Obj15_NotSLZ:
00007FCC 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00007FD2 6600                       		bne.s	Obj15_SetLength
00007FD4 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0) ; SBZ	specific code
00007FDC 317C 0391 0002             		move.w	#$391,2(a0)
00007FE2 117C 0018 0019             		move.b	#$18,$19(a0)
00007FE8 117C 0018 0016             		move.b	#$18,$16(a0)
00007FEE 117C 0086 0020             		move.b	#$86,$20(a0)
00007FF4 117C 000C 0024             		move.b	#$C,$24(a0)
00007FFA                            
00007FFA                            Obj15_SetLength:
00007FFA 1810                       		move.b	0(a0),d4
00007FFC 7200                       		moveq	#0,d1
00007FFE 45E8 0028                  		lea	$28(a0),a2	; move chain length to a2
00008002 1212                       		move.b	(a2),d1		; move a2 to d1
00008004 3F01                       		move.w	d1,-(sp)
00008006 0241 000F                  		andi.w	#$F,d1
0000800A 14FC 0000                  		move.b	#0,(a2)+
0000800E 3601                       		move.w	d1,d3
00008010 E94B                       		lsl.w	#4,d3
00008012 5003                       		addq.b	#8,d3
00008014 1143 003C                  		move.b	d3,$3C(a0)
00008018 5103                       		subq.b	#8,d3
0000801A 4A28 001A                  		tst.b	$1A(a0)
0000801E 6700                       		beq.s	Obj15_MakeChain
00008020 5003                       		addq.b	#8,d3
00008022 5341                       		subq.w	#1,d1
00008024                            
00008024                            Obj15_MakeChain:
00008024 6100 0000                  		bsr.w	SingleObjLoad
00008028 6600                       		bne.s	loc_7A92
0000802A 5228 0028                  		addq.b	#1,$28(a0)
0000802E 3A09                       		move.w	a1,d5
00008030 0445 D000                  		subi.w	#-$3000,d5
00008034 EC4D                       		lsr.w	#6,d5
00008036 0245 007F                  		andi.w	#$7F,d5
0000803A 14C5                       		move.b	d5,(a2)+
0000803C 137C 000A 0024             		move.b	#$A,$24(a1)
00008042 1284                       		move.b	d4,0(a1)	; load swinging	object
00008044 2368 0004 0004             		move.l	4(a0),4(a1)
0000804A 3368 0002 0002             		move.w	2(a0),2(a1)
00008050 08A9 0006 0002             		bclr	#6,2(a1)
00008056 137C 0004 0001             		move.b	#4,1(a1)
0000805C 137C 0004 0018             		move.b	#4,$18(a1)
00008062 137C 0008 0019             		move.b	#8,$19(a1)
00008068 137C 0001 001A             		move.b	#1,$1A(a1)
0000806E 1343 003C                  		move.b	d3,$3C(a1)
00008072 0403 0010                  		subi.b	#$10,d3
00008076 6400                       		bcc.s	loc_7A8E
00008078 137C 0002 001A             		move.b	#2,$1A(a1)
0000807E 137C 0003 0018             		move.b	#3,$18(a1)
00008084 08E9 0006 0002             		bset	#6,2(a1)
0000808A                            
0000808A                            loc_7A8E:
0000808A 51C9 FF98                  		dbf	d1,Obj15_MakeChain ; repeat d1 times (chain length)
0000808E                            
0000808E                            loc_7A92:
0000808E 3A08                       		move.w	a0,d5
00008090 0445 D000                  		subi.w	#-$3000,d5
00008094 EC4D                       		lsr.w	#6,d5
00008096 0245 007F                  		andi.w	#$7F,d5
0000809A 14C5                       		move.b	d5,(a2)+
0000809C 317C 4080 0026             		move.w	#$4080,$26(a0)
000080A2 317C FE00 003E             		move.w	#-$200,$3E(a0)
000080A8 321F                       		move.w	(sp)+,d1
000080AA 0801 0004                  		btst	#4,d1		; is object type $8X ?
000080AE 6700                       		beq.s	loc_7AD4	; if not, branch
000080B0 217C 0000 0000 0004        		move.l	#Map_obj48,4(a0) ; use GHZ ball	mappings
000080B8 317C 43AA 0002             		move.w	#$43AA,2(a0)
000080BE 117C 0001 001A             		move.b	#1,$1A(a0)
000080C4 117C 0002 0018             		move.b	#2,$18(a0)
000080CA 117C 0081 0020             		move.b	#$81,$20(a0)	; make object hurt when	touched
000080D0                            
000080D0                            loc_7AD4:
000080D0 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; is zone SBZ?
000080D6 6700                       		beq.s	Obj15_Action	; if yes, branch
000080D8                            
000080D8                            Obj15_SetSolid:				; XREF: Obj15_Index
000080D8 7200                       		moveq	#0,d1
000080DA 1228 0019                  		move.b	$19(a0),d1
000080DE 7600                       		moveq	#0,d3
000080E0 1628 0016                  		move.b	$16(a0),d3
000080E4 6100 FA76                  		bsr.w	Obj15_Solid
000080E8                            
000080E8                            Obj15_Action:				; XREF: Obj15_Index
000080E8 6100 0000                  		bsr.w	Obj15_Move
000080EC 6100 0000                  		bsr.w	DisplaySprite
000080F0 6000 0000                  		bra.w	Obj15_ChkDel
000080F4                            ; ===========================================================================
000080F4                            
000080F4                            Obj15_Action2:				; XREF: Obj15_Index
000080F4 7200                       		moveq	#0,d1
000080F6 1228 0019                  		move.b	$19(a0),d1
000080FA 6100 FAC4                  		bsr.w	ExitPlatform
000080FE 3F28 0008                  		move.w	8(a0),-(sp)
00008102 6100 0000                  		bsr.w	Obj15_Move
00008106 341F                       		move.w	(sp)+,d2
00008108 7600                       		moveq	#0,d3
0000810A 1628 0016                  		move.b	$16(a0),d3
0000810E 5203                       		addq.b	#1,d3
00008110 6100 0000                  		bsr.w	MvSonicOnPtfm
00008114 6100 0000                  		bsr.w	DisplaySprite
00008118 6000 0000                  		bra.w	Obj15_ChkDel
0000811C                            
0000811C 4E75                       		rts
0000811E                            
0000811E                            ; ---------------------------------------------------------------------------
0000811E                            ; Subroutine to	change Sonic's position with a platform
0000811E                            ; ---------------------------------------------------------------------------
0000811E                            
0000811E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000811E                            
0000811E                            
0000811E                            MvSonicOnPtfm:
0000811E 43F8 D000                  		lea	($FFFFD000).w,a1
00008122 3028 000C                  		move.w	$C(a0),d0
00008126 9043                       		sub.w	d3,d0
00008128 6000                       		bra.s	MvSonic2
0000812A                            ; End of function MvSonicOnPtfm
0000812A                            
0000812A                            ; ---------------------------------------------------------------------------
0000812A                            ; Subroutine to	change Sonic's position with a platform
0000812A                            ; ---------------------------------------------------------------------------
0000812A                            
0000812A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000812A                            
0000812A                            
0000812A                            MvSonicOnPtfm2:
0000812A 43F8 D000                  		lea	($FFFFD000).w,a1
0000812E 3028 000C                  		move.w	$C(a0),d0
00008132 0440 0009                  		subi.w	#9,d0
00008136                            
00008136                            MvSonic2:
00008136 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000813A 6B00                       		bmi.s	locret_7B62
0000813C 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00008142 6400                       		bcc.s	locret_7B62
00008144 4A78 FE08                  		tst.w	($FFFFFE08).w
00008148 6600                       		bne.s	locret_7B62
0000814A 7200                       		moveq	#0,d1
0000814C 1229 0016                  		move.b	$16(a1),d1
00008150 9041                       		sub.w	d1,d0
00008152 3340 000C                  		move.w	d0,$C(a1)
00008156 9468 0008                  		sub.w	8(a0),d2
0000815A 9569 0008                  		sub.w	d2,8(a1)
0000815E                            
0000815E                            locret_7B62:
0000815E 4E75                       		rts	
00008160                            ; End of function MvSonicOnPtfm2
00008160                            
00008160                            
00008160                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008160                            
00008160                            
00008160                            Obj15_Move:				; XREF: Obj15_Action; Obj15_Action2
00008160 1038 FE78                  		move.b	($FFFFFE78).w,d0
00008164 323C 0080                  		move.w	#$80,d1
00008168 0828 0000 0022             		btst	#0,$22(a0)
0000816E 6700                       		beq.s	loc_7B78
00008170 4440                       		neg.w	d0
00008172 D041                       		add.w	d1,d0
00008174                            
00008174                            loc_7B78:
00008174 6000                       		bra.s	Obj15_Move2
00008176                            ; End of function Obj15_Move
00008176                            
00008176                            
00008176                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008176                            
00008176                            
00008176                            Obj48_Move:				; XREF: Obj48_Display2
00008176 4A28 003D                  		tst.b	$3D(a0)
0000817A 6600                       		bne.s	loc_7B9C
0000817C 3028 003E                  		move.w	$3E(a0),d0
00008180 5040                       		addq.w	#8,d0
00008182 3140 003E                  		move.w	d0,$3E(a0)
00008186 D168 0026                  		add.w	d0,$26(a0)
0000818A 0C40 0200                  		cmpi.w	#$200,d0
0000818E 6600                       		bne.s	loc_7BB6
00008190 117C 0001 003D             		move.b	#1,$3D(a0)
00008196 6000                       		bra.s	loc_7BB6
00008198                            ; ===========================================================================
00008198                            
00008198                            loc_7B9C:
00008198 3028 003E                  		move.w	$3E(a0),d0
0000819C 5140                       		subq.w	#8,d0
0000819E 3140 003E                  		move.w	d0,$3E(a0)
000081A2 D168 0026                  		add.w	d0,$26(a0)
000081A6 0C40 FE00                  		cmpi.w	#-$200,d0
000081AA 6600                       		bne.s	loc_7BB6
000081AC 117C 0000 003D             		move.b	#0,$3D(a0)
000081B2                            
000081B2                            loc_7BB6:
000081B2 1028 0026                  		move.b	$26(a0),d0
000081B6                            ; End of function Obj48_Move
000081B6                            
000081B6                            
000081B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000081B6                            
000081B6                            
000081B6                            Obj15_Move2:				; XREF: Obj15_Move; Obj48_Display
000081B6 6100 AB0C                  		bsr.w	CalcSine
000081BA 3428 0038                  		move.w	$38(a0),d2
000081BE 3628 003A                  		move.w	$3A(a0),d3
000081C2 45E8 0028                  		lea	$28(a0),a2
000081C6 7C00                       		moveq	#0,d6
000081C8 1C1A                       		move.b	(a2)+,d6
000081CA                            
000081CA                            loc_7BCE:
000081CA 7800                       		moveq	#0,d4
000081CC 181A                       		move.b	(a2)+,d4
000081CE ED4C                       		lsl.w	#6,d4
000081D0 0684 00FF D000             		addi.l	#$FFD000,d4
000081D6 2244                       		movea.l	d4,a1
000081D8 7800                       		moveq	#0,d4
000081DA 1829 003C                  		move.b	$3C(a1),d4
000081DE 2A04                       		move.l	d4,d5
000081E0 C9C0                       		muls.w	d0,d4
000081E2 E084                       		asr.l	#8,d4
000081E4 CBC1                       		muls.w	d1,d5
000081E6 E085                       		asr.l	#8,d5
000081E8 D842                       		add.w	d2,d4
000081EA DA43                       		add.w	d3,d5
000081EC 3344 000C                  		move.w	d4,$C(a1)
000081F0 3345 0008                  		move.w	d5,8(a1)
000081F4 51CE FFD4                  		dbf	d6,loc_7BCE
000081F8 4E75                       		rts	
000081FA                            ; End of function Obj15_Move2
000081FA                            
000081FA                            ; ===========================================================================
000081FA                            
000081FA                            Obj15_ChkDel:				; XREF: Obj15_Action; Obj15_Action2
000081FA 3028 003A                  		move.w	$3A(a0),d0
000081FE 0240 FF80                  		andi.w	#$FF80,d0
00008202 3238 F700                  		move.w	($FFFFF700).w,d1
00008206 0441 0080                  		subi.w	#$80,d1
0000820A 0241 FF80                  		andi.w	#$FF80,d1
0000820E 9041                       		sub.w	d1,d0
00008210 0C40 0280                  		cmpi.w	#$280,d0
00008214 6200 0000                  		bhi.w	Obj15_DelAll
00008218 4E75                       		rts	
0000821A                            ; ===========================================================================
0000821A                            
0000821A                            Obj15_DelAll:				; XREF: Obj15_ChkDel
0000821A 7400                       		moveq	#0,d2
0000821C 45E8 0028                  		lea	$28(a0),a2
00008220 141A                       		move.b	(a2)+,d2
00008222                            
00008222                            Obj15_DelLoop:
00008222 7000                       		moveq	#0,d0
00008224 101A                       		move.b	(a2)+,d0
00008226 ED48                       		lsl.w	#6,d0
00008228 0680 00FF D000             		addi.l	#$FFD000,d0
0000822E 2240                       		movea.l	d0,a1
00008230 6100 0000                  		bsr.w	DeleteObject2
00008234 51CA FFEC                  		dbf	d2,Obj15_DelLoop ; repeat for length of	chain
00008238 4E75                       		rts	
0000823A                            ; ===========================================================================
0000823A                            
0000823A                            Obj15_Delete:				; XREF: Obj15_Index
0000823A 6100 0000                  		bsr.w	DeleteObject
0000823E 4E75                       		rts	
00008240                            ; ===========================================================================
00008240                            
00008240                            Obj15_Display:				; XREF: Obj15_Index
00008240 6000 0000                  		bra.w	DisplaySprite
00008244                            ; ===========================================================================
00008244                            ; ---------------------------------------------------------------------------
00008244                            ; Sprite mappings - GHZ	and MZ swinging	platforms
00008244                            ; ---------------------------------------------------------------------------
00008244                            Map_obj15:
00008244                            	include "_maps\obj15ghz.asm"
00008244                            ; ---------------------------------------------------------------------------
00008244                            ; Sprite mappings - GHZ	and MZ swinging	platforms
00008244                            ; ---------------------------------------------------------------------------
00008244 0000                       		dc.w byte_7C4E-Map_obj15
00008246 0000                       		dc.w byte_7C59-Map_obj15
00008248 0000                       		dc.w byte_7C5F-Map_obj15
0000824A 02                         byte_7C4E:	dc.b 2
0000824B F809 0004 E8               		dc.b $F8, 9, 0,	4, $E8
00008250 F809 0004 00               		dc.b $F8, 9, 0,	4, 0
00008255 01                         byte_7C59:	dc.b 1
00008256 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000825B 01                         byte_7C5F:	dc.b 1
0000825C F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
00008262 00                         		even
00008262 00                         		even
00008262                            
00008262                            ; ---------------------------------------------------------------------------
00008262                            ; Sprite mappings - SLZ	swinging platforms
00008262                            ; ---------------------------------------------------------------------------
00008262                            Map_obj15a:
00008262                            	include "_maps\obj15slz.asm"
00008262                            ; ---------------------------------------------------------------------------
00008262                            ; Sprite mappings - SLZ	swinging platforms
00008262                            ; ---------------------------------------------------------------------------
00008262 0000                       		dc.w byte_7C6C-Map_obj15a
00008264 0000                       		dc.w byte_7C95-Map_obj15a
00008266 0000                       		dc.w byte_7C9B-Map_obj15a
00008268 08                         byte_7C6C:	dc.b 8
00008269 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
0000826E F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
00008273 F005 0014 D0               		dc.b $F0, 5, 0,	$14, $D0
00008278 F005 0814 20               		dc.b $F0, 5, 8,	$14, $20
0000827D 1004 0018 E0               		dc.b $10, 4, 0,	$18, $E0
00008282 1004 0818 10               		dc.b $10, 4, 8,	$18, $10
00008287 1001 001A F8               		dc.b $10, 1, 0,	$1A, $F8
0000828C 1001 081A 00               		dc.b $10, 1, 8,	$1A, 0
00008291 01                         byte_7C95:	dc.b 1
00008292 F805 4000 F8               		dc.b $F8, 5, $40, 0, $F8
00008297 01                         byte_7C9B:	dc.b 1
00008298 F805 001C F8               		dc.b $F8, 5, 0,	$1C, $F8
0000829E 00                         		even
0000829E 00                         		even
0000829E                            
0000829E                            ; ===========================================================================
0000829E                            ; ---------------------------------------------------------------------------
0000829E                            ; Object 17 - helix of spikes on a pole	(GHZ)
0000829E                            ; ---------------------------------------------------------------------------
0000829E                            
0000829E                            Obj17:					; XREF: Obj_Index
0000829E 7000                       		moveq	#0,d0
000082A0 1028 0024                  		move.b	$24(a0),d0
000082A4 323B 0000                  		move.w	Obj17_Index(pc,d0.w),d1
000082A8 4EFB 1000                  		jmp	Obj17_Index(pc,d1.w)
000082AC                            ; ===========================================================================
000082AC 0000                       Obj17_Index:	dc.w Obj17_Main-Obj17_Index
000082AE 0000                       		dc.w Obj17_Action-Obj17_Index
000082B0 0000                       		dc.w Obj17_Action-Obj17_Index
000082B2 0000                       		dc.w Obj17_Delete-Obj17_Index
000082B4 0000                       		dc.w Obj17_Display-Obj17_Index
000082B6                            ; ===========================================================================
000082B6                            
000082B6                            Obj17_Main:				; XREF: Obj17_Index
000082B6 5428 0024                  		addq.b	#2,$24(a0)
000082BA 217C 0000 0000 0004        		move.l	#Map_obj17,4(a0)
000082C2 317C 4398 0002             		move.w	#$4398,2(a0)
000082C8 117C 0007 0022             		move.b	#7,$22(a0)
000082CE 117C 0004 0001             		move.b	#4,1(a0)
000082D4 117C 0003 0018             		move.b	#3,$18(a0)
000082DA 117C 0008 0019             		move.b	#8,$19(a0)
000082E0 3428 000C                  		move.w	$C(a0),d2
000082E4 3628 0008                  		move.w	8(a0),d3
000082E8 1810                       		move.b	0(a0),d4
000082EA 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
000082EE 7200                       		moveq	#0,d1
000082F0 1212                       		move.b	(a2),d1		; move a2 to d1
000082F2 14FC 0000                  		move.b	#0,(a2)+
000082F6 3001                       		move.w	d1,d0
000082F8 E248                       		lsr.w	#1,d0
000082FA E948                       		lsl.w	#4,d0
000082FC 9640                       		sub.w	d0,d3
000082FE 5501                       		subq.b	#2,d1
00008300 6500                       		bcs.s	Obj17_Action
00008302 7C00                       		moveq	#0,d6
00008304                            
00008304                            Obj17_MakeHelix:
00008304 6100 0000                  		bsr.w	SingleObjLoad
00008308 6600                       		bne.s	Obj17_Action
0000830A 5228 0028                  		addq.b	#1,$28(a0)
0000830E 3A09                       		move.w	a1,d5
00008310 0445 D000                  		subi.w	#$D000,d5
00008314 EC4D                       		lsr.w	#6,d5
00008316 0245 007F                  		andi.w	#$7F,d5
0000831A 14C5                       		move.b	d5,(a2)+
0000831C 137C 0008 0024             		move.b	#8,$24(a1)
00008322 1284                       		move.b	d4,0(a1)
00008324 3342 000C                  		move.w	d2,$C(a1)
00008328 3343 0008                  		move.w	d3,8(a1)
0000832C 2368 0004 0004             		move.l	4(a0),4(a1)
00008332 337C 4398 0002             		move.w	#$4398,2(a1)
00008338 137C 0004 0001             		move.b	#4,1(a1)
0000833E 137C 0003 0018             		move.b	#3,$18(a1)
00008344 137C 0008 0019             		move.b	#8,$19(a1)
0000834A 1346 003E                  		move.b	d6,$3E(a1)
0000834E 5206                       		addq.b	#1,d6
00008350 0206 0007                  		andi.b	#7,d6
00008354 0643 0010                  		addi.w	#$10,d3
00008358 B668 0008                  		cmp.w	8(a0),d3
0000835C 6600                       		bne.s	loc_7D78
0000835E 1146 003E                  		move.b	d6,$3E(a0)
00008362 5206                       		addq.b	#1,d6
00008364 0206 0007                  		andi.b	#7,d6
00008368 0643 0010                  		addi.w	#$10,d3
0000836C 5228 0028                  		addq.b	#1,$28(a0)
00008370                            
00008370                            loc_7D78:
00008370 51C9 FF92                  		dbf	d1,Obj17_MakeHelix ; repeat d1 times (helix length)
00008374                            
00008374                            Obj17_Action:				; XREF: Obj17_Index
00008374 6100 0000                  		bsr.w	Obj17_RotateSpikes
00008378 6100 0000                  		bsr.w	DisplaySprite
0000837C 6000 0000                  		bra.w	Obj17_ChkDel
00008380                            
00008380                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008380                            
00008380                            
00008380                            Obj17_RotateSpikes:			; XREF: Obj17_Action; Obj17_Display
00008380 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
00008384 117C 0000 0020             		move.b	#0,$20(a0)	; make object harmless
0000838A D028 003E                  		add.b	$3E(a0),d0
0000838E 0200 0007                  		andi.b	#7,d0
00008392 1140 001A                  		move.b	d0,$1A(a0)	; change current frame
00008396 6600                       		bne.s	locret_7DA6
00008398 117C 0084 0020             		move.b	#$84,$20(a0)	; make object harmful
0000839E                            
0000839E                            locret_7DA6:
0000839E 4E75                       		rts	
000083A0                            ; End of function Obj17_RotateSpikes
000083A0                            
000083A0                            ; ===========================================================================
000083A0                            
000083A0                            Obj17_ChkDel:				; XREF: Obj17_Action
000083A0 3028 0008                  		move.w	8(a0),d0
000083A4 0240 FF80                  		andi.w	#$FF80,d0
000083A8 3238 F700                  		move.w	($FFFFF700).w,d1
000083AC 0441 0080                  		subi.w	#$80,d1
000083B0 0241 FF80                  		andi.w	#$FF80,d1
000083B4 9041                       		sub.w	d1,d0
000083B6 0C40 0280                  		cmpi.w	#$280,d0
000083BA 6200 0000                  		bhi.w	Obj17_DelAll
000083BE 4E75                       		rts	
000083C0                            ; ===========================================================================
000083C0                            
000083C0                            Obj17_DelAll:				; XREF: Obj17_ChkDel
000083C0 7400                       		moveq	#0,d2
000083C2 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
000083C6 141A                       		move.b	(a2)+,d2	; move a2 to d2
000083C8 5502                       		subq.b	#2,d2
000083CA 6500                       		bcs.s	Obj17_Delete
000083CC                            
000083CC                            Obj17_DelLoop:
000083CC 7000                       		moveq	#0,d0
000083CE 101A                       		move.b	(a2)+,d0
000083D0 ED48                       		lsl.w	#6,d0
000083D2 0680 00FF D000             		addi.l	#$FFD000,d0
000083D8 2240                       		movea.l	d0,a1
000083DA 6100 0000                  		bsr.w	DeleteObject2	; delete object
000083DE 51CA FFEC                  		dbf	d2,Obj17_DelLoop ; repeat d2 times (helix length)
000083E2                            
000083E2                            Obj17_Delete:				; XREF: Obj17_Index
000083E2 6100 0000                  		bsr.w	DeleteObject
000083E6 4E75                       		rts	
000083E8                            ; ===========================================================================
000083E8                            
000083E8                            Obj17_Display:				; XREF: Obj17_Index
000083E8 6100 FF96                  		bsr.w	Obj17_RotateSpikes
000083EC 6000 0000                  		bra.w	DisplaySprite
000083F0                            ; ===========================================================================
000083F0                            ; ---------------------------------------------------------------------------
000083F0                            ; Sprite mappings - helix of spikes on a pole (GHZ)
000083F0                            ; ---------------------------------------------------------------------------
000083F0                            Map_obj17:
000083F0                            	include "_maps\obj17.asm"
000083F0                            ; ---------------------------------------------------------------------------
000083F0                            ; Sprite mappings - helix of spikes on a pole (GHZ)
000083F0                            ; ---------------------------------------------------------------------------
000083F0 0000 0000                  		dc.w byte_7E08-Map_obj17, byte_7E0E-Map_obj17
000083F4 0000 0000                  		dc.w byte_7E14-Map_obj17, byte_7E1A-Map_obj17
000083F8 0000 0000                  		dc.w byte_7E20-Map_obj17, byte_7E26-Map_obj17
000083FC 0000 0000                  		dc.w byte_7E2D+1-Map_obj17, byte_7E2C-Map_obj17
00008400 01                         byte_7E08:	dc.b 1
00008401 F001 0000 FC               		dc.b $F0, 1, 0,	0, $FC
00008406 01                         byte_7E0E:	dc.b 1
00008407 F505 0002 F8               		dc.b $F5, 5, 0,	2, $F8
0000840C 01                         byte_7E14:	dc.b 1
0000840D F805 0006 F8               		dc.b $F8, 5, 0,	6, $F8
00008412 01                         byte_7E1A:	dc.b 1
00008413 FB05 000A F8               		dc.b $FB, 5, 0,	$A, $F8
00008418 01                         byte_7E20:	dc.b 1
00008419 0001 000E FC               		dc.b 0,	1, 0, $E, $FC
0000841E 01                         byte_7E26:	dc.b 1
0000841F 0400 0010 FD               		dc.b 4,	0, 0, $10, $FD
00008424 01                         byte_7E2C:	dc.b 1
00008425 F400 0011 FD               byte_7E2D:	dc.b $F4, 0, 0,	$11, $FD
0000842A                            		even
0000842A                            		even
0000842A                            
0000842A                            ; ===========================================================================
0000842A                            ; ---------------------------------------------------------------------------
0000842A                            ; Object 18 - platforms	(GHZ, SYZ, SLZ)
0000842A                            ; ---------------------------------------------------------------------------
0000842A                            
0000842A                            Obj18:					; XREF: Obj_Index
0000842A 7000                       		moveq	#0,d0
0000842C 1028 0024                  		move.b	$24(a0),d0
00008430 323B 0000                  		move.w	Obj18_Index(pc,d0.w),d1
00008434 4EFB 1000                  		jmp	Obj18_Index(pc,d1.w)
00008438                            ; ===========================================================================
00008438 0000                       Obj18_Index:	dc.w Obj18_Main-Obj18_Index
0000843A 0000                       		dc.w Obj18_Solid-Obj18_Index
0000843C 0000                       		dc.w Obj18_Action2-Obj18_Index
0000843E 0000                       		dc.w Obj18_Delete-Obj18_Index
00008440 0000                       		dc.w Obj18_Action-Obj18_Index
00008442                            ; ===========================================================================
00008442                            
00008442                            Obj18_Main:				; XREF: Obj18_Index
00008442 5428 0024                  		addq.b	#2,$24(a0)
00008446 317C 4000 0002             		move.w	#$4000,2(a0)
0000844C 217C 0000 0000 0004        		move.l	#Map_obj18,4(a0)
00008454 117C 0020 0019             		move.b	#$20,$19(a0)
0000845A 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w ; check if level is SYZ
00008460 6600                       		bne.s	Obj18_NotSYZ
00008462 217C 0000 0000 0004        		move.l	#Map_obj18a,4(a0) ; SYZ	specific code
0000846A 117C 0020 0019             		move.b	#$20,$19(a0)
00008470                            
00008470                            Obj18_NotSYZ:
00008470 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00008476 6600                       		bne.s	Obj18_NotSLZ
00008478 217C 0000 0000 0004        		move.l	#Map_obj18b,4(a0) ; SLZ	specific code
00008480 117C 0020 0019             		move.b	#$20,$19(a0)
00008486 317C 4000 0002             		move.w	#$4000,2(a0)
0000848C 117C 0003 0028             		move.b	#3,$28(a0)
00008492                            
00008492                            Obj18_NotSLZ:
00008492 117C 0004 0001             		move.b	#4,1(a0)
00008498 117C 0004 0018             		move.b	#4,$18(a0)
0000849E 3168 000C 002C             		move.w	$C(a0),$2C(a0)
000084A4 3168 000C 0034             		move.w	$C(a0),$34(a0)
000084AA 3168 0008 0032             		move.w	8(a0),$32(a0)
000084B0 317C 0080 0026             		move.w	#$80,$26(a0)
000084B6 7200                       		moveq	#0,d1
000084B8 1028 0028                  		move.b	$28(a0),d0
000084BC 0C00 000A                  		cmpi.b	#$A,d0		; is object type $A (large platform)?
000084C0 6600                       		bne.s	Obj18_SetFrame	; if not, branch
000084C2 5201                       		addq.b	#1,d1		; use frame #1
000084C4 117C 0020 0019             		move.b	#$20,$19(a0)	; set width
000084CA                            
000084CA                            Obj18_SetFrame:
000084CA 1141 001A                  		move.b	d1,$1A(a0)	; set frame to d1
000084CE                            
000084CE                            Obj18_Solid:				; XREF: Obj18_Index
000084CE 4A28 0038                  		tst.b	$38(a0)
000084D2 6700                       		beq.s	loc_7EE0
000084D4 5928 0038                  		subq.b	#4,$38(a0)
000084D8                            
000084D8                            loc_7EE0:
000084D8 7200                       		moveq	#0,d1
000084DA 1228 0019                  		move.b	$19(a0),d1
000084DE 6100 F56C                  		bsr.w	PlatformObject
000084E2                            
000084E2                            Obj18_Action:				; XREF: Obj18_Index
000084E2 6100 0000                  		bsr.w	Obj18_Move
000084E6 6100 0000                  		bsr.w	Obj18_Nudge
000084EA 6100 0000                  		bsr.w	DisplaySprite
000084EE 6000 0000                  		bra.w	Obj18_ChkDel
000084F2                            ; ===========================================================================
000084F2                            
000084F2                            Obj18_Action2:				; XREF: Obj18_Index
000084F2 0C28 0040 0038             		cmpi.b	#$40,$38(a0)
000084F8 6700                       		beq.s	loc_7F06
000084FA 5828 0038                  		addq.b	#4,$38(a0)
000084FE                            
000084FE                            loc_7F06:
000084FE 7200                       		moveq	#0,d1
00008500 1228 0019                  		move.b	$19(a0),d1
00008504 6100 F6BA                  		bsr.w	ExitPlatform
00008508 3F28 0008                  		move.w	8(a0),-(sp)
0000850C 6100 0000                  		bsr.w	Obj18_Move
00008510 6100 0000                  		bsr.w	Obj18_Nudge
00008514 341F                       		move.w	(sp)+,d2
00008516 6100 FC12                  		bsr.w	MvSonicOnPtfm2
0000851A 6100 0000                  		bsr.w	DisplaySprite
0000851E 6000 0000                  		bra.w	Obj18_ChkDel
00008522                            
00008522 4E75                       		rts
00008524                            
00008524                            ; ---------------------------------------------------------------------------
00008524                            ; Subroutine to	move platform slightly when you	stand on it
00008524                            ; ---------------------------------------------------------------------------
00008524                            
00008524                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008524                            
00008524                            
00008524                            Obj18_Nudge:				; XREF: Obj18_Action; Obj18_Action2
00008524 1028 0038                  		move.b	$38(a0),d0
00008528 6100 A79A                  		bsr.w	CalcSine
0000852C 323C 0400                  		move.w	#$400,d1
00008530 C1C1                       		muls.w	d1,d0
00008532 4840                       		swap	d0
00008534 D068 002C                  		add.w	$2C(a0),d0
00008538 3140 000C                  		move.w	d0,$C(a0)
0000853C 4E75                       		rts	
0000853E                            ; End of function Obj18_Nudge
0000853E                            
0000853E                            ; ---------------------------------------------------------------------------
0000853E                            ; Subroutine to	move platforms
0000853E                            ; ---------------------------------------------------------------------------
0000853E                            
0000853E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000853E                            
0000853E                            
0000853E                            Obj18_Move:				; XREF: Obj18_Action; Obj18_Action2
0000853E 7000                       		moveq	#0,d0
00008540 1028 0028                  		move.b	$28(a0),d0
00008544 0240 000F                  		andi.w	#$F,d0
00008548 D040                       		add.w	d0,d0
0000854A 323B 0000                  		move.w	Obj18_TypeIndex(pc,d0.w),d1
0000854E 4EFB 1000                  		jmp	Obj18_TypeIndex(pc,d1.w)
00008552                            ; End of function Obj18_Move
00008552                            
00008552                            ; ===========================================================================
00008552 0000 0000                  Obj18_TypeIndex:dc.w Obj18_Type00-Obj18_TypeIndex, Obj18_Type01-Obj18_TypeIndex
00008556 0000 0000                  		dc.w Obj18_Type02-Obj18_TypeIndex, Obj18_Type03-Obj18_TypeIndex
0000855A 0000 0000                  		dc.w Obj18_Type04-Obj18_TypeIndex, Obj18_Type05-Obj18_TypeIndex
0000855E 0000 0000                  		dc.w Obj18_Type06-Obj18_TypeIndex, Obj18_Type07-Obj18_TypeIndex
00008562 0000 0000                  		dc.w Obj18_Type08-Obj18_TypeIndex, Obj18_Type00-Obj18_TypeIndex
00008566 0000 0000                  		dc.w Obj18_Type0A-Obj18_TypeIndex, Obj18_Type0B-Obj18_TypeIndex
0000856A 0000                       		dc.w Obj18_Type0C-Obj18_TypeIndex
0000856C                            ; ===========================================================================
0000856C                            
0000856C                            Obj18_Type00:
0000856C 4E75                       		rts			; platform 00 doesn't move
0000856E                            ; ===========================================================================
0000856E                            
0000856E                            Obj18_Type05:
0000856E 3028 0032                  		move.w	$32(a0),d0
00008572 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008576 4401                       		neg.b	d1		; reverse platform-motion
00008578 0601 0040                  		addi.b	#$40,d1
0000857C 6000                       		bra.s	Obj18_01_Move
0000857E                            ; ===========================================================================
0000857E                            
0000857E                            Obj18_Type01:
0000857E 3028 0032                  		move.w	$32(a0),d0
00008582 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008586 0401 0040                  		subi.b	#$40,d1
0000858A                            
0000858A                            Obj18_01_Move:
0000858A 4881                       		ext.w	d1
0000858C D041                       		add.w	d1,d0
0000858E 3140 0008                  		move.w	d0,8(a0)	; change position on x-axis
00008592 6000 0000                  		bra.w	Obj18_ChgMotion
00008596                            ; ===========================================================================
00008596                            
00008596                            Obj18_Type0C:
00008596 3028 0034                  		move.w	$34(a0),d0
0000859A 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
0000859E 4401                       		neg.b	d1		; reverse platform-motion
000085A0 0601 0030                  		addi.b	#$30,d1
000085A4 6000                       		bra.s	Obj18_02_Move
000085A6                            ; ===========================================================================
000085A6                            
000085A6                            Obj18_Type0B:
000085A6 3028 0034                  		move.w	$34(a0),d0
000085AA 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
000085AE 0401 0030                  		subi.b	#$30,d1
000085B2 6000                       		bra.s	Obj18_02_Move
000085B4                            ; ===========================================================================
000085B4                            
000085B4                            Obj18_Type06:
000085B4 3028 0034                  		move.w	$34(a0),d0
000085B8 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000085BC 4401                       		neg.b	d1		; reverse platform-motion
000085BE 0601 0040                  		addi.b	#$40,d1
000085C2 6000                       		bra.s	Obj18_02_Move
000085C4                            ; ===========================================================================
000085C4                            
000085C4                            Obj18_Type02:
000085C4 3028 0034                  		move.w	$34(a0),d0
000085C8 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000085CC 0401 0040                  		subi.b	#$40,d1
000085D0                            
000085D0                            Obj18_02_Move:
000085D0 4881                       		ext.w	d1
000085D2 D041                       		add.w	d1,d0
000085D4 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
000085D8 6000 0000                  		bra.w	Obj18_ChgMotion
000085DC                            ; ===========================================================================
000085DC                            
000085DC                            Obj18_Type03:
000085DC 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
000085E0 6600                       		bne.s	Obj18_03_Wait	; if yes, branch
000085E2 0828 0003 0022             		btst	#3,$22(a0)	; is Sonic standing on the platform?
000085E8 6700                       		beq.s	Obj18_03_NoMove	; if not, branch
000085EA 317C 001E 003A             		move.w	#30,$3A(a0)	; set time delay to 0.5	seconds
000085F0                            
000085F0                            Obj18_03_NoMove:
000085F0 4E75                       		rts	
000085F2                            ; ===========================================================================
000085F2                            
000085F2                            Obj18_03_Wait:
000085F2 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time
000085F6 66F8                       		bne.s	Obj18_03_NoMove	; if time is > 0, branch
000085F8 317C 0020 003A             		move.w	#32,$3A(a0)
000085FE 5228 0028                  		addq.b	#1,$28(a0)	; change to type 04 (falling)
00008602 4E75                       		rts	
00008604                            ; ===========================================================================
00008604                            
00008604                            Obj18_Type04:
00008604 4A68 003A                  		tst.w	$3A(a0)
00008608 6700                       		beq.s	loc_8048
0000860A 5368 003A                  		subq.w	#1,$3A(a0)
0000860E 6600                       		bne.s	loc_8048
00008610 0828 0003 0022             		btst	#3,$22(a0)
00008616 6700                       		beq.s	loc_8042
00008618 08E9 0001 0022             		bset	#1,$22(a1)
0000861E 08A9 0003 0022             		bclr	#3,$22(a1)
00008624 137C 0002 0024             		move.b	#2,$24(a1)
0000862A 08A8 0003 0022             		bclr	#3,$22(a0)
00008630 4228 0025                  		clr.b	$25(a0)
00008634 3368 0012 0012             		move.w	$12(a0),$12(a1)
0000863A                            
0000863A                            loc_8042:
0000863A 117C 0008 0024             		move.b	#8,$24(a0)
00008640                            
00008640                            loc_8048:
00008640 2628 002C                  		move.l	$2C(a0),d3
00008644 3028 0012                  		move.w	$12(a0),d0
00008648 48C0                       		ext.l	d0
0000864A E180                       		asl.l	#8,d0
0000864C D680                       		add.l	d0,d3
0000864E 2143 002C                  		move.l	d3,$2C(a0)
00008652 0668 0038 0012             		addi.w	#$38,$12(a0)
00008658 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000865C 0640 00E0                  		addi.w	#$E0,d0
00008660 B068 002C                  		cmp.w	$2C(a0),d0
00008664 6400                       		bcc.s	locret_8074
00008666 117C 0006 0024             		move.b	#6,$24(a0)
0000866C                            
0000866C                            locret_8074:
0000866C 4E75                       		rts	
0000866E                            ; ===========================================================================
0000866E                            
0000866E                            Obj18_Type07:
0000866E 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
00008672 6600                       		bne.s	Obj18_07_Wait	; if yes, branch
00008674 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
00008678 7000                       		moveq	#0,d0
0000867A 1028 0028                  		move.b	$28(a0),d0	; move object type ($x7) to d0
0000867E E848                       		lsr.w	#4,d0		; divide d0 by 8, round	down
00008680 4A32 0000                  		tst.b	(a2,d0.w)	; has switch no. d0 been pressed?
00008684 6700                       		beq.s	Obj18_07_NoMove	; if not, branch
00008686 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
0000868C                            
0000868C                            Obj18_07_NoMove:
0000868C 4E75                       		rts	
0000868E                            ; ===========================================================================
0000868E                            
0000868E                            Obj18_07_Wait:
0000868E 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00008692 66F8                       		bne.s	Obj18_07_NoMove	; if time is > 0, branch
00008694 5228 0028                  		addq.b	#1,$28(a0)	; change to type 08
00008698 4E75                       		rts	
0000869A                            ; ===========================================================================
0000869A                            
0000869A                            Obj18_Type08:
0000869A 5568 002C                  		subq.w	#2,$2C(a0)	; move platform	up
0000869E 3028 0034                  		move.w	$34(a0),d0
000086A2 0440 0200                  		subi.w	#$200,d0
000086A6 B068 002C                  		cmp.w	$2C(a0),d0	; has platform moved $200 pixels?
000086AA 6600                       		bne.s	Obj18_08_NoStop	; if not, branch
000086AC 4228 0028                  		clr.b	$28(a0)		; change to type 00 (stop moving)
000086B0                            
000086B0                            Obj18_08_NoStop:
000086B0 4E75                       		rts	
000086B2                            ; ===========================================================================
000086B2                            
000086B2                            Obj18_Type0A:
000086B2 3028 0034                  		move.w	$34(a0),d0
000086B6 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000086BA 0401 0040                  		subi.b	#$40,d1
000086BE 4881                       		ext.w	d1
000086C0 E241                       		asr.w	#1,d1
000086C2 D041                       		add.w	d1,d0
000086C4 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
000086C8                            
000086C8                            Obj18_ChgMotion:
000086C8 1178 FE78 0026             		move.b	($FFFFFE78).w,$26(a0) ;	update platform-movement variable
000086CE 4E75                       		rts	
000086D0                            ; ===========================================================================
000086D0                            
000086D0                            Obj18_ChkDel:				; XREF: Obj18_Action; Obj18_Action2
000086D0 3028 0032                  		move.w	$32(a0),d0
000086D4 0240 FF80                  		andi.w	#$FF80,d0
000086D8 3238 F700                  		move.w	($FFFFF700).w,d1
000086DC 0441 0080                  		subi.w	#$80,d1
000086E0 0241 FF80                  		andi.w	#$FF80,d1
000086E4 9041                       		sub.w	d1,d0
000086E6 0C40 0280                  		cmpi.w	#$280,d0
000086EA 6200                       		bhi.s	Obj18_Delete
000086EC 4E75                       		rts	
000086EE                            ; ===========================================================================
000086EE                            
000086EE                            Obj18_Delete:				; XREF: Obj18_Index
000086EE 6000 0000                  		bra.w	DeleteObject
000086F2                            ; ===========================================================================
000086F2                            ; ---------------------------------------------------------------------------
000086F2                            ; Sprite mappings - unused
000086F2                            ; ---------------------------------------------------------------------------
000086F2                            Map_obj18x:
000086F2                            	include "_maps\obj18x.asm"
000086F2                            ; ---------------------------------------------------------------------------
000086F2                            ; Sprite mappings - unused
000086F2                            ; ---------------------------------------------------------------------------
000086F2 0000                       		dc.w byte_80FE-Map_obj18x
000086F4 0000                       		dc.w byte_8109-Map_obj18x
000086F6 02                         byte_80FE:	dc.b 2
000086F7 F40B 003C E8               		dc.b $F4, $B, 0, $3C, $E8
000086FC F40B 0048 00               		dc.b $F4, $B, 0, $48, 0
00008701 0A                         byte_8109:	dc.b $A
00008702 F40F 00CA E0               		dc.b $F4, $F, 0, $CA, $E0
00008707 040F 00DA E0               		dc.b 4,	$F, 0, $DA, $E0
0000870C 240F 00DA E0               		dc.b $24, $F, 0, $DA, $E0
00008711 440F 00DA E0               		dc.b $44, $F, 0, $DA, $E0
00008716 640F 00DA E0               		dc.b $64, $F, 0, $DA, $E0
0000871B F40F 08CA 00               		dc.b $F4, $F, 8, $CA, 0
00008720 040F 08DA 00               		dc.b 4,	$F, 8, $DA, 0
00008725 240F 08DA 00               		dc.b $24, $F, 8, $DA, 0
0000872A 440F 08DA 00               		dc.b $44, $F, 8, $DA, 0
0000872F 640F 08DA 00               		dc.b $64, $F, 8, $DA, 0
00008734                            		even
00008734                            		even
00008734                            
00008734                            ; ---------------------------------------------------------------------------
00008734                            ; Sprite mappings - GHZ	platforms
00008734                            ; ---------------------------------------------------------------------------
00008734                            Map_obj18:
00008734                            	include "_maps\obj18ghz.asm"
00008734                            ; ---------------------------------------------------------------------------
00008734                            ; Sprite mappings - GHZ	platforms
00008734                            ; ---------------------------------------------------------------------------
00008734 0000                       		dc.w byte_8140-Map_obj18
00008736 0000                       		dc.w byte_8155-Map_obj18
00008738 04                         byte_8140:	dc.b 4
00008739 F40B 003B E0               		dc.b $F4, $B, 0, $3B, $E0 ; small platform
0000873E F407 003F F8               		dc.b $F4, 7, 0,	$3F, $F8
00008743 F407 003F 08               		dc.b $F4, 7, 0,	$3F, 8
00008748 F403 0047 18               		dc.b $F4, 3, 0,	$47, $18
0000874D 0A                         byte_8155:	dc.b $A
0000874E F40F 00C5 E0               		dc.b $F4, $F, 0, $C5, $E0 ; large column platform
00008753 040F 00D5 E0               		dc.b 4,	$F, 0, $D5, $E0
00008758 240F 00D5 E0               		dc.b $24, $F, 0, $D5, $E0
0000875D 440F 00D5 E0               		dc.b $44, $F, 0, $D5, $E0
00008762 640F 00D5 E0               		dc.b $64, $F, 0, $D5, $E0
00008767 F40F 08C5 00               		dc.b $F4, $F, 8, $C5, 0
0000876C 040F 08D5 00               		dc.b 4,	$F, 8, $D5, 0
00008771 240F 08D5 00               		dc.b $24, $F, 8, $D5, 0
00008776 440F 08D5 00               		dc.b $44, $F, 8, $D5, 0
0000877B 640F 08D5 00               		dc.b $64, $F, 8, $D5, 0
00008780                            		even
00008780                            		even
00008780                            
00008780                            ; ---------------------------------------------------------------------------
00008780                            ; Sprite mappings - SYZ	platforms
00008780                            ; ---------------------------------------------------------------------------
00008780                            Map_obj18a:
00008780                            	include "_maps\obj18syz.asm"
00008780                            ; ---------------------------------------------------------------------------
00008780                            ; Sprite mappings - SYZ	platforms
00008780                            ; ---------------------------------------------------------------------------
00008780 0000                       		dc.w byte_818A-Map_obj18a
00008782 03                         byte_818A:	dc.b 3
00008783 F60B 0049 E0               		dc.b $F6, $B, 0, $49, $E0
00008788 F607 0051 F8               		dc.b $F6, 7, 0,	$51, $F8
0000878D F60B 0055 08               		dc.b $F6, $B, 0, $55, 8
00008792                            		even
00008792                            		even
00008792                            
00008792                            ; ---------------------------------------------------------------------------
00008792                            ; Sprite mappings - SLZ	platforms
00008792                            ; ---------------------------------------------------------------------------
00008792                            Map_obj18b:
00008792                            	include "_maps\obj18slz.asm"
00008792                            ; ---------------------------------------------------------------------------
00008792                            ; Sprite mappings - SLZ	platforms
00008792                            ; ---------------------------------------------------------------------------
00008792 0000                       		dc.w byte_819C-Map_obj18b
00008794 02                         byte_819C:	dc.b 2
00008795 F80F 0021 E0               		dc.b $F8, $F, 0, $21, $E0
0000879A F80F 0021 00               		dc.b $F8, $F, 0, $21, 0
000087A0 00                         		even
000087A0 00                         		even
000087A0                            
000087A0                            ; ===========================================================================
000087A0                            ; ---------------------------------------------------------------------------
000087A0                            ; Object 19 - Pearto bombs
000087A0                            ; ---------------------------------------------------------------------------
000087A0                            Obj19:					; XREF: Obj_Index
000087A0 7000                       		moveq	#0,d0
000087A2 1028 0024                  		move.b	$24(a0),d0
000087A6 323B 0000                  		move.w	off_7070(pc,d0.w),d1
000087AA 4EFB 1000                  		jmp	off_7070(pc,d1.w)
000087AE                            ; ---------------------------------------------------------------------------
000087AE                            
000087AE 0000 0000 0000             off_7070:	dc.w loc_7076-off_7070, loc_70A6-off_7070, loc_70EE-off_7070
000087B4                            ; ---------------------------------------------------------------------------
000087B4                            
000087B4                            loc_7076:
000087B4 5428 0024                  		addq.b	#2,$24(a0)
000087B8 217C 0000 0000 0004        		move.l	#Map_obj19,4(a0)
000087C0 317C 0480 0002             		move.w	#($9000/$20),2(a0)
000087C6 117C 0004 0001             		move.b	#4,1(a0)
000087CC 117C 0003 0019             		move.b	#3,$19(a0)
000087D2 117C 0087 0020             		move.b	#$87,$20(a0)
000087D8 117C 0008 0018             		move.b	#8,$18(a0)
000087DE 317C 0018 0030             		move.w	#$18,$30(a0)
000087E4                            
000087E4                            loc_70A6:
000087E4 0828 0007 0022             		btst	#7,$22(a0)
000087EA 6600                       		bne.s	loc_70C2
000087EC 4A68 0030                  		tst.w	$30(a0)
000087F0 6600                       		bne.s	loc_70D2
000087F2 4EB9 0000 0000             		jsr	ObjHitFloor
000087F8 4A41                       		tst.w	d1
000087FA 6A00                       		bpl.s	loc_70D6
000087FC D368 000C                  		add.w	d1,$C(a0)
00008800                            
00008800                            loc_70C2:
00008800 10BC 0027                  		move.b	#$27,0(a0); change object to explosion (why was this even here with the 3F branch)
00008804 117C 0000 0024             		move.b	#0,$24(a0)
0000880A                            ; ---------------------------------------------------------------------------
0000880A                            
0000880A                            loc_70D2:
0000880A 5368 0030                  		subq.w	#1,$30(a0)
0000880E                            
0000880E                            loc_70D6:
0000880E 6100 0000                  		bsr.w	ObjectFall
00008812 6100 0000                  		bsr.w	DisplaySprite
00008816 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000881A 0640 00E0                  		addi.w	#$E0,d0
0000881E B068 000C                  		cmp.w	$C(a0),d0
00008822 6500                       		bcs.s	loc_70EE
00008824 4E75                       		rts
00008826                            ; ---------------------------------------------------------------------------
00008826                            
00008826                            loc_70EE:
00008826 6100 0000                  		bsr.w	DeleteObject
0000882A 4E75                       		rts
0000882C                            		
0000882C                            Map_obj19:
0000882C                            	include "_maps\obj19.asm"
0000882C                            Map_02b4:
0000882C 0000                       Map_02b4_0: 	dc.w Map_02b4_2-Map_02b4
0000882E 01                         Map_02b4_2: 	dc.b $1
0000882F F706 2000 F8               	dc.b $F7, $6, $20, $0, $F8
00008834                            	even
00008834                            	even
00008834                            ; ===========================================================================
00008834                            ; ---------------------------------------------------------------------------
00008834                            ; Sprite mappings - swinging ball on a chain from GHZ boss
00008834                            ; ---------------------------------------------------------------------------
00008834                            Map_obj48:
00008834                            	include "_maps\obj48.asm"
00008834                            ; ---------------------------------------------------------------------------
00008834                            ; Sprite mappings - swinging ball on a chain from GHZ boss
00008834                            ; ---------------------------------------------------------------------------
00008834 0000 0000                  		dc.w byte_81B2-Map_obj48, byte_81D1-Map_obj48
00008838 0000 0000                  		dc.w byte_81E6-Map_obj48, byte_81FB-Map_obj48
0000883C 06                         byte_81B2:	dc.b 6
0000883D F004 0024 F0               		dc.b $F0, 4, 0,	$24, $F0
00008842 F804 1024 F0               		dc.b $F8, 4, $10, $24, $F0
00008847 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
0000884C E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00008851 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00008856 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
0000885B 04                         byte_81D1:	dc.b 4
0000885C E80A 0009 E8               		dc.b $E8, $A, 0, 9, $E8
00008861 E80A 0809 00               		dc.b $E8, $A, 8, 9, 0
00008866 000A 1009 E8               		dc.b 0,	$A, $10, 9, $E8
0000886B 000A 1809 00               		dc.b 0,	$A, $18, 9, 0
00008870 04                         byte_81E6:	dc.b 4
00008871 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00008876 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
0000887B 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00008880 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
00008885 04                         byte_81FB:	dc.b 4
00008886 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
0000888B E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00008890 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00008895 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
0000889A                            		even
0000889A                            		even
0000889A                            
0000889A                            ; ===========================================================================
0000889A                            ; ---------------------------------------------------------------------------
0000889A                            ; Object 1A - GHZ collapsing ledge
0000889A                            ; ---------------------------------------------------------------------------
0000889A                            
0000889A                            Obj1A:					; XREF: Obj_Index
0000889A 7000                       		moveq	#0,d0
0000889C 1028 0024                  		move.b	$24(a0),d0
000088A0 323B 0000                  		move.w	Obj1A_Index(pc,d0.w),d1
000088A4 4EFB 1000                  		jmp	Obj1A_Index(pc,d1.w)
000088A8                            ; ===========================================================================
000088A8 0000 0000                  Obj1A_Index:	dc.w Obj1A_Main-Obj1A_Index, Obj1A_ChkTouch-Obj1A_Index
000088AC 0000 0000                  		dc.w Obj1A_Touch-Obj1A_Index, Obj1A_Display-Obj1A_Index
000088B0 0000 0000                  		dc.w Obj1A_Delete-Obj1A_Index, Obj1A_WalkOff-Obj1A_Index
000088B4                            ; ===========================================================================
000088B4                            
000088B4                            Obj1A_Main:				; XREF: Obj1A_Index
000088B4 5428 0024                  		addq.b	#2,$24(a0)
000088B8 217C 0000 0000 0004        		move.l	#Map_obj1A,4(a0)
000088C0 317C 4000 0002             		move.w	#$4000,2(a0)
000088C6 0028 0004 0001             		ori.b	#4,1(a0)
000088CC 117C 0004 0018             		move.b	#4,$18(a0)
000088D2 117C 0007 0038             		move.b	#7,$38(a0)	; set time delay for collapse
000088D8 117C 0064 0019             		move.b	#$64,$19(a0)
000088DE 1168 0028 001A             		move.b	$28(a0),$1A(a0)
000088E4 117C 0038 0016             		move.b	#$38,$16(a0)
000088EA 08E8 0004 0001             		bset	#4,1(a0)
000088F0                            
000088F0                            Obj1A_ChkTouch:				; XREF: Obj1A_Index
000088F0 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	platform?
000088F4 6700                       		beq.s	Obj1A_Slope	; if not, branch
000088F6 4A28 0038                  		tst.b	$38(a0)		; has time reached zero?
000088FA 6700 0000                  		beq.w	Obj1A_Collapse	; if yes, branch
000088FE 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008902                            
00008902                            Obj1A_Slope:
00008902 323C 0030                  		move.w	#$30,d1
00008906 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
0000890C 6100 F212                  		bsr.w	SlopeObject
00008910 6000 0000                  		bra.w	MarkObjGone
00008914                            ; ===========================================================================
00008914                            
00008914                            Obj1A_Touch:				; XREF: Obj1A_Index
00008914 4A28 0038                  		tst.b	$38(a0)
00008918 6700 0000                  		beq.w	loc_847A
0000891C 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
00008922 5328 0038                  		subq.b	#1,$38(a0)
00008926                            
00008926                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008926                            
00008926                            
00008926                            Obj1A_WalkOff:				; XREF: Obj1A_Index
00008926 323C 0030                  		move.w	#$30,d1
0000892A 6100 F294                  		bsr.w	ExitPlatform
0000892E 323C 0030                  		move.w	#$30,d1
00008932 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
00008938 3428 0008                  		move.w	8(a0),d2
0000893C 6100 0000                  		bsr.w	SlopeObject2
00008940 6000 0000                  		bra.w	MarkObjGone
00008944                            ; End of function Obj1A_WalkOff
00008944                            
00008944                            ; ===========================================================================
00008944                            
00008944                            Obj1A_Display:				; XREF: Obj1A_Index
00008944 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00008948 6700                       		beq.s	Obj1A_TimeZero	; if yes, branch
0000894A 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
0000894E 6600 0000                  		bne.w	loc_82D0	; if yes, branch
00008952 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008956 6000 0000                  		bra.w	DisplaySprite
0000895A                            ; ===========================================================================
0000895A                            
0000895A                            loc_82D0:				; XREF: Obj1A_Display
0000895A 5328 0038                  		subq.b	#1,$38(a0)
0000895E 6100 FFC6                  		bsr.w	Obj1A_WalkOff
00008962 43F8 D000                  		lea	($FFFFD000).w,a1
00008966 0829 0003 0022             		btst	#3,$22(a1)
0000896C 6700                       		beq.s	loc_82FC
0000896E 4A28 0038                  		tst.b	$38(a0)
00008972 6600                       		bne.s	locret_8308
00008974 08A9 0003 0022             		bclr	#3,$22(a1)
0000897A 08A9 0005 0022             		bclr	#5,$22(a1)
00008980 137C 0001 001D             		move.b	#1,$1D(a1)
00008986                            
00008986                            loc_82FC:
00008986 117C 0000 003A             		move.b	#0,$3A(a0)
0000898C 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj1A_Display" routine
00008992                            
00008992                            locret_8308:
00008992 4E75                       		rts	
00008994                            ; ===========================================================================
00008994                            
00008994                            Obj1A_TimeZero:				; XREF: Obj1A_Display
00008994 6100 0000                  		bsr.w	ObjectFall
00008998 6100 0000                  		bsr.w	DisplaySprite
0000899C 4A28 0001                  		tst.b	1(a0)
000089A0 6A00                       		bpl.s	Obj1A_Delete
000089A2 4E75                       		rts	
000089A4                            ; ===========================================================================
000089A4                            
000089A4                            Obj1A_Delete:				; XREF: Obj1A_Index
000089A4 6100 0000                  		bsr.w	DeleteObject
000089A8 4E75                       		rts	
000089AA                            ; ===========================================================================
000089AA                            ; ---------------------------------------------------------------------------
000089AA                            ; Object 53 - collapsing floors	(MZ, SLZ, SBZ)
000089AA                            ; ---------------------------------------------------------------------------
000089AA                            
000089AA                            Obj53:					; XREF: Obj_Index
000089AA 7000                       		moveq	#0,d0
000089AC 1028 0024                  		move.b	$24(a0),d0
000089B0 323B 0000                  		move.w	Obj53_Index(pc,d0.w),d1
000089B4 4EFB 1000                  		jmp	Obj53_Index(pc,d1.w)
000089B8                            ; ===========================================================================
000089B8 0000 0000                  Obj53_Index:	dc.w Obj53_Main-Obj53_Index, Obj53_ChkTouch-Obj53_Index
000089BC 0000 0000                  		dc.w Obj53_Touch-Obj53_Index, Obj53_Display-Obj53_Index
000089C0 0000 0000                  		dc.w Obj53_Delete-Obj53_Index, Obj53_WalkOff-Obj53_Index
000089C4                            ; ===========================================================================
000089C4                            
000089C4                            Obj53_Main:				; XREF: Obj53_Index
000089C4 5428 0024                  		addq.b	#2,$24(a0)
000089C8 217C 0000 0000 0004        		move.l	#Map_obj53,4(a0)
000089D0 317C 42B8 0002             		move.w	#$42B8,2(a0)
000089D6 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
000089DC 6600                       		bne.s	Obj53_NotSLZ
000089DE 317C 44E0 0002             		move.w	#$44E0,2(a0)	; SLZ specific code
000089E4 5428 001A                  		addq.b	#2,$1A(a0)
000089E8                            
000089E8                            Obj53_NotSLZ:
000089E8 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
000089EE 6600                       		bne.s	Obj53_NotSBZ
000089F0 317C 43F5 0002             		move.w	#$43F5,2(a0)	; SBZ specific code
000089F6                            
000089F6                            Obj53_NotSBZ:
000089F6 0028 0004 0001             		ori.b	#4,1(a0)
000089FC 117C 0004 0018             		move.b	#4,$18(a0)
00008A02 117C 0007 0038             		move.b	#7,$38(a0)
00008A08 117C 0044 0019             		move.b	#$44,$19(a0)
00008A0E                            
00008A0E                            Obj53_ChkTouch:				; XREF: Obj53_Index
00008A0E 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00008A12 6700                       		beq.s	Obj53_Solid	; if not, branch
00008A14 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00008A18 6700 0000                  		beq.w	Obj53_Collapse	; if yes, branch
00008A1C 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008A20                            
00008A20                            Obj53_Solid:
00008A20 323C 0020                  		move.w	#$20,d1
00008A24 6100 F026                  		bsr.w	PlatformObject
00008A28 4A28 0028                  		tst.b	$28(a0)
00008A2C 6A00                       		bpl.s	Obj53_MarkAsGone
00008A2E 0829 0003 0022             		btst	#3,$22(a1)
00008A34 6700                       		beq.s	Obj53_MarkAsGone
00008A36 08A8 0000 0001             		bclr	#0,1(a0)
00008A3C 3029 0008                  		move.w	8(a1),d0
00008A40 9068 0008                  		sub.w	8(a0),d0
00008A44 6400                       		bcc.s	Obj53_MarkAsGone
00008A46 08E8 0000 0001             		bset	#0,1(a0)
00008A4C                            
00008A4C                            Obj53_MarkAsGone:
00008A4C 6000 0000                  		bra.w	MarkObjGone
00008A50                            ; ===========================================================================
00008A50                            
00008A50                            Obj53_Touch:				; XREF: Obj53_Index
00008A50 4A28 0038                  		tst.b	$38(a0)
00008A54 6700 0000                  		beq.w	loc_8458
00008A58 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
00008A5E 5328 0038                  		subq.b	#1,$38(a0)
00008A62                            
00008A62                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008A62                            
00008A62                            
00008A62                            Obj53_WalkOff:				; XREF: Obj53_Index
00008A62 323C 0020                  		move.w	#$20,d1
00008A66 6100 F158                  		bsr.w	ExitPlatform
00008A6A 3428 0008                  		move.w	8(a0),d2
00008A6E 6100 F6BA                  		bsr.w	MvSonicOnPtfm2
00008A72 6000 0000                  		bra.w	MarkObjGone
00008A76                            ; End of function Obj53_WalkOff
00008A76                            
00008A76                            ; ===========================================================================
00008A76                            
00008A76                            Obj53_Display:				; XREF: Obj53_Index
00008A76 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00008A7A 6700                       		beq.s	Obj53_TimeZero	; if yes, branch
00008A7C 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00008A80 6600 0000                  		bne.w	loc_8402	; if yes, branch
00008A84 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008A88 6000 0000                  		bra.w	DisplaySprite
00008A8C                            ; ===========================================================================
00008A8C                            
00008A8C                            loc_8402:
00008A8C 5328 0038                  		subq.b	#1,$38(a0)
00008A90 6100 FFD0                  		bsr.w	Obj53_WalkOff
00008A94 43F8 D000                  		lea	($FFFFD000).w,a1
00008A98 0829 0003 0022             		btst	#3,$22(a1)
00008A9E 6700                       		beq.s	loc_842E
00008AA0 4A28 0038                  		tst.b	$38(a0)
00008AA4 6600                       		bne.s	locret_843A
00008AA6 08A9 0003 0022             		bclr	#3,$22(a1)
00008AAC 08A9 0005 0022             		bclr	#5,$22(a1)
00008AB2 137C 0001 001D             		move.b	#1,$1D(a1)
00008AB8                            
00008AB8                            loc_842E:
00008AB8 117C 0000 003A             		move.b	#0,$3A(a0)
00008ABE 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj53_Display" routine
00008AC4                            
00008AC4                            locret_843A:
00008AC4 4E75                       		rts	
00008AC6                            ; ===========================================================================
00008AC6                            
00008AC6                            Obj53_TimeZero:				; XREF: Obj53_Display
00008AC6 6100 0000                  		bsr.w	ObjectFall
00008ACA 6100 0000                  		bsr.w	DisplaySprite
00008ACE 4A28 0001                  		tst.b	1(a0)
00008AD2 6A00                       		bpl.s	Obj53_Delete
00008AD4 4E75                       		rts	
00008AD6                            ; ===========================================================================
00008AD6                            
00008AD6                            Obj53_Delete:				; XREF: Obj53_Index
00008AD6 6100 0000                  		bsr.w	DeleteObject
00008ADA 4E75                       		rts	
00008ADC                            ; ===========================================================================
00008ADC                            
00008ADC                            Obj53_Collapse:				; XREF: Obj53_ChkTouch
00008ADC 117C 0000 003A             		move.b	#0,$3A(a0)
00008AE2                            
00008AE2                            loc_8458:				; XREF: Obj53_Touch
00008AE2 49F9 0000 0000             		lea	(Obj53_Data2).l,a4
00008AE8 0828 0000 0028             		btst	#0,$28(a0)
00008AEE 6700                       		beq.s	loc_846C
00008AF0 49F9 0000 0000             		lea	(Obj53_Data3).l,a4
00008AF6                            
00008AF6                            loc_846C:
00008AF6 7207                       		moveq	#7,d1
00008AF8 5228 001A                  		addq.b	#1,$1A(a0)
00008AFC 6000                       		bra.s	loc_8486
00008AFE                            ; ===========================================================================
00008AFE                            
00008AFE                            Obj1A_Collapse:				; XREF: Obj1A_ChkTouch
00008AFE 117C 0000 003A             		move.b	#0,$3A(a0)
00008B04                            
00008B04                            loc_847A:				; XREF: Obj1A_Touch
00008B04 49F9 0000 0000             		lea	(Obj53_Data1).l,a4
00008B0A 7218                       		moveq	#$18,d1
00008B0C 5428 001A                  		addq.b	#2,$1A(a0)
00008B10                            
00008B10                            loc_8486:				; XREF: Obj53_Collapse
00008B10 7000                       		moveq	#0,d0
00008B12 1028 001A                  		move.b	$1A(a0),d0
00008B16 D040                       		add.w	d0,d0
00008B18 2668 0004                  		movea.l	4(a0),a3
00008B1C D6F3 0000                  		adda.w	(a3,d0.w),a3
00008B20 524B                       		addq.w	#1,a3
00008B22 08E8 0005 0001             		bset	#5,1(a0)
00008B28 1810                       		move.b	0(a0),d4
00008B2A 1A28 0001                  		move.b	1(a0),d5
00008B2E 2248                       		movea.l	a0,a1
00008B30 6000                       		bra.s	loc_84B2
00008B32                            ; ===========================================================================
00008B32                            
00008B32                            loc_84AA:
00008B32 6100 0000                  		bsr.w	SingleObjLoad
00008B36 6600                       		bne.s	loc_84F2
00008B38 5A4B                       		addq.w	#5,a3
00008B3A                            
00008B3A                            loc_84B2:
00008B3A 137C 0006 0024             		move.b	#6,$24(a1)
00008B40 1284                       		move.b	d4,0(a1)
00008B42 234B 0004                  		move.l	a3,4(a1)
00008B46 1345 0001                  		move.b	d5,1(a1)
00008B4A 3368 0008 0008             		move.w	8(a0),8(a1)
00008B50 3368 000C 000C             		move.w	$C(a0),$C(a1)
00008B56 3368 0002 0002             		move.w	2(a0),2(a1)
00008B5C 1368 0018 0018             		move.b	$18(a0),$18(a1)
00008B62 1368 0019 0019             		move.b	$19(a0),$19(a1)
00008B68 135C 0038                  		move.b	(a4)+,$38(a1)
00008B6C B3C8                       		cmpa.l	a0,a1
00008B6E 6400                       		bcc.s	loc_84EE
00008B70 6100 0000                  		bsr.w	DisplaySprite2
00008B74                            
00008B74                            loc_84EE:
00008B74 51C9 FFBC                  		dbf	d1,loc_84AA
00008B78                            
00008B78                            loc_84F2:
00008B78 6100 0000                  		bsr.w	DisplaySprite
00008B7C 303C 00B9                  		move.w	#$B9,d0
00008B80 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play collapsing	sound
00008B86                            ; ===========================================================================
00008B86                            ; ---------------------------------------------------------------------------
00008B86                            ; Disintegration data for collapsing ledges (MZ, SLZ, SBZ)
00008B86                            ; ---------------------------------------------------------------------------
00008B86 1C18 1410 1A16 120E 0A06+  Obj53_Data1:	dc.b $1C, $18, $14, $10, $1A, $16, $12,	$E, $A,	6, $18,	$14, $10, $C, 8, 4
00008B96 1612 0E0A 0602 1410 0C00   		dc.b $16, $12, $E, $A, 6, 2, $14, $10, $C, 0
00008BA0 1E16 0E06 1A12 0A02        Obj53_Data2:	dc.b $1E, $16, $E, 6, $1A, $12,	$A, 2
00008BA8 161E 1A12 060E 0A02        Obj53_Data3:	dc.b $16, $1E, $1A, $12, 6, $E,	$A, 2
00008BB0                            
00008BB0                            ; ---------------------------------------------------------------------------
00008BB0                            ; Sloped platform subroutine (GHZ collapsing ledges and	MZ platforms)
00008BB0                            ; ---------------------------------------------------------------------------
00008BB0                            
00008BB0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008BB0                            
00008BB0                            
00008BB0                            SlopeObject2:				; XREF: Obj1A_WalkOff; et al
00008BB0 43F8 D000                  		lea	($FFFFD000).w,a1
00008BB4 0829 0003 0022             		btst	#3,$22(a1)
00008BBA 6700                       		beq.s	locret_856E
00008BBC 3029 0008                  		move.w	8(a1),d0
00008BC0 9068 0008                  		sub.w	8(a0),d0
00008BC4 D041                       		add.w	d1,d0
00008BC6 E248                       		lsr.w	#1,d0
00008BC8 0828 0000 0001             		btst	#0,1(a0)
00008BCE 6700                       		beq.s	loc_854E
00008BD0 4640                       		not.w	d0
00008BD2 D041                       		add.w	d1,d0
00008BD4                            
00008BD4                            loc_854E:
00008BD4 7200                       		moveq	#0,d1
00008BD6 1232 0000                  		move.b	(a2,d0.w),d1
00008BDA 3028 000C                  		move.w	$C(a0),d0
00008BDE 9041                       		sub.w	d1,d0
00008BE0 7200                       		moveq	#0,d1
00008BE2 1229 0016                  		move.b	$16(a1),d1
00008BE6 9041                       		sub.w	d1,d0
00008BE8 3340 000C                  		move.w	d0,$C(a1)
00008BEC 9468 0008                  		sub.w	8(a0),d2
00008BF0 9569 0008                  		sub.w	d2,8(a1)
00008BF4                            
00008BF4                            locret_856E:
00008BF4 4E75                       		rts	
00008BF6                            ; End of function SlopeObject2
00008BF6                            
00008BF6                            ; ===========================================================================
00008BF6                            ; ---------------------------------------------------------------------------
00008BF6                            ; Collision data for GHZ collapsing ledge
00008BF6                            ; ---------------------------------------------------------------------------
00008BF6                            Obj1A_SlopeData:
00008BF6                            		incbin	misc\ghzledge.bin
00008C26                            		even
00008C26                            
00008C26                            ; ---------------------------------------------------------------------------
00008C26                            ; Sprite mappings - GHZ	collapsing ledge
00008C26                            ; ---------------------------------------------------------------------------
00008C26                            Map_obj1A:
00008C26                            	include "_maps\obj1A.asm"
00008C26                            ; ---------------------------------------------------------------------------
00008C26                            ; Sprite mappings - GHZ	collapsing ledge
00008C26                            ; ---------------------------------------------------------------------------
00008C26 0000 0000                  		dc.w byte_85A8-Map_obj1A, byte_85F9-Map_obj1A
00008C2A 0000 0000                  		dc.w byte_864A-Map_obj1A, byte_86C8-Map_obj1A
00008C2E 10                         byte_85A8:	dc.b $10
00008C2F C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing left
00008C34 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00008C39 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00008C3E E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00008C43 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008C48 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00008C4D F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00008C52 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00008C57 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008C5C F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00008C61 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00008C66 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008C6B 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00008C70 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00008C75 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00008C7A 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008C7F 10                         byte_85F9:	dc.b $10
00008C80 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing right
00008C85 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00008C8A E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00008C8F E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00008C94 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008C99 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00008C9E F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00008CA3 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00008CA8 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008CAD F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00008CB2 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00008CB7 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008CBC 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00008CC1 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00008CC6 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00008CCB 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008CD0 19                         byte_864A:	dc.b $19
00008CD1 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	left in	pieces
00008CD6 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00008CDB D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00008CE0 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00008CE5 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00008CEA E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00008CEF E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00008CF4 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00008CF9 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008CFE D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00008D03 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00008D08 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00008D0D F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00008D12 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00008D17 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008D1C F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00008D21 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00008D26 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00008D2B 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008D30 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00008D35 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00008D3A 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00008D3F 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00008D44 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00008D49 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008D4E 19                         byte_86C8:	dc.b $19
00008D4F C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	right in pieces
00008D54 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00008D59 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00008D5E D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00008D63 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00008D68 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00008D6D E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00008D72 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00008D77 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008D7C D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00008D81 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00008D86 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00008D8B F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00008D90 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00008D95 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008D9A F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00008D9F 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00008DA4 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00008DA9 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008DAE 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00008DB3 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00008DB8 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00008DBD 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00008DC2 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00008DC7 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008DCC                            		even
00008DCC                            		even
00008DCC                            
00008DCC                            ; ---------------------------------------------------------------------------
00008DCC                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
00008DCC                            ; ---------------------------------------------------------------------------
00008DCC                            Map_obj53:
00008DCC                            	include "_maps\obj53.asm"
00008DCC                            ; ---------------------------------------------------------------------------
00008DCC                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
00008DCC                            ; ---------------------------------------------------------------------------
00008DCC 0000 0000                  		dc.w byte_874E-Map_obj53, byte_8763-Map_obj53
00008DD0 0000 0000                  		dc.w byte_878C-Map_obj53, byte_87A1-Map_obj53
00008DD4 04                         byte_874E:	dc.b 4
00008DD5 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; MZ and SBZ blocks
00008DDA 080D 0000 E0               		dc.b 8,	$D, 0, 0, $E0
00008DDF F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
00008DE4 080D 0000 00               		dc.b 8,	$D, 0, 0, 0
00008DE9 08                         byte_8763:	dc.b 8
00008DEA F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
00008DEF F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00008DF4 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
00008DF9 F805 0000 10               		dc.b $F8, 5, 0,	0, $10
00008DFE 0805 0000 E0               		dc.b 8,	5, 0, 0, $E0
00008E03 0805 0000 F0               		dc.b 8,	5, 0, 0, $F0
00008E08 0805 0000 00               		dc.b 8,	5, 0, 0, 0
00008E0D 0805 0000 10               		dc.b 8,	5, 0, 0, $10
00008E12 04                         byte_878C:	dc.b 4
00008E13 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; SLZ blocks
00008E18 080D 0008 E0               		dc.b 8,	$D, 0, 8, $E0
00008E1D F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
00008E22 080D 0008 00               		dc.b 8,	$D, 0, 8, 0
00008E27 08                         byte_87A1:	dc.b 8
00008E28 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
00008E2D F805 0004 F0               		dc.b $F8, 5, 0,	4, $F0
00008E32 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
00008E37 F805 0004 10               		dc.b $F8, 5, 0,	4, $10
00008E3C 0805 0008 E0               		dc.b 8,	5, 0, 8, $E0
00008E41 0805 000C F0               		dc.b 8,	5, 0, $C, $F0
00008E46 0805 0008 00               		dc.b 8,	5, 0, 8, 0
00008E4B 0805 000C 10               		dc.b 8,	5, 0, $C, $10
00008E50                            		even
00008E50                            		even
00008E50                            
00008E50                            ; ===========================================================================
00008E50                            ; ---------------------------------------------------------------------------
00008E50                            ; Object 1C - scenery (GHZ bridge stump, SLZ lava thrower)
00008E50                            ; ---------------------------------------------------------------------------
00008E50                            
00008E50                            Obj1C:					; XREF: Obj_Index
00008E50 7000                       		moveq	#0,d0
00008E52 1028 0024                  		move.b	$24(a0),d0
00008E56 323B 0000                  		move.w	Obj1C_Index(pc,d0.w),d1
00008E5A 4EFB 1000                  		jmp	Obj1C_Index(pc,d1.w)
00008E5E                            ; ===========================================================================
00008E5E 0000                       Obj1C_Index:	dc.w Obj1C_Main-Obj1C_Index
00008E60 0000                       		dc.w Obj1C_ChkDel-Obj1C_Index
00008E62                            ; ===========================================================================
00008E62                            
00008E62                            Obj1C_Main:				; XREF: Obj1C_Index
00008E62 5428 0024                  		addq.b	#2,$24(a0)
00008E66 7000                       		moveq	#0,d0
00008E68 1028 0028                  		move.b	$28(a0),d0	; copy object type to d0
00008E6C C0FC 000A                  		mulu.w	#$A,d0		; multiply by $A
00008E70 43FB 0000                  		lea	Obj1C_Var(pc,d0.w),a1
00008E74 2159 0004                  		move.l	(a1)+,4(a0)
00008E78 3159 0002                  		move.w	(a1)+,2(a0)
00008E7C 0028 0004 0001             		ori.b	#4,1(a0)
00008E82 1159 001A                  		move.b	(a1)+,$1A(a0)
00008E86 1159 0019                  		move.b	(a1)+,$19(a0)
00008E8A 1159 0018                  		move.b	(a1)+,$18(a0)
00008E8E 1159 0020                  		move.b	(a1)+,$20(a0)
00008E92                            
00008E92                            Obj1C_ChkDel:				; XREF: Obj1C_Index
00008E92 3028 0008                  		move.w	8(a0),d0
00008E96 0240 FF80                  		andi.w	#$FF80,d0
00008E9A 3238 F700                  		move.w	($FFFFF700).w,d1
00008E9E 0441 0080                  		subi.w	#$80,d1
00008EA2 0241 FF80                  		andi.w	#$FF80,d1
00008EA6 9041                       		sub.w	d1,d0
00008EA8 0C40 0280                  		cmpi.w	#$280,d0
00008EAC 6200 0000                  		bhi.w	DeleteObject
00008EB0 6000 0000                  		bra.w	DisplaySprite
00008EB4                            ; ===========================================================================
00008EB4                            ; ---------------------------------------------------------------------------
00008EB4                            ; Variables for	object $1C are stored in an array
00008EB4                            ; ---------------------------------------------------------------------------
00008EB4 0000 0000                  Obj1C_Var:	dc.l Map_obj1C		; mappings address
00008EB8 44D8                       		dc.w $44D8		; VRAM setting
00008EBA 0008 0200                  		dc.b 0,	8, 2, 0		; frame, width,	priority, collision response
00008EBE 0000 0000                  		dc.l Map_obj1C
00008EC2 44D8                       		dc.w $44D8
00008EC4 0008 0200                  		dc.b 0,	8, 2, 0
00008EC8 0000 0000                  		dc.l Map_obj1C
00008ECC 44D8                       		dc.w $44D8
00008ECE 0008 0200                  		dc.b 0,	8, 2, 0
00008ED2 0000 7F34                  		dc.l Map_obj11
00008ED6 438E                       		dc.w $438E
00008ED8 0110 0100                  		dc.b 1,	$10, 1,	0
00008EDC                            ; ---------------------------------------------------------------------------
00008EDC                            ; Sprite mappings - SLZ	lava thrower
00008EDC                            ; ---------------------------------------------------------------------------
00008EDC                            Map_obj1C:
00008EDC                            	include "_maps\obj1C.asm"
00008EDC                            ; ---------------------------------------------------------------------------
00008EDC                            ; Sprite mappings - SLZ	lava thrower
00008EDC                            ; ---------------------------------------------------------------------------
00008EDC 0000                       		dc.w byte_8858-Map_obj1C
00008EDE 01                         byte_8858:	dc.b 1
00008EDF F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00008EE4                            		even
00008EE4                            		even
00008EE4                            
00008EE4                            ; ===========================================================================
00008EE4                            ; ---------------------------------------------------------------------------
00008EE4                            ; Object 1D - switch that activates when Sonic touches it
00008EE4                            ; (this	is not used anywhere in	the game)
00008EE4                            ; ---------------------------------------------------------------------------
00008EE4                            
00008EE4                            Obj1D:					; XREF: Obj_Index
00008EE4 7000                       		moveq	#0,d0
00008EE6 1028 0024                  		move.b	$24(a0),d0
00008EEA 323B 0000                  		move.w	Obj1D_Index(pc,d0.w),d1
00008EEE 4EFB 1000                  		jmp	Obj1D_Index(pc,d1.w)
00008EF2                            ; ===========================================================================
00008EF2 0000                       Obj1D_Index:	dc.w Obj1D_Main-Obj1D_Index
00008EF4 0000                       		dc.w Obj1D_Action-Obj1D_Index
00008EF6 0000                       		dc.w Obj1D_Delete-Obj1D_Index
00008EF8                            ; ===========================================================================
00008EF8                            
00008EF8                            Obj1D_Main:				; XREF: Obj1D_Index
00008EF8 5428 0024                  		addq.b	#2,$24(a0)
00008EFC 217C 0000 0000 0004        		move.l	#Map_obj1D,4(a0)
00008F04 317C 4000 0002             		move.w	#$4000,2(a0)
00008F0A 117C 0004 0001             		move.b	#4,1(a0)
00008F10 3168 000C 0030             		move.w	$C(a0),$30(a0)	; save position	on y-axis
00008F16 117C 0010 0019             		move.b	#$10,$19(a0)
00008F1C 117C 0005 0018             		move.b	#5,$18(a0)
00008F22                            
00008F22                            Obj1D_Action:				; XREF: Obj1D_Index
00008F22 3168 0030 000C             		move.w	$30(a0),$C(a0)	; restore position on y-axis
00008F28 323C 0010                  		move.w	#$10,d1
00008F2C 6100 0000                  		bsr.w	Obj1D_ChkTouch
00008F30 6700                       		beq.s	Obj1D_ChkDel
00008F32 5468 000C                  		addq.w	#2,$C(a0)	; move object 2	pixels
00008F36 7001                       		moveq	#1,d0
00008F38 31C0 F7E0                  		move.w	d0,($FFFFF7E0).w ; set switch 0	as "pressed"
00008F3C                            
00008F3C                            Obj1D_ChkDel:
00008F3C 6100 0000                  		bsr.w	DisplaySprite
00008F40 3028 0008                  		move.w	8(a0),d0
00008F44 0240 FF80                  		andi.w	#$FF80,d0
00008F48 3238 F700                  		move.w	($FFFFF700).w,d1
00008F4C 0441 0080                  		subi.w	#$80,d1
00008F50 0241 FF80                  		andi.w	#$FF80,d1
00008F54 9041                       		sub.w	d1,d0
00008F56 0C40 0280                  		cmpi.w	#$280,d0
00008F5A 6200 0000                  		bhi.w	Obj1D_Delete
00008F5E 4E75                       		rts	
00008F60                            ; ===========================================================================
00008F60                            
00008F60                            Obj1D_Delete:				; XREF: Obj1D_Index
00008F60 6100 0000                  		bsr.w	DeleteObject
00008F64 4E75                       		rts	
00008F66                            ; ---------------------------------------------------------------------------
00008F66                            ; Subroutine to	check if Sonic touches the object
00008F66                            ; ---------------------------------------------------------------------------
00008F66                            
00008F66                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008F66                            
00008F66                            
00008F66                            Obj1D_ChkTouch:				; XREF: Obj1D_Action
00008F66 43F8 D000                  		lea	($FFFFD000).w,a1
00008F6A 3029 0008                  		move.w	8(a1),d0
00008F6E 9068 0008                  		sub.w	8(a0),d0
00008F72 D041                       		add.w	d1,d0
00008F74 6B00                       		bmi.s	loc_8918
00008F76 D241                       		add.w	d1,d1
00008F78 B041                       		cmp.w	d1,d0
00008F7A 6400                       		bcc.s	loc_8918
00008F7C 3429 000C                  		move.w	$C(a1),d2
00008F80 1229 0016                  		move.b	$16(a1),d1
00008F84 4881                       		ext.w	d1
00008F86 D242                       		add.w	d2,d1
00008F88 3028 000C                  		move.w	$C(a0),d0
00008F8C 0440 0010                  		subi.w	#$10,d0
00008F90 9041                       		sub.w	d1,d0
00008F92 6200                       		bhi.s	loc_8918
00008F94 0C40 FFF0                  		cmpi.w	#-$10,d0
00008F98 6500                       		bcs.s	loc_8918
00008F9A 70FF                       		moveq	#-1,d0
00008F9C 4E75                       		rts	
00008F9E                            ; ===========================================================================
00008F9E                            
00008F9E                            loc_8918:
00008F9E 7000                       		moveq	#0,d0
00008FA0 4E75                       		rts	
00008FA2                            ; End of function Obj1D_ChkTouch
00008FA2                            
00008FA2                            ; ===========================================================================
00008FA2                            ; ---------------------------------------------------------------------------
00008FA2                            ; Sprite mappings - object 1D
00008FA2                            ; ---------------------------------------------------------------------------
00008FA2                            Map_obj1D:
00008FA2                            	include "_maps\obj1D.asm"
00008FA2                            ; ---------------------------------------------------------------------------
00008FA2                            ; Sprite mappings - object 1D
00008FA2                            ; ---------------------------------------------------------------------------
00008FA2 0000                       		dc.w byte_891E-Map_obj1D
00008FA4 04                         byte_891E:	dc.b 4
00008FA5 E807 0054 F0               		dc.b $E8, 7, 0,	$54, $F0
00008FAA 0805 005C F0               		dc.b 8,	5, 0, $5C, $F0
00008FAF E807 0054 00               		dc.b $E8, 7, 0,	$54, 0
00008FB4 0805 005C 00               		dc.b 8,	5, 0, $5C, 0
00008FBA 00                         		even
00008FBA 00                         		even
00008FBA                            
00008FBA                            ; ===========================================================================
00008FBA                            ; ---------------------------------------------------------------------------
00008FBA                            ; Object 2A - doors (SBZ)
00008FBA                            ; ---------------------------------------------------------------------------
00008FBA                            
00008FBA                            Obj2A:					; XREF: Obj_Index
00008FBA 7000                       		moveq	#0,d0
00008FBC 1028 0024                  		move.b	$24(a0),d0
00008FC0 323B 0000                  		move.w	Obj2A_Index(pc,d0.w),d1
00008FC4 4EFB 1000                  		jmp	Obj2A_Index(pc,d1.w)
00008FC8                            ; ===========================================================================
00008FC8 0000                       Obj2A_Index:	dc.w Obj2A_Main-Obj2A_Index
00008FCA 0000                       		dc.w Obj2A_OpenShut-Obj2A_Index
00008FCC                            ; ===========================================================================
00008FCC                            
00008FCC                            Obj2A_Main:				; XREF: Obj2A_Index
00008FCC 5428 0024                  		addq.b	#2,$24(a0)
00008FD0 217C 0000 0000 0004        		move.l	#Map_obj2A,4(a0)
00008FD8 317C 42E8 0002             		move.w	#$42E8,2(a0)
00008FDE 0028 0004 0001             		ori.b	#4,1(a0)
00008FE4 117C 0008 0019             		move.b	#8,$19(a0)
00008FEA 117C 0004 0018             		move.b	#4,$18(a0)
00008FF0                            
00008FF0                            Obj2A_OpenShut:				; XREF: Obj2A_Index
00008FF0 323C 0040                  		move.w	#$40,d1
00008FF4 4228 001C                  		clr.b	$1C(a0)		; use "closing"	animation
00008FF8 3038 D008                  		move.w	($FFFFD008).w,d0
00008FFC D041                       		add.w	d1,d0
00008FFE B068 0008                  		cmp.w	8(a0),d0
00009002 6500                       		bcs.s	Obj2A_Animate
00009004 9041                       		sub.w	d1,d0
00009006 9041                       		sub.w	d1,d0
00009008 B068 0008                  		cmp.w	8(a0),d0
0000900C 6400                       		bcc.s	Obj2A_Animate
0000900E D041                       		add.w	d1,d0
00009010 B068 0008                  		cmp.w	8(a0),d0
00009014 6400                       		bcc.s	loc_899A
00009016 0828 0000 0022             		btst	#0,$22(a0)
0000901C 6600                       		bne.s	Obj2A_Animate
0000901E 6000                       		bra.s	Obj2A_Open
00009020                            ; ===========================================================================
00009020                            
00009020                            loc_899A:				; XREF: Obj2A_OpenShut
00009020 0828 0000 0022             		btst	#0,$22(a0)
00009026 6700                       		beq.s	Obj2A_Animate
00009028                            
00009028                            Obj2A_Open:				; XREF: Obj2A_OpenShut
00009028 117C 0001 001C             		move.b	#1,$1C(a0)	; use "opening"	animation
0000902E                            
0000902E                            Obj2A_Animate:				; XREF: Obj2A_OpenShut; loc_899A
0000902E 43F9 0000 0000             		lea	(Ani_obj2A).l,a1
00009034 6100 0000                  		bsr.w	AnimateSprite
00009038 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
0000903C 6600                       		bne.s	Obj2A_MarkAsUsed ; if yes, branch
0000903E 323C 0011                  		move.w	#$11,d1
00009042 343C 0020                  		move.w	#$20,d2
00009046 3602                       		move.w	d2,d3
00009048 5243                       		addq.w	#1,d3
0000904A 3828 0008                  		move.w	8(a0),d4
0000904E 6100 0000                  		bsr.w	SolidObject
00009052                            
00009052                            Obj2A_MarkAsUsed:
00009052 6000 0000                  		bra.w	MarkObjGone
00009056                            ; ===========================================================================
00009056                            Ani_obj2A:
00009056                            	include "_anim\obj2A.asm"
00009056                            ; ---------------------------------------------------------------------------
00009056                            ; Animation script - doors (SBZ)
00009056                            ; ---------------------------------------------------------------------------
00009056 0000                       		dc.w Ani_obj2A_Shut-Ani_obj2A
00009058 0000                       		dc.w Ani_obj2A_Open-Ani_obj2A
0000905A 0008 0706 0504 0302 0100+  Ani_obj2A_Shut:	dc.b 0,	8, 7, 6, 5, 4, 3, 2, 1,	0, $FE,	1
00009066 0000 0102 0304 0506 0708+  Ani_obj2A_Open:	dc.b 0,	0, 1, 2, 3, 4, 5, 6, 7,	8, $FE,	1
00009072                            		even
00009072                            		even
00009072                            
00009072                            ; ---------------------------------------------------------------------------
00009072                            ; Sprite mappings - doors (SBZ)
00009072                            ; ---------------------------------------------------------------------------
00009072                            Map_obj2A:
00009072                            	include "_maps\obj2A.asm"
00009072                            ; ---------------------------------------------------------------------------
00009072                            ; Sprite mappings - doors (SBZ)
00009072                            ; ---------------------------------------------------------------------------
00009072 0000 0000                  		dc.w byte_89FE-Map_obj2A, byte_8A09-Map_obj2A
00009076 0000 0000                  		dc.w byte_8A14-Map_obj2A, byte_8A1F-Map_obj2A
0000907A 0000 0000                  		dc.w byte_8A2A-Map_obj2A, byte_8A35-Map_obj2A
0000907E 0000 0000                  		dc.w byte_8A40-Map_obj2A, byte_8A4B-Map_obj2A
00009082 0000                       		dc.w byte_8A56-Map_obj2A
00009084 02                         byte_89FE:	dc.b 2
00009085 E007 0800 F8               		dc.b $E0, 7, 8,	0, $F8	; door closed
0000908A 0007 0800 F8               		dc.b 0,	7, 8, 0, $F8
0000908F 02                         byte_8A09:	dc.b 2
00009090 DC07 0800 F8               		dc.b $DC, 7, 8,	0, $F8
00009095 0407 0800 F8               		dc.b 4,	7, 8, 0, $F8
0000909A 02                         byte_8A14:	dc.b 2
0000909B D807 0800 F8               		dc.b $D8, 7, 8,	0, $F8
000090A0 0807 0800 F8               		dc.b 8,	7, 8, 0, $F8
000090A5 02                         byte_8A1F:	dc.b 2
000090A6 D407 0800 F8               		dc.b $D4, 7, 8,	0, $F8
000090AB 0C07 0800 F8               		dc.b $C, 7, 8, 0, $F8
000090B0 02                         byte_8A2A:	dc.b 2
000090B1 D007 0800 F8               		dc.b $D0, 7, 8,	0, $F8
000090B6 1007 0800 F8               		dc.b $10, 7, 8,	0, $F8
000090BB 02                         byte_8A35:	dc.b 2
000090BC CC07 0800 F8               		dc.b $CC, 7, 8,	0, $F8
000090C1 1407 0800 F8               		dc.b $14, 7, 8,	0, $F8
000090C6 02                         byte_8A40:	dc.b 2
000090C7 C807 0800 F8               		dc.b $C8, 7, 8,	0, $F8
000090CC 1807 0800 F8               		dc.b $18, 7, 8,	0, $F8
000090D1 02                         byte_8A4B:	dc.b 2
000090D2 C407 0800 F8               		dc.b $C4, 7, 8,	0, $F8
000090D7 1C07 0800 F8               		dc.b $1C, 7, 8,	0, $F8
000090DC 02                         byte_8A56:	dc.b 2
000090DD C007 0800 F8               		dc.b $C0, 7, 8,	0, $F8	; door fully open
000090E2 2007 0800 F8               		dc.b $20, 7, 8,	0, $F8
000090E8 00                         		even
000090E8 00                         		even
000090E8                            
000090E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000090E8                            
000090E8                            
000090E8                            Obj44_SolidWall:			; XREF: Obj44_Solid
000090E8 6100 0000                  		bsr.w	Obj44_SolidWall2
000090EC 6700                       		beq.s	loc_8AA8
000090EE 6B00 0000                  		bmi.w	loc_8AC4
000090F2 4A40                       		tst.w	d0
000090F4 6700 0000                  		beq.w	loc_8A92
000090F8 6B00                       		bmi.s	loc_8A7C
000090FA 4A69 0010                  		tst.w	$10(a1)
000090FE 6B00                       		bmi.s	loc_8A92
00009100 6000                       		bra.s	loc_8A82
00009102                            ; ===========================================================================
00009102                            
00009102                            loc_8A7C:
00009102 4A69 0010                  		tst.w	$10(a1)
00009106 6A00                       		bpl.s	loc_8A92
00009108                            
00009108                            loc_8A82:
00009108 9169 0008                  		sub.w	d0,8(a1)
0000910C 337C 0000 0014             		move.w	#0,$14(a1)
00009112 337C 0000 0010             		move.w	#0,$10(a1)
00009118                            
00009118                            loc_8A92:
00009118 0829 0001 0022             		btst	#1,$22(a1)
0000911E 6600                       		bne.s	loc_8AB6
00009120 08E9 0005 0022             		bset	#5,$22(a1)
00009126 08E8 0005 0022             		bset	#5,$22(a0)
0000912C 4E75                       		rts	
0000912E                            ; ===========================================================================
0000912E                            
0000912E                            loc_8AA8:
0000912E 0828 0005 0022             		btst	#5,$22(a0)
00009134 6700                       		beq.s	locret_8AC2
00009136 337C 0001 001C             		move.w	#1,$1C(a1)
0000913C                            
0000913C                            loc_8AB6:
0000913C 08A8 0005 0022             		bclr	#5,$22(a0)
00009142 08A9 0005 0022             		bclr	#5,$22(a1)
00009148                            
00009148                            locret_8AC2:
00009148 4E75                       		rts	
0000914A                            ; ===========================================================================
0000914A                            
0000914A                            loc_8AC4:
0000914A 4A69 0012                  		tst.w	$12(a1)
0000914E 6A00                       		bpl.s	locret_8AD8
00009150 4A43                       		tst.w	d3
00009152 6A00                       		bpl.s	locret_8AD8
00009154 9769 000C                  		sub.w	d3,$C(a1)
00009158 337C 0000 0012             		move.w	#0,$12(a1)
0000915E                            
0000915E                            locret_8AD8:
0000915E 4E75                       		rts	
00009160                            ; End of function Obj44_SolidWall
00009160                            
00009160                            
00009160                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009160                            
00009160                            
00009160                            Obj44_SolidWall2:			; XREF: Obj44_SolidWall
00009160 43F8 D000                  		lea	($FFFFD000).w,a1
00009164 3029 0008                  		move.w	8(a1),d0
00009168 9068 0008                  		sub.w	8(a0),d0
0000916C D041                       		add.w	d1,d0
0000916E 6B00                       		bmi.s	loc_8B48
00009170 3601                       		move.w	d1,d3
00009172 D643                       		add.w	d3,d3
00009174 B043                       		cmp.w	d3,d0
00009176 6200                       		bhi.s	loc_8B48
00009178 1629 0016                  		move.b	$16(a1),d3
0000917C 4883                       		ext.w	d3
0000917E D443                       		add.w	d3,d2
00009180 3629 000C                  		move.w	$C(a1),d3
00009184 9668 000C                  		sub.w	$C(a0),d3
00009188 D642                       		add.w	d2,d3
0000918A 6B00                       		bmi.s	loc_8B48
0000918C 3802                       		move.w	d2,d4
0000918E D844                       		add.w	d4,d4
00009190 B644                       		cmp.w	d4,d3
00009192 6400                       		bcc.s	loc_8B48
00009194 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00009198 6B00                       		bmi.s	loc_8B48
0000919A 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000091A0 6400                       		bcc.s	loc_8B48
000091A2 4A78 FE08                  		tst.w	($FFFFFE08).w
000091A6 6600                       		bne.s	loc_8B48
000091A8 3A00                       		move.w	d0,d5
000091AA B240                       		cmp.w	d0,d1
000091AC 6400                       		bcc.s	loc_8B30
000091AE D241                       		add.w	d1,d1
000091B0 9041                       		sub.w	d1,d0
000091B2 3A00                       		move.w	d0,d5
000091B4 4445                       		neg.w	d5
000091B6                            
000091B6                            loc_8B30:
000091B6 3203                       		move.w	d3,d1
000091B8 B443                       		cmp.w	d3,d2
000091BA 6400                       		bcc.s	loc_8B3C
000091BC 9644                       		sub.w	d4,d3
000091BE 3203                       		move.w	d3,d1
000091C0 4441                       		neg.w	d1
000091C2                            
000091C2                            loc_8B3C:
000091C2 BA41                       		cmp.w	d1,d5
000091C4 6200                       		bhi.s	loc_8B44
000091C6 7801                       		moveq	#1,d4
000091C8 4E75                       		rts	
000091CA                            ; ===========================================================================
000091CA                            
000091CA                            loc_8B44:
000091CA 78FF                       		moveq	#-1,d4
000091CC 4E75                       		rts	
000091CE                            ; ===========================================================================
000091CE                            
000091CE                            loc_8B48:
000091CE 7800                       		moveq	#0,d4
000091D0 4E75                       		rts	
000091D2                            ; End of function Obj44_SolidWall2
000091D2                            
000091D2                            ; ===========================================================================
000091D2                            ; ---------------------------------------------------------------------------
000091D2                            ; Object 1E - Ball Hog enemy (SBZ)
000091D2                            ; ---------------------------------------------------------------------------
000091D2                            
000091D2                            Obj1E:					; XREF: Obj_Index
000091D2 7000                       		moveq	#0,d0
000091D4 1028 0024                  		move.b	$24(a0),d0
000091D8 323B 0000                  		move.w	Obj1E_Index(pc,d0.w),d1
000091DC 4EFB 1000                  		jmp	Obj1E_Index(pc,d1.w)
000091E0                            ; ===========================================================================
000091E0 0000                       Obj1E_Index:	dc.w Obj1E_Main-Obj1E_Index
000091E2 0000                       		dc.w Obj1E_Action-Obj1E_Index
000091E4                            ; ===========================================================================
000091E4                            
000091E4                            Obj1E_Main:				; XREF: Obj1E_Index
000091E4 117C 0013 0016             		move.b	#$13,$16(a0)
000091EA 117C 0008 0017             		move.b	#8,$17(a0)
000091F0 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
000091F8 317C 2302 0002             		move.w	#$2302,2(a0)
000091FE 117C 0004 0001             		move.b	#4,1(a0)
00009204 117C 0004 0018             		move.b	#4,$18(a0)
0000920A 117C 0005 0020             		move.b	#5,$20(a0)
00009210 117C 000C 0019             		move.b	#$C,$19(a0)
00009216 6100 0000                  		bsr.w	ObjectFall
0000921A 4EB9 0000 0000             		jsr	ObjHitFloor
00009220 4A41                       		tst.w	d1
00009222 6A00                       		bpl.s	locret_8BAC
00009224 D368 000C                  		add.w	d1,$C(a0)
00009228 317C 0000 0012             		move.w	#0,$12(a0)
0000922E 5428 0024                  		addq.b	#2,$24(a0)
00009232                            
00009232                            locret_8BAC:
00009232 4E75                       		rts	
00009234                            ; ===========================================================================
00009234                            
00009234                            Obj1E_Action:				; XREF: Obj1E_Index
00009234 43F9 0000 0000             		lea	(Ani_obj1E).l,a1
0000923A 6100 0000                  		bsr.w	AnimateSprite
0000923E 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is final frame (01) displayed?
00009244 6600                       		bne.s	Obj1E_SetBall	; if not, branch
00009246 4A28 0032                  		tst.b	$32(a0)		; is it	set to launch cannonball?
0000924A 6700                       		beq.s	Obj1E_MakeBall	; if yes, branch
0000924C 6000                       		bra.s	Obj1E_MarkAsGone
0000924E                            ; ===========================================================================
0000924E                            
0000924E                            Obj1E_SetBall:				; XREF: Obj1E_Action
0000924E 4228 0032                  		clr.b	$32(a0)		; set to launch	cannonball
00009252                            
00009252                            Obj1E_MarkAsGone:			; XREF: Obj1E_Action
00009252 6000 0000                  		bra.w	MarkObjGone
00009256                            ; ===========================================================================
00009256                            
00009256                            Obj1E_MakeBall:				; XREF: Obj1E_Action
00009256 117C 0001 0032             		move.b	#1,$32(a0)
0000925C 6100 0000                  		bsr.w	SingleObjLoad
00009260 6600                       		bne.s	loc_8C1A
00009262 12BC 0020                  		move.b	#$20,0(a1)	; load cannonball object ($20)
00009266 3368 0008 0008             		move.w	8(a0),8(a1)
0000926C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009272 337C FF00 0010             		move.w	#-$100,$10(a1)	; cannonball bounces to	the left
00009278 337C 0000 0012             		move.w	#0,$12(a1)
0000927E 70FC                       		moveq	#-4,d0
00009280 0828 0000 0022             		btst	#0,$22(a0)	; is Ball Hog facing right?
00009286 6700                       		beq.s	loc_8C0A	; if not, branch
00009288 4440                       		neg.w	d0
0000928A 4469 0010                  		neg.w	$10(a1)		; cannonball bounces to	the right
0000928E                            
0000928E                            loc_8C0A:
0000928E D169 0008                  		add.w	d0,8(a1)
00009292 0669 000C 000C             		addi.w	#$C,$C(a1)
00009298 1368 0028 0028             		move.b	$28(a0),$28(a1)	; copy object type from	Ball Hog
0000929E                            
0000929E                            loc_8C1A:
0000929E 60B2                       		bra.s	Obj1E_MarkAsGone
000092A0                            ; ===========================================================================
000092A0                            ; ---------------------------------------------------------------------------
000092A0                            ; Object 20 - cannonball that Ball Hog throws (SBZ)
000092A0                            ; ---------------------------------------------------------------------------
000092A0                            
000092A0                            Obj20:					; XREF: Obj_Index
000092A0 7000                       		moveq	#0,d0
000092A2 1028 0024                  		move.b	$24(a0),d0
000092A6 323B 0000                  		move.w	Obj20_Index(pc,d0.w),d1
000092AA 4EFB 1000                  		jmp	Obj20_Index(pc,d1.w)
000092AE                            ; ===========================================================================
000092AE 0000                       Obj20_Index:	dc.w Obj20_Main-Obj20_Index
000092B0 0000                       		dc.w Obj20_Bounce-Obj20_Index
000092B2                            ; ===========================================================================
000092B2                            
000092B2                            Obj20_Main:				; XREF: Obj20_Index
000092B2 5428 0024                  		addq.b	#2,$24(a0)
000092B6 117C 0007 0016             		move.b	#7,$16(a0)
000092BC 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
000092C4 317C 2302 0002             		move.w	#$2302,2(a0)
000092CA 117C 0004 0001             		move.b	#4,1(a0)
000092D0 117C 0003 0018             		move.b	#3,$18(a0)
000092D6 117C 0087 0020             		move.b	#$87,$20(a0)
000092DC 117C 0008 0019             		move.b	#8,$19(a0)
000092E2 7000                       		moveq	#0,d0
000092E4 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
000092E8 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 frames	(1 second)
000092EC 3140 0030                  		move.w	d0,$30(a0)	; set explosion	time
000092F0 117C 0004 001A             		move.b	#4,$1A(a0)
000092F6                            
000092F6                            Obj20_Bounce:				; XREF: Obj20_Index
000092F6 4EB9 0000 0000             		jsr	ObjectFall
000092FC 4A68 0012                  		tst.w	$12(a0)
00009300 6B00                       		bmi.s	Obj20_ChkExplode
00009302 4EB9 0000 0000             		jsr	ObjHitFloor
00009308 4A41                       		tst.w	d1
0000930A 6A00                       		bpl.s	Obj20_ChkExplode
0000930C D368 000C                  		add.w	d1,$C(a0)
00009310 317C FD00 0012             		move.w	#-$300,$12(a0)
00009316 4A03                       		tst.b	d3
00009318 6700                       		beq.s	Obj20_ChkExplode
0000931A 6B00                       		bmi.s	loc_8CA4
0000931C 4A68 0010                  		tst.w	$10(a0)
00009320 6A00                       		bpl.s	Obj20_ChkExplode
00009322 4468 0010                  		neg.w	$10(a0)
00009326 6000                       		bra.s	Obj20_ChkExplode
00009328                            ; ===========================================================================
00009328                            
00009328                            loc_8CA4:				; XREF: Obj20_Bounce
00009328 4A68 0010                  		tst.w	$10(a0)
0000932C 6B00                       		bmi.s	Obj20_ChkExplode
0000932E 4468 0010                  		neg.w	$10(a0)
00009332                            
00009332                            Obj20_ChkExplode:			; XREF: Obj20_Bounce
00009332 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from explosion time
00009336 6A00                       		bpl.s	Obj20_Animate	; if time is > 0, branch
00009338 10BC 0024                  		move.b	#$24,0(a0)
0000933C 10BC 003F                  		move.b	#$3F,0(a0)	; change object	to an explosion	($3F)
00009340 117C 0000 0024             		move.b	#0,$24(a0)	; reset	routine	counter
00009346 6000 0000                  		bra.w	Obj3F		; jump to explosion code
0000934A                            ; ===========================================================================
0000934A                            
0000934A                            Obj20_Animate:				; XREF: Obj20_ChkExplode
0000934A 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000934E 6A00                       		bpl.s	Obj20_Display
00009350 117C 0005 001E             		move.b	#5,$1E(a0)	; set frame duration to	5 frames
00009356 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
0000935C                            
0000935C                            Obj20_Display:
0000935C 6100 0000                  		bsr.w	DisplaySprite
00009360 3038 F72E                  		move.w	($FFFFF72E).w,d0
00009364 0640 00E0                  		addi.w	#$E0,d0
00009368 B068 000C                  		cmp.w	$C(a0),d0	; has object fallen off	the level?
0000936C 6500 0000                  		bcs.w	DeleteObject	; if yes, branch
00009370 4E75                       		rts	
00009372                            ; ===========================================================================
00009372                            ; ---------------------------------------------------------------------------
00009372                            ; Object 24 - explosion	from a destroyed monitor
00009372                            ; ---------------------------------------------------------------------------
00009372                            
00009372                            Obj24:					; XREF: Obj_Index
00009372 7000                       		moveq	#0,d0
00009374 1028 0024                  		move.b	$24(a0),d0
00009378 323B 0000                  		move.w	Obj24_Index(pc,d0.w),d1
0000937C 4EFB 1000                  		jmp	Obj24_Index(pc,d1.w)
00009380                            ; ===========================================================================
00009380 0000                       Obj24_Index:	dc.w Obj24_Main-Obj24_Index
00009382 0000                       		dc.w Obj24_Animate-Obj24_Index
00009384                            ; ===========================================================================
00009384                            
00009384                            Obj24_Main:				; XREF: Obj24_Index
00009384 5428 0024                  		addq.b	#2,$24(a0)
00009388 217C 0000 0000 0004        		move.l	#Map_obj24,4(a0)
00009390 317C 041C 0002             		move.w	#$41C,2(a0)
00009396 117C 0004 0001             		move.b	#4,1(a0)
0000939C 117C 0001 0018             		move.b	#1,$18(a0)
000093A2 117C 0000 0020             		move.b	#0,$20(a0)
000093A8 117C 000C 0019             		move.b	#$C,$19(a0)
000093AE 117C 0009 001E             		move.b	#9,$1E(a0)
000093B4 117C 0000 001A             		move.b	#0,$1A(a0)
000093BA 303C 00A5                  		move.w	#$A5,d0
000093BE 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play explosion sound
000093C4                            
000093C4                            Obj24_Animate:				; XREF: Obj24_Index
000093C4 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
000093C8 6A00                       		bpl.s	Obj24_Display
000093CA 117C 0009 001E             		move.b	#9,$1E(a0)	; set frame duration to	9 frames
000093D0 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
000093D4 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is the final frame (04) displayed?
000093DA 6700 0000                  		beq.w	DeleteObject	; if yes, branch
000093DE                            
000093DE                            Obj24_Display:
000093DE 6000 0000                  		bra.w	DisplaySprite
000093E2                            ; ===========================================================================
000093E2                            ; ---------------------------------------------------------------------------
000093E2                            ; Object 27 - explosion	from a destroyed enemy
000093E2                            ; ---------------------------------------------------------------------------
000093E2                            
000093E2                            Obj27:					; XREF: Obj_Index
000093E2 7000                       		moveq	#0,d0
000093E4 1028 0024                  		move.b	$24(a0),d0
000093E8 323B 0000                  		move.w	Obj27_Index(pc,d0.w),d1
000093EC 4EFB 1000                  		jmp	Obj27_Index(pc,d1.w)
000093F0                            ; ===========================================================================
000093F0 0000                       Obj27_Index:	dc.w Obj27_LoadAnimal-Obj27_Index
000093F2 0000                       		dc.w Obj27_Main-Obj27_Index
000093F4 0000                       		dc.w Obj27_Animate-Obj27_Index
000093F6                            ; ===========================================================================
000093F6                            
000093F6                            Obj27_LoadAnimal:			; XREF: Obj27_Index
000093F6 5428 0024                  		addq.b	#2,$24(a0)
000093FA 6100 0000                  		bsr.w	SingleObjLoad
000093FE 6600                       		bne.s	Obj27_Main
00009400 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
00009404 3368 0008 0008             		move.w	8(a0),8(a1)
0000940A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009410 3368 003E 003E             		move.w	$3E(a0),$3E(a1)
00009416                            
00009416                            Obj27_Main:				; XREF: Obj27_Index
00009416 5428 0024                  		addq.b	#2,$24(a0)
0000941A 217C 0000 0000 0004        		move.l	#Map_obj27,4(a0)
00009422 317C 05A0 0002             		move.w	#$5A0,2(a0)
00009428 117C 0004 0001             		move.b	#4,1(a0)
0000942E 117C 0001 0018             		move.b	#1,$18(a0)
00009434 117C 0000 0020             		move.b	#0,$20(a0)
0000943A 117C 000C 0019             		move.b	#$C,$19(a0)
00009440                            		; move.b	#7,$1E(a0)	; set frame duration to	7 frames
00009440 117C 000E 001E             		move.b	#$E,$1E(a0)	; GMZ
00009446 117C 0000 001A             		move.b	#0,$1A(a0)
0000944C 303C 00C1                  		move.w	#$C1,d0
00009450 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play breaking enemy sound
00009456                            
00009456 45F9 0000 0000             		lea	(Obj27_ExplosionXYSpd).l,a2	; GMZ: Get Explosion X/Y Speeds according to subtype
0000945C 1028 0028                  		move.b	$28(a0),d0
00009460 3172 0000 0010             		move.w	(a2,d0.w),$10(a0)
00009466 3172 0002 0012             		move.w	2(a2,d0.w),$12(a0)
0000946C                            
0000946C                            Obj27_Animate:				; XREF: Obj27_Index
0000946C 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00009470 6A00                       		bpl.s	Obj27_Display
00009472                            		; move.b	#7,$1E(a0)	; set frame duration to	7 frames
00009472 117C 000E 001E             		move.b	#$E,$1E(a0)	; GMZ
00009478 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
0000947C 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is the final frame (05) displayed?
00009482 6700 0000                  		beq.w	DeleteObject	; if yes, branch
00009486                            
00009486                            Obj27_Display:
00009486 4EB9 0000 0000             		jsr	SpeedToPos	; GMZ
0000948C 0668 0038 0012             		addi.w	#$38,$12(a0)	; GMZ: Explosion Gravity
00009492 6000 0000                  		bra.w	DisplaySprite
00009496                            ; ===========================================================================
00009496                            ; ---------------------------------------------------------------------------
00009496                            Obj27_ExplosionXYSpd:
00009496                            		; dc.w	-$350, -$300	; Left
00009496                            		; dc.w	-$200, -$450	; Near middle (left)
00009496                            		; dc.w	0, -$500	; Middle
00009496                            		; dc.w	$200, -$450	; Near middle (right)
00009496                            		; dc.w	$350, -$300	; Right
00009496                            
00009496 FEB0 FC00                  		dc.w	-$150, -$400	; Left
0000949A FF00 FAB0                  		dc.w	-$100, -$550	; Near middle (left)
0000949E 0000 FA00                  		dc.w	0, -$600	; Middle
000094A2 0100 FAB0                  		dc.w	$100, -$550	; Near middle (right)
000094A6 0150 FC00                  		dc.w	$150, -$400	; Right
000094AA                            
000094AA 6869 2068 656C 6C6F 2068+  		dc.b	"hi hello hru -garblemarden"
000094C4                            ; ---------------------------------------------------------------------------
000094C4                            ; Object 3F - explosion	from a destroyed boss, bomb or cannonball
000094C4                            ; ---------------------------------------------------------------------------
000094C4                            
000094C4                            Obj3F:					; XREF: Obj_Index
000094C4 7000                       		moveq	#0,d0
000094C6 1028 0024                  		move.b	$24(a0),d0
000094CA 323B 0000                  		move.w	Obj3F_Index(pc,d0.w),d1
000094CE 4EFB 1000                  		jmp	Obj3F_Index(pc,d1.w)
000094D2                            ; ===========================================================================
000094D2 0000                       Obj3F_Index:	dc.w Obj3F_Main-Obj3F_Index
000094D4 FF9A                       		dc.w Obj27_Animate-Obj3F_Index
000094D6                            ; ===========================================================================
000094D6                            
000094D6                            Obj3F_Main:				; XREF: Obj3F_Index
000094D6 5428 0024                  		addq.b	#2,$24(a0)
000094DA 217C 0000 0000 0004        		move.l	#Map_obj3F,4(a0)
000094E2 317C 05A0 0002             		move.w	#$5A0,2(a0)
000094E8 117C 0004 0001             		move.b	#4,1(a0)
000094EE 117C 0001 0018             		move.b	#1,$18(a0)
000094F4 117C 0000 0020             		move.b	#0,$20(a0)
000094FA 117C 000C 0019             		move.b	#$C,$19(a0)
00009500 117C 0007 001E             		move.b	#7,$1E(a0)
00009506 117C 0000 001A             		move.b	#0,$1A(a0)
0000950C 303C 00C4                  		move.w	#$C4,d0
00009510 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play exploding bomb sound
00009516                            ; ===========================================================================
00009516                            Ani_obj1E:
00009516                            	include "_anim\obj1E.asm"
00009516                            ; ---------------------------------------------------------------------------
00009516                            ; Animation script - doors (SBZ)
00009516                            ; ---------------------------------------------------------------------------
00009516 0000                       		dc.w byte_8E4A-Ani_obj1E
00009518 0900 0002 0203 0200 0002+  byte_8E4A:	dc.b 9,	0, 0, 2, 2, 3, 2, 0, 0,	2, 2, 3, 2, 0, 0, 2, 2, 3, 2, 0, 0, 1, $FF
00009530 00                         		even
00009530 00                         		even
00009530                            
00009530                            ; ---------------------------------------------------------------------------
00009530                            ; Sprite mappings - Ball Hog enemy (SBZ)
00009530                            ; ---------------------------------------------------------------------------
00009530                            Map_obj1E:
00009530                            	include "_maps\obj1E.asm"
00009530                            ; ---------------------------------------------------------------------------
00009530                            ; Sprite mappings - Ball Hog enemy (SBZ)
00009530                            ; ---------------------------------------------------------------------------
00009530 0000 0000                  		dc.w byte_8E6E-Map_obj1E, byte_8E79-Map_obj1E
00009534 0000 0000                  		dc.w byte_8E84-Map_obj1E, byte_8E8F-Map_obj1E
00009538 0000 0000                  		dc.w byte_8E9A-Map_obj1E, byte_8EA0-Map_obj1E
0000953C 02                         byte_8E6E:	dc.b 2
0000953D EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
00009542 FF0A 0006 F4               		dc.b $FF, $A, 0, 6, $F4
00009547 02                         byte_8E79:	dc.b 2
00009548 EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
0000954D FF0A 000F F4               		dc.b $FF, $A, 0, $F, $F4
00009552 02                         byte_8E84:	dc.b 2
00009553 F409 0000 F4               		dc.b $F4, 9, 0,	0, $F4
00009558 0409 0018 F4               		dc.b 4,	9, 0, $18, $F4
0000955D 02                         byte_8E8F:	dc.b 2
0000955E E409 0000 F4               		dc.b $E4, 9, 0,	0, $F4
00009563 F40A 001E F4               		dc.b $F4, $A, 0, $1E, $F4
00009568 01                         byte_8E9A:	dc.b 1
00009569 F805 0027 F8               		dc.b $F8, 5, 0,	$27, $F8
0000956E 01                         byte_8EA0:	dc.b 1
0000956F F805 002B F8               		dc.b $F8, 5, 0,	$2B, $F8
00009574                            		even
00009574                            		even
00009574                            
00009574                            ; ---------------------------------------------------------------------------
00009574                            ; Sprite mappings - explosion
00009574                            ; ---------------------------------------------------------------------------
00009574                            Map_obj24:
00009574                            	include "_maps\obj24.asm"
00009574                            ; ---------------------------------------------------------------------------
00009574                            ; Sprite mappings - explosion
00009574                            ; ---------------------------------------------------------------------------
00009574 0000 0000                  		dc.w byte_8EAE-Map_obj24, byte_8EB4-Map_obj24
00009578 0000 0000                  		dc.w byte_8EBA-Map_obj24, byte_8EC0-Map_obj24
0000957C 01                         byte_8EAE:	dc.b 1
0000957D F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00009582 01                         byte_8EB4:	dc.b 1
00009583 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
00009588 01                         byte_8EBA:	dc.b 1
00009589 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0000958E 01                         byte_8EC0:	dc.b 1
0000958F F40A 001B F4               		dc.b $F4, $A, 0, $1B, $F4
00009594                            		even
00009594                            		even
00009594                            
00009594                            ; ---------------------------------------------------------------------------
00009594                            ; Sprite mappings - explosion
00009594                            ; ---------------------------------------------------------------------------
00009594 0000 0000                  Map_obj27:	dc.w byte_8ED0-Map_obj27, byte_8ED6-Map_obj27
00009598 0000 0000                  		dc.w byte_8EDC-Map_obj27, byte_8EE2-Map_obj27
0000959C 0000                       		dc.w byte_8EF7-Map_obj27
0000959E 01                         byte_8ED0:	dc.b 1
0000959F F809 0000 F4               		dc.b $F8, 9, 0,	0, $F4
000095A4 01                         byte_8ED6:	dc.b 1
000095A5 F00F 0006 F0               		dc.b $F0, $F, 0, 6, $F0
000095AA 01                         byte_8EDC:	dc.b 1
000095AB F00F 0016 F0               		dc.b $F0, $F, 0, $16, $F0
000095B0 04                         byte_8EE2:	dc.b 4
000095B1 EC0A 0026 EC               		dc.b $EC, $A, 0, $26, $EC
000095B6 EC05 002F 04               		dc.b $EC, 5, 0,	$2F, 4
000095BB 0405 182F EC               		dc.b 4,	5, $18,	$2F, $EC
000095C0 FC0A 1826 FC               		dc.b $FC, $A, $18, $26,	$FC
000095C5 04                         byte_8EF7:	dc.b 4
000095C6 EC0A 0033 EC               		dc.b $EC, $A, 0, $33, $EC
000095CB EC05 003C 04               		dc.b $EC, 5, 0,	$3C, 4
000095D0 0405 183C EC               		dc.b 4,	5, $18,	$3C, $EC
000095D5 FC0A 1833 FC               		dc.b $FC, $A, $18, $33,	$FC
000095DA                            		even
000095DA                            ; ---------------------------------------------------------------------------
000095DA                            ; Sprite mappings - explosion from when	a boss is destroyed
000095DA                            ; ---------------------------------------------------------------------------
000095DA FFC4                       Map_obj3F:	dc.w byte_8ED0-Map_obj3F
000095DC 0000                       		dc.w byte_8F16-Map_obj3F
000095DE 0000                       		dc.w byte_8F1C-Map_obj3F
000095E0 FFD6                       		dc.w byte_8EE2-Map_obj3F
000095E2 FFEB                       		dc.w byte_8EF7-Map_obj3F
000095E4 01                         byte_8F16:	dc.b 1
000095E5 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
000095EA 01                         byte_8F1C:	dc.b 1
000095EB F00F 0050 F0               		dc.b $F0, $F, 0, $50, $F0
000095F0                            		even
000095F0                            ; ===========================================================================
000095F0                            ; ---------------------------------------------------------------------------
000095F0                            ; Object 28 - animals
000095F0                            ; ---------------------------------------------------------------------------
000095F0                            
000095F0                            Obj28:					; XREF: Obj_Index
000095F0 7000                       		moveq	#0,d0
000095F2 1028 0024                  		move.b	$24(a0),d0
000095F6 323B 0000                  		move.w	Obj28_Index(pc,d0.w),d1
000095FA 4EFB 1000                  		jmp	Obj28_Index(pc,d1.w)
000095FE                            ; ===========================================================================
000095FE 0000 0000                  Obj28_Index:	dc.w Obj28_Ending-Obj28_Index, loc_912A-Obj28_Index
00009602 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
00009606 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9184-Obj28_Index
0000960A 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
0000960E 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9240-Obj28_Index
00009612 0000 0000                  		dc.w loc_9260-Obj28_Index, loc_9260-Obj28_Index
00009616 0000 0000                  		dc.w loc_9280-Obj28_Index, loc_92BA-Obj28_Index
0000961A 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
0000961E 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
00009622 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9370-Obj28_Index
00009626 0000                       		dc.w loc_92D6-Obj28_Index
00009628                            
00009628 0005 0203 0603 0405 0401+  Obj28_VarIndex:	dc.b 0,	5, 2, 3, 6, 3, 4, 5, 4,	1, 0, 1
00009634                            
00009634 FE00 FC00                  Obj28_Variables:dc.w $FE00, $FC00
00009638 0000 0000                  		dc.l Map_obj28
0000963C FE00 FD00                  		dc.w $FE00, $FD00	; horizontal speed, vertical speed
00009640 0000 0000                  		dc.l Map_obj28a		; mappings address
00009644 FE80 FD00                  		dc.w $FE80, $FD00
00009648 0000 0000                  		dc.l Map_obj28
0000964C FEC0 FE80                  		dc.w $FEC0, $FE80
00009650 0000 0000                  		dc.l Map_obj28a
00009654 FE40 FD00                  		dc.w $FE40, $FD00
00009658 0000 0000                  		dc.l Map_obj28b
0000965C FD00 FC00                  		dc.w $FD00, $FC00
00009660 0000 0000                  		dc.l Map_obj28a
00009664 FD80 FC80                  		dc.w $FD80, $FC80
00009668 0000 0000                  		dc.l Map_obj28b
0000966C                            
0000966C FBC0 FC00 FBC0 FC00 FBC0+  Obj28_EndSpeed:	dc.w $FBC0, $FC00, $FBC0, $FC00, $FBC0,	$FC00, $FD00, $FC00
0000967C FD00 FC00 FE80 FD00 FE80+  		dc.w $FD00, $FC00, $FE80, $FD00, $FE80,	$FD00, $FEC0, $FE80
0000968C FE40 FD00 FE00 FD00 FD80+  		dc.w $FE40, $FD00, $FE00, $FD00, $FD80,	$FC80
00009698                            
00009698 0000 0000 0000 0000 0000+  Obj28_EndMap:	dc.l Map_obj28a, Map_obj28a, Map_obj28a, Map_obj28, Map_obj28
000096AC 0000 0000 0000 0000 0000+  		dc.l Map_obj28,	Map_obj28, Map_obj28a, Map_obj28b, Map_obj28a
000096C0 0000 0000                  		dc.l Map_obj28b
000096C4                            
000096C4 05A5 05A5 05A5 0553 0553+  Obj28_EndVram:	dc.w $5A5, $5A5, $5A5, $553, $553, $573, $573, $585, $593
000096D6 0565 05B3                  		dc.w $565, $5B3
000096DA                            ; ===========================================================================
000096DA                            
000096DA                            Obj28_Ending:				; XREF: Obj28_Index
000096DA 4A28 0028                  		tst.b	$28(a0)		; did animal come from a destroyed enemy?
000096DE 6700 0000                  		beq.w	Obj28_FromEnemy	; if yes, branch
000096E2 7000                       		moveq	#0,d0
000096E4 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
000096E8 D040                       		add.w	d0,d0		; multiply d0 by 2
000096EA 1140 0024                  		move.b	d0,$24(a0)	; move d0 to routine counter
000096EE 0440 0014                  		subi.w	#$14,d0
000096F2 317B 00D0 0002             		move.w	Obj28_EndVram(pc,d0.w),2(a0)
000096F8 D040                       		add.w	d0,d0
000096FA 217B 009C 0004             		move.l	Obj28_EndMap(pc,d0.w),4(a0)
00009700 43FA FF6A                  		lea	Obj28_EndSpeed(pc),a1
00009704 3171 0000 0032             		move.w	(a1,d0.w),$32(a0) ; load horizontal speed
0000970A 3171 0000 0010             		move.w	(a1,d0.w),$10(a0)
00009710 3171 0002 0034             		move.w	2(a1,d0.w),$34(a0) ; load vertical speed
00009716 3171 0002 0012             		move.w	2(a1,d0.w),$12(a0)
0000971C 117C 000C 0016             		move.b	#$C,$16(a0)
00009722 117C 0004 0001             		move.b	#4,1(a0)
00009728 08E8 0000 0001             		bset	#0,1(a0)
0000972E 117C 0006 0018             		move.b	#6,$18(a0)
00009734 117C 0008 0019             		move.b	#8,$19(a0)
0000973A 117C 0007 001E             		move.b	#7,$1E(a0)
00009740 6000 0000                  		bra.w	DisplaySprite
00009744                            ; ===========================================================================
00009744                            
00009744                            Obj28_FromEnemy:			; XREF: Obj28_Ending
00009744 5428 0024                  		addq.b	#2,$24(a0)
00009748 6100 9554                  		bsr.w	RandomNumber
0000974C 0240 0001                  		andi.w	#1,d0
00009750 7200                       		moveq	#0,d1
00009752 1238 FE10                  		move.b	($FFFFFE10).w,d1
00009756 D241                       		add.w	d1,d1
00009758 D240                       		add.w	d0,d1
0000975A 43FA FECC                  		lea	Obj28_VarIndex(pc),a1
0000975E 1031 1000                  		move.b	(a1,d1.w),d0
00009762 1140 0030                  		move.b	d0,$30(a0)
00009766 E748                       		lsl.w	#3,d0
00009768 43FA FECA                  		lea	Obj28_Variables(pc),a1
0000976C D2C0                       		adda.w	d0,a1
0000976E 3159 0032                  		move.w	(a1)+,$32(a0)	; load horizontal speed
00009772 3159 0034                  		move.w	(a1)+,$34(a0)	; load vertical	speed
00009776 2159 0004                  		move.l	(a1)+,4(a0)	; load mappings
0000977A 317C 0580 0002             		move.w	#$580,2(a0)	; VRAM setting for 1st animal
00009780 0828 0000 0030             		btst	#0,$30(a0)	; is 1st animal	used?
00009786 6700                       		beq.s	loc_90C0	; if yes, branch
00009788 317C 0592 0002             		move.w	#$592,2(a0)	; VRAM setting for 2nd animal
0000978E                            
0000978E                            loc_90C0:
0000978E 117C 000C 0016             		move.b	#$C,$16(a0)
00009794 117C 0004 0001             		move.b	#4,1(a0)
0000979A 08E8 0000 0001             		bset	#0,1(a0)
000097A0 117C 0006 0018             		move.b	#6,$18(a0)
000097A6 117C 0008 0019             		move.b	#8,$19(a0)
000097AC 117C 0007 001E             		move.b	#7,$1E(a0)
000097B2 117C 0002 001A             		move.b	#2,$1A(a0)
000097B8 317C FC00 0012             		move.w	#-$400,$12(a0)
000097BE 4A38 F7A7                  		tst.b	($FFFFF7A7).w
000097C2 6600                       		bne.s	loc_911C
000097C4 6100 0000                  		bsr.w	SingleObjLoad
000097C8 6600                       		bne.s	Obj28_Display
000097CA 12BC 0029                  		move.b	#$29,0(a1)	; load points object
000097CE 3368 0008 0008             		move.w	8(a0),8(a1)
000097D4 3368 000C 000C             		move.w	$C(a0),$C(a1)
000097DA 3028 003E                  		move.w	$3E(a0),d0
000097DE E248                       		lsr.w	#1,d0
000097E0 1340 001A                  		move.b	d0,$1A(a1)
000097E4                            
000097E4                            Obj28_Display:
000097E4 6000 0000                  		bra.w	DisplaySprite
000097E8                            ; ===========================================================================
000097E8                            
000097E8                            loc_911C:
000097E8 117C 0012 0024             		move.b	#$12,$24(a0)
000097EE 4268 0010                  		clr.w	$10(a0)
000097F2 6000 0000                  		bra.w	DisplaySprite
000097F6                            ; ===========================================================================
000097F6                            
000097F6                            loc_912A:				; XREF: Obj28_Index
000097F6 4A28 0001                  		tst.b	1(a0)
000097FA 6A00 0000                  		bpl.w	DeleteObject
000097FE 6100 0000                  		bsr.w	ObjectFall
00009802 4A68 0012                  		tst.w	$12(a0)
00009806 6B00                       		bmi.s	loc_9180
00009808 4EB9 0000 0000             		jsr	ObjHitFloor
0000980E 4A41                       		tst.w	d1
00009810 6A00                       		bpl.s	loc_9180
00009812 D368 000C                  		add.w	d1,$C(a0)
00009816 3168 0032 0010             		move.w	$32(a0),$10(a0)
0000981C 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009822 117C 0001 001A             		move.b	#1,$1A(a0)
00009828 1028 0030                  		move.b	$30(a0),d0
0000982C D000                       		add.b	d0,d0
0000982E 5800                       		addq.b	#4,d0
00009830 1140 0024                  		move.b	d0,$24(a0)
00009834 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00009838 6700                       		beq.s	loc_9180
0000983A 0838 0004 FE0F             		btst	#4,($FFFFFE0F).w
00009840 6700                       		beq.s	loc_9180
00009842 4468 0010                  		neg.w	$10(a0)
00009846 0868 0000 0001             		bchg	#0,1(a0)
0000984C                            
0000984C                            loc_9180:
0000984C 6000 0000                  		bra.w	DisplaySprite
00009850                            ; ===========================================================================
00009850                            
00009850                            loc_9184:				; XREF: Obj28_Index
00009850 6100 0000                  		bsr.w	ObjectFall
00009854 117C 0001 001A             		move.b	#1,$1A(a0)
0000985A 4A68 0012                  		tst.w	$12(a0)
0000985E 6B00                       		bmi.s	loc_91AE
00009860 117C 0000 001A             		move.b	#0,$1A(a0)
00009866 4EB9 0000 0000             		jsr	ObjHitFloor
0000986C 4A41                       		tst.w	d1
0000986E 6A00                       		bpl.s	loc_91AE
00009870 D368 000C                  		add.w	d1,$C(a0)
00009874 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000987A                            
0000987A                            loc_91AE:
0000987A 4A28 0028                  		tst.b	$28(a0)
0000987E 6600                       		bne.s	loc_9224
00009880 4A28 0001                  		tst.b	1(a0)
00009884 6A00 0000                  		bpl.w	DeleteObject
00009888 6000 0000                  		bra.w	DisplaySprite
0000988C                            ; ===========================================================================
0000988C                            
0000988C                            loc_91C0:				; XREF: Obj28_Index
0000988C 6100 0000                  		bsr.w	SpeedToPos
00009890 0668 0018 0012             		addi.w	#$18,$12(a0)
00009896 4A68 0012                  		tst.w	$12(a0)
0000989A 6B00                       		bmi.s	loc_91FC
0000989C 4EB9 0000 0000             		jsr	ObjHitFloor
000098A2 4A41                       		tst.w	d1
000098A4 6A00                       		bpl.s	loc_91FC
000098A6 D368 000C                  		add.w	d1,$C(a0)
000098AA 3168 0034 0012             		move.w	$34(a0),$12(a0)
000098B0 4A28 0028                  		tst.b	$28(a0)
000098B4 6700                       		beq.s	loc_91FC
000098B6 0C28 000A 0028             		cmpi.b	#$A,$28(a0)
000098BC 6700                       		beq.s	loc_91FC
000098BE 4468 0010                  		neg.w	$10(a0)
000098C2 0868 0000 0001             		bchg	#0,1(a0)
000098C8                            
000098C8                            loc_91FC:
000098C8 5328 001E                  		subq.b	#1,$1E(a0)
000098CC 6A00                       		bpl.s	loc_9212
000098CE 117C 0001 001E             		move.b	#1,$1E(a0)
000098D4 5228 001A                  		addq.b	#1,$1A(a0)
000098D8 0228 0001 001A             		andi.b	#1,$1A(a0)
000098DE                            
000098DE                            loc_9212:
000098DE 4A28 0028                  		tst.b	$28(a0)
000098E2 6600                       		bne.s	loc_9224
000098E4 4A28 0001                  		tst.b	1(a0)
000098E8 6A00 0000                  		bpl.w	DeleteObject
000098EC 6000 0000                  		bra.w	DisplaySprite
000098F0                            ; ===========================================================================
000098F0                            
000098F0                            loc_9224:				; XREF: Obj28_Index
000098F0 3028 0008                  		move.w	8(a0),d0
000098F4 9078 D008                  		sub.w	($FFFFD008).w,d0
000098F8 6500                       		bcs.s	loc_923C
000098FA 0440 0180                  		subi.w	#$180,d0
000098FE 6A00                       		bpl.s	loc_923C
00009900 4A28 0001                  		tst.b	1(a0)
00009904 6A00 0000                  		bpl.w	DeleteObject
00009908                            
00009908                            loc_923C:
00009908 6000 0000                  		bra.w	DisplaySprite
0000990C                            ; ===========================================================================
0000990C                            
0000990C                            loc_9240:				; XREF: Obj28_Index
0000990C 4A28 0001                  		tst.b	1(a0)
00009910 6A00 0000                  		bpl.w	DeleteObject
00009914 5368 0036                  		subq.w	#1,$36(a0)
00009918 6600 0000                  		bne.w	loc_925C
0000991C 117C 0002 0024             		move.b	#2,$24(a0)
00009922 117C 0003 0018             		move.b	#3,$18(a0)
00009928                            
00009928                            loc_925C:
00009928 6000 0000                  		bra.w	DisplaySprite
0000992C                            ; ===========================================================================
0000992C                            
0000992C                            loc_9260:				; XREF: Obj28_Index
0000992C 6100 0000                  		bsr.w	sub_9404
00009930 6400                       		bcc.s	loc_927C
00009932 3168 0032 0010             		move.w	$32(a0),$10(a0)
00009938 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000993E 117C 000E 0024             		move.b	#$E,$24(a0)
00009944 6000 FF46                  		bra.w	loc_91C0
00009948                            ; ===========================================================================
00009948                            
00009948                            loc_927C:
00009948 6000 FFA6                  		bra.w	loc_9224
0000994C                            ; ===========================================================================
0000994C                            
0000994C                            loc_9280:				; XREF: Obj28_Index
0000994C 6100 0000                  		bsr.w	sub_9404
00009950 6A00                       		bpl.s	loc_92B6
00009952 4268 0010                  		clr.w	$10(a0)
00009956 4268 0032                  		clr.w	$32(a0)
0000995A 6100 0000                  		bsr.w	SpeedToPos
0000995E 0668 0018 0012             		addi.w	#$18,$12(a0)
00009964 6100 0000                  		bsr.w	loc_93C4
00009968 6100 0000                  		bsr.w	loc_93EC
0000996C 5328 001E                  		subq.b	#1,$1E(a0)
00009970 6A00                       		bpl.s	loc_92B6
00009972 117C 0001 001E             		move.b	#1,$1E(a0)
00009978 5228 001A                  		addq.b	#1,$1A(a0)
0000997C 0228 0001 001A             		andi.b	#1,$1A(a0)
00009982                            
00009982                            loc_92B6:
00009982 6000 FF6C                  		bra.w	loc_9224
00009986                            ; ===========================================================================
00009986                            
00009986                            loc_92BA:				; XREF: Obj28_Index
00009986 6100 0000                  		bsr.w	sub_9404
0000998A 6A00                       		bpl.s	loc_9310
0000998C 3168 0032 0010             		move.w	$32(a0),$10(a0)
00009992 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009998 117C 0004 0024             		move.b	#4,$24(a0)
0000999E 6000 FEB0                  		bra.w	loc_9184
000099A2                            ; ===========================================================================
000099A2                            
000099A2                            loc_92D6:				; XREF: Obj28_Index
000099A2 6100 0000                  		bsr.w	ObjectFall
000099A6 117C 0001 001A             		move.b	#1,$1A(a0)
000099AC 4A68 0012                  		tst.w	$12(a0)
000099B0 6B00                       		bmi.s	loc_9310
000099B2 117C 0000 001A             		move.b	#0,$1A(a0)
000099B8 4EB9 0000 0000             		jsr	ObjHitFloor
000099BE 4A41                       		tst.w	d1
000099C0 6A00                       		bpl.s	loc_9310
000099C2 4628 0029                  		not.b	$29(a0)
000099C6 6600                       		bne.s	loc_9306
000099C8 4468 0010                  		neg.w	$10(a0)
000099CC 0868 0000 0001             		bchg	#0,1(a0)
000099D2                            
000099D2                            loc_9306:
000099D2 D368 000C                  		add.w	d1,$C(a0)
000099D6 3168 0034 0012             		move.w	$34(a0),$12(a0)
000099DC                            
000099DC                            loc_9310:
000099DC 6000 FF12                  		bra.w	loc_9224
000099E0                            ; ===========================================================================
000099E0                            
000099E0                            loc_9314:				; XREF: Obj28_Index
000099E0 6100 0000                  		bsr.w	sub_9404
000099E4 6A00                       		bpl.s	loc_932E
000099E6 4268 0010                  		clr.w	$10(a0)
000099EA 4268 0032                  		clr.w	$32(a0)
000099EE 6100 0000                  		bsr.w	ObjectFall
000099F2 6100 0000                  		bsr.w	loc_93C4
000099F6 6100 0000                  		bsr.w	loc_93EC
000099FA                            
000099FA                            loc_932E:
000099FA 6000 FEF4                  		bra.w	loc_9224
000099FE                            ; ===========================================================================
000099FE                            
000099FE                            loc_9332:				; XREF: Obj28_Index
000099FE 6100 0000                  		bsr.w	sub_9404
00009A02 6A00                       		bpl.s	loc_936C
00009A04 6100 0000                  		bsr.w	ObjectFall
00009A08 117C 0001 001A             		move.b	#1,$1A(a0)
00009A0E 4A68 0012                  		tst.w	$12(a0)
00009A12 6B00                       		bmi.s	loc_936C
00009A14 117C 0000 001A             		move.b	#0,$1A(a0)
00009A1A 4EB9 0000 0000             		jsr	ObjHitFloor
00009A20 4A41                       		tst.w	d1
00009A22 6A00                       		bpl.s	loc_936C
00009A24 4468 0010                  		neg.w	$10(a0)
00009A28 0868 0000 0001             		bchg	#0,1(a0)
00009A2E D368 000C                  		add.w	d1,$C(a0)
00009A32 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009A38                            
00009A38                            loc_936C:
00009A38 6000 FEB6                  		bra.w	loc_9224
00009A3C                            ; ===========================================================================
00009A3C                            
00009A3C                            loc_9370:				; XREF: Obj28_Index
00009A3C 6100 0000                  		bsr.w	sub_9404
00009A40 6A00                       		bpl.s	loc_93C0
00009A42 6100 0000                  		bsr.w	SpeedToPos
00009A46 0668 0018 0012             		addi.w	#$18,$12(a0)
00009A4C 4A68 0012                  		tst.w	$12(a0)
00009A50 6B00                       		bmi.s	loc_93AA
00009A52 4EB9 0000 0000             		jsr	ObjHitFloor
00009A58 4A41                       		tst.w	d1
00009A5A 6A00                       		bpl.s	loc_93AA
00009A5C 4628 0029                  		not.b	$29(a0)
00009A60 6600                       		bne.s	loc_93A0
00009A62 4468 0010                  		neg.w	$10(a0)
00009A66 0868 0000 0001             		bchg	#0,1(a0)
00009A6C                            
00009A6C                            loc_93A0:
00009A6C D368 000C                  		add.w	d1,$C(a0)
00009A70 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009A76                            
00009A76                            loc_93AA:
00009A76 5328 001E                  		subq.b	#1,$1E(a0)
00009A7A 6A00                       		bpl.s	loc_93C0
00009A7C 117C 0001 001E             		move.b	#1,$1E(a0)
00009A82 5228 001A                  		addq.b	#1,$1A(a0)
00009A86 0228 0001 001A             		andi.b	#1,$1A(a0)
00009A8C                            
00009A8C                            loc_93C0:
00009A8C 6000 FE62                  		bra.w	loc_9224
00009A90                            ; ===========================================================================
00009A90                            
00009A90                            loc_93C4:
00009A90 117C 0001 001A             		move.b	#1,$1A(a0)
00009A96 4A68 0012                  		tst.w	$12(a0)
00009A9A 6B00                       		bmi.s	locret_93EA
00009A9C 117C 0000 001A             		move.b	#0,$1A(a0)
00009AA2 4EB9 0000 0000             		jsr	ObjHitFloor
00009AA8 4A41                       		tst.w	d1
00009AAA 6A00                       		bpl.s	locret_93EA
00009AAC D368 000C                  		add.w	d1,$C(a0)
00009AB0 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009AB6                            
00009AB6                            locret_93EA:
00009AB6 4E75                       		rts	
00009AB8                            ; ===========================================================================
00009AB8                            
00009AB8                            loc_93EC:
00009AB8 08E8 0000 0001             		bset	#0,1(a0)
00009ABE 3028 0008                  		move.w	8(a0),d0
00009AC2 9078 D008                  		sub.w	($FFFFD008).w,d0
00009AC6 6400                       		bcc.s	locret_9402
00009AC8 08A8 0000 0001             		bclr	#0,1(a0)
00009ACE                            
00009ACE                            locret_9402:
00009ACE 4E75                       		rts	
00009AD0                            
00009AD0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009AD0                            
00009AD0                            
00009AD0                            sub_9404:
00009AD0 3038 D008                  		move.w	($FFFFD008).w,d0
00009AD4 9068 0008                  		sub.w	8(a0),d0
00009AD8 0440 00B8                  		subi.w	#$B8,d0
00009ADC 4E75                       		rts	
00009ADE                            ; End of function sub_9404
00009ADE                            
00009ADE                            ; ===========================================================================
00009ADE                            ; ---------------------------------------------------------------------------
00009ADE                            ; Object 29 - points that appear when you destroy something
00009ADE                            ; ---------------------------------------------------------------------------
00009ADE                            
00009ADE                            Obj29:					; XREF: Obj_Index
00009ADE 7000                       		moveq	#0,d0
00009AE0 1028 0024                  		move.b	$24(a0),d0
00009AE4 323B 0000                  		move.w	Obj29_Index(pc,d0.w),d1
00009AE8 4EBB 1000                  		jsr	Obj29_Index(pc,d1.w)
00009AEC 6000 0000                  		bra.w	DisplaySprite
00009AF0                            ; ===========================================================================
00009AF0 0000                       Obj29_Index:	dc.w Obj29_Main-Obj29_Index
00009AF2 0000                       		dc.w Obj29_Slower-Obj29_Index
00009AF4                            ; ===========================================================================
00009AF4                            
00009AF4                            Obj29_Main:				; XREF: Obj29_Index
00009AF4 5428 0024                  		addq.b	#2,$24(a0)
00009AF8 217C 0000 0000 0004        		move.l	#Map_obj29,4(a0)
00009B00 317C 2797 0002             		move.w	#$2797,2(a0)
00009B06 117C 0004 0001             		move.b	#4,1(a0)
00009B0C 117C 0001 0018             		move.b	#1,$18(a0)
00009B12 117C 0008 0019             		move.b	#8,$19(a0)
00009B18 317C FD00 0012             		move.w	#-$300,$12(a0)	; move object upwards
00009B1E                            
00009B1E                            Obj29_Slower:				; XREF: Obj29_Index
00009B1E 4A68 0012                  		tst.w	$12(a0)		; is object moving?
00009B22 6A00 0000                  		bpl.w	DeleteObject	; if not, branch
00009B26 6100 0000                  		bsr.w	SpeedToPos
00009B2A 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
00009B30 4E75                       		rts	
00009B32                            ; ===========================================================================
00009B32                            ; ---------------------------------------------------------------------------
00009B32                            ; Sprite mappings - animals
00009B32                            ; ---------------------------------------------------------------------------
00009B32                            Map_obj28:
00009B32                            	include "_maps\obj28.asm"
00009B32                            ; ---------------------------------------------------------------------------
00009B32                            ; Sprite mappings - animals
00009B32                            ; ---------------------------------------------------------------------------
00009B32 0000                       		dc.w byte_9472-Map_obj28
00009B34 0000                       		dc.w byte_9478-Map_obj28
00009B36 0000                       		dc.w byte_946C-Map_obj28
00009B38 01                         byte_946C:	dc.b 1
00009B39 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009B3E 01                         byte_9472:	dc.b 1
00009B3F F406 0006 F8               		dc.b $F4, 6, 0,	6, $F8
00009B44 01                         byte_9478:	dc.b 1
00009B45 F406 000C F8               		dc.b $F4, 6, 0,	$C, $F8
00009B4A                            		even
00009B4A                            		even
00009B4A                            
00009B4A                            Map_obj28a:
00009B4A                            	include "_maps\obj28a.asm"
00009B4A                            ; ---------------------------------------------------------------------------
00009B4A                            ; Sprite mappings - animals
00009B4A                            ; ---------------------------------------------------------------------------
00009B4A 0000                       		dc.w byte_948A-Map_obj28a
00009B4C 0000                       		dc.w byte_9490-Map_obj28a
00009B4E 0000                       		dc.w byte_9484-Map_obj28a
00009B50 01                         byte_9484:	dc.b 1
00009B51 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009B56 01                         byte_948A:	dc.b 1
00009B57 FC05 0006 F8               		dc.b $FC, 5, 0,	6, $F8
00009B5C 01                         byte_9490:	dc.b 1
00009B5D FC05 000A F8               		dc.b $FC, 5, 0,	$A, $F8
00009B62                            		even
00009B62                            		even
00009B62                            
00009B62                            Map_obj28b:
00009B62                            	include "_maps\obj28b.asm"
00009B62                            ; ---------------------------------------------------------------------------
00009B62                            ; Sprite mappings - animals
00009B62                            ; ---------------------------------------------------------------------------
00009B62 0000                       		dc.w byte_94A2-Map_obj28b
00009B64 0000                       		dc.w byte_94A8-Map_obj28b
00009B66 0000                       		dc.w byte_949C-Map_obj28b
00009B68 01                         byte_949C:	dc.b 1
00009B69 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009B6E 01                         byte_94A2:	dc.b 1
00009B6F FC09 0006 F4               		dc.b $FC, 9, 0,	6, $F4
00009B74 01                         byte_94A8:	dc.b 1
00009B75 FC09 000C F4               		dc.b $FC, 9, 0,	$C, $F4
00009B7A                            		even
00009B7A                            		even
00009B7A                            
00009B7A                            ; ---------------------------------------------------------------------------
00009B7A                            ; Sprite mappings - points that	appear when you	destroy	something
00009B7A                            ; ---------------------------------------------------------------------------
00009B7A                            Map_obj29:
00009B7A                            	include "_maps\obj29.asm"
00009B7A                            ; ---------------------------------------------------------------------------
00009B7A                            ; Sprite mappings - points that	appear when you	destroy	something
00009B7A                            ; ---------------------------------------------------------------------------
00009B7A 0000 0000                  		dc.w byte_94BC-Map_obj29, byte_94C2-Map_obj29
00009B7E 0000 0000                  		dc.w byte_94C8-Map_obj29, byte_94CE-Map_obj29
00009B82 0000 0000                  		dc.w byte_94D4-Map_obj29, byte_94DA-Map_obj29
00009B86 0000                       		dc.w byte_94E5-Map_obj29
00009B88 01                         byte_94BC:	dc.b 1
00009B89 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8	; 100 points
00009B8E 01                         byte_94C2:	dc.b 1
00009B8F FC04 0002 F8               		dc.b $FC, 4, 0,	2, $F8	; 200 points
00009B94 01                         byte_94C8:	dc.b 1
00009B95 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8	; 500 points
00009B9A 01                         byte_94CE:	dc.b 1
00009B9B FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8	; 1000 points
00009BA0 01                         byte_94D4:	dc.b 1
00009BA1 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC	; 10 points
00009BA6 02                         byte_94DA:	dc.b 2
00009BA7 FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 10,000 points
00009BAC FC04 0007 01               		dc.b $FC, 4, 0,	7, 1
00009BB1 02                         byte_94E5:	dc.b 2
00009BB2 FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 100,000 points
00009BB7 FC04 0007 06               		dc.b $FC, 4, 0,	7, 6
00009BBC                            		even
00009BBC                            		even
00009BBC                            
00009BBC                            ; ===========================================================================
00009BBC                            ; ---------------------------------------------------------------------------
00009BBC                            ; Object 1F - Crabmeat enemy (GHZ, SYZ)
00009BBC                            ; ---------------------------------------------------------------------------
00009BBC                            
00009BBC                            Obj1F:					; XREF: Obj_Index
00009BBC 7000                       		moveq	#0,d0
00009BBE 1028 0024                  		move.b	$24(a0),d0
00009BC2 323B 0000                  		move.w	Obj1F_Index(pc,d0.w),d1
00009BC6 4EFB 1000                  		jmp	Obj1F_Index(pc,d1.w)
00009BCA                            ; ===========================================================================
00009BCA 0000                       Obj1F_Index:	dc.w Obj1F_Main-Obj1F_Index
00009BCC 0000                       		dc.w Obj1F_Action-Obj1F_Index
00009BCE 0000                       		dc.w Obj1F_Delete-Obj1F_Index
00009BD0 0000                       		dc.w Obj1F_BallMain-Obj1F_Index
00009BD2 0000                       		dc.w Obj1F_BallMove-Obj1F_Index
00009BD4                            ; ===========================================================================
00009BD4                            
00009BD4                            Obj1F_Main:				; XREF: Obj1F_Index
00009BD4 117C 0010 0016             		move.b	#$10,$16(a0)
00009BDA 117C 0008 0017             		move.b	#8,$17(a0)
00009BE0 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
00009BE8 317C 0400 0002             		move.w	#$400,2(a0)
00009BEE 117C 0004 0001             		move.b	#4,1(a0)
00009BF4 117C 0003 0018             		move.b	#3,$18(a0)
00009BFA 117C 0006 0020             		move.b	#6,$20(a0)
00009C00 117C 0015 0019             		move.b	#$15,$19(a0)
00009C06 6100 0000                  		bsr.w	ObjectFall
00009C0A 4EB9 0000 0000             		jsr	ObjHitFloor
00009C10 4A41                       		tst.w	d1
00009C12 6A00                       		bpl.s	locret_955A
00009C14 D368 000C                  		add.w	d1,$C(a0)
00009C18 1143 0026                  		move.b	d3,$26(a0)
00009C1C 317C 0000 0012             		move.w	#0,$12(a0)
00009C22 5428 0024                  		addq.b	#2,$24(a0)
00009C26                            
00009C26                            locret_955A:
00009C26 4E75                       		rts	
00009C28                            ; ===========================================================================
00009C28                            
00009C28                            Obj1F_Action:				; XREF: Obj1F_Index
00009C28 7000                       		moveq	#0,d0
00009C2A 1028 0025                  		move.b	$25(a0),d0
00009C2E 323B 0000                  		move.w	Obj1F_Index2(pc,d0.w),d1
00009C32 4EBB 1000                  		jsr	Obj1F_Index2(pc,d1.w)
00009C36 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
00009C3C 6100 0000                  		bsr.w	AnimateSprite
00009C40 6000 0000                  		bra.w	MarkObjGone
00009C44                            ; ===========================================================================
00009C44 0000                       Obj1F_Index2:	dc.w Obj1F_WaitFire-Obj1F_Index2
00009C46 0000                       		dc.w Obj1F_WalkOnFloor-Obj1F_Index2
00009C48                            ; ===========================================================================
00009C48                            
00009C48                            Obj1F_WaitFire:				; XREF: Obj1F_Index2
00009C48 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00009C4C 6A00                       		bpl.s	locret_95B6
00009C4E 4A28 0001                  		tst.b	1(a0)
00009C52 6A00                       		bpl.s	Obj1F_Move
00009C54 0868 0001 0032             		bchg	#1,$32(a0)
00009C5A 6600                       		bne.s	Obj1F_MakeFire
00009C5C                            
00009C5C                            Obj1F_Move:
00009C5C 5428 0025                  		addq.b	#2,$25(a0)
00009C60 317C 007F 0030             		move.w	#127,$30(a0)	; set time delay to approx 2 seconds
00009C66 317C 0080 0010             		move.w	#$80,$10(a0)	; move Crabmeat	to the right
00009C6C 6100 0000                  		bsr.w	Obj1F_SetAni
00009C70 5600                       		addq.b	#3,d0
00009C72 1140 001C                  		move.b	d0,$1C(a0)
00009C76 0868 0000 0022             		bchg	#0,$22(a0)
00009C7C 6600                       		bne.s	locret_95B6
00009C7E 4468 0010                  		neg.w	$10(a0)		; change direction
00009C82                            
00009C82                            locret_95B6:
00009C82 4E75                       		rts	
00009C84                            ; ===========================================================================
00009C84                            
00009C84                            Obj1F_MakeFire:				; XREF: Obj1F_WaitFire
00009C84 317C 003B 0030             		move.w	#$3B,$30(a0)
00009C8A 117C 0006 001C             		move.b	#6,$1C(a0)	; use firing animation
00009C90 6100 0000                  		bsr.w	SingleObjLoad
00009C94 6600                       		bne.s	Obj1F_MakeFire2
00009C96 12BC 001F                  		move.b	#$1F,0(a1)	; load left fireball
00009C9A 137C 0006 0024             		move.b	#6,$24(a1)
00009CA0 3368 0008 0008             		move.w	8(a0),8(a1)
00009CA6 0469 0010 0008             		subi.w	#$10,8(a1)
00009CAC 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009CB2 337C FF00 0010             		move.w	#-$100,$10(a1)
00009CB8                            
00009CB8                            Obj1F_MakeFire2:
00009CB8 6100 0000                  		bsr.w	SingleObjLoad
00009CBC 6600                       		bne.s	locret_9618
00009CBE 12BC 001F                  		move.b	#$1F,0(a1)	; load right fireball
00009CC2 137C 0006 0024             		move.b	#6,$24(a1)
00009CC8 3368 0008 0008             		move.w	8(a0),8(a1)
00009CCE 0669 0010 0008             		addi.w	#$10,8(a1)
00009CD4 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009CDA 337C 0100 0010             		move.w	#$100,$10(a1)
00009CE0                            
00009CE0                            locret_9618:
00009CE0 4E75                       		rts	
00009CE2                            ; ===========================================================================
00009CE2                            
00009CE2                            Obj1F_WalkOnFloor:			; XREF: Obj1F_Index2
00009CE2 5368 0030                  		subq.w	#1,$30(a0)
00009CE6 6B00                       		bmi.s	loc_966E
00009CE8 6100 0000                  		bsr.w	SpeedToPos
00009CEC 0868 0000 0032             		bchg	#0,$32(a0)
00009CF2 6600                       		bne.s	loc_9654
00009CF4 3628 0008                  		move.w	8(a0),d3
00009CF8 0643 0010                  		addi.w	#$10,d3
00009CFC 0828 0000 0022             		btst	#0,$22(a0)
00009D02 6700                       		beq.s	loc_9640
00009D04 0443 0020                  		subi.w	#$20,d3
00009D08                            
00009D08                            loc_9640:
00009D08 4EB9 0000 0000             		jsr	ObjHitFloor2
00009D0E 0C41 FFF8                  		cmpi.w	#-8,d1
00009D12 6D00                       		blt.s	loc_966E
00009D14 0C41 000C                  		cmpi.w	#$C,d1
00009D18 6C00                       		bge.s	loc_966E
00009D1A 4E75                       		rts	
00009D1C                            ; ===========================================================================
00009D1C                            
00009D1C                            loc_9654:				; XREF: Obj1F_WalkOnFloor
00009D1C 4EB9 0000 0000             		jsr	ObjHitFloor
00009D22 D368 000C                  		add.w	d1,$C(a0)
00009D26 1143 0026                  		move.b	d3,$26(a0)
00009D2A 6100 0000                  		bsr.w	Obj1F_SetAni
00009D2E 5600                       		addq.b	#3,d0
00009D30 1140 001C                  		move.b	d0,$1C(a0)
00009D34 4E75                       		rts	
00009D36                            ; ===========================================================================
00009D36                            
00009D36                            loc_966E:				; XREF: Obj1F_WalkOnFloor
00009D36 5528 0025                  		subq.b	#2,$25(a0)
00009D3A 317C 003B 0030             		move.w	#59,$30(a0)
00009D40 317C 0000 0010             		move.w	#0,$10(a0)
00009D46 6100 0000                  		bsr.w	Obj1F_SetAni
00009D4A 1140 001C                  		move.b	d0,$1C(a0)
00009D4E 4E75                       		rts	
00009D50                            ; ---------------------------------------------------------------------------
00009D50                            ; Subroutine to	set the	correct	animation for a	Crabmeat
00009D50                            ; ---------------------------------------------------------------------------
00009D50                            
00009D50                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009D50                            
00009D50                            
00009D50                            Obj1F_SetAni:				; XREF: loc_966E
00009D50 7000                       		moveq	#0,d0
00009D52 1628 0026                  		move.b	$26(a0),d3
00009D56 6B00                       		bmi.s	loc_96A4
00009D58 0C03 0006                  		cmpi.b	#6,d3
00009D5C 6500                       		bcs.s	locret_96A2
00009D5E 7001                       		moveq	#1,d0
00009D60 0828 0000 0022             		btst	#0,$22(a0)
00009D66 6600                       		bne.s	locret_96A2
00009D68 7002                       		moveq	#2,d0
00009D6A                            
00009D6A                            locret_96A2:
00009D6A 4E75                       		rts	
00009D6C                            ; ===========================================================================
00009D6C                            
00009D6C                            loc_96A4:				; XREF: Obj1F_SetAni
00009D6C 0C03 00FA                  		cmpi.b	#-6,d3
00009D70 6200                       		bhi.s	locret_96B6
00009D72 7002                       		moveq	#2,d0
00009D74 0828 0000 0022             		btst	#0,$22(a0)
00009D7A 6600                       		bne.s	locret_96B6
00009D7C 7001                       		moveq	#1,d0
00009D7E                            
00009D7E                            locret_96B6:
00009D7E 4E75                       		rts	
00009D80                            ; End of function Obj1F_SetAni
00009D80                            
00009D80                            ; ===========================================================================
00009D80                            
00009D80                            Obj1F_Delete:				; XREF: Obj1F_Index
00009D80 6100 0000                  		bsr.w	DeleteObject
00009D84 4E75                       		rts	
00009D86                            ; ===========================================================================
00009D86                            ; ---------------------------------------------------------------------------
00009D86                            ; Sub-object - missile that the	Crabmeat throws
00009D86                            ; ---------------------------------------------------------------------------
00009D86                            
00009D86                            Obj1F_BallMain:				; XREF: Obj1F_Index
00009D86 5428 0024                  		addq.b	#2,$24(a0)
00009D8A 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
00009D92 317C 0400 0002             		move.w	#$400,2(a0)
00009D98 117C 0004 0001             		move.b	#4,1(a0)
00009D9E 117C 0003 0018             		move.b	#3,$18(a0)
00009DA4 117C 0087 0020             		move.b	#$87,$20(a0)
00009DAA 117C 0008 0019             		move.b	#8,$19(a0)
00009DB0 317C FC00 0012             		move.w	#-$400,$12(a0)
00009DB6 117C 0007 001C             		move.b	#7,$1C(a0)
00009DBC                            
00009DBC                            Obj1F_BallMove:				; XREF: Obj1F_Index
00009DBC 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
00009DC2 6100 0000                  		bsr.w	AnimateSprite
00009DC6 6100 0000                  		bsr.w	ObjectFall
00009DCA 6100 0000                  		bsr.w	DisplaySprite
00009DCE 3038 F72E                  		move.w	($FFFFF72E).w,d0
00009DD2 0640 00E0                  		addi.w	#$E0,d0
00009DD6 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
00009DDA 6500                       		bcs.s	Obj1F_Delete2	; if yes, branch
00009DDC 4E75                       		rts	
00009DDE                            ; ===========================================================================
00009DDE                            
00009DDE                            Obj1F_Delete2:
00009DDE 6000 0000                  		bra.w	DeleteObject
00009DE2                            ; ===========================================================================
00009DE2                            Ani_obj1F:
00009DE2                            	include "_anim\obj1F.asm"
00009DE2                            ; ---------------------------------------------------------------------------
00009DE2                            ; Animation script - Crabmeat enemy
00009DE2                            ; ---------------------------------------------------------------------------
00009DE2 0000 0000 0000             		dc.w byte_972A-Ani_obj1F, byte_972E-Ani_obj1F, byte_9732-Ani_obj1F
00009DE8 0000 0000 0000             		dc.w byte_9736-Ani_obj1F, byte_973C-Ani_obj1F, byte_9742-Ani_obj1F
00009DEE 0000 0000                  		dc.w byte_9748-Ani_obj1F, byte_974C-Ani_obj1F
00009DF2 0F00 FF00                  byte_972A:	dc.b $F, 0, $FF, 0
00009DF6 0F02 FF00                  byte_972E:	dc.b $F, 2, $FF, 0
00009DFA 0F22 FF00                  byte_9732:	dc.b $F, $22, $FF, 0
00009DFE 0F01 2100 FF00             byte_9736:	dc.b $F, 1, $21, 0, $FF, 0
00009E04 0F21 0302 FF00             byte_973C:	dc.b $F, $21, 3, 2, $FF, 0
00009E0A 0F01 2322 FF00             byte_9742:	dc.b $F, 1, $23, $22, $FF, 0
00009E10 0F04 FF00                  byte_9748:	dc.b $F, 4, $FF, 0
00009E14 0105 06FF                  byte_974C:	dc.b 1,	5, 6, $FF
00009E18                            		even
00009E18                            		even
00009E18                            
00009E18                            ; ---------------------------------------------------------------------------
00009E18                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
00009E18                            ; ---------------------------------------------------------------------------
00009E18                            Map_obj1F:
00009E18                            	include "_maps\obj1F.asm"
00009E18                            Map_1514:
00009E18 0000                       Map_1514_0: 	dc.w Map_1514_E-Map_1514
00009E1A 0000                       Map_1514_2: 	dc.w Map_1514_1E-Map_1514
00009E1C 0000                       Map_1514_4: 	dc.w Map_1514_2E-Map_1514
00009E1E 0000                       Map_1514_6: 	dc.w Map_1514_3E-Map_1514
00009E20 0000                       Map_1514_8: 	dc.w Map_1514_4E-Map_1514
00009E22 0000                       Map_1514_A: 	dc.w Map_1514_5E-Map_1514
00009E24 0000                       Map_1514_C: 	dc.w Map_1514_64-Map_1514
00009E26 03                         Map_1514_E: 	dc.b $3
00009E27 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009E2C F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009E31 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009E36 03                         Map_1514_1E: 	dc.b $3
00009E37 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009E3C F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009E41 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009E46 03                         Map_1514_2E: 	dc.b $3
00009E47 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009E4C F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009E51 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009E56 03                         Map_1514_3E: 	dc.b $3
00009E57 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009E5C F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009E61 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009E66 03                         Map_1514_4E: 	dc.b $3
00009E67 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009E6C F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009E71 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009E76 01                         Map_1514_5E: 	dc.b $1
00009E77 F805 0017 F8               	dc.b $F8, $5, $0, $17, $F8
00009E7C 01                         Map_1514_64: 	dc.b $1
00009E7D F805 2017 F8               	dc.b $F8, $5, $20, $17, $F8
00009E82                            	even
00009E82                            	even
00009E82                            
00009E82                            ; ===========================================================================
00009E82                            ; ---------------------------------------------------------------------------
00009E82                            ; Object 22 - Buzz Bomber enemy	(GHZ, MZ, SYZ)
00009E82                            ; ---------------------------------------------------------------------------
00009E82                            
00009E82                            Obj22:					; XREF: Obj_Index
00009E82 7000                       		moveq	#0,d0
00009E84 1028 0024                  		move.b	$24(a0),d0
00009E88 323B 0000                  		move.w	Obj22_Index(pc,d0.w),d1
00009E8C 4EFB 1000                  		jmp	Obj22_Index(pc,d1.w)
00009E90                            ; ===========================================================================
00009E90 0000                       Obj22_Index:	dc.w Obj22_Main-Obj22_Index
00009E92 0000                       		dc.w Obj22_Action-Obj22_Index
00009E94 0000                       		dc.w Obj22_Delete-Obj22_Index
00009E96                            ; ===========================================================================
00009E96                            
00009E96                            Obj22_Main:				; XREF: Obj22_Index
00009E96 5428 0024                  		addq.b	#2,$24(a0)
00009E9A 217C 0000 0000 0004        		move.l	#Map_obj22,4(a0)
00009EA2 317C 0444 0002             		move.w	#$444,2(a0)
00009EA8 117C 0004 0001             		move.b	#4,1(a0)
00009EAE 117C 0003 0018             		move.b	#3,$18(a0)
00009EB4 117C 0008 0020             		move.b	#8,$20(a0)
00009EBA 117C 0018 0019             		move.b	#$18,$19(a0)
00009EC0                            
00009EC0                            Obj22_Action:				; XREF: Obj22_Index
00009EC0 7000                       		moveq	#0,d0
00009EC2 1028 0025                  		move.b	$25(a0),d0
00009EC6 323B 0000                  		move.w	Obj22_Index2(pc,d0.w),d1
00009ECA 4EBB 1000                  		jsr	Obj22_Index2(pc,d1.w)
00009ECE 43F9 0000 0000             		lea	(Ani_obj22).l,a1
00009ED4 6100 0000                  		bsr.w	AnimateSprite
00009ED8 6000 0000                  		bra.w	MarkObjGone
00009EDC                            ; ===========================================================================
00009EDC 0000                       Obj22_Index2:	dc.w Obj22_Move-Obj22_Index2
00009EDE 0000                       		dc.w Obj22_ChkNrSonic-Obj22_Index2
00009EE0                            ; ===========================================================================
00009EE0                            
00009EE0                            Obj22_Move:				; XREF: Obj22_Index2
00009EE0 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
00009EE4 6A00                       		bpl.s	locret_986C	; if time remains, branch
00009EE6 0828 0001 0034             		btst	#1,$34(a0)	; is Buzz Bomber near Sonic?
00009EEC 6600                       		bne.s	Obj22_Fire	; if yes, branch
00009EEE 5428 0025                  		addq.b	#2,$25(a0)
00009EF2 317C 007F 0032             		move.w	#127,$32(a0)	; set time delay to just over 2	seconds
00009EF8 317C 0400 0010             		move.w	#$400,$10(a0)	; move Buzz Bomber to the right
00009EFE 117C 0001 001C             		move.b	#1,$1C(a0)	; use "flying" animation
00009F04 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
00009F0A 6600                       		bne.s	locret_986C	; if not, branch
00009F0C 4468 0010                  		neg.w	$10(a0)		; move Buzz Bomber to the left
00009F10                            
00009F10                            locret_986C:
00009F10 4E75                       		rts	
00009F12                            ; ===========================================================================
00009F12                            
00009F12                            Obj22_Fire:				; XREF: Obj22_Move
00009F12 6100 0000                  		bsr.w	SingleObjLoad
00009F16 6600                       		bne.s	locret_98D0
00009F18 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
00009F1C 3368 0008 0008             		move.w	8(a0),8(a1)
00009F22 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009F28 0669 001C 000C             		addi.w	#$1C,$C(a1)
00009F2E 337C 0200 0012             		move.w	#$200,$12(a1)	; move missile downwards
00009F34 337C 0200 0010             		move.w	#$200,$10(a1)	; move missile to the right
00009F3A 303C 0018                  		move.w	#$18,d0
00009F3E 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
00009F44 6600                       		bne.s	loc_98AA	; if not, branch
00009F46 4440                       		neg.w	d0
00009F48 4469 0010                  		neg.w	$10(a1)		; move missile to the left
00009F4C                            
00009F4C                            loc_98AA:
00009F4C D169 0008                  		add.w	d0,8(a1)
00009F50 1368 0022 0022             		move.b	$22(a0),$22(a1)
00009F56 337C 000E 0032             		move.w	#$E,$32(a1)
00009F5C 2348 003C                  		move.l	a0,$3C(a1)
00009F60 117C 0001 0034             		move.b	#1,$34(a0)	; set to "already fired" to prevent refiring
00009F66 317C 003B 0032             		move.w	#$3B,$32(a0)
00009F6C 117C 0002 001C             		move.b	#2,$1C(a0)	; use "firing" animation
00009F72                            
00009F72                            locret_98D0:
00009F72 4E75                       		rts	
00009F74                            ; ===========================================================================
00009F74                            
00009F74                            Obj22_ChkNrSonic:			; XREF: Obj22_Index2
00009F74 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
00009F78 6B00                       		bmi.s	Obj22_ChgDir
00009F7A 6100 0000                  		bsr.w	SpeedToPos
00009F7E 4A28 0034                  		tst.b	$34(a0)
00009F82 6600                       		bne.s	locret_992A
00009F84 3038 D008                  		move.w	($FFFFD008).w,d0
00009F88 9068 0008                  		sub.w	8(a0),d0
00009F8C 6A00                       		bpl.s	Obj22_SetNrSonic
00009F8E 4440                       		neg.w	d0
00009F90                            
00009F90                            Obj22_SetNrSonic:
00009F90 0C40 0060                  		cmpi.w	#$60,d0		; is Buzz Bomber within	$60 pixels of Sonic?
00009F94 6400                       		bcc.s	locret_992A	; if not, branch
00009F96 4A28 0001                  		tst.b	1(a0)
00009F9A 6A00                       		bpl.s	locret_992A
00009F9C 117C 0002 0034             		move.b	#2,$34(a0)	; set Buzz Bomber to "near Sonic"
00009FA2 317C 001D 0032             		move.w	#29,$32(a0)	; set time delay to half a second
00009FA8 6000                       		bra.s	Obj22_Stop
00009FAA                            ; ===========================================================================
00009FAA                            
00009FAA                            Obj22_ChgDir:				; XREF: Obj22_ChkNrSonic
00009FAA 117C 0000 0034             		move.b	#0,$34(a0)	; set Buzz Bomber to "normal"
00009FB0 0868 0000 0022             		bchg	#0,$22(a0)	; change direction
00009FB6 317C 003B 0032             		move.w	#59,$32(a0)
00009FBC                            
00009FBC                            Obj22_Stop:				; XREF: Obj22_SetNrSonic
00009FBC 5528 0025                  		subq.b	#2,$25(a0)	; run "Obj22_Fire" routine
00009FC0 317C 0000 0010             		move.w	#0,$10(a0)	; stop Buzz Bomber moving
00009FC6 117C 0000 001C             		move.b	#0,$1C(a0)	; use "hovering" animation
00009FCC                            
00009FCC                            locret_992A:
00009FCC 4E75                       		rts	
00009FCE                            ; ===========================================================================
00009FCE                            
00009FCE                            Obj22_Delete:				; XREF: Obj22_Index
00009FCE 6100 0000                  		bsr.w	DeleteObject
00009FD2 4E75                       		rts	
00009FD4                            ; ===========================================================================
00009FD4                            ; ---------------------------------------------------------------------------
00009FD4                            ; Object 23 - missile that Buzz	Bomber throws
00009FD4                            ; ---------------------------------------------------------------------------
00009FD4                            
00009FD4                            Obj23:					; XREF: Obj_Index
00009FD4 7000                       		moveq	#0,d0
00009FD6 1028 0024                  		move.b	$24(a0),d0
00009FDA 323B 0000                  		move.w	Obj23_Index(pc,d0.w),d1
00009FDE 4EFB 1000                  		jmp	Obj23_Index(pc,d1.w)
00009FE2                            ; ===========================================================================
00009FE2 0000                       Obj23_Index:	dc.w Obj23_Main-Obj23_Index
00009FE4 0000                       		dc.w Obj23_Animate-Obj23_Index
00009FE6 0000                       		dc.w Obj23_FromBuzz-Obj23_Index
00009FE8 0000                       		dc.w Obj23_Delete-Obj23_Index
00009FEA 0000                       		dc.w Obj23_FromNewt-Obj23_Index
00009FEC                            ; ===========================================================================
00009FEC                            
00009FEC                            Obj23_Main:				; XREF: Obj23_Index
00009FEC 5368 0032                  		subq.w	#1,$32(a0)
00009FF0 6A00                       		bpl.s	Obj23_ChkCancel
00009FF2 5428 0024                  		addq.b	#2,$24(a0)
00009FF6 217C 0000 0000 0004        		move.l	#Map_obj23,4(a0)
00009FFE 317C 2444 0002             		move.w	#$2444,2(a0)
0000A004 117C 0004 0001             		move.b	#4,1(a0)
0000A00A 117C 0003 0018             		move.b	#3,$18(a0)
0000A010 117C 0008 0019             		move.b	#8,$19(a0)
0000A016 0228 0003 0022             		andi.b	#3,$22(a0)
0000A01C 4A28 0028                  		tst.b	$28(a0)		; was object created by	a Newtron?
0000A020 6700                       		beq.s	Obj23_Animate	; if not, branch
0000A022 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj23_FromNewt" routine
0000A028 117C 0087 0020             		move.b	#$87,$20(a0)
0000A02E 117C 0001 001C             		move.b	#1,$1C(a0)
0000A034 6000                       		bra.s	Obj23_Animate2
0000A036                            ; ===========================================================================
0000A036                            
0000A036                            Obj23_Animate:				; XREF: Obj23_Index
0000A036 6100                       		bsr.s	Obj23_ChkCancel
0000A038 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000A03E 6100 0000                  		bsr.w	AnimateSprite
0000A042 6000 0000                  		bra.w	DisplaySprite
0000A046                            ; ---------------------------------------------------------------------------
0000A046                            ; Subroutine to	check if the Buzz Bomber which fired the missile has been
0000A046                            ; destroyed, and if it has, then cancel	the missile
0000A046                            ; ---------------------------------------------------------------------------
0000A046                            
0000A046                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A046                            
0000A046                            
0000A046                            Obj23_ChkCancel:			; XREF: Obj23_Main
0000A046 2268 003C                  		movea.l	$3C(a0),a1
0000A04A 0C11 0027                  		cmpi.b	#$27,0(a1)	; has Buzz Bomber been destroyed?
0000A04E 6700                       		beq.s	Obj23_Delete	; if yes, branch
0000A050 4E75                       		rts	
0000A052                            ; End of function Obj23_ChkCancel
0000A052                            
0000A052                            ; ===========================================================================
0000A052                            
0000A052                            Obj23_FromBuzz:				; XREF: Obj23_Index
0000A052 0828 0007 0022             		btst	#7,$22(a0)
0000A058 6600                       		bne.s	Obj23_Explode
0000A05A 117C 0087 0020             		move.b	#$87,$20(a0)
0000A060 117C 0001 001C             		move.b	#1,$1C(a0)
0000A066 6100 0000                  		bsr.w	SpeedToPos
0000A06A 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000A070 6100 0000                  		bsr.w	AnimateSprite
0000A074 6100 0000                  		bsr.w	DisplaySprite
0000A078 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000A07C 0640 00E0                  		addi.w	#$E0,d0
0000A080 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
0000A084 6500                       		bcs.s	Obj23_Delete	; if yes, branch
0000A086 4E75                       		rts	
0000A088                            ; ===========================================================================
0000A088                            
0000A088                            Obj23_Explode:				; XREF: Obj23_FromBuzz
0000A088 10BC 0024                  		move.b	#$24,0(a0)	; change object	to an explosion	(Obj24)
0000A08C 117C 0000 0024             		move.b	#0,$24(a0)
0000A092 6000 F2DE                  		bra.w	Obj24
0000A096                            ; ===========================================================================
0000A096                            
0000A096                            Obj23_Delete:				; XREF: Obj23_Index
0000A096 6100 0000                  		bsr.w	DeleteObject
0000A09A 4E75                       		rts	
0000A09C                            ; ===========================================================================
0000A09C                            
0000A09C                            Obj23_FromNewt:				; XREF: Obj23_Index
0000A09C 4A28 0001                  		tst.b	1(a0)
0000A0A0 6AF4                       		bpl.s	Obj23_Delete
0000A0A2 6100 0000                  		bsr.w	SpeedToPos
0000A0A6                            
0000A0A6                            Obj23_Animate2:				; XREF: Obj23_Main
0000A0A6 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000A0AC 6100 0000                  		bsr.w	AnimateSprite
0000A0B0 6100 0000                  		bsr.w	DisplaySprite
0000A0B4 4E75                       		rts	
0000A0B6                            ; ===========================================================================
0000A0B6                            Ani_obj22:
0000A0B6                            	include "_anim\obj22.asm"
0000A0B6                            ; ---------------------------------------------------------------------------
0000A0B6                            ; Animation script - Buzz Bomber enemy
0000A0B6                            ; ---------------------------------------------------------------------------
0000A0B6 0000                       		dc.w byte_9A1E-Ani_obj22
0000A0B8 0000                       		dc.w byte_9A22-Ani_obj22
0000A0BA 0000                       		dc.w byte_9A26-Ani_obj22
0000A0BC 0100 01FF                  byte_9A1E:	dc.b 1,	0, 1, $FF
0000A0C0 0102 03FF                  byte_9A22:	dc.b 1,	2, 3, $FF
0000A0C4 0104 05FF                  byte_9A26:	dc.b 1,	4, 5, $FF
0000A0C8                            		even
0000A0C8                            		even
0000A0C8                            
0000A0C8                            Ani_obj23:
0000A0C8                            	include "_anim\obj23.asm"
0000A0C8                            ; ---------------------------------------------------------------------------
0000A0C8                            ; Animation script - missile that Buzz Bomber throws
0000A0C8                            ; ---------------------------------------------------------------------------
0000A0C8 0000                       		dc.w byte_9A2E-Ani_obj23
0000A0CA 0000                       		dc.w byte_9A32-Ani_obj23
0000A0CC 0700 01FC                  byte_9A2E:	dc.b 7,	0, 1, $FC
0000A0D0 0102 03FF                  byte_9A32:	dc.b 1,	2, 3, $FF
0000A0D4                            		even
0000A0D4                            		even
0000A0D4                            
0000A0D4                            ; ---------------------------------------------------------------------------
0000A0D4                            ; Sprite mappings - Buzz Bomber	enemy
0000A0D4                            ; ---------------------------------------------------------------------------
0000A0D4                            Map_obj22:
0000A0D4                            	include "_maps\obj22.asm"
0000A0D4                            Map_e97a:
0000A0D4 0000                       Map_e97a_0: 	dc.w Map_e97a_C-Map_e97a
0000A0D6 0000                       Map_e97a_2: 	dc.w Map_e97a_2B-Map_e97a
0000A0D8 0000                       Map_e97a_4: 	dc.w Map_e97a_4A-Map_e97a
0000A0DA 0000                       Map_e97a_6: 	dc.w Map_e97a_6E-Map_e97a
0000A0DC 0000                       Map_e97a_8: 	dc.w Map_e97a_92-Map_e97a
0000A0DE 0000                       Map_e97a_A: 	dc.w Map_e97a_B1-Map_e97a
0000A0E0 06                         Map_e97a_C: 	dc.b $6
0000A0E1 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000A0E6 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000A0EB 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000A0F0 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000A0F5 F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
0000A0FA F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
0000A0FF 06                         Map_e97a_2B: 	dc.b $6
0000A100 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000A105 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000A10A 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000A10F 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000A114 F408 001F EC               	dc.b $F4, $8, $0, $1F, $EC
0000A119 F404 0022 04               	dc.b $F4, $4, $0, $22, $4
0000A11E 07                         Map_e97a_4A: 	dc.b $7
0000A11F 0400 0030 0C               	dc.b $4, $0, $0, $30, $C
0000A124 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000A129 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000A12E 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000A133 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000A138 F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
0000A13D F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
0000A142 07                         Map_e97a_6E: 	dc.b $7
0000A143 0404 0031 0C               	dc.b $4, $4, $0, $31, $C
0000A148 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000A14D F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000A152 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000A157 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000A15C F408 001F EC               	dc.b $F4, $8, $0, $1F, $EC
0000A161 F404 0022 04               	dc.b $F4, $4, $0, $22, $4
0000A166 06                         Map_e97a_92: 	dc.b $6
0000A167 F40D 0000 EC               	dc.b $F4, $D, $0, $0, $EC
0000A16C 040C 0008 EC               	dc.b $4, $C, $0, $8, $EC
0000A171 0400 000C 0C               	dc.b $4, $0, $0, $C, $C
0000A176 0C04 000D F4               	dc.b $C, $4, $0, $D, $F4
0000A17B F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
0000A180 F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
0000A185 04                         Map_e97a_B1: 	dc.b $4
0000A186 F40D 0000 EC               	dc.b $F4, $D, $0, $0, $EC
0000A18B 040C 0008 EC               	dc.b $4, $C, $0, $8, $EC
0000A190 0400 000C 0C               	dc.b $4, $0, $0, $C, $C
0000A195 0C04 000D F4               	dc.b $C, $4, $0, $D, $F4
0000A19A                            	even
0000A19A                            	even
0000A19A                            
0000A19A                            ; ---------------------------------------------------------------------------
0000A19A                            ; Sprite mappings - missile that Buzz Bomber throws
0000A19A                            ; ---------------------------------------------------------------------------
0000A19A                            Map_obj23:
0000A19A                            	include "_maps\obj23.asm"
0000A19A                            ; ---------------------------------------------------------------------------
0000A19A                            ; Sprite mappings - missile that Buzz Bomber throws
0000A19A                            ; ---------------------------------------------------------------------------
0000A19A 0000 0000                  		dc.w byte_9B0E-Map_obj23, byte_9B14-Map_obj23
0000A19E 0000 0000                  		dc.w byte_9B1A-Map_obj23, byte_9B20-Map_obj23
0000A1A2 01                         byte_9B0E:	dc.b 1
0000A1A3 F805 0024 F8               		dc.b $F8, 5, 0,	$24, $F8
0000A1A8 01                         byte_9B14:	dc.b 1
0000A1A9 F805 0028 F8               		dc.b $F8, 5, 0,	$28, $F8
0000A1AE 01                         byte_9B1A:	dc.b 1
0000A1AF F805 002C F8               		dc.b $F8, 5, 0,	$2C, $F8
0000A1B4 01                         byte_9B20:	dc.b 1
0000A1B5 F805 0033 F8               		dc.b $F8, 5, 0,	$33, $F8
0000A1BA                            		even
0000A1BA                            		even
0000A1BA                            
0000A1BA                            ; ===========================================================================
0000A1BA                            ; ---------------------------------------------------------------------------
0000A1BA                            ; Object 25 - rings
0000A1BA                            ; ---------------------------------------------------------------------------
0000A1BA                            
0000A1BA                            Obj25:					; XREF: Obj_Index
0000A1BA 7000                       		moveq	#0,d0
0000A1BC 1028 0024                  		move.b	$24(a0),d0
0000A1C0 323B 0000                  		move.w	Obj25_Index(pc,d0.w),d1
0000A1C4 4EFB 1000                  		jmp	Obj25_Index(pc,d1.w)
0000A1C8                            ; ===========================================================================
0000A1C8 0000                       Obj25_Index:	dc.w Obj25_Main-Obj25_Index
0000A1CA 0000                       		dc.w Obj25_Animate-Obj25_Index
0000A1CC 0000                       		dc.w Obj25_Collect-Obj25_Index
0000A1CE 0000                       		dc.w Obj25_Sparkle-Obj25_Index
0000A1D0 0000                       		dc.w Obj25_Delete-Obj25_Index
0000A1D2                            ; ---------------------------------------------------------------------------
0000A1D2                            ; Distances between rings (format: horizontal, vertical)
0000A1D2                            ; ---------------------------------------------------------------------------
0000A1D2 1000                       Obj25_PosData:	dc.b $10, 0		; horizontal tight
0000A1D4 1800                       		dc.b $18, 0		; horizontal normal
0000A1D6 2000                       		dc.b $20, 0		; horizontal wide
0000A1D8 0010                       		dc.b 0,	$10		; vertical tight
0000A1DA 0018                       		dc.b 0,	$18		; vertical normal
0000A1DC 0020                       		dc.b 0,	$20		; vertical wide
0000A1DE 1010                       		dc.b $10, $10		; diagonal
0000A1E0 1818                       		dc.b $18, $18
0000A1E2 2020                       		dc.b $20, $20
0000A1E4 F010                       		dc.b $F0, $10
0000A1E6 E818                       		dc.b $E8, $18
0000A1E8 E020                       		dc.b $E0, $20
0000A1EA 1008                       		dc.b $10, 8
0000A1EC 1810                       		dc.b $18, $10
0000A1EE F008                       		dc.b $F0, 8
0000A1F0 E810                       		dc.b $E8, $10
0000A1F2                            ; ===========================================================================
0000A1F2                            
0000A1F2                            Obj25_Main:				; XREF: Obj25_Index
0000A1F2 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A1F6 7000                       		moveq	#0,d0
0000A1F8 1028 0023                  		move.b	$23(a0),d0
0000A1FC 45F2 0002                  		lea	2(a2,d0.w),a2
0000A200 1812                       		move.b	(a2),d4
0000A202 1228 0028                  		move.b	$28(a0),d1
0000A206 1001                       		move.b	d1,d0
0000A208 0241 0007                  		andi.w	#7,d1
0000A20C 0C41 0007                  		cmpi.w	#7,d1
0000A210 6600                       		bne.s	loc_9B80
0000A212 7206                       		moveq	#6,d1
0000A214                            
0000A214                            loc_9B80:
0000A214 4841                       		swap	d1
0000A216 323C 0000                  		move.w	#0,d1
0000A21A E808                       		lsr.b	#4,d0
0000A21C D040                       		add.w	d0,d0
0000A21E 1A3B 00B2                  		move.b	Obj25_PosData(pc,d0.w),d5 ; load ring spacing data
0000A222 4885                       		ext.w	d5
0000A224 1C3B 00AD                  		move.b	Obj25_PosData+1(pc,d0.w),d6
0000A228 4886                       		ext.w	d6
0000A22A 2248                       		movea.l	a0,a1
0000A22C 3428 0008                  		move.w	8(a0),d2
0000A230 3628 000C                  		move.w	$C(a0),d3
0000A234 E20C                       		lsr.b	#1,d4
0000A236 6500                       		bcs.s	loc_9C02
0000A238 0892 0007                  		bclr	#7,(a2)
0000A23C 6000                       		bra.s	loc_9BBA
0000A23E                            ; ===========================================================================
0000A23E                            
0000A23E                            Obj25_MakeRings:
0000A23E 4841                       		swap	d1
0000A240 E20C                       		lsr.b	#1,d4
0000A242 6500                       		bcs.s	loc_9C02
0000A244 0892 0007                  		bclr	#7,(a2)
0000A248 6100 0000                  		bsr.w	SingleObjLoad
0000A24C 6600                       		bne.s	loc_9C0E
0000A24E                            
0000A24E                            loc_9BBA:				; XREF: Obj25_Main
0000A24E 12BC 0025                  		move.b	#$25,0(a1)	; load ring object
0000A252 5429 0024                  		addq.b	#2,$24(a1)
0000A256 3342 0008                  		move.w	d2,8(a1)	; set x-axis position based on d2
0000A25A 3368 0008 0032             		move.w	8(a0),$32(a1)
0000A260 3343 000C                  		move.w	d3,$C(a1)	; set y-axis position based on d3
0000A264 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000A26C 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000A272 137C 0004 0001             		move.b	#4,1(a1)
0000A278 137C 0002 0018             		move.b	#2,$18(a1)
0000A27E 137C 0047 0020             		move.b	#$47,$20(a1)
0000A284 137C 0008 0019             		move.b	#8,$19(a1)
0000A28A 1368 0023 0023             		move.b	$23(a0),$23(a1)
0000A290 1341 0034                  		move.b	d1,$34(a1)
0000A294                            
0000A294                            loc_9C02:
0000A294 5241                       		addq.w	#1,d1
0000A296 D445                       		add.w	d5,d2		; add ring spacing value to d2
0000A298 D646                       		add.w	d6,d3		; add ring spacing value to d3
0000A29A 4841                       		swap	d1
0000A29C 51C9 FFA0                  		dbf	d1,Obj25_MakeRings ; repeat for	number of rings
0000A2A0                            
0000A2A0                            loc_9C0E:
0000A2A0 0812 0000                  		btst	#0,(a2)
0000A2A4 6600 0000                  		bne.w	DeleteObject
0000A2A8                            
0000A2A8                            Obj25_Animate:				; XREF: Obj25_Index
0000A2A8 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0) ;	set frame
0000A2AE 6100 0000                  		bsr.w	DisplaySprite
0000A2B2 3028 0032                  		move.w	$32(a0),d0
0000A2B6 0240 FF80                  		andi.w	#$FF80,d0
0000A2BA 3238 F700                  		move.w	($FFFFF700).w,d1
0000A2BE 0441 0080                  		subi.w	#$80,d1
0000A2C2 0241 FF80                  		andi.w	#$FF80,d1
0000A2C6 9041                       		sub.w	d1,d0
0000A2C8 0C40 0280                  		cmpi.w	#$280,d0
0000A2CC 6200                       		bhi.s	Obj25_Delete
0000A2CE 4E75                       		rts	
0000A2D0                            ; ===========================================================================
0000A2D0                            
0000A2D0                            Obj25_Collect:				; XREF: Obj25_Index
0000A2D0 5428 0024                  		addq.b	#2,$24(a0)
0000A2D4 117C 0000 0020             		move.b	#0,$20(a0)
0000A2DA 117C 0001 0018             		move.b	#1,$18(a0)
0000A2E0 6100 0000                  		bsr.w	CollectRing
0000A2E4 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A2E8 7000                       		moveq	#0,d0
0000A2EA 1028 0023                  		move.b	$23(a0),d0
0000A2EE 1228 0034                  		move.b	$34(a0),d1
0000A2F2 03F2 0002                  		bset	d1,2(a2,d0.w)
0000A2F6                            
0000A2F6                            Obj25_Sparkle:				; XREF: Obj25_Index
0000A2F6 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000A2FC 6100 0000                  		bsr.w	AnimateSprite
0000A300 6000 0000                  		bra.w	DisplaySprite
0000A304                            ; ===========================================================================
0000A304                            
0000A304                            Obj25_Delete:				; XREF: Obj25_Index
0000A304 6000 0000                  		bra.w	DeleteObject
0000A308                            
0000A308                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A308                            
0000A308                            
0000A308                            CollectRing:				; XREF: Obj25_Collect
0000A308 5278 FE20                  		addq.w	#1,($FFFFFE20).w ; add 1 to rings
0000A30C 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the rings counter
0000A312 303C 00B5                  		move.w	#$B5,d0		; play ring sound
0000A316 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; do	you have < 100 rings?
0000A31C 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000A31E 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w ; update lives	counter
0000A324 6700                       		beq.s	loc_9CA4
0000A326 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; do	you have < 200 rings?
0000A32C 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000A32E 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w ; update lives	counter
0000A334 6600                       		bne.s	Obj25_PlaySnd
0000A336                            
0000A336                            loc_9CA4:
0000A336 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000A33A 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000A33E 303C 0088                  		move.w	#$88,d0		; play extra life music
0000A342                            
0000A342                            Obj25_PlaySnd:
0000A342 4EF9 0000 15C0             		jmp	(PlaySound_Special).l
0000A348                            ; End of function CollectRing
0000A348                            
0000A348                            ; ===========================================================================
0000A348                            ; ---------------------------------------------------------------------------
0000A348                            ; Object 37 - rings flying out of Sonic	when he's hit
0000A348                            ; ---------------------------------------------------------------------------
0000A348                            
0000A348                            Obj37:					; XREF: Obj_Index
0000A348 7000                       		moveq	#0,d0
0000A34A 1028 0024                  		move.b	$24(a0),d0
0000A34E 323B 0000                  		move.w	Obj37_Index(pc,d0.w),d1
0000A352 4EFB 1000                  		jmp	Obj37_Index(pc,d1.w)
0000A356                            ; ===========================================================================
0000A356 0000                       Obj37_Index:	dc.w Obj37_CountRings-Obj37_Index
0000A358 0000                       		dc.w Obj37_Bounce-Obj37_Index
0000A35A 0000                       		dc.w Obj37_Collect-Obj37_Index
0000A35C 0000                       		dc.w Obj37_Sparkle-Obj37_Index
0000A35E 0000                       		dc.w Obj37_Delete-Obj37_Index
0000A360                            ; ===========================================================================
0000A360                            
0000A360                            Obj37_CountRings:			; XREF: Obj37_Index
0000A360 2248                       		movea.l	a0,a1
0000A362 7A00                       		moveq	#0,d5
0000A364 3A38 FE20                  		move.w	($FFFFFE20).w,d5 ; check number	of rings you have
0000A368 7020                       		moveq	#32,d0
0000A36A BA40                       		cmp.w	d0,d5		; do you have 32 or more?
0000A36C 6500                       		bcs.s	loc_9CDE	; if not, branch
0000A36E 3A00                       		move.w	d0,d5		; if yes, set d5 to 32
0000A370                            
0000A370                            loc_9CDE:
0000A370 5345                       		subq.w	#1,d5
0000A372 383C 0288                  		move.w	#$288,d4
0000A376 6000                       		bra.s	Obj37_MakeRings
0000A378                            ; ===========================================================================
0000A378                            
0000A378                            Obj37_Loop:
0000A378 6100 0000                  		bsr.w	SingleObjLoad
0000A37C 6600 0000                  		bne.w	Obj37_ResetCounter
0000A380                            
0000A380                            Obj37_MakeRings:			; XREF: Obj37_CountRings
0000A380 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	ring object
0000A384 5429 0024                  		addq.b	#2,$24(a1)
0000A388 137C 0008 0016             		move.b	#8,$16(a1)
0000A38E 137C 0008 0017             		move.b	#8,$17(a1)
0000A394 3368 0008 0008             		move.w	8(a0),8(a1)
0000A39A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A3A0 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000A3A8 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000A3AE 137C 0004 0001             		move.b	#4,1(a1)
0000A3B4 137C 0003 0018             		move.b	#3,$18(a1)
0000A3BA 137C 0047 0020             		move.b	#$47,$20(a1)
0000A3C0 137C 0008 0019             		move.b	#8,$19(a1)
0000A3C6 11FC 00FF FEC6             		move.b	#-1,($FFFFFEC6).w
0000A3CC 4A44                       		tst.w	d4
0000A3CE 6B00                       		bmi.s	loc_9D62
0000A3D0 3004                       		move.w	d4,d0
0000A3D2 6100 88F0                  		bsr.w	CalcSine
0000A3D6 3404                       		move.w	d4,d2
0000A3D8 E04A                       		lsr.w	#8,d2
0000A3DA E560                       		asl.w	d2,d0
0000A3DC E561                       		asl.w	d2,d1
0000A3DE 3400                       		move.w	d0,d2
0000A3E0 3601                       		move.w	d1,d3
0000A3E2 0604 0010                  		addi.b	#$10,d4
0000A3E6 6400                       		bcc.s	loc_9D62
0000A3E8 0444 0080                  		subi.w	#$80,d4
0000A3EC 6400                       		bcc.s	loc_9D62
0000A3EE 383C 0288                  		move.w	#$288,d4
0000A3F2                            
0000A3F2                            loc_9D62:
0000A3F2 3342 0010                  		move.w	d2,$10(a1)
0000A3F6 3343 0012                  		move.w	d3,$12(a1)
0000A3FA 4442                       		neg.w	d2
0000A3FC 4444                       		neg.w	d4
0000A3FE 51CD FF78                  		dbf	d5,Obj37_Loop	; repeat for number of rings (max 31)
0000A402                            
0000A402                            Obj37_ResetCounter:			; XREF: Obj37_Loop
0000A402 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; reset number	of rings to zero
0000A408 11FC 0080 FE1D             		move.b	#$80,($FFFFFE1D).w ; update ring counter
0000A40E 11FC 0000 FE1B             		move.b	#0,($FFFFFE1B).w
0000A414 303C 00C6                  		move.w	#$C6,d0
0000A418 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play ring loss sound
0000A41E                            
0000A41E                            Obj37_Bounce:				; XREF: Obj37_Index
0000A41E 1178 FEC7 001A             		move.b	($FFFFFEC7).w,$1A(a0)
0000A424 6100 0000                  		bsr.w	SpeedToPos
0000A428 0668 0018 0012             		addi.w	#$18,$12(a0)
0000A42E 6B00                       		bmi.s	Obj37_ChkDel
0000A430 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000A434 D007                       		add.b	d7,d0
0000A436 0200 0003                  		andi.b	#3,d0
0000A43A 6600                       		bne.s	Obj37_ChkDel
0000A43C 4EB9 0000 0000             		jsr	ObjHitFloor
0000A442 4A41                       		tst.w	d1
0000A444 6A00                       		bpl.s	Obj37_ChkDel
0000A446 D368 000C                  		add.w	d1,$C(a0)
0000A44A 3028 0012                  		move.w	$12(a0),d0
0000A44E E440                       		asr.w	#2,d0
0000A450 9168 0012                  		sub.w	d0,$12(a0)
0000A454 4468 0012                  		neg.w	$12(a0)
0000A458                            
0000A458                            Obj37_ChkDel:				; XREF: Obj37_Bounce
0000A458 4A38 FEC6                  		tst.b	($FFFFFEC6).w
0000A45C 6700                       		beq.s	Obj37_Delete
0000A45E 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000A462 0640 00E0                  		addi.w	#$E0,d0
0000A466 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below level boundary?
0000A46A 6500                       		bcs.s	Obj37_Delete	; if yes, branch
0000A46C 6000 0000                  		bra.w	DisplaySprite
0000A470                            ; ===========================================================================
0000A470                            
0000A470                            Obj37_Collect:				; XREF: Obj37_Index
0000A470 5428 0024                  		addq.b	#2,$24(a0)
0000A474 117C 0000 0020             		move.b	#0,$20(a0)
0000A47A 117C 0001 0018             		move.b	#1,$18(a0)
0000A480 6100 FE86                  		bsr.w	CollectRing
0000A484                            
0000A484                            Obj37_Sparkle:				; XREF: Obj37_Index
0000A484 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000A48A 6100 0000                  		bsr.w	AnimateSprite
0000A48E 6000 0000                  		bra.w	DisplaySprite
0000A492                            ; ===========================================================================
0000A492                            
0000A492                            Obj37_Delete:				; XREF: Obj37_Index
0000A492 6000 0000                  		bra.w	DeleteObject
0000A496                            ; ===========================================================================
0000A496                            ; ---------------------------------------------------------------------------
0000A496                            ; Object 4B - giant ring for entry to special stage
0000A496                            ; ---------------------------------------------------------------------------
0000A496                            
0000A496                            Obj4B:					; XREF: Obj_Index
0000A496 7000                       		moveq	#0,d0
0000A498 1028 0024                  		move.b	$24(a0),d0
0000A49C 323B 0000                  		move.w	Obj4B_Index(pc,d0.w),d1
0000A4A0 4EFB 1000                  		jmp	Obj4B_Index(pc,d1.w)
0000A4A4                            ; ===========================================================================
0000A4A4 0000                       Obj4B_Index:	dc.w Obj4B_Main-Obj4B_Index
0000A4A6 0000                       		dc.w Obj4B_Animate-Obj4B_Index
0000A4A8 0000                       		dc.w Obj4B_Collect-Obj4B_Index
0000A4AA 0000                       		dc.w Obj4B_Delete-Obj4B_Index
0000A4AC                            ; ===========================================================================
0000A4AC                            
0000A4AC                            Obj4B_Main:				; XREF: Obj4B_Index
0000A4AC 217C 0000 0000 0004        		move.l	#Map_obj4B,4(a0)
0000A4B4 317C 2400 0002             		move.w	#$2400,2(a0)
0000A4BA 0028 0004 0001             		ori.b	#4,1(a0)
0000A4C0 117C 0040 0019             		move.b	#$40,$19(a0)
0000A4C6 4A28 0001                  		tst.b	1(a0)
0000A4CA 6A00                       		bpl.s	Obj4B_Animate
0000A4CC 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have 6 emeralds?
0000A4D2 6700 0000                  		beq.w	Obj4B_Delete	; if yes, branch
0000A4D6 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000A4DC 6400                       		bcc.s	Obj4B_Okay	; if yes, branch
0000A4DE 4E75                       		rts	
0000A4E0                            ; ===========================================================================
0000A4E0                            
0000A4E0                            Obj4B_Okay:				; XREF: Obj4B_Main
0000A4E0 5428 0024                  		addq.b	#2,$24(a0)
0000A4E4 117C 0002 0018             		move.b	#2,$18(a0)
0000A4EA 117C 0052 0020             		move.b	#$52,$20(a0)
0000A4F0 31FC 0C40 F7BE             		move.w	#$C40,($FFFFF7BE).w
0000A4F6                            
0000A4F6                            Obj4B_Animate:				; XREF: Obj4B_Index
0000A4F6 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0)
0000A4FC 3028 0008                  		move.w	8(a0),d0
0000A500 0240 FF80                  		andi.w	#$FF80,d0
0000A504 3238 F700                  		move.w	($FFFFF700).w,d1
0000A508 0441 0080                  		subi.w	#$80,d1
0000A50C 0241 FF80                  		andi.w	#$FF80,d1
0000A510 9041                       		sub.w	d1,d0
0000A512 0C40 0280                  		cmpi.w	#$280,d0
0000A516 6200 0000                  		bhi.w	DeleteObject
0000A51A 6000 0000                  		bra.w	DisplaySprite
0000A51E                            ; ===========================================================================
0000A51E                            
0000A51E                            Obj4B_Collect:				; XREF: Obj4B_Index
0000A51E 5528 0024                  		subq.b	#2,$24(a0)
0000A522 117C 0000 0020             		move.b	#0,$20(a0)
0000A528 6100 0000                  		bsr.w	SingleObjLoad
0000A52C 6600 0000                  		bne.w	Obj4B_PlaySnd
0000A530 12BC 007C                  		move.b	#$7C,0(a1)	; load giant ring flash	object
0000A534 3368 0008 0008             		move.w	8(a0),8(a1)
0000A53A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A540 2348 003C                  		move.l	a0,$3C(a1)
0000A544 3038 D008                  		move.w	($FFFFD008).w,d0
0000A548 B068 0008                  		cmp.w	8(a0),d0	; has Sonic come from the left?
0000A54C 6500                       		bcs.s	Obj4B_PlaySnd	; if yes, branch
0000A54E 08E9 0000 0001             		bset	#0,1(a1)	; reverse flash	object
0000A554                            
0000A554                            Obj4B_PlaySnd:
0000A554 303C 00C3                  		move.w	#$C3,d0
0000A558 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play giant ring	sound
0000A55E 6096                       		bra.s	Obj4B_Animate
0000A560                            ; ===========================================================================
0000A560                            
0000A560                            Obj4B_Delete:				; XREF: Obj4B_Index
0000A560 6000 0000                  		bra.w	DeleteObject
0000A564                            ; ===========================================================================
0000A564                            ; ---------------------------------------------------------------------------
0000A564                            ; Object 7C - flash effect when	you collect the	giant ring
0000A564                            ; ---------------------------------------------------------------------------
0000A564                            
0000A564                            Obj7C:					; XREF: Obj_Index
0000A564 7000                       		moveq	#0,d0
0000A566 1028 0024                  		move.b	$24(a0),d0
0000A56A 323B 0000                  		move.w	Obj7C_Index(pc,d0.w),d1
0000A56E 4EFB 1000                  		jmp	Obj7C_Index(pc,d1.w)
0000A572                            ; ===========================================================================
0000A572 0000                       Obj7C_Index:	dc.w Obj7C_Main-Obj7C_Index
0000A574 0000                       		dc.w Obj7C_ChkDel-Obj7C_Index
0000A576 0000                       		dc.w Obj7C_Delete-Obj7C_Index
0000A578                            ; ===========================================================================
0000A578                            
0000A578                            Obj7C_Main:				; XREF: Obj7C_Index
0000A578 5428 0024                  		addq.b	#2,$24(a0)
0000A57C 217C 0000 0000 0004        		move.l	#Map_obj7C,4(a0)
0000A584 317C 2462 0002             		move.w	#$2462,2(a0)
0000A58A 0028 0004 0001             		ori.b	#4,1(a0)
0000A590 117C 0000 0018             		move.b	#0,$18(a0)
0000A596 117C 0020 0019             		move.b	#$20,$19(a0)
0000A59C 117C 00FF 001A             		move.b	#$FF,$1A(a0)
0000A5A2                            
0000A5A2                            Obj7C_ChkDel:				; XREF: Obj7C_Index
0000A5A2 6100                       		bsr.s	Obj7C_Collect
0000A5A4 3028 0008                  		move.w	8(a0),d0
0000A5A8 0240 FF80                  		andi.w	#$FF80,d0
0000A5AC 3238 F700                  		move.w	($FFFFF700).w,d1
0000A5B0 0441 0080                  		subi.w	#$80,d1
0000A5B4 0241 FF80                  		andi.w	#$FF80,d1
0000A5B8 9041                       		sub.w	d1,d0
0000A5BA 0C40 0280                  		cmpi.w	#$280,d0
0000A5BE 6200 0000                  		bhi.w	DeleteObject
0000A5C2 6000 0000                  		bra.w	DisplaySprite
0000A5C6                            
0000A5C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A5C6                            
0000A5C6                            
0000A5C6                            Obj7C_Collect:				; XREF: Obj7C_ChkDel
0000A5C6 5328 001E                  		subq.b	#1,$1E(a0)
0000A5CA 6A00                       		bpl.s	locret_9F76
0000A5CC 117C 0001 001E             		move.b	#1,$1E(a0)
0000A5D2 5228 001A                  		addq.b	#1,$1A(a0)
0000A5D6 0C28 0008 001A             		cmpi.b	#8,$1A(a0)	; has animation	finished?
0000A5DC 6400                       		bcc.s	Obj7C_End	; if yes, branch
0000A5DE 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is 3rd frame displayed?
0000A5E4 6600                       		bne.s	locret_9F76	; if not, branch
0000A5E6 2268 003C                  		movea.l	$3C(a0),a1
0000A5EA 137C 0006 0024             		move.b	#6,$24(a1)	; delete giant ring object (Obj4B)
0000A5F0 11FC 001C D01C             		move.b	#$1C,($FFFFD01C).w ; make Sonic	invisible
0000A5F6 11FC 0001 F7CD             		move.b	#1,($FFFFF7CD).w ; stop	Sonic getting bonuses
0000A5FC 4238 FE2D                  		clr.b	($FFFFFE2D).w	; remove invincibility
0000A600 4238 FE2C                  		clr.b	($FFFFFE2C).w	; remove shield
0000A604                            
0000A604                            locret_9F76:
0000A604 4E75                       		rts	
0000A606                            ; ===========================================================================
0000A606                            
0000A606                            Obj7C_End:				; XREF: Obj7C_Collect
0000A606 5428 0024                  		addq.b	#2,$24(a0)
0000A60A 31FC 0000 D000             		move.w	#0,($FFFFD000).w ; remove Sonic	object
0000A610 588F                       		addq.l	#4,sp
0000A612 4E75                       		rts	
0000A614                            ; End of function Obj7C_Collect
0000A614                            
0000A614                            ; ===========================================================================
0000A614                            
0000A614                            Obj7C_Delete:				; XREF: Obj7C_Index
0000A614 6000 0000                  		bra.w	DeleteObject
0000A618                            ; ===========================================================================
0000A618                            Ani_obj25:
0000A618                            	include "_anim\obj25.asm"
0000A618                            ; ---------------------------------------------------------------------------
0000A618                            ; Animation script - ring
0000A618                            ; ---------------------------------------------------------------------------
0000A618 0000                       		dc.w byte_9F8C-Ani_obj25
0000A61A 0504 0506 07FC             byte_9F8C:	dc.b 5,	4, 5, 6, 7, $FC
0000A620                            		even
0000A620                            		even
0000A620                            
0000A620                            ; ---------------------------------------------------------------------------
0000A620                            ; Sprite mappings - rings
0000A620                            ; ---------------------------------------------------------------------------
0000A620                            Map_obj25:
0000A620                            	include "_maps\obj25.asm"
0000A620                            ; ---------------------------------------------------------------------------
0000A620                            ; Sprite mappings - rings
0000A620                            ; ---------------------------------------------------------------------------
0000A620 0000 0000                  		dc.w byte_9FA2-Map_obj25, byte_9FA8-Map_obj25
0000A624 0000 0000                  		dc.w byte_9FAE-Map_obj25, byte_9FB4-Map_obj25
0000A628 0000 0000                  		dc.w byte_9FBA-Map_obj25, byte_9FC0-Map_obj25
0000A62C 0000 0000                  		dc.w byte_9FC6-Map_obj25, byte_9FCC-Map_obj25
0000A630 01                         byte_9FA2:	dc.b 1
0000A631 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000A636 01                         byte_9FA8:	dc.b 1
0000A637 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0000A63C 01                         byte_9FAE:	dc.b 1
0000A63D F801 0008 FC               		dc.b $F8, 1, 0,	8, $FC
0000A642 01                         byte_9FB4:	dc.b 1
0000A643 F805 0804 F8               		dc.b $F8, 5, 8,	4, $F8
0000A648 01                         byte_9FBA:	dc.b 1
0000A649 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
0000A64E 01                         byte_9FC0:	dc.b 1
0000A64F F805 180A F8               		dc.b $F8, 5, $18, $A, $F8
0000A654 01                         byte_9FC6:	dc.b 1
0000A655 F805 080A F8               		dc.b $F8, 5, 8,	$A, $F8
0000A65A 01                         byte_9FCC:	dc.b 1
0000A65B F805 100A F8               		dc.b $F8, 5, $10, $A, $F8
0000A660                            		even
0000A660                            		even
0000A660                            
0000A660                            ; ---------------------------------------------------------------------------
0000A660                            ; Sprite mappings - giant ring
0000A660                            ; ---------------------------------------------------------------------------
0000A660                            Map_obj4B:
0000A660                            	include "_maps\obj4B.asm"
0000A660                            ; ---------------------------------------------------------------------------
0000A660                            ; Sprite mappings - giant ring
0000A660                            ; ---------------------------------------------------------------------------
0000A660 0000 0000                  		dc.w byte_9FDA-Map_obj4B, byte_A00D-Map_obj4B
0000A664 0000 0000                  		dc.w byte_A036-Map_obj4B, byte_A04B-Map_obj4B
0000A668 0A                         byte_9FDA:	dc.b $A
0000A669 E008 0000 E8               		dc.b $E0, 8, 0,	0, $E8
0000A66E E008 0003 00               		dc.b $E0, 8, 0,	3, 0
0000A673 E80C 0006 E0               		dc.b $E8, $C, 0, 6, $E0
0000A678 E80C 000A 00               		dc.b $E8, $C, 0, $A, 0
0000A67D F007 000E E0               		dc.b $F0, 7, 0,	$E, $E0
0000A682 F007 0016 10               		dc.b $F0, 7, 0,	$16, $10
0000A687 100C 001E E0               		dc.b $10, $C, 0, $1E, $E0
0000A68C 100C 0022 00               		dc.b $10, $C, 0, $22, 0
0000A691 1808 0026 E8               		dc.b $18, 8, 0,	$26, $E8
0000A696 1808 0029 00               		dc.b $18, 8, 0,	$29, 0
0000A69B 08                         byte_A00D:	dc.b 8
0000A69C E00C 002C F0               		dc.b $E0, $C, 0, $2C, $F0
0000A6A1 E808 0030 E8               		dc.b $E8, 8, 0,	$30, $E8
0000A6A6 E809 0033 00               		dc.b $E8, 9, 0,	$33, 0
0000A6AB F007 0039 E8               		dc.b $F0, 7, 0,	$39, $E8
0000A6B0 F805 0041 08               		dc.b $F8, 5, 0,	$41, 8
0000A6B5 0809 0045 00               		dc.b 8,	9, 0, $45, 0
0000A6BA 1008 004B E8               		dc.b $10, 8, 0,	$4B, $E8
0000A6BF 180C 004E F0               		dc.b $18, $C, 0, $4E, $F0
0000A6C4 04                         byte_A036:	dc.b 4
0000A6C5 E007 0052 F4               		dc.b $E0, 7, 0,	$52, $F4
0000A6CA E003 0852 04               		dc.b $E0, 3, 8,	$52, 4
0000A6CF 0007 005A F4               		dc.b 0,	7, 0, $5A, $F4
0000A6D4 0003 085A 04               		dc.b 0,	3, 8, $5A, 4
0000A6D9 08                         byte_A04B:	dc.b 8
0000A6DA E00C 082C F0               		dc.b $E0, $C, 8, $2C, $F0
0000A6DF E808 0830 00               		dc.b $E8, 8, 8,	$30, 0
0000A6E4 E809 0833 E8               		dc.b $E8, 9, 8,	$33, $E8
0000A6E9 F007 0839 08               		dc.b $F0, 7, 8,	$39, 8
0000A6EE F805 0841 E8               		dc.b $F8, 5, 8,	$41, $E8
0000A6F3 0809 0845 E8               		dc.b 8,	9, 8, $45, $E8
0000A6F8 1008 084B 00               		dc.b $10, 8, 8,	$4B, 0
0000A6FD 180C 084E F0               		dc.b $18, $C, 8, $4E, $F0
0000A702                            		even
0000A702                            		even
0000A702                            
0000A702                            ; ---------------------------------------------------------------------------
0000A702                            ; Sprite mappings - flash effect when you collect the giant ring
0000A702                            ; ---------------------------------------------------------------------------
0000A702                            Map_obj7C:
0000A702                            	include "_maps\obj7C.asm"
0000A702                            ; ---------------------------------------------------------------------------
0000A702                            ; Sprite mappings - flash effect when you collect the giant ring
0000A702                            ; ---------------------------------------------------------------------------
0000A702 0000 0000                  		dc.w byte_A084-Map_obj7C, byte_A08F-Map_obj7C
0000A706 0000 0000                  		dc.w byte_A0A4-Map_obj7C, byte_A0B9-Map_obj7C
0000A70A 0000 0000                  		dc.w byte_A0CE-Map_obj7C, byte_A0E3-Map_obj7C
0000A70E 0000 0000                  		dc.w byte_A0F8-Map_obj7C, byte_A103-Map_obj7C
0000A712 02                         byte_A084:	dc.b 2
0000A713 E00F 0000 00               		dc.b $E0, $F, 0, 0, 0
0000A718 000F 1000 00               		dc.b 0,	$F, $10, 0, 0
0000A71D 04                         byte_A08F:	dc.b 4
0000A71E E00F 0010 F0               		dc.b $E0, $F, 0, $10, $F0
0000A723 E007 0020 10               		dc.b $E0, 7, 0,	$20, $10
0000A728 000F 1010 F0               		dc.b 0,	$F, $10, $10, $F0
0000A72D 0007 1020 10               		dc.b 0,	7, $10,	$20, $10
0000A732 04                         byte_A0A4:	dc.b 4
0000A733 E00F 0028 E8               		dc.b $E0, $F, 0, $28, $E8
0000A738 E00B 0038 08               		dc.b $E0, $B, 0, $38, 8
0000A73D 000F 1028 E8               		dc.b 0,	$F, $10, $28, $E8
0000A742 000B 1038 08               		dc.b 0,	$B, $10, $38, 8
0000A747 04                         byte_A0B9:	dc.b 4
0000A748 E00F 0834 E0               		dc.b $E0, $F, 8, $34, $E0
0000A74D E00F 0034 00               		dc.b $E0, $F, 0, $34, 0
0000A752 000F 1834 E0               		dc.b 0,	$F, $18, $34, $E0
0000A757 000F 1034 00               		dc.b 0,	$F, $10, $34, 0
0000A75C 04                         byte_A0CE:	dc.b 4
0000A75D E00B 0838 E0               		dc.b $E0, $B, 8, $38, $E0
0000A762 E00F 0828 F8               		dc.b $E0, $F, 8, $28, $F8
0000A767 000B 1838 E0               		dc.b 0,	$B, $18, $38, $E0
0000A76C 000F 1828 F8               		dc.b 0,	$F, $18, $28, $F8
0000A771 04                         byte_A0E3:	dc.b 4
0000A772 E007 0820 E0               		dc.b $E0, 7, 8,	$20, $E0
0000A777 E00F 0810 F0               		dc.b $E0, $F, 8, $10, $F0
0000A77C 0007 1820 E0               		dc.b 0,	7, $18,	$20, $E0
0000A781 000F 1810 F0               		dc.b 0,	$F, $18, $10, $F0
0000A786 02                         byte_A0F8:	dc.b 2
0000A787 E00F 0800 E0               		dc.b $E0, $F, 8, 0, $E0
0000A78C 000F 1800 E0               		dc.b 0,	$F, $18, 0, $E0
0000A791 04                         byte_A103:	dc.b 4
0000A792 E00F 0044 E0               		dc.b $E0, $F, 0, $44, $E0
0000A797 E00F 0844 00               		dc.b $E0, $F, 8, $44, 0
0000A79C 000F 1044 E0               		dc.b 0,	$F, $10, $44, $E0
0000A7A1 000F 1844 00               		dc.b 0,	$F, $18, $44, 0
0000A7A6                            		even
0000A7A6                            		even
0000A7A6                            
0000A7A6                            ; ===========================================================================
0000A7A6                            ; ---------------------------------------------------------------------------
0000A7A6                            ; Object 26 - monitors
0000A7A6                            ; ---------------------------------------------------------------------------
0000A7A6                            
0000A7A6                            Obj26:					; XREF: Obj_Index
0000A7A6 7000                       		moveq	#0,d0
0000A7A8 1028 0024                  		move.b	$24(a0),d0
0000A7AC 323B 0000                  		move.w	Obj26_Index(pc,d0.w),d1
0000A7B0 4EFB 1000                  		jmp	Obj26_Index(pc,d1.w)
0000A7B4                            ; ===========================================================================
0000A7B4 0000                       Obj26_Index:	dc.w Obj26_Main-Obj26_Index
0000A7B6 0000                       		dc.w Obj26_Solid-Obj26_Index
0000A7B8 0000                       		dc.w Obj26_BreakOpen-Obj26_Index
0000A7BA 0000                       		dc.w Obj26_Animate-Obj26_Index
0000A7BC 0000                       		dc.w Obj26_Display-Obj26_Index
0000A7BE                            ; ===========================================================================
0000A7BE                            
0000A7BE                            Obj26_Main:				; XREF: Obj26_Index
0000A7BE 5428 0024                  		addq.b	#2,$24(a0)
0000A7C2 117C 000E 0016             		move.b	#$E,$16(a0)
0000A7C8 117C 000E 0017             		move.b	#$E,$17(a0)
0000A7CE 217C 0000 0000 0004        		move.l	#Map_obj26,4(a0)
0000A7D6 317C 0680 0002             		move.w	#$680,2(a0)
0000A7DC 117C 0004 0001             		move.b	#4,1(a0)
0000A7E2 117C 0003 0018             		move.b	#3,$18(a0)
0000A7E8 117C 000F 0019             		move.b	#$F,$19(a0)
0000A7EE 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A7F2 7000                       		moveq	#0,d0
0000A7F4 1028 0023                  		move.b	$23(a0),d0
0000A7F8 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000A7FE 0832 0000 0002             		btst	#0,2(a2,d0.w)	; has monitor been broken?
0000A804 6700                       		beq.s	Obj26_NotBroken	; if not, branch
0000A806 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj26_Display" routine
0000A80C 117C 000B 001A             		move.b	#$B,$1A(a0)	; use broken monitor frame
0000A812 4E75                       		rts	
0000A814                            ; ===========================================================================
0000A814                            
0000A814                            Obj26_NotBroken:			; XREF: Obj26_Main
0000A814 117C 0046 0020             		move.b	#$46,$20(a0)
0000A81A 1168 0028 001C             		move.b	$28(a0),$1C(a0)
0000A820                            
0000A820                            Obj26_Solid:				; XREF: Obj26_Index
0000A820 1028 0025                  		move.b	$25(a0),d0	; is monitor set to fall?
0000A824 6700                       		beq.s	loc_A1EC	; if not, branch
0000A826 5500                       		subq.b	#2,d0
0000A828 6600                       		bne.s	Obj26_Fall
0000A82A 7200                       		moveq	#0,d1
0000A82C 1228 0019                  		move.b	$19(a0),d1
0000A830 0641 000B                  		addi.w	#$B,d1
0000A834 6100 D38A                  		bsr.w	ExitPlatform
0000A838 0829 0003 0022             		btst	#3,$22(a1)
0000A83E 6600 0000                  		bne.w	loc_A1BC
0000A842 4228 0025                  		clr.b	$25(a0)
0000A846 6000 0000                  		bra.w	Obj26_Animate
0000A84A                            ; ===========================================================================
0000A84A                            
0000A84A                            loc_A1BC:				; XREF: Obj26_Solid
0000A84A 363C 0010                  		move.w	#$10,d3
0000A84E 3428 0008                  		move.w	8(a0),d2
0000A852 6100 D8CA                  		bsr.w	MvSonicOnPtfm
0000A856 6000 0000                  		bra.w	Obj26_Animate
0000A85A                            ; ===========================================================================
0000A85A                            
0000A85A                            Obj26_Fall:				; XREF: Obj26_Solid
0000A85A 6100 0000                  		bsr.w	ObjectFall
0000A85E 4EB9 0000 0000             		jsr	ObjHitFloor
0000A864 4A41                       		tst.w	d1
0000A866 6A00 0000                  		bpl.w	Obj26_Animate
0000A86A D368 000C                  		add.w	d1,$C(a0)
0000A86E 4268 0012                  		clr.w	$12(a0)
0000A872 4228 0025                  		clr.b	$25(a0)
0000A876 6000 0000                  		bra.w	Obj26_Animate
0000A87A                            ; ===========================================================================
0000A87A                            
0000A87A                            loc_A1EC:				; XREF: Obj26_Solid
0000A87A 323C 001A                  		move.w	#$1A,d1
0000A87E 343C 000F                  		move.w	#$F,d2
0000A882 6100 0000                  		bsr.w	Obj26_SolidSides
0000A886 6700 0000                  		beq.w	loc_A25C
0000A88A 4A69 0012                  		tst.w	$12(a1)
0000A88E 6B00                       		bmi.s	loc_A20A
0000A890 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000A896 6700                       		beq.s	loc_A25C	; if yes, branch
0000A898                            
0000A898                            loc_A20A:
0000A898 4A41                       		tst.w	d1
0000A89A 6A00                       		bpl.s	loc_A220
0000A89C 9769 000C                  		sub.w	d3,$C(a1)
0000A8A0 6100 D20C                  		bsr.w	loc_74AE
0000A8A4 117C 0002 0025             		move.b	#2,$25(a0)
0000A8AA 6000 0000                  		bra.w	Obj26_Animate
0000A8AE                            ; ===========================================================================
0000A8AE                            
0000A8AE                            loc_A220:
0000A8AE 4A40                       		tst.w	d0
0000A8B0 6700 0000                  		beq.w	loc_A246
0000A8B4 6B00                       		bmi.s	loc_A230
0000A8B6 4A69 0010                  		tst.w	$10(a1)
0000A8BA 6B00                       		bmi.s	loc_A246
0000A8BC 6000                       		bra.s	loc_A236
0000A8BE                            ; ===========================================================================
0000A8BE                            
0000A8BE                            loc_A230:
0000A8BE 4A69 0010                  		tst.w	$10(a1)
0000A8C2 6A00                       		bpl.s	loc_A246
0000A8C4                            
0000A8C4                            loc_A236:
0000A8C4 9169 0008                  		sub.w	d0,8(a1)
0000A8C8 337C 0000 0014             		move.w	#0,$14(a1)
0000A8CE 337C 0000 0010             		move.w	#0,$10(a1)
0000A8D4                            
0000A8D4                            loc_A246:
0000A8D4 0829 0001 0022             		btst	#1,$22(a1)
0000A8DA 6600                       		bne.s	loc_A26A
0000A8DC 08E9 0005 0022             		bset	#5,$22(a1)
0000A8E2 08E8 0005 0022             		bset	#5,$22(a0)
0000A8E8 6000                       		bra.s	Obj26_Animate
0000A8EA                            ; ===========================================================================
0000A8EA                            
0000A8EA                            loc_A25C:
0000A8EA 0828 0005 0022             		btst	#5,$22(a0)
0000A8F0 6700                       		beq.s	Obj26_Animate
0000A8F2 337C 0001 001C             		move.w	#1,$1C(a1)
0000A8F8                            
0000A8F8                            loc_A26A:
0000A8F8 08A8 0005 0022             		bclr	#5,$22(a0)
0000A8FE 08A9 0005 0022             		bclr	#5,$22(a1)
0000A904                            
0000A904                            Obj26_Animate:				; XREF: Obj26_Index
0000A904 43F9 0000 0000             		lea	(Ani_obj26).l,a1
0000A90A 6100 0000                  		bsr.w	AnimateSprite
0000A90E                            
0000A90E                            Obj26_Display:				; XREF: Obj26_Index
0000A90E 6100 0000                  		bsr.w	DisplaySprite
0000A912 3028 0008                  		move.w	8(a0),d0
0000A916 0240 FF80                  		andi.w	#$FF80,d0
0000A91A 3238 F700                  		move.w	($FFFFF700).w,d1
0000A91E 0441 0080                  		subi.w	#$80,d1
0000A922 0241 FF80                  		andi.w	#$FF80,d1
0000A926 9041                       		sub.w	d1,d0
0000A928 0C40 0280                  		cmpi.w	#$280,d0
0000A92C 6200 0000                  		bhi.w	DeleteObject
0000A930 4E75                       		rts	
0000A932                            ; ===========================================================================
0000A932                            
0000A932                            Obj26_BreakOpen:			; XREF: Obj26_Index
0000A932 5428 0024                  		addq.b	#2,$24(a0)
0000A936 117C 0000 0020             		move.b	#0,$20(a0)
0000A93C 6100 0000                  		bsr.w	SingleObjLoad
0000A940 6600                       		bne.s	Obj26_Explode
0000A942 12BC 002E                  		move.b	#$2E,0(a1)	; load monitor contents	object
0000A946 3368 0008 0008             		move.w	8(a0),8(a1)
0000A94C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A952 1368 001C 001C             		move.b	$1C(a0),$1C(a1)
0000A958 7400                       		moveq	#0,d2	; GMZ
0000A95A 7205                       		moveq	#5,d1	; GMZ: Amount of explosion objects
0000A95C                            
0000A95C                            Obj26_Explode:
0000A95C 6100 0000                  		bsr.w	SingleObjLoad
0000A960 6600                       		bne.s	Obj26_SetBroken
0000A962 12BC 0027                  		move.b	#$27,0(a1)	; GMZ: Load explosion object
0000A966 5429 0024                  		addq.b	#2,$24(a1)
0000A96A 1342 0028                  		move.b	d2,$28(a1)	; GMZ: Set subtype
0000A96E 3368 0008 0008             		move.w	8(a0),8(a1)
0000A974 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A97A                            
0000A97A                            Obj26_NextExplosion:
0000A97A 5802                       		addq.b	#4,d2
0000A97C 51C9 FFDE                  		dbf	d1,Obj26_Explode
0000A980                            
0000A980                            Obj26_SetBroken:
0000A980 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A984 7000                       		moveq	#0,d0
0000A986 1028 0023                  		move.b	$23(a0),d0
0000A98A 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000A990 117C 0009 001C             		move.b	#9,$1C(a0)	; set monitor type to broken
0000A996 6000 0000                  		bra.w	DisplaySprite
0000A99A                            ; ===========================================================================
0000A99A                            ; ---------------------------------------------------------------------------
0000A99A                            ; Object 2E - contents of monitors
0000A99A                            ; ---------------------------------------------------------------------------
0000A99A                            
0000A99A                            Obj2E:					; XREF: Obj_Index
0000A99A 7000                       		moveq	#0,d0
0000A99C 1028 0024                  		move.b	$24(a0),d0
0000A9A0 323B 0000                  		move.w	Obj2E_Index(pc,d0.w),d1
0000A9A4 4EBB 1000                  		jsr	Obj2E_Index(pc,d1.w)
0000A9A8 6000 0000                  		bra.w	DisplaySprite
0000A9AC                            ; ===========================================================================
0000A9AC 0000                       Obj2E_Index:	dc.w Obj2E_Main-Obj2E_Index
0000A9AE 0000                       		dc.w Obj2E_Move-Obj2E_Index
0000A9B0 0000                       		dc.w Obj2E_Delete-Obj2E_Index
0000A9B2                            ; ===========================================================================
0000A9B2                            
0000A9B2                            Obj2E_Main:				; XREF: Obj2E_Index
0000A9B2 5428 0024                  		addq.b	#2,$24(a0)
0000A9B6 317C 0680 0002             		move.w	#$680,2(a0)
0000A9BC 117C 0024 0001             		move.b	#$24,1(a0)
0000A9C2 117C 0003 0018             		move.b	#3,$18(a0)
0000A9C8 117C 0008 0019             		move.b	#8,$19(a0)
0000A9CE 317C FD00 0012             		move.w	#-$300,$12(a0)
0000A9D4 7000                       		moveq	#0,d0
0000A9D6 1028 001C                  		move.b	$1C(a0),d0
0000A9DA 5400                       		addq.b	#2,d0
0000A9DC 1140 001A                  		move.b	d0,$1A(a0)
0000A9E0 227C 0000 0000             		movea.l	#Map_obj26,a1
0000A9E6 D000                       		add.b	d0,d0
0000A9E8 D2F1 0000                  		adda.w	(a1,d0.w),a1
0000A9EC 5249                       		addq.w	#1,a1
0000A9EE 2149 0004                  		move.l	a1,4(a0)
0000A9F2                            
0000A9F2                            Obj2E_Move:				; XREF: Obj2E_Index
0000A9F2 4A68 0012                  		tst.w	$12(a0)		; is object moving?
0000A9F6 6A00 0000                  		bpl.w	Obj2E_ChkEggman	; if not, branch
0000A9FA 6100 0000                  		bsr.w	SpeedToPos
0000A9FE 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
0000AA04 4E75                       		rts	
0000AA06                            ; ===========================================================================
0000AA06                            
0000AA06                            Obj2E_ChkEggman:			; XREF: Obj2E_Move
0000AA06 5428 0024                  		addq.b	#2,$24(a0)
0000AA0A 317C 001D 001E             		move.w	#29,$1E(a0)
0000AA10 1028 001C                  		move.b	$1C(a0),d0
0000AA14 0C00 0001                  		cmpi.b	#1,d0		; does monitor contain Eggman?
0000AA18 6600                       		bne.s	Obj2E_ChkSonic
0000AA1A 4E75                       		rts			; Eggman monitor does nothing
0000AA1C                            ; ===========================================================================
0000AA1C                            
0000AA1C                            Obj2E_ChkSonic:
0000AA1C 0C00 0002                  		cmpi.b	#2,d0		; does monitor contain Sonic?
0000AA20 6600                       		bne.s	Obj2E_ChkShoes
0000AA22                            
0000AA22                            ExtraLife:
0000AA22 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000AA26 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000AA2A 303C 0088                  		move.w	#$88,d0
0000AA2E 4EF9 0000 15BA             		jmp	(PlaySound).l	; play extra life music
0000AA34                            ; ===========================================================================
0000AA34                            
0000AA34                            Obj2E_ChkShoes:
0000AA34 0C00 0003                  		cmpi.b	#3,d0		; does monitor contain speed shoes?
0000AA38 6600                       		bne.s	Obj2E_ChkShield
0000AA3A 11FC 0001 FE2E             		move.b	#1,($FFFFFE2E).w ; speed up the	BG music
0000AA40 31FC 04B0 D034             		move.w	#$4B0,($FFFFD034).w ; time limit for the power-up
0000AA46 31FC 0C00 F760             		move.w	#$C00,($FFFFF760).w ; change Sonic's top speed
0000AA4C 31FC 0018 F762             		move.w	#$18,($FFFFF762).w
0000AA52 31FC 0080 F764             		move.w	#$80,($FFFFF764).w
0000AA58 303C 00E2                  		move.w	#$E2,d0
0000AA5C 4EF9 0000 15BA             		jmp	(PlaySound).l	; Speed	up the music
0000AA62                            ; ===========================================================================
0000AA62                            
0000AA62                            Obj2E_ChkShield:
0000AA62 0C00 0004                  		cmpi.b	#4,d0		; does monitor contain a shield?
0000AA66 6600                       		bne.s	Obj2E_ChkInvinc
0000AA68 11FC 0001 FE2C             		move.b	#1,($FFFFFE2C).w ; give	Sonic a	shield
0000AA6E 11FC 0038 D180             		move.b	#$38,($FFFFD180).w ; load shield object	($38)
0000AA74 303C 00AF                  		move.w	#$AF,d0
0000AA78 4EF9 0000 15BA             		jmp	(PlaySound).l	; play shield sound
0000AA7E                            ; ===========================================================================
0000AA7E                            
0000AA7E                            Obj2E_ChkInvinc:
0000AA7E 0C00 0005                  		cmpi.b	#5,d0		; does monitor contain invincibility?
0000AA82 6600                       		bne.s	Obj2E_ChkRings
0000AA84 11FC 0001 FE2D             		move.b	#1,($FFFFFE2D).w ; make	Sonic invincible
0000AA8A 31FC 04B0 D032             		move.w	#$4B0,($FFFFD032).w ; time limit for the power-up
0000AA90 11FC 0038 D200             		move.b	#$38,($FFFFD200).w ; load stars	object ($3801)
0000AA96 11FC 0001 D21C             		move.b	#1,($FFFFD21C).w
0000AA9C 11FC 0038 D240             		move.b	#$38,($FFFFD240).w ; load stars	object ($3802)
0000AAA2 11FC 0002 D25C             		move.b	#2,($FFFFD25C).w
0000AAA8 11FC 0038 D280             		move.b	#$38,($FFFFD280).w ; load stars	object ($3803)
0000AAAE 11FC 0003 D29C             		move.b	#3,($FFFFD29C).w
0000AAB4 11FC 0038 D2C0             		move.b	#$38,($FFFFD2C0).w ; load stars	object ($3804)
0000AABA 11FC 0004 D2DC             		move.b	#4,($FFFFD2DC).w
0000AAC0 4A38 F7AA                  		tst.b	($FFFFF7AA).w	; is boss mode on?
0000AAC4 6600                       		bne.s	Obj2E_NoMusic	; if yes, branch
0000AAC6 303C 0087                  		move.w	#$87,d0
0000AACA 4EF9 0000 15BA             		jmp	(PlaySound).l	; play invincibility music
0000AAD0                            ; ===========================================================================
0000AAD0                            
0000AAD0                            Obj2E_NoMusic:
0000AAD0 4E75                       		rts	
0000AAD2                            ; ===========================================================================
0000AAD2                            
0000AAD2                            Obj2E_ChkRings:
0000AAD2 0C00 0006                  		cmpi.b	#6,d0		; does monitor contain 10 rings?
0000AAD6 6600                       		bne.s	Obj2E_ChkS
0000AAD8 0678 000A FE20             		addi.w	#$A,($FFFFFE20).w ; add	10 rings to the	number of rings	you have
0000AADE 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the ring counter
0000AAE4 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; check if you have 100 rings
0000AAEA 6500                       		bcs.s	Obj2E_RingSound
0000AAEC 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w
0000AAF2 6700 FF2E                  		beq.w	ExtraLife
0000AAF6 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; check if you have 200 rings
0000AAFC 6500                       		bcs.s	Obj2E_RingSound
0000AAFE 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w
0000AB04 6700 FF1C                  		beq.w	ExtraLife
0000AB08                            
0000AB08                            Obj2E_RingSound:
0000AB08 303C 00B5                  		move.w	#$B5,d0
0000AB0C 4EF9 0000 15BA             		jmp	(PlaySound).l	; play ring sound
0000AB12                            ; ===========================================================================
0000AB12                            
0000AB12                            Obj2E_ChkS:
0000AB12 0C00 0007                  		cmpi.b	#7,d0		; does monitor contain 'S'
0000AB16 6600                       		bne.s	Obj2E_ChkEnd
0000AB18                            		; nop	
0000AB18 7201                       		moveq	#1,d1
0000AB1A B338 FE2F                  		eor.b	d1,($FFFFFE2F).w	; GMZ: Set reverse controls flag when broken, revert when another monitor of same type is broken again
0000AB1E                            
0000AB1E                            Obj2E_ChkEnd:
0000AB1E 4E75                       		rts			; 'S' and goggles monitors do nothing
0000AB20                            ; ===========================================================================
0000AB20                            
0000AB20                            Obj2E_Delete:				; XREF: Obj2E_Index
0000AB20 5368 001E                  		subq.w	#1,$1E(a0)
0000AB24 6B00 0000                  		bmi.w	DeleteObject
0000AB28 4E75                       		rts	
0000AB2A                            ; ---------------------------------------------------------------------------
0000AB2A                            ; Subroutine to	make the sides of a monitor solid
0000AB2A                            ; ---------------------------------------------------------------------------
0000AB2A                            
0000AB2A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AB2A                            
0000AB2A                            
0000AB2A                            Obj26_SolidSides:			; XREF: loc_A1EC
0000AB2A 43F8 D000                  		lea	($FFFFD000).w,a1
0000AB2E 3029 0008                  		move.w	8(a1),d0
0000AB32 9068 0008                  		sub.w	8(a0),d0
0000AB36 D041                       		add.w	d1,d0
0000AB38 6B00                       		bmi.s	loc_A4E6
0000AB3A 3601                       		move.w	d1,d3
0000AB3C D643                       		add.w	d3,d3
0000AB3E B043                       		cmp.w	d3,d0
0000AB40 6200                       		bhi.s	loc_A4E6
0000AB42 1629 0016                  		move.b	$16(a1),d3
0000AB46 4883                       		ext.w	d3
0000AB48 D443                       		add.w	d3,d2
0000AB4A 3629 000C                  		move.w	$C(a1),d3
0000AB4E 9668 000C                  		sub.w	$C(a0),d3
0000AB52 D642                       		add.w	d2,d3
0000AB54 6B00                       		bmi.s	loc_A4E6
0000AB56 D442                       		add.w	d2,d2
0000AB58 B642                       		cmp.w	d2,d3
0000AB5A 6400                       		bcc.s	loc_A4E6
0000AB5C 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000AB60 6B00                       		bmi.s	loc_A4E6
0000AB62 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000AB68 6400                       		bcc.s	loc_A4E6
0000AB6A 4A78 FE08                  		tst.w	($FFFFFE08).w
0000AB6E 6600                       		bne.s	loc_A4E6
0000AB70 B240                       		cmp.w	d0,d1
0000AB72 6400                       		bcc.s	loc_A4DC
0000AB74 D241                       		add.w	d1,d1
0000AB76 9041                       		sub.w	d1,d0
0000AB78                            
0000AB78                            loc_A4DC:
0000AB78 0C43 0010                  		cmpi.w	#$10,d3
0000AB7C 6500                       		bcs.s	loc_A4EA
0000AB7E                            
0000AB7E                            loc_A4E2:
0000AB7E 7201                       		moveq	#1,d1
0000AB80 4E75                       		rts	
0000AB82                            ; ===========================================================================
0000AB82                            
0000AB82                            loc_A4E6:
0000AB82 7200                       		moveq	#0,d1
0000AB84 4E75                       		rts	
0000AB86                            ; ===========================================================================
0000AB86                            
0000AB86                            loc_A4EA:
0000AB86 7200                       		moveq	#0,d1
0000AB88 1228 0019                  		move.b	$19(a0),d1
0000AB8C 5841                       		addq.w	#4,d1
0000AB8E 3401                       		move.w	d1,d2
0000AB90 D442                       		add.w	d2,d2
0000AB92 D269 0008                  		add.w	8(a1),d1
0000AB96 9268 0008                  		sub.w	8(a0),d1
0000AB9A 6BE2                       		bmi.s	loc_A4E2
0000AB9C B242                       		cmp.w	d2,d1
0000AB9E 64DE                       		bcc.s	loc_A4E2
0000ABA0 72FF                       		moveq	#-1,d1
0000ABA2 4E75                       		rts	
0000ABA4                            ; End of function Obj26_SolidSides
0000ABA4                            
0000ABA4                            ; ===========================================================================
0000ABA4                            Ani_obj26:
0000ABA4                            	include "_anim\obj26.asm"
0000ABA4                            ; ---------------------------------------------------------------------------
0000ABA4                            ; Animation script - monitors
0000ABA4                            ; ---------------------------------------------------------------------------
0000ABA4 0000 0000 0000             		dc.w byte_A51C-Ani_obj26, byte_A522-Ani_obj26, byte_A52E-Ani_obj26
0000ABAA 0000 0000 0000             		dc.w byte_A53A-Ani_obj26, byte_A546-Ani_obj26, byte_A552-Ani_obj26
0000ABB0 0000 0000 0000             		dc.w byte_A55E-Ani_obj26, byte_A56A-Ani_obj26, byte_A576-Ani_obj26
0000ABB6 0000                       		dc.w byte_A582-Ani_obj26
0000ABB8 0100 0102 FF00             byte_A51C:	dc.b 1,	0, 1, 2, $FF, 0
0000ABBE 0100 0303 0103 0302 0303+  byte_A522:	dc.b 1,	0, 3, 3, 1, 3, 3, 2, 3,	3, $FF,	0
0000ABCA 0100 0404 0104 0402 0404+  byte_A52E:	dc.b 1,	0, 4, 4, 1, 4, 4, 2, 4,	4, $FF,	0
0000ABD6 0100 0505 0105 0502 0505+  byte_A53A:	dc.b 1,	0, 5, 5, 1, 5, 5, 2, 5,	5, $FF,	0
0000ABE2 0100 0606 0106 0602 0606+  byte_A546:	dc.b 1,	0, 6, 6, 1, 6, 6, 2, 6,	6, $FF,	0
0000ABEE 0100 0707 0107 0702 0707+  byte_A552:	dc.b 1,	0, 7, 7, 1, 7, 7, 2, 7,	7, $FF,	0
0000ABFA 0100 0808 0108 0802 0808+  byte_A55E:	dc.b 1,	0, 8, 8, 1, 8, 8, 2, 8,	8, $FF,	0
0000AC06 0100 0909 0109 0902 0909+  byte_A56A:	dc.b 1,	0, 9, 9, 1, 9, 9, 2, 9,	9, $FF,	0
0000AC12 0100 0A0A 010A 0A02 0A0A+  byte_A576:	dc.b 1,	0, $A, $A, 1, $A, $A, 2, $A, $A, $FF, 0
0000AC1E 0200 0102 0BFE 0100        byte_A582:	dc.b 2,	0, 1, 2, $B, $FE, 1, 0
0000AC26                            		even
0000AC26                            		even
0000AC26                            
0000AC26                            ; ---------------------------------------------------------------------------
0000AC26                            ; Sprite mappings - monitors
0000AC26                            ; ---------------------------------------------------------------------------
0000AC26                            Map_obj26:
0000AC26                            	include "_maps\obj26.asm"
0000AC26                            ; ================================================================================
0000AC26                            ; Sprite Mappings - generated by Flex 2 Sat Mar 22 2025 11:29:00 GMT-0500 (Central Daylight Time)
0000AC26                            ; ================================================================================
0000AC26                            
0000AC26                            DATAY1U343IF3L:
0000AC26 0000 0000                  	dc.w DATAY1U343IF3L_0-DATAY1U343IF3L, DATAY1U343IF3L_1-DATAY1U343IF3L
0000AC2A 0000 0000                  	dc.w DATAY1U343IF3L_2-DATAY1U343IF3L, DATAY1U343IF3L_3-DATAY1U343IF3L
0000AC2E 0000 0000                  	dc.w DATAY1U343IF3L_4-DATAY1U343IF3L, DATAY1U343IF3L_5-DATAY1U343IF3L
0000AC32 0000 0000                  	dc.w DATAY1U343IF3L_6-DATAY1U343IF3L, DATAY1U343IF3L_7-DATAY1U343IF3L
0000AC36 0000 0000                  	dc.w DATAY1U343IF3L_8-DATAY1U343IF3L, DATAY1U343IF3L_9-DATAY1U343IF3L
0000AC3A 0000 0000                  	dc.w DATAY1U343IF3L_A-DATAY1U343IF3L, DATAY1U343IF3L_B-DATAY1U343IF3L
0000AC3E 05                         DATAY1U343IF3L_0: dc.b $5
0000AC3F E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AC44 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AC49 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AC4E 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AC53 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AC58 06                         DATAY1U343IF3L_1: dc.b $6
0000AC59 F205 0023 F8               	dc.b $F2, $5, $0, $23, $F8
0000AC5E E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AC63 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AC68 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AC6D 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AC72 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AC77 05                         DATAY1U343IF3L_2: dc.b $5
0000AC78 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AC7D 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AC82 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AC87 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AC8C 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AC91 05                         DATAY1U343IF3L_3: dc.b $5
0000AC92 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AC97 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AC9C E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000ACA1 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000ACA6 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000ACAB 06                         DATAY1U343IF3L_4: dc.b $6
0000ACAC F205 0027 F8               	dc.b $F2, $5, $0, $27, $F8
0000ACB1 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000ACB6 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000ACBB E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000ACC0 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000ACC5 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000ACCA 06                         DATAY1U343IF3L_5: dc.b $6
0000ACCB F205 002B F8               	dc.b $F2, $5, $0, $2B, $F8
0000ACD0 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000ACD5 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000ACDA E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000ACDF 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000ACE4 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000ACE9 06                         DATAY1U343IF3L_6: dc.b $6
0000ACEA F205 002F F8               	dc.b $F2, $5, $0, $2F, $F8
0000ACEF E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000ACF4 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000ACF9 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000ACFE 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AD03 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AD08 06                         DATAY1U343IF3L_7: dc.b $6
0000AD09 F205 0033 F8               	dc.b $F2, $5, $0, $33, $F8
0000AD0E E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AD13 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AD18 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AD1D 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AD22 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AD27 06                         DATAY1U343IF3L_8: dc.b $6
0000AD28 F205 0037 F8               	dc.b $F2, $5, $0, $37, $F8
0000AD2D E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AD32 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AD37 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AD3C 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AD41 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AD46 06                         DATAY1U343IF3L_9: dc.b $6
0000AD47 F205 003B F8               	dc.b $F2, $5, $0, $3B, $F8
0000AD4C E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AD51 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AD56 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AD5B 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AD60 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AD65 05                         DATAY1U343IF3L_A: dc.b $5
0000AD66 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AD6B 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AD70 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AD75 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AD7A 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AD7F 01                         DATAY1U343IF3L_B: dc.b $1
0000AD80 FF0D 003F F0               	dc.b $FF, $D, $0, $3F, $F0
0000AD86 00                         	even
0000AD86 00                         	even
0000AD86                            
0000AD86                            ; ===========================================================================
0000AD86                            ; ---------------------------------------------------------------------------
0000AD86                            ; Object 0E - Sonic on the title screen
0000AD86                            ; ---------------------------------------------------------------------------
0000AD86                            
0000AD86                            Obj0E:					; XREF: Obj_Index
0000AD86 7000                       		moveq	#0,d0
0000AD88 1028 0024                  		move.b	$24(a0),d0
0000AD8C 323B 0000                  		move.w	Obj0E_Index(pc,d0.w),d1
0000AD90 4EFB 1000                  		jmp	Obj0E_Index(pc,d1.w)
0000AD94                            ; ===========================================================================
0000AD94 0000                       Obj0E_Index:	dc.w Obj0E_Main-Obj0E_Index
0000AD96 0000                       		dc.w Obj0E_Delay-Obj0E_Index
0000AD98 0000                       		dc.w Obj0E_Move-Obj0E_Index
0000AD9A 0000                       		dc.w Obj0E_Animate-Obj0E_Index
0000AD9C                            ; ===========================================================================
0000AD9C                            
0000AD9C                            Obj0E_Main:				; XREF: Obj0E_Index
0000AD9C 5428 0024                  		addq.b	#2,$24(a0)
0000ADA0 317C 00F0 0008             		move.w	#$F0,8(a0)
0000ADA6 317C 00DE 000A             		move.w	#$DE,$A(a0)
0000ADAC 217C 0000 0000 0004        		move.l	#Map_obj0E,4(a0)
0000ADB4 317C 2300 0002             		move.w	#$2300,2(a0)
0000ADBA 117C 0001 0018             		move.b	#1,$18(a0)
0000ADC0 117C 001D 001F             		move.b	#29,$1F(a0)	; set time delay to 0.5	seconds
0000ADC6 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000ADCC 6100 0000                  		bsr.w	AnimateSprite
0000ADD0                            
0000ADD0                            Obj0E_Delay:				; XREF: Obj0E_Index
0000ADD0 5328 001F                  		subq.b	#1,$1F(a0)	; subtract 1 from time delay
0000ADD4 6A00                       		bpl.s	Obj0E_Wait	; if time remains, branch
0000ADD6 5428 0024                  		addq.b	#2,$24(a0)	; go to	next routine
0000ADDA 6000 0000                  		bra.w	DisplaySprite
0000ADDE                            ; ===========================================================================
0000ADDE                            
0000ADDE                            Obj0E_Wait:				; XREF: Obj0E_Delay
0000ADDE 4E75                       		rts	
0000ADE0                            ; ===========================================================================
0000ADE0                            
0000ADE0                            Obj0E_Move:				; XREF: Obj0E_Index
0000ADE0 5168 000A                  		subq.w	#8,$A(a0)
0000ADE4 0C68 0096 000A             		cmpi.w	#$96,$A(a0)
0000ADEA 6600                       		bne.s	Obj0E_Display
0000ADEC 5428 0024                  		addq.b	#2,$24(a0)
0000ADF0                            
0000ADF0                            Obj0E_Display:
0000ADF0 6000 0000                  		bra.w	DisplaySprite
0000ADF4                            ; ===========================================================================
0000ADF4 4E75                       		rts	
0000ADF6                            ; ===========================================================================
0000ADF6                            
0000ADF6                            Obj0E_Animate:				; XREF: Obj0E_Index
0000ADF6 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000ADFC 6100 0000                  		bsr.w	AnimateSprite
0000AE00 6000 0000                  		bra.w	DisplaySprite
0000AE04                            ; ===========================================================================
0000AE04 4E75                       		rts	
0000AE06                            ; ===========================================================================
0000AE06                            ; ---------------------------------------------------------------------------
0000AE06                            ; Object 0F - "PRESS START BUTTON" and "TM" from title screen
0000AE06                            ; ---------------------------------------------------------------------------
0000AE06                            
0000AE06                            Obj0F:					; XREF: Obj_Index
0000AE06 7000                       		moveq	#0,d0
0000AE08 1028 0024                  		move.b	$24(a0),d0
0000AE0C 323B 0000                  		move.w	Obj0F_Index(pc,d0.w),d1
0000AE10 4EBB 1000                  		jsr	Obj0F_Index(pc,d1.w)
0000AE14 6000 0000                  		bra.w	DisplaySprite
0000AE18                            ; ===========================================================================
0000AE18 0000                       Obj0F_Index:	dc.w Obj0F_Main-Obj0F_Index
0000AE1A 0000                       		dc.w Obj0F_PrsStart-Obj0F_Index
0000AE1C 0000                       		dc.w locret_A6F8-Obj0F_Index
0000AE1E                            ; ===========================================================================
0000AE1E                            
0000AE1E                            Obj0F_Main:				; XREF: Obj0F_Index
0000AE1E 5428 0024                  		addq.b	#2,$24(a0)
0000AE22 317C 00D0 0008             		move.w	#$D0,8(a0)
0000AE28 317C 0130 000A             		move.w	#$130,$A(a0)
0000AE2E 217C 0000 0000 0004        		move.l	#Map_obj0F,4(a0)
0000AE36 317C 0200 0002             		move.w	#$200,2(a0)
0000AE3C 0C28 0002 001A             		cmpi.b	#2,$1A(a0)	; is object "PRESS START"?
0000AE42 6500                       		bcs.s	Obj0F_PrsStart	; if yes, branch
0000AE44 5428 0024                  		addq.b	#2,$24(a0)
0000AE48 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is the object	"TM"?
0000AE4E 6600                       		bne.s	locret_A6F8	; if not, branch
0000AE50 317C 2510 0002             		move.w	#$2510,2(a0)	; "TM" specific	code
0000AE56 317C 0170 0008             		move.w	#$170,8(a0)
0000AE5C 317C 00F8 000A             		move.w	#$F8,$A(a0)
0000AE62                            
0000AE62                            locret_A6F8:				; XREF: Obj0F_Index
0000AE62 4E75                       		rts	
0000AE64                            ; ===========================================================================
0000AE64                            
0000AE64                            Obj0F_PrsStart:				; XREF: Obj0F_Index
0000AE64 43F9 0000 0000             		lea	(Ani_obj0F).l,a1
0000AE6A 6000 0000                  		bra.w	AnimateSprite
0000AE6E                            ; ===========================================================================
0000AE6E                            Ani_obj0E:
0000AE6E                            	include "_anim\obj0E.asm"
0000AE6E                            ; ---------------------------------------------------------------------------
0000AE6E                            ; Animation script - Sonic on the title screen
0000AE6E                            ; ---------------------------------------------------------------------------
0000AE6E 0000                       		dc.w byte_A706-Ani_obj0E
0000AE70 0700 0102 0304 0506 07FE+  byte_A706:	dc.b 7,	0, 1, 2, 3, 4, 5, 6, 7,	$FE, 2,	0
0000AE7C                            		even
0000AE7C                            		even
0000AE7C                            
0000AE7C                            Ani_obj0F:
0000AE7C                            	include "_anim\obj0F.asm"
0000AE7C                            ; ---------------------------------------------------------------------------
0000AE7C                            ; Animation script - "TM" and "PRESS START BUTTON" on the title screen
0000AE7C                            ; ---------------------------------------------------------------------------
0000AE7C 0000                       		dc.w byte_A714-Ani_obj0F
0000AE7E 1F00 01FF                  byte_A714:	dc.b $1F, 0, 1,	$FF
0000AE82                            		even
0000AE82                            		even
0000AE82                            
0000AE82                            ; ---------------------------------------------------------------------------
0000AE82                            ; Subroutine to	animate	a sprite using an animation script
0000AE82                            ; ---------------------------------------------------------------------------
0000AE82                            
0000AE82                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AE82                            
0000AE82                            
0000AE82                            AnimateSprite:
0000AE82 7000                       		moveq	#0,d0
0000AE84 1028 001C                  		move.b	$1C(a0),d0	; move animation number	to d0
0000AE88 B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
0000AE8C 6700                       		beq.s	Anim_Run	; if not, branch
0000AE8E 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
0000AE92 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000AE98 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
0000AE9E                            
0000AE9E                            Anim_Run:
0000AE9E 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000AEA2 6A00                       		bpl.s	Anim_Wait	; if time remains, branch
0000AEA4 D040                       		add.w	d0,d0
0000AEA6 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0000AEAA 1151 001E                  		move.b	(a1),$1E(a0)	; load frame duration
0000AEAE 7200                       		moveq	#0,d1
0000AEB0 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
0000AEB4 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0000AEB8 6B00                       		bmi.s	Anim_End_FF	; if animation is complete, branch
0000AEBA                            
0000AEBA                            Anim_Next:
0000AEBA 1200                       		move.b	d0,d1
0000AEBC 0200 001F                  		andi.b	#$1F,d0
0000AEC0 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
0000AEC4 1028 0022                  		move.b	$22(a0),d0
0000AEC8 E719                       		rol.b	#3,d1
0000AECA B101                       		eor.b	d0,d1
0000AECC 0201 0003                  		andi.b	#3,d1
0000AED0 0228 00FC 0001             		andi.b	#$FC,1(a0)
0000AED6 8328 0001                  		or.b	d1,1(a0)
0000AEDA 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
0000AEDE                            
0000AEDE                            Anim_Wait:
0000AEDE 4E75                       		rts	
0000AEE0                            ; ===========================================================================
0000AEE0                            
0000AEE0                            Anim_End_FF:
0000AEE0 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0000AEE2 6600                       		bne.s	Anim_End_FE	; if not, branch
0000AEE4 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
0000AEEA 1029 0001                  		move.b	1(a1),d0	; read sprite number
0000AEEE 60CA                       		bra.s	Anim_Next
0000AEF0                            ; ===========================================================================
0000AEF0                            
0000AEF0                            Anim_End_FE:
0000AEF0 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0000AEF2 6600                       		bne.s	Anim_End_FD	; if not, branch
0000AEF4 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0000AEF8 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
0000AEFC 9200                       		sub.b	d0,d1
0000AEFE 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0000AF02 60B6                       		bra.s	Anim_Next
0000AF04                            ; ===========================================================================
0000AF04                            
0000AF04                            Anim_End_FD:
0000AF04 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0000AF06 6600                       		bne.s	Anim_End_FC	; if not, branch
0000AF08 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
0000AF0E                            
0000AF0E                            Anim_End_FC:
0000AF0E 5200                       		addq.b	#1,d0		; is the end flag = $FC	?
0000AF10 6600                       		bne.s	Anim_End_FB	; if not, branch
0000AF12 5428 0024                  		addq.b	#2,$24(a0)	; jump to next routine
0000AF16                            
0000AF16                            Anim_End_FB:
0000AF16 5200                       		addq.b	#1,d0		; is the end flag = $FB	?
0000AF18 6600                       		bne.s	Anim_End_FA	; if not, branch
0000AF1A 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000AF20 4228 0025                  		clr.b	$25(a0)		; reset	2nd routine counter
0000AF24                            
0000AF24                            Anim_End_FA:
0000AF24 5200                       		addq.b	#1,d0		; is the end flag = $FA	?
0000AF26 6600                       		bne.s	Anim_End	; if not, branch
0000AF28 5428 0025                  		addq.b	#2,$25(a0)	; jump to next routine
0000AF2C                            
0000AF2C                            Anim_End:
0000AF2C 4E75                       		rts	
0000AF2E                            ; End of function AnimateSprite
0000AF2E                            
0000AF2E                            ; ===========================================================================
0000AF2E                            ; ---------------------------------------------------------------------------
0000AF2E                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000AF2E                            ; ---------------------------------------------------------------------------
0000AF2E                            Map_obj0F:
0000AF2E                            	include "_maps\obj0F.asm"
0000AF2E                            ; ---------------------------------------------------------------------------
0000AF2E                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000AF2E                            ; ---------------------------------------------------------------------------
0000AF2E 0000                       		dc.w byte_A7CD-Map_obj0F
0000AF30 0000                       		dc.w byte_A7CC-Map_obj0F
0000AF32 0000                       		dc.w byte_A7EB-Map_obj0F
0000AF34 0000                       		dc.w byte_A882-Map_obj0F
0000AF36 06                         byte_A7CC:	dc.b 6			; "PRESS START BUTTON"
0000AF37 000C 00F0 00               byte_A7CD:	dc.b 0,	$C, 0, $F0, 0
0000AF3C 0000 00F3 20               		dc.b 0,	0, 0, $F3, $20
0000AF41 0000 00F3 30               		dc.b 0,	0, 0, $F3, $30
0000AF46 000C 00F4 38               		dc.b 0,	$C, 0, $F4, $38
0000AF4B 0008 00F8 60               		dc.b 0,	8, 0, $F8, $60
0000AF50 0008 00FB 78               		dc.b 0,	8, 0, $FB, $78
0000AF55 1E                         byte_A7EB:	dc.b $1E		; sprite list filler
0000AF56 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AF5B B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AF60 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AF65 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AF6A B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AF6F B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AF74 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AF79 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AF7E B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AF83 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AF88 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AF8D D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AF92 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AF97 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AF9C D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AFA1 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AFA6 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AFAB D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AFB0 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AFB5 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AFBA F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AFBF F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AFC4 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AFC9 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AFCE F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AFD3 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AFD8 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AFDD F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AFE2 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AFE7 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AFEC 01                         byte_A882:	dc.b 1			; "TM"
0000AFED FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0000AFF2                            		even
0000AFF2                            		even
0000AFF2                            
0000AFF2                            ; ---------------------------------------------------------------------------
0000AFF2                            ; Sprite mappings - Sonic on the title screen
0000AFF2                            ; ---------------------------------------------------------------------------
0000AFF2                            Map_obj0E:
0000AFF2                            	include "_maps\obj0E.asm"
0000AFF2                            ; ================================================================================
0000AFF2                            ; Sprite Mappings - generated by Flex 2 Sun Mar 23 2025 15:32:50 GMT-0500 (Central Daylight Time)
0000AFF2                            ; ================================================================================
0000AFF2                            
0000AFF2                            DATAGKI0HYDQBXP:
0000AFF2 0000 0000                  	dc.w DATAGKI0HYDQBXP_0-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_1-DATAGKI0HYDQBXP
0000AFF6 0000 0000                  	dc.w DATAGKI0HYDQBXP_2-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_3-DATAGKI0HYDQBXP
0000AFFA 0000 0000                  	dc.w DATAGKI0HYDQBXP_4-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_5-DATAGKI0HYDQBXP
0000AFFE 0000 0000                  	dc.w DATAGKI0HYDQBXP_6-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_7-DATAGKI0HYDQBXP
0000B002 08                         DATAGKI0HYDQBXP_0: dc.b $8
0000B003 0C0F 0126 08               	dc.b $C, $F, $1, $26, $8
0000B008 2C0F 0136 08               	dc.b $2C, $F, $1, $36, $8
0000B00D 4C0D 0146 08               	dc.b $4C, $D, $1, $46, $8
0000B012 0408 014E 20               	dc.b $4, $8, $1, $4E, $20
0000B017 0C0B 0151 28               	dc.b $C, $B, $1, $51, $28
0000B01C 2C0B 015D 28               	dc.b $2C, $B, $1, $5D, $28
0000B021 4C05 0169 28               	dc.b $4C, $5, $1, $69, $28
0000B026 1407 016D 40               	dc.b $14, $7, $1, $6D, $40
0000B02B 0B                         DATAGKI0HYDQBXP_1: dc.b $B
0000B02C 060F 0175 01               	dc.b $6, $F, $1, $75, $1
0000B031 060F 0185 21               	dc.b $6, $F, $1, $85, $21
0000B036 0607 0195 41               	dc.b $6, $7, $1, $95, $41
0000B03B 260F 019D 01               	dc.b $26, $F, $1, $9D, $1
0000B040 260F 01AD 21               	dc.b $26, $F, $1, $AD, $21
0000B045 2607 01BD 41               	dc.b $26, $7, $1, $BD, $41
0000B04A 460C 01C5 01               	dc.b $46, $C, $1, $C5, $1
0000B04F 460E 01C9 21               	dc.b $46, $E, $1, $C9, $21
0000B054 4606 01D5 41               	dc.b $46, $6, $1, $D5, $41
0000B059 4E08 01DB 09               	dc.b $4E, $8, $1, $DB, $9
0000B05E 5604 01DE 11               	dc.b $56, $4, $1, $DE, $11
0000B063 0B                         DATAGKI0HYDQBXP_2: dc.b $B
0000B064 F20F 0175 01               	dc.b $F2, $F, $1, $75, $1
0000B069 F20F 0185 21               	dc.b $F2, $F, $1, $85, $21
0000B06E F207 0195 41               	dc.b $F2, $7, $1, $95, $41
0000B073 120F 019D 01               	dc.b $12, $F, $1, $9D, $1
0000B078 120F 01AD 21               	dc.b $12, $F, $1, $AD, $21
0000B07D 1207 01BD 41               	dc.b $12, $7, $1, $BD, $41
0000B082 320C 01C5 01               	dc.b $32, $C, $1, $C5, $1
0000B087 320E 01C9 21               	dc.b $32, $E, $1, $C9, $21
0000B08C 3206 01D5 41               	dc.b $32, $6, $1, $D5, $41
0000B091 3A08 01DB 09               	dc.b $3A, $8, $1, $DB, $9
0000B096 4204 01DE 11               	dc.b $42, $4, $1, $DE, $11
0000B09B 0A                         DATAGKI0HYDQBXP_3: dc.b $A
0000B09C FC0F 0000 08               	dc.b $FC, $F, $0, $0, $8
0000B0A1 F408 0010 28               	dc.b $F4, $8, $0, $10, $28
0000B0A6 FC0F 0013 28               	dc.b $FC, $F, $0, $13, $28
0000B0AB 0400 0023 48               	dc.b $4, $0, $0, $23, $48
0000B0B0 0C06 0024 48               	dc.b $C, $6, $0, $24, $48
0000B0B5 2400 002A 48               	dc.b $24, $0, $0, $2A, $48
0000B0BA 1C0D 002B 08               	dc.b $1C, $D, $0, $2B, $8
0000B0BF 1C0E 0033 28               	dc.b $1C, $E, $0, $33, $28
0000B0C4 2C0B 003F 10               	dc.b $2C, $B, $0, $3F, $10
0000B0C9 3408 004B 28               	dc.b $34, $8, $0, $4B, $28
0000B0CE 10                         DATAGKI0HYDQBXP_4: dc.b $10
0000B0CF F80F 01E0 09               	dc.b $F8, $F, $1, $E0, $9
0000B0D4 F807 01F0 29               	dc.b $F8, $7, $1, $F0, $29
0000B0D9 0003 01F8 01               	dc.b $0, $3, $1, $F8, $1
0000B0DE 0003 01FC 39               	dc.b $0, $3, $1, $FC, $39
0000B0E3 1001 0200 F9               	dc.b $10, $1, $2, $0, $F9
0000B0E8 180D 0202 09               	dc.b $18, $D, $2, $2, $9
0000B0ED 1807 020A 29               	dc.b $18, $7, $2, $A, $29
0000B0F2 1803 0212 41               	dc.b $18, $3, $2, $12, $41
0000B0F7 2001 0216 01               	dc.b $20, $1, $2, $16, $1
0000B0FC 2003 0218 39               	dc.b $20, $3, $2, $18, $39
0000B101 2808 021C 11               	dc.b $28, $8, $2, $1C, $11
0000B106 3007 021F 19               	dc.b $30, $7, $2, $1F, $19
0000B10B 3801 0227 11               	dc.b $38, $1, $2, $27, $11
0000B110 3806 0229 29               	dc.b $38, $6, $2, $29, $29
0000B115 3801 022F 41               	dc.b $38, $1, $2, $2F, $41
0000B11A 4001 0231 39               	dc.b $40, $1, $2, $31, $39
0000B11F 0B                         DATAGKI0HYDQBXP_5: dc.b $B
0000B120 2C0F 006E E2               	dc.b $2C, $F, $0, $6E, $E2
0000B125 EC0F 007E 02               	dc.b $EC, $F, $0, $7E, $2
0000B12A 0C0F 008E 02               	dc.b $C, $F, $0, $8E, $2
0000B12F 2C0F 009E 02               	dc.b $2C, $F, $0, $9E, $2
0000B134 EC0F 00AE 22               	dc.b $EC, $F, $0, $AE, $22
0000B139 0C0F 00BE 22               	dc.b $C, $F, $0, $BE, $22
0000B13E 2C0F 00CE 22               	dc.b $2C, $F, $0, $CE, $22
0000B143 EC0F 00DE 42               	dc.b $EC, $F, $0, $DE, $42
0000B148 0C0F 00EE 42               	dc.b $C, $F, $0, $EE, $42
0000B14D 2C0F 00FE 42               	dc.b $2C, $F, $0, $FE, $42
0000B152 0C07 0116 62               	dc.b $C, $7, $1, $16, $62
0000B157 0F                         DATAGKI0HYDQBXP_6: dc.b $F
0000B158 EC0F 004E E2               	dc.b $EC, $F, $0, $4E, $E2
0000B15D 0C0F 005E E2               	dc.b $C, $F, $0, $5E, $E2
0000B162 2C0F 006E E2               	dc.b $2C, $F, $0, $6E, $E2
0000B167 EC0F 007E 02               	dc.b $EC, $F, $0, $7E, $2
0000B16C 0C0F 008E 02               	dc.b $C, $F, $0, $8E, $2
0000B171 2C0F 009E 02               	dc.b $2C, $F, $0, $9E, $2
0000B176 EC0F 00AE 22               	dc.b $EC, $F, $0, $AE, $22
0000B17B 0C0F 00BE 22               	dc.b $C, $F, $0, $BE, $22
0000B180 2C0F 00CE 22               	dc.b $2C, $F, $0, $CE, $22
0000B185 EC0F 00DE 42               	dc.b $EC, $F, $0, $DE, $42
0000B18A 0C0F 00EE 42               	dc.b $C, $F, $0, $EE, $42
0000B18F 2C0F 00FE 42               	dc.b $2C, $F, $0, $FE, $42
0000B194 EC07 010E 62               	dc.b $EC, $7, $1, $E, $62
0000B199 0C07 0116 62               	dc.b $C, $7, $1, $16, $62
0000B19E 2C07 011E 62               	dc.b $2C, $7, $1, $1E, $62
0000B1A3 0F                         DATAGKI0HYDQBXP_7: dc.b $F
0000B1A4 EC0F 0233 E2               	dc.b $EC, $F, $2, $33, $E2
0000B1A9 0C0F 0243 E2               	dc.b $C, $F, $2, $43, $E2
0000B1AE 2C0F 0253 E2               	dc.b $2C, $F, $2, $53, $E2
0000B1B3 EC0F 0263 02               	dc.b $EC, $F, $2, $63, $2
0000B1B8 0C0F 0273 02               	dc.b $C, $F, $2, $73, $2
0000B1BD 2C0F 0283 02               	dc.b $2C, $F, $2, $83, $2
0000B1C2 EC0F 0293 22               	dc.b $EC, $F, $2, $93, $22
0000B1C7 0C0F 02A3 22               	dc.b $C, $F, $2, $A3, $22
0000B1CC 2C0F 02B3 22               	dc.b $2C, $F, $2, $B3, $22
0000B1D1 EC0F 02C3 42               	dc.b $EC, $F, $2, $C3, $42
0000B1D6 0C0F 02D3 42               	dc.b $C, $F, $2, $D3, $42
0000B1DB 2C0F 02E3 42               	dc.b $2C, $F, $2, $E3, $42
0000B1E0 EC07 02F3 62               	dc.b $EC, $7, $2, $F3, $62
0000B1E5 0C07 02FB 62               	dc.b $C, $7, $2, $FB, $62
0000B1EA 2C07 0303 62               	dc.b $2C, $7, $3, $3, $62
0000B1F0 00                         	even
0000B1F0 00                         	even
0000B1F0                            
0000B1F0                            ; ===========================================================================
0000B1F0                            ; ---------------------------------------------------------------------------
0000B1F0                            ; Object 2B - Chopper enemy (GHZ)
0000B1F0                            ; ---------------------------------------------------------------------------
0000B1F0                            
0000B1F0                            Obj2B:					; XREF: Obj_Index
0000B1F0 7000                       		moveq	#0,d0
0000B1F2 1028 0024                  		move.b	$24(a0),d0
0000B1F6 323B 0000                  		move.w	Obj2B_Index(pc,d0.w),d1
0000B1FA 4EBB 1000                  		jsr	Obj2B_Index(pc,d1.w)
0000B1FE 6000 0000                  		bra.w	MarkObjGone
0000B202                            ; ===========================================================================
0000B202 0000                       Obj2B_Index:	dc.w Obj2B_Main-Obj2B_Index
0000B204 0000                       		dc.w Obj2B_ChgSpeed-Obj2B_Index
0000B206                            ; ===========================================================================
0000B206                            
0000B206                            Obj2B_Main:				; XREF: Obj2B_Index
0000B206 5428 0024                  		addq.b	#2,$24(a0)
0000B20A 217C 0000 0000 0004        		move.l	#Map_obj2B,4(a0)
0000B212 317C 047B 0002             		move.w	#$47B,2(a0)
0000B218 117C 0004 0001             		move.b	#4,1(a0)
0000B21E 117C 0004 0018             		move.b	#4,$18(a0)
0000B224 117C 0009 0020             		move.b	#9,$20(a0)
0000B22A 117C 0010 0019             		move.b	#$10,$19(a0)
0000B230 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000B236 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000B23C                            
0000B23C                            Obj2B_ChgSpeed:				; XREF: Obj2B_Index
0000B23C 43F9 0000 0000             		lea	(Ani_obj2B).l,a1
0000B242 6100 FC3E                  		bsr.w	AnimateSprite
0000B246 6100 0000                  		bsr.w	SpeedToPos
0000B24A 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce speed
0000B250 3028 0030                  		move.w	$30(a0),d0
0000B254 B068 000C                  		cmp.w	$C(a0),d0
0000B258 6400                       		bcc.s	Obj2B_ChgAni
0000B25A 3140 000C                  		move.w	d0,$C(a0)
0000B25E 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000B264                            
0000B264                            Obj2B_ChgAni:
0000B264 117C 0001 001C             		move.b	#1,$1C(a0)	; use fast animation
0000B26A 0440 00C0                  		subi.w	#$C0,d0
0000B26E B068 000C                  		cmp.w	$C(a0),d0
0000B272 6400                       		bcc.s	locret_ABB6
0000B274 117C 0000 001C             		move.b	#0,$1C(a0)	; use slow animation
0000B27A 4A68 0012                  		tst.w	$12(a0)		; is Chopper at	its highest point?
0000B27E 6B00                       		bmi.s	locret_ABB6	; if not, branch
0000B280 117C 0002 001C             		move.b	#2,$1C(a0)	; use stationary animation
0000B286                            
0000B286                            locret_ABB6:
0000B286 4E75                       		rts	
0000B288                            ; ===========================================================================
0000B288                            Ani_obj2B:
0000B288                            	include "_anim\obj2B.asm"
0000B288                            ; ---------------------------------------------------------------------------
0000B288                            ; Animation script - Chopper enemy
0000B288                            ; ---------------------------------------------------------------------------
0000B288 0000                       		dc.w byte_ABBE-Ani_obj2B
0000B28A 0000                       		dc.w byte_ABC2-Ani_obj2B
0000B28C 0000                       		dc.w byte_ABC6-Ani_obj2B
0000B28E 0700 01FF                  byte_ABBE:	dc.b 7,	0, 1, $FF
0000B292 0300 01FF                  byte_ABC2:	dc.b 3,	0, 1, $FF
0000B296 0700 FF                    byte_ABC6:	dc.b 7,	0, $FF
0000B29A 00                         		even
0000B29A 00                         		even
0000B29A                            
0000B29A                            ; ---------------------------------------------------------------------------
0000B29A                            ; Sprite mappings - Chopper enemy (GHZ)
0000B29A                            ; ---------------------------------------------------------------------------
0000B29A                            Map_obj2B:
0000B29A                            	include "_maps\obj2B.asm"
0000B29A                            Map_1ff1:
0000B29A 0000                       Map_1ff1_0: 	dc.w Map_1ff1_4-Map_1ff1
0000B29C 0000                       Map_1ff1_2: 	dc.w Map_1ff1_F-Map_1ff1
0000B29E 02                         Map_1ff1_4: 	dc.b $2
0000B29F E80B 0000 F4               	dc.b $E8, $B, $0, $0, $F4
0000B2A4 0809 000C F4               	dc.b $8, $9, $0, $C, $F4
0000B2A9 02                         Map_1ff1_F: 	dc.b $2
0000B2AA E80B 0012 F4               	dc.b $E8, $B, $0, $12, $F4
0000B2AF 0809 000C F4               	dc.b $8, $9, $0, $C, $F4
0000B2B4                            	even
0000B2B4                            	even
0000B2B4                            
0000B2B4                            ; ===========================================================================
0000B2B4                            ; ---------------------------------------------------------------------------
0000B2B4                            ; Object 2C - Jaws enemy (LZ)
0000B2B4                            ; ---------------------------------------------------------------------------
0000B2B4                            
0000B2B4                            Obj2C:					; XREF: Obj_Index
0000B2B4 7000                       		moveq	#0,d0
0000B2B6 1028 0024                  		move.b	$24(a0),d0
0000B2BA 323B 0000                  		move.w	Obj2C_Index(pc,d0.w),d1
0000B2BE 4EFB 1000                  		jmp	Obj2C_Index(pc,d1.w)
0000B2C2                            ; ===========================================================================
0000B2C2 0000                       Obj2C_Index:	dc.w Obj2C_Main-Obj2C_Index
0000B2C4 0000                       		dc.w Obj2C_Turn-Obj2C_Index
0000B2C6                            ; ===========================================================================
0000B2C6                            
0000B2C6                            Obj2C_Main:				; XREF: Obj2C_Index
0000B2C6 5428 0024                  		addq.b	#2,$24(a0)
0000B2CA 217C 0000 0000 0004        		move.l	#Map_obj2C,4(a0)
0000B2D2 317C 2486 0002             		move.w	#$2486,2(a0)
0000B2D8 0028 0004 0001             		ori.b	#4,1(a0)
0000B2DE 117C 000A 0020             		move.b	#$A,$20(a0)
0000B2E4 117C 0004 0018             		move.b	#4,$18(a0)
0000B2EA 117C 0010 0019             		move.b	#$10,$19(a0)
0000B2F0 7000                       		moveq	#0,d0
0000B2F2 1028 0028                  		move.b	$28(a0),d0	; load object subtype number
0000B2F6 ED48                       		lsl.w	#6,d0		; multiply d0 by 64
0000B2F8 5340                       		subq.w	#1,d0
0000B2FA 3140 0030                  		move.w	d0,$30(a0)	; set turn delay time
0000B2FE 3140 0032                  		move.w	d0,$32(a0)
0000B302 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move Jaws to the left
0000B308 0828 0000 0022             		btst	#0,$22(a0)	; is Jaws facing left?
0000B30E 6700                       		beq.s	Obj2C_Turn	; if yes, branch
0000B310 4468 0010                  		neg.w	$10(a0)		; move Jaws to the right
0000B314                            
0000B314                            Obj2C_Turn:				; XREF: Obj2C_Index
0000B314 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from turn delay time
0000B318 6A00                       		bpl.s	Obj2C_Animate	; if time remains, branch
0000B31A 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	turn delay time
0000B320 4468 0010                  		neg.w	$10(a0)		; change speed direction
0000B324 0868 0000 0022             		bchg	#0,$22(a0)	; change Jaws facing direction
0000B32A 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000B330                            
0000B330                            Obj2C_Animate:
0000B330 43F9 0000 0000             		lea	(Ani_obj2C).l,a1
0000B336 6100 FB4A                  		bsr.w	AnimateSprite
0000B33A 6100 0000                  		bsr.w	SpeedToPos
0000B33E 6000 0000                  		bra.w	MarkObjGone
0000B342                            ; ===========================================================================
0000B342                            Ani_obj2C:
0000B342                            	include "_anim\obj2C.asm"
0000B342                            ; ---------------------------------------------------------------------------
0000B342                            ; Animation script - Jaws enemy
0000B342                            ; ---------------------------------------------------------------------------
0000B342 0000                       		dc.w byte_AC6A-Ani_obj2C
0000B344 0700 0102 03FF             byte_AC6A:	dc.b 7,	0, 1, 2, 3, $FF
0000B34A                            		even
0000B34A                            		even
0000B34A                            
0000B34A                            ; ---------------------------------------------------------------------------
0000B34A                            ; Sprite mappings - Jaws enemy (LZ)
0000B34A                            ; ---------------------------------------------------------------------------
0000B34A                            Map_obj2C:
0000B34A                            	include "_maps\obj2C.asm"
0000B34A                            ; ---------------------------------------------------------------------------
0000B34A                            ; Sprite mappings - Jaws enemy (LZ)
0000B34A                            ; ---------------------------------------------------------------------------
0000B34A 0000                       		dc.w byte_AC78-Map_obj2C
0000B34C 0000                       		dc.w byte_AC83-Map_obj2C
0000B34E 0000                       		dc.w byte_AC8E-Map_obj2C
0000B350 0000                       		dc.w byte_AC99-Map_obj2C
0000B352 02                         byte_AC78:	dc.b 2
0000B353 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000B358 F505 0018 10               		dc.b $F5, 5, 0,	$18, $10
0000B35D 02                         byte_AC83:	dc.b 2
0000B35E F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000B363 F505 001C 10               		dc.b $F5, 5, 0,	$1C, $10
0000B368 02                         byte_AC8E:	dc.b 2
0000B369 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000B36E F505 1018 10               		dc.b $F5, 5, $10, $18, $10
0000B373 02                         byte_AC99:	dc.b 2
0000B374 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000B379 F505 101C 10               		dc.b $F5, 5, $10, $1C, $10
0000B37E                            		even
0000B37E                            		even
0000B37E                            
0000B37E                            ; ===========================================================================
0000B37E                            ; ---------------------------------------------------------------------------
0000B37E                            ; Object 2D - Burrobot enemy (LZ)
0000B37E                            ; ---------------------------------------------------------------------------
0000B37E                            
0000B37E                            Obj2D:					; XREF: Obj_Index
0000B37E 7000                       		moveq	#0,d0
0000B380 1028 0024                  		move.b	$24(a0),d0
0000B384 323B 0000                  		move.w	Obj2D_Index(pc,d0.w),d1
0000B388 4EFB 1000                  		jmp	Obj2D_Index(pc,d1.w)
0000B38C                            ; ===========================================================================
0000B38C 0000                       Obj2D_Index:	dc.w Obj2D_Main-Obj2D_Index
0000B38E 0000                       		dc.w Obj2D_Action-Obj2D_Index
0000B390                            ; ===========================================================================
0000B390                            
0000B390                            Obj2D_Main:				; XREF: Obj2D_Index
0000B390 5428 0024                  		addq.b	#2,$24(a0)
0000B394 117C 0013 0016             		move.b	#$13,$16(a0)
0000B39A 117C 0008 0017             		move.b	#8,$17(a0)
0000B3A0 217C 0000 0000 0004        		move.l	#Map_obj2D,4(a0)
0000B3A8 317C 04A6 0002             		move.w	#$4A6,2(a0)
0000B3AE 0028 0004 0001             		ori.b	#4,1(a0)
0000B3B4 117C 0004 0018             		move.b	#4,$18(a0)
0000B3BA 117C 0005 0020             		move.b	#5,$20(a0)
0000B3C0 117C 000C 0019             		move.b	#$C,$19(a0)
0000B3C6 5C28 0025                  		addq.b	#6,$25(a0)	; run "Obj2D_ChkSonic" routine
0000B3CA 117C 0002 001C             		move.b	#2,$1C(a0)
0000B3D0                            
0000B3D0                            Obj2D_Action:				; XREF: Obj2D_Index
0000B3D0 7000                       		moveq	#0,d0
0000B3D2 1028 0025                  		move.b	$25(a0),d0
0000B3D6 323B 0000                  		move.w	Obj2D_Index2(pc,d0.w),d1
0000B3DA 4EBB 1000                  		jsr	Obj2D_Index2(pc,d1.w)
0000B3DE 43F9 0000 0000             		lea	(Ani_obj2D).l,a1
0000B3E4 6100 FA9C                  		bsr.w	AnimateSprite
0000B3E8 6000 0000                  		bra.w	MarkObjGone
0000B3EC                            ; ===========================================================================
0000B3EC 0000                       Obj2D_Index2:	dc.w Obj2D_ChgDir-Obj2D_Index2
0000B3EE 0000                       		dc.w Obj2D_Move-Obj2D_Index2
0000B3F0 0000                       		dc.w Obj2D_Jump-Obj2D_Index2
0000B3F2 0000                       		dc.w Obj2D_ChkSonic-Obj2D_Index2
0000B3F4                            ; ===========================================================================
0000B3F4                            
0000B3F4                            Obj2D_ChgDir:				; XREF: Obj2D_Index2
0000B3F4 5368 0030                  		subq.w	#1,$30(a0)
0000B3F8 6A00                       		bpl.s	locret_AD42
0000B3FA 5428 0025                  		addq.b	#2,$25(a0)
0000B3FE 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000B404 317C 0080 0010             		move.w	#$80,$10(a0)
0000B40A 117C 0001 001C             		move.b	#1,$1C(a0)
0000B410 0868 0000 0022             		bchg	#0,$22(a0)	; change direction the Burrobot	is facing
0000B416 6700                       		beq.s	locret_AD42
0000B418 4468 0010                  		neg.w	$10(a0)		; change direction the Burrobot	is moving
0000B41C                            
0000B41C                            locret_AD42:
0000B41C 4E75                       		rts	
0000B41E                            ; ===========================================================================
0000B41E                            
0000B41E                            Obj2D_Move:				; XREF: Obj2D_Index2
0000B41E 5368 0030                  		subq.w	#1,$30(a0)
0000B422 6B00                       		bmi.s	loc_AD84
0000B424 6100 0000                  		bsr.w	SpeedToPos
0000B428 0868 0000 0032             		bchg	#0,$32(a0)
0000B42E 6600                       		bne.s	loc_AD78
0000B430 3628 0008                  		move.w	8(a0),d3
0000B434 0643 000C                  		addi.w	#$C,d3
0000B438 0828 0000 0022             		btst	#0,$22(a0)
0000B43E 6600                       		bne.s	loc_AD6A
0000B440 0443 0018                  		subi.w	#$18,d3
0000B444                            
0000B444                            loc_AD6A:
0000B444 4EB9 0000 0000             		jsr	ObjHitFloor2
0000B44A 0C41 000C                  		cmpi.w	#$C,d1
0000B44E 6C00                       		bge.s	loc_AD84
0000B450 4E75                       		rts	
0000B452                            ; ===========================================================================
0000B452                            
0000B452                            loc_AD78:				; XREF: Obj2D_Move
0000B452 4EB9 0000 0000             		jsr	ObjHitFloor
0000B458 D368 000C                  		add.w	d1,$C(a0)
0000B45C 4E75                       		rts	
0000B45E                            ; ===========================================================================
0000B45E                            
0000B45E                            loc_AD84:				; XREF: Obj2D_Move
0000B45E 0838 0002 FE0F             		btst	#2,($FFFFFE0F).w
0000B464 6700                       		beq.s	loc_ADA4
0000B466 5528 0025                  		subq.b	#2,$25(a0)
0000B46A 317C 003B 0030             		move.w	#$3B,$30(a0)
0000B470 317C 0000 0010             		move.w	#0,$10(a0)
0000B476 117C 0000 001C             		move.b	#0,$1C(a0)
0000B47C 4E75                       		rts	
0000B47E                            ; ===========================================================================
0000B47E                            
0000B47E                            loc_ADA4:
0000B47E 5428 0025                  		addq.b	#2,$25(a0)
0000B482 317C FC00 0012             		move.w	#-$400,$12(a0)
0000B488 117C 0002 001C             		move.b	#2,$1C(a0)
0000B48E 4E75                       		rts	
0000B490                            ; ===========================================================================
0000B490                            
0000B490                            Obj2D_Jump:				; XREF: Obj2D_Index2
0000B490 6100 0000                  		bsr.w	SpeedToPos
0000B494 0668 0018 0012             		addi.w	#$18,$12(a0)
0000B49A 6B00                       		bmi.s	locret_ADF0
0000B49C 117C 0003 001C             		move.b	#3,$1C(a0)
0000B4A2 4EB9 0000 0000             		jsr	ObjHitFloor
0000B4A8 4A41                       		tst.w	d1
0000B4AA 6A00                       		bpl.s	locret_ADF0
0000B4AC D368 000C                  		add.w	d1,$C(a0)
0000B4B0 317C 0000 0012             		move.w	#0,$12(a0)
0000B4B6 117C 0001 001C             		move.b	#1,$1C(a0)
0000B4BC 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000B4C2 5528 0025                  		subq.b	#2,$25(a0)
0000B4C6 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000B4CA                            
0000B4CA                            locret_ADF0:
0000B4CA 4E75                       		rts	
0000B4CC                            ; ===========================================================================
0000B4CC                            
0000B4CC                            Obj2D_ChkSonic:				; XREF: Obj2D_Index2
0000B4CC 343C 0060                  		move.w	#$60,d2
0000B4D0 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000B4D4 6400                       		bcc.s	locret_AE20
0000B4D6 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000B4DA 9068 000C                  		sub.w	$C(a0),d0
0000B4DE 6400                       		bcc.s	locret_AE20
0000B4E0 0C40 FF80                  		cmpi.w	#-$80,d0
0000B4E4 6500                       		bcs.s	locret_AE20
0000B4E6 4A78 FE08                  		tst.w	($FFFFFE08).w
0000B4EA 6600                       		bne.s	locret_AE20
0000B4EC 5528 0025                  		subq.b	#2,$25(a0)
0000B4F0 3141 0010                  		move.w	d1,$10(a0)
0000B4F4 317C FC00 0012             		move.w	#-$400,$12(a0)
0000B4FA                            
0000B4FA                            locret_AE20:
0000B4FA 4E75                       		rts	
0000B4FC                            
0000B4FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B4FC                            
0000B4FC                            
0000B4FC                            Obj2D_ChkSonic2:			; XREF: Obj2D_ChkSonic
0000B4FC 323C 0080                  		move.w	#$80,d1
0000B500 08E8 0000 0022             		bset	#0,$22(a0)
0000B506 3038 D008                  		move.w	($FFFFD008).w,d0
0000B50A 9068 0008                  		sub.w	8(a0),d0
0000B50E 6400                       		bcc.s	loc_AE40
0000B510 4440                       		neg.w	d0
0000B512 4441                       		neg.w	d1
0000B514 08A8 0000 0022             		bclr	#0,$22(a0)
0000B51A                            
0000B51A                            loc_AE40:
0000B51A B042                       		cmp.w	d2,d0
0000B51C 4E75                       		rts	
0000B51E                            ; End of function Obj2D_ChkSonic2
0000B51E                            
0000B51E                            ; ===========================================================================
0000B51E                            Ani_obj2D:
0000B51E                            	include "_anim\obj2D.asm"
0000B51E                            ; ---------------------------------------------------------------------------
0000B51E                            ; Animation script - Burrobot enemy but craig
0000B51E                            ; ---------------------------------------------------------------------------
0000B51E 0000                       		dc.w byte_AE4C-Ani_obj2D
0000B520 0000                       		dc.w byte_AE50-Ani_obj2D
0000B522 0000                       		dc.w byte_AE54-Ani_obj2D
0000B524 0000                       		dc.w byte_AE58-Ani_obj2D
0000B526 0300 FF                    byte_AE4C:	dc.b 3,	0, $FF ; wait
0000B529 0300 01FF                  byte_AE50:	dc.b 3,	0, 1, $FF ; waddle
0000B52D 0100 0102 0304 0506 0708+  byte_AE54:	dc.b 1,	0, 1, 2, 3, 4, 5, 6, 7, 8, 3, 9, $A, $FF ; speen
0000B53B 0304 FF                    byte_AE58:	dc.b 3,	4, $FF
0000B53E                            		even
0000B53E                            		even
0000B53E                            
0000B53E                            ; ---------------------------------------------------------------------------
0000B53E                            ; Sprite mappings - Burrobot enemy (LZ)
0000B53E                            ; ---------------------------------------------------------------------------
0000B53E                            Map_obj2D:
0000B53E                            	include "_maps\obj2D.asm"
0000B53E                            Map_e3a3:
0000B53E 0000                       Map_e3a3_0: 	dc.w Map_e3a3_16-Map_e3a3
0000B540 0000                       Map_e3a3_2: 	dc.w Map_e3a3_21-Map_e3a3
0000B542 0000                       Map_e3a3_4: 	dc.w Map_e3a3_2C-Map_e3a3
0000B544 0000                       Map_e3a3_6: 	dc.w Map_e3a3_37-Map_e3a3
0000B546 0000                       Map_e3a3_8: 	dc.w Map_e3a3_42-Map_e3a3
0000B548 0000                       Map_e3a3_A: 	dc.w Map_e3a3_4D-Map_e3a3
0000B54A 0000                       Map_e3a3_C: 	dc.w Map_e3a3_58-Map_e3a3
0000B54C 0000                       Map_e3a3_E: 	dc.w Map_e3a3_63-Map_e3a3
0000B54E 0000                       Map_e3a3_10: 	dc.w Map_e3a3_6E-Map_e3a3
0000B550 0000                       Map_e3a3_12: 	dc.w Map_e3a3_79-Map_e3a3
0000B552 0000                       Map_e3a3_14: 	dc.w Map_e3a3_84-Map_e3a3
0000B554 02                         Map_e3a3_16: 	dc.b $2
0000B555 EC0B 0800 F4               	dc.b $EC, $B, $8, $0, $F4
0000B55A 0C08 080C F4               	dc.b $C, $8, $8, $C, $F4
0000B55F 02                         Map_e3a3_21: 	dc.b $2
0000B560 EC07 080F F8               	dc.b $EC, $7, $8, $F, $F8
0000B565 0C04 0817 F8               	dc.b $C, $4, $8, $17, $F8
0000B56A 02                         Map_e3a3_2C: 	dc.b $2
0000B56B EC07 0819 F8               	dc.b $EC, $7, $8, $19, $F8
0000B570 0C04 0821 F8               	dc.b $C, $4, $8, $21, $F8
0000B575 02                         Map_e3a3_37: 	dc.b $2
0000B576 EC02 0823 FC               	dc.b $EC, $2, $8, $23, $FC
0000B57B FC02 1823 FC               	dc.b $FC, $2, $18, $23, $FC
0000B580 02                         Map_e3a3_42: 	dc.b $2
0000B581 EC06 0826 F8               	dc.b $EC, $6, $8, $26, $F8
0000B586 FC06 1826 F8               	dc.b $FC, $6, $18, $26, $F8
0000B58B 02                         Map_e3a3_4D: 	dc.b $2
0000B58C EC06 082C F8               	dc.b $EC, $6, $8, $2C, $F8
0000B591 FC06 182C F8               	dc.b $FC, $6, $18, $2C, $F8
0000B596 02                         Map_e3a3_58: 	dc.b $2
0000B597 EC0A 0832 F4               	dc.b $EC, $A, $8, $32, $F4
0000B59C FC0A 1832 F4               	dc.b $FC, $A, $18, $32, $F4
0000B5A1 02                         Map_e3a3_63: 	dc.b $2
0000B5A2 EC06 002C F8               	dc.b $EC, $6, $0, $2C, $F8
0000B5A7 FC06 102C F8               	dc.b $FC, $6, $10, $2C, $F8
0000B5AC 02                         Map_e3a3_6E: 	dc.b $2
0000B5AD EC06 0026 F8               	dc.b $EC, $6, $0, $26, $F8
0000B5B2 FC06 1026 F8               	dc.b $FC, $6, $10, $26, $F8
0000B5B7 02                         Map_e3a3_79: 	dc.b $2
0000B5B8 EC07 0019 F8               	dc.b $EC, $7, $0, $19, $F8
0000B5BD 0C04 0021 F8               	dc.b $C, $4, $0, $21, $F8
0000B5C2 02                         Map_e3a3_84: 	dc.b $2
0000B5C3 EC07 000F F8               	dc.b $EC, $7, $0, $F, $F8
0000B5C8 0C04 0017 F8               	dc.b $C, $4, $0, $17, $F8
0000B5CE 00                         	even
0000B5CE 00                         	even
0000B5CE                            
0000B5CE                            ; ===========================================================================
0000B5CE                            ; ---------------------------------------------------------------------------
0000B5CE                            ; Object 2F - large moving platforms (MZ)
0000B5CE                            ; ---------------------------------------------------------------------------
0000B5CE                            
0000B5CE                            Obj2F:					; XREF: Obj_Index
0000B5CE 7000                       		moveq	#0,d0
0000B5D0 1028 0024                  		move.b	$24(a0),d0
0000B5D4 323B 0000                  		move.w	Obj2F_Index(pc,d0.w),d1
0000B5D8 4EFB 1000                  		jmp	Obj2F_Index(pc,d1.w)
0000B5DC                            ; ===========================================================================
0000B5DC 0000                       Obj2F_Index:	dc.w Obj2F_Main-Obj2F_Index
0000B5DE 0000                       		dc.w Obj2F_Action-Obj2F_Index
0000B5E0                            
0000B5E0 0000                       Obj2F_Data:	dc.w Obj2F_Data1-Obj2F_Data 	; collision angle data
0000B5E2 0040                       		dc.b 0,	$40			; frame	number,	platform width
0000B5E4 0000                       		dc.w Obj2F_Data3-Obj2F_Data
0000B5E6 0140                       		dc.b 1,	$40
0000B5E8 0000                       		dc.w Obj2F_Data2-Obj2F_Data
0000B5EA 0220                       		dc.b 2,	$20
0000B5EC                            ; ===========================================================================
0000B5EC                            
0000B5EC                            Obj2F_Main:				; XREF: Obj2F_Index
0000B5EC 5428 0024                  		addq.b	#2,$24(a0)
0000B5F0 217C 0000 0000 0004        		move.l	#Map_obj2F,4(a0)
0000B5F8 317C C000 0002             		move.w	#$C000,2(a0)
0000B5FE 117C 0004 0001             		move.b	#4,1(a0)
0000B604 117C 0005 0018             		move.b	#5,$18(a0)
0000B60A 3168 000C 002C             		move.w	$C(a0),$2C(a0)
0000B610 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000B616 7000                       		moveq	#0,d0
0000B618 1028 0028                  		move.b	$28(a0),d0
0000B61C E448                       		lsr.w	#2,d0
0000B61E 0240 001C                  		andi.w	#$1C,d0
0000B622 43FB 00BC                  		lea	Obj2F_Data(pc,d0.w),a1
0000B626 3019                       		move.w	(a1)+,d0
0000B628 45FB 00B6                  		lea	Obj2F_Data(pc,d0.w),a2
0000B62C 214A 0030                  		move.l	a2,$30(a0)
0000B630 1159 001A                  		move.b	(a1)+,$1A(a0)
0000B634 1151 0019                  		move.b	(a1),$19(a0)
0000B638 0228 000F 0028             		andi.b	#$F,$28(a0)
0000B63E 117C 0040 0016             		move.b	#$40,$16(a0)
0000B644 08E8 0004 0001             		bset	#4,1(a0)
0000B64A                            
0000B64A                            Obj2F_Action:				; XREF: Obj2F_Index
0000B64A 6100 0000                  		bsr.w	Obj2F_Types
0000B64E 4A28 0025                  		tst.b	$25(a0)
0000B652 6700                       		beq.s	Obj2F_Solid
0000B654 7200                       		moveq	#0,d1
0000B656 1228 0019                  		move.b	$19(a0),d1
0000B65A 0641 000B                  		addi.w	#$B,d1
0000B65E 6100 C560                  		bsr.w	ExitPlatform
0000B662 0829 0003 0022             		btst	#3,$22(a1)
0000B668 6600 0000                  		bne.w	Obj2F_Slope
0000B66C 4228 0025                  		clr.b	$25(a0)
0000B670 6000                       		bra.s	Obj2F_Display
0000B672                            ; ===========================================================================
0000B672                            
0000B672                            Obj2F_Slope:				; XREF: Obj2F_Action
0000B672 7200                       		moveq	#0,d1
0000B674 1228 0019                  		move.b	$19(a0),d1
0000B678 0641 000B                  		addi.w	#$B,d1
0000B67C 2468 0030                  		movea.l	$30(a0),a2
0000B680 3428 0008                  		move.w	8(a0),d2
0000B684 6100 D52A                  		bsr.w	SlopeObject2
0000B688 6000                       		bra.s	Obj2F_Display
0000B68A                            ; ===========================================================================
0000B68A                            
0000B68A                            Obj2F_Solid:				; XREF: Obj2F_Action
0000B68A 7200                       		moveq	#0,d1
0000B68C 1228 0019                  		move.b	$19(a0),d1
0000B690 0641 000B                  		addi.w	#$B,d1
0000B694 343C 0020                  		move.w	#$20,d2
0000B698 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000B69E 6600                       		bne.s	loc_AF8E
0000B6A0 343C 0030                  		move.w	#$30,d2
0000B6A4                            
0000B6A4                            loc_AF8E:
0000B6A4 2468 0030                  		movea.l	$30(a0),a2
0000B6A8 6100 0000                  		bsr.w	SolidObject2F
0000B6AC                            
0000B6AC                            Obj2F_Display:				; XREF: Obj2F_Action
0000B6AC 6100 0000                  		bsr.w	DisplaySprite
0000B6B0 6000 0000                  		bra.w	Obj2F_ChkDel
0000B6B4                            
0000B6B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B6B4                            
0000B6B4                            
0000B6B4                            Obj2F_Types:				; XREF: Obj2F_Action
0000B6B4 7000                       		moveq	#0,d0
0000B6B6 1028 0028                  		move.b	$28(a0),d0
0000B6BA 0240 0007                  		andi.w	#7,d0
0000B6BE D040                       		add.w	d0,d0
0000B6C0 323B 0000                  		move.w	Obj2F_TypeIndex(pc,d0.w),d1
0000B6C4 4EFB 1000                  		jmp	Obj2F_TypeIndex(pc,d1.w)
0000B6C8                            ; End of function Obj2F_Types
0000B6C8                            
0000B6C8                            ; ===========================================================================
0000B6C8 0000                       Obj2F_TypeIndex:dc.w Obj2F_Type00-Obj2F_TypeIndex
0000B6CA 0000                       		dc.w Obj2F_Type01-Obj2F_TypeIndex
0000B6CC 0000                       		dc.w Obj2F_Type02-Obj2F_TypeIndex
0000B6CE 0000                       		dc.w Obj2F_Type03-Obj2F_TypeIndex
0000B6D0 0000                       		dc.w Obj2F_Type04-Obj2F_TypeIndex
0000B6D2 0000                       		dc.w Obj2F_Type05-Obj2F_TypeIndex
0000B6D4                            ; ===========================================================================
0000B6D4                            
0000B6D4                            Obj2F_Type00:				; XREF: Obj2F_TypeIndex
0000B6D4 4E75                       		rts			; type 00 platform doesn't move
0000B6D6                            ; ===========================================================================
0000B6D6                            
0000B6D6                            Obj2F_Type01:				; XREF: Obj2F_TypeIndex
0000B6D6 1038 FE60                  		move.b	($FFFFFE60).w,d0
0000B6DA 323C 0020                  		move.w	#$20,d1
0000B6DE 6000                       		bra.s	Obj2F_Move
0000B6E0                            ; ===========================================================================
0000B6E0                            
0000B6E0                            Obj2F_Type02:				; XREF: Obj2F_TypeIndex
0000B6E0 1038 FE64                  		move.b	($FFFFFE64).w,d0
0000B6E4 323C 0030                  		move.w	#$30,d1
0000B6E8 6000                       		bra.s	Obj2F_Move
0000B6EA                            ; ===========================================================================
0000B6EA                            
0000B6EA                            Obj2F_Type03:				; XREF: Obj2F_TypeIndex
0000B6EA 1038 FE68                  		move.b	($FFFFFE68).w,d0
0000B6EE 323C 0040                  		move.w	#$40,d1
0000B6F2 6000                       		bra.s	Obj2F_Move
0000B6F4                            ; ===========================================================================
0000B6F4                            
0000B6F4                            Obj2F_Type04:				; XREF: Obj2F_TypeIndex
0000B6F4 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0000B6F8 323C 0060                  		move.w	#$60,d1
0000B6FC                            
0000B6FC                            Obj2F_Move:
0000B6FC 0828 0003 0028             		btst	#3,$28(a0)
0000B702 6700                       		beq.s	loc_AFF2
0000B704 4440                       		neg.w	d0
0000B706 D041                       		add.w	d1,d0
0000B708                            
0000B708                            loc_AFF2:
0000B708 3228 002C                  		move.w	$2C(a0),d1
0000B70C 9240                       		sub.w	d0,d1
0000B70E 3141 000C                  		move.w	d1,$C(a0)	; update position on y-axis
0000B712 4E75                       		rts	
0000B714                            ; ===========================================================================
0000B714                            
0000B714                            Obj2F_Type05:				; XREF: Obj2F_TypeIndex
0000B714 1028 0034                  		move.b	$34(a0),d0
0000B718 4A28 0025                  		tst.b	$25(a0)
0000B71C 6600                       		bne.s	loc_B010
0000B71E 5500                       		subq.b	#2,d0
0000B720 6400                       		bcc.s	loc_B01C
0000B722 7000                       		moveq	#0,d0
0000B724 6000                       		bra.s	loc_B01C
0000B726                            ; ===========================================================================
0000B726                            
0000B726                            loc_B010:
0000B726 5800                       		addq.b	#4,d0
0000B728 0C00 0040                  		cmpi.b	#$40,d0
0000B72C 6500                       		bcs.s	loc_B01C
0000B72E 103C 0040                  		move.b	#$40,d0
0000B732                            
0000B732                            loc_B01C:
0000B732 1140 0034                  		move.b	d0,$34(a0)
0000B736 4EB9 0000 2CC4             		jsr	(CalcSine).l
0000B73C E848                       		lsr.w	#4,d0
0000B73E 3200                       		move.w	d0,d1
0000B740 D068 002C                  		add.w	$2C(a0),d0
0000B744 3140 000C                  		move.w	d0,$C(a0)
0000B748 0C28 0020 0034             		cmpi.b	#$20,$34(a0)
0000B74E 6600                       		bne.s	loc_B07A
0000B750 4A28 0035                  		tst.b	$35(a0)
0000B754 6600                       		bne.s	loc_B07A
0000B756 117C 0001 0035             		move.b	#1,$35(a0)
0000B75C 6100 0000                  		bsr.w	SingleObjLoad2
0000B760 6600                       		bne.s	loc_B07A
0000B762 12BC 0035                  		move.b	#$35,0(a1)	; load sitting flame object
0000B766 3368 0008 0008             		move.w	8(a0),8(a1)
0000B76C 3368 002C 002C             		move.w	$2C(a0),$2C(a1)
0000B772 5069 002C                  		addq.w	#8,$2C(a1)
0000B776 5769 002C                  		subq.w	#3,$2C(a1)
0000B77A 0469 0040 0008             		subi.w	#$40,8(a1)
0000B780 2368 0030 0030             		move.l	$30(a0),$30(a1)
0000B786 2348 0038                  		move.l	a0,$38(a1)
0000B78A 2448                       		movea.l	a0,a2
0000B78C 6100                       		bsr.s	sub_B09C
0000B78E                            
0000B78E                            loc_B07A:
0000B78E 7400                       		moveq	#0,d2
0000B790 45E8 0036                  		lea	$36(a0),a2
0000B794 141A                       		move.b	(a2)+,d2
0000B796 5302                       		subq.b	#1,d2
0000B798 6500                       		bcs.s	locret_B09A
0000B79A                            
0000B79A                            loc_B086:
0000B79A 7000                       		moveq	#0,d0
0000B79C 101A                       		move.b	(a2)+,d0
0000B79E ED48                       		lsl.w	#6,d0
0000B7A0 0640 D000                  		addi.w	#-$3000,d0
0000B7A4 3240                       		movea.w	d0,a1
0000B7A6 3341 003C                  		move.w	d1,$3C(a1)
0000B7AA 51CA FFEE                  		dbf	d2,loc_B086
0000B7AE                            
0000B7AE                            locret_B09A:
0000B7AE 4E75                       		rts	
0000B7B0                            
0000B7B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B7B0                            
0000B7B0                            
0000B7B0                            sub_B09C:
0000B7B0 45EA 0036                  		lea	$36(a2),a2
0000B7B4 7000                       		moveq	#0,d0
0000B7B6 1012                       		move.b	(a2),d0
0000B7B8 5212                       		addq.b	#1,(a2)
0000B7BA 45F2 0001                  		lea	1(a2,d0.w),a2
0000B7BE 3009                       		move.w	a1,d0
0000B7C0 0440 D000                  		subi.w	#-$3000,d0
0000B7C4 EC48                       		lsr.w	#6,d0
0000B7C6 0240 007F                  		andi.w	#$7F,d0
0000B7CA 1480                       		move.b	d0,(a2)
0000B7CC 4E75                       		rts	
0000B7CE                            ; End of function sub_B09C
0000B7CE                            
0000B7CE                            ; ===========================================================================
0000B7CE                            
0000B7CE                            Obj2F_ChkDel:				; XREF: Obj2F_Display
0000B7CE 4A28 0035                  		tst.b	$35(a0)
0000B7D2 6700                       		beq.s	loc_B0C6
0000B7D4 4A28 0001                  		tst.b	1(a0)
0000B7D8 6A00                       		bpl.s	Obj2F_DelFlames
0000B7DA                            
0000B7DA                            loc_B0C6:
0000B7DA 3028 002A                  		move.w	$2A(a0),d0
0000B7DE 0240 FF80                  		andi.w	#$FF80,d0
0000B7E2 3238 F700                  		move.w	($FFFFF700).w,d1
0000B7E6 0441 0080                  		subi.w	#$80,d1
0000B7EA 0241 FF80                  		andi.w	#$FF80,d1
0000B7EE 9041                       		sub.w	d1,d0
0000B7F0 0C40 0280                  		cmpi.w	#$280,d0
0000B7F4 6200 0000                  		bhi.w	DeleteObject
0000B7F8 4E75                       		rts	
0000B7FA                            ; ===========================================================================
0000B7FA                            
0000B7FA                            Obj2F_DelFlames:			; XREF: Obj2F_ChkDel
0000B7FA 7400                       		moveq	#0,d2
0000B7FC                            
0000B7FC                            loc_B0E8:
0000B7FC 45E8 0036                  		lea	$36(a0),a2
0000B800 1412                       		move.b	(a2),d2
0000B802 421A                       		clr.b	(a2)+
0000B804 5302                       		subq.b	#1,d2
0000B806 6500                       		bcs.s	locret_B116
0000B808                            
0000B808                            loc_B0F4:
0000B808 7000                       		moveq	#0,d0
0000B80A 1012                       		move.b	(a2),d0
0000B80C 421A                       		clr.b	(a2)+
0000B80E ED48                       		lsl.w	#6,d0
0000B810 0640 D000                  		addi.w	#-$3000,d0
0000B814 3240                       		movea.w	d0,a1
0000B816 6100 0000                  		bsr.w	DeleteObject2
0000B81A 51CA FFEC                  		dbf	d2,loc_B0F4
0000B81E 117C 0000 0035             		move.b	#0,$35(a0)
0000B824 117C 0000 0034             		move.b	#0,$34(a0)
0000B82A                            
0000B82A                            locret_B116:
0000B82A 4E75                       		rts	
0000B82C                            ; ===========================================================================
0000B82C                            ; ---------------------------------------------------------------------------
0000B82C                            ; Collision data for large moving platforms (MZ)
0000B82C                            ; ---------------------------------------------------------------------------
0000B82C                            Obj2F_Data1:	incbin	misc\mz_pfm1.bin
0000B878                            		even
0000B878                            Obj2F_Data2:	incbin	misc\mz_pfm2.bin
0000B8A4                            		even
0000B8A4                            Obj2F_Data3:	incbin	misc\mz_pfm3.bin
0000B8F0                            		even
0000B8F0                            ; ===========================================================================
0000B8F0                            ; ---------------------------------------------------------------------------
0000B8F0                            ; Object 35 - fireball that sits on the	floor (MZ)
0000B8F0                            ; (appears when	you walk on sinking platforms)
0000B8F0                            ; ---------------------------------------------------------------------------
0000B8F0                            
0000B8F0                            Obj35:					; XREF: Obj_Index
0000B8F0 7000                       		moveq	#0,d0
0000B8F2 1028 0024                  		move.b	$24(a0),d0
0000B8F6 323B 0000                  		move.w	Obj35_Index(pc,d0.w),d1
0000B8FA 4EFB 1000                  		jmp	Obj35_Index(pc,d1.w)
0000B8FE                            ; ===========================================================================
0000B8FE 0000                       Obj35_Index:	dc.w Obj35_Main-Obj35_Index
0000B900 0000                       		dc.w loc_B238-Obj35_Index
0000B902 0000                       		dc.w Obj35_Move-Obj35_Index
0000B904                            ; ===========================================================================
0000B904                            
0000B904                            Obj35_Main:				; XREF: Obj35_Index
0000B904 5428 0024                  		addq.b	#2,$24(a0)
0000B908 217C 0000 0000 0004        		move.l	#Map_obj14,4(a0)
0000B910 317C 0345 0002             		move.w	#$345,2(a0)
0000B916 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000B91C 117C 0004 0001             		move.b	#4,1(a0)
0000B922 117C 0001 0018             		move.b	#1,$18(a0)
0000B928 117C 008B 0020             		move.b	#$8B,$20(a0)
0000B92E 117C 0008 0019             		move.b	#8,$19(a0)
0000B934 303C 00C8                  		move.w	#$C8,d0
0000B938 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play flame sound
0000B93E 4A28 0028                  		tst.b	$28(a0)
0000B942 6700                       		beq.s	loc_B238
0000B944 5428 0024                  		addq.b	#2,$24(a0)
0000B948 6000 0000                  		bra.w	Obj35_Move
0000B94C                            ; ===========================================================================
0000B94C                            
0000B94C                            loc_B238:				; XREF: Obj35_Index
0000B94C 2268 0030                  		movea.l	$30(a0),a1
0000B950 3228 0008                  		move.w	8(a0),d1
0000B954 9268 002A                  		sub.w	$2A(a0),d1
0000B958 0641 000C                  		addi.w	#$C,d1
0000B95C 3001                       		move.w	d1,d0
0000B95E E248                       		lsr.w	#1,d0
0000B960 1031 0000                  		move.b	(a1,d0.w),d0
0000B964 4440                       		neg.w	d0
0000B966 D068 002C                  		add.w	$2C(a0),d0
0000B96A 3400                       		move.w	d0,d2
0000B96C D068 003C                  		add.w	$3C(a0),d0
0000B970 3140 000C                  		move.w	d0,$C(a0)
0000B974 0C41 0084                  		cmpi.w	#$84,d1
0000B978 6400                       		bcc.s	loc_B2B0
0000B97A 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000B982 0C41 0080                  		cmpi.w	#$80,d1
0000B986 6400                       		bcc.s	loc_B2B0
0000B988 2028 0008                  		move.l	8(a0),d0
0000B98C 0680 0008 0000             		addi.l	#$80000,d0
0000B992 0280 000F FFFF             		andi.l	#$FFFFF,d0
0000B998 6600                       		bne.s	loc_B2B0
0000B99A 6100 0000                  		bsr.w	SingleObjLoad2
0000B99E 6600                       		bne.s	loc_B2B0
0000B9A0 12BC 0035                  		move.b	#$35,0(a1)
0000B9A4 3368 0008 0008             		move.w	8(a0),8(a1)
0000B9AA 3342 002C                  		move.w	d2,$2C(a1)
0000B9AE 3368 003C 003C             		move.w	$3C(a0),$3C(a1)
0000B9B4 137C 0001 0028             		move.b	#1,$28(a1)
0000B9BA 2468 0038                  		movea.l	$38(a0),a2
0000B9BE 6100 FDF0                  		bsr.w	sub_B09C
0000B9C2                            
0000B9C2                            loc_B2B0:
0000B9C2 6000                       		bra.s	Obj35_Animate
0000B9C4                            ; ===========================================================================
0000B9C4                            
0000B9C4                            Obj35_Move:				; XREF: Obj35_Index
0000B9C4 3028 002C                  		move.w	$2C(a0),d0
0000B9C8 D068 003C                  		add.w	$3C(a0),d0
0000B9CC 3140 000C                  		move.w	d0,$C(a0)
0000B9D0                            
0000B9D0                            Obj35_Animate:				; XREF: loc_B238
0000B9D0 43F9 0000 0000             		lea	(Ani_obj35).l,a1
0000B9D6 6100 F4AA                  		bsr.w	AnimateSprite
0000B9DA 6000 0000                  		bra.w	DisplaySprite
0000B9DE                            ; ===========================================================================
0000B9DE                            Ani_obj35:
0000B9DE                            	include "_anim\obj35.asm"
0000B9DE                            ; ---------------------------------------------------------------------------
0000B9DE                            ; Animation script - fireball that sits on the	floor (MZ)
0000B9DE                            ; ---------------------------------------------------------------------------
0000B9DE 0000                       		dc.w byte_B2CE-Ani_obj35
0000B9E0 0500 2001 21FF             byte_B2CE:	dc.b 5,	0, $20,	1, $21,	$FF
0000B9E6                            		even
0000B9E6                            		even
0000B9E6                            
0000B9E6                            ; ---------------------------------------------------------------------------
0000B9E6                            ; Sprite mappings - large moving platforms (MZ)
0000B9E6                            ; ---------------------------------------------------------------------------
0000B9E6                            Map_obj2F:
0000B9E6                            	include "_maps\obj2F.asm"
0000B9E6                            ; ---------------------------------------------------------------------------
0000B9E6                            ; Sprite mappings - large moving platforms (MZ)
0000B9E6                            ; ---------------------------------------------------------------------------
0000B9E6 0000                       		dc.w byte_B2DA-Map_obj2F
0000B9E8 0000                       		dc.w byte_B31C-Map_obj2F
0000B9EA 0000                       		dc.w byte_B34F-Map_obj2F
0000B9EC 0D                         byte_B2DA:	dc.b $D
0000B9ED D806 0057 C0               		dc.b $D8, 6, 0,	$57, $C0
0000B9F2 F005 0053 C0               		dc.b $F0, 5, 0,	$53, $C0
0000B9F7 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000B9FC D00F 0027 D0               		dc.b $D0, $F, 0, $27, $D0
0000BA01 F00D 0037 D0               		dc.b $F0, $D, 0, $37, $D0
0000BA06 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000BA0B D00F 0011 F0               		dc.b $D0, $F, 0, $11, $F0
0000BA10 D00F 003F 10               		dc.b $D0, $F, 0, $3F, $10
0000BA15 F00D 004F 10               		dc.b $F0, $D, 0, $4F, $10
0000BA1A F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000BA1F 000F 0001 20               		dc.b 0,	$F, 0, 1, $20
0000BA24 D806 0057 30               		dc.b $D8, 6, 0,	$57, $30
0000BA29 F005 0053 30               		dc.b $F0, 5, 0,	$53, $30
0000BA2E 0A                         byte_B31C:	dc.b $A
0000BA2F D00F 0027 C0               		dc.b $D0, $F, 0, $27, $C0
0000BA34 F00D 0037 C0               		dc.b $F0, $D, 0, $37, $C0
0000BA39 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000BA3E C00F 0027 E0               		dc.b $C0, $F, 0, $27, $E0
0000BA43 E00D 0037 E0               		dc.b $E0, $D, 0, $37, $E0
0000BA48 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000BA4D C00F 0011 00               		dc.b $C0, $F, 0, $11, 0
0000BA52 E00F 0001 00               		dc.b $E0, $F, 0, 1, 0
0000BA57 C00F 003F 20               		dc.b $C0, $F, 0, $3F, $20
0000BA5C E00D 004F 20               		dc.b $E0, $D, 0, $4F, $20
0000BA61 06                         byte_B34F:	dc.b 6
0000BA62 D00F 0011 E0               		dc.b $D0, $F, 0, $11, $E0
0000BA67 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000BA6C 100F 0001 E0               		dc.b $10, $F, 0, 1, $E0
0000BA71 D00F 0011 00               		dc.b $D0, $F, 0, $11, 0
0000BA76 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000BA7B 100F 0001 00               		dc.b $10, $F, 0, 1, 0
0000BA80                            		even
0000BA80                            		even
0000BA80                            
0000BA80                            ; ---------------------------------------------------------------------------
0000BA80                            ; Sprite mappings - lava balls (MZ, SLZ)
0000BA80                            ; ---------------------------------------------------------------------------
0000BA80                            Map_obj14:
0000BA80                            	include "_maps\obj14.asm"
0000BA80                            ; --------------------------------------------------------------------------------
0000BA80                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000BA80                            ; --------------------------------------------------------------------------------
0000BA80                            
0000BA80                            SME_C6wT7:	
0000BA80 0000 0000                  		dc.w SME_C6wT7_C-SME_C6wT7, SME_C6wT7_12-SME_C6wT7	
0000BA84 0000 0000                  		dc.w SME_C6wT7_18-SME_C6wT7, SME_C6wT7_23-SME_C6wT7	
0000BA88 0000 0000                  		dc.w SME_C6wT7_29-SME_C6wT7, SME_C6wT7_2F-SME_C6wT7	
0000BA8C 01                         SME_C6wT7_C:	dc.b 1	
0000BA8D E80F 0000 F8               		dc.b $E8, $F, 0, 0, $F8	
0000BA92 01                         SME_C6wT7_12:	dc.b 1	
0000BA93 E80F 0000 F8               		dc.b $E8, $F, 0, 0, $F8	
0000BA98 02                         SME_C6wT7_18:	dc.b 2	
0000BA99 EF06 0010 F8               		dc.b $EF, 6, 0, $10, $F8	
0000BA9E E707 0016 08               		dc.b $E7, 7, 0, $16, 8	
0000BAA3 01                         SME_C6wT7_23:	dc.b 1	
0000BAA4 F00F 0000 E8               		dc.b $F0, $F, 0, 0, $E8	
0000BAA9 01                         SME_C6wT7_29:	dc.b 1	
0000BAAA F00F 0000 E8               		dc.b $F0, $F, 0, 0, $E8	
0000BAAF 01                         SME_C6wT7_2F:	dc.b 1	
0000BAB0 F00B 001E E8               		dc.b $F0, $B, 0, $1E, $E8	
0000BAB6 00                         		even
0000BAB6 00                         		even
0000BAB6                            
0000BAB6                            ; ===========================================================================
0000BAB6                            ; ---------------------------------------------------------------------------
0000BAB6                            ; Object 30 - large green glassy blocks	(MZ)
0000BAB6                            ; ---------------------------------------------------------------------------
0000BAB6                            
0000BAB6                            Obj30:					; XREF: Obj_Index
0000BAB6 7000                       		moveq	#0,d0
0000BAB8 1028 0024                  		move.b	$24(a0),d0
0000BABC 323B 0000                  		move.w	Obj30_Index(pc,d0.w),d1
0000BAC0 4EBB 1000                  		jsr	Obj30_Index(pc,d1.w)
0000BAC4 3028 0008                  		move.w	8(a0),d0
0000BAC8 0240 FF80                  		andi.w	#$FF80,d0
0000BACC 3238 F700                  		move.w	($FFFFF700).w,d1
0000BAD0 0441 0080                  		subi.w	#$80,d1
0000BAD4 0241 FF80                  		andi.w	#$FF80,d1
0000BAD8 9041                       		sub.w	d1,d0
0000BADA 0C40 0280                  		cmpi.w	#$280,d0
0000BADE 6200 0000                  		bhi.w	Obj30_Delete
0000BAE2 6000 0000                  		bra.w	DisplaySprite
0000BAE6                            ; ===========================================================================
0000BAE6                            
0000BAE6                            Obj30_Delete:
0000BAE6 6000 0000                  		bra.w	DeleteObject
0000BAEA                            ; ===========================================================================
0000BAEA 0000                       Obj30_Index:	dc.w Obj30_Main-Obj30_Index
0000BAEC 0000                       		dc.w Obj30_Block012-Obj30_Index
0000BAEE 0000                       		dc.w Obj30_Reflect012-Obj30_Index
0000BAF0 0000                       		dc.w Obj30_Block34-Obj30_Index
0000BAF2 0000                       		dc.w Obj30_Reflect34-Obj30_Index
0000BAF4                            
0000BAF4 0200 00                    Obj30_Vars1:	dc.b 2,	0, 0	; routine num, y-axis dist from	origin,	frame num
0000BAF7 0400 01                    		dc.b 4,	0, 1
0000BAFA 0600 02                    Obj30_Vars2:	dc.b 6,	0, 2
0000BAFD 0800 01                    		dc.b 8,	0, 1
0000BB00                            ; ===========================================================================
0000BB00                            
0000BB00                            Obj30_Main:				; XREF: Obj30_Index
0000BB00 45F9 0000 BAF4             		lea	(Obj30_Vars1).l,a2
0000BB06 7201                       		moveq	#1,d1
0000BB08 117C 0048 0016             		move.b	#$48,$16(a0)
0000BB0E 0C28 0003 0028             		cmpi.b	#3,$28(a0)	; is object type 0/1/2 ?
0000BB14 6500                       		bcs.s	loc_B40C	; if yes, branch
0000BB16 45F9 0000 BAFA             		lea	(Obj30_Vars2).l,a2
0000BB1C 7201                       		moveq	#1,d1
0000BB1E 117C 0038 0016             		move.b	#$38,$16(a0)
0000BB24                            
0000BB24                            loc_B40C:
0000BB24 2248                       		movea.l	a0,a1
0000BB26 6000                       		bra.s	Obj30_Load	; load main object
0000BB28                            ; ===========================================================================
0000BB28                            
0000BB28                            Obj30_Loop:
0000BB28 6100 0000                  		bsr.w	SingleObjLoad2
0000BB2C 6600                       		bne.s	loc_B480
0000BB2E                            
0000BB2E                            Obj30_Load:				; XREF: Obj30_Main
0000BB2E 135A 0024                  		move.b	(a2)+,$24(a1)
0000BB32 12BC 0030                  		move.b	#$30,0(a1)
0000BB36 3368 0008 0008             		move.w	8(a0),8(a1)
0000BB3C 101A                       		move.b	(a2)+,d0
0000BB3E 4880                       		ext.w	d0
0000BB40 D068 000C                  		add.w	$C(a0),d0
0000BB44 3340 000C                  		move.w	d0,$C(a1)
0000BB48 237C 0000 0000 0004        		move.l	#Map_obj30,4(a1)
0000BB50 337C C38E 0002             		move.w	#$C38E,2(a1)
0000BB56 137C 0004 0001             		move.b	#4,1(a1)
0000BB5C 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000BB62 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000BB68 137C 0020 0019             		move.b	#$20,$19(a1)
0000BB6E 137C 0004 0018             		move.b	#4,$18(a1)
0000BB74 135A 001A                  		move.b	(a2)+,$1A(a1)
0000BB78 2348 003C                  		move.l	a0,$3C(a1)
0000BB7C 51C9 FFAA                  		dbf	d1,Obj30_Loop	; repeat once to load "reflection object"
0000BB80                            
0000BB80 137C 0010 0019             		move.b	#$10,$19(a1)
0000BB86 137C 0003 0018             		move.b	#3,$18(a1)
0000BB8C 5029 0028                  		addq.b	#8,$28(a1)
0000BB90 0229 000F 0028             		andi.b	#$F,$28(a1)
0000BB96                            
0000BB96                            loc_B480:
0000BB96 317C 0090 0032             		move.w	#$90,$32(a0)
0000BB9C 08E8 0004 0001             		bset	#4,1(a0)
0000BBA2                            
0000BBA2                            Obj30_Block012:				; XREF: Obj30_Index
0000BBA2 6100 0000                  		bsr.w	Obj30_Types
0000BBA6 323C 002B                  		move.w	#$2B,d1
0000BBAA 343C 0048                  		move.w	#$48,d2
0000BBAE 363C 0049                  		move.w	#$49,d3
0000BBB2 3828 0008                  		move.w	8(a0),d4
0000BBB6 6000 0000                  		bra.w	SolidObject
0000BBBA                            ; ===========================================================================
0000BBBA                            
0000BBBA                            Obj30_Reflect012:			; XREF: Obj30_Index
0000BBBA 2268 003C                  		movea.l	$3C(a0),a1
0000BBBE 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000BBC4 6000 0000                  		bra.w	Obj30_Types
0000BBC8                            ; ===========================================================================
0000BBC8                            
0000BBC8                            Obj30_Block34:				; XREF: Obj30_Index
0000BBC8 6100 0000                  		bsr.w	Obj30_Types
0000BBCC 323C 002B                  		move.w	#$2B,d1
0000BBD0 343C 0038                  		move.w	#$38,d2
0000BBD4 363C 0039                  		move.w	#$39,d3
0000BBD8 3828 0008                  		move.w	8(a0),d4
0000BBDC 6000 0000                  		bra.w	SolidObject
0000BBE0                            ; ===========================================================================
0000BBE0                            
0000BBE0                            Obj30_Reflect34:			; XREF: Obj30_Index
0000BBE0 2268 003C                  		movea.l	$3C(a0),a1
0000BBE4 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000BBEA 3169 000C 0030             		move.w	$C(a1),$30(a0)
0000BBF0 6000 0002                  		bra.w	*+4
0000BBF4                            
0000BBF4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BBF4                            
0000BBF4                            
0000BBF4                            Obj30_Types:				; XREF: Obj30_Block012; et al
0000BBF4 7000                       		moveq	#0,d0
0000BBF6 1028 0028                  		move.b	$28(a0),d0
0000BBFA 0240 0007                  		andi.w	#7,d0
0000BBFE D040                       		add.w	d0,d0
0000BC00 323B 0000                  		move.w	Obj30_TypeIndex(pc,d0.w),d1
0000BC04 4EFB 1000                  		jmp	Obj30_TypeIndex(pc,d1.w)
0000BC08                            ; End of function Obj30_Types
0000BC08                            
0000BC08                            ; ===========================================================================
0000BC08 0000                       Obj30_TypeIndex:dc.w Obj30_Type00-Obj30_TypeIndex
0000BC0A 0000                       		dc.w Obj30_Type01-Obj30_TypeIndex
0000BC0C 0000                       		dc.w Obj30_Type02-Obj30_TypeIndex
0000BC0E 0000                       		dc.w Obj30_Type03-Obj30_TypeIndex
0000BC10 0000                       		dc.w Obj30_Type04-Obj30_TypeIndex
0000BC12                            ; ===========================================================================
0000BC12                            
0000BC12                            Obj30_Type00:				; XREF: Obj30_TypeIndex
0000BC12 4E75                       		rts	
0000BC14                            ; ===========================================================================
0000BC14                            
0000BC14                            Obj30_Type01:				; XREF: Obj30_TypeIndex
0000BC14 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BC18 323C 0040                  		move.w	#$40,d1
0000BC1C 6000                       		bra.s	loc_B514
0000BC1E                            ; ===========================================================================
0000BC1E                            
0000BC1E                            Obj30_Type02:				; XREF: Obj30_TypeIndex
0000BC1E 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BC22 323C 0040                  		move.w	#$40,d1
0000BC26 4440                       		neg.w	d0
0000BC28 D041                       		add.w	d1,d0
0000BC2A                            
0000BC2A                            loc_B514:				; XREF: Obj30_Type01
0000BC2A 0828 0003 0028             		btst	#3,$28(a0)
0000BC30 6700                       		beq.s	loc_B526
0000BC32 4440                       		neg.w	d0
0000BC34 D041                       		add.w	d1,d0
0000BC36 E208                       		lsr.b	#1,d0
0000BC38 0640 0020                  		addi.w	#$20,d0
0000BC3C                            
0000BC3C                            loc_B526:
0000BC3C 6000 0000                  		bra.w	loc_B5EE
0000BC40                            ; ===========================================================================
0000BC40                            
0000BC40                            Obj30_Type03:				; XREF: Obj30_TypeIndex
0000BC40 0828 0003 0028             		btst	#3,$28(a0)
0000BC46 6700                       		beq.s	loc_B53E
0000BC48 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BC4C 0440 0010                  		subi.w	#$10,d0
0000BC50 6000 0000                  		bra.w	loc_B5EE
0000BC54                            ; ===========================================================================
0000BC54                            
0000BC54                            loc_B53E:
0000BC54 0828 0003 0022             		btst	#3,$22(a0)
0000BC5A 6600                       		bne.s	loc_B54E
0000BC5C 08A8 0000 0034             		bclr	#0,$34(a0)
0000BC62 6000                       		bra.s	loc_B582
0000BC64                            ; ===========================================================================
0000BC64                            
0000BC64                            loc_B54E:
0000BC64 4A28 0034                  		tst.b	$34(a0)
0000BC68 6600                       		bne.s	loc_B582
0000BC6A 117C 0001 0034             		move.b	#1,$34(a0)
0000BC70 08E8 0000 0035             		bset	#0,$35(a0)
0000BC76 6700                       		beq.s	loc_B582
0000BC78 08E8 0007 0034             		bset	#7,$34(a0)
0000BC7E 317C 0010 0036             		move.w	#$10,$36(a0)
0000BC84 117C 000A 0038             		move.b	#$A,$38(a0)
0000BC8A 0C68 0040 0032             		cmpi.w	#$40,$32(a0)
0000BC90 6600                       		bne.s	loc_B582
0000BC92 317C 0040 0036             		move.w	#$40,$36(a0)
0000BC98                            
0000BC98                            loc_B582:
0000BC98 4A28 0034                  		tst.b	$34(a0)
0000BC9C 6A00                       		bpl.s	loc_B5AA
0000BC9E 4A28 0038                  		tst.b	$38(a0)
0000BCA2 6700                       		beq.s	loc_B594
0000BCA4 5328 0038                  		subq.b	#1,$38(a0)
0000BCA8 6600                       		bne.s	loc_B5AA
0000BCAA                            
0000BCAA                            loc_B594:
0000BCAA 4A68 0032                  		tst.w	$32(a0)
0000BCAE 6700                       		beq.s	loc_B5A4
0000BCB0 5368 0032                  		subq.w	#1,$32(a0)
0000BCB4 5368 0036                  		subq.w	#1,$36(a0)
0000BCB8 6600                       		bne.s	loc_B5AA
0000BCBA                            
0000BCBA                            loc_B5A4:
0000BCBA 08A8 0007 0034             		bclr	#7,$34(a0)
0000BCC0                            
0000BCC0                            loc_B5AA:
0000BCC0 3028 0032                  		move.w	$32(a0),d0
0000BCC4 6000                       		bra.s	loc_B5EE
0000BCC6                            ; ===========================================================================
0000BCC6                            
0000BCC6                            Obj30_Type04:				; XREF: Obj30_TypeIndex
0000BCC6 0828 0003 0028             		btst	#3,$28(a0)
0000BCCC 6700                       		beq.s	Obj30_ChkSwitch
0000BCCE 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BCD2 0440 0010                  		subi.w	#$10,d0
0000BCD6 6000                       		bra.s	loc_B5EE
0000BCD8                            ; ===========================================================================
0000BCD8                            
0000BCD8                            Obj30_ChkSwitch:			; XREF: Obj30_Type04
0000BCD8 4A28 0034                  		tst.b	$34(a0)
0000BCDC 6600                       		bne.s	loc_B5E0
0000BCDE 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0000BCE2 7000                       		moveq	#0,d0
0000BCE4 1028 0028                  		move.b	$28(a0),d0	; load object type number
0000BCE8 E848                       		lsr.w	#4,d0		; read only the	first nybble
0000BCEA 4A32 0000                  		tst.b	(a2,d0.w)	; has switch number d0 been pressed?
0000BCEE 6700                       		beq.s	loc_B5EA	; if not, branch
0000BCF0 117C 0001 0034             		move.b	#1,$34(a0)
0000BCF6                            
0000BCF6                            loc_B5E0:
0000BCF6 4A68 0032                  		tst.w	$32(a0)
0000BCFA 6700                       		beq.s	loc_B5EA
0000BCFC 5568 0032                  		subq.w	#2,$32(a0)
0000BD00                            
0000BD00                            loc_B5EA:
0000BD00 3028 0032                  		move.w	$32(a0),d0
0000BD04                            
0000BD04                            loc_B5EE:
0000BD04 3228 0030                  		move.w	$30(a0),d1
0000BD08 9240                       		sub.w	d0,d1
0000BD0A 3141 000C                  		move.w	d1,$C(a0)
0000BD0E 4E75                       		rts	
0000BD10                            ; ===========================================================================
0000BD10                            ; ---------------------------------------------------------------------------
0000BD10                            ; Sprite mappings - large green	glassy blocks (MZ)
0000BD10                            ; ---------------------------------------------------------------------------
0000BD10                            Map_obj30:
0000BD10                            	include "_maps\obj30.asm"
0000BD10                            ; ---------------------------------------------------------------------------
0000BD10                            ; Sprite mappings - large green	glassy blocks (MZ)
0000BD10                            ; ---------------------------------------------------------------------------
0000BD10 0000                       		dc.w byte_B600-Map_obj30
0000BD12 0000                       		dc.w byte_B63D-Map_obj30
0000BD14 0000                       		dc.w byte_B648-Map_obj30
0000BD16 0C                         byte_B600:	dc.b $C
0000BD17 B80C 0000 E0               		dc.b $B8, $C, 0, 0, $E0
0000BD1C B80C 0800 00               		dc.b $B8, $C, 8, 0, 0
0000BD21 C00F 0004 E0               		dc.b $C0, $F, 0, 4, $E0
0000BD26 C00F 0804 00               		dc.b $C0, $F, 8, 4, 0
0000BD2B E00F 0004 E0               		dc.b $E0, $F, 0, 4, $E0
0000BD30 E00F 0804 00               		dc.b $E0, $F, 8, 4, 0
0000BD35 000F 0004 E0               		dc.b 0,	$F, 0, 4, $E0
0000BD3A 000F 0804 00               		dc.b 0,	$F, 8, 4, 0
0000BD3F 200F 0004 E0               		dc.b $20, $F, 0, 4, $E0
0000BD44 200F 0804 00               		dc.b $20, $F, 8, 4, 0
0000BD49 400C 1000 E0               		dc.b $40, $C, $10, 0, $E0
0000BD4E 400C 1800 00               		dc.b $40, $C, $18, 0, 0
0000BD53 02                         byte_B63D:	dc.b 2
0000BD54 0806 0014 F0               		dc.b 8,	6, 0, $14, $F0
0000BD59 0006 0014 00               		dc.b 0,	6, 0, $14, 0
0000BD5E 0A                         byte_B648:	dc.b $A
0000BD5F C80C 0000 E0               		dc.b $C8, $C, 0, 0, $E0
0000BD64 C80C 0800 00               		dc.b $C8, $C, 8, 0, 0
0000BD69 D00F 0004 E0               		dc.b $D0, $F, 0, 4, $E0
0000BD6E D00F 0804 00               		dc.b $D0, $F, 8, 4, 0
0000BD73 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
0000BD78 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
0000BD7D 100F 0004 E0               		dc.b $10, $F, 0, 4, $E0
0000BD82 100F 0804 00               		dc.b $10, $F, 8, 4, 0
0000BD87 300C 1000 E0               		dc.b $30, $C, $10, 0, $E0
0000BD8C 300C 1800 00               		dc.b $30, $C, $18, 0, 0
0000BD92 00                         		even
0000BD92 00                         		even
0000BD92                            
0000BD92                            ; ===========================================================================
0000BD92                            ; ---------------------------------------------------------------------------
0000BD92                            ; Object 31 - stomping metal blocks on chains (MZ)
0000BD92                            ; ---------------------------------------------------------------------------
0000BD92                            
0000BD92                            Obj31:					; XREF: Obj_Index
0000BD92 7000                       		moveq	#0,d0
0000BD94 1028 0024                  		move.b	$24(a0),d0
0000BD98 323B 0000                  		move.w	Obj31_Index(pc,d0.w),d1
0000BD9C 4EFB 1000                  		jmp	Obj31_Index(pc,d1.w)
0000BDA0                            ; ===========================================================================
0000BDA0 0000                       Obj31_Index:	dc.w Obj31_Main-Obj31_Index
0000BDA2 0000                       		dc.w loc_B798-Obj31_Index
0000BDA4 0000                       		dc.w loc_B7FE-Obj31_Index
0000BDA6 0000                       		dc.w Obj31_Display2-Obj31_Index
0000BDA8 0000                       		dc.w loc_B7E2-Obj31_Index
0000BDAA                            
0000BDAA 0000                       Obj31_SwchNums:	dc.b 0,	0		; switch number, obj number
0000BDAC 0100                       		dc.b 1,	0
0000BDAE                            
0000BDAE 0200 00                    Obj31_Var:	dc.b 2,	0, 0		; XREF: ROM:0000B6E0o
0000BDB1 041C 01                    		dc.b 4,	$1C, 1		; routine number, y-position, frame number
0000BDB4 08CC 03                    		dc.b 8,	$CC, 3
0000BDB7 06F0 02                    		dc.b 6,	$F0, 2
0000BDBA                            
0000BDBA 7000 A000                  word_B6A4:	dc.w $7000, $A000
0000BDBE 5000 7800                  		dc.w $5000, $7800
0000BDC2 3800 5800                  		dc.w $3800, $5800
0000BDC6 B800                       		dc.w $B800
0000BDC8                            ; ===========================================================================
0000BDC8                            
0000BDC8                            Obj31_Main:				; XREF: Obj31_Index
0000BDC8 7000                       		moveq	#0,d0
0000BDCA 1028 0028                  		move.b	$28(a0),d0
0000BDCE 6A00                       		bpl.s	loc_B6CE
0000BDD0 0240 007F                  		andi.w	#$7F,d0
0000BDD4 D040                       		add.w	d0,d0
0000BDD6 45FB 00D2                  		lea	Obj31_SwchNums(pc,d0.w),a2
0000BDDA 115A 003A                  		move.b	(a2)+,$3A(a0)
0000BDDE 101A                       		move.b	(a2)+,d0
0000BDE0 1140 0028                  		move.b	d0,$28(a0)
0000BDE4                            
0000BDE4                            loc_B6CE:
0000BDE4 0200 000F                  		andi.b	#$F,d0
0000BDE8 D040                       		add.w	d0,d0
0000BDEA 343B 00CE                  		move.w	word_B6A4(pc,d0.w),d2
0000BDEE 4A40                       		tst.w	d0
0000BDF0 6600                       		bne.s	loc_B6E0
0000BDF2 3142 0032                  		move.w	d2,$32(a0)
0000BDF6                            
0000BDF6                            loc_B6E0:
0000BDF6 45F9 0000 BDAE             		lea	(Obj31_Var).l,a2
0000BDFC 2248                       		movea.l	a0,a1
0000BDFE 7203                       		moveq	#3,d1
0000BE00 6000                       		bra.s	Obj31_MakeStomper
0000BE02                            ; ===========================================================================
0000BE02                            
0000BE02                            Obj31_Loop:
0000BE02 6100 0000                  		bsr.w	SingleObjLoad2
0000BE06 6600 0000                  		bne.w	Obj31_SetSize
0000BE0A                            
0000BE0A                            Obj31_MakeStomper:			; XREF: Obj31_Main
0000BE0A 135A 0024                  		move.b	(a2)+,$24(a1)
0000BE0E 12BC 0031                  		move.b	#$31,0(a1)
0000BE12 3368 0008 0008             		move.w	8(a0),8(a1)
0000BE18 101A                       		move.b	(a2)+,d0
0000BE1A 4880                       		ext.w	d0
0000BE1C D068 000C                  		add.w	$C(a0),d0
0000BE20 3340 000C                  		move.w	d0,$C(a1)
0000BE24 237C 0000 0000 0004        		move.l	#Map_obj31,4(a1)
0000BE2C 337C 0300 0002             		move.w	#$300,2(a1)
0000BE32 137C 0004 0001             		move.b	#4,1(a1)
0000BE38 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000BE3E 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000BE44 137C 0010 0019             		move.b	#$10,$19(a1)
0000BE4A 3342 0034                  		move.w	d2,$34(a1)
0000BE4E 137C 0004 0018             		move.b	#4,$18(a1)
0000BE54 135A 001A                  		move.b	(a2)+,$1A(a1)
0000BE58 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
0000BE5E 6600                       		bne.s	loc_B76A
0000BE60 5341                       		subq.w	#1,d1
0000BE62 1028 0028                  		move.b	$28(a0),d0
0000BE66 0240 00F0                  		andi.w	#$F0,d0
0000BE6A 0C40 0020                  		cmpi.w	#$20,d0
0000BE6E 679A                       		beq.s	Obj31_MakeStomper
0000BE70 137C 0038 0019             		move.b	#$38,$19(a1)
0000BE76 137C 0090 0020             		move.b	#$90,$20(a1)
0000BE7C 5241                       		addq.w	#1,d1
0000BE7E                            
0000BE7E                            loc_B76A:
0000BE7E 2348 003C                  		move.l	a0,$3C(a1)
0000BE82 51C9 FF7E                  		dbf	d1,Obj31_Loop
0000BE86                            
0000BE86 137C 0003 0018             		move.b	#3,$18(a1)
0000BE8C                            
0000BE8C                            Obj31_SetSize:
0000BE8C 7000                       		moveq	#0,d0
0000BE8E 1028 0028                  		move.b	$28(a0),d0
0000BE92 E648                       		lsr.w	#3,d0
0000BE94 0200 000E                  		andi.b	#$E,d0
0000BE98 45FB 0000                  		lea	Obj31_Var2(pc,d0.w),a2
0000BE9C 115A 0019                  		move.b	(a2)+,$19(a0)
0000BEA0 115A 001A                  		move.b	(a2)+,$1A(a0)
0000BEA4 6000                       		bra.s	loc_B798
0000BEA6                            ; ===========================================================================
0000BEA6 3800                       Obj31_Var2:	dc.b $38, 0		; width, frame number
0000BEA8 3009                       		dc.b $30, 9
0000BEAA 100A                       		dc.b $10, $A
0000BEAC                            ; ===========================================================================
0000BEAC                            
0000BEAC                            loc_B798:				; XREF: Obj31_Index
0000BEAC 6100 0000                  		bsr.w	Obj31_Types
0000BEB0 31E8 000C F7A4             		move.w	$C(a0),($FFFFF7A4).w
0000BEB6 7200                       		moveq	#0,d1
0000BEB8 1228 0019                  		move.b	$19(a0),d1
0000BEBC 0641 000B                  		addi.w	#$B,d1
0000BEC0 343C 000C                  		move.w	#$C,d2
0000BEC4 363C 000D                  		move.w	#$D,d3
0000BEC8 3828 0008                  		move.w	8(a0),d4
0000BECC 6100 0000                  		bsr.w	SolidObject
0000BED0 0828 0003 0022             		btst	#3,$22(a0)
0000BED6 6700                       		beq.s	Obj31_Display
0000BED8 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000BEDE 6400                       		bcc.s	Obj31_Display
0000BEE0 2448                       		movea.l	a0,a2
0000BEE2 41F8 D000                  		lea	($FFFFD000).w,a0
0000BEE6 4EB9 0000 0000             		jsr	KillSonic
0000BEEC 204A                       		movea.l	a2,a0
0000BEEE                            
0000BEEE                            Obj31_Display:
0000BEEE 6100 0000                  		bsr.w	DisplaySprite
0000BEF2 6000 0000                  		bra.w	Obj31_ChkDel
0000BEF6                            ; ===========================================================================
0000BEF6                            
0000BEF6                            loc_B7E2:				; XREF: Obj31_Index
0000BEF6 117C 0080 0016             		move.b	#$80,$16(a0)
0000BEFC 08E8 0004 0001             		bset	#4,1(a0)
0000BF02 2268 003C                  		movea.l	$3C(a0),a1
0000BF06 1029 0032                  		move.b	$32(a1),d0
0000BF0A EA08                       		lsr.b	#5,d0
0000BF0C 5600                       		addq.b	#3,d0
0000BF0E 1140 001A                  		move.b	d0,$1A(a0)
0000BF12                            
0000BF12                            loc_B7FE:				; XREF: Obj31_Index
0000BF12 2268 003C                  		movea.l	$3C(a0),a1
0000BF16 7000                       		moveq	#0,d0
0000BF18 1029 0032                  		move.b	$32(a1),d0
0000BF1C D068 0030                  		add.w	$30(a0),d0
0000BF20 3140 000C                  		move.w	d0,$C(a0)
0000BF24                            
0000BF24                            Obj31_Display2:				; XREF: Obj31_Index
0000BF24 6100 0000                  		bsr.w	DisplaySprite
0000BF28                            
0000BF28                            Obj31_ChkDel:				; XREF: Obj31_Display
0000BF28 3028 0008                  		move.w	8(a0),d0
0000BF2C 0240 FF80                  		andi.w	#$FF80,d0
0000BF30 3238 F700                  		move.w	($FFFFF700).w,d1
0000BF34 0441 0080                  		subi.w	#$80,d1
0000BF38 0241 FF80                  		andi.w	#$FF80,d1
0000BF3C 9041                       		sub.w	d1,d0
0000BF3E 0C40 0280                  		cmpi.w	#$280,d0
0000BF42 6200 0000                  		bhi.w	DeleteObject
0000BF46 4E75                       		rts	
0000BF48                            ; ===========================================================================
0000BF48                            
0000BF48                            Obj31_Types:				; XREF: loc_B798
0000BF48 1028 0028                  		move.b	$28(a0),d0
0000BF4C 0240 000F                  		andi.w	#$F,d0
0000BF50 D040                       		add.w	d0,d0
0000BF52 323B 0000                  		move.w	Obj31_TypeIndex(pc,d0.w),d1
0000BF56 4EFB 1000                  		jmp	Obj31_TypeIndex(pc,d1.w)
0000BF5A                            ; ===========================================================================
0000BF5A 0000                       Obj31_TypeIndex:dc.w Obj31_Type00-Obj31_TypeIndex
0000BF5C 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BF5E 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BF60 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000BF62 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BF64 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000BF66 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BF68                            ; ===========================================================================
0000BF68                            
0000BF68                            Obj31_Type00:				; XREF: Obj31_TypeIndex
0000BF68 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
0000BF6C 7000                       		moveq	#0,d0
0000BF6E 1028 003A                  		move.b	$3A(a0),d0	; move number 0	or 1 to	d0
0000BF72 4A32 0000                  		tst.b	(a2,d0.w)	; has switch (d0) been pressed?
0000BF76 6700                       		beq.s	loc_B8A8	; if not, branch
0000BF78 4A78 F7A4                  		tst.w	($FFFFF7A4).w
0000BF7C 6A00                       		bpl.s	loc_B872
0000BF7E 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000BF84 6700                       		beq.s	loc_B8A0
0000BF86                            
0000BF86                            loc_B872:
0000BF86 4A68 0032                  		tst.w	$32(a0)
0000BF8A 6700                       		beq.s	loc_B8A0
0000BF8C 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000BF90 0200 000F                  		andi.b	#$F,d0
0000BF94 6600                       		bne.s	loc_B892
0000BF96 4A28 0001                  		tst.b	1(a0)
0000BF9A 6A00                       		bpl.s	loc_B892
0000BF9C 303C 00C7                  		move.w	#$C7,d0
0000BFA0 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000BFA6                            
0000BFA6                            loc_B892:
0000BFA6 0468 0080 0032             		subi.w	#$80,$32(a0)
0000BFAC 6400                       		bcc.s	Obj31_Restart
0000BFAE 317C 0000 0032             		move.w	#0,$32(a0)
0000BFB4                            
0000BFB4                            loc_B8A0:
0000BFB4 317C 0000 0012             		move.w	#0,$12(a0)
0000BFBA 6000                       		bra.s	Obj31_Restart
0000BFBC                            ; ===========================================================================
0000BFBC                            
0000BFBC                            loc_B8A8:				; XREF: Obj31_Type00
0000BFBC 3228 0034                  		move.w	$34(a0),d1
0000BFC0 B268 0032                  		cmp.w	$32(a0),d1
0000BFC4 6700                       		beq.s	Obj31_Restart
0000BFC6 3028 0012                  		move.w	$12(a0),d0
0000BFCA 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000BFD0 D168 0032                  		add.w	d0,$32(a0)
0000BFD4 B268 0032                  		cmp.w	$32(a0),d1
0000BFD8 6200                       		bhi.s	Obj31_Restart
0000BFDA 3141 0032                  		move.w	d1,$32(a0)
0000BFDE 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000BFE4 4A28 0001                  		tst.b	1(a0)
0000BFE8 6A00                       		bpl.s	Obj31_Restart
0000BFEA 303C 00BD                  		move.w	#$BD,d0
0000BFEE 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play stomping sound
0000BFF4                            
0000BFF4                            Obj31_Restart:
0000BFF4 7000                       		moveq	#0,d0
0000BFF6 1028 0032                  		move.b	$32(a0),d0
0000BFFA D068 0030                  		add.w	$30(a0),d0
0000BFFE 3140 000C                  		move.w	d0,$C(a0)
0000C002 4E75                       		rts	
0000C004                            ; ===========================================================================
0000C004                            
0000C004                            Obj31_Type01:				; XREF: Obj31_TypeIndex
0000C004 4A68 0036                  		tst.w	$36(a0)
0000C008 6700                       		beq.s	loc_B938
0000C00A 4A68 0038                  		tst.w	$38(a0)
0000C00E 6700                       		beq.s	loc_B902
0000C010 5368 0038                  		subq.w	#1,$38(a0)
0000C014 6000                       		bra.s	loc_B97C
0000C016                            ; ===========================================================================
0000C016                            
0000C016                            loc_B902:
0000C016 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000C01A 0200 000F                  		andi.b	#$F,d0
0000C01E 6600                       		bne.s	loc_B91C
0000C020 4A28 0001                  		tst.b	1(a0)
0000C024 6A00                       		bpl.s	loc_B91C
0000C026 303C 00C7                  		move.w	#$C7,d0
0000C02A 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000C030                            
0000C030                            loc_B91C:
0000C030 0468 0080 0032             		subi.w	#$80,$32(a0)
0000C036 6400                       		bcc.s	loc_B97C
0000C038 317C 0000 0032             		move.w	#0,$32(a0)
0000C03E 317C 0000 0012             		move.w	#0,$12(a0)
0000C044 317C 0000 0036             		move.w	#0,$36(a0)
0000C04A 6000                       		bra.s	loc_B97C
0000C04C                            ; ===========================================================================
0000C04C                            
0000C04C                            loc_B938:				; XREF: Obj31_Type01
0000C04C 3228 0034                  		move.w	$34(a0),d1
0000C050 B268 0032                  		cmp.w	$32(a0),d1
0000C054 6700                       		beq.s	loc_B97C
0000C056 3028 0012                  		move.w	$12(a0),d0
0000C05A 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000C060 D168 0032                  		add.w	d0,$32(a0)
0000C064 B268 0032                  		cmp.w	$32(a0),d1
0000C068 6200                       		bhi.s	loc_B97C
0000C06A 3141 0032                  		move.w	d1,$32(a0)
0000C06E 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000C074 317C 0001 0036             		move.w	#1,$36(a0)
0000C07A 317C 003C 0038             		move.w	#$3C,$38(a0)
0000C080 4A28 0001                  		tst.b	1(a0)
0000C084 6A00                       		bpl.s	loc_B97C
0000C086 303C 00BD                  		move.w	#$BD,d0
0000C08A 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play stomping sound
0000C090                            
0000C090                            loc_B97C:
0000C090 6000 FF62                  		bra.w	Obj31_Restart
0000C094                            ; ===========================================================================
0000C094                            
0000C094                            Obj31_Type03:				; XREF: Obj31_TypeIndex
0000C094 3038 D008                  		move.w	($FFFFD008).w,d0
0000C098 9068 0008                  		sub.w	8(a0),d0
0000C09C 6400                       		bcc.s	loc_B98C
0000C09E 4440                       		neg.w	d0
0000C0A0                            
0000C0A0                            loc_B98C:
0000C0A0 0C40 0090                  		cmpi.w	#$90,d0
0000C0A4 6400                       		bcc.s	loc_B996
0000C0A6 5228 0028                  		addq.b	#1,$28(a0)
0000C0AA                            
0000C0AA                            loc_B996:
0000C0AA 6000 FF48                  		bra.w	Obj31_Restart
0000C0AE                            ; ===========================================================================
0000C0AE                            ; ---------------------------------------------------------------------------
0000C0AE                            ; Object 45 - spiked metal block from beta version (MZ)
0000C0AE                            ; ---------------------------------------------------------------------------
0000C0AE                            
0000C0AE                            Obj45:					; XREF: Obj_Index
0000C0AE 7000                       		moveq	#0,d0
0000C0B0 1028 0024                  		move.b	$24(a0),d0
0000C0B4 323B 0000                  		move.w	Obj45_Index(pc,d0.w),d1
0000C0B8 4EFB 1000                  		jmp	Obj45_Index(pc,d1.w)
0000C0BC                            ; ===========================================================================
0000C0BC 0000                       Obj45_Index:	dc.w Obj45_Main-Obj45_Index
0000C0BE 0000                       		dc.w Obj45_Solid-Obj45_Index
0000C0C0 0000                       		dc.w loc_BA8E-Obj45_Index
0000C0C2 0000                       		dc.w Obj45_Display-Obj45_Index
0000C0C4 0000                       		dc.w loc_BA7A-Obj45_Index
0000C0C6                            
0000C0C6 0204 00                    Obj45_Var:	dc.b	2,   4,	  0	; routine number, x-position, frame number
0000C0C9 04E4 01                    		dc.b	4, $E4,	  1
0000C0CC 0834 03                    		dc.b	8, $34,	  3
0000C0CF 0628 02                    		dc.b	6, $28,	  2
0000C0D2                            
0000C0D2 3800                       word_B9BE:	dc.w $3800
0000C0D4 A000                       		dc.w -$6000
0000C0D6 5000                       		dc.w $5000
0000C0D8                            ; ===========================================================================
0000C0D8                            
0000C0D8                            Obj45_Main:				; XREF: Obj45_Index
0000C0D8 7000                       		moveq	#0,d0
0000C0DA 1028 0028                  		move.b	$28(a0),d0
0000C0DE D040                       		add.w	d0,d0
0000C0E0 343B 00F0                  		move.w	word_B9BE(pc,d0.w),d2
0000C0E4 45F9 0000 C0C6             		lea	(Obj45_Var).l,a2
0000C0EA 2248                       		movea.l	a0,a1
0000C0EC 7203                       		moveq	#3,d1
0000C0EE 6000                       		bra.s	Obj45_Load
0000C0F0                            ; ===========================================================================
0000C0F0                            
0000C0F0                            Obj45_Loop:
0000C0F0 6100 0000                  		bsr.w	SingleObjLoad2
0000C0F4 6600                       		bne.s	loc_BA52
0000C0F6                            
0000C0F6                            Obj45_Load:				; XREF: Obj45_Main
0000C0F6 135A 0024                  		move.b	(a2)+,$24(a1)
0000C0FA 12BC 0045                  		move.b	#$45,0(a1)
0000C0FE 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000C104 101A                       		move.b	(a2)+,d0
0000C106 4880                       		ext.w	d0
0000C108 D068 0008                  		add.w	8(a0),d0
0000C10C 3340 0008                  		move.w	d0,8(a1)
0000C110 237C 0000 0000 0004        		move.l	#Map_obj45,4(a1)
0000C118 337C 0300 0002             		move.w	#$300,2(a1)
0000C11E 137C 0004 0001             		move.b	#4,1(a1)
0000C124 3369 0008 0030             		move.w	8(a1),$30(a1)
0000C12A 3368 0008 003A             		move.w	8(a0),$3A(a1)
0000C130 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000C136 137C 0020 0019             		move.b	#$20,$19(a1)
0000C13C 3342 0034                  		move.w	d2,$34(a1)
0000C140 137C 0004 0018             		move.b	#4,$18(a1)
0000C146 0C12 0001                  		cmpi.b	#1,(a2)
0000C14A 6600                       		bne.s	loc_BA40
0000C14C 137C 0091 0020             		move.b	#$91,$20(a1)
0000C152                            
0000C152                            loc_BA40:
0000C152 135A 001A                  		move.b	(a2)+,$1A(a1)
0000C156 2348 003C                  		move.l	a0,$3C(a1)
0000C15A 51C9 FF94                  		dbf	d1,Obj45_Loop	; repeat 3 times
0000C15E                            
0000C15E 137C 0003 0018             		move.b	#3,$18(a1)
0000C164                            
0000C164                            loc_BA52:
0000C164 117C 0010 0019             		move.b	#$10,$19(a0)
0000C16A                            
0000C16A                            Obj45_Solid:				; XREF: Obj45_Index
0000C16A 3F28 0008                  		move.w	8(a0),-(sp)
0000C16E 6100 0000                  		bsr.w	Obj45_Move
0000C172 323C 0017                  		move.w	#$17,d1
0000C176 343C 0020                  		move.w	#$20,d2
0000C17A 363C 0020                  		move.w	#$20,d3
0000C17E 381F                       		move.w	(sp)+,d4
0000C180 6100 0000                  		bsr.w	SolidObject
0000C184 6100 0000                  		bsr.w	DisplaySprite
0000C188 6000 0000                  		bra.w	Obj45_ChkDel
0000C18C                            ; ===========================================================================
0000C18C                            
0000C18C                            loc_BA7A:				; XREF: Obj45_Index
0000C18C 2268 003C                  		movea.l	$3C(a0),a1
0000C190 1029 0032                  		move.b	$32(a1),d0
0000C194 0600 0010                  		addi.b	#$10,d0
0000C198 EA08                       		lsr.b	#5,d0
0000C19A 5600                       		addq.b	#3,d0
0000C19C 1140 001A                  		move.b	d0,$1A(a0)
0000C1A0                            
0000C1A0                            loc_BA8E:				; XREF: Obj45_Index
0000C1A0 2268 003C                  		movea.l	$3C(a0),a1
0000C1A4 7000                       		moveq	#0,d0
0000C1A6 1029 0032                  		move.b	$32(a1),d0
0000C1AA 4440                       		neg.w	d0
0000C1AC D068 0030                  		add.w	$30(a0),d0
0000C1B0 3140 0008                  		move.w	d0,8(a0)
0000C1B4                            
0000C1B4                            Obj45_Display:				; XREF: Obj45_Index
0000C1B4 6100 0000                  		bsr.w	DisplaySprite
0000C1B8                            
0000C1B8                            Obj45_ChkDel:				; XREF: Obj45_Solid
0000C1B8 3028 003A                  		move.w	$3A(a0),d0
0000C1BC 0240 FF80                  		andi.w	#$FF80,d0
0000C1C0 3238 F700                  		move.w	($FFFFF700).w,d1
0000C1C4 0441 0080                  		subi.w	#$80,d1
0000C1C8 0241 FF80                  		andi.w	#$FF80,d1
0000C1CC 9041                       		sub.w	d1,d0
0000C1CE 0C40 0280                  		cmpi.w	#$280,d0
0000C1D2 6200 0000                  		bhi.w	DeleteObject
0000C1D6 4E75                       		rts	
0000C1D8                            
0000C1D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C1D8                            
0000C1D8                            
0000C1D8                            Obj45_Move:				; XREF: Obj45_Solid
0000C1D8 7000                       		moveq	#0,d0
0000C1DA 1028 0028                  		move.b	$28(a0),d0
0000C1DE D040                       		add.w	d0,d0
0000C1E0 323B 0000                  		move.w	off_BAD6(pc,d0.w),d1
0000C1E4 4EFB 1000                  		jmp	off_BAD6(pc,d1.w)
0000C1E8                            ; End of function Obj45_Move
0000C1E8                            
0000C1E8                            ; ===========================================================================
0000C1E8 0000                       off_BAD6:	dc.w loc_BADA-off_BAD6
0000C1EA 0000                       		dc.w loc_BADA-off_BAD6
0000C1EC                            ; ===========================================================================
0000C1EC                            
0000C1EC                            loc_BADA:				; XREF: off_BAD6
0000C1EC 4A68 0036                  		tst.w	$36(a0)
0000C1F0 6700                       		beq.s	loc_BB08
0000C1F2 4A68 0038                  		tst.w	$38(a0)
0000C1F6 6700                       		beq.s	loc_BAEC
0000C1F8 5368 0038                  		subq.w	#1,$38(a0)
0000C1FC 6000                       		bra.s	loc_BB3C
0000C1FE                            ; ===========================================================================
0000C1FE                            
0000C1FE                            loc_BAEC:
0000C1FE 0468 0080 0032             		subi.w	#$80,$32(a0)
0000C204 6400                       		bcc.s	loc_BB3C
0000C206 317C 0000 0032             		move.w	#0,$32(a0)
0000C20C 317C 0000 0010             		move.w	#0,$10(a0)
0000C212 317C 0000 0036             		move.w	#0,$36(a0)
0000C218 6000                       		bra.s	loc_BB3C
0000C21A                            ; ===========================================================================
0000C21A                            
0000C21A                            loc_BB08:				; XREF: loc_BADA
0000C21A 3228 0034                  		move.w	$34(a0),d1
0000C21E B268 0032                  		cmp.w	$32(a0),d1
0000C222 6700                       		beq.s	loc_BB3C
0000C224 3028 0010                  		move.w	$10(a0),d0
0000C228 0668 0070 0010             		addi.w	#$70,$10(a0)
0000C22E D168 0032                  		add.w	d0,$32(a0)
0000C232 B268 0032                  		cmp.w	$32(a0),d1
0000C236 6200                       		bhi.s	loc_BB3C
0000C238 3141 0032                  		move.w	d1,$32(a0)
0000C23C 317C 0000 0010             		move.w	#0,$10(a0)
0000C242 317C 0001 0036             		move.w	#1,$36(a0)
0000C248 317C 003C 0038             		move.w	#$3C,$38(a0)
0000C24E                            
0000C24E                            loc_BB3C:
0000C24E 7000                       		moveq	#0,d0
0000C250 1028 0032                  		move.b	$32(a0),d0
0000C254 4440                       		neg.w	d0
0000C256 D068 0030                  		add.w	$30(a0),d0
0000C25A 3140 0008                  		move.w	d0,8(a0)
0000C25E 4E75                       		rts	
0000C260                            ; ===========================================================================
0000C260                            ; ---------------------------------------------------------------------------
0000C260                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000C260                            ; ---------------------------------------------------------------------------
0000C260                            Map_obj31:
0000C260                            	include "_maps\obj31.asm"
0000C260                            ; ---------------------------------------------------------------------------
0000C260                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000C260                            ; ---------------------------------------------------------------------------
0000C260 0000                       		dc.w byte_BB64-Map_obj31
0000C262 0000                       		dc.w byte_BB7E-Map_obj31
0000C264 0000                       		dc.w byte_BB98-Map_obj31
0000C266 0000                       		dc.w byte_BB9E-Map_obj31
0000C268 0000                       		dc.w byte_BBA9-Map_obj31
0000C26A 0000                       		dc.w byte_BBBE-Map_obj31
0000C26C 0000                       		dc.w byte_BBDD-Map_obj31
0000C26E 0000                       		dc.w byte_BC06-Map_obj31
0000C270 0000                       		dc.w byte_BC06-Map_obj31
0000C272 0000                       		dc.w byte_BC39-Map_obj31
0000C274 0000                       		dc.w byte_BC53-Map_obj31
0000C276 05                         byte_BB64:	dc.b 5
0000C277 F406 0000 C8               		dc.b $F4, 6, 0,	0, $C8
0000C27C F40A 0006 D8               		dc.b $F4, $A, 0, 6, $D8
0000C281 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000C286 F40A 0806 10               		dc.b $F4, $A, 8, 6, $10
0000C28B F406 0800 28               		dc.b $F4, 6, 8,	0, $28
0000C290 05                         byte_BB7E:	dc.b 5
0000C291 F003 121F D4               		dc.b $F0, 3, $12, $1F, $D4
0000C296 F003 121F E8               		dc.b $F0, 3, $12, $1F, $E8
0000C29B F003 121F FC               		dc.b $F0, 3, $12, $1F, $FC
0000C2A0 F003 121F 10               		dc.b $F0, 3, $12, $1F, $10
0000C2A5 F003 121F 24               		dc.b $F0, 3, $12, $1F, $24
0000C2AA 01                         byte_BB98:	dc.b 1
0000C2AB DC0F 100F F0               		dc.b $DC, $F, $10, $F, $F0
0000C2B0 02                         byte_BB9E:	dc.b 2
0000C2B1 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C2B6 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C2BB 04                         byte_BBA9:	dc.b 4
0000C2BC E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C2C1 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C2C6 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C2CB 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C2D0 06                         byte_BBBE:	dc.b 6
0000C2D1 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C2D6 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C2DB E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C2E0 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C2E5 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C2EA 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C2EF 08                         byte_BBDD:	dc.b 8
0000C2F0 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000C2F5 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000C2FA C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C2FF D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C304 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C309 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C30E 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C313 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C318 0A                         byte_BC06:	dc.b $A
0000C319 8001 003F FC               		dc.b $80, 1, 0,	$3F, $FC
0000C31E 9001 003F FC               		dc.b $90, 1, 0,	$3F, $FC
0000C323 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000C328 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000C32D C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C332 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C337 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C33C F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C341 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C346 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C34B 05                         byte_BC39:	dc.b 5
0000C34C F406 0000 D0               		dc.b $F4, 6, 0,	0, $D0
0000C351 F40A 0006 E0               		dc.b $F4, $A, 0, 6, $E0
0000C356 F40A 0806 08               		dc.b $F4, $A, 8, 6, 8
0000C35B F406 0800 20               		dc.b $F4, 6, 8,	0, $20
0000C360 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000C365 01                         byte_BC53:	dc.b 1
0000C366 EC0F 002F F0               		dc.b $EC, $F, 0, $2F, $F0
0000C36C 00                         		even
0000C36C 00                         		even
0000C36C                            
0000C36C                            ; ---------------------------------------------------------------------------
0000C36C                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000C36C                            ; ---------------------------------------------------------------------------
0000C36C                            Map_obj45:
0000C36C                            	include "_maps\obj45.asm"
0000C36C                            ; ---------------------------------------------------------------------------
0000C36C                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000C36C                            ; ---------------------------------------------------------------------------
0000C36C 0000                       		dc.w byte_BC6C-Map_obj45
0000C36E 0000                       		dc.w byte_BC7C-Map_obj45
0000C370 0000                       		dc.w byte_BC8C-Map_obj45
0000C372 0000                       		dc.w byte_BC92-Map_obj45
0000C374 0000                       		dc.w byte_BC9D-Map_obj45
0000C376 0000                       		dc.w byte_BCB2-Map_obj45
0000C378 0000                       		dc.w byte_BCD1-Map_obj45
0000C37A 0000                       		dc.w byte_BCFA-Map_obj45
0000C37C 0000                       		dc.w byte_BCFA-Map_obj45
0000C37E 03                         byte_BC6C:	dc.b 3
0000C37F E00B 001F F4               		dc.b $E0, $B, 0, $1F, $F4
0000C384 000B 101F F4               		dc.b 0,	$B, $10, $1F, $F4
0000C389 F003 002B 0C               		dc.b $F0, 3, 0,	$2B, $C
0000C38E 03                         byte_BC7C:	dc.b 3
0000C38F E80C 121B F0               		dc.b $E8, $C, $12, $1B,	$F0
0000C394 FC0C 121B F0               		dc.b $FC, $C, $12, $1B,	$F0
0000C399 100C 121B F0               		dc.b $10, $C, $12, $1B,	$F0
0000C39E 01                         byte_BC8C:	dc.b 1
0000C39F F003 082B FC               		dc.b $F0, 3, 8,	$2B, $FC
0000C3A4 02                         byte_BC92:	dc.b 2
0000C3A5 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C3AA F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C3AF 04                         byte_BC9D:	dc.b 4
0000C3B0 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C3B5 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C3BA F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C3BF F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C3C4 06                         byte_BCB2:	dc.b 6
0000C3C5 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C3CA F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C3CF F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C3D4 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C3D9 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C3DE F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C3E3 08                         byte_BCD1:	dc.b 8
0000C3E4 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C3E9 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C3EE F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C3F3 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C3F8 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C3FD F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C402 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000C407 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000C40C 08                         byte_BCFA:	dc.b 8
0000C40D F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C412 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C417 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C41C F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C421 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C426 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C42B F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000C430 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000C435 F805 0041 60               		dc.b $F8, 5, 0,	$41, $60
0000C43A F805 0041 70               		dc.b $F8, 5, 0,	$41, $70
0000C440 00                         		even
0000C440 00                         		even
0000C440                            
0000C440                            ; ===========================================================================
0000C440                            ; ---------------------------------------------------------------------------
0000C440                            ; Object 32 - switches (MZ, SYZ, LZ, SBZ)
0000C440                            ; ---------------------------------------------------------------------------
0000C440                            
0000C440                            Obj32:					; XREF: Obj_Index
0000C440 7000                       		moveq	#0,d0
0000C442 1028 0024                  		move.b	$24(a0),d0
0000C446 323B 0000                  		move.w	Obj32_Index(pc,d0.w),d1
0000C44A 4EFB 1000                  		jmp	Obj32_Index(pc,d1.w)
0000C44E                            ; ===========================================================================
0000C44E 0000                       Obj32_Index:	dc.w Obj32_Main-Obj32_Index
0000C450 0000                       		dc.w Obj32_Pressed-Obj32_Index
0000C452                            ; ===========================================================================
0000C452                            
0000C452                            Obj32_Main:				; XREF: Obj32_Index
0000C452 5428 0024                  		addq.b	#2,$24(a0)
0000C456 217C 0000 0000 0004        		move.l	#Map_obj32,4(a0)
0000C45E 317C 4513 0002             		move.w	#$4513,2(a0)	; MZ specific code
0000C464 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w
0000C46A 6700                       		beq.s	loc_BD60
0000C46C 317C 0513 0002             		move.w	#$513,2(a0)	; SYZ, LZ and SBZ specific code
0000C472                            
0000C472                            loc_BD60:
0000C472 117C 0004 0001             		move.b	#4,1(a0)
0000C478 117C 0010 0019             		move.b	#$10,$19(a0)
0000C47E 117C 0004 0018             		move.b	#4,$18(a0)
0000C484 5668 000C                  		addq.w	#3,$C(a0)
0000C488                            
0000C488                            Obj32_Pressed:				; XREF: Obj32_Index
0000C488 4A28 0001                  		tst.b	1(a0)
0000C48C 6A00                       		bpl.s	Obj32_Display
0000C48E 323C 001B                  		move.w	#$1B,d1
0000C492 343C 0005                  		move.w	#5,d2
0000C496 363C 0005                  		move.w	#5,d3
0000C49A 3828 0008                  		move.w	8(a0),d4
0000C49E 6100 0000                  		bsr.w	SolidObject
0000C4A2 08A8 0000 001A             		bclr	#0,$1A(a0)	; use "unpressed" frame
0000C4A8 1028 0028                  		move.b	$28(a0),d0
0000C4AC 0240 000F                  		andi.w	#$F,d0
0000C4B0 47F8 F7E0                  		lea	($FFFFF7E0).w,a3
0000C4B4 47F3 0000                  		lea	(a3,d0.w),a3
0000C4B8 7600                       		moveq	#0,d3
0000C4BA 0828 0006 0028             		btst	#6,$28(a0)
0000C4C0 6700                       		beq.s	loc_BDB2
0000C4C2 7607                       		moveq	#7,d3
0000C4C4                            
0000C4C4                            loc_BDB2:
0000C4C4 4A28 0028                  		tst.b	$28(a0)
0000C4C8 6A00                       		bpl.s	loc_BDBE
0000C4CA 6100 0000                  		bsr.w	Obj32_MZBlock
0000C4CE 6600                       		bne.s	loc_BDC8
0000C4D0                            
0000C4D0                            loc_BDBE:
0000C4D0 4A28 0025                  		tst.b	$25(a0)
0000C4D4 6600                       		bne.s	loc_BDC8
0000C4D6 0793                       		bclr	d3,(a3)
0000C4D8 6000                       		bra.s	loc_BDDE
0000C4DA                            ; ===========================================================================
0000C4DA                            
0000C4DA                            loc_BDC8:
0000C4DA 4A13                       		tst.b	(a3)
0000C4DC 6600                       		bne.s	loc_BDD6
0000C4DE 303C 00CD                  		move.w	#$CD,d0
0000C4E2 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play switch sound
0000C4E8                            
0000C4E8                            loc_BDD6:
0000C4E8 07D3                       		bset	d3,(a3)
0000C4EA 08E8 0000 001A             		bset	#0,$1A(a0)	; use "pressed"	frame
0000C4F0                            
0000C4F0                            loc_BDDE:
0000C4F0 0828 0005 0028             		btst	#5,$28(a0)
0000C4F6 6700                       		beq.s	Obj32_Display
0000C4F8 5328 001E                  		subq.b	#1,$1E(a0)
0000C4FC 6A00                       		bpl.s	Obj32_Display
0000C4FE 117C 0007 001E             		move.b	#7,$1E(a0)
0000C504 0868 0001 001A             		bchg	#1,$1A(a0)
0000C50A                            
0000C50A                            Obj32_Display:
0000C50A 6100 0000                  		bsr.w	DisplaySprite
0000C50E 3028 0008                  		move.w	8(a0),d0
0000C512 0240 FF80                  		andi.w	#$FF80,d0
0000C516 3238 F700                  		move.w	($FFFFF700).w,d1
0000C51A 0441 0080                  		subi.w	#$80,d1
0000C51E 0241 FF80                  		andi.w	#$FF80,d1
0000C522 9041                       		sub.w	d1,d0
0000C524 0C40 0280                  		cmpi.w	#$280,d0
0000C528 6200 0000                  		bhi.w	Obj32_Delete
0000C52C 4E75                       		rts	
0000C52E                            ; ===========================================================================
0000C52E                            
0000C52E                            Obj32_Delete:
0000C52E 6100 0000                  		bsr.w	DeleteObject
0000C532 4E75                       		rts	
0000C534                            
0000C534                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C534                            
0000C534                            
0000C534                            Obj32_MZBlock:				; XREF: Obj32_Pressed
0000C534 3F03                       		move.w	d3,-(sp)
0000C536 3428 0008                  		move.w	8(a0),d2
0000C53A 3628 000C                  		move.w	$C(a0),d3
0000C53E 0442 0010                  		subi.w	#$10,d2
0000C542 5143                       		subq.w	#8,d3
0000C544 383C 0020                  		move.w	#$20,d4
0000C548 3A3C 0010                  		move.w	#$10,d5
0000C54C 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking object RAM
0000C550 3C3C 005F                  		move.w	#$5F,d6
0000C554                            
0000C554                            Obj32_MZLoop:
0000C554 4A29 0001                  		tst.b	1(a1)
0000C558 6A00                       		bpl.s	loc_BE4E
0000C55A 0C11 0033                  		cmpi.b	#$33,(a1)	; is the object	a green	MZ block?
0000C55E 6700                       		beq.s	loc_BE5E	; if yes, branch
0000C560                            
0000C560                            loc_BE4E:
0000C560 43E9 0040                  		lea	$40(a1),a1	; check	next object
0000C564 51CE FFEE                  		dbf	d6,Obj32_MZLoop	; repeat $5F times
0000C568                            
0000C568 361F                       		move.w	(sp)+,d3
0000C56A 7000                       		moveq	#0,d0
0000C56C                            
0000C56C                            locret_BE5A:
0000C56C 4E75                       		rts	
0000C56E                            ; ===========================================================================
0000C56E 1010                       Obj32_MZData:	dc.b $10, $10
0000C570                            ; ===========================================================================
0000C570                            
0000C570                            loc_BE5E:				; XREF: Obj32_MZBlock
0000C570 7001                       		moveq	#1,d0
0000C572 0240 003F                  		andi.w	#$3F,d0
0000C576 D040                       		add.w	d0,d0
0000C578 45FB 00F2                  		lea	Obj32_MZData-2(pc,d0.w),a2
0000C57C 121A                       		move.b	(a2)+,d1
0000C57E 4881                       		ext.w	d1
0000C580 3029 0008                  		move.w	8(a1),d0
0000C584 9041                       		sub.w	d1,d0
0000C586 9042                       		sub.w	d2,d0
0000C588 6400                       		bcc.s	loc_BE80
0000C58A D241                       		add.w	d1,d1
0000C58C D041                       		add.w	d1,d0
0000C58E 6500                       		bcs.s	loc_BE84
0000C590 60CE                       		bra.s	loc_BE4E
0000C592                            ; ===========================================================================
0000C592                            
0000C592                            loc_BE80:
0000C592 B044                       		cmp.w	d4,d0
0000C594 62CA                       		bhi.s	loc_BE4E
0000C596                            
0000C596                            loc_BE84:
0000C596 121A                       		move.b	(a2)+,d1
0000C598 4881                       		ext.w	d1
0000C59A 3029 000C                  		move.w	$C(a1),d0
0000C59E 9041                       		sub.w	d1,d0
0000C5A0 9043                       		sub.w	d3,d0
0000C5A2 6400                       		bcc.s	loc_BE9A
0000C5A4 D241                       		add.w	d1,d1
0000C5A6 D041                       		add.w	d1,d0
0000C5A8 6500                       		bcs.s	loc_BE9E
0000C5AA 60B4                       		bra.s	loc_BE4E
0000C5AC                            ; ===========================================================================
0000C5AC                            
0000C5AC                            loc_BE9A:
0000C5AC B045                       		cmp.w	d5,d0
0000C5AE 62B0                       		bhi.s	loc_BE4E
0000C5B0                            
0000C5B0                            loc_BE9E:
0000C5B0 361F                       		move.w	(sp)+,d3
0000C5B2 7001                       		moveq	#1,d0
0000C5B4 4E75                       		rts	
0000C5B6                            ; End of function Obj32_MZBlock
0000C5B6                            
0000C5B6                            ; ===========================================================================
0000C5B6                            ; ---------------------------------------------------------------------------
0000C5B6                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000C5B6                            ; ---------------------------------------------------------------------------
0000C5B6                            Map_obj32:
0000C5B6                            	include "_maps\obj32.asm"
0000C5B6                            ; ---------------------------------------------------------------------------
0000C5B6                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000C5B6                            ; ---------------------------------------------------------------------------
0000C5B6 0000                       		dc.w byte_BEAC-Map_obj32
0000C5B8 0000                       		dc.w byte_BEB7-Map_obj32
0000C5BA 0000                       		dc.w byte_BEC2-Map_obj32
0000C5BC 0000                       		dc.w byte_BEB7-Map_obj32
0000C5BE 02                         byte_BEAC:	dc.b 2
0000C5BF F505 0000 F0               		dc.b $F5, 5, 0,	0, $F0
0000C5C4 F505 0800 00               		dc.b $F5, 5, 8,	0, 0
0000C5C9 02                         byte_BEB7:	dc.b 2
0000C5CA F505 0004 F0               		dc.b $F5, 5, 0,	4, $F0
0000C5CF F505 0804 00               		dc.b $F5, 5, 8,	4, 0
0000C5D4 02                         byte_BEC2:	dc.b 2
0000C5D5 F505 FFFC F0               		dc.b $F5, 5, $FF, $FC, $F0
0000C5DA F505 07FC 00               		dc.b $F5, 5, 7,	$FC, 0
0000C5DF F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000C5E4                            		even
0000C5E4                            		even
0000C5E4                            
0000C5E4                            ; ===========================================================================
0000C5E4                            ; ---------------------------------------------------------------------------
0000C5E4                            ; Object 33 - pushable blocks (MZ, LZ)
0000C5E4                            ; ---------------------------------------------------------------------------
0000C5E4                            
0000C5E4                            Obj33:					; XREF: Obj_Index
0000C5E4 7000                       		moveq	#0,d0
0000C5E6 1028 0024                  		move.b	$24(a0),d0
0000C5EA 323B 0000                  		move.w	Obj33_Index(pc,d0.w),d1
0000C5EE 4EFB 1000                  		jmp	Obj33_Index(pc,d1.w)
0000C5F2                            ; ===========================================================================
0000C5F2 0000                       Obj33_Index:	dc.w Obj33_Main-Obj33_Index
0000C5F4 0000                       		dc.w loc_BF6E-Obj33_Index
0000C5F6 0000                       		dc.w loc_C02C-Obj33_Index
0000C5F8                            
0000C5F8 1000                       Obj33_Var:	dc.b $10, 0	; object width,	frame number
0000C5FA 4001                       		dc.b $40, 1
0000C5FC                            ; ===========================================================================
0000C5FC                            
0000C5FC                            Obj33_Main:				; XREF: Obj33_Index
0000C5FC 5428 0024                  		addq.b	#2,$24(a0)
0000C600 117C 000F 0016             		move.b	#$F,$16(a0)
0000C606 117C 000F 0017             		move.b	#$F,$17(a0)
0000C60C 217C 0000 0000 0004        		move.l	#Map_obj33,4(a0)
0000C614 317C 42B8 0002             		move.w	#$42B8,2(a0)	; MZ specific code
0000C61A 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0000C620 6600                       		bne.s	loc_BF16
0000C622 317C 43DE 0002             		move.w	#$43DE,2(a0)	; LZ specific code
0000C628                            
0000C628                            loc_BF16:
0000C628 117C 0004 0001             		move.b	#4,1(a0)
0000C62E 117C 0003 0018             		move.b	#3,$18(a0)
0000C634 3168 0008 0034             		move.w	8(a0),$34(a0)
0000C63A 3168 000C 0036             		move.w	$C(a0),$36(a0)
0000C640 7000                       		moveq	#0,d0
0000C642 1028 0028                  		move.b	$28(a0),d0
0000C646 D040                       		add.w	d0,d0
0000C648 0240 000E                  		andi.w	#$E,d0
0000C64C 45FB 00AA                  		lea	Obj33_Var(pc,d0.w),a2
0000C650 115A 0019                  		move.b	(a2)+,$19(a0)
0000C654 115A 001A                  		move.b	(a2)+,$1A(a0)
0000C658 4A28 0028                  		tst.b	$28(a0)
0000C65C 6700                       		beq.s	Obj33_ChkGone
0000C65E 317C C2B8 0002             		move.w	#$C2B8,2(a0)
0000C664                            
0000C664                            Obj33_ChkGone:
0000C664 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000C668 7000                       		moveq	#0,d0
0000C66A 1028 0023                  		move.b	$23(a0),d0
0000C66E 6700                       		beq.s	loc_BF6E
0000C670 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000C676 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000C67C 6600 0000                  		bne.w	DeleteObject
0000C680                            
0000C680                            loc_BF6E:				; XREF: Obj33_Index
0000C680 4A28 0032                  		tst.b	$32(a0)
0000C684 6600 0000                  		bne.w	loc_C046
0000C688 7200                       		moveq	#0,d1
0000C68A 1228 0019                  		move.b	$19(a0),d1
0000C68E 0641 000B                  		addi.w	#$B,d1
0000C692 343C 0010                  		move.w	#$10,d2
0000C696 363C 0011                  		move.w	#$11,d3
0000C69A 3828 0008                  		move.w	8(a0),d4
0000C69E 6100 0000                  		bsr.w	loc_C186
0000C6A2 0C78 0200 FE10             		cmpi.w	#$200,($FFFFFE10).w ; is the level MZ act 1?
0000C6A8 6600                       		bne.s	loc_BFC6	; if not, branch
0000C6AA 08A8 0007 0028             		bclr	#7,$28(a0)
0000C6B0 3028 0008                  		move.w	8(a0),d0
0000C6B4 0C40 0A20                  		cmpi.w	#$A20,d0
0000C6B8 6500                       		bcs.s	loc_BFC6
0000C6BA 0C40 0AA1                  		cmpi.w	#$AA1,d0
0000C6BE 6400                       		bcc.s	loc_BFC6
0000C6C0 3038 F7A4                  		move.w	($FFFFF7A4).w,d0
0000C6C4 0440 001C                  		subi.w	#$1C,d0
0000C6C8 3140 000C                  		move.w	d0,$C(a0)
0000C6CC 08F8 0007 F7A4             		bset	#7,($FFFFF7A4).w
0000C6D2 08E8 0007 0028             		bset	#7,$28(a0)
0000C6D8                            
0000C6D8                            loc_BFC6:
0000C6D8 3028 0008                  		move.w	8(a0),d0
0000C6DC 0240 FF80                  		andi.w	#$FF80,d0
0000C6E0 3238 F700                  		move.w	($FFFFF700).w,d1
0000C6E4 0441 0080                  		subi.w	#$80,d1
0000C6E8 0241 FF80                  		andi.w	#$FF80,d1
0000C6EC 9041                       		sub.w	d1,d0
0000C6EE 0C40 0280                  		cmpi.w	#$280,d0
0000C6F2 6200                       		bhi.s	loc_BFE6
0000C6F4 6000 0000                  		bra.w	DisplaySprite
0000C6F8                            ; ===========================================================================
0000C6F8                            
0000C6F8                            loc_BFE6:
0000C6F8 3028 0034                  		move.w	$34(a0),d0
0000C6FC 0240 FF80                  		andi.w	#$FF80,d0
0000C700 3238 F700                  		move.w	($FFFFF700).w,d1
0000C704 0441 0080                  		subi.w	#$80,d1
0000C708 0241 FF80                  		andi.w	#$FF80,d1
0000C70C 9041                       		sub.w	d1,d0
0000C70E 0C40 0280                  		cmpi.w	#$280,d0
0000C712 6200                       		bhi.s	loc_C016
0000C714 3168 0034 0008             		move.w	$34(a0),8(a0)
0000C71A 3168 0036 000C             		move.w	$36(a0),$C(a0)
0000C720 117C 0004 0024             		move.b	#4,$24(a0)
0000C726 6000                       		bra.s	loc_C02C
0000C728                            ; ===========================================================================
0000C728                            
0000C728                            loc_C016:
0000C728 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000C72C 7000                       		moveq	#0,d0
0000C72E 1028 0023                  		move.b	$23(a0),d0
0000C732 6700                       		beq.s	loc_C028
0000C734 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0000C73A                            
0000C73A                            loc_C028:
0000C73A 6000 0000                  		bra.w	DeleteObject
0000C73E                            ; ===========================================================================
0000C73E                            
0000C73E                            loc_C02C:				; XREF: Obj33_Index
0000C73E 6100 0000                  		bsr.w	ChkObjOnScreen2
0000C742 6700                       		beq.s	locret_C044
0000C744 117C 0002 0024             		move.b	#2,$24(a0)
0000C74A 4228 0032                  		clr.b	$32(a0)
0000C74E 4268 0010                  		clr.w	$10(a0)
0000C752 4268 0012                  		clr.w	$12(a0)
0000C756                            
0000C756                            locret_C044:
0000C756 4E75                       		rts	
0000C758                            ; ===========================================================================
0000C758                            
0000C758                            loc_C046:				; XREF: loc_BF6E
0000C758 3F28 0008                  		move.w	8(a0),-(sp)
0000C75C 0C28 0004 0025             		cmpi.b	#4,$25(a0)
0000C762 6400                       		bcc.s	loc_C056
0000C764 6100 0000                  		bsr.w	SpeedToPos
0000C768                            
0000C768                            loc_C056:
0000C768 0828 0001 0022             		btst	#1,$22(a0)
0000C76E 6700                       		beq.s	loc_C0A0
0000C770 0668 0018 0012             		addi.w	#$18,$12(a0)
0000C776 4EB9 0000 0000             		jsr	ObjHitFloor
0000C77C 4A41                       		tst.w	d1
0000C77E 6A00 0000                  		bpl.w	loc_C09E
0000C782 D368 000C                  		add.w	d1,$C(a0)
0000C786 4268 0012                  		clr.w	$12(a0)
0000C78A 08A8 0001 0022             		bclr	#1,$22(a0)
0000C790 3011                       		move.w	(a1),d0
0000C792 0240 03FF                  		andi.w	#$3FF,d0
0000C796 0C40 016A                  		cmpi.w	#$16A,d0
0000C79A 6500                       		bcs.s	loc_C09E
0000C79C 3028 0030                  		move.w	$30(a0),d0
0000C7A0 E640                       		asr.w	#3,d0
0000C7A2 3140 0010                  		move.w	d0,$10(a0)
0000C7A6 117C 0001 0032             		move.b	#1,$32(a0)
0000C7AC 4268 000E                  		clr.w	$E(a0)
0000C7B0                            
0000C7B0                            loc_C09E:
0000C7B0 6000                       		bra.s	loc_C0E6
0000C7B2                            ; ===========================================================================
0000C7B2                            
0000C7B2                            loc_C0A0:
0000C7B2 4A68 0010                  		tst.w	$10(a0)
0000C7B6 6700 0000                  		beq.w	loc_C0D6
0000C7BA 6B00                       		bmi.s	loc_C0BC
0000C7BC 7600                       		moveq	#0,d3
0000C7BE 1628 0019                  		move.b	$19(a0),d3
0000C7C2 4EB9 0000 0000             		jsr	ObjHitWallRight
0000C7C8 4A41                       		tst.w	d1		; has block touched a wall?
0000C7CA 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000C7CC 6000                       		bra.s	loc_C0E6
0000C7CE                            ; ===========================================================================
0000C7CE                            
0000C7CE                            loc_C0BC:
0000C7CE 7600                       		moveq	#0,d3
0000C7D0 1628 0019                  		move.b	$19(a0),d3
0000C7D4 4643                       		not.w	d3
0000C7D6 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000C7DC 4A41                       		tst.w	d1		; has block touched a wall?
0000C7DE 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000C7E0 6000                       		bra.s	loc_C0E6
0000C7E2                            ; ===========================================================================
0000C7E2                            
0000C7E2                            Obj33_StopPush:
0000C7E2 4268 0010                  		clr.w	$10(a0)		; stop block moving
0000C7E6 6000                       		bra.s	loc_C0E6
0000C7E8                            ; ===========================================================================
0000C7E8                            
0000C7E8                            loc_C0D6:
0000C7E8 06A8 0000 2001 000C        		addi.l	#$2001,$C(a0)
0000C7F0 0C28 00A0 000F             		cmpi.b	#-$60,$F(a0)
0000C7F6 6400                       		bcc.s	loc_C104
0000C7F8                            
0000C7F8                            loc_C0E6:
0000C7F8 7200                       		moveq	#0,d1
0000C7FA 1228 0019                  		move.b	$19(a0),d1
0000C7FE 0641 000B                  		addi.w	#$B,d1
0000C802 343C 0010                  		move.w	#$10,d2
0000C806 363C 0011                  		move.w	#$11,d3
0000C80A 381F                       		move.w	(sp)+,d4
0000C80C 6100 0000                  		bsr.w	loc_C186
0000C810 6100                       		bsr.s	Obj33_ChkLava
0000C812 6000 FEC4                  		bra.w	loc_BFC6
0000C816                            ; ===========================================================================
0000C816                            
0000C816                            loc_C104:
0000C816 381F                       		move.w	(sp)+,d4
0000C818 43F8 D000                  		lea	($FFFFD000).w,a1
0000C81C 08A9 0003 0022             		bclr	#3,$22(a1)
0000C822 08A8 0003 0022             		bclr	#3,$22(a0)
0000C828 6000 FECE                  		bra.w	loc_BFE6
0000C82C                            ; ===========================================================================
0000C82C                            
0000C82C                            Obj33_ChkLava:
0000C82C 0C78 0201 FE10             		cmpi.w	#$201,($FFFFFE10).w ; is the level MZ act 2?
0000C832 6600                       		bne.s	Obj33_ChkLava2	; if not, branch
0000C834 343C FFE0                  		move.w	#-$20,d2
0000C838 0C68 0DD0 0008             		cmpi.w	#$DD0,8(a0)
0000C83E 6700                       		beq.s	Obj33_LoadLava
0000C840 0C68 0CC0 0008             		cmpi.w	#$CC0,8(a0)
0000C846 6700                       		beq.s	Obj33_LoadLava
0000C848 0C68 0BA0 0008             		cmpi.w	#$BA0,8(a0)
0000C84E 6700                       		beq.s	Obj33_LoadLava
0000C850 4E75                       		rts	
0000C852                            ; ===========================================================================
0000C852                            
0000C852                            Obj33_ChkLava2:
0000C852 0C78 0202 FE10             		cmpi.w	#$202,($FFFFFE10).w ; is the level MZ act 3?
0000C858 6600                       		bne.s	Obj33_NoLava	; if not, branch
0000C85A 343C 0020                  		move.w	#$20,d2
0000C85E 0C68 0560 0008             		cmpi.w	#$560,8(a0)
0000C864 6700                       		beq.s	Obj33_LoadLava
0000C866 0C68 05C0 0008             		cmpi.w	#$5C0,8(a0)
0000C86C 6700                       		beq.s	Obj33_LoadLava
0000C86E                            
0000C86E                            Obj33_NoLava:
0000C86E 4E75                       		rts	
0000C870                            ; ===========================================================================
0000C870                            
0000C870                            Obj33_LoadLava:
0000C870 6100 0000                  		bsr.w	SingleObjLoad
0000C874 6600                       		bne.s	locret_C184
0000C876 12BC 004C                  		move.b	#$4C,0(a1)	; load lava geyser object
0000C87A 3368 0008 0008             		move.w	8(a0),8(a1)
0000C880 D569 0008                  		add.w	d2,8(a1)
0000C884 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000C88A 0669 0010 000C             		addi.w	#$10,$C(a1)
0000C890 2348 003C                  		move.l	a0,$3C(a1)
0000C894                            
0000C894                            locret_C184:
0000C894 4E75                       		rts	
0000C896                            ; ===========================================================================
0000C896                            
0000C896                            loc_C186:				; XREF: loc_BF6E
0000C896 1028 0025                  		move.b	$25(a0),d0
0000C89A 6700 0000                  		beq.w	loc_C218
0000C89E 5500                       		subq.b	#2,d0
0000C8A0 6600                       		bne.s	loc_C1AA
0000C8A2 6100 B31C                  		bsr.w	ExitPlatform
0000C8A6 0829 0003 0022             		btst	#3,$22(a1)
0000C8AC 6600                       		bne.s	loc_C1A4
0000C8AE 4228 0025                  		clr.b	$25(a0)
0000C8B2 4E75                       		rts	
0000C8B4                            ; ===========================================================================
0000C8B4                            
0000C8B4                            loc_C1A4:
0000C8B4 3404                       		move.w	d4,d2
0000C8B6 6000 B866                  		bra.w	MvSonicOnPtfm
0000C8BA                            ; ===========================================================================
0000C8BA                            
0000C8BA                            loc_C1AA:
0000C8BA 5500                       		subq.b	#2,d0
0000C8BC 6600                       		bne.s	loc_C1F2
0000C8BE 6100 0000                  		bsr.w	SpeedToPos
0000C8C2 0668 0018 0012             		addi.w	#$18,$12(a0)
0000C8C8 4EB9 0000 0000             		jsr	ObjHitFloor
0000C8CE 4A41                       		tst.w	d1
0000C8D0 6A00 0000                  		bpl.w	locret_C1F0
0000C8D4 D368 000C                  		add.w	d1,$C(a0)
0000C8D8 4268 0012                  		clr.w	$12(a0)
0000C8DC 4228 0025                  		clr.b	$25(a0)
0000C8E0 3011                       		move.w	(a1),d0
0000C8E2 0240 03FF                  		andi.w	#$3FF,d0
0000C8E6 0C40 016A                  		cmpi.w	#$16A,d0
0000C8EA 6500                       		bcs.s	locret_C1F0
0000C8EC 3028 0030                  		move.w	$30(a0),d0
0000C8F0 E640                       		asr.w	#3,d0
0000C8F2 3140 0010                  		move.w	d0,$10(a0)
0000C8F6 117C 0001 0032             		move.b	#1,$32(a0)
0000C8FC 4268 000E                  		clr.w	$E(a0)
0000C900                            
0000C900                            locret_C1F0:
0000C900 4E75                       		rts	
0000C902                            ; ===========================================================================
0000C902                            
0000C902                            loc_C1F2:
0000C902 6100 0000                  		bsr.w	SpeedToPos
0000C906 3028 0008                  		move.w	8(a0),d0
0000C90A 0240 000C                  		andi.w	#$C,d0
0000C90E 6600 0000                  		bne.w	locret_C2E4
0000C912 0268 FFF0 0008             		andi.w	#-$10,8(a0)
0000C918 3168 0010 0030             		move.w	$10(a0),$30(a0)
0000C91E 4268 0010                  		clr.w	$10(a0)
0000C922 5528 0025                  		subq.b	#2,$25(a0)
0000C926 4E75                       		rts	
0000C928                            ; ===========================================================================
0000C928                            
0000C928                            loc_C218:
0000C928 6100 0000                  		bsr.w	loc_FAC8
0000C92C 4A44                       		tst.w	d4
0000C92E 6700 0000                  		beq.w	locret_C2E4
0000C932 6B00 0000                  		bmi.w	locret_C2E4
0000C936 4A28 0032                  		tst.b	$32(a0)
0000C93A 6700                       		beq.s	loc_C230
0000C93C 6000 0000                  		bra.w	locret_C2E4
0000C940                            ; ===========================================================================
0000C940                            
0000C940                            loc_C230:
0000C940 4A40                       		tst.w	d0
0000C942 6700 0000                  		beq.w	locret_C2E4
0000C946 6B00                       		bmi.s	loc_C268
0000C948 0829 0000 0022             		btst	#0,$22(a1)
0000C94E 6600 0000                  		bne.w	locret_C2E4
0000C952 3F00                       		move.w	d0,-(sp)
0000C954 7600                       		moveq	#0,d3
0000C956 1628 0019                  		move.b	$19(a0),d3
0000C95A 4EB9 0000 0000             		jsr	ObjHitWallRight
0000C960 301F                       		move.w	(sp)+,d0
0000C962 4A41                       		tst.w	d1
0000C964 6B00 0000                  		bmi.w	locret_C2E4
0000C968 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000C970 7001                       		moveq	#1,d0
0000C972 323C 0040                  		move.w	#$40,d1
0000C976 6000                       		bra.s	loc_C294
0000C978                            ; ===========================================================================
0000C978                            
0000C978                            loc_C268:
0000C978 0829 0000 0022             		btst	#0,$22(a1)
0000C97E 6700                       		beq.s	locret_C2E4
0000C980 3F00                       		move.w	d0,-(sp)
0000C982 7600                       		moveq	#0,d3
0000C984 1628 0019                  		move.b	$19(a0),d3
0000C988 4643                       		not.w	d3
0000C98A 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000C990 301F                       		move.w	(sp)+,d0
0000C992 4A41                       		tst.w	d1
0000C994 6B00                       		bmi.s	locret_C2E4
0000C996 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
0000C99E 70FF                       		moveq	#-1,d0
0000C9A0 323C FFC0                  		move.w	#-$40,d1
0000C9A4                            
0000C9A4                            loc_C294:
0000C9A4 43F8 D000                  		lea	($FFFFD000).w,a1
0000C9A8 D169 0008                  		add.w	d0,8(a1)
0000C9AC 3341 0014                  		move.w	d1,$14(a1)
0000C9B0 337C 0000 0010             		move.w	#0,$10(a1)
0000C9B6 3F00                       		move.w	d0,-(sp)
0000C9B8 303C 00A7                  		move.w	#$A7,d0
0000C9BC 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play pushing sound
0000C9C2 301F                       		move.w	(sp)+,d0
0000C9C4 4A28 0028                  		tst.b	$28(a0)
0000C9C8 6B00                       		bmi.s	locret_C2E4
0000C9CA 3F00                       		move.w	d0,-(sp)
0000C9CC 4EB9 0000 0000             		jsr	ObjHitFloor
0000C9D2 301F                       		move.w	(sp)+,d0
0000C9D4 0C41 0004                  		cmpi.w	#4,d1
0000C9D8 6F00                       		ble.s	loc_C2E0
0000C9DA 317C 0400 0010             		move.w	#$400,$10(a0)
0000C9E0 4A40                       		tst.w	d0
0000C9E2 6A00                       		bpl.s	loc_C2D8
0000C9E4 4468 0010                  		neg.w	$10(a0)
0000C9E8                            
0000C9E8                            loc_C2D8:
0000C9E8 117C 0006 0025             		move.b	#6,$25(a0)
0000C9EE 6000                       		bra.s	locret_C2E4
0000C9F0                            ; ===========================================================================
0000C9F0                            
0000C9F0                            loc_C2E0:
0000C9F0 D368 000C                  		add.w	d1,$C(a0)
0000C9F4                            
0000C9F4                            locret_C2E4:
0000C9F4 4E75                       		rts	
0000C9F6                            ; ===========================================================================
0000C9F6                            ; ---------------------------------------------------------------------------
0000C9F6                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000C9F6                            ; ---------------------------------------------------------------------------
0000C9F6                            Map_obj33:
0000C9F6                            	include "_maps\obj33.asm"
0000C9F6                            ; ---------------------------------------------------------------------------
0000C9F6                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000C9F6                            ; ---------------------------------------------------------------------------
0000C9F6 0000                       		dc.w byte_C2EA-Map_obj33
0000C9F8 0000                       		dc.w byte_C2F0-Map_obj33
0000C9FA 01                         byte_C2EA:	dc.b 1
0000C9FB F00F 0008 F0               		dc.b $F0, $F, 0, 8, $F0	; single block
0000CA00 04                         byte_C2F0:	dc.b 4
0000CA01 F00F 0008 C0               		dc.b $F0, $F, 0, 8, $C0	; row of 4 blocks
0000CA06 F00F 0008 E0               		dc.b $F0, $F, 0, 8, $E0
0000CA0B F00F 0008 00               		dc.b $F0, $F, 0, 8, 0
0000CA10 F00F 0008 20               		dc.b $F0, $F, 0, 8, $20
0000CA16 00                         		even
0000CA16 00                         		even
0000CA16                            
0000CA16                            ; ===========================================================================
0000CA16                            ; ---------------------------------------------------------------------------
0000CA16                            ; Object 34 - zone title cards
0000CA16                            ; ---------------------------------------------------------------------------
0000CA16                            
0000CA16                            Obj34:					; XREF: Obj_Index
0000CA16 7000                       		moveq	#0,d0
0000CA18 1028 0024                  		move.b	$24(a0),d0
0000CA1C 323B 0000                  		move.w	Obj34_Index(pc,d0.w),d1
0000CA20 4EFB 1000                  		jmp	Obj34_Index(pc,d1.w)
0000CA24                            ; ===========================================================================
0000CA24 0000                       Obj34_Index:	dc.w Obj34_CheckSBZ3-Obj34_Index
0000CA26 0000                       		dc.w Obj34_ChkPos-Obj34_Index
0000CA28 0000                       		dc.w Obj34_Wait-Obj34_Index
0000CA2A 0000                       		dc.w Obj34_Wait-Obj34_Index
0000CA2C                            ; ===========================================================================
0000CA2C                            
0000CA2C                            Obj34_CheckSBZ3:			; XREF: Obj34_Index
0000CA2C 2248                       		movea.l	a0,a1
0000CA2E 7000                       		moveq	#0,d0
0000CA30 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000CA34 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	SBZ 3
0000CA3A 6600                       		bne.s	Obj34_CheckFZ
0000CA3C 7005                       		moveq	#5,d0		; load title card number 5 (SBZ)
0000CA3E                            
0000CA3E                            Obj34_CheckFZ:
0000CA3E 3400                       		move.w	d0,d2
0000CA40 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; check if level is	FZ
0000CA46 6600                       		bne.s	Obj34_LoadConfig
0000CA48 7006                       		moveq	#6,d0		; load title card number 6 (FZ)
0000CA4A 740B                       		moveq	#$B,d2		; use "FINAL" mappings
0000CA4C                            
0000CA4C                            Obj34_LoadConfig:
0000CA4C 47F9 0000 0000             		lea	(Obj34_ConData).l,a3
0000CA52 E948                       		lsl.w	#4,d0
0000CA54 D6C0                       		adda.w	d0,a3
0000CA56 45F9 0000 0000             		lea	(Obj34_ItemData).l,a2
0000CA5C 7203                       		moveq	#3,d1
0000CA5E                            
0000CA5E                            Obj34_Loop:
0000CA5E 12BC 0034                  		move.b	#$34,0(a1)
0000CA62 3353 0008                  		move.w	(a3),8(a1)	; load start x-position
0000CA66 335B 0032                  		move.w	(a3)+,$32(a1)	; load finish x-position (same as start)
0000CA6A 335B 0030                  		move.w	(a3)+,$30(a1)	; load main x-position
0000CA6E 335A 000A                  		move.w	(a2)+,$A(a1)
0000CA72 135A 0024                  		move.b	(a2)+,$24(a1)
0000CA76 101A                       		move.b	(a2)+,d0
0000CA78 6600                       		bne.s	Obj34_ActNumber
0000CA7A 1002                       		move.b	d2,d0
0000CA7C                            
0000CA7C                            Obj34_ActNumber:
0000CA7C 0C00 0007                  		cmpi.b	#7,d0
0000CA80 6600                       		bne.s	Obj34_MakeSprite
0000CA82 D038 FE11                  		add.b	($FFFFFE11).w,d0
0000CA86 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w
0000CA8C 6600                       		bne.s	Obj34_MakeSprite
0000CA8E 5300                       		subq.b	#1,d0
0000CA90                            
0000CA90                            Obj34_MakeSprite:
0000CA90 1340 001A                  		move.b	d0,$1A(a1)	; display frame	number d0
0000CA94 237C 0000 0000 0004        		move.l	#Map_obj34,4(a1)
0000CA9C 337C 8580 0002             		move.w	#$8580,2(a1)
0000CAA2 137C 0078 0019             		move.b	#$78,$19(a1)
0000CAA8 137C 0000 0001             		move.b	#0,1(a1)
0000CAAE 137C 0000 0018             		move.b	#0,$18(a1)
0000CAB4 337C 003C 001E             		move.w	#60,$1E(a1)	; set time delay to 1 second
0000CABA 43E9 0040                  		lea	$40(a1),a1	; next object
0000CABE 51C9 FF9E                  		dbf	d1,Obj34_Loop	; repeat sequence another 3 times
0000CAC2                            
0000CAC2                            Obj34_ChkPos:				; XREF: Obj34_Index
0000CAC2 7210                       		moveq	#$10,d1		; set horizontal speed
0000CAC4 3028 0030                  		move.w	$30(a0),d0
0000CAC8 B068 0008                  		cmp.w	8(a0),d0	; has item reached the target position?
0000CACC 6700                       		beq.s	loc_C3C8	; if yes, branch
0000CACE 6C00                       		bge.s	Obj34_Move
0000CAD0 4441                       		neg.w	d1
0000CAD2                            
0000CAD2                            Obj34_Move:
0000CAD2 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CAD6                            
0000CAD6                            loc_C3C8:
0000CAD6 3028 0008                  		move.w	8(a0),d0
0000CADA 6B00                       		bmi.s	locret_C3D8
0000CADC 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CAE0 6400                       		bcc.s	locret_C3D8	; if yes, branch
0000CAE2 6000 0000                  		bra.w	DisplaySprite
0000CAE6                            ; ===========================================================================
0000CAE6                            
0000CAE6                            locret_C3D8:
0000CAE6 4E75                       		rts	
0000CAE8                            ; ===========================================================================
0000CAE8                            
0000CAE8                            Obj34_Wait:				; XREF: Obj34_Index
0000CAE8 4A68 001E                  		tst.w	$1E(a0)		; is time remaining zero?
0000CAEC 6700                       		beq.s	Obj34_ChkPos2	; if yes, branch
0000CAEE 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time
0000CAF2 6000 0000                  		bra.w	DisplaySprite
0000CAF6                            ; ===========================================================================
0000CAF6                            
0000CAF6                            Obj34_ChkPos2:				; XREF: Obj34_Wait
0000CAF6 4A28 0001                  		tst.b	1(a0)
0000CAFA 6A00                       		bpl.s	Obj34_ChangeArt
0000CAFC 7220                       		moveq	#$20,d1
0000CAFE 3028 0032                  		move.w	$32(a0),d0
0000CB02 B068 0008                  		cmp.w	8(a0),d0	; has item reached the finish position?
0000CB06 6700                       		beq.s	Obj34_ChangeArt	; if yes, branch
0000CB08 6C00                       		bge.s	Obj34_Move2
0000CB0A 4441                       		neg.w	d1
0000CB0C                            
0000CB0C                            Obj34_Move2:
0000CB0C D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CB10 3028 0008                  		move.w	8(a0),d0
0000CB14 6B00                       		bmi.s	locret_C412
0000CB16 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CB1A 6400                       		bcc.s	locret_C412	; if yes, branch
0000CB1C 6000 0000                  		bra.w	DisplaySprite
0000CB20                            ; ===========================================================================
0000CB20                            
0000CB20                            locret_C412:
0000CB20 4E75                       		rts	
0000CB22                            ; ===========================================================================
0000CB22                            
0000CB22                            Obj34_ChangeArt:			; XREF: Obj34_ChkPos2
0000CB22 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000CB28 6600                       		bne.s	Obj34_Delete
0000CB2A 7002                       		moveq	#2,d0
0000CB2C 4EB9 0000 17A4             		jsr	(LoadPLC).l	; load explosion patterns
0000CB32 7000                       		moveq	#0,d0
0000CB34 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000CB38 0640 0015                  		addi.w	#$15,d0
0000CB3C 4EB9 0000 17A4             		jsr	(LoadPLC).l	; load animal patterns
0000CB42                            
0000CB42                            Obj34_Delete:
0000CB42 6000 0000                  		bra.w	DeleteObject
0000CB46                            ; ===========================================================================
0000CB46 00D0                       Obj34_ItemData:	dc.w $D0	; y-axis position
0000CB48 0200                       		dc.b 2,	0	; routine number, frame	number (changes)
0000CB4A 00E4                       		dc.w $E4
0000CB4C 0206                       		dc.b 2,	6
0000CB4E 00EA                       		dc.w $EA
0000CB50 0207                       		dc.b 2,	7
0000CB52 00E0                       		dc.w $E0
0000CB54 020A                       		dc.b 2,	$A
0000CB56                            ; ---------------------------------------------------------------------------
0000CB56                            ; Title	card configuration data
0000CB56                            ; Format:
0000CB56                            ; 4 bytes per item (YYYY XXXX)
0000CB56                            ; 4 items per level (GREEN HILL, ZONE, ACT X, oval)
0000CB56                            ; ---------------------------------------------------------------------------
0000CB56 0000 0120 FEFC 013C 0414+  Obj34_ConData:	dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000CB66 0000 0120 FEF4 0134 040C+  		dc.w 0,	$120, $FEF4, $134, $40C, $14C, $20C, $14C ; LZ
0000CB76 0000 0120 FEE0 0120 03F8+  		dc.w 0,	$120, $FEE0, $120, $3F8, $138, $1F8, $138 ; MZ
0000CB86 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; SLZ
0000CB96 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SYZ
0000CBA6 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SBZ
0000CBB6 0000 0120 FEE4 0124 03EC+  		dc.w 0,	$120, $FEE4, $124, $3EC, $3EC, $1EC, $12C ; FZ
0000CBC6                            ; ===========================================================================
0000CBC6                            ; ---------------------------------------------------------------------------
0000CBC6                            ; Object 39 - "GAME OVER" and "TIME OVER"
0000CBC6                            ; ---------------------------------------------------------------------------
0000CBC6                            
0000CBC6                            Obj39:					; XREF: Obj_Index
0000CBC6 7000                       		moveq	#0,d0
0000CBC8 1028 0024                  		move.b	$24(a0),d0
0000CBCC 323B 0000                  		move.w	Obj39_Index(pc,d0.w),d1
0000CBD0 4EFB 1000                  		jmp	Obj39_Index(pc,d1.w)
0000CBD4                            ; ===========================================================================
0000CBD4 0000                       Obj39_Index:	dc.w Obj39_ChkPLC-Obj39_Index
0000CBD6 0000                       		dc.w loc_C50C-Obj39_Index
0000CBD8 0000                       		dc.w Obj39_Wait-Obj39_Index
0000CBDA                            ; ===========================================================================
0000CBDA                            
0000CBDA                            Obj39_ChkPLC:				; XREF: Obj39_Index
0000CBDA 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000CBDE 6700                       		beq.s	Obj39_Main	; if yes, branch
0000CBE0 4E75                       		rts	
0000CBE2                            ; ===========================================================================
0000CBE2                            
0000CBE2                            Obj39_Main:
0000CBE2 5428 0024                  		addq.b	#2,$24(a0)
0000CBE6 317C 0050 0008             		move.w	#$50,8(a0)	; set x-position
0000CBEC 0828 0000 001A             		btst	#0,$1A(a0)	; is the object	"OVER"?
0000CBF2 6700                       		beq.s	loc_C4EC	; if not, branch
0000CBF4 317C 01F0 0008             		move.w	#$1F0,8(a0)	; set x-position for "OVER"
0000CBFA                            
0000CBFA                            loc_C4EC:
0000CBFA 317C 00F0 000A             		move.w	#$F0,$A(a0)
0000CC00 217C 0000 0000 0004        		move.l	#Map_obj39,4(a0)
0000CC08 317C 855E 0002             		move.w	#$855E,2(a0)
0000CC0E 117C 0000 0001             		move.b	#0,1(a0)
0000CC14 117C 0000 0018             		move.b	#0,$18(a0)
0000CC1A                            
0000CC1A                            loc_C50C:				; XREF: Obj39_Index
0000CC1A 7210                       		moveq	#$10,d1		; set horizontal speed
0000CC1C 0C68 0120 0008             		cmpi.w	#$120,8(a0)	; has item reached its target position?
0000CC22 6700                       		beq.s	Obj39_SetWait	; if yes, branch
0000CC24 6500                       		bcs.s	Obj39_Move
0000CC26 4441                       		neg.w	d1
0000CC28                            
0000CC28                            Obj39_Move:
0000CC28 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CC2C 6000 0000                  		bra.w	DisplaySprite
0000CC30                            ; ===========================================================================
0000CC30                            
0000CC30                            Obj39_SetWait:				; XREF: Obj39_Main
0000CC30 317C 02D0 001E             		move.w	#720,$1E(a0)	; set time delay to 12 seconds
0000CC36 5428 0024                  		addq.b	#2,$24(a0)
0000CC3A 4E75                       		rts	
0000CC3C                            ; ===========================================================================
0000CC3C                            
0000CC3C                            Obj39_Wait:				; XREF: Obj39_Index
0000CC3C 1038 F605                  		move.b	($FFFFF605).w,d0
0000CC40 0200 0070                  		andi.b	#$70,d0		; is button A, B or C pressed?
0000CC44 6600                       		bne.s	Obj39_ChgMode	; if yes, branch
0000CC46 0828 0000 001A             		btst	#0,$1A(a0)
0000CC4C 6600                       		bne.s	Obj39_Display
0000CC4E 4A68 001E                  		tst.w	$1E(a0)		; has time delay reached zero?
0000CC52 6700                       		beq.s	Obj39_ChgMode	; if yes, branch
0000CC54 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000CC58 6000 0000                  		bra.w	DisplaySprite
0000CC5C                            ; ===========================================================================
0000CC5C                            
0000CC5C                            Obj39_ChgMode:				; XREF: Obj39_Wait
0000CC5C 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is time over flag set?
0000CC60 6600                       		bne.s	Obj39_ResetLvl	; if yes, branch
0000CC62 11FC 0014 F600             		move.b	#$14,($FFFFF600).w ; set mode to $14 (continue screen)
0000CC68 4A38 FE18                  		tst.b	($FFFFFE18).w	; do you have any continues?
0000CC6C 6600                       		bne.s	Obj39_Display	; if yes, branch
0000CC6E 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set mode to 0 (Sega screen)
0000CC74 6000                       		bra.s	Obj39_Display
0000CC76                            ; ===========================================================================
0000CC76                            
0000CC76                            Obj39_ResetLvl:				; XREF: Obj39_ChgMode
0000CC76 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000CC7C                            
0000CC7C                            Obj39_Display:				; XREF: Obj39_ChgMode
0000CC7C 6000 0000                  		bra.w	DisplaySprite
0000CC80                            ; ===========================================================================
0000CC80                            ; ---------------------------------------------------------------------------
0000CC80                            ; Object 3A - "SONIC GOT THROUGH" title	card
0000CC80                            ; ---------------------------------------------------------------------------
0000CC80                            
0000CC80                            Obj3A:					; XREF: Obj_Index
0000CC80 7000                       		moveq	#0,d0
0000CC82 1028 0024                  		move.b	$24(a0),d0
0000CC86 323B 0000                  		move.w	Obj3A_Index(pc,d0.w),d1
0000CC8A 4EFB 1000                  		jmp	Obj3A_Index(pc,d1.w)
0000CC8E                            ; ===========================================================================
0000CC8E 0000                       Obj3A_Index:	dc.w Obj3A_ChkPLC-Obj3A_Index
0000CC90 0000                       		dc.w Obj3A_ChkPos-Obj3A_Index
0000CC92 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000CC94 0000                       		dc.w Obj3A_TimeBonus-Obj3A_Index
0000CC96 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000CC98 0000                       		dc.w Obj3A_NextLevel-Obj3A_Index
0000CC9A 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000CC9C 0000                       		dc.w Obj3A_ChkPos2-Obj3A_Index
0000CC9E 0000                       		dc.w loc_C766-Obj3A_Index
0000CCA0                            ; ===========================================================================
0000CCA0                            
0000CCA0                            Obj3A_ChkPLC:				; XREF: Obj3A_Index
0000CCA0 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000CCA4 6700                       		beq.s	Obj3A_Main	; if yes, branch
0000CCA6 4E75                       		rts	
0000CCA8                            ; ===========================================================================
0000CCA8                            
0000CCA8                            Obj3A_Main:
0000CCA8 2248                       		movea.l	a0,a1
0000CCAA 45F9 0000 0000             		lea	(Obj3A_Config).l,a2
0000CCB0 7206                       		moveq	#6,d1
0000CCB2                            
0000CCB2                            Obj3A_Loop:
0000CCB2 12BC 003A                  		move.b	#$3A,0(a1)
0000CCB6 3352 0008                  		move.w	(a2),8(a1)	; load start x-position
0000CCBA 335A 0032                  		move.w	(a2)+,$32(a1)	; load finish x-position (same as start)
0000CCBE 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000CCC2 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000CCC6 135A 0024                  		move.b	(a2)+,$24(a1)
0000CCCA 101A                       		move.b	(a2)+,d0
0000CCCC 0C00 0006                  		cmpi.b	#6,d0
0000CCD0 6600                       		bne.s	loc_C5CA
0000CCD2 D038 FE11                  		add.b	($FFFFFE11).w,d0 ; add act number to frame number
0000CCD6                            
0000CCD6                            loc_C5CA:
0000CCD6 1340 001A                  		move.b	d0,$1A(a1)
0000CCDA 237C 0000 0000 0004        		move.l	#Map_obj3A,4(a1)
0000CCE2 337C 8580 0002             		move.w	#$8580,2(a1)
0000CCE8 137C 0000 0001             		move.b	#0,1(a1)
0000CCEE 43E9 0040                  		lea	$40(a1),a1
0000CCF2 51C9 FFBE                  		dbf	d1,Obj3A_Loop	; repeat 6 times
0000CCF6                            
0000CCF6                            Obj3A_ChkPos:				; XREF: Obj3A_Index
0000CCF6 7210                       		moveq	#$10,d1		; set horizontal speed
0000CCF8 3028 0030                  		move.w	$30(a0),d0
0000CCFC B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000CD00 6700                       		beq.s	loc_C61A	; if yes, branch
0000CD02 6C00                       		bge.s	Obj3A_Move
0000CD04 4441                       		neg.w	d1
0000CD06                            
0000CD06                            Obj3A_Move:
0000CD06 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CD0A                            
0000CD0A                            loc_C5FE:				; XREF: loc_C61A
0000CD0A 3028 0008                  		move.w	8(a0),d0
0000CD0E 6B00                       		bmi.s	locret_C60E
0000CD10 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CD14 6400                       		bcc.s	locret_C60E	; if yes, branch
0000CD16 6000 0000                  		bra.w	DisplaySprite
0000CD1A                            ; ===========================================================================
0000CD1A                            
0000CD1A                            locret_C60E:
0000CD1A 4E75                       		rts	
0000CD1C                            ; ===========================================================================
0000CD1C                            
0000CD1C                            loc_C610:				; XREF: loc_C61A
0000CD1C 117C 000E 0024             		move.b	#$E,$24(a0)
0000CD22 6000 0000                  		bra.w	Obj3A_ChkPos2
0000CD26                            ; ===========================================================================
0000CD26                            
0000CD26                            loc_C61A:				; XREF: Obj3A_ChkPos
0000CD26 0C38 000E D724             		cmpi.b	#$E,($FFFFD724).w
0000CD2C 67EE                       		beq.s	loc_C610
0000CD2E 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000CD34 66D4                       		bne.s	loc_C5FE
0000CD36 5428 0024                  		addq.b	#2,$24(a0)
0000CD3A 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CD40                            
0000CD40                            Obj3A_Wait:				; XREF: Obj3A_Index
0000CD40 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000CD44 6600                       		bne.s	Obj3A_Display
0000CD46 5428 0024                  		addq.b	#2,$24(a0)
0000CD4A                            
0000CD4A                            Obj3A_Display:
0000CD4A 6000 0000                  		bra.w	DisplaySprite
0000CD4E                            ; ===========================================================================
0000CD4E                            
0000CD4E                            Obj3A_TimeBonus:			; XREF: Obj3A_Index
0000CD4E 6100 0000                  		bsr.w	DisplaySprite
0000CD52 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set time/ring bonus update flag
0000CD58 7000                       		moveq	#0,d0
0000CD5A 4A78 F7D2                  		tst.w	($FFFFF7D2).w	; is time bonus	= zero?
0000CD5E 6700                       		beq.s	Obj3A_RingBonus	; if yes, branch
0000CD60 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000CD64 0478 000A F7D2             		subi.w	#10,($FFFFF7D2).w ; subtract 10	from time bonus
0000CD6A                            
0000CD6A                            Obj3A_RingBonus:
0000CD6A 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000CD6E 6700                       		beq.s	Obj3A_ChkBonus	; if yes, branch
0000CD70 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000CD74 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000CD7A                            
0000CD7A                            Obj3A_ChkBonus:
0000CD7A 4A40                       		tst.w	d0		; is there any bonus?
0000CD7C 6600                       		bne.s	Obj3A_AddBonus	; if yes, branch
0000CD7E 303C 00C5                  		move.w	#$C5,d0
0000CD82 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000CD88 5428 0024                  		addq.b	#2,$24(a0)
0000CD8C 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w
0000CD92 6600                       		bne.s	Obj3A_SetDelay
0000CD94 5828 0024                  		addq.b	#4,$24(a0)
0000CD98                            
0000CD98                            Obj3A_SetDelay:
0000CD98 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CD9E                            
0000CD9E                            locret_C692:
0000CD9E 4E75                       		rts	
0000CDA0                            ; ===========================================================================
0000CDA0                            
0000CDA0                            Obj3A_AddBonus:				; XREF: Obj3A_ChkBonus
0000CDA0 4EB9 0000 0000             		jsr	AddPoints
0000CDA6 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000CDAA 0200 0003                  		andi.b	#3,d0
0000CDAE 66EE                       		bne.s	locret_C692
0000CDB0 303C 00CD                  		move.w	#$CD,d0
0000CDB4 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000CDBA                            ; ===========================================================================
0000CDBA                            
0000CDBA                            Obj3A_NextLevel:			; XREF: Obj3A_Index
0000CDBA 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000CDBE 0240 0007                  		andi.w	#7,d0
0000CDC2 E748                       		lsl.w	#3,d0
0000CDC4 1238 FE11                  		move.b	($FFFFFE11).w,d1
0000CDC8 0241 0003                  		andi.w	#3,d1
0000CDCC D241                       		add.w	d1,d1
0000CDCE D041                       		add.w	d1,d0
0000CDD0 303B 0000                  		move.w	LevelOrder(pc,d0.w),d0 ; load level from level order array
0000CDD4 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
0000CDD8 4A40                       		tst.w	d0
0000CDDA 6600                       		bne.s	Obj3A_ChkSS
0000CDDC 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set game mode to level (00)
0000CDE2 6000                       		bra.s	Obj3A_Display2
0000CDE4                            ; ===========================================================================
0000CDE4                            
0000CDE4                            Obj3A_ChkSS:				; XREF: Obj3A_NextLevel
0000CDE4 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
0000CDE8 4A38 F7CD                  		tst.b	($FFFFF7CD).w	; has Sonic jumped into	a giant	ring?
0000CDEC 6700                       		beq.s	loc_C6EA	; if not, branch
0000CDEE 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set game mode to Special Stage (10)
0000CDF4 6000                       		bra.s	Obj3A_Display2
0000CDF6                            ; ===========================================================================
0000CDF6                            
0000CDF6                            loc_C6EA:				; XREF: Obj3A_ChkSS
0000CDF6 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000CDFC                            
0000CDFC                            Obj3A_Display2:				; XREF: Obj3A_NextLevel, Obj3A_ChkSS
0000CDFC 6000 0000                  		bra.w	DisplaySprite
0000CE00                            ; ===========================================================================
0000CE00                            ; ---------------------------------------------------------------------------
0000CE00                            ; Level	order array
0000CE00                            ; ---------------------------------------------------------------------------
0000CE00                            LevelOrder:	incbin	misc\lvl_ord.bin
0000CE30                            		even
0000CE30                            ; ===========================================================================
0000CE30                            
0000CE30                            Obj3A_ChkPos2:				; XREF: Obj3A_Index
0000CE30 7220                       		moveq	#$20,d1		; set horizontal speed
0000CE32 3028 0032                  		move.w	$32(a0),d0
0000CE36 B068 0008                  		cmp.w	8(a0),d0	; has item reached its finish position?
0000CE3A 6700                       		beq.s	Obj3A_SBZ2	; if yes, branch
0000CE3C 6C00                       		bge.s	Obj3A_Move2
0000CE3E 4441                       		neg.w	d1
0000CE40                            
0000CE40                            Obj3A_Move2:
0000CE40 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CE44 3028 0008                  		move.w	8(a0),d0
0000CE48 6B00                       		bmi.s	locret_C748
0000CE4A 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CE4E 6400                       		bcc.s	locret_C748	; if yes, branch
0000CE50 6000 0000                  		bra.w	DisplaySprite
0000CE54                            ; ===========================================================================
0000CE54                            
0000CE54                            locret_C748:
0000CE54 4E75                       		rts	
0000CE56                            ; ===========================================================================
0000CE56                            
0000CE56                            Obj3A_SBZ2:				; XREF: Obj3A_ChkPos2
0000CE56 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000CE5C 6600 0000                  		bne.w	DeleteObject
0000CE60 5428 0024                  		addq.b	#2,$24(a0)
0000CE64 4238 F7CC                  		clr.b	($FFFFF7CC).w	; unlock controls
0000CE68 303C 008D                  		move.w	#$8D,d0
0000CE6C 4EF9 0000 15BA             		jmp	(PlaySound).l	; play FZ music
0000CE72                            ; ===========================================================================
0000CE72                            
0000CE72                            loc_C766:				; XREF: Obj3A_Index
0000CE72 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0000CE76 0C78 2100 F72A             		cmpi.w	#$2100,($FFFFF72A).w
0000CE7C 6700 0000                  		beq.w	DeleteObject
0000CE80 4E75                       		rts	
0000CE82                            ; ===========================================================================
0000CE82 0004 0124 00BC             Obj3A_Config:	dc.w 4,	$124, $BC	; x-start, x-main, y-main
0000CE88 0200                       		dc.b 2,	0		; routine number, frame	number (changes)
0000CE8A FEE0 0120 00D0             		dc.w $FEE0, $120, $D0
0000CE90 0201                       		dc.b 2,	1
0000CE92 040C 014C 00D6             		dc.w $40C, $14C, $D6
0000CE98 0206                       		dc.b 2,	6
0000CE9A 0520 0120 00EC             		dc.w $520, $120, $EC
0000CEA0 0202                       		dc.b 2,	2
0000CEA2 0540 0120 00FC             		dc.w $540, $120, $FC
0000CEA8 0203                       		dc.b 2,	3
0000CEAA 0560 0120 010C             		dc.w $560, $120, $10C
0000CEB0 0204                       		dc.b 2,	4
0000CEB2 020C 014C 00CC             		dc.w $20C, $14C, $CC
0000CEB8 0205                       		dc.b 2,	5
0000CEBA                            ; ===========================================================================
0000CEBA                            ; ---------------------------------------------------------------------------
0000CEBA                            ; Object 7E - special stage results screen
0000CEBA                            ; ---------------------------------------------------------------------------
0000CEBA                            
0000CEBA                            Obj7E:					; XREF: Obj_Index
0000CEBA 7000                       		moveq	#0,d0
0000CEBC 1028 0024                  		move.b	$24(a0),d0
0000CEC0 323B 0000                  		move.w	Obj7E_Index(pc,d0.w),d1
0000CEC4 4EFB 1000                  		jmp	Obj7E_Index(pc,d1.w)
0000CEC8                            ; ===========================================================================
0000CEC8 0000                       Obj7E_Index:	dc.w Obj7E_ChkPLC-Obj7E_Index
0000CECA 0000                       		dc.w Obj7E_ChkPos-Obj7E_Index
0000CECC 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CECE 0000                       		dc.w Obj7E_RingBonus-Obj7E_Index
0000CED0 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CED2 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000CED4 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CED6 0000                       		dc.w Obj7E_Continue-Obj7E_Index
0000CED8 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CEDA 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000CEDC 0000                       		dc.w loc_C91A-Obj7E_Index
0000CEDE                            ; ===========================================================================
0000CEDE                            
0000CEDE                            Obj7E_ChkPLC:				; XREF: Obj7E_Index
0000CEDE 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000CEE2 6700                       		beq.s	Obj7E_Main	; if yes, branch
0000CEE4 4E75                       		rts	
0000CEE6                            ; ===========================================================================
0000CEE6                            
0000CEE6                            Obj7E_Main:
0000CEE6 2248                       		movea.l	a0,a1
0000CEE8 45F9 0000 0000             		lea	(Obj7E_Config).l,a2
0000CEEE 7203                       		moveq	#3,d1
0000CEF0 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	50 or more rings?
0000CEF6 6500                       		bcs.s	Obj7E_Loop	; if no, branch
0000CEF8 5241                       		addq.w	#1,d1		; if yes, add 1	to d1 (number of sprites)
0000CEFA                            
0000CEFA                            Obj7E_Loop:
0000CEFA 12BC 007E                  		move.b	#$7E,0(a1)
0000CEFE 335A 0008                  		move.w	(a2)+,8(a1)	; load start x-position
0000CF02 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000CF06 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000CF0A 135A 0024                  		move.b	(a2)+,$24(a1)
0000CF0E 135A 001A                  		move.b	(a2)+,$1A(a1)
0000CF12 237C 0000 0000 0004        		move.l	#Map_obj7E,4(a1)
0000CF1A 337C 8580 0002             		move.w	#$8580,2(a1)
0000CF20 137C 0000 0001             		move.b	#0,1(a1)
0000CF26 43E9 0040                  		lea	$40(a1),a1
0000CF2A 51C9 FFCE                  		dbf	d1,Obj7E_Loop	; repeat sequence 3 or 4 times
0000CF2E                            
0000CF2E 7007                       		moveq	#7,d0
0000CF30 1238 FE57                  		move.b	($FFFFFE57).w,d1
0000CF34 6700                       		beq.s	loc_C842
0000CF36 7000                       		moveq	#0,d0
0000CF38 0C01 0006                  		cmpi.b	#6,d1		; do you have all chaos	emeralds?
0000CF3C 6600                       		bne.s	loc_C842	; if not, branch
0000CF3E 7008                       		moveq	#8,d0		; load "Sonic got them all" text
0000CF40 317C 0018 0008             		move.w	#$18,8(a0)
0000CF46 317C 0118 0030             		move.w	#$118,$30(a0)	; change position of text
0000CF4C                            
0000CF4C                            loc_C842:
0000CF4C 1140 001A                  		move.b	d0,$1A(a0)
0000CF50                            
0000CF50                            Obj7E_ChkPos:				; XREF: Obj7E_Index
0000CF50 7210                       		moveq	#$10,d1		; set horizontal speed
0000CF52 3028 0030                  		move.w	$30(a0),d0
0000CF56 B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000CF5A 6700                       		beq.s	loc_C86C	; if yes, branch
0000CF5C 6C00                       		bge.s	Obj7E_Move
0000CF5E 4441                       		neg.w	d1
0000CF60                            
0000CF60                            Obj7E_Move:
0000CF60 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CF64                            
0000CF64                            loc_C85A:				; XREF: loc_C86C
0000CF64 3028 0008                  		move.w	8(a0),d0
0000CF68 6B00                       		bmi.s	locret_C86A
0000CF6A 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CF6E 6400                       		bcc.s	locret_C86A	; if yes, branch
0000CF70 6000 0000                  		bra.w	DisplaySprite
0000CF74                            ; ===========================================================================
0000CF74                            
0000CF74                            locret_C86A:
0000CF74 4E75                       		rts	
0000CF76                            ; ===========================================================================
0000CF76                            
0000CF76                            loc_C86C:				; XREF: Obj7E_ChkPos
0000CF76 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000CF7C 66E6                       		bne.s	loc_C85A
0000CF7E 5428 0024                  		addq.b	#2,$24(a0)
0000CF82 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CF88 11FC 007F D800             		move.b	#$7F,($FFFFD800).w ; load chaos	emerald	object
0000CF8E                            
0000CF8E                            Obj7E_Wait:				; XREF: Obj7E_Index
0000CF8E 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000CF92 6600                       		bne.s	Obj7E_Display
0000CF94 5428 0024                  		addq.b	#2,$24(a0)
0000CF98                            
0000CF98                            Obj7E_Display:
0000CF98 6000 0000                  		bra.w	DisplaySprite
0000CF9C                            ; ===========================================================================
0000CF9C                            
0000CF9C                            Obj7E_RingBonus:			; XREF: Obj7E_Index
0000CF9C 6100 0000                  		bsr.w	DisplaySprite
0000CFA0 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set ring bonus update flag
0000CFA6 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000CFAA 6700                       		beq.s	loc_C8C4	; if yes, branch
0000CFAC 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000CFB2 700A                       		moveq	#10,d0		; add 10 to score
0000CFB4 4EB9 0000 0000             		jsr	AddPoints
0000CFBA 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000CFBE 0200 0003                  		andi.b	#3,d0
0000CFC2 6600                       		bne.s	locret_C8EA
0000CFC4 303C 00CD                  		move.w	#$CD,d0
0000CFC8 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000CFCE                            ; ===========================================================================
0000CFCE                            
0000CFCE                            loc_C8C4:				; XREF: Obj7E_RingBonus
0000CFCE 303C 00C5                  		move.w	#$C5,d0
0000CFD2 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000CFD8 5428 0024                  		addq.b	#2,$24(a0)
0000CFDC 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CFE2 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000CFE8 6500                       		bcs.s	locret_C8EA	; if not, branch
0000CFEA 317C 003C 001E             		move.w	#60,$1E(a0)	; set time delay to 1 second
0000CFF0 5828 0024                  		addq.b	#4,$24(a0)	; goto "Obj7E_Continue"	routine
0000CFF4                            
0000CFF4                            locret_C8EA:
0000CFF4 4E75                       		rts	
0000CFF6                            ; ===========================================================================
0000CFF6                            
0000CFF6                            Obj7E_Exit:				; XREF: Obj7E_Index
0000CFF6 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000CFFC 6000 0000                  		bra.w	DisplaySprite
0000D000                            ; ===========================================================================
0000D000                            
0000D000                            Obj7E_Continue:				; XREF: Obj7E_Index
0000D000 11FC 0004 D6DA             		move.b	#4,($FFFFD6DA).w
0000D006 11FC 0014 D6E4             		move.b	#$14,($FFFFD6E4).w
0000D00C 303C 00BF                  		move.w	#$BF,d0
0000D010 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play continues music
0000D016 5428 0024                  		addq.b	#2,$24(a0)
0000D01A 317C 0168 001E             		move.w	#360,$1E(a0)	; set time delay to 6 seconds
0000D020 6000 0000                  		bra.w	DisplaySprite
0000D024                            ; ===========================================================================
0000D024                            
0000D024                            loc_C91A:				; XREF: Obj7E_Index
0000D024 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D028 0200 000F                  		andi.b	#$F,d0
0000D02C 6600                       		bne.s	Obj7E_Display2
0000D02E 0868 0000 001A             		bchg	#0,$1A(a0)
0000D034                            
0000D034                            Obj7E_Display2:
0000D034 6000 0000                  		bra.w	DisplaySprite
0000D038                            ; ===========================================================================
0000D038 0020 0120 00C4             Obj7E_Config:	dc.w $20, $120,	$C4	; start	x-pos, main x-pos, y-pos
0000D03E 0200                       		dc.b 2,	0		; rountine number, frame number
0000D040 0320 0120 0118             		dc.w $320, $120, $118
0000D046 0201                       		dc.b 2,	1
0000D048 0360 0120 0128             		dc.w $360, $120, $128
0000D04E 0202                       		dc.b 2,	2
0000D050 01EC 011C 00C4             		dc.w $1EC, $11C, $C4
0000D056 0203                       		dc.b 2,	3
0000D058 03A0 0120 0138             		dc.w $3A0, $120, $138
0000D05E 0206                       		dc.b 2,	6
0000D060                            ; ===========================================================================
0000D060                            ; ---------------------------------------------------------------------------
0000D060                            ; Object 7F - chaos emeralds from the special stage results screen
0000D060                            ; ---------------------------------------------------------------------------
0000D060                            
0000D060                            Obj7F:					; XREF: Obj_Index
0000D060 7000                       		moveq	#0,d0
0000D062 1028 0024                  		move.b	$24(a0),d0
0000D066 323B 0000                  		move.w	Obj7F_Index(pc,d0.w),d1
0000D06A 4EFB 1000                  		jmp	Obj7F_Index(pc,d1.w)
0000D06E                            ; ===========================================================================
0000D06E 0000                       Obj7F_Index:	dc.w Obj7F_Main-Obj7F_Index
0000D070 0000                       		dc.w Obj7F_Flash-Obj7F_Index
0000D072                            
0000D072                            ; ---------------------------------------------------------------------------
0000D072                            ; X-axis positions for chaos emeralds
0000D072                            ; ---------------------------------------------------------------------------
0000D072 0110 0128 00F8 0140 00E0+  Obj7F_PosData:	dc.w $110, $128, $F8, $140, $E0, $158
0000D07E                            ; ===========================================================================
0000D07E                            
0000D07E                            Obj7F_Main:				; XREF: Obj7F_Index
0000D07E 2248                       		movea.l	a0,a1
0000D080 45F9 0000 D072             		lea	(Obj7F_PosData).l,a2
0000D086 7400                       		moveq	#0,d2
0000D088 7200                       		moveq	#0,d1
0000D08A 1238 FE57                  		move.b	($FFFFFE57).w,d1 ; d1 is number	of emeralds
0000D08E 5301                       		subq.b	#1,d1		; subtract 1 from d1
0000D090 6500 0000                  		bcs.w	DeleteObject	; if you have 0	emeralds, branch
0000D094                            
0000D094                            Obj7F_Loop:
0000D094 12BC 007F                  		move.b	#$7F,0(a1)
0000D098 335A 0008                  		move.w	(a2)+,8(a1)	; set x-position
0000D09C 337C 00F0 000A             		move.w	#$F0,$A(a1)	; set y-position
0000D0A2 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0000D0A6 1633 2000                  		move.b	(a3,d2.w),d3
0000D0AA 1343 001A                  		move.b	d3,$1A(a1)
0000D0AE 1343 001C                  		move.b	d3,$1C(a1)
0000D0B2 5202                       		addq.b	#1,d2
0000D0B4 5429 0024                  		addq.b	#2,$24(a1)
0000D0B8 237C 0000 0000 0004        		move.l	#Map_obj7F,4(a1)
0000D0C0 337C 8541 0002             		move.w	#$8541,2(a1)
0000D0C6 137C 0000 0001             		move.b	#0,1(a1)
0000D0CC 43E9 0040                  		lea	$40(a1),a1	; next object
0000D0D0 51C9 FFC2                  		dbf	d1,Obj7F_Loop	; loop for d1 number of	emeralds
0000D0D4                            
0000D0D4                            Obj7F_Flash:				; XREF: Obj7F_Index
0000D0D4 1028 001A                  		move.b	$1A(a0),d0
0000D0D8 117C 0006 001A             		move.b	#6,$1A(a0)	; load 6th frame (blank)
0000D0DE 0C00 0006                  		cmpi.b	#6,d0
0000D0E2 6600                       		bne.s	Obj7F_Display
0000D0E4 1168 001C 001A             		move.b	$1C(a0),$1A(a0)	; load visible frame
0000D0EA                            
0000D0EA                            Obj7F_Display:
0000D0EA 6000 0000                  		bra.w	DisplaySprite
0000D0EE                            ; ===========================================================================
0000D0EE                            ; ---------------------------------------------------------------------------
0000D0EE                            ; Sprite mappings - zone title cards
0000D0EE                            ; ---------------------------------------------------------------------------
0000D0EE 0000                       Map_obj34:	dc.w byte_C9FE-Map_obj34
0000D0F0 0000                       		dc.w byte_CA2C-Map_obj34
0000D0F2 0000                       		dc.w byte_CA5A-Map_obj34
0000D0F4 0000                       		dc.w byte_CA7A-Map_obj34
0000D0F6 0000                       		dc.w byte_CAA8-Map_obj34
0000D0F8 0000                       		dc.w byte_CADC-Map_obj34
0000D0FA 0000                       		dc.w byte_CB10-Map_obj34
0000D0FC 0000                       		dc.w byte_CB26-Map_obj34
0000D0FE 0000                       		dc.w byte_CB31-Map_obj34
0000D100 0000                       		dc.w byte_CB3C-Map_obj34
0000D102 0000                       		dc.w byte_CB47-Map_obj34
0000D104 0000                       		dc.w byte_CB8A-Map_obj34
0000D106 0C                         byte_C9FE:	dc.b $C	;  GREEN HILL | CRUNCHY ROLL
0000D107 F805 0008 80               		dc.b $F8, 5, 0, 8, $80		; C
0000D10C F805 003A 90               		dc.b $F8, 5, 0, $3A, $90	; R
0000D111 F805 0046 A0               		dc.b $F8, 5, 0, $46, $A0	; U
0000D116 F805 002E B0               		dc.b $F8, 5, 0, $2E, $B0	; N
0000D11B F805 0008 C0               		dc.b $F8, 5, 0, 8, $C0		; C
0000D120 F805 001C D0               		dc.b $F8, 5, 0, $1C, $D0	; H
0000D125 F805 004A E0               		dc.b $F8, 5, 0, $4A, $E0	; Y
0000D12A F800 0056 F0               		dc.b $F8, 0, 0, $56, $F0	; Space
0000D12F F805 003A 00               		dc.b $F8, 5, 0, $3A, $0	; R
0000D134 F805 0032 10               		dc.b $F8, 5, 0, $32, $10	; O
0000D139 F805 0026 20               		dc.b $F8, 5, 0, $26, $20	; L
0000D13E F805 0026 30               		dc.b $F8, 5, 0, $26, $30	; L
0000D143 16                         byte_CA2C:	dc.b $16	;  LABYRINTH | I LIKE FILE EGGSPLORER
0000D144 F801 0020 80               		dc.b $F8, 1, 0, $20, $80	; I
0000D149 F800 0056 88               		dc.b $F8, 0, 0, $56, $88	; Space
0000D14E F805 0026 98               		dc.b $F8, 5, 0, $26, $98	; L
0000D153 F801 0020 A8               		dc.b $F8, 1, 0, $20, $A8	; I
0000D158 F805 0022 B0               		dc.b $F8, 5, 0, $22, $B0	; K
0000D15D F805 0010 C0               		dc.b $F8, 5, 0, $10, $C0	; E
0000D162 F800 0056 D0               		dc.b $F8, 0, 0, $56, $D0	; Space
0000D167 F805 0014 E0               		dc.b $F8, 5, 0, $14, $E0	; F
0000D16C F801 0020 F0               		dc.b $F8, 1, 0, $20, $F0	; I
0000D171 F805 0026 F8               		dc.b $F8, 5, 0, $26, $F8	; L
0000D176 F805 0010 08               		dc.b $F8, 5, 0, $10, $8	; E
0000D17B F800 0056 18               		dc.b $F8, 0, 0, $56, $18	; Space
0000D180 F805 0010 28               		dc.b $F8, 5, 0, $10, $28	; E
0000D185 F805 0018 38               		dc.b $F8, 5, 0, $18, $38	; G
0000D18A F805 0018 48               		dc.b $F8, 5, 0, $18, $48	; G
0000D18F F805 003E 58               		dc.b $F8, 5, 0, $3E, $58	; S
0000D194 F805 0036 68               		dc.b $F8, 5, 0, $36, $68	; P
0000D199 F805 0026 78               		dc.b $F8, 5, 0, $26, $78	; L
0000D19E F805 0032 88               		dc.b $F8, 5, 0, $32, $88	; O
0000D1A3 F805 003A 98               		dc.b $F8, 5, 0, $3A, $98	; R
0000D1A8 F805 0010 A8               		dc.b $F8, 5, 0, $10, $A8	; E
0000D1AD F805 003A B8               		dc.b $F8, 5, 0, $3A, $B8	; R
0000D1B2 05                         byte_CA5A:	dc.b 5	;  MARBLE | MARBL
0000D1B3 F805 002A 80               		dc.b $F8, 5, 0, $2A, $80	; M
0000D1B8 F805 0000 90               		dc.b $F8, 5, 0, 0, $90		; A
0000D1BD F805 003A A0               		dc.b $F8, 5, 0, $3A, $A0	; R
0000D1C2 F805 0004 B0               		dc.b $F8, 5, 0, 4, $B0		; B
0000D1C7 F805 0026 C0               		dc.b $F8, 5, 0, $26, $C0	; L
0000D1CC 11                         byte_CA7A:	dc.b $11	;  STAR LIGHT | DONT GET RIDOTHIS
0000D1CD F805 000C 80               		dc.b $F8, 5, 0, $0C, $80	; D
0000D1D2 F805 0032 90               		dc.b $F8, 5, 0, $32, $90	; O
0000D1D7 F805 002E A0               		dc.b $F8, 5, 0, $2E, $A0	; N
0000D1DC F805 0042 B0               		dc.b $F8, 5, 0, $42, $B0	; T
0000D1E1 F800 0056 C0               		dc.b $F8, 0, 0, $56, $C0	; Space
0000D1E6 F805 0018 D0               		dc.b $F8, 5, 0, $18, $D0	; G
0000D1EB F805 0010 E0               		dc.b $F8, 5, 0, $10, $E0	; E
0000D1F0 F805 0042 F0               		dc.b $F8, 5, 0, $42, $F0	; T
0000D1F5 F800 0056 00               		dc.b $F8, 0, 0, $56, $0	; Space
0000D1FA F805 003A 10               		dc.b $F8, 5, 0, $3A, $10	; R
0000D1FF F801 0020 20               		dc.b $F8, 1, 0, $20, $20	; I
0000D204 F805 000C 28               		dc.b $F8, 5, 0, $0C, $28	; D
0000D209 F805 0032 38               		dc.b $F8, 5, 0, $32, $38	; O
0000D20E F805 0042 48               		dc.b $F8, 5, 0, $42, $48	; T
0000D213 F805 001C 58               		dc.b $F8, 5, 0, $1C, $58	; H
0000D218 F801 0020 68               		dc.b $F8, 1, 0, $20, $68	; I
0000D21D F805 003E 70               		dc.b $F8, 5, 0, $3E, $70	; S
0000D222 15                         byte_CAA8:	dc.b $15	;  SPRING YARD | THE PIG FROM BARNYARD
0000D223 F805 0042 80               		dc.b $F8, 5, 0, $42, $80	; T
0000D228 F805 001C 90               		dc.b $F8, 5, 0, $1C, $90	; H
0000D22D F805 0010 A0               		dc.b $F8, 5, 0, $10, $A0	; E
0000D232 F800 0056 B0               		dc.b $F8, 0, 0, $56, $B0	; Space
0000D237 F805 0036 C0               		dc.b $F8, 5, 0, $36, $C0	; P
0000D23C F801 0020 D0               		dc.b $F8, 1, 0, $20, $D0	; I
0000D241 F805 0018 D8               		dc.b $F8, 5, 0, $18, $D8	; G
0000D246 F800 0056 E8               		dc.b $F8, 0, 0, $56, $E8	; Space
0000D24B F805 0014 F8               		dc.b $F8, 5, 0, $14, $F8	; F
0000D250 F805 003A 08               		dc.b $F8, 5, 0, $3A, $8	; R
0000D255 F805 0032 18               		dc.b $F8, 5, 0, $32, $18	; O
0000D25A F805 002A 28               		dc.b $F8, 5, 0, $2A, $28	; M
0000D25F F800 0056 38               		dc.b $F8, 0, 0, $56, $38	; Space
0000D264 F805 0004 48               		dc.b $F8, 5, 0, 4, $48		; B
0000D269 F805 0000 58               		dc.b $F8, 5, 0, 0, $58		; A
0000D26E F805 003A 68               		dc.b $F8, 5, 0, $3A, $68	; R
0000D273 F805 002E 78               		dc.b $F8, 5, 0, $2E, $78	; N
0000D278 F805 004A 88               		dc.b $F8, 5, 0, $4A, $88	; Y
0000D27D F805 0000 98               		dc.b $F8, 5, 0, 0, $98		; A
0000D282 F805 003A A8               		dc.b $F8, 5, 0, $3A, $A8	; R
0000D287 F805 000C B8               		dc.b $F8, 5, 0, $0C, $B8	; D
0000D28C 07                         byte_CADC:	dc.b 7	;  SCRAP BRAIN | Z Z Z Z
0000D28D F805 004E 80               		dc.b $F8, 5, 0, $4E, $80	; Z
0000D292 F800 0056 90               		dc.b $F8, 0, 0, $56, $90	; Space
0000D297 F805 004E A0               		dc.b $F8, 5, 0, $4E, $A0	; Z
0000D29C F800 0056 B0               		dc.b $F8, 0, 0, $56, $B0	; Space
0000D2A1 F805 004E C0               		dc.b $F8, 5, 0, $4E, $C0	; Z
0000D2A6 F800 0056 D0               		dc.b $F8, 0, 0, $56, $D0	; Space
0000D2AB F805 004E E0               		dc.b $F8, 5, 0, $4E, $E0	; Z
0000D2B0 04                         byte_CB10:	dc.b 4			; ZONE
0000D2B1 F805 004E E0               		dc.b $F8, 5, 0,	$4E, $E0
0000D2B6 F805 0032 F0               		dc.b $F8, 5, 0,	$32, $F0
0000D2BB F805 002E 00               		dc.b $F8, 5, 0,	$2E, 0
0000D2C0 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D2C5 00                         		dc.b 0
0000D2C6 02                         byte_CB26:	dc.b 2			; ACT 1
0000D2C7 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000D2CC F402 0057 0C               		dc.b $F4, 2, 0,	$57, $C
0000D2D1 02                         byte_CB31:	dc.b 2			; ACT 2
0000D2D2 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000D2D7 F406 005A 08               		dc.b $F4, 6, 0,	$5A, 8
0000D2DC 02                         byte_CB3C:	dc.b 2			; ACT 3
0000D2DD 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000D2E2 F406 0060 08               		dc.b $F4, 6, 0,	$60, 8
0000D2E7 0D                         byte_CB47:	dc.b $D			; Oval
0000D2E8 E40C 0070 F4               		dc.b $E4, $C, 0, $70, $F4
0000D2ED E402 0074 14               		dc.b $E4, 2, 0,	$74, $14
0000D2F2 EC04 0077 EC               		dc.b $EC, 4, 0,	$77, $EC
0000D2F7 F405 0079 E4               		dc.b $F4, 5, 0,	$79, $E4
0000D2FC 140C 1870 EC               		dc.b $14, $C, $18, $70,	$EC
0000D301 0402 1874 E4               		dc.b 4,	2, $18,	$74, $E4
0000D306 0C04 1877 04               		dc.b $C, 4, $18, $77, 4
0000D30B FC05 1879 0C               		dc.b $FC, 5, $18, $79, $C
0000D310 EC08 007D FC               		dc.b $EC, 8, 0,	$7D, $FC
0000D315 F40C 007C F4               		dc.b $F4, $C, 0, $7C, $F4
0000D31A FC08 007C F4               		dc.b $FC, 8, 0,	$7C, $F4
0000D31F 040C 007C EC               		dc.b 4,	$C, 0, $7C, $EC
0000D324 0C08 007C EC               		dc.b $C, 8, 0, $7C, $EC
0000D329 00                         		dc.b 0
0000D32A 05                         byte_CB8A:	dc.b 5			; FINAL
0000D32B F805 0014 DC               		dc.b $F8, 5, 0,	$14, $DC
0000D330 F801 0020 EC               		dc.b $F8, 1, 0,	$20, $EC
0000D335 F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000D33A F805 0000 04               		dc.b $F8, 5, 0,	0, 4
0000D33F F805 0026 14               		dc.b $F8, 5, 0,	$26, $14
0000D344                            		even
0000D344                            ; ---------------------------------------------------------------------------
0000D344                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000D344                            ; ---------------------------------------------------------------------------
0000D344                            Map_obj39:
0000D344                            	include "_maps\obj39.asm"
0000D344                            ; ---------------------------------------------------------------------------
0000D344                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000D344                            ; ---------------------------------------------------------------------------
0000D344 0000                       		dc.w byte_CBAC-Map_obj39
0000D346 0000                       		dc.w byte_CBB7-Map_obj39
0000D348 0000                       		dc.w byte_CBC2-Map_obj39
0000D34A 0000                       		dc.w byte_CBCD-Map_obj39
0000D34C 02                         byte_CBAC:	dc.b 2
0000D34D F80D 0000 B8               		dc.b $F8, $D, 0, 0, $B8
0000D352 F80D 0008 D8               		dc.b $F8, $D, 0, 8, $D8
0000D357 02                         byte_CBB7:	dc.b 2
0000D358 F80D 0014 08               		dc.b $F8, $D, 0, $14, 8
0000D35D F80D 000C 28               		dc.b $F8, $D, 0, $C, $28
0000D362 02                         byte_CBC2:	dc.b 2
0000D363 F809 001C C4               		dc.b $F8, 9, 0,	$1C, $C4
0000D368 F80D 0008 DC               		dc.b $F8, $D, 0, 8, $DC
0000D36D 02                         byte_CBCD:	dc.b 2
0000D36E F80D 0014 0C               		dc.b $F8, $D, 0, $14, $C
0000D373 F80D 000C 2C               		dc.b $F8, $D, 0, $C, $2C
0000D378                            		even
0000D378                            		even
0000D378                            
0000D378                            ; ---------------------------------------------------------------------------
0000D378                            ; Sprite mappings - "SONIC HAS PASSED" title card
0000D378                            ; ---------------------------------------------------------------------------
0000D378 0000                       Map_obj3A:	dc.w byte_CBEA-Map_obj3A
0000D37A 0000                       		dc.w byte_CC13-Map_obj3A
0000D37C 0000                       		dc.w byte_CC32-Map_obj3A
0000D37E 0000                       		dc.w byte_CC51-Map_obj3A
0000D380 0000                       		dc.w byte_CC75-Map_obj3A
0000D382 FF6F                       		dc.w byte_CB47-Map_obj3A
0000D384 FF4E                       		dc.w byte_CB26-Map_obj3A
0000D386 FF59                       		dc.w byte_CB31-Map_obj3A
0000D388 FF64                       		dc.w byte_CB3C-Map_obj3A
0000D38A 0F                         byte_CBEA:	dc.b $F	;  SONIC HAS | CADNIUM SULFIDE
0000D38B F805 0008 7C               		dc.b $F8, 5, 0, 8, $7C		; C
0000D390 F805 0000 8C               		dc.b $F8, 5, 0, 0, $8C		; A
0000D395 F805 000C 9C               		dc.b $F8, 5, 0, $0C, $9C	; D
0000D39A F805 002E AC               		dc.b $F8, 5, 0, $2E, $AC	; N
0000D39F F801 0020 BC               		dc.b $F8, 1, 0, $20, $BC	; I
0000D3A4 F805 0046 C4               		dc.b $F8, 5, 0, $46, $C4	; U
0000D3A9 F805 002A D4               		dc.b $F8, 5, 0, $2A, $D4	; M
0000D3AE F800 0056 E4               		dc.b $F8, 0, 0, $56, $E4	; Space
0000D3B3 F805 003E F4               		dc.b $F8, 5, 0, $3E, $F4	; S
0000D3B8 F805 0046 04               		dc.b $F8, 5, 0, $46, $4	; U
0000D3BD F805 0026 14               		dc.b $F8, 5, 0, $26, $14	; L
0000D3C2 F805 0014 24               		dc.b $F8, 5, 0, $14, $24	; F
0000D3C7 F801 0020 34               		dc.b $F8, 1, 0, $20, $34	; I
0000D3CC F805 000C 3C               		dc.b $F8, 5, 0, $0C, $3C	; D
0000D3D1 F805 0010 4C               		dc.b $F8, 5, 0, $10, $4C	; E
0000D3D6 06                         byte_CC13:	dc.b 6			; PASSED
0000D3D7 F805 0036 D0               		dc.b $F8, 5, 0,	$36, $D0
0000D3DC F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000D3E1 F805 003E F0               		dc.b $F8, 5, 0,	$3E, $F0
0000D3E6 F805 003E 00               		dc.b $F8, 5, 0,	$3E, 0
0000D3EB F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D3F0 F805 000C 20               		dc.b $F8, 5, 0,	$C, $20
0000D3F5 06                         byte_CC32:	dc.b 6			; SCORE
0000D3F6 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000D3FB F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000D400 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000D405 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000D40A F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000D40F FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000D414 07                         byte_CC51:	dc.b 7			; TIME BONUS
0000D415 F80D 015A B0               		dc.b $F8, $D, 1, $5A, $B0
0000D41A F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D41F F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D424 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D429 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D42E F80D FFF0 28               		dc.b $F8, $D, $FF, $F0,	$28
0000D433 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D438 07                         byte_CC75:	dc.b 7			; RING BONUS
0000D439 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000D43E F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D443 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D448 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D44D FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D452 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000D457 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D45C                            		even
0000D45C                            ; ---------------------------------------------------------------------------
0000D45C                            ; Sprite mappings - special stage results screen
0000D45C                            ; ---------------------------------------------------------------------------
0000D45C 0000                       Map_obj7E:	dc.w byte_CCAC-Map_obj7E
0000D45E 0000                       		dc.w byte_CCEE-Map_obj7E
0000D460 0000                       		dc.w byte_CD0D-Map_obj7E
0000D462 FE8B                       		dc.w byte_CB47-Map_obj7E
0000D464 0000                       		dc.w byte_CD31-Map_obj7E
0000D466 0000                       		dc.w byte_CD46-Map_obj7E
0000D468 0000                       		dc.w byte_CD5B-Map_obj7E
0000D46A 0000                       		dc.w byte_CD6B-Map_obj7E
0000D46C 0000                       		dc.w byte_CDA8-Map_obj7E
0000D46E 0D                         byte_CCAC:	dc.b $D			; "CHAOS EMERALDS"
0000D46F F805 0008 90               		dc.b $F8, 5, 0,	8, $90
0000D474 F805 001C A0               		dc.b $F8, 5, 0,	$1C, $A0
0000D479 F805 0000 B0               		dc.b $F8, 5, 0,	0, $B0
0000D47E F805 0032 C0               		dc.b $F8, 5, 0,	$32, $C0
0000D483 F805 003E D0               		dc.b $F8, 5, 0,	$3E, $D0
0000D488 F805 0010 F0               		dc.b $F8, 5, 0,	$10, $F0
0000D48D F805 002A 00               		dc.b $F8, 5, 0,	$2A, 0
0000D492 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D497 F805 003A 20               		dc.b $F8, 5, 0,	$3A, $20
0000D49C F805 0000 30               		dc.b $F8, 5, 0,	0, $30
0000D4A1 F805 0026 40               		dc.b $F8, 5, 0,	$26, $40
0000D4A6 F805 000C 50               		dc.b $F8, 5, 0,	$C, $50
0000D4AB F805 003E 60               		dc.b $F8, 5, 0,	$3E, $60
0000D4B0 06                         byte_CCEE:	dc.b 6			; "SCORE"
0000D4B1 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000D4B6 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000D4BB F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000D4C0 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000D4C5 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000D4CA FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000D4CF 07                         byte_CD0D:	dc.b 7
0000D4D0 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000D4D5 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D4DA F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D4DF F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D4E4 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D4E9 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000D4EE F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D4F3 04                         byte_CD31:	dc.b 4
0000D4F4 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D4F9 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D4FE F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D503 F806 1FE3 40               		dc.b $F8, 6, $1F, $E3, $40
0000D508 04                         byte_CD46:	dc.b 4
0000D509 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D50E F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D513 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D518 F806 1FE9 40               		dc.b $F8, 6, $1F, $E9, $40
0000D51D 03                         byte_CD5B:	dc.b 3
0000D51E F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D523 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D528 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D52D 0C                         byte_CD6B:	dc.b $C			; "SPECIAL STAGE"
0000D52E F805 003E 9C               		dc.b $F8, 5, 0,	$3E, $9C
0000D533 F805 0036 AC               		dc.b $F8, 5, 0,	$36, $AC
0000D538 F805 0010 BC               		dc.b $F8, 5, 0,	$10, $BC
0000D53D F805 0008 CC               		dc.b $F8, 5, 0,	8, $CC
0000D542 F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000D547 F805 0000 E4               		dc.b $F8, 5, 0,	0, $E4
0000D54C F805 0026 F4               		dc.b $F8, 5, 0,	$26, $F4
0000D551 F805 003E 14               		dc.b $F8, 5, 0,	$3E, $14
0000D556 F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000D55B F805 0000 34               		dc.b $F8, 5, 0,	0, $34
0000D560 F805 0018 44               		dc.b $F8, 5, 0,	$18, $44
0000D565 F805 0010 54               		dc.b $F8, 5, 0,	$10, $54
0000D56A 0F                         byte_CDA8:	dc.b $F			; "SONIC GOT THEM ALL"
0000D56B F805 003E 88               		dc.b $F8, 5, 0,	$3E, $88
0000D570 F805 0032 98               		dc.b $F8, 5, 0,	$32, $98
0000D575 F805 002E A8               		dc.b $F8, 5, 0,	$2E, $A8
0000D57A F801 0020 B8               		dc.b $F8, 1, 0,	$20, $B8
0000D57F F805 0008 C0               		dc.b $F8, 5, 0,	8, $C0
0000D584 F805 0018 D8               		dc.b $F8, 5, 0,	$18, $D8
0000D589 F805 0032 E8               		dc.b $F8, 5, 0,	$32, $E8
0000D58E F805 0042 F8               		dc.b $F8, 5, 0,	$42, $F8
0000D593 F805 0042 10               		dc.b $F8, 5, 0,	$42, $10
0000D598 F805 001C 20               		dc.b $F8, 5, 0,	$1C, $20
0000D59D F805 0010 30               		dc.b $F8, 5, 0,	$10, $30
0000D5A2 F805 002A 40               		dc.b $F8, 5, 0,	$2A, $40
0000D5A7 F805 0000 58               		dc.b $F8, 5, 0,	0, $58
0000D5AC F805 0026 68               		dc.b $F8, 5, 0,	$26, $68
0000D5B1 F805 0026 78               		dc.b $F8, 5, 0,	$26, $78
0000D5B6                            		even
0000D5B6                            ; ---------------------------------------------------------------------------
0000D5B6                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000D5B6                            ; ---------------------------------------------------------------------------
0000D5B6                            Map_obj7F:
0000D5B6                            	include "_maps\obj7F.asm"
0000D5B6                            ; ---------------------------------------------------------------------------
0000D5B6                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000D5B6                            ; ---------------------------------------------------------------------------
0000D5B6 0000                       		dc.w byte_CE02-Map_obj7F
0000D5B8 0000                       		dc.w byte_CE08-Map_obj7F
0000D5BA 0000                       		dc.w byte_CE0E-Map_obj7F
0000D5BC 0000                       		dc.w byte_CE14-Map_obj7F
0000D5BE 0000                       		dc.w byte_CE1A-Map_obj7F
0000D5C0 0000                       		dc.w byte_CE20-Map_obj7F
0000D5C2 0000                       		dc.w byte_CE26-Map_obj7F
0000D5C4 01                         byte_CE02:	dc.b 1
0000D5C5 F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0000D5CA 01                         byte_CE08:	dc.b 1
0000D5CB F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000D5D0 01                         byte_CE0E:	dc.b 1
0000D5D1 F805 4004 F8               		dc.b $F8, 5, $40, 4, $F8
0000D5D6 01                         byte_CE14:	dc.b 1
0000D5D7 F805 6004 F8               		dc.b $F8, 5, $60, 4, $F8
0000D5DC 01                         byte_CE1A:	dc.b 1
0000D5DD F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8
0000D5E2 01                         byte_CE20:	dc.b 1
0000D5E3 F805 200C F8               		dc.b $F8, 5, $20, $C, $F8
0000D5E8 00                         byte_CE26:	dc.b 0			; Blank frame
0000D5EA 00                         		even
0000D5EA 00                         		even
0000D5EA                            
0000D5EA                            ; ===========================================================================
0000D5EA                            ; ---------------------------------------------------------------------------
0000D5EA                            ; Object 36 - spikes
0000D5EA                            ; ---------------------------------------------------------------------------
0000D5EA                            
0000D5EA                            Obj36:					; XREF: Obj_Index
0000D5EA 7000                       		moveq	#0,d0
0000D5EC 1028 0024                  		move.b	$24(a0),d0
0000D5F0 323B 0000                  		move.w	Obj36_Index(pc,d0.w),d1
0000D5F4 4EFB 1000                  		jmp	Obj36_Index(pc,d1.w)
0000D5F8                            ; ===========================================================================
0000D5F8 0000                       Obj36_Index:	dc.w Obj36_Main-Obj36_Index
0000D5FA 0000                       		dc.w Obj36_Solid-Obj36_Index
0000D5FC                            
0000D5FC 0014                       Obj36_Var:	dc.b 0,	$14		; frame	number,	object width
0000D5FE 0110                       		dc.b 1,	$10
0000D600 0204                       		dc.b 2,	4
0000D602 031C                       		dc.b 3,	$1C
0000D604 0440                       		dc.b 4,	$40
0000D606 0510                       		dc.b 5,	$10
0000D608                            ; ===========================================================================
0000D608                            
0000D608                            Obj36_Main:				; XREF: Obj36_Index
0000D608 5428 0024                  		addq.b	#2,$24(a0)
0000D60C 217C 0000 0000 0004        		move.l	#Map_obj36,4(a0)
0000D614 317C 051B 0002             		move.w	#$51B,2(a0)
0000D61A 0028 0004 0001             		ori.b	#4,1(a0)
0000D620 117C 0004 0018             		move.b	#4,$18(a0)
0000D626 1028 0028                  		move.b	$28(a0),d0
0000D62A 0228 000F 0028             		andi.b	#$F,$28(a0)
0000D630 0240 00F0                  		andi.w	#$F0,d0
0000D634 43F9 0000 D5FC             		lea	(Obj36_Var).l,a1
0000D63A E648                       		lsr.w	#3,d0
0000D63C D2C0                       		adda.w	d0,a1
0000D63E 1159 001A                  		move.b	(a1)+,$1A(a0)
0000D642 1159 0019                  		move.b	(a1)+,$19(a0)
0000D646 3168 0008 0030             		move.w	8(a0),$30(a0)
0000D64C 3168 000C 0032             		move.w	$C(a0),$32(a0)
0000D652                            
0000D652                            Obj36_Solid:				; XREF: Obj36_Index
0000D652 6100 0000                  		bsr.w	Obj36_Type0x	; make the object move
0000D656 343C 0004                  		move.w	#4,d2
0000D65A 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is object type $5x ?
0000D660 6700                       		beq.s	Obj36_SideWays	; if yes, branch
0000D662 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is object type $1x ?
0000D668 6600                       		bne.s	Obj36_Upright	; if not, branch
0000D66A 343C 0014                  		move.w	#$14,d2
0000D66E                            
0000D66E                            ; Spikes types $1x and $5x face	sideways
0000D66E                            
0000D66E                            Obj36_SideWays:				; XREF: Obj36_Solid
0000D66E 323C 001B                  		move.w	#$1B,d1
0000D672 3602                       		move.w	d2,d3
0000D674 5243                       		addq.w	#1,d3
0000D676 3828 0008                  		move.w	8(a0),d4
0000D67A 6100 0000                  		bsr.w	SolidObject
0000D67E 0828 0003 0022             		btst	#3,$22(a0)
0000D684 6600                       		bne.s	Obj36_Display
0000D686 0C44 0001                  		cmpi.w	#1,d4
0000D68A 6700                       		beq.s	Obj36_Hurt
0000D68C 6000                       		bra.s	Obj36_Display
0000D68E                            ; ===========================================================================
0000D68E                            
0000D68E                            ; Spikes types $0x, $2x, $3x and $4x face up or	down
0000D68E                            
0000D68E                            Obj36_Upright:				; XREF: Obj36_Solid
0000D68E 7200                       		moveq	#0,d1
0000D690 1228 0019                  		move.b	$19(a0),d1
0000D694 0641 000B                  		addi.w	#$B,d1
0000D698 343C 0010                  		move.w	#$10,d2
0000D69C 363C 0011                  		move.w	#$11,d3
0000D6A0 3828 0008                  		move.w	8(a0),d4
0000D6A4 6100 0000                  		bsr.w	SolidObject
0000D6A8 0828 0003 0022             		btst	#3,$22(a0)
0000D6AE 6600                       		bne.s	Obj36_Hurt
0000D6B0 4A44                       		tst.w	d4
0000D6B2 6A00                       		bpl.s	Obj36_Display
0000D6B4                            
0000D6B4                            Obj36_Hurt:				; XREF: Obj36_SideWays; Obj36_Upright
0000D6B4 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0000D6B8 6600                       		bne.s	Obj36_Display	; if yes, branch
0000D6BA 2F08                       		move.l	a0,-(sp)
0000D6BC 2448                       		movea.l	a0,a2
0000D6BE 41F8 D000                  		lea	($FFFFD000).w,a0
0000D6C2 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000D6C8 6400                       		bcc.s	loc_CF20
0000D6CA 2628 000C                  		move.l	$C(a0),d3
0000D6CE 3028 0012                  		move.w	$12(a0),d0
0000D6D2 48C0                       		ext.l	d0
0000D6D4 E180                       		asl.l	#8,d0
0000D6D6 9680                       		sub.l	d0,d3
0000D6D8 2143 000C                  		move.l	d3,$C(a0)
0000D6DC 4EB9 0000 0000             		jsr	HurtSonic
0000D6E2                            
0000D6E2                            loc_CF20:
0000D6E2 205F                       		movea.l	(sp)+,a0
0000D6E4                            
0000D6E4                            Obj36_Display:
0000D6E4 6100 0000                  		bsr.w	DisplaySprite
0000D6E8 3028 0030                  		move.w	$30(a0),d0
0000D6EC 0240 FF80                  		andi.w	#$FF80,d0
0000D6F0 3238 F700                  		move.w	($FFFFF700).w,d1
0000D6F4 0441 0080                  		subi.w	#$80,d1
0000D6F8 0241 FF80                  		andi.w	#$FF80,d1
0000D6FC 9041                       		sub.w	d1,d0
0000D6FE 0C40 0280                  		cmpi.w	#$280,d0
0000D702 6200 0000                  		bhi.w	DeleteObject
0000D706 4E75                       		rts	
0000D708                            ; ===========================================================================
0000D708                            
0000D708                            Obj36_Type0x:				; XREF: Obj36_Solid
0000D708 7000                       		moveq	#0,d0
0000D70A 1028 0028                  		move.b	$28(a0),d0
0000D70E D040                       		add.w	d0,d0
0000D710 323B 0000                  		move.w	Obj36_TypeIndex(pc,d0.w),d1
0000D714 4EFB 1000                  		jmp	Obj36_TypeIndex(pc,d1.w)
0000D718                            ; ===========================================================================
0000D718 0000                       Obj36_TypeIndex:dc.w Obj36_Type00-Obj36_TypeIndex
0000D71A 0000                       		dc.w Obj36_Type01-Obj36_TypeIndex
0000D71C 0000                       		dc.w Obj36_Type02-Obj36_TypeIndex
0000D71E                            ; ===========================================================================
0000D71E                            
0000D71E                            Obj36_Type00:				; XREF: Obj36_TypeIndex
0000D71E 4E75                       		rts			; don't move the object
0000D720                            ; ===========================================================================
0000D720                            
0000D720                            Obj36_Type01:				; XREF: Obj36_TypeIndex
0000D720 6100 0000                  		bsr.w	Obj36_Wait
0000D724 7000                       		moveq	#0,d0
0000D726 1028 0034                  		move.b	$34(a0),d0
0000D72A D068 0032                  		add.w	$32(a0),d0
0000D72E 3140 000C                  		move.w	d0,$C(a0)	; move the object vertically
0000D732 4E75                       		rts	
0000D734                            ; ===========================================================================
0000D734                            
0000D734                            Obj36_Type02:				; XREF: Obj36_TypeIndex
0000D734 6100 0000                  		bsr.w	Obj36_Wait
0000D738 7000                       		moveq	#0,d0
0000D73A 1028 0034                  		move.b	$34(a0),d0
0000D73E D068 0030                  		add.w	$30(a0),d0
0000D742 3140 0008                  		move.w	d0,8(a0)	; move the object horizontally
0000D746 4E75                       		rts	
0000D748                            ; ===========================================================================
0000D748                            
0000D748                            Obj36_Wait:
0000D748 4A68 0038                  		tst.w	$38(a0)		; is time delay	= zero?
0000D74C 6700                       		beq.s	loc_CFA4	; if yes, branch
0000D74E 5368 0038                  		subq.w	#1,$38(a0)	; subtract 1 from time delay
0000D752 6600                       		bne.s	locret_CFE6
0000D754 4A28 0001                  		tst.b	1(a0)
0000D758 6A00                       		bpl.s	locret_CFE6
0000D75A 303C 00B6                  		move.w	#$B6,d0
0000D75E 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play "spikes moving" sound
0000D764 6000                       		bra.s	locret_CFE6
0000D766                            ; ===========================================================================
0000D766                            
0000D766                            loc_CFA4:
0000D766 4A68 0036                  		tst.w	$36(a0)
0000D76A 6700                       		beq.s	loc_CFC6
0000D76C 0468 0800 0034             		subi.w	#$800,$34(a0)
0000D772 6400                       		bcc.s	locret_CFE6
0000D774 317C 0000 0034             		move.w	#0,$34(a0)
0000D77A 317C 0000 0036             		move.w	#0,$36(a0)
0000D780 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000D786 6000                       		bra.s	locret_CFE6
0000D788                            ; ===========================================================================
0000D788                            
0000D788                            loc_CFC6:
0000D788 0668 0800 0034             		addi.w	#$800,$34(a0)
0000D78E 0C68 2000 0034             		cmpi.w	#$2000,$34(a0)
0000D794 6500                       		bcs.s	locret_CFE6
0000D796 317C 2000 0034             		move.w	#$2000,$34(a0)
0000D79C 317C 0001 0036             		move.w	#1,$36(a0)
0000D7A2 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000D7A8                            
0000D7A8                            locret_CFE6:
0000D7A8 4E75                       		rts	
0000D7AA                            ; ===========================================================================
0000D7AA                            ; ---------------------------------------------------------------------------
0000D7AA                            ; Sprite mappings - spikes
0000D7AA                            ; ---------------------------------------------------------------------------
0000D7AA                            Map_obj36:
0000D7AA                            	include "_maps\obj36.asm"
0000D7AA                            ; ---------------------------------------------------------------------------
0000D7AA                            ; Sprite mappings - spikes
0000D7AA                            ; ---------------------------------------------------------------------------
0000D7AA 0000                       		dc.w byte_CFF4-Map_obj36
0000D7AC 0000                       		dc.w byte_D004-Map_obj36
0000D7AE 0000                       		dc.w byte_D014-Map_obj36
0000D7B0 0000                       		dc.w byte_D01A-Map_obj36
0000D7B2 0000                       		dc.w byte_D02A-Map_obj36
0000D7B4 0000                       		dc.w byte_D049-Map_obj36
0000D7B6 03                         byte_CFF4:	dc.b 3			; 3 spikes
0000D7B7 F003 0004 EC               		dc.b $F0, 3, 0,	4, $EC
0000D7BC F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000D7C1 F003 0004 0C               		dc.b $F0, 3, 0,	4, $C
0000D7C6 03                         byte_D004:	dc.b 3			; 3 spikes facing sideways
0000D7C7 EC0C 0000 F0               		dc.b $EC, $C, 0, 0, $F0
0000D7CC FC0C 0000 F0               		dc.b $FC, $C, 0, 0, $F0
0000D7D1 0C0C 0000 F0               		dc.b $C, $C, 0,	0, $F0
0000D7D6 01                         byte_D014:	dc.b 1			; 1 spike
0000D7D7 F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000D7DC 03                         byte_D01A:	dc.b 3			; 3 spikes widely spaced
0000D7DD F003 0004 E4               		dc.b $F0, 3, 0,	4, $E4
0000D7E2 F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000D7E7 F003 0004 14               		dc.b $F0, 3, 0,	4, $14
0000D7EC 06                         byte_D02A:	dc.b 6			; 6 spikes
0000D7ED F003 0004 C0               		dc.b $F0, 3, 0,	4, $C0
0000D7F2 F003 0004 D8               		dc.b $F0, 3, 0,	4, $D8
0000D7F7 F003 0004 F0               		dc.b $F0, 3, 0,	4, $F0
0000D7FC F003 0004 08               		dc.b $F0, 3, 0,	4, 8
0000D801 F003 0004 20               		dc.b $F0, 3, 0,	4, $20
0000D806 F003 0004 38               		dc.b $F0, 3, 0,	4, $38
0000D80B 01                         byte_D049:	dc.b 1			; 1 spike facing sideways
0000D80C FC0C 0000 F0               		dc.b $FC, $C, 0, 0, $F0
0000D812 00                         		even
0000D812 00                         		even
0000D812                            
0000D812                            ; ===========================================================================
0000D812                            ; ---------------------------------------------------------------------------
0000D812                            ; Object 3B - purple rock (GHZ)
0000D812                            ; ---------------------------------------------------------------------------
0000D812                            
0000D812                            Obj3B:					; XREF: Obj_Index
0000D812 7000                       		moveq	#0,d0
0000D814 1028 0024                  		move.b	$24(a0),d0
0000D818 323B 0000                  		move.w	Obj3B_Index(pc,d0.w),d1
0000D81C 4EFB 1000                  		jmp	Obj3B_Index(pc,d1.w)
0000D820                            ; ===========================================================================
0000D820 0000                       Obj3B_Index:	dc.w Obj3B_Main-Obj3B_Index
0000D822 0000                       		dc.w Obj3B_Solid-Obj3B_Index
0000D824                            ; ===========================================================================
0000D824                            
0000D824                            Obj3B_Main:				; XREF: Obj3B_Index
0000D824 5428 0024                  		addq.b	#2,$24(a0)
0000D828 217C 0000 0000 0004        		move.l	#Map_obj3B,4(a0)
0000D830 317C 63D0 0002             		move.w	#$63D0,2(a0)
0000D836 117C 0004 0001             		move.b	#4,1(a0)
0000D83C 117C 0013 0019             		move.b	#$13,$19(a0)
0000D842 117C 0004 0018             		move.b	#4,$18(a0)
0000D848                            
0000D848                            Obj3B_Solid:				; XREF: Obj3B_Index
0000D848 323C 001B                  		move.w	#$1B,d1
0000D84C 343C 0010                  		move.w	#$10,d2
0000D850 363C 0010                  		move.w	#$10,d3
0000D854 3828 0008                  		move.w	8(a0),d4
0000D858 6100 0000                  		bsr.w	SolidObject
0000D85C 6100 0000                  		bsr.w	DisplaySprite
0000D860 3028 0008                  		move.w	8(a0),d0
0000D864 0240 FF80                  		andi.w	#$FF80,d0
0000D868 3238 F700                  		move.w	($FFFFF700).w,d1
0000D86C 0441 0080                  		subi.w	#$80,d1
0000D870 0241 FF80                  		andi.w	#$FF80,d1
0000D874 9041                       		sub.w	d1,d0
0000D876 0C40 0280                  		cmpi.w	#$280,d0
0000D87A 6200 0000                  		bhi.w	DeleteObject
0000D87E 4E75                       		rts	
0000D880                            ; ===========================================================================
0000D880                            ; ---------------------------------------------------------------------------
0000D880                            ; Object 49 - waterfall	sound effect (GHZ)
0000D880                            ; ---------------------------------------------------------------------------
0000D880                            
0000D880                            Obj49:					; XREF: Obj_Index
0000D880 7000                       		moveq	#0,d0
0000D882 1028 0024                  		move.b	$24(a0),d0
0000D886 323B 0000                  		move.w	Obj49_Index(pc,d0.w),d1
0000D88A 4EFB 1000                  		jmp	Obj49_Index(pc,d1.w)
0000D88E                            ; ===========================================================================
0000D88E 0000                       Obj49_Index:	dc.w Obj49_Main-Obj49_Index
0000D890 0000                       		dc.w Obj49_PlaySnd-Obj49_Index
0000D892                            ; ===========================================================================
0000D892                            
0000D892                            Obj49_Main:				; XREF: Obj49_Index
0000D892 5428 0024                  		addq.b	#2,$24(a0)
0000D896 117C 0004 0001             		move.b	#4,1(a0)
0000D89C                            
0000D89C                            Obj49_PlaySnd:				; XREF: Obj49_Index
0000D89C 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D8A0 0200 003F                  		andi.b	#$3F,d0
0000D8A4 6600                       		bne.s	Obj49_ChkDel
0000D8A6 303C 00D0                  		move.w	#$D0,d0
0000D8AA 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play waterfall sound
0000D8B0                            
0000D8B0                            Obj49_ChkDel:
0000D8B0 3028 0008                  		move.w	8(a0),d0
0000D8B4 0240 FF80                  		andi.w	#$FF80,d0
0000D8B8 3238 F700                  		move.w	($FFFFF700).w,d1
0000D8BC 0441 0080                  		subi.w	#$80,d1
0000D8C0 0241 FF80                  		andi.w	#$FF80,d1
0000D8C4 9041                       		sub.w	d1,d0
0000D8C6 0C40 0280                  		cmpi.w	#$280,d0
0000D8CA 6200 0000                  		bhi.w	DeleteObject
0000D8CE 4E75                       		rts	
0000D8D0                            ; ===========================================================================
0000D8D0                            ; ---------------------------------------------------------------------------
0000D8D0                            ; Sprite mappings - purple rock	(GHZ)
0000D8D0                            ; ---------------------------------------------------------------------------
0000D8D0                            Map_obj3B:
0000D8D0                            	include "_maps\obj3B.asm"
0000D8D0                            ; ---------------------------------------------------------------------------
0000D8D0                            ; Sprite mappings - purple rock	(GHZ)
0000D8D0                            ; ---------------------------------------------------------------------------
0000D8D0 0000                       		dc.w byte_D110-Map_obj3B
0000D8D2 02                         byte_D110:	dc.b 2
0000D8D3 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000D8D8 F00B 000C 00               		dc.b $F0, $B, 0, $C, 0
0000D8DE 00                         		even
0000D8DE 00                         		even
0000D8DE                            
0000D8DE                            ; ===========================================================================
0000D8DE                            ; ---------------------------------------------------------------------------
0000D8DE                            ; Object 3C - smashable	wall (GHZ, SLZ)
0000D8DE                            ; ---------------------------------------------------------------------------
0000D8DE                            
0000D8DE                            Obj3C:					; XREF: Obj_Index
0000D8DE 7000                       		moveq	#0,d0
0000D8E0 1028 0024                  		move.b	$24(a0),d0
0000D8E4 323B 0000                  		move.w	Obj3C_Index(pc,d0.w),d1
0000D8E8 4EBB 1000                  		jsr	Obj3C_Index(pc,d1.w)
0000D8EC 6000 0000                  		bra.w	MarkObjGone
0000D8F0                            ; ===========================================================================
0000D8F0 0000                       Obj3C_Index:	dc.w Obj3C_Main-Obj3C_Index
0000D8F2 0000                       		dc.w Obj3C_Solid-Obj3C_Index
0000D8F4 0000                       		dc.w Obj3C_FragMove-Obj3C_Index
0000D8F6                            ; ===========================================================================
0000D8F6                            
0000D8F6                            Obj3C_Main:				; XREF: Obj3C_Index
0000D8F6 5428 0024                  		addq.b	#2,$24(a0)
0000D8FA 217C 0000 0000 0004        		move.l	#Map_obj3C,4(a0)
0000D902 317C 450F 0002             		move.w	#$450F,2(a0)
0000D908 117C 0004 0001             		move.b	#4,1(a0)
0000D90E 117C 0010 0019             		move.b	#$10,$19(a0)
0000D914 117C 0004 0018             		move.b	#4,$18(a0)
0000D91A 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0000D920                            
0000D920                            Obj3C_Solid:				; XREF: Obj3C_Index
0000D920 3178 D010 0030             		move.w	($FFFFD010).w,$30(a0) ;	load Sonic's horizontal speed
0000D926 323C 001B                  		move.w	#$1B,d1
0000D92A 343C 0020                  		move.w	#$20,d2
0000D92E 363C 0020                  		move.w	#$20,d3
0000D932 3828 0008                  		move.w	8(a0),d4
0000D936 6100 0000                  		bsr.w	SolidObject
0000D93A 0828 0005 0022             		btst	#5,$22(a0)
0000D940 6600                       		bne.s	Obj3C_ChkRoll
0000D942                            
0000D942                            locret_D180:
0000D942 4E75                       		rts	
0000D944                            ; ===========================================================================
0000D944                            
0000D944                            Obj3C_ChkRoll:				; XREF: Obj3C_Solid
0000D944 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000D94A 66F6                       		bne.s	locret_D180	; if not, branch
0000D94C 3028 0030                  		move.w	$30(a0),d0
0000D950 6A00                       		bpl.s	Obj3C_ChkSpeed
0000D952 4440                       		neg.w	d0
0000D954                            
0000D954                            Obj3C_ChkSpeed:
0000D954 0C40 0480                  		cmpi.w	#$480,d0	; is Sonic's speed $480 or higher?
0000D958 65E8                       		bcs.s	locret_D180	; if not, branch
0000D95A 3368 0030 0010             		move.w	$30(a0),$10(a1)
0000D960 5869 0008                  		addq.w	#4,8(a1)
0000D964 49F9 0000 0000             		lea	(Obj3C_FragSpd1).l,a4 ;	use fragments that move	right
0000D96A 3028 0008                  		move.w	8(a0),d0
0000D96E B069 0008                  		cmp.w	8(a1),d0	; is Sonic to the right	of the block?
0000D972 6500                       		bcs.s	Obj3C_Smash	; if yes, branch
0000D974 5169 0008                  		subq.w	#8,8(a1)
0000D978 49F9 0000 0000             		lea	(Obj3C_FragSpd2).l,a4 ;	use fragments that move	left
0000D97E                            
0000D97E                            Obj3C_Smash:
0000D97E 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000D984 08A8 0005 0022             		bclr	#5,$22(a0)
0000D98A 08A9 0005 0022             		bclr	#5,$22(a1)
0000D990 7207                       		moveq	#7,d1		; load 8 fragments
0000D992 343C 0070                  		move.w	#$70,d2
0000D996 6100                       		bsr.s	SmashObject
0000D998                            
0000D998                            Obj3C_FragMove:				; XREF: Obj3C_Index
0000D998 6100 0000                  		bsr.w	SpeedToPos
0000D99C 0668 0070 0012             		addi.w	#$70,$12(a0)	; make fragment	fall faster
0000D9A2 6100 0000                  		bsr.w	DisplaySprite
0000D9A6 4A28 0001                  		tst.b	1(a0)
0000D9AA 6A00 0000                  		bpl.w	DeleteObject
0000D9AE 4E75                       		rts	
0000D9B0                            
0000D9B0                            ; ---------------------------------------------------------------------------
0000D9B0                            ; Subroutine to	smash a	block (GHZ walls and MZ	blocks)
0000D9B0                            ; ---------------------------------------------------------------------------
0000D9B0                            
0000D9B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D9B0                            
0000D9B0                            
0000D9B0                            SmashObject:				; XREF: Obj3C_Smash
0000D9B0 7000                       		moveq	#0,d0
0000D9B2 1028 001A                  		move.b	$1A(a0),d0
0000D9B6 D040                       		add.w	d0,d0
0000D9B8 2668 0004                  		movea.l	4(a0),a3
0000D9BC D6F3 0000                  		adda.w	(a3,d0.w),a3
0000D9C0 524B                       		addq.w	#1,a3
0000D9C2 08E8 0005 0001             		bset	#5,1(a0)
0000D9C8 1810                       		move.b	0(a0),d4
0000D9CA 1A28 0001                  		move.b	1(a0),d5
0000D9CE 2248                       		movea.l	a0,a1
0000D9D0 6000                       		bra.s	Smash_LoadFrag
0000D9D2                            ; ===========================================================================
0000D9D2                            
0000D9D2                            Smash_Loop:
0000D9D2 6100 0000                  		bsr.w	SingleObjLoad
0000D9D6 6600                       		bne.s	Smash_PlaySnd
0000D9D8 5A4B                       		addq.w	#5,a3
0000D9DA                            
0000D9DA                            Smash_LoadFrag:				; XREF: SmashObject
0000D9DA 137C 0004 0024             		move.b	#4,$24(a1)
0000D9E0 1284                       		move.b	d4,0(a1)
0000D9E2 234B 0004                  		move.l	a3,4(a1)
0000D9E6 1345 0001                  		move.b	d5,1(a1)
0000D9EA 3368 0008 0008             		move.w	8(a0),8(a1)
0000D9F0 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000D9F6 3368 0002 0002             		move.w	2(a0),2(a1)
0000D9FC 1368 0018 0018             		move.b	$18(a0),$18(a1)
0000DA02 1368 0019 0019             		move.b	$19(a0),$19(a1)
0000DA08 335C 0010                  		move.w	(a4)+,$10(a1)
0000DA0C 335C 0012                  		move.w	(a4)+,$12(a1)
0000DA10 B3C8                       		cmpa.l	a0,a1
0000DA12 6400                       		bcc.s	loc_D268
0000DA14 2F08                       		move.l	a0,-(sp)
0000DA16 2049                       		movea.l	a1,a0
0000DA18 6100 0000                  		bsr.w	SpeedToPos
0000DA1C D568 0012                  		add.w	d2,$12(a0)
0000DA20 205F                       		movea.l	(sp)+,a0
0000DA22 6100 0000                  		bsr.w	DisplaySprite2
0000DA26                            
0000DA26                            loc_D268:
0000DA26 51C9 FFAA                  		dbf	d1,Smash_Loop
0000DA2A                            
0000DA2A                            Smash_PlaySnd:
0000DA2A 303C 00CB                  		move.w	#$CB,d0
0000DA2E 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play smashing sound
0000DA34                            ; End of function SmashObject
0000DA34                            
0000DA34                            ; ===========================================================================
0000DA34                            ; Smashed block	fragment speeds
0000DA34                            ;
0000DA34 0400 FB00                  Obj3C_FragSpd1:	dc.w $400, $FB00	; x-move speed,	y-move speed
0000DA38 0600 FF00                  		dc.w $600, $FF00
0000DA3C 0600 0100                  		dc.w $600, $100
0000DA40 0400 0500                  		dc.w $400, $500
0000DA44 0600 FA00                  		dc.w $600, $FA00
0000DA48 0800 FE00                  		dc.w $800, $FE00
0000DA4C 0800 0200                  		dc.w $800, $200
0000DA50 0600 0600                  		dc.w $600, $600
0000DA54                            
0000DA54 FA00 FA00                  Obj3C_FragSpd2:	dc.w $FA00, $FA00
0000DA58 F800 FE00                  		dc.w $F800, $FE00
0000DA5C F800 0200                  		dc.w $F800, $200
0000DA60 FA00 0600                  		dc.w $FA00, $600
0000DA64 FC00 FB00                  		dc.w $FC00, $FB00
0000DA68 FA00 FF00                  		dc.w $FA00, $FF00
0000DA6C FA00 0100                  		dc.w $FA00, $100
0000DA70 FC00 0500                  		dc.w $FC00, $500
0000DA74                            ; ---------------------------------------------------------------------------
0000DA74                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000DA74                            ; ---------------------------------------------------------------------------
0000DA74                            Map_obj3C:
0000DA74                            	include "_maps\obj3C.asm"
0000DA74                            ; ---------------------------------------------------------------------------
0000DA74                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000DA74                            ; ---------------------------------------------------------------------------
0000DA74 0000                       		dc.w byte_D2BC-Map_obj3C
0000DA76 0000                       		dc.w byte_D2E5-Map_obj3C
0000DA78 0000                       		dc.w byte_D30E-Map_obj3C
0000DA7A 08                         byte_D2BC:	dc.b 8
0000DA7B E005 0000 F0               		dc.b $E0, 5, 0,	0, $F0
0000DA80 F005 0000 F0               		dc.b $F0, 5, 0,	0, $F0
0000DA85 0005 0000 F0               		dc.b 0,	5, 0, 0, $F0
0000DA8A 1005 0000 F0               		dc.b $10, 5, 0,	0, $F0
0000DA8F E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000DA94 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000DA99 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000DA9E 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000DAA3 08                         byte_D2E5:	dc.b 8
0000DAA4 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000DAA9 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000DAAE 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000DAB3 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000DAB8 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000DABD F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000DAC2 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000DAC7 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000DACC 08                         byte_D30E:	dc.b 8
0000DACD E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000DAD2 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000DAD7 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000DADC 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000DAE1 E005 0008 00               		dc.b $E0, 5, 0,	8, 0
0000DAE6 F005 0008 00               		dc.b $F0, 5, 0,	8, 0
0000DAEB 0005 0008 00               		dc.b 0,	5, 0, 8, 0
0000DAF0 1005 0008 00               		dc.b $10, 5, 0,	8, 0
0000DAF6 00                         		even
0000DAF6 00                         		even
0000DAF6                            
0000DAF6                            ; ---------------------------------------------------------------------------
0000DAF6                            ; Object code loading subroutine
0000DAF6                            ; ---------------------------------------------------------------------------
0000DAF6                            
0000DAF6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DAF6                            
0000DAF6                            
0000DAF6                            ObjectsLoad:				; XREF: TitleScreen; et al
0000DAF6 41F8 D000                  		lea	($FFFFD000).w,a0 ; set address for object RAM
0000DAFA 7E7F                       		moveq	#$7F,d7
0000DAFC 7000                       		moveq	#0,d0
0000DAFE 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000DB04 6400                       		bcc.s	loc_D362
0000DB06                            
0000DB06                            loc_D348:
0000DB06 1010                       		move.b	(a0),d0		; load object number from RAM
0000DB08 6700                       		beq.s	loc_D358
0000DB0A D040                       		add.w	d0,d0
0000DB0C D040                       		add.w	d0,d0
0000DB0E 227B 0000                  		movea.l	Obj_Index-4(pc,d0.w),a1
0000DB12 4E91                       		jsr	(a1)		; run the object's code
0000DB14 7000                       		moveq	#0,d0
0000DB16                            
0000DB16                            loc_D358:
0000DB16 41E8 0040                  		lea	$40(a0),a0	; next object
0000DB1A 51CF FFEA                  		dbf	d7,loc_D348
0000DB1E 4E75                       		rts	
0000DB20                            ; ===========================================================================
0000DB20                            
0000DB20                            loc_D362:
0000DB20 7E1F                       		moveq	#$1F,d7
0000DB22 61E2                       		bsr.s	loc_D348
0000DB24 7E5F                       		moveq	#$5F,d7
0000DB26                            
0000DB26                            loc_D368:
0000DB26 7000                       		moveq	#0,d0
0000DB28 1010                       		move.b	(a0),d0
0000DB2A 6700                       		beq.s	loc_D378
0000DB2C 4A28 0001                  		tst.b	1(a0)
0000DB30 6A00                       		bpl.s	loc_D378
0000DB32 6100 0000                  		bsr.w	DisplaySprite
0000DB36                            
0000DB36                            loc_D378:
0000DB36 41E8 0040                  		lea	$40(a0),a0
0000DB3A                            
0000DB3A                            loc_D37C:
0000DB3A 51CF FFEA                  		dbf	d7,loc_D368
0000DB3E 4E75                       		rts	
0000DB40                            ; End of function ObjectsLoad
0000DB40                            
0000DB40                            ; ===========================================================================
0000DB40                            ; ---------------------------------------------------------------------------
0000DB40                            ; Object pointers
0000DB40                            ; ---------------------------------------------------------------------------
0000DB40                            Obj_Index:
0000DB40                            	include "_inc\Object pointers.asm"
0000DB40                            ; ---------------------------------------------------------------------------
0000DB40                            ; Object pointers
0000DB40                            ; ---------------------------------------------------------------------------
0000DB40 0000 0000 0000 0000 0000+  	dc.l Obj01, ObjectFall,	ObjectFall, ObjectFall
0000DB50 0000 0000 0000 0000 0000+  	dc.l ObjectFall, ObjectFall, ObjectFall, Obj08
0000DB60 0000 0000 0000 0000 0000+  	dc.l Obj09, Obj0A, Obj0B, Obj0C
0000DB70 0000 0000 0000 AD86 0000+  	dc.l Obj0D, Obj0E, Obj0F, Obj10
0000DB80 0000 792C 0000 0000 0000+  	dc.l Obj11, Obj12, Obj13, Obj14
0000DB90 0000 7F52 0000 0000 0000+  	dc.l Obj15, Obj16, Obj17, Obj18
0000DBA0 0000 87A0 0000 889A 0000+  	dc.l Obj19, Obj1A, Obj1B, Obj1C
0000DBB0 0000 8EE4 0000 91D2 0000+  	dc.l Obj1D, Obj1E, Obj1F, Obj20
0000DBC0 0000 0000 0000 9E82 0000+  	dc.l Obj21, Obj22, Obj23, Obj24
0000DBD0 0000 A1BA 0000 A7A6 0000+  	dc.l Obj25, Obj26, Obj27, Obj28
0000DBE0 0000 9ADE 0000 8FBA 0000+  	dc.l Obj29, Obj2A, Obj2B, Obj2C
0000DBF0 0000 B37E 0000 A99A 0000+  	dc.l Obj2D, Obj2E, Obj2F, Obj30
0000DC00 0000 BD92 0000 C440 0000+  	dc.l Obj31, Obj32, Obj33, Obj34
0000DC10 0000 B8F0 0000 D5EA 0000+  	dc.l Obj35, Obj36, Obj37, Obj38
0000DC20 0000 CBC6 0000 CC80 0000+  	dc.l Obj39, Obj3A, Obj3B, Obj3C
0000DC30 0000 0000 0000 0000 0000+  	dc.l Obj3D, Obj3E, Obj3F, Obj40
0000DC40 0000 0000 0000 0000 0000+  	dc.l Obj41, Obj42, Obj43, Obj44
0000DC50 0000 C0AE 0000 0000 0000+  	dc.l Obj45, Obj46, Obj47, Obj48
0000DC60 0000 D880 0000 0000 0000+  	dc.l Obj49, Obj4A, Obj4B, Obj4C
0000DC70 0000 0000 0000 0000 0000+  	dc.l Obj4D, Obj4E, Obj4F, Obj50
0000DC80 0000 0000 0000 0000 0000+  	dc.l Obj51, Obj52, Obj53, Obj54
0000DC90 0000 0000 0000 0000 0000+  	dc.l Obj55, Obj56, Obj57, Obj58
0000DCA0 0000 0000 0000 0000 0000+  	dc.l Obj59, Obj5A, Obj5B, Obj5C
0000DCB0 0000 0000 0000 0000 0000+  	dc.l Obj5D, Obj5E, Obj5F, Obj60
0000DCC0 0000 0000 0000 0000 0000+  	dc.l Obj61, Obj62, Obj63, Obj64
0000DCD0 0000 0000 0000 0000 0000+  	dc.l Obj65, Obj66, Obj67, Obj68
0000DCE0 0000 0000 0000 0000 0000+  	dc.l Obj69, Obj6A, Obj6B, Obj6C
0000DCF0 0000 0000 0000 0000 0000+  	dc.l Obj6D, Obj6E, Obj6F, Obj70
0000DD00 0000 0000 0000 0000 0000+  	dc.l Obj71, Obj72, Obj73, Obj74
0000DD10 0000 0000 0000 0000 0000+  	dc.l Obj75, Obj76, Obj77, Obj78
0000DD20 0000 0000 0000 0000 0000+  	dc.l Obj79, Obj7A, Obj7B, Obj7C
0000DD30 0000 0000 0000 CEBA 0000+  	dc.l Obj7D, Obj7E, Obj7F, Obj80
0000DD40 0000 5438 0000 0000 0000+  	dc.l Obj81, Obj82, Obj83, Obj84
0000DD50 0000 0000 0000 0000 0000+  	dc.l Obj85, Obj86, Obj87, Obj88
0000DD60 0000 5AF2 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000DD60 0000 5AF2 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000DD70                            
0000DD70                            ; ---------------------------------------------------------------------------
0000DD70                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000DD70                            ; ---------------------------------------------------------------------------
0000DD70                            
0000DD70                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DD70                            
0000DD70                            
0000DD70                            ObjectFall:
0000DD70 2428 0008                  		move.l	8(a0),d2
0000DD74 2628 000C                  		move.l	$C(a0),d3
0000DD78 3028 0010                  		move.w	$10(a0),d0
0000DD7C 48C0                       		ext.l	d0
0000DD7E E180                       		asl.l	#8,d0
0000DD80 D480                       		add.l	d0,d2
0000DD82 3028 0012                  		move.w	$12(a0),d0
0000DD86 0668 0038 0012             		addi.w	#$38,$12(a0)	; increase vertical speed
0000DD8C 48C0                       		ext.l	d0
0000DD8E E180                       		asl.l	#8,d0
0000DD90 D680                       		add.l	d0,d3
0000DD92 2142 0008                  		move.l	d2,8(a0)
0000DD96 2143 000C                  		move.l	d3,$C(a0)
0000DD9A 4E75                       		rts	
0000DD9C                            ; End of function ObjectFall
0000DD9C                            
0000DD9C                            ; ---------------------------------------------------------------------------
0000DD9C                            ; Subroutine translating object	speed to update	object position
0000DD9C                            ; ---------------------------------------------------------------------------
0000DD9C                            
0000DD9C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DD9C                            
0000DD9C                            
0000DD9C                            SpeedToPos:
0000DD9C 2428 0008                  		move.l	8(a0),d2
0000DDA0 2628 000C                  		move.l	$C(a0),d3
0000DDA4 3028 0010                  		move.w	$10(a0),d0	; load horizontal speed
0000DDA8 48C0                       		ext.l	d0
0000DDAA E180                       		asl.l	#8,d0		; multiply speed by $100
0000DDAC D480                       		add.l	d0,d2		; add to x-axis	position
0000DDAE 3028 0012                  		move.w	$12(a0),d0	; load vertical	speed
0000DDB2 48C0                       		ext.l	d0
0000DDB4 E180                       		asl.l	#8,d0		; multiply by $100
0000DDB6 D680                       		add.l	d0,d3		; add to y-axis	position
0000DDB8 2142 0008                  		move.l	d2,8(a0)	; update x-axis	position
0000DDBC 2143 000C                  		move.l	d3,$C(a0)	; update y-axis	position
0000DDC0 4E75                       		rts	
0000DDC2                            ; End of function SpeedToPos
0000DDC2                            
0000DDC2                            ; ---------------------------------------------------------------------------
0000DDC2                            ; Subroutine to	display	a sprite/object, when a0 is the	object RAM
0000DDC2                            ; ---------------------------------------------------------------------------
0000DDC2                            
0000DDC2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DDC2                            
0000DDC2                            
0000DDC2                            DisplaySprite:
0000DDC2 43F8 AC00                  		lea	($FFFFAC00).w,a1
0000DDC6 3028 0018                  		move.w	$18(a0),d0
0000DDCA E248                       		lsr.w	#1,d0
0000DDCC 0240 0380                  		andi.w	#$380,d0
0000DDD0 D2C0                       		adda.w	d0,a1
0000DDD2 0C51 007E                  		cmpi.w	#$7E,(a1)
0000DDD6 6400                       		bcc.s	locret_D620
0000DDD8 5451                       		addq.w	#2,(a1)
0000DDDA D2D1                       		adda.w	(a1),a1
0000DDDC 3288                       		move.w	a0,(a1)
0000DDDE                            
0000DDDE                            locret_D620:
0000DDDE 4E75                       		rts	
0000DDE0                            ; End of function DisplaySprite
0000DDE0                            
0000DDE0                            ; ---------------------------------------------------------------------------
0000DDE0                            ; Subroutine to	display	a 2nd sprite/object, when a1 is	the object RAM
0000DDE0                            ; ---------------------------------------------------------------------------
0000DDE0                            
0000DDE0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DDE0                            
0000DDE0                            
0000DDE0                            DisplaySprite2:
0000DDE0 45F8 AC00                  		lea	($FFFFAC00).w,a2
0000DDE4 3029 0018                  		move.w	$18(a1),d0
0000DDE8 E248                       		lsr.w	#1,d0
0000DDEA 0240 0380                  		andi.w	#$380,d0
0000DDEE D4C0                       		adda.w	d0,a2
0000DDF0 0C52 007E                  		cmpi.w	#$7E,(a2)
0000DDF4 6400                       		bcc.s	locret_D63E
0000DDF6 5452                       		addq.w	#2,(a2)
0000DDF8 D4D2                       		adda.w	(a2),a2
0000DDFA 3489                       		move.w	a1,(a2)
0000DDFC                            
0000DDFC                            locret_D63E:
0000DDFC 4E75                       		rts	
0000DDFE                            ; End of function DisplaySprite2
0000DDFE                            
0000DDFE                            ; ---------------------------------------------------------------------------
0000DDFE                            ; Subroutine to	delete an object
0000DDFE                            ; ---------------------------------------------------------------------------
0000DDFE                            
0000DDFE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DDFE                            
0000DDFE                            
0000DDFE                            DeleteObject:
0000DDFE 2248                       		movea.l	a0,a1
0000DE00                            
0000DE00                            DeleteObject2:
0000DE00 7200                       		moveq	#0,d1
0000DE02 700F                       		moveq	#$F,d0
0000DE04                            
0000DE04                            loc_D646:
0000DE04 22C1                       		move.l	d1,(a1)+	; clear	the object RAM
0000DE06 51C8 FFFC                  		dbf	d0,loc_D646	; repeat $F times (length of object RAM)
0000DE0A 4E75                       		rts	
0000DE0C                            ; End of function DeleteObject
0000DE0C                            
0000DE0C                            ; ===========================================================================
0000DE0C 0000 0000                  BldSpr_ScrPos:	dc.l 0			; blank
0000DE10 00FF F700                  		dc.l $FFF700		; main screen x-position
0000DE14 00FF F708                  		dc.l $FFF708		; background x-position	1
0000DE18 00FF F718                  		dc.l $FFF718		; background x-position	2
0000DE1C                            ; ---------------------------------------------------------------------------
0000DE1C                            ; Subroutine to	convert	mappings (etc) to proper Megadrive sprites
0000DE1C                            ; ---------------------------------------------------------------------------
0000DE1C                            
0000DE1C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DE1C                            
0000DE1C                            
0000DE1C                            BuildSprites:				; XREF: TitleScreen; et al
0000DE1C 45F8 F800                  		lea	($FFFFF800).w,a2 ; set address for sprite table
0000DE20 7A00                       		moveq	#0,d5
0000DE22 49F8 AC00                  		lea	($FFFFAC00).w,a4
0000DE26 7E07                       		moveq	#7,d7
0000DE28                            
0000DE28                            loc_D66A:
0000DE28 4A54                       		tst.w	(a4)
0000DE2A 6700 0000                  		beq.w	loc_D72E
0000DE2E 7C02                       		moveq	#2,d6
0000DE30                            
0000DE30                            loc_D672:
0000DE30 3074 6000                  		movea.w	(a4,d6.w),a0
0000DE34 4A10                       		tst.b	(a0)
0000DE36 6700 0000                  		beq.w	loc_D726
0000DE3A 08A8 0007 0001             		bclr	#7,1(a0)
0000DE40 1028 0001                  		move.b	1(a0),d0
0000DE44 1800                       		move.b	d0,d4
0000DE46 0240 000C                  		andi.w	#$C,d0
0000DE4A 6700                       		beq.s	loc_D6DE
0000DE4C 227B 00BE                  		movea.l	BldSpr_ScrPos(pc,d0.w),a1
0000DE50 7000                       		moveq	#0,d0
0000DE52 1028 0019                  		move.b	$19(a0),d0
0000DE56 3628 0008                  		move.w	8(a0),d3
0000DE5A 9651                       		sub.w	(a1),d3
0000DE5C 3203                       		move.w	d3,d1
0000DE5E D240                       		add.w	d0,d1
0000DE60 6B00 0000                  		bmi.w	loc_D726
0000DE64 3203                       		move.w	d3,d1
0000DE66 9240                       		sub.w	d0,d1
0000DE68 0C41 0140                  		cmpi.w	#$140,d1
0000DE6C 6C00                       		bge.s	loc_D726
0000DE6E 0643 0080                  		addi.w	#$80,d3
0000DE72 0804 0004                  		btst	#4,d4
0000DE76 6700                       		beq.s	loc_D6E8
0000DE78 7000                       		moveq	#0,d0
0000DE7A 1028 0016                  		move.b	$16(a0),d0
0000DE7E 3428 000C                  		move.w	$C(a0),d2
0000DE82 9469 0004                  		sub.w	4(a1),d2
0000DE86 3202                       		move.w	d2,d1
0000DE88 D240                       		add.w	d0,d1
0000DE8A 6B00                       		bmi.s	loc_D726
0000DE8C 3202                       		move.w	d2,d1
0000DE8E 9240                       		sub.w	d0,d1
0000DE90 0C41 00E0                  		cmpi.w	#$E0,d1
0000DE94 6C00                       		bge.s	loc_D726
0000DE96 0642 0080                  		addi.w	#$80,d2
0000DE9A 6000                       		bra.s	loc_D700
0000DE9C                            ; ===========================================================================
0000DE9C                            
0000DE9C                            loc_D6DE:
0000DE9C 3428 000A                  		move.w	$A(a0),d2
0000DEA0 3628 0008                  		move.w	8(a0),d3
0000DEA4 6000                       		bra.s	loc_D700
0000DEA6                            ; ===========================================================================
0000DEA6                            
0000DEA6                            loc_D6E8:
0000DEA6 3428 000C                  		move.w	$C(a0),d2
0000DEAA 9469 0004                  		sub.w	4(a1),d2
0000DEAE 0642 0080                  		addi.w	#$80,d2
0000DEB2 0C42 0060                  		cmpi.w	#$60,d2
0000DEB6 6500                       		bcs.s	loc_D726
0000DEB8 0C42 0180                  		cmpi.w	#$180,d2
0000DEBC 6400                       		bcc.s	loc_D726
0000DEBE                            
0000DEBE                            loc_D700:
0000DEBE 2268 0004                  		movea.l	4(a0),a1
0000DEC2 7200                       		moveq	#0,d1
0000DEC4 0804 0005                  		btst	#5,d4
0000DEC8 6600                       		bne.s	loc_D71C
0000DECA 1228 001A                  		move.b	$1A(a0),d1
0000DECE D201                       		add.b	d1,d1
0000DED0 D2F1 1000                  		adda.w	(a1,d1.w),a1
0000DED4 1219                       		move.b	(a1)+,d1
0000DED6 5301                       		subq.b	#1,d1
0000DED8 6B00                       		bmi.s	loc_D720
0000DEDA                            
0000DEDA                            loc_D71C:
0000DEDA 6100 0000                  		bsr.w	sub_D750
0000DEDE                            
0000DEDE                            loc_D720:
0000DEDE 08E8 0007 0001             		bset	#7,1(a0)
0000DEE4                            
0000DEE4                            loc_D726:
0000DEE4 5446                       		addq.w	#2,d6
0000DEE6 5554                       		subq.w	#2,(a4)
0000DEE8 6600 FF46                  		bne.w	loc_D672
0000DEEC                            
0000DEEC                            loc_D72E:
0000DEEC 49EC 0080                  		lea	$80(a4),a4
0000DEF0 51CF FF36                  		dbf	d7,loc_D66A
0000DEF4 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0000DEF8 0C05 0050                  		cmpi.b	#$50,d5
0000DEFC 6700                       		beq.s	loc_D748
0000DEFE 24BC 0000 0000             		move.l	#0,(a2)
0000DF04 4E75                       		rts	
0000DF06                            ; ===========================================================================
0000DF06                            
0000DF06                            loc_D748:
0000DF06 157C 0000 FFFB             		move.b	#0,-5(a2)
0000DF0C 4E75                       		rts	
0000DF0E                            ; End of function BuildSprites
0000DF0E                            
0000DF0E                            
0000DF0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DF0E                            
0000DF0E                            
0000DF0E                            sub_D750:				; XREF: BuildSprites
0000DF0E 3668 0002                  		movea.w	2(a0),a3
0000DF12 0804 0000                  		btst	#0,d4
0000DF16 6600                       		bne.s	loc_D796
0000DF18 0804 0001                  		btst	#1,d4
0000DF1C 6600 0000                  		bne.w	loc_D7E4
0000DF20                            ; End of function sub_D750
0000DF20                            
0000DF20                            
0000DF20                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DF20                            
0000DF20                            
0000DF20                            sub_D762:				; XREF: sub_D762; SS_ShowLayout
0000DF20 0C05 0050                  		cmpi.b	#$50,d5
0000DF24 6700                       		beq.s	locret_D794
0000DF26 1019                       		move.b	(a1)+,d0
0000DF28 4880                       		ext.w	d0
0000DF2A D042                       		add.w	d2,d0
0000DF2C 34C0                       		move.w	d0,(a2)+
0000DF2E 14D9                       		move.b	(a1)+,(a2)+
0000DF30 5205                       		addq.b	#1,d5
0000DF32 14C5                       		move.b	d5,(a2)+
0000DF34 1019                       		move.b	(a1)+,d0
0000DF36 E148                       		lsl.w	#8,d0
0000DF38 1019                       		move.b	(a1)+,d0
0000DF3A D04B                       		add.w	a3,d0
0000DF3C 34C0                       		move.w	d0,(a2)+
0000DF3E 1019                       		move.b	(a1)+,d0
0000DF40 4880                       		ext.w	d0
0000DF42 D043                       		add.w	d3,d0
0000DF44 0240 01FF                  		andi.w	#$1FF,d0
0000DF48 6600                       		bne.s	loc_D78E
0000DF4A 5240                       		addq.w	#1,d0
0000DF4C                            
0000DF4C                            loc_D78E:
0000DF4C 34C0                       		move.w	d0,(a2)+
0000DF4E 51C9 FFD0                  		dbf	d1,sub_D762
0000DF52                            
0000DF52                            locret_D794:
0000DF52 4E75                       		rts	
0000DF54                            ; End of function sub_D762
0000DF54                            
0000DF54                            ; ===========================================================================
0000DF54                            
0000DF54                            loc_D796:
0000DF54 0804 0001                  		btst	#1,d4
0000DF58 6600 0000                  		bne.w	loc_D82A
0000DF5C                            
0000DF5C                            loc_D79E:
0000DF5C 0C05 0050                  		cmpi.b	#$50,d5
0000DF60 6700                       		beq.s	locret_D7E2
0000DF62 1019                       		move.b	(a1)+,d0
0000DF64 4880                       		ext.w	d0
0000DF66 D042                       		add.w	d2,d0
0000DF68 34C0                       		move.w	d0,(a2)+
0000DF6A 1819                       		move.b	(a1)+,d4
0000DF6C 14C4                       		move.b	d4,(a2)+
0000DF6E 5205                       		addq.b	#1,d5
0000DF70 14C5                       		move.b	d5,(a2)+
0000DF72 1019                       		move.b	(a1)+,d0
0000DF74 E148                       		lsl.w	#8,d0
0000DF76 1019                       		move.b	(a1)+,d0
0000DF78 D04B                       		add.w	a3,d0
0000DF7A 0A40 0800                  		eori.w	#$800,d0
0000DF7E 34C0                       		move.w	d0,(a2)+
0000DF80 1019                       		move.b	(a1)+,d0
0000DF82 4880                       		ext.w	d0
0000DF84 4440                       		neg.w	d0
0000DF86 D804                       		add.b	d4,d4
0000DF88 0244 0018                  		andi.w	#$18,d4
0000DF8C 5044                       		addq.w	#8,d4
0000DF8E 9044                       		sub.w	d4,d0
0000DF90 D043                       		add.w	d3,d0
0000DF92 0240 01FF                  		andi.w	#$1FF,d0
0000DF96 6600                       		bne.s	loc_D7DC
0000DF98 5240                       		addq.w	#1,d0
0000DF9A                            
0000DF9A                            loc_D7DC:
0000DF9A 34C0                       		move.w	d0,(a2)+
0000DF9C 51C9 FFBE                  		dbf	d1,loc_D79E
0000DFA0                            
0000DFA0                            locret_D7E2:
0000DFA0 4E75                       		rts	
0000DFA2                            ; ===========================================================================
0000DFA2                            
0000DFA2                            loc_D7E4:				; XREF: sub_D750
0000DFA2 0C05 0050                  		cmpi.b	#$50,d5
0000DFA6 6700                       		beq.s	locret_D828
0000DFA8 1019                       		move.b	(a1)+,d0
0000DFAA 1811                       		move.b	(a1),d4
0000DFAC 4880                       		ext.w	d0
0000DFAE 4440                       		neg.w	d0
0000DFB0 E70C                       		lsl.b	#3,d4
0000DFB2 0244 0018                  		andi.w	#$18,d4
0000DFB6 5044                       		addq.w	#8,d4
0000DFB8 9044                       		sub.w	d4,d0
0000DFBA D042                       		add.w	d2,d0
0000DFBC 34C0                       		move.w	d0,(a2)+
0000DFBE 14D9                       		move.b	(a1)+,(a2)+
0000DFC0 5205                       		addq.b	#1,d5
0000DFC2 14C5                       		move.b	d5,(a2)+
0000DFC4 1019                       		move.b	(a1)+,d0
0000DFC6 E148                       		lsl.w	#8,d0
0000DFC8 1019                       		move.b	(a1)+,d0
0000DFCA D04B                       		add.w	a3,d0
0000DFCC 0A40 1000                  		eori.w	#$1000,d0
0000DFD0 34C0                       		move.w	d0,(a2)+
0000DFD2 1019                       		move.b	(a1)+,d0
0000DFD4 4880                       		ext.w	d0
0000DFD6 D043                       		add.w	d3,d0
0000DFD8 0240 01FF                  		andi.w	#$1FF,d0
0000DFDC 6600                       		bne.s	loc_D822
0000DFDE 5240                       		addq.w	#1,d0
0000DFE0                            
0000DFE0                            loc_D822:
0000DFE0 34C0                       		move.w	d0,(a2)+
0000DFE2 51C9 FFBE                  		dbf	d1,loc_D7E4
0000DFE6                            
0000DFE6                            locret_D828:
0000DFE6 4E75                       		rts	
0000DFE8                            ; ===========================================================================
0000DFE8                            
0000DFE8                            loc_D82A:
0000DFE8 0C05 0050                  		cmpi.b	#$50,d5
0000DFEC 6700                       		beq.s	locret_D87C
0000DFEE 1019                       		move.b	(a1)+,d0
0000DFF0 1811                       		move.b	(a1),d4
0000DFF2 4880                       		ext.w	d0
0000DFF4 4440                       		neg.w	d0
0000DFF6 E70C                       		lsl.b	#3,d4
0000DFF8 0244 0018                  		andi.w	#$18,d4
0000DFFC 5044                       		addq.w	#8,d4
0000DFFE 9044                       		sub.w	d4,d0
0000E000 D042                       		add.w	d2,d0
0000E002 34C0                       		move.w	d0,(a2)+
0000E004 1819                       		move.b	(a1)+,d4
0000E006 14C4                       		move.b	d4,(a2)+
0000E008 5205                       		addq.b	#1,d5
0000E00A 14C5                       		move.b	d5,(a2)+
0000E00C 1019                       		move.b	(a1)+,d0
0000E00E E148                       		lsl.w	#8,d0
0000E010 1019                       		move.b	(a1)+,d0
0000E012 D04B                       		add.w	a3,d0
0000E014 0A40 1800                  		eori.w	#$1800,d0
0000E018 34C0                       		move.w	d0,(a2)+
0000E01A 1019                       		move.b	(a1)+,d0
0000E01C 4880                       		ext.w	d0
0000E01E 4440                       		neg.w	d0
0000E020 D804                       		add.b	d4,d4
0000E022 0244 0018                  		andi.w	#$18,d4
0000E026 5044                       		addq.w	#8,d4
0000E028 9044                       		sub.w	d4,d0
0000E02A D043                       		add.w	d3,d0
0000E02C 0240 01FF                  		andi.w	#$1FF,d0
0000E030 6600                       		bne.s	loc_D876
0000E032 5240                       		addq.w	#1,d0
0000E034                            
0000E034                            loc_D876:
0000E034 34C0                       		move.w	d0,(a2)+
0000E036 51C9 FFB0                  		dbf	d1,loc_D82A
0000E03A                            
0000E03A                            locret_D87C:
0000E03A 4E75                       		rts	
0000E03C                            ; ---------------------------------------------------------------------------
0000E03C                            ; Subroutine to	check if an object is on the screen
0000E03C                            ; ---------------------------------------------------------------------------
0000E03C                            
0000E03C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E03C                            
0000E03C                            
0000E03C                            ChkObjOnScreen:
0000E03C 3028 0008                  		move.w	8(a0),d0	; get object x-position
0000E040 9078 F700                  		sub.w	($FFFFF700).w,d0 ; subtract screen x-position
0000E044 6B00                       		bmi.s	NotOnScreen
0000E046 0C40 0140                  		cmpi.w	#320,d0		; is object on the screen?
0000E04A 6C00                       		bge.s	NotOnScreen	; if not, branch
0000E04C                            
0000E04C 3228 000C                  		move.w	$C(a0),d1	; get object y-position
0000E050 9278 F704                  		sub.w	($FFFFF704).w,d1 ; subtract screen y-position
0000E054 6B00                       		bmi.s	NotOnScreen
0000E056 0C41 00E0                  		cmpi.w	#224,d1		; is object on the screen?
0000E05A 6C00                       		bge.s	NotOnScreen	; if not, branch
0000E05C                            
0000E05C 7000                       		moveq	#0,d0		; set flag to 0
0000E05E 4E75                       		rts	
0000E060                            ; ===========================================================================
0000E060                            
0000E060                            NotOnScreen:				; XREF: ChkObjOnScreen
0000E060 7001                       		moveq	#1,d0		; set flag to 1
0000E062 4E75                       		rts	
0000E064                            ; End of function ChkObjOnScreen
0000E064                            
0000E064                            
0000E064                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E064                            
0000E064                            
0000E064                            ChkObjOnScreen2:
0000E064 7200                       		moveq	#0,d1
0000E066 1228 0019                  		move.b	$19(a0),d1
0000E06A 3028 0008                  		move.w	8(a0),d0
0000E06E 9078 F700                  		sub.w	($FFFFF700).w,d0
0000E072 D041                       		add.w	d1,d0
0000E074 6B00                       		bmi.s	NotOnScreen2
0000E076 D241                       		add.w	d1,d1
0000E078 9041                       		sub.w	d1,d0
0000E07A 0C40 0140                  		cmpi.w	#320,d0
0000E07E 6C00                       		bge.s	NotOnScreen2
0000E080                            
0000E080 3228 000C                  		move.w	$C(a0),d1
0000E084 9278 F704                  		sub.w	($FFFFF704).w,d1
0000E088 6B00                       		bmi.s	NotOnScreen2
0000E08A 0C41 00E0                  		cmpi.w	#224,d1
0000E08E 6C00                       		bge.s	NotOnScreen2
0000E090                            
0000E090 7000                       		moveq	#0,d0
0000E092 4E75                       		rts	
0000E094                            ; ===========================================================================
0000E094                            
0000E094                            NotOnScreen2:				; XREF: ChkObjOnScreen2
0000E094 7001                       		moveq	#1,d0
0000E096 4E75                       		rts	
0000E098                            ; End of function ChkObjOnScreen2
0000E098                            
0000E098                            ; ---------------------------------------------------------------------------
0000E098                            ; Subroutine to	load a level's objects
0000E098                            ; ---------------------------------------------------------------------------
0000E098                            
0000E098                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E098                            
0000E098                            
0000E098                            ObjPosLoad:				; XREF: Level; et al
0000E098 7000                       		moveq	#0,d0
0000E09A 1038 F76C                  		move.b	($FFFFF76C).w,d0
0000E09E 303B 0000                  		move.w	OPL_Index(pc,d0.w),d0
0000E0A2 4EFB 0000                  		jmp	OPL_Index(pc,d0.w)
0000E0A6                            ; End of function ObjPosLoad
0000E0A6                            
0000E0A6                            ; ===========================================================================
0000E0A6 0000                       OPL_Index:	dc.w OPL_Main-OPL_Index
0000E0A8 0000                       		dc.w OPL_Next-OPL_Index
0000E0AA                            ; ===========================================================================
0000E0AA                            
0000E0AA                            OPL_Main:				; XREF: OPL_Index
0000E0AA 5438 F76C                  		addq.b	#2,($FFFFF76C).w
0000E0AE 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000E0B2 ED08                       		lsl.b	#6,d0
0000E0B4 E848                       		lsr.w	#4,d0
0000E0B6 41F9 0000 0000             		lea	(ObjPos_Index).l,a0
0000E0BC 2248                       		movea.l	a0,a1
0000E0BE D0F0 0000                  		adda.w	(a0,d0.w),a0
0000E0C2 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E0C6 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E0CA D2F1 0002                  		adda.w	2(a1,d0.w),a1
0000E0CE 21C9 F778                  		move.l	a1,($FFFFF778).w
0000E0D2 21C9 F77C                  		move.l	a1,($FFFFF77C).w
0000E0D6 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E0DA 34FC 0101                  		move.w	#$101,(a2)+
0000E0DE 303C 005E                  		move.w	#$5E,d0
0000E0E2                            
0000E0E2                            OPL_ClrList:
0000E0E2 429A                       		clr.l	(a2)+
0000E0E4 51C8 FFFC                  		dbf	d0,OPL_ClrList	; clear	pre-destroyed object list
0000E0E8                            
0000E0E8 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E0EC 7400                       		moveq	#0,d2
0000E0EE 3C38 F700                  		move.w	($FFFFF700).w,d6
0000E0F2 0446 0080                  		subi.w	#$80,d6
0000E0F6 6400                       		bcc.s	loc_D93C
0000E0F8 7C00                       		moveq	#0,d6
0000E0FA                            
0000E0FA                            loc_D93C:
0000E0FA 0246 FF80                  		andi.w	#$FF80,d6
0000E0FE 2078 F770                  		movea.l	($FFFFF770).w,a0
0000E102                            
0000E102                            loc_D944:
0000E102 BC50                       		cmp.w	(a0),d6
0000E104 6300                       		bls.s	loc_D956
0000E106 4A28 0004                  		tst.b	4(a0)
0000E10A 6A00                       		bpl.s	loc_D952
0000E10C 1412                       		move.b	(a2),d2
0000E10E 5212                       		addq.b	#1,(a2)
0000E110                            
0000E110                            loc_D952:
0000E110 5C48                       		addq.w	#6,a0
0000E112 60EE                       		bra.s	loc_D944
0000E114                            ; ===========================================================================
0000E114                            
0000E114                            loc_D956:
0000E114 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E118 2078 F774                  		movea.l	($FFFFF774).w,a0
0000E11C 0446 0080                  		subi.w	#$80,d6
0000E120 6500                       		bcs.s	loc_D976
0000E122                            
0000E122                            loc_D964:
0000E122 BC50                       		cmp.w	(a0),d6
0000E124 6300                       		bls.s	loc_D976
0000E126 4A28 0004                  		tst.b	4(a0)
0000E12A 6A00                       		bpl.s	loc_D972
0000E12C 522A 0001                  		addq.b	#1,1(a2)
0000E130                            
0000E130                            loc_D972:
0000E130 5C48                       		addq.w	#6,a0
0000E132 60EE                       		bra.s	loc_D964
0000E134                            ; ===========================================================================
0000E134                            
0000E134                            loc_D976:
0000E134 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E138 31FC FFFF F76E             		move.w	#-1,($FFFFF76E).w
0000E13E                            
0000E13E                            OPL_Next:				; XREF: OPL_Index
0000E13E 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E142 7400                       		moveq	#0,d2
0000E144 3C38 F700                  		move.w	($FFFFF700).w,d6
0000E148 0246 FF80                  		andi.w	#$FF80,d6
0000E14C BC78 F76E                  		cmp.w	($FFFFF76E).w,d6
0000E150 6700 0000                  		beq.w	locret_DA3A
0000E154 6C00                       		bge.s	loc_D9F6
0000E156 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000E15A 2078 F774                  		movea.l	($FFFFF774).w,a0
0000E15E 0446 0080                  		subi.w	#$80,d6
0000E162 6500                       		bcs.s	loc_D9D2
0000E164                            
0000E164                            loc_D9A6:
0000E164 BC68 FFFA                  		cmp.w	-6(a0),d6
0000E168 6C00                       		bge.s	loc_D9D2
0000E16A 5D48                       		subq.w	#6,a0
0000E16C 4A28 0004                  		tst.b	4(a0)
0000E170 6A00                       		bpl.s	loc_D9BC
0000E172 532A 0001                  		subq.b	#1,1(a2)
0000E176 142A 0001                  		move.b	1(a2),d2
0000E17A                            
0000E17A                            loc_D9BC:
0000E17A 6100 0000                  		bsr.w	loc_DA3C
0000E17E 6600                       		bne.s	loc_D9C6
0000E180 5D48                       		subq.w	#6,a0
0000E182 60E0                       		bra.s	loc_D9A6
0000E184                            ; ===========================================================================
0000E184                            
0000E184                            loc_D9C6:
0000E184 4A28 0004                  		tst.b	4(a0)
0000E188 6A00                       		bpl.s	loc_D9D0
0000E18A 522A 0001                  		addq.b	#1,1(a2)
0000E18E                            
0000E18E                            loc_D9D0:
0000E18E 5C48                       		addq.w	#6,a0
0000E190                            
0000E190                            loc_D9D2:
0000E190 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E194 2078 F770                  		movea.l	($FFFFF770).w,a0
0000E198 0646 0300                  		addi.w	#$300,d6
0000E19C                            
0000E19C                            loc_D9DE:
0000E19C BC68 FFFA                  		cmp.w	-6(a0),d6
0000E1A0 6E00                       		bgt.s	loc_D9F0
0000E1A2 4A28 FFFE                  		tst.b	-2(a0)
0000E1A6 6A00                       		bpl.s	loc_D9EC
0000E1A8 5312                       		subq.b	#1,(a2)
0000E1AA                            
0000E1AA                            loc_D9EC:
0000E1AA 5D48                       		subq.w	#6,a0
0000E1AC 60EE                       		bra.s	loc_D9DE
0000E1AE                            ; ===========================================================================
0000E1AE                            
0000E1AE                            loc_D9F0:
0000E1AE 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E1B2 4E75                       		rts	
0000E1B4                            ; ===========================================================================
0000E1B4                            
0000E1B4                            loc_D9F6:
0000E1B4 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000E1B8 2078 F770                  		movea.l	($FFFFF770).w,a0
0000E1BC 0646 0280                  		addi.w	#$280,d6
0000E1C0                            
0000E1C0                            loc_DA02:
0000E1C0 BC50                       		cmp.w	(a0),d6
0000E1C2 6300                       		bls.s	loc_DA16
0000E1C4 4A28 0004                  		tst.b	4(a0)
0000E1C8 6A00                       		bpl.s	loc_DA10
0000E1CA 1412                       		move.b	(a2),d2
0000E1CC 5212                       		addq.b	#1,(a2)
0000E1CE                            
0000E1CE                            loc_DA10:
0000E1CE 6100 0000                  		bsr.w	loc_DA3C
0000E1D2 67EC                       		beq.s	loc_DA02
0000E1D4                            
0000E1D4                            loc_DA16:
0000E1D4 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E1D8 2078 F774                  		movea.l	($FFFFF774).w,a0
0000E1DC 0446 0300                  		subi.w	#$300,d6
0000E1E0 6500                       		bcs.s	loc_DA36
0000E1E2                            
0000E1E2                            loc_DA24:
0000E1E2 BC50                       		cmp.w	(a0),d6
0000E1E4 6300                       		bls.s	loc_DA36
0000E1E6 4A28 0004                  		tst.b	4(a0)
0000E1EA 6A00                       		bpl.s	loc_DA32
0000E1EC 522A 0001                  		addq.b	#1,1(a2)
0000E1F0                            
0000E1F0                            loc_DA32:
0000E1F0 5C48                       		addq.w	#6,a0
0000E1F2 60EE                       		bra.s	loc_DA24
0000E1F4                            ; ===========================================================================
0000E1F4                            
0000E1F4                            loc_DA36:
0000E1F4 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E1F8                            
0000E1F8                            locret_DA3A:
0000E1F8 4E75                       		rts	
0000E1FA                            ; ===========================================================================
0000E1FA                            
0000E1FA                            loc_DA3C:
0000E1FA 4A28 0004                  		tst.b	4(a0)
0000E1FE 6A00                       		bpl.s	OPL_MakeItem
0000E200 08F2 0007 2002             		bset	#7,2(a2,d2.w)
0000E206 6700                       		beq.s	OPL_MakeItem
0000E208 5C48                       		addq.w	#6,a0
0000E20A 7000                       		moveq	#0,d0
0000E20C 4E75                       		rts	
0000E20E                            ; ===========================================================================
0000E20E                            
0000E20E                            OPL_MakeItem:
0000E20E 6100 0000                  		bsr.w	SingleObjLoad
0000E212 6600                       		bne.s	locret_DA8A
0000E214 3358 0008                  		move.w	(a0)+,8(a1)
0000E218 3018                       		move.w	(a0)+,d0
0000E21A 3200                       		move.w	d0,d1
0000E21C 0240 0FFF                  		andi.w	#$FFF,d0
0000E220 3340 000C                  		move.w	d0,$C(a1)
0000E224 E559                       		rol.w	#2,d1
0000E226 0201 0003                  		andi.b	#3,d1
0000E22A 1341 0001                  		move.b	d1,1(a1)
0000E22E 1341 0022                  		move.b	d1,$22(a1)
0000E232 1018                       		move.b	(a0)+,d0
0000E234 6A00                       		bpl.s	loc_DA80
0000E236 0200 007F                  		andi.b	#$7F,d0
0000E23A 1342 0023                  		move.b	d2,$23(a1)
0000E23E                            
0000E23E                            loc_DA80:
0000E23E 1280                       		move.b	d0,0(a1)
0000E240 1358 0028                  		move.b	(a0)+,$28(a1)
0000E244 7000                       		moveq	#0,d0
0000E246                            
0000E246                            locret_DA8A:
0000E246 4E75                       		rts	
0000E248                            ; ---------------------------------------------------------------------------
0000E248                            ; Single object	loading	subroutine
0000E248                            ; ---------------------------------------------------------------------------
0000E248                            
0000E248                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E248                            
0000E248                            
0000E248                            SingleObjLoad:
0000E248 43F8 D800                  		lea	($FFFFD800).w,a1 ; start address for object RAM
0000E24C 303C 005F                  		move.w	#$5F,d0
0000E250                            
0000E250                            loc_DA94:
0000E250 4A11                       		tst.b	(a1)		; is object RAM	slot empty?
0000E252 6700                       		beq.s	locret_DAA0	; if yes, branch
0000E254 43E9 0040                  		lea	$40(a1),a1	; goto next object RAM slot
0000E258 51C8 FFF6                  		dbf	d0,loc_DA94	; repeat $5F times
0000E25C                            
0000E25C                            locret_DAA0:
0000E25C 4E75                       		rts	
0000E25E                            ; End of function SingleObjLoad
0000E25E                            
0000E25E                            
0000E25E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E25E                            
0000E25E                            
0000E25E                            SingleObjLoad2:
0000E25E 2248                       		movea.l	a0,a1
0000E260 303C F000                  		move.w	#-$1000,d0
0000E264 9048                       		sub.w	a0,d0
0000E266 EC48                       		lsr.w	#6,d0
0000E268 5340                       		subq.w	#1,d0
0000E26A 6500                       		bcs.s	locret_DABC
0000E26C                            
0000E26C                            loc_DAB0:
0000E26C 4A11                       		tst.b	(a1)
0000E26E 6700                       		beq.s	locret_DABC
0000E270 43E9 0040                  		lea	$40(a1),a1
0000E274 51C8 FFF6                  		dbf	d0,loc_DAB0
0000E278                            
0000E278                            locret_DABC:
0000E278 4E75                       		rts	
0000E27A                            ; End of function SingleObjLoad2
0000E27A                            
0000E27A                            ; ===========================================================================
0000E27A                            ; ---------------------------------------------------------------------------
0000E27A                            ; Object 41 - springs
0000E27A                            ; ---------------------------------------------------------------------------
0000E27A                            
0000E27A                            Obj41:					; XREF: Obj_Index
0000E27A 7000                       		moveq	#0,d0
0000E27C 1028 0024                  		move.b	$24(a0),d0
0000E280 323B 0000                  		move.w	Obj41_Index(pc,d0.w),d1
0000E284 4EBB 1000                  		jsr	Obj41_Index(pc,d1.w)
0000E288 6100 FB38                  		bsr.w	DisplaySprite
0000E28C 3028 0008                  		move.w	8(a0),d0
0000E290 0240 FF80                  		andi.w	#$FF80,d0
0000E294 3238 F700                  		move.w	($FFFFF700).w,d1
0000E298 0441 0080                  		subi.w	#$80,d1
0000E29C 0241 FF80                  		andi.w	#$FF80,d1
0000E2A0 9041                       		sub.w	d1,d0
0000E2A2 0C40 0280                  		cmpi.w	#$280,d0
0000E2A6 6200 FB56                  		bhi.w	DeleteObject
0000E2AA 4E75                       		rts	
0000E2AC                            ; ===========================================================================
0000E2AC 0000                       Obj41_Index:	dc.w Obj41_Main-Obj41_Index
0000E2AE 0000                       		dc.w Obj41_Up-Obj41_Index
0000E2B0 0000                       		dc.w Obj41_AniUp-Obj41_Index
0000E2B2 0000                       		dc.w Obj41_ResetUp-Obj41_Index
0000E2B4 0000                       		dc.w Obj41_LR-Obj41_Index
0000E2B6 0000                       		dc.w Obj41_AniLR-Obj41_Index
0000E2B8 0000                       		dc.w Obj41_ResetLR-Obj41_Index
0000E2BA 0000                       		dc.w Obj41_Dwn-Obj41_Index
0000E2BC 0000                       		dc.w Obj41_AniDwn-Obj41_Index
0000E2BE 0000                       		dc.w Obj41_ResetDwn-Obj41_Index
0000E2C0                            
0000E2C0 F000                       Obj41_Powers:	dc.w -$1000		; power	of red spring
0000E2C2 F600                       		dc.w -$A00		; power	of yellow spring
0000E2C4                            ; ===========================================================================
0000E2C4                            
0000E2C4                            Obj41_Main:				; XREF: Obj41_Index
0000E2C4 5428 0024                  		addq.b	#2,$24(a0)
0000E2C8 217C 0000 0000 0004        		move.l	#Map_obj41,4(a0)
0000E2D0 317C 0523 0002             		move.w	#$523,2(a0)
0000E2D6 0028 0004 0001             		ori.b	#4,1(a0)
0000E2DC 117C 0010 0019             		move.b	#$10,$19(a0)
0000E2E2 117C 0004 0018             		move.b	#4,$18(a0)
0000E2E8 1028 0028                  		move.b	$28(a0),d0
0000E2EC 0800 0004                  		btst	#4,d0		; does the spring face left/right?
0000E2F0 6700                       		beq.s	loc_DB54	; if not, branch
0000E2F2 117C 0008 0024             		move.b	#8,$24(a0)	; use "Obj41_LR" routine
0000E2F8 117C 0001 001C             		move.b	#1,$1C(a0)
0000E2FE 117C 0003 001A             		move.b	#3,$1A(a0)
0000E304 317C 0533 0002             		move.w	#$533,2(a0)
0000E30A 117C 0008 0019             		move.b	#8,$19(a0)
0000E310                            
0000E310                            loc_DB54:
0000E310 0800 0005                  		btst	#5,d0		; does the spring face downwards?
0000E314 6700                       		beq.s	loc_DB66	; if not, branch
0000E316 117C 000E 0024             		move.b	#$E,$24(a0)	; use "Obj41_Dwn" routine
0000E31C 08E8 0001 0022             		bset	#1,$22(a0)
0000E322                            
0000E322                            loc_DB66:
0000E322 0800 0001                  		btst	#1,d0
0000E326 6700                       		beq.s	loc_DB72
0000E328 08E8 0005 0002             		bset	#5,2(a0)
0000E32E                            
0000E32E                            loc_DB72:
0000E32E 0240 000F                  		andi.w	#$F,d0
0000E332 317B 008C 0030             		move.w	Obj41_Powers(pc,d0.w),$30(a0)
0000E338 4E75                       		rts	
0000E33A                            ; ===========================================================================
0000E33A                            
0000E33A                            Obj41_Up:				; XREF: Obj41_Index
0000E33A 323C 001B                  		move.w	#$1B,d1
0000E33E 343C 0008                  		move.w	#8,d2
0000E342 363C 0010                  		move.w	#$10,d3
0000E346 3828 0008                  		move.w	8(a0),d4
0000E34A 6100 0000                  		bsr.w	SolidObject
0000E34E 4A28 0025                  		tst.b	$25(a0)		; is Sonic on top of the spring?
0000E352 6600                       		bne.s	Obj41_BounceUp	; if yes, branch
0000E354 4E75                       		rts	
0000E356                            ; ===========================================================================
0000E356                            
0000E356                            Obj41_BounceUp:				; XREF: Obj41_Up
0000E356 5428 0024                  		addq.b	#2,$24(a0)
0000E35A 5069 000C                  		addq.w	#8,$C(a1)
0000E35E 3368 0030 0012             		move.w	$30(a0),$12(a1)	; move Sonic upwards
0000E364 08E9 0001 0022             		bset	#1,$22(a1)
0000E36A 08A9 0003 0022             		bclr	#3,$22(a1)
0000E370 137C 0010 001C             		move.b	#$10,$1C(a1)	; use "bouncing" animation
0000E376 137C 0002 0024             		move.b	#2,$24(a1)
0000E37C 08A8 0003 0022             		bclr	#3,$22(a0)
0000E382 4228 0025                  		clr.b	$25(a0)
0000E386 303C 00CC                  		move.w	#$CC,d0
0000E38A 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play spring sound
0000E390                            
0000E390                            Obj41_AniUp:				; XREF: Obj41_Index
0000E390 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E396 6000 CAEA                  		bra.w	AnimateSprite
0000E39A                            ; ===========================================================================
0000E39A                            
0000E39A                            Obj41_ResetUp:				; XREF: Obj41_Index
0000E39A 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000E3A0 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Up" routine
0000E3A4 4E75                       		rts	
0000E3A6                            ; ===========================================================================
0000E3A6                            
0000E3A6                            Obj41_LR:				; XREF: Obj41_Index
0000E3A6 323C 0013                  		move.w	#$13,d1
0000E3AA 343C 000E                  		move.w	#$E,d2
0000E3AE 363C 000F                  		move.w	#$F,d3
0000E3B2 3828 0008                  		move.w	8(a0),d4
0000E3B6 6100 0000                  		bsr.w	SolidObject
0000E3BA 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000E3C0 6600                       		bne.s	loc_DC0C
0000E3C2 117C 0008 0024             		move.b	#8,$24(a0)
0000E3C8                            
0000E3C8                            loc_DC0C:
0000E3C8 0828 0005 0022             		btst	#5,$22(a0)
0000E3CE 6600                       		bne.s	Obj41_BounceLR
0000E3D0 4E75                       		rts	
0000E3D2                            ; ===========================================================================
0000E3D2                            
0000E3D2                            Obj41_BounceLR:				; XREF: Obj41_LR
0000E3D2 5428 0024                  		addq.b	#2,$24(a0)
0000E3D6 3368 0030 0010             		move.w	$30(a0),$10(a1)	; move Sonic to	the left
0000E3DC 5069 0008                  		addq.w	#8,8(a1)
0000E3E0 0828 0000 0022             		btst	#0,$22(a0)	; is object flipped?
0000E3E6 6600                       		bne.s	loc_DC36	; if yes, branch
0000E3E8 0469 0010 0008             		subi.w	#$10,8(a1)
0000E3EE 4469 0010                  		neg.w	$10(a1)		; move Sonic to	the right
0000E3F2                            
0000E3F2                            loc_DC36:
0000E3F2 337C 000F 003E             		move.w	#$F,$3E(a1)
0000E3F8 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000E3FE 0869 0000 0022             		bchg	#0,$22(a1)
0000E404 0829 0002 0022             		btst	#2,$22(a1)
0000E40A 6600                       		bne.s	loc_DC56
0000E40C 137C 0000 001C             		move.b	#0,$1C(a1)	; use running animation
0000E412                            
0000E412                            loc_DC56:
0000E412 08A8 0005 0022             		bclr	#5,$22(a0)
0000E418 08A9 0005 0022             		bclr	#5,$22(a1)
0000E41E 303C 00CC                  		move.w	#$CC,d0
0000E422 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play spring sound
0000E428                            
0000E428                            Obj41_AniLR:				; XREF: Obj41_Index
0000E428 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E42E 6000 CA52                  		bra.w	AnimateSprite
0000E432                            ; ===========================================================================
0000E432                            
0000E432                            Obj41_ResetLR:				; XREF: Obj41_Index
0000E432 117C 0002 001D             		move.b	#2,$1D(a0)	; reset	animation
0000E438 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_LR" routine
0000E43C 4E75                       		rts	
0000E43E                            ; ===========================================================================
0000E43E                            
0000E43E                            Obj41_Dwn:				; XREF: Obj41_Index
0000E43E 323C 001B                  		move.w	#$1B,d1
0000E442 343C 0008                  		move.w	#8,d2
0000E446 363C 0010                  		move.w	#$10,d3
0000E44A 3828 0008                  		move.w	8(a0),d4
0000E44E 6100 0000                  		bsr.w	SolidObject
0000E452 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000E458 6600                       		bne.s	loc_DCA4
0000E45A 117C 000E 0024             		move.b	#$E,$24(a0)
0000E460                            
0000E460                            loc_DCA4:
0000E460 4A28 0025                  		tst.b	$25(a0)
0000E464 6600                       		bne.s	locret_DCAE
0000E466 4A44                       		tst.w	d4
0000E468 6B00                       		bmi.s	Obj41_BounceDwn
0000E46A                            
0000E46A                            locret_DCAE:
0000E46A 4E75                       		rts	
0000E46C                            ; ===========================================================================
0000E46C                            
0000E46C                            Obj41_BounceDwn:			; XREF: Obj41_Dwn
0000E46C 5428 0024                  		addq.b	#2,$24(a0)
0000E470 5169 000C                  		subq.w	#8,$C(a1)
0000E474 3368 0030 0012             		move.w	$30(a0),$12(a1)
0000E47A 4469 0012                  		neg.w	$12(a1)		; move Sonic downwards
0000E47E 08E9 0001 0022             		bset	#1,$22(a1)
0000E484 08A9 0003 0022             		bclr	#3,$22(a1)
0000E48A 137C 0002 0024             		move.b	#2,$24(a1)
0000E490 08A8 0003 0022             		bclr	#3,$22(a0)
0000E496 4228 0025                  		clr.b	$25(a0)
0000E49A 303C 00CC                  		move.w	#$CC,d0
0000E49E 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play spring sound
0000E4A4                            
0000E4A4                            Obj41_AniDwn:				; XREF: Obj41_Index
0000E4A4 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E4AA 6000 C9D6                  		bra.w	AnimateSprite
0000E4AE                            ; ===========================================================================
0000E4AE                            
0000E4AE                            Obj41_ResetDwn:				; XREF: Obj41_Index
0000E4AE 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000E4B4 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Dwn" routine
0000E4B8 4E75                       		rts	
0000E4BA                            ; ===========================================================================
0000E4BA                            Ani_obj41:
0000E4BA                            	include "_anim\obj41.asm"
0000E4BA                            ; ---------------------------------------------------------------------------
0000E4BA                            ; Animation script - springs
0000E4BA                            ; ---------------------------------------------------------------------------
0000E4BA 0000                       		dc.w byte_DD02-Ani_obj41
0000E4BC 0000                       		dc.w byte_DD0E-Ani_obj41
0000E4BE 0001 0000 0202 0202 0202+  byte_DD02:	dc.b 0,	1, 0, 0, 2, 2, 2, 2, 2,	2, 0, $FC
0000E4CA 0004 0303 0505 0505 0505+  byte_DD0E:	dc.b 0,	4, 3, 3, 5, 5, 5, 5, 5,	5, 3, $FC
0000E4D6                            		even
0000E4D6                            		even
0000E4D6                            
0000E4D6                            ; ---------------------------------------------------------------------------
0000E4D6                            ; Sprite mappings - springs
0000E4D6                            ; ---------------------------------------------------------------------------
0000E4D6                            Map_obj41:
0000E4D6                            	include "_maps\obj41.asm"
0000E4D6                            ; ---------------------------------------------------------------------------
0000E4D6                            ; Sprite mappings - springs
0000E4D6                            ; ---------------------------------------------------------------------------
0000E4D6 0000                       		dc.w byte_DD26-Map_obj41
0000E4D8 0000                       		dc.w byte_DD31-Map_obj41
0000E4DA 0000                       		dc.w byte_DD37-Map_obj41
0000E4DC 0000                       		dc.w byte_DD47-Map_obj41
0000E4DE 0000                       		dc.w byte_DD4D-Map_obj41
0000E4E0 0000                       		dc.w byte_DD53-Map_obj41
0000E4E2 02                         byte_DD26:	dc.b 2
0000E4E3 F80C 0000 F0               		dc.b $F8, $C, 0, 0, $F0
0000E4E8 000C 0004 F0               		dc.b 0,	$C, 0, 4, $F0
0000E4ED 01                         byte_DD31:	dc.b 1
0000E4EE 000C 0000 F0               		dc.b 0,	$C, 0, 0, $F0
0000E4F3 03                         byte_DD37:	dc.b 3
0000E4F4 E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0
0000E4F9 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000E4FE 000C 000C F0               		dc.b 0,	$C, 0, $C, $F0
0000E503 01                         byte_DD47:	dc.b 1
0000E504 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000E509 01                         byte_DD4D:	dc.b 1
0000E50A F003 0004 F8               		dc.b $F0, 3, 0,	4, $F8
0000E50F 04                         byte_DD53:	dc.b 4
0000E510 F003 0004 10               		dc.b $F0, 3, 0,	4, $10
0000E515 F809 0008 F8               		dc.b $F8, 9, 0,	8, $F8
0000E51A F000 0000 F8               		dc.b $F0, 0, 0,	0, $F8
0000E51F 0800 0003 F8               		dc.b 8,	0, 0, 3, $F8
0000E524                            		even
0000E524                            		even
0000E524                            
0000E524                            ; ===========================================================================
0000E524                            ; ---------------------------------------------------------------------------
0000E524                            ; Object 42 - Newtron enemy (GHZ)
0000E524                            ; ---------------------------------------------------------------------------
0000E524                            
0000E524                            Obj42:					; XREF: Obj_Index
0000E524 7000                       		moveq	#0,d0
0000E526 1028 0024                  		move.b	$24(a0),d0
0000E52A 323B 0000                  		move.w	Obj42_Index(pc,d0.w),d1
0000E52E 4EFB 1000                  		jmp	Obj42_Index(pc,d1.w)
0000E532                            ; ===========================================================================
0000E532 0000                       Obj42_Index:	dc.w Obj42_Main-Obj42_Index
0000E534 0000                       		dc.w Obj42_Action-Obj42_Index
0000E536 0000                       		dc.w Obj42_Delete-Obj42_Index
0000E538                            ; ===========================================================================
0000E538                            
0000E538                            Obj42_Main:				; XREF: Obj42_Index
0000E538 5428 0024                  		addq.b	#2,$24(a0)
0000E53C 217C 0000 0000 0004        		move.l	#Map_obj42,4(a0)
0000E544 317C 049B 0002             		move.w	#$49B,2(a0)
0000E54A 117C 0004 0001             		move.b	#4,1(a0)
0000E550 117C 0004 0018             		move.b	#4,$18(a0)
0000E556 117C 0014 0019             		move.b	#$14,$19(a0)
0000E55C 117C 0010 0016             		move.b	#$10,$16(a0)
0000E562 117C 0008 0017             		move.b	#8,$17(a0)
0000E568                            
0000E568                            Obj42_Action:				; XREF: Obj42_Index
0000E568 7000                       		moveq	#0,d0
0000E56A 1028 0025                  		move.b	$25(a0),d0
0000E56E 323B 0000                  		move.w	Obj42_Index2(pc,d0.w),d1
0000E572 4EBB 1000                  		jsr	Obj42_Index2(pc,d1.w)
0000E576 43F9 0000 0000             		lea	(Ani_obj42).l,a1
0000E57C 6100 C904                  		bsr.w	AnimateSprite
0000E580 6000 0000                  		bra.w	MarkObjGone
0000E584                            ; ===========================================================================
0000E584 0000                       Obj42_Index2:	dc.w Obj42_ChkDist-Obj42_Index2
0000E586 0000                       		dc.w Obj42_Type00-Obj42_Index2
0000E588 0000                       		dc.w Obj42_MatchFloor-Obj42_Index2
0000E58A 0000                       		dc.w Obj42_Speed-Obj42_Index2
0000E58C 0000                       		dc.w Obj42_Type01-Obj42_Index2
0000E58E                            ; ===========================================================================
0000E58E                            
0000E58E                            Obj42_ChkDist:				; XREF: Obj42_Index2
0000E58E 08E8 0000 0022             		bset	#0,$22(a0)
0000E594 3038 D008                  		move.w	($FFFFD008).w,d0
0000E598 9068 0008                  		sub.w	8(a0),d0
0000E59C 6400                       		bcc.s	loc_DDEA
0000E59E 4440                       		neg.w	d0
0000E5A0 08A8 0000 0022             		bclr	#0,$22(a0)
0000E5A6                            
0000E5A6                            loc_DDEA:
0000E5A6 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	the newtron?
0000E5AA 6400                       		bcc.s	locret_DE12	; if not, branch
0000E5AC 5428 0025                  		addq.b	#2,$25(a0)
0000E5B0 117C 0001 001C             		move.b	#1,$1C(a0)
0000E5B6 4A28 0028                  		tst.b	$28(a0)		; check	object type
0000E5BA 6700                       		beq.s	locret_DE12	; if type is 00, branch
0000E5BC 317C 249B 0002             		move.w	#$249B,2(a0)
0000E5C2 117C 0008 0025             		move.b	#8,$25(a0)	; run type 01 newtron subroutine
0000E5C8 117C 0004 001C             		move.b	#4,$1C(a0)	; use different	animation
0000E5CE                            
0000E5CE                            locret_DE12:
0000E5CE 4E75                       		rts	
0000E5D0                            ; ===========================================================================
0000E5D0                            
0000E5D0                            Obj42_Type00:				; XREF: Obj42_Index2
0000E5D0 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; has "appearing" animation finished?
0000E5D6 6400                       		bcc.s	Obj42_Fall	; is yes, branch
0000E5D8 08E8 0000 0022             		bset	#0,$22(a0)
0000E5DE 3038 D008                  		move.w	($FFFFD008).w,d0
0000E5E2 9068 0008                  		sub.w	8(a0),d0
0000E5E6 6400                       		bcc.s	locret_DE32
0000E5E8 08A8 0000 0022             		bclr	#0,$22(a0)
0000E5EE                            
0000E5EE                            locret_DE32:
0000E5EE 4E75                       		rts	
0000E5F0                            ; ===========================================================================
0000E5F0                            
0000E5F0                            Obj42_Fall:				; XREF: Obj42_Type00
0000E5F0 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000E5F6 6600                       		bne.s	loc_DE42
0000E5F8 117C 000C 0020             		move.b	#$C,$20(a0)
0000E5FE                            
0000E5FE                            loc_DE42:
0000E5FE 6100 F770                  		bsr.w	ObjectFall
0000E602 6100 0000                  		bsr.w	ObjHitFloor
0000E606 4A41                       		tst.w	d1		; has newtron hit the floor?
0000E608 6A00                       		bpl.s	locret_DE86	; if not, branch
0000E60A D368 000C                  		add.w	d1,$C(a0)
0000E60E 317C 0000 0012             		move.w	#0,$12(a0)	; stop newtron falling
0000E614 5428 0025                  		addq.b	#2,$25(a0)
0000E618 117C 0002 001C             		move.b	#2,$1C(a0)
0000E61E 0828 0005 0002             		btst	#5,2(a0)
0000E624 6700                       		beq.s	Obj42_Move
0000E626 5228 001C                  		addq.b	#1,$1C(a0)
0000E62A                            
0000E62A                            Obj42_Move:
0000E62A 117C 000D 0020             		move.b	#$D,$20(a0)
0000E630 317C 0200 0010             		move.w	#$200,$10(a0)	; move newtron horizontally
0000E636 0828 0000 0022             		btst	#0,$22(a0)
0000E63C 6600                       		bne.s	locret_DE86
0000E63E 4468 0010                  		neg.w	$10(a0)
0000E642                            
0000E642                            locret_DE86:
0000E642 4E75                       		rts	
0000E644                            ; ===========================================================================
0000E644                            
0000E644                            Obj42_MatchFloor:			; XREF: Obj42_Index2
0000E644 6100 F756                  		bsr.w	SpeedToPos
0000E648 6100 0000                  		bsr.w	ObjHitFloor
0000E64C 0C41 FFF8                  		cmpi.w	#-8,d1
0000E650 6D00                       		blt.s	loc_DEA2
0000E652 0C41 000C                  		cmpi.w	#$C,d1
0000E656 6C00                       		bge.s	loc_DEA2
0000E658 D368 000C                  		add.w	d1,$C(a0)	; match	newtron's position with floor
0000E65C 4E75                       		rts	
0000E65E                            ; ===========================================================================
0000E65E                            
0000E65E                            loc_DEA2:
0000E65E 5428 0025                  		addq.b	#2,$25(a0)
0000E662 4E75                       		rts	
0000E664                            ; ===========================================================================
0000E664                            
0000E664                            Obj42_Speed:				; XREF: Obj42_Index2
0000E664 6100 F736                  		bsr.w	SpeedToPos
0000E668 4E75                       		rts	
0000E66A                            ; ===========================================================================
0000E66A                            
0000E66A                            Obj42_Type01:				; XREF: Obj42_Index2
0000E66A 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000E670 6600                       		bne.s	Obj42_FireMissile
0000E672 117C 000C 0020             		move.b	#$C,$20(a0)
0000E678                            
0000E678                            Obj42_FireMissile:
0000E678 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000E67E 6600                       		bne.s	locret_DF14
0000E680 4A28 0032                  		tst.b	$32(a0)
0000E684 6600                       		bne.s	locret_DF14
0000E686 117C 0001 0032             		move.b	#1,$32(a0)
0000E68C 6100 FBBA                  		bsr.w	SingleObjLoad
0000E690 6600                       		bne.s	locret_DF14
0000E692 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
0000E696 3368 0008 0008             		move.w	8(a0),8(a1)
0000E69C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000E6A2 5169 000C                  		subq.w	#8,$C(a1)
0000E6A6 337C 0200 0010             		move.w	#$200,$10(a1)
0000E6AC 303C 0014                  		move.w	#$14,d0
0000E6B0 0828 0000 0022             		btst	#0,$22(a0)
0000E6B6 6600                       		bne.s	loc_DF04
0000E6B8 4440                       		neg.w	d0
0000E6BA 4469 0010                  		neg.w	$10(a1)
0000E6BE                            
0000E6BE                            loc_DF04:
0000E6BE D169 0008                  		add.w	d0,8(a1)
0000E6C2 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000E6C8 137C 0001 0028             		move.b	#1,$28(a1)
0000E6CE                            
0000E6CE                            locret_DF14:
0000E6CE 4E75                       		rts	
0000E6D0                            ; ===========================================================================
0000E6D0                            
0000E6D0                            Obj42_Delete:				; XREF: Obj42_Index
0000E6D0 6000 F72C                  		bra.w	DeleteObject
0000E6D4                            ; ===========================================================================
0000E6D4                            Ani_obj42:
0000E6D4                            	include "_anim\obj42.asm"
0000E6D4                            ; ---------------------------------------------------------------------------
0000E6D4                            ; Animation script - Newtron enemy
0000E6D4                            ; ---------------------------------------------------------------------------
0000E6D4 0000                       		dc.w byte_DF24-Ani_obj42
0000E6D6 0000                       		dc.w byte_DF28-Ani_obj42
0000E6D8 0000                       		dc.w byte_DF30-Ani_obj42
0000E6DA 0000                       		dc.w byte_DF34-Ani_obj42
0000E6DC 0000                       		dc.w byte_DF38-Ani_obj42
0000E6DE 0F0A FF00                  byte_DF24:	dc.b $F, $A, $FF, 0
0000E6E2 1300 0103 0405 FE01        byte_DF28:	dc.b $13, 0, 1,	3, 4, 5, $FE, 1
0000E6EA 0206 07FF                  byte_DF30:	dc.b 2,	6, 7, $FF
0000E6EE 0208 09FF                  byte_DF34:	dc.b 2,	8, 9, $FF
0000E6F2 1300 0101 0201 0100 FC00   byte_DF38:	dc.b $13, 0, 1,	1, 2, 1, 1, 0, $FC, 0
0000E6FC                            		even
0000E6FC                            		even
0000E6FC                            
0000E6FC                            ; ---------------------------------------------------------------------------
0000E6FC                            ; Sprite mappings - Newtron enemy (GHZ)
0000E6FC                            ; ---------------------------------------------------------------------------
0000E6FC                            Map_obj42:
0000E6FC                            	include "_maps\obj42.asm"
0000E6FC                            ; ---------------------------------------------------------------------------
0000E6FC                            ; Sprite mappings - Newtron enemy (GHZ)
0000E6FC                            ; ---------------------------------------------------------------------------
0000E6FC 0000 0000                  		dc.w byte_DF58-Map_obj42, byte_DF68-Map_obj42
0000E700 0000 0000                  		dc.w byte_DF78-Map_obj42, byte_DF88-Map_obj42
0000E704 0000 0000                  		dc.w byte_DF9D-Map_obj42, byte_DFAD-Map_obj42
0000E708 0000 0000                  		dc.w byte_DFB8-Map_obj42, byte_DFC8-Map_obj42
0000E70C 0000 0000                  		dc.w byte_DFD8-Map_obj42, byte_DFE8-Map_obj42
0000E710 0000                       		dc.w byte_DFF8-Map_obj42
0000E712 03                         byte_DF58:	dc.b 3
0000E713 EC0D 0000 EC               		dc.b $EC, $D, 0, 0, $EC
0000E718 F400 0008 0C               		dc.b $F4, 0, 0,	8, $C
0000E71D FC0E 0009 F4               		dc.b $FC, $E, 0, 9, $F4
0000E722 03                         byte_DF68:	dc.b 3
0000E723 EC06 0015 EC               		dc.b $EC, 6, 0,	$15, $EC
0000E728 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E72D FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000E732 03                         byte_DF78:	dc.b 3
0000E733 EC06 002A EC               		dc.b $EC, 6, 0,	$2A, $EC
0000E738 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E73D FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000E742 04                         byte_DF88:	dc.b 4
0000E743 EC06 0030 EC               		dc.b $EC, 6, 0,	$30, $EC
0000E748 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E74D FC09 0036 FC               		dc.b $FC, 9, 0,	$36, $FC
0000E752 0C00 003C 0C               		dc.b $C, 0, 0, $3C, $C
0000E757 03                         byte_DF9D:	dc.b 3
0000E758 F40D 003D EC               		dc.b $F4, $D, 0, $3D, $EC
0000E75D FC00 0020 0C               		dc.b $FC, 0, 0,	$20, $C
0000E762 0408 0045 FC               		dc.b 4,	8, 0, $45, $FC
0000E767 02                         byte_DFAD:	dc.b 2
0000E768 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E76D F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E772 03                         byte_DFB8:	dc.b 3
0000E773 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E778 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E77D FE00 0052 14               		dc.b $FE, 0, 0,	$52, $14
0000E782 03                         byte_DFC8:	dc.b 3
0000E783 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E788 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E78D FE04 0053 14               		dc.b $FE, 4, 0,	$53, $14
0000E792 03                         byte_DFD8:	dc.b 3
0000E793 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E798 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E79D FE00 E052 14               		dc.b $FE, 0, $E0, $52, $14
0000E7A2 03                         byte_DFE8:	dc.b 3
0000E7A3 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E7A8 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E7AD FE04 E053 14               		dc.b $FE, 4, $E0, $53, $14
0000E7B2 00                         byte_DFF8:	dc.b 0
0000E7B4 00                         		even
0000E7B4 00                         		even
0000E7B4                            
0000E7B4                            ; ===========================================================================
0000E7B4                            ; ---------------------------------------------------------------------------
0000E7B4                            ; Object 43 - Roller enemy (SYZ)
0000E7B4                            ; ---------------------------------------------------------------------------
0000E7B4                            
0000E7B4                            Obj43:					; XREF: Obj_Index
0000E7B4 7000                       		moveq	#0,d0
0000E7B6 1028 0024                  		move.b	$24(a0),d0
0000E7BA 323B 0000                  		move.w	Obj43_Index(pc,d0.w),d1
0000E7BE 4EFB 1000                  		jmp	Obj43_Index(pc,d1.w)
0000E7C2                            ; ===========================================================================
0000E7C2 0000                       Obj43_Index:	dc.w Obj43_Main-Obj43_Index
0000E7C4 0000                       		dc.w Obj43_Action-Obj43_Index
0000E7C6                            ; ===========================================================================
0000E7C6                            
0000E7C6                            Obj43_Main:				; XREF: Obj43_Index
0000E7C6 117C 000E 0016             		move.b	#$E,$16(a0)
0000E7CC 117C 0008 0017             		move.b	#8,$17(a0)
0000E7D2 6100 F59C                  		bsr.w	ObjectFall
0000E7D6 6100 0000                  		bsr.w	ObjHitFloor
0000E7DA 4A41                       		tst.w	d1
0000E7DC 6A00                       		bpl.s	locret_E052
0000E7DE D368 000C                  		add.w	d1,$C(a0)	; match	roller's position with the floor
0000E7E2 317C 0000 0012             		move.w	#0,$12(a0)
0000E7E8 5428 0024                  		addq.b	#2,$24(a0)
0000E7EC 217C 0000 0000 0004        		move.l	#Map_obj43,4(a0)
0000E7F4 317C 04B8 0002             		move.w	#$4B8,2(a0)
0000E7FA 117C 0004 0001             		move.b	#4,1(a0)
0000E800 117C 0004 0018             		move.b	#4,$18(a0)
0000E806 117C 0010 0019             		move.b	#$10,$19(a0)
0000E80C                            
0000E80C                            locret_E052:
0000E80C 4E75                       		rts	
0000E80E                            ; ===========================================================================
0000E80E                            
0000E80E                            Obj43_Action:				; XREF: Obj43_Index
0000E80E 7000                       		moveq	#0,d0
0000E810 1028 0025                  		move.b	$25(a0),d0
0000E814 323B 0000                  		move.w	Obj43_Index2(pc,d0.w),d1
0000E818 4EBB 1000                  		jsr	Obj43_Index2(pc,d1.w)
0000E81C 43F9 0000 0000             		lea	(Ani_obj43).l,a1
0000E822 6100 C65E                  		bsr.w	AnimateSprite
0000E826 3028 0008                  		move.w	8(a0),d0
0000E82A 0240 FF80                  		andi.w	#$FF80,d0
0000E82E 3238 F700                  		move.w	($FFFFF700).w,d1
0000E832 0441 0080                  		subi.w	#$80,d1
0000E836 0241 FF80                  		andi.w	#$FF80,d1
0000E83A 9041                       		sub.w	d1,d0
0000E83C 0C40 0280                  		cmpi.w	#$280,d0
0000E840 6E00 0000                  		bgt.w	Obj43_ChkGone
0000E844 6000 F57C                  		bra.w	DisplaySprite
0000E848                            ; ===========================================================================
0000E848                            
0000E848                            Obj43_ChkGone:				; XREF: Obj43_Action
0000E848 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E84C 7000                       		moveq	#0,d0
0000E84E 1028 0023                  		move.b	$23(a0),d0
0000E852 6700                       		beq.s	Obj43_Delete
0000E854 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000E85A                            
0000E85A                            Obj43_Delete:
0000E85A 6000 F5A2                  		bra.w	DeleteObject
0000E85E                            ; ===========================================================================
0000E85E 0000                       Obj43_Index2:	dc.w Obj43_RollChk-Obj43_Index2
0000E860 0000                       		dc.w Obj43_RollNoChk-Obj43_Index2
0000E862 0000                       		dc.w Obj43_ChkJump-Obj43_Index2
0000E864 0000                       		dc.w Obj43_MatchFloor-Obj43_Index2
0000E866                            ; ===========================================================================
0000E866                            
0000E866                            Obj43_RollChk:				; XREF: Obj43_Index2
0000E866 3038 D008                  		move.w	($FFFFD008).w,d0
0000E86A 0440 0100                  		subi.w	#$100,d0
0000E86E 6500                       		bcs.s	loc_E0D2
0000E870 9068 0008                  		sub.w	8(a0),d0	; check	distance between Roller	and Sonic
0000E874 6500                       		bcs.s	loc_E0D2
0000E876 5828 0025                  		addq.b	#4,$25(a0)
0000E87A 117C 0002 001C             		move.b	#2,$1C(a0)
0000E880 317C 0700 0010             		move.w	#$700,$10(a0)	; move Roller horizontally
0000E886 117C 008E 0020             		move.b	#$8E,$20(a0)	; make Roller invincible
0000E88C                            
0000E88C                            loc_E0D2:
0000E88C 588F                       		addq.l	#4,sp
0000E88E 4E75                       		rts	
0000E890                            ; ===========================================================================
0000E890                            
0000E890                            Obj43_RollNoChk:			; XREF: Obj43_Index2
0000E890 0C28 0002 001C             		cmpi.b	#2,$1C(a0)
0000E896 6700                       		beq.s	loc_E0F8
0000E898 5368 0030                  		subq.w	#1,$30(a0)
0000E89C 6A00                       		bpl.s	locret_E0F6
0000E89E 117C 0001 001C             		move.b	#1,$1C(a0)
0000E8A4 317C 0700 0010             		move.w	#$700,$10(a0)
0000E8AA 117C 008E 0020             		move.b	#$8E,$20(a0)
0000E8B0                            
0000E8B0                            locret_E0F6:
0000E8B0 4E75                       		rts	
0000E8B2                            ; ===========================================================================
0000E8B2                            
0000E8B2                            loc_E0F8:
0000E8B2 5428 0025                  		addq.b	#2,$25(a0)
0000E8B6 4E75                       		rts	
0000E8B8                            ; ===========================================================================
0000E8B8                            
0000E8B8                            Obj43_ChkJump:				; XREF: Obj43_Index2
0000E8B8 6100 0000                  		bsr.w	Obj43_Stop
0000E8BC 6100 F4DE                  		bsr.w	SpeedToPos
0000E8C0 6100 0000                  		bsr.w	ObjHitFloor
0000E8C4 0C41 FFF8                  		cmpi.w	#-8,d1
0000E8C8 6D00                       		blt.s	Obj43_Jump
0000E8CA 0C41 000C                  		cmpi.w	#$C,d1
0000E8CE 6C00                       		bge.s	Obj43_Jump
0000E8D0 D368 000C                  		add.w	d1,$C(a0)
0000E8D4 4E75                       		rts	
0000E8D6                            ; ===========================================================================
0000E8D6                            
0000E8D6                            Obj43_Jump:
0000E8D6 5428 0025                  		addq.b	#2,$25(a0)
0000E8DA 08E8 0000 0032             		bset	#0,$32(a0)
0000E8E0 6700                       		beq.s	locret_E12E
0000E8E2 317C FA00 0012             		move.w	#-$600,$12(a0)	; move Roller vertically
0000E8E8                            
0000E8E8                            locret_E12E:
0000E8E8 4E75                       		rts	
0000E8EA                            ; ===========================================================================
0000E8EA                            
0000E8EA                            Obj43_MatchFloor:			; XREF: Obj43_Index2
0000E8EA 6100 F484                  		bsr.w	ObjectFall
0000E8EE 4A68 0012                  		tst.w	$12(a0)
0000E8F2 6B00                       		bmi.s	locret_E150
0000E8F4 6100 0000                  		bsr.w	ObjHitFloor
0000E8F8 4A41                       		tst.w	d1
0000E8FA 6A00                       		bpl.s	locret_E150
0000E8FC D368 000C                  		add.w	d1,$C(a0)	; match	Roller's position with the floor
0000E900 5528 0025                  		subq.b	#2,$25(a0)
0000E904 317C 0000 0012             		move.w	#0,$12(a0)
0000E90A                            
0000E90A                            locret_E150:
0000E90A 4E75                       		rts	
0000E90C                            
0000E90C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E90C                            
0000E90C                            
0000E90C                            Obj43_Stop:				; XREF: Obj43_ChkJump
0000E90C 4A28 0032                  		tst.b	$32(a0)
0000E910 6B00                       		bmi.s	locret_E188
0000E912 3038 D008                  		move.w	($FFFFD008).w,d0
0000E916 0440 0030                  		subi.w	#$30,d0
0000E91A 9068 0008                  		sub.w	8(a0),d0
0000E91E 6400                       		bcc.s	locret_E188
0000E920 117C 0000 001C             		move.b	#0,$1C(a0)
0000E926 117C 000E 0020             		move.b	#$E,$20(a0)
0000E92C 4268 0010                  		clr.w	$10(a0)
0000E930 317C 0078 0030             		move.w	#120,$30(a0)	; set waiting time to 2	seconds
0000E936 117C 0002 0025             		move.b	#2,$25(a0)
0000E93C 08E8 0007 0032             		bset	#7,$32(a0)
0000E942                            
0000E942                            locret_E188:
0000E942 4E75                       		rts	
0000E944                            ; End of function Obj43_Stop
0000E944                            
0000E944                            ; ===========================================================================
0000E944                            Ani_obj43:
0000E944                            	include "_anim\obj43.asm"
0000E944                            ; ---------------------------------------------------------------------------
0000E944                            ; Animation script - Roller enemy
0000E944                            ; ---------------------------------------------------------------------------
0000E944 0000                       		dc.w byte_E190-Ani_obj43
0000E946 0000                       		dc.w byte_E196-Ani_obj43
0000E948 0000                       		dc.w byte_E19C-Ani_obj43
0000E94A 0F02 0100 FE01             byte_E190:	dc.b $F, 2, 1, 0, $FE, 1
0000E950 0F01 02FD 0200             byte_E196:	dc.b $F, 1, 2, $FD, 2, 0
0000E956 0303 0402 FF               byte_E19C:	dc.b 3,	3, 4, 2, $FF
0000E95C 00                         		even
0000E95C 00                         		even
0000E95C                            
0000E95C                            ; ---------------------------------------------------------------------------
0000E95C                            ; Sprite mappings - Roller enemy (SYZ)
0000E95C                            ; ---------------------------------------------------------------------------
0000E95C                            Map_obj43:
0000E95C                            	include "_maps\obj43.asm"
0000E95C                            Map_61da:
0000E95C 0000                       Map_61da_0: 	dc.w Map_61da_A-Map_61da
0000E95E 0000                       Map_61da_2: 	dc.w Map_61da_15-Map_61da
0000E960 0000                       Map_61da_4: 	dc.w Map_61da_20-Map_61da
0000E962 0000                       Map_61da_6: 	dc.w Map_61da_26-Map_61da
0000E964 0000                       Map_61da_8: 	dc.w Map_61da_2C-Map_61da
0000E966 02                         Map_61da_A: 	dc.b $2
0000E967 DE0E 0000 F0               	dc.b $DE, $E, $0, $0, $F0
0000E96C F60E 000C F0               	dc.b $F6, $E, $0, $C, $F0
0000E971 02                         Map_61da_15: 	dc.b $2
0000E972 E60E 0000 F0               	dc.b $E6, $E, $0, $0, $F0
0000E977 FE0D 0018 F0               	dc.b $FE, $D, $0, $18, $F0
0000E97C 01                         Map_61da_20: 	dc.b $1
0000E97D F00F 0020 F0               	dc.b $F0, $F, $0, $20, $F0
0000E982 01                         Map_61da_26: 	dc.b $1
0000E983 F00F 0030 F0               	dc.b $F0, $F, $0, $30, $F0
0000E988 01                         Map_61da_2C: 	dc.b $1
0000E989 F00F 0040 F0               	dc.b $F0, $F, $0, $40, $F0
0000E98E                            	even
0000E98E                            	even
0000E98E                            
0000E98E                            ; ===========================================================================
0000E98E                            ; ---------------------------------------------------------------------------
0000E98E                            ; Object 44 - walls (GHZ)
0000E98E                            ; ---------------------------------------------------------------------------
0000E98E                            
0000E98E                            Obj44:					; XREF: Obj_Index
0000E98E 7000                       		moveq	#0,d0
0000E990 1028 0024                  		move.b	$24(a0),d0
0000E994 323B 0000                  		move.w	Obj44_Index(pc,d0.w),d1
0000E998 4EFB 1000                  		jmp	Obj44_Index(pc,d1.w)
0000E99C                            ; ===========================================================================
0000E99C 0000                       Obj44_Index:	dc.w Obj44_Main-Obj44_Index
0000E99E 0000                       		dc.w Obj44_Solid-Obj44_Index
0000E9A0 0000                       		dc.w Obj44_Display-Obj44_Index
0000E9A2                            ; ===========================================================================
0000E9A2                            
0000E9A2                            Obj44_Main:				; XREF: Obj44_Index
0000E9A2 5428 0024                  		addq.b	#2,$24(a0)
0000E9A6 217C 0000 0000 0004        		move.l	#Map_obj44,4(a0)
0000E9AE 317C 434C 0002             		move.w	#$434C,2(a0)
0000E9B4 0028 0004 0001             		ori.b	#4,1(a0)
0000E9BA 117C 0008 0019             		move.b	#8,$19(a0)
0000E9C0 117C 0006 0018             		move.b	#6,$18(a0)
0000E9C6 1168 0028 001A             		move.b	$28(a0),$1A(a0)	; copy object type number to frame number
0000E9CC 08A8 0004 001A             		bclr	#4,$1A(a0)	; clear	4th bit	(deduct	$10)
0000E9D2 6700                       		beq.s	Obj44_Solid	; make object solid if 4th bit = 0
0000E9D4 5428 0024                  		addq.b	#2,$24(a0)
0000E9D8 6000                       		bra.s	Obj44_Display	; don't make it solid if 4th bit = 1
0000E9DA                            ; ===========================================================================
0000E9DA                            
0000E9DA                            Obj44_Solid:				; XREF: Obj44_Index
0000E9DA 323C 0013                  		move.w	#$13,d1
0000E9DE 343C 0028                  		move.w	#$28,d2
0000E9E2 6100 A704                  		bsr.w	Obj44_SolidWall
0000E9E6                            
0000E9E6                            Obj44_Display:				; XREF: Obj44_Index
0000E9E6 6100 F3DA                  		bsr.w	DisplaySprite
0000E9EA 3028 0008                  		move.w	8(a0),d0
0000E9EE 0240 FF80                  		andi.w	#$FF80,d0
0000E9F2 3238 F700                  		move.w	($FFFFF700).w,d1
0000E9F6 0441 0080                  		subi.w	#$80,d1
0000E9FA 0241 FF80                  		andi.w	#$FF80,d1
0000E9FE 9041                       		sub.w	d1,d0
0000EA00 0C40 0280                  		cmpi.w	#$280,d0
0000EA04 6200 F3F8                  		bhi.w	DeleteObject
0000EA08 4E75                       		rts	
0000EA0A                            ; ===========================================================================
0000EA0A                            ; ---------------------------------------------------------------------------
0000EA0A                            ; Sprite mappings - walls (GHZ)
0000EA0A                            ; ---------------------------------------------------------------------------
0000EA0A                            Map_obj44:
0000EA0A                            	include "_maps\obj44.asm"
0000EA0A                            ; ---------------------------------------------------------------------------
0000EA0A                            ; Sprite mappings - walls (GHZ)
0000EA0A                            ; ---------------------------------------------------------------------------
0000EA0A 0000                       		dc.w byte_E256-Map_obj44
0000EA0C 0000                       		dc.w byte_E26B-Map_obj44
0000EA0E 0000                       		dc.w byte_E280-Map_obj44
0000EA10 04                         byte_E256:	dc.b 4
0000EA11 E005 0004 F8               		dc.b $E0, 5, 0,	4, $F8
0000EA16 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000EA1B 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000EA20 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000EA25 04                         byte_E26B:	dc.b 4
0000EA26 E005 0008 F8               		dc.b $E0, 5, 0,	8, $F8
0000EA2B F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000EA30 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000EA35 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000EA3A 04                         byte_E280:	dc.b 4
0000EA3B E005 0000 F8               		dc.b $E0, 5, 0,	0, $F8
0000EA40 F005 0000 F8               		dc.b $F0, 5, 0,	0, $F8
0000EA45 0005 0000 F8               		dc.b 0,	5, 0, 0, $F8
0000EA4A 1005 0000 F8               		dc.b $10, 5, 0,	0, $F8
0000EA50 00                         		even
0000EA50 00                         		even
0000EA50                            
0000EA50                            ; ===========================================================================
0000EA50                            ; ---------------------------------------------------------------------------
0000EA50                            ; Object 13 - lava ball	producer (MZ, SLZ)
0000EA50                            ; ---------------------------------------------------------------------------
0000EA50                            
0000EA50                            Obj13:					; XREF: Obj_Index
0000EA50 7000                       		moveq	#0,d0
0000EA52 1028 0024                  		move.b	$24(a0),d0
0000EA56 323B 0000                  		move.w	Obj13_Index(pc,d0.w),d1
0000EA5A 4EBB 1000                  		jsr	Obj13_Index(pc,d1.w)
0000EA5E 6000 0000                  		bra.w	Obj14_ChkDel
0000EA62                            ; ===========================================================================
0000EA62 0000                       Obj13_Index:	dc.w Obj13_Main-Obj13_Index
0000EA64 0000                       		dc.w Obj13_MakeLava-Obj13_Index
0000EA66                            ; ---------------------------------------------------------------------------
0000EA66                            ;
0000EA66                            ; Lava ball production rates
0000EA66                            ;
0000EA66 1E3C 5A78 96B4             Obj13_Rates:	dc.b 30, 60, 90, 120, 150, 180
0000EA6C                            ; ===========================================================================
0000EA6C                            
0000EA6C                            Obj13_Main:				; XREF: Obj13_Index
0000EA6C 5428 0024                  		addq.b	#2,$24(a0)
0000EA70 1028 0028                  		move.b	$28(a0),d0
0000EA74 E848                       		lsr.w	#4,d0
0000EA76 0240 000F                  		andi.w	#$F,d0
0000EA7A 117B 00EA 001F             		move.b	Obj13_Rates(pc,d0.w),$1F(a0)
0000EA80 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; set time delay for lava balls
0000EA86 0228 000F 0028             		andi.b	#$F,$28(a0)
0000EA8C                            
0000EA8C                            Obj13_MakeLava:				; XREF: Obj13_Index
0000EA8C 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from time delay
0000EA90 6600                       		bne.s	locret_E302	; if time still	remains, branch
0000EA92 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; reset	time delay
0000EA98 6100 F5A2                  		bsr.w	ChkObjOnScreen
0000EA9C 6600                       		bne.s	locret_E302
0000EA9E 6100 F7A8                  		bsr.w	SingleObjLoad
0000EAA2 6600                       		bne.s	locret_E302
0000EAA4 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
0000EAA8 3368 0008 0008             		move.w	8(a0),8(a1)
0000EAAE 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000EAB4 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000EABA                            
0000EABA                            locret_E302:
0000EABA 4E75                       		rts	
0000EABC                            ; ===========================================================================
0000EABC                            ; ---------------------------------------------------------------------------
0000EABC                            ; Object 14 - lava balls (MZ, SLZ)
0000EABC                            ; ---------------------------------------------------------------------------
0000EABC                            
0000EABC                            Obj14:					; XREF: Obj_Index
0000EABC 7000                       		moveq	#0,d0
0000EABE 1028 0024                  		move.b	$24(a0),d0
0000EAC2 323B 0000                  		move.w	Obj14_Index(pc,d0.w),d1
0000EAC6 4EBB 1000                  		jsr	Obj14_Index(pc,d1.w)
0000EACA 6000 F2F6                  		bra.w	DisplaySprite
0000EACE                            ; ===========================================================================
0000EACE 0000                       Obj14_Index:	dc.w Obj14_Main-Obj14_Index
0000EAD0 0000                       		dc.w Obj14_Action-Obj14_Index
0000EAD2 0000                       		dc.w Obj14_Delete-Obj14_Index
0000EAD4                            
0000EAD4 FC00 FB00 FA00 F900 FE00   Obj14_Speeds:	dc.w $FC00, $FB00, $FA00, $F900, $FE00
0000EADE 0200 FE00 0200 0000        		dc.w $200, $FE00, $200,	0
0000EAE6                            ; ===========================================================================
0000EAE6                            
0000EAE6                            Obj14_Main:				; XREF: Obj14_Index
0000EAE6 5428 0024                  		addq.b	#2,$24(a0)
0000EAEA 117C 0008 0016             		move.b	#8,$16(a0)
0000EAF0 117C 0008 0017             		move.b	#8,$17(a0)
0000EAF6 217C 0000 BA80 0004        		move.l	#Map_obj14,4(a0)
0000EAFE 317C 0345 0002             		move.w	#$345,2(a0)
0000EB04 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000EB0A 6600                       		bne.s	loc_E35A
0000EB0C 317C 0480 0002             		move.w	#$480,2(a0)	; SLZ specific code
0000EB12                            
0000EB12                            loc_E35A:
0000EB12 117C 0004 0001             		move.b	#4,1(a0)
0000EB18 117C 0003 0018             		move.b	#3,$18(a0)
0000EB1E 117C 008B 0020             		move.b	#$8B,$20(a0)
0000EB24 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000EB2A 4A28 0029                  		tst.b	$29(a0)
0000EB2E 6700                       		beq.s	Obj14_SetSpeed
0000EB30 5428 0018                  		addq.b	#2,$18(a0)
0000EB34                            
0000EB34                            Obj14_SetSpeed:
0000EB34 7000                       		moveq	#0,d0
0000EB36 1028 0028                  		move.b	$28(a0),d0
0000EB3A D040                       		add.w	d0,d0
0000EB3C 317B 0096 0012             		move.w	Obj14_Speeds(pc,d0.w),$12(a0) ;	load object speed (vertical)
0000EB42 117C 0008 0019             		move.b	#8,$19(a0)
0000EB48 0C28 0006 0028             		cmpi.b	#6,$28(a0)	; is object type below $6 ?
0000EB4E 6500                       		bcs.s	Obj14_PlaySnd	; if yes, branch
0000EB50 117C 0010 0019             		move.b	#$10,$19(a0)
0000EB56 117C 0002 001C             		move.b	#2,$1C(a0)	; use horizontal animation
0000EB5C 3168 0012 0010             		move.w	$12(a0),$10(a0)	; set horizontal speed
0000EB62 317C 0000 0012             		move.w	#0,$12(a0)	; delete vertical speed
0000EB68                            
0000EB68                            Obj14_PlaySnd:
0000EB68 303C 00AE                  		move.w	#$AE,d0
0000EB6C 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play lava ball sound
0000EB72                            
0000EB72                            Obj14_Action:				; XREF: Obj14_Index
0000EB72 7000                       		moveq	#0,d0
0000EB74 1028 0028                  		move.b	$28(a0),d0
0000EB78 D040                       		add.w	d0,d0
0000EB7A 323B 0000                  		move.w	Obj14_TypeIndex(pc,d0.w),d1
0000EB7E 4EBB 1000                  		jsr	Obj14_TypeIndex(pc,d1.w)
0000EB82 6100 F218                  		bsr.w	SpeedToPos
0000EB86 43F9 0000 0000             		lea	(Ani_obj14).l,a1
0000EB8C 6100 C2F4                  		bsr.w	AnimateSprite
0000EB90                            
0000EB90                            Obj14_ChkDel:				; XREF: Obj13
0000EB90 3028 0008                  		move.w	8(a0),d0
0000EB94 0240 FF80                  		andi.w	#$FF80,d0
0000EB98 3238 F700                  		move.w	($FFFFF700).w,d1
0000EB9C 0441 0080                  		subi.w	#$80,d1
0000EBA0 0241 FF80                  		andi.w	#$FF80,d1
0000EBA4 9041                       		sub.w	d1,d0
0000EBA6 0C40 0280                  		cmpi.w	#$280,d0
0000EBAA 6200 F252                  		bhi.w	DeleteObject
0000EBAE 4E75                       		rts	
0000EBB0                            ; ===========================================================================
0000EBB0 0000 0000                  Obj14_TypeIndex:dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000EBB4 0000 0000                  		dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000EBB8 0000 0000                  		dc.w Obj14_Type04-Obj14_TypeIndex, Obj14_Type05-Obj14_TypeIndex
0000EBBC 0000 0000                  		dc.w Obj14_Type06-Obj14_TypeIndex, Obj14_Type07-Obj14_TypeIndex
0000EBC0 0000                       		dc.w Obj14_Type08-Obj14_TypeIndex
0000EBC2                            ; ===========================================================================
0000EBC2                            ; lavaball types 00-03 fly up and fall back down
0000EBC2                            
0000EBC2                            Obj14_Type00:				; XREF: Obj14_TypeIndex
0000EBC2 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's downward speed
0000EBC8 3028 0030                  		move.w	$30(a0),d0
0000EBCC B068 000C                  		cmp.w	$C(a0),d0	; has object fallen back to its	original position?
0000EBD0 6400                       		bcc.s	loc_E41E	; if not, branch
0000EBD2 5428 0024                  		addq.b	#2,$24(a0)	; goto "Obj14_Delete" routine
0000EBD6                            
0000EBD6                            loc_E41E:
0000EBD6 08A8 0001 0022             		bclr	#1,$22(a0)
0000EBDC 4A68 0012                  		tst.w	$12(a0)
0000EBE0 6A00                       		bpl.s	locret_E430
0000EBE2 08E8 0001 0022             		bset	#1,$22(a0)
0000EBE8                            
0000EBE8                            locret_E430:
0000EBE8 4E75                       		rts	
0000EBEA                            ; ===========================================================================
0000EBEA                            ; lavaball type	04 flies up until it hits the ceiling
0000EBEA                            
0000EBEA                            Obj14_Type04:				; XREF: Obj14_TypeIndex
0000EBEA 08E8 0001 0022             		bset	#1,$22(a0)
0000EBF0 6100 0000                  		bsr.w	ObjHitCeiling
0000EBF4 4A41                       		tst.w	d1
0000EBF6 6A00                       		bpl.s	locret_E452
0000EBF8 117C 0008 0028             		move.b	#8,$28(a0)
0000EBFE 117C 0001 001C             		move.b	#1,$1C(a0)
0000EC04 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the ceiling
0000EC0A                            
0000EC0A                            locret_E452:
0000EC0A 4E75                       		rts	
0000EC0C                            ; ===========================================================================
0000EC0C                            ; lavaball type	05 falls down until it hits the	floor
0000EC0C                            
0000EC0C                            Obj14_Type05:				; XREF: Obj14_TypeIndex
0000EC0C 08A8 0001 0022             		bclr	#1,$22(a0)
0000EC12 6100 0000                  		bsr.w	ObjHitFloor
0000EC16 4A41                       		tst.w	d1
0000EC18 6A00                       		bpl.s	locret_E474
0000EC1A 117C 0008 0028             		move.b	#8,$28(a0)
0000EC20 117C 0001 001C             		move.b	#1,$1C(a0)
0000EC26 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the floor
0000EC2C                            
0000EC2C                            locret_E474:
0000EC2C 4E75                       		rts	
0000EC2E                            ; ===========================================================================
0000EC2E                            ; lavaball types 06-07 move sideways
0000EC2E                            
0000EC2E                            Obj14_Type06:				; XREF: Obj14_TypeIndex
0000EC2E 08E8 0000 0022             		bset	#0,$22(a0)
0000EC34 76F8                       		moveq	#-8,d3
0000EC36 6100 0000                  		bsr.w	ObjHitWallLeft
0000EC3A 4A41                       		tst.w	d1
0000EC3C 6A00                       		bpl.s	locret_E498
0000EC3E 117C 0008 0028             		move.b	#8,$28(a0)
0000EC44 117C 0003 001C             		move.b	#3,$1C(a0)
0000EC4A 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000EC50                            
0000EC50                            locret_E498:
0000EC50 4E75                       		rts	
0000EC52                            ; ===========================================================================
0000EC52                            
0000EC52                            Obj14_Type07:				; XREF: Obj14_TypeIndex
0000EC52 08A8 0000 0022             		bclr	#0,$22(a0)
0000EC58 7608                       		moveq	#8,d3
0000EC5A 6100 0000                  		bsr.w	ObjHitWallRight
0000EC5E 4A41                       		tst.w	d1
0000EC60 6A00                       		bpl.s	locret_E4BC
0000EC62 117C 0008 0028             		move.b	#8,$28(a0)
0000EC68 117C 0003 001C             		move.b	#3,$1C(a0)
0000EC6E 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000EC74                            
0000EC74                            locret_E4BC:
0000EC74 4E75                       		rts	
0000EC76                            ; ===========================================================================
0000EC76                            
0000EC76                            Obj14_Type08:				; XREF: Obj14_TypeIndex
0000EC76 4E75                       		rts	
0000EC78                            ; ===========================================================================
0000EC78                            
0000EC78                            Obj14_Delete:				; XREF: Obj14_Index
0000EC78 6000 F184                  		bra.w	DeleteObject
0000EC7C                            ; ===========================================================================
0000EC7C                            Ani_obj14:
0000EC7C                            	include "_anim\obj14.asm"
0000EC7C                            ; ---------------------------------------------------------------------------
0000EC7C                            ; Animation script - lava balls
0000EC7C                            ; ---------------------------------------------------------------------------
0000EC7C 0000                       		dc.w byte_E4CC-Ani_obj14
0000EC7E 0000                       		dc.w byte_E4D2-Ani_obj14
0000EC80 0000                       		dc.w byte_E4D6-Ani_obj14
0000EC82 0000                       		dc.w byte_E4DC-Ani_obj14
0000EC84 0500 2001 21FF             byte_E4CC:	dc.b 5,	0, $20,	1, $21,	$FF
0000EC8A 0502 FC00                  byte_E4D2:	dc.b 5,	2, $FC,	0
0000EC8E 0503 4304 44FF             byte_E4D6:	dc.b 5,	3, $43,	4, $44,	$FF
0000EC94 0505 FC00                  byte_E4DC:	dc.b 5,	5, $FC,	0
0000EC98                            		even
0000EC98                            		even
0000EC98                            
0000EC98                            ; ===========================================================================
0000EC98                            ; ---------------------------------------------------------------------------
0000EC98                            ; Object 6D - flame thrower (SBZ)
0000EC98                            ; ---------------------------------------------------------------------------
0000EC98                            
0000EC98                            Obj6D:					; XREF: Obj_Index
0000EC98 7000                       		moveq	#0,d0
0000EC9A 1028 0024                  		move.b	$24(a0),d0
0000EC9E 323B 0000                  		move.w	Obj6D_Index(pc,d0.w),d1
0000ECA2 4EFB 1000                  		jmp	Obj6D_Index(pc,d1.w)
0000ECA6                            ; ===========================================================================
0000ECA6 0000                       Obj6D_Index:	dc.w Obj6D_Main-Obj6D_Index
0000ECA8 0000                       		dc.w Obj6D_Action-Obj6D_Index
0000ECAA                            ; ===========================================================================
0000ECAA                            
0000ECAA                            Obj6D_Main:				; XREF: Obj6D_Index
0000ECAA 5428 0024                  		addq.b	#2,$24(a0)
0000ECAE 217C 0000 0000 0004        		move.l	#Map_obj6D,4(a0)
0000ECB6 317C 83D9 0002             		move.w	#$83D9,2(a0)
0000ECBC 0028 0004 0001             		ori.b	#4,1(a0)
0000ECC2 117C 0001 0018             		move.b	#1,$18(a0)
0000ECC8 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000ECCE 117C 000C 0019             		move.b	#$C,$19(a0)
0000ECD4 1028 0028                  		move.b	$28(a0),d0
0000ECD8 0240 00F0                  		andi.w	#$F0,d0		; read 1st digit of object type
0000ECDC D040                       		add.w	d0,d0		; multiply by 2
0000ECDE 3140 0030                  		move.w	d0,$30(a0)
0000ECE2 3140 0032                  		move.w	d0,$32(a0)	; set flaming time
0000ECE6 1028 0028                  		move.b	$28(a0),d0
0000ECEA 0240 000F                  		andi.w	#$F,d0		; read 2nd digit of object type
0000ECEE EB48                       		lsl.w	#5,d0		; multiply by $20
0000ECF0 3140 0034                  		move.w	d0,$34(a0)	; set pause time
0000ECF4 117C 000A 0036             		move.b	#$A,$36(a0)
0000ECFA 0828 0001 0022             		btst	#1,$22(a0)
0000ED00 6700                       		beq.s	Obj6D_Action
0000ED02 117C 0002 001C             		move.b	#2,$1C(a0)
0000ED08 117C 0015 0036             		move.b	#$15,$36(a0)
0000ED0E                            
0000ED0E                            Obj6D_Action:				; XREF: Obj6D_Index
0000ED0E 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
0000ED12 6A00                       		bpl.s	loc_E57A	; if time remains, branch
0000ED14 3168 0034 0030             		move.w	$34(a0),$30(a0)	; begin	pause time
0000ED1A 0868 0000 001C             		bchg	#0,$1C(a0)
0000ED20 6700                       		beq.s	loc_E57A
0000ED22 3168 0032 0030             		move.w	$32(a0),$30(a0)	; begin	flaming	time
0000ED28 303C 00B3                  		move.w	#$B3,d0
0000ED2C 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play flame sound
0000ED32                            
0000ED32                            loc_E57A:
0000ED32 43F9 0000 0000             		lea	(Ani_obj6D).l,a1
0000ED38 6100 C148                  		bsr.w	AnimateSprite
0000ED3C 117C 0000 0020             		move.b	#0,$20(a0)
0000ED42 1028 0036                  		move.b	$36(a0),d0
0000ED46 B028 001A                  		cmp.b	$1A(a0),d0
0000ED4A 6600                       		bne.s	Obj6D_ChkDel
0000ED4C 117C 00A3 0020             		move.b	#$A3,$20(a0)
0000ED52                            
0000ED52                            Obj6D_ChkDel:
0000ED52 3028 0008                  		move.w	8(a0),d0
0000ED56 0240 FF80                  		andi.w	#$FF80,d0
0000ED5A 3238 F700                  		move.w	($FFFFF700).w,d1
0000ED5E 0441 0080                  		subi.w	#$80,d1
0000ED62 0241 FF80                  		andi.w	#$FF80,d1
0000ED66 9041                       		sub.w	d1,d0
0000ED68 0C40 0280                  		cmpi.w	#$280,d0
0000ED6C 6200 F090                  		bhi.w	DeleteObject
0000ED70 6000 F050                  		bra.w	DisplaySprite
0000ED74                            ; ===========================================================================
0000ED74                            Ani_obj6D:
0000ED74                            	include "_anim\obj6D.asm"
0000ED74                            ; ---------------------------------------------------------------------------
0000ED74                            ; Animation script - flamethrower (SBZ)
0000ED74                            ; ---------------------------------------------------------------------------
0000ED74 0000                       		dc.w byte_E5C4-Ani_obj6D
0000ED76 0000                       		dc.w byte_E5D2-Ani_obj6D
0000ED78 0000                       		dc.w byte_E5DC-Ani_obj6D
0000ED7A 0000                       		dc.w byte_E5EA-Ani_obj6D
0000ED7C 0300 0102 0304 0506 0708+  byte_E5C4:	dc.b 3,	0, 1, 2, 3, 4, 5, 6, 7,	8, 9, $A, $FE, 2
0000ED8A 0009 0705 0301 00FE 0100   byte_E5D2:	dc.b 0,	9, 7, 5, 3, 1, 0, $FE, 1, 0
0000ED94 030B 0C0D 0E0F 1011 1213+  byte_E5DC:	dc.b 3,	$B, $C,	$D, $E,	$F, $10, $11, $12, $13,	$14, $15, $FE, 2
0000EDA2 0014 1211 0F0D 0BFE 0100   byte_E5EA:	dc.b 0,	$14, $12, $11, $F, $D, $B, $FE,	1, 0
0000EDAC                            		even
0000EDAC                            		even
0000EDAC                            
0000EDAC                            ; ---------------------------------------------------------------------------
0000EDAC                            ; Sprite mappings - flame thrower (SBZ)
0000EDAC                            ; ---------------------------------------------------------------------------
0000EDAC                            Map_obj6D:
0000EDAC                            	include "_maps\obj6D.asm"
0000EDAC                            ; ---------------------------------------------------------------------------
0000EDAC                            ; Sprite mappings - flame thrower (SBZ)
0000EDAC                            ; ---------------------------------------------------------------------------
0000EDAC 0000 0000                  		dc.w byte_E620-Map_obj6D, byte_E626-Map_obj6D
0000EDB0 0000 0000                  		dc.w byte_E631-Map_obj6D, byte_E63C-Map_obj6D
0000EDB4 0000 0000                  		dc.w byte_E64C-Map_obj6D, byte_E65C-Map_obj6D
0000EDB8 0000 0000                  		dc.w byte_E671-Map_obj6D, byte_E686-Map_obj6D
0000EDBC 0000 0000                  		dc.w byte_E6A0-Map_obj6D, byte_E6BA-Map_obj6D
0000EDC0 0000 0000                  		dc.w byte_E6D9-Map_obj6D, byte_E6F8-Map_obj6D
0000EDC4 0000 0000                  		dc.w byte_E6FE-Map_obj6D, byte_E709-Map_obj6D
0000EDC8 0000 0000                  		dc.w byte_E714-Map_obj6D, byte_E724-Map_obj6D
0000EDCC 0000 0000                  		dc.w byte_E734-Map_obj6D, byte_E749-Map_obj6D
0000EDD0 0000 0000                  		dc.w byte_E75E-Map_obj6D, byte_E778-Map_obj6D
0000EDD4 0000 0000                  		dc.w byte_E792-Map_obj6D, byte_E7B1-Map_obj6D
0000EDD8 01                         byte_E620:	dc.b 1
0000EDD9 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EDDE 02                         byte_E626:	dc.b 2
0000EDDF 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EDE4 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EDE9 02                         byte_E631:	dc.b 2
0000EDEA 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EDEF 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EDF4 03                         byte_E63C:	dc.b 3
0000EDF5 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EDFA 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EDFF 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EE04 03                         byte_E64C:	dc.b 3
0000EE05 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EE0A 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EE0F 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EE14 04                         byte_E65C:	dc.b 4
0000EE15 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EE1A 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EE1F 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EE24 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EE29 04                         byte_E671:	dc.b 4
0000EE2A 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000EE2F 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EE34 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EE39 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EE3E 05                         byte_E686:	dc.b 5
0000EE3F F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000EE44 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EE49 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EE4E 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EE53 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EE58 05                         byte_E6A0:	dc.b 5
0000EE59 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000EE5E 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000EE63 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EE68 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EE6D 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EE72 06                         byte_E6BA:	dc.b 6
0000EE73 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000EE78 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000EE7D 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EE82 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000EE87 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EE8C 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EE91 06                         byte_E6D9:	dc.b 6
0000EE92 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000EE97 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000EE9C 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000EEA1 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EEA6 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EEAB 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EEB0 01                         byte_E6F8:	dc.b 1
0000EEB1 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EEB6 02                         byte_E6FE:	dc.b 2
0000EEB7 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EEBC 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EEC1 02                         byte_E709:	dc.b 2
0000EEC2 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EEC7 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EECC 03                         byte_E714:	dc.b 3
0000EECD 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EED2 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EED7 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EEDC 03                         byte_E724:	dc.b 3
0000EEDD 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EEE2 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EEE7 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EEEC 04                         byte_E734:	dc.b 4
0000EEED 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EEF2 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EEF7 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EEFC 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EF01 04                         byte_E749:	dc.b 4
0000EF02 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000EF07 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EF0C 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EF11 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EF16 05                         byte_E75E:	dc.b 5
0000EF17 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000EF1C 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EF21 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EF26 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EF2B 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EF30 05                         byte_E778:	dc.b 5
0000EF31 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000EF36 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000EF3B 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EF40 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EF45 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EF4A 06                         byte_E792:	dc.b 6
0000EF4B E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000EF50 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000EF55 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EF5A 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000EF5F 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EF64 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EF69 06                         byte_E7B1:	dc.b 6
0000EF6A E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000EF6F F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000EF74 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000EF79 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EF7E 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EF83 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EF88                            		even
0000EF88                            		even
0000EF88                            
0000EF88                            ; ===========================================================================
0000EF88                            ; ---------------------------------------------------------------------------
0000EF88                            ; Object 46 - solid blocks and blocks that fall	from the ceiling (MZ)
0000EF88                            ; ---------------------------------------------------------------------------
0000EF88                            
0000EF88                            Obj46:					; XREF: Obj_Index
0000EF88 7000                       		moveq	#0,d0
0000EF8A 1028 0024                  		move.b	$24(a0),d0
0000EF8E 323B 0000                  		move.w	Obj46_Index(pc,d0.w),d1
0000EF92 4EFB 1000                  		jmp	Obj46_Index(pc,d1.w)
0000EF96                            ; ===========================================================================
0000EF96 0000                       Obj46_Index:	dc.w Obj46_Main-Obj46_Index
0000EF98 0000                       		dc.w Obj46_Action-Obj46_Index
0000EF9A                            ; ===========================================================================
0000EF9A                            
0000EF9A                            Obj46_Main:				; XREF: Obj46_Index
0000EF9A 5428 0024                  		addq.b	#2,$24(a0)
0000EF9E 117C 000F 0016             		move.b	#$F,$16(a0)
0000EFA4 117C 000F 0017             		move.b	#$F,$17(a0)
0000EFAA 217C 0000 0000 0004        		move.l	#Map_obj46,4(a0)
0000EFB2 317C 4000 0002             		move.w	#$4000,2(a0)
0000EFB8 117C 0004 0001             		move.b	#4,1(a0)
0000EFBE 117C 0003 0018             		move.b	#3,$18(a0)
0000EFC4 117C 0010 0019             		move.b	#$10,$19(a0)
0000EFCA 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000EFD0 317C 05C0 0032             		move.w	#$5C0,$32(a0)
0000EFD6                            
0000EFD6                            Obj46_Action:				; XREF: Obj46_Index
0000EFD6 4A28 0001                  		tst.b	1(a0)
0000EFDA 6A00                       		bpl.s	Obj46_ChkDel
0000EFDC 7000                       		moveq	#0,d0
0000EFDE 1028 0028                  		move.b	$28(a0),d0	; get object type
0000EFE2 0240 0007                  		andi.w	#7,d0		; read only the	1st digit
0000EFE6 D040                       		add.w	d0,d0
0000EFE8 323B 0000                  		move.w	Obj46_TypeIndex(pc,d0.w),d1
0000EFEC 4EBB 1000                  		jsr	Obj46_TypeIndex(pc,d1.w)
0000EFF0 323C 001B                  		move.w	#$1B,d1
0000EFF4 343C 0010                  		move.w	#$10,d2
0000EFF8 363C 0011                  		move.w	#$11,d3
0000EFFC 3828 0008                  		move.w	8(a0),d4
0000F000 6100 0000                  		bsr.w	SolidObject
0000F004                            
0000F004                            Obj46_ChkDel:
0000F004 6100 EDBC                  		bsr.w	DisplaySprite
0000F008 3028 0008                  		move.w	8(a0),d0
0000F00C 0240 FF80                  		andi.w	#$FF80,d0
0000F010 3238 F700                  		move.w	($FFFFF700).w,d1
0000F014 0441 0080                  		subi.w	#$80,d1
0000F018 0241 FF80                  		andi.w	#$FF80,d1
0000F01C 9041                       		sub.w	d1,d0
0000F01E 0C40 0280                  		cmpi.w	#$280,d0
0000F022 6200 EDDA                  		bhi.w	DeleteObject
0000F026 4E75                       		rts	
0000F028                            ; ===========================================================================
0000F028 0000                       Obj46_TypeIndex:dc.w Obj46_Type00-Obj46_TypeIndex
0000F02A 0000                       		dc.w Obj46_Type01-Obj46_TypeIndex
0000F02C 0000                       		dc.w Obj46_Type02-Obj46_TypeIndex
0000F02E 0000                       		dc.w Obj46_Type03-Obj46_TypeIndex
0000F030 0000                       		dc.w Obj46_Type04-Obj46_TypeIndex
0000F032                            ; ===========================================================================
0000F032                            
0000F032                            Obj46_Type00:				; XREF: Obj46_TypeIndex
0000F032 4E75                       		rts	
0000F034                            ; ===========================================================================
0000F034                            
0000F034                            Obj46_Type02:				; XREF: Obj46_TypeIndex
0000F034 3038 D008                  		move.w	($FFFFD008).w,d0
0000F038 9068 0008                  		sub.w	8(a0),d0
0000F03C 6400                       		bcc.s	loc_E888
0000F03E 4440                       		neg.w	d0
0000F040                            
0000F040                            loc_E888:
0000F040 0C40 0090                  		cmpi.w	#$90,d0		; is Sonic within $90 pixels of	the block?
0000F044 6400                       		bcc.s	Obj46_Type01	; if not, resume wobbling
0000F046 117C 0003 0028             		move.b	#3,$28(a0)	; if yes, make the block fall
0000F04C                            
0000F04C                            Obj46_Type01:				; XREF: Obj46_TypeIndex
0000F04C 7000                       		moveq	#0,d0
0000F04E 1038 FE74                  		move.b	($FFFFFE74).w,d0
0000F052 0828 0003 0028             		btst	#3,$28(a0)
0000F058 6700                       		beq.s	loc_E8A8
0000F05A 4440                       		neg.w	d0
0000F05C 0640 0010                  		addi.w	#$10,d0
0000F060                            
0000F060                            loc_E8A8:
0000F060 3228 0030                  		move.w	$30(a0),d1
0000F064 9240                       		sub.w	d0,d1
0000F066 3141 000C                  		move.w	d1,$C(a0)	; update the block's position to make it wobble
0000F06A 4E75                       		rts	
0000F06C                            ; ===========================================================================
0000F06C                            
0000F06C                            Obj46_Type03:				; XREF: Obj46_TypeIndex
0000F06C 6100 ED2E                  		bsr.w	SpeedToPos
0000F070 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase falling speed
0000F076 6100 0000                  		bsr.w	ObjHitFloor
0000F07A 4A41                       		tst.w	d1		; has the block	hit the	floor?
0000F07C 6A00 0000                  		bpl.w	locret_E8EE	; if not, branch
0000F080 D368 000C                  		add.w	d1,$C(a0)
0000F084 4268 0012                  		clr.w	$12(a0)		; stop the block falling
0000F088 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F08E 117C 0004 0028             		move.b	#4,$28(a0)
0000F094 3011                       		move.w	(a1),d0
0000F096 0240 03FF                  		andi.w	#$3FF,d0
0000F09A 0C40 02E8                  		cmpi.w	#$2E8,d0
0000F09E 6400                       		bcc.s	locret_E8EE
0000F0A0 117C 0000 0028             		move.b	#0,$28(a0)
0000F0A6                            
0000F0A6                            locret_E8EE:
0000F0A6 4E75                       		rts	
0000F0A8                            ; ===========================================================================
0000F0A8                            
0000F0A8                            Obj46_Type04:				; XREF: Obj46_TypeIndex
0000F0A8 7000                       		moveq	#0,d0
0000F0AA 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000F0AE E648                       		lsr.w	#3,d0
0000F0B0 3228 0030                  		move.w	$30(a0),d1
0000F0B4 9240                       		sub.w	d0,d1
0000F0B6 3141 000C                  		move.w	d1,$C(a0)	; make the block wobble
0000F0BA 4E75                       		rts	
0000F0BC                            ; ===========================================================================
0000F0BC                            ; ---------------------------------------------------------------------------
0000F0BC                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000F0BC                            ; ---------------------------------------------------------------------------
0000F0BC                            Map_obj46:
0000F0BC                            	include "_maps\obj46.asm"
0000F0BC                            ; ---------------------------------------------------------------------------
0000F0BC                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000F0BC                            ; ---------------------------------------------------------------------------
0000F0BC 0000                       		dc.w byte_E906-Map_obj46
0000F0BE 01                         byte_E906:	dc.b 1
0000F0BF F00F 0001 F0               		dc.b $F0, $F, 0, 1, $F0
0000F0C4                            		even
0000F0C4                            		even
0000F0C4                            
0000F0C4                            ; ===========================================================================
0000F0C4                            ; ---------------------------------------------------------------------------
0000F0C4                            ; Object 12 - lamp (SYZ)
0000F0C4                            ; ---------------------------------------------------------------------------
0000F0C4                            
0000F0C4                            Obj12:					; XREF: Obj_Index
0000F0C4 7000                       		moveq	#0,d0
0000F0C6 1028 0024                  		move.b	$24(a0),d0
0000F0CA 323B 0000                  		move.w	Obj12_Index(pc,d0.w),d1
0000F0CE 4EFB 1000                  		jmp	Obj12_Index(pc,d1.w)
0000F0D2                            ; ===========================================================================
0000F0D2 0000                       Obj12_Index:	dc.w Obj12_Main-Obj12_Index
0000F0D4 0000                       		dc.w Obj12_Animate-Obj12_Index
0000F0D6                            ; ===========================================================================
0000F0D6                            
0000F0D6                            Obj12_Main:				; XREF: Obj12_Index
0000F0D6 5428 0024                  		addq.b	#2,$24(a0)
0000F0DA 217C 0000 0000 0004        		move.l	#Map_obj12,4(a0)
0000F0E2 317C 0000 0002             		move.w	#0,2(a0)
0000F0E8 117C 0004 0001             		move.b	#4,1(a0)
0000F0EE 117C 0010 0019             		move.b	#$10,$19(a0)
0000F0F4 117C 0006 0018             		move.b	#6,$18(a0)
0000F0FA                            
0000F0FA                            Obj12_Animate:				; XREF: Obj12_Index
0000F0FA 5328 001E                  		subq.b	#1,$1E(a0)
0000F0FE 6A00                       		bpl.s	Obj12_ChkDel
0000F100 117C 0007 001E             		move.b	#7,$1E(a0)
0000F106 5228 001A                  		addq.b	#1,$1A(a0)
0000F10A 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
0000F110 6500                       		bcs.s	Obj12_ChkDel
0000F112 117C 0000 001A             		move.b	#0,$1A(a0)
0000F118                            
0000F118                            Obj12_ChkDel:
0000F118 3028 0008                  		move.w	8(a0),d0
0000F11C 0240 FF80                  		andi.w	#$FF80,d0
0000F120 3238 F700                  		move.w	($FFFFF700).w,d1
0000F124 0441 0080                  		subi.w	#$80,d1
0000F128 0241 FF80                  		andi.w	#$FF80,d1
0000F12C 9041                       		sub.w	d1,d0
0000F12E 0C40 0280                  		cmpi.w	#$280,d0
0000F132 6200 ECCA                  		bhi.w	DeleteObject
0000F136 6000 EC8A                  		bra.w	DisplaySprite
0000F13A                            ; ===========================================================================
0000F13A                            ; ---------------------------------------------------------------------------
0000F13A                            ; Sprite mappings - lamp (SYZ)
0000F13A                            ; ---------------------------------------------------------------------------
0000F13A                            Map_obj12:
0000F13A                            	include "_maps\obj12.asm"
0000F13A                            ; ---------------------------------------------------------------------------
0000F13A                            ; Sprite mappings - lamp (SYZ)
0000F13A                            ; ---------------------------------------------------------------------------
0000F13A 0000 0000                  		dc.w byte_E98E-Map_obj12, byte_E999-Map_obj12
0000F13E 0000 0000                  		dc.w byte_E9A4-Map_obj12, byte_E9AF-Map_obj12
0000F142 0000 0000                  		dc.w byte_E9BA-Map_obj12, byte_E9C5-Map_obj12
0000F146 02                         byte_E98E:	dc.b 2
0000F147 F80C 0031 F0               		dc.b $F8, $C, 0, $31, $F0
0000F14C 000C 1031 F0               		dc.b 0,	$C, $10, $31, $F0
0000F151 02                         byte_E999:	dc.b 2
0000F152 F80C 0035 F0               		dc.b $F8, $C, 0, $35, $F0
0000F157 000C 1035 F0               		dc.b 0,	$C, $10, $35, $F0
0000F15C 02                         byte_E9A4:	dc.b 2
0000F15D F80C 0039 F0               		dc.b $F8, $C, 0, $39, $F0
0000F162 000C 1039 F0               		dc.b 0,	$C, $10, $39, $F0
0000F167 02                         byte_E9AF:	dc.b 2
0000F168 F80C 003D F0               		dc.b $F8, $C, 0, $3D, $F0
0000F16D 000C 103D F0               		dc.b 0,	$C, $10, $3D, $F0
0000F172 02                         byte_E9BA:	dc.b 2
0000F173 F80C 0041 F0               		dc.b $F8, $C, 0, $41, $F0
0000F178 000C 1041 F0               		dc.b 0,	$C, $10, $41, $F0
0000F17D 02                         byte_E9C5:	dc.b 2
0000F17E F80C 0045 F0               		dc.b $F8, $C, 0, $45, $F0
0000F183 000C 1045 F0               		dc.b 0,	$C, $10, $45, $F0
0000F188                            		even
0000F188                            		even
0000F188                            
0000F188                            ; ===========================================================================
0000F188                            ; ---------------------------------------------------------------------------
0000F188                            ; Object 47 - pinball bumper (SYZ)
0000F188                            ; ---------------------------------------------------------------------------
0000F188                            
0000F188                            Obj47:					; XREF: Obj_Index
0000F188 7000                       		moveq	#0,d0
0000F18A 1028 0024                  		move.b	$24(a0),d0
0000F18E 323B 0000                  		move.w	Obj47_Index(pc,d0.w),d1
0000F192 4EFB 1000                  		jmp	Obj47_Index(pc,d1.w)
0000F196                            ; ===========================================================================
0000F196 0000                       Obj47_Index:	dc.w Obj47_Main-Obj47_Index
0000F198 0000                       		dc.w Obj47_Hit-Obj47_Index
0000F19A                            ; ===========================================================================
0000F19A                            
0000F19A                            Obj47_Main:				; XREF: Obj47_Index
0000F19A 5428 0024                  		addq.b	#2,$24(a0)
0000F19E 217C 0000 0000 0004        		move.l	#Map_obj47,4(a0)
0000F1A6 317C 0380 0002             		move.w	#$380,2(a0)
0000F1AC 117C 0004 0001             		move.b	#4,1(a0)
0000F1B2 117C 0010 0019             		move.b	#$10,$19(a0)
0000F1B8 117C 0001 0018             		move.b	#1,$18(a0)
0000F1BE 117C 00D7 0020             		move.b	#$D7,$20(a0)
0000F1C4                            
0000F1C4                            Obj47_Hit:				; XREF: Obj47_Index
0000F1C4 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	bumper?
0000F1C8 6700 0000                  		beq.w	Obj47_Display	; if not, branch
0000F1CC 4228 0021                  		clr.b	$21(a0)
0000F1D0 43F8 D000                  		lea	($FFFFD000).w,a1
0000F1D4 3228 0008                  		move.w	8(a0),d1
0000F1D8 3428 000C                  		move.w	$C(a0),d2
0000F1DC 9269 0008                  		sub.w	8(a1),d1
0000F1E0 9469 000C                  		sub.w	$C(a1),d2
0000F1E4 4EB9 0000 2F92             		jsr	(CalcAngle).l
0000F1EA 4EB9 0000 2CC4             		jsr	(CalcSine).l
0000F1F0 C3FC F900                  		muls.w	#-$700,d1
0000F1F4 E081                       		asr.l	#8,d1
0000F1F6 3341 0010                  		move.w	d1,$10(a1)	; bounce Sonic away
0000F1FA C1FC F900                  		muls.w	#-$700,d0
0000F1FE E080                       		asr.l	#8,d0
0000F200 3340 0012                  		move.w	d0,$12(a1)	; bounce Sonic away
0000F204 08E9 0001 0022             		bset	#1,$22(a1)
0000F20A 08A9 0004 0022             		bclr	#4,$22(a1)
0000F210 08A9 0005 0022             		bclr	#5,$22(a1)
0000F216 4229 003C                  		clr.b	$3C(a1)
0000F21A 117C 0001 001C             		move.b	#1,$1C(a0)
0000F220 303C 00B4                  		move.w	#$B4,d0
0000F224 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play bumper sound
0000F22A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F22E 7000                       		moveq	#0,d0
0000F230 1028 0023                  		move.b	$23(a0),d0
0000F234 6700                       		beq.s	Obj47_Score
0000F236 0C32 008A 0002             		cmpi.b	#$8A,2(a2,d0.w)	; has bumper been hit $8A times?
0000F23C 6400                       		bcc.s	Obj47_Display	; if yes, Sonic	gets no	points
0000F23E 5232 0002                  		addq.b	#1,2(a2,d0.w)
0000F242                            
0000F242                            Obj47_Score:
0000F242 7001                       		moveq	#1,d0
0000F244 4EB9 0000 0000             		jsr	AddPoints	; add 10 to score
0000F24A 6100 EFFC                  		bsr.w	SingleObjLoad
0000F24E 6600                       		bne.s	Obj47_Display
0000F250 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0000F254 3368 0008 0008             		move.w	8(a0),8(a1)
0000F25A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F260 137C 0004 001A             		move.b	#4,$1A(a1)
0000F266                            
0000F266                            Obj47_Display:
0000F266 43F9 0000 0000             		lea	(Ani_obj47).l,a1
0000F26C 6100 BC14                  		bsr.w	AnimateSprite
0000F270 3028 0008                  		move.w	8(a0),d0
0000F274 0240 FF80                  		andi.w	#$FF80,d0
0000F278 3238 F700                  		move.w	($FFFFF700).w,d1
0000F27C 0441 0080                  		subi.w	#$80,d1
0000F280 0241 FF80                  		andi.w	#$FF80,d1
0000F284 9041                       		sub.w	d1,d0
0000F286 0C40 0280                  		cmpi.w	#$280,d0
0000F28A 6200                       		bhi.s	Obj47_ChkHit
0000F28C 6000 EB34                  		bra.w	DisplaySprite
0000F290                            ; ===========================================================================
0000F290                            
0000F290                            Obj47_ChkHit:				; XREF: Obj47_Display
0000F290 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F294 7000                       		moveq	#0,d0
0000F296 1028 0023                  		move.b	$23(a0),d0
0000F29A 6700                       		beq.s	Obj47_Delete
0000F29C 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000F2A2                            
0000F2A2                            Obj47_Delete:
0000F2A2 6000 EB5A                  		bra.w	DeleteObject
0000F2A6                            ; ===========================================================================
0000F2A6                            Ani_obj47:
0000F2A6                            	include "_anim\obj47.asm"
0000F2A6                            ; ---------------------------------------------------------------------------
0000F2A6                            ; Animation script - flamethrower (SBZ)
0000F2A6                            ; ---------------------------------------------------------------------------
0000F2A6 0000                       		dc.w byte_EAF4-Ani_obj47
0000F2A8 0000                       		dc.w byte_EAF8-Ani_obj47
0000F2AA 0F00 FF00                  byte_EAF4:	dc.b $F, 0, $FF, 0
0000F2AE 0301 0201 02FD 0000        byte_EAF8:	dc.b 3,	1, 2, 1, 2, $FD, 0, 0
0000F2B6                            		even
0000F2B6                            		even
0000F2B6                            
0000F2B6                            ; ---------------------------------------------------------------------------
0000F2B6                            ; Sprite mappings - pinball bumper (SYZ)
0000F2B6                            ; ---------------------------------------------------------------------------
0000F2B6                            Map_obj47:
0000F2B6                            	include "_maps\obj47.asm"
0000F2B6                            ; ---------------------------------------------------------------------------
0000F2B6                            ; Sprite mappings - pinball bumper (SYZ)
0000F2B6                            ; ---------------------------------------------------------------------------
0000F2B6 0000                       		dc.w byte_EB06-Map_obj47
0000F2B8 0000                       		dc.w byte_EB11-Map_obj47
0000F2BA 0000                       		dc.w byte_EB1C-Map_obj47
0000F2BC 02                         byte_EB06:	dc.b 2
0000F2BD F007 0000 F0               		dc.b $F0, 7, 0,	0, $F0
0000F2C2 F007 0800 00               		dc.b $F0, 7, 8,	0, 0
0000F2C7 02                         byte_EB11:	dc.b 2
0000F2C8 F406 0008 F4               		dc.b $F4, 6, 0,	8, $F4
0000F2CD F402 0808 04               		dc.b $F4, 2, 8,	8, 4
0000F2D2 02                         byte_EB1C:	dc.b 2
0000F2D3 F007 000E F0               		dc.b $F0, 7, 0,	$E, $F0
0000F2D8 F007 080E 00               		dc.b $F0, 7, 8,	$E, 0
0000F2DE 00                         		even
0000F2DE 00                         		even
0000F2DE                            
0000F2DE                            ; ===========================================================================
0000F2DE                            ; ---------------------------------------------------------------------------
0000F2DE                            ; Object 0D - signpost at the end of a level
0000F2DE                            ; ---------------------------------------------------------------------------
0000F2DE                            
0000F2DE                            Obj0D:					; XREF: Obj_Index
0000F2DE 7000                       		moveq	#0,d0
0000F2E0 1028 0024                  		move.b	$24(a0),d0
0000F2E4 323B 0000                  		move.w	Obj0D_Index(pc,d0.w),d1
0000F2E8 4EBB 1000                  		jsr	Obj0D_Index(pc,d1.w)
0000F2EC 43F9 0000 0000             		lea	(Ani_obj0D).l,a1
0000F2F2 6100 BB8E                  		bsr.w	AnimateSprite
0000F2F6 6100 EACA                  		bsr.w	DisplaySprite
0000F2FA 3028 0008                  		move.w	8(a0),d0
0000F2FE 0240 FF80                  		andi.w	#$FF80,d0
0000F302 3238 F700                  		move.w	($FFFFF700).w,d1
0000F306 0441 0080                  		subi.w	#$80,d1
0000F30A 0241 FF80                  		andi.w	#$FF80,d1
0000F30E 9041                       		sub.w	d1,d0
0000F310 0C40 0280                  		cmpi.w	#$280,d0
0000F314 6200 EAE8                  		bhi.w	DeleteObject
0000F318 4E75                       		rts	
0000F31A                            ; ===========================================================================
0000F31A 0000                       Obj0D_Index:	dc.w Obj0D_Main-Obj0D_Index
0000F31C 0000                       		dc.w Obj0D_Touch-Obj0D_Index
0000F31E 0000                       		dc.w Obj0D_Spin-Obj0D_Index
0000F320 0000                       		dc.w Obj0D_SonicRun-Obj0D_Index
0000F322 0000                       		dc.w locret_ED1A-Obj0D_Index
0000F324                            ; ===========================================================================
0000F324                            
0000F324                            Obj0D_Main:				; XREF: Obj0D_Index
0000F324 5428 0024                  		addq.b	#2,$24(a0)
0000F328 217C 0000 0000 0004        		move.l	#Map_obj0D,4(a0)
0000F330 317C 0680 0002             		move.w	#$680,2(a0)
0000F336 117C 0004 0001             		move.b	#4,1(a0)
0000F33C 117C 0018 0019             		move.b	#$18,$19(a0)
0000F342 117C 0004 0018             		move.b	#4,$18(a0)
0000F348                            
0000F348                            Obj0D_Touch:				; XREF: Obj0D_Index
0000F348 3038 D008                  		move.w	($FFFFD008).w,d0
0000F34C 9068 0008                  		sub.w	8(a0),d0
0000F350 6500                       		bcs.s	locret_EBBA
0000F352 0C40 0020                  		cmpi.w	#$20,d0		; is Sonic within $20 pixels of	the signpost?
0000F356 6400                       		bcc.s	locret_EBBA	; if not, branch
0000F358 303C 00CF                  		move.w	#$CF,d0
0000F35C 4EB9 0000 15BA             		jsr	(PlaySound).l	; play signpost	sound
0000F362 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000F366 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w ; lock screen position
0000F36C 5428 0024                  		addq.b	#2,$24(a0)
0000F370                            
0000F370                            locret_EBBA:
0000F370 4E75                       		rts	
0000F372                            ; ===========================================================================
0000F372                            
0000F372                            Obj0D_Spin:				; XREF: Obj0D_Index
0000F372 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from spin time
0000F376 6A00                       		bpl.s	Obj0D_Sparkle	; if time remains, branch
0000F378 317C 003C 0030             		move.w	#60,$30(a0)	; set spin cycle time to 1 second
0000F37E 5228 001C                  		addq.b	#1,$1C(a0)	; next spin cycle
0000F382 0C28 0003 001C             		cmpi.b	#3,$1C(a0)	; have 3 spin cycles completed?
0000F388 6600                       		bne.s	Obj0D_Sparkle	; if not, branch
0000F38A 5428 0024                  		addq.b	#2,$24(a0)
0000F38E                            
0000F38E                            Obj0D_Sparkle:
0000F38E 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000F392 6A00                       		bpl.s	locret_EC42	; if time remains, branch
0000F394 317C 000B 0032             		move.w	#$B,$32(a0)	; set time between sparkles to $B frames
0000F39A 7000                       		moveq	#0,d0
0000F39C 1028 0034                  		move.b	$34(a0),d0
0000F3A0 5428 0034                  		addq.b	#2,$34(a0)
0000F3A4 0228 000E 0034             		andi.b	#$E,$34(a0)
0000F3AA 45FB 0000                  		lea	Obj0D_SparkPos(pc,d0.w),a2 ; load sparkle position data
0000F3AE 6100 EE98                  		bsr.w	SingleObjLoad
0000F3B2 6600                       		bne.s	locret_EC42
0000F3B4 12BC 0025                  		move.b	#$25,0(a1)	; load rings object
0000F3B8 137C 0006 0024             		move.b	#6,$24(a1)	; jump to ring sparkle subroutine
0000F3BE 101A                       		move.b	(a2)+,d0
0000F3C0 4880                       		ext.w	d0
0000F3C2 D068 0008                  		add.w	8(a0),d0
0000F3C6 3340 0008                  		move.w	d0,8(a1)
0000F3CA 101A                       		move.b	(a2)+,d0
0000F3CC 4880                       		ext.w	d0
0000F3CE D068 000C                  		add.w	$C(a0),d0
0000F3D2 3340 000C                  		move.w	d0,$C(a1)
0000F3D6 237C 0000 A620 0004        		move.l	#Map_obj25,4(a1)
0000F3DE 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000F3E4 137C 0004 0001             		move.b	#4,1(a1)
0000F3EA 137C 0002 0018             		move.b	#2,$18(a1)
0000F3F0 137C 0008 0019             		move.b	#8,$19(a1)
0000F3F6                            
0000F3F6                            locret_EC42:
0000F3F6 4E75                       		rts	
0000F3F8                            ; ===========================================================================
0000F3F8 E8F0                       Obj0D_SparkPos:	dc.b -$18,-$10		; x-position, y-position
0000F3FA 0808                       		dc.b	8,   8
0000F3FC F000                       		dc.b -$10,   0
0000F3FE 18F8                       		dc.b  $18,  -8
0000F400 00F8                       		dc.b	0,  -8
0000F402 1000                       		dc.b  $10,   0
0000F404 E808                       		dc.b -$18,   8
0000F406 1810                       		dc.b  $18, $10
0000F408                            ; ===========================================================================
0000F408                            
0000F408                            Obj0D_SonicRun:				; XREF: Obj0D_Index
0000F408 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
0000F40C 6600 0000                  		bne.w	locret_ECEE	; if yes, branch
0000F410 0838 0001 D022             		btst	#1,($FFFFD022).w
0000F416 6600                       		bne.s	loc_EC70
0000F418 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0000F41E 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0000F424 6700                       		beq.s	Obj0D_MoveLeft	; GMZ: If not, branch
0000F426 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; make Sonic run to	the right
0000F42C 6000                       		bra.s	loc_EC70
0000F42E                            
0000F42E                            Obj0D_MoveLeft:
0000F42E 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0000F434                            
0000F434                            loc_EC70:
0000F434 4A38 D000                  		tst.b	($FFFFD000).w
0000F438 6700                       		beq.s	loc_EC86
0000F43A 3038 D008                  		move.w	($FFFFD008).w,d0
0000F43E 3238 F72A                  		move.w	($FFFFF72A).w,d1
0000F442 0641 0128                  		addi.w	#$128,d1
0000F446 B041                       		cmp.w	d1,d0
0000F448 6500                       		bcs.s	locret_ECEE
0000F44A                            
0000F44A                            loc_EC86:
0000F44A 5428 0024                  		addq.b	#2,$24(a0)
0000F44E                            
0000F44E                            ; ---------------------------------------------------------------------------
0000F44E                            ; Subroutine to	set up bonuses at the end of an	act
0000F44E                            ; ---------------------------------------------------------------------------
0000F44E                            
0000F44E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F44E                            
0000F44E                            
0000F44E                            GotThroughAct:				; XREF: Obj3E_EndAct
0000F44E 4A38 D5C0                  		tst.b	($FFFFD5C0).w
0000F452 6600                       		bne.s	locret_ECEE
0000F454 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w
0000F45A 4238 FE2D                  		clr.b	($FFFFFE2D).w	; disable invincibility
0000F45E 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000F462 11FC 003A D5C0             		move.b	#$3A,($FFFFD5C0).w
0000F468 7010                       		moveq	#$10,d0
0000F46A 4EB9 0000 17D6             		jsr	(LoadPLC2).l	; load title card patterns
0000F470 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w
0000F476 7000                       		moveq	#0,d0
0000F478 1038 FE23                  		move.b	($FFFFFE23).w,d0
0000F47C C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
0000F480 7200                       		moveq	#0,d1
0000F482 1238 FE24                  		move.b	($FFFFFE24).w,d1
0000F486 D041                       		add.w	d1,d0		; add up your time
0000F488 80FC 000F                  		divu.w	#15,d0		; divide by 15
0000F48C 7214                       		moveq	#$14,d1
0000F48E B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
0000F490 6500                       		bcs.s	loc_ECD0	; if not, branch
0000F492 3001                       		move.w	d1,d0		; use minimum time bonus (0)
0000F494                            
0000F494                            loc_ECD0:
0000F494 D040                       		add.w	d0,d0
0000F496 31FB 0000 F7D2             		move.w	TimeBonuses(pc,d0.w),($FFFFF7D2).w ; set time bonus
0000F49C 3038 FE20                  		move.w	($FFFFFE20).w,d0 ; load	number of rings
0000F4A0 C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
0000F4A4 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set ring bonus
0000F4A8 303C 008E                  		move.w	#$8E,d0
0000F4AC 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play "Sonic got	through" music
0000F4B2                            
0000F4B2                            locret_ECEE:
0000F4B2 4E75                       		rts	
0000F4B4                            ; End of function GotThroughAct
0000F4B4                            
0000F4B4                            ; ===========================================================================
0000F4B4 1388 1388 03E8 01F4 0190+  TimeBonuses:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
0000F4C8 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
0000F4DE                            ; ===========================================================================
0000F4DE                            
0000F4DE                            locret_ED1A:				; XREF: Obj0D_Index
0000F4DE 4E75                       		rts	
0000F4E0                            ; ===========================================================================
0000F4E0                            Ani_obj0D:
0000F4E0                            	include "_anim\obj0D.asm"
0000F4E0                            ; ---------------------------------------------------------------------------
0000F4E0                            ; Animation script - signpost
0000F4E0                            ; ---------------------------------------------------------------------------
0000F4E0 0000                       		dc.w byte_ED24-Ani_obj0D
0000F4E2 0000                       		dc.w byte_ED28-Ani_obj0D
0000F4E4 0000                       		dc.w byte_ED2E-Ani_obj0D
0000F4E6 0000                       		dc.w byte_ED34-Ani_obj0D
0000F4E8 0F00 FF00                  byte_ED24:	dc.b $F, 0, $FF, 0
0000F4EC 0100 0102 03FF             byte_ED28:	dc.b 1,	0, 1, 2, 3, $FF
0000F4F2 0104 0102 03FF             byte_ED2E:	dc.b 1,	4, 1, 2, 3, $FF
0000F4F8 0F04 FF                    byte_ED34:	dc.b $F, 4, $FF
0000F4FC 00                         		even
0000F4FC 00                         		even
0000F4FC                            
0000F4FC                            ; ---------------------------------------------------------------------------
0000F4FC                            ; Sprite mappings - signpost
0000F4FC                            ; ---------------------------------------------------------------------------
0000F4FC                            Map_obj0D:
0000F4FC                            	include "_maps\obj0D.asm"
0000F4FC                            ; ---------------------------------------------------------------------------
0000F4FC                            ; Sprite mappings - signpost
0000F4FC                            ; ---------------------------------------------------------------------------
0000F4FC 0000 0000                  		dc.w byte_ED42-Map_obj0D, byte_ED52-Map_obj0D
0000F500 0000 0000                  		dc.w byte_ED5D-Map_obj0D, byte_ED68-Map_obj0D
0000F504 0000                       		dc.w byte_ED73-Map_obj0D
0000F506 03                         byte_ED42:	dc.b 3
0000F507 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000F50C F00B 0800 00               		dc.b $F0, $B, 8, 0, 0
0000F511 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F516 02                         byte_ED52:	dc.b 2
0000F517 F00F 000C F0               		dc.b $F0, $F, 0, $C, $F0
0000F51C 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F521 02                         byte_ED5D:	dc.b 2
0000F522 F003 001C FC               		dc.b $F0, 3, 0,	$1C, $FC
0000F527 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000F52C 02                         byte_ED68:	dc.b 2
0000F52D F00F 080C F0               		dc.b $F0, $F, 8, $C, $F0
0000F532 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000F537 03                         byte_ED73:	dc.b 3
0000F538 F00B 0020 E8               		dc.b $F0, $B, 0, $20, $E8
0000F53D F00B 002C 00               		dc.b $F0, $B, 0, $2C, 0
0000F542 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F548 00                         		even
0000F548 00                         		even
0000F548                            
0000F548                            ; ===========================================================================
0000F548                            ; ---------------------------------------------------------------------------
0000F548                            ; Object 4C - lava geyser / lavafall producer (MZ)
0000F548                            ; ---------------------------------------------------------------------------
0000F548                            
0000F548                            Obj4C:					; XREF: Obj_Index
0000F548 7000                       		moveq	#0,d0
0000F54A 1028 0024                  		move.b	$24(a0),d0
0000F54E 323B 0000                  		move.w	Obj4C_Index(pc,d0.w),d1
0000F552 4EBB 1000                  		jsr	Obj4C_Index(pc,d1.w)
0000F556 6000 0000                  		bra.w	Obj4D_ChkDel
0000F55A                            ; ===========================================================================
0000F55A 0000                       Obj4C_Index:	dc.w Obj4C_Main-Obj4C_Index
0000F55C 0000                       		dc.w loc_EDCC-Obj4C_Index
0000F55E 0000                       		dc.w loc_EE3E-Obj4C_Index
0000F560 0000                       		dc.w Obj4C_MakeLava-Obj4C_Index
0000F562 0000                       		dc.w Obj4C_Display-Obj4C_Index
0000F564 0000                       		dc.w Obj4C_Delete-Obj4C_Index
0000F566                            ; ===========================================================================
0000F566                            
0000F566                            Obj4C_Main:				; XREF: Obj4C_Index
0000F566 5428 0024                  		addq.b	#2,$24(a0)
0000F56A 217C 0000 0000 0004        		move.l	#Map_obj4C,4(a0)
0000F572 317C E3A8 0002             		move.w	#$E3A8,2(a0)
0000F578 117C 0004 0001             		move.b	#4,1(a0)
0000F57E 117C 0001 0018             		move.b	#1,$18(a0)
0000F584 117C 0038 0019             		move.b	#$38,$19(a0)
0000F58A 317C 0078 0034             		move.w	#120,$34(a0)	; set time delay to 2 seconds
0000F590                            
0000F590                            loc_EDCC:				; XREF: Obj4C_Index
0000F590 5368 0032                  		subq.w	#1,$32(a0)
0000F594 6A00                       		bpl.s	locret_EDF0
0000F596 3168 0034 0032             		move.w	$34(a0),$32(a0)
0000F59C 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000F5A0 3228 000C                  		move.w	$C(a0),d1
0000F5A4 B041                       		cmp.w	d1,d0
0000F5A6 6400                       		bcc.s	locret_EDF0
0000F5A8 0441 0170                  		subi.w	#$170,d1
0000F5AC B041                       		cmp.w	d1,d0
0000F5AE 6500                       		bcs.s	locret_EDF0
0000F5B0 5428 0024                  		addq.b	#2,$24(a0)
0000F5B4                            
0000F5B4                            locret_EDF0:
0000F5B4 4E75                       		rts	
0000F5B6                            ; ===========================================================================
0000F5B6                            
0000F5B6                            Obj4C_MakeLava:				; XREF: Obj4C_Index
0000F5B6 5428 0024                  		addq.b	#2,$24(a0)
0000F5BA 6100 ECA2                  		bsr.w	SingleObjLoad2
0000F5BE 6600                       		bne.s	loc_EE18
0000F5C0 12BC 004D                  		move.b	#$4D,0(a1)	; load lavafall	object
0000F5C4 3368 0008 0008             		move.w	8(a0),8(a1)
0000F5CA 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F5D0 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000F5D6 2348 003C                  		move.l	a0,$3C(a1)
0000F5DA                            
0000F5DA                            loc_EE18:
0000F5DA 117C 0001 001C             		move.b	#1,$1C(a0)
0000F5E0 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000F5E4 6700                       		beq.s	Obj4C_Type00	; if yes, branch
0000F5E6 117C 0004 001C             		move.b	#4,$1C(a0)
0000F5EC 6000                       		bra.s	Obj4C_Display
0000F5EE                            ; ===========================================================================
0000F5EE                            
0000F5EE                            Obj4C_Type00:				; XREF: Obj4C_MakeLava
0000F5EE 2268 003C                  		movea.l	$3C(a0),a1	; load geyser object
0000F5F2 08E9 0001 0022             		bset	#1,$22(a1)
0000F5F8 337C FA80 0012             		move.w	#-$580,$12(a1)
0000F5FE 6000                       		bra.s	Obj4C_Display
0000F600                            ; ===========================================================================
0000F600                            
0000F600                            loc_EE3E:				; XREF: Obj4C_Index
0000F600 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000F604 6700                       		beq.s	Obj4C_Display	; if yes, branch
0000F606 5428 0024                  		addq.b	#2,$24(a0)
0000F60A 4E75                       		rts	
0000F60C                            ; ===========================================================================
0000F60C                            
0000F60C                            Obj4C_Display:				; XREF: Obj4C_Index
0000F60C 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000F612 6100 B86E                  		bsr.w	AnimateSprite
0000F616 6100 E7AA                  		bsr.w	DisplaySprite
0000F61A 4E75                       		rts	
0000F61C                            ; ===========================================================================
0000F61C                            
0000F61C                            Obj4C_Delete:				; XREF: Obj4C_Index
0000F61C 117C 0000 001C             		move.b	#0,$1C(a0)
0000F622 117C 0002 0024             		move.b	#2,$24(a0)
0000F628 4A28 0028                  		tst.b	$28(a0)
0000F62C 6700 E7D0                  		beq.w	DeleteObject
0000F630 4E75                       		rts	
0000F632                            ; ===========================================================================
0000F632                            ; ---------------------------------------------------------------------------
0000F632                            ; Object 4D - lava geyser / lavafall (MZ)
0000F632                            ; ---------------------------------------------------------------------------
0000F632                            
0000F632                            Obj4D:					; XREF: Obj_Index
0000F632 7000                       		moveq	#0,d0
0000F634 1028 0024                  		move.b	$24(a0),d0
0000F638 323B 0000                  		move.w	Obj4D_Index(pc,d0.w),d1
0000F63C 4EBB 1000                  		jsr	Obj4D_Index(pc,d1.w)
0000F640 6000 E780                  		bra.w	DisplaySprite
0000F644                            ; ===========================================================================
0000F644 0000                       Obj4D_Index:	dc.w Obj4D_Main-Obj4D_Index
0000F646 0000                       		dc.w Obj4D_Action-Obj4D_Index
0000F648 0000                       		dc.w loc_EFFC-Obj4D_Index
0000F64A 0000                       		dc.w Obj4D_Delete-Obj4D_Index
0000F64C                            
0000F64C FB00 0000                  Obj4D_Speeds:	dc.w $FB00, 0
0000F650                            ; ===========================================================================
0000F650                            
0000F650                            Obj4D_Main:				; XREF: Obj4D_Index
0000F650 5428 0024                  		addq.b	#2,$24(a0)
0000F654 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F65A 4A28 0028                  		tst.b	$28(a0)
0000F65E 6700                       		beq.s	loc_EEA4
0000F660 0468 0250 000C             		subi.w	#$250,$C(a0)
0000F666                            
0000F666                            loc_EEA4:
0000F666 7000                       		moveq	#0,d0
0000F668 1028 0028                  		move.b	$28(a0),d0
0000F66C D040                       		add.w	d0,d0
0000F66E 317B 00DC 0012             		move.w	Obj4D_Speeds(pc,d0.w),$12(a0)
0000F674 2248                       		movea.l	a0,a1
0000F676 7201                       		moveq	#1,d1
0000F678 6100                       		bsr.s	Obj4D_MakeLava
0000F67A 6000                       		bra.s	loc_EF10
0000F67C                            ; ===========================================================================
0000F67C                            
0000F67C                            Obj4D_Loop:
0000F67C 6100 EBE0                  		bsr.w	SingleObjLoad2
0000F680 6600                       		bne.s	loc_EF0A
0000F682                            
0000F682                            Obj4D_MakeLava:				; XREF: Obj4D_Main
0000F682 12BC 004D                  		move.b	#$4D,0(a1)
0000F686 237C 0000 0000 0004        		move.l	#Map_obj4C,4(a1)
0000F68E 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000F694 137C 0004 0001             		move.b	#4,1(a1)
0000F69A 137C 0020 0019             		move.b	#$20,$19(a1)
0000F6A0 3368 0008 0008             		move.w	8(a0),8(a1)
0000F6A6 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F6AC 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000F6B2 137C 0001 0018             		move.b	#1,$18(a1)
0000F6B8 137C 0005 001C             		move.b	#5,$1C(a1)
0000F6BE 4A28 0028                  		tst.b	$28(a0)
0000F6C2 6700                       		beq.s	loc_EF0A
0000F6C4 137C 0002 001C             		move.b	#2,$1C(a1)
0000F6CA                            
0000F6CA                            loc_EF0A:
0000F6CA 51C9 FFB0                  		dbf	d1,Obj4D_Loop
0000F6CE 4E75                       		rts	
0000F6D0                            ; ===========================================================================
0000F6D0                            
0000F6D0                            loc_EF10:				; XREF: Obj4D_Main
0000F6D0 0669 0060 000C             		addi.w	#$60,$C(a1)
0000F6D6 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000F6DC 0669 0060 0030             		addi.w	#$60,$30(a1)
0000F6E2 137C 0093 0020             		move.b	#$93,$20(a1)
0000F6E8 137C 0080 0016             		move.b	#$80,$16(a1)
0000F6EE 08E9 0004 0001             		bset	#4,1(a1)
0000F6F4 5829 0024                  		addq.b	#4,$24(a1)
0000F6F8 2348 003C                  		move.l	a0,$3C(a1)
0000F6FC 4A28 0028                  		tst.b	$28(a0)
0000F700 6700                       		beq.s	Obj4D_PlaySnd
0000F702 7200                       		moveq	#0,d1
0000F704 6100 FF76                  		bsr.w	Obj4D_Loop
0000F708 5429 0024                  		addq.b	#2,$24(a1)
0000F70C 08E9 0004 0002             		bset	#4,2(a1)
0000F712 0669 0100 000C             		addi.w	#$100,$C(a1)
0000F718 137C 0000 0018             		move.b	#0,$18(a1)
0000F71E 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000F724 2368 003C 003C             		move.l	$3C(a0),$3C(a1)
0000F72A 117C 0000 0028             		move.b	#0,$28(a0)
0000F730                            
0000F730                            Obj4D_PlaySnd:
0000F730 303C 00C8                  		move.w	#$C8,d0
0000F734 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play flame sound
0000F73A                            
0000F73A                            Obj4D_Action:				; XREF: Obj4D_Index
0000F73A 7000                       		moveq	#0,d0
0000F73C 1028 0028                  		move.b	$28(a0),d0
0000F740 D040                       		add.w	d0,d0
0000F742 323B 0000                  		move.w	Obj4D_TypeIndex(pc,d0.w),d1
0000F746 4EBB 1000                  		jsr	Obj4D_TypeIndex(pc,d1.w)
0000F74A 6100 E650                  		bsr.w	SpeedToPos
0000F74E 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000F754 6100 B72C                  		bsr.w	AnimateSprite
0000F758                            
0000F758                            Obj4D_ChkDel:				; XREF: Obj4C
0000F758 3028 0008                  		move.w	8(a0),d0
0000F75C 0240 FF80                  		andi.w	#$FF80,d0
0000F760 3238 F700                  		move.w	($FFFFF700).w,d1
0000F764 0441 0080                  		subi.w	#$80,d1
0000F768 0241 FF80                  		andi.w	#$FF80,d1
0000F76C 9041                       		sub.w	d1,d0
0000F76E 0C40 0280                  		cmpi.w	#$280,d0
0000F772 6200 E68A                  		bhi.w	DeleteObject
0000F776 4E75                       		rts	
0000F778                            ; ===========================================================================
0000F778 0000                       Obj4D_TypeIndex:dc.w Obj4D_Type00-Obj4D_TypeIndex
0000F77A 0000                       		dc.w Obj4D_Type01-Obj4D_TypeIndex
0000F77C                            ; ===========================================================================
0000F77C                            
0000F77C                            Obj4D_Type00:				; XREF: Obj4D_TypeIndex
0000F77C 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000F782 3028 0030                  		move.w	$30(a0),d0
0000F786 B068 000C                  		cmp.w	$C(a0),d0
0000F78A 6400                       		bcc.s	locret_EFDA
0000F78C 5828 0024                  		addq.b	#4,$24(a0)
0000F790 2268 003C                  		movea.l	$3C(a0),a1
0000F794 137C 0003 001C             		move.b	#3,$1C(a1)
0000F79A                            
0000F79A                            locret_EFDA:
0000F79A 4E75                       		rts	
0000F79C                            ; ===========================================================================
0000F79C                            
0000F79C                            Obj4D_Type01:				; XREF: Obj4D_TypeIndex
0000F79C 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000F7A2 3028 0030                  		move.w	$30(a0),d0
0000F7A6 B068 000C                  		cmp.w	$C(a0),d0
0000F7AA 6400                       		bcc.s	locret_EFFA
0000F7AC 5828 0024                  		addq.b	#4,$24(a0)
0000F7B0 2268 003C                  		movea.l	$3C(a0),a1
0000F7B4 137C 0001 001C             		move.b	#1,$1C(a1)
0000F7BA                            
0000F7BA                            locret_EFFA:
0000F7BA 4E75                       		rts	
0000F7BC                            ; ===========================================================================
0000F7BC                            
0000F7BC                            loc_EFFC:				; XREF: Obj4D_Index
0000F7BC 2268 003C                  		movea.l	$3C(a0),a1
0000F7C0 0C29 0006 0024             		cmpi.b	#6,$24(a1)
0000F7C6 6700 0000                  		beq.w	Obj4D_Delete
0000F7CA 3029 000C                  		move.w	$C(a1),d0
0000F7CE 0640 0060                  		addi.w	#$60,d0
0000F7D2 3140 000C                  		move.w	d0,$C(a0)
0000F7D6 9068 0030                  		sub.w	$30(a0),d0
0000F7DA 4440                       		neg.w	d0
0000F7DC 7208                       		moveq	#8,d1
0000F7DE 0C40 0040                  		cmpi.w	#$40,d0
0000F7E2 6C00                       		bge.s	loc_F026
0000F7E4 720B                       		moveq	#$B,d1
0000F7E6                            
0000F7E6                            loc_F026:
0000F7E6 0C40 0080                  		cmpi.w	#$80,d0
0000F7EA 6F00                       		ble.s	loc_F02E
0000F7EC 720E                       		moveq	#$E,d1
0000F7EE                            
0000F7EE                            loc_F02E:
0000F7EE 5328 001E                  		subq.b	#1,$1E(a0)
0000F7F2 6A00                       		bpl.s	loc_F04C
0000F7F4 117C 0007 001E             		move.b	#7,$1E(a0)
0000F7FA 5228 001B                  		addq.b	#1,$1B(a0)
0000F7FE 0C28 0002 001B             		cmpi.b	#2,$1B(a0)
0000F804 6500                       		bcs.s	loc_F04C
0000F806 117C 0000 001B             		move.b	#0,$1B(a0)
0000F80C                            
0000F80C                            loc_F04C:
0000F80C 1028 001B                  		move.b	$1B(a0),d0
0000F810 D001                       		add.b	d1,d0
0000F812 1140 001A                  		move.b	d0,$1A(a0)
0000F816 6000 FF40                  		bra.w	Obj4D_ChkDel
0000F81A                            ; ===========================================================================
0000F81A                            
0000F81A                            Obj4D_Delete:				; XREF: Obj4D_Index
0000F81A 6000 E5E2                  		bra.w	DeleteObject
0000F81E                            ; ===========================================================================
0000F81E                            ; ---------------------------------------------------------------------------
0000F81E                            ; Object 4E - advancing	wall of	lava (MZ)
0000F81E                            ; ---------------------------------------------------------------------------
0000F81E                            
0000F81E                            Obj4E:					; XREF: Obj_Index
0000F81E 7000                       		moveq	#0,d0
0000F820 1028 0024                  		move.b	$24(a0),d0
0000F824 323B 0000                  		move.w	Obj4E_Index(pc,d0.w),d1
0000F828 4EFB 1000                  		jmp	Obj4E_Index(pc,d1.w)
0000F82C                            ; ===========================================================================
0000F82C 0000                       Obj4E_Index:	dc.w Obj4E_Main-Obj4E_Index
0000F82E 0000                       		dc.w Obj4E_Solid-Obj4E_Index
0000F830 0000                       		dc.w Obj4E_Action-Obj4E_Index
0000F832 0000                       		dc.w Obj4E_Move2-Obj4E_Index
0000F834 0000                       		dc.w Obj4E_Delete-Obj4E_Index
0000F836                            ; ===========================================================================
0000F836                            
0000F836                            Obj4E_Main:				; XREF: Obj4E_Index
0000F836 5828 0024                  		addq.b	#4,$24(a0)
0000F83A 2248                       		movea.l	a0,a1
0000F83C 7201                       		moveq	#1,d1
0000F83E 6000                       		bra.s	Obj4E_Main2
0000F840                            ; ===========================================================================
0000F840                            
0000F840                            Obj4E_Loop:
0000F840 6100 EA1C                  		bsr.w	SingleObjLoad2
0000F844 6600                       		bne.s	loc_F0C8
0000F846                            
0000F846                            Obj4E_Main2:				; XREF: Obj4E_Main
0000F846 12BC 004E                  		move.b	#$4E,0(a1)	; load object
0000F84A 237C 0000 0000 0004        		move.l	#Map_obj4E,4(a1)
0000F852 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000F858 137C 0004 0001             		move.b	#4,1(a1)
0000F85E 137C 0050 0019             		move.b	#$50,$19(a1)
0000F864 3368 0008 0008             		move.w	8(a0),8(a1)
0000F86A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F870 137C 0001 0018             		move.b	#1,$18(a1)
0000F876 137C 0000 001C             		move.b	#0,$1C(a1)
0000F87C 137C 0094 0020             		move.b	#$94,$20(a1)
0000F882 2348 003C                  		move.l	a0,$3C(a1)
0000F886                            
0000F886                            loc_F0C8:
0000F886 51C9 FFB8                  		dbf	d1,Obj4E_Loop	; repeat sequence once
0000F88A                            
0000F88A 5C29 0024                  		addq.b	#6,$24(a1)
0000F88E 137C 0004 001A             		move.b	#4,$1A(a1)
0000F894                            
0000F894                            Obj4E_Action:				; XREF: Obj4E_Index
0000F894 3038 D008                  		move.w	($FFFFD008).w,d0
0000F898 9068 0008                  		sub.w	8(a0),d0
0000F89C 6400                       		bcc.s	Obj4E_ChkSonic
0000F89E 4440                       		neg.w	d0
0000F8A0                            
0000F8A0                            Obj4E_ChkSonic:
0000F8A0 0C40 00C0                  		cmpi.w	#$C0,d0		; is Sonic within $C0 pixels (x-axis)?
0000F8A4 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000F8A6 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000F8AA 9068 000C                  		sub.w	$C(a0),d0
0000F8AE 6400                       		bcc.s	loc_F0F4
0000F8B0 4440                       		neg.w	d0
0000F8B2                            
0000F8B2                            loc_F0F4:
0000F8B2 0C40 0060                  		cmpi.w	#$60,d0		; is Sonic within $60 pixels (y-axis)?
0000F8B6 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000F8B8 117C 0001 0036             		move.b	#1,$36(a0)	; set object to	move
0000F8BE 6000                       		bra.s	Obj4E_Solid
0000F8C0                            ; ===========================================================================
0000F8C0                            
0000F8C0                            Obj4E_Move:				; XREF: Obj4E_ChkSonic
0000F8C0 4A28 0036                  		tst.b	$36(a0)		; is object set	to move?
0000F8C4 6700                       		beq.s	Obj4E_Solid	; if not, branch
0000F8C6 317C 0180 0010             		move.w	#$180,$10(a0)	; set object speed
0000F8CC 5528 0024                  		subq.b	#2,$24(a0)
0000F8D0                            
0000F8D0                            Obj4E_Solid:				; XREF: Obj4E_Index
0000F8D0 323C 002B                  		move.w	#$2B,d1
0000F8D4 343C 0018                  		move.w	#$18,d2
0000F8D8 3602                       		move.w	d2,d3
0000F8DA 5243                       		addq.w	#1,d3
0000F8DC 3828 0008                  		move.w	8(a0),d4
0000F8E0 1028 0024                  		move.b	$24(a0),d0
0000F8E4 3F00                       		move.w	d0,-(sp)
0000F8E6 6100 0000                  		bsr.w	SolidObject
0000F8EA 301F                       		move.w	(sp)+,d0
0000F8EC 1140 0024                  		move.b	d0,$24(a0)
0000F8F0 0C68 06A0 0008             		cmpi.w	#$6A0,8(a0)	; has object reached $6A0 on the x-axis?
0000F8F6 6600                       		bne.s	Obj4E_Animate	; if not, branch
0000F8F8 4268 0010                  		clr.w	$10(a0)		; stop object moving
0000F8FC 4228 0036                  		clr.b	$36(a0)
0000F900                            
0000F900                            Obj4E_Animate:
0000F900 43F9 0000 0000             		lea	(Ani_obj4E).l,a1
0000F906 6100 B57A                  		bsr.w	AnimateSprite
0000F90A 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0000F910 6400                       		bcc.s	Obj4E_ChkDel
0000F912 6100 E488                  		bsr.w	SpeedToPos
0000F916                            
0000F916                            Obj4E_ChkDel:
0000F916 6100 E4AA                  		bsr.w	DisplaySprite
0000F91A 4A28 0036                  		tst.b	$36(a0)
0000F91E 6600                       		bne.s	locret_F17E
0000F920 3028 0008                  		move.w	8(a0),d0
0000F924 0240 FF80                  		andi.w	#$FF80,d0
0000F928 3238 F700                  		move.w	($FFFFF700).w,d1
0000F92C 0441 0080                  		subi.w	#$80,d1
0000F930 0241 FF80                  		andi.w	#$FF80,d1
0000F934 9041                       		sub.w	d1,d0
0000F936 0C40 0280                  		cmpi.w	#$280,d0
0000F93A 6200                       		bhi.s	Obj4E_ChkGone
0000F93C                            
0000F93C                            locret_F17E:
0000F93C 4E75                       		rts	
0000F93E                            ; ===========================================================================
0000F93E                            
0000F93E                            Obj4E_ChkGone:				; XREF: Obj4E_ChkDel
0000F93E 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F942 7000                       		moveq	#0,d0
0000F944 1028 0023                  		move.b	$23(a0),d0
0000F948 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000F94E 117C 0008 0024             		move.b	#8,$24(a0)
0000F954 4E75                       		rts	
0000F956                            ; ===========================================================================
0000F956                            
0000F956                            Obj4E_Move2:				; XREF: Obj4E_Index
0000F956 2268 003C                  		movea.l	$3C(a0),a1
0000F95A 0C29 0008 0024             		cmpi.b	#8,$24(a1)
0000F960 6700                       		beq.s	Obj4E_Delete
0000F962 3169 0008 0008             		move.w	8(a1),8(a0)	; move rest of lava wall
0000F968 0468 0080 0008             		subi.w	#$80,8(a0)
0000F96E 6000 E452                  		bra.w	DisplaySprite
0000F972                            ; ===========================================================================
0000F972                            
0000F972                            Obj4E_Delete:				; XREF: Obj4E_Index
0000F972 6000 E48A                  		bra.w	DeleteObject
0000F976                            ; ===========================================================================
0000F976                            ; ---------------------------------------------------------------------------
0000F976                            ; Object 54 - invisible	lava tag (MZ)
0000F976                            ; ---------------------------------------------------------------------------
0000F976                            
0000F976                            Obj54:					; XREF: Obj_Index
0000F976 7000                       		moveq	#0,d0
0000F978 1028 0024                  		move.b	$24(a0),d0
0000F97C 323B 0000                  		move.w	Obj54_Index(pc,d0.w),d1
0000F980 4EFB 1000                  		jmp	Obj54_Index(pc,d1.w)
0000F984                            ; ===========================================================================
0000F984 0000                       Obj54_Index:	dc.w Obj54_Main-Obj54_Index
0000F986 0000                       		dc.w Obj54_ChkDel-Obj54_Index
0000F988                            
0000F988 9694 9500                  Obj54_Sizes:	dc.b $96, $94, $95, 0
0000F98C                            ; ===========================================================================
0000F98C                            
0000F98C                            Obj54_Main:				; XREF: Obj54_Index
0000F98C 5428 0024                  		addq.b	#2,$24(a0)
0000F990 7000                       		moveq	#0,d0
0000F992 1028 0028                  		move.b	$28(a0),d0
0000F996 117B 00F0 0020             		move.b	Obj54_Sizes(pc,d0.w),$20(a0)
0000F99C 217C 0000 0000 0004        		move.l	#Map_obj54,4(a0)
0000F9A4 117C 0084 0001             		move.b	#$84,1(a0)
0000F9AA                            
0000F9AA                            Obj54_ChkDel:				; XREF: Obj54_Index
0000F9AA 3028 0008                  		move.w	8(a0),d0
0000F9AE 0240 FF80                  		andi.w	#$FF80,d0
0000F9B2 3238 F700                  		move.w	($FFFFF700).w,d1
0000F9B6 0441 0080                  		subi.w	#$80,d1
0000F9BA 0241 FF80                  		andi.w	#$FF80,d1
0000F9BE 9041                       		sub.w	d1,d0
0000F9C0 6B00 E43C                  		bmi.w	DeleteObject
0000F9C4 0C40 0280                  		cmpi.w	#$280,d0
0000F9C8 6200 E434                  		bhi.w	DeleteObject
0000F9CC 4E75                       		rts	
0000F9CE                            ; ===========================================================================
0000F9CE                            ; ---------------------------------------------------------------------------
0000F9CE                            ; Sprite mappings - invisible lava tag (MZ)
0000F9CE                            ; ---------------------------------------------------------------------------
0000F9CE                            Map_obj54:
0000F9CE                            	include "_maps\obj54.asm"
0000F9CE                            ; ---------------------------------------------------------------------------
0000F9CE                            ; Sprite mappings - invisible lava tag (MZ)
0000F9CE                            ; ---------------------------------------------------------------------------
0000F9CE 0000                       		dc.w byte_F212-Map_obj54
0000F9D0 00                         byte_F212:	dc.b 0			; no sprite, because the tag is invisible!
0000F9D2 00                         		even
0000F9D2 00                         		even
0000F9D2                            
0000F9D2                            Ani_obj4C:
0000F9D2                            	include "_anim\obj4C.asm"
0000F9D2                            ; ---------------------------------------------------------------------------
0000F9D2                            ; Animation script - geyser of lava (MZ)
0000F9D2                            ; ---------------------------------------------------------------------------
0000F9D2 0000                       		dc.w byte_F220-Ani_obj4C
0000F9D4 0000                       		dc.w byte_F22A-Ani_obj4C
0000F9D6 0000                       		dc.w byte_F22E-Ani_obj4C
0000F9D8 0000                       		dc.w byte_F232-Ani_obj4C
0000F9DA 0000                       		dc.w byte_F23A-Ani_obj4C
0000F9DC 0000                       		dc.w byte_F23E-Ani_obj4C
0000F9DE 0200 0100 0104 0504 05FC   byte_F220:	dc.b 2,	0, 1, 0, 1, 4, 5, 4, 5,	$FC
0000F9E8 0202 03FF                  byte_F22A:	dc.b 2,	2, 3, $FF
0000F9EC 0206 07FF                  byte_F22E:	dc.b 2,	6, 7, $FF
0000F9F0 0202 0300 0100 01FC        byte_F232:	dc.b 2,	2, 3, 0, 1, 0, 1, $FC
0000F9F8 0F13 FF00                  byte_F23A:	dc.b $F, $13, $FF, 0
0000F9FC 0211 12FF                  byte_F23E:	dc.b 2,	$11, $12, $FF
0000FA00                            		even
0000FA00                            		even
0000FA00                            
0000FA00                            Ani_obj4E:
0000FA00                            	include "_anim\obj4E.asm"
0000FA00                            ; ---------------------------------------------------------------------------
0000FA00                            ; Animation script - advancing wall of lava (MZ)
0000FA00                            ; ---------------------------------------------------------------------------
0000FA00 0000                       		dc.w byte_F244-Ani_obj4E
0000FA02 0900 0102 03FF             byte_F244:	dc.b 9,	0, 1, 2, 3, $FF
0000FA08                            		even
0000FA08                            		even
0000FA08                            
0000FA08                            ; ---------------------------------------------------------------------------
0000FA08                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000FA08                            ; ---------------------------------------------------------------------------
0000FA08                            Map_obj4C:
0000FA08                            	include "_maps\obj4C.asm"
0000FA08                            ; ---------------------------------------------------------------------------
0000FA08                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000FA08                            ; ---------------------------------------------------------------------------
0000FA08 0000 0000                  		dc.w byte_F272-Map_obj4C, byte_F27D-Map_obj4C
0000FA0C 0000 0000                  		dc.w byte_F288-Map_obj4C, byte_F29D-Map_obj4C
0000FA10 0000 0000                  		dc.w byte_F2B2-Map_obj4C, byte_F2D1-Map_obj4C
0000FA14 0000 0000                  		dc.w byte_F2F0-Map_obj4C, byte_F2FB-Map_obj4C
0000FA18 0000 0000                  		dc.w byte_F306-Map_obj4C, byte_F339-Map_obj4C
0000FA1C 0000 0000                  		dc.w byte_F36C-Map_obj4C, byte_F39F-Map_obj4C
0000FA20 0000 0000                  		dc.w byte_F3BE-Map_obj4C, byte_F3DD-Map_obj4C
0000FA24 0000 0000                  		dc.w byte_F3FC-Map_obj4C, byte_F44D-Map_obj4C
0000FA28 0000 0000                  		dc.w byte_F49E-Map_obj4C, byte_F4EF-Map_obj4C
0000FA2C 0000 0000                  		dc.w byte_F50E-Map_obj4C, byte_F52D-Map_obj4C
0000FA30 02                         byte_F272:	dc.b 2
0000FA31 EC0B 0000 E8               		dc.b $EC, $B, 0, 0, $E8
0000FA36 EC0B 0800 00               		dc.b $EC, $B, 8, 0, 0
0000FA3B 02                         byte_F27D:	dc.b 2
0000FA3C EC0B 0018 E8               		dc.b $EC, $B, 0, $18, $E8
0000FA41 EC0B 0818 00               		dc.b $EC, $B, 8, $18, 0
0000FA46 04                         byte_F288:	dc.b 4
0000FA47 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000FA4C F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000FA51 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000FA56 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000FA5B 04                         byte_F29D:	dc.b 4
0000FA5C EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000FA61 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000FA66 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000FA6B EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000FA70 06                         byte_F2B2:	dc.b 6
0000FA71 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000FA76 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000FA7B F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000FA80 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000FA85 E80E 0090 E0               		dc.b $E8, $E, 0, $90, $E0
0000FA8A E80E 0890 00               		dc.b $E8, $E, 8, $90, 0
0000FA8F 06                         byte_F2D1:	dc.b 6
0000FA90 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000FA95 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000FA9A F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000FA9F EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000FAA4 E80E 0890 E0               		dc.b $E8, $E, 8, $90, $E0
0000FAA9 E80E 0090 00               		dc.b $E8, $E, 0, $90, 0
0000FAAE 02                         byte_F2F0:	dc.b 2
0000FAAF E00F 0030 E0               		dc.b $E0, $F, 0, $30, $E0
0000FAB4 E00F 0830 00               		dc.b $E0, $F, 8, $30, 0
0000FAB9 02                         byte_F2FB:	dc.b 2
0000FABA E00F 0830 E0               		dc.b $E0, $F, 8, $30, $E0
0000FABF E00F 0030 00               		dc.b $E0, $F, 0, $30, 0
0000FAC4 0A                         byte_F306:	dc.b $A
0000FAC5 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000FACA 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000FACF B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000FAD4 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000FAD9 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000FADE D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000FAE3 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0000FAE8 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0000FAED 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0000FAF2 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0000FAF7 0A                         byte_F339:	dc.b $A
0000FAF8 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000FAFD 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000FB02 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000FB07 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000FB0C D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000FB11 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000FB16 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0000FB1B F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0000FB20 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0000FB25 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0000FB2A 0A                         byte_F36C:	dc.b $A
0000FB2B 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000FB30 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000FB35 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000FB3A B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000FB3F D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000FB44 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000FB49 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0000FB4E F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0000FB53 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0000FB58 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0000FB5D 06                         byte_F39F:	dc.b 6
0000FB5E 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000FB63 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000FB68 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000FB6D B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000FB72 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000FB77 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000FB7C 06                         byte_F3BE:	dc.b 6
0000FB7D 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000FB82 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000FB87 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000FB8C B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000FB91 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000FB96 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000FB9B 06                         byte_F3DD:	dc.b 6
0000FB9C 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000FBA1 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000FBA6 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000FBAB B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000FBB0 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000FBB5 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000FBBA 10                         byte_F3FC:	dc.b $10
0000FBBB 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000FBC0 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000FBC5 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000FBCA B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000FBCF D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000FBD4 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000FBD9 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0000FBDE F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0000FBE3 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0000FBE8 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0000FBED 300F 0040 E0               		dc.b $30, $F, 0, $40, $E0
0000FBF2 300F 0840 00               		dc.b $30, $F, 8, $40, 0
0000FBF7 500F 0040 E0               		dc.b $50, $F, 0, $40, $E0
0000FBFC 500F 0840 00               		dc.b $50, $F, 8, $40, 0
0000FC01 700F 0040 E0               		dc.b $70, $F, 0, $40, $E0
0000FC06 700F 0840 00               		dc.b $70, $F, 8, $40, 0
0000FC0B 10                         byte_F44D:	dc.b $10
0000FC0C 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000FC11 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000FC16 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000FC1B B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000FC20 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000FC25 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000FC2A F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0000FC2F F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0000FC34 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0000FC39 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0000FC3E 300F 0050 E0               		dc.b $30, $F, 0, $50, $E0
0000FC43 300F 0850 00               		dc.b $30, $F, 8, $50, 0
0000FC48 500F 0050 E0               		dc.b $50, $F, 0, $50, $E0
0000FC4D 500F 0850 00               		dc.b $50, $F, 8, $50, 0
0000FC52 700F 0050 E0               		dc.b $70, $F, 0, $50, $E0
0000FC57 700F 0850 00               		dc.b $70, $F, 8, $50, 0
0000FC5C 10                         byte_F49E:	dc.b $10
0000FC5D 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000FC62 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000FC67 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000FC6C B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000FC71 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000FC76 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000FC7B F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0000FC80 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0000FC85 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0000FC8A 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0000FC8F 300F 0060 E0               		dc.b $30, $F, 0, $60, $E0
0000FC94 300F 0860 00               		dc.b $30, $F, 8, $60, 0
0000FC99 500F 0060 E0               		dc.b $50, $F, 0, $60, $E0
0000FC9E 500F 0860 00               		dc.b $50, $F, 8, $60, 0
0000FCA3 700F 0060 E0               		dc.b $70, $F, 0, $60, $E0
0000FCA8 700F 0860 00               		dc.b $70, $F, 8, $60, 0
0000FCAD 06                         byte_F4EF:	dc.b 6
0000FCAE E00B 0000 C8               		dc.b $E0, $B, 0, 0, $C8
0000FCB3 E80E 000C E0               		dc.b $E8, $E, 0, $C, $E0
0000FCB8 E80E 080C 00               		dc.b $E8, $E, 8, $C, 0
0000FCBD E00B 0800 20               		dc.b $E0, $B, 8, 0, $20
0000FCC2 D80E 0090 E0               		dc.b $D8, $E, 0, $90, $E0
0000FCC7 D80E 0890 00               		dc.b $D8, $E, 8, $90, 0
0000FCCC 06                         byte_F50E:	dc.b 6
0000FCCD E00B 0018 C8               		dc.b $E0, $B, 0, $18, $C8
0000FCD2 E80E 0024 E0               		dc.b $E8, $E, 0, $24, $E0
0000FCD7 E80E 0824 00               		dc.b $E8, $E, 8, $24, 0
0000FCDC E00B 0818 20               		dc.b $E0, $B, 8, $18, $20
0000FCE1 D80E 0890 E0               		dc.b $D8, $E, 8, $90, $E0
0000FCE6 D80E 0090 00               		dc.b $D8, $E, 0, $90, 0
0000FCEB 00                         byte_F52D:	dc.b 0
0000FCEC                            		even
0000FCEC                            		even
0000FCEC                            
0000FCEC                            ; ---------------------------------------------------------------------------
0000FCEC                            ; Sprite mappings - advancing wall of lava (MZ)
0000FCEC                            ; ---------------------------------------------------------------------------
0000FCEC                            Map_obj4E:
0000FCEC                            	include "_maps\obj4E.asm"
0000FCEC                            ; ---------------------------------------------------------------------------
0000FCEC                            ; Sprite mappings - advancing wall of lava (MZ)
0000FCEC                            ; ---------------------------------------------------------------------------
0000FCEC 0000                       		dc.w byte_F538-Map_obj4E
0000FCEE 0000                       		dc.w byte_F566-Map_obj4E
0000FCF0 0000                       		dc.w byte_F594-Map_obj4E
0000FCF2 0000                       		dc.w byte_F5C2-Map_obj4E
0000FCF4 0000                       		dc.w byte_F5F0-Map_obj4E
0000FCF6 09                         byte_F538:	dc.b 9
0000FCF7 E00F 0060 20               		dc.b $E0, $F, 0, $60, $20
0000FCFC 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
0000FD01 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FD06 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FD0B 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FD10 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FD15 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FD1A E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FD1F 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FD24 09                         byte_F566:	dc.b 9
0000FD25 E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
0000FD2A 000F 0080 3C               		dc.b 0,	$F, 0, $80, $3C
0000FD2F 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FD34 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FD39 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FD3E E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FD43 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FD48 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FD4D 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FD52 09                         byte_F594:	dc.b 9
0000FD53 E00F 0080 20               		dc.b $E0, $F, 0, $80, $20
0000FD58 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
0000FD5D 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FD62 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FD67 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FD6C E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FD71 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FD76 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FD7B 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FD80 09                         byte_F5C2:	dc.b 9
0000FD81 E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
0000FD86 000F 0060 3C               		dc.b 0,	$F, 0, $60, $3C
0000FD8B 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FD90 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FD95 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FD9A E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FD9F 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FDA4 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FDA9 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FDAE 08                         byte_F5F0:	dc.b 8
0000FDAF E00F FF2A 20               		dc.b $E0, $F, $FF, $2A,	$20
0000FDB4 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FDB9 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FDBE 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FDC3 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FDC8 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FDCD E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FDD2 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FDD8 00                         		even
0000FDD8 00                         		even
0000FDD8                            
0000FDD8                            ; ===========================================================================
0000FDD8                            ; ---------------------------------------------------------------------------
0000FDD8                            ; Object 40 - Moto Bug enemy (GHZ)
0000FDD8                            ; ---------------------------------------------------------------------------
0000FDD8                            
0000FDD8                            Obj40:					; XREF: Obj_Index
0000FDD8 7000                       		moveq	#0,d0
0000FDDA 1028 0024                  		move.b	$24(a0),d0
0000FDDE 323B 0000                  		move.w	Obj40_Index(pc,d0.w),d1
0000FDE2 4EFB 1000                  		jmp	Obj40_Index(pc,d1.w)
0000FDE6                            ; ===========================================================================
0000FDE6 0000                       Obj40_Index:	dc.w Obj40_Main-Obj40_Index
0000FDE8 0000                       		dc.w Obj40_Action-Obj40_Index
0000FDEA 0000                       		dc.w Obj40_Animate-Obj40_Index
0000FDEC 0000                       		dc.w Obj40_Delete-Obj40_Index
0000FDEE                            ; ===========================================================================
0000FDEE                            
0000FDEE                            Obj40_Main:				; XREF: Obj40_Index
0000FDEE 217C 0000 0000 0004        		move.l	#Map_obj40,4(a0)
0000FDF6 317C 04F0 0002             		move.w	#$4F0,2(a0)
0000FDFC 117C 0004 0001             		move.b	#4,1(a0)
0000FE02 117C 0004 0018             		move.b	#4,$18(a0)
0000FE08 117C 0014 0019             		move.b	#$14,$19(a0)
0000FE0E 4A28 001C                  		tst.b	$1C(a0)		; is object a smoke trail?
0000FE12 6600                       		bne.s	Obj40_SetSmoke	; if yes, branch
0000FE14 117C 000E 0016             		move.b	#$E,$16(a0)
0000FE1A 117C 0008 0017             		move.b	#8,$17(a0)
0000FE20 117C 000C 0020             		move.b	#$C,$20(a0)
0000FE26 6100 DF48                  		bsr.w	ObjectFall
0000FE2A 4EB9 0000 0000             		jsr	ObjHitFloor
0000FE30 4A41                       		tst.w	d1
0000FE32 6A00                       		bpl.s	locret_F68A
0000FE34 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0000FE38 317C 0000 0012             		move.w	#0,$12(a0)
0000FE3E 5428 0024                  		addq.b	#2,$24(a0)
0000FE42 0868 0000 0022             		bchg	#0,$22(a0)
0000FE48                            
0000FE48                            locret_F68A:
0000FE48 4E75                       		rts	
0000FE4A                            ; ===========================================================================
0000FE4A                            
0000FE4A                            Obj40_SetSmoke:				; XREF: Obj40_Main
0000FE4A 5828 0024                  		addq.b	#4,$24(a0)
0000FE4E 6000 0000                  		bra.w	Obj40_Animate
0000FE52                            ; ===========================================================================
0000FE52                            
0000FE52                            Obj40_Action:				; XREF: Obj40_Index
0000FE52 7000                       		moveq	#0,d0
0000FE54 1028 0025                  		move.b	$25(a0),d0
0000FE58 323B 0000                  		move.w	Obj40_Index2(pc,d0.w),d1
0000FE5C 4EBB 1000                  		jsr	Obj40_Index2(pc,d1.w)
0000FE60 43F9 0000 0000             		lea	(Ani_obj40).l,a1
0000FE66 6100 B01A                  		bsr.w	AnimateSprite
0000FE6A                            
0000FE6A                            ; ---------------------------------------------------------------------------
0000FE6A                            ; Routine to mark an enemy/monitor/ring	as destroyed
0000FE6A                            ; ---------------------------------------------------------------------------
0000FE6A                            
0000FE6A                            MarkObjGone:
0000FE6A 3028 0008                  		move.w	8(a0),d0
0000FE6E 0240 FF80                  		andi.w	#$FF80,d0
0000FE72 3238 F700                  		move.w	($FFFFF700).w,d1
0000FE76 0441 0080                  		subi.w	#$80,d1
0000FE7A 0241 FF80                  		andi.w	#$FF80,d1
0000FE7E 9041                       		sub.w	d1,d0
0000FE80 0C40 0280                  		cmpi.w	#$280,d0
0000FE84 6200 0000                  		bhi.w	Mark_ChkGone
0000FE88 6000 DF38                  		bra.w	DisplaySprite
0000FE8C                            ; ===========================================================================
0000FE8C                            
0000FE8C                            Mark_ChkGone:
0000FE8C 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000FE90 7000                       		moveq	#0,d0
0000FE92 1028 0023                  		move.b	$23(a0),d0
0000FE96 6700                       		beq.s	Mark_Delete
0000FE98 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000FE9E                            
0000FE9E                            Mark_Delete:
0000FE9E 6000 DF5E                  		bra.w	DeleteObject
0000FEA2                            
0000FEA2                            ; ===========================================================================
0000FEA2 0000                       Obj40_Index2:	dc.w Obj40_Move-Obj40_Index2
0000FEA4 0000                       		dc.w Obj40_FixToFloor-Obj40_Index2
0000FEA6                            ; ===========================================================================
0000FEA6                            
0000FEA6                            Obj40_Move:				; XREF: Obj40_Index2
0000FEA6 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
0000FEAA 6A00                       		bpl.s	locret_F70A	; if time remains, branch
0000FEAC 5428 0025                  		addq.b	#2,$25(a0)
0000FEB0 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object to the left
0000FEB6 117C 0001 001C             		move.b	#1,$1C(a0)
0000FEBC 0868 0000 0022             		bchg	#0,$22(a0)
0000FEC2 6600                       		bne.s	locret_F70A
0000FEC4 4468 0010                  		neg.w	$10(a0)		; change direction
0000FEC8                            
0000FEC8                            locret_F70A:
0000FEC8 4E75                       		rts	
0000FECA                            ; ===========================================================================
0000FECA                            
0000FECA                            Obj40_FixToFloor:			; XREF: Obj40_Index2
0000FECA 6100 DED0                  		bsr.w	SpeedToPos
0000FECE 4EB9 0000 0000             		jsr	ObjHitFloor
0000FED4 0C41 FFF8                  		cmpi.w	#-8,d1
0000FED8 6D00                       		blt.s	Obj40_Pause
0000FEDA 0C41 000C                  		cmpi.w	#$C,d1
0000FEDE 6C00                       		bge.s	Obj40_Pause
0000FEE0 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0000FEE4 5328 0033                  		subq.b	#1,$33(a0)
0000FEE8 6A00                       		bpl.s	locret_F756
0000FEEA 117C 000F 0033             		move.b	#$F,$33(a0)
0000FEF0 6100 E356                  		bsr.w	SingleObjLoad
0000FEF4 6600                       		bne.s	locret_F756
0000FEF6 12BC 0040                  		move.b	#$40,0(a1)	; load exhaust smoke object
0000FEFA 3368 0008 0008             		move.w	8(a0),8(a1)
0000FF00 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000FF06 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000FF0C 137C 0002 001C             		move.b	#2,$1C(a1)
0000FF12                            
0000FF12                            locret_F756:
0000FF12 4E75                       		rts	
0000FF14                            ; ===========================================================================
0000FF14                            
0000FF14                            Obj40_Pause:				; XREF: Obj40_FixToFloor
0000FF14 5528 0025                  		subq.b	#2,$25(a0)
0000FF18 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
0000FF1E 317C 0000 0010             		move.w	#0,$10(a0)	; stop the object moving
0000FF24 117C 0000 001C             		move.b	#0,$1C(a0)
0000FF2A 4E75                       		rts	
0000FF2C                            ; ===========================================================================
0000FF2C                            
0000FF2C                            Obj40_Animate:				; XREF: Obj40_Index
0000FF2C 43F9 0000 0000             		lea	(Ani_obj40).l,a1
0000FF32 6100 AF4E                  		bsr.w	AnimateSprite
0000FF36 6000 DE8A                  		bra.w	DisplaySprite
0000FF3A                            ; ===========================================================================
0000FF3A                            
0000FF3A                            Obj40_Delete:				; XREF: Obj40_Index
0000FF3A 6000 DEC2                  		bra.w	DeleteObject
0000FF3E                            ; ===========================================================================
0000FF3E                            Ani_obj40:
0000FF3E                            	include "_anim\obj40.asm"
0000FF3E                            ; ---------------------------------------------------------------------------
0000FF3E                            ; Animation script - Motobug enemy
0000FF3E                            ; ---------------------------------------------------------------------------
0000FF3E 0000                       		dc.w byte_F788-Ani_obj40
0000FF40 0000                       		dc.w byte_F78C-Ani_obj40
0000FF42 0000                       		dc.w byte_F792-Ani_obj40
0000FF44 0F02 FF00                  byte_F788:	dc.b $F, 2, $FF, 0
0000FF48 0700 0100 02FF             byte_F78C:	dc.b 7,	0, 1, 0, 2, $FF
0000FF4E 0103 0603 0604 0604 0604+  byte_F792:	dc.b 1,	3, 6, 3, 6, 4, 6, 4, 6,	4, 6, 5, $FC, 0
0000FF5C                            		even
0000FF5C                            		even
0000FF5C                            
0000FF5C                            ; ---------------------------------------------------------------------------
0000FF5C                            ; Sprite mappings - Moto Bug enemy (GHZ)
0000FF5C                            ; ---------------------------------------------------------------------------
0000FF5C                            Map_obj40:
0000FF5C                            	include "_maps\obj40.asm"
0000FF5C                            Map_cedc:
0000FF5C 0000                       Map_cedc_0: 	dc.w Map_cedc_E-Map_cedc
0000FF5E 0000                       Map_cedc_2: 	dc.w Map_cedc_23-Map_cedc
0000FF60 0000                       Map_cedc_4: 	dc.w Map_cedc_38-Map_cedc
0000FF62 0000                       Map_cedc_6: 	dc.w Map_cedc_52-Map_cedc
0000FF64 0000                       Map_cedc_8: 	dc.w Map_cedc_58-Map_cedc
0000FF66 0000                       Map_cedc_A: 	dc.w Map_cedc_5E-Map_cedc
0000FF68 0000                       Map_cedc_C: 	dc.w Map_cedc_64-Map_cedc
0000FF6A 04                         Map_cedc_E: 	dc.b $4
0000FF6B F00D 0000 EC               	dc.b $F0, $D, $0, $0, $EC
0000FF70 000C 0008 EC               	dc.b $0, $C, $0, $8, $EC
0000FF75 F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
0000FF7A 0808 000E F4               	dc.b $8, $8, $0, $E, $F4
0000FF7F 04                         Map_cedc_23: 	dc.b $4
0000FF80 F10D 0000 EC               	dc.b $F1, $D, $0, $0, $EC
0000FF85 010C 0008 EC               	dc.b $1, $C, $0, $8, $EC
0000FF8A F901 000C 0C               	dc.b $F9, $1, $0, $C, $C
0000FF8F 0908 0011 F4               	dc.b $9, $8, $0, $11, $F4
0000FF94 05                         Map_cedc_38: 	dc.b $5
0000FF95 F00D 0000 EC               	dc.b $F0, $D, $0, $0, $EC
0000FF9A 000C 0014 EC               	dc.b $0, $C, $0, $14, $EC
0000FF9F F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
0000FFA4 0804 0018 EC               	dc.b $8, $4, $0, $18, $EC
0000FFA9 0804 0012 FC               	dc.b $8, $4, $0, $12, $FC
0000FFAE 01                         Map_cedc_52: 	dc.b $1
0000FFAF FA00 001A 10               	dc.b $FA, $0, $0, $1A, $10
0000FFB4 01                         Map_cedc_58: 	dc.b $1
0000FFB5 FA00 001B 10               	dc.b $FA, $0, $0, $1B, $10
0000FFBA 01                         Map_cedc_5E: 	dc.b $1
0000FFBB FA00 001C 10               	dc.b $FA, $0, $0, $1C, $10
0000FFC0 00                         Map_cedc_64: 	dc.b $0
0000FFC2 00                         	even
0000FFC2 00                         	even
0000FFC2                            
0000FFC2                            ; ===========================================================================
0000FFC2                            ; ---------------------------------------------------------------------------
0000FFC2                            ; Object 4F - blank
0000FFC2                            ; ---------------------------------------------------------------------------
0000FFC2                            
0000FFC2                            Obj4F:					; XREF: Obj_Index
0000FFC2 4E75                       		rts	
0000FFC4                            
0000FFC4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FFC4                            
0000FFC4                            
0000FFC4                            Obj50_ChkWall:				; XREF: Obj50_FixToFloor
0000FFC4 3038 FE04                  		move.w	($FFFFFE04).w,d0
0000FFC8 D047                       		add.w	d7,d0
0000FFCA 0240 0003                  		andi.w	#3,d0
0000FFCE 6600                       		bne.s	loc_F836
0000FFD0 7600                       		moveq	#0,d3
0000FFD2 1628 0019                  		move.b	$19(a0),d3
0000FFD6 4A68 0010                  		tst.w	$10(a0)
0000FFDA 6B00                       		bmi.s	loc_F82C
0000FFDC 6100 0000                  		bsr.w	ObjHitWallRight
0000FFE0 4A41                       		tst.w	d1
0000FFE2 6A00                       		bpl.s	loc_F836
0000FFE4                            
0000FFE4                            loc_F828:
0000FFE4 7001                       		moveq	#1,d0
0000FFE6 4E75                       		rts	
0000FFE8                            ; ===========================================================================
0000FFE8                            
0000FFE8                            loc_F82C:
0000FFE8 4643                       		not.w	d3
0000FFEA 6100 0000                  		bsr.w	ObjHitWallLeft
0000FFEE 4A41                       		tst.w	d1
0000FFF0 6BF2                       		bmi.s	loc_F828
0000FFF2                            
0000FFF2                            loc_F836:
0000FFF2 7000                       		moveq	#0,d0
0000FFF4 4E75                       		rts	
0000FFF6                            ; End of function Obj50_ChkWall
0000FFF6                            
0000FFF6                            ; ===========================================================================
0000FFF6                            ; ---------------------------------------------------------------------------
0000FFF6                            ; Object 50 - Yadrin enemy (SYZ)
0000FFF6                            ; ---------------------------------------------------------------------------
0000FFF6                            
0000FFF6                            Obj50:					; XREF: Obj_Index
0000FFF6 7000                       		moveq	#0,d0
0000FFF8 1028 0024                  		move.b	$24(a0),d0
0000FFFC 323B 0000                  		move.w	Obj50_Index(pc,d0.w),d1
00010000 4EFB 1000                  		jmp	Obj50_Index(pc,d1.w)
00010004                            ; ===========================================================================
00010004 0000                       Obj50_Index:	dc.w Obj50_Main-Obj50_Index
00010006 0000                       		dc.w Obj50_Action-Obj50_Index
00010008                            ; ===========================================================================
00010008                            
00010008                            Obj50_Main:				; XREF: Obj50_Index
00010008 217C 0000 0000 0004        		move.l	#Map_obj50,4(a0)
00010010 317C 247B 0002             		move.w	#$247B,2(a0)
00010016 117C 0004 0001             		move.b	#4,1(a0)
0001001C 117C 0004 0018             		move.b	#4,$18(a0)
00010022 117C 0014 0019             		move.b	#$14,$19(a0)
00010028 117C 0011 0016             		move.b	#$11,$16(a0)
0001002E 117C 0008 0017             		move.b	#8,$17(a0)
00010034 117C 00CC 0020             		move.b	#$CC,$20(a0)
0001003A 6100 DD34                  		bsr.w	ObjectFall
0001003E 6100 0000                  		bsr.w	ObjHitFloor
00010042 4A41                       		tst.w	d1
00010044 6A00                       		bpl.s	locret_F89E
00010046 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0001004A 317C 0000 0012             		move.w	#0,$12(a0)
00010050 5428 0024                  		addq.b	#2,$24(a0)
00010054 0868 0000 0022             		bchg	#0,$22(a0)
0001005A                            
0001005A                            locret_F89E:
0001005A 4E75                       		rts	
0001005C                            ; ===========================================================================
0001005C                            
0001005C                            Obj50_Action:				; XREF: Obj50_Index
0001005C 7000                       		moveq	#0,d0
0001005E 1028 0025                  		move.b	$25(a0),d0
00010062 323B 0000                  		move.w	Obj50_Index2(pc,d0.w),d1
00010066 4EBB 1000                  		jsr	Obj50_Index2(pc,d1.w)
0001006A 43F9 0000 0000             		lea	(Ani_obj50).l,a1
00010070 6100 AE10                  		bsr.w	AnimateSprite
00010074 6000 FDF4                  		bra.w	MarkObjGone
00010078                            ; ===========================================================================
00010078 0000                       Obj50_Index2:	dc.w Obj50_Move-Obj50_Index2
0001007A 0000                       		dc.w Obj50_FixToFloor-Obj50_Index2
0001007C                            ; ===========================================================================
0001007C                            
0001007C                            Obj50_Move:				; XREF: Obj50_Index2
0001007C 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
00010080 6A00                       		bpl.s	locret_F8E2	; if time remains, branch
00010082 5428 0025                  		addq.b	#2,$25(a0)
00010086 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object
0001008C 117C 0001 001C             		move.b	#1,$1C(a0)
00010092 0868 0000 0022             		bchg	#0,$22(a0)
00010098 6600                       		bne.s	locret_F8E2
0001009A 4468 0010                  		neg.w	$10(a0)		; change direction
0001009E                            
0001009E                            locret_F8E2:
0001009E 4E75                       		rts	
000100A0                            ; ===========================================================================
000100A0                            
000100A0                            Obj50_FixToFloor:			; XREF: Obj50_Index2
000100A0 6100 DCFA                  		bsr.w	SpeedToPos
000100A4 6100 0000                  		bsr.w	ObjHitFloor
000100A8 0C41 FFF8                  		cmpi.w	#-8,d1
000100AC 6D00                       		blt.s	Obj50_Pause
000100AE 0C41 000C                  		cmpi.w	#$C,d1
000100B2 6C00                       		bge.s	Obj50_Pause
000100B4 D368 000C                  		add.w	d1,$C(a0)	; match	object's position to the floor
000100B8 6100 FF0A                  		bsr.w	Obj50_ChkWall
000100BC 6600                       		bne.s	Obj50_Pause
000100BE 4E75                       		rts	
000100C0                            ; ===========================================================================
000100C0                            
000100C0                            Obj50_Pause:				; XREF: Obj50_FixToFloor
000100C0 5528 0025                  		subq.b	#2,$25(a0)
000100C4 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
000100CA 317C 0000 0010             		move.w	#0,$10(a0)
000100D0 117C 0000 001C             		move.b	#0,$1C(a0)
000100D6 4E75                       		rts	
000100D8                            ; ===========================================================================
000100D8                            Ani_obj50:
000100D8                            	include "_anim\obj50.asm"
000100D8                            ; ---------------------------------------------------------------------------
000100D8                            ; Animation script - Yadrin enemy
000100D8                            ; ---------------------------------------------------------------------------
000100D8 0000                       		dc.w byte_F920-Ani_obj50
000100DA 0000                       		dc.w byte_F924-Ani_obj50
000100DC 0700 FF00                  byte_F920:	dc.b 7,	0, $FF,	0
000100E0 0700 0301 0400 0302 05FF   byte_F924:	dc.b 7,	0, 3, 1, 4, 0, 3, 2, 5,	$FF
000100EA                            		even
000100EA                            		even
000100EA                            
000100EA                            ; ---------------------------------------------------------------------------
000100EA                            ; Sprite mappings - Yadrin enemy (SYZ)
000100EA                            ; ---------------------------------------------------------------------------
000100EA                            Map_obj50:
000100EA                            	include "_maps\obj50.asm"
000100EA                            Map_ff24:
000100EA 0000                       Map_ff24_0: 	dc.w Map_ff24_C-Map_ff24
000100EC 0000                       Map_ff24_2: 	dc.w Map_ff24_26-Map_ff24
000100EE 0000                       Map_ff24_4: 	dc.w Map_ff24_40-Map_ff24
000100F0 0000                       Map_ff24_6: 	dc.w Map_ff24_5A-Map_ff24
000100F2 0000                       Map_ff24_8: 	dc.w Map_ff24_74-Map_ff24
000100F4 0000                       Map_ff24_A: 	dc.w Map_ff24_8E-Map_ff24
000100F6 05                         Map_ff24_C: 	dc.b $5
000100F7 F408 0000 F4               	dc.b $F4, $8, $0, $0, $F4
000100FC FC0E 0003 EC               	dc.b $FC, $E, $0, $3, $EC
00010101 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
00010106 F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
0001010B 0409 0031 FC               	dc.b $4, $9, $0, $31, $FC
00010110 05                         Map_ff24_26: 	dc.b $5
00010111 F408 0014 F4               	dc.b $F4, $8, $0, $14, $F4
00010116 FC0E 0017 EC               	dc.b $FC, $E, $0, $17, $EC
0001011B EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
00010120 F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
00010125 0409 0031 FC               	dc.b $4, $9, $0, $31, $FC
0001012A 05                         Map_ff24_40: 	dc.b $5
0001012B F409 0023 F4               	dc.b $F4, $9, $0, $23, $F4
00010130 040D 0029 EC               	dc.b $4, $D, $0, $29, $EC
00010135 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
0001013A F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
0001013F 0409 0031 FC               	dc.b $4, $9, $0, $31, $FC
00010144 05                         Map_ff24_5A: 	dc.b $5
00010145 F408 0000 F4               	dc.b $F4, $8, $0, $0, $F4
0001014A FC0E 0003 EC               	dc.b $FC, $E, $0, $3, $EC
0001014F EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
00010154 F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
00010159 0409 0037 FC               	dc.b $4, $9, $0, $37, $FC
0001015E 05                         Map_ff24_74: 	dc.b $5
0001015F F408 0014 F4               	dc.b $F4, $8, $0, $14, $F4
00010164 FC0E 0017 EC               	dc.b $FC, $E, $0, $17, $EC
00010169 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
0001016E F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
00010173 0409 0037 FC               	dc.b $4, $9, $0, $37, $FC
00010178 05                         Map_ff24_8E: 	dc.b $5
00010179 F409 0023 F4               	dc.b $F4, $9, $0, $23, $F4
0001017E 040D 0029 EC               	dc.b $4, $D, $0, $29, $EC
00010183 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
00010188 F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
0001018D 0409 0037 FC               	dc.b $4, $9, $0, $37, $FC
00010192                            	even
00010192                            	even
00010192                            
00010192                            ; ---------------------------------------------------------------------------
00010192                            ; Solid	object subroutine (includes spikes, blocks, rocks etc)
00010192                            ;
00010192                            ; variables:
00010192                            ; d1 = width
00010192                            ; d2 = height /	2 (when	jumping)
00010192                            ; d3 = height /	2 (when	walking)
00010192                            ; d4 = x-axis position
00010192                            ; ---------------------------------------------------------------------------
00010192                            
00010192                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010192                            
00010192                            
00010192                            SolidObject:
00010192 4A28 0025                  		tst.b	$25(a0)
00010196 6700 0000                  		beq.w	loc_FAC8
0001019A 3401                       		move.w	d1,d2
0001019C D442                       		add.w	d2,d2
0001019E 43F8 D000                  		lea	($FFFFD000).w,a1
000101A2 0829 0001 0022             		btst	#1,$22(a1)
000101A8 6600                       		bne.s	loc_F9FE
000101AA 3029 0008                  		move.w	8(a1),d0
000101AE 9068 0008                  		sub.w	8(a0),d0
000101B2 D041                       		add.w	d1,d0
000101B4 6B00                       		bmi.s	loc_F9FE
000101B6 B042                       		cmp.w	d2,d0
000101B8 6500                       		bcs.s	loc_FA12
000101BA                            
000101BA                            loc_F9FE:
000101BA 08A9 0003 0022             		bclr	#3,$22(a1)
000101C0 08A8 0003 0022             		bclr	#3,$22(a0)
000101C6 4228 0025                  		clr.b	$25(a0)
000101CA 7800                       		moveq	#0,d4
000101CC 4E75                       		rts	
000101CE                            ; ===========================================================================
000101CE                            
000101CE                            loc_FA12:
000101CE 3404                       		move.w	d4,d2
000101D0                            		;bsr.w	MvSonicOnPtfm Causes an error in building (Come back to this)
000101D0 7800                       		moveq	#0,d4
000101D2 4E75                       		rts	
000101D4                            ; ===========================================================================
000101D4                            
000101D4                            SolidObject71:				; XREF: Obj71_Solid
000101D4 4A28 0025                  		tst.b	$25(a0)
000101D8 6700 0000                  		beq.w	loc_FAD0
000101DC 3401                       		move.w	d1,d2
000101DE D442                       		add.w	d2,d2
000101E0 43F8 D000                  		lea	($FFFFD000).w,a1
000101E4 0829 0001 0022             		btst	#1,$22(a1)
000101EA 6600                       		bne.s	loc_FA44
000101EC 3029 0008                  		move.w	8(a1),d0
000101F0 9068 0008                  		sub.w	8(a0),d0
000101F4 D041                       		add.w	d1,d0
000101F6 6B00                       		bmi.s	loc_FA44
000101F8 B042                       		cmp.w	d2,d0
000101FA 6500                       		bcs.s	loc_FA58
000101FC                            
000101FC                            loc_FA44:
000101FC 08A9 0003 0022             		bclr	#3,$22(a1)
00010202 08A8 0003 0022             		bclr	#3,$22(a0)
00010208 4228 0025                  		clr.b	$25(a0)
0001020C 7800                       		moveq	#0,d4
0001020E 4E75                       		rts	
00010210                            ; ===========================================================================
00010210                            
00010210                            loc_FA58:
00010210 3404                       		move.w	d4,d2
00010212                            	;	bsr.w	MvSonicOnPtfm  Causes an error in building (Come back to this)
00010212 7800                       		moveq	#0,d4
00010214 4E75                       		rts	
00010216                            ; ===========================================================================
00010216                            
00010216                            SolidObject2F:				; XREF: Obj2F_Solid
00010216 43F8 D000                  		lea	($FFFFD000).w,a1
0001021A 4A28 0001                  		tst.b	1(a0)
0001021E 6A00 0000                  		bpl.w	loc_FB92
00010222 3029 0008                  		move.w	8(a1),d0
00010226 9068 0008                  		sub.w	8(a0),d0
0001022A D041                       		add.w	d1,d0
0001022C 6B00 0000                  		bmi.w	loc_FB92
00010230 3601                       		move.w	d1,d3
00010232 D643                       		add.w	d3,d3
00010234 B043                       		cmp.w	d3,d0
00010236 6200 0000                  		bhi.w	loc_FB92
0001023A 3A00                       		move.w	d0,d5
0001023C 0828 0000 0001             		btst	#0,1(a0)
00010242 6700                       		beq.s	loc_FA94
00010244 4645                       		not.w	d5
00010246 DA43                       		add.w	d3,d5
00010248                            
00010248                            loc_FA94:
00010248 E24D                       		lsr.w	#1,d5
0001024A 7600                       		moveq	#0,d3
0001024C 1632 5000                  		move.b	(a2,d5.w),d3
00010250 9612                       		sub.b	(a2),d3
00010252 3A28 000C                  		move.w	$C(a0),d5
00010256 9A43                       		sub.w	d3,d5
00010258 1629 0016                  		move.b	$16(a1),d3
0001025C 4883                       		ext.w	d3
0001025E D443                       		add.w	d3,d2
00010260 3629 000C                  		move.w	$C(a1),d3
00010264 9645                       		sub.w	d5,d3
00010266 5843                       		addq.w	#4,d3
00010268 D642                       		add.w	d2,d3
0001026A 6B00 0000                  		bmi.w	loc_FB92
0001026E 3802                       		move.w	d2,d4
00010270 D844                       		add.w	d4,d4
00010272 B644                       		cmp.w	d4,d3
00010274 6400 0000                  		bcc.w	loc_FB92
00010278 6000 0000                  		bra.w	loc_FB0E
0001027C                            ; ===========================================================================
0001027C                            
0001027C                            loc_FAC8:
0001027C 4A28 0001                  		tst.b	1(a0)
00010280 6A00 0000                  		bpl.w	loc_FB92
00010284                            
00010284                            loc_FAD0:
00010284 43F8 D000                  		lea	($FFFFD000).w,a1
00010288 3029 0008                  		move.w	8(a1),d0
0001028C 9068 0008                  		sub.w	8(a0),d0
00010290 D041                       		add.w	d1,d0
00010292 6B00 0000                  		bmi.w	loc_FB92
00010296 3601                       		move.w	d1,d3
00010298 D643                       		add.w	d3,d3
0001029A B043                       		cmp.w	d3,d0
0001029C 6200 0000                  		bhi.w	loc_FB92
000102A0 1629 0016                  		move.b	$16(a1),d3
000102A4 4883                       		ext.w	d3
000102A6 D443                       		add.w	d3,d2
000102A8 3629 000C                  		move.w	$C(a1),d3
000102AC 9668 000C                  		sub.w	$C(a0),d3
000102B0 5843                       		addq.w	#4,d3
000102B2 D642                       		add.w	d2,d3
000102B4 6B00 0000                  		bmi.w	loc_FB92
000102B8 3802                       		move.w	d2,d4
000102BA D844                       		add.w	d4,d4
000102BC B644                       		cmp.w	d4,d3
000102BE 6400 0000                  		bcc.w	loc_FB92
000102C2                            
000102C2                            loc_FB0E:
000102C2 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000102C6 6B00 0000                  		bmi.w	loc_FB92
000102CA 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000102D0 6400 0000                  		bcc.w	loc_FB92
000102D4 4A78 FE08                  		tst.w	($FFFFFE08).w
000102D8 6600 0000                  		bne.w	loc_FBAC
000102DC 3A00                       		move.w	d0,d5
000102DE B240                       		cmp.w	d0,d1
000102E0 6400                       		bcc.s	loc_FB36
000102E2 D241                       		add.w	d1,d1
000102E4 9041                       		sub.w	d1,d0
000102E6 3A00                       		move.w	d0,d5
000102E8 4445                       		neg.w	d5
000102EA                            
000102EA                            loc_FB36:
000102EA 3203                       		move.w	d3,d1
000102EC B443                       		cmp.w	d3,d2
000102EE 6400                       		bcc.s	loc_FB44
000102F0 5943                       		subq.w	#4,d3
000102F2 9644                       		sub.w	d4,d3
000102F4 3203                       		move.w	d3,d1
000102F6 4441                       		neg.w	d1
000102F8                            
000102F8                            loc_FB44:
000102F8 BA41                       		cmp.w	d1,d5
000102FA 6200 0000                  		bhi.w	loc_FBB0
000102FE 0C41 0004                  		cmpi.w	#4,d1
00010302 6300                       		bls.s	loc_FB8C
00010304 4A40                       		tst.w	d0
00010306 6700                       		beq.s	loc_FB70
00010308 6B00                       		bmi.s	loc_FB5E
0001030A 4A69 0010                  		tst.w	$10(a1)
0001030E 6B00                       		bmi.s	loc_FB70
00010310 6000                       		bra.s	loc_FB64
00010312                            ; ===========================================================================
00010312                            
00010312                            loc_FB5E:
00010312 4A69 0010                  		tst.w	$10(a1)
00010316 6A00                       		bpl.s	loc_FB70
00010318                            
00010318                            loc_FB64:
00010318 337C 0000 0014             		move.w	#0,$14(a1)	; stop Sonic moving
0001031E 337C 0000 0010             		move.w	#0,$10(a1)
00010324                            
00010324                            loc_FB70:
00010324 9169 0008                  		sub.w	d0,8(a1)
00010328 0829 0001 0022             		btst	#1,$22(a1)
0001032E 6600                       		bne.s	loc_FB8C
00010330 08E9 0005 0022             		bset	#5,$22(a1)
00010336 08E8 0005 0022             		bset	#5,$22(a0)
0001033C 7801                       		moveq	#1,d4
0001033E 4E75                       		rts	
00010340                            ; ===========================================================================
00010340                            
00010340                            loc_FB8C:
00010340 6100                       		bsr.s	loc_FBA0
00010342 7801                       		moveq	#1,d4
00010344 4E75                       		rts	
00010346                            ; ===========================================================================
00010346                            
00010346                            loc_FB92:
00010346 0828 0005 0022             		btst	#5,$22(a0)
0001034C 6700                       		beq.s	loc_FBAC
0001034E 337C 0001 001C             		move.w	#1,$1C(a1)	; use walking animation
00010354                            
00010354                            loc_FBA0:
00010354 08A8 0005 0022             		bclr	#5,$22(a0)
0001035A 08A9 0005 0022             		bclr	#5,$22(a1)
00010360                            
00010360                            loc_FBAC:
00010360 7800                       		moveq	#0,d4
00010362 4E75                       		rts	
00010364                            ; ===========================================================================
00010364                            
00010364                            loc_FBB0:
00010364 4A43                       		tst.w	d3
00010366 6B00                       		bmi.s	loc_FBBC
00010368 0C43 0010                  		cmpi.w	#$10,d3
0001036C 6500                       		bcs.s	loc_FBEE
0001036E 60D6                       		bra.s	loc_FB92
00010370                            ; ===========================================================================
00010370                            
00010370                            loc_FBBC:
00010370 4A69 0012                  		tst.w	$12(a1)
00010374 6700                       		beq.s	loc_FBD6
00010376 6A00                       		bpl.s	loc_FBD2
00010378 4A43                       		tst.w	d3
0001037A 6A00                       		bpl.s	loc_FBD2
0001037C 9769 000C                  		sub.w	d3,$C(a1)
00010380 337C 0000 0012             		move.w	#0,$12(a1)	; stop Sonic moving
00010386                            
00010386                            loc_FBD2:
00010386 78FF                       		moveq	#-1,d4
00010388 4E75                       		rts	
0001038A                            ; ===========================================================================
0001038A                            
0001038A                            loc_FBD6:
0001038A 0829 0001 0022             		btst	#1,$22(a1)
00010390 66F4                       		bne.s	loc_FBD2
00010392 2F08                       		move.l	a0,-(sp)
00010394 2049                       		movea.l	a1,a0
00010396 4EB9 0000 0000             		jsr	KillSonic
0001039C 205F                       		movea.l	(sp)+,a0
0001039E 78FF                       		moveq	#-1,d4
000103A0 4E75                       		rts	
000103A2                            ; ===========================================================================
000103A2                            
000103A2                            loc_FBEE:
000103A2 5943                       		subq.w	#4,d3
000103A4 7200                       		moveq	#0,d1
000103A6 1228 0019                  		move.b	$19(a0),d1
000103AA 3401                       		move.w	d1,d2
000103AC D442                       		add.w	d2,d2
000103AE D269 0008                  		add.w	8(a1),d1
000103B2 9268 0008                  		sub.w	8(a0),d1
000103B6 6B00                       		bmi.s	loc_FC28
000103B8 B242                       		cmp.w	d2,d1
000103BA 6400                       		bcc.s	loc_FC28
000103BC 4A69 0012                  		tst.w	$12(a1)
000103C0 6B00                       		bmi.s	loc_FC28
000103C2 9769 000C                  		sub.w	d3,$C(a1)
000103C6 5369 000C                  		subq.w	#1,$C(a1)
000103CA 6100                       		bsr.s	sub_FC2C
000103CC 117C 0002 0025             		move.b	#2,$25(a0)
000103D2 08E8 0003 0022             		bset	#3,$22(a0)
000103D8 78FF                       		moveq	#-1,d4
000103DA 4E75                       		rts	
000103DC                            ; ===========================================================================
000103DC                            
000103DC                            loc_FC28:
000103DC 7800                       		moveq	#0,d4
000103DE 4E75                       		rts	
000103E0                            ; End of function SolidObject
000103E0                            
000103E0                            
000103E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000103E0                            
000103E0                            
000103E0                            sub_FC2C:				; XREF: SolidObject
000103E0 0829 0003 0022             		btst	#3,$22(a1)
000103E6 6700                       		beq.s	loc_FC4E
000103E8 7000                       		moveq	#0,d0
000103EA 1029 003D                  		move.b	$3D(a1),d0
000103EE ED48                       		lsl.w	#6,d0
000103F0 0680 00FF D000             		addi.l	#$FFD000,d0
000103F6 2440                       		movea.l	d0,a2
000103F8 08AA 0003 0022             		bclr	#3,$22(a2)
000103FE 422A 0025                  		clr.b	$25(a2)
00010402                            
00010402                            loc_FC4E:
00010402 3008                       		move.w	a0,d0
00010404 0440 D000                  		subi.w	#-$3000,d0
00010408 EC48                       		lsr.w	#6,d0
0001040A 0240 007F                  		andi.w	#$7F,d0
0001040E 1340 003D                  		move.b	d0,$3D(a1)
00010412 137C 0000 0026             		move.b	#0,$26(a1)
00010418 337C 0000 0012             		move.w	#0,$12(a1)
0001041E 3369 0010 0014             		move.w	$10(a1),$14(a1)
00010424 0829 0001 0022             		btst	#1,$22(a1)
0001042A 6700                       		beq.s	loc_FC84
0001042C 2F08                       		move.l	a0,-(sp)
0001042E 2049                       		movea.l	a1,a0
00010430 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
00010436 205F                       		movea.l	(sp)+,a0
00010438                            
00010438                            loc_FC84:
00010438 08E9 0003 0022             		bset	#3,$22(a1)
0001043E 08E8 0003 0022             		bset	#3,$22(a0)
00010444 4E75                       		rts	
00010446                            ; End of function sub_FC2C
00010446                            
00010446                            ; ===========================================================================
00010446                            ; ---------------------------------------------------------------------------
00010446                            ; Object 51 - smashable	green block (MZ)
00010446                            ; ---------------------------------------------------------------------------
00010446                            
00010446                            Obj51:					; XREF: Obj_Index
00010446 7000                       		moveq	#0,d0
00010448 1028 0024                  		move.b	$24(a0),d0
0001044C 323B 0000                  		move.w	Obj51_Index(pc,d0.w),d1
00010450 4EBB 1000                  		jsr	Obj51_Index(pc,d1.w)
00010454 6000 FA14                  		bra.w	MarkObjGone
00010458                            ; ===========================================================================
00010458 0000                       Obj51_Index:	dc.w Obj51_Main-Obj51_Index
0001045A 0000                       		dc.w Obj51_Solid-Obj51_Index
0001045C 0000                       		dc.w Obj51_Display-Obj51_Index
0001045E                            ; ===========================================================================
0001045E                            
0001045E                            Obj51_Main:				; XREF: Obj51_Index
0001045E 5428 0024                  		addq.b	#2,$24(a0)
00010462 217C 0000 0000 0004        		move.l	#Map_obj51,4(a0)
0001046A 317C 42B8 0002             		move.w	#$42B8,2(a0)
00010470 117C 0004 0001             		move.b	#4,1(a0)
00010476 117C 0010 0019             		move.b	#$10,$19(a0)
0001047C 117C 0004 0018             		move.b	#4,$18(a0)
00010482 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00010488                            
00010488                            Obj51_Solid:				; XREF: Obj51_Index
00010488 3178 F7D0 0034             		move.w	($FFFFF7D0).w,$34(a0)
0001048E 1178 D01C 0032             		move.b	($FFFFD01C).w,$32(a0) ;	load Sonic's animation number
00010494 323C 001B                  		move.w	#$1B,d1
00010498 343C 0010                  		move.w	#$10,d2
0001049C 363C 0011                  		move.w	#$11,d3
000104A0 3828 0008                  		move.w	8(a0),d4
000104A4 6100 FCEC                  		bsr.w	SolidObject
000104A8 0828 0003 0022             		btst	#3,$22(a0)
000104AE 6600                       		bne.s	Obj51_Smash
000104B0                            
000104B0                            locret_FCFC:
000104B0 4E75                       		rts	
000104B2                            ; ===========================================================================
000104B2                            
000104B2                            Obj51_Smash:				; XREF: Obj51_Solid
000104B2 0C28 0002 0032             		cmpi.b	#2,$32(a0)	; is Sonic rolling/jumping?
000104B8 66F6                       		bne.s	locret_FCFC	; if not, branch
000104BA 31E8 0034 F7D0             		move.w	$34(a0),($FFFFF7D0).w
000104C0 08E9 0002 0022             		bset	#2,$22(a1)
000104C6 137C 000E 0016             		move.b	#$E,$16(a1)
000104CC 137C 0007 0017             		move.b	#7,$17(a1)
000104D2 137C 0002 001C             		move.b	#2,$1C(a1)
000104D8 337C FD00 0012             		move.w	#-$300,$12(a1)	; bounce Sonic upwards
000104DE 08E9 0001 0022             		bset	#1,$22(a1)
000104E4 08A9 0003 0022             		bclr	#3,$22(a1)
000104EA 137C 0002 0024             		move.b	#2,$24(a1)
000104F0 08A8 0003 0022             		bclr	#3,$22(a0)
000104F6 4228 0025                  		clr.b	$25(a0)
000104FA 117C 0001 001A             		move.b	#1,$1A(a0)
00010500 49F9 0000 0000             		lea	(Obj51_Speeds).l,a4 ; load broken	fragment speed data
00010506 7203                       		moveq	#3,d1		; set number of	fragments to 4
00010508 343C 0038                  		move.w	#$38,d2
0001050C 6100 D4A2                  		bsr.w	SmashObject
00010510 6100 DD36                  		bsr.w	SingleObjLoad
00010514 6600                       		bne.s	Obj51_Display
00010516 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0001051A 3368 0008 0008             		move.w	8(a0),8(a1)
00010520 3368 000C 000C             		move.w	$C(a0),$C(a1)
00010526 3438 F7D0                  		move.w	($FFFFF7D0).w,d2
0001052A 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w
0001052E 0C42 0006                  		cmpi.w	#6,d2
00010532 6500                       		bcs.s	Obj51_Bonus
00010534 7406                       		moveq	#6,d2
00010536                            
00010536                            Obj51_Bonus:
00010536 7000                       		moveq	#0,d0
00010538 303B 2000                  		move.w	Obj51_Points(pc,d2.w),d0
0001053C 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 blocks been smashed?
00010542 6500                       		bcs.s	loc_FD98	; if not, branch
00010544 303C 03E8                  		move.w	#1000,d0	; give higher points for 16th block
00010548 740A                       		moveq	#10,d2
0001054A                            
0001054A                            loc_FD98:
0001054A 4EB9 0000 0000             		jsr	AddPoints
00010550 E24A                       		lsr.w	#1,d2
00010552 1342 001A                  		move.b	d2,$1A(a1)
00010556                            
00010556                            Obj51_Display:				; XREF: Obj51_Index
00010556 6100 D844                  		bsr.w	SpeedToPos
0001055A 0668 0038 0012             		addi.w	#$38,$12(a0)
00010560 6100 D860                  		bsr.w	DisplaySprite
00010564 4A28 0001                  		tst.b	1(a0)
00010568 6A00 D894                  		bpl.w	DeleteObject
0001056C 4E75                       		rts	
0001056E                            ; ===========================================================================
0001056E FE00 FE00                  Obj51_Speeds:	dc.w $FE00, $FE00	; x-speed, y-speed
00010572 FF00 FF00                  		dc.w $FF00, $FF00
00010576 0200 FE00                  		dc.w $200, $FE00
0001057A 0100 FF00                  		dc.w $100, $FF00
0001057E                            
0001057E 000A 0014 0032 0064        Obj51_Points:	dc.w 10, 20, 50, 100
00010586                            ; ---------------------------------------------------------------------------
00010586                            ; Sprite mappings - smashable green block (MZ)
00010586                            ; ---------------------------------------------------------------------------
00010586                            Map_obj51:
00010586                            	include "_maps\obj51.asm"
00010586                            ; ---------------------------------------------------------------------------
00010586                            ; Sprite mappings - smashable green block (MZ)
00010586                            ; ---------------------------------------------------------------------------
00010586 0000                       		dc.w byte_FDD8-Map_obj51
00010588 0000                       		dc.w byte_FDE3-Map_obj51
0001058A 02                         byte_FDD8:	dc.b 2
0001058B F00D 0000 F0               		dc.b $F0, $D, 0, 0, $F0
00010590 000D 0000 F0               		dc.b 0,	$D, 0, 0, $F0
00010595 04                         byte_FDE3:	dc.b 4
00010596 F005 8000 F0               		dc.b $F0, 5, $80, 0, $F0
0001059B 0005 8000 F0               		dc.b 0,	5, $80,	0, $F0
000105A0 F005 8000 00               		dc.b $F0, 5, $80, 0, 0
000105A5 0005 8000 00               		dc.b 0,	5, $80,	0, 0
000105AA                            		even
000105AA                            		even
000105AA                            
000105AA                            ; ===========================================================================
000105AA                            ; ---------------------------------------------------------------------------
000105AA                            ; Object 52 - moving platform blocks (MZ, LZ, SBZ)
000105AA                            ; ---------------------------------------------------------------------------
000105AA                            
000105AA                            Obj52:					; XREF: Obj_Index
000105AA 7000                       		moveq	#0,d0
000105AC 1028 0024                  		move.b	$24(a0),d0
000105B0 323B 0000                  		move.w	Obj52_Index(pc,d0.w),d1
000105B4 4EFB 1000                  		jmp	Obj52_Index(pc,d1.w)
000105B8                            ; ===========================================================================
000105B8 0000                       Obj52_Index:	dc.w Obj52_Main-Obj52_Index
000105BA 0000                       		dc.w Obj52_Platform-Obj52_Index
000105BC 0000                       		dc.w Obj52_StandOn-Obj52_Index
000105BE                            
000105BE 1000                       Obj52_Var:	dc.b $10, 0		; object width,	frame number
000105C0 2001                       		dc.b $20, 1
000105C2 2002                       		dc.b $20, 2
000105C4 4003                       		dc.b $40, 3
000105C6 3004                       		dc.b $30, 4
000105C8                            ; ===========================================================================
000105C8                            
000105C8                            Obj52_Main:				; XREF: Obj52_Index
000105C8 5428 0024                  		addq.b	#2,$24(a0)
000105CC 217C 0000 0000 0004        		move.l	#Map_obj52,4(a0)
000105D4 317C 42B8 0002             		move.w	#$42B8,2(a0)
000105DA 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
000105E0 6600                       		bne.s	loc_FE44
000105E2 217C 0000 0000 0004        		move.l	#Map_obj52a,4(a0) ; LZ specific	code
000105EA 317C 43BC 0002             		move.w	#$43BC,2(a0)
000105F0 117C 0007 0016             		move.b	#7,$16(a0)
000105F6                            
000105F6                            loc_FE44:
000105F6 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
000105FC 6600                       		bne.s	loc_FE60
000105FE 317C 22C0 0002             		move.w	#$22C0,2(a0)	; SBZ specific code (object 5228)
00010604 0C28 0028 0028             		cmpi.b	#$28,$28(a0)	; is object 5228 ?
0001060A 6700                       		beq.s	loc_FE60	; if yes, branch
0001060C 317C 4460 0002             		move.w	#$4460,2(a0)	; SBZ specific code (object 523x)
00010612                            
00010612                            loc_FE60:
00010612 117C 0004 0001             		move.b	#4,1(a0)
00010618 7000                       		moveq	#0,d0
0001061A 1028 0028                  		move.b	$28(a0),d0
0001061E E648                       		lsr.w	#3,d0
00010620 0240 001E                  		andi.w	#$1E,d0
00010624 45FB 0098                  		lea	Obj52_Var(pc,d0.w),a2
00010628 115A 0019                  		move.b	(a2)+,$19(a0)
0001062C 115A 001A                  		move.b	(a2)+,$1A(a0)
00010630 117C 0004 0018             		move.b	#4,$18(a0)
00010636 3168 0008 0030             		move.w	8(a0),$30(a0)
0001063C 3168 000C 0032             		move.w	$C(a0),$32(a0)
00010642 0228 000F 0028             		andi.b	#$F,$28(a0)
00010648                            
00010648                            Obj52_Platform:				; XREF: Obj52_Index
00010648 6100 0000                  		bsr.w	Obj52_Move
0001064C 7200                       		moveq	#0,d1
0001064E 1228 0019                  		move.b	$19(a0),d1
00010652 4EB9 0000 7A4C             		jsr	(PlatformObject).l
00010658 6000                       		bra.s	Obj52_ChkDel
0001065A                            ; ===========================================================================
0001065A                            
0001065A                            Obj52_StandOn:				; XREF: Obj52_Index
0001065A 7200                       		moveq	#0,d1
0001065C 1228 0019                  		move.b	$19(a0),d1
00010660 4EB9 0000 7BC0             		jsr	(ExitPlatform).l
00010666 3F28 0008                  		move.w	8(a0),-(sp)
0001066A 6100 0000                  		bsr.w	Obj52_Move
0001066E 341F                       		move.w	(sp)+,d2
00010670 4EB9 0000 812A             		jsr	(MvSonicOnPtfm2).l
00010676                            
00010676                            Obj52_ChkDel:				; XREF: Obj52_Platform
00010676 3028 0030                  		move.w	$30(a0),d0
0001067A 0240 FF80                  		andi.w	#$FF80,d0
0001067E 3238 F700                  		move.w	($FFFFF700).w,d1
00010682 0441 0080                  		subi.w	#$80,d1
00010686 0241 FF80                  		andi.w	#$FF80,d1
0001068A 9041                       		sub.w	d1,d0
0001068C 0C40 0280                  		cmpi.w	#$280,d0
00010690 6200 D76C                  		bhi.w	DeleteObject
00010694 6000 D72C                  		bra.w	DisplaySprite
00010698                            ; ===========================================================================
00010698                            
00010698                            Obj52_Move:				; XREF: Obj52_Platform; Obj52_StandOn
00010698 7000                       		moveq	#0,d0
0001069A 1028 0028                  		move.b	$28(a0),d0
0001069E 0240 000F                  		andi.w	#$F,d0
000106A2 D040                       		add.w	d0,d0
000106A4 323B 0000                  		move.w	Obj52_TypeIndex(pc,d0.w),d1
000106A8 4EFB 1000                  		jmp	Obj52_TypeIndex(pc,d1.w)
000106AC                            ; ===========================================================================
000106AC 0000 0000                  Obj52_TypeIndex:dc.w Obj52_Type00-Obj52_TypeIndex, Obj52_Type01-Obj52_TypeIndex
000106B0 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type03-Obj52_TypeIndex
000106B4 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type05-Obj52_TypeIndex
000106B8 0000 0000                  		dc.w Obj52_Type06-Obj52_TypeIndex, Obj52_Type07-Obj52_TypeIndex
000106BC 0000 0000                  		dc.w Obj52_Type08-Obj52_TypeIndex, Obj52_Type02-Obj52_TypeIndex
000106C0 0000                       		dc.w Obj52_Type0A-Obj52_TypeIndex
000106C2                            ; ===========================================================================
000106C2                            
000106C2                            Obj52_Type00:				; XREF: Obj52_TypeIndex
000106C2 4E75                       		rts	
000106C4                            ; ===========================================================================
000106C4                            
000106C4                            Obj52_Type01:				; XREF: Obj52_TypeIndex
000106C4 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
000106C8 323C 0060                  		move.w	#$60,d1
000106CC 0828 0000 0022             		btst	#0,$22(a0)
000106D2 6700                       		beq.s	loc_FF26
000106D4 4440                       		neg.w	d0
000106D6 D041                       		add.w	d1,d0
000106D8                            
000106D8                            loc_FF26:
000106D8 3228 0030                  		move.w	$30(a0),d1
000106DC 9240                       		sub.w	d0,d1
000106DE 3141 0008                  		move.w	d1,8(a0)
000106E2 4E75                       		rts	
000106E4                            ; ===========================================================================
000106E4                            
000106E4                            Obj52_Type02:				; XREF: Obj52_TypeIndex
000106E4 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; is Sonic standing on the platform?
000106EA 6600                       		bne.s	Obj52_02_Wait
000106EC 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
000106F0                            
000106F0                            Obj52_02_Wait:
000106F0 4E75                       		rts	
000106F2                            ; ===========================================================================
000106F2                            
000106F2                            Obj52_Type03:				; XREF: Obj52_TypeIndex
000106F2 7600                       		moveq	#0,d3
000106F4 1628 0019                  		move.b	$19(a0),d3
000106F8 6100 0000                  		bsr.w	ObjHitWallRight
000106FC 4A41                       		tst.w	d1		; has the platform hit a wall?
000106FE 6B00                       		bmi.s	Obj52_03_End	; if yes, branch
00010700 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
00010704 3168 0008 0030             		move.w	8(a0),$30(a0)
0001070A 4E75                       		rts	
0001070C                            ; ===========================================================================
0001070C                            
0001070C                            Obj52_03_End:
0001070C 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving	type)
00010710 4E75                       		rts	
00010712                            ; ===========================================================================
00010712                            
00010712                            Obj52_Type05:				; XREF: Obj52_TypeIndex
00010712 7600                       		moveq	#0,d3
00010714 1628 0019                  		move.b	$19(a0),d3
00010718 6100 0000                  		bsr.w	ObjHitWallRight
0001071C 4A41                       		tst.w	d1		; has the platform hit a wall?
0001071E 6B00                       		bmi.s	Obj52_05_End	; if yes, branch
00010720 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
00010724 3168 0008 0030             		move.w	8(a0),$30(a0)
0001072A 4E75                       		rts	
0001072C                            ; ===========================================================================
0001072C                            
0001072C                            Obj52_05_End:
0001072C 5228 0028                  		addq.b	#1,$28(a0)	; change to type 06 (falling)
00010730 4E75                       		rts	
00010732                            ; ===========================================================================
00010732                            
00010732                            Obj52_Type06:				; XREF: Obj52_TypeIndex
00010732 6100 D668                  		bsr.w	SpeedToPos
00010736 0668 0018 0012             		addi.w	#$18,$12(a0)	; make the platform fall
0001073C 6100 0000                  		bsr.w	ObjHitFloor
00010740 4A41                       		tst.w	d1		; has platform hit the floor?
00010742 6A00 0000                  		bpl.w	locret_FFA0	; if not, branch
00010746 D368 000C                  		add.w	d1,$C(a0)
0001074A 4268 0012                  		clr.w	$12(a0)		; stop platform	falling
0001074E 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving)
00010752                            
00010752                            locret_FFA0:
00010752 4E75                       		rts	
00010754                            ; ===========================================================================
00010754                            
00010754                            Obj52_Type07:				; XREF: Obj52_TypeIndex
00010754 4A38 F7E2                  		tst.b	($FFFFF7E2).w	; has switch number 02 been pressed?
00010758 6700                       		beq.s	Obj52_07_ChkDel
0001075A 5728 0028                  		subq.b	#3,$28(a0)	; if yes, change object	type to	04
0001075E                            
0001075E                            Obj52_07_ChkDel:
0001075E 588F                       		addq.l	#4,sp
00010760 3028 0030                  		move.w	$30(a0),d0
00010764 0240 FF80                  		andi.w	#$FF80,d0
00010768 3238 F700                  		move.w	($FFFFF700).w,d1
0001076C 0441 0080                  		subi.w	#$80,d1
00010770 0241 FF80                  		andi.w	#$FF80,d1
00010774 9041                       		sub.w	d1,d0
00010776 0C40 0280                  		cmpi.w	#$280,d0
0001077A 6200 D682                  		bhi.w	DeleteObject
0001077E 4E75                       		rts	
00010780                            ; ===========================================================================
00010780                            
00010780                            Obj52_Type08:				; XREF: Obj52_TypeIndex
00010780 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00010784 323C 0080                  		move.w	#$80,d1
00010788 0828 0000 0022             		btst	#0,$22(a0)
0001078E 6700                       		beq.s	loc_FFE2
00010790 4440                       		neg.w	d0
00010792 D041                       		add.w	d1,d0
00010794                            
00010794                            loc_FFE2:
00010794 3228 0032                  		move.w	$32(a0),d1
00010798 9240                       		sub.w	d0,d1
0001079A 3141 000C                  		move.w	d1,$C(a0)
0001079E 4E75                       		rts	
000107A0                            ; ===========================================================================
000107A0                            
000107A0                            Obj52_Type0A:				; XREF: Obj52_TypeIndex
000107A0 7600                       		moveq	#0,d3
000107A2 1628 0019                  		move.b	$19(a0),d3
000107A6 D643                       		add.w	d3,d3
000107A8 7208                       		moveq	#8,d1
000107AA 0828 0000 0022             		btst	#0,$22(a0)
000107B0 6700                       		beq.s	loc_10004
000107B2 4441                       		neg.w	d1
000107B4 4443                       		neg.w	d3
000107B6                            
000107B6                            loc_10004:
000107B6 4A68 0036                  		tst.w	$36(a0)		; is platform set to move back?
000107BA 6600                       		bne.s	Obj52_0A_Back	; if yes, branch
000107BC 3028 0008                  		move.w	8(a0),d0
000107C0 9068 0030                  		sub.w	$30(a0),d0
000107C4 B043                       		cmp.w	d3,d0
000107C6 6700                       		beq.s	Obj52_0A_Wait
000107C8 D368 0008                  		add.w	d1,8(a0)	; move platform
000107CC 317C 012C 0034             		move.w	#300,$34(a0)	; set time delay to 5 seconds
000107D2 4E75                       		rts	
000107D4                            ; ===========================================================================
000107D4                            
000107D4                            Obj52_0A_Wait:
000107D4 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time delay
000107D8 6600                       		bne.s	locret_1002E	; if time remains, branch
000107DA 317C 0001 0036             		move.w	#1,$36(a0)	; set platform to move back to its original position
000107E0                            
000107E0                            locret_1002E:
000107E0 4E75                       		rts	
000107E2                            ; ===========================================================================
000107E2                            
000107E2                            Obj52_0A_Back:
000107E2 3028 0008                  		move.w	8(a0),d0
000107E6 9068 0030                  		sub.w	$30(a0),d0
000107EA 6700                       		beq.s	Obj52_0A_Reset
000107EC 9368 0008                  		sub.w	d1,8(a0)	; return platform to its original position
000107F0 4E75                       		rts	
000107F2                            ; ===========================================================================
000107F2                            
000107F2                            Obj52_0A_Reset:
000107F2 4268 0036                  		clr.w	$36(a0)
000107F6 5328 0028                  		subq.b	#1,$28(a0)
000107FA 4E75                       		rts	
000107FC                            ; ===========================================================================
000107FC                            ; ---------------------------------------------------------------------------
000107FC                            ; Sprite mappings - moving blocks (MZ, SBZ)
000107FC                            ; ---------------------------------------------------------------------------
000107FC                            Map_obj52:
000107FC                            	include "_maps\obj52mz.asm"
000107FC                            ; ---------------------------------------------------------------------------
000107FC                            ; Sprite mappings - moving blocks (MZ, SBZ)
000107FC                            ; ---------------------------------------------------------------------------
000107FC 0000 0000                  		dc.w byte_10054-Map_obj52, byte_1005A-Map_obj52
00010800 0000 0000                  		dc.w byte_10065-Map_obj52, byte_1007A-Map_obj52
00010804 0000                       		dc.w byte_1008F-Map_obj52
00010806 01                         byte_10054:	dc.b 1
00010807 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
0001080C 02                         byte_1005A:	dc.b 2
0001080D F80F 0008 E0               		dc.b $F8, $F, 0, 8, $E0
00010812 F80F 0008 00               		dc.b $F8, $F, 0, 8, 0
00010817 04                         byte_10065:	dc.b 4
00010818 F80C 2000 E0               		dc.b $F8, $C, $20, 0, $E0
0001081D 000D 0004 E0               		dc.b 0,	$D, 0, 4, $E0
00010822 F80C 2000 00               		dc.b $F8, $C, $20, 0, 0
00010827 000D 0004 00               		dc.b 0,	$D, 0, 4, 0
0001082C 04                         byte_1007A:	dc.b 4
0001082D F80E 0000 C0               		dc.b $F8, $E, 0, 0, $C0
00010832 F80E 0003 E0               		dc.b $F8, $E, 0, 3, $E0
00010837 F80E 0003 00               		dc.b $F8, $E, 0, 3, 0
0001083C F80E 0800 20               		dc.b $F8, $E, 8, 0, $20
00010841 03                         byte_1008F:	dc.b 3
00010842 F80F 0008 D0               		dc.b $F8, $F, 0, 8, $D0
00010847 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
0001084C F80F 0008 10               		dc.b $F8, $F, 0, 8, $10
00010852 00                         		even
00010852 00                         		even
00010852                            
00010852                            ; ---------------------------------------------------------------------------
00010852                            ; Sprite mappings - moving block (LZ)
00010852                            ; ---------------------------------------------------------------------------
00010852                            Map_obj52a:
00010852                            	include "_maps\obj52lz.asm"
00010852                            ; ---------------------------------------------------------------------------
00010852                            ; Sprite mappings - moving block (LZ)
00010852                            ; ---------------------------------------------------------------------------
00010852 0000                       		dc.w byte_100A2-Map_obj52a
00010854 01                         byte_100A2:	dc.b 1
00010855 F80D 0000 F0               		dc.b $F8, $D, 0, 0, $F0
0001085A                            		even
0001085A                            		even
0001085A                            
0001085A                            ; ===========================================================================
0001085A                            ; ---------------------------------------------------------------------------
0001085A                            ; Object 55 - Basaran enemy (MZ)
0001085A                            ; ---------------------------------------------------------------------------
0001085A                            
0001085A                            Obj55:					; XREF: Obj_Index
0001085A 7000                       		moveq	#0,d0
0001085C 1028 0024                  		move.b	$24(a0),d0
00010860 323B 0000                  		move.w	Obj55_Index(pc,d0.w),d1
00010864 4EFB 1000                  		jmp	Obj55_Index(pc,d1.w)
00010868                            ; ===========================================================================
00010868 0000                       Obj55_Index:	dc.w Obj55_Main-Obj55_Index
0001086A 0000                       		dc.w Obj55_Action-Obj55_Index
0001086C                            ; ===========================================================================
0001086C                            
0001086C                            Obj55_Main:				; XREF: Obj55_Index
0001086C 5428 0024                  		addq.b	#2,$24(a0)
00010870 217C 0000 0000 0004        		move.l	#Map_obj55,4(a0)
00010878 317C 84B8 0002             		move.w	#$84B8,2(a0)
0001087E 117C 0004 0001             		move.b	#4,1(a0)
00010884 117C 000C 0016             		move.b	#$C,$16(a0)
0001088A 117C 0002 0018             		move.b	#2,$18(a0)
00010890 117C 000B 0020             		move.b	#$B,$20(a0)
00010896 117C 0010 0019             		move.b	#$10,$19(a0)
0001089C                            
0001089C                            Obj55_Action:				; XREF: Obj55_Index
0001089C 7000                       		moveq	#0,d0
0001089E 1028 0025                  		move.b	$25(a0),d0
000108A2 323B 0000                  		move.w	Obj55_Index2(pc,d0.w),d1
000108A6 4EBB 1000                  		jsr	Obj55_Index2(pc,d1.w)
000108AA 43F9 0000 0000             		lea	(Ani_obj55).l,a1
000108B0 6100 A5D0                  		bsr.w	AnimateSprite
000108B4 6000 F5B4                  		bra.w	MarkObjGone
000108B8                            ; ===========================================================================
000108B8 0000                       Obj55_Index2:	dc.w Obj55_ChkDrop-Obj55_Index2
000108BA 0000                       		dc.w Obj55_DropFly-Obj55_Index2
000108BC 0000                       		dc.w Obj55_PlaySnd-Obj55_Index2
000108BE 0000                       		dc.w Obj55_FlyUp-Obj55_Index2
000108C0                            ; ===========================================================================
000108C0                            
000108C0                            Obj55_ChkDrop:				; XREF: Obj55_Index2
000108C0 343C 0080                  		move.w	#$80,d2
000108C4 6100 0000                  		bsr.w	Obj55_ChkSonic
000108C8 6400                       		bcc.s	Obj55_NoDrop
000108CA 3038 D00C                  		move.w	($FFFFD00C).w,d0
000108CE 3140 0036                  		move.w	d0,$36(a0)
000108D2 9068 000C                  		sub.w	$C(a0),d0
000108D6 6500                       		bcs.s	Obj55_NoDrop
000108D8 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	basaran?
000108DC 6400                       		bcc.s	Obj55_NoDrop	; if not, branch
000108DE 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
000108E2 6600                       		bne.s	Obj55_NoDrop	; if yes, branch
000108E4 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000108E8 D007                       		add.b	d7,d0
000108EA 0200 0007                  		andi.b	#7,d0
000108EE 6600                       		bne.s	Obj55_NoDrop
000108F0 117C 0001 001C             		move.b	#1,$1C(a0)
000108F6 5428 0025                  		addq.b	#2,$25(a0)
000108FA                            
000108FA                            Obj55_NoDrop:
000108FA 4E75                       		rts	
000108FC                            ; ===========================================================================
000108FC                            
000108FC                            Obj55_DropFly:				; XREF: Obj55_Index2
000108FC 6100 D49E                  		bsr.w	SpeedToPos
00010900 0668 0018 0012             		addi.w	#$18,$12(a0)	; make basaran fall
00010906 343C 0080                  		move.w	#$80,d2
0001090A 6100 0000                  		bsr.w	Obj55_ChkSonic
0001090E 3028 0036                  		move.w	$36(a0),d0
00010912 9068 000C                  		sub.w	$C(a0),d0
00010916 6500                       		bcs.s	Obj55_ChkDel
00010918 0C40 0010                  		cmpi.w	#$10,d0
0001091C 6400                       		bcc.s	locret_10180
0001091E 3141 0010                  		move.w	d1,$10(a0)	; make basaran fly horizontally
00010922 317C 0000 0012             		move.w	#0,$12(a0)	; stop basaran falling
00010928 117C 0002 001C             		move.b	#2,$1C(a0)
0001092E 5428 0025                  		addq.b	#2,$25(a0)
00010932                            
00010932                            locret_10180:
00010932 4E75                       		rts	
00010934                            ; ===========================================================================
00010934                            
00010934                            Obj55_ChkDel:				; XREF: Obj55_DropFly
00010934 4A28 0001                  		tst.b	1(a0)
00010938 6A00 D4C4                  		bpl.w	DeleteObject
0001093C 4E75                       		rts	
0001093E                            ; ===========================================================================
0001093E                            
0001093E                            Obj55_PlaySnd:				; XREF: Obj55_Index2
0001093E 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00010942 0200 000F                  		andi.b	#$F,d0
00010946 6600                       		bne.s	loc_101A0
00010948 303C 00C0                  		move.w	#$C0,d0
0001094C 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play flapping sound
00010952                            
00010952                            loc_101A0:
00010952 6100 D448                  		bsr.w	SpeedToPos
00010956 3038 D008                  		move.w	($FFFFD008).w,d0
0001095A 9068 0008                  		sub.w	8(a0),d0
0001095E 6400                       		bcc.s	loc_101B0
00010960 4440                       		neg.w	d0
00010962                            
00010962                            loc_101B0:
00010962 0C40 0080                  		cmpi.w	#$80,d0
00010966 6500                       		bcs.s	locret_101C6
00010968 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0001096C D007                       		add.b	d7,d0
0001096E 0200 0007                  		andi.b	#7,d0
00010972 6600                       		bne.s	locret_101C6
00010974 5428 0025                  		addq.b	#2,$25(a0)
00010978                            
00010978                            locret_101C6:
00010978 4E75                       		rts	
0001097A                            ; ===========================================================================
0001097A                            
0001097A                            Obj55_FlyUp:				; XREF: Obj55_Index2
0001097A 6100 D420                  		bsr.w	SpeedToPos
0001097E 0468 0018 0012             		subi.w	#$18,$12(a0)	; make basaran fly upwards
00010984 6100 0000                  		bsr.w	ObjHitCeiling
00010988 4A41                       		tst.w	d1		; has basaran hit the ceiling?
0001098A 6A00                       		bpl.s	locret_101F4	; if not, branch
0001098C 9368 000C                  		sub.w	d1,$C(a0)
00010990 0268 FFF8 0008             		andi.w	#$FFF8,8(a0)
00010996 4268 0010                  		clr.w	$10(a0)		; stop basaran moving
0001099A 4268 0012                  		clr.w	$12(a0)
0001099E 4228 001C                  		clr.b	$1C(a0)
000109A2 4228 0025                  		clr.b	$25(a0)
000109A6                            
000109A6                            locret_101F4:
000109A6 4E75                       		rts	
000109A8                            ; ===========================================================================
000109A8                            
000109A8                            Obj55_ChkSonic:				; XREF: Obj55_ChkDrop
000109A8 323C 0100                  		move.w	#$100,d1
000109AC 08E8 0000 0022             		bset	#0,$22(a0)
000109B2 3038 D008                  		move.w	($FFFFD008).w,d0
000109B6 9068 0008                  		sub.w	8(a0),d0
000109BA 6400                       		bcc.s	loc_10214
000109BC 4440                       		neg.w	d0
000109BE 4441                       		neg.w	d1
000109C0 08A8 0000 0022             		bclr	#0,$22(a0)
000109C6                            
000109C6                            loc_10214:
000109C6 B042                       		cmp.w	d2,d0
000109C8 4E75                       		rts	
000109CA                            ; ===========================================================================
000109CA 6100 D3D0                  		bsr.w	SpeedToPos
000109CE 6100 D3F2                  		bsr.w	DisplaySprite
000109D2 4A28 0001                  		tst.b	1(a0)
000109D6 6A00 D426                  		bpl.w	DeleteObject
000109DA 4E75                       		rts	
000109DC                            ; ===========================================================================
000109DC                            Ani_obj55:
000109DC                            	include "_anim\obj55.asm"
000109DC                            ; ---------------------------------------------------------------------------
000109DC                            ; Animation script - Basaran enemy
000109DC                            ; ---------------------------------------------------------------------------
000109DC 0000                       		dc.w byte_10230-Ani_obj55
000109DE 0000                       		dc.w byte_10234-Ani_obj55
000109E0 0000                       		dc.w byte_10238-Ani_obj55
000109E2 0F00 FF00                  byte_10230:	dc.b $F, 0, $FF, 0
000109E6 0F01 FF00                  byte_10234:	dc.b $F, 1, $FF, 0
000109EA 0301 0203 02FF             byte_10238:	dc.b 3,	1, 2, 3, 2, $FF
000109F0                            		even
000109F0                            		even
000109F0                            
000109F0                            ; ---------------------------------------------------------------------------
000109F0                            ; Sprite mappings - Basaran enemy (MZ)
000109F0                            ; ---------------------------------------------------------------------------
000109F0                            Map_obj55:
000109F0                            	include "_maps\obj55.asm"
000109F0                            ; ---------------------------------------------------------------------------
000109F0                            ; Sprite mappings - Basaran enemy (MZ)
000109F0                            ; ---------------------------------------------------------------------------
000109F0 0000 0000                  		dc.w byte_10246-Map_obj55, byte_1024C-Map_obj55
000109F4 0000 0000                  		dc.w byte_1025C-Map_obj55, byte_10271-Map_obj55
000109F8 01                         byte_10246:	dc.b 1
000109F9 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
000109FE 03                         byte_1024C:	dc.b 3
000109FF F20E 0006 F4               		dc.b $F2, $E, 0, 6, $F4
00010A04 0A04 0012 FC               		dc.b $A, 4, 0, $12, $FC
00010A09 0200 0027 0C               		dc.b 2,	0, 0, $27, $C
00010A0E 04                         byte_1025C:	dc.b 4
00010A0F F804 0014 F8               		dc.b $F8, 4, 0,	$14, $F8
00010A14 000C 0016 F0               		dc.b 0,	$C, 0, $16, $F0
00010A19 0804 001A 00               		dc.b 8,	4, 0, $1A, 0
00010A1E 0000 0028 0C               		dc.b 0,	0, 0, $28, $C
00010A23 04                         byte_10271:	dc.b 4
00010A24 F609 001C F5               		dc.b $F6, 9, 0,	$1C, $F5
00010A29 0608 0022 F4               		dc.b 6,	8, 0, $22, $F4
00010A2E 0E04 0025 F4               		dc.b $E, 4, 0, $25, $F4
00010A33 FE00 0027 0C               		dc.b $FE, 0, 0,	$27, $C
00010A38                            		even
00010A38                            		even
00010A38                            
00010A38                            ; ===========================================================================
00010A38                            ; ---------------------------------------------------------------------------
00010A38                            ; Object 56 - moving blocks (SYZ/SLZ), large doors (LZ)
00010A38                            ; ---------------------------------------------------------------------------
00010A38                            
00010A38                            Obj56:					; XREF: Obj_Index
00010A38 7000                       		moveq	#0,d0
00010A3A 1028 0024                  		move.b	$24(a0),d0
00010A3E 323B 0000                  		move.w	Obj56_Index(pc,d0.w),d1
00010A42 4EFB 1000                  		jmp	Obj56_Index(pc,d1.w)
00010A46                            ; ===========================================================================
00010A46 0000                       Obj56_Index:	dc.w Obj56_Main-Obj56_Index
00010A48 0000                       		dc.w Obj56_Action-Obj56_Index
00010A4A                            
00010A4A 1010                       Obj56_Var:	dc.b  $10, $10		; width, height
00010A4C 2020                       		dc.b  $20, $20
00010A4E 1020                       		dc.b  $10, $20
00010A50 201A                       		dc.b  $20, $1A
00010A52 1027                       		dc.b  $10, $27
00010A54 1010                       		dc.b  $10, $10
00010A56 0820                       		dc.b	8, $20
00010A58 4010                       		dc.b  $40, $10
00010A5A                            ; ===========================================================================
00010A5A                            
00010A5A                            Obj56_Main:				; XREF: Obj56_Index
00010A5A 5428 0024                  		addq.b	#2,$24(a0)
00010A5E 217C 0000 0000 0004        		move.l	#Map_obj56,4(a0)
00010A66 317C 4000 0002             		move.w	#$4000,2(a0)
00010A6C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010A72 6600                       		bne.s	loc_102C8
00010A74 317C 43C4 0002             		move.w	#$43C4,2(a0)	; LZ specific code
00010A7A                            
00010A7A                            loc_102C8:
00010A7A 117C 0004 0001             		move.b	#4,1(a0)
00010A80 117C 0003 0018             		move.b	#3,$18(a0)
00010A86 7000                       		moveq	#0,d0
00010A88 1028 0028                  		move.b	$28(a0),d0
00010A8C E648                       		lsr.w	#3,d0
00010A8E 0240 000E                  		andi.w	#$E,d0
00010A92 45FB 00B6                  		lea	Obj56_Var(pc,d0.w),a2
00010A96 115A 0019                  		move.b	(a2)+,$19(a0)
00010A9A 1152 0016                  		move.b	(a2),$16(a0)
00010A9E E248                       		lsr.w	#1,d0
00010AA0 1140 001A                  		move.b	d0,$1A(a0)
00010AA4 3168 0008 0034             		move.w	8(a0),$34(a0)
00010AAA 3168 000C 0030             		move.w	$C(a0),$30(a0)
00010AB0 7000                       		moveq	#0,d0
00010AB2 1012                       		move.b	(a2),d0
00010AB4 D040                       		add.w	d0,d0
00010AB6 3140 003A                  		move.w	d0,$3A(a0)
00010ABA 7000                       		moveq	#0,d0
00010ABC 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010AC2 6700                       		beq.s	loc_10332
00010AC4 1028 0028                  		move.b	$28(a0),d0	; SYZ/SLZ specific code
00010AC8 0240 000F                  		andi.w	#$F,d0
00010ACC 5140                       		subq.w	#8,d0
00010ACE 6500                       		bcs.s	loc_10332
00010AD0 E548                       		lsl.w	#2,d0
00010AD2 45F8 FE8A                  		lea	($FFFFFE8A).w,a2
00010AD6 45F2 0000                  		lea	(a2,d0.w),a2
00010ADA 4A52                       		tst.w	(a2)
00010ADC 6A00                       		bpl.s	loc_10332
00010ADE 0868 0000 0022             		bchg	#0,$22(a0)
00010AE4                            
00010AE4                            loc_10332:
00010AE4 1028 0028                  		move.b	$28(a0),d0
00010AE8 6A00                       		bpl.s	Obj56_Action
00010AEA 0200 000F                  		andi.b	#$F,d0
00010AEE 1140 003C                  		move.b	d0,$3C(a0)
00010AF2 117C 0005 0028             		move.b	#5,$28(a0)
00010AF8 0C28 0007 001A             		cmpi.b	#7,$1A(a0)
00010AFE 6600                       		bne.s	Obj56_ChkGone
00010B00 117C 000C 0028             		move.b	#$C,$28(a0)
00010B06 317C 0080 003A             		move.w	#$80,$3A(a0)
00010B0C                            
00010B0C                            Obj56_ChkGone:
00010B0C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010B10 7000                       		moveq	#0,d0
00010B12 1028 0023                  		move.b	$23(a0),d0
00010B16 6700                       		beq.s	Obj56_Action
00010B18 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00010B1E 0832 0000 0002             		btst	#0,2(a2,d0.w)
00010B24 6700                       		beq.s	Obj56_Action
00010B26 5228 0028                  		addq.b	#1,$28(a0)
00010B2A 4268 003A                  		clr.w	$3A(a0)
00010B2E                            
00010B2E                            Obj56_Action:				; XREF: Obj56_Index
00010B2E 3F28 0008                  		move.w	8(a0),-(sp)
00010B32 7000                       		moveq	#0,d0
00010B34 1028 0028                  		move.b	$28(a0),d0	; get object type
00010B38 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00010B3C D040                       		add.w	d0,d0
00010B3E 323B 0000                  		move.w	Obj56_TypeIndex(pc,d0.w),d1
00010B42 4EBB 1000                  		jsr	Obj56_TypeIndex(pc,d1.w)
00010B46 381F                       		move.w	(sp)+,d4
00010B48 4A28 0001                  		tst.b	1(a0)
00010B4C 6A00                       		bpl.s	Obj56_ChkDel
00010B4E 7200                       		moveq	#0,d1
00010B50 1228 0019                  		move.b	$19(a0),d1
00010B54 0641 000B                  		addi.w	#$B,d1
00010B58 7400                       		moveq	#0,d2
00010B5A 1428 0016                  		move.b	$16(a0),d2
00010B5E 3602                       		move.w	d2,d3
00010B60 5243                       		addq.w	#1,d3
00010B62 6100 F62E                  		bsr.w	SolidObject
00010B66                            
00010B66                            Obj56_ChkDel:
00010B66 3028 0034                  		move.w	$34(a0),d0
00010B6A 0240 FF80                  		andi.w	#$FF80,d0
00010B6E 3238 F700                  		move.w	($FFFFF700).w,d1
00010B72 0441 0080                  		subi.w	#$80,d1
00010B76 0241 FF80                  		andi.w	#$FF80,d1
00010B7A 9041                       		sub.w	d1,d0
00010B7C 0C40 0280                  		cmpi.w	#$280,d0
00010B80 6200 D27C                  		bhi.w	DeleteObject
00010B84 6000 D23C                  		bra.w	DisplaySprite
00010B88                            ; ===========================================================================
00010B88 0000 0000                  Obj56_TypeIndex:dc.w Obj56_Type00-Obj56_TypeIndex, Obj56_Type01-Obj56_TypeIndex
00010B8C 0000 0000                  		dc.w Obj56_Type02-Obj56_TypeIndex, Obj56_Type03-Obj56_TypeIndex
00010B90 0000 0000                  		dc.w Obj56_Type04-Obj56_TypeIndex, Obj56_Type05-Obj56_TypeIndex
00010B94 0000 0000                  		dc.w Obj56_Type06-Obj56_TypeIndex, Obj56_Type07-Obj56_TypeIndex
00010B98 0000 0000                  		dc.w Obj56_Type08-Obj56_TypeIndex, Obj56_Type09-Obj56_TypeIndex
00010B9C 0000 0000                  		dc.w Obj56_Type0A-Obj56_TypeIndex, Obj56_Type0B-Obj56_TypeIndex
00010BA0 0000 0000                  		dc.w Obj56_Type0C-Obj56_TypeIndex, Obj56_Type0D-Obj56_TypeIndex
00010BA4                            ; ===========================================================================
00010BA4                            
00010BA4                            Obj56_Type00:				; XREF: Obj56_TypeIndex
00010BA4 4E75                       		rts	
00010BA6                            ; ===========================================================================
00010BA6                            
00010BA6                            Obj56_Type01:				; XREF: Obj56_TypeIndex
00010BA6 323C 0040                  		move.w	#$40,d1
00010BAA 7000                       		moveq	#0,d0
00010BAC 1038 FE68                  		move.b	($FFFFFE68).w,d0
00010BB0 6000                       		bra.s	Obj56_Move_LR
00010BB2                            ; ===========================================================================
00010BB2                            
00010BB2                            Obj56_Type02:				; XREF: Obj56_TypeIndex
00010BB2 323C 0080                  		move.w	#$80,d1
00010BB6 7000                       		moveq	#0,d0
00010BB8 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00010BBC                            
00010BBC                            Obj56_Move_LR:
00010BBC 0828 0000 0022             		btst	#0,$22(a0)
00010BC2 6700                       		beq.s	loc_10416
00010BC4 4440                       		neg.w	d0
00010BC6 D041                       		add.w	d1,d0
00010BC8                            
00010BC8                            loc_10416:
00010BC8 3228 0034                  		move.w	$34(a0),d1
00010BCC 9240                       		sub.w	d0,d1
00010BCE 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
00010BD2 4E75                       		rts	
00010BD4                            ; ===========================================================================
00010BD4                            
00010BD4                            Obj56_Type03:				; XREF: Obj56_TypeIndex
00010BD4 323C 0040                  		move.w	#$40,d1
00010BD8 7000                       		moveq	#0,d0
00010BDA 1038 FE68                  		move.b	($FFFFFE68).w,d0
00010BDE 6000                       		bra.s	Obj56_Move_UD
00010BE0                            ; ===========================================================================
00010BE0                            
00010BE0                            Obj56_Type04:				; XREF: Obj56_TypeIndex
00010BE0 323C 0080                  		move.w	#$80,d1
00010BE4 7000                       		moveq	#0,d0
00010BE6 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00010BEA                            
00010BEA                            Obj56_Move_UD:
00010BEA 0828 0000 0022             		btst	#0,$22(a0)
00010BF0 6700                       		beq.s	loc_10444
00010BF2 4440                       		neg.w	d0
00010BF4 D041                       		add.w	d1,d0
00010BF6                            
00010BF6                            loc_10444:
00010BF6 3228 0030                  		move.w	$30(a0),d1
00010BFA 9240                       		sub.w	d0,d1
00010BFC 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
00010C00 4E75                       		rts	
00010C02                            ; ===========================================================================
00010C02                            
00010C02                            Obj56_Type05:				; XREF: Obj56_TypeIndex
00010C02 4A28 0038                  		tst.b	$38(a0)
00010C06 6600                       		bne.s	loc_104A4
00010C08 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00010C0E 6600                       		bne.s	loc_1047A	; if not, branch
00010C10 0C28 0003 003C             		cmpi.b	#3,$3C(a0)
00010C16 6600                       		bne.s	loc_1047A
00010C18 4238 F7C9                  		clr.b	($FFFFF7C9).w
00010C1C 3038 D008                  		move.w	($FFFFD008).w,d0
00010C20 B068 0008                  		cmp.w	8(a0),d0
00010C24 6400                       		bcc.s	loc_1047A
00010C26 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w
00010C2C                            
00010C2C                            loc_1047A:
00010C2C 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010C30 7000                       		moveq	#0,d0
00010C32 1028 003C                  		move.b	$3C(a0),d0
00010C36 0832 0000 0000             		btst	#0,(a2,d0.w)
00010C3C 6700                       		beq.s	loc_104AE
00010C3E 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00010C44 6600                       		bne.s	loc_1049E	; if not, branch
00010C46 0C00 0003                  		cmpi.b	#3,d0
00010C4A 6600                       		bne.s	loc_1049E
00010C4C 4238 F7C9                  		clr.b	($FFFFF7C9).w
00010C50                            
00010C50                            loc_1049E:
00010C50 117C 0001 0038             		move.b	#1,$38(a0)
00010C56                            
00010C56                            loc_104A4:
00010C56 4A68 003A                  		tst.w	$3A(a0)
00010C5A 6700                       		beq.s	loc_104C8
00010C5C 5568 003A                  		subq.w	#2,$3A(a0)
00010C60                            
00010C60                            loc_104AE:
00010C60 3028 003A                  		move.w	$3A(a0),d0
00010C64 0828 0000 0022             		btst	#0,$22(a0)
00010C6A 6700                       		beq.s	loc_104BC
00010C6C 4440                       		neg.w	d0
00010C6E                            
00010C6E                            loc_104BC:
00010C6E 3228 0030                  		move.w	$30(a0),d1
00010C72 D240                       		add.w	d0,d1
00010C74 3141 000C                  		move.w	d1,$C(a0)
00010C78 4E75                       		rts	
00010C7A                            ; ===========================================================================
00010C7A                            
00010C7A                            loc_104C8:
00010C7A 5228 0028                  		addq.b	#1,$28(a0)
00010C7E 4228 0038                  		clr.b	$38(a0)
00010C82 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010C86 7000                       		moveq	#0,d0
00010C88 1028 0023                  		move.b	$23(a0),d0
00010C8C 67D2                       		beq.s	loc_104AE
00010C8E 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00010C94 60CA                       		bra.s	loc_104AE
00010C96                            ; ===========================================================================
00010C96                            
00010C96                            Obj56_Type06:				; XREF: Obj56_TypeIndex
00010C96 4A28 0038                  		tst.b	$38(a0)
00010C9A 6600                       		bne.s	loc_10500
00010C9C 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010CA0 7000                       		moveq	#0,d0
00010CA2 1028 003C                  		move.b	$3C(a0),d0
00010CA6 4A32 0000                  		tst.b	(a2,d0.w)
00010CAA 6A00                       		bpl.s	loc_10512
00010CAC 117C 0001 0038             		move.b	#1,$38(a0)
00010CB2                            
00010CB2                            loc_10500:
00010CB2 7000                       		moveq	#0,d0
00010CB4 1028 0016                  		move.b	$16(a0),d0
00010CB8 D040                       		add.w	d0,d0
00010CBA B068 003A                  		cmp.w	$3A(a0),d0
00010CBE 6700                       		beq.s	loc_1052C
00010CC0 5468 003A                  		addq.w	#2,$3A(a0)
00010CC4                            
00010CC4                            loc_10512:
00010CC4 3028 003A                  		move.w	$3A(a0),d0
00010CC8 0828 0000 0022             		btst	#0,$22(a0)
00010CCE 6700                       		beq.s	loc_10520
00010CD0 4440                       		neg.w	d0
00010CD2                            
00010CD2                            loc_10520:
00010CD2 3228 0030                  		move.w	$30(a0),d1
00010CD6 D240                       		add.w	d0,d1
00010CD8 3141 000C                  		move.w	d1,$C(a0)
00010CDC 4E75                       		rts	
00010CDE                            ; ===========================================================================
00010CDE                            
00010CDE                            loc_1052C:
00010CDE 5328 0028                  		subq.b	#1,$28(a0)
00010CE2 4228 0038                  		clr.b	$38(a0)
00010CE6 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010CEA 7000                       		moveq	#0,d0
00010CEC 1028 0023                  		move.b	$23(a0),d0
00010CF0 67D2                       		beq.s	loc_10512
00010CF2 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00010CF8 60CA                       		bra.s	loc_10512
00010CFA                            ; ===========================================================================
00010CFA                            
00010CFA                            Obj56_Type07:				; XREF: Obj56_TypeIndex
00010CFA 4A28 0038                  		tst.b	$38(a0)
00010CFE 6600                       		bne.s	loc_1055E
00010D00 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch number $F been pressed?
00010D04 6700                       		beq.s	locret_10578
00010D06 117C 0001 0038             		move.b	#1,$38(a0)
00010D0C 4268 003A                  		clr.w	$3A(a0)
00010D10                            
00010D10                            loc_1055E:
00010D10 5268 0008                  		addq.w	#1,8(a0)
00010D14 3168 0008 0034             		move.w	8(a0),$34(a0)
00010D1A 5268 003A                  		addq.w	#1,$3A(a0)
00010D1E 0C68 0380 003A             		cmpi.w	#$380,$3A(a0)
00010D24 6600                       		bne.s	locret_10578
00010D26 4228 0028                  		clr.b	$28(a0)
00010D2A                            
00010D2A                            locret_10578:
00010D2A 4E75                       		rts	
00010D2C                            ; ===========================================================================
00010D2C                            
00010D2C                            Obj56_Type0C:				; XREF: Obj56_TypeIndex
00010D2C 4A28 0038                  		tst.b	$38(a0)
00010D30 6600                       		bne.s	loc_10598
00010D32 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010D36 7000                       		moveq	#0,d0
00010D38 1028 003C                  		move.b	$3C(a0),d0
00010D3C 0832 0000 0000             		btst	#0,(a2,d0.w)
00010D42 6700                       		beq.s	loc_105A2
00010D44 117C 0001 0038             		move.b	#1,$38(a0)
00010D4A                            
00010D4A                            loc_10598:
00010D4A 4A68 003A                  		tst.w	$3A(a0)
00010D4E 6700                       		beq.s	loc_105C0
00010D50 5568 003A                  		subq.w	#2,$3A(a0)
00010D54                            
00010D54                            loc_105A2:
00010D54 3028 003A                  		move.w	$3A(a0),d0
00010D58 0828 0000 0022             		btst	#0,$22(a0)
00010D5E 6700                       		beq.s	loc_105B4
00010D60 4440                       		neg.w	d0
00010D62 0640 0080                  		addi.w	#$80,d0
00010D66                            
00010D66                            loc_105B4:
00010D66 3228 0034                  		move.w	$34(a0),d1
00010D6A D240                       		add.w	d0,d1
00010D6C 3141 0008                  		move.w	d1,8(a0)
00010D70 4E75                       		rts	
00010D72                            ; ===========================================================================
00010D72                            
00010D72                            loc_105C0:
00010D72 5228 0028                  		addq.b	#1,$28(a0)
00010D76 4228 0038                  		clr.b	$38(a0)
00010D7A 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010D7E 7000                       		moveq	#0,d0
00010D80 1028 0023                  		move.b	$23(a0),d0
00010D84 67CE                       		beq.s	loc_105A2
00010D86 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00010D8C 60C6                       		bra.s	loc_105A2
00010D8E                            ; ===========================================================================
00010D8E                            
00010D8E                            Obj56_Type0D:				; XREF: Obj56_TypeIndex
00010D8E 4A28 0038                  		tst.b	$38(a0)
00010D92 6600                       		bne.s	loc_105F8
00010D94 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010D98 7000                       		moveq	#0,d0
00010D9A 1028 003C                  		move.b	$3C(a0),d0
00010D9E 4A32 0000                  		tst.b	(a2,d0.w)
00010DA2 6A00                       		bpl.s	loc_10606
00010DA4 117C 0001 0038             		move.b	#1,$38(a0)
00010DAA                            
00010DAA                            loc_105F8:
00010DAA 303C 0080                  		move.w	#$80,d0
00010DAE B068 003A                  		cmp.w	$3A(a0),d0
00010DB2 6700                       		beq.s	loc_10624
00010DB4 5468 003A                  		addq.w	#2,$3A(a0)
00010DB8                            
00010DB8                            loc_10606:
00010DB8 3028 003A                  		move.w	$3A(a0),d0
00010DBC 0828 0000 0022             		btst	#0,$22(a0)
00010DC2 6700                       		beq.s	loc_10618
00010DC4 4440                       		neg.w	d0
00010DC6 0640 0080                  		addi.w	#$80,d0
00010DCA                            
00010DCA                            loc_10618:
00010DCA 3228 0034                  		move.w	$34(a0),d1
00010DCE D240                       		add.w	d0,d1
00010DD0 3141 0008                  		move.w	d1,8(a0)
00010DD4 4E75                       		rts	
00010DD6                            ; ===========================================================================
00010DD6                            
00010DD6                            loc_10624:
00010DD6 5328 0028                  		subq.b	#1,$28(a0)
00010DDA 4228 0038                  		clr.b	$38(a0)
00010DDE 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010DE2 7000                       		moveq	#0,d0
00010DE4 1028 0023                  		move.b	$23(a0),d0
00010DE8 67CE                       		beq.s	loc_10606
00010DEA 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00010DF0 60C6                       		bra.s	loc_10606
00010DF2                            ; ===========================================================================
00010DF2                            
00010DF2                            Obj56_Type08:				; XREF: Obj56_TypeIndex
00010DF2 323C 0010                  		move.w	#$10,d1
00010DF6 7000                       		moveq	#0,d0
00010DF8 1038 FE88                  		move.b	($FFFFFE88).w,d0
00010DFC E248                       		lsr.w	#1,d0
00010DFE 3638 FE8A                  		move.w	($FFFFFE8A).w,d3
00010E02 6000                       		bra.s	Obj56_Move_Sqr
00010E04                            ; ===========================================================================
00010E04                            
00010E04                            Obj56_Type09:				; XREF: Obj56_TypeIndex
00010E04 323C 0030                  		move.w	#$30,d1
00010E08 7000                       		moveq	#0,d0
00010E0A 1038 FE8C                  		move.b	($FFFFFE8C).w,d0
00010E0E 3638 FE8E                  		move.w	($FFFFFE8E).w,d3
00010E12 6000                       		bra.s	Obj56_Move_Sqr
00010E14                            ; ===========================================================================
00010E14                            
00010E14                            Obj56_Type0A:				; XREF: Obj56_TypeIndex
00010E14 323C 0050                  		move.w	#$50,d1
00010E18 7000                       		moveq	#0,d0
00010E1A 1038 FE90                  		move.b	($FFFFFE90).w,d0
00010E1E 3638 FE92                  		move.w	($FFFFFE92).w,d3
00010E22 6000                       		bra.s	Obj56_Move_Sqr
00010E24                            ; ===========================================================================
00010E24                            
00010E24                            Obj56_Type0B:				; XREF: Obj56_TypeIndex
00010E24 323C 0070                  		move.w	#$70,d1
00010E28 7000                       		moveq	#0,d0
00010E2A 1038 FE94                  		move.b	($FFFFFE94).w,d0
00010E2E 3638 FE96                  		move.w	($FFFFFE96).w,d3
00010E32                            
00010E32                            Obj56_Move_Sqr:
00010E32 4A43                       		tst.w	d3
00010E34 6600                       		bne.s	loc_1068E
00010E36 5228 0022                  		addq.b	#1,$22(a0)
00010E3A 0228 0003 0022             		andi.b	#3,$22(a0)
00010E40                            
00010E40                            loc_1068E:
00010E40 1428 0022                  		move.b	$22(a0),d2
00010E44 0202 0003                  		andi.b	#3,d2
00010E48 6600                       		bne.s	loc_106AE
00010E4A 9041                       		sub.w	d1,d0
00010E4C D068 0034                  		add.w	$34(a0),d0
00010E50 3140 0008                  		move.w	d0,8(a0)
00010E54 4441                       		neg.w	d1
00010E56 D268 0030                  		add.w	$30(a0),d1
00010E5A 3141 000C                  		move.w	d1,$C(a0)
00010E5E 4E75                       		rts	
00010E60                            ; ===========================================================================
00010E60                            
00010E60                            loc_106AE:
00010E60 5302                       		subq.b	#1,d2
00010E62 6600                       		bne.s	loc_106CC
00010E64 5341                       		subq.w	#1,d1
00010E66 9041                       		sub.w	d1,d0
00010E68 4440                       		neg.w	d0
00010E6A D068 0030                  		add.w	$30(a0),d0
00010E6E 3140 000C                  		move.w	d0,$C(a0)
00010E72 5241                       		addq.w	#1,d1
00010E74 D268 0034                  		add.w	$34(a0),d1
00010E78 3141 0008                  		move.w	d1,8(a0)
00010E7C 4E75                       		rts	
00010E7E                            ; ===========================================================================
00010E7E                            
00010E7E                            loc_106CC:
00010E7E 5302                       		subq.b	#1,d2
00010E80 6600                       		bne.s	loc_106EA
00010E82 5341                       		subq.w	#1,d1
00010E84 9041                       		sub.w	d1,d0
00010E86 4440                       		neg.w	d0
00010E88 D068 0034                  		add.w	$34(a0),d0
00010E8C 3140 0008                  		move.w	d0,8(a0)
00010E90 5241                       		addq.w	#1,d1
00010E92 D268 0030                  		add.w	$30(a0),d1
00010E96 3141 000C                  		move.w	d1,$C(a0)
00010E9A 4E75                       		rts	
00010E9C                            ; ===========================================================================
00010E9C                            
00010E9C                            loc_106EA:
00010E9C 9041                       		sub.w	d1,d0
00010E9E D068 0030                  		add.w	$30(a0),d0
00010EA2 3140 000C                  		move.w	d0,$C(a0)
00010EA6 4441                       		neg.w	d1
00010EA8 D268 0034                  		add.w	$34(a0),d1
00010EAC 3141 0008                  		move.w	d1,8(a0)
00010EB0 4E75                       		rts	
00010EB2                            ; ===========================================================================
00010EB2                            ; ---------------------------------------------------------------------------
00010EB2                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00010EB2                            ; ---------------------------------------------------------------------------
00010EB2                            Map_obj56:
00010EB2                            	include "_maps\obj56.asm"
00010EB2                            ; ---------------------------------------------------------------------------
00010EB2                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00010EB2                            ; ---------------------------------------------------------------------------
00010EB2 0000 0000                  		dc.w byte_10710-Map_obj56, byte_10716-Map_obj56
00010EB6 0000 0000                  		dc.w byte_1072B-Map_obj56, byte_10736-Map_obj56
00010EBA 0000 0000                  		dc.w byte_1074B-Map_obj56, byte_1075B-Map_obj56
00010EBE 0000 0000                  		dc.w byte_10761-Map_obj56, byte_1076C-Map_obj56
00010EC2 01                         byte_10710:	dc.b 1
00010EC3 F00F 0061 F0               		dc.b $F0, $F, 0, $61, $F0
00010EC8 04                         byte_10716:	dc.b 4
00010EC9 E00F 0061 E0               		dc.b $E0, $F, 0, $61, $E0
00010ECE E00F 0061 00               		dc.b $E0, $F, 0, $61, 0
00010ED3 000F 0061 E0               		dc.b 0,	$F, 0, $61, $E0
00010ED8 000F 0061 00               		dc.b 0,	$F, 0, $61, 0
00010EDD 02                         byte_1072B:	dc.b 2
00010EDE E00F 0061 F0               		dc.b $E0, $F, 0, $61, $F0
00010EE3 000F 0061 F0               		dc.b 0,	$F, 0, $61, $F0
00010EE8 04                         byte_10736:	dc.b 4
00010EE9 E60F 0081 E0               		dc.b $E6, $F, 0, $81, $E0
00010EEE E60F 0081 00               		dc.b $E6, $F, 0, $81, 0
00010EF3 000F 0081 E0               		dc.b 0,	$F, 0, $81, $E0
00010EF8 000F 0081 00               		dc.b 0,	$F, 0, $81, 0
00010EFD 03                         byte_1074B:	dc.b 3
00010EFE D90F 0081 F0               		dc.b $D9, $F, 0, $81, $F0
00010F03 F30F 0081 F0               		dc.b $F3, $F, 0, $81, $F0
00010F08 0D0F 0081 F0               		dc.b $D, $F, 0,	$81, $F0
00010F0D 01                         byte_1075B:	dc.b 1
00010F0E F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
00010F13 02                         byte_10761:	dc.b 2
00010F14 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00010F19 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00010F1E 04                         byte_1076C:	dc.b 4
00010F1F F00F 0022 C0               		dc.b $F0, $F, 0, $22, $C0
00010F24 F00F 0022 E0               		dc.b $F0, $F, 0, $22, $E0
00010F29 F00F 0022 00               		dc.b $F0, $F, 0, $22, 0
00010F2E F00F 0022 20               		dc.b $F0, $F, 0, $22, $20
00010F34 00                         		even
00010F34 00                         		even
00010F34                            
00010F34                            ; ===========================================================================
00010F34                            ; ---------------------------------------------------------------------------
00010F34                            ; Object 57 - spiked balls (SYZ, LZ)
00010F34                            ; ---------------------------------------------------------------------------
00010F34                            
00010F34                            Obj57:					; XREF: Obj_Index
00010F34 7000                       		moveq	#0,d0
00010F36 1028 0024                  		move.b	$24(a0),d0
00010F3A 323B 0000                  		move.w	Obj57_Index(pc,d0.w),d1
00010F3E 4EFB 1000                  		jmp	Obj57_Index(pc,d1.w)
00010F42                            ; ===========================================================================
00010F42 0000                       Obj57_Index:	dc.w Obj57_Main-Obj57_Index
00010F44 0000                       		dc.w Obj57_Move-Obj57_Index
00010F46 0000                       		dc.w Obj57_Display-Obj57_Index
00010F48                            ; ===========================================================================
00010F48                            
00010F48                            Obj57_Main:				; XREF: Obj57_Index
00010F48 5428 0024                  		addq.b	#2,$24(a0)
00010F4C 217C 0000 0000 0004        		move.l	#Map_obj57,4(a0)
00010F54 317C 03BA 0002             		move.w	#$3BA,2(a0)
00010F5A 117C 0004 0001             		move.b	#4,1(a0)
00010F60 117C 0004 0018             		move.b	#4,$18(a0)
00010F66 117C 0008 0019             		move.b	#8,$19(a0)
00010F6C 3168 0008 003A             		move.w	8(a0),$3A(a0)
00010F72 3168 000C 0038             		move.w	$C(a0),$38(a0)
00010F78 117C 0098 0020             		move.b	#$98,$20(a0)	; SYZ specific code (chain hurts Sonic)
00010F7E 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010F84 6600                       		bne.s	loc_107E8
00010F86 117C 0000 0020             		move.b	#0,$20(a0)	; LZ specific code (chain doesn't hurt)
00010F8C 317C 0310 0002             		move.w	#$310,2(a0)
00010F92 217C 0000 0000 0004        		move.l	#Map_obj57a,4(a0)
00010F9A                            
00010F9A                            loc_107E8:
00010F9A 1228 0028                  		move.b	$28(a0),d1	; get object type
00010F9E 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00010FA2 4881                       		ext.w	d1
00010FA4 E741                       		asl.w	#3,d1		; multiply by 8
00010FA6 3141 003E                  		move.w	d1,$3E(a0)	; set object twirl speed
00010FAA 1028 0022                  		move.b	$22(a0),d0
00010FAE E418                       		ror.b	#2,d0
00010FB0 0200 00C0                  		andi.b	#-$40,d0
00010FB4 1140 0026                  		move.b	d0,$26(a0)
00010FB8 45E8 0029                  		lea	$29(a0),a2
00010FBC 1228 0028                  		move.b	$28(a0),d1	; get object type
00010FC0 0241 0007                  		andi.w	#7,d1		; read only the	2nd digit
00010FC4 14FC 0000                  		move.b	#0,(a2)+
00010FC8 3601                       		move.w	d1,d3
00010FCA E94B                       		lsl.w	#4,d3
00010FCC 1143 003C                  		move.b	d3,$3C(a0)
00010FD0 5341                       		subq.w	#1,d1		; set chain length (type-1)
00010FD2 6500                       		bcs.s	loc_10894
00010FD4 0828 0003 0028             		btst	#3,$28(a0)
00010FDA 6700                       		beq.s	Obj57_MakeChain
00010FDC 5341                       		subq.w	#1,d1
00010FDE 6500                       		bcs.s	loc_10894
00010FE0                            
00010FE0                            Obj57_MakeChain:
00010FE0 6100 D266                  		bsr.w	SingleObjLoad
00010FE4 6600                       		bne.s	loc_10894
00010FE6 5228 0029                  		addq.b	#1,$29(a0)
00010FEA 3A09                       		move.w	a1,d5
00010FEC 0445 D000                  		subi.w	#-$3000,d5
00010FF0 EC4D                       		lsr.w	#6,d5
00010FF2 0245 007F                  		andi.w	#$7F,d5
00010FF6 14C5                       		move.b	d5,(a2)+
00010FF8 137C 0004 0024             		move.b	#4,$24(a1)
00010FFE 1290                       		move.b	0(a0),0(a1)
00011000 2368 0004 0004             		move.l	4(a0),4(a1)
00011006 3368 0002 0002             		move.w	2(a0),2(a1)
0001100C 1368 0001 0001             		move.b	1(a0),1(a1)
00011012 1368 0018 0018             		move.b	$18(a0),$18(a1)
00011018 1368 0019 0019             		move.b	$19(a0),$19(a1)
0001101E 1368 0020 0020             		move.b	$20(a0),$20(a1)
00011024 0403 0010                  		subi.b	#$10,d3
00011028 1343 003C                  		move.b	d3,$3C(a1)
0001102C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00011032 6600                       		bne.s	loc_10890
00011034 4A03                       		tst.b	d3
00011036 6600                       		bne.s	loc_10890
00011038 137C 0002 001A             		move.b	#2,$1A(a1)
0001103E                            
0001103E                            loc_10890:
0001103E 51C9 FFA0                  		dbf	d1,Obj57_MakeChain ; repeat for	length of chain
00011042                            
00011042                            loc_10894:
00011042 3A08                       		move.w	a0,d5
00011044 0445 D000                  		subi.w	#-$3000,d5
00011048 EC4D                       		lsr.w	#6,d5
0001104A 0245 007F                  		andi.w	#$7F,d5
0001104E 14C5                       		move.b	d5,(a2)+
00011050 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00011056 6600                       		bne.s	Obj57_Move
00011058 117C 008B 0020             		move.b	#$8B,$20(a0)	; if yes, make last spikeball larger
0001105E 117C 0001 001A             		move.b	#1,$1A(a0)	; use different	frame
00011064                            
00011064                            Obj57_Move:				; XREF: Obj57_Index
00011064 6100 0000                  		bsr.w	Obj57_MoveSub
00011068 6000 0000                  		bra.w	Obj57_ChkDel
0001106C                            ; ===========================================================================
0001106C                            
0001106C                            Obj57_MoveSub:				; XREF: Obj57_Move
0001106C 3028 003E                  		move.w	$3E(a0),d0
00011070 D168 0026                  		add.w	d0,$26(a0)
00011074 1028 0026                  		move.b	$26(a0),d0
00011078 4EB9 0000 2CC4             		jsr	(CalcSine).l
0001107E 3428 0038                  		move.w	$38(a0),d2
00011082 3628 003A                  		move.w	$3A(a0),d3
00011086 45E8 0029                  		lea	$29(a0),a2
0001108A 7C00                       		moveq	#0,d6
0001108C 1C1A                       		move.b	(a2)+,d6
0001108E                            
0001108E                            Obj57_MoveLoop:
0001108E 7800                       		moveq	#0,d4
00011090 181A                       		move.b	(a2)+,d4
00011092 ED4C                       		lsl.w	#6,d4
00011094 0684 00FF D000             		addi.l	#$FFD000,d4
0001109A 2244                       		movea.l	d4,a1
0001109C 7800                       		moveq	#0,d4
0001109E 1829 003C                  		move.b	$3C(a1),d4
000110A2 2A04                       		move.l	d4,d5
000110A4 C9C0                       		muls.w	d0,d4
000110A6 E084                       		asr.l	#8,d4
000110A8 CBC1                       		muls.w	d1,d5
000110AA E085                       		asr.l	#8,d5
000110AC D842                       		add.w	d2,d4
000110AE DA43                       		add.w	d3,d5
000110B0 3344 000C                  		move.w	d4,$C(a1)
000110B4 3345 0008                  		move.w	d5,8(a1)
000110B8 51CE FFD4                  		dbf	d6,Obj57_MoveLoop
000110BC 4E75                       		rts	
000110BE                            ; ===========================================================================
000110BE                            
000110BE                            Obj57_ChkDel:				; XREF: Obj57_Move
000110BE 3028 003A                  		move.w	$3A(a0),d0
000110C2 0240 FF80                  		andi.w	#$FF80,d0
000110C6 3238 F700                  		move.w	($FFFFF700).w,d1
000110CA 0441 0080                  		subi.w	#$80,d1
000110CE 0241 FF80                  		andi.w	#$FF80,d1
000110D2 9041                       		sub.w	d1,d0
000110D4 0C40 0280                  		cmpi.w	#$280,d0
000110D8 6200 0000                  		bhi.w	Obj57_Delete
000110DC 6000 CCE4                  		bra.w	DisplaySprite
000110E0                            ; ===========================================================================
000110E0                            
000110E0                            Obj57_Delete:				; XREF: Obj57_ChkDel
000110E0 7400                       		moveq	#0,d2
000110E2 45E8 0029                  		lea	$29(a0),a2
000110E6 141A                       		move.b	(a2)+,d2
000110E8                            
000110E8                            Obj57_DelLoop:
000110E8 7000                       		moveq	#0,d0
000110EA 101A                       		move.b	(a2)+,d0
000110EC ED48                       		lsl.w	#6,d0
000110EE 0680 00FF D000             		addi.l	#$FFD000,d0
000110F4 2240                       		movea.l	d0,a1
000110F6 6100 CD08                  		bsr.w	DeleteObject2
000110FA 51CA FFEC                  		dbf	d2,Obj57_DelLoop ; delete all pieces of	chain
000110FE                            
000110FE 4E75                       		rts	
00011100                            ; ===========================================================================
00011100                            
00011100                            Obj57_Display:				; XREF: Obj57_Index
00011100 6000 CCC0                  		bra.w	DisplaySprite
00011104                            ; ===========================================================================
00011104                            ; ---------------------------------------------------------------------------
00011104                            ; Sprite mappings - chain of spiked balls (SYZ)
00011104                            ; ---------------------------------------------------------------------------
00011104                            Map_obj57:
00011104                            	include "_maps\obj57syz.asm"
00011104                            ; ---------------------------------------------------------------------------
00011104                            ; Sprite mappings - chain of spiked balls (SYZ)
00011104                            ; ---------------------------------------------------------------------------
00011104 0000                       		dc.w byte_10958-Map_obj57
00011106 01                         byte_10958:	dc.b 1
00011107 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001110C                            		even
0001110C                            		even
0001110C                            
0001110C                            ; ---------------------------------------------------------------------------
0001110C                            ; Sprite mappings - spiked ball	on a chain (LZ)
0001110C                            ; ---------------------------------------------------------------------------
0001110C                            Map_obj57a:
0001110C                            	include "_maps\obj57lz.asm"
0001110C                            ; ---------------------------------------------------------------------------
0001110C                            ; Sprite mappings - spiked ball	on a chain (LZ)
0001110C                            ; ---------------------------------------------------------------------------
0001110C 0000                       		dc.w byte_10964-Map_obj57a
0001110E 0000                       		dc.w byte_1096A-Map_obj57a
00011110 0000                       		dc.w byte_10970-Map_obj57a
00011112 01                         byte_10964:	dc.b 1
00011113 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00011118 01                         byte_1096A:	dc.b 1
00011119 F00F 0004 F0               		dc.b $F0, $F, 0, 4, $F0
0001111E 01                         byte_10970:	dc.b 1
0001111F F805 0014 F8               		dc.b $F8, 5, 0,	$14, $F8
00011124                            		even
00011124                            		even
00011124                            
00011124                            ; ===========================================================================
00011124                            ; ---------------------------------------------------------------------------
00011124                            ; Object 58 - giant spiked balls (SYZ)
00011124                            ; ---------------------------------------------------------------------------
00011124                            
00011124                            Obj58:					; XREF: Obj_Index
00011124 7000                       		moveq	#0,d0
00011126 1028 0024                  		move.b	$24(a0),d0
0001112A 323B 0000                  		move.w	Obj58_Index(pc,d0.w),d1
0001112E 4EFB 1000                  		jmp	Obj58_Index(pc,d1.w)
00011132                            ; ===========================================================================
00011132 0000                       Obj58_Index:	dc.w Obj58_Main-Obj58_Index
00011134 0000                       		dc.w Obj58_Move-Obj58_Index
00011136                            ; ===========================================================================
00011136                            
00011136                            Obj58_Main:				; XREF: Obj58_Index
00011136 5428 0024                  		addq.b	#2,$24(a0)
0001113A 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0)
00011142 317C 0396 0002             		move.w	#$396,2(a0)
00011148 117C 0004 0001             		move.b	#4,1(a0)
0001114E 117C 0004 0018             		move.b	#4,$18(a0)
00011154 117C 0018 0019             		move.b	#$18,$19(a0)
0001115A 3168 0008 003A             		move.w	8(a0),$3A(a0)
00011160 3168 000C 0038             		move.w	$C(a0),$38(a0)
00011166 117C 0086 0020             		move.b	#$86,$20(a0)
0001116C 1228 0028                  		move.b	$28(a0),d1	; get object type
00011170 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00011174 4881                       		ext.w	d1
00011176 E741                       		asl.w	#3,d1		; multiply by 8
00011178 3141 003E                  		move.w	d1,$3E(a0)	; set object speed
0001117C 1028 0022                  		move.b	$22(a0),d0
00011180 E418                       		ror.b	#2,d0
00011182 0200 00C0                  		andi.b	#$C0,d0
00011186 1140 0026                  		move.b	d0,$26(a0)
0001118A 117C 0050 003C             		move.b	#$50,$3C(a0)	; set diameter of circle of rotation
00011190                            
00011190                            Obj58_Move:				; XREF: Obj58_Index
00011190 7000                       		moveq	#0,d0
00011192 1028 0028                  		move.b	$28(a0),d0	; get object type
00011196 0240 0007                  		andi.w	#7,d0		; read only the	2nd digit
0001119A D040                       		add.w	d0,d0
0001119C 323B 0000                  		move.w	Obj58_TypeIndex(pc,d0.w),d1
000111A0 4EBB 1000                  		jsr	Obj58_TypeIndex(pc,d1.w)
000111A4 3028 003A                  		move.w	$3A(a0),d0
000111A8 0240 FF80                  		andi.w	#$FF80,d0
000111AC 3238 F700                  		move.w	($FFFFF700).w,d1
000111B0 0441 0080                  		subi.w	#$80,d1
000111B4 0241 FF80                  		andi.w	#$FF80,d1
000111B8 9041                       		sub.w	d1,d0
000111BA 0C40 0280                  		cmpi.w	#$280,d0
000111BE 6200 CC3E                  		bhi.w	DeleteObject
000111C2 6000 CBFE                  		bra.w	DisplaySprite
000111C6                            ; ===========================================================================
000111C6 0000                       Obj58_TypeIndex:dc.w Obj58_Type00-Obj58_TypeIndex
000111C8 0000                       		dc.w Obj58_Type01-Obj58_TypeIndex
000111CA 0000                       		dc.w Obj58_Type02-Obj58_TypeIndex
000111CC 0000                       		dc.w Obj58_Type03-Obj58_TypeIndex
000111CE                            ; ===========================================================================
000111CE                            
000111CE                            Obj58_Type00:				; XREF: Obj58_TypeIndex
000111CE 4E75                       		rts	
000111D0                            ; ===========================================================================
000111D0                            
000111D0                            Obj58_Type01:				; XREF: Obj58_TypeIndex
000111D0 323C 0060                  		move.w	#$60,d1
000111D4 7000                       		moveq	#0,d0
000111D6 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
000111DA 0828 0000 0022             		btst	#0,$22(a0)
000111E0 6700                       		beq.s	loc_10A38
000111E2 4440                       		neg.w	d0
000111E4 D041                       		add.w	d1,d0
000111E6                            
000111E6                            loc_10A38:
000111E6 3228 003A                  		move.w	$3A(a0),d1
000111EA 9240                       		sub.w	d0,d1
000111EC 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
000111F0 4E75                       		rts	
000111F2                            ; ===========================================================================
000111F2                            
000111F2                            Obj58_Type02:				; XREF: Obj58_TypeIndex
000111F2 323C 0060                  		move.w	#$60,d1
000111F6 7000                       		moveq	#0,d0
000111F8 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
000111FC 0828 0000 0022             		btst	#0,$22(a0)
00011202 6700                       		beq.s	loc_10A5C
00011204 4440                       		neg.w	d0
00011206 0640 0080                  		addi.w	#$80,d0
0001120A                            
0001120A                            loc_10A5C:
0001120A 3228 0038                  		move.w	$38(a0),d1
0001120E 9240                       		sub.w	d0,d1
00011210 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
00011214 4E75                       		rts	
00011216                            ; ===========================================================================
00011216                            
00011216                            Obj58_Type03:				; XREF: Obj58_TypeIndex
00011216 3028 003E                  		move.w	$3E(a0),d0
0001121A D168 0026                  		add.w	d0,$26(a0)
0001121E 1028 0026                  		move.b	$26(a0),d0
00011222 4EB9 0000 2CC4             		jsr	(CalcSine).l
00011228 3428 0038                  		move.w	$38(a0),d2
0001122C 3628 003A                  		move.w	$3A(a0),d3
00011230 7800                       		moveq	#0,d4
00011232 1828 003C                  		move.b	$3C(a0),d4
00011236 2A04                       		move.l	d4,d5
00011238 C9C0                       		muls.w	d0,d4
0001123A E084                       		asr.l	#8,d4
0001123C CBC1                       		muls.w	d1,d5
0001123E E085                       		asr.l	#8,d5
00011240 D842                       		add.w	d2,d4
00011242 DA43                       		add.w	d3,d5
00011244 3144 000C                  		move.w	d4,$C(a0)
00011248 3145 0008                  		move.w	d5,8(a0)
0001124C 4E75                       		rts	
0001124E                            ; ===========================================================================
0001124E                            ; ---------------------------------------------------------------------------
0001124E                            ; Sprite mappings - SBZ	spiked ball on a chain
0001124E                            ; ---------------------------------------------------------------------------
0001124E                            Map_obj15b:
0001124E                            	include "_maps\obj15sbz.asm"
0001124E                            ; ---------------------------------------------------------------------------
0001124E                            ; Sprite mappings - spiked ball on a chain (SBZ)
0001124E                            ; ---------------------------------------------------------------------------
0001124E 0000 0000                  		dc.w byte_10AA6-Map_obj15b, byte_10AC0-Map_obj15b
00011252 0000                       		dc.w byte_10AC6-Map_obj15b
00011254 05                         byte_10AA6:	dc.b 5
00011255 E804 0000 F8               		dc.b $E8, 4, 0,	0, $F8
0001125A F00F 0002 F0               		dc.b $F0, $F, 0, 2, $F0
0001125F F801 0012 E8               		dc.b $F8, 1, 0,	$12, $E8
00011264 F801 0014 10               		dc.b $F8, 1, 0,	$14, $10
00011269 1004 0016 F8               		dc.b $10, 4, 0,	$16, $F8
0001126E 01                         byte_10AC0:	dc.b 1
0001126F F805 0020 F8               		dc.b $F8, 5, 0,	$20, $F8
00011274 02                         byte_10AC6:	dc.b 2
00011275 F80D 0018 F0               		dc.b $F8, $D, 0, $18, $F0
0001127A E80D 1018 F0               		dc.b $E8, $D, $10, $18,	$F0
00011280 00                         		even
00011280 00                         		even
00011280                            
00011280                            ; ===========================================================================
00011280                            ; ---------------------------------------------------------------------------
00011280                            ; Object 59 - platforms	that move when you stand on them (SLZ)
00011280                            ; ---------------------------------------------------------------------------
00011280                            
00011280                            Obj59:					; XREF: Obj_Index
00011280 7000                       		moveq	#0,d0
00011282 1028 0024                  		move.b	$24(a0),d0
00011286 323B 0000                  		move.w	Obj59_Index(pc,d0.w),d1
0001128A 4EBB 1000                  		jsr	Obj59_Index(pc,d1.w)
0001128E 3028 0032                  		move.w	$32(a0),d0
00011292 0240 FF80                  		andi.w	#$FF80,d0
00011296 3238 F700                  		move.w	($FFFFF700).w,d1
0001129A 0441 0080                  		subi.w	#$80,d1
0001129E 0241 FF80                  		andi.w	#$FF80,d1
000112A2 9041                       		sub.w	d1,d0
000112A4 0C40 0280                  		cmpi.w	#$280,d0
000112A8 6200 CB54                  		bhi.w	DeleteObject
000112AC 6000 CB14                  		bra.w	DisplaySprite
000112B0                            ; ===========================================================================
000112B0 0000                       Obj59_Index:	dc.w Obj59_Main-Obj59_Index
000112B2 0000                       		dc.w Obj59_Platform-Obj59_Index
000112B4 0000                       		dc.w Obj59_Action-Obj59_Index
000112B6 0000                       		dc.w Obj59_MakeMulti-Obj59_Index
000112B8                            
000112B8 2800                       Obj59_Var1:	dc.b $28, 0		; width, frame number
000112BA                            
000112BA 1001                       Obj59_Var2:	dc.b $10, 1		; width, action	type
000112BC 2001                       		dc.b $20, 1
000112BE 3401                       		dc.b $34, 1
000112C0 1003                       		dc.b $10, 3
000112C2 2003                       		dc.b $20, 3
000112C4 3403                       		dc.b $34, 3
000112C6 1401                       		dc.b $14, 1
000112C8 2401                       		dc.b $24, 1
000112CA 2C01                       		dc.b $2C, 1
000112CC 1403                       		dc.b $14, 3
000112CE 2403                       		dc.b $24, 3
000112D0 2C03                       		dc.b $2C, 3
000112D2 2005                       		dc.b $20, 5
000112D4 2007                       		dc.b $20, 7
000112D6 3009                       		dc.b $30, 9
000112D8                            ; ===========================================================================
000112D8                            
000112D8                            Obj59_Main:				; XREF: Obj59_Index
000112D8 5428 0024                  		addq.b	#2,$24(a0)
000112DC 7000                       		moveq	#0,d0
000112DE 1028 0028                  		move.b	$28(a0),d0
000112E2 6A00                       		bpl.s	Obj59_Main2
000112E4 5828 0024                  		addq.b	#4,$24(a0)
000112E8 0240 007F                  		andi.w	#$7F,d0
000112EC C0FC 0006                  		mulu.w	#6,d0
000112F0 3140 003C                  		move.w	d0,$3C(a0)
000112F4 3140 003E                  		move.w	d0,$3E(a0)
000112F8 588F                       		addq.l	#4,sp
000112FA 4E75                       		rts	
000112FC                            ; ===========================================================================
000112FC                            
000112FC                            Obj59_Main2:
000112FC E648                       		lsr.w	#3,d0
000112FE 0240 001E                  		andi.w	#$1E,d0
00011302 45FB 00B4                  		lea	Obj59_Var1(pc,d0.w),a2
00011306 115A 0019                  		move.b	(a2)+,$19(a0)
0001130A 115A 001A                  		move.b	(a2)+,$1A(a0)
0001130E 7000                       		moveq	#0,d0
00011310 1028 0028                  		move.b	$28(a0),d0
00011314 D040                       		add.w	d0,d0
00011316 0240 001E                  		andi.w	#$1E,d0
0001131A 45FB 009E                  		lea	Obj59_Var2(pc,d0.w),a2
0001131E 101A                       		move.b	(a2)+,d0
00011320 E548                       		lsl.w	#2,d0
00011322 3140 003C                  		move.w	d0,$3C(a0)
00011326 115A 0028                  		move.b	(a2)+,$28(a0)
0001132A 217C 0000 0000 0004        		move.l	#Map_obj59,4(a0)
00011332 317C 4000 0002             		move.w	#$4000,2(a0)
00011338 117C 0004 0001             		move.b	#4,1(a0)
0001133E 117C 0004 0018             		move.b	#4,$18(a0)
00011344 3168 0008 0032             		move.w	8(a0),$32(a0)
0001134A 3168 000C 0030             		move.w	$C(a0),$30(a0)
00011350                            
00011350                            Obj59_Platform:				; XREF: Obj59_Index
00011350 7200                       		moveq	#0,d1
00011352 1228 0019                  		move.b	$19(a0),d1
00011356 4EB9 0000 7A4C             		jsr	(PlatformObject).l
0001135C 6000 0000                  		bra.w	Obj59_Types
00011360                            ; ===========================================================================
00011360                            
00011360                            Obj59_Action:				; XREF: Obj59_Index
00011360 7200                       		moveq	#0,d1
00011362 1228 0019                  		move.b	$19(a0),d1
00011366 4EB9 0000 7BC0             		jsr	(ExitPlatform).l
0001136C 3F28 0008                  		move.w	8(a0),-(sp)
00011370 6100 0000                  		bsr.w	Obj59_Types
00011374 341F                       		move.w	(sp)+,d2
00011376 4A10                       		tst.b	0(a0)
00011378 6700                       		beq.s	locret_10BD4
0001137A 4EF9 0000 812A             		jmp	(MvSonicOnPtfm2).l
00011380                            ; ===========================================================================
00011380                            
00011380                            locret_10BD4:
00011380 4E75                       		rts	
00011382                            ; ===========================================================================
00011382                            
00011382                            Obj59_Types:
00011382 7000                       		moveq	#0,d0
00011384 1028 0028                  		move.b	$28(a0),d0
00011388 0240 000F                  		andi.w	#$F,d0
0001138C D040                       		add.w	d0,d0
0001138E 323B 0000                  		move.w	Obj59_TypeIndex(pc,d0.w),d1
00011392 4EFB 1000                  		jmp	Obj59_TypeIndex(pc,d1.w)
00011396                            ; ===========================================================================
00011396 0000 0000                  Obj59_TypeIndex:dc.w Obj59_Type00-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
0001139A 0000 0000                  		dc.w Obj59_Type02-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
0001139E 0000 0000                  		dc.w Obj59_Type04-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
000113A2 0000 0000                  		dc.w Obj59_Type06-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
000113A6 0000 0000                  		dc.w Obj59_Type08-Obj59_TypeIndex, Obj59_Type09-Obj59_TypeIndex
000113AA                            ; ===========================================================================
000113AA                            
000113AA                            Obj59_Type00:				; XREF: Obj59_TypeIndex
000113AA 4E75                       		rts	
000113AC                            ; ===========================================================================
000113AC                            
000113AC                            Obj59_Type01:				; XREF: Obj59_TypeIndex
000113AC 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; check	if Sonic is standing on	the object
000113B2 6600                       		bne.s	locret_10C0C
000113B4 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
000113B8                            
000113B8                            locret_10C0C:
000113B8 4E75                       		rts	
000113BA                            ; ===========================================================================
000113BA                            
000113BA                            Obj59_Type02:				; XREF: Obj59_TypeIndex
000113BA 6100 0000                  		bsr.w	Obj59_Move
000113BE 3028 0034                  		move.w	$34(a0),d0
000113C2 4440                       		neg.w	d0
000113C4 D068 0030                  		add.w	$30(a0),d0
000113C8 3140 000C                  		move.w	d0,$C(a0)
000113CC 4E75                       		rts	
000113CE                            ; ===========================================================================
000113CE                            
000113CE                            Obj59_Type04:				; XREF: Obj59_TypeIndex
000113CE 6100 0000                  		bsr.w	Obj59_Move
000113D2 3028 0034                  		move.w	$34(a0),d0
000113D6 D068 0030                  		add.w	$30(a0),d0
000113DA 3140 000C                  		move.w	d0,$C(a0)
000113DE 4E75                       		rts	
000113E0                            ; ===========================================================================
000113E0                            
000113E0                            Obj59_Type06:				; XREF: Obj59_TypeIndex
000113E0 6100 0000                  		bsr.w	Obj59_Move
000113E4 3028 0034                  		move.w	$34(a0),d0
000113E8 E240                       		asr.w	#1,d0
000113EA 4440                       		neg.w	d0
000113EC D068 0030                  		add.w	$30(a0),d0
000113F0 3140 000C                  		move.w	d0,$C(a0)
000113F4 3028 0034                  		move.w	$34(a0),d0
000113F8 D068 0032                  		add.w	$32(a0),d0
000113FC 3140 0008                  		move.w	d0,8(a0)
00011400 4E75                       		rts	
00011402                            ; ===========================================================================
00011402                            
00011402                            Obj59_Type08:				; XREF: Obj59_TypeIndex
00011402 6100 0000                  		bsr.w	Obj59_Move
00011406 3028 0034                  		move.w	$34(a0),d0
0001140A E240                       		asr.w	#1,d0
0001140C D068 0030                  		add.w	$30(a0),d0
00011410 3140 000C                  		move.w	d0,$C(a0)
00011414 3028 0034                  		move.w	$34(a0),d0
00011418 4440                       		neg.w	d0
0001141A D068 0032                  		add.w	$32(a0),d0
0001141E 3140 0008                  		move.w	d0,8(a0)
00011422 4E75                       		rts	
00011424                            ; ===========================================================================
00011424                            
00011424                            Obj59_Type09:				; XREF: Obj59_TypeIndex
00011424 6100 0000                  		bsr.w	Obj59_Move
00011428 3028 0034                  		move.w	$34(a0),d0
0001142C 4440                       		neg.w	d0
0001142E D068 0030                  		add.w	$30(a0),d0
00011432 3140 000C                  		move.w	d0,$C(a0)
00011436 4A28 0028                  		tst.b	$28(a0)
0001143A 6700 0000                  		beq.w	loc_10C94
0001143E 4E75                       		rts	
00011440                            ; ===========================================================================
00011440                            
00011440                            loc_10C94:
00011440 0828 0003 0022             		btst	#3,$22(a0)
00011446 6700                       		beq.s	Obj59_Delete
00011448 08E9 0001 0022             		bset	#1,$22(a1)
0001144E 08A9 0003 0022             		bclr	#3,$22(a1)
00011454 137C 0002 0024             		move.b	#2,$24(a1)
0001145A                            
0001145A                            Obj59_Delete:
0001145A 6000 C9A2                  		bra.w	DeleteObject
0001145E                            
0001145E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001145E                            
0001145E                            
0001145E                            Obj59_Move:				; XREF: Obj59_Type02; et al
0001145E 3028 0038                  		move.w	$38(a0),d0
00011462 4A28 003A                  		tst.b	$3A(a0)
00011466 6600                       		bne.s	loc_10CC8
00011468 0C40 0800                  		cmpi.w	#$800,d0
0001146C 6400                       		bcc.s	loc_10CD0
0001146E 0640 0010                  		addi.w	#$10,d0
00011472 6000                       		bra.s	loc_10CD0
00011474                            ; ===========================================================================
00011474                            
00011474                            loc_10CC8:
00011474 4A40                       		tst.w	d0
00011476 6700                       		beq.s	loc_10CD0
00011478 0440 0010                  		subi.w	#$10,d0
0001147C                            
0001147C                            loc_10CD0:
0001147C 3140 0038                  		move.w	d0,$38(a0)
00011480 48C0                       		ext.l	d0
00011482 E180                       		asl.l	#8,d0
00011484 D0A8 0034                  		add.l	$34(a0),d0
00011488 2140 0034                  		move.l	d0,$34(a0)
0001148C 4840                       		swap	d0
0001148E 3428 003C                  		move.w	$3C(a0),d2
00011492 B042                       		cmp.w	d2,d0
00011494 6300                       		bls.s	loc_10CF0
00011496 117C 0001 003A             		move.b	#1,$3A(a0)
0001149C                            
0001149C                            loc_10CF0:
0001149C D442                       		add.w	d2,d2
0001149E B042                       		cmp.w	d2,d0
000114A0 6600                       		bne.s	locret_10CFA
000114A2 4228 0028                  		clr.b	$28(a0)
000114A6                            
000114A6                            locret_10CFA:
000114A6 4E75                       		rts	
000114A8                            ; End of function Obj59_Move
000114A8                            
000114A8                            ; ===========================================================================
000114A8                            
000114A8                            Obj59_MakeMulti:			; XREF: Obj59_Index
000114A8 5368 003C                  		subq.w	#1,$3C(a0)
000114AC 6600                       		bne.s	Obj59_ChkDel
000114AE 3168 003E 003C             		move.w	$3E(a0),$3C(a0)
000114B4 6100 CD92                  		bsr.w	SingleObjLoad
000114B8 6600                       		bne.s	Obj59_ChkDel
000114BA 12BC 0059                  		move.b	#$59,0(a1)	; duplicate the	object
000114BE 3368 0008 0008             		move.w	8(a0),8(a1)
000114C4 3368 000C 000C             		move.w	$C(a0),$C(a1)
000114CA 137C 000E 0028             		move.b	#$E,$28(a1)
000114D0                            
000114D0                            Obj59_ChkDel:
000114D0 588F                       		addq.l	#4,sp
000114D2 3028 0008                  		move.w	8(a0),d0
000114D6 0240 FF80                  		andi.w	#$FF80,d0
000114DA 3238 F700                  		move.w	($FFFFF700).w,d1
000114DE 0441 0080                  		subi.w	#$80,d1
000114E2 0241 FF80                  		andi.w	#$FF80,d1
000114E6 9041                       		sub.w	d1,d0
000114E8 0C40 0280                  		cmpi.w	#$280,d0
000114EC 6200 C910                  		bhi.w	DeleteObject
000114F0 4E75                       		rts	
000114F2                            ; ===========================================================================
000114F2                            ; ---------------------------------------------------------------------------
000114F2                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
000114F2                            ; ---------------------------------------------------------------------------
000114F2                            Map_obj59:
000114F2                            	include "_maps\obj59.asm"
000114F2                            ; ---------------------------------------------------------------------------
000114F2                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
000114F2                            ; ---------------------------------------------------------------------------
000114F2 0000                       		dc.w byte_10D4A-Map_obj59
000114F4 03                         byte_10D4A:	dc.b 3
000114F5 F80F 0041 D8               		dc.b $F8, $F, 0, $41, $D8
000114FA F80F 0041 F8               		dc.b $F8, $F, 0, $41, $F8
000114FF F807 0041 18               		dc.b $F8, 7, 0,	$41, $18
00011504                            		even
00011504                            		even
00011504                            
00011504                            ; ===========================================================================
00011504                            ; ---------------------------------------------------------------------------
00011504                            ; Object 5A - platforms	moving in circles (SLZ)
00011504                            ; ---------------------------------------------------------------------------
00011504                            
00011504                            Obj5A:					; XREF: Obj_Index
00011504 7000                       		moveq	#0,d0
00011506 1028 0024                  		move.b	$24(a0),d0
0001150A 323B 0000                  		move.w	Obj5A_Index(pc,d0.w),d1
0001150E 4EBB 1000                  		jsr	Obj5A_Index(pc,d1.w)
00011512 3028 0032                  		move.w	$32(a0),d0
00011516 0240 FF80                  		andi.w	#$FF80,d0
0001151A 3238 F700                  		move.w	($FFFFF700).w,d1
0001151E 0441 0080                  		subi.w	#$80,d1
00011522 0241 FF80                  		andi.w	#$FF80,d1
00011526 9041                       		sub.w	d1,d0
00011528 0C40 0280                  		cmpi.w	#$280,d0
0001152C 6200 C8D0                  		bhi.w	DeleteObject
00011530 6000 C890                  		bra.w	DisplaySprite
00011534                            ; ===========================================================================
00011534 0000                       Obj5A_Index:	dc.w Obj5A_Main-Obj5A_Index
00011536 0000                       		dc.w Obj5A_Platform-Obj5A_Index
00011538 0000                       		dc.w Obj5A_Action-Obj5A_Index
0001153A                            ; ===========================================================================
0001153A                            
0001153A                            Obj5A_Main:				; XREF: Obj5A_Index
0001153A 5428 0024                  		addq.b	#2,$24(a0)
0001153E 217C 0000 0000 0004        		move.l	#Map_obj5A,4(a0)
00011546 317C 4000 0002             		move.w	#$4000,2(a0)
0001154C 117C 0004 0001             		move.b	#4,1(a0)
00011552 117C 0004 0018             		move.b	#4,$18(a0)
00011558 117C 0018 0019             		move.b	#$18,$19(a0)
0001155E 3168 0008 0032             		move.w	8(a0),$32(a0)
00011564 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001156A                            
0001156A                            Obj5A_Platform:				; XREF: Obj5A_Index
0001156A 7200                       		moveq	#0,d1
0001156C 1228 0019                  		move.b	$19(a0),d1
00011570 4EB9 0000 7A4C             		jsr	(PlatformObject).l
00011576 6000 0000                  		bra.w	Obj5A_Types
0001157A                            ; ===========================================================================
0001157A                            
0001157A                            Obj5A_Action:				; XREF: Obj5A_Index
0001157A 7200                       		moveq	#0,d1
0001157C 1228 0019                  		move.b	$19(a0),d1
00011580 4EB9 0000 7BC0             		jsr	(ExitPlatform).l
00011586 3F28 0008                  		move.w	8(a0),-(sp)
0001158A 6100 0000                  		bsr.w	Obj5A_Types
0001158E 341F                       		move.w	(sp)+,d2
00011590 4EF9 0000 812A             		jmp	(MvSonicOnPtfm2).l
00011596                            ; ===========================================================================
00011596                            
00011596                            Obj5A_Types:
00011596 7000                       		moveq	#0,d0
00011598 1028 0028                  		move.b	$28(a0),d0
0001159C 0240 000C                  		andi.w	#$C,d0
000115A0 E248                       		lsr.w	#1,d0
000115A2 323B 0000                  		move.w	Obj5A_TypeIndex(pc,d0.w),d1
000115A6 4EFB 1000                  		jmp	Obj5A_TypeIndex(pc,d1.w)
000115AA                            ; ===========================================================================
000115AA 0000                       Obj5A_TypeIndex:dc.w Obj5A_Type00-Obj5A_TypeIndex
000115AC 0000                       		dc.w Obj5A_Type04-Obj5A_TypeIndex
000115AE                            ; ===========================================================================
000115AE                            
000115AE                            Obj5A_Type00:				; XREF: Obj5A_TypeIndex
000115AE 1238 FE80                  		move.b	($FFFFFE80).w,d1
000115B2 0401 0050                  		subi.b	#$50,d1
000115B6 4881                       		ext.w	d1
000115B8 1438 FE84                  		move.b	($FFFFFE84).w,d2
000115BC 0402 0050                  		subi.b	#$50,d2
000115C0 4882                       		ext.w	d2
000115C2 0828 0000 0028             		btst	#0,$28(a0)
000115C8 6700                       		beq.s	loc_10E24
000115CA 4441                       		neg.w	d1
000115CC 4442                       		neg.w	d2
000115CE                            
000115CE                            loc_10E24:
000115CE 0828 0001 0028             		btst	#1,$28(a0)
000115D4 6700                       		beq.s	loc_10E30
000115D6 4441                       		neg.w	d1
000115D8 C342                       		exg	d1,d2
000115DA                            
000115DA                            loc_10E30:
000115DA D268 0032                  		add.w	$32(a0),d1
000115DE 3141 0008                  		move.w	d1,8(a0)
000115E2 D468 0030                  		add.w	$30(a0),d2
000115E6 3142 000C                  		move.w	d2,$C(a0)
000115EA 4E75                       		rts	
000115EC                            ; ===========================================================================
000115EC                            
000115EC                            Obj5A_Type04:				; XREF: Obj5A_TypeIndex
000115EC 1238 FE80                  		move.b	($FFFFFE80).w,d1
000115F0 0401 0050                  		subi.b	#$50,d1
000115F4 4881                       		ext.w	d1
000115F6 1438 FE84                  		move.b	($FFFFFE84).w,d2
000115FA 0402 0050                  		subi.b	#$50,d2
000115FE 4882                       		ext.w	d2
00011600 0828 0000 0028             		btst	#0,$28(a0)
00011606 6700                       		beq.s	loc_10E62
00011608 4441                       		neg.w	d1
0001160A 4442                       		neg.w	d2
0001160C                            
0001160C                            loc_10E62:
0001160C 0828 0001 0028             		btst	#1,$28(a0)
00011612 6700                       		beq.s	loc_10E6E
00011614 4441                       		neg.w	d1
00011616 C342                       		exg	d1,d2
00011618                            
00011618                            loc_10E6E:
00011618 4441                       		neg.w	d1
0001161A D268 0032                  		add.w	$32(a0),d1
0001161E 3141 0008                  		move.w	d1,8(a0)
00011622 D468 0030                  		add.w	$30(a0),d2
00011626 3142 000C                  		move.w	d2,$C(a0)
0001162A 4E75                       		rts	
0001162C                            ; ===========================================================================
0001162C                            ; ---------------------------------------------------------------------------
0001162C                            ; Sprite mappings - platforms that move	in circles (SLZ)
0001162C                            ; ---------------------------------------------------------------------------
0001162C                            Map_obj5A:
0001162C                            	include "_maps\obj5A.asm"
0001162C                            ; ---------------------------------------------------------------------------
0001162C                            ; Sprite mappings - platforms that move	in circles (SLZ)
0001162C                            ; ---------------------------------------------------------------------------
0001162C 0000                       		dc.w byte_10E84-Map_obj5A
0001162E 02                         byte_10E84:	dc.b 2
0001162F F809 0051 E8               		dc.b $F8, 9, 0,	$51, $E8
00011634 F809 0851 00               		dc.b $F8, 9, 8,	$51, 0
0001163A 00                         		even
0001163A 00                         		even
0001163A                            
0001163A                            ; ===========================================================================
0001163A                            ; ---------------------------------------------------------------------------
0001163A                            ; Object 5B - blocks that form a staircase (SLZ)
0001163A                            ; ---------------------------------------------------------------------------
0001163A                            
0001163A                            Obj5B:					; XREF: Obj_Index
0001163A 7000                       		moveq	#0,d0
0001163C 1028 0024                  		move.b	$24(a0),d0
00011640 323B 0000                  		move.w	Obj5B_Index(pc,d0.w),d1
00011644 4EBB 1000                  		jsr	Obj5B_Index(pc,d1.w)
00011648 3028 0030                  		move.w	$30(a0),d0
0001164C 0240 FF80                  		andi.w	#$FF80,d0
00011650 3238 F700                  		move.w	($FFFFF700).w,d1
00011654 0441 0080                  		subi.w	#$80,d1
00011658 0241 FF80                  		andi.w	#$FF80,d1
0001165C 9041                       		sub.w	d1,d0
0001165E 0C40 0280                  		cmpi.w	#$280,d0
00011662 6200 C79A                  		bhi.w	DeleteObject
00011666 6000 C75A                  		bra.w	DisplaySprite
0001166A                            ; ===========================================================================
0001166A 0000                       Obj5B_Index:	dc.w Obj5B_Main-Obj5B_Index
0001166C 0000                       		dc.w Obj5B_Move-Obj5B_Index
0001166E 0000                       		dc.w Obj5B_Solid-Obj5B_Index
00011670                            ; ===========================================================================
00011670                            
00011670                            Obj5B_Main:				; XREF: Obj5B_Index
00011670 5428 0024                  		addq.b	#2,$24(a0)
00011674 7638                       		moveq	#$38,d3
00011676 7801                       		moveq	#1,d4
00011678 0828 0000 0022             		btst	#0,$22(a0)
0001167E 6700                       		beq.s	loc_10EDA
00011680 763B                       		moveq	#$3B,d3
00011682 78FF                       		moveq	#-1,d4
00011684                            
00011684                            loc_10EDA:
00011684 3428 0008                  		move.w	8(a0),d2
00011688 2248                       		movea.l	a0,a1
0001168A 7203                       		moveq	#3,d1
0001168C 6000                       		bra.s	Obj5B_MakeBlocks
0001168E                            ; ===========================================================================
0001168E                            
0001168E                            Obj5B_Loop:
0001168E 6100 CBCE                  		bsr.w	SingleObjLoad2
00011692 6600 0000                  		bne.w	Obj5B_Move
00011696 137C 0004 0024             		move.b	#4,$24(a1)
0001169C                            
0001169C                            Obj5B_MakeBlocks:			; XREF: Obj5B_Main
0001169C 12BC 005B                  		move.b	#$5B,0(a1)	; load another block object
000116A0 237C 0000 0000 0004        		move.l	#Map_obj5B,4(a1)
000116A8 337C 4000 0002             		move.w	#$4000,2(a1)
000116AE 137C 0004 0001             		move.b	#4,1(a1)
000116B4 137C 0003 0018             		move.b	#3,$18(a1)
000116BA 137C 0010 0019             		move.b	#$10,$19(a1)
000116C0 1368 0028 0028             		move.b	$28(a0),$28(a1)
000116C6 3342 0008                  		move.w	d2,8(a1)
000116CA 3368 000C 000C             		move.w	$C(a0),$C(a1)
000116D0 3368 0008 0030             		move.w	8(a0),$30(a1)
000116D6 3369 000C 0032             		move.w	$C(a1),$32(a1)
000116DC 0642 0020                  		addi.w	#$20,d2
000116E0 1343 0037                  		move.b	d3,$37(a1)
000116E4 2348 003C                  		move.l	a0,$3C(a1)
000116E8 D604                       		add.b	d4,d3
000116EA 51C9 FFA2                  		dbf	d1,Obj5B_Loop	; repeat sequence 3 times
000116EE                            
000116EE                            Obj5B_Move:				; XREF: Obj5B_Index
000116EE 7000                       		moveq	#0,d0
000116F0 1028 0028                  		move.b	$28(a0),d0
000116F4 0240 0007                  		andi.w	#7,d0
000116F8 D040                       		add.w	d0,d0
000116FA 323B 0000                  		move.w	Obj5B_TypeIndex(pc,d0.w),d1
000116FE 4EBB 1000                  		jsr	Obj5B_TypeIndex(pc,d1.w)
00011702                            
00011702                            Obj5B_Solid:				; XREF: Obj5B_Index
00011702 2468 003C                  		movea.l	$3C(a0),a2
00011706 7000                       		moveq	#0,d0
00011708 1028 0037                  		move.b	$37(a0),d0
0001170C 1032 0000                  		move.b	(a2,d0.w),d0
00011710 D068 0032                  		add.w	$32(a0),d0
00011714 3140 000C                  		move.w	d0,$C(a0)
00011718 7200                       		moveq	#0,d1
0001171A 1228 0019                  		move.b	$19(a0),d1
0001171E 0641 000B                  		addi.w	#$B,d1
00011722 343C 0010                  		move.w	#$10,d2
00011726 363C 0011                  		move.w	#$11,d3
0001172A 3828 0008                  		move.w	8(a0),d4
0001172E 6100 EA62                  		bsr.w	SolidObject
00011732 4A04                       		tst.b	d4
00011734 6A00                       		bpl.s	loc_10F92
00011736 1544 0036                  		move.b	d4,$36(a2)
0001173A                            
0001173A                            loc_10F92:
0001173A 0828 0003 0022             		btst	#3,$22(a0)
00011740 6700                       		beq.s	locret_10FA0
00011742 157C 0001 0036             		move.b	#1,$36(a2)
00011748                            
00011748                            locret_10FA0:
00011748 4E75                       		rts	
0001174A                            ; ===========================================================================
0001174A 0000                       Obj5B_TypeIndex:dc.w Obj5B_Type00-Obj5B_TypeIndex
0001174C 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
0001174E 0000                       		dc.w Obj5B_Type02-Obj5B_TypeIndex
00011750 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
00011752                            ; ===========================================================================
00011752                            
00011752                            Obj5B_Type00:				; XREF: Obj5B_TypeIndex
00011752 4A68 0034                  		tst.w	$34(a0)
00011756 6600                       		bne.s	loc_10FC0
00011758 0C28 0001 0036             		cmpi.b	#1,$36(a0)
0001175E 6600                       		bne.s	locret_10FBE
00011760 317C 001E 0034             		move.w	#$1E,$34(a0)
00011766                            
00011766                            locret_10FBE:
00011766 4E75                       		rts	
00011768                            ; ===========================================================================
00011768                            
00011768                            loc_10FC0:
00011768 5368 0034                  		subq.w	#1,$34(a0)
0001176C 66F8                       		bne.s	locret_10FBE
0001176E 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00011772 4E75                       		rts	
00011774                            ; ===========================================================================
00011774                            
00011774                            Obj5B_Type02:				; XREF: Obj5B_TypeIndex
00011774 4A68 0034                  		tst.w	$34(a0)
00011778 6600                       		bne.s	loc_10FE0
0001177A 4A28 0036                  		tst.b	$36(a0)
0001177E 6A00                       		bpl.s	locret_10FDE
00011780 317C 003C 0034             		move.w	#$3C,$34(a0)
00011786                            
00011786                            locret_10FDE:
00011786 4E75                       		rts	
00011788                            ; ===========================================================================
00011788                            
00011788                            loc_10FE0:
00011788 5368 0034                  		subq.w	#1,$34(a0)
0001178C 6600                       		bne.s	loc_10FEC
0001178E 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00011792 4E75                       		rts	
00011794                            ; ===========================================================================
00011794                            
00011794                            loc_10FEC:
00011794 43E8 0038                  		lea	$38(a0),a1
00011798 3028 0034                  		move.w	$34(a0),d0
0001179C E408                       		lsr.b	#2,d0
0001179E 0200 0001                  		andi.b	#1,d0
000117A2 12C0                       		move.b	d0,(a1)+
000117A4 0A00 0001                  		eori.b	#1,d0
000117A8 12C0                       		move.b	d0,(a1)+
000117AA 0A00 0001                  		eori.b	#1,d0
000117AE 12C0                       		move.b	d0,(a1)+
000117B0 0A00 0001                  		eori.b	#1,d0
000117B4 12C0                       		move.b	d0,(a1)+
000117B6 4E75                       		rts	
000117B8                            ; ===========================================================================
000117B8                            
000117B8                            Obj5B_Type01:				; XREF: Obj5B_TypeIndex
000117B8 43E8 0038                  		lea	$38(a0),a1
000117BC 0C11 0080                  		cmpi.b	#$80,(a1)
000117C0 6700                       		beq.s	locret_11038
000117C2 5211                       		addq.b	#1,(a1)
000117C4 7200                       		moveq	#0,d1
000117C6 1219                       		move.b	(a1)+,d1
000117C8 4841                       		swap	d1
000117CA E289                       		lsr.l	#1,d1
000117CC 2401                       		move.l	d1,d2
000117CE E289                       		lsr.l	#1,d1
000117D0 2601                       		move.l	d1,d3
000117D2 D682                       		add.l	d2,d3
000117D4 4841                       		swap	d1
000117D6 4842                       		swap	d2
000117D8 4843                       		swap	d3
000117DA 12C3                       		move.b	d3,(a1)+
000117DC 12C2                       		move.b	d2,(a1)+
000117DE 12C1                       		move.b	d1,(a1)+
000117E0                            
000117E0                            locret_11038:
000117E0 4E75                       		rts	
000117E2 4E75                       		rts	
000117E4                            ; ===========================================================================
000117E4                            ; ---------------------------------------------------------------------------
000117E4                            ; Sprite mappings - blocks that	form a staircase (SLZ)
000117E4                            ; ---------------------------------------------------------------------------
000117E4                            Map_obj5B:
000117E4                            	include "_maps\obj5B.asm"
000117E4                            ; ---------------------------------------------------------------------------
000117E4                            ; Sprite mappings - blocks that	form a staircase (SLZ)
000117E4                            ; ---------------------------------------------------------------------------
000117E4 0000                       		dc.w byte_1103E-Map_obj5B
000117E6 01                         byte_1103E:	dc.b 1
000117E7 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
000117EC                            		even
000117EC                            		even
000117EC                            
000117EC                            ; ===========================================================================
000117EC                            ; ---------------------------------------------------------------------------
000117EC                            ; Object 5C - metal girders in foreground (SLZ)
000117EC                            ; ---------------------------------------------------------------------------
000117EC                            
000117EC                            Obj5C:					; XREF: Obj_Index
000117EC 7000                       		moveq	#0,d0
000117EE 1028 0024                  		move.b	$24(a0),d0
000117F2 323B 0000                  		move.w	Obj5C_Index(pc,d0.w),d1
000117F6 4EFB 1000                  		jmp	Obj5C_Index(pc,d1.w)
000117FA                            ; ===========================================================================
000117FA 0000                       Obj5C_Index:	dc.w Obj5C_Main-Obj5C_Index
000117FC 0000                       		dc.w Obj5C_Display-Obj5C_Index
000117FE                            ; ===========================================================================
000117FE                            
000117FE                            Obj5C_Main:				; XREF: Obj5C_Index
000117FE 5428 0024                  		addq.b	#2,$24(a0)
00011802 217C 0000 0000 0004        		move.l	#Map_obj5C,4(a0)
0001180A 317C 83CC 0002             		move.w	#$83CC,2(a0)
00011810 117C 0010 0019             		move.b	#$10,$19(a0)
00011816                            
00011816                            Obj5C_Display:				; XREF: Obj5C_Index
00011816 2238 F700                  		move.l	($FFFFF700).w,d1
0001181A D281                       		add.l	d1,d1
0001181C 4841                       		swap	d1
0001181E 4441                       		neg.w	d1
00011820 3141 0008                  		move.w	d1,8(a0)
00011824 2238 F704                  		move.l	($FFFFF704).w,d1
00011828 D281                       		add.l	d1,d1
0001182A 4841                       		swap	d1
0001182C 0241 003F                  		andi.w	#$3F,d1
00011830 4441                       		neg.w	d1
00011832 0641 0100                  		addi.w	#$100,d1
00011836 3141 000A                  		move.w	d1,$A(a0)
0001183A 6000 C586                  		bra.w	DisplaySprite
0001183E                            ; ===========================================================================
0001183E                            ; ---------------------------------------------------------------------------
0001183E                            ; Sprite mappings - metal girders in foreground	(SLZ)
0001183E                            ; ---------------------------------------------------------------------------
0001183E                            Map_obj5C:
0001183E                            	include "_maps\obj5C.asm"
0001183E                            ; ---------------------------------------------------------------------------
0001183E                            ; Sprite mappings - metal girders in foreground	(SLZ)
0001183E                            ; ---------------------------------------------------------------------------
0001183E 0000                       		dc.w byte_11098-Map_obj5C
00011840 09                         byte_11098:	dc.b 9
00011841 800F 0000 F0               		dc.b $80, $F, 0, 0, $F0
00011846 A00F 1000 F0               		dc.b $A0, $F, $10, 0, $F0
0001184B C00F 0000 F0               		dc.b $C0, $F, 0, 0, $F0
00011850 E00F 1000 F0               		dc.b $E0, $F, $10, 0, $F0
00011855 000F 0000 F0               		dc.b 0,	$F, 0, 0, $F0
0001185A 200F 1000 F0               		dc.b $20, $F, $10, 0, $F0
0001185F 400F 0000 F0               		dc.b $40, $F, 0, 0, $F0
00011864 600F 1000 F0               		dc.b $60, $F, $10, 0, $F0
00011869 7F0F 0000 F0               		dc.b $7F, $F, 0, 0, $F0
0001186E                            		even
0001186E                            		even
0001186E                            
0001186E                            ; ===========================================================================
0001186E                            ; ---------------------------------------------------------------------------
0001186E                            ; Object 1B - water surface (LZ)
0001186E                            ; ---------------------------------------------------------------------------
0001186E                            
0001186E                            Obj1B:					; XREF: Obj_Index
0001186E 7000                       		moveq	#0,d0
00011870 1028 0024                  		move.b	$24(a0),d0
00011874 323B 0000                  		move.w	Obj1B_Index(pc,d0.w),d1
00011878 4EFB 1000                  		jmp	Obj1B_Index(pc,d1.w)
0001187C                            ; ===========================================================================
0001187C 0000                       Obj1B_Index:	dc.w Obj1B_Main-Obj1B_Index
0001187E 0000                       		dc.w Obj1B_Action-Obj1B_Index
00011880                            ; ===========================================================================
00011880                            
00011880                            Obj1B_Main:				; XREF: Obj1B_Index
00011880 5428 0024                  		addq.b	#2,$24(a0)
00011884 217C 0000 0000 0004        		move.l	#Map_obj1B,4(a0)
0001188C 317C C300 0002             		move.w	#$C300,2(a0)
00011892 117C 0004 0001             		move.b	#4,1(a0)
00011898 117C 0080 0019             		move.b	#$80,$19(a0)
0001189E 3168 0008 0030             		move.w	8(a0),$30(a0)
000118A4                            
000118A4                            Obj1B_Action:				; XREF: Obj1B_Index
000118A4 3238 F700                  		move.w	($FFFFF700).w,d1
000118A8 0241 FFE0                  		andi.w	#$FFE0,d1
000118AC D268 0030                  		add.w	$30(a0),d1
000118B0 0838 0000 FE05             		btst	#0,($FFFFFE05).w
000118B6 6700                       		beq.s	loc_11114
000118B8 0641 0020                  		addi.w	#$20,d1
000118BC                            
000118BC                            loc_11114:
000118BC 3141 0008                  		move.w	d1,8(a0)	; match	obj x-position to screen position
000118C0 3238 F646                  		move.w	($FFFFF646).w,d1
000118C4 3141 000C                  		move.w	d1,$C(a0)	; match	obj y-position to water	height
000118C8 4A28 0032                  		tst.b	$32(a0)
000118CC 6600                       		bne.s	Obj1B_Animate
000118CE 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
000118D4 6700                       		beq.s	loc_1114A	; if not, branch
000118D6 5628 001A                  		addq.b	#3,$1A(a0)	; use different	frames
000118DA 117C 0001 0032             		move.b	#1,$32(a0)	; stop animation
000118E0 6000                       		bra.s	Obj1B_Display
000118E2                            ; ===========================================================================
000118E2                            
000118E2                            Obj1B_Animate:				; XREF: loc_11114
000118E2 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
000118E6 6600                       		bne.s	Obj1B_Display	; if yes, branch
000118E8 117C 0000 0032             		move.b	#0,$32(a0)	; resume animation
000118EE 5728 001A                  		subq.b	#3,$1A(a0)	; use normal frames
000118F2                            
000118F2                            loc_1114A:				; XREF: loc_11114
000118F2 5328 001E                  		subq.b	#1,$1E(a0)
000118F6 6A00                       		bpl.s	Obj1B_Display
000118F8 117C 0007 001E             		move.b	#7,$1E(a0)
000118FE 5228 001A                  		addq.b	#1,$1A(a0)
00011902 0C28 0003 001A             		cmpi.b	#3,$1A(a0)
00011908 6500                       		bcs.s	Obj1B_Display
0001190A 117C 0000 001A             		move.b	#0,$1A(a0)
00011910                            
00011910                            Obj1B_Display:
00011910 6000 C4B0                  		bra.w	DisplaySprite
00011914                            ; ===========================================================================
00011914                            ; ---------------------------------------------------------------------------
00011914                            ; Sprite mappings - water surface (LZ)
00011914                            ; ---------------------------------------------------------------------------
00011914                            Map_obj1B:
00011914                            	include "_maps\obj1B.asm"
00011914                            ; ---------------------------------------------------------------------------
00011914                            ; Sprite mappings - water surface (LZ)
00011914                            ; ---------------------------------------------------------------------------
00011914 0000 0000                  		dc.w byte_11178-Map_obj1B, byte_11188-Map_obj1B
00011918 0000 0000                  		dc.w byte_11198-Map_obj1B, byte_111A8-Map_obj1B
0001191C 0000 0000                  		dc.w byte_111C7-Map_obj1B, byte_111E6-Map_obj1B
00011920 03                         byte_11178:	dc.b 3
00011921 FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
00011926 FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
0001192B FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
00011930 03                         byte_11188:	dc.b 3
00011931 FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
00011936 FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
0001193B FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
00011940 03                         byte_11198:	dc.b 3
00011941 FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
00011946 FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
0001194B FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
00011950 06                         byte_111A8:	dc.b 6
00011951 FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
00011956 FD0D 0000 C0               		dc.b $FD, $D, 0, 0, $C0
0001195B FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
00011960 FD0D 0000 00               		dc.b $FD, $D, 0, 0, 0
00011965 FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
0001196A FD0D 0000 40               		dc.b $FD, $D, 0, 0, $40
0001196F 06                         byte_111C7:	dc.b 6
00011970 FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
00011975 FD0D 0008 C0               		dc.b $FD, $D, 0, 8, $C0
0001197A FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
0001197F FD0D 0008 00               		dc.b $FD, $D, 0, 8, 0
00011984 FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
00011989 FD0D 0008 40               		dc.b $FD, $D, 0, 8, $40
0001198E 06                         byte_111E6:	dc.b 6
0001198F FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
00011994 FD0D 0800 C0               		dc.b $FD, $D, 8, 0, $C0
00011999 FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
0001199E FD0D 0800 00               		dc.b $FD, $D, 8, 0, 0
000119A3 FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
000119A8 FD0D 0800 40               		dc.b $FD, $D, 8, 0, $40
000119AE 00                         		even
000119AE 00                         		even
000119AE                            
000119AE                            ; ===========================================================================
000119AE                            ; ---------------------------------------------------------------------------
000119AE                            ; Object 0B - pole that	breaks (LZ)
000119AE                            ; ---------------------------------------------------------------------------
000119AE                            
000119AE                            Obj0B:					; XREF: Obj_Index
000119AE 7000                       		moveq	#0,d0
000119B0 1028 0024                  		move.b	$24(a0),d0
000119B4 323B 0000                  		move.w	Obj0B_Index(pc,d0.w),d1
000119B8 4EFB 1000                  		jmp	Obj0B_Index(pc,d1.w)
000119BC                            ; ===========================================================================
000119BC 0000                       Obj0B_Index:	dc.w Obj0B_Main-Obj0B_Index
000119BE 0000                       		dc.w Obj0B_Action-Obj0B_Index
000119C0 0000                       		dc.w Obj0B_Display-Obj0B_Index
000119C2                            ; ===========================================================================
000119C2                            
000119C2                            Obj0B_Main:				; XREF: Obj0B_Index
000119C2 5428 0024                  		addq.b	#2,$24(a0)
000119C6 217C 0000 0000 0004        		move.l	#Map_obj0B,4(a0)
000119CE 317C 43DE 0002             		move.w	#$43DE,2(a0)
000119D4 117C 0004 0001             		move.b	#4,1(a0)
000119DA 117C 0008 0019             		move.b	#8,$19(a0)
000119E0 117C 0004 0018             		move.b	#4,$18(a0)
000119E6 117C 00E1 0020             		move.b	#$E1,$20(a0)
000119EC 7000                       		moveq	#0,d0
000119EE 1028 0028                  		move.b	$28(a0),d0	; get object type
000119F2 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
000119F6 3140 0030                  		move.w	d0,$30(a0)	; set breakage time
000119FA                            
000119FA                            Obj0B_Action:				; XREF: Obj0B_Index
000119FA 4A28 0032                  		tst.b	$32(a0)
000119FE 6700                       		beq.s	Obj0B_Grab
00011A00 4A68 0030                  		tst.w	$30(a0)
00011A04 6700                       		beq.s	Obj0B_MoveUp
00011A06 5368 0030                  		subq.w	#1,$30(a0)
00011A0A 6600                       		bne.s	Obj0B_MoveUp
00011A0C 117C 0001 001A             		move.b	#1,$1A(a0)	; break	the pole
00011A12 6000                       		bra.s	Obj0B_Release
00011A14                            ; ===========================================================================
00011A14                            
00011A14                            Obj0B_MoveUp:				; XREF: Obj0B_Action
00011A14 43F8 D000                  		lea	($FFFFD000).w,a1
00011A18 3028 000C                  		move.w	$C(a0),d0
00011A1C 0440 0018                  		subi.w	#$18,d0
00011A20 0838 0000 F604             		btst	#0,($FFFFF604).w ; check if "up" is pressed
00011A26 6700                       		beq.s	Obj0B_MoveDown
00011A28 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
00011A2C B069 000C                  		cmp.w	$C(a1),d0
00011A30 6500                       		bcs.s	Obj0B_MoveDown
00011A32 3340 000C                  		move.w	d0,$C(a1)
00011A36                            
00011A36                            Obj0B_MoveDown:
00011A36 0640 0024                  		addi.w	#$24,d0
00011A3A 0838 0001 F604             		btst	#1,($FFFFF604).w ; check if "down" is pressed
00011A40 6700                       		beq.s	Obj0B_LetGo
00011A42 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
00011A46 B069 000C                  		cmp.w	$C(a1),d0
00011A4A 6400                       		bcc.s	Obj0B_LetGo
00011A4C 3340 000C                  		move.w	d0,$C(a1)
00011A50                            
00011A50                            Obj0B_LetGo:
00011A50 1038 F603                  		move.b	($FFFFF603).w,d0
00011A54 0240 0070                  		andi.w	#$70,d0
00011A58 6700                       		beq.s	Obj0B_Display
00011A5A                            
00011A5A                            Obj0B_Release:				; XREF: Obj0B_Action
00011A5A 4228 0020                  		clr.b	$20(a0)
00011A5E 5428 0024                  		addq.b	#2,$24(a0)
00011A62 4238 F7C8                  		clr.b	($FFFFF7C8).w
00011A66 4238 F7C9                  		clr.b	($FFFFF7C9).w
00011A6A 4228 0032                  		clr.b	$32(a0)
00011A6E 6000                       		bra.s	Obj0B_Display
00011A70                            ; ===========================================================================
00011A70                            
00011A70                            Obj0B_Grab:				; XREF: Obj0B_Action
00011A70 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	pole?
00011A74 6700                       		beq.s	Obj0B_Display	; if not, branch
00011A76 43F8 D000                  		lea	($FFFFD000).w,a1
00011A7A 3028 0008                  		move.w	8(a0),d0
00011A7E 0640 0014                  		addi.w	#$14,d0
00011A82 B069 0008                  		cmp.w	8(a1),d0
00011A86 6400                       		bcc.s	Obj0B_Display
00011A88 4228 0021                  		clr.b	$21(a0)
00011A8C 0C29 0004 0024             		cmpi.b	#4,$24(a1)
00011A92 6400                       		bcc.s	Obj0B_Display
00011A94 4269 0010                  		clr.w	$10(a1)		; stop Sonic moving
00011A98 4269 0012                  		clr.w	$12(a1)		; stop Sonic moving
00011A9C 3028 0008                  		move.w	8(a0),d0
00011AA0 0640 0014                  		addi.w	#$14,d0
00011AA4 3340 0008                  		move.w	d0,8(a1)
00011AA8 08A9 0000 0022             		bclr	#0,$22(a1)
00011AAE 137C 0011 001C             		move.b	#$11,$1C(a1)	; set Sonic's animation to "hanging" ($11)
00011AB4 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
00011ABA 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00011AC0 117C 0001 0032             		move.b	#1,$32(a0)	; begin	countdown to breakage
00011AC6                            
00011AC6                            Obj0B_Display:				; XREF: Obj0B_Index
00011AC6 6000 E3A2                  		bra.w	MarkObjGone
00011ACA                            ; ===========================================================================
00011ACA                            ; ---------------------------------------------------------------------------
00011ACA                            ; Sprite mappings - pole that breaks (LZ)
00011ACA                            ; ---------------------------------------------------------------------------
00011ACA                            Map_obj0B:
00011ACA                            	include "_maps\obj0B.asm"
00011ACA                            ; ---------------------------------------------------------------------------
00011ACA                            ; Sprite mappings - pole that breaks (LZ)
00011ACA                            ; ---------------------------------------------------------------------------
00011ACA 0000                       		dc.w byte_11326-Map_obj0B
00011ACC 0000                       		dc.w byte_11331-Map_obj0B
00011ACE 02                         byte_11326:	dc.b 2			; normal pole
00011ACF E003 0000 FC               		dc.b $E0, 3, 0,	0, $FC
00011AD4 0003 1000 FC               		dc.b 0,	3, $10,	0, $FC
00011AD9 04                         byte_11331:	dc.b 4			; broken pole
00011ADA E001 0000 FC               		dc.b $E0, 1, 0,	0, $FC
00011ADF F005 0004 FC               		dc.b $F0, 5, 0,	4, $FC
00011AE4 0005 1004 FC               		dc.b 0,	5, $10,	4, $FC
00011AE9 1001 1000 FC               		dc.b $10, 1, $10, 0, $FC
00011AEE                            		even
00011AEE                            		even
00011AEE                            
00011AEE                            ; ===========================================================================
00011AEE                            ; ---------------------------------------------------------------------------
00011AEE                            ; Object 0C - flapping door (LZ)
00011AEE                            ; ---------------------------------------------------------------------------
00011AEE                            
00011AEE                            Obj0C:					; XREF: Obj_Index
00011AEE 7000                       		moveq	#0,d0
00011AF0 1028 0024                  		move.b	$24(a0),d0
00011AF4 323B 0000                  		move.w	Obj0C_Index(pc,d0.w),d1
00011AF8 4EFB 1000                  		jmp	Obj0C_Index(pc,d1.w)
00011AFC                            ; ===========================================================================
00011AFC 0000                       Obj0C_Index:	dc.w Obj0C_Main-Obj0C_Index
00011AFE 0000                       		dc.w Obj0C_OpenClose-Obj0C_Index
00011B00                            ; ===========================================================================
00011B00                            
00011B00                            Obj0C_Main:				; XREF: Obj0C_Index
00011B00 5428 0024                  		addq.b	#2,$24(a0)
00011B04 217C 0000 0000 0004        		move.l	#Map_obj0C,4(a0)
00011B0C 317C 4328 0002             		move.w	#$4328,2(a0)
00011B12 0028 0004 0001             		ori.b	#4,1(a0)
00011B18 117C 0028 0019             		move.b	#$28,$19(a0)
00011B1E 7000                       		moveq	#0,d0
00011B20 1028 0028                  		move.b	$28(a0),d0	; get object type
00011B24 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00011B28 3140 0032                  		move.w	d0,$32(a0)	; set flap delay time
00011B2C                            
00011B2C                            Obj0C_OpenClose:			; XREF: Obj0C_Index
00011B2C 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00011B30 6A00                       		bpl.s	Obj0C_Solid	; if time remains, branch
00011B32 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	time delay
00011B38 0868 0000 001C             		bchg	#0,$1C(a0)	; open/close door
00011B3E 4A28 0001                  		tst.b	1(a0)
00011B42 6A00                       		bpl.s	Obj0C_Solid
00011B44 303C 00BB                  		move.w	#$BB,d0
00011B48 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play door sound
00011B4E                            
00011B4E                            Obj0C_Solid:
00011B4E 43F9 0000 0000             		lea	(Ani_obj0C).l,a1
00011B54 6100 932C                  		bsr.w	AnimateSprite
00011B58 4238 F7C9                  		clr.b	($FFFFF7C9).w	; enable wind tunnel
00011B5C 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
00011B60 6600                       		bne.s	Obj0C_Display	; if yes, branch
00011B62 3038 D008                  		move.w	($FFFFD008).w,d0
00011B66 B068 0008                  		cmp.w	8(a0),d0	; is Sonic in front of the door?
00011B6A 6400                       		bcc.s	Obj0C_Display	; if yes, branch
00011B6C 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00011B72 323C 0013                  		move.w	#$13,d1
00011B76 343C 0020                  		move.w	#$20,d2
00011B7A 3602                       		move.w	d2,d3
00011B7C 5243                       		addq.w	#1,d3
00011B7E 3828 0008                  		move.w	8(a0),d4
00011B82 6100 E60E                  		bsr.w	SolidObject	; make the door	solid
00011B86                            
00011B86                            Obj0C_Display:
00011B86 6000 E2E2                  		bra.w	MarkObjGone
00011B8A                            ; ===========================================================================
00011B8A                            Ani_obj0C:
00011B8A                            	include "_anim\obj0C.asm"
00011B8A                            ; ---------------------------------------------------------------------------
00011B8A                            ; Animation script - flapping door (LZ)
00011B8A                            ; ---------------------------------------------------------------------------
00011B8A 0000                       		dc.w byte_113E6-Ani_obj0C
00011B8C 0000                       		dc.w byte_113EC-Ani_obj0C
00011B8E 0300 0102 FE01             byte_113E6:	dc.b 3,	0, 1, 2, $FE, 1
00011B94 0302 0100 FE01             byte_113EC:	dc.b 3,	2, 1, 0, $FE, 1
00011B9A                            		even
00011B9A                            		even
00011B9A                            
00011B9A                            ; ---------------------------------------------------------------------------
00011B9A                            ; Sprite mappings - flapping door (LZ)
00011B9A                            ; ---------------------------------------------------------------------------
00011B9A                            Map_obj0C:
00011B9A                            	include "_maps\obj0C.asm"
00011B9A                            ; ---------------------------------------------------------------------------
00011B9A                            ; Sprite mappings - flapping door (LZ)
00011B9A                            ; ---------------------------------------------------------------------------
00011B9A 0000                       		dc.w byte_113F8-Map_obj0C
00011B9C 0000                       		dc.w byte_11403-Map_obj0C
00011B9E 0000                       		dc.w byte_1140E-Map_obj0C
00011BA0 02                         byte_113F8:	dc.b 2
00011BA1 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00011BA6 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00011BAB 02                         byte_11403:	dc.b 2
00011BAC DA0F 0008 FB               		dc.b $DA, $F, 0, 8, $FB
00011BB1 060F 1008 FB               		dc.b 6,	$F, $10, 8, $FB
00011BB6 02                         byte_1140E:	dc.b 2
00011BB7 D80D 0018 00               		dc.b $D8, $D, 0, $18, 0
00011BBC 180D 1018 00               		dc.b $18, $D, $10, $18,	0
00011BC2 00                         		even
00011BC2 00                         		even
00011BC2                            
00011BC2                            ; ===========================================================================
00011BC2                            ; ---------------------------------------------------------------------------
00011BC2                            ; Object 71 - invisible	solid blocks
00011BC2                            ; ---------------------------------------------------------------------------
00011BC2                            
00011BC2                            Obj71:					; XREF: Obj_Index
00011BC2 7000                       		moveq	#0,d0
00011BC4 1028 0024                  		move.b	$24(a0),d0
00011BC8 323B 0000                  		move.w	Obj71_Index(pc,d0.w),d1
00011BCC 4EFB 1000                  		jmp	Obj71_Index(pc,d1.w)
00011BD0                            ; ===========================================================================
00011BD0 0000                       Obj71_Index:	dc.w Obj71_Main-Obj71_Index
00011BD2 0000                       		dc.w Obj71_Solid-Obj71_Index
00011BD4                            ; ===========================================================================
00011BD4                            
00011BD4                            Obj71_Main:				; XREF: Obj71_Index
00011BD4 5428 0024                  		addq.b	#2,$24(a0)
00011BD8 217C 0000 0000 0004        		move.l	#Map_obj71,4(a0)
00011BE0 317C 8680 0002             		move.w	#$8680,2(a0)
00011BE6 0028 0004 0001             		ori.b	#4,1(a0)
00011BEC 1028 0028                  		move.b	$28(a0),d0	; get object type
00011BF0 1200                       		move.b	d0,d1
00011BF2 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st byte
00011BF6 0640 0010                  		addi.w	#$10,d0
00011BFA E248                       		lsr.w	#1,d0
00011BFC 1140 0019                  		move.b	d0,$19(a0)	; set object width
00011C00 0241 000F                  		andi.w	#$F,d1		; read only the	2nd byte
00011C04 5241                       		addq.w	#1,d1
00011C06 E749                       		lsl.w	#3,d1
00011C08 1141 0016                  		move.b	d1,$16(a0)	; set object height
00011C0C                            
00011C0C                            Obj71_Solid:				; XREF: Obj71_Index
00011C0C 6100 C42E                  		bsr.w	ChkObjOnScreen
00011C10 6600                       		bne.s	Obj71_ChkDel
00011C12 7200                       		moveq	#0,d1
00011C14 1228 0019                  		move.b	$19(a0),d1
00011C18 0641 000B                  		addi.w	#$B,d1
00011C1C 7400                       		moveq	#0,d2
00011C1E 1428 0016                  		move.b	$16(a0),d2
00011C22 3602                       		move.w	d2,d3
00011C24 5243                       		addq.w	#1,d3
00011C26 3828 0008                  		move.w	8(a0),d4
00011C2A 6100 E5A8                  		bsr.w	SolidObject71
00011C2E                            
00011C2E                            Obj71_ChkDel:
00011C2E 3028 0008                  		move.w	8(a0),d0
00011C32 0240 FF80                  		andi.w	#$FF80,d0
00011C36 3238 F700                  		move.w	($FFFFF700).w,d1
00011C3A 0441 0080                  		subi.w	#$80,d1
00011C3E 0241 FF80                  		andi.w	#$FF80,d1
00011C42 9041                       		sub.w	d1,d0
00011C44 0C40 0280                  		cmpi.w	#$280,d0
00011C48 6200                       		bhi.s	Obj71_Delete
00011C4A 4A78 FE08                  		tst.w	($FFFFFE08).w	; are you using	debug mode?
00011C4E 6700                       		beq.s	Obj71_NoDisplay	; if not, branch
00011C50 4EFA C170                  		jmp	DisplaySprite	; if yes, display the object
00011C54                            ; ===========================================================================
00011C54                            
00011C54                            Obj71_NoDisplay:
00011C54 4E75                       		rts	
00011C56                            ; ===========================================================================
00011C56                            
00011C56                            Obj71_Delete:
00011C56 4EFA C1A6                  		jmp	DeleteObject
00011C5A                            ; ===========================================================================
00011C5A                            ; ---------------------------------------------------------------------------
00011C5A                            ; Sprite mappings - invisible solid blocks
00011C5A                            ; ---------------------------------------------------------------------------
00011C5A                            Map_obj71:
00011C5A                            	include "_maps\obj71.asm"
00011C5A                            ; ---------------------------------------------------------------------------
00011C5A                            ; Sprite mappings - invisible solid blocks
00011C5A                            ; ---------------------------------------------------------------------------
00011C5A 0000                       		dc.w byte_114BC-Map_obj71
00011C5C 0000                       		dc.w byte_114D1-Map_obj71
00011C5E 0000                       		dc.w byte_114E6-Map_obj71
00011C60 04                         byte_114BC:	dc.b 4
00011C61 F005 0018 F0               		dc.b $F0, 5, 0,	$18, $F0
00011C66 F005 0018 00               		dc.b $F0, 5, 0,	$18, 0
00011C6B 0005 0018 F0               		dc.b 0,	5, 0, $18, $F0
00011C70 0005 0018 00               		dc.b 0,	5, 0, $18, 0
00011C75 04                         byte_114D1:	dc.b 4
00011C76 E005 0018 C0               		dc.b $E0, 5, 0,	$18, $C0
00011C7B E005 0018 30               		dc.b $E0, 5, 0,	$18, $30
00011C80 1005 0018 C0               		dc.b $10, 5, 0,	$18, $C0
00011C85 1005 0018 30               		dc.b $10, 5, 0,	$18, $30
00011C8A 04                         byte_114E6:	dc.b 4
00011C8B E005 0018 80               		dc.b $E0, 5, 0,	$18, $80
00011C90 E005 0018 70               		dc.b $E0, 5, 0,	$18, $70
00011C95 1005 0018 80               		dc.b $10, 5, 0,	$18, $80
00011C9A 1005 0018 70               		dc.b $10, 5, 0,	$18, $70
00011CA0 00                         		even
00011CA0 00                         		even
00011CA0                            
00011CA0                            ; ===========================================================================
00011CA0                            ; ---------------------------------------------------------------------------
00011CA0                            ; Object 5D - fans (SLZ)
00011CA0                            ; ---------------------------------------------------------------------------
00011CA0                            
00011CA0                            Obj5D:					; XREF: Obj_Index
00011CA0 7000                       		moveq	#0,d0
00011CA2 1028 0024                  		move.b	$24(a0),d0
00011CA6 323B 0000                  		move.w	Obj5D_Index(pc,d0.w),d1
00011CAA 4EFB 1000                  		jmp	Obj5D_Index(pc,d1.w)
00011CAE                            ; ===========================================================================
00011CAE 0000                       Obj5D_Index:	dc.w Obj5D_Main-Obj5D_Index
00011CB0 0000                       		dc.w Obj5D_Delay-Obj5D_Index
00011CB2                            ; ===========================================================================
00011CB2                            
00011CB2                            Obj5D_Main:				; XREF: Obj5D_Index
00011CB2 5428 0024                  		addq.b	#2,$24(a0)
00011CB6 217C 0000 0000 0004        		move.l	#Map_obj5D,4(a0)
00011CBE 317C 43A0 0002             		move.w	#$43A0,2(a0)
00011CC4 0028 0004 0001             		ori.b	#4,1(a0)
00011CCA 117C 0010 0019             		move.b	#$10,$19(a0)
00011CD0 117C 0004 0018             		move.b	#4,$18(a0)
00011CD6                            
00011CD6                            Obj5D_Delay:				; XREF: Obj5D_Index
00011CD6 0828 0001 0028             		btst	#1,$28(a0)	; is object type 02/03?
00011CDC 6600                       		bne.s	Obj5D_Blow	; if yes, branch
00011CDE 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00011CE2 6A00                       		bpl.s	Obj5D_Blow	; if time remains, branch
00011CE4 317C 0078 0030             		move.w	#120,$30(a0)	; set delay to 2 seconds
00011CEA 0868 0000 0032             		bchg	#0,$32(a0)	; switch fan on/off
00011CF0 6700                       		beq.s	Obj5D_Blow	; if fan is off, branch
00011CF2 317C 00B4 0030             		move.w	#180,$30(a0)	; set delay to 3 seconds
00011CF8                            
00011CF8                            Obj5D_Blow:
00011CF8 4A28 0032                  		tst.b	$32(a0)		; is fan switched on?
00011CFC 6600 0000                  		bne.w	Obj5D_ChkDel	; if not, branch
00011D00 43F8 D000                  		lea	($FFFFD000).w,a1
00011D04 3029 0008                  		move.w	8(a1),d0
00011D08 9068 0008                  		sub.w	8(a0),d0
00011D0C 0828 0000 0022             		btst	#0,$22(a0)
00011D12 6600                       		bne.s	Obj5D_ChkSonic
00011D14 4440                       		neg.w	d0
00011D16                            
00011D16                            Obj5D_ChkSonic:
00011D16 0640 0050                  		addi.w	#$50,d0
00011D1A 0C40 00F0                  		cmpi.w	#$F0,d0		; is Sonic more	than $A0 pixels	from the fan?
00011D1E 6400                       		bcc.s	Obj5D_Animate	; if yes, branch
00011D20 3229 000C                  		move.w	$C(a1),d1
00011D24 0641 0060                  		addi.w	#$60,d1
00011D28 9268 000C                  		sub.w	$C(a0),d1
00011D2C 6500                       		bcs.s	Obj5D_Animate
00011D2E 0C41 0070                  		cmpi.w	#$70,d1
00011D32 6400                       		bcc.s	Obj5D_Animate
00011D34 0440 0050                  		subi.w	#$50,d0
00011D38 6400                       		bcc.s	loc_1159A
00011D3A 4640                       		not.w	d0
00011D3C D040                       		add.w	d0,d0
00011D3E                            
00011D3E                            loc_1159A:
00011D3E 0640 0060                  		addi.w	#$60,d0
00011D42 0828 0000 0022             		btst	#0,$22(a0)
00011D48 6600                       		bne.s	loc_115A8
00011D4A 4440                       		neg.w	d0
00011D4C                            
00011D4C                            loc_115A8:
00011D4C 4400                       		neg.b	d0
00011D4E E840                       		asr.w	#4,d0
00011D50 0828 0000 0028             		btst	#0,$28(a0)
00011D56 6700                       		beq.s	Obj5D_MoveSonic
00011D58 4440                       		neg.w	d0
00011D5A                            
00011D5A                            Obj5D_MoveSonic:
00011D5A D169 0008                  		add.w	d0,8(a1)	; push Sonic away from the fan
00011D5E                            
00011D5E                            Obj5D_Animate:				; XREF: Obj5D_ChkSonic
00011D5E 5328 001E                  		subq.b	#1,$1E(a0)
00011D62 6A00                       		bpl.s	Obj5D_ChkDel
00011D64 117C 0000 001E             		move.b	#0,$1E(a0)
00011D6A 5228 001B                  		addq.b	#1,$1B(a0)
00011D6E 0C28 0003 001B             		cmpi.b	#3,$1B(a0)
00011D74 6500                       		bcs.s	loc_115D8
00011D76 117C 0000 001B             		move.b	#0,$1B(a0)
00011D7C                            
00011D7C                            loc_115D8:
00011D7C 7000                       		moveq	#0,d0
00011D7E 0828 0000 0028             		btst	#0,$28(a0)
00011D84 6700                       		beq.s	loc_115E4
00011D86 7002                       		moveq	#2,d0
00011D88                            
00011D88                            loc_115E4:
00011D88 D028 001B                  		add.b	$1B(a0),d0
00011D8C 1140 001A                  		move.b	d0,$1A(a0)
00011D90                            
00011D90                            Obj5D_ChkDel:				; XREF: Obj5D_Animate
00011D90 6100 C030                  		bsr.w	DisplaySprite
00011D94 3028 0008                  		move.w	8(a0),d0
00011D98 0240 FF80                  		andi.w	#$FF80,d0
00011D9C 3238 F700                  		move.w	($FFFFF700).w,d1
00011DA0 0441 0080                  		subi.w	#$80,d1
00011DA4 0241 FF80                  		andi.w	#$FF80,d1
00011DA8 9041                       		sub.w	d1,d0
00011DAA 0C40 0280                  		cmpi.w	#$280,d0
00011DAE 6200 C04E                  		bhi.w	DeleteObject
00011DB2 4E75                       		rts	
00011DB4                            ; ===========================================================================
00011DB4                            ; ---------------------------------------------------------------------------
00011DB4                            ; Sprite mappings - fans (SLZ)
00011DB4                            ; ---------------------------------------------------------------------------
00011DB4                            Map_obj5D:
00011DB4                            	include "_maps\obj5D.asm"
00011DB4                            ; ---------------------------------------------------------------------------
00011DB4                            ; Sprite mappings - fans (SLZ)
00011DB4                            ; ---------------------------------------------------------------------------
00011DB4 0000 0000                  		dc.w byte_1161A-Map_obj5D, byte_11625-Map_obj5D
00011DB8 0000 0000                  		dc.w byte_11630-Map_obj5D, byte_11625-Map_obj5D
00011DBC 0000                       		dc.w byte_1161A-Map_obj5D
00011DBE 02                         byte_1161A:	dc.b 2
00011DBF F009 0000 F8               		dc.b $F0, 9, 0,	0, $F8
00011DC4 000D 0006 F0               		dc.b 0,	$D, 0, 6, $F0
00011DC9 02                         byte_11625:	dc.b 2
00011DCA F00D 000E F0               		dc.b $F0, $D, 0, $E, $F0
00011DCF 000D 0016 F0               		dc.b 0,	$D, 0, $16, $F0
00011DD4 02                         byte_11630:	dc.b 2
00011DD5 F00D 001E F0               		dc.b $F0, $D, 0, $1E, $F0
00011DDA 0009 0026 F8               		dc.b 0,	9, 0, $26, $F8
00011DE0 00                         		even
00011DE0 00                         		even
00011DE0                            
00011DE0                            ; ===========================================================================
00011DE0                            ; ---------------------------------------------------------------------------
00011DE0                            ; Object 5E - seesaws (SLZ)
00011DE0                            ; ---------------------------------------------------------------------------
00011DE0                            
00011DE0                            Obj5E:					; XREF: Obj_Index
00011DE0 7000                       		moveq	#0,d0
00011DE2 1028 0024                  		move.b	$24(a0),d0
00011DE6 323B 0000                  		move.w	Obj5E_Index(pc,d0.w),d1
00011DEA 4EBB 1000                  		jsr	Obj5E_Index(pc,d1.w)
00011DEE 3028 0030                  		move.w	$30(a0),d0
00011DF2 0240 FF80                  		andi.w	#$FF80,d0
00011DF6 3238 F700                  		move.w	($FFFFF700).w,d1
00011DFA 0441 0080                  		subi.w	#$80,d1
00011DFE 0241 FF80                  		andi.w	#$FF80,d1
00011E02 9041                       		sub.w	d1,d0
00011E04 6B00 BFF8                  		bmi.w	DeleteObject
00011E08 0C40 0280                  		cmpi.w	#$280,d0
00011E0C 6200 BFF0                  		bhi.w	DeleteObject
00011E10 6000 BFB0                  		bra.w	DisplaySprite
00011E14                            ; ===========================================================================
00011E14 0000                       Obj5E_Index:	dc.w Obj5E_Main-Obj5E_Index
00011E16 0000                       		dc.w Obj5E_Slope-Obj5E_Index
00011E18 0000                       		dc.w Obj5E_Slope2-Obj5E_Index
00011E1A 0000                       		dc.w Obj5E_Spikeball-Obj5E_Index
00011E1C 0000                       		dc.w Obj5E_MoveSpike-Obj5E_Index
00011E1E 0000                       		dc.w Obj5E_SpikeFall-Obj5E_Index
00011E20                            ; ===========================================================================
00011E20                            
00011E20                            Obj5E_Main:				; XREF: Obj5E_Index
00011E20 5428 0024                  		addq.b	#2,$24(a0)
00011E24 217C 0000 0000 0004        		move.l	#Map_obj5E,4(a0)
00011E2C 317C 0374 0002             		move.w	#$374,2(a0)
00011E32 0028 0004 0001             		ori.b	#4,1(a0)
00011E38 117C 0004 0018             		move.b	#4,$18(a0)
00011E3E 117C 0030 0019             		move.b	#$30,$19(a0)
00011E44 3168 0008 0030             		move.w	8(a0),$30(a0)
00011E4A 4A28 0028                  		tst.b	$28(a0)		; is object type 00 ?
00011E4E 6600                       		bne.s	loc_116D2	; if not, branch
00011E50 6100 C40C                  		bsr.w	SingleObjLoad2
00011E54 6600                       		bne.s	loc_116D2
00011E56 12BC 005E                  		move.b	#$5E,0(a1)	; load spikeball object
00011E5A 5C29 0024                  		addq.b	#6,$24(a1)
00011E5E 3368 0008 0008             		move.w	8(a0),8(a1)
00011E64 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011E6A 1368 0022 0022             		move.b	$22(a0),$22(a1)
00011E70 2348 003C                  		move.l	a0,$3C(a1)
00011E74                            
00011E74                            loc_116D2:
00011E74 0828 0000 0022             		btst	#0,$22(a0)
00011E7A 6700                       		beq.s	loc_116E0
00011E7C 117C 0002 001A             		move.b	#2,$1A(a0)
00011E82                            
00011E82                            loc_116E0:
00011E82 1168 001A 003A             		move.b	$1A(a0),$3A(a0)
00011E88                            
00011E88                            Obj5E_Slope:				; XREF: Obj5E_Index
00011E88 1228 003A                  		move.b	$3A(a0),d1
00011E8C 6100 0000                  		bsr.w	loc_11766
00011E90 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
00011E96 0828 0000 001A             		btst	#0,$1A(a0)
00011E9C 6700                       		beq.s	loc_11702
00011E9E 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
00011EA4                            
00011EA4                            loc_11702:
00011EA4 43F8 D000                  		lea	($FFFFD000).w,a1
00011EA8 3169 0012 0038             		move.w	$12(a1),$38(a0)
00011EAE 323C 0030                  		move.w	#$30,d1
00011EB2 4EB9 0000 7B20             		jsr	(SlopeObject).l
00011EB8 4E75                       		rts	
00011EBA                            ; ===========================================================================
00011EBA                            
00011EBA                            Obj5E_Slope2:				; XREF: Obj5E_Index
00011EBA 6100 0000                  		bsr.w	loc_1174A
00011EBE 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
00011EC4 0828 0000 001A             		btst	#0,$1A(a0)
00011ECA 6700                       		beq.s	loc_11730
00011ECC 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
00011ED2                            
00011ED2                            loc_11730:
00011ED2 323C 0030                  		move.w	#$30,d1
00011ED6 4EB9 0000 7BC0             		jsr	(ExitPlatform).l
00011EDC 323C 0030                  		move.w	#$30,d1
00011EE0 3428 0008                  		move.w	8(a0),d2
00011EE4 4EB9 0000 8BB0             		jsr	SlopeObject2
00011EEA 4E75                       		rts	
00011EEC                            ; ===========================================================================
00011EEC                            
00011EEC                            loc_1174A:				; XREF: Obj5E_Slope2
00011EEC 7202                       		moveq	#2,d1
00011EEE 43F8 D000                  		lea	($FFFFD000).w,a1
00011EF2 3028 0008                  		move.w	8(a0),d0
00011EF6 9069 0008                  		sub.w	8(a1),d0
00011EFA 6400                       		bcc.s	loc_1175E
00011EFC 4440                       		neg.w	d0
00011EFE 7200                       		moveq	#0,d1
00011F00                            
00011F00                            loc_1175E:
00011F00 0C40 0008                  		cmpi.w	#8,d0
00011F04 6400                       		bcc.s	loc_11766
00011F06 7201                       		moveq	#1,d1
00011F08                            
00011F08                            loc_11766:
00011F08 1028 001A                  		move.b	$1A(a0),d0
00011F0C B001                       		cmp.b	d1,d0
00011F0E 6700                       		beq.s	locret_11790
00011F10 6400                       		bcc.s	loc_11772
00011F12 5400                       		addq.b	#2,d0
00011F14                            
00011F14                            loc_11772:
00011F14 5300                       		subq.b	#1,d0
00011F16 1140 001A                  		move.b	d0,$1A(a0)
00011F1A 1141 003A                  		move.b	d1,$3A(a0)
00011F1E 08A8 0000 0001             		bclr	#0,1(a0)
00011F24 0828 0001 001A             		btst	#1,$1A(a0)
00011F2A 6700                       		beq.s	locret_11790
00011F2C 08E8 0000 0001             		bset	#0,1(a0)
00011F32                            
00011F32                            locret_11790:
00011F32 4E75                       		rts	
00011F34                            ; ===========================================================================
00011F34                            
00011F34                            Obj5E_Spikeball:			; XREF: Obj5E_Index
00011F34 5428 0024                  		addq.b	#2,$24(a0)
00011F38 217C 0000 0000 0004        		move.l	#Map_obj5Ea,4(a0)
00011F40 317C 04F0 0002             		move.w	#$4F0,2(a0)
00011F46 0028 0004 0001             		ori.b	#4,1(a0)
00011F4C 117C 0004 0018             		move.b	#4,$18(a0)
00011F52 117C 008B 0020             		move.b	#$8B,$20(a0)
00011F58 117C 000C 0019             		move.b	#$C,$19(a0)
00011F5E 3168 0008 0030             		move.w	8(a0),$30(a0)
00011F64 0668 0028 0008             		addi.w	#$28,8(a0)
00011F6A 3168 000C 0034             		move.w	$C(a0),$34(a0)
00011F70 117C 0001 001A             		move.b	#1,$1A(a0)
00011F76 0828 0000 0022             		btst	#0,$22(a0)
00011F7C 6700                       		beq.s	Obj5E_MoveSpike
00011F7E 0468 0050 0008             		subi.w	#$50,8(a0)
00011F84 117C 0002 003A             		move.b	#2,$3A(a0)
00011F8A                            
00011F8A                            Obj5E_MoveSpike:			; XREF: Obj5E_Index
00011F8A 2268 003C                  		movea.l	$3C(a0),a1
00011F8E 7000                       		moveq	#0,d0
00011F90 1028 003A                  		move.b	$3A(a0),d0
00011F94 9029 003A                  		sub.b	$3A(a1),d0
00011F98 6700                       		beq.s	loc_1183E
00011F9A 6400                       		bcc.s	loc_117FC
00011F9C 4400                       		neg.b	d0
00011F9E                            
00011F9E                            loc_117FC:
00011F9E 323C F7E8                  		move.w	#-$818,d1
00011FA2 343C FEEC                  		move.w	#-$114,d2
00011FA6 0C00 0001                  		cmpi.b	#1,d0
00011FAA 6700                       		beq.s	loc_11822
00011FAC 323C F510                  		move.w	#-$AF0,d1
00011FB0 343C FF34                  		move.w	#-$CC,d2
00011FB4 0C69 0A00 0038             		cmpi.w	#$A00,$38(a1)
00011FBA 6D00                       		blt.s	loc_11822
00011FBC 323C F200                  		move.w	#-$E00,d1
00011FC0 343C FF60                  		move.w	#-$A0,d2
00011FC4                            
00011FC4                            loc_11822:
00011FC4 3141 0012                  		move.w	d1,$12(a0)
00011FC8 3142 0010                  		move.w	d2,$10(a0)
00011FCC 3028 0008                  		move.w	8(a0),d0
00011FD0 9068 0030                  		sub.w	$30(a0),d0
00011FD4 6400                       		bcc.s	loc_11838
00011FD6 4468 0010                  		neg.w	$10(a0)
00011FDA                            
00011FDA                            loc_11838:
00011FDA 5428 0024                  		addq.b	#2,$24(a0)
00011FDE 6000                       		bra.s	Obj5E_SpikeFall
00011FE0                            ; ===========================================================================
00011FE0                            
00011FE0                            loc_1183E:				; XREF: Obj5E_MoveSpike
00011FE0 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
00011FE6 7000                       		moveq	#0,d0
00011FE8 1029 001A                  		move.b	$1A(a1),d0
00011FEC 343C 0028                  		move.w	#$28,d2
00011FF0 3228 0008                  		move.w	8(a0),d1
00011FF4 9268 0030                  		sub.w	$30(a0),d1
00011FF8 6400                       		bcc.s	loc_1185C
00011FFA 4442                       		neg.w	d2
00011FFC 5440                       		addq.w	#2,d0
00011FFE                            
00011FFE                            loc_1185C:
00011FFE D040                       		add.w	d0,d0
00012000 3228 0034                  		move.w	$34(a0),d1
00012004 D272 0000                  		add.w	(a2,d0.w),d1
00012008 3141 000C                  		move.w	d1,$C(a0)
0001200C D468 0030                  		add.w	$30(a0),d2
00012010 3142 0008                  		move.w	d2,8(a0)
00012014 4268 000E                  		clr.w	$E(a0)
00012018 4268 000A                  		clr.w	$A(a0)
0001201C 4E75                       		rts	
0001201E                            ; ===========================================================================
0001201E                            
0001201E                            Obj5E_SpikeFall:			; XREF: Obj5E_Index
0001201E 4A68 0012                  		tst.w	$12(a0)
00012022 6A00                       		bpl.s	loc_1189A
00012024 6100 BD4A                  		bsr.w	ObjectFall
00012028 3028 0034                  		move.w	$34(a0),d0
0001202C 0440 002F                  		subi.w	#$2F,d0
00012030 B068 000C                  		cmp.w	$C(a0),d0
00012034 6E00                       		bgt.s	locret_11898
00012036 6100 BD38                  		bsr.w	ObjectFall
0001203A                            
0001203A                            locret_11898:
0001203A 4E75                       		rts	
0001203C                            ; ===========================================================================
0001203C                            
0001203C                            loc_1189A:				; XREF: Obj5E_SpikeFall
0001203C 6100 BD32                  		bsr.w	ObjectFall
00012040 2268 003C                  		movea.l	$3C(a0),a1
00012044 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
0001204A 7000                       		moveq	#0,d0
0001204C 1029 001A                  		move.b	$1A(a1),d0
00012050 3228 0008                  		move.w	8(a0),d1
00012054 9268 0030                  		sub.w	$30(a0),d1
00012058 6400                       		bcc.s	loc_118BA
0001205A 5440                       		addq.w	#2,d0
0001205C                            
0001205C                            loc_118BA:
0001205C D040                       		add.w	d0,d0
0001205E 3228 0034                  		move.w	$34(a0),d1
00012062 D272 0000                  		add.w	(a2,d0.w),d1
00012066 B268 000C                  		cmp.w	$C(a0),d1
0001206A 6E00                       		bgt.s	locret_11938
0001206C 2268 003C                  		movea.l	$3C(a0),a1
00012070 7202                       		moveq	#2,d1
00012072 4A68 0010                  		tst.w	$10(a0)
00012076 6B00                       		bmi.s	Obj5E_Spring
00012078 7200                       		moveq	#0,d1
0001207A                            
0001207A                            Obj5E_Spring:
0001207A 1341 003A                  		move.b	d1,$3A(a1)
0001207E 1141 003A                  		move.b	d1,$3A(a0)
00012082 B229 001A                  		cmp.b	$1A(a1),d1
00012086 6700                       		beq.s	loc_1192C
00012088 08A9 0003 0022             		bclr	#3,$22(a1)
0001208E 6700                       		beq.s	loc_1192C
00012090 4229 0025                  		clr.b	$25(a1)
00012094 137C 0002 0024             		move.b	#2,$24(a1)
0001209A 45F8 D000                  		lea	($FFFFD000).w,a2
0001209E 3568 0012 0012             		move.w	$12(a0),$12(a2)
000120A4 446A 0012                  		neg.w	$12(a2)
000120A8 08EA 0001 0022             		bset	#1,$22(a2)
000120AE 08AA 0003 0022             		bclr	#3,$22(a2)
000120B4 422A 003C                  		clr.b	$3C(a2)
000120B8 157C 0010 001C             		move.b	#$10,$1C(a2)	; change Sonic's animation to "spring" ($10)
000120BE 157C 0002 0024             		move.b	#2,$24(a2)
000120C4 303C 00CC                  		move.w	#$CC,d0
000120C8 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play spring sound
000120CE                            
000120CE                            loc_1192C:
000120CE 4268 0010                  		clr.w	$10(a0)
000120D2 4268 0012                  		clr.w	$12(a0)
000120D6 5528 0024                  		subq.b	#2,$24(a0)
000120DA                            
000120DA                            locret_11938:
000120DA 4E75                       		rts	
000120DC                            ; ===========================================================================
000120DC FFF8 FFE4 FFD1 FFE4 FFF8   Obj5E_Speeds:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
000120E6                            
000120E6                            Obj5E_Data1:	incbin	misc\slzssaw1.bin
00012116                            		even
00012116                            Obj5E_Data2:	incbin	misc\slzssaw2.bin
00012146                            		even
00012146                            ; ---------------------------------------------------------------------------
00012146                            ; Sprite mappings - seesaws (SLZ)
00012146                            ; ---------------------------------------------------------------------------
00012146                            Map_obj5E:
00012146                            	include "_maps\obj5E.asm"
00012146                            ; ---------------------------------------------------------------------------
00012146                            ; Sprite mappings - seesaws (SLZ)
00012146                            ; ---------------------------------------------------------------------------
00012146 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
0001214A 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
0001214E 07                         byte_119AC:	dc.b 7
0001214F D406 0000 D3               		dc.b $D4, 6, 0,	0, $D3
00012154 DC06 0006 E3               		dc.b $DC, 6, 0,	6, $E3
00012159 E404 000C F3               		dc.b $E4, 4, 0,	$C, $F3
0001215E EC0D 000E F3               		dc.b $EC, $D, 0, $E, $F3
00012163 FC08 0016 FB               		dc.b $FC, 8, 0,	$16, $FB
00012168 F406 0006 13               		dc.b $F4, 6, 0,	6, $13
0001216D FC05 0019 23               		dc.b $FC, 5, 0,	$19, $23
00012172 04                         byte_119D0:	dc.b 4
00012173 E60A 001D D0               		dc.b $E6, $A, 0, $1D, $D0
00012178 E60A 0023 E8               		dc.b $E6, $A, 0, $23, $E8
0001217D E60A 0823 00               		dc.b $E6, $A, 8, $23, 0
00012182 E60A 081D 18               		dc.b $E6, $A, 8, $1D, $18
00012188 00                         		even
00012188 00                         		even
00012188                            
00012188                            ; ---------------------------------------------------------------------------
00012188                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
00012188                            ; ---------------------------------------------------------------------------
00012188                            Map_obj5Ea:
00012188                            	include "_maps\obj5Eballs.asm"
00012188                            ; ---------------------------------------------------------------------------
00012188                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
00012188                            ; ---------------------------------------------------------------------------
00012188 0000                       		dc.w byte_119EA-Map_obj5Ea
0001218A 0000                       		dc.w byte_119F0-Map_obj5Ea
0001218C 01                         byte_119EA:	dc.b 1
0001218D F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00012192 01                         byte_119F0:	dc.b 1
00012193 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
00012198                            		even
00012198                            		even
00012198                            
00012198                            ; ===========================================================================
00012198                            ; ---------------------------------------------------------------------------
00012198                            ; Object 5F - walking bomb enemy (SLZ, SBZ)
00012198                            ; ---------------------------------------------------------------------------
00012198                            
00012198                            Obj5F:					; XREF: Obj_Index
00012198 7000                       		moveq	#0,d0
0001219A 1028 0024                  		move.b	$24(a0),d0
0001219E 323B 0000                  		move.w	Obj5F_Index(pc,d0.w),d1
000121A2 4EFB 1000                  		jmp	Obj5F_Index(pc,d1.w)
000121A6                            ; ===========================================================================
000121A6 0000                       Obj5F_Index:	dc.w Obj5F_Main-Obj5F_Index
000121A8 0000                       		dc.w Obj5F_Action-Obj5F_Index
000121AA 0000                       		dc.w Obj5F_Display-Obj5F_Index
000121AC 0000                       		dc.w Obj5F_End-Obj5F_Index
000121AE                            ; ===========================================================================
000121AE                            
000121AE                            Obj5F_Main:				; XREF: Obj5F_Index
000121AE 5428 0024                  		addq.b	#2,$24(a0)
000121B2 217C 0000 0000 0004        		move.l	#Map_obj5F,4(a0)
000121BA 317C 0400 0002             		move.w	#$400,2(a0)
000121C0 0028 0004 0001             		ori.b	#4,1(a0)
000121C6 117C 0003 0018             		move.b	#3,$18(a0)
000121CC 117C 000C 0019             		move.b	#$C,$19(a0)
000121D2 1028 0028                  		move.b	$28(a0),d0
000121D6 6700                       		beq.s	loc_11A3C
000121D8 1140 0024                  		move.b	d0,$24(a0)
000121DC 4E75                       		rts	
000121DE                            ; ===========================================================================
000121DE                            
000121DE                            loc_11A3C:
000121DE 117C 009A 0020             		move.b	#$9A,$20(a0)
000121E4 0868 0000 0022             		bchg	#0,$22(a0)
000121EA                            
000121EA                            Obj5F_Action:				; XREF: Obj5F_Index
000121EA 7000                       		moveq	#0,d0
000121EC 1028 0025                  		move.b	$25(a0),d0
000121F0 323B 0000                  		move.w	Obj5F_Index2(pc,d0.w),d1
000121F4 4EBB 1000                  		jsr	Obj5F_Index2(pc,d1.w)
000121F8 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
000121FE 6100 8C82                  		bsr.w	AnimateSprite
00012202 6000 DC66                  		bra.w	MarkObjGone
00012206                            ; ===========================================================================
00012206 0000                       Obj5F_Index2:	dc.w Obj5F_Walk-Obj5F_Index2
00012208 0000                       		dc.w Obj5F_Wait-Obj5F_Index2
0001220A 0000                       		dc.w Obj5F_Explode-Obj5F_Index2
0001220C                            ; ===========================================================================
0001220C                            
0001220C                            Obj5F_Walk:				; XREF: Obj5F_Index2
0001220C 6100 0000                  		bsr.w	Obj5F_ChkSonic
00012210 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00012214 6A00                       		bpl.s	locret_11A96	; if time remains, branch
00012216 5428 0025                  		addq.b	#2,$25(a0)
0001221A 317C 05FF 0030             		move.w	#1535,$30(a0)	; set time delay to 25 seconds
00012220 317C 0010 0010             		move.w	#$10,$10(a0)
00012226 117C 0001 001C             		move.b	#1,$1C(a0)
0001222C 0868 0000 0022             		bchg	#0,$22(a0)
00012232 6700                       		beq.s	locret_11A96
00012234 4468 0010                  		neg.w	$10(a0)		; change direction
00012238                            
00012238                            locret_11A96:
00012238 4E75                       		rts	
0001223A                            ; ===========================================================================
0001223A                            
0001223A                            Obj5F_Wait:				; XREF: Obj5F_Index2
0001223A 6100 0000                  		bsr.w	Obj5F_ChkSonic
0001223E 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00012242 6B00                       		bmi.s	loc_11AA8
00012244 6100 BB56                  		bsr.w	SpeedToPos
00012248 4E75                       		rts	
0001224A                            ; ===========================================================================
0001224A                            
0001224A                            loc_11AA8:
0001224A 5528 0025                  		subq.b	#2,$25(a0)
0001224E 317C 00B3 0030             		move.w	#179,$30(a0)	; set time delay to 3 seconds
00012254 4268 0010                  		clr.w	$10(a0)		; stop walking
00012258 117C 0000 001C             		move.b	#0,$1C(a0)	; stop animation
0001225E 4E75                       		rts	
00012260                            ; ===========================================================================
00012260                            
00012260                            Obj5F_Explode:				; XREF: Obj5F_Index2
00012260 5368 0030                  		subq.w	#1,$30(a0)
00012264 6A00                       		bpl.s	locret_11AD0
00012266 10BC 003F                  		move.b	#$3F,0(a0)	; change bomb into an explosion
0001226A 117C 0000 0024             		move.b	#0,$24(a0)
00012270                            
00012270                            locret_11AD0:
00012270 4E75                       		rts	
00012272                            ; ===========================================================================
00012272                            
00012272                            Obj5F_ChkSonic:				; XREF: Obj5F_Walk; Obj5F_Wait
00012272 3038 D008                  		move.w	($FFFFD008).w,d0
00012276 9068 0008                  		sub.w	8(a0),d0
0001227A 6400                       		bcc.s	loc_11ADE
0001227C 4440                       		neg.w	d0
0001227E                            
0001227E                            loc_11ADE:
0001227E 0C40 0060                  		cmpi.w	#$60,d0
00012282 6400                       		bcc.s	locret_11B5E
00012284 3038 D00C                  		move.w	($FFFFD00C).w,d0
00012288 9068 000C                  		sub.w	$C(a0),d0
0001228C 6400                       		bcc.s	Obj5F_MakeFuse
0001228E 4440                       		neg.w	d0
00012290                            
00012290                            Obj5F_MakeFuse:
00012290 0C40 0060                  		cmpi.w	#$60,d0
00012294 6400                       		bcc.s	locret_11B5E
00012296 4A78 FE08                  		tst.w	($FFFFFE08).w
0001229A 6600                       		bne.s	locret_11B5E
0001229C 117C 0004 0025             		move.b	#4,$25(a0)
000122A2 317C 008F 0030             		move.w	#143,$30(a0)	; set fuse time
000122A8 4268 0010                  		clr.w	$10(a0)
000122AC 117C 0002 001C             		move.b	#2,$1C(a0)
000122B2 6100 BFAA                  		bsr.w	SingleObjLoad2
000122B6 6600                       		bne.s	locret_11B5E
000122B8 12BC 005F                  		move.b	#$5F,0(a1)	; load fuse object
000122BC 3368 0008 0008             		move.w	8(a0),8(a1)
000122C2 3368 000C 000C             		move.w	$C(a0),$C(a1)
000122C8 3368 000C 0034             		move.w	$C(a0),$34(a1)
000122CE 1368 0022 0022             		move.b	$22(a0),$22(a1)
000122D4 137C 0004 0028             		move.b	#4,$28(a1)
000122DA 137C 0003 001C             		move.b	#3,$1C(a1)
000122E0 337C 0010 0012             		move.w	#$10,$12(a1)
000122E6 0828 0001 0022             		btst	#1,$22(a0)
000122EC 6700                       		beq.s	loc_11B54
000122EE 4469 0012                  		neg.w	$12(a1)
000122F2                            
000122F2                            loc_11B54:
000122F2 337C 008F 0030             		move.w	#143,$30(a1)	; set fuse time
000122F8 2348 003C                  		move.l	a0,$3C(a1)
000122FC                            
000122FC                            locret_11B5E:
000122FC 4E75                       		rts	
000122FE                            ; ===========================================================================
000122FE                            
000122FE                            Obj5F_Display:				; XREF: Obj5F_Index
000122FE 6100                       		bsr.s	loc_11B70
00012300 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00012306 6100 8B7A                  		bsr.w	AnimateSprite
0001230A 6000 DB5E                  		bra.w	MarkObjGone
0001230E                            ; ===========================================================================
0001230E                            
0001230E                            loc_11B70:
0001230E 5368 0030                  		subq.w	#1,$30(a0)
00012312 6B00                       		bmi.s	loc_11B7C
00012314 6100 BA86                  		bsr.w	SpeedToPos
00012318 4E75                       		rts	
0001231A                            ; ===========================================================================
0001231A                            
0001231A                            loc_11B7C:
0001231A 4268 0030                  		clr.w	$30(a0)
0001231E 4228 0024                  		clr.b	$24(a0)
00012322 3168 0034 000C             		move.w	$34(a0),$C(a0)
00012328 7203                       		moveq	#3,d1
0001232A 2248                       		movea.l	a0,a1
0001232C 45F9 0000 0000             		lea	(Obj5F_ShrSpeed).l,a2 ;	load shrapnel speed data
00012332 6000                       		bra.s	Obj5F_MakeShrap
00012334                            ; ===========================================================================
00012334                            
00012334                            Obj5F_Loop:
00012334 6100 BF28                  		bsr.w	SingleObjLoad2
00012338 6600                       		bne.s	loc_11BCE
0001233A                            
0001233A                            Obj5F_MakeShrap:			; XREF: loc_11B7C
0001233A 12BC 005F                  		move.b	#$5F,0(a1)	; load shrapnel	object
0001233E 3368 0008 0008             		move.w	8(a0),8(a1)
00012344 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001234A 137C 0006 0028             		move.b	#6,$28(a1)
00012350 137C 0004 001C             		move.b	#4,$1C(a1)
00012356 335A 0010                  		move.w	(a2)+,$10(a1)
0001235A 335A 0012                  		move.w	(a2)+,$12(a1)
0001235E 137C 0098 0020             		move.b	#$98,$20(a1)
00012364 08E9 0007 0001             		bset	#7,1(a1)
0001236A                            
0001236A                            loc_11BCE:
0001236A 51C9 FFC8                  		dbf	d1,Obj5F_Loop	; repeat 3 more	times
0001236E                            
0001236E 117C 0006 0024             		move.b	#6,$24(a0)
00012374                            
00012374                            Obj5F_End:				; XREF: Obj5F_Index
00012374 6100 BA26                  		bsr.w	SpeedToPos
00012378 0668 0018 0012             		addi.w	#$18,$12(a0)
0001237E 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00012384 6100 8AFC                  		bsr.w	AnimateSprite
00012388 4A28 0001                  		tst.b	1(a0)
0001238C 6A00 BA70                  		bpl.w	DeleteObject
00012390 6000 BA30                  		bra.w	DisplaySprite
00012394                            ; ===========================================================================
00012394 FE00 FD00 FF00 FE00 0200+  Obj5F_ShrSpeed:	dc.w $FE00, $FD00, $FF00, $FE00, $200, $FD00, $100, $FE00
000123A4                            
000123A4                            Ani_obj5F:
000123A4                            	include "_anim\obj5F.asm"
000123A4                            ; ---------------------------------------------------------------------------
000123A4                            ; Animation script - Bomb enemy
000123A4                            ; ---------------------------------------------------------------------------
000123A4 0000                       		dc.w byte_11C12-Ani_obj5F
000123A6 0000                       		dc.w byte_11C16-Ani_obj5F
000123A8 0000                       		dc.w byte_11C1C-Ani_obj5F
000123AA 0000                       		dc.w byte_11C20-Ani_obj5F
000123AC 0000                       		dc.w byte_11C24-Ani_obj5F
000123AE 1301 00FF                  byte_11C12:	dc.b $13, 1, 0,	$FF
000123B2 1305 0403 02FF             byte_11C16:	dc.b $13, 5, 4,	3, 2, $FF
000123B8 1307 06FF                  byte_11C1C:	dc.b $13, 7, 6,	$FF
000123BC 0308 09FF                  byte_11C20:	dc.b 3,	8, 9, $FF
000123C0 030A 0BFF                  byte_11C24:	dc.b 3,	$A, $B,	$FF
000123C4                            		even
000123C4                            		even
000123C4                            
000123C4                            ; ---------------------------------------------------------------------------
000123C4                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
000123C4                            ; ---------------------------------------------------------------------------
000123C4                            Map_obj5F:
000123C4                            	include "_maps\obj5F.asm"
000123C4                            ; ---------------------------------------------------------------------------
000123C4                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
000123C4                            ; ---------------------------------------------------------------------------
000123C4 0000 0000                  		dc.w byte_11C40-Map_obj5F, byte_11C50-Map_obj5F
000123C8 0000 0000                  		dc.w byte_11C60-Map_obj5F, byte_11C70-Map_obj5F
000123CC 0000 0000                  		dc.w byte_11C80-Map_obj5F, byte_11C90-Map_obj5F
000123D0 0000 0000                  		dc.w byte_11CA0-Map_obj5F, byte_11CAB-Map_obj5F
000123D4 0000 0000                  		dc.w byte_11CB6-Map_obj5F, byte_11CBC-Map_obj5F
000123D8 0000 0000                  		dc.w byte_11CC2-Map_obj5F, byte_11CC8-Map_obj5F
000123DC 03                         byte_11C40:	dc.b 3
000123DD F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
000123E2 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
000123E7 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
000123EC 03                         byte_11C50:	dc.b 3
000123ED F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
000123F2 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
000123F7 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
000123FC 03                         byte_11C60:	dc.b 3
000123FD F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
00012402 0808 0015 F4               		dc.b 8,	8, 0, $15, $F4
00012407 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
0001240C 03                         byte_11C70:	dc.b 3
0001240D F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00012412 0908 0018 F4               		dc.b 9,	8, 0, $18, $F4
00012417 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
0001241C 03                         byte_11C80:	dc.b 3
0001241D F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
00012422 0808 001B F4               		dc.b 8,	8, 0, $1B, $F4
00012427 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
0001242C 03                         byte_11C90:	dc.b 3
0001242D F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00012432 0908 001E F4               		dc.b 9,	8, 0, $1E, $F4
00012437 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
0001243C 02                         byte_11CA0:	dc.b 2
0001243D F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
00012442 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00012447 02                         byte_11CAB:	dc.b 2
00012448 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
0001244D 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00012452 01                         byte_11CB6:	dc.b 1			; fuse	(just before it	explodes)
00012453 E701 0023 FC               		dc.b $E7, 1, 0,	$23, $FC
00012458 01                         byte_11CBC:	dc.b 1			; fuse
00012459 E701 0025 FC               		dc.b $E7, 1, 0,	$25, $FC
0001245E 01                         byte_11CC2:	dc.b 1			; fireball (after it exploded)
0001245F FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
00012464 01                         byte_11CC8:	dc.b 1			; fireball
00012465 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
0001246A                            		even
0001246A                            		even
0001246A                            
0001246A                            ; ===========================================================================
0001246A                            ; ---------------------------------------------------------------------------
0001246A                            ; Object 60 - Orbinaut enemy (LZ, SLZ, SBZ)
0001246A                            ; ---------------------------------------------------------------------------
0001246A                            
0001246A                            Obj60:					; XREF: Obj_Index
0001246A 7000                       		moveq	#0,d0
0001246C 1028 0024                  		move.b	$24(a0),d0
00012470 323B 0000                  		move.w	Obj60_Index(pc,d0.w),d1
00012474 4EFB 1000                  		jmp	Obj60_Index(pc,d1.w)
00012478                            ; ===========================================================================
00012478 0000                       Obj60_Index:	dc.w Obj60_Main-Obj60_Index
0001247A 0000                       		dc.w Obj60_ChkSonic-Obj60_Index
0001247C 0000                       		dc.w Obj60_Display-Obj60_Index
0001247E 0000                       		dc.w Obj60_MoveOrb-Obj60_Index
00012480 0000                       		dc.w Obj60_ChkDel2-Obj60_Index
00012482                            ; ===========================================================================
00012482                            
00012482                            Obj60_Main:				; XREF: Obj60_Index
00012482 217C 0000 0000 0004        		move.l	#Map_obj60,4(a0)
0001248A 317C 0429 0002             		move.w	#$429,2(a0)	; SBZ specific code
00012490 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00012496 6700                       		beq.s	loc_11D02
00012498 317C 2429 0002             		move.w	#$2429,2(a0)	; SLZ specific code
0001249E                            
0001249E                            loc_11D02:
0001249E 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
000124A4 6600                       		bne.s	loc_11D10
000124A6 317C 0467 0002             		move.w	#$467,2(a0)	; LZ specific code
000124AC                            
000124AC                            loc_11D10:
000124AC 0028 0004 0001             		ori.b	#4,1(a0)
000124B2 117C 0004 0018             		move.b	#4,$18(a0)
000124B8 117C 000B 0020             		move.b	#$B,$20(a0)
000124BE 117C 000C 0019             		move.b	#$C,$19(a0)
000124C4 7400                       		moveq	#0,d2
000124C6 45E8 0037                  		lea	$37(a0),a2
000124CA 264A                       		movea.l	a2,a3
000124CC 524A                       		addq.w	#1,a2
000124CE 7203                       		moveq	#3,d1
000124D0                            
000124D0                            Obj60_MakeOrbs:
000124D0 6100 BD8C                  		bsr.w	SingleObjLoad2
000124D4 6600                       		bne.s	loc_11D90
000124D6 5213                       		addq.b	#1,(a3)
000124D8 3A09                       		move.w	a1,d5
000124DA 0445 D000                  		subi.w	#-$3000,d5
000124DE EC4D                       		lsr.w	#6,d5
000124E0 0245 007F                  		andi.w	#$7F,d5
000124E4 14C5                       		move.b	d5,(a2)+
000124E6 1290                       		move.b	0(a0),0(a1)	; load spiked orb object
000124E8 137C 0006 0024             		move.b	#6,$24(a1)
000124EE 2368 0004 0004             		move.l	4(a0),4(a1)
000124F4 3368 0002 0002             		move.w	2(a0),2(a1)
000124FA 0029 0004 0001             		ori.b	#4,1(a1)
00012500 137C 0004 0018             		move.b	#4,$18(a1)
00012506 137C 0008 0019             		move.b	#8,$19(a1)
0001250C 137C 0003 001A             		move.b	#3,$1A(a1)
00012512 137C 0098 0020             		move.b	#$98,$20(a1)
00012518 1342 0026                  		move.b	d2,$26(a1)
0001251C 0602 0040                  		addi.b	#$40,d2
00012520 2348 003C                  		move.l	a0,$3C(a1)
00012524 51C9 FFAA                  		dbf	d1,Obj60_MakeOrbs ; repeat sequence 3 more times
00012528                            
00012528                            loc_11D90:
00012528 7001                       		moveq	#1,d0
0001252A 0828 0000 0022             		btst	#0,$22(a0)
00012530 6700                       		beq.s	Obj60_Move
00012532 4440                       		neg.w	d0
00012534                            
00012534                            Obj60_Move:
00012534 1140 0036                  		move.b	d0,$36(a0)
00012538 1168 0028 0024             		move.b	$28(a0),$24(a0)	; if type is 02, skip the firing rountine
0001253E 5428 0024                  		addq.b	#2,$24(a0)
00012542 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move orbinaut	to the left
00012548 0828 0000 0022             		btst	#0,$22(a0)	; is orbinaut reversed?
0001254E 6700                       		beq.s	locret_11DBC	; if not, branch
00012550 4468 0010                  		neg.w	$10(a0)		; move orbinaut	to the right
00012554                            
00012554                            locret_11DBC:
00012554 4E75                       		rts	
00012556                            ; ===========================================================================
00012556                            
00012556                            Obj60_ChkSonic:				; XREF: Obj60_Index
00012556 3038 D008                  		move.w	($FFFFD008).w,d0
0001255A 9068 0008                  		sub.w	8(a0),d0
0001255E 6400                       		bcc.s	loc_11DCA
00012560 4440                       		neg.w	d0
00012562                            
00012562                            loc_11DCA:
00012562 0C40 00A0                  		cmpi.w	#$A0,d0		; is Sonic within $A0 pixels of	orbinaut?
00012566 6400                       		bcc.s	Obj60_Animate	; if not, branch
00012568 3038 D00C                  		move.w	($FFFFD00C).w,d0
0001256C 9068 000C                  		sub.w	$C(a0),d0
00012570 6400                       		bcc.s	loc_11DDC
00012572 4440                       		neg.w	d0
00012574                            
00012574                            loc_11DDC:
00012574 0C40 0050                  		cmpi.w	#$50,d0		; is Sonic within $50 pixels of	orbinaut?
00012578 6400                       		bcc.s	Obj60_Animate	; if not, branch
0001257A 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
0001257E 6600                       		bne.s	Obj60_Animate	; if yes, branch
00012580 117C 0001 001C             		move.b	#1,$1C(a0)	; use "angry" animation
00012586                            
00012586                            Obj60_Animate:
00012586 43F9 0000 0000             		lea	(Ani_obj60).l,a1
0001258C 6100 88F4                  		bsr.w	AnimateSprite
00012590 6000 0000                  		bra.w	Obj60_ChkDel
00012594                            ; ===========================================================================
00012594                            
00012594                            Obj60_Display:				; XREF: Obj60_Index
00012594 6100 B806                  		bsr.w	SpeedToPos
00012598                            
00012598                            Obj60_ChkDel:				; XREF: Obj60_Animate
00012598 3028 0008                  		move.w	8(a0),d0
0001259C 0240 FF80                  		andi.w	#$FF80,d0
000125A0 3238 F700                  		move.w	($FFFFF700).w,d1
000125A4 0441 0080                  		subi.w	#$80,d1
000125A8 0241 FF80                  		andi.w	#$FF80,d1
000125AC 9041                       		sub.w	d1,d0
000125AE 0C40 0280                  		cmpi.w	#$280,d0
000125B2 6200 0000                  		bhi.w	Obj60_ChkGone
000125B6 6000 B80A                  		bra.w	DisplaySprite
000125BA                            ; ===========================================================================
000125BA                            
000125BA                            Obj60_ChkGone:				; XREF: Obj60_ChkDel
000125BA 45F8 FC00                  		lea	($FFFFFC00).w,a2
000125BE 7000                       		moveq	#0,d0
000125C0 1028 0023                  		move.b	$23(a0),d0
000125C4 6700                       		beq.s	loc_11E34
000125C6 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000125CC                            
000125CC                            loc_11E34:
000125CC 45E8 0037                  		lea	$37(a0),a2
000125D0 7400                       		moveq	#0,d2
000125D2 141A                       		move.b	(a2)+,d2
000125D4 5342                       		subq.w	#1,d2
000125D6 6500                       		bcs.s	Obj60_Delete
000125D8                            
000125D8                            loc_11E40:
000125D8 7000                       		moveq	#0,d0
000125DA 101A                       		move.b	(a2)+,d0
000125DC ED48                       		lsl.w	#6,d0
000125DE 0680 00FF D000             		addi.l	#$FFD000,d0
000125E4 2240                       		movea.l	d0,a1
000125E6 6100 B818                  		bsr.w	DeleteObject2
000125EA 51CA FFEC                  		dbf	d2,loc_11E40
000125EE                            
000125EE                            Obj60_Delete:
000125EE 6000 B80E                  		bra.w	DeleteObject
000125F2                            ; ===========================================================================
000125F2                            
000125F2                            Obj60_MoveOrb:				; XREF: Obj60_Index
000125F2 2268 003C                  		movea.l	$3C(a0),a1
000125F6 0C11 0060                  		cmpi.b	#$60,0(a1)
000125FA 6600 B802                  		bne.w	DeleteObject
000125FE 0C29 0002 001A             		cmpi.b	#2,$1A(a1)
00012604 6600                       		bne.s	Obj60_Circle
00012606 0C28 0040 0026             		cmpi.b	#$40,$26(a0)
0001260C 6600                       		bne.s	Obj60_Circle
0001260E 5428 0024                  		addq.b	#2,$24(a0)
00012612 5329 0037                  		subq.b	#1,$37(a1)
00012616 6600                       		bne.s	Obj60_FireOrb
00012618 5429 0024                  		addq.b	#2,$24(a1)
0001261C                            
0001261C                            Obj60_FireOrb:
0001261C 317C FE00 0010             		move.w	#-$200,$10(a0)	; move orb to the left (quickly)
00012622 0829 0000 0022             		btst	#0,$22(a1)
00012628 6700                       		beq.s	Obj60_Display2
0001262A 4468 0010                  		neg.w	$10(a0)
0001262E                            
0001262E                            Obj60_Display2:
0001262E 6000 B792                  		bra.w	DisplaySprite
00012632                            ; ===========================================================================
00012632                            
00012632                            Obj60_Circle:				; XREF: Obj60_MoveOrb
00012632 1028 0026                  		move.b	$26(a0),d0
00012636 4EB9 0000 2CC4             		jsr	(CalcSine).l
0001263C E841                       		asr.w	#4,d1
0001263E D269 0008                  		add.w	8(a1),d1
00012642 3141 0008                  		move.w	d1,8(a0)
00012646 E840                       		asr.w	#4,d0
00012648 D069 000C                  		add.w	$C(a1),d0
0001264C 3140 000C                  		move.w	d0,$C(a0)
00012650 1029 0036                  		move.b	$36(a1),d0
00012654 D128 0026                  		add.b	d0,$26(a0)
00012658 6000 B768                  		bra.w	DisplaySprite
0001265C                            ; ===========================================================================
0001265C                            
0001265C                            Obj60_ChkDel2:				; XREF: Obj60_Index
0001265C 6100 B73E                  		bsr.w	SpeedToPos
00012660 4A28 0001                  		tst.b	1(a0)
00012664 6A00 B798                  		bpl.w	DeleteObject
00012668 6000 B758                  		bra.w	DisplaySprite
0001266C                            ; ===========================================================================
0001266C                            Ani_obj60:
0001266C                            	include "_anim\obj60.asm"
0001266C                            ; ---------------------------------------------------------------------------
0001266C                            ; Animation script - Orbinaut enemy
0001266C                            ; ---------------------------------------------------------------------------
0001266C 0000                       		dc.w byte_11EDA-Ani_obj60
0001266E 0000                       		dc.w byte_11EDE-Ani_obj60
00012670 0F00 FF00                  byte_11EDA:	dc.b $F, 0, $FF, 0
00012674 0F01 02FE 0100             byte_11EDE:	dc.b $F, 1, 2, $FE, 1, 0
0001267A                            		even
0001267A                            		even
0001267A                            
0001267A                            ; ---------------------------------------------------------------------------
0001267A                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
0001267A                            ; ---------------------------------------------------------------------------
0001267A                            Map_obj60:
0001267A                            	include "_maps\obj60.asm"
0001267A                            ; ---------------------------------------------------------------------------
0001267A                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
0001267A                            ; ---------------------------------------------------------------------------
0001267A 0000 0000                  		dc.w byte_11EEC-Map_obj60, byte_11EF2-Map_obj60
0001267E 0000 0000                  		dc.w byte_11EF8-Map_obj60, byte_11EFE-Map_obj60
00012682 01                         byte_11EEC:	dc.b 1
00012683 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00012688 01                         byte_11EF2:	dc.b 1
00012689 F40A 2009 F4               		dc.b $F4, $A, $20, 9, $F4
0001268E 01                         byte_11EF8:	dc.b 1
0001268F F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
00012694 01                         byte_11EFE:	dc.b 1
00012695 F805 001B F8               		dc.b $F8, 5, 0,	$1B, $F8
0001269A                            		even
0001269A                            		even
0001269A                            
0001269A                            ; ===========================================================================
0001269A                            ; ---------------------------------------------------------------------------
0001269A                            ; Object 16 - harpoon (LZ)
0001269A                            ; ---------------------------------------------------------------------------
0001269A                            
0001269A                            Obj16:					; XREF: Obj_Index
0001269A 7000                       		moveq	#0,d0
0001269C 1028 0024                  		move.b	$24(a0),d0
000126A0 323B 0000                  		move.w	Obj16_Index(pc,d0.w),d1
000126A4 4EFB 1000                  		jmp	Obj16_Index(pc,d1.w)
000126A8                            ; ===========================================================================
000126A8 0000                       Obj16_Index:	dc.w Obj16_Main-Obj16_Index
000126AA 0000                       		dc.w Obj16_Move-Obj16_Index
000126AC 0000                       		dc.w Obj16_Wait-Obj16_Index
000126AE                            ; ===========================================================================
000126AE                            
000126AE                            Obj16_Main:				; XREF: Obj16_Index
000126AE 5428 0024                  		addq.b	#2,$24(a0)
000126B2 217C 0000 0000 0004        		move.l	#Map_obj16,4(a0)
000126BA 317C 03CC 0002             		move.w	#$3CC,2(a0)
000126C0 0028 0004 0001             		ori.b	#4,1(a0)
000126C6 117C 0004 0018             		move.b	#4,$18(a0)
000126CC 1168 0028 001C             		move.b	$28(a0),$1C(a0)
000126D2 117C 0014 0019             		move.b	#$14,$19(a0)
000126D8 317C 003C 0030             		move.w	#60,$30(a0)
000126DE                            
000126DE                            Obj16_Move:				; XREF: Obj16_Index
000126DE 43F9 0000 0000             		lea	(Ani_obj16).l,a1
000126E4 6100 879C                  		bsr.w	AnimateSprite
000126E8 7000                       		moveq	#0,d0
000126EA 1028 001A                  		move.b	$1A(a0),d0	; move frame number to d0
000126EE 117B 0000 0020             		move.b	Obj16_Data(pc,d0.w),$20(a0) ; load collision response (based on	d0)
000126F4 6000 D774                  		bra.w	MarkObjGone
000126F8                            ; ===========================================================================
000126F8 9B9C 9D9E 9FA0             Obj16_Data:	dc.b $9B, $9C, $9D, $9E, $9F, $A0
000126FE                            ; ===========================================================================
000126FE                            
000126FE                            Obj16_Wait:				; XREF: Obj16_Index
000126FE 5368 0030                  		subq.w	#1,$30(a0)
00012702 6A00                       		bpl.s	Obj16_ChkDel
00012704 317C 003C 0030             		move.w	#60,$30(a0)
0001270A 5528 0024                  		subq.b	#2,$24(a0)	; run "Obj16_Move" subroutine
0001270E 0868 0000 001C             		bchg	#0,$1C(a0)	; reverse animation
00012714                            
00012714                            Obj16_ChkDel:
00012714 6000 D754                  		bra.w	MarkObjGone
00012718                            ; ===========================================================================
00012718                            Ani_obj16:
00012718                            	include "_anim\obj16.asm"
00012718                            ; ---------------------------------------------------------------------------
00012718                            ; Animation script - harpoon (LZ)
00012718                            ; ---------------------------------------------------------------------------
00012718 0000                       		dc.w byte_11F8A-Ani_obj16
0001271A 0000                       		dc.w byte_11F8E-Ani_obj16
0001271C 0000                       		dc.w byte_11F92-Ani_obj16
0001271E 0000                       		dc.w byte_11F96-Ani_obj16
00012720 0301 02FC                  byte_11F8A:	dc.b 3,	1, 2, $FC
00012724 0301 00FC                  byte_11F8E:	dc.b 3,	1, 0, $FC
00012728 0304 05FC                  byte_11F92:	dc.b 3,	4, 5, $FC
0001272C 0304 03FC                  byte_11F96:	dc.b 3,	4, 3, $FC
00012730                            		even
00012730                            		even
00012730                            
00012730                            ; ---------------------------------------------------------------------------
00012730                            ; Sprite mappings - harpoon (LZ)
00012730                            ; ---------------------------------------------------------------------------
00012730                            Map_obj16:
00012730                            	include "_maps\obj16.asm"
00012730                            ; ---------------------------------------------------------------------------
00012730                            ; Sprite mappings - harpoon (LZ)
00012730                            ; ---------------------------------------------------------------------------
00012730 0000 0000                  		dc.w byte_11FA6-Map_obj16, byte_11FAC-Map_obj16
00012734 0000 0000                  		dc.w byte_11FB2-Map_obj16, byte_11FBD-Map_obj16
00012738 0000 0000                  		dc.w byte_11FC3-Map_obj16, byte_11FC9-Map_obj16
0001273C 01                         byte_11FA6:	dc.b 1
0001273D FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
00012742 01                         byte_11FAC:	dc.b 1
00012743 FC0C 0002 F8               		dc.b $FC, $C, 0, 2, $F8
00012748 02                         byte_11FB2:	dc.b 2
00012749 FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8
0001274E FC08 0003 10               		dc.b $FC, 8, 0,	3, $10
00012753 01                         byte_11FBD:	dc.b 1
00012754 F801 0009 FC               		dc.b $F8, 1, 0,	9, $FC
00012759 01                         byte_11FC3:	dc.b 1
0001275A E803 000B FC               		dc.b $E8, 3, 0,	$B, $FC
0001275F 02                         byte_11FC9:	dc.b 2
00012760 D802 000B FC               		dc.b $D8, 2, 0,	$B, $FC
00012765 F002 000F FC               		dc.b $F0, 2, 0,	$F, $FC
0001276A                            		even
0001276A                            		even
0001276A                            
0001276A                            ; ===========================================================================
0001276A                            ; ---------------------------------------------------------------------------
0001276A                            ; Object 61 - blocks (LZ)
0001276A                            ; ---------------------------------------------------------------------------
0001276A                            
0001276A                            Obj61:					; XREF: Obj_Index
0001276A 7000                       		moveq	#0,d0
0001276C 1028 0024                  		move.b	$24(a0),d0
00012770 323B 0000                  		move.w	Obj61_Index(pc,d0.w),d1
00012774 4EFB 1000                  		jmp	Obj61_Index(pc,d1.w)
00012778                            ; ===========================================================================
00012778 0000                       Obj61_Index:	dc.w Obj61_Main-Obj61_Index
0001277A 0000                       		dc.w Obj61_Action-Obj61_Index
0001277C                            
0001277C 1010                       Obj61_Var:	dc.b $10, $10		; width, height
0001277E 200C                       		dc.b $20, $C
00012780 1010                       		dc.b $10, $10
00012782 1010                       		dc.b $10, $10
00012784                            ; ===========================================================================
00012784                            
00012784                            Obj61_Main:				; XREF: Obj61_Index
00012784 5428 0024                  		addq.b	#2,$24(a0)
00012788 217C 0000 0000 0004        		move.l	#Map_obj61,4(a0)
00012790 317C 43E6 0002             		move.w	#$43E6,2(a0)
00012796 117C 0004 0001             		move.b	#4,1(a0)
0001279C 117C 0003 0018             		move.b	#3,$18(a0)
000127A2 7000                       		moveq	#0,d0
000127A4 1028 0028                  		move.b	$28(a0),d0
000127A8 E648                       		lsr.w	#3,d0
000127AA 0240 000E                  		andi.w	#$E,d0
000127AE 45FB 00CC                  		lea	Obj61_Var(pc,d0.w),a2
000127B2 115A 0019                  		move.b	(a2)+,$19(a0)
000127B6 1152 0016                  		move.b	(a2),$16(a0)
000127BA E248                       		lsr.w	#1,d0
000127BC 1140 001A                  		move.b	d0,$1A(a0)
000127C0 3168 0008 0034             		move.w	8(a0),$34(a0)
000127C6 3168 000C 0030             		move.w	$C(a0),$30(a0)
000127CC 1028 0028                  		move.b	$28(a0),d0
000127D0 0200 000F                  		andi.b	#$F,d0
000127D4 6700                       		beq.s	Obj61_Action
000127D6 0C00 0007                  		cmpi.b	#7,d0
000127DA 6700                       		beq.s	Obj61_Action
000127DC 117C 0001 0038             		move.b	#1,$38(a0)
000127E2                            
000127E2                            Obj61_Action:				; XREF: Obj61_Index
000127E2 3F28 0008                  		move.w	8(a0),-(sp)
000127E6 7000                       		moveq	#0,d0
000127E8 1028 0028                  		move.b	$28(a0),d0
000127EC 0240 000F                  		andi.w	#$F,d0
000127F0 D040                       		add.w	d0,d0
000127F2 323B 0000                  		move.w	Obj61_TypeIndex(pc,d0.w),d1
000127F6 4EBB 1000                  		jsr	Obj61_TypeIndex(pc,d1.w)
000127FA 381F                       		move.w	(sp)+,d4
000127FC 4A28 0001                  		tst.b	1(a0)
00012800 6A00                       		bpl.s	Obj61_ChkDel
00012802 7200                       		moveq	#0,d1
00012804 1228 0019                  		move.b	$19(a0),d1
00012808 0641 000B                  		addi.w	#$B,d1
0001280C 7400                       		moveq	#0,d2
0001280E 1428 0016                  		move.b	$16(a0),d2
00012812 3602                       		move.w	d2,d3
00012814 5243                       		addq.w	#1,d3
00012816 6100 D97A                  		bsr.w	SolidObject
0001281A 1144 003F                  		move.b	d4,$3F(a0)
0001281E 6100 0000                  		bsr.w	loc_12180
00012822                            
00012822                            Obj61_ChkDel:
00012822 3028 0034                  		move.w	$34(a0),d0
00012826 0240 FF80                  		andi.w	#$FF80,d0
0001282A 3238 F700                  		move.w	($FFFFF700).w,d1
0001282E 0441 0080                  		subi.w	#$80,d1
00012832 0241 FF80                  		andi.w	#$FF80,d1
00012836 9041                       		sub.w	d1,d0
00012838 0C40 0280                  		cmpi.w	#$280,d0
0001283C 6200 B5C0                  		bhi.w	DeleteObject
00012840 6000 B580                  		bra.w	DisplaySprite
00012844                            ; ===========================================================================
00012844 0000 0000                  Obj61_TypeIndex:dc.w Obj61_Type00-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
00012848 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
0001284C 0000 0000                  		dc.w Obj61_Type04-Obj61_TypeIndex, Obj61_Type05-Obj61_TypeIndex
00012850 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type07-Obj61_TypeIndex
00012854                            ; ===========================================================================
00012854                            
00012854                            Obj61_Type00:				; XREF: Obj61_TypeIndex
00012854 4E75                       		rts	
00012856                            ; ===========================================================================
00012856                            
00012856                            Obj61_Type01:				; XREF: Obj61_TypeIndex
00012856 4A68 0036                  		tst.w	$36(a0)		; is Sonic standing on the object?
0001285A 6600                       		bne.s	loc_120D6	; if yes, branch
0001285C 0828 0003 0022             		btst	#3,$22(a0)
00012862 6700                       		beq.s	locret_120D4
00012864 317C 001E 0036             		move.w	#30,$36(a0)	; wait for ยซ second
0001286A                            
0001286A                            locret_120D4:
0001286A 4E75                       		rts	
0001286C                            ; ===========================================================================
0001286C                            
0001286C                            loc_120D6:
0001286C 5368 0036                  		subq.w	#1,$36(a0)	; subtract 1 from waiting time
00012870 66F8                       		bne.s	locret_120D4	; if time remains, branch
00012872 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00012876 4228 0038                  		clr.b	$38(a0)
0001287A 4E75                       		rts	
0001287C                            ; ===========================================================================
0001287C                            
0001287C                            Obj61_Type02:				; XREF: Obj61_TypeIndex
0001287C 6100 B51E                  		bsr.w	SpeedToPos
00012880 5068 0012                  		addq.w	#8,$12(a0)	; make object fall
00012884 6100 0000                  		bsr.w	ObjHitFloor
00012888 4A41                       		tst.w	d1
0001288A 6A00 0000                  		bpl.w	locret_12106
0001288E 5241                       		addq.w	#1,d1
00012890 D368 000C                  		add.w	d1,$C(a0)
00012894 4268 0012                  		clr.w	$12(a0)		; stop when it touches the floor
00012898 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
0001289C                            
0001289C                            locret_12106:
0001289C 4E75                       		rts	
0001289E                            ; ===========================================================================
0001289E                            
0001289E                            Obj61_Type04:				; XREF: Obj61_TypeIndex
0001289E 6100 B4FC                  		bsr.w	SpeedToPos
000128A2 5168 0012                  		subq.w	#8,$12(a0)	; make object rise
000128A6 6100 0000                  		bsr.w	ObjHitCeiling
000128AA 4A41                       		tst.w	d1
000128AC 6A00 0000                  		bpl.w	locret_12126
000128B0 9368 000C                  		sub.w	d1,$C(a0)
000128B4 4268 0012                  		clr.w	$12(a0)		; stop when it touches the ceiling
000128B8 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
000128BC                            
000128BC                            locret_12126:
000128BC 4E75                       		rts	
000128BE                            ; ===========================================================================
000128BE                            
000128BE                            Obj61_Type05:				; XREF: Obj61_TypeIndex
000128BE 0C28 0001 003F             		cmpi.b	#1,$3F(a0)	; is Sonic touching the	object?
000128C4 6600                       		bne.s	locret_12138	; if not, branch
000128C6 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
000128CA 4228 0038                  		clr.b	$38(a0)
000128CE                            
000128CE                            locret_12138:
000128CE 4E75                       		rts	
000128D0                            ; ===========================================================================
000128D0                            
000128D0                            Obj61_Type07:				; XREF: Obj61_TypeIndex
000128D0 3038 F646                  		move.w	($FFFFF646).w,d0
000128D4 9068 000C                  		sub.w	$C(a0),d0
000128D8 6700                       		beq.s	locret_1217E
000128DA 6400                       		bcc.s	loc_12162
000128DC 0C40 FFFE                  		cmpi.w	#-2,d0
000128E0 6C00                       		bge.s	loc_1214E
000128E2 70FE                       		moveq	#-2,d0
000128E4                            
000128E4                            loc_1214E:
000128E4 D168 000C                  		add.w	d0,$C(a0)	; make the block rise with water level
000128E8 6100 0000                  		bsr.w	ObjHitCeiling
000128EC 4A41                       		tst.w	d1
000128EE 6A00 0000                  		bpl.w	locret_12160
000128F2 9368 000C                  		sub.w	d1,$C(a0)
000128F6                            
000128F6                            locret_12160:
000128F6 4E75                       		rts	
000128F8                            ; ===========================================================================
000128F8                            
000128F8                            loc_12162:				; XREF: Obj61_Type07
000128F8 0C40 0002                  		cmpi.w	#2,d0
000128FC 6F00                       		ble.s	loc_1216A
000128FE 7002                       		moveq	#2,d0
00012900                            
00012900                            loc_1216A:
00012900 D168 000C                  		add.w	d0,$C(a0)	; make the block sink with water level
00012904 6100 0000                  		bsr.w	ObjHitFloor
00012908 4A41                       		tst.w	d1
0001290A 6A00 0000                  		bpl.w	locret_1217E
0001290E 5241                       		addq.w	#1,d1
00012910 D368 000C                  		add.w	d1,$C(a0)
00012914                            
00012914                            locret_1217E:
00012914 4E75                       		rts	
00012916                            ; ===========================================================================
00012916                            
00012916                            loc_12180:				; XREF: Obj61_Action
00012916 4A28 0038                  		tst.b	$38(a0)
0001291A 6700                       		beq.s	locret_121C0
0001291C 0828 0003 0022             		btst	#3,$22(a0)
00012922 6600                       		bne.s	loc_1219A
00012924 4A28 003E                  		tst.b	$3E(a0)
00012928 6700                       		beq.s	locret_121C0
0001292A 5928 003E                  		subq.b	#4,$3E(a0)
0001292E 6000                       		bra.s	loc_121A6
00012930                            ; ===========================================================================
00012930                            
00012930                            loc_1219A:
00012930 0C28 0040 003E             		cmpi.b	#$40,$3E(a0)
00012936 6700                       		beq.s	locret_121C0
00012938 5828 003E                  		addq.b	#4,$3E(a0)
0001293C                            
0001293C                            loc_121A6:
0001293C 1028 003E                  		move.b	$3E(a0),d0
00012940 4EB9 0000 2CC4             		jsr	(CalcSine).l
00012946 323C 0400                  		move.w	#$400,d1
0001294A C1C1                       		muls.w	d1,d0
0001294C 4840                       		swap	d0
0001294E D068 0030                  		add.w	$30(a0),d0
00012952 3140 000C                  		move.w	d0,$C(a0)
00012956                            
00012956                            locret_121C0:
00012956 4E75                       		rts	
00012958                            ; ===========================================================================
00012958                            ; ---------------------------------------------------------------------------
00012958                            ; Sprite mappings - blocks (LZ)
00012958                            ; ---------------------------------------------------------------------------
00012958                            Map_obj61:
00012958                            	include "_maps\obj61.asm"
00012958                            ; ---------------------------------------------------------------------------
00012958                            ; Sprite mappings - blocks (LZ)
00012958                            ; ---------------------------------------------------------------------------
00012958 0000 0000                  		dc.w byte_121CA-Map_obj61, byte_121D0-Map_obj61
0001295C 0000 0000                  		dc.w byte_121DB-Map_obj61, byte_121E1-Map_obj61
00012960 01                         byte_121CA:	dc.b 1
00012961 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00012966 02                         byte_121D0:	dc.b 2
00012967 F40E 0069 E0               		dc.b $F4, $E, 0, $69, $E0
0001296C F40E 0075 00               		dc.b $F4, $E, 0, $75, 0
00012971 01                         byte_121DB:	dc.b 1
00012972 F00F 011A F0               		dc.b $F0, $F, 1, $1A, $F0
00012977 01                         byte_121E1:	dc.b 1
00012978 F00F FDFA F0               		dc.b $F0, $F, $FD, $FA,	$F0
0001297E 00                         		even
0001297E 00                         		even
0001297E                            
0001297E                            ; ===========================================================================
0001297E                            ; ---------------------------------------------------------------------------
0001297E                            ; Object 62 - gargoyle head (LZ)
0001297E                            ; ---------------------------------------------------------------------------
0001297E                            
0001297E                            Obj62:					; XREF: Obj_Index
0001297E 7000                       		moveq	#0,d0
00012980 1028 0024                  		move.b	$24(a0),d0
00012984 323B 0000                  		move.w	Obj62_Index(pc,d0.w),d1
00012988 4EBB 1000                  		jsr	Obj62_Index(pc,d1.w)
0001298C 6000 D4DC                  		bra.w	MarkObjGone
00012990                            ; ===========================================================================
00012990 0000                       Obj62_Index:	dc.w Obj62_Main-Obj62_Index
00012992 0000                       		dc.w Obj62_MakeFire-Obj62_Index
00012994 0000                       		dc.w Obj62_FireBall-Obj62_Index
00012996 0000                       		dc.w Obj62_AniFire-Obj62_Index
00012998                            
00012998 1E3C 5A78 96B4 D2F0        Obj62_SpitRate:	dc.b 30, 60, 90, 120, 150, 180,	210, 240
000129A0                            ; ===========================================================================
000129A0                            
000129A0                            Obj62_Main:				; XREF: Obj62_Index
000129A0 5428 0024                  		addq.b	#2,$24(a0)
000129A4 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
000129AC 317C 42E9 0002             		move.w	#$42E9,2(a0)
000129B2 0028 0004 0001             		ori.b	#4,1(a0)
000129B8 117C 0003 0018             		move.b	#3,$18(a0)
000129BE 117C 0010 0019             		move.b	#$10,$19(a0)
000129C4 1028 0028                  		move.b	$28(a0),d0	; get object type
000129C8 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
000129CC 117B 00CA 001F             		move.b	Obj62_SpitRate(pc,d0.w),$1F(a0)	; set fireball spit rate
000129D2 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
000129D8 0228 000F 0028             		andi.b	#$F,$28(a0)
000129DE                            
000129DE                            Obj62_MakeFire:				; XREF: Obj62_Index
000129DE 5328 001E                  		subq.b	#1,$1E(a0)
000129E2 6600                       		bne.s	Obj62_NoFire
000129E4 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
000129EA 6100 B650                  		bsr.w	ChkObjOnScreen
000129EE 6600                       		bne.s	Obj62_NoFire
000129F0 6100 B856                  		bsr.w	SingleObjLoad
000129F4 6600                       		bne.s	Obj62_NoFire
000129F6 12BC 0062                  		move.b	#$62,0(a1)	; load fireball	object
000129FA 5829 0024                  		addq.b	#4,$24(a1)
000129FE 3368 0008 0008             		move.w	8(a0),8(a1)
00012A04 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012A0A 1368 0001 0001             		move.b	1(a0),1(a1)
00012A10 1368 0022 0022             		move.b	$22(a0),$22(a1)
00012A16                            
00012A16                            Obj62_NoFire:
00012A16 4E75                       		rts	
00012A18                            ; ===========================================================================
00012A18                            
00012A18                            Obj62_FireBall:				; XREF: Obj62_Index
00012A18 5428 0024                  		addq.b	#2,$24(a0)
00012A1C 117C 0008 0016             		move.b	#8,$16(a0)
00012A22 117C 0008 0017             		move.b	#8,$17(a0)
00012A28 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
00012A30 317C 02E9 0002             		move.w	#$2E9,2(a0)
00012A36 0028 0004 0001             		ori.b	#4,1(a0)
00012A3C 117C 0004 0018             		move.b	#4,$18(a0)
00012A42 117C 0098 0020             		move.b	#$98,$20(a0)
00012A48 117C 0008 0019             		move.b	#8,$19(a0)
00012A4E 117C 0002 001A             		move.b	#2,$1A(a0)
00012A54 5068 000C                  		addq.w	#8,$C(a0)
00012A58 317C 0200 0010             		move.w	#$200,$10(a0)
00012A5E 0828 0000 0022             		btst	#0,$22(a0)
00012A64 6600                       		bne.s	Obj62_Sound
00012A66 4468 0010                  		neg.w	$10(a0)
00012A6A                            
00012A6A                            Obj62_Sound:
00012A6A 303C 00AE                  		move.w	#$AE,d0
00012A6E 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play lava ball sound
00012A74                            
00012A74                            Obj62_AniFire:				; XREF: Obj62_Index
00012A74 1038 FE05                  		move.b	($FFFFFE05).w,d0
00012A78 0200 0007                  		andi.b	#7,d0
00012A7C 6600                       		bne.s	Obj62_StopFire
00012A7E 0868 0000 001A             		bchg	#0,$1A(a0)	; switch between frame 01 and 02
00012A84                            
00012A84                            Obj62_StopFire:
00012A84 6100 B316                  		bsr.w	SpeedToPos
00012A88 0828 0000 0022             		btst	#0,$22(a0)
00012A8E 6600                       		bne.s	Obj62_StopFire2
00012A90 76F8                       		moveq	#-8,d3
00012A92 6100 0000                  		bsr.w	ObjHitWallLeft
00012A96 4A41                       		tst.w	d1
00012A98 6B00 B364                  		bmi.w	DeleteObject	; delete if the	fireball hits a	wall
00012A9C 4E75                       		rts	
00012A9E                            ; ===========================================================================
00012A9E                            
00012A9E                            Obj62_StopFire2:
00012A9E 7608                       		moveq	#8,d3
00012AA0 6100 0000                  		bsr.w	ObjHitWallRight
00012AA4 4A41                       		tst.w	d1
00012AA6 6B00 B356                  		bmi.w	DeleteObject
00012AAA 4E75                       		rts	
00012AAC                            ; ===========================================================================
00012AAC                            ; ---------------------------------------------------------------------------
00012AAC                            ; Sprite mappings - gargoyle head (LZ)
00012AAC                            ; ---------------------------------------------------------------------------
00012AAC                            Map_obj62:
00012AAC                            	include "_maps\obj62.asm"
00012AAC                            ; ---------------------------------------------------------------------------
00012AAC                            ; Sprite mappings - gargoyle head (LZ)
00012AAC                            ; ---------------------------------------------------------------------------
00012AAC 0000 0000                  		dc.w byte_12320-Map_obj62, byte_12320-Map_obj62
00012AB0 0000 0000                  		dc.w byte_12330-Map_obj62, byte_12336-Map_obj62
00012AB4 03                         byte_12320:	dc.b 3
00012AB5 F004 0000 00               		dc.b $F0, 4, 0,	0, 0
00012ABA F80D 0002 F0               		dc.b $F8, $D, 0, 2, $F0
00012ABF 0808 000A F8               		dc.b 8,	8, 0, $A, $F8
00012AC4 01                         byte_12330:	dc.b 1
00012AC5 FC04 000D F8               		dc.b $FC, 4, 0,	$D, $F8
00012ACA 01                         byte_12336:	dc.b 1
00012ACB FC04 000F F8               		dc.b $FC, 4, 0,	$F, $F8
00012AD0                            		even
00012AD0                            		even
00012AD0                            
00012AD0                            ; ===========================================================================
00012AD0                            ; ---------------------------------------------------------------------------
00012AD0                            ; Object 63 - platforms	on a conveyor belt (LZ)
00012AD0                            ; ---------------------------------------------------------------------------
00012AD0                            
00012AD0                            Obj63:					; XREF: Obj_Index
00012AD0 7000                       		moveq	#0,d0
00012AD2 1028 0024                  		move.b	$24(a0),d0
00012AD6 323B 0000                  		move.w	Obj63_Index(pc,d0.w),d1
00012ADA 4EBB 1000                  		jsr	Obj63_Index(pc,d1.w)
00012ADE 3028 0030                  		move.w	$30(a0),d0
00012AE2 0240 FF80                  		andi.w	#$FF80,d0
00012AE6 3238 F700                  		move.w	($FFFFF700).w,d1
00012AEA 0441 0080                  		subi.w	#$80,d1
00012AEE 0241 FF80                  		andi.w	#$FF80,d1
00012AF2 9041                       		sub.w	d1,d0
00012AF4 0C40 0280                  		cmpi.w	#$280,d0
00012AF8 6200                       		bhi.s	loc_1236A
00012AFA                            
00012AFA                            Obj63_Display:				; XREF: loc_1236A
00012AFA 6000 B2C6                  		bra.w	DisplaySprite
00012AFE                            ; ===========================================================================
00012AFE                            
00012AFE                            loc_1236A:				; XREF: Obj63
00012AFE 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w
00012B04 6600                       		bne.s	loc_12378
00012B06 0C40 FF80                  		cmpi.w	#-$80,d0
00012B0A 64EE                       		bcc.s	Obj63_Display
00012B0C                            
00012B0C                            loc_12378:
00012B0C 1028 002F                  		move.b	$2F(a0),d0
00012B10 6A00 B2EC                  		bpl.w	DeleteObject
00012B14 0240 007F                  		andi.w	#$7F,d0
00012B18 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00012B1C 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00012B22 6000 B2DA                  		bra.w	DeleteObject
00012B26                            ; ===========================================================================
00012B26 0000                       Obj63_Index:	dc.w Obj63_Main-Obj63_Index
00012B28 0000                       		dc.w loc_124B2-Obj63_Index
00012B2A 0000                       		dc.w loc_124C2-Obj63_Index
00012B2C 0000                       		dc.w loc_124DE-Obj63_Index
00012B2E                            ; ===========================================================================
00012B2E                            
00012B2E                            Obj63_Main:				; XREF: Obj63_Index
00012B2E 1028 0028                  		move.b	$28(a0),d0
00012B32 6B00 0000                  		bmi.w	loc_12460
00012B36 5428 0024                  		addq.b	#2,$24(a0)
00012B3A 217C 0000 0000 0004        		move.l	#Map_obj63,4(a0)
00012B42 317C 43F6 0002             		move.w	#$43F6,2(a0)
00012B48 0028 0004 0001             		ori.b	#4,1(a0)
00012B4E 117C 0010 0019             		move.b	#$10,$19(a0)
00012B54 117C 0004 0018             		move.b	#4,$18(a0)
00012B5A 0C28 007F 0028             		cmpi.b	#$7F,$28(a0)
00012B60 6600                       		bne.s	loc_123E2
00012B62 5828 0024                  		addq.b	#4,$24(a0)
00012B66 317C 03F6 0002             		move.w	#$3F6,2(a0)
00012B6C 117C 0001 0018             		move.b	#1,$18(a0)
00012B72 6000 0000                  		bra.w	loc_124DE
00012B76                            ; ===========================================================================
00012B76                            
00012B76                            loc_123E2:
00012B76 117C 0004 001A             		move.b	#4,$1A(a0)
00012B7C 7000                       		moveq	#0,d0
00012B7E 1028 0028                  		move.b	$28(a0),d0
00012B82 3200                       		move.w	d0,d1
00012B84 E648                       		lsr.w	#3,d0
00012B86 0240 001E                  		andi.w	#$1E,d0
00012B8A 45FA 0000                  		lea	Obj63_Data(pc),a2
00012B8E D4F2 0000                  		adda.w	(a2,d0.w),a2
00012B92 315A 0038                  		move.w	(a2)+,$38(a0)
00012B96 315A 0030                  		move.w	(a2)+,$30(a0)
00012B9A 214A 003C                  		move.l	a2,$3C(a0)
00012B9E 0241 000F                  		andi.w	#$F,d1
00012BA2 E549                       		lsl.w	#2,d1
00012BA4 1141 0038                  		move.b	d1,$38(a0)
00012BA8 117C 0004 003A             		move.b	#4,$3A(a0)
00012BAE 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00012BB2 6700                       		beq.s	loc_1244C
00012BB4 117C 0001 003B             		move.b	#1,$3B(a0)
00012BBA 4428 003A                  		neg.b	$3A(a0)
00012BBE 7200                       		moveq	#0,d1
00012BC0 1228 0038                  		move.b	$38(a0),d1
00012BC4 D228 003A                  		add.b	$3A(a0),d1
00012BC8 B228 0039                  		cmp.b	$39(a0),d1
00012BCC 6500                       		bcs.s	loc_12448
00012BCE 1001                       		move.b	d1,d0
00012BD0 7200                       		moveq	#0,d1
00012BD2 4A00                       		tst.b	d0
00012BD4 6A00                       		bpl.s	loc_12448
00012BD6 1228 0039                  		move.b	$39(a0),d1
00012BDA 5901                       		subq.b	#4,d1
00012BDC                            
00012BDC                            loc_12448:
00012BDC 1141 0038                  		move.b	d1,$38(a0)
00012BE0                            
00012BE0                            loc_1244C:
00012BE0 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00012BE6 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00012BEC 6100 0000                  		bsr.w	Obj63_ChangeDir
00012BF0 6000 0000                  		bra.w	loc_124B2
00012BF4                            ; ===========================================================================
00012BF4                            
00012BF4                            loc_12460:				; XREF: Obj63_Main
00012BF4 1140 002F                  		move.b	d0,$2F(a0)
00012BF8 0240 007F                  		andi.w	#$7F,d0
00012BFC 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00012C00 08F2 0000 0000             		bset	#0,(a2,d0.w)
00012C06 6600 B1F6                  		bne.w	DeleteObject
00012C0A D040                       		add.w	d0,d0
00012C0C 0240 001E                  		andi.w	#$1E,d0
00012C10 0640 0070                  		addi.w	#$70,d0
00012C14 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00012C1A D4F2 0000                  		adda.w	(a2,d0.w),a2
00012C1E 321A                       		move.w	(a2)+,d1
00012C20 2248                       		movea.l	a0,a1
00012C22 6000                       		bra.s	Obj63_MakePtfms
00012C24                            ; ===========================================================================
00012C24                            
00012C24                            Obj63_Loop:
00012C24 6100 B622                  		bsr.w	SingleObjLoad
00012C28 6600                       		bne.s	loc_124AA
00012C2A                            
00012C2A                            Obj63_MakePtfms:			; XREF: loc_12460
00012C2A 12BC 0063                  		move.b	#$63,0(a1)
00012C2E 335A 0008                  		move.w	(a2)+,8(a1)
00012C32 335A 000C                  		move.w	(a2)+,$C(a1)
00012C36 301A                       		move.w	(a2)+,d0
00012C38 1340 0028                  		move.b	d0,$28(a1)
00012C3C                            
00012C3C                            loc_124AA:
00012C3C 51C9 FFE6                  		dbf	d1,Obj63_Loop
00012C40                            
00012C40 588F                       		addq.l	#4,sp
00012C42 4E75                       		rts	
00012C44                            ; ===========================================================================
00012C44                            
00012C44                            loc_124B2:				; XREF: Obj63_Index
00012C44 7200                       		moveq	#0,d1
00012C46 1228 0019                  		move.b	$19(a0),d1
00012C4A 4EB9 0000 7A4C             		jsr	(PlatformObject).l
00012C50 6000 0000                  		bra.w	sub_12502
00012C54                            ; ===========================================================================
00012C54                            
00012C54                            loc_124C2:				; XREF: Obj63_Index
00012C54 7200                       		moveq	#0,d1
00012C56 1228 0019                  		move.b	$19(a0),d1
00012C5A 4EB9 0000 7BC0             		jsr	(ExitPlatform).l
00012C60 3F28 0008                  		move.w	8(a0),-(sp)
00012C64 6100 0000                  		bsr.w	sub_12502
00012C68 341F                       		move.w	(sp)+,d2
00012C6A 4EF9 0000 812A             		jmp	(MvSonicOnPtfm2).l
00012C70                            ; ===========================================================================
00012C70                            
00012C70                            loc_124DE:				; XREF: Obj63_Index
00012C70 3038 FE04                  		move.w	($FFFFFE04).w,d0
00012C74 0240 0003                  		andi.w	#3,d0
00012C78 6600                       		bne.s	loc_124FC
00012C7A 7201                       		moveq	#1,d1
00012C7C 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00012C80 6700                       		beq.s	loc_124F2
00012C82 4401                       		neg.b	d1
00012C84                            
00012C84                            loc_124F2:
00012C84 D328 001A                  		add.b	d1,$1A(a0)
00012C88 0228 0003 001A             		andi.b	#3,$1A(a0)
00012C8E                            
00012C8E                            loc_124FC:
00012C8E 588F                       		addq.l	#4,sp
00012C90 6000 D1D8                  		bra.w	MarkObjGone
00012C94                            
00012C94                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012C94                            
00012C94                            
00012C94                            sub_12502:				; XREF: loc_124B2; loc_124C2
00012C94 4A38 F7EE                  		tst.b	($FFFFF7EE).w
00012C98 6700                       		beq.s	loc_12520
00012C9A 4A28 003B                  		tst.b	$3B(a0)
00012C9E 6600                       		bne.s	loc_12520
00012CA0 117C 0001 003B             		move.b	#1,$3B(a0)
00012CA6 11FC 0001 F7C0             		move.b	#1,($FFFFF7C0).w
00012CAC 4428 003A                  		neg.b	$3A(a0)
00012CB0 6000                       		bra.s	loc_12534
00012CB2                            ; ===========================================================================
00012CB2                            
00012CB2                            loc_12520:
00012CB2 3028 0008                  		move.w	8(a0),d0
00012CB6 B068 0034                  		cmp.w	$34(a0),d0
00012CBA 6600                       		bne.s	loc_1256A
00012CBC 3028 000C                  		move.w	$C(a0),d0
00012CC0 B068 0036                  		cmp.w	$36(a0),d0
00012CC4 6600                       		bne.s	loc_1256A
00012CC6                            
00012CC6                            loc_12534:
00012CC6 7200                       		moveq	#0,d1
00012CC8 1228 0038                  		move.b	$38(a0),d1
00012CCC D228 003A                  		add.b	$3A(a0),d1
00012CD0 B228 0039                  		cmp.b	$39(a0),d1
00012CD4 6500                       		bcs.s	loc_12552
00012CD6 1001                       		move.b	d1,d0
00012CD8 7200                       		moveq	#0,d1
00012CDA 4A00                       		tst.b	d0
00012CDC 6A00                       		bpl.s	loc_12552
00012CDE 1228 0039                  		move.b	$39(a0),d1
00012CE2 5901                       		subq.b	#4,d1
00012CE4                            
00012CE4                            loc_12552:
00012CE4 1141 0038                  		move.b	d1,$38(a0)
00012CE8 2268 003C                  		movea.l	$3C(a0),a1
00012CEC 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00012CF2 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00012CF8 6100 0000                  		bsr.w	Obj63_ChangeDir
00012CFC                            
00012CFC                            loc_1256A:
00012CFC 6100 B09E                  		bsr.w	SpeedToPos
00012D00 4E75                       		rts	
00012D02                            ; End of function sub_12502
00012D02                            
00012D02                            
00012D02                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012D02                            
00012D02                            
00012D02                            Obj63_ChangeDir:			; XREF: loc_123E2; sub_12502
00012D02 7000                       		moveq	#0,d0
00012D04 343C FF00                  		move.w	#-$100,d2
00012D08 3028 0008                  		move.w	8(a0),d0
00012D0C 9068 0034                  		sub.w	$34(a0),d0
00012D10 6400                       		bcc.s	loc_12584
00012D12 4440                       		neg.w	d0
00012D14 4442                       		neg.w	d2
00012D16                            
00012D16                            loc_12584:
00012D16 7200                       		moveq	#0,d1
00012D18 363C FF00                  		move.w	#-$100,d3
00012D1C 3228 000C                  		move.w	$C(a0),d1
00012D20 9268 0036                  		sub.w	$36(a0),d1
00012D24 6400                       		bcc.s	loc_12598
00012D26 4441                       		neg.w	d1
00012D28 4443                       		neg.w	d3
00012D2A                            
00012D2A                            loc_12598:
00012D2A B240                       		cmp.w	d0,d1
00012D2C 6500                       		bcs.s	loc_125C2
00012D2E 3028 0008                  		move.w	8(a0),d0
00012D32 9068 0034                  		sub.w	$34(a0),d0
00012D36 6700                       		beq.s	loc_125AE
00012D38 48C0                       		ext.l	d0
00012D3A E180                       		asl.l	#8,d0
00012D3C 81C1                       		divs.w	d1,d0
00012D3E 4440                       		neg.w	d0
00012D40                            
00012D40                            loc_125AE:
00012D40 3140 0010                  		move.w	d0,$10(a0)
00012D44 3143 0012                  		move.w	d3,$12(a0)
00012D48 4840                       		swap	d0
00012D4A 3140 000A                  		move.w	d0,$A(a0)
00012D4E 4268 000E                  		clr.w	$E(a0)
00012D52 4E75                       		rts	
00012D54                            ; ===========================================================================
00012D54                            
00012D54                            loc_125C2:				; XREF: Obj63_ChangeDir
00012D54 3228 000C                  		move.w	$C(a0),d1
00012D58 9268 0036                  		sub.w	$36(a0),d1
00012D5C 6700                       		beq.s	loc_125D4
00012D5E 48C1                       		ext.l	d1
00012D60 E181                       		asl.l	#8,d1
00012D62 83C0                       		divs.w	d0,d1
00012D64 4441                       		neg.w	d1
00012D66                            
00012D66                            loc_125D4:
00012D66 3141 0012                  		move.w	d1,$12(a0)
00012D6A 3142 0010                  		move.w	d2,$10(a0)
00012D6E 4841                       		swap	d1
00012D70 3141 000E                  		move.w	d1,$E(a0)
00012D74 4268 000A                  		clr.w	$A(a0)
00012D78 4E75                       		rts	
00012D7A                            ; End of function Obj63_ChangeDir
00012D7A                            
00012D7A                            ; ===========================================================================
00012D7A 0000                       Obj63_Data:	dc.w word_125F4-Obj63_Data
00012D7C 0000                       		dc.w word_12610-Obj63_Data
00012D7E 0000                       		dc.w word_12628-Obj63_Data
00012D80 0000                       		dc.w word_1263C-Obj63_Data
00012D82 0000                       		dc.w word_12650-Obj63_Data
00012D84 0000                       		dc.w word_12668-Obj63_Data
00012D86 0018 1070 1078 021A 10BE+  word_125F4:	dc.w $18, $1070, $1078,	$21A, $10BE, $260, $10BE, $393
00012D96 108C 03C5 1022 0390 1022+  		dc.w $108C, $3C5, $1022, $390, $1022, $244
00012DA2 0014 1280 127E 0280 12CE+  word_12610:	dc.w $14, $1280, $127E,	$280, $12CE, $2D0, $12CE, $46E
00012DB2 1232 0420 1232 02CC        		dc.w $1232, $420, $1232, $2CC
00012DBA 0010 0D68 0D22 0482 0D22+  word_12628:	dc.w $10, $D68,	$D22, $482, $D22, $5DE,	$DAE, $5DE, $DAE, $482
00012DCE 0010 0DA0 0D62 03A2 0DEE+  word_1263C:	dc.w $10, $DA0,	$D62, $3A2, $DEE, $3A2,	$DEE, $4DE, $D62, $4DE
00012DE2 0014 0D00 0CAC 0242 0DDE+  word_12650:	dc.w $14, $D00,	$CAC, $242, $DDE, $242,	$DDE, $3DE, $C52, $3DE,	$C52, $29C
00012DFA 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
00012E0E                            
00012E0E                            ; ---------------------------------------------------------------------------
00012E0E                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00012E0E                            ; ---------------------------------------------------------------------------
00012E0E                            Map_obj63:
00012E0E                            	include "_maps\obj63.asm"
00012E0E                            ; ---------------------------------------------------------------------------
00012E0E                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00012E0E                            ; ---------------------------------------------------------------------------
00012E0E 0000 0000                  		dc.w byte_12686-Map_obj63, byte_1268C-Map_obj63
00012E12 0000 0000                  		dc.w byte_12692-Map_obj63, byte_12698-Map_obj63
00012E16 0000                       		dc.w byte_1269E-Map_obj63
00012E18 01                         byte_12686:	dc.b 1
00012E19 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00012E1E 01                         byte_1268C:	dc.b 1
00012E1F F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00012E24 01                         byte_12692:	dc.b 1
00012E25 F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
00012E2A 01                         byte_12698:	dc.b 1
00012E2B F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
00012E30 01                         byte_1269E:	dc.b 1
00012E31 F80D 0040 F0               		dc.b $F8, $D, 0, $40, $F0
00012E36                            		even
00012E36                            		even
00012E36                            
00012E36                            ; ===========================================================================
00012E36                            ; ---------------------------------------------------------------------------
00012E36                            ; Object 64 - bubbles (LZ)
00012E36                            ; ---------------------------------------------------------------------------
00012E36                            
00012E36                            Obj64:					; XREF: Obj_Index
00012E36 7000                       		moveq	#0,d0
00012E38 1028 0024                  		move.b	$24(a0),d0
00012E3C 323B 0000                  		move.w	Obj64_Index(pc,d0.w),d1
00012E40 4EFB 1000                  		jmp	Obj64_Index(pc,d1.w)
00012E44                            ; ===========================================================================
00012E44 0000                       Obj64_Index:	dc.w Obj64_Main-Obj64_Index
00012E46 0000                       		dc.w Obj64_Animate-Obj64_Index
00012E48 0000                       		dc.w Obj64_ChkWater-Obj64_Index
00012E4A 0000                       		dc.w Obj64_Display2-Obj64_Index
00012E4C 0000                       		dc.w Obj64_Delete3-Obj64_Index
00012E4E 0000                       		dc.w Obj64_BblMaker-Obj64_Index
00012E50                            ; ===========================================================================
00012E50                            
00012E50                            Obj64_Main:				; XREF: Obj64_Index
00012E50 5428 0024                  		addq.b	#2,$24(a0)
00012E54 217C 0000 0000 0004        		move.l	#Map_obj64,4(a0)
00012E5C 317C 8348 0002             		move.w	#$8348,2(a0)
00012E62 117C 0084 0001             		move.b	#$84,1(a0)
00012E68 117C 0010 0019             		move.b	#$10,$19(a0)
00012E6E 117C 0001 0018             		move.b	#1,$18(a0)
00012E74 1028 0028                  		move.b	$28(a0),d0	; get object type
00012E78 6A00                       		bpl.s	Obj64_Bubble	; if type is $0-$7F, branch
00012E7A 5028 0024                  		addq.b	#8,$24(a0)
00012E7E 0240 007F                  		andi.w	#$7F,d0		; read only last 7 bits	(deduct	$80)
00012E82 1140 0032                  		move.b	d0,$32(a0)
00012E86 1140 0033                  		move.b	d0,$33(a0)
00012E8A 117C 0006 001C             		move.b	#6,$1C(a0)
00012E90 6000 0000                  		bra.w	Obj64_BblMaker
00012E94                            ; ===========================================================================
00012E94                            
00012E94                            Obj64_Bubble:				; XREF: Obj64_Main
00012E94 1140 001C                  		move.b	d0,$1C(a0)
00012E98 3168 0008 0030             		move.w	8(a0),$30(a0)
00012E9E 317C FF78 0012             		move.w	#-$88,$12(a0)	; float	bubble upwards
00012EA4 4EB9 0000 2C9E             		jsr	(RandomNumber).l
00012EAA 1140 0026                  		move.b	d0,$26(a0)
00012EAE                            
00012EAE                            Obj64_Animate:				; XREF: Obj64_Index
00012EAE 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00012EB4 4EB9 0000 AE82             		jsr	AnimateSprite
00012EBA 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
00012EC0 6600                       		bne.s	Obj64_ChkWater
00012EC2 117C 0001 002E             		move.b	#1,$2E(a0)
00012EC8                            
00012EC8                            Obj64_ChkWater:				; XREF: Obj64_Index
00012EC8 3038 F646                  		move.w	($FFFFF646).w,d0
00012ECC B068 000C                  		cmp.w	$C(a0),d0	; is bubble underwater?
00012ED0 6500                       		bcs.s	Obj64_Wobble	; if yes, branch
00012ED2                            
00012ED2                            Obj64_Burst:				; XREF: Obj64_Wobble
00012ED2 117C 0006 0024             		move.b	#6,$24(a0)
00012ED8 5628 001C                  		addq.b	#3,$1C(a0)	; run "bursting" animation
00012EDC 6000 0000                  		bra.w	Obj64_Display2
00012EE0                            ; ===========================================================================
00012EE0                            
00012EE0                            Obj64_Wobble:				; XREF: Obj64_ChkWater
00012EE0 1028 0026                  		move.b	$26(a0),d0
00012EE4 5228 0026                  		addq.b	#1,$26(a0)
00012EE8 0240 007F                  		andi.w	#$7F,d0
00012EEC 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
00012EF2 1031 0000                  		move.b	(a1,d0.w),d0
00012EF6 4880                       		ext.w	d0
00012EF8 D068 0030                  		add.w	$30(a0),d0
00012EFC 3140 0008                  		move.w	d0,8(a0)	; change bubble's horizontal position
00012F00 4A28 002E                  		tst.b	$2E(a0)
00012F04 6700                       		beq.s	Obj64_Display
00012F06 6100 0000                  		bsr.w	Obj64_ChkSonic	; has Sonic touched the	bubble?
00012F0A 6700                       		beq.s	Obj64_Display	; if not, branch
00012F0C                            
00012F0C 6100 0000                  		bsr.w	ResumeMusic	; cancel countdown music
00012F10 303C 00AD                  		move.w	#$AD,d0
00012F14 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play collecting	bubble sound
00012F1A 43F8 D000                  		lea	($FFFFD000).w,a1
00012F1E 4269 0010                  		clr.w	$10(a1)
00012F22 4269 0012                  		clr.w	$12(a1)
00012F26 4269 0014                  		clr.w	$14(a1)
00012F2A 137C 0015 001C             		move.b	#$15,$1C(a1)
00012F30 337C 0023 003E             		move.w	#$23,$3E(a1)
00012F36 137C 0000 003C             		move.b	#0,$3C(a1)
00012F3C 08A9 0005 0022             		bclr	#5,$22(a1)
00012F42 08A9 0004 0022             		bclr	#4,$22(a1)
00012F48 0829 0002 0022             		btst	#2,$22(a1)
00012F4E 6700 FF82                  		beq.w	Obj64_Burst
00012F52 08A9 0002 0022             		bclr	#2,$22(a1)
00012F58 137C 0013 0016             		move.b	#$13,$16(a1)
00012F5E 137C 0009 0017             		move.b	#9,$17(a1)
00012F64 5B69 000C                  		subq.w	#5,$C(a1)
00012F68 6000 FF68                  		bra.w	Obj64_Burst
00012F6C                            ; ===========================================================================
00012F6C                            
00012F6C                            Obj64_Display:				; XREF: Obj64_Wobble
00012F6C 6100 AE2E                  		bsr.w	SpeedToPos
00012F70 4A28 0001                  		tst.b	1(a0)
00012F74 6A00                       		bpl.s	Obj64_Delete
00012F76 4EFA AE4A                  		jmp	DisplaySprite
00012F7A                            ; ===========================================================================
00012F7A                            
00012F7A                            Obj64_Delete:
00012F7A 4EFA AE82                  		jmp	DeleteObject
00012F7E                            ; ===========================================================================
00012F7E                            
00012F7E                            Obj64_Display2:				; XREF: Obj64_Index
00012F7E 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00012F84 4EB9 0000 AE82             		jsr	AnimateSprite
00012F8A 4A28 0001                  		tst.b	1(a0)
00012F8E 6A00                       		bpl.s	Obj64_Delete2
00012F90 4EFA AE30                  		jmp	DisplaySprite
00012F94                            ; ===========================================================================
00012F94                            
00012F94                            Obj64_Delete2:
00012F94 4EFA AE68                  		jmp	DeleteObject
00012F98                            ; ===========================================================================
00012F98                            
00012F98                            Obj64_Delete3:				; XREF: Obj64_Index
00012F98 6000 AE64                  		bra.w	DeleteObject
00012F9C                            ; ===========================================================================
00012F9C                            
00012F9C                            Obj64_BblMaker:				; XREF: Obj64_Index
00012F9C 4A68 0036                  		tst.w	$36(a0)
00012FA0 6600                       		bne.s	loc_12874
00012FA2 3038 F646                  		move.w	($FFFFF646).w,d0
00012FA6 B068 000C                  		cmp.w	$C(a0),d0	; is bubble maker underwater?
00012FAA 6400 0000                  		bcc.w	Obj64_ChkDel	; if not, branch
00012FAE 4A28 0001                  		tst.b	1(a0)
00012FB2 6A00 0000                  		bpl.w	Obj64_ChkDel
00012FB6 5368 0038                  		subq.w	#1,$38(a0)
00012FBA 6A00 0000                  		bpl.w	loc_12914
00012FBE 317C 0001 0036             		move.w	#1,$36(a0)
00012FC4                            
00012FC4                            loc_1283A:
00012FC4 4EB9 0000 2C9E             		jsr	(RandomNumber).l
00012FCA 3200                       		move.w	d0,d1
00012FCC 0240 0007                  		andi.w	#7,d0
00012FD0 0C40 0006                  		cmpi.w	#6,d0
00012FD4 64EE                       		bcc.s	loc_1283A
00012FD6                            
00012FD6 1140 0034                  		move.b	d0,$34(a0)
00012FDA 0241 000C                  		andi.w	#$C,d1
00012FDE 43F9 0000 0000             		lea	(Obj64_BblTypes).l,a1
00012FE4 D2C1                       		adda.w	d1,a1
00012FE6 2149 003C                  		move.l	a1,$3C(a0)
00012FEA 5328 0032                  		subq.b	#1,$32(a0)
00012FEE 6A00                       		bpl.s	loc_12872
00012FF0 1168 0033 0032             		move.b	$33(a0),$32(a0)
00012FF6 08E8 0007 0036             		bset	#7,$36(a0)
00012FFC                            
00012FFC                            loc_12872:
00012FFC 6000                       		bra.s	loc_1287C
00012FFE                            ; ===========================================================================
00012FFE                            
00012FFE                            loc_12874:				; XREF: Obj64_BblMaker
00012FFE 5368 0038                  		subq.w	#1,$38(a0)
00013002 6A00 0000                  		bpl.w	loc_12914
00013006                            
00013006                            loc_1287C:
00013006 4EB9 0000 2C9E             		jsr	(RandomNumber).l
0001300C 0240 001F                  		andi.w	#$1F,d0
00013010 3140 0038                  		move.w	d0,$38(a0)
00013014 6100 B232                  		bsr.w	SingleObjLoad
00013018 6600                       		bne.s	loc_128F8
0001301A 12BC 0064                  		move.b	#$64,0(a1)	; load bubble object
0001301E 3368 0008 0008             		move.w	8(a0),8(a1)
00013024 4EB9 0000 2C9E             		jsr	(RandomNumber).l
0001302A 0240 000F                  		andi.w	#$F,d0
0001302E 5140                       		subq.w	#8,d0
00013030 D169 0008                  		add.w	d0,8(a1)
00013034 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001303A 7000                       		moveq	#0,d0
0001303C 1028 0034                  		move.b	$34(a0),d0
00013040 2468 003C                  		movea.l	$3C(a0),a2
00013044 1372 0000 0028             		move.b	(a2,d0.w),$28(a1)
0001304A 0828 0007 0036             		btst	#7,$36(a0)
00013050 6700                       		beq.s	loc_128F8
00013052 4EB9 0000 2C9E             		jsr	(RandomNumber).l
00013058 0240 0003                  		andi.w	#3,d0
0001305C 6600                       		bne.s	loc_128E4
0001305E 08E8 0006 0036             		bset	#6,$36(a0)
00013064 6600                       		bne.s	loc_128F8
00013066 137C 0002 0028             		move.b	#2,$28(a1)
0001306C                            
0001306C                            loc_128E4:
0001306C 4A28 0034                  		tst.b	$34(a0)
00013070 6600                       		bne.s	loc_128F8
00013072 08E8 0006 0036             		bset	#6,$36(a0)
00013078 6600                       		bne.s	loc_128F8
0001307A 137C 0002 0028             		move.b	#2,$28(a1)
00013080                            
00013080                            loc_128F8:
00013080 5328 0034                  		subq.b	#1,$34(a0)
00013084 6A00                       		bpl.s	loc_12914
00013086 4EB9 0000 2C9E             		jsr	(RandomNumber).l
0001308C 0240 007F                  		andi.w	#$7F,d0
00013090 0640 0080                  		addi.w	#$80,d0
00013094 D168 0038                  		add.w	d0,$38(a0)
00013098 4268 0036                  		clr.w	$36(a0)
0001309C                            
0001309C                            loc_12914:
0001309C 43F9 0000 0000             		lea	(Ani_obj64).l,a1
000130A2 4EB9 0000 AE82             		jsr	AnimateSprite
000130A8                            
000130A8                            Obj64_ChkDel:				; XREF: Obj64_BblMaker
000130A8 3028 0008                  		move.w	8(a0),d0
000130AC 0240 FF80                  		andi.w	#$FF80,d0
000130B0 3238 F700                  		move.w	($FFFFF700).w,d1
000130B4 0441 0080                  		subi.w	#$80,d1
000130B8 0241 FF80                  		andi.w	#$FF80,d1
000130BC 9041                       		sub.w	d1,d0
000130BE 0C40 0280                  		cmpi.w	#$280,d0
000130C2 6200 AD3A                  		bhi.w	DeleteObject
000130C6 3038 F646                  		move.w	($FFFFF646).w,d0
000130CA B068 000C                  		cmp.w	$C(a0),d0
000130CE 6500 ACF2                  		bcs.w	DisplaySprite
000130D2 4E75                       		rts	
000130D4                            ; ===========================================================================
000130D4                            ; bubble production sequence
000130D4                            
000130D4                            ; 0 = small bubble, 1 =	large bubble
000130D4                            
000130D4 0001 0000 0000 0100 0000+  Obj64_BblTypes:	dc.b 0,	1, 0, 0, 0, 0, 1, 0, 0,	0, 0, 1, 0, 1, 0, 0, 1,	0
000130E6                            
000130E6                            ; ===========================================================================
000130E6                            
000130E6                            Obj64_ChkSonic:				; XREF: Obj64_Wobble
000130E6 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000130EA 6B00                       		bmi.s	loc_12998
000130EC 43F8 D000                  		lea	($FFFFD000).w,a1
000130F0 3029 0008                  		move.w	8(a1),d0
000130F4 3228 0008                  		move.w	8(a0),d1
000130F8 0441 0010                  		subi.w	#$10,d1
000130FC B240                       		cmp.w	d0,d1
000130FE 6400                       		bcc.s	loc_12998
00013100 0641 0020                  		addi.w	#$20,d1
00013104 B240                       		cmp.w	d0,d1
00013106 6500                       		bcs.s	loc_12998
00013108 3029 000C                  		move.w	$C(a1),d0
0001310C 3228 000C                  		move.w	$C(a0),d1
00013110 B240                       		cmp.w	d0,d1
00013112 6400                       		bcc.s	loc_12998
00013114 0641 0010                  		addi.w	#$10,d1
00013118 B240                       		cmp.w	d0,d1
0001311A 6500                       		bcs.s	loc_12998
0001311C 7001                       		moveq	#1,d0
0001311E 4E75                       		rts	
00013120                            ; ===========================================================================
00013120                            
00013120                            loc_12998:
00013120 7000                       		moveq	#0,d0
00013122 4E75                       		rts	
00013124                            ; ===========================================================================
00013124                            Ani_obj64:
00013124                            	include "_anim\obj64.asm"
00013124                            ; ---------------------------------------------------------------------------
00013124                            ; Animation script - bubbles (LZ)
00013124                            ; ---------------------------------------------------------------------------
00013124 0000                       		dc.w byte_129AA-Ani_obj64
00013126 0000                       		dc.w byte_129B0-Ani_obj64
00013128 0000                       		dc.w byte_129B6-Ani_obj64
0001312A 0000                       		dc.w byte_129BE-Ani_obj64
0001312C 0000                       		dc.w byte_129BE-Ani_obj64
0001312E 0000                       		dc.w byte_129C0-Ani_obj64
00013130 0000                       		dc.w byte_129C6-Ani_obj64
00013132 0E00 0102 FC00             byte_129AA:	dc.b $E, 0, 1, 2, $FC, 0
00013138 0E01 0203 04FC             byte_129B0:	dc.b $E, 1, 2, 3, 4, $FC
0001313E 0E02 0304 0506 FC00        byte_129B6:	dc.b $E, 2, 3, 4, 5, 6,	$FC, 0
00013146 04FC                       byte_129BE:	dc.b 4,	$FC
00013148 0406 0708 FC00             byte_129C0:	dc.b 4,	6, 7, 8, $FC, 0
0001314E 0F13 1415 FF               byte_129C6:	dc.b $F, $13, $14, $15,	$FF
00013154 00                         		even
00013154 00                         		even
00013154                            
00013154                            ; ---------------------------------------------------------------------------
00013154                            ; Sprite mappings - bubbles (LZ)
00013154                            ; ---------------------------------------------------------------------------
00013154                            Map_obj64:
00013154                            	include "_maps\obj64.asm"
00013154                            ; ---------------------------------------------------------------------------
00013154                            ; Sprite mappings - bubbles (LZ)
00013154                            ; ---------------------------------------------------------------------------
00013154 0000 0000                  		dc.w byte_129FA-Map_obj64, byte_12A00-Map_obj64
00013158 0000 0000                  		dc.w byte_12A06-Map_obj64, byte_12A0C-Map_obj64
0001315C 0000 0000                  		dc.w byte_12A12-Map_obj64, byte_12A18-Map_obj64
00013160 0000 0000                  		dc.w byte_12A1E-Map_obj64, byte_12A24-Map_obj64
00013164 0000 0000                  		dc.w byte_12A39-Map_obj64, byte_12A4E-Map_obj64
00013168 0000 0000                  		dc.w byte_12A54-Map_obj64, byte_12A5A-Map_obj64
0001316C 0000 0000                  		dc.w byte_12A60-Map_obj64, byte_12A66-Map_obj64
00013170 0000 0000                  		dc.w byte_12A6C-Map_obj64, byte_12A72-Map_obj64
00013174 0000 0000                  		dc.w byte_12A78-Map_obj64, byte_12A7E-Map_obj64
00013178 0000 0000                  		dc.w byte_12A84-Map_obj64, byte_12A8A-Map_obj64
0001317C 0000 0000                  		dc.w byte_12A90-Map_obj64, byte_12A96-Map_obj64
00013180 0000                       		dc.w byte_12A9C-Map_obj64
00013182 01                         byte_129FA:	dc.b 1
00013183 FC00 0000 FC               		dc.b $FC, 0, 0,	0, $FC
00013188 01                         byte_12A00:	dc.b 1
00013189 FC00 0001 FC               		dc.b $FC, 0, 0,	1, $FC
0001318E 01                         byte_12A06:	dc.b 1
0001318F FC00 0002 FC               		dc.b $FC, 0, 0,	2, $FC
00013194 01                         byte_12A0C:	dc.b 1
00013195 F805 0003 F8               		dc.b $F8, 5, 0,	3, $F8
0001319A 01                         byte_12A12:	dc.b 1
0001319B F805 0007 F8               		dc.b $F8, 5, 0,	7, $F8
000131A0 01                         byte_12A18:	dc.b 1
000131A1 F40A 000B F4               		dc.b $F4, $A, 0, $B, $F4
000131A6 01                         byte_12A1E:	dc.b 1
000131A7 F00F 0014 F0               		dc.b $F0, $F, 0, $14, $F0
000131AC 04                         byte_12A24:	dc.b 4
000131AD F005 0024 F0               		dc.b $F0, 5, 0,	$24, $F0
000131B2 F005 0824 00               		dc.b $F0, 5, 8,	$24, 0
000131B7 0005 1024 F0               		dc.b 0,	5, $10,	$24, $F0
000131BC 0005 1824 00               		dc.b 0,	5, $18,	$24, 0
000131C1 04                         byte_12A39:	dc.b 4
000131C2 F005 0028 F0               		dc.b $F0, 5, 0,	$28, $F0
000131C7 F005 0828 00               		dc.b $F0, 5, 8,	$28, 0
000131CC 0005 1028 F0               		dc.b 0,	5, $10,	$28, $F0
000131D1 0005 1828 00               		dc.b 0,	5, $18,	$28, 0
000131D6 01                         byte_12A4E:	dc.b 1
000131D7 F406 002C F8               		dc.b $F4, 6, 0,	$2C, $F8
000131DC 01                         byte_12A54:	dc.b 1
000131DD F406 0032 F8               		dc.b $F4, 6, 0,	$32, $F8
000131E2 01                         byte_12A5A:	dc.b 1
000131E3 F406 0038 F8               		dc.b $F4, 6, 0,	$38, $F8
000131E8 01                         byte_12A60:	dc.b 1
000131E9 F406 003E F8               		dc.b $F4, 6, 0,	$3E, $F8
000131EE 01                         byte_12A66:	dc.b 1
000131EF F406 2044 F8               		dc.b $F4, 6, $20, $44, $F8
000131F4 01                         byte_12A6C:	dc.b 1
000131F5 F406 204A F8               		dc.b $F4, 6, $20, $4A, $F8
000131FA 01                         byte_12A72:	dc.b 1
000131FB F406 2050 F8               		dc.b $F4, 6, $20, $50, $F8
00013200 01                         byte_12A78:	dc.b 1
00013201 F406 2056 F8               		dc.b $F4, 6, $20, $56, $F8
00013206 01                         byte_12A7E:	dc.b 1
00013207 F406 205C F8               		dc.b $F4, 6, $20, $5C, $F8
0001320C 01                         byte_12A84:	dc.b 1
0001320D F406 2062 F8               		dc.b $F4, 6, $20, $62, $F8
00013212 01                         byte_12A8A:	dc.b 1
00013213 F805 0068 F8               		dc.b $F8, 5, 0,	$68, $F8
00013218 01                         byte_12A90:	dc.b 1
00013219 F805 006C F8               		dc.b $F8, 5, 0,	$6C, $F8
0001321E 01                         byte_12A96:	dc.b 1
0001321F F805 0070 F8               		dc.b $F8, 5, 0,	$70, $F8
00013224 00                         byte_12A9C:	dc.b 0
00013226 00                         		even
00013226 00                         		even
00013226                            
00013226                            ; ===========================================================================
00013226                            ; ---------------------------------------------------------------------------
00013226                            ; Object 65 - waterfalls (LZ)
00013226                            ; ---------------------------------------------------------------------------
00013226                            
00013226                            Obj65:					; XREF: Obj_Index
00013226 7000                       		moveq	#0,d0
00013228 1028 0024                  		move.b	$24(a0),d0
0001322C 323B 0000                  		move.w	Obj65_Index(pc,d0.w),d1
00013230 4EFB 1000                  		jmp	Obj65_Index(pc,d1.w)
00013234                            ; ===========================================================================
00013234 0000                       Obj65_Index:	dc.w Obj65_Main-Obj65_Index
00013236 0000                       		dc.w Obj65_Animate-Obj65_Index
00013238 0000                       		dc.w Obj65_ChkDel-Obj65_Index
0001323A 0000                       		dc.w Obj65_FixHeight-Obj65_Index
0001323C 0000                       		dc.w loc_12B36-Obj65_Index
0001323E                            ; ===========================================================================
0001323E                            
0001323E                            Obj65_Main:				; XREF: Obj65_Index
0001323E 5828 0024                  		addq.b	#4,$24(a0)
00013242 217C 0000 0000 0004        		move.l	#Map_obj65,4(a0)
0001324A 317C 4259 0002             		move.w	#$4259,2(a0)
00013250 0028 0004 0001             		ori.b	#4,1(a0)
00013256 117C 0018 0019             		move.b	#$18,$19(a0)
0001325C 117C 0001 0018             		move.b	#1,$18(a0)
00013262 1028 0028                  		move.b	$28(a0),d0	; get object type
00013266 6A00                       		bpl.s	loc_12AE6
00013268 08E8 0007 0002             		bset	#7,2(a0)
0001326E                            
0001326E                            loc_12AE6:
0001326E 0200 000F                  		andi.b	#$F,d0		; read only the	2nd byte
00013272 1140 001A                  		move.b	d0,$1A(a0)	; set frame number
00013276 0C00 0009                  		cmpi.b	#9,d0		; is object type $x9 ?
0001327A 6600                       		bne.s	Obj65_ChkDel	; if not, branch
0001327C 4228 0018                  		clr.b	$18(a0)
00013280 5528 0024                  		subq.b	#2,$24(a0)
00013284 0828 0006 0028             		btst	#6,$28(a0)	; is object type $4x ?
0001328A 6700                       		beq.s	loc_12B0A	; if not, branch
0001328C 117C 0006 0024             		move.b	#6,$24(a0)
00013292                            
00013292                            loc_12B0A:
00013292 0828 0005 0028             		btst	#5,$28(a0)	; is object type $Ax ?
00013298 6700                       		beq.s	Obj65_Animate	; if not, branch
0001329A 117C 0008 0024             		move.b	#8,$24(a0)
000132A0                            
000132A0                            Obj65_Animate:				; XREF: Obj65_Index
000132A0 43F9 0000 0000             		lea	(Ani_obj65).l,a1
000132A6 4EB9 0000 AE82             		jsr	AnimateSprite
000132AC                            
000132AC                            Obj65_ChkDel:				; XREF: Obj65_Index
000132AC 6000 CBBC                  		bra.w	MarkObjGone
000132B0                            ; ===========================================================================
000132B0                            
000132B0                            Obj65_FixHeight:			; XREF: Obj65_Index
000132B0 3038 F646                  		move.w	($FFFFF646).w,d0
000132B4 0440 0010                  		subi.w	#$10,d0
000132B8 3140 000C                  		move.w	d0,$C(a0)	; match	object position	to water height
000132BC 60E2                       		bra.s	Obj65_Animate
000132BE                            ; ===========================================================================
000132BE                            
000132BE                            loc_12B36:				; XREF: Obj65_Index
000132BE 08A8 0007 0002             		bclr	#7,2(a0)
000132C4 0C38 0007 A506             		cmpi.b	#7,($FFFFA506).w
000132CA 6600                       		bne.s	Obj65_Animate2
000132CC 08E8 0007 0002             		bset	#7,2(a0)
000132D2                            
000132D2                            Obj65_Animate2:
000132D2 60CC                       		bra.s	Obj65_Animate
000132D4                            ; ===========================================================================
000132D4                            Ani_obj65:
000132D4                            	include "_anim\obj65.asm"
000132D4                            ; ---------------------------------------------------------------------------
000132D4                            ; Animation script - waterfall (LZ)
000132D4                            ; ---------------------------------------------------------------------------
000132D4 0000                       		dc.w byte_12B4E-Ani_obj65
000132D6 0509 0A0B FF               byte_12B4E:	dc.b 5,	9, $A, $B, $FF
000132DC 00                         		even
000132DC 00                         		even
000132DC                            
000132DC                            ; ---------------------------------------------------------------------------
000132DC                            ; Sprite mappings - waterfalls (LZ)
000132DC                            ; ---------------------------------------------------------------------------
000132DC                            Map_obj65:
000132DC                            	include "_maps\obj65.asm"
000132DC                            ; ---------------------------------------------------------------------------
000132DC                            ; Sprite mappings - waterfalls (LZ)
000132DC                            ; ---------------------------------------------------------------------------
000132DC 0000 0000                  		dc.w byte_12B6C-Map_obj65, byte_12B72-Map_obj65
000132E0 0000 0000                  		dc.w byte_12B7D-Map_obj65, byte_12B88-Map_obj65
000132E4 0000 0000                  		dc.w byte_12B8E-Map_obj65, byte_12B99-Map_obj65
000132E8 0000 0000                  		dc.w byte_12B9F-Map_obj65, byte_12BA5-Map_obj65
000132EC 0000 0000                  		dc.w byte_12BAB-Map_obj65, byte_12BB6-Map_obj65
000132F0 0000 0000                  		dc.w byte_12BC1-Map_obj65, byte_12BCC-Map_obj65
000132F4 01                         byte_12B6C:	dc.b 1
000132F5 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
000132FA 02                         byte_12B72:	dc.b 2
000132FB F804 0008 FC               		dc.b $F8, 4, 0,	8, $FC
00013300 0008 000A F4               		dc.b 0,	8, 0, $A, $F4
00013305 02                         byte_12B7D:	dc.b 2
00013306 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
0001330B 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00013310 01                         byte_12B88:	dc.b 1
00013311 F801 000F 00               		dc.b $F8, 1, 0,	$F, 0
00013316 02                         byte_12B8E:	dc.b 2
00013317 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
0001331C 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00013321 01                         byte_12B99:	dc.b 1
00013322 F801 0011 00               		dc.b $F8, 1, 0,	$11, 0
00013327 01                         byte_12B9F:	dc.b 1
00013328 F801 0013 00               		dc.b $F8, 1, 0,	$13, 0
0001332D 01                         byte_12BA5:	dc.b 1
0001332E F007 0015 F8               		dc.b $F0, 7, 0,	$15, $F8
00013333 02                         byte_12BAB:	dc.b 2
00013334 F80C 001D F6               		dc.b $F8, $C, 0, $1D, $F6
00013339 000C 0021 E8               		dc.b 0,	$C, 0, $21, $E8
0001333E 02                         byte_12BB6:	dc.b 2
0001333F F00B 0025 E8               		dc.b $F0, $B, 0, $25, $E8
00013344 F00B 0031 00               		dc.b $F0, $B, 0, $31, 0
00013349 02                         byte_12BC1:	dc.b 2
0001334A F00B 003D E8               		dc.b $F0, $B, 0, $3D, $E8
0001334F F00B 0049 00               		dc.b $F0, $B, 0, $49, 0
00013354 02                         byte_12BCC:	dc.b 2
00013355 F00B 0055 E8               		dc.b $F0, $B, 0, $55, $E8
0001335A F00B 0061 00               		dc.b $F0, $B, 0, $61, 0
00013360 00                         		even
00013360 00                         		even
00013360                            
00013360                            ; ===========================================================================
00013360                            ; ---------------------------------------------------------------------------
00013360                            ; Object 01 - Sonic
00013360                            ; ---------------------------------------------------------------------------
00013360                            
00013360                            Obj01:					; XREF: Obj_Index
00013360 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00013364 6700                       		beq.s	Obj01_Normal	; if not, branch
00013366 4EF9 0000 0000             		jmp	DebugMode
0001336C                            ; ===========================================================================
0001336C                            
0001336C                            Obj01_Normal:
0001336C 7000                       		moveq	#0,d0
0001336E 1028 0024                  		move.b	$24(a0),d0
00013372 323B 0000                  		move.w	Obj01_Index(pc,d0.w),d1
00013376 4EFB 1000                  		jmp	Obj01_Index(pc,d1.w)
0001337A                            ; ===========================================================================
0001337A 0000                       Obj01_Index:	dc.w Obj01_Main-Obj01_Index
0001337C 0000                       		dc.w Obj01_Control-Obj01_Index
0001337E 0000                       		dc.w Obj01_Hurt-Obj01_Index
00013380 0000                       		dc.w Obj01_Death-Obj01_Index
00013382 0000                       		dc.w Obj01_ResetLevel-Obj01_Index
00013384                            ; ===========================================================================
00013384                            
00013384                            Player_Maps:
00013384 0000 0000                  	dc.l	Map_Sonic
00013388 0000 0000                  	dc.l	Map_Sonic ; gronic
0001338C                            	; insert player mapping here
0001338C                            	
0001338C                            Obj01_Main:				; XREF: Obj01_Index
0001338C 5428 0024                  		addq.b	#2,$24(a0)
00013390 117C 0013 0016             		move.b	#$13,$16(a0)
00013396 117C 0009 0017             		move.b	#9,$17(a0)
0001339C                            		
0001339C 7000                       		moveq	#0,d0
0001339E 1038 FFE8                  		move.b	(v_character),d0
000133A2 E548                       		lsl.w	#2,d0
000133A4 43FA FFDE                  		lea 	Player_Maps(pc),a1
000133A8 2171 0000 0004             		move.l	(a1,d0.w),4(a0)	; load Map patterns
000133AE                            		
000133AE 317C 0780 0002             		move.w	#$780,2(a0)
000133B4 117C 0002 0018             		move.b	#2,$18(a0)
000133BA 117C 0018 0019             		move.b	#$18,$19(a0)
000133C0 117C 0004 0001             		move.b	#4,1(a0)
000133C6 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; Sonic's top speed
000133CC 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; Sonic's acceleration
000133D2 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; Sonic's deceleration
000133D8                            
000133D8                            Obj01_Control:				; XREF: Obj01_Index
000133D8 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug cheat enabled?
000133DC 6700                       		beq.s	loc_12C58	; if not, branch
000133DE 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button C pressed?
000133E4 6700                       		beq.s	loc_12C58	; if not, branch
000133E6 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring/item
000133EC 4238 F7CC                  		clr.b	($FFFFF7CC).w
000133F0 4E75                       		rts	
000133F2                            ; ===========================================================================
000133F2                            
000133F2                            loc_12C58:
000133F2 4A38 F7CC                  		tst.b	($FFFFF7CC).w	; are controls locked?
000133F6 6600                       		bne.s	loc_12C64	; if yes, branch
000133F8 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w ; enable joypad control
000133FE                            
000133FE                            loc_12C64:
000133FE 0838 0000 F7C8             		btst	#0,($FFFFF7C8).w ; are controls	locked?
00013404 6600                       		bne.s	loc_12C7E	; if yes, branch
00013406 7000                       		moveq	#0,d0
00013408 1028 0022                  		move.b	$22(a0),d0
0001340C 0240 0006                  		andi.w	#6,d0
00013410 323B 0000                  		move.w	Obj01_Modes(pc,d0.w),d1
00013414 4EBB 1000                  		jsr	Obj01_Modes(pc,d1.w)
00013418                            
00013418                            loc_12C7E:
00013418 6100                       		bsr.s	Sonic_Display
0001341A 6100 0000                  		bsr.w	Sonic_RecordPos
0001341E 6100 0000                  		bsr.w	Sonic_Water
00013422 1178 F768 0036             		move.b	($FFFFF768).w,$36(a0)
00013428 1178 F76A 0037             		move.b	($FFFFF76A).w,$37(a0)
0001342E 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00013432 6700                       		beq.s	loc_12CA6
00013434 4A28 001C                  		tst.b	$1C(a0)
00013438 6600                       		bne.s	loc_12CA6
0001343A 1168 001D 001C             		move.b	$1D(a0),$1C(a0)
00013440                            
00013440                            loc_12CA6:
00013440 6100 0000                  		bsr.w	Sonic_Animate
00013444 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00013448 6B00                       		bmi.s	loc_12CB6
0001344A 4EB9 0000 0000             		jsr	TouchResponse
00013450                            
00013450                            loc_12CB6:
00013450 6100 0000                  		bsr.w	Sonic_Loops
00013454 6100 0000                  		bsr.w	LoadSonicDynPLC
00013458 4E75                       		rts	
0001345A                            ; ===========================================================================
0001345A 0000                       Obj01_Modes:	dc.w Obj01_MdNormal-Obj01_Modes
0001345C 0000                       		dc.w Obj01_MdJump-Obj01_Modes
0001345E 0000                       		dc.w Obj01_MdRoll-Obj01_Modes
00013460 0000                       		dc.w Obj01_MdJump2-Obj01_Modes
00013462                            ; ---------------------------------------------------------------------------
00013462                            ; Music	to play	after invincibility wears off
00013462                            ; ---------------------------------------------------------------------------
00013462                            ; ===========================================================================
00013462                            
00013462                            Sonic_Display:				; XREF: loc_12C7E
00013462 3028 0030                  		move.w	$30(a0),d0
00013466 6700                       		beq.s	Obj01_Display
00013468 5368 0030                  		subq.w	#1,$30(a0)
0001346C E648                       		lsr.w	#3,d0
0001346E 6400                       		bcc.s	Obj01_ChkInvin
00013470                            
00013470                            Obj01_Display:
00013470 4EBA A950                  		jsr	DisplaySprite
00013474                            
00013474                            ; Second part of the NineKode. Play different music on different acts - after invincibility wears off
00013474                             
00013474                            Obj01_ChkInvin:
00013474 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00013478 6700 0000                  		beq.w	Obj01_ChkShoes	; if not, branch	; change to beq.w
0001347C 4A68 0032                  		tst.w	$32(a0)		; check	time remaining for invinciblity
00013480 6700 0000                  		beq.w	Obj01_ChkShoes	; if no	time remains, branch	; change to beq.w
00013484 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time
00013488 6600 0000                  		bne.w	Obj01_ChkShoes	; change to bne.w
0001348C 4A38 F7AA                  		tst.b	($FFFFF7AA).w
00013490 6600 0000                  		bne.w	Obj01_RmvInvin	; change to bne.w
00013494 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
0001349A 6500 0000                  		bcs.w	Obj01_RmvInvin	; change to bcs.w
0001349E 7000                       		moveq	#0,d0
000134A0 1038 FE10                  		move.b	($FFFFFE10).w,d0
000134A4                             
000134A4 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
000134AA 6600                       		bne.s	Obj01_GetBgm2	; if not, branch
000134AC 43F9 0000 3C3E             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
000134B2 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
000134B4                             
000134B4                            Obj01_GetBgm2:
000134B4 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
000134BA 6600                       		bne.s	Obj01_GetBgm3	; if not, branch
000134BC 43F9 0000 3C46             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
000134C2 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
000134C4                             
000134C4                            Obj01_GetBgm3:
000134C4 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
000134CA 6600                       		bne.s	Obj01_GetBgm4	; if not, branch
000134CC 43F9 0000 3C4C             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 3
000134D2 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
000134D4                             
000134D4                            Obj01_GetBgm4:
000134D4 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
000134DA 6600                       		bne.s	Obj01_PlayMusic	; if not, branch
000134DC 43F9 0000 3C52             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
000134E2                             
000134E2                            Obj01_PlayMusic:
000134E2 1031 0000                  		move.b	(a1,d0.w),d0
000134E6 4EB9 0000 15BA             		jsr	(PlaySound).l	; play normal music
000134EC                             
000134EC                            ; NineKode ends here.
000134EC                            
000134EC                            Obj01_RmvInvin:
000134EC 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; cancel invincibility
000134F2                            
000134F2                            Obj01_ChkShoes:
000134F2 4A38 FE2E                  		tst.b	($FFFFFE2E).w	; does Sonic have speed	shoes?
000134F6 6700                       		beq.s	Obj01_ExitChk	; if not, branch
000134F8 4A68 0034                  		tst.w	$34(a0)		; check	time remaining
000134FC 6700                       		beq.s	Obj01_ExitChk
000134FE 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time
00013502 6600                       		bne.s	Obj01_ExitChk
00013504 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
0001350A 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
00013510 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
00013516 11FC 0000 FE2E             		move.b	#0,($FFFFFE2E).w ; cancel speed	shoes
0001351C 303C 00E3                  		move.w	#$E3,d0
00013520 4EF9 0000 15BA             		jmp	(PlaySound).l	; run music at normal speed
00013526                            ; ===========================================================================
00013526                            
00013526                            Obj01_ExitChk:
00013526 4E75                       		rts	
00013528                            
00013528                            ; ---------------------------------------------------------------------------
00013528                            ; Subroutine to	record Sonic's previous positions for invincibility stars
00013528                            ; ---------------------------------------------------------------------------
00013528                            
00013528                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013528                            
00013528                            
00013528                            Sonic_RecordPos:			; XREF: loc_12C7E; Obj01_Hurt; Obj01_Death
00013528 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
0001352C 43F8 CB00                  		lea	($FFFFCB00).w,a1
00013530 43F1 0000                  		lea	(a1,d0.w),a1
00013534 32E8 0008                  		move.w	8(a0),(a1)+
00013538 32E8 000C                  		move.w	$C(a0),(a1)+
0001353C 5838 F7A9                  		addq.b	#4,($FFFFF7A9).w
00013540 4E75                       		rts	
00013542                            ; End of function Sonic_RecordPos
00013542                            
00013542                            ; ---------------------------------------------------------------------------
00013542                            ; Subroutine for Sonic when he's underwater
00013542                            ; ---------------------------------------------------------------------------
00013542                            
00013542                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013542                            
00013542                            
00013542                            Sonic_Water:				; XREF: loc_12C7E
00013542 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00013548 6700                       		beq.s	Obj01_InWater	; if yes, branch
0001354A                            
0001354A                            locret_12D80:
0001354A 4E75                       		rts	
0001354C                            ; ===========================================================================
0001354C                            
0001354C                            Obj01_InWater:
0001354C 3038 F646                  		move.w	($FFFFF646).w,d0
00013550 B068 000C                  		cmp.w	$C(a0),d0	; is Sonic above the water?
00013554 6C00                       		bge.s	Obj01_OutWater	; if yes, branch
00013556 08E8 0006 0022             		bset	#6,$22(a0)
0001355C 66EC                       		bne.s	locret_12D80
0001355E 6100 0000                  		bsr.w	ResumeMusic
00013562 11FC 000A D340             		move.b	#$A,($FFFFD340).w ; load bubbles object	from Sonic's mouth
00013568 11FC 0081 D368             		move.b	#$81,($FFFFD368).w
0001356E 31FC 0300 F760             		move.w	#$300,($FFFFF760).w ; change Sonic's top speed
00013574 31FC 0006 F762             		move.w	#6,($FFFFF762).w ; change Sonic's acceleration
0001357A 31FC 0040 F764             		move.w	#$40,($FFFFF764).w ; change Sonic's deceleration
00013580 E0E8 0010                  		asr	$10(a0)
00013584 E0E8 0012                  		asr	$12(a0)
00013588 E0E8 0012                  		asr	$12(a0)
0001358C 67BC                       		beq.s	locret_12D80
0001358E 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
00013594 303C 00AA                  		move.w	#$AA,d0
00013598 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play splash sound
0001359E                            ; ===========================================================================
0001359E                            
0001359E                            Obj01_OutWater:
0001359E 08A8 0006 0022             		bclr	#6,$22(a0)
000135A4 67A4                       		beq.s	locret_12D80
000135A6 6100 0000                  		bsr.w	ResumeMusic
000135AA 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
000135B0 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
000135B6 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
000135BC E1E8 0012                  		asl	$12(a0)
000135C0 6700 FF88                  		beq.w	locret_12D80
000135C4 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
000135CA 0C68 F000 0012             		cmpi.w	#-$1000,$12(a0)
000135D0 6E00                       		bgt.s	loc_12E0E
000135D2 317C F000 0012             		move.w	#-$1000,$12(a0)	; set maximum speed on leaving water
000135D8                            
000135D8                            loc_12E0E:
000135D8 303C 00AA                  		move.w	#$AA,d0
000135DC 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play splash sound
000135E2                            ; End of function Sonic_Water
000135E2                            
000135E2                            ; ===========================================================================
000135E2                            ; ---------------------------------------------------------------------------
000135E2                            ; Modes	for controlling	Sonic
000135E2                            ; ---------------------------------------------------------------------------
000135E2                            
000135E2                            Obj01_MdNormal:				; XREF: Obj01_Modes
000135E2 6100 0000                  		bsr.w	Sonic_Jump
000135E6 6100 0000                  		bsr.w	Sonic_SlopeResist
000135EA 6100 0000                  		bsr.w	Sonic_Move
000135EE 6100 0000                  		bsr.w	Sonic_Roll
000135F2 6100 0000                  		bsr.w	Sonic_LevelBound
000135F6 4EBA A7A4                  		jsr	SpeedToPos
000135FA 6100 0000                  		bsr.w	Sonic_AnglePos
000135FE 6100 0000                  		bsr.w	Sonic_SlopeRepel
00013602 4E75                       		rts	
00013604                            ; ===========================================================================
00013604                            
00013604                            Obj01_MdJump:				; XREF: Obj01_Modes
00013604 6100 0000                  		bsr.w	Sonic_JumpHeight
00013608 6100 0000                  		bsr.w	Sonic_ChgJumpDir
0001360C 6100 0000                  		bsr.w	Sonic_LevelBound
00013610 4EBA A75E                  		jsr	ObjectFall
00013614 0828 0006 0022             		btst	#6,$22(a0)
0001361A 6700                       		beq.s	loc_12E5C
0001361C 0468 0028 0012             		subi.w	#$28,$12(a0)
00013622                            
00013622                            loc_12E5C:
00013622 6100 0000                  		bsr.w	Sonic_JumpAngle
00013626 6100 0000                  		bsr.w	Sonic_Floor
0001362A 4E75                       		rts	
0001362C                            ; ===========================================================================
0001362C                            
0001362C                            Obj01_MdRoll:				; XREF: Obj01_Modes
0001362C 6100 0000                  		bsr.w	Sonic_Jump
00013630 6100 0000                  		bsr.w	Sonic_RollRepel
00013634 6100 0000                  		bsr.w	Sonic_RollSpeed
00013638 6100 0000                  		bsr.w	Sonic_LevelBound
0001363C 4EBA A75E                  		jsr	SpeedToPos
00013640 6100 0000                  		bsr.w	Sonic_AnglePos
00013644 6100 0000                  		bsr.w	Sonic_SlopeRepel
00013648 4E75                       		rts	
0001364A                            ; ===========================================================================
0001364A                            
0001364A                            Obj01_MdJump2:				; XREF: Obj01_Modes
0001364A 6100 0000                  		bsr.w	Sonic_JumpHeight
0001364E 6100 0000                  		bsr.w	Sonic_ChgJumpDir
00013652 6100 0000                  		bsr.w	Sonic_LevelBound
00013656 6100 0000                  		bsr.w	Sonic_AirUnroll
0001365A 4EBA A714                  		jsr	ObjectFall
0001365E 0828 0006 0022             		btst	#6,$22(a0)
00013664 6700                       		beq.s	loc_12EA6
00013666 0468 0028 0012             		subi.w	#$28,$12(a0)
0001366C                            
0001366C                            loc_12EA6:
0001366C 6100 0000                  		bsr.w	Sonic_JumpAngle
00013670 6100 0000                  		bsr.w	Sonic_Floor
00013674 4E75                       		rts	
00013676                            ; ---------------------------------------------------------------------------
00013676                            ; Subroutine to	make Sonic walk/run
00013676                            ; ---------------------------------------------------------------------------
00013676                            
00013676                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013676                            
00013676                            
00013676                            Sonic_Move:				; XREF: Obj01_MdNormal
00013676 3C38 F760                  		move.w	($FFFFF760).w,d6
0001367A 3A38 F762                  		move.w	($FFFFF762).w,d5
0001367E 3838 F764                  		move.w	($FFFFF764).w,d4
00013682 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00013686 6600 0000                  		bne.w	loc_12FEE
0001368A 4A68 003E                  		tst.w	$3E(a0)
0001368E 6600 0000                  		bne.w	Obj01_ResetScr
00013692 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00013698 6700                       		beq.s	Obj01_NotLeft	; if not, branch
0001369A 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
000136A0 6600                       		bne.s	Obj01_MoveRight	; GMZ: If yes, branch
000136A2 6100 0000                  		bsr.w	Sonic_MoveLeft
000136A6                            
000136A6                            Obj01_NotLeft:
000136A6 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
000136AC 6700                       		beq.s	Obj01_NotRight	; if not, branch
000136AE 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
000136B4 6700                       		beq.s	Obj01_MoveRight	; GMZ: If not, branch
000136B6 6100 0000                  		bsr.w	Sonic_MoveLeft
000136BA 6000                       		bra.s	Obj01_NotRight
000136BC                            
000136BC                            Obj01_MoveRight:
000136BC 6100 0000                  		bsr.w	Sonic_MoveRight
000136C0                            
000136C0                            Obj01_NotRight:
000136C0 1028 0026                  		move.b	$26(a0),d0
000136C4 0600 0020                  		addi.b	#$20,d0
000136C8 0200 00C0                  		andi.b	#$C0,d0		; is Sonic on a	slope?
000136CC 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
000136D0 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
000136D4 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
000136D8 08A8 0005 0022             		bclr	#5,$22(a0)
000136DE 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
000136E4 0828 0003 0022             		btst	#3,$22(a0)
000136EA 6700                       		beq.s	Sonic_Balance
000136EC 7000                       		moveq	#0,d0
000136EE 1028 003D                  		move.b	$3D(a0),d0
000136F2 ED48                       		lsl.w	#6,d0
000136F4 43F8 D000                  		lea	($FFFFD000).w,a1
000136F8 43F1 0000                  		lea	(a1,d0.w),a1
000136FC 4A29 0022                  		tst.b	$22(a1)
00013700 6B00                       		bmi.s	Sonic_LookUp
00013702 7200                       		moveq	#0,d1
00013704 1229 0019                  		move.b	$19(a1),d1
00013708 3401                       		move.w	d1,d2
0001370A D442                       		add.w	d2,d2
0001370C 5942                       		subq.w	#4,d2
0001370E D268 0008                  		add.w	8(a0),d1
00013712 9269 0008                  		sub.w	8(a1),d1
00013716 0C41 0004                  		cmpi.w	#4,d1
0001371A 6D00                       		blt.s	loc_12F6A
0001371C B242                       		cmp.w	d2,d1
0001371E 6C00                       		bge.s	loc_12F5A
00013720 6000                       		bra.s	Sonic_LookUp
00013722                            ; ===========================================================================
00013722                            
00013722                            Sonic_Balance:
00013722 4EB9 0000 0000             		jsr	ObjHitFloor
00013728 0C41 000C                  		cmpi.w	#$C,d1
0001372C 6D00                       		blt.s	Sonic_LookUp
0001372E 0C28 0003 0036             		cmpi.b	#3,$36(a0)
00013734 6600                       		bne.s	loc_12F62
00013736                            
00013736                            loc_12F5A:
00013736 08A8 0000 0022             		bclr	#0,$22(a0)
0001373C 6000                       		bra.s	loc_12F70
0001373E                            ; ===========================================================================
0001373E                            
0001373E                            loc_12F62:
0001373E 0C28 0003 0037             		cmpi.b	#3,$37(a0)
00013744 6600                       		bne.s	Sonic_LookUp
00013746                            
00013746                            loc_12F6A:
00013746 08E8 0000 0022             		bset	#0,$22(a0)
0001374C                            
0001374C                            loc_12F70:
0001374C 117C 0006 001C             		move.b	#6,$1C(a0)	; use "balancing" animation
00013752 6000                       		bra.s	Obj01_ResetScr
00013754                            ; ===========================================================================
00013754                            
00013754                            Sonic_LookUp:
00013754 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up being pressed?
0001375A 6700                       		beq.s	Sonic_Duck	; if not, branch
0001375C 117C 0007 001C             		move.b	#7,$1C(a0)	; use "looking up" animation
00013762 0C78 00C8 F73E             		cmpi.w	#$C8,($FFFFF73E).w
00013768 6700                       		beq.s	loc_12FC2
0001376A 5478 F73E                  		addq.w	#2,($FFFFF73E).w
0001376E 6000                       		bra.s	loc_12FC2
00013770                            ; ===========================================================================
00013770                            
00013770                            Sonic_Duck:
00013770 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00013776 6700                       		beq.s	Obj01_ResetScr	; if not, branch
00013778 117C 0008 001C             		move.b	#8,$1C(a0)	; use "ducking"	animation
0001377E 0C78 0008 F73E             		cmpi.w	#8,($FFFFF73E).w
00013784 6700                       		beq.s	loc_12FC2
00013786 5578 F73E                  		subq.w	#2,($FFFFF73E).w
0001378A 6000                       		bra.s	loc_12FC2
0001378C                            ; ===========================================================================
0001378C                            
0001378C                            Obj01_ResetScr:
0001378C 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	screen in its default position?
00013792 6700                       		beq.s	loc_12FC2	; if yes, branch
00013794 6400                       		bcc.s	loc_12FBE
00013796 5878 F73E                  		addq.w	#4,($FFFFF73E).w ; move	screen back to default
0001379A                            
0001379A                            loc_12FBE:
0001379A 5578 F73E                  		subq.w	#2,($FFFFF73E).w ; move	screen back to default
0001379E                            
0001379E                            loc_12FC2:
0001379E 1038 F602                  		move.b	($FFFFF602).w,d0
000137A2 0200 000C                  		andi.b	#$C,d0		; is left/right	pressed?
000137A6 6600                       		bne.s	loc_12FEE	; if yes, branch
000137A8 3028 0014                  		move.w	$14(a0),d0
000137AC 6700                       		beq.s	loc_12FEE
000137AE 6B00                       		bmi.s	loc_12FE2
000137B0 9045                       		sub.w	d5,d0
000137B2 6400                       		bcc.s	loc_12FDC
000137B4 303C 0000                  		move.w	#0,d0
000137B8                            
000137B8                            loc_12FDC:
000137B8 3140 0014                  		move.w	d0,$14(a0)
000137BC 6000                       		bra.s	loc_12FEE
000137BE                            ; ===========================================================================
000137BE                            
000137BE                            loc_12FE2:
000137BE D045                       		add.w	d5,d0
000137C0 6400                       		bcc.s	loc_12FEA
000137C2 303C 0000                  		move.w	#0,d0
000137C6                            
000137C6                            loc_12FEA:
000137C6 3140 0014                  		move.w	d0,$14(a0)
000137CA                            
000137CA                            loc_12FEE:
000137CA 1028 0026                  		move.b	$26(a0),d0
000137CE 4EB9 0000 2CC4             		jsr	(CalcSine).l
000137D4 C3E8 0014                  		muls.w	$14(a0),d1
000137D8 E081                       		asr.l	#8,d1
000137DA 3141 0010                  		move.w	d1,$10(a0)
000137DE C1E8 0014                  		muls.w	$14(a0),d0
000137E2 E080                       		asr.l	#8,d0
000137E4 3140 0012                  		move.w	d0,$12(a0)
000137E8                            
000137E8                            loc_1300C:
000137E8 1028 0026                  		move.b	$26(a0),d0
000137EC 0600 0040                  		addi.b	#$40,d0
000137F0 6B00                       		bmi.s	locret_1307C
000137F2 123C 0040                  		move.b	#$40,d1
000137F6 4A68 0014                  		tst.w	$14(a0)
000137FA 6700                       		beq.s	locret_1307C
000137FC 6B00                       		bmi.s	loc_13024
000137FE 4441                       		neg.w	d1
00013800                            
00013800                            loc_13024:
00013800 1028 0026                  		move.b	$26(a0),d0
00013804 D001                       		add.b	d1,d0
00013806 3F00                       		move.w	d0,-(sp)
00013808 6100 0000                  		bsr.w	Sonic_WalkSpeed
0001380C 301F                       		move.w	(sp)+,d0
0001380E 4A41                       		tst.w	d1
00013810 6A00                       		bpl.s	locret_1307C
00013812 E141                       		asl.w	#8,d1
00013814 0600 0020                  		addi.b	#$20,d0
00013818 0200 00C0                  		andi.b	#$C0,d0
0001381C 6700                       		beq.s	loc_13078
0001381E 0C00 0040                  		cmpi.b	#$40,d0
00013822 6700                       		beq.s	loc_13066
00013824 0C00 0080                  		cmpi.b	#$80,d0
00013828 6700                       		beq.s	loc_13060
0001382A D368 0010                  		add.w	d1,$10(a0)
0001382E 08E8 0005 0022             		bset	#5,$22(a0)
00013834 317C 0000 0014             		move.w	#0,$14(a0)
0001383A 4E75                       		rts	
0001383C                            ; ===========================================================================
0001383C                            
0001383C                            loc_13060:
0001383C 9368 0012                  		sub.w	d1,$12(a0)
00013840 4E75                       		rts	
00013842                            ; ===========================================================================
00013842                            
00013842                            loc_13066:
00013842 9368 0010                  		sub.w	d1,$10(a0)
00013846 08E8 0005 0022             		bset	#5,$22(a0)
0001384C 317C 0000 0014             		move.w	#0,$14(a0)
00013852 4E75                       		rts	
00013854                            ; ===========================================================================
00013854                            
00013854                            loc_13078:
00013854 D368 0012                  		add.w	d1,$12(a0)
00013858                            
00013858                            locret_1307C:
00013858 4E75                       		rts	
0001385A                            ; End of function Sonic_Move
0001385A                            
0001385A                            
0001385A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001385A                            
0001385A                            
0001385A                            Sonic_MoveLeft:				; XREF: Sonic_Move
0001385A 3028 0014                  		move.w	$14(a0),d0
0001385E 6700                       		beq.s	loc_13086
00013860 6A00                       		bpl.s	loc_130B2
00013862                            
00013862                            loc_13086:
00013862 08E8 0000 0022             		bset	#0,$22(a0)
00013868 6600                       		bne.s	loc_1309A
0001386A 08A8 0005 0022             		bclr	#5,$22(a0)
00013870 117C 0001 001D             		move.b	#1,$1D(a0)
00013876                            
00013876                            loc_1309A:
00013876 9045                       		sub.w	d5,d0
00013878 3206                       		move.w	d6,d1
0001387A 4441                       		neg.w	d1
0001387C B041                       		cmp.w	d1,d0
0001387E 6E00                       		bgt.s	loc_130A6
00013880 3001                       		move.w	d1,d0
00013882                            
00013882                            loc_130A6:
00013882 3140 0014                  		move.w	d0,$14(a0)
00013886 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
0001388C 4E75                       		rts	
0001388E                            ; ===========================================================================
0001388E                            
0001388E                            loc_130B2:				; XREF: Sonic_MoveLeft
0001388E 9044                       		sub.w	d4,d0
00013890 6400                       		bcc.s	loc_130BA
00013892 303C FF80                  		move.w	#-$80,d0
00013896                            
00013896                            loc_130BA:
00013896 3140 0014                  		move.w	d0,$14(a0)
0001389A 1028 0026                  		move.b	$26(a0),d0
0001389E 0600 0020                  		addi.b	#$20,d0
000138A2 0200 00C0                  		andi.b	#$C0,d0
000138A6 6600                       		bne.s	locret_130E8
000138A8 0C40 0400                  		cmpi.w	#$400,d0
000138AC 6D00                       		blt.s	locret_130E8
000138AE 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
000138B4 08A8 0000 0022             		bclr	#0,$22(a0)
000138BA 303C 00A4                  		move.w	#$A4,d0
000138BE 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play stopping sound
000138C4                            
000138C4                            locret_130E8:
000138C4 4E75                       		rts	
000138C6                            ; End of function Sonic_MoveLeft
000138C6                            
000138C6                            
000138C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000138C6                            
000138C6                            
000138C6                            Sonic_MoveRight:			; XREF: Sonic_Move
000138C6 3028 0014                  		move.w	$14(a0),d0
000138CA 6B00                       		bmi.s	loc_13118
000138CC 08A8 0000 0022             		bclr	#0,$22(a0)
000138D2 6700                       		beq.s	loc_13104
000138D4 08A8 0005 0022             		bclr	#5,$22(a0)
000138DA 117C 0001 001D             		move.b	#1,$1D(a0)
000138E0                            
000138E0                            loc_13104:
000138E0 D045                       		add.w	d5,d0
000138E2 B046                       		cmp.w	d6,d0
000138E4 6D00                       		blt.s	loc_1310C
000138E6 3006                       		move.w	d6,d0
000138E8                            
000138E8                            loc_1310C:
000138E8 3140 0014                  		move.w	d0,$14(a0)
000138EC 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
000138F2 4E75                       		rts	
000138F4                            ; ===========================================================================
000138F4                            
000138F4                            loc_13118:				; XREF: Sonic_MoveRight
000138F4 D044                       		add.w	d4,d0
000138F6 6400                       		bcc.s	loc_13120
000138F8 303C 0080                  		move.w	#$80,d0
000138FC                            
000138FC                            loc_13120:
000138FC 3140 0014                  		move.w	d0,$14(a0)
00013900 1028 0026                  		move.b	$26(a0),d0
00013904 0600 0020                  		addi.b	#$20,d0
00013908 0200 00C0                  		andi.b	#$C0,d0
0001390C 6600                       		bne.s	locret_1314E
0001390E 0C40 FC00                  		cmpi.w	#-$400,d0
00013912 6E00                       		bgt.s	locret_1314E
00013914 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
0001391A 08E8 0000 0022             		bset	#0,$22(a0)
00013920 303C 00A4                  		move.w	#$A4,d0
00013924 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play stopping sound
0001392A                            
0001392A                            locret_1314E:
0001392A 4E75                       		rts	
0001392C                            ; End of function Sonic_MoveRight
0001392C                            
0001392C                            ; ---------------------------------------------------------------------------
0001392C                            ; Subroutine to	change Sonic's speed as he rolls
0001392C                            ; ---------------------------------------------------------------------------
0001392C                            
0001392C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001392C                            
0001392C                            
0001392C                            Sonic_RollSpeed:			; XREF: Obj01_MdRoll
0001392C 3C38 F760                  		move.w	($FFFFF760).w,d6
00013930 E346                       		asl.w	#1,d6
00013932 3A38 F762                  		move.w	($FFFFF762).w,d5
00013936 E245                       		asr.w	#1,d5
00013938 3838 F764                  		move.w	($FFFFF764).w,d4
0001393C E444                       		asr.w	#2,d4
0001393E 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00013942 6600 0000                  		bne.w	loc_131CC
00013946 4A68 003E                  		tst.w	$3E(a0)
0001394A 6600                       		bne.s	loc_13188
0001394C 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00013952 6700                       		beq.s	loc_1317C	; if not, branch
00013954 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0001395A 6600                       		bne.s	SonicRS_RollRight	; GMZ: If yes, branch
0001395C 6100 0000                  		bsr.w	Sonic_RollLeft
00013960                            
00013960                            loc_1317C:
00013960 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00013966 6700                       		beq.s	loc_13188	; if not, branch
00013968 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0001396E 6700                       		beq.s	SonicRS_RollRight	; GMZ: If not, branch
00013970 6100 0000                  		bsr.w	Sonic_RollLeft
00013974 6000                       		bra.s	loc_13188
00013976                            
00013976                            SonicRS_RollRight:
00013976 6100 0000                  		bsr.w	Sonic_RollRight
0001397A                            
0001397A                            loc_13188:
0001397A 3028 0014                  		move.w	$14(a0),d0
0001397E 6700                       		beq.s	loc_131AA
00013980 6B00                       		bmi.s	loc_1319E
00013982 9045                       		sub.w	d5,d0
00013984 6400                       		bcc.s	loc_13198
00013986 303C 0000                  		move.w	#0,d0
0001398A                            
0001398A                            loc_13198:
0001398A 3140 0014                  		move.w	d0,$14(a0)
0001398E 6000                       		bra.s	loc_131AA
00013990                            ; ===========================================================================
00013990                            
00013990                            loc_1319E:				; XREF: Sonic_RollSpeed
00013990 D045                       		add.w	d5,d0
00013992 6400                       		bcc.s	loc_131A6
00013994 303C 0000                  		move.w	#0,d0
00013998                            
00013998                            loc_131A6:
00013998 3140 0014                  		move.w	d0,$14(a0)
0001399C                            
0001399C                            loc_131AA:
0001399C 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
000139A0 6600                       		bne.s	loc_131CC	; if yes, branch
000139A2 08A8 0002 0022             		bclr	#2,$22(a0)
000139A8 117C 0013 0016             		move.b	#$13,$16(a0)
000139AE 117C 0009 0017             		move.b	#9,$17(a0)
000139B4 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
000139BA 5B68 000C                  		subq.w	#5,$C(a0)
000139BE                            
000139BE                            loc_131CC:
000139BE 1028 0026                  		move.b	$26(a0),d0
000139C2 4EB9 0000 2CC4             		jsr	(CalcSine).l
000139C8 C1E8 0014                  		muls.w	$14(a0),d0
000139CC E080                       		asr.l	#8,d0
000139CE 3140 0012                  		move.w	d0,$12(a0)
000139D2 C3E8 0014                  		muls.w	$14(a0),d1
000139D6 E081                       		asr.l	#8,d1
000139D8 0C41 1000                  		cmpi.w	#$1000,d1
000139DC 6F00                       		ble.s	loc_131F0
000139DE 323C 1000                  		move.w	#$1000,d1
000139E2                            
000139E2                            loc_131F0:
000139E2 0C41 F000                  		cmpi.w	#-$1000,d1
000139E6 6C00                       		bge.s	loc_131FA
000139E8 323C F000                  		move.w	#-$1000,d1
000139EC                            
000139EC                            loc_131FA:
000139EC 3141 0010                  		move.w	d1,$10(a0)
000139F0 6000 FDF6                  		bra.w	loc_1300C
000139F4                            ; End of function Sonic_RollSpeed
000139F4                            
000139F4                            
000139F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000139F4                            
000139F4                            
000139F4                            Sonic_RollLeft:				; XREF: Sonic_RollSpeed
000139F4 3028 0014                  		move.w	$14(a0),d0
000139F8 6700                       		beq.s	loc_1320A
000139FA 6A00                       		bpl.s	loc_13218
000139FC                            
000139FC                            loc_1320A:
000139FC 08E8 0000 0022             		bset	#0,$22(a0)
00013A02 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00013A08 4E75                       		rts	
00013A0A                            ; ===========================================================================
00013A0A                            
00013A0A                            loc_13218:
00013A0A 9044                       		sub.w	d4,d0
00013A0C 6400                       		bcc.s	loc_13220
00013A0E 303C FF80                  		move.w	#-$80,d0
00013A12                            
00013A12                            loc_13220:
00013A12 3140 0014                  		move.w	d0,$14(a0)
00013A16 4E75                       		rts	
00013A18                            ; End of function Sonic_RollLeft
00013A18                            
00013A18                            
00013A18                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013A18                            
00013A18                            
00013A18                            Sonic_RollRight:			; XREF: Sonic_RollSpeed
00013A18 3028 0014                  		move.w	$14(a0),d0
00013A1C 6B00                       		bmi.s	loc_1323A
00013A1E 08A8 0000 0022             		bclr	#0,$22(a0)
00013A24 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00013A2A 4E75                       		rts	
00013A2C                            ; ===========================================================================
00013A2C                            
00013A2C                            loc_1323A:
00013A2C D044                       		add.w	d4,d0
00013A2E 6400                       		bcc.s	loc_13242
00013A30 303C 0080                  		move.w	#$80,d0
00013A34                            
00013A34                            loc_13242:
00013A34 3140 0014                  		move.w	d0,$14(a0)
00013A38 4E75                       		rts	
00013A3A                            ; End of function Sonic_RollRight
00013A3A                            
00013A3A                            Sonic_AirUnroll:
00013A3A                            		
00013A3A 4A28 003A                  		tst.b	$3A(a0) ; check jump height control
00013A3E 6600                       		bne.s	@timer
00013A40 1038 F605                  		move.b	($FFFFF605).w,d0
00013A44 0200 0070                  		andi.b	#$70,d0 ; is abc being pressed?
00013A48 6700                       		beq.s	@end	; if not, branch
00013A4A 08A8 0002 0022             		bclr	#2,$22(a0)
00013A50 117C 0013 0016             		move.b	#$13,$16(a0)
00013A56 117C 0009 0017             		move.b	#9,$17(a0)
00013A5C 117C 000E 001C             		move.b	#14,$1C(a0)	; use dunk animation
00013A62 303C 00A5                  		move.w	#$A5,d0
00013A66 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play fart sound
00013A6C 2028 0010                  		move.l	$10(a0),d0
00013A70 D080                       		add.l	d0,d0
00013A72 2140 0010                  		move.l	d0,$10(a0)
00013A76 5B68 000C                  		subq.w	#5,$C(a0)
00013A7A                            	@end:
00013A7A 4E75                       		rts
00013A7C                            	@timer:
00013A7C 5328 003A                  		subq.b	#1,$3A(a0)
00013A80 4E75                       		rts
00013A82                            
00013A82                            ; ---------------------------------------------------------------------------
00013A82                            ; Subroutine to	change Sonic's direction while jumping
00013A82                            ; ---------------------------------------------------------------------------
00013A82                            
00013A82                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013A82                            
00013A82                            
00013A82                            Sonic_ChgJumpDir:			; XREF: Obj01_MdJump; Obj01_MdJump2
00013A82 3C38 F760                  		move.w	($FFFFF760).w,d6
00013A86 3A38 F762                  		move.w	($FFFFF762).w,d5
00013A8A E345                       		asl.w	#1,d5
00013A8C 0828 0004 0022             		btst	#4,$22(a0)
00013A92 6600                       		bne.s	Obj01_ResetScr2
00013A94 3028 0010                  		move.w	$10(a0),d0
00013A98 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00013A9E 6700                       		beq.s	loc_13278	; if not, branch
00013AA0 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013AA6 6600                       		bne.s	SonicCJD_JumpRight	; GMZ: If yes, branch
00013AA8 6100 0000                  		bsr.w	SonicCJD_JumpLeft
00013AAC 6E00                       		bgt.s	loc_13278
00013AAE 3001                       		move.w	d1,d0
00013AB0                            
00013AB0                            loc_13278:
00013AB0 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00013AB6 6700                       		beq.s	Obj01_JumpMove	; if not, branch
00013AB8 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013ABE 6700                       		beq.s	SonicCJD_JumpRight	; GMZ: If not, branch
00013AC0 6100 0000                  		bsr.w	SonicCJD_JumpLeft
00013AC4 6E00                       		bgt.s	Obj01_JumpMove
00013AC6 3001                       		move.w	d1,d0
00013AC8 6000                       		bra.s	Obj01_JumpMove
00013ACA                            
00013ACA                            SonicCJD_JumpLeft:
00013ACA 08E8 0000 0022             		bset	#0,$22(a0)
00013AD0 9045                       		sub.w	d5,d0
00013AD2 3206                       		move.w	d6,d1
00013AD4 4441                       		neg.w	d1
00013AD6 B041                       		cmp.w	d1,d0
00013AD8                            		; bgt.s	loc_13278
00013AD8                            		; move.w	d1,d0
00013AD8 4E75                       		rts
00013ADA                            
00013ADA                            SonicCJD_JumpRight:
00013ADA 08A8 0000 0022             		bclr	#0,$22(a0)
00013AE0 D045                       		add.w	d5,d0
00013AE2 B046                       		cmp.w	d6,d0
00013AE4 6D00                       		blt.s	Obj01_JumpMove
00013AE6 3006                       		move.w	d6,d0
00013AE8                            
00013AE8                            Obj01_JumpMove:
00013AE8 3140 0010                  		move.w	d0,$10(a0)	; change Sonic's horizontal speed
00013AEC                            
00013AEC                            Obj01_ResetScr2:
00013AEC 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	the screen in its default position?
00013AF2 6700                       		beq.s	loc_132A4	; if yes, branch
00013AF4 6400                       		bcc.s	loc_132A0
00013AF6 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00013AFA                            
00013AFA                            loc_132A0:
00013AFA 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00013AFE                            
00013AFE                            loc_132A4:
00013AFE 0C68 FC00 0012             		cmpi.w	#-$400,$12(a0)	; is Sonic moving faster than -$400 upwards?
00013B04 6500                       		bcs.s	locret_132D2	; if yes, branch
00013B06 3028 0010                  		move.w	$10(a0),d0
00013B0A 3200                       		move.w	d0,d1
00013B0C EA41                       		asr.w	#5,d1
00013B0E 6700                       		beq.s	locret_132D2
00013B10 6B00                       		bmi.s	loc_132C6
00013B12 9041                       		sub.w	d1,d0
00013B14 6400                       		bcc.s	loc_132C0
00013B16 303C 0000                  		move.w	#0,d0
00013B1A                            
00013B1A                            loc_132C0:
00013B1A 3140 0010                  		move.w	d0,$10(a0)
00013B1E 4E75                       		rts	
00013B20                            ; ===========================================================================
00013B20                            
00013B20                            loc_132C6:
00013B20 9041                       		sub.w	d1,d0
00013B22 6500                       		bcs.s	loc_132CE
00013B24 303C 0000                  		move.w	#0,d0
00013B28                            
00013B28                            loc_132CE:
00013B28 3140 0010                  		move.w	d0,$10(a0)
00013B2C                            
00013B2C                            locret_132D2:
00013B2C 4E75                       		rts	
00013B2E                            ; End of function Sonic_ChgJumpDir
00013B2E                            
00013B2E                            ; ===========================================================================
00013B2E                            ; ---------------------------------------------------------------------------
00013B2E                            ; Unused subroutine to squash Sonic
00013B2E                            ; ---------------------------------------------------------------------------
00013B2E 1028 0026                  		move.b	$26(a0),d0
00013B32 0600 0020                  		addi.b	#$20,d0
00013B36 0200 00C0                  		andi.b	#$C0,d0
00013B3A 6600                       		bne.s	locret_13302
00013B3C 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013B40 4A41                       		tst.w	d1
00013B42 6A00                       		bpl.s	locret_13302
00013B44 317C 0000 0014             		move.w	#0,$14(a0)	; stop Sonic moving
00013B4A 317C 0000 0010             		move.w	#0,$10(a0)
00013B50 317C 0000 0012             		move.w	#0,$12(a0)
00013B56 117C 000B 001C             		move.b	#$B,$1C(a0)	; use "warping"	animation
00013B5C                            
00013B5C                            locret_13302:
00013B5C 4E75                       		rts	
00013B5E                            ; ---------------------------------------------------------------------------
00013B5E                            ; Subroutine to	prevent	Sonic leaving the boundaries of	a level
00013B5E                            ; ---------------------------------------------------------------------------
00013B5E                            
00013B5E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013B5E                            
00013B5E                            
00013B5E                            Sonic_LevelBound:			; XREF: Obj01_MdNormal; et al
00013B5E 2228 0008                  		move.l	8(a0),d1
00013B62 3028 0010                  		move.w	$10(a0),d0
00013B66 48C0                       		ext.l	d0
00013B68 E180                       		asl.l	#8,d0
00013B6A D280                       		add.l	d0,d1
00013B6C 4841                       		swap	d1
00013B6E 3038 F728                  		move.w	($FFFFF728).w,d0
00013B72 0640 0010                  		addi.w	#$10,d0
00013B76 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00013B78 6200                       		bhi.s	Boundary_Sides	; if yes, branch
00013B7A 3038 F72A                  		move.w	($FFFFF72A).w,d0
00013B7E 0640 0128                  		addi.w	#$128,d0
00013B82 4A38 F7AA                  		tst.b	($FFFFF7AA).w
00013B86 6600                       		bne.s	loc_13332
00013B88 0640 0040                  		addi.w	#$40,d0
00013B8C                            
00013B8C                            loc_13332:
00013B8C B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00013B8E 6300                       		bls.s	Boundary_Sides	; if yes, branch
00013B90                            
00013B90                            loc_13336:
00013B90 3038 F72E                  		move.w	($FFFFF72E).w,d0
00013B94 0640 00E0                  		addi.w	#$E0,d0
00013B98 B068 000C                  		cmp.w	$C(a0),d0	; has Sonic touched the	bottom boundary?
00013B9C 6D00                       		blt.s	Boundary_Bottom	; if yes, branch
00013B9E 4E75                       		rts	
00013BA0                            ; ===========================================================================
00013BA0                            
00013BA0                            Boundary_Bottom:
00013BA0 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2 ?
00013BA6 6600 0000                  		bne.w	KillSonic	; if not, kill Sonic
00013BAA 0C78 2000 D008             		cmpi.w	#$2000,($FFFFD008).w
00013BB0 6500 0000                  		bcs.w	KillSonic
00013BB4 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
00013BB8 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
00013BBE 31FC 0103 FE10             		move.w	#$103,($FFFFFE10).w ; set level	to SBZ3	(LZ4)
00013BC4 4E75                       		rts	
00013BC6                            ; ===========================================================================
00013BC6                            
00013BC6                            Boundary_Sides:
00013BC6 3140 0008                  		move.w	d0,8(a0)
00013BCA 317C 0000 000A             		move.w	#0,$A(a0)
00013BD0 317C 0000 0010             		move.w	#0,$10(a0)	; stop Sonic moving
00013BD6 317C 0000 0014             		move.w	#0,$14(a0)
00013BDC 60B2                       		bra.s	loc_13336
00013BDE                            ; End of function Sonic_LevelBound
00013BDE                            
00013BDE                            ; ---------------------------------------------------------------------------
00013BDE                            ; Subroutine allowing Sonic to roll when he's moving
00013BDE                            ; ---------------------------------------------------------------------------
00013BDE                            
00013BDE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013BDE                            
00013BDE                            
00013BDE                            Sonic_Roll:				; XREF: Obj01_MdNormal
00013BDE 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00013BE2 6600                       		bne.s	Obj01_NoRoll
00013BE4 3028 0014                  		move.w	$14(a0),d0
00013BE8 6A00                       		bpl.s	loc_13392
00013BEA 4440                       		neg.w	d0
00013BEC                            
00013BEC                            loc_13392:
00013BEC 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic moving at $80 speed or faster?
00013BF0 6500                       		bcs.s	Obj01_NoRoll	; if not, branch
00013BF2 1038 F602                  		move.b	($FFFFF602).w,d0
00013BF6 0200 000C                  		andi.b	#$C,d0		; is left/right	being pressed?
00013BFA 6600                       		bne.s	Obj01_NoRoll	; if yes, branch
00013BFC 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00013C02 6600                       		bne.s	Obj01_ChkRoll	; if yes, branch
00013C04                            
00013C04                            Obj01_NoRoll:
00013C04 4E75                       		rts	
00013C06                            ; ===========================================================================
00013C06                            
00013C06                            Obj01_ChkRoll:
00013C06 0828 0002 0022             		btst	#2,$22(a0)	; is Sonic already rolling?
00013C0C 6700                       		beq.s	Obj01_DoRoll	; if not, branch
00013C0E 4E75                       		rts	
00013C10                            ; ===========================================================================
00013C10                            
00013C10                            Obj01_DoRoll:
00013C10 08E8 0002 0022             		bset	#2,$22(a0)
00013C16 117C 000E 0016             		move.b	#$E,$16(a0)
00013C1C 117C 0007 0017             		move.b	#7,$17(a0)
00013C22 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00013C28 5A68 000C                  		addq.w	#5,$C(a0)
00013C2C 303C 00BE                  		move.w	#$BE,d0
00013C30 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play rolling sound
00013C36 4A68 0014                  		tst.w	$14(a0)
00013C3A 6600                       		bne.s	locret_133E8
00013C3C 317C 0200 0014             		move.w	#$200,$14(a0)
00013C42                            
00013C42                            locret_133E8:
00013C42 4E75                       		rts	
00013C44                            ; End of function Sonic_Roll
00013C44                            
00013C44                            ; ---------------------------------------------------------------------------
00013C44                            ; Subroutine allowing Sonic to jump
00013C44                            ; ---------------------------------------------------------------------------
00013C44                            
00013C44                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013C44                            
00013C44                            
00013C44                            Sonic_Jump:				; XREF: Obj01_MdNormal; Obj01_MdRoll
00013C44 1038 F603                  		move.b	($FFFFF603).w,d0
00013C48 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
00013C4C 6700 0000                  		beq.w	locret_1348E	; if not, branch
00013C50 7000                       		moveq	#0,d0
00013C52 1028 0026                  		move.b	$26(a0),d0
00013C56 0600 0080                  		addi.b	#$80,d0
00013C5A 6100 0000                  		bsr.w	sub_14D48
00013C5E 0C41 0006                  		cmpi.w	#6,d1
00013C62 6D00 0000                  		blt.w	locret_1348E
00013C66 343C 0680                  		move.w	#$680,d2
00013C6A 0828 0006 0022             		btst	#6,$22(a0)
00013C70 6700                       		beq.s	loc_1341C
00013C72 343C 0380                  		move.w	#$380,d2
00013C76                            
00013C76                            loc_1341C:
00013C76 7000                       		moveq	#0,d0
00013C78 1028 0026                  		move.b	$26(a0),d0
00013C7C 0400 0040                  		subi.b	#$40,d0
00013C80 4EB9 0000 2CC4             		jsr	(CalcSine).l
00013C86 C3C2                       		muls.w	d2,d1
00013C88 E081                       		asr.l	#8,d1
00013C8A D368 0010                  		add.w	d1,$10(a0)	; make Sonic jump
00013C8E C1C2                       		muls.w	d2,d0
00013C90 E080                       		asr.l	#8,d0
00013C92 D168 0012                  		add.w	d0,$12(a0)	; make Sonic jump
00013C96 08E8 0001 0022             		bset	#1,$22(a0)
00013C9C 08A8 0005 0022             		bclr	#5,$22(a0)
00013CA2 588F                       		addq.l	#4,sp
00013CA4 117C 0001 003C             		move.b	#1,$3C(a0)
00013CAA 4228 0038                  		clr.b	$38(a0)
00013CAE 303C 00A0                  		move.w	#$A0,d0
00013CB2 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play jumping sound
00013CB8 117C 0013 0016             		move.b	#$13,$16(a0)
00013CBE 117C 0009 0017             		move.b	#9,$17(a0)
00013CC4 0828 0002 0022             		btst	#2,$22(a0)
00013CCA 6600                       		bne.s	loc_13490
00013CCC 117C 000E 0016             		move.b	#$E,$16(a0)
00013CD2 117C 0007 0017             		move.b	#7,$17(a0)
00013CD8 117C 0002 001C             		move.b	#2,$1C(a0)	; use "jumping"	animation
00013CDE 08E8 0002 0022             		bset	#2,$22(a0)
00013CE4 5A68 000C                  		addq.w	#5,$C(a0)
00013CE8 117C 000A 003A             		move.b	#10,$3A(a0) ; timer
00013CEE                            
00013CEE                            locret_1348E:
00013CEE 4E75                       		rts	
00013CF0                            ; ===========================================================================
00013CF0                            
00013CF0                            loc_13490:
00013CF0 08E8 0004 0022             		bset	#4,$22(a0)
00013CF6 4E75                       		rts	
00013CF8                            ; End of function Sonic_Jump
00013CF8                            
00013CF8                            
00013CF8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013CF8                            
00013CF8                            
00013CF8                            Sonic_JumpHeight:			; XREF: Obj01_MdJump; Obj01_MdJump2
00013CF8 4A28 003C                  		tst.b	$3C(a0)
00013CFC 6700                       		beq.s	loc_134C4
00013CFE 323C FC00                  		move.w	#-$400,d1
00013D02 0828 0006 0022             		btst	#6,$22(a0)
00013D08 6700                       		beq.s	loc_134AE
00013D0A 323C FE00                  		move.w	#-$200,d1
00013D0E                            
00013D0E                            loc_134AE:
00013D0E B268 0012                  		cmp.w	$12(a0),d1
00013D12 6F00                       		ble.s	locret_134C2
00013D14 1038 F602                  		move.b	($FFFFF602).w,d0
00013D18 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
00013D1C 6600                       		bne.s	locret_134C2	; if yes, branch
00013D1E 3141 0012                  		move.w	d1,$12(a0)
00013D22                            
00013D22                            locret_134C2:
00013D22 4E75                       		rts	
00013D24                            ; ===========================================================================
00013D24                            
00013D24                            loc_134C4:
00013D24 0C68 F040 0012             		cmpi.w	#-$FC0,$12(a0)
00013D2A 6C00                       		bge.s	locret_134D2
00013D2C 317C F040 0012             		move.w	#-$FC0,$12(a0)
00013D32                            
00013D32                            locret_134D2:
00013D32 4E75                       		rts	
00013D34                            ; End of function Sonic_JumpHeight
00013D34                            
00013D34                            ; ---------------------------------------------------------------------------
00013D34                            ; Subroutine to	slow Sonic walking up a	slope
00013D34                            ; ---------------------------------------------------------------------------
00013D34                            
00013D34                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013D34                            
00013D34                            
00013D34                            Sonic_SlopeResist:			; XREF: Obj01_MdNormal
00013D34 1028 0026                  		move.b	$26(a0),d0
00013D38 0600 0060                  		addi.b	#$60,d0
00013D3C 0C00 00C0                  		cmpi.b	#$C0,d0
00013D40 6400                       		bcc.s	locret_13508
00013D42 1028 0026                  		move.b	$26(a0),d0
00013D46 4EB9 0000 2CC4             		jsr	(CalcSine).l
00013D4C C1FC 0020                  		muls.w	#$20,d0
00013D50 E080                       		asr.l	#8,d0
00013D52 4A68 0014                  		tst.w	$14(a0)
00013D56 6700                       		beq.s	locret_13508
00013D58 6B00                       		bmi.s	loc_13504
00013D5A 4A40                       		tst.w	d0
00013D5C 6700                       		beq.s	locret_13502
00013D5E D168 0014                  		add.w	d0,$14(a0)	; change Sonic's inertia
00013D62                            
00013D62                            locret_13502:
00013D62 4E75                       		rts	
00013D64                            ; ===========================================================================
00013D64                            
00013D64                            loc_13504:
00013D64 D168 0014                  		add.w	d0,$14(a0)
00013D68                            
00013D68                            locret_13508:
00013D68 4E75                       		rts	
00013D6A                            ; End of function Sonic_SlopeResist
00013D6A                            
00013D6A                            ; ---------------------------------------------------------------------------
00013D6A                            ; Subroutine to	push Sonic down	a slope	while he's rolling
00013D6A                            ; ---------------------------------------------------------------------------
00013D6A                            
00013D6A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013D6A                            
00013D6A                            
00013D6A                            Sonic_RollRepel:			; XREF: Obj01_MdRoll
00013D6A 1028 0026                  		move.b	$26(a0),d0
00013D6E 0600 0060                  		addi.b	#$60,d0
00013D72 0C00 00C0                  		cmpi.b	#-$40,d0
00013D76 6400                       		bcc.s	locret_13544
00013D78 1028 0026                  		move.b	$26(a0),d0
00013D7C 4EB9 0000 2CC4             		jsr	(CalcSine).l
00013D82 C1FC 0050                  		muls.w	#$50,d0
00013D86 E080                       		asr.l	#8,d0
00013D88 4A68 0014                  		tst.w	$14(a0)
00013D8C 6B00                       		bmi.s	loc_1353A
00013D8E 4A40                       		tst.w	d0
00013D90 6A00                       		bpl.s	loc_13534
00013D92 E480                       		asr.l	#2,d0
00013D94                            
00013D94                            loc_13534:
00013D94 D168 0014                  		add.w	d0,$14(a0)
00013D98 4E75                       		rts	
00013D9A                            ; ===========================================================================
00013D9A                            
00013D9A                            loc_1353A:
00013D9A 4A40                       		tst.w	d0
00013D9C 6B00                       		bmi.s	loc_13540
00013D9E E480                       		asr.l	#2,d0
00013DA0                            
00013DA0                            loc_13540:
00013DA0 D168 0014                  		add.w	d0,$14(a0)
00013DA4                            
00013DA4                            locret_13544:
00013DA4 4E75                       		rts	
00013DA6                            ; End of function Sonic_RollRepel
00013DA6                            
00013DA6                            ; ---------------------------------------------------------------------------
00013DA6                            ; Subroutine to	push Sonic down	a slope
00013DA6                            ; ---------------------------------------------------------------------------
00013DA6                            
00013DA6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013DA6                            
00013DA6                            
00013DA6                            Sonic_SlopeRepel:			; XREF: Obj01_MdNormal; Obj01_MdRoll
00013DA6 4E71                       		nop	
00013DA8 4A28 0038                  		tst.b	$38(a0)
00013DAC 6600                       		bne.s	locret_13580
00013DAE 4A68 003E                  		tst.w	$3E(a0)
00013DB2 6600                       		bne.s	loc_13582
00013DB4 1028 0026                  		move.b	$26(a0),d0
00013DB8 0600 0020                  		addi.b	#$20,d0
00013DBC 0200 00C0                  		andi.b	#$C0,d0
00013DC0 6700                       		beq.s	locret_13580
00013DC2 3028 0014                  		move.w	$14(a0),d0
00013DC6 6A00                       		bpl.s	loc_1356A
00013DC8 4440                       		neg.w	d0
00013DCA                            
00013DCA                            loc_1356A:
00013DCA 0C40 0280                  		cmpi.w	#$280,d0
00013DCE 6400                       		bcc.s	locret_13580
00013DD0 4268 0014                  		clr.w	$14(a0)
00013DD4 08E8 0001 0022             		bset	#1,$22(a0)
00013DDA 317C 001E 003E             		move.w	#$1E,$3E(a0)
00013DE0                            
00013DE0                            locret_13580:
00013DE0 4E75                       		rts	
00013DE2                            ; ===========================================================================
00013DE2                            
00013DE2                            loc_13582:
00013DE2 5368 003E                  		subq.w	#1,$3E(a0)
00013DE6 4E75                       		rts	
00013DE8                            ; End of function Sonic_SlopeRepel
00013DE8                            
00013DE8                            ; ---------------------------------------------------------------------------
00013DE8                            ; Subroutine to	return Sonic's angle to 0 as he jumps
00013DE8                            ; ---------------------------------------------------------------------------
00013DE8                            
00013DE8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013DE8                            
00013DE8                            
00013DE8                            Sonic_JumpAngle:			; XREF: Obj01_MdJump; Obj01_MdJump2
00013DE8 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
00013DEC 6700                       		beq.s	locret_135A2	; if already 0,	branch
00013DEE 6A00                       		bpl.s	loc_13598	; if higher than 0, branch
00013DF0                            
00013DF0 5400                       		addq.b	#2,d0		; increase angle
00013DF2 6400                       		bcc.s	loc_13596
00013DF4 7000                       		moveq	#0,d0
00013DF6                            
00013DF6                            loc_13596:
00013DF6 6000                       		bra.s	loc_1359E
00013DF8                            ; ===========================================================================
00013DF8                            
00013DF8                            loc_13598:
00013DF8 5500                       		subq.b	#2,d0		; decrease angle
00013DFA 6400                       		bcc.s	loc_1359E
00013DFC 7000                       		moveq	#0,d0
00013DFE                            
00013DFE                            loc_1359E:
00013DFE 1140 0026                  		move.b	d0,$26(a0)
00013E02                            
00013E02                            locret_135A2:
00013E02 4E75                       		rts	
00013E04                            ; End of function Sonic_JumpAngle
00013E04                            
00013E04                            ; ---------------------------------------------------------------------------
00013E04                            ; Subroutine for Sonic to interact with	the floor after	jumping/falling
00013E04                            ; ---------------------------------------------------------------------------
00013E04                            
00013E04                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013E04                            
00013E04                            
00013E04                            Sonic_Floor:				; XREF: Obj01_MdJump; Obj01_MdJump2
00013E04 3228 0010                  		move.w	$10(a0),d1
00013E08 3428 0012                  		move.w	$12(a0),d2
00013E0C 4EB9 0000 2F92             		jsr	(CalcAngle).l
00013E12 11C0 FFEC                  		move.b	d0,($FFFFFFEC).w
00013E16 0400 0020                  		subi.b	#$20,d0
00013E1A 11C0 FFED                  		move.b	d0,($FFFFFFED).w
00013E1E 0200 00C0                  		andi.b	#$C0,d0
00013E22 11C0 FFEE                  		move.b	d0,($FFFFFFEE).w
00013E26 0C00 0040                  		cmpi.b	#$40,d0
00013E2A 6700 0000                  		beq.w	loc_13680
00013E2E 0C00 0080                  		cmpi.b	#$80,d0
00013E32 6700 0000                  		beq.w	loc_136E2
00013E36 0C00 00C0                  		cmpi.b	#-$40,d0
00013E3A 6700 0000                  		beq.w	loc_1373E
00013E3E 6100 0000                  		bsr.w	Sonic_HitWall
00013E42 4A41                       		tst.w	d1
00013E44 6A00                       		bpl.s	loc_135F0
00013E46 9368 0008                  		sub.w	d1,8(a0)
00013E4A 317C 0000 0010             		move.w	#0,$10(a0)
00013E50                            
00013E50                            loc_135F0:
00013E50 6100 0000                  		bsr.w	sub_14EB4
00013E54 4A41                       		tst.w	d1
00013E56 6A00                       		bpl.s	loc_13602
00013E58 D368 0008                  		add.w	d1,8(a0)
00013E5C 317C 0000 0010             		move.w	#0,$10(a0)
00013E62                            
00013E62                            loc_13602:
00013E62 6100 0000                  		bsr.w	Sonic_HitFloor
00013E66 11C1 FFEF                  		move.b	d1,($FFFFFFEF).w
00013E6A 4A41                       		tst.w	d1
00013E6C 6A00                       		bpl.s	locret_1367E
00013E6E 1428 0012                  		move.b	$12(a0),d2
00013E72 5002                       		addq.b	#8,d2
00013E74 4402                       		neg.b	d2
00013E76 B202                       		cmp.b	d2,d1
00013E78 6C00                       		bge.s	loc_1361E
00013E7A B002                       		cmp.b	d2,d0
00013E7C 6D00                       		blt.s	locret_1367E
00013E7E                            
00013E7E                            loc_1361E:
00013E7E D368 000C                  		add.w	d1,$C(a0)
00013E82 1143 0026                  		move.b	d3,$26(a0)
00013E86 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013E8A 117C 0000 001C             		move.b	#0,$1C(a0)
00013E90 1003                       		move.b	d3,d0
00013E92 0600 0020                  		addi.b	#$20,d0
00013E96 0200 0040                  		andi.b	#$40,d0
00013E9A 6600                       		bne.s	loc_1365C
00013E9C 1003                       		move.b	d3,d0
00013E9E 0600 0010                  		addi.b	#$10,d0
00013EA2 0200 0020                  		andi.b	#$20,d0
00013EA6 6700                       		beq.s	loc_1364E
00013EA8 E0E8 0012                  		asr	$12(a0)
00013EAC 6000                       		bra.s	loc_13670
00013EAE                            ; ===========================================================================
00013EAE                            
00013EAE                            loc_1364E:
00013EAE 317C 0000 0012             		move.w	#0,$12(a0)
00013EB4 3168 0010 0014             		move.w	$10(a0),$14(a0)
00013EBA 4E75                       		rts	
00013EBC                            ; ===========================================================================
00013EBC                            
00013EBC                            loc_1365C:
00013EBC 317C 0000 0010             		move.w	#0,$10(a0)
00013EC2 0C68 0FC0 0012             		cmpi.w	#$FC0,$12(a0)
00013EC8 6F00                       		ble.s	loc_13670
00013ECA 317C 0FC0 0012             		move.w	#$FC0,$12(a0)
00013ED0                            
00013ED0                            loc_13670:
00013ED0 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013ED6 4A03                       		tst.b	d3
00013ED8 6A00                       		bpl.s	locret_1367E
00013EDA 4468 0014                  		neg.w	$14(a0)
00013EDE                            
00013EDE                            locret_1367E:
00013EDE 4E75                       		rts	
00013EE0                            ; ===========================================================================
00013EE0                            
00013EE0                            loc_13680:
00013EE0 6100 0000                  		bsr.w	Sonic_HitWall
00013EE4 4A41                       		tst.w	d1
00013EE6 6A00                       		bpl.s	loc_1369A
00013EE8 9368 0008                  		sub.w	d1,8(a0)
00013EEC 317C 0000 0010             		move.w	#0,$10(a0)
00013EF2 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013EF8 4E75                       		rts	
00013EFA                            ; ===========================================================================
00013EFA                            
00013EFA                            loc_1369A:
00013EFA 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013EFE 4A41                       		tst.w	d1
00013F00 6A00                       		bpl.s	loc_136B4
00013F02 9368 000C                  		sub.w	d1,$C(a0)
00013F06 4A68 0012                  		tst.w	$12(a0)
00013F0A 6A00                       		bpl.s	locret_136B2
00013F0C 317C 0000 0012             		move.w	#0,$12(a0)
00013F12                            
00013F12                            locret_136B2:
00013F12 4E75                       		rts	
00013F14                            ; ===========================================================================
00013F14                            
00013F14                            loc_136B4:
00013F14 4A68 0012                  		tst.w	$12(a0)
00013F18 6B00                       		bmi.s	locret_136E0
00013F1A 6100 0000                  		bsr.w	Sonic_HitFloor
00013F1E 4A41                       		tst.w	d1
00013F20 6A00                       		bpl.s	locret_136E0
00013F22 D368 000C                  		add.w	d1,$C(a0)
00013F26 1143 0026                  		move.b	d3,$26(a0)
00013F2A 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013F2E 117C 0000 001C             		move.b	#0,$1C(a0)
00013F34 317C 0000 0012             		move.w	#0,$12(a0)
00013F3A 3168 0010 0014             		move.w	$10(a0),$14(a0)
00013F40                            
00013F40                            locret_136E0:
00013F40 4E75                       		rts	
00013F42                            ; ===========================================================================
00013F42                            
00013F42                            loc_136E2:
00013F42 6100 0000                  		bsr.w	Sonic_HitWall
00013F46 4A41                       		tst.w	d1
00013F48 6A00                       		bpl.s	loc_136F4
00013F4A 9368 0008                  		sub.w	d1,8(a0)
00013F4E 317C 0000 0010             		move.w	#0,$10(a0)
00013F54                            
00013F54                            loc_136F4:
00013F54 6100 0000                  		bsr.w	sub_14EB4
00013F58 4A41                       		tst.w	d1
00013F5A 6A00                       		bpl.s	loc_13706
00013F5C D368 0008                  		add.w	d1,8(a0)
00013F60 317C 0000 0010             		move.w	#0,$10(a0)
00013F66                            
00013F66                            loc_13706:
00013F66 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013F6A 4A41                       		tst.w	d1
00013F6C 6A00                       		bpl.s	locret_1373C
00013F6E 9368 000C                  		sub.w	d1,$C(a0)
00013F72 1003                       		move.b	d3,d0
00013F74 0600 0020                  		addi.b	#$20,d0
00013F78 0200 0040                  		andi.b	#$40,d0
00013F7C 6600                       		bne.s	loc_13726
00013F7E 317C 0000 0012             		move.w	#0,$12(a0)
00013F84 4E75                       		rts	
00013F86                            ; ===========================================================================
00013F86                            
00013F86                            loc_13726:
00013F86 1143 0026                  		move.b	d3,$26(a0)
00013F8A 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013F8E 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013F94 4A03                       		tst.b	d3
00013F96 6A00                       		bpl.s	locret_1373C
00013F98 4468 0014                  		neg.w	$14(a0)
00013F9C                            
00013F9C                            locret_1373C:
00013F9C 4E75                       		rts	
00013F9E                            ; ===========================================================================
00013F9E                            
00013F9E                            loc_1373E:
00013F9E 6100 0000                  		bsr.w	sub_14EB4
00013FA2 4A41                       		tst.w	d1
00013FA4 6A00                       		bpl.s	loc_13758
00013FA6 D368 0008                  		add.w	d1,8(a0)
00013FAA 317C 0000 0010             		move.w	#0,$10(a0)
00013FB0 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013FB6 4E75                       		rts	
00013FB8                            ; ===========================================================================
00013FB8                            
00013FB8                            loc_13758:
00013FB8 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013FBC 4A41                       		tst.w	d1
00013FBE 6A00                       		bpl.s	loc_13772
00013FC0 9368 000C                  		sub.w	d1,$C(a0)
00013FC4 4A68 0012                  		tst.w	$12(a0)
00013FC8 6A00                       		bpl.s	locret_13770
00013FCA 317C 0000 0012             		move.w	#0,$12(a0)
00013FD0                            
00013FD0                            locret_13770:
00013FD0 4E75                       		rts	
00013FD2                            ; ===========================================================================
00013FD2                            
00013FD2                            loc_13772:
00013FD2 4A68 0012                  		tst.w	$12(a0)
00013FD6 6B00                       		bmi.s	locret_1379E
00013FD8 6100 0000                  		bsr.w	Sonic_HitFloor
00013FDC 4A41                       		tst.w	d1
00013FDE 6A00                       		bpl.s	locret_1379E
00013FE0 D368 000C                  		add.w	d1,$C(a0)
00013FE4 1143 0026                  		move.b	d3,$26(a0)
00013FE8 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013FEC 117C 0000 001C             		move.b	#0,$1C(a0)
00013FF2 317C 0000 0012             		move.w	#0,$12(a0)
00013FF8 3168 0010 0014             		move.w	$10(a0),$14(a0)
00013FFE                            
00013FFE                            locret_1379E:
00013FFE 4E75                       		rts	
00014000                            ; End of function Sonic_Floor
00014000                            
00014000                            ; ---------------------------------------------------------------------------
00014000                            ; Subroutine to	reset Sonic's mode when he lands on the floor
00014000                            ; ---------------------------------------------------------------------------
00014000                            
00014000                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014000                            
00014000                            
00014000                            Sonic_ResetOnFloor:			; XREF: PlatformObject; et al
00014000 0828 0004 0022             		btst	#4,$22(a0)
00014006 6700                       		beq.s	loc_137AE
00014008 4E71                       		nop	
0001400A 4E71                       		nop	
0001400C 4E71                       		nop	
0001400E                            
0001400E                            loc_137AE:
0001400E 08A8 0005 0022             		bclr	#5,$22(a0)
00014014 08A8 0001 0022             		bclr	#1,$22(a0)
0001401A 08A8 0004 0022             		bclr	#4,$22(a0)
00014020 0828 0002 0022             		btst	#2,$22(a0)
00014026 6700                       		beq.s	loc_137E4
00014028 08A8 0002 0022             		bclr	#2,$22(a0)
0001402E 117C 0013 0016             		move.b	#$13,$16(a0)
00014034 117C 0009 0017             		move.b	#9,$17(a0)
0001403A 117C 0000 001C             		move.b	#0,$1C(a0)	; use running/walking animation
00014040 5B68 000C                  		subq.w	#5,$C(a0)
00014044                            
00014044                            loc_137E4:
00014044 117C 0000 003C             		move.b	#0,$3C(a0)
0001404A 31FC 0000 F7D0             		move.w	#0,($FFFFF7D0).w
00014050 4E75                       		rts	
00014052                            ; End of function Sonic_ResetOnFloor
00014052                            
00014052                            ; ===========================================================================
00014052                            ; ---------------------------------------------------------------------------
00014052                            ; Sonic	when he	gets hurt
00014052                            ; ---------------------------------------------------------------------------
00014052                            
00014052                            Obj01_Hurt:				; XREF: Obj01_Index
00014052 4EBA 9D48                  		jsr	SpeedToPos
00014056 0668 0030 0012             		addi.w	#$30,$12(a0)
0001405C 0828 0006 0022             		btst	#6,$22(a0)
00014062 6700                       		beq.s	loc_1380C
00014064 0468 0020 0012             		subi.w	#$20,$12(a0)
0001406A                            
0001406A                            loc_1380C:
0001406A 6100 0000                  		bsr.w	Sonic_HurtStop
0001406E 6100 FAEE                  		bsr.w	Sonic_LevelBound
00014072 6100 F4B4                  		bsr.w	Sonic_RecordPos
00014076 6100 0000                  		bsr.w	Sonic_Animate
0001407A 6100 0000                  		bsr.w	LoadSonicDynPLC
0001407E 4EFA 9D42                  		jmp	DisplaySprite
00014082                            
00014082                            ; ---------------------------------------------------------------------------
00014082                            ; Subroutine to	stop Sonic falling after he's been hurt
00014082                            ; ---------------------------------------------------------------------------
00014082                            
00014082                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014082                            
00014082                            
00014082                            Sonic_HurtStop:				; XREF: Obj01_Hurt
00014082 3038 F72E                  		move.w	($FFFFF72E).w,d0
00014086 0640 00E0                  		addi.w	#$E0,d0
0001408A B068 000C                  		cmp.w	$C(a0),d0
0001408E 6500 0000                  		bcs.w	KillSonic
00014092 6100 FD70                  		bsr.w	Sonic_Floor
00014096 0828 0001 0022             		btst	#1,$22(a0)
0001409C 6600                       		bne.s	locret_13860
0001409E 7000                       		moveq	#0,d0
000140A0 3140 0012                  		move.w	d0,$12(a0)
000140A4 3140 0010                  		move.w	d0,$10(a0)
000140A8 3140 0014                  		move.w	d0,$14(a0)
000140AC 117C 0000 001C             		move.b	#0,$1C(a0)
000140B2 5528 0024                  		subq.b	#2,$24(a0)
000140B6 317C 0078 0030             		move.w	#$78,$30(a0)
000140BC                            
000140BC                            locret_13860:
000140BC 4E75                       		rts	
000140BE                            ; End of function Sonic_HurtStop
000140BE                            
000140BE                            ; ===========================================================================
000140BE                            ; ---------------------------------------------------------------------------
000140BE                            ; Sonic	when he	dies
000140BE                            ; ---------------------------------------------------------------------------
000140BE                            
000140BE                            Obj01_Death:				; XREF: Obj01_Index
000140BE 6100 0000                  		bsr.w	GameOver
000140C2 4EBA 9CAC                  		jsr	ObjectFall
000140C6 6100 F460                  		bsr.w	Sonic_RecordPos
000140CA 6100 0000                  		bsr.w	Sonic_Animate
000140CE 6100 0000                  		bsr.w	LoadSonicDynPLC
000140D2 4EFA 9CEE                  		jmp	DisplaySprite
000140D6                            
000140D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000140D6                            
000140D6                            
000140D6                            GameOver:				; XREF: Obj01_Death
000140D6 3038 F72E                  		move.w	($FFFFF72E).w,d0
000140DA 0640 0100                  		addi.w	#$100,d0
000140DE B068 000C                  		cmp.w	$C(a0),d0
000140E2 6400 0000                  		bcc.w	locret_13900
000140E6 317C FFC8 0012             		move.w	#-$38,$12(a0)
000140EC 5428 0024                  		addq.b	#2,$24(a0)
000140F0 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
000140F4 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; update lives	counter
000140F8 5338 FE12                  		subq.b	#1,($FFFFFE12).w ; subtract 1 from number of lives
000140FC 6600                       		bne.s	loc_138D4
000140FE 317C 0000 003A             		move.w	#0,$3A(a0)
00014104 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load GAME object
0001410A 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
00014110 11FC 0001 D0DA             		move.b	#1,($FFFFD0DA).w ; set OVER object to correct frame
00014116 4238 FE1A                  		clr.b	($FFFFFE1A).w
0001411A                            
0001411A                            loc_138C2:
0001411A 303C 008F                  		move.w	#$8F,d0
0001411E 4EB9 0000 15BA             		jsr	(PlaySound).l	; play game over music
00014124 7003                       		moveq	#3,d0
00014126 4EF9 0000 17A4             		jmp	(LoadPLC).l	; load game over patterns
0001412C                            ; ===========================================================================
0001412C                            
0001412C                            loc_138D4:
0001412C 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
00014132 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is TIME OVER tag set?
00014136 6700                       		beq.s	locret_13900	; if not, branch
00014138 317C 0000 003A             		move.w	#0,$3A(a0)
0001413E 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load TIME object
00014144 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
0001414A 11FC 0002 D09A             		move.b	#2,($FFFFD09A).w
00014150 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
00014156 60C2                       		bra.s	loc_138C2
00014158                            ; ===========================================================================
00014158                            
00014158                            locret_13900:
00014158 4E75                       		rts	
0001415A                            ; End of function GameOver
0001415A                            
0001415A                            ; ===========================================================================
0001415A                            ; ---------------------------------------------------------------------------
0001415A                            ; Sonic	when the level is restarted
0001415A                            ; ---------------------------------------------------------------------------
0001415A                            
0001415A                            Obj01_ResetLevel:			; XREF: Obj01_Index
0001415A 4A68 003A                  		tst.w	$3A(a0)
0001415E 6700                       		beq.s	locret_13914
00014160 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00014164 6600                       		bne.s	locret_13914
00014166 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
0001416C                            
0001416C                            locret_13914:
0001416C 4E75                       		rts	
0001416E                            
0001416E                            ; ---------------------------------------------------------------------------
0001416E                            ; Subroutine to	make Sonic run around loops (GHZ/SLZ)
0001416E                            ; ---------------------------------------------------------------------------
0001416E                            
0001416E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001416E                            
0001416E                            
0001416E                            Sonic_Loops:				; XREF: Obj01_Control
0001416E 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; is level SLZ	?
00014174 6700                       		beq.s	loc_13926	; if yes, branch
00014176 4A38 FE10                  		tst.b	($FFFFFE10).w	; is level GHZ ?
0001417A 6600 0000                  		bne.w	locret_139C2	; if not, branch
0001417E                            
0001417E                            loc_13926:
0001417E 3028 000C                  		move.w	$C(a0),d0
00014182 E248                       		lsr.w	#1,d0
00014184 0240 0380                  		andi.w	#$380,d0
00014188 1228 0008                  		move.b	8(a0),d1
0001418C 0241 007F                  		andi.w	#$7F,d1
00014190 D041                       		add.w	d1,d0
00014192 43F8 A400                  		lea	($FFFFA400).w,a1
00014196 1231 0000                  		move.b	(a1,d0.w),d1	; d1 is	the 256x256 tile Sonic is currently on
0001419A B238 F7AE                  		cmp.b	($FFFFF7AE).w,d1
0001419E 6700 FA66                  		beq.w	Obj01_ChkRoll
000141A2 B238 F7AF                  		cmp.b	($FFFFF7AF).w,d1
000141A6 6700 FA5E                  		beq.w	Obj01_ChkRoll
000141AA B238 F7AC                  		cmp.b	($FFFFF7AC).w,d1
000141AE 6700                       		beq.s	loc_13976
000141B0 B238 F7AD                  		cmp.b	($FFFFF7AD).w,d1
000141B4 6700                       		beq.s	loc_13966
000141B6 08A8 0006 0001             		bclr	#6,1(a0)
000141BC 4E75                       		rts	
000141BE                            ; ===========================================================================
000141BE                            
000141BE                            loc_13966:
000141BE 0828 0001 0022             		btst	#1,$22(a0)
000141C4 6700                       		beq.s	loc_13976
000141C6 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
000141CC 4E75                       		rts	
000141CE                            ; ===========================================================================
000141CE                            
000141CE                            loc_13976:
000141CE 3428 0008                  		move.w	8(a0),d2
000141D2 0C02 002C                  		cmpi.b	#$2C,d2
000141D6 6400                       		bcc.s	loc_13988
000141D8 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
000141DE 4E75                       		rts	
000141E0                            ; ===========================================================================
000141E0                            
000141E0                            loc_13988:
000141E0 0C02 00E0                  		cmpi.b	#-$20,d2
000141E4 6500                       		bcs.s	loc_13996
000141E6 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
000141EC 4E75                       		rts	
000141EE                            ; ===========================================================================
000141EE                            
000141EE                            loc_13996:
000141EE 0828 0006 0001             		btst	#6,1(a0)
000141F4 6600                       		bne.s	loc_139B2
000141F6 1228 0026                  		move.b	$26(a0),d1
000141FA 6700                       		beq.s	locret_139C2
000141FC 0C01 0080                  		cmpi.b	#-$80,d1
00014200 6200                       		bhi.s	locret_139C2
00014202 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
00014208 4E75                       		rts	
0001420A                            ; ===========================================================================
0001420A                            
0001420A                            loc_139B2:
0001420A 1228 0026                  		move.b	$26(a0),d1
0001420E 0C01 0080                  		cmpi.b	#-$80,d1
00014212 6300                       		bls.s	locret_139C2
00014214 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
0001421A                            
0001421A                            locret_139C2:
0001421A 4E75                       		rts	
0001421C                            ; End of function Sonic_Loops
0001421C                            
0001421C                            ; ---------------------------------------------------------------------------
0001421C                            ; Subroutine to	animate	Sonic's sprites
0001421C                            ; ---------------------------------------------------------------------------
0001421C                            
0001421C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001421C                            
0001421C                            Player_Anim:
0001421C 0000 0000                  	dc.l	SonicAniData
00014220 0000 0000                  	dc.l	SonicAniData ; gronic
00014224                            	; Insert more animation data for other characters here
00014224                            	
00014224                            Sonic_Animate:				; XREF: Obj01_Control; et al
00014224 7000                       			moveq	#0,d0
00014226 1038 FFE8                  		move.b	(v_character),d0
0001422A E548                       		lsl.w	#2,d0
0001422C 43FA FFEE                  		lea 	Player_Anim(pc),a1
00014230                            		
00014230 2271 0000                  		movea.l	(a1,d0.w),a1	; load Sonic dplc
00014234                            	
00014234 7000                       		moveq	#0,d0
00014236 1028 001C                  		move.b	$1C(a0),d0
0001423A B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
0001423E 6700                       		beq.s	SAnim_Do	; if not, branch
00014240 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
00014244 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0001424A 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
00014250                            
00014250                            SAnim_Do:
00014250 D040                       		add.w	d0,d0
00014252 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
00014256 1011                       		move.b	(a1),d0
00014258 6B00                       		bmi.s	SAnim_WalkRun	; if animation is walk/run/roll/jump, branch
0001425A 1228 0022                  		move.b	$22(a0),d1
0001425E 0201 0001                  		andi.b	#1,d1
00014262 0228 00FC 0001             		andi.b	#$FC,1(a0)
00014268 8328 0001                  		or.b	d1,1(a0)
0001426C 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00014270 6A00                       		bpl.s	SAnim_Delay	; if time remains, branch
00014272 1140 001E                  		move.b	d0,$1E(a0)	; load frame duration
00014276                            
00014276                            SAnim_Do2:
00014276 7200                       		moveq	#0,d1
00014278 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
0001427C 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
00014280 6B00                       		bmi.s	SAnim_End_FF	; if animation is complete, branch
00014282                            
00014282                            SAnim_Next:
00014282 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
00014286 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
0001428A                            
0001428A                            SAnim_Delay:
0001428A 4E75                       		rts	
0001428C                            ; ===========================================================================
0001428C                            
0001428C                            SAnim_End_FF:
0001428C 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0001428E 6600                       		bne.s	SAnim_End_FE	; if not, branch
00014290 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
00014296 1029 0001                  		move.b	1(a1),d0	; read sprite number
0001429A 60E6                       		bra.s	SAnim_Next
0001429C                            ; ===========================================================================
0001429C                            
0001429C                            SAnim_End_FE:
0001429C 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0001429E 6600                       		bne.s	SAnim_End_FD	; if not, branch
000142A0 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
000142A4 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
000142A8 9200                       		sub.b	d0,d1
000142AA 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
000142AE 60D2                       		bra.s	SAnim_Next
000142B0                            ; ===========================================================================
000142B0                            
000142B0                            SAnim_End_FD:
000142B0 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
000142B2 6600                       		bne.s	SAnim_End	; if not, branch
000142B4 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
000142BA                            
000142BA                            SAnim_End:
000142BA 4E75                       		rts	
000142BC                            ; ===========================================================================
000142BC                            
000142BC                            SAnim_WalkRun:				; XREF: SAnim_Do
000142BC 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
000142C0 6AC8                       		bpl.s	SAnim_Delay	; if time remains, branch
000142C2 5200                       		addq.b	#1,d0		; is animation walking/running?
000142C4 6600 0000                  		bne.w	SAnim_RollJump	; if not, branch
000142C8 7200                       		moveq	#0,d1
000142CA 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
000142CE 1428 0022                  		move.b	$22(a0),d2
000142D2 0202 0001                  		andi.b	#1,d2		; is Sonic mirrored horizontally?
000142D6 6600                       		bne.s	loc_13A70	; if yes, branch
000142D8 4600                       		not.b	d0		; reverse angle
000142DA                            
000142DA                            loc_13A70:
000142DA 0600 0010                  		addi.b	#$10,d0		; add $10 to angle
000142DE 6A00                       		bpl.s	loc_13A78	; if angle is $0-$7F, branch
000142E0 7203                       		moveq	#3,d1
000142E2                            
000142E2                            loc_13A78:
000142E2 0228 00FC 0001             		andi.b	#$FC,1(a0)
000142E8 B302                       		eor.b	d1,d2
000142EA 8528 0001                  		or.b	d2,1(a0)
000142EE 0828 0005 0022             		btst	#5,$22(a0)
000142F4 6600 0000                  		bne.w	SAnim_Push
000142F8 E808                       		lsr.b	#4,d0		; divide angle by $10
000142FA 0200 0006                  		andi.b	#6,d0		; angle	must be	0, 2, 4	or 6
000142FE 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
00014302 6A00                       		bpl.s	loc_13A9C
00014304 4442                       		neg.w	d2
00014306                            
00014306                            loc_13A9C:
00014306 43F9 0000 0000             		lea	(SonAni_Run).l,a1 ; use	running	animation
0001430C 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic at running speed?
00014310 6400                       		bcc.s	loc_13AB4	; if yes, branch
00014312 43F9 0000 0000             		lea	(SonAni_Walk).l,a1 ; use walking animation
00014318 1200                       		move.b	d0,d1
0001431A E209                       		lsr.b	#1,d1
0001431C D001                       		add.b	d1,d0
0001431E                            
0001431E                            loc_13AB4:
0001431E D000                       		add.b	d0,d0
00014320 1600                       		move.b	d0,d3
00014322 4442                       		neg.w	d2
00014324 0642 0800                  		addi.w	#$800,d2
00014328 6A00                       		bpl.s	loc_13AC2
0001432A 7400                       		moveq	#0,d2
0001432C                            
0001432C                            loc_13AC2:
0001432C E04A                       		lsr.w	#8,d2
0001432E 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
00014332 6100 FF42                  		bsr.w	SAnim_Do2
00014336 D728 001A                  		add.b	d3,$1A(a0)	; modify frame number
0001433A 4E75                       		rts	
0001433C                            ; ===========================================================================
0001433C                            
0001433C                            SAnim_RollJump:				; XREF: SAnim_WalkRun
0001433C 5200                       		addq.b	#1,d0		; is animation rolling/jumping?
0001433E 6600                       		bne.s	SAnim_Push	; if not, branch
00014340 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
00014344 6A00                       		bpl.s	loc_13ADE
00014346 4442                       		neg.w	d2
00014348                            
00014348                            loc_13ADE:
00014348 43F9 0000 0000             		lea	(SonAni_Roll2).l,a1 ; use fast animation
0001434E 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic moving fast?
00014352 6400                       		bcc.s	loc_13AF0	; if yes, branch
00014354 43F9 0000 0000             		lea	(SonAni_Roll).l,a1 ; use slower	animation
0001435A                            
0001435A                            loc_13AF0:
0001435A 4442                       		neg.w	d2
0001435C 0642 0400                  		addi.w	#$400,d2
00014360 6A00                       		bpl.s	loc_13AFA
00014362 7400                       		moveq	#0,d2
00014364                            
00014364                            loc_13AFA:
00014364 E04A                       		lsr.w	#8,d2
00014366 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
0001436A 1228 0022                  		move.b	$22(a0),d1
0001436E 0201 0001                  		andi.b	#1,d1
00014372 0228 00FC 0001             		andi.b	#$FC,1(a0)
00014378 8328 0001                  		or.b	d1,1(a0)
0001437C 6000 FEF8                  		bra.w	SAnim_Do2
00014380                            ; ===========================================================================
00014380                            
00014380                            SAnim_Push:				; XREF: SAnim_RollJump
00014380 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
00014384 6B00                       		bmi.s	loc_13B1E
00014386 4442                       		neg.w	d2
00014388                            
00014388                            loc_13B1E:
00014388 0642 0800                  		addi.w	#$800,d2
0001438C 6A00                       		bpl.s	loc_13B26
0001438E 7400                       		moveq	#0,d2
00014390                            
00014390                            loc_13B26:
00014390 EC4A                       		lsr.w	#6,d2
00014392 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
00014396 43F9 0000 0000             		lea	(SonAni_Push).l,a1
0001439C 1228 0022                  		move.b	$22(a0),d1
000143A0 0201 0001                  		andi.b	#1,d1
000143A4 0228 00FC 0001             		andi.b	#$FC,1(a0)
000143AA 8328 0001                  		or.b	d1,1(a0)
000143AE 6000 FEC6                  		bra.w	SAnim_Do2
000143B2                            ; End of function Sonic_Animate
000143B2                            
000143B2                            ; ===========================================================================
000143B2                            SonicAniData:
000143B2                            	include "_anim\Sonic.asm"
000143B2                            ; ---------------------------------------------------------------------------
000143B2                            ; Animation script - Sonic
000143B2                            ; ---------------------------------------------------------------------------
000143B2 0000                       		dc.w SonAni_Walk-SonicAniData
000143B4 0000                       		dc.w SonAni_Run-SonicAniData
000143B6 0000                       		dc.w SonAni_Roll-SonicAniData
000143B8 0000                       		dc.w SonAni_Roll2-SonicAniData
000143BA 0000                       		dc.w SonAni_Push-SonicAniData
000143BC 0000                       		dc.w SonAni_Wait-SonicAniData
000143BE 0000                       		dc.w SonAni_Balance-SonicAniData
000143C0 0000                       		dc.w SonAni_LookUp-SonicAniData
000143C2 0000                       		dc.w SonAni_Duck-SonicAniData
000143C4 0000                       		dc.w SonAni_Warp1-SonicAniData
000143C6 0000                       		dc.w SonAni_Warp2-SonicAniData
000143C8 0000                       		dc.w SonAni_Warp3-SonicAniData
000143CA 0000                       		dc.w SonAni_Warp4-SonicAniData
000143CC 0000                       		dc.w SonAni_Stop-SonicAniData
000143CE 0000                       		dc.w SonAni_Float1-SonicAniData
000143D0 0000                       		dc.w SonAni_Float2-SonicAniData
000143D2 0000                       		dc.w SonAni_Spring-SonicAniData
000143D4 0000                       		dc.w SonAni_LZHang-SonicAniData
000143D6 0000                       		dc.w SonAni_Leap1-SonicAniData
000143D8 0000                       		dc.w SonAni_Leap2-SonicAniData
000143DA 0000                       		dc.w SonAni_Surf-SonicAniData
000143DC 0000                       		dc.w SonAni_Bubble-SonicAniData
000143DE 0000                       		dc.w SonAni_Death1-SonicAniData
000143E0 0000                       		dc.w SonAni_Drown-SonicAniData
000143E2 0000                       		dc.w SonAni_Death2-SonicAniData
000143E4 0000                       		dc.w SonAni_Shrink-SonicAniData
000143E6 0000                       		dc.w SonAni_Hurt-SonicAniData
000143E8 0000                       		dc.w SonAni_LZSlide-SonicAniData
000143EA 0000                       		dc.w SonAni_Blank-SonicAniData
000143EC 0000                       		dc.w SonAni_Float3-SonicAniData
000143EE 0000                       		dc.w SonAni_Float4-SonicAniData
000143F0 FF08 095A 0A0B 0659 07FF   SonAni_Walk:	dc.b $FF, 8, 9, $5A, $A, $B, 6, $59, 7, $FF
000143FA FF1E 1F20 21FF FFFF        SonAni_Run:	dc.b $FF, $1E, $1F, $20, $21, $FF, $FF,	$FF
00014402 FE2E 2F30 3132 FFFF        SonAni_Roll:	dc.b $FE, $2E, $2F, $30, $31, $32, $FF,	$FF
0001440A FE2E 2F32 3031 32FF        SonAni_Roll2:	dc.b $FE, $2E, $2F, $32, $30, $31, $32,	$FF
00014412 FD45 4647 48FF FFFF        SonAni_Push:	dc.b $FD, $45, $46, $47, $48, $FF, $FF,	$FF
0001441A 1701 0101 0101 0101 0101+  SonAni_Wait:	dc.b $17, 1, 1,	1, 1, 1, 1, 1, 1, 1, 1,	1, 1, 3, 2, 2, 2, 3, 4, $FE, 2, 0
00014430 1E3A 3BFF                  SonAni_Balance:	dc.b $1E, $3A, $3B, $FF
00014434 3F05 FF00                  SonAni_LookUp:	dc.b $3F, 5, $FF, 0
00014438 3F39 FF00                  SonAni_Duck:	dc.b $3F, $39, $FF, 0
0001443C 3F33 FF00                  SonAni_Warp1:	dc.b $3F, $33, $FF, 0
00014440 3F34 FF00                  SonAni_Warp2:	dc.b $3F, $34, $FF, 0
00014444 3F35 FF00                  SonAni_Warp3:	dc.b $3F, $35, $FF, 0
00014448 3F36 FF00                  SonAni_Warp4:	dc.b $3F, $36, $FF, 0
0001444C 0737 38FF                  SonAni_Stop:	dc.b 7,	$37, $38, $FF
00014450 073C 3FFF                  SonAni_Float1:	dc.b 7,	$3C, $3F, $FF
00014454 073C 3D53 3E54 FF00        SonAni_Float2:	dc.b 7,	$3C, $3D, $53, $3E, $54, $FF, 0
0001445C 2F40 FD00                  SonAni_Spring:	dc.b $2F, $40, $FD, 0
00014460 0441 42FF                  SonAni_LZHang:	dc.b 4,	$41, $42, $FF
00014464 0F43 4343 FE01             SonAni_Leap1:	dc.b $F, $43, $43, $43,	$FE, 1
0001446A 0F43 44FE 0100             SonAni_Leap2:	dc.b $F, $43, $44, $FE,	1, 0
00014470 3F49 FF00                  SonAni_Surf:	dc.b $3F, $49, $FF, 0
00014474 0B56 560A 0BFD 0000        SonAni_Bubble:	dc.b $B, $56, $56, $A, $B, $FD,	0, 0
0001447C 204B FF00                  SonAni_Death1:	dc.b $20, $4B, $FF, 0
00014480 2F4C FF00                  SonAni_Drown:	dc.b $2F, $4C, $FF, 0
00014484 034D FF00                  SonAni_Death2:	dc.b 3,	$4D, $FF, 0
00014488 034E 4F50 5152 00FE 0100   SonAni_Shrink:	dc.b 3,	$4E, $4F, $50, $51, $52, 0, $FE, 1, 0
00014492 035B FF00                  SonAni_Hurt:	dc.b 3,	$5B, $FF, 0
00014496 0755 57FF                  SonAni_LZSlide:	dc.b 7, $55, $57, $FF
0001449A 7700 FD00                  SonAni_Blank:	dc.b $77, 0, $FD, 0
0001449E 033C 3D53 3E54 FF00        SonAni_Float3:	dc.b 3,	$3C, $3D, $53, $3E, $54, $FF, 0
000144A6 033C FD00                  SonAni_Float4:	dc.b 3,	$3C, $FD, 0
000144AA                            		even
000144AA                            		even
000144AA                            
000144AA                            ; ---------------------------------------------------------------------------
000144AA                            ; Sonic	pattern	loading	subroutine
000144AA                            ; ---------------------------------------------------------------------------
000144AA                            
000144AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000144AA                            Player_DPLC:
000144AA 0000 0000                  	dc.l	SonicDynPLC
000144AE 0000 0000                  	dc.l	SonicDynPLC ; gronic
000144B2                            	; add pointers for player dplc here
000144B2                            Player_Art:
000144B2 0000 0000                  	dc.l	Art_Sonic
000144B6 0000 0000                  	dc.l	Art_Sonic ; gronic
000144BA                            	; add pointers for player art here
000144BA                            
000144BA                            LoadSonicDynPLC:			; XREF: Obj01_Control; et al
000144BA 7000                       		moveq	#0,d0
000144BC 1028 001A                  		move.b	$1A(a0),d0	; load frame number
000144C0 B038 F766                  		cmp.b	($FFFFF766).w,d0
000144C4 6700                       		beq.s	locret_13C96
000144C6 11C0 F766                  		move.b	d0,($FFFFF766).w
000144CA                            		
000144CA 323C 0000                  		move.w	#0,d1
000144CE 1238 FFE8                  		move.b	(v_character),d1
000144D2 E549                       		lsl.w	#2,d1
000144D4 45FA FFD4                  		lea 	Player_DPLC(pc),a2
000144D8                            
000144D8 2472 1000                  		movea.l	(a2,d1.w),a2	; load Sonic dplc
000144DC                            		
000144DC D040                       		add.w	d0,d0
000144DE D4F2 0000                  		adda.w	(a2,d0.w),a2
000144E2 7200                       		moveq	#0,d1
000144E4 121A                       		move.b	(a2)+,d1	; read "number of entries" value
000144E6 5301                       		subq.b	#1,d1
000144E8 6B00                       		bmi.s	locret_13C96
000144EA 47F8 C800                  		lea	($FFFFC800).w,a3
000144EE 11FC 0001 F767             		move.b	#1,($FFFFF767).w
000144F4                            
000144F4                            SPLC_ReadEntry:
000144F4 303C 0000                  		move.w	#0,d0
000144F8 1038 FFE8                  		move.b	(v_character),d0
000144FC E548                       		lsl.w	#2,d0
000144FE 43FA FFB2                  		lea 	Player_Art(pc),a1
00014502                            
00014502 2271 0000                  		movea.l	(a1,d0.w),a1	; load Sonic art
00014506                            
00014506 7400                       		moveq	#0,d2
00014508 141A                       		move.b	(a2)+,d2
0001450A 3002                       		move.w	d2,d0
0001450C E808                       		lsr.b	#4,d0
0001450E E14A                       		lsl.w	#8,d2
00014510 141A                       		move.b	(a2)+,d2
00014512 EB4A                       		lsl.w	#5,d2
00014514 D3C2                       		adda.l	d2,a1
00014516                            
00014516                            SPLC_LoadTile:
00014516 4CD9 707C                  		movem.l	(a1)+,d2-d6/a4-a6
0001451A 48D3 707C                  		movem.l	d2-d6/a4-a6,(a3)
0001451E 47EB 0020                  		lea	$20(a3),a3	; next tile
00014522 51C8 FFF2                  		dbf	d0,SPLC_LoadTile ; repeat for number of	tiles
00014526                            
00014526 51C9 FFCC                  		dbf	d1,SPLC_ReadEntry ; repeat for number of entries
0001452A                            
0001452A                            locret_13C96:
0001452A 4E75                       		rts	
0001452C                            ; End of function LoadSonicDynPLC
0001452C                            
0001452C                            ; ===========================================================================
0001452C                            ; ---------------------------------------------------------------------------
0001452C                            ; Object 0A - drowning countdown numbers and small bubbles (LZ)
0001452C                            ; ---------------------------------------------------------------------------
0001452C                            
0001452C                            Obj0A:					; XREF: Obj_Index
0001452C 7000                       		moveq	#0,d0
0001452E 1028 0024                  		move.b	$24(a0),d0
00014532 323B 0000                  		move.w	Obj0A_Index(pc,d0.w),d1
00014536 4EFB 1000                  		jmp	Obj0A_Index(pc,d1.w)
0001453A                            ; ===========================================================================
0001453A 0000 0000                  Obj0A_Index:	dc.w Obj0A_Main-Obj0A_Index, Obj0A_Animate-Obj0A_Index
0001453E 0000 0000                  		dc.w Obj0A_ChkWater-Obj0A_Index, Obj0A_Display-Obj0A_Index
00014542 0000 0000                  		dc.w Obj0A_Delete2-Obj0A_Index,	Obj0A_Countdown-Obj0A_Index
00014546 0000 0000                  		dc.w Obj0A_AirLeft-Obj0A_Index,	Obj0A_Display-Obj0A_Index
0001454A 0000                       		dc.w Obj0A_Delete2-Obj0A_Index
0001454C                            ; ===========================================================================
0001454C                            
0001454C                            Obj0A_Main:				; XREF: Obj0A_Index
0001454C 5428 0024                  		addq.b	#2,$24(a0)
00014550 217C 0001 3154 0004        		move.l	#Map_obj64,4(a0)
00014558 317C 8348 0002             		move.w	#$8348,2(a0)
0001455E 117C 0084 0001             		move.b	#$84,1(a0)
00014564 117C 0010 0019             		move.b	#$10,$19(a0)
0001456A 117C 0001 0018             		move.b	#1,$18(a0)
00014570 1028 0028                  		move.b	$28(a0),d0
00014574 6A00                       		bpl.s	loc_13D00
00014576 5028 0024                  		addq.b	#8,$24(a0)
0001457A 217C 0000 0000 0004        		move.l	#Map_obj0A,4(a0)
00014582 317C 0440 0002             		move.w	#$440,2(a0)
00014588 0240 007F                  		andi.w	#$7F,d0
0001458C 1140 0033                  		move.b	d0,$33(a0)
00014590 6000 0000                  		bra.w	Obj0A_Countdown
00014594                            ; ===========================================================================
00014594                            
00014594                            loc_13D00:
00014594 1140 001C                  		move.b	d0,$1C(a0)
00014598 3168 0008 0030             		move.w	8(a0),$30(a0)
0001459E 317C FF78 0012             		move.w	#-$88,$12(a0)
000145A4                            
000145A4                            Obj0A_Animate:				; XREF: Obj0A_Index
000145A4 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
000145AA 4EB9 0000 AE82             		jsr	AnimateSprite
000145B0                            
000145B0                            Obj0A_ChkWater:				; XREF: Obj0A_Index
000145B0 3038 F646                  		move.w	($FFFFF646).w,d0
000145B4 B068 000C                  		cmp.w	$C(a0),d0	; has bubble reached the water surface?
000145B8 6500                       		bcs.s	Obj0A_Wobble	; if not, branch
000145BA 117C 0006 0024             		move.b	#6,$24(a0)
000145C0 5E28 001C                  		addq.b	#7,$1C(a0)
000145C4 0C28 000D 001C             		cmpi.b	#$D,$1C(a0)
000145CA 6700                       		beq.s	Obj0A_Display
000145CC 6000                       		bra.s	Obj0A_Display
000145CE                            ; ===========================================================================
000145CE                            
000145CE                            Obj0A_Wobble:
000145CE 4A38 F7C7                  		tst.b	($FFFFF7C7).w
000145D2 6700                       		beq.s	loc_13D44
000145D4 5868 0030                  		addq.w	#4,$30(a0)
000145D8                            
000145D8                            loc_13D44:
000145D8 1028 0026                  		move.b	$26(a0),d0
000145DC 5228 0026                  		addq.b	#1,$26(a0)
000145E0 0240 007F                  		andi.w	#$7F,d0
000145E4 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
000145EA 1031 0000                  		move.b	(a1,d0.w),d0
000145EE 4880                       		ext.w	d0
000145F0 D068 0030                  		add.w	$30(a0),d0
000145F4 3140 0008                  		move.w	d0,8(a0)
000145F8 6100                       		bsr.s	Obj0A_ShowNumber
000145FA 4EBA 97A0                  		jsr	SpeedToPos
000145FE 4A28 0001                  		tst.b	1(a0)
00014602 6A00                       		bpl.s	Obj0A_Delete
00014604 4EFA 97BC                  		jmp	DisplaySprite
00014608                            ; ===========================================================================
00014608                            
00014608                            Obj0A_Delete:
00014608 4EFA 97F4                  		jmp	DeleteObject
0001460C                            ; ===========================================================================
0001460C                            
0001460C                            Obj0A_Display:				; XREF: Obj0A_Index
0001460C 6100                       		bsr.s	Obj0A_ShowNumber
0001460E 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00014614 4EB9 0000 AE82             		jsr	AnimateSprite
0001461A 4EFA 97A6                  		jmp	DisplaySprite
0001461E                            ; ===========================================================================
0001461E                            
0001461E                            Obj0A_Delete2:				; XREF: Obj0A_Index
0001461E 4EFA 97DE                  		jmp	DeleteObject
00014622                            ; ===========================================================================
00014622                            
00014622                            Obj0A_AirLeft:				; XREF: Obj0A_Index
00014622 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w ; check air remaining
00014628 6200                       		bhi.s	Obj0A_Delete3	; if higher than $C, branch
0001462A 5368 0038                  		subq.w	#1,$38(a0)
0001462E 6600                       		bne.s	Obj0A_Display2
00014630 117C 000E 0024             		move.b	#$E,$24(a0)
00014636 5E28 001C                  		addq.b	#7,$1C(a0)
0001463A 60D0                       		bra.s	Obj0A_Display
0001463C                            ; ===========================================================================
0001463C                            
0001463C                            Obj0A_Display2:
0001463C 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00014642 4EB9 0000 AE82             		jsr	AnimateSprite
00014648 4A28 0001                  		tst.b	1(a0)
0001464C 6A00                       		bpl.s	Obj0A_Delete3
0001464E 4EFA 9772                  		jmp	DisplaySprite
00014652                            ; ===========================================================================
00014652                            
00014652                            Obj0A_Delete3:
00014652 4EFA 97AA                  		jmp	DeleteObject
00014656                            ; ===========================================================================
00014656                            
00014656                            Obj0A_ShowNumber:			; XREF: Obj0A_Wobble; Obj0A_Display
00014656 4A68 0038                  		tst.w	$38(a0)
0001465A 6700                       		beq.s	locret_13E1A
0001465C 5368 0038                  		subq.w	#1,$38(a0)
00014660 6600                       		bne.s	locret_13E1A
00014662 0C28 0007 001C             		cmpi.b	#7,$1C(a0)
00014668 6400                       		bcc.s	locret_13E1A
0001466A 317C 000F 0038             		move.w	#$F,$38(a0)
00014670 4268 0012                  		clr.w	$12(a0)
00014674 117C 0080 0001             		move.b	#$80,1(a0)
0001467A 3028 0008                  		move.w	8(a0),d0
0001467E 9078 F700                  		sub.w	($FFFFF700).w,d0
00014682 0640 0080                  		addi.w	#$80,d0
00014686 3140 0008                  		move.w	d0,8(a0)
0001468A 3028 000C                  		move.w	$C(a0),d0
0001468E 9078 F704                  		sub.w	($FFFFF704).w,d0
00014692 0640 0080                  		addi.w	#$80,d0
00014696 3140 000A                  		move.w	d0,$A(a0)
0001469A 117C 000C 0024             		move.b	#$C,$24(a0)
000146A0                            
000146A0                            locret_13E1A:
000146A0 4E75                       		rts	
000146A2                            ; ===========================================================================
000146A2                            Obj0A_WobbleData:
000146A2 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 2
000146B3 0203 0303 0303 0303 0303+  		dc.b 2,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 3, 3, 4, 3
000146C4 0303 0303 0303 0303 0303+  		dc.b 3,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 2, 2, 2, 2
000146D5 0202 0201 0101 0101 0000+  		dc.b 2,	2, 2, 1, 1, 1, 1, 1, 0,	0, 0, 0, 0, 0, -1, -1
000146E5 FFFF FFFE FEFE FEFE FDFD+  		dc.b -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
000146F2 FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
000146FF FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
0001470C FCFC FCFC FCFD FDFD FDFD+  		dc.b -4, -4, -4, -4, -4, -3, -3, -3, -3, -3, -3, -3, -2
00014719 FEFE FEFE FFFF FFFF FF     		dc.b -2, -2, -2, -2, -1, -1, -1, -1, -1
00014722                            ; ===========================================================================
00014722                            
00014722                            Obj0A_Countdown:			; XREF: Obj0A_Index
00014722 4A68 002C                  		tst.w	$2C(a0)
00014726 6600 0000                  		bne.w	loc_13F86
0001472A 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00014730 6400 0000                  		bcc.w	locret_1408C
00014734 0838 0006 D022             		btst	#6,($FFFFD022).w
0001473A 6700 0000                  		beq.w	locret_1408C
0001473E 5368 0038                  		subq.w	#1,$38(a0)
00014742 6A00 0000                  		bpl.w	loc_13FAC
00014746 317C 003B 0038             		move.w	#59,$38(a0)
0001474C 317C 0001 0036             		move.w	#1,$36(a0)
00014752 4EB9 0000 2C9E             		jsr	(RandomNumber).l
00014758 0240 0001                  		andi.w	#1,d0
0001475C 1140 0034                  		move.b	d0,$34(a0)
00014760 3038 FE14                  		move.w	($FFFFFE14).w,d0 ; check air remaining
00014764 0C40 0019                  		cmpi.w	#$19,d0
00014768 6700                       		beq.s	Obj0A_WarnSound	; play sound if	air is $19
0001476A 0C40 0014                  		cmpi.w	#$14,d0
0001476E 6700                       		beq.s	Obj0A_WarnSound
00014770 0C40 000F                  		cmpi.w	#$F,d0
00014774 6700                       		beq.s	Obj0A_WarnSound
00014776 0C40 000C                  		cmpi.w	#$C,d0
0001477A 6200                       		bhi.s	Obj0A_ReduceAir	; if air is above $C, branch
0001477C 6600                       		bne.s	loc_13F02
0001477E 303C 0092                  		move.w	#$92,d0
00014782 4EB9 0000 15BA             		jsr	(PlaySound).l	; play countdown music
00014788                            
00014788                            loc_13F02:
00014788 5328 0032                  		subq.b	#1,$32(a0)
0001478C 6A00                       		bpl.s	Obj0A_ReduceAir
0001478E 1168 0033 0032             		move.b	$33(a0),$32(a0)
00014794 08E8 0007 0036             		bset	#7,$36(a0)
0001479A 6000                       		bra.s	Obj0A_ReduceAir
0001479C                            ; ===========================================================================
0001479C                            
0001479C                            Obj0A_WarnSound:			; XREF: Obj0A_Countdown
0001479C 303C 00C2                  		move.w	#$C2,d0
000147A0 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play "ding-ding" warning sound
000147A6                            
000147A6                            Obj0A_ReduceAir:
000147A6 5378 FE14                  		subq.w	#1,($FFFFFE14).w ; subtract 1 from air remaining
000147AA 6400 0000                  		bcc.w	Obj0A_GoMakeItem ; if air is above 0, branch
000147AE 6100 0000                  		bsr.w	ResumeMusic
000147B2 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
000147B8 303C 00B2                  		move.w	#$B2,d0
000147BC 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play drowning sound
000147C2 117C 000A 0034             		move.b	#$A,$34(a0)
000147C8 317C 0001 0036             		move.w	#1,$36(a0)
000147CE 317C 0078 002C             		move.w	#$78,$2C(a0)
000147D4 2F08                       		move.l	a0,-(sp)
000147D6 41F8 D000                  		lea	($FFFFD000).w,a0
000147DA 6100 F824                  		bsr.w	Sonic_ResetOnFloor
000147DE 117C 0017 001C             		move.b	#$17,$1C(a0)	; use Sonic's drowning animation
000147E4 08E8 0001 0022             		bset	#1,$22(a0)
000147EA 08E8 0007 0002             		bset	#7,2(a0)
000147F0 317C 0000 0012             		move.w	#0,$12(a0)
000147F6 317C 0000 0010             		move.w	#0,$10(a0)
000147FC 317C 0000 0014             		move.w	#0,$14(a0)
00014802 11FC 0001 F744             		move.b	#1,($FFFFF744).w
00014808 205F                       		movea.l	(sp)+,a0
0001480A 4E75                       		rts	
0001480C                            ; ===========================================================================
0001480C                            
0001480C                            loc_13F86:
0001480C 5368 002C                  		subq.w	#1,$2C(a0)
00014810 6600                       		bne.s	loc_13F94
00014812 11FC 0006 D024             		move.b	#6,($FFFFD024).w
00014818 4E75                       		rts	
0001481A                            ; ===========================================================================
0001481A                            
0001481A                            loc_13F94:
0001481A 2F08                       		move.l	a0,-(sp)
0001481C 41F8 D000                  		lea	($FFFFD000).w,a0
00014820 4EBA 957A                  		jsr	SpeedToPos
00014824 0668 0010 0012             		addi.w	#$10,$12(a0)
0001482A 205F                       		movea.l	(sp)+,a0
0001482C 6000                       		bra.s	loc_13FAC
0001482E                            ; ===========================================================================
0001482E                            
0001482E                            Obj0A_GoMakeItem:			; XREF: Obj0A_ReduceAir
0001482E 6000                       		bra.s	Obj0A_MakeItem
00014830                            ; ===========================================================================
00014830                            
00014830                            loc_13FAC:
00014830 4A68 0036                  		tst.w	$36(a0)
00014834 6700 0000                  		beq.w	locret_1408C
00014838 5368 003A                  		subq.w	#1,$3A(a0)
0001483C 6A00 0000                  		bpl.w	locret_1408C
00014840                            
00014840                            Obj0A_MakeItem:
00014840 4EB9 0000 2C9E             		jsr	(RandomNumber).l
00014846 0240 000F                  		andi.w	#$F,d0
0001484A 3140 003A                  		move.w	d0,$3A(a0)
0001484E 4EBA 99F8                  		jsr	SingleObjLoad
00014852 6600 0000                  		bne.w	locret_1408C
00014856 12BC 000A                  		move.b	#$A,0(a1)	; load object
0001485A 3378 D008 0008             		move.w	($FFFFD008).w,8(a1) ; match X position to Sonic
00014860 7006                       		moveq	#6,d0
00014862 0838 0000 D022             		btst	#0,($FFFFD022).w
00014868 6700                       		beq.s	loc_13FF2
0001486A 4440                       		neg.w	d0
0001486C 137C 0040 0026             		move.b	#$40,$26(a1)
00014872                            
00014872                            loc_13FF2:
00014872 D169 0008                  		add.w	d0,8(a1)
00014876 3378 D00C 000C             		move.w	($FFFFD00C).w,$C(a1)
0001487C 137C 0006 0028             		move.b	#6,$28(a1)
00014882 4A68 002C                  		tst.w	$2C(a0)
00014886 6700 0000                  		beq.w	loc_1403E
0001488A 0268 0007 003A             		andi.w	#7,$3A(a0)
00014890 0668 0000 003A             		addi.w	#0,$3A(a0)
00014896 3038 D00C                  		move.w	($FFFFD00C).w,d0
0001489A 0440 000C                  		subi.w	#$C,d0
0001489E 3340 000C                  		move.w	d0,$C(a1)
000148A2 4EB9 0000 2C9E             		jsr	(RandomNumber).l
000148A8 1340 0026                  		move.b	d0,$26(a1)
000148AC 3038 FE04                  		move.w	($FFFFFE04).w,d0
000148B0 0200 0003                  		andi.b	#3,d0
000148B4 6600                       		bne.s	loc_14082
000148B6 137C 000E 0028             		move.b	#$E,$28(a1)
000148BC 6000                       		bra.s	loc_14082
000148BE                            ; ===========================================================================
000148BE                            
000148BE                            loc_1403E:
000148BE 0828 0007 0036             		btst	#7,$36(a0)
000148C4 6700                       		beq.s	loc_14082
000148C6 3438 FE14                  		move.w	($FFFFFE14).w,d2
000148CA E24A                       		lsr.w	#1,d2
000148CC 4EB9 0000 2C9E             		jsr	(RandomNumber).l
000148D2 0240 0003                  		andi.w	#3,d0
000148D6 6600                       		bne.s	loc_1406A
000148D8 08E8 0006 0036             		bset	#6,$36(a0)
000148DE 6600                       		bne.s	loc_14082
000148E0 1342 0028                  		move.b	d2,$28(a1)
000148E4 337C 001C 0038             		move.w	#$1C,$38(a1)
000148EA                            
000148EA                            loc_1406A:
000148EA 4A28 0034                  		tst.b	$34(a0)
000148EE 6600                       		bne.s	loc_14082
000148F0 08E8 0006 0036             		bset	#6,$36(a0)
000148F6 6600                       		bne.s	loc_14082
000148F8 1342 0028                  		move.b	d2,$28(a1)
000148FC 337C 001C 0038             		move.w	#$1C,$38(a1)
00014902                            
00014902                            loc_14082:
00014902 5328 0034                  		subq.b	#1,$34(a0)
00014906 6A00                       		bpl.s	locret_1408C
00014908 4268 0036                  		clr.w	$36(a0)
0001490C                            
0001490C                            locret_1408C:
0001490C 4E75                       		rts	
0001490E                            
0001490E                            ; ---------------------------------------------------------------------------
0001490E                            ; Subroutine to	play music for LZ/SBZ3 after a countdown
0001490E                            ; ---------------------------------------------------------------------------
0001490E                            
0001490E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001490E                            
0001490E                            
0001490E                            ResumeMusic:				; XREF: Obj64_Wobble; Sonic_Water; Obj0A_ReduceAir
0001490E 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
00014914                             
00014914                            ; Third section of the NineKode - Play correct music after the countdown (if you breathe)
00014914                             
00014914 6200 0000                  		bhi.w	loc_140AC	; change to bhi.w!
00014918                             
00014918 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
0001491E 6600                       		bne.s	Air_GetBgm2	; if not, branch
00014920 43F9 0000 3C3E             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
00014926 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
00014928                             
00014928                            Air_GetBgm2:
00014928 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
0001492E 6600                       		bne.s	Air_GetBgm3	; if not, branch
00014930 43F9 0000 3C46             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
00014936 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
00014938                             
00014938                            Air_GetBgm3:
00014938 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
0001493E 6600                       		bne.s	Air_GetBgm4	; if not, branch
00014940 43F9 0000 3C4C             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 39
00014946 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
00014948                             
00014948                            Air_GetBgm4:
00014948 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
0001494E 6600                       		bne.s	Air_PlayMusic	; if not, branch
00014950 43F9 0000 3C52             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
00014956                             
00014956                            Air_PlayMusic:
00014956 1029 0001                  		move.b	1(a1),d0	; load entry $1 from the playlist
0001495A                             
0001495A                            loc_140A6:
0001495A 4EB9 0000 15BA             		jsr	(PlaySound).l
00014960                             
00014960                            ; NineKode ends here
00014960                            
00014960                            loc_140AC:
00014960 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00014966 4238 D372                  		clr.b	($FFFFD372).w
0001496A 4E75                       		rts	
0001496C                            ; End of function ResumeMusic
0001496C                            
0001496C                            ; ===========================================================================
0001496C                            Ani_obj0A:
0001496C                            	include "_anim\obj0A.asm"
0001496C                            ; ---------------------------------------------------------------------------
0001496C                            ; Animation script - countdown numbers and bubbles (LZ)
0001496C                            ; ---------------------------------------------------------------------------
0001496C 0000                       		dc.w byte_140D6-Ani_obj0A
0001496E 0000                       		dc.w byte_140E0-Ani_obj0A
00014970 0000                       		dc.w byte_140EA-Ani_obj0A
00014972 0000                       		dc.w byte_140F4-Ani_obj0A
00014974 0000                       		dc.w byte_140FE-Ani_obj0A
00014976 0000                       		dc.w byte_14108-Ani_obj0A
00014978 0000                       		dc.w byte_14112-Ani_obj0A
0001497A 0000                       		dc.w byte_14118-Ani_obj0A
0001497C 0000                       		dc.w byte_14120-Ani_obj0A
0001497E 0000                       		dc.w byte_14128-Ani_obj0A
00014980 0000                       		dc.w byte_14130-Ani_obj0A
00014982 0000                       		dc.w byte_14138-Ani_obj0A
00014984 0000                       		dc.w byte_14140-Ani_obj0A
00014986 0000                       		dc.w byte_14148-Ani_obj0A
00014988 0000                       		dc.w byte_1414A-Ani_obj0A
0001498A 0500 0102 0304 090D FC00   byte_140D6:	dc.b 5,	0, 1, 2, 3, 4, 9, $D, $FC, 0
00014994 0500 0102 0304 0C12 FC00   byte_140E0:	dc.b 5,	0, 1, 2, 3, 4, $C, $12,	$FC, 0
0001499E 0500 0102 0304 0C11 FC00   byte_140EA:	dc.b 5,	0, 1, 2, 3, 4, $C, $11,	$FC, 0
000149A8 0500 0102 0304 0B10 FC00   byte_140F4:	dc.b 5,	0, 1, 2, 3, 4, $B, $10,	$FC, 0
000149B2 0500 0102 0304 090F FC00   byte_140FE:	dc.b 5,	0, 1, 2, 3, 4, 9, $F, $FC, 0
000149BC 0500 0102 0304 0A0E FC00   byte_14108:	dc.b 5,	0, 1, 2, 3, 4, $A, $E, $FC, 0
000149C6 0E00 0102 FC00             byte_14112:	dc.b $E, 0, 1, 2, $FC, 0
000149CC 0716 0D16 0D16 0DFC        byte_14118:	dc.b 7,	$16, $D, $16, $D, $16, $D, $FC
000149D4 0716 1216 1216 12FC        byte_14120:	dc.b 7,	$16, $12, $16, $12, $16, $12, $FC
000149DC 0716 1116 1116 11FC        byte_14128:	dc.b 7,	$16, $11, $16, $11, $16, $11, $FC
000149E4 0716 1016 1016 10FC        byte_14130:	dc.b 7,	$16, $10, $16, $10, $16, $10, $FC
000149EC 0716 0F16 0F16 0FFC        byte_14138:	dc.b 7,	$16, $F, $16, $F, $16, $F, $FC
000149F4 0716 0E16 0E16 0EFC        byte_14140:	dc.b 7,	$16, $E, $16, $E, $16, $E, $FC
000149FC 0EFC                       byte_14148:	dc.b $E, $FC
000149FE 0E01 0203 04FC             byte_1414A:	dc.b $E, 1, 2, 3, 4, $FC
00014A04                            		even
00014A04                            		even
00014A04                            
00014A04                            ; ---------------------------------------------------------------------------
00014A04                            ; Sprite mappings - drowning countdown numbers (LZ)
00014A04                            ; ---------------------------------------------------------------------------
00014A04                            Map_obj0A:
00014A04                            	include "_maps\obj0A.asm"
00014A04                            ; ---------------------------------------------------------------------------
00014A04                            ; Sprite mappings - drowning countdown numbers (LZ)
00014A04                            ; ---------------------------------------------------------------------------
00014A04 0000                       		dc.w byte_14152-Map_obj0A
00014A06 01                         byte_14152:	dc.b 1
00014A07 E80E 0000 F2               		dc.b $E8, $E, 0, 0, $F2
00014A0C                            		even
00014A0C                            		even
00014A0C                            
00014A0C                            ; ===========================================================================
00014A0C                            ; ---------------------------------------------------------------------------
00014A0C                            ; Object 38 - shield and invincibility stars
00014A0C                            ; ---------------------------------------------------------------------------
00014A0C                            
00014A0C                            Obj38:					; XREF: Obj_Index
00014A0C 7000                       		moveq	#0,d0
00014A0E 1028 0024                  		move.b	$24(a0),d0
00014A12 323B 0000                  		move.w	Obj38_Index(pc,d0.w),d1
00014A16 4EFB 1000                  		jmp	Obj38_Index(pc,d1.w)
00014A1A                            ; ===========================================================================
00014A1A 0000                       Obj38_Index:	dc.w Obj38_Main-Obj38_Index
00014A1C 0000                       		dc.w Obj38_Shield-Obj38_Index
00014A1E 0000                       		dc.w Obj38_Stars-Obj38_Index
00014A20                            ; ===========================================================================
00014A20                            
00014A20                            Obj38_Main:				; XREF: Obj38_Index
00014A20 5428 0024                  		addq.b	#2,$24(a0)
00014A24 217C 0000 0000 0004        		move.l	#Map_obj38,4(a0)
00014A2C 117C 0004 0001             		move.b	#4,1(a0)
00014A32 117C 0001 0018             		move.b	#1,$18(a0)
00014A38 117C 0010 0019             		move.b	#$10,$19(a0)
00014A3E 4A28 001C                  		tst.b	$1C(a0)		; is object a shield?
00014A42 6600                       		bne.s	Obj38_DoStars	; if not, branch
00014A44 317C 0541 0002             		move.w	#$541,2(a0)	; shield specific code
00014A4A 4E75                       		rts	
00014A4C                            ; ===========================================================================
00014A4C                            
00014A4C                            Obj38_DoStars:
00014A4C 5428 0024                  		addq.b	#2,$24(a0)	; stars	specific code
00014A50 317C 055C 0002             		move.w	#$55C,2(a0)
00014A56 4E75                       		rts	
00014A58                            ; ===========================================================================
00014A58                            
00014A58                            Obj38_Shield:				; XREF: Obj38_Index
00014A58 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00014A5C 6600                       		bne.s	Obj38_RmvShield	; if yes, branch
00014A5E 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have shield?
00014A62 6700                       		beq.s	Obj38_Delete	; if not, branch
00014A64 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
00014A6A 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
00014A70 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00014A76 43F9 0000 0000             		lea	(Ani_obj38).l,a1
00014A7C 4EB9 0000 AE82             		jsr	AnimateSprite
00014A82 4EFA 933E                  		jmp	DisplaySprite
00014A86                            ; ===========================================================================
00014A86                            
00014A86                            Obj38_RmvShield:
00014A86 4E75                       		rts	
00014A88                            ; ===========================================================================
00014A88                            
00014A88                            Obj38_Delete:
00014A88 4EFA 9374                  		jmp	DeleteObject
00014A8C                            ; ===========================================================================
00014A8C                            
00014A8C                            Obj38_Stars:				; XREF: Obj38_Index
00014A8C 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00014A90 6700                       		beq.s	Obj38_Delete2	; if not, branch
00014A92 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00014A96 1228 001C                  		move.b	$1C(a0),d1
00014A9A 5301                       		subq.b	#1,d1
00014A9C 6000                       		bra.s	Obj38_StarTrail
00014A9E                            ; ===========================================================================
00014A9E E909                       		lsl.b	#4,d1
00014AA0 5801                       		addq.b	#4,d1
00014AA2 9001                       		sub.b	d1,d0
00014AA4 1228 0030                  		move.b	$30(a0),d1
00014AA8 9001                       		sub.b	d1,d0
00014AAA 5801                       		addq.b	#4,d1
00014AAC 0201 000F                  		andi.b	#$F,d1
00014AB0 1141 0030                  		move.b	d1,$30(a0)
00014AB4 6000                       		bra.s	Obj38_StarTrail2a
00014AB6                            ; ===========================================================================
00014AB6                            
00014AB6                            Obj38_StarTrail:			; XREF: Obj38_Stars
00014AB6 E709                       		lsl.b	#3,d1
00014AB8 1401                       		move.b	d1,d2
00014ABA D201                       		add.b	d1,d1
00014ABC D202                       		add.b	d2,d1
00014ABE 5801                       		addq.b	#4,d1
00014AC0 9001                       		sub.b	d1,d0
00014AC2 1228 0030                  		move.b	$30(a0),d1
00014AC6 9001                       		sub.b	d1,d0
00014AC8 5801                       		addq.b	#4,d1
00014ACA 0C01 0018                  		cmpi.b	#$18,d1
00014ACE 6500                       		bcs.s	Obj38_StarTrail2
00014AD0 7200                       		moveq	#0,d1
00014AD2                            
00014AD2                            Obj38_StarTrail2:
00014AD2 1141 0030                  		move.b	d1,$30(a0)
00014AD6                            
00014AD6                            Obj38_StarTrail2a:
00014AD6 43F8 CB00                  		lea	($FFFFCB00).w,a1
00014ADA 43F1 0000                  		lea	(a1,d0.w),a1
00014ADE 3159 0008                  		move.w	(a1)+,8(a0)
00014AE2 3159 000C                  		move.w	(a1)+,$C(a0)
00014AE6 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00014AEC 43F9 0000 0000             		lea	(Ani_obj38).l,a1
00014AF2 4EB9 0000 AE82             		jsr	AnimateSprite
00014AF8 4EFA 92C8                  		jmp	DisplaySprite
00014AFC                            ; ===========================================================================
00014AFC                            
00014AFC                            Obj38_Delete2:				; XREF: Obj38_Stars
00014AFC 4EFA 9300                  		jmp	DeleteObject
00014B00                            ; ===========================================================================
00014B00                            ; ---------------------------------------------------------------------------
00014B00                            ; Object 4A - special stage entry from beta
00014B00                            ; ---------------------------------------------------------------------------
00014B00                            
00014B00                            Obj4A:					; XREF: Obj_Index
00014B00 7000                       		moveq	#0,d0
00014B02 1028 0024                  		move.b	$24(a0),d0
00014B06 323B 0000                  		move.w	Obj4A_Index(pc,d0.w),d1
00014B0A 4EFB 1000                  		jmp	Obj4A_Index(pc,d1.w)
00014B0E                            ; ===========================================================================
00014B0E 0000                       Obj4A_Index:	dc.w Obj4A_Main-Obj4A_Index
00014B10 0000                       		dc.w Obj4A_RmvSonic-Obj4A_Index
00014B12 0000                       		dc.w Obj4A_LoadSonic-Obj4A_Index
00014B14                            ; ===========================================================================
00014B14                            
00014B14                            Obj4A_Main:				; XREF: Obj4A_Index
00014B14 4AB8 F680                  		tst.l	($FFFFF680).w	; are pattern load cues	empty?
00014B18 6700                       		beq.s	Obj4A_Main2	; if yes, branch
00014B1A 4E75                       		rts	
00014B1C                            ; ===========================================================================
00014B1C                            
00014B1C                            Obj4A_Main2:
00014B1C 5428 0024                  		addq.b	#2,$24(a0)
00014B20 217C 0000 0000 0004        		move.l	#Map_obj4A,4(a0)
00014B28 117C 0004 0001             		move.b	#4,1(a0)
00014B2E 117C 0001 0018             		move.b	#1,$18(a0)
00014B34 117C 0038 0019             		move.b	#$38,$19(a0)
00014B3A 317C 0541 0002             		move.w	#$541,2(a0)
00014B40 317C 0078 0030             		move.w	#120,$30(a0)	; set time for Sonic's disappearance to 2 seconds
00014B46                            
00014B46                            Obj4A_RmvSonic:				; XREF: Obj4A_Index
00014B46 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
00014B4C 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
00014B52 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00014B58 43F9 0000 0000             		lea	(Ani_obj4A).l,a1
00014B5E 4EB9 0000 AE82             		jsr	AnimateSprite
00014B64 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
00014B6A 6600                       		bne.s	Obj4A_Display
00014B6C 4A38 D000                  		tst.b	($FFFFD000).w
00014B70 6700                       		beq.s	Obj4A_Display
00014B72 11FC 0000 D000             		move.b	#0,($FFFFD000).w ; remove Sonic
00014B78 303C 00A8                  		move.w	#$A8,d0
00014B7C 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play Special Stage "GOAL" sound
00014B82                            
00014B82                            Obj4A_Display:
00014B82 4EFA 923E                  		jmp	DisplaySprite
00014B86                            ; ===========================================================================
00014B86                            
00014B86                            Obj4A_LoadSonic:			; XREF: Obj4A_Index
00014B86 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
00014B8A 6600                       		bne.s	Obj4A_Wait	; if time remains, branch
00014B8C 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00014B92 4EFA 926A                  		jmp	DeleteObject
00014B96                            ; ===========================================================================
00014B96                            
00014B96                            Obj4A_Wait:
00014B96 4E75                       		rts	
00014B98                            ; ===========================================================================
00014B98                            ; ---------------------------------------------------------------------------
00014B98                            ; Object 08 - water splash (LZ)
00014B98                            ; ---------------------------------------------------------------------------
00014B98                            
00014B98                            Obj08:					; XREF: Obj_Index
00014B98 7000                       		moveq	#0,d0
00014B9A 1028 0024                  		move.b	$24(a0),d0
00014B9E 323B 0000                  		move.w	Obj08_Index(pc,d0.w),d1
00014BA2 4EFB 1000                  		jmp	Obj08_Index(pc,d1.w)
00014BA6                            ; ===========================================================================
00014BA6 0000                       Obj08_Index:	dc.w Obj08_Main-Obj08_Index
00014BA8 0000                       		dc.w Obj08_Display-Obj08_Index
00014BAA 0000                       		dc.w Obj08_Delete-Obj08_Index
00014BAC                            ; ===========================================================================
00014BAC                            
00014BAC                            Obj08_Main:				; XREF: Obj08_Index
00014BAC 5428 0024                  		addq.b	#2,$24(a0)
00014BB0 217C 0000 0000 0004        		move.l	#Map_obj08,4(a0)
00014BB8 0028 0004 0001             		ori.b	#4,1(a0)
00014BBE 117C 0001 0018             		move.b	#1,$18(a0)
00014BC4 117C 0010 0019             		move.b	#$10,$19(a0)
00014BCA 317C 4259 0002             		move.w	#$4259,2(a0)
00014BD0 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; copy x-position from Sonic
00014BD6                            
00014BD6                            Obj08_Display:				; XREF: Obj08_Index
00014BD6 3178 F646 000C             		move.w	($FFFFF646).w,$C(a0) ; copy y-position from water height
00014BDC 43F9 0000 0000             		lea	(Ani_obj08).l,a1
00014BE2 4EB9 0000 AE82             		jsr	AnimateSprite
00014BE8 4EFA 91D8                  		jmp	DisplaySprite
00014BEC                            ; ===========================================================================
00014BEC                            
00014BEC                            Obj08_Delete:				; XREF: Obj08_Index
00014BEC 4EFA 9210                  		jmp	DeleteObject	; delete when animation	is complete
00014BF0                            ; ===========================================================================
00014BF0                            Ani_obj38:
00014BF0                            	include "_anim\obj38.asm"
00014BF0                            ; ---------------------------------------------------------------------------
00014BF0                            ; Animation script - shield and invincibility stars
00014BF0                            ; ---------------------------------------------------------------------------
00014BF0 0000                       		dc.w byte_14356-Ani_obj38
00014BF2 0000                       		dc.w byte_1435E-Ani_obj38
00014BF4 0000                       		dc.w byte_14364-Ani_obj38
00014BF6 0000                       		dc.w byte_1437E-Ani_obj38
00014BF8 0000                       		dc.w byte_14398-Ani_obj38
00014BFA 0101 0002 0003 00FF        byte_14356:	dc.b 1,	1, 0, 2, 0, 3, 0, $FF
00014C02 0504 0506 07FF             byte_1435E:	dc.b 5,	4, 5, 6, 7, $FF
00014C08 0004 0400 0404 0005 0500+  byte_14364:	dc.b 0,	4, 4, 0, 4, 4, 0, 5, 5,	0, 5, 5, 0, 6, 6, 0, 6
00014C19 0600 0707 0007 0700 FF     		dc.b 6,	0, 7, 7, 0, 7, 7, 0, $FF
00014C22 0004 0400 0400 0005 0500+  byte_1437E:	dc.b 0,	4, 4, 0, 4, 0, 0, 5, 5,	0, 5, 0, 0, 6, 6, 0, 6
00014C33 0000 0707 0007 0000 FF     		dc.b 0,	0, 7, 7, 0, 7, 0, 0, $FF
00014C3C 0004 0000 0400 0005 0000+  byte_14398:	dc.b 0,	4, 0, 0, 4, 0, 0, 5, 0,	0, 5, 0, 0, 6, 0, 0, 6
00014C4D 0000 0700 0007 0000 FF     		dc.b 0,	0, 7, 0, 0, 7, 0, 0, $FF
00014C56                            		even
00014C56                            		even
00014C56                            
00014C56                            ; ---------------------------------------------------------------------------
00014C56                            ; Sprite mappings - shield and invincibility stars
00014C56                            ; ---------------------------------------------------------------------------
00014C56                            Map_obj38:
00014C56                            	include "_maps\obj38.asm"
00014C56                            ; ---------------------------------------------------------------------------
00014C56                            ; Sprite mappings - shield and invincibility stars
00014C56                            ; ---------------------------------------------------------------------------
00014C56 0000 0000                  		dc.w byte_143CD-Map_obj38, byte_143C2-Map_obj38
00014C5A 0000 0000                  		dc.w byte_143D7-Map_obj38, byte_143EC-Map_obj38
00014C5E 0000 0000                  		dc.w byte_14401-Map_obj38, byte_14416-Map_obj38
00014C62 0000 0000                  		dc.w byte_1442B-Map_obj38, byte_14440-Map_obj38
00014C66 04                         byte_143C2:	dc.b 4
00014C67 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00014C6C E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
00014C71 000A 1000 E8               byte_143CD:	dc.b 0,	$A, $10, 0, $E8
00014C76 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
00014C7B 04                         byte_143D7:	dc.b 4
00014C7C E80A 0812 E9               		dc.b $E8, $A, 8, $12, $E9
00014C81 E80A 0012 00               		dc.b $E8, $A, 0, $12, 0
00014C86 000A 1812 E9               		dc.b 0,	$A, $18, $12, $E9
00014C8B 000A 1012 00               		dc.b 0,	$A, $10, $12, 0
00014C90 04                         byte_143EC:	dc.b 4
00014C91 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
00014C96 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00014C9B 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
00014CA0 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00014CA5 04                         byte_14401:	dc.b 4
00014CA6 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00014CAB E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
00014CB0 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
00014CB5 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00014CBA 04                         byte_14416:	dc.b 4
00014CBB E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
00014CC0 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00014CC5 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00014CCA 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
00014CCF 04                         byte_1442B:	dc.b 4
00014CD0 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00014CD5 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00014CDA 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00014CDF 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
00014CE4 04                         byte_14440:	dc.b 4
00014CE5 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
00014CEA E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00014CEF 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00014CF4 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
00014CFA 00                         		even
00014CFA 00                         		even
00014CFA                            
00014CFA                            Ani_obj4A:
00014CFA                            	include "_anim\obj4A.asm"
00014CFA                            ; ---------------------------------------------------------------------------
00014CFA                            ; Animation script - special stage entry effect from beta
00014CFA                            ; ---------------------------------------------------------------------------
00014CFA 0000                       		dc.w byte_14458-Ani_obj4A
00014CFC 0500 0100 0100 0701 0702+  byte_14458:	dc.b 5,	0, 1, 0, 1, 0, 7, 1, 7,	2, 7, 3, 7, 4, 7, 5, 7, 6, 7, $FC
00014D10                            		even
00014D10                            		even
00014D10                            
00014D10                            ; ---------------------------------------------------------------------------
00014D10                            ; Sprite mappings - special stage entry	from beta
00014D10                            ; ---------------------------------------------------------------------------
00014D10                            Map_obj4A:
00014D10                            	include "_maps\obj4A.asm"
00014D10                            ; ---------------------------------------------------------------------------
00014D10                            ; Sprite mappings - special stage entry	from beta
00014D10                            ; ---------------------------------------------------------------------------
00014D10 0000 0000                  		dc.w byte_1447C-Map_obj4A, byte_1448C-Map_obj4A
00014D14 0000 0000                  		dc.w byte_1449C-Map_obj4A, byte_144B6-Map_obj4A
00014D18 0000 0000                  		dc.w byte_144E4-Map_obj4A, byte_1453F-Map_obj4A
00014D1C 0000 0000                  		dc.w byte_14595-Map_obj4A, byte_145BF-Map_obj4A
00014D20 03                         byte_1447C:	dc.b 3
00014D21 F800 0000 08               		dc.b $F8, 0, 0,	0, 8
00014D26 0004 0001 00               		dc.b 0,	4, 0, 1, 0
00014D2B 0800 1000 08               		dc.b 8,	0, $10,	0, 8
00014D30 03                         byte_1448C:	dc.b 3
00014D31 F00D 0003 F0               		dc.b $F0, $D, 0, 3, $F0
00014D36 000C 000B F0               		dc.b 0,	$C, 0, $B, $F0
00014D3B 080D 1003 F0               		dc.b 8,	$D, $10, 3, $F0
00014D40 05                         byte_1449C:	dc.b 5
00014D41 E40E 000F F4               		dc.b $E4, $E, 0, $F, $F4
00014D46 EC02 001B EC               		dc.b $EC, 2, 0,	$1B, $EC
00014D4B FC0C 001E F4               		dc.b $FC, $C, 0, $1E, $F4
00014D50 040E 100F F4               		dc.b 4,	$E, $10, $F, $F4
00014D55 0401 101B EC               		dc.b 4,	1, $10,	$1B, $EC
00014D5A 09                         byte_144B6:	dc.b 9
00014D5B F008 0022 F8               		dc.b $F0, 8, 0,	$22, $F8
00014D60 F80E 0025 F0               		dc.b $F8, $E, 0, $25, $F0
00014D65 1008 0031 F0               		dc.b $10, 8, 0,	$31, $F0
00014D6A 0005 0034 10               		dc.b 0,	5, 0, $34, $10
00014D6F F800 0825 10               		dc.b $F8, 0, 8,	$25, $10
00014D74 F000 1836 18               		dc.b $F0, 0, $18, $36, $18
00014D79 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00014D7E 0000 0825 28               		dc.b 0,	0, 8, $25, $28
00014D83 F800 0025 30               		dc.b $F8, 0, 0,	$25, $30
00014D88 12                         byte_144E4:	dc.b $12
00014D89 0000 1825 F0               		dc.b 0,	0, $18,	$25, $F0
00014D8E F804 0038 F8               		dc.b $F8, 4, 0,	$38, $F8
00014D93 F000 0026 08               		dc.b $F0, 0, 0,	$26, 8
00014D98 0000 0025 00               		dc.b 0,	0, 0, $25, 0
00014D9D 0800 1825 F8               		dc.b 8,	0, $18,	$25, $F8
00014DA2 1000 1026 00               		dc.b $10, 0, $10, $26, 0
00014DA7 0800 1038 08               		dc.b 8,	0, $10,	$38, 8
00014DAC F800 0029 10               		dc.b $F8, 0, 0,	$29, $10
00014DB1 0000 0026 10               		dc.b 0,	0, 0, $26, $10
00014DB6 0000 002D 18               		dc.b 0,	0, 0, $2D, $18
00014DBB 0800 0826 18               		dc.b 8,	0, 8, $26, $18
00014DC0 0800 0029 20               		dc.b 8,	0, 0, $29, $20
00014DC5 F800 0026 20               		dc.b $F8, 0, 0,	$26, $20
00014DCA F800 002D 28               		dc.b $F8, 0, 0,	$2D, $28
00014DCF 0000 003A 28               		dc.b 0,	0, 0, $3A, $28
00014DD4 F800 1826 30               		dc.b $F8, 0, $18, $26, $30
00014DD9 0000 1025 38               		dc.b 0,	0, $10,	$25, $38
00014DDE F800 1025 40               		dc.b $F8, 0, $10, $25, $40
00014DE3 11                         byte_1453F:	dc.b $11
00014DE4 F800 0825 00               		dc.b $F8, 0, 8,	$25, 0
00014DE9 F000 0038 10               		dc.b $F0, 0, 0,	$38, $10
00014DEE 1000 0825 00               		dc.b $10, 0, 8,	$25, 0
00014DF3 0000 1825 10               		dc.b 0,	0, $18,	$25, $10
00014DF8 0800 1025 18               		dc.b 8,	0, $10,	$25, $18
00014DFD F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00014E02 0000 1026 28               		dc.b 0,	0, $10,	$26, $28
00014E07 F800 1025 30               		dc.b $F8, 0, $10, $25, $30
00014E0C 0000 0025 30               		dc.b 0,	0, 0, $25, $30
00014E11 0800 0825 30               		dc.b 8,	0, 8, $25, $30
00014E16 0000 0826 38               		dc.b 0,	0, 8, $26, $38
00014E1B 0800 0029 38               		dc.b 8,	0, 0, $29, $38
00014E20 F800 0826 40               		dc.b $F8, 0, 8,	$26, $40
00014E25 0000 002D 40               		dc.b 0,	0, 0, $2D, $40
00014E2A F800 0825 48               		dc.b $F8, 0, 8,	$25, $48
00014E2F 0000 0025 48               		dc.b 0,	0, 0, $25, $48
00014E34 0000 1025 50               		dc.b 0,	0, $10,	$25, $50
00014E39 09                         byte_14595:	dc.b 9
00014E3A FC00 0826 30               		dc.b $FC, 0, 8,	$26, $30
00014E3F 0400 0825 28               		dc.b 4,	0, 8, $25, $28
00014E44 0400 1027 38               		dc.b 4,	0, $10,	$27, $38
00014E49 0400 0826 40               		dc.b 4,	0, 8, $26, $40
00014E4E FC00 1025 40               		dc.b $FC, 0, $10, $25, $40
00014E53 FC00 1026 48               		dc.b $FC, 0, $10, $26, $48
00014E58 0C00 0827 48               		dc.b $C, 0, 8, $27, $48
00014E5D 0400 1826 50               		dc.b 4,	0, $18,	$26, $50
00014E62 04                         		dc.b 4
00014E63 0008 2758 00               byte_145BF:	dc.b 0,	8, $27,	$58, 0
00014E68                            		even
00014E68                            		even
00014E68                            
00014E68                            Ani_obj08:
00014E68                            	include "_anim\obj08.asm"
00014E68                            ; ---------------------------------------------------------------------------
00014E68                            ; Animation script - water splash (LZ)
00014E68                            ; ---------------------------------------------------------------------------
00014E68 0000                       		dc.w byte_145C6-Ani_obj08
00014E6A 0400 0102 FC00             byte_145C6:	dc.b 4,	0, 1, 2, $FC, 0
00014E70                            		even
00014E70                            		even
00014E70                            
00014E70                            ; ---------------------------------------------------------------------------
00014E70                            ; Sprite mappings - water splash (LZ)
00014E70                            ; ---------------------------------------------------------------------------
00014E70                            Map_obj08:
00014E70                            	include "_maps\obj08.asm"
00014E70                            ; ---------------------------------------------------------------------------
00014E70                            ; Sprite mappings - water splash (LZ)
00014E70                            ; ---------------------------------------------------------------------------
00014E70 0000                       		dc.w byte_145D2-Map_obj08
00014E72 0000                       		dc.w byte_145DD-Map_obj08
00014E74 0000                       		dc.w byte_145E8-Map_obj08
00014E76 02                         byte_145D2:	dc.b 2
00014E77 F204 006D F8               		dc.b $F2, 4, 0,	$6D, $F8
00014E7C FA0C 006F F0               		dc.b $FA, $C, 0, $6F, $F0
00014E81 02                         byte_145DD:	dc.b 2
00014E82 E200 0073 F8               		dc.b $E2, 0, 0,	$73, $F8
00014E87 EA0E 0074 F0               		dc.b $EA, $E, 0, $74, $F0
00014E8C 01                         byte_145E8:	dc.b 1
00014E8D E20F 0080 F0               		dc.b $E2, $F, 0, $80, $F0
00014E92                            		even
00014E92                            		even
00014E92                            
00014E92                            ; ---------------------------------------------------------------------------
00014E92                            ; Subroutine to	change Sonic's angle & position as he walks along the floor
00014E92                            ; ---------------------------------------------------------------------------
00014E92                            
00014E92                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014E92                            
00014E92                            
00014E92                            Sonic_AnglePos:				; XREF: Obj01_MdNormal; Obj01_MdRoll
00014E92 0828 0003 0022             		btst	#3,$22(a0)
00014E98 6700                       		beq.s	loc_14602
00014E9A 7000                       		moveq	#0,d0
00014E9C 11C0 F768                  		move.b	d0,($FFFFF768).w
00014EA0 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00014EA4 4E75                       		rts	
00014EA6                            ; ===========================================================================
00014EA6                            
00014EA6                            loc_14602:
00014EA6 7003                       		moveq	#3,d0
00014EA8 11C0 F768                  		move.b	d0,($FFFFF768).w
00014EAC 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00014EB0 1028 0026                  		move.b	$26(a0),d0
00014EB4 0600 0020                  		addi.b	#$20,d0
00014EB8 6A00                       		bpl.s	loc_14624
00014EBA 1028 0026                  		move.b	$26(a0),d0
00014EBE 6A00                       		bpl.s	loc_1461E
00014EC0 5300                       		subq.b	#1,d0
00014EC2                            
00014EC2                            loc_1461E:
00014EC2 0600 0020                  		addi.b	#$20,d0
00014EC6 6000                       		bra.s	loc_14630
00014EC8                            ; ===========================================================================
00014EC8                            
00014EC8                            loc_14624:
00014EC8 1028 0026                  		move.b	$26(a0),d0
00014ECC 6A00                       		bpl.s	loc_1462C
00014ECE 5200                       		addq.b	#1,d0
00014ED0                            
00014ED0                            loc_1462C:
00014ED0 0600 001F                  		addi.b	#$1F,d0
00014ED4                            
00014ED4                            loc_14630:
00014ED4 0200 00C0                  		andi.b	#$C0,d0
00014ED8 0C00 0040                  		cmpi.b	#$40,d0
00014EDC 6700 0000                  		beq.w	Sonic_WalkVertL
00014EE0 0C00 0080                  		cmpi.b	#$80,d0
00014EE4 6700 0000                  		beq.w	Sonic_WalkCeiling
00014EE8 0C00 00C0                  		cmpi.b	#$C0,d0
00014EEC 6700 0000                  		beq.w	Sonic_WalkVertR
00014EF0 3428 000C                  		move.w	$C(a0),d2
00014EF4 3628 0008                  		move.w	8(a0),d3
00014EF8 7000                       		moveq	#0,d0
00014EFA 1028 0016                  		move.b	$16(a0),d0
00014EFE 4880                       		ext.w	d0
00014F00 D440                       		add.w	d0,d2
00014F02 1028 0017                  		move.b	$17(a0),d0
00014F06 4880                       		ext.w	d0
00014F08 D640                       		add.w	d0,d3
00014F0A 49F8 F768                  		lea	($FFFFF768).w,a4
00014F0E 367C 0010                  		movea.w	#$10,a3
00014F12 3C3C 0000                  		move.w	#0,d6
00014F16 7A0D                       		moveq	#$D,d5
00014F18 6100 0000                  		bsr.w	FindFloor
00014F1C 3F01                       		move.w	d1,-(sp)
00014F1E 3428 000C                  		move.w	$C(a0),d2
00014F22 3628 0008                  		move.w	8(a0),d3
00014F26 7000                       		moveq	#0,d0
00014F28 1028 0016                  		move.b	$16(a0),d0
00014F2C 4880                       		ext.w	d0
00014F2E D440                       		add.w	d0,d2
00014F30 1028 0017                  		move.b	$17(a0),d0
00014F34 4880                       		ext.w	d0
00014F36 4440                       		neg.w	d0
00014F38 D640                       		add.w	d0,d3
00014F3A 49F8 F76A                  		lea	($FFFFF76A).w,a4
00014F3E 367C 0010                  		movea.w	#$10,a3
00014F42 3C3C 0000                  		move.w	#0,d6
00014F46 7A0D                       		moveq	#$D,d5
00014F48 6100 0000                  		bsr.w	FindFloor
00014F4C 301F                       		move.w	(sp)+,d0
00014F4E 6100 0000                  		bsr.w	Sonic_Angle
00014F52 4A41                       		tst.w	d1
00014F54 6700                       		beq.s	locret_146BE
00014F56 6A00                       		bpl.s	loc_146C0
00014F58 0C41 FFF2                  		cmpi.w	#-$E,d1
00014F5C 6D00                       		blt.s	locret_146E6
00014F5E D368 000C                  		add.w	d1,$C(a0)
00014F62                            
00014F62                            locret_146BE:
00014F62 4E75                       		rts	
00014F64                            ; ===========================================================================
00014F64                            
00014F64                            loc_146C0:
00014F64 0C41 000E                  		cmpi.w	#$E,d1
00014F68 6E00                       		bgt.s	loc_146CC
00014F6A                            
00014F6A                            loc_146C6:
00014F6A D368 000C                  		add.w	d1,$C(a0)
00014F6E 4E75                       		rts	
00014F70                            ; ===========================================================================
00014F70                            
00014F70                            loc_146CC:
00014F70 4A28 0038                  		tst.b	$38(a0)
00014F74 66F4                       		bne.s	loc_146C6
00014F76 08E8 0001 0022             		bset	#1,$22(a0)
00014F7C 08A8 0005 0022             		bclr	#5,$22(a0)
00014F82 117C 0001 001D             		move.b	#1,$1D(a0)
00014F88 4E75                       		rts	
00014F8A                            ; ===========================================================================
00014F8A                            
00014F8A                            locret_146E6:
00014F8A 4E75                       		rts	
00014F8C                            ; End of function Sonic_AnglePos
00014F8C                            
00014F8C                            ; ===========================================================================
00014F8C 2428 0008                  		move.l	8(a0),d2
00014F90 3028 0010                  		move.w	$10(a0),d0
00014F94 48C0                       		ext.l	d0
00014F96 E180                       		asl.l	#8,d0
00014F98 9480                       		sub.l	d0,d2
00014F9A 2142 0008                  		move.l	d2,8(a0)
00014F9E 303C 0038                  		move.w	#$38,d0
00014FA2 48C0                       		ext.l	d0
00014FA4 E180                       		asl.l	#8,d0
00014FA6 9680                       		sub.l	d0,d3
00014FA8 2143 000C                  		move.l	d3,$C(a0)
00014FAC 4E75                       		rts	
00014FAE                            ; ===========================================================================
00014FAE                            
00014FAE                            locret_1470A:
00014FAE 4E75                       		rts	
00014FB0                            ; ===========================================================================
00014FB0 2628 000C                  		move.l	$C(a0),d3
00014FB4 3028 0012                  		move.w	$12(a0),d0
00014FB8 0440 0038                  		subi.w	#$38,d0
00014FBC 3140 0012                  		move.w	d0,$12(a0)
00014FC0 48C0                       		ext.l	d0
00014FC2 E180                       		asl.l	#8,d0
00014FC4 9680                       		sub.l	d0,d3
00014FC6 2143 000C                  		move.l	d3,$C(a0)
00014FCA 4E75                       		rts	
00014FCC 4E75                       		rts	
00014FCE                            ; ===========================================================================
00014FCE 2428 0008                  		move.l	8(a0),d2
00014FD2 2628 000C                  		move.l	$C(a0),d3
00014FD6 3028 0010                  		move.w	$10(a0),d0
00014FDA 48C0                       		ext.l	d0
00014FDC E180                       		asl.l	#8,d0
00014FDE 9480                       		sub.l	d0,d2
00014FE0 3028 0012                  		move.w	$12(a0),d0
00014FE4 48C0                       		ext.l	d0
00014FE6 E180                       		asl.l	#8,d0
00014FE8 9680                       		sub.l	d0,d3
00014FEA 2142 0008                  		move.l	d2,8(a0)
00014FEE 2143 000C                  		move.l	d3,$C(a0)
00014FF2 4E75                       		rts	
00014FF4                            
00014FF4                            ; ---------------------------------------------------------------------------
00014FF4                            ; Subroutine to	change Sonic's angle as he walks along the floor
00014FF4                            ; ---------------------------------------------------------------------------
00014FF4                            
00014FF4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014FF4                            
00014FF4                            
00014FF4                            Sonic_Angle:				; XREF: Sonic_AnglePos; et al
00014FF4 1438 F76A                  		move.b	($FFFFF76A).w,d2
00014FF8 B240                       		cmp.w	d0,d1
00014FFA 6F00                       		ble.s	loc_1475E
00014FFC 1438 F768                  		move.b	($FFFFF768).w,d2
00015000 3200                       		move.w	d0,d1
00015002                            
00015002                            loc_1475E:
00015002 0802 0000                  		btst	#0,d2
00015006 6600                       		bne.s	loc_1476A
00015008 1142 0026                  		move.b	d2,$26(a0)
0001500C 4E75                       		rts	
0001500E                            ; ===========================================================================
0001500E                            
0001500E                            loc_1476A:
0001500E 1428 0026                  		move.b	$26(a0),d2
00015012 0602 0020                  		addi.b	#$20,d2
00015016 0202 00C0                  		andi.b	#$C0,d2
0001501A 1142 0026                  		move.b	d2,$26(a0)
0001501E 4E75                       		rts	
00015020                            ; End of function Sonic_Angle
00015020                            
00015020                            ; ---------------------------------------------------------------------------
00015020                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his right
00015020                            ; ---------------------------------------------------------------------------
00015020                            
00015020                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015020                            
00015020                            
00015020                            Sonic_WalkVertR:			; XREF: Sonic_AnglePos
00015020 3428 000C                  		move.w	$C(a0),d2
00015024 3628 0008                  		move.w	8(a0),d3
00015028 7000                       		moveq	#0,d0
0001502A 1028 0017                  		move.b	$17(a0),d0
0001502E 4880                       		ext.w	d0
00015030 4440                       		neg.w	d0
00015032 D440                       		add.w	d0,d2
00015034 1028 0016                  		move.b	$16(a0),d0
00015038 4880                       		ext.w	d0
0001503A D640                       		add.w	d0,d3
0001503C 49F8 F768                  		lea	($FFFFF768).w,a4
00015040 367C 0010                  		movea.w	#$10,a3
00015044 3C3C 0000                  		move.w	#0,d6
00015048 7A0D                       		moveq	#$D,d5
0001504A 6100 0000                  		bsr.w	FindWall
0001504E 3F01                       		move.w	d1,-(sp)
00015050 3428 000C                  		move.w	$C(a0),d2
00015054 3628 0008                  		move.w	8(a0),d3
00015058 7000                       		moveq	#0,d0
0001505A 1028 0017                  		move.b	$17(a0),d0
0001505E 4880                       		ext.w	d0
00015060 D440                       		add.w	d0,d2
00015062 1028 0016                  		move.b	$16(a0),d0
00015066 4880                       		ext.w	d0
00015068 D640                       		add.w	d0,d3
0001506A 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001506E 367C 0010                  		movea.w	#$10,a3
00015072 3C3C 0000                  		move.w	#0,d6
00015076 7A0D                       		moveq	#$D,d5
00015078 6100 0000                  		bsr.w	FindWall
0001507C 301F                       		move.w	(sp)+,d0
0001507E 6100 FF74                  		bsr.w	Sonic_Angle
00015082 4A41                       		tst.w	d1
00015084 6700                       		beq.s	locret_147F0
00015086 6A00                       		bpl.s	loc_147F2
00015088 0C41 FFF2                  		cmpi.w	#-$E,d1
0001508C 6D00 FF20                  		blt.w	locret_1470A
00015090 D368 0008                  		add.w	d1,8(a0)
00015094                            
00015094                            locret_147F0:
00015094 4E75                       		rts	
00015096                            ; ===========================================================================
00015096                            
00015096                            loc_147F2:
00015096 0C41 000E                  		cmpi.w	#$E,d1
0001509A 6E00                       		bgt.s	loc_147FE
0001509C                            
0001509C                            loc_147F8:
0001509C D368 0008                  		add.w	d1,8(a0)
000150A0 4E75                       		rts	
000150A2                            ; ===========================================================================
000150A2                            
000150A2                            loc_147FE:
000150A2 4A28 0038                  		tst.b	$38(a0)
000150A6 66F4                       		bne.s	loc_147F8
000150A8 08E8 0001 0022             		bset	#1,$22(a0)
000150AE 08A8 0005 0022             		bclr	#5,$22(a0)
000150B4 117C 0001 001D             		move.b	#1,$1D(a0)
000150BA 4E75                       		rts	
000150BC                            ; End of function Sonic_WalkVertR
000150BC                            
000150BC                            ; ---------------------------------------------------------------------------
000150BC                            ; Subroutine allowing Sonic to walk upside-down
000150BC                            ; ---------------------------------------------------------------------------
000150BC                            
000150BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000150BC                            
000150BC                            
000150BC                            Sonic_WalkCeiling:			; XREF: Sonic_AnglePos
000150BC 3428 000C                  		move.w	$C(a0),d2
000150C0 3628 0008                  		move.w	8(a0),d3
000150C4 7000                       		moveq	#0,d0
000150C6 1028 0016                  		move.b	$16(a0),d0
000150CA 4880                       		ext.w	d0
000150CC 9440                       		sub.w	d0,d2
000150CE 0A42 000F                  		eori.w	#$F,d2
000150D2 1028 0017                  		move.b	$17(a0),d0
000150D6 4880                       		ext.w	d0
000150D8 D640                       		add.w	d0,d3
000150DA 49F8 F768                  		lea	($FFFFF768).w,a4
000150DE 367C FFF0                  		movea.w	#-$10,a3
000150E2 3C3C 1000                  		move.w	#$1000,d6
000150E6 7A0D                       		moveq	#$D,d5
000150E8 6100 0000                  		bsr.w	FindFloor
000150EC 3F01                       		move.w	d1,-(sp)
000150EE 3428 000C                  		move.w	$C(a0),d2
000150F2 3628 0008                  		move.w	8(a0),d3
000150F6 7000                       		moveq	#0,d0
000150F8 1028 0016                  		move.b	$16(a0),d0
000150FC 4880                       		ext.w	d0
000150FE 9440                       		sub.w	d0,d2
00015100 0A42 000F                  		eori.w	#$F,d2
00015104 1028 0017                  		move.b	$17(a0),d0
00015108 4880                       		ext.w	d0
0001510A 9640                       		sub.w	d0,d3
0001510C 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015110 367C FFF0                  		movea.w	#-$10,a3
00015114 3C3C 1000                  		move.w	#$1000,d6
00015118 7A0D                       		moveq	#$D,d5
0001511A 6100 0000                  		bsr.w	FindFloor
0001511E 301F                       		move.w	(sp)+,d0
00015120 6100 FED2                  		bsr.w	Sonic_Angle
00015124 4A41                       		tst.w	d1
00015126 6700                       		beq.s	locret_14892
00015128 6A00                       		bpl.s	loc_14894
0001512A 0C41 FFF2                  		cmpi.w	#-$E,d1
0001512E 6D00 FE5A                  		blt.w	locret_146E6
00015132 9368 000C                  		sub.w	d1,$C(a0)
00015136                            
00015136                            locret_14892:
00015136 4E75                       		rts	
00015138                            ; ===========================================================================
00015138                            
00015138                            loc_14894:
00015138 0C41 000E                  		cmpi.w	#$E,d1
0001513C 6E00                       		bgt.s	loc_148A0
0001513E                            
0001513E                            loc_1489A:
0001513E 9368 000C                  		sub.w	d1,$C(a0)
00015142 4E75                       		rts	
00015144                            ; ===========================================================================
00015144                            
00015144                            loc_148A0:
00015144 4A28 0038                  		tst.b	$38(a0)
00015148 66F4                       		bne.s	loc_1489A
0001514A 08E8 0001 0022             		bset	#1,$22(a0)
00015150 08A8 0005 0022             		bclr	#5,$22(a0)
00015156 117C 0001 001D             		move.b	#1,$1D(a0)
0001515C 4E75                       		rts	
0001515E                            ; End of function Sonic_WalkCeiling
0001515E                            
0001515E                            ; ---------------------------------------------------------------------------
0001515E                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his left
0001515E                            ; ---------------------------------------------------------------------------
0001515E                            
0001515E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001515E                            
0001515E                            
0001515E                            Sonic_WalkVertL:			; XREF: Sonic_AnglePos
0001515E 3428 000C                  		move.w	$C(a0),d2
00015162 3628 0008                  		move.w	8(a0),d3
00015166 7000                       		moveq	#0,d0
00015168 1028 0017                  		move.b	$17(a0),d0
0001516C 4880                       		ext.w	d0
0001516E 9440                       		sub.w	d0,d2
00015170 1028 0016                  		move.b	$16(a0),d0
00015174 4880                       		ext.w	d0
00015176 9640                       		sub.w	d0,d3
00015178 0A43 000F                  		eori.w	#$F,d3
0001517C 49F8 F768                  		lea	($FFFFF768).w,a4
00015180 367C FFF0                  		movea.w	#-$10,a3
00015184 3C3C 0800                  		move.w	#$800,d6
00015188 7A0D                       		moveq	#$D,d5
0001518A 6100 0000                  		bsr.w	FindWall
0001518E 3F01                       		move.w	d1,-(sp)
00015190 3428 000C                  		move.w	$C(a0),d2
00015194 3628 0008                  		move.w	8(a0),d3
00015198 7000                       		moveq	#0,d0
0001519A 1028 0017                  		move.b	$17(a0),d0
0001519E 4880                       		ext.w	d0
000151A0 D440                       		add.w	d0,d2
000151A2 1028 0016                  		move.b	$16(a0),d0
000151A6 4880                       		ext.w	d0
000151A8 9640                       		sub.w	d0,d3
000151AA 0A43 000F                  		eori.w	#$F,d3
000151AE 49F8 F76A                  		lea	($FFFFF76A).w,a4
000151B2 367C FFF0                  		movea.w	#-$10,a3
000151B6 3C3C 0800                  		move.w	#$800,d6
000151BA 7A0D                       		moveq	#$D,d5
000151BC 6100 0000                  		bsr.w	FindWall
000151C0 301F                       		move.w	(sp)+,d0
000151C2 6100 FE30                  		bsr.w	Sonic_Angle
000151C6 4A41                       		tst.w	d1
000151C8 6700                       		beq.s	locret_14934
000151CA 6A00                       		bpl.s	loc_14936
000151CC 0C41 FFF2                  		cmpi.w	#-$E,d1
000151D0 6D00 FDDC                  		blt.w	locret_1470A
000151D4 9368 0008                  		sub.w	d1,8(a0)
000151D8                            
000151D8                            locret_14934:
000151D8 4E75                       		rts	
000151DA                            ; ===========================================================================
000151DA                            
000151DA                            loc_14936:
000151DA 0C41 000E                  		cmpi.w	#$E,d1
000151DE 6E00                       		bgt.s	loc_14942
000151E0                            
000151E0                            loc_1493C:
000151E0 9368 0008                  		sub.w	d1,8(a0)
000151E4 4E75                       		rts	
000151E6                            ; ===========================================================================
000151E6                            
000151E6                            loc_14942:
000151E6 4A28 0038                  		tst.b	$38(a0)
000151EA 66F4                       		bne.s	loc_1493C
000151EC 08E8 0001 0022             		bset	#1,$22(a0)
000151F2 08A8 0005 0022             		bclr	#5,$22(a0)
000151F8 117C 0001 001D             		move.b	#1,$1D(a0)
000151FE 4E75                       		rts	
00015200                            ; End of function Sonic_WalkVertL
00015200                            
00015200                            ; ---------------------------------------------------------------------------
00015200                            ; Subroutine to	find which tile	the object is standing on
00015200                            ; ---------------------------------------------------------------------------
00015200                            
00015200                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015200                            
00015200                            
00015200                            Floor_ChkTile:				; XREF: FindFloor; et al
00015200 3002                       		move.w	d2,d0
00015202 E248                       		lsr.w	#1,d0
00015204 0240 0380                  		andi.w	#$380,d0
00015208 3203                       		move.w	d3,d1
0001520A E049                       		lsr.w	#8,d1
0001520C 0241 007F                  		andi.w	#$7F,d1
00015210 D041                       		add.w	d1,d0
00015212 72FF                       		moveq	#-1,d1
00015214 43F8 A400                  		lea	($FFFFA400).w,a1
00015218 1231 0000                  		move.b	(a1,d0.w),d1
0001521C 6700                       		beq.s	loc_14996
0001521E 6B00                       		bmi.s	loc_1499A
00015220 5301                       		subq.b	#1,d1
00015222 4881                       		ext.w	d1
00015224 EE59                       		ror.w	#7,d1
00015226 3002                       		move.w	d2,d0
00015228 D040                       		add.w	d0,d0
0001522A 0240 01E0                  		andi.w	#$1E0,d0
0001522E D240                       		add.w	d0,d1
00015230 3003                       		move.w	d3,d0
00015232 E648                       		lsr.w	#3,d0
00015234 0240 001E                  		andi.w	#$1E,d0
00015238 D240                       		add.w	d0,d1
0001523A                            
0001523A                            loc_14996:
0001523A 2241                       		movea.l	d1,a1
0001523C 4E75                       		rts	
0001523E                            ; ===========================================================================
0001523E                            
0001523E                            loc_1499A:
0001523E 0241 007F                  		andi.w	#$7F,d1
00015242 0828 0006 0001             		btst	#6,1(a0)
00015248 6700                       		beq.s	loc_149B2
0001524A 5241                       		addq.w	#1,d1
0001524C 0C41 0029                  		cmpi.w	#$29,d1
00015250 6600                       		bne.s	loc_149B2
00015252 323C 0051                  		move.w	#$51,d1
00015256                            
00015256                            loc_149B2:
00015256 5301                       		subq.b	#1,d1
00015258 EE59                       		ror.w	#7,d1
0001525A 3002                       		move.w	d2,d0
0001525C D040                       		add.w	d0,d0
0001525E 0240 01E0                  		andi.w	#$1E0,d0
00015262 D240                       		add.w	d0,d1
00015264 3003                       		move.w	d3,d0
00015266 E648                       		lsr.w	#3,d0
00015268 0240 001E                  		andi.w	#$1E,d0
0001526C D240                       		add.w	d0,d1
0001526E 2241                       		movea.l	d1,a1
00015270 4E75                       		rts	
00015272                            ; End of function Floor_ChkTile
00015272                            
00015272                            
00015272                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015272                            
00015272                            
00015272                            FindFloor:				; XREF: Sonic_AnglePos; et al
00015272 618C                       		bsr.s	Floor_ChkTile
00015274 3011                       		move.w	(a1),d0
00015276 3800                       		move.w	d0,d4
00015278 0240 07FF                  		andi.w	#$7FF,d0
0001527C 6700                       		beq.s	loc_149DE
0001527E 0B04                       		btst	d5,d4
00015280 6600                       		bne.s	loc_149EC
00015282                            
00015282                            loc_149DE:
00015282 D44B                       		add.w	a3,d2
00015284 6100 0000                  		bsr.w	FindFloor2
00015288 944B                       		sub.w	a3,d2
0001528A 0641 0010                  		addi.w	#$10,d1
0001528E 4E75                       		rts	
00015290                            ; ===========================================================================
00015290                            
00015290                            loc_149EC:
00015290 2478 F796                  		movea.l	($FFFFF796).w,a2 ; load	collision index
00015294 1032 0000                  		move.b	(a2,d0.w),d0
00015298 0240 00FF                  		andi.w	#$FF,d0
0001529C 67E4                       		beq.s	loc_149DE
0001529E 45F9 0000 0000             		lea	(AngleMap).l,a2
000152A4 18B2 0000                  		move.b	(a2,d0.w),(a4)
000152A8 E948                       		lsl.w	#4,d0
000152AA 3203                       		move.w	d3,d1
000152AC 0804 000B                  		btst	#$B,d4
000152B0 6700                       		beq.s	loc_14A12
000152B2 4641                       		not.w	d1
000152B4 4414                       		neg.b	(a4)
000152B6                            
000152B6                            loc_14A12:
000152B6 0804 000C                  		btst	#$C,d4
000152BA 6700                       		beq.s	loc_14A22
000152BC 0614 0040                  		addi.b	#$40,(a4)
000152C0 4414                       		neg.b	(a4)
000152C2 0414 0040                  		subi.b	#$40,(a4)
000152C6                            
000152C6                            loc_14A22:
000152C6 0241 000F                  		andi.w	#$F,d1
000152CA D240                       		add.w	d0,d1
000152CC 45F9 0000 0000             		lea	(CollArray1).l,a2
000152D2 1032 1000                  		move.b	(a2,d1.w),d0
000152D6 4880                       		ext.w	d0
000152D8 BD44                       		eor.w	d6,d4
000152DA 0804 000C                  		btst	#$C,d4
000152DE 6700                       		beq.s	loc_14A3E
000152E0 4440                       		neg.w	d0
000152E2                            
000152E2                            loc_14A3E:
000152E2 4A40                       		tst.w	d0
000152E4 679C                       		beq.s	loc_149DE
000152E6 6B00                       		bmi.s	loc_14A5A
000152E8 0C00 0010                  		cmpi.b	#$10,d0
000152EC 6700                       		beq.s	loc_14A66
000152EE 3202                       		move.w	d2,d1
000152F0 0241 000F                  		andi.w	#$F,d1
000152F4 D041                       		add.w	d1,d0
000152F6 323C 000F                  		move.w	#$F,d1
000152FA 9240                       		sub.w	d0,d1
000152FC 4E75                       		rts	
000152FE                            ; ===========================================================================
000152FE                            
000152FE                            loc_14A5A:
000152FE 3202                       		move.w	d2,d1
00015300 0241 000F                  		andi.w	#$F,d1
00015304 D041                       		add.w	d1,d0
00015306 6A00 FF7A                  		bpl.w	loc_149DE
0001530A                            
0001530A                            loc_14A66:
0001530A 944B                       		sub.w	a3,d2
0001530C 6100 0000                  		bsr.w	FindFloor2
00015310 D44B                       		add.w	a3,d2
00015312 0441 0010                  		subi.w	#$10,d1
00015316 4E75                       		rts	
00015318                            ; End of function FindFloor
00015318                            
00015318                            
00015318                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015318                            
00015318                            
00015318                            FindFloor2:				; XREF: FindFloor
00015318 6100 FEE6                  		bsr.w	Floor_ChkTile
0001531C 3011                       		move.w	(a1),d0
0001531E 3800                       		move.w	d0,d4
00015320 0240 07FF                  		andi.w	#$7FF,d0
00015324 6700                       		beq.s	loc_14A86
00015326 0B04                       		btst	d5,d4
00015328 6600                       		bne.s	loc_14A94
0001532A                            
0001532A                            loc_14A86:
0001532A 323C 000F                  		move.w	#$F,d1
0001532E 3002                       		move.w	d2,d0
00015330 0240 000F                  		andi.w	#$F,d0
00015334 9240                       		sub.w	d0,d1
00015336 4E75                       		rts	
00015338                            ; ===========================================================================
00015338                            
00015338                            loc_14A94:
00015338 2478 F796                  		movea.l	($FFFFF796).w,a2
0001533C 1032 0000                  		move.b	(a2,d0.w),d0
00015340 0240 00FF                  		andi.w	#$FF,d0
00015344 67E4                       		beq.s	loc_14A86
00015346 45F9 0000 0000             		lea	(AngleMap).l,a2
0001534C 18B2 0000                  		move.b	(a2,d0.w),(a4)
00015350 E948                       		lsl.w	#4,d0
00015352 3203                       		move.w	d3,d1
00015354 0804 000B                  		btst	#$B,d4
00015358 6700                       		beq.s	loc_14ABA
0001535A 4641                       		not.w	d1
0001535C 4414                       		neg.b	(a4)
0001535E                            
0001535E                            loc_14ABA:
0001535E 0804 000C                  		btst	#$C,d4
00015362 6700                       		beq.s	loc_14ACA
00015364 0614 0040                  		addi.b	#$40,(a4)
00015368 4414                       		neg.b	(a4)
0001536A 0414 0040                  		subi.b	#$40,(a4)
0001536E                            
0001536E                            loc_14ACA:
0001536E 0241 000F                  		andi.w	#$F,d1
00015372 D240                       		add.w	d0,d1
00015374 45F9 0000 0000             		lea	(CollArray1).l,a2
0001537A 1032 1000                  		move.b	(a2,d1.w),d0
0001537E 4880                       		ext.w	d0
00015380 BD44                       		eor.w	d6,d4
00015382 0804 000C                  		btst	#$C,d4
00015386 6700                       		beq.s	loc_14AE6
00015388 4440                       		neg.w	d0
0001538A                            
0001538A                            loc_14AE6:
0001538A 4A40                       		tst.w	d0
0001538C 679C                       		beq.s	loc_14A86
0001538E 6B00                       		bmi.s	loc_14AFC
00015390 3202                       		move.w	d2,d1
00015392 0241 000F                  		andi.w	#$F,d1
00015396 D041                       		add.w	d1,d0
00015398 323C 000F                  		move.w	#$F,d1
0001539C 9240                       		sub.w	d0,d1
0001539E 4E75                       		rts	
000153A0                            ; ===========================================================================
000153A0                            
000153A0                            loc_14AFC:
000153A0 3202                       		move.w	d2,d1
000153A2 0241 000F                  		andi.w	#$F,d1
000153A6 D041                       		add.w	d1,d0
000153A8 6A00 FF80                  		bpl.w	loc_14A86
000153AC 4641                       		not.w	d1
000153AE 4E75                       		rts	
000153B0                            ; End of function FindFloor2
000153B0                            
000153B0                            
000153B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000153B0                            
000153B0                            
000153B0                            FindWall:				; XREF: Sonic_WalkVertR; et al
000153B0 6100 FE4E                  		bsr.w	Floor_ChkTile
000153B4 3011                       		move.w	(a1),d0
000153B6 3800                       		move.w	d0,d4
000153B8 0240 07FF                  		andi.w	#$7FF,d0
000153BC 6700                       		beq.s	loc_14B1E
000153BE 0B04                       		btst	d5,d4
000153C0 6600                       		bne.s	loc_14B2C
000153C2                            
000153C2                            loc_14B1E:
000153C2 D64B                       		add.w	a3,d3
000153C4 6100 0000                  		bsr.w	FindWall2
000153C8 964B                       		sub.w	a3,d3
000153CA 0641 0010                  		addi.w	#$10,d1
000153CE 4E75                       		rts	
000153D0                            ; ===========================================================================
000153D0                            
000153D0                            loc_14B2C:
000153D0 2478 F796                  		movea.l	($FFFFF796).w,a2
000153D4 1032 0000                  		move.b	(a2,d0.w),d0
000153D8 0240 00FF                  		andi.w	#$FF,d0
000153DC 67E4                       		beq.s	loc_14B1E
000153DE 45F9 0000 0000             		lea	(AngleMap).l,a2
000153E4 18B2 0000                  		move.b	(a2,d0.w),(a4)
000153E8 E948                       		lsl.w	#4,d0
000153EA 3202                       		move.w	d2,d1
000153EC 0804 000C                  		btst	#$C,d4
000153F0 6700                       		beq.s	loc_14B5A
000153F2 4641                       		not.w	d1
000153F4 0614 0040                  		addi.b	#$40,(a4)
000153F8 4414                       		neg.b	(a4)
000153FA 0414 0040                  		subi.b	#$40,(a4)
000153FE                            
000153FE                            loc_14B5A:
000153FE 0804 000B                  		btst	#$B,d4
00015402 6700                       		beq.s	loc_14B62
00015404 4414                       		neg.b	(a4)
00015406                            
00015406                            loc_14B62:
00015406 0241 000F                  		andi.w	#$F,d1
0001540A D240                       		add.w	d0,d1
0001540C 45F9 0000 0000             		lea	(CollArray2).l,a2
00015412 1032 1000                  		move.b	(a2,d1.w),d0
00015416 4880                       		ext.w	d0
00015418 BD44                       		eor.w	d6,d4
0001541A 0804 000B                  		btst	#$B,d4
0001541E 6700                       		beq.s	loc_14B7E
00015420 4440                       		neg.w	d0
00015422                            
00015422                            loc_14B7E:
00015422 4A40                       		tst.w	d0
00015424 679C                       		beq.s	loc_14B1E
00015426 6B00                       		bmi.s	loc_14B9A
00015428 0C00 0010                  		cmpi.b	#$10,d0
0001542C 6700                       		beq.s	loc_14BA6
0001542E 3203                       		move.w	d3,d1
00015430 0241 000F                  		andi.w	#$F,d1
00015434 D041                       		add.w	d1,d0
00015436 323C 000F                  		move.w	#$F,d1
0001543A 9240                       		sub.w	d0,d1
0001543C 4E75                       		rts	
0001543E                            ; ===========================================================================
0001543E                            
0001543E                            loc_14B9A:
0001543E 3203                       		move.w	d3,d1
00015440 0241 000F                  		andi.w	#$F,d1
00015444 D041                       		add.w	d1,d0
00015446 6A00 FF7A                  		bpl.w	loc_14B1E
0001544A                            
0001544A                            loc_14BA6:
0001544A 964B                       		sub.w	a3,d3
0001544C 6100 0000                  		bsr.w	FindWall2
00015450 D64B                       		add.w	a3,d3
00015452 0441 0010                  		subi.w	#$10,d1
00015456 4E75                       		rts	
00015458                            ; End of function FindWall
00015458                            
00015458                            
00015458                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015458                            
00015458                            
00015458                            FindWall2:				; XREF: FindWall
00015458 6100 FDA6                  		bsr.w	Floor_ChkTile
0001545C 3011                       		move.w	(a1),d0
0001545E 3800                       		move.w	d0,d4
00015460 0240 07FF                  		andi.w	#$7FF,d0
00015464 6700                       		beq.s	loc_14BC6
00015466 0B04                       		btst	d5,d4
00015468 6600                       		bne.s	loc_14BD4
0001546A                            
0001546A                            loc_14BC6:
0001546A 323C 000F                  		move.w	#$F,d1
0001546E 3003                       		move.w	d3,d0
00015470 0240 000F                  		andi.w	#$F,d0
00015474 9240                       		sub.w	d0,d1
00015476 4E75                       		rts	
00015478                            ; ===========================================================================
00015478                            
00015478                            loc_14BD4:
00015478 2478 F796                  		movea.l	($FFFFF796).w,a2
0001547C 1032 0000                  		move.b	(a2,d0.w),d0
00015480 0240 00FF                  		andi.w	#$FF,d0
00015484 67E4                       		beq.s	loc_14BC6
00015486 45F9 0000 0000             		lea	(AngleMap).l,a2
0001548C 18B2 0000                  		move.b	(a2,d0.w),(a4)
00015490 E948                       		lsl.w	#4,d0
00015492 3202                       		move.w	d2,d1
00015494 0804 000C                  		btst	#$C,d4
00015498 6700                       		beq.s	loc_14C02
0001549A 4641                       		not.w	d1
0001549C 0614 0040                  		addi.b	#$40,(a4)
000154A0 4414                       		neg.b	(a4)
000154A2 0414 0040                  		subi.b	#$40,(a4)
000154A6                            
000154A6                            loc_14C02:
000154A6 0804 000B                  		btst	#$B,d4
000154AA 6700                       		beq.s	loc_14C0A
000154AC 4414                       		neg.b	(a4)
000154AE                            
000154AE                            loc_14C0A:
000154AE 0241 000F                  		andi.w	#$F,d1
000154B2 D240                       		add.w	d0,d1
000154B4 45F9 0000 0000             		lea	(CollArray2).l,a2
000154BA 1032 1000                  		move.b	(a2,d1.w),d0
000154BE 4880                       		ext.w	d0
000154C0 BD44                       		eor.w	d6,d4
000154C2 0804 000B                  		btst	#$B,d4
000154C6 6700                       		beq.s	loc_14C26
000154C8 4440                       		neg.w	d0
000154CA                            
000154CA                            loc_14C26:
000154CA 4A40                       		tst.w	d0
000154CC 679C                       		beq.s	loc_14BC6
000154CE 6B00                       		bmi.s	loc_14C3C
000154D0 3203                       		move.w	d3,d1
000154D2 0241 000F                  		andi.w	#$F,d1
000154D6 D041                       		add.w	d1,d0
000154D8 323C 000F                  		move.w	#$F,d1
000154DC 9240                       		sub.w	d0,d1
000154DE 4E75                       		rts	
000154E0                            ; ===========================================================================
000154E0                            
000154E0                            loc_14C3C:
000154E0 3203                       		move.w	d3,d1
000154E2 0241 000F                  		andi.w	#$F,d1
000154E6 D041                       		add.w	d1,d0
000154E8 6A00 FF80                  		bpl.w	loc_14BC6
000154EC 4641                       		not.w	d1
000154EE 4E75                       		rts	
000154F0                            ; End of function FindWall2
000154F0                            
000154F0                            ; ---------------------------------------------------------------------------
000154F0                            ; Unused floor/wall subroutine - logs something	to do with collision
000154F0                            ; ---------------------------------------------------------------------------
000154F0                            
000154F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000154F0                            
000154F0                            
000154F0                            FloorLog_Unk:				; XREF: Level
000154F0 4E75                       		rts	
000154F2                            
000154F2 43F9 0000 0000             		lea	(CollArray1).l,a1
000154F8 45F9 0000 0000             		lea	(CollArray1).l,a2
000154FE 363C 00FF                  		move.w	#$FF,d3
00015502                            
00015502                            loc_14C5E:
00015502 7A10                       		moveq	#$10,d5
00015504 343C 000F                  		move.w	#$F,d2
00015508                            
00015508                            loc_14C64:
00015508 7800                       		moveq	#0,d4
0001550A 323C 000F                  		move.w	#$F,d1
0001550E                            
0001550E                            loc_14C6A:
0001550E 3019                       		move.w	(a1)+,d0
00015510 EAA8                       		lsr.l	d5,d0
00015512 D944                       		addx.w	d4,d4
00015514 51C9 FFF8                  		dbf	d1,loc_14C6A
00015518                            
00015518 34C4                       		move.w	d4,(a2)+
0001551A 92FC 0020                  		suba.w	#$20,a1
0001551E 5345                       		subq.w	#1,d5
00015520 51CA FFE6                  		dbf	d2,loc_14C64
00015524                            
00015524 D2FC 0020                  		adda.w	#$20,a1
00015528 51CB FFD8                  		dbf	d3,loc_14C5E
0001552C                            
0001552C 43F9 0000 0000             		lea	(CollArray1).l,a1
00015532 45F9 0000 0000             		lea	(CollArray2).l,a2
00015538 6100                       		bsr.s	FloorLog_Unk2
0001553A 43F9 0000 0000             		lea	(CollArray1).l,a1
00015540 45F9 0000 0000             		lea	(CollArray1).l,a2
00015546                            
00015546                            ; End of function FloorLog_Unk
00015546                            
00015546                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015546                            
00015546                            
00015546                            FloorLog_Unk2:				; XREF: FloorLog_Unk
00015546 363C 0FFF                  		move.w	#$FFF,d3
0001554A                            
0001554A                            loc_14CA6:
0001554A 7400                       		moveq	#0,d2
0001554C 323C 000F                  		move.w	#$F,d1
00015550 3019                       		move.w	(a1)+,d0
00015552 6700                       		beq.s	loc_14CD4
00015554 6B00                       		bmi.s	loc_14CBE
00015556                            
00015556                            loc_14CB2:
00015556 E248                       		lsr.w	#1,d0
00015558 6400                       		bcc.s	loc_14CB8
0001555A 5202                       		addq.b	#1,d2
0001555C                            
0001555C                            loc_14CB8:
0001555C 51C9 FFF8                  		dbf	d1,loc_14CB2
00015560                            
00015560 6000                       		bra.s	loc_14CD6
00015562                            ; ===========================================================================
00015562                            
00015562                            loc_14CBE:
00015562 0C40 FFFF                  		cmpi.w	#-1,d0
00015566 6700                       		beq.s	loc_14CD0
00015568                            
00015568                            loc_14CC4:
00015568 E348                       		lsl.w	#1,d0
0001556A 6400                       		bcc.s	loc_14CCA
0001556C 5302                       		subq.b	#1,d2
0001556E                            
0001556E                            loc_14CCA:
0001556E 51C9 FFF8                  		dbf	d1,loc_14CC4
00015572                            
00015572 6000                       		bra.s	loc_14CD6
00015574                            ; ===========================================================================
00015574                            
00015574                            loc_14CD0:
00015574 303C 0010                  		move.w	#$10,d0
00015578                            
00015578                            loc_14CD4:
00015578 3400                       		move.w	d0,d2
0001557A                            
0001557A                            loc_14CD6:
0001557A 14C2                       		move.b	d2,(a2)+
0001557C 51CB FFCC                  		dbf	d3,loc_14CA6
00015580                            
00015580 4E75                       		rts	
00015582                            
00015582                            ; End of function FloorLog_Unk2
00015582                            
00015582                            
00015582                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015582                            
00015582                            
00015582                            Sonic_WalkSpeed:			; XREF: Sonic_Move
00015582 2628 0008                  		move.l	8(a0),d3
00015586 2428 000C                  		move.l	$C(a0),d2
0001558A 3228 0010                  		move.w	$10(a0),d1
0001558E 48C1                       		ext.l	d1
00015590 E181                       		asl.l	#8,d1
00015592 D681                       		add.l	d1,d3
00015594 3228 0012                  		move.w	$12(a0),d1
00015598 48C1                       		ext.l	d1
0001559A E181                       		asl.l	#8,d1
0001559C D481                       		add.l	d1,d2
0001559E 4842                       		swap	d2
000155A0 4843                       		swap	d3
000155A2 11C0 F768                  		move.b	d0,($FFFFF768).w
000155A6 11C0 F76A                  		move.b	d0,($FFFFF76A).w
000155AA 1200                       		move.b	d0,d1
000155AC 0600 0020                  		addi.b	#$20,d0
000155B0 6A00                       		bpl.s	loc_14D1A
000155B2 1001                       		move.b	d1,d0
000155B4 6A00                       		bpl.s	loc_14D14
000155B6 5300                       		subq.b	#1,d0
000155B8                            
000155B8                            loc_14D14:
000155B8 0600 0020                  		addi.b	#$20,d0
000155BC 6000                       		bra.s	loc_14D24
000155BE                            ; ===========================================================================
000155BE                            
000155BE                            loc_14D1A:
000155BE 1001                       		move.b	d1,d0
000155C0 6A00                       		bpl.s	loc_14D20
000155C2 5200                       		addq.b	#1,d0
000155C4                            
000155C4                            loc_14D20:
000155C4 0600 001F                  		addi.b	#$1F,d0
000155C8                            
000155C8                            loc_14D24:
000155C8 0200 00C0                  		andi.b	#$C0,d0
000155CC 6700 0000                  		beq.w	loc_14DF0
000155D0 0C00 0080                  		cmpi.b	#$80,d0
000155D4 6700 0000                  		beq.w	loc_14F7C
000155D8 0201 0038                  		andi.b	#$38,d1
000155DC 6600                       		bne.s	loc_14D3C
000155DE 5042                       		addq.w	#8,d2
000155E0                            
000155E0                            loc_14D3C:
000155E0 0C00 0040                  		cmpi.b	#$40,d0
000155E4 6700 0000                  		beq.w	loc_1504A
000155E8 6000 0000                  		bra.w	loc_14EBC
000155EC                            
000155EC                            ; End of function Sonic_WalkSpeed
000155EC                            
000155EC                            
000155EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000155EC                            
000155EC                            
000155EC                            sub_14D48:				; XREF: Sonic_Jump
000155EC 11C0 F768                  		move.b	d0,($FFFFF768).w
000155F0 11C0 F76A                  		move.b	d0,($FFFFF76A).w
000155F4 0600 0020                  		addi.b	#$20,d0
000155F8 0200 00C0                  		andi.b	#$C0,d0
000155FC 0C00 0040                  		cmpi.b	#$40,d0
00015600 6700 0000                  		beq.w	loc_14FD6
00015604 0C00 0080                  		cmpi.b	#$80,d0
00015608 6700 0000                  		beq.w	Sonic_DontRunOnWalls
0001560C 0C00 00C0                  		cmpi.b	#$C0,d0
00015610 6700 0000                  		beq.w	sub_14E50
00015614                            
00015614                            ; End of function sub_14D48
00015614                            
00015614                            ; ---------------------------------------------------------------------------
00015614                            ; Subroutine to	make Sonic land	on the floor after jumping
00015614                            ; ---------------------------------------------------------------------------
00015614                            
00015614                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015614                            
00015614                            
00015614                            Sonic_HitFloor:				; XREF: Sonic_Floor
00015614 3428 000C                  		move.w	$C(a0),d2
00015618 3628 0008                  		move.w	8(a0),d3
0001561C 7000                       		moveq	#0,d0
0001561E 1028 0016                  		move.b	$16(a0),d0
00015622 4880                       		ext.w	d0
00015624 D440                       		add.w	d0,d2
00015626 1028 0017                  		move.b	$17(a0),d0
0001562A 4880                       		ext.w	d0
0001562C D640                       		add.w	d0,d3
0001562E 49F8 F768                  		lea	($FFFFF768).w,a4
00015632 367C 0010                  		movea.w	#$10,a3
00015636 3C3C 0000                  		move.w	#0,d6
0001563A 7A0D                       		moveq	#$D,d5
0001563C 6100 FC34                  		bsr.w	FindFloor
00015640 3F01                       		move.w	d1,-(sp)
00015642 3428 000C                  		move.w	$C(a0),d2
00015646 3628 0008                  		move.w	8(a0),d3
0001564A 7000                       		moveq	#0,d0
0001564C 1028 0016                  		move.b	$16(a0),d0
00015650 4880                       		ext.w	d0
00015652 D440                       		add.w	d0,d2
00015654 1028 0017                  		move.b	$17(a0),d0
00015658 4880                       		ext.w	d0
0001565A 9640                       		sub.w	d0,d3
0001565C 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015660 367C 0010                  		movea.w	#$10,a3
00015664 3C3C 0000                  		move.w	#0,d6
00015668 7A0D                       		moveq	#$D,d5
0001566A 6100 FC06                  		bsr.w	FindFloor
0001566E 301F                       		move.w	(sp)+,d0
00015670 143C 0000                  		move.b	#0,d2
00015674                            
00015674                            loc_14DD0:
00015674 1638 F76A                  		move.b	($FFFFF76A).w,d3
00015678 B240                       		cmp.w	d0,d1
0001567A 6F00                       		ble.s	loc_14DDE
0001567C 1638 F768                  		move.b	($FFFFF768).w,d3
00015680 C141                       		exg	d0,d1
00015682                            
00015682                            loc_14DDE:
00015682 0803 0000                  		btst	#0,d3
00015686 6700                       		beq.s	locret_14DE6
00015688 1602                       		move.b	d2,d3
0001568A                            
0001568A                            locret_14DE6:
0001568A 4E75                       		rts	
0001568C                            
0001568C                            ; End of function Sonic_HitFloor
0001568C                            
0001568C                            ; ===========================================================================
0001568C 3428 000C                  		move.w	$C(a0),d2
00015690 3628 0008                  		move.w	8(a0),d3
00015694                            
00015694                            loc_14DF0:				; XREF: Sonic_WalkSpeed
00015694 0642 000A                  		addi.w	#$A,d2
00015698 49F8 F768                  		lea	($FFFFF768).w,a4
0001569C 367C 0010                  		movea.w	#$10,a3
000156A0 3C3C 0000                  		move.w	#0,d6
000156A4 7A0E                       		moveq	#$E,d5
000156A6 6100 FBCA                  		bsr.w	FindFloor
000156AA 143C 0000                  		move.b	#0,d2
000156AE                            
000156AE                            loc_14E0A:				; XREF: sub_14EB4
000156AE 1638 F768                  		move.b	($FFFFF768).w,d3
000156B2 0803 0000                  		btst	#0,d3
000156B6 6700                       		beq.s	locret_14E16
000156B8 1602                       		move.b	d2,d3
000156BA                            
000156BA                            locret_14E16:
000156BA 4E75                       		rts	
000156BC                            
000156BC                            ; ---------------------------------------------------------------------------
000156BC                            ; Subroutine allowing objects to interact with the floor
000156BC                            ; ---------------------------------------------------------------------------
000156BC                            
000156BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000156BC                            
000156BC                            
000156BC                            ObjHitFloor:
000156BC 3628 0008                  		move.w	8(a0),d3
000156C0                            
000156C0                            ; End of function ObjHitFloor
000156C0                            
000156C0                            
000156C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000156C0                            
000156C0                            
000156C0                            ObjHitFloor2:
000156C0 3428 000C                  		move.w	$C(a0),d2
000156C4 7000                       		moveq	#0,d0
000156C6 1028 0016                  		move.b	$16(a0),d0
000156CA 4880                       		ext.w	d0
000156CC D440                       		add.w	d0,d2
000156CE 49F8 F768                  		lea	($FFFFF768).w,a4
000156D2 18BC 0000                  		move.b	#0,(a4)
000156D6 367C 0010                  		movea.w	#$10,a3
000156DA 3C3C 0000                  		move.w	#0,d6
000156DE 7A0D                       		moveq	#$D,d5
000156E0 6100 FB90                  		bsr.w	FindFloor
000156E4 1638 F768                  		move.b	($FFFFF768).w,d3
000156E8 0803 0000                  		btst	#0,d3
000156EC 6700                       		beq.s	locret_14E4E
000156EE 163C 0000                  		move.b	#0,d3
000156F2                            
000156F2                            locret_14E4E:
000156F2 4E75                       		rts	
000156F4                            ; End of function ObjHitFloor2
000156F4                            
000156F4                            
000156F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000156F4                            
000156F4                            
000156F4                            sub_14E50:				; XREF: sub_14D48
000156F4 3428 000C                  		move.w	$C(a0),d2
000156F8 3628 0008                  		move.w	8(a0),d3
000156FC 7000                       		moveq	#0,d0
000156FE 1028 0017                  		move.b	$17(a0),d0
00015702 4880                       		ext.w	d0
00015704 9440                       		sub.w	d0,d2
00015706 1028 0016                  		move.b	$16(a0),d0
0001570A 4880                       		ext.w	d0
0001570C D640                       		add.w	d0,d3
0001570E 49F8 F768                  		lea	($FFFFF768).w,a4
00015712 367C 0010                  		movea.w	#$10,a3
00015716 3C3C 0000                  		move.w	#0,d6
0001571A 7A0E                       		moveq	#$E,d5
0001571C 6100 FC92                  		bsr.w	FindWall
00015720 3F01                       		move.w	d1,-(sp)
00015722 3428 000C                  		move.w	$C(a0),d2
00015726 3628 0008                  		move.w	8(a0),d3
0001572A 7000                       		moveq	#0,d0
0001572C 1028 0017                  		move.b	$17(a0),d0
00015730 4880                       		ext.w	d0
00015732 D440                       		add.w	d0,d2
00015734 1028 0016                  		move.b	$16(a0),d0
00015738 4880                       		ext.w	d0
0001573A D640                       		add.w	d0,d3
0001573C 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015740 367C 0010                  		movea.w	#$10,a3
00015744 3C3C 0000                  		move.w	#0,d6
00015748 7A0E                       		moveq	#$E,d5
0001574A 6100 FC64                  		bsr.w	FindWall
0001574E 301F                       		move.w	(sp)+,d0
00015750 143C 00C0                  		move.b	#-$40,d2
00015754 6000 FF1E                  		bra.w	loc_14DD0
00015758                            
00015758                            ; End of function sub_14E50
00015758                            
00015758                            
00015758                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015758                            
00015758                            
00015758                            sub_14EB4:				; XREF: Sonic_Floor
00015758 3428 000C                  		move.w	$C(a0),d2
0001575C 3628 0008                  		move.w	8(a0),d3
00015760                            
00015760                            loc_14EBC:
00015760 0643 000A                  		addi.w	#$A,d3
00015764 49F8 F768                  		lea	($FFFFF768).w,a4
00015768 367C 0010                  		movea.w	#$10,a3
0001576C 3C3C 0000                  		move.w	#0,d6
00015770 7A0E                       		moveq	#$E,d5
00015772 6100 FC3C                  		bsr.w	FindWall
00015776 143C 00C0                  		move.b	#-$40,d2
0001577A 6000 FF32                  		bra.w	loc_14E0A
0001577E                            
0001577E                            ; End of function sub_14EB4
0001577E                            
0001577E                            ; ---------------------------------------------------------------------------
0001577E                            ; Subroutine to	detect when an object hits a wall to its right
0001577E                            ; ---------------------------------------------------------------------------
0001577E                            
0001577E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001577E                            
0001577E                            
0001577E                            ObjHitWallRight:
0001577E D668 0008                  		add.w	8(a0),d3
00015782 3428 000C                  		move.w	$C(a0),d2
00015786 49F8 F768                  		lea	($FFFFF768).w,a4
0001578A 18BC 0000                  		move.b	#0,(a4)
0001578E 367C 0010                  		movea.w	#$10,a3
00015792 3C3C 0000                  		move.w	#0,d6
00015796 7A0E                       		moveq	#$E,d5
00015798 6100 FC16                  		bsr.w	FindWall
0001579C 1638 F768                  		move.b	($FFFFF768).w,d3
000157A0 0803 0000                  		btst	#0,d3
000157A4 6700                       		beq.s	locret_14F06
000157A6 163C 00C0                  		move.b	#-$40,d3
000157AA                            
000157AA                            locret_14F06:
000157AA 4E75                       		rts	
000157AC                            
000157AC                            ; End of function ObjHitWallRight
000157AC                            
000157AC                            ; ---------------------------------------------------------------------------
000157AC                            ; Subroutine preventing	Sonic from running on walls and	ceilings when he
000157AC                            ; touches them
000157AC                            ; ---------------------------------------------------------------------------
000157AC                            
000157AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000157AC                            
000157AC                            
000157AC                            Sonic_DontRunOnWalls:			; XREF: Sonic_Floor; et al
000157AC 3428 000C                  		move.w	$C(a0),d2
000157B0 3628 0008                  		move.w	8(a0),d3
000157B4 7000                       		moveq	#0,d0
000157B6 1028 0016                  		move.b	$16(a0),d0
000157BA 4880                       		ext.w	d0
000157BC 9440                       		sub.w	d0,d2
000157BE 0A42 000F                  		eori.w	#$F,d2
000157C2 1028 0017                  		move.b	$17(a0),d0
000157C6 4880                       		ext.w	d0
000157C8 D640                       		add.w	d0,d3
000157CA 49F8 F768                  		lea	($FFFFF768).w,a4
000157CE 367C FFF0                  		movea.w	#-$10,a3
000157D2 3C3C 1000                  		move.w	#$1000,d6
000157D6 7A0E                       		moveq	#$E,d5
000157D8 6100 FA98                  		bsr.w	FindFloor
000157DC 3F01                       		move.w	d1,-(sp)
000157DE 3428 000C                  		move.w	$C(a0),d2
000157E2 3628 0008                  		move.w	8(a0),d3
000157E6 7000                       		moveq	#0,d0
000157E8 1028 0016                  		move.b	$16(a0),d0
000157EC 4880                       		ext.w	d0
000157EE 9440                       		sub.w	d0,d2
000157F0 0A42 000F                  		eori.w	#$F,d2
000157F4 1028 0017                  		move.b	$17(a0),d0
000157F8 4880                       		ext.w	d0
000157FA 9640                       		sub.w	d0,d3
000157FC 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015800 367C FFF0                  		movea.w	#-$10,a3
00015804 3C3C 1000                  		move.w	#$1000,d6
00015808 7A0E                       		moveq	#$E,d5
0001580A 6100 FA66                  		bsr.w	FindFloor
0001580E 301F                       		move.w	(sp)+,d0
00015810 143C 0080                  		move.b	#-$80,d2
00015814 6000 FE5E                  		bra.w	loc_14DD0
00015818                            ; End of function Sonic_DontRunOnWalls
00015818                            
00015818                            ; ===========================================================================
00015818 3428 000C                  		move.w	$C(a0),d2
0001581C 3628 0008                  		move.w	8(a0),d3
00015820                            
00015820                            loc_14F7C:
00015820 0442 000A                  		subi.w	#$A,d2
00015824 0A42 000F                  		eori.w	#$F,d2
00015828 49F8 F768                  		lea	($FFFFF768).w,a4
0001582C 367C FFF0                  		movea.w	#-$10,a3
00015830 3C3C 1000                  		move.w	#$1000,d6
00015834 7A0E                       		moveq	#$E,d5
00015836 6100 FA3A                  		bsr.w	FindFloor
0001583A 143C 0080                  		move.b	#-$80,d2
0001583E 6000 FE6E                  		bra.w	loc_14E0A
00015842                            
00015842                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015842                            
00015842                            
00015842                            ObjHitCeiling:
00015842 3428 000C                  		move.w	$C(a0),d2
00015846 3628 0008                  		move.w	8(a0),d3
0001584A 7000                       		moveq	#0,d0
0001584C 1028 0016                  		move.b	$16(a0),d0
00015850 4880                       		ext.w	d0
00015852 9440                       		sub.w	d0,d2
00015854 0A42 000F                  		eori.w	#$F,d2
00015858 49F8 F768                  		lea	($FFFFF768).w,a4
0001585C 367C FFF0                  		movea.w	#-$10,a3
00015860 3C3C 1000                  		move.w	#$1000,d6
00015864 7A0E                       		moveq	#$E,d5
00015866 6100 FA0A                  		bsr.w	FindFloor
0001586A 1638 F768                  		move.b	($FFFFF768).w,d3
0001586E 0803 0000                  		btst	#0,d3
00015872 6700                       		beq.s	locret_14FD4
00015874 163C 0080                  		move.b	#-$80,d3
00015878                            
00015878                            locret_14FD4:
00015878 4E75                       		rts	
0001587A                            ; End of function ObjHitCeiling
0001587A                            
0001587A                            ; ===========================================================================
0001587A                            
0001587A                            loc_14FD6:				; XREF: sub_14D48
0001587A 3428 000C                  		move.w	$C(a0),d2
0001587E 3628 0008                  		move.w	8(a0),d3
00015882 7000                       		moveq	#0,d0
00015884 1028 0017                  		move.b	$17(a0),d0
00015888 4880                       		ext.w	d0
0001588A 9440                       		sub.w	d0,d2
0001588C 1028 0016                  		move.b	$16(a0),d0
00015890 4880                       		ext.w	d0
00015892 9640                       		sub.w	d0,d3
00015894 0A43 000F                  		eori.w	#$F,d3
00015898 49F8 F768                  		lea	($FFFFF768).w,a4
0001589C 367C FFF0                  		movea.w	#-$10,a3
000158A0 3C3C 0800                  		move.w	#$800,d6
000158A4 7A0E                       		moveq	#$E,d5
000158A6 6100 FB08                  		bsr.w	FindWall
000158AA 3F01                       		move.w	d1,-(sp)
000158AC 3428 000C                  		move.w	$C(a0),d2
000158B0 3628 0008                  		move.w	8(a0),d3
000158B4 7000                       		moveq	#0,d0
000158B6 1028 0017                  		move.b	$17(a0),d0
000158BA 4880                       		ext.w	d0
000158BC D440                       		add.w	d0,d2
000158BE 1028 0016                  		move.b	$16(a0),d0
000158C2 4880                       		ext.w	d0
000158C4 9640                       		sub.w	d0,d3
000158C6 0A43 000F                  		eori.w	#$F,d3
000158CA 49F8 F76A                  		lea	($FFFFF76A).w,a4
000158CE 367C FFF0                  		movea.w	#-$10,a3
000158D2 3C3C 0800                  		move.w	#$800,d6
000158D6 7A0E                       		moveq	#$E,d5
000158D8 6100 FAD6                  		bsr.w	FindWall
000158DC 301F                       		move.w	(sp)+,d0
000158DE 143C 0040                  		move.b	#$40,d2
000158E2 6000 FD90                  		bra.w	loc_14DD0
000158E6                            
000158E6                            ; ---------------------------------------------------------------------------
000158E6                            ; Subroutine to	stop Sonic when	he jumps at a wall
000158E6                            ; ---------------------------------------------------------------------------
000158E6                            
000158E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000158E6                            
000158E6                            
000158E6                            Sonic_HitWall:				; XREF: Sonic_Floor
000158E6 3428 000C                  		move.w	$C(a0),d2
000158EA 3628 0008                  		move.w	8(a0),d3
000158EE                            
000158EE                            loc_1504A:
000158EE 0443 000A                  		subi.w	#$A,d3
000158F2 0A43 000F                  		eori.w	#$F,d3
000158F6 49F8 F768                  		lea	($FFFFF768).w,a4
000158FA 367C FFF0                  		movea.w	#-$10,a3
000158FE 3C3C 0800                  		move.w	#$800,d6
00015902 7A0E                       		moveq	#$E,d5
00015904 6100 FAAA                  		bsr.w	FindWall
00015908 143C 0040                  		move.b	#$40,d2
0001590C 6000 FDA0                  		bra.w	loc_14E0A
00015910                            ; End of function Sonic_HitWall
00015910                            
00015910                            ; ---------------------------------------------------------------------------
00015910                            ; Subroutine to	detect when an object hits a wall to its left
00015910                            ; ---------------------------------------------------------------------------
00015910                            
00015910                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015910                            
00015910                            
00015910                            ObjHitWallLeft:
00015910 D668 0008                  		add.w	8(a0),d3
00015914 3428 000C                  		move.w	$C(a0),d2
00015918 49F8 F768                  		lea	($FFFFF768).w,a4
0001591C 18BC 0000                  		move.b	#0,(a4)
00015920 367C FFF0                  		movea.w	#-$10,a3
00015924 3C3C 0800                  		move.w	#$800,d6
00015928 7A0E                       		moveq	#$E,d5
0001592A 6100 FA84                  		bsr.w	FindWall
0001592E 1638 F768                  		move.b	($FFFFF768).w,d3
00015932 0803 0000                  		btst	#0,d3
00015936 6700                       		beq.s	locret_15098
00015938 163C 0040                  		move.b	#$40,d3
0001593C                            
0001593C                            locret_15098:
0001593C 4E75                       		rts	
0001593E                            ; End of function ObjHitWallLeft
0001593E                            
0001593E                            ; ===========================================================================
0001593E                            ; ---------------------------------------------------------------------------
0001593E                            ; Object 66 - rotating disc that grabs Sonic (SBZ)
0001593E                            ; ---------------------------------------------------------------------------
0001593E                            
0001593E                            Obj66:					; XREF: Obj_Index
0001593E 7000                       		moveq	#0,d0
00015940 1028 0024                  		move.b	$24(a0),d0
00015944 323B 0000                  		move.w	Obj66_Index(pc,d0.w),d1
00015948 4EFB 1000                  		jmp	Obj66_Index(pc,d1.w)
0001594C                            ; ===========================================================================
0001594C 0000                       Obj66_Index:	dc.w Obj66_Main-Obj66_Index
0001594E 0000                       		dc.w Obj66_Action-Obj66_Index
00015950 0000                       		dc.w Obj66_Display-Obj66_Index
00015952 0000                       		dc.w Obj66_Release-Obj66_Index
00015954                            ; ===========================================================================
00015954                            
00015954                            Obj66_Main:				; XREF: Obj66_Index
00015954 5428 0024                  		addq.b	#2,$24(a0)
00015958 323C 0001                  		move.w	#1,d1
0001595C 2248                       		movea.l	a0,a1
0001595E 6000                       		bra.s	Obj66_MakeItem
00015960                            ; ===========================================================================
00015960                            
00015960                            Obj66_Loop:
00015960 6100 88E6                  		bsr.w	SingleObjLoad
00015964 6600                       		bne.s	loc_150FE
00015966 12BC 0066                  		move.b	#$66,0(a1)
0001596A 5829 0024                  		addq.b	#4,$24(a1)
0001596E 3368 0008 0008             		move.w	8(a0),8(a1)
00015974 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001597A 137C 0003 0018             		move.b	#3,$18(a1)
00015980 137C 0010 001A             		move.b	#$10,$1A(a1)
00015986                            
00015986                            Obj66_MakeItem:				; XREF: Obj66_Main
00015986 237C 0000 0000 0004        		move.l	#Map_obj66,4(a1)
0001598E 337C 4348 0002             		move.w	#$4348,2(a1)
00015994 0029 0004 0001             		ori.b	#4,1(a1)
0001599A 137C 0038 0019             		move.b	#$38,$19(a1)
000159A0                            
000159A0                            loc_150FE:
000159A0 51C9 FFBE                  		dbf	d1,Obj66_Loop
000159A4                            
000159A4 117C 0030 0019             		move.b	#$30,$19(a0)
000159AA 117C 0004 0018             		move.b	#4,$18(a0)
000159B0 317C 003C 0030             		move.w	#$3C,$30(a0)
000159B6 117C 0001 0034             		move.b	#1,$34(a0)
000159BC 1168 0028 0038             		move.b	$28(a0),$38(a0)
000159C2                            
000159C2                            Obj66_Action:				; XREF: Obj66_Index
000159C2 6100 0000                  		bsr.w	Obj66_ChkSwitch
000159C6 4A28 0001                  		tst.b	1(a0)
000159CA 6A00 0000                  		bpl.w	Obj66_Display
000159CE 323C 0030                  		move.w	#$30,d1
000159D2 3401                       		move.w	d1,d2
000159D4 3602                       		move.w	d2,d3
000159D6 5243                       		addq.w	#1,d3
000159D8 3828 0008                  		move.w	8(a0),d4
000159DC 6100 A7B4                  		bsr.w	SolidObject
000159E0 0828 0005 0022             		btst	#5,$22(a0)
000159E6 6700 0000                  		beq.w	Obj66_Display
000159EA 43F8 D000                  		lea	($FFFFD000).w,a1
000159EE 720E                       		moveq	#$E,d1
000159F0 3029 0008                  		move.w	8(a1),d0
000159F4 B068 0008                  		cmp.w	8(a0),d0
000159F8 6500                       		bcs.s	Obj66_GrabSonic
000159FA 7207                       		moveq	#7,d1
000159FC                            
000159FC                            Obj66_GrabSonic:
000159FC B228 001A                  		cmp.b	$1A(a0),d1
00015A00 6600                       		bne.s	Obj66_Display
00015A02 1141 0032                  		move.b	d1,$32(a0)
00015A06 5828 0024                  		addq.b	#4,$24(a0)
00015A0A 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
00015A10 137C 0002 001C             		move.b	#2,$1C(a1)	; make Sonic use "rolling" animation
00015A16 337C 0800 0014             		move.w	#$800,$14(a1)
00015A1C 337C 0000 0010             		move.w	#0,$10(a1)
00015A22 337C 0000 0012             		move.w	#0,$12(a1)
00015A28 08A8 0005 0022             		bclr	#5,$22(a0)
00015A2E 08A9 0005 0022             		bclr	#5,$22(a1)
00015A34 08E9 0001 0022             		bset	#1,$22(a1)
00015A3A 3429 0008                  		move.w	8(a1),d2
00015A3E 3629 000C                  		move.w	$C(a1),d3
00015A42 6100 0000                  		bsr.w	Obj66_ChgPos
00015A46 D569 0008                  		add.w	d2,8(a1)
00015A4A D769 000C                  		add.w	d3,$C(a1)
00015A4E E0E9 0008                  		asr	8(a1)
00015A52 E0E9 000C                  		asr	$C(a1)
00015A56                            
00015A56                            Obj66_Display:				; XREF: Obj66_Index
00015A56 6000 A412                  		bra.w	MarkObjGone
00015A5A                            ; ===========================================================================
00015A5A                            
00015A5A                            Obj66_Release:				; XREF: Obj66_Index
00015A5A 1028 001A                  		move.b	$1A(a0),d0
00015A5E 0C00 0004                  		cmpi.b	#4,d0
00015A62 6700                       		beq.s	loc_151C8
00015A64 0C00 0007                  		cmpi.b	#7,d0
00015A68 6600                       		bne.s	loc_151F8
00015A6A                            
00015A6A                            loc_151C8:
00015A6A B028 0032                  		cmp.b	$32(a0),d0
00015A6E 6700                       		beq.s	loc_151F8
00015A70 43F8 D000                  		lea	($FFFFD000).w,a1
00015A74 337C 0000 0010             		move.w	#0,$10(a1)
00015A7A 337C 0800 0012             		move.w	#$800,$12(a1)
00015A80 0C00 0004                  		cmpi.b	#4,d0
00015A84 6700                       		beq.s	loc_151F0
00015A86 337C 0800 0010             		move.w	#$800,$10(a1)
00015A8C 337C 0800 0012             		move.w	#$800,$12(a1)
00015A92                            
00015A92                            loc_151F0:
00015A92 4238 F7C8                  		clr.b	($FFFFF7C8).w	; unlock controls
00015A96 5928 0024                  		subq.b	#4,$24(a0)
00015A9A                            
00015A9A                            loc_151F8:
00015A9A 6100                       		bsr.s	Obj66_ChkSwitch
00015A9C 6100                       		bsr.s	Obj66_ChgPos
00015A9E 6000 A3CA                  		bra.w	MarkObjGone
00015AA2                            
00015AA2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015AA2                            
00015AA2                            
00015AA2                            Obj66_ChkSwitch:			; XREF: Obj66_Action
00015AA2 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00015AA6 7000                       		moveq	#0,d0
00015AA8 1028 0038                  		move.b	$38(a0),d0
00015AAC 0832 0000 0000             		btst	#0,(a2,d0.w)	; is switch pressed?
00015AB2 6700                       		beq.s	loc_15224	; if not, branch
00015AB4 4A28 0036                  		tst.b	$36(a0)		; has switch previously	been pressed?
00015AB8 6600                       		bne.s	Obj66_Animate	; if yes, branch
00015ABA 4428 0034                  		neg.b	$34(a0)
00015ABE 117C 0001 0036             		move.b	#1,$36(a0)	; set to "previously pressed"
00015AC4 6000                       		bra.s	Obj66_Animate
00015AC6                            ; ===========================================================================
00015AC6                            
00015AC6                            loc_15224:
00015AC6 4228 0036                  		clr.b	$36(a0)		; set to "not yet pressed"
00015ACA                            
00015ACA                            Obj66_Animate:
00015ACA 5328 001E                  		subq.b	#1,$1E(a0)
00015ACE 6A00                       		bpl.s	locret_15246
00015AD0 117C 0007 001E             		move.b	#7,$1E(a0)
00015AD6 1228 0034                  		move.b	$34(a0),d1
00015ADA 1028 001A                  		move.b	$1A(a0),d0
00015ADE D001                       		add.b	d1,d0
00015AE0 0200 000F                  		andi.b	#$F,d0
00015AE4 1140 001A                  		move.b	d0,$1A(a0)
00015AE8                            
00015AE8                            locret_15246:
00015AE8 4E75                       		rts	
00015AEA                            ; End of function Obj66_ChkSwitch
00015AEA                            
00015AEA                            
00015AEA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015AEA                            
00015AEA                            
00015AEA                            Obj66_ChgPos:				; XREF: Obj66_GrabSonic
00015AEA 43F8 D000                  		lea	($FFFFD000).w,a1
00015AEE 7000                       		moveq	#0,d0
00015AF0 1028 001A                  		move.b	$1A(a0),d0
00015AF4 D040                       		add.w	d0,d0
00015AF6 45FB 0000                  		lea	Obj66_PosData(pc,d0.w),a2
00015AFA 101A                       		move.b	(a2)+,d0
00015AFC 4880                       		ext.w	d0
00015AFE D068 0008                  		add.w	8(a0),d0
00015B02 3340 0008                  		move.w	d0,8(a1)
00015B06 101A                       		move.b	(a2)+,d0
00015B08 4880                       		ext.w	d0
00015B0A D068 000C                  		add.w	$C(a0),d0
00015B0E 3340 000C                  		move.w	d0,$C(a1)
00015B12 4E75                       		rts	
00015B14                            ; End of function Obj66_ChgPos
00015B14                            
00015B14                            ; ===========================================================================
00015B14 E000 E20E                  Obj66_PosData:	dc.b  $E0,   0,	$E2,  $E ; disc	x-pos, Sonic x-pos, disc y-pos,	Sonic y-pos
00015B18 E818 F21E                  		dc.b  $E8, $18,	$F2, $1E
00015B1C 0020 0E1E                  		dc.b	0, $20,	 $E, $1E
00015B20 1818 1E0E                  		dc.b  $18, $18,	$1E,  $E
00015B24 2000 1EF2                  		dc.b  $20,   0,	$1E, $F2
00015B28 18E8 0EE2                  		dc.b  $18, $E8,	 $E, $E2
00015B2C 00E0 F2E2                  		dc.b	0, $E0,	$F2, $E2
00015B30 E8E8 E2F2                  		dc.b  $E8, $E8,	$E2, $F2
00015B34                            ; ---------------------------------------------------------------------------
00015B34                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
00015B34                            ; ---------------------------------------------------------------------------
00015B34                            Map_obj66:
00015B34                            	include "_maps\obj66.asm"
00015B34                            ; ---------------------------------------------------------------------------
00015B34                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
00015B34                            ; ---------------------------------------------------------------------------
00015B34 0000 0000                  		dc.w byte_152B4-Map_obj66, byte_152D3-Map_obj66
00015B38 0000 0000                  		dc.w byte_152F2-Map_obj66, byte_15311-Map_obj66
00015B3C 0000 0000                  		dc.w byte_15330-Map_obj66, byte_1534F-Map_obj66
00015B40 0000 0000                  		dc.w byte_1536E-Map_obj66, byte_1538D-Map_obj66
00015B44 0000 0000                  		dc.w byte_153AC-Map_obj66, byte_153CB-Map_obj66
00015B48 0000 0000                  		dc.w byte_153EA-Map_obj66, byte_15409-Map_obj66
00015B4C 0000 0000                  		dc.w byte_15428-Map_obj66, byte_15447-Map_obj66
00015B50 0000 0000                  		dc.w byte_15466-Map_obj66, byte_15485-Map_obj66
00015B54 0000                       		dc.w byte_154A4-Map_obj66
00015B56 06                         byte_152B4:	dc.b 6
00015B57 E805 0022 D0               		dc.b $E8, 5, 0,	$22, $D0
00015B5C 0805 1022 D0               		dc.b 8,	5, $10,	$22, $D0
00015B61 E80A 0000 C8               		dc.b $E8, $A, 0, 0, $C8
00015B66 E80A 0800 E0               		dc.b $E8, $A, 8, 0, $E0
00015B6B 000A 1000 C8               		dc.b 0,	$A, $10, 0, $C8
00015B70 000A 1800 E0               		dc.b 0,	$A, $18, 0, $E0
00015B75 06                         byte_152D3:	dc.b 6
00015B76 F803 0026 D0               		dc.b $F8, 3, 0,	$26, $D0
00015B7B 1805 002A D8               		dc.b $18, 5, 0,	$2A, $D8
00015B80 F60A 0000 CA               		dc.b $F6, $A, 0, 0, $CA
00015B85 F60A 0800 E2               		dc.b $F6, $A, 8, 0, $E2
00015B8A 0E0A 1000 CA               		dc.b $E, $A, $10, 0, $CA
00015B8F 0E0A 1800 E2               		dc.b $E, $A, $18, 0, $E2
00015B94 06                         byte_152F2:	dc.b 6
00015B95 0006 002E D0               		dc.b 0,	6, 0, $2E, $D0
00015B9A 2009 0034 E8               		dc.b $20, 9, 0,	$34, $E8
00015B9F 000A 0000 D0               		dc.b 0,	$A, 0, 0, $D0
00015BA4 000A 0800 E8               		dc.b 0,	$A, 8, 0, $E8
00015BA9 180A 1000 D0               		dc.b $18, $A, $10, 0, $D0
00015BAE 180A 1800 E8               		dc.b $18, $A, $18, 0, $E8
00015BB3 06                         byte_15311:	dc.b 6
00015BB4 0807 003A D8               		dc.b 8,	7, 0, $3A, $D8
00015BB9 2808 0042 F0               		dc.b $28, 8, 0,	$42, $F0
00015BBE 060A 0000 DA               		dc.b 6,	$A, 0, 0, $DA
00015BC3 060A 0800 F2               		dc.b 6,	$A, 8, 0, $F2
00015BC8 1E0A 1000 DA               		dc.b $1E, $A, $10, 0, $DA
00015BCD 1E0A 1800 F2               		dc.b $1E, $A, $18, 0, $F2
00015BD2 06                         byte_15330:	dc.b 6
00015BD3 2005 0045 E8               		dc.b $20, 5, 0,	$45, $E8
00015BD8 2005 0845 08               		dc.b $20, 5, 8,	$45, 8
00015BDD 080A 0000 E8               		dc.b 8,	$A, 0, 0, $E8
00015BE2 080A 0800 00               		dc.b 8,	$A, 8, 0, 0
00015BE7 200A 1000 E8               		dc.b $20, $A, $10, 0, $E8
00015BEC 200A 1800 00               		dc.b $20, $A, $18, 0, 0
00015BF1 06                         byte_1534F:	dc.b 6
00015BF2 2808 0842 F8               		dc.b $28, 8, 8,	$42, $F8
00015BF7 0807 083A 18               		dc.b 8,	7, 8, $3A, $18
00015BFC 060A 0000 F6               		dc.b 6,	$A, 0, 0, $F6
00015C01 060A 0800 0E               		dc.b 6,	$A, 8, 0, $E
00015C06 1E0A 1000 F6               		dc.b $1E, $A, $10, 0, $F6
00015C0B 1E0A 1800 0E               		dc.b $1E, $A, $18, 0, $E
00015C10 06                         byte_1536E:	dc.b 6
00015C11 2009 0834 00               		dc.b $20, 9, 8,	$34, 0
00015C16 0006 082E 20               		dc.b 0,	6, 8, $2E, $20
00015C1B 000A 0000 00               		dc.b 0,	$A, 0, 0, 0
00015C20 000A 0800 18               		dc.b 0,	$A, 8, 0, $18
00015C25 180A 1000 00               		dc.b $18, $A, $10, 0, 0
00015C2A 180A 1800 18               		dc.b $18, $A, $18, 0, $18
00015C2F 06                         byte_1538D:	dc.b 6
00015C30 1805 082A 18               		dc.b $18, 5, 8,	$2A, $18
00015C35 F803 0826 28               		dc.b $F8, 3, 8,	$26, $28
00015C3A F60A 0000 06               		dc.b $F6, $A, 0, 0, 6
00015C3F F60A 0800 1E               		dc.b $F6, $A, 8, 0, $1E
00015C44 0E0A 1000 06               		dc.b $E, $A, $10, 0, 6
00015C49 0E0A 1800 1E               		dc.b $E, $A, $18, 0, $1E
00015C4E 06                         byte_153AC:	dc.b 6
00015C4F E805 0822 20               		dc.b $E8, 5, 8,	$22, $20
00015C54 0805 1822 20               		dc.b 8,	5, $18,	$22, $20
00015C59 E80A 0000 08               		dc.b $E8, $A, 0, 0, 8
00015C5E E80A 0800 20               		dc.b $E8, $A, 8, 0, $20
00015C63 000A 1000 08               		dc.b 0,	$A, $10, 0, 8
00015C68 000A 1800 20               		dc.b 0,	$A, $18, 0, $20
00015C6D 06                         byte_153CB:	dc.b 6
00015C6E D805 182A 18               		dc.b $D8, 5, $18, $2A, $18
00015C73 E803 1826 28               		dc.b $E8, 3, $18, $26, $28
00015C78 DA0A 0000 06               		dc.b $DA, $A, 0, 0, 6
00015C7D DA0A 0800 1E               		dc.b $DA, $A, 8, 0, $1E
00015C82 F20A 1000 06               		dc.b $F2, $A, $10, 0, 6
00015C87 F20A 1800 1E               		dc.b $F2, $A, $18, 0, $1E
00015C8C 06                         byte_153EA:	dc.b 6
00015C8D D009 1834 00               		dc.b $D0, 9, $18, $34, 0
00015C92 E806 182E 20               		dc.b $E8, 6, $18, $2E, $20
00015C97 D00A 0000 00               		dc.b $D0, $A, 0, 0, 0
00015C9C D00A 0800 18               		dc.b $D0, $A, 8, 0, $18
00015CA1 E80A 1000 00               		dc.b $E8, $A, $10, 0, 0
00015CA6 E80A 1800 18               		dc.b $E8, $A, $18, 0, $18
00015CAB 06                         byte_15409:	dc.b 6
00015CAC D008 1842 F8               		dc.b $D0, 8, $18, $42, $F8
00015CB1 D807 183A 18               		dc.b $D8, 7, $18, $3A, $18
00015CB6 CA0A 0000 F6               		dc.b $CA, $A, 0, 0, $F6
00015CBB CA0A 0800 0E               		dc.b $CA, $A, 8, 0, $E
00015CC0 E20A 1000 F6               		dc.b $E2, $A, $10, 0, $F6
00015CC5 E20A 1800 0E               		dc.b $E2, $A, $18, 0, $E
00015CCA 06                         byte_15428:	dc.b 6
00015CCB D005 1045 E8               		dc.b $D0, 5, $10, $45, $E8
00015CD0 D005 1845 08               		dc.b $D0, 5, $18, $45, 8
00015CD5 C80A 0000 E8               		dc.b $C8, $A, 0, 0, $E8
00015CDA C80A 0800 00               		dc.b $C8, $A, 8, 0, 0
00015CDF E00A 1000 E8               		dc.b $E0, $A, $10, 0, $E8
00015CE4 E00A 1800 00               		dc.b $E0, $A, $18, 0, 0
00015CE9 06                         byte_15447:	dc.b 6
00015CEA D807 103A D8               		dc.b $D8, 7, $10, $3A, $D8
00015CEF D008 1042 F0               		dc.b $D0, 8, $10, $42, $F0
00015CF4 CA0A 0000 DA               		dc.b $CA, $A, 0, 0, $DA
00015CF9 CA0A 0800 F2               		dc.b $CA, $A, 8, 0, $F2
00015CFE E20A 1000 DA               		dc.b $E2, $A, $10, 0, $DA
00015D03 E20A 1800 F2               		dc.b $E2, $A, $18, 0, $F2
00015D08 06                         byte_15466:	dc.b 6
00015D09 E806 102E D0               		dc.b $E8, 6, $10, $2E, $D0
00015D0E D009 1034 E8               		dc.b $D0, 9, $10, $34, $E8
00015D13 D00A 0000 D0               		dc.b $D0, $A, 0, 0, $D0
00015D18 D00A 0800 E8               		dc.b $D0, $A, 8, 0, $E8
00015D1D E80A 1000 D0               		dc.b $E8, $A, $10, 0, $D0
00015D22 E80A 1800 E8               		dc.b $E8, $A, $18, 0, $E8
00015D27 06                         byte_15485:	dc.b 6
00015D28 E803 1026 D0               		dc.b $E8, 3, $10, $26, $D0
00015D2D D805 102A D8               		dc.b $D8, 5, $10, $2A, $D8
00015D32 DA0A 0000 CA               		dc.b $DA, $A, 0, 0, $CA
00015D37 DA0A 0800 E2               		dc.b $DA, $A, 8, 0, $E2
00015D3C F20A 1000 CA               		dc.b $F2, $A, $10, 0, $CA
00015D41 F20A 1800 E2               		dc.b $F2, $A, $18, 0, $E2
00015D46 0C                         byte_154A4:	dc.b $C
00015D47 C80D 0009 E0               		dc.b $C8, $D, 0, 9, $E0
00015D4C D00A 0011 D0               		dc.b $D0, $A, 0, $11, $D0
00015D51 E007 001A C8               		dc.b $E0, 7, 0,	$1A, $C8
00015D56 C80D 0809 00               		dc.b $C8, $D, 8, 9, 0
00015D5B D00A 0811 18               		dc.b $D0, $A, 8, $11, $18
00015D60 E007 081A 28               		dc.b $E0, 7, 8,	$1A, $28
00015D65 0007 101A C8               		dc.b 0,	7, $10,	$1A, $C8
00015D6A 180A 1011 D0               		dc.b $18, $A, $10, $11,	$D0
00015D6F 280D 1009 E0               		dc.b $28, $D, $10, 9, $E0
00015D74 280D 1809 00               		dc.b $28, $D, $18, 9, 0
00015D79 180A 1811 18               		dc.b $18, $A, $18, $11,	$18
00015D7E 0007 181A 28               		dc.b 0,	7, $18,	$1A, $28
00015D84 00                         		even
00015D84 00                         		even
00015D84                            
00015D84                            ; ===========================================================================
00015D84                            ; ---------------------------------------------------------------------------
00015D84                            ; Object 67 - disc that	you run	around (SBZ)
00015D84                            ; ---------------------------------------------------------------------------
00015D84                            
00015D84                            Obj67:					; XREF: Obj_Index
00015D84 7000                       		moveq	#0,d0
00015D86 1028 0024                  		move.b	$24(a0),d0
00015D8A 323B 0000                  		move.w	Obj67_Index(pc,d0.w),d1
00015D8E 4EFB 1000                  		jmp	Obj67_Index(pc,d1.w)
00015D92                            ; ===========================================================================
00015D92 0000                       Obj67_Index:	dc.w Obj67_Main-Obj67_Index
00015D94 0000                       		dc.w Obj67_Action-Obj67_Index
00015D96                            ; ===========================================================================
00015D96                            
00015D96                            Obj67_Main:				; XREF: Obj67_Index
00015D96 5428 0024                  		addq.b	#2,$24(a0)
00015D9A 217C 0000 0000 0004        		move.l	#Map_obj67,4(a0)
00015DA2 317C C344 0002             		move.w	#$C344,2(a0)
00015DA8 117C 0004 0001             		move.b	#4,1(a0)
00015DAE 117C 0004 0018             		move.b	#4,$18(a0)
00015DB4 117C 0008 0019             		move.b	#8,$19(a0)
00015DBA 3168 0008 0032             		move.w	8(a0),$32(a0)
00015DC0 3168 000C 0030             		move.w	$C(a0),$30(a0)
00015DC6 117C 0018 0034             		move.b	#$18,$34(a0)
00015DCC 117C 0048 0038             		move.b	#$48,$38(a0)
00015DD2 1228 0028                  		move.b	$28(a0),d1	; get object type
00015DD6 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00015DDA 6700                       		beq.s	loc_15546
00015DDC 117C 0010 0034             		move.b	#$10,$34(a0)
00015DE2 117C 0038 0038             		move.b	#$38,$38(a0)
00015DE8                            
00015DE8                            loc_15546:
00015DE8 1228 0028                  		move.b	$28(a0),d1	; get object type
00015DEC 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00015DF0 4881                       		ext.w	d1
00015DF2 E741                       		asl.w	#3,d1
00015DF4 3141 0036                  		move.w	d1,$36(a0)
00015DF8 1028 0022                  		move.b	$22(a0),d0
00015DFC E418                       		ror.b	#2,d0
00015DFE 0200 00C0                  		andi.b	#-$40,d0
00015E02 1140 0026                  		move.b	d0,$26(a0)
00015E06                            
00015E06                            Obj67_Action:				; XREF: Obj67_Index
00015E06 6100 0000                  		bsr.w	Obj67_MoveSonic
00015E0A 6100 0000                  		bsr.w	Obj67_MoveSpot
00015E0E 6000 0000                  		bra.w	Obj67_ChkDel
00015E12                            ; ===========================================================================
00015E12                            
00015E12                            Obj67_MoveSonic:			; XREF: Obj67_Action
00015E12 7400                       		moveq	#0,d2
00015E14 1428 0038                  		move.b	$38(a0),d2
00015E18 3602                       		move.w	d2,d3
00015E1A D643                       		add.w	d3,d3
00015E1C 43F8 D000                  		lea	($FFFFD000).w,a1
00015E20 3029 0008                  		move.w	8(a1),d0
00015E24 9068 0032                  		sub.w	$32(a0),d0
00015E28 D042                       		add.w	d2,d0
00015E2A B043                       		cmp.w	d3,d0
00015E2C 6400                       		bcc.s	loc_155A8
00015E2E 3229 000C                  		move.w	$C(a1),d1
00015E32 9268 0030                  		sub.w	$30(a0),d1
00015E36 D242                       		add.w	d2,d1
00015E38 B243                       		cmp.w	d3,d1
00015E3A 6400                       		bcc.s	loc_155A8
00015E3C 0829 0001 0022             		btst	#1,$22(a1)
00015E42 6700                       		beq.s	loc_155B8
00015E44 4228 003A                  		clr.b	$3A(a0)
00015E48 4E75                       		rts	
00015E4A                            ; ===========================================================================
00015E4A                            
00015E4A                            loc_155A8:
00015E4A 4A28 003A                  		tst.b	$3A(a0)
00015E4E 6700                       		beq.s	locret_155B6
00015E50 4229 0038                  		clr.b	$38(a1)
00015E54 4228 003A                  		clr.b	$3A(a0)
00015E58                            
00015E58                            locret_155B6:
00015E58 4E75                       		rts	
00015E5A                            ; ===========================================================================
00015E5A                            
00015E5A                            loc_155B8:
00015E5A 4A28 003A                  		tst.b	$3A(a0)
00015E5E 6600                       		bne.s	loc_155E2
00015E60 117C 0001 003A             		move.b	#1,$3A(a0)
00015E66 0829 0002 0022             		btst	#2,$22(a1)
00015E6C 6600                       		bne.s	loc_155D0
00015E6E 4229 001C                  		clr.b	$1C(a1)
00015E72                            
00015E72                            loc_155D0:
00015E72 08A9 0005 0022             		bclr	#5,$22(a1)
00015E78 137C 0001 001D             		move.b	#1,$1D(a1)
00015E7E 137C 0001 0038             		move.b	#1,$38(a1)
00015E84                            
00015E84                            loc_155E2:
00015E84 3029 0014                  		move.w	$14(a1),d0
00015E88 4A68 0036                  		tst.w	$36(a0)
00015E8C 6A00                       		bpl.s	loc_15608
00015E8E 0C40 FC00                  		cmpi.w	#-$400,d0
00015E92 6F00                       		ble.s	loc_155FA
00015E94 337C FC00 0014             		move.w	#-$400,$14(a1)
00015E9A 4E75                       		rts	
00015E9C                            ; ===========================================================================
00015E9C                            
00015E9C                            loc_155FA:
00015E9C 0C40 F100                  		cmpi.w	#-$F00,d0
00015EA0 6C00                       		bge.s	locret_15606
00015EA2 337C F100 0014             		move.w	#-$F00,$14(a1)
00015EA8                            
00015EA8                            locret_15606:
00015EA8 4E75                       		rts	
00015EAA                            ; ===========================================================================
00015EAA                            
00015EAA                            loc_15608:
00015EAA 0C40 0400                  		cmpi.w	#$400,d0
00015EAE 6C00                       		bge.s	loc_15616
00015EB0 337C 0400 0014             		move.w	#$400,$14(a1)
00015EB6 4E75                       		rts	
00015EB8                            ; ===========================================================================
00015EB8                            
00015EB8                            loc_15616:
00015EB8 0C40 0F00                  		cmpi.w	#$F00,d0
00015EBC 6F00                       		ble.s	locret_15622
00015EBE 337C 0F00 0014             		move.w	#$F00,$14(a1)
00015EC4                            
00015EC4                            locret_15622:
00015EC4 4E75                       		rts	
00015EC6                            ; ===========================================================================
00015EC6                            
00015EC6                            Obj67_MoveSpot:				; XREF: Obj67_Action
00015EC6 3028 0036                  		move.w	$36(a0),d0
00015ECA D168 0026                  		add.w	d0,$26(a0)
00015ECE 1028 0026                  		move.b	$26(a0),d0
00015ED2 4EB9 0000 2CC4             		jsr	(CalcSine).l
00015ED8 3428 0030                  		move.w	$30(a0),d2
00015EDC 3628 0032                  		move.w	$32(a0),d3
00015EE0 7800                       		moveq	#0,d4
00015EE2 1828 0034                  		move.b	$34(a0),d4
00015EE6 E14C                       		lsl.w	#8,d4
00015EE8 2A04                       		move.l	d4,d5
00015EEA C9C0                       		muls.w	d0,d4
00015EEC 4844                       		swap	d4
00015EEE CBC1                       		muls.w	d1,d5
00015EF0 4845                       		swap	d5
00015EF2 D842                       		add.w	d2,d4
00015EF4 DA43                       		add.w	d3,d5
00015EF6 3144 000C                  		move.w	d4,$C(a0)
00015EFA 3145 0008                  		move.w	d5,8(a0)
00015EFE 4E75                       		rts	
00015F00                            ; ===========================================================================
00015F00                            
00015F00                            Obj67_ChkDel:				; XREF: Obj67_Action
00015F00 3028 0032                  		move.w	$32(a0),d0
00015F04 0240 FF80                  		andi.w	#-$80,d0
00015F08 3238 F700                  		move.w	($FFFFF700).w,d1
00015F0C 0441 0080                  		subi.w	#$80,d1
00015F10 0241 FF80                  		andi.w	#-$80,d1
00015F14 9041                       		sub.w	d1,d0
00015F16 0C40 0280                  		cmpi.w	#$280,d0
00015F1A 6200                       		bhi.s	Obj67_Delete
00015F1C 4EF9 0000 DDC2             		jmp	DisplaySprite
00015F22                            ; ===========================================================================
00015F22                            
00015F22                            Obj67_Delete:
00015F22 4EF9 0000 DDFE             		jmp	DeleteObject
00015F28                            ; ===========================================================================
00015F28                            ; ---------------------------------------------------------------------------
00015F28                            ; Sprite mappings - disc that you run around (SBZ)
00015F28                            ; (It's just a small blob that moves around in a circle. The disc itself is
00015F28                            ; part of the level tiles.)
00015F28                            ; ---------------------------------------------------------------------------
00015F28                            Map_obj67:
00015F28                            	include "_maps\obj67.asm"
00015F28                            ; ---------------------------------------------------------------------------
00015F28                            ; Sprite mappings - disc that you run around (SBZ)
00015F28                            ; (It's just a small blob that moves around in a circle. The disc itself is
00015F28                            ; part of the level tiles.)
00015F28                            ; ---------------------------------------------------------------------------
00015F28 0000                       		dc.w byte_15688-Map_obj67
00015F2A 01                         byte_15688:	dc.b 1
00015F2B F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00015F30                            		even
00015F30                            		even
00015F30                            
00015F30                            ; ===========================================================================
00015F30                            ; ---------------------------------------------------------------------------
00015F30                            ; Object 68 - conveyor belts (SBZ)
00015F30                            ; ---------------------------------------------------------------------------
00015F30                            
00015F30                            Obj68:					; XREF: Obj_Index
00015F30 7000                       		moveq	#0,d0
00015F32 1028 0024                  		move.b	$24(a0),d0
00015F36 323B 0000                  		move.w	Obj68_Index(pc,d0.w),d1
00015F3A 4EFB 1000                  		jmp	Obj68_Index(pc,d1.w)
00015F3E                            ; ===========================================================================
00015F3E 0000                       Obj68_Index:	dc.w Obj68_Main-Obj68_Index
00015F40 0000                       		dc.w Obj68_Action-Obj68_Index
00015F42                            ; ===========================================================================
00015F42                            
00015F42                            Obj68_Main:				; XREF: Obj68_Index
00015F42 5428 0024                  		addq.b	#2,$24(a0)
00015F46 117C 0080 0038             		move.b	#128,$38(a0)	; set width to 128 pixels
00015F4C 1228 0028                  		move.b	$28(a0),d1	; get object type
00015F50 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00015F54 6700                       		beq.s	loc_156BA	; if zero, branch
00015F56 117C 0038 0038             		move.b	#56,$38(a0)	; set width to 56 pixels
00015F5C                            
00015F5C                            loc_156BA:
00015F5C 1228 0028                  		move.b	$28(a0),d1	; get object type
00015F60 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00015F64 4881                       		ext.w	d1
00015F66 E841                       		asr.w	#4,d1
00015F68 3141 0036                  		move.w	d1,$36(a0)	; set belt speed
00015F6C                            
00015F6C                            Obj68_Action:				; XREF: Obj68_Index
00015F6C 6100                       		bsr.s	Obj68_MoveSonic
00015F6E 3028 0008                  		move.w	8(a0),d0
00015F72 0240 FF80                  		andi.w	#$FF80,d0
00015F76 3238 F700                  		move.w	($FFFFF700).w,d1
00015F7A 0441 0080                  		subi.w	#$80,d1
00015F7E 0241 FF80                  		andi.w	#$FF80,d1
00015F82 9041                       		sub.w	d1,d0
00015F84 0C40 0280                  		cmpi.w	#$280,d0
00015F88 6200                       		bhi.s	Obj68_Delete
00015F8A 4E75                       		rts	
00015F8C                            ; ===========================================================================
00015F8C                            
00015F8C                            Obj68_Delete:
00015F8C 4EF9 0000 DDFE             		jmp	DeleteObject
00015F92                            ; ===========================================================================
00015F92                            
00015F92                            Obj68_MoveSonic:			; XREF: Obj68_Action
00015F92 7400                       		moveq	#0,d2
00015F94 1428 0038                  		move.b	$38(a0),d2
00015F98 3602                       		move.w	d2,d3
00015F9A D643                       		add.w	d3,d3
00015F9C 43F8 D000                  		lea	($FFFFD000).w,a1
00015FA0 3029 0008                  		move.w	8(a1),d0
00015FA4 9068 0008                  		sub.w	8(a0),d0
00015FA8 D042                       		add.w	d2,d0
00015FAA B043                       		cmp.w	d3,d0
00015FAC 6400                       		bcc.s	locret_1572E
00015FAE 3229 000C                  		move.w	$C(a1),d1
00015FB2 9268 000C                  		sub.w	$C(a0),d1
00015FB6 0641 0030                  		addi.w	#$30,d1
00015FBA 0C41 0030                  		cmpi.w	#$30,d1
00015FBE 6400                       		bcc.s	locret_1572E
00015FC0 0829 0001 0022             		btst	#1,$22(a1)
00015FC6 6600                       		bne.s	locret_1572E
00015FC8 3028 0036                  		move.w	$36(a0),d0
00015FCC D169 0008                  		add.w	d0,8(a1)
00015FD0                            
00015FD0                            locret_1572E:
00015FD0 4E75                       		rts	
00015FD2                            
00015FD2                            ; ===========================================================================
00015FD2                            ; ---------------------------------------------------------------------------
00015FD2                            ; Object 69 - spinning platforms and trapdoors (SBZ)
00015FD2                            ; ---------------------------------------------------------------------------
00015FD2                            
00015FD2                            Obj69:					; XREF: Obj_Index
00015FD2 7000                       		moveq	#0,d0
00015FD4 1028 0024                  		move.b	$24(a0),d0
00015FD8 323B 0000                  		move.w	Obj69_Index(pc,d0.w),d1
00015FDC 4EFB 1000                  		jmp	Obj69_Index(pc,d1.w)
00015FE0                            ; ===========================================================================
00015FE0 0000                       Obj69_Index:	dc.w Obj69_Main-Obj69_Index
00015FE2 0000                       		dc.w Obj69_Trapdoor-Obj69_Index
00015FE4 0000                       		dc.w Obj69_Spinner-Obj69_Index
00015FE6                            ; ===========================================================================
00015FE6                            
00015FE6                            Obj69_Main:				; XREF: Obj69_Index
00015FE6 5428 0024                  		addq.b	#2,$24(a0)
00015FEA 217C 0000 0000 0004        		move.l	#Map_obj69,4(a0)
00015FF2 317C 4492 0002             		move.w	#$4492,2(a0)
00015FF8 0028 0004 0001             		ori.b	#4,1(a0)
00015FFE 117C 0080 0019             		move.b	#$80,$19(a0)
00016004 7000                       		moveq	#0,d0
00016006 1028 0028                  		move.b	$28(a0),d0
0001600A 0240 000F                  		andi.w	#$F,d0
0001600E C0FC 003C                  		mulu.w	#$3C,d0
00016012 3140 0032                  		move.w	d0,$32(a0)
00016016 4A28 0028                  		tst.b	$28(a0)
0001601A 6A00                       		bpl.s	Obj69_Trapdoor
0001601C 5428 0024                  		addq.b	#2,$24(a0)
00016020 217C 0000 0000 0004        		move.l	#Map_obj69a,4(a0)
00016028 317C 04DF 0002             		move.w	#$4DF,2(a0)
0001602E 117C 0010 0019             		move.b	#$10,$19(a0)
00016034 117C 0002 001C             		move.b	#2,$1C(a0)
0001603A 7000                       		moveq	#0,d0
0001603C 1028 0028                  		move.b	$28(a0),d0	; get object type
00016040 3200                       		move.w	d0,d1
00016042 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00016046 C0FC 0006                  		mulu.w	#6,d0		; multiply by 6
0001604A 3140 0030                  		move.w	d0,$30(a0)	; set time delay
0001604E 3140 0032                  		move.w	d0,$32(a0)
00016052 0241 0070                  		andi.w	#$70,d1
00016056 0641 0010                  		addi.w	#$10,d1
0001605A E549                       		lsl.w	#2,d1
0001605C 5341                       		subq.w	#1,d1
0001605E 3141 0036                  		move.w	d1,$36(a0)
00016062 6000                       		bra.s	Obj69_Spinner
00016064                            ; ===========================================================================
00016064                            
00016064                            Obj69_Trapdoor:				; XREF: Obj69_Index
00016064 5368 0030                  		subq.w	#1,$30(a0)
00016068 6A00                       		bpl.s	Obj69_Animate
0001606A 3168 0032 0030             		move.w	$32(a0),$30(a0)
00016070 0868 0000 001C             		bchg	#0,$1C(a0)
00016076 4A28 0001                  		tst.b	1(a0)
0001607A 6A00                       		bpl.s	Obj69_Animate
0001607C 303C 00BB                  		move.w	#$BB,d0
00016080 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play door sound
00016086                            
00016086                            Obj69_Animate:
00016086 43F9 0000 0000             		lea	(Ani_obj69).l,a1
0001608C 4EB9 0000 AE82             		jsr	AnimateSprite
00016092 4A28 001A                  		tst.b	$1A(a0)		; is frame number 0 displayed?
00016096 6600                       		bne.s	Obj69_NotSolid	; if not, branch
00016098 323C 004B                  		move.w	#$4B,d1
0001609C 343C 000C                  		move.w	#$C,d2
000160A0 3602                       		move.w	d2,d3
000160A2 5243                       		addq.w	#1,d3
000160A4 3828 0008                  		move.w	8(a0),d4
000160A8 6100 A0E8                  		bsr.w	SolidObject
000160AC 6000 9DBC                  		bra.w	MarkObjGone
000160B0                            ; ===========================================================================
000160B0                            
000160B0                            Obj69_NotSolid:
000160B0 0828 0003 0022             		btst	#3,$22(a0)
000160B6 6700                       		beq.s	Obj69_Display
000160B8 43F8 D000                  		lea	($FFFFD000).w,a1
000160BC 08A9 0003 0022             		bclr	#3,$22(a1)
000160C2 08A8 0003 0022             		bclr	#3,$22(a0)
000160C8 4228 0025                  		clr.b	$25(a0)
000160CC                            
000160CC                            Obj69_Display:
000160CC 6000 9D9C                  		bra.w	MarkObjGone
000160D0                            ; ===========================================================================
000160D0                            
000160D0                            Obj69_Spinner:				; XREF: Obj69_Index
000160D0 3038 FE04                  		move.w	($FFFFFE04).w,d0
000160D4 C068 0036                  		and.w	$36(a0),d0
000160D8 6600                       		bne.s	Obj69_Delay
000160DA 117C 0001 0034             		move.b	#1,$34(a0)
000160E0                            
000160E0                            Obj69_Delay:
000160E0 4A28 0034                  		tst.b	$34(a0)
000160E4 6700                       		beq.s	Obj69_Animate2
000160E6 5368 0030                  		subq.w	#1,$30(a0)
000160EA 6A00                       		bpl.s	Obj69_Animate2
000160EC 3168 0032 0030             		move.w	$32(a0),$30(a0)
000160F2 4228 0034                  		clr.b	$34(a0)
000160F6 0868 0000 001C             		bchg	#0,$1C(a0)
000160FC                            
000160FC                            Obj69_Animate2:
000160FC 43F9 0000 0000             		lea	(Ani_obj69).l,a1
00016102 4EB9 0000 AE82             		jsr	AnimateSprite
00016108 4A28 001A                  		tst.b	$1A(a0)		; check	if frame number	0 is displayed
0001610C 6600                       		bne.s	Obj69_NotSolid2	; if not, branch
0001610E 323C 001B                  		move.w	#$1B,d1
00016112 343C 0007                  		move.w	#7,d2
00016116 3602                       		move.w	d2,d3
00016118 5243                       		addq.w	#1,d3
0001611A 3828 0008                  		move.w	8(a0),d4
0001611E 6100 A072                  		bsr.w	SolidObject
00016122 6000 9D46                  		bra.w	MarkObjGone
00016126                            ; ===========================================================================
00016126                            
00016126                            Obj69_NotSolid2:
00016126 0828 0003 0022             		btst	#3,$22(a0)
0001612C 6700                       		beq.s	Obj69_Display2
0001612E 43F8 D000                  		lea	($FFFFD000).w,a1
00016132 08A9 0003 0022             		bclr	#3,$22(a1)
00016138 08A8 0003 0022             		bclr	#3,$22(a0)
0001613E 4228 0025                  		clr.b	$25(a0)
00016142                            
00016142                            Obj69_Display2:
00016142 6000 9D26                  		bra.w	MarkObjGone
00016146                            ; ===========================================================================
00016146                            Ani_obj69:
00016146                            	include "_anim\obj69.asm"
00016146                            ; ---------------------------------------------------------------------------
00016146                            ; Animation script - trapdoor (SBZ)
00016146                            ; ---------------------------------------------------------------------------
00016146 0000                       		dc.w byte_158AC-Ani_obj69
00016148 0000                       		dc.w byte_158B2-Ani_obj69
0001614A 0000                       		dc.w byte_158B8-Ani_obj69
0001614C 0000                       		dc.w byte_158CC-Ani_obj69
0001614E 0300 0102 FE01             byte_158AC:	dc.b 3,	0, 1, 2, $FE, 1
00016154 0302 0100 FE01             byte_158B2:	dc.b 3,	2, 1, 0, $FE, 1
0001615A 0100 0102 0304 4342 4140+  byte_158B8:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00016167 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
0001616E 0100 0102 0304 4342 4140+  byte_158CC:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
0001617B 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
00016182                            		even
00016182                            		even
00016182                            
00016182                            ; ---------------------------------------------------------------------------
00016182                            ; Sprite mappings - trapdoor (SBZ)
00016182                            ; ---------------------------------------------------------------------------
00016182                            Map_obj69:
00016182                            	include "_maps\obj69.asm"
00016182                            ; ---------------------------------------------------------------------------
00016182                            ; Sprite mappings - trapdoor (SBZ)
00016182                            ; ---------------------------------------------------------------------------
00016182 0000                       		dc.w byte_158E6-Map_obj69
00016184 0000                       		dc.w byte_158FB-Map_obj69
00016186 0000                       		dc.w byte_15924-Map_obj69
00016188 04                         byte_158E6:	dc.b 4
00016189 F40E 0000 C0               		dc.b $F4, $E, 0, 0, $C0
0001618E F40E 0800 E0               		dc.b $F4, $E, 8, 0, $E0
00016193 F40E 0000 00               		dc.b $F4, $E, 0, 0, 0
00016198 F40E 0800 20               		dc.b $F4, $E, 8, 0, $20
0001619D 08                         byte_158FB:	dc.b 8
0001619E F20F 000C B6               		dc.b $F2, $F, 0, $C, $B6
000161A3 1A0F 180C D6               		dc.b $1A, $F, $18, $C, $D6
000161A8 020A 001C D6               		dc.b 2,	$A, 0, $1C, $D6
000161AD 120A 181C BE               		dc.b $12, $A, $18, $1C,	$BE
000161B2 F20F 080C 2A               		dc.b $F2, $F, 8, $C, $2A
000161B7 1A0F 100C 0A               		dc.b $1A, $F, $10, $C, $A
000161BC 020A 081C 12               		dc.b 2,	$A, 8, $1C, $12
000161C1 120A 101C 2A               		dc.b $12, $A, $10, $1C,	$2A
000161C6 04                         byte_15924:	dc.b 4
000161C7 000B 0025 B4               		dc.b 0,	$B, 0, $25, $B4
000161CC 200B 1025 B4               		dc.b $20, $B, $10, $25,	$B4
000161D1 000B 0025 34               		dc.b 0,	$B, 0, $25, $34
000161D6 200B 1025 34               		dc.b $20, $B, $10, $25,	$34
000161DC 00                         		even
000161DC 00                         		even
000161DC                            
000161DC                            ; ---------------------------------------------------------------------------
000161DC                            ; Sprite mappings - spinning platforms (SBZ)
000161DC                            ; ---------------------------------------------------------------------------
000161DC                            Map_obj69a:
000161DC                            	include "_maps\obj69a.asm"
000161DC                            ; ---------------------------------------------------------------------------
000161DC                            ; Sprite mappings - spinning platforms (SBZ)
000161DC                            ; ---------------------------------------------------------------------------
000161DC 0000 0000                  		dc.w byte_15944-Map_obj69a, byte_1594F-Map_obj69a
000161E0 0000 0000                  		dc.w byte_1595A-Map_obj69a, byte_15965-Map_obj69a
000161E4 0000                       		dc.w byte_15970-Map_obj69a
000161E6 02                         byte_15944:	dc.b 2
000161E7 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
000161EC F805 0800 00               		dc.b $F8, 5, 8,	0, 0
000161F1 02                         byte_1594F:	dc.b 2
000161F2 F00D 0014 F0               		dc.b $F0, $D, 0, $14, $F0
000161F7 000D 001C F0               		dc.b 0,	$D, 0, $1C, $F0
000161FC 02                         byte_1595A:	dc.b 2
000161FD F009 0004 F0               		dc.b $F0, 9, 0,	4, $F0
00016202 0009 000A F8               		dc.b 0,	9, 0, $A, $F8
00016207 02                         byte_15965:	dc.b 2
00016208 F009 0024 F0               		dc.b $F0, 9, 0,	$24, $F0
0001620D 0009 002A F8               		dc.b 0,	9, 0, $2A, $F8
00016212 02                         byte_15970:	dc.b 2
00016213 F005 0010 F8               		dc.b $F0, 5, 0,	$10, $F8
00016218 0005 1010 F8               		dc.b 0,	5, $10,	$10, $F8
0001621E 00                         		even
0001621E 00                         		even
0001621E                            
0001621E                            ; ===========================================================================
0001621E                            ; ---------------------------------------------------------------------------
0001621E                            ; Object 6A - ground saws and pizza cutters (SBZ)
0001621E                            ; ---------------------------------------------------------------------------
0001621E                            
0001621E                            Obj6A:					; XREF: Obj_Index
0001621E 7000                       		moveq	#0,d0
00016220 1028 0024                  		move.b	$24(a0),d0
00016224 323B 0000                  		move.w	Obj6A_Index(pc,d0.w),d1
00016228 4EFB 1000                  		jmp	Obj6A_Index(pc,d1.w)
0001622C                            ; ===========================================================================
0001622C 0000                       Obj6A_Index:	dc.w Obj6A_Main-Obj6A_Index
0001622E 0000                       		dc.w Obj6A_Action-Obj6A_Index
00016230                            ; ===========================================================================
00016230                            
00016230                            Obj6A_Main:				; XREF: Obj6A_Index
00016230 5428 0024                  		addq.b	#2,$24(a0)
00016234 217C 0000 0000 0004        		move.l	#Map_obj6A,4(a0)
0001623C 317C 43B5 0002             		move.w	#$43B5,2(a0)
00016242 117C 0004 0001             		move.b	#4,1(a0)
00016248 117C 0004 0018             		move.b	#4,$18(a0)
0001624E 117C 0020 0019             		move.b	#$20,$19(a0)
00016254 3168 0008 003A             		move.w	8(a0),$3A(a0)
0001625A 3168 000C 0038             		move.w	$C(a0),$38(a0)
00016260 0C28 0003 0028             		cmpi.b	#3,$28(a0)
00016266 6400                       		bcc.s	Obj6A_Action
00016268 117C 00A2 0020             		move.b	#$A2,$20(a0)
0001626E                            
0001626E                            Obj6A_Action:				; XREF: Obj6A_Index
0001626E 7000                       		moveq	#0,d0
00016270 1028 0028                  		move.b	$28(a0),d0
00016274 0240 0007                  		andi.w	#7,d0
00016278 D040                       		add.w	d0,d0
0001627A 323B 0000                  		move.w	Obj6A_TypeIndex(pc,d0.w),d1
0001627E 4EBB 1000                  		jsr	Obj6A_TypeIndex(pc,d1.w)
00016282 3028 003A                  		move.w	$3A(a0),d0
00016286 0240 FF80                  		andi.w	#$FF80,d0
0001628A 3238 F700                  		move.w	($FFFFF700).w,d1
0001628E 0441 0080                  		subi.w	#$80,d1
00016292 0241 FF80                  		andi.w	#$FF80,d1
00016296 9041                       		sub.w	d1,d0
00016298 0C40 0280                  		cmpi.w	#$280,d0
0001629C 6200                       		bhi.s	Obj6A_Delete
0001629E 4EF9 0000 DDC2             		jmp	DisplaySprite
000162A4                            ; ===========================================================================
000162A4                            
000162A4                            Obj6A_Delete:
000162A4 4EF9 0000 DDFE             		jmp	DeleteObject
000162AA                            ; ===========================================================================
000162AA 0000 0000                  Obj6A_TypeIndex:dc.w Obj6A_Type00-Obj6A_TypeIndex, Obj6A_Type01-Obj6A_TypeIndex
000162AE 0000 0000                  		dc.w Obj6A_Type02-Obj6A_TypeIndex, Obj6A_Type03-Obj6A_TypeIndex
000162B2 0000                       		dc.w Obj6A_Type04-Obj6A_TypeIndex
000162B4                            ; ===========================================================================
000162B4                            
000162B4                            Obj6A_Type00:				; XREF: Obj6A_TypeIndex
000162B4 4E75                       		rts	
000162B6                            ; ===========================================================================
000162B6                            
000162B6                            Obj6A_Type01:				; XREF: Obj6A_TypeIndex
000162B6 323C 0060                  		move.w	#$60,d1
000162BA 7000                       		moveq	#0,d0
000162BC 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
000162C0 0828 0000 0022             		btst	#0,$22(a0)
000162C6 6700                       		beq.s	Obj6A_Animate01
000162C8 4440                       		neg.w	d0
000162CA D041                       		add.w	d1,d0
000162CC                            
000162CC                            Obj6A_Animate01:
000162CC 3228 003A                  		move.w	$3A(a0),d1
000162D0 9240                       		sub.w	d0,d1
000162D2 3141 0008                  		move.w	d1,8(a0)	; move saw sideways
000162D6 5328 001E                  		subq.b	#1,$1E(a0)
000162DA 6A00                       		bpl.s	loc_15A46
000162DC 117C 0002 001E             		move.b	#2,$1E(a0)	; time between frame changes
000162E2 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
000162E8                            
000162E8                            loc_15A46:
000162E8 4A28 0001                  		tst.b	1(a0)
000162EC 6A00                       		bpl.s	locret_15A60
000162EE 3038 FE04                  		move.w	($FFFFFE04).w,d0
000162F2 0240 000F                  		andi.w	#$F,d0
000162F6 6600                       		bne.s	locret_15A60
000162F8 303C 00B0                  		move.w	#$B0,d0
000162FC 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play saw sound
00016302                            
00016302                            locret_15A60:
00016302 4E75                       		rts	
00016304                            ; ===========================================================================
00016304                            
00016304                            Obj6A_Type02:				; XREF: Obj6A_TypeIndex
00016304 323C 0030                  		move.w	#$30,d1
00016308 7000                       		moveq	#0,d0
0001630A 1038 FE64                  		move.b	($FFFFFE64).w,d0
0001630E 0828 0000 0022             		btst	#0,$22(a0)
00016314 6700                       		beq.s	Obj6A_Animate02
00016316 4440                       		neg.w	d0
00016318 0640 0080                  		addi.w	#$80,d0
0001631C                            
0001631C                            Obj6A_Animate02:
0001631C 3228 0038                  		move.w	$38(a0),d1
00016320 9240                       		sub.w	d0,d1
00016322 3141 000C                  		move.w	d1,$C(a0)	; move saw vertically
00016326 5328 001E                  		subq.b	#1,$1E(a0)
0001632A 6A00                       		bpl.s	loc_15A96
0001632C 117C 0002 001E             		move.b	#2,$1E(a0)
00016332 0868 0000 001A             		bchg	#0,$1A(a0)
00016338                            
00016338                            loc_15A96:
00016338 4A28 0001                  		tst.b	1(a0)
0001633C 6A00                       		bpl.s	locret_15AB0
0001633E 1038 FE64                  		move.b	($FFFFFE64).w,d0
00016342 0C00 0018                  		cmpi.b	#$18,d0
00016346 6600                       		bne.s	locret_15AB0
00016348 303C 00B0                  		move.w	#$B0,d0
0001634C 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play saw sound
00016352                            
00016352                            locret_15AB0:
00016352 4E75                       		rts	
00016354                            ; ===========================================================================
00016354                            
00016354                            Obj6A_Type03:				; XREF: Obj6A_TypeIndex
00016354 4A28 003D                  		tst.b	$3D(a0)
00016358 6600                       		bne.s	Obj6A_Animate03
0001635A 3038 D008                  		move.w	($FFFFD008).w,d0
0001635E 0440 00C0                  		subi.w	#$C0,d0
00016362 6500                       		bcs.s	loc_15B02
00016364 9068 0008                  		sub.w	8(a0),d0
00016368 6500                       		bcs.s	loc_15B02
0001636A 3038 D00C                  		move.w	($FFFFD00C).w,d0
0001636E 0440 0080                  		subi.w	#$80,d0
00016372 B068 000C                  		cmp.w	$C(a0),d0
00016376 6400                       		bcc.s	locret_15B04
00016378 0640 0100                  		addi.w	#$100,d0
0001637C B068 000C                  		cmp.w	$C(a0),d0
00016380 6500                       		bcs.s	locret_15B04
00016382 117C 0001 003D             		move.b	#1,$3D(a0)
00016388 317C 0600 0010             		move.w	#$600,$10(a0)	; move object to the right
0001638E 117C 00A2 0020             		move.b	#$A2,$20(a0)
00016394 117C 0002 001A             		move.b	#2,$1A(a0)
0001639A 303C 00B0                  		move.w	#$B0,d0
0001639E 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play saw sound
000163A4                            
000163A4                            loc_15B02:
000163A4 588F                       		addq.l	#4,sp
000163A6                            
000163A6                            locret_15B04:
000163A6 4E75                       		rts	
000163A8                            ; ===========================================================================
000163A8                            
000163A8                            Obj6A_Animate03:			; XREF: ROM:00015AB6j
000163A8 4EB9 0000 DD9C             		jsr	SpeedToPos
000163AE 3168 0008 003A             		move.w	8(a0),$3A(a0)
000163B4 5328 001E                  		subq.b	#1,$1E(a0)
000163B8 6A00                       		bpl.s	locret_15B24
000163BA 117C 0002 001E             		move.b	#2,$1E(a0)
000163C0 0868 0000 001A             		bchg	#0,$1A(a0)
000163C6                            
000163C6                            locret_15B24:
000163C6 4E75                       		rts	
000163C8                            ; ===========================================================================
000163C8                            
000163C8                            Obj6A_Type04:				; XREF: Obj6A_TypeIndex
000163C8 4A28 003D                  		tst.b	$3D(a0)
000163CC 6600                       		bne.s	Obj6A_Animate04
000163CE 3038 D008                  		move.w	($FFFFD008).w,d0
000163D2 0640 00E0                  		addi.w	#$E0,d0
000163D6 9068 0008                  		sub.w	8(a0),d0
000163DA 6400                       		bcc.s	loc_15B74
000163DC 3038 D00C                  		move.w	($FFFFD00C).w,d0
000163E0 0440 0080                  		subi.w	#$80,d0
000163E4 B068 000C                  		cmp.w	$C(a0),d0
000163E8 6400                       		bcc.s	locret_15B76
000163EA 0640 0100                  		addi.w	#$100,d0
000163EE B068 000C                  		cmp.w	$C(a0),d0
000163F2 6500                       		bcs.s	locret_15B76
000163F4 117C 0001 003D             		move.b	#1,$3D(a0)
000163FA 317C FA00 0010             		move.w	#-$600,$10(a0)	; move object to the left
00016400 117C 00A2 0020             		move.b	#$A2,$20(a0)
00016406 117C 0002 001A             		move.b	#2,$1A(a0)
0001640C 303C 00B0                  		move.w	#$B0,d0
00016410 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play saw sound
00016416                            
00016416                            loc_15B74:
00016416 588F                       		addq.l	#4,sp
00016418                            
00016418                            locret_15B76:
00016418 4E75                       		rts	
0001641A                            ; ===========================================================================
0001641A                            
0001641A                            Obj6A_Animate04:
0001641A 4EB9 0000 DD9C             		jsr	SpeedToPos
00016420 3168 0008 003A             		move.w	8(a0),$3A(a0)
00016426 5328 001E                  		subq.b	#1,$1E(a0)
0001642A 6A00                       		bpl.s	locret_15B96
0001642C 117C 0002 001E             		move.b	#2,$1E(a0)
00016432 0868 0000 001A             		bchg	#0,$1A(a0)
00016438                            
00016438                            locret_15B96:
00016438 4E75                       		rts	
0001643A                            ; ===========================================================================
0001643A                            ; ---------------------------------------------------------------------------
0001643A                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
0001643A                            ; ---------------------------------------------------------------------------
0001643A                            Map_obj6A:
0001643A                            	include "_maps\obj6A.asm"
0001643A                            ; ---------------------------------------------------------------------------
0001643A                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
0001643A                            ; ---------------------------------------------------------------------------
0001643A 0000 0000                  		dc.w byte_15BA0-Map_obj6A, byte_15BC4-Map_obj6A
0001643E 0000 0000                  		dc.w byte_15BE8-Map_obj6A, byte_15BFD-Map_obj6A
00016442 07                         byte_15BA0:	dc.b 7
00016443 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00016448 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
0001644D E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00016452 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00016457 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
0001645C 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00016461 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00016466 07                         byte_15BC4:	dc.b 7
00016467 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
0001646C D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00016471 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00016476 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
0001647B E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00016480 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00016485 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
0001648A 04                         byte_15BE8:	dc.b 4
0001648B E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00016490 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00016495 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
0001649A 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
0001649F 04                         byte_15BFD:	dc.b 4
000164A0 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
000164A5 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
000164AA 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
000164AF 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
000164B4                            		even
000164B4                            		even
000164B4                            
000164B4                            ; ===========================================================================
000164B4                            ; ---------------------------------------------------------------------------
000164B4                            ; Object 6B - stomper (SBZ)
000164B4                            ; ---------------------------------------------------------------------------
000164B4                            
000164B4                            Obj6B:					; XREF: Obj_Index
000164B4 7000                       		moveq	#0,d0
000164B6 1028 0024                  		move.b	$24(a0),d0
000164BA 323B 0000                  		move.w	Obj6B_Index(pc,d0.w),d1
000164BE 4EFB 1000                  		jmp	Obj6B_Index(pc,d1.w)
000164C2                            ; ===========================================================================
000164C2 0000                       Obj6B_Index:	dc.w Obj6B_Main-Obj6B_Index
000164C4 0000                       		dc.w Obj6B_Action-Obj6B_Index
000164C6                            
000164C6 400C 8001                  Obj6B_Var:	dc.b  $40,  $C,	$80,   1 ; width, height, ????,	type number
000164CA 1C20 3803                  		dc.b  $1C, $20,	$38,   3
000164CE 1C20 4004                  		dc.b  $1C, $20,	$40,   4
000164D2 1C20 6004                  		dc.b  $1C, $20,	$60,   4
000164D6 8040 0005                  		dc.b  $80, $40,	  0,   5
000164DA                            ; ===========================================================================
000164DA                            
000164DA                            Obj6B_Main:				; XREF: Obj6B_Index
000164DA 5428 0024                  		addq.b	#2,$24(a0)
000164DE 7000                       		moveq	#0,d0
000164E0 1028 0028                  		move.b	$28(a0),d0
000164E4 E448                       		lsr.w	#2,d0
000164E6 0240 001C                  		andi.w	#$1C,d0
000164EA 47FB 00DA                  		lea	Obj6B_Var(pc,d0.w),a3
000164EE 115B 0019                  		move.b	(a3)+,$19(a0)
000164F2 115B 0016                  		move.b	(a3)+,$16(a0)
000164F6 E448                       		lsr.w	#2,d0
000164F8 1140 001A                  		move.b	d0,$1A(a0)
000164FC 217C 0000 0000 0004        		move.l	#Map_obj6B,4(a0)
00016504 317C 22C0 0002             		move.w	#$22C0,2(a0)
0001650A 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ/SBZ3
00016510 6600                       		bne.s	Obj6B_SBZ12	; if not, branch
00016512 08F8 0000 F7CB             		bset	#0,($FFFFF7CB).w
00016518 6700                       		beq.s	Obj6B_SBZ3
0001651A                            
0001651A                            Obj6B_ChkGone:				; XREF: Obj6B_SBZ3
0001651A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001651E 7000                       		moveq	#0,d0
00016520 1028 0023                  		move.b	$23(a0),d0
00016524 6700                       		beq.s	Obj6B_Delete
00016526 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001652C                            
0001652C                            Obj6B_Delete:
0001652C 4EF9 0000 DDFE             		jmp	DeleteObject
00016532                            ; ===========================================================================
00016532                            
00016532                            Obj6B_SBZ3:				; XREF: Obj6B_Main
00016532 317C 41F0 0002             		move.w	#$41F0,2(a0)
00016538 0C68 0A80 0008             		cmpi.w	#$A80,8(a0)
0001653E 6600                       		bne.s	Obj6B_SBZ12
00016540 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016544 7000                       		moveq	#0,d0
00016546 1028 0023                  		move.b	$23(a0),d0
0001654A 6700                       		beq.s	Obj6B_SBZ12
0001654C 0832 0000 0002             		btst	#0,2(a2,d0.w)
00016552 6700                       		beq.s	Obj6B_SBZ12
00016554 4238 F7CB                  		clr.b	($FFFFF7CB).w
00016558 60C0                       		bra.s	Obj6B_ChkGone
0001655A                            ; ===========================================================================
0001655A                            
0001655A                            Obj6B_SBZ12:				; XREF: Obj6B_Main
0001655A 0028 0004 0001             		ori.b	#4,1(a0)
00016560 117C 0004 0018             		move.b	#4,$18(a0)
00016566 3168 0008 0034             		move.w	8(a0),$34(a0)
0001656C 3168 000C 0030             		move.w	$C(a0),$30(a0)
00016572 7000                       		moveq	#0,d0
00016574 101B                       		move.b	(a3)+,d0
00016576 3140 003C                  		move.w	d0,$3C(a0)
0001657A 7000                       		moveq	#0,d0
0001657C 1028 0028                  		move.b	$28(a0),d0
00016580 6A00                       		bpl.s	Obj6B_Action
00016582 0200 000F                  		andi.b	#$F,d0
00016586 1140 003E                  		move.b	d0,$3E(a0)
0001658A 1153 0028                  		move.b	(a3),$28(a0)
0001658E 0C13 0005                  		cmpi.b	#5,(a3)
00016592 6600                       		bne.s	Obj6B_ChkGone2
00016594 08E8 0004 0001             		bset	#4,1(a0)
0001659A                            
0001659A                            Obj6B_ChkGone2:
0001659A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001659E 7000                       		moveq	#0,d0
000165A0 1028 0023                  		move.b	$23(a0),d0
000165A4 6700                       		beq.s	Obj6B_Action
000165A6 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000165AC                            
000165AC                            Obj6B_Action:				; XREF: Obj6B_Index
000165AC 3F28 0008                  		move.w	8(a0),-(sp)
000165B0 7000                       		moveq	#0,d0
000165B2 1028 0028                  		move.b	$28(a0),d0
000165B6 0240 000F                  		andi.w	#$F,d0
000165BA D040                       		add.w	d0,d0
000165BC 323B 0000                  		move.w	Obj6B_TypeIndex(pc,d0.w),d1
000165C0 4EBB 1000                  		jsr	Obj6B_TypeIndex(pc,d1.w)
000165C4 381F                       		move.w	(sp)+,d4
000165C6 4A28 0001                  		tst.b	1(a0)
000165CA 6A00                       		bpl.s	Obj6B_ChkDel
000165CC 7200                       		moveq	#0,d1
000165CE 1228 0019                  		move.b	$19(a0),d1
000165D2 0641 000B                  		addi.w	#$B,d1
000165D6 7400                       		moveq	#0,d2
000165D8 1428 0016                  		move.b	$16(a0),d2
000165DC 3602                       		move.w	d2,d3
000165DE 5243                       		addq.w	#1,d3
000165E0 6100 9BB0                  		bsr.w	SolidObject
000165E4                            
000165E4                            Obj6B_ChkDel:
000165E4 3028 0034                  		move.w	$34(a0),d0
000165E8 0240 FF80                  		andi.w	#$FF80,d0
000165EC 3238 F700                  		move.w	($FFFFF700).w,d1
000165F0 0441 0080                  		subi.w	#$80,d1
000165F4 0241 FF80                  		andi.w	#$FF80,d1
000165F8 9041                       		sub.w	d1,d0
000165FA 0C40 0280                  		cmpi.w	#$280,d0
000165FE 6200                       		bhi.s	loc_15D64
00016600 4EF9 0000 DDC2             		jmp	DisplaySprite
00016606                            ; ===========================================================================
00016606                            
00016606                            loc_15D64:
00016606 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0001660C 6600                       		bne.s	Obj6B_Delete2
0001660E 4238 F7CB                  		clr.b	($FFFFF7CB).w
00016612 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016616 7000                       		moveq	#0,d0
00016618 1028 0023                  		move.b	$23(a0),d0
0001661C 6700                       		beq.s	Obj6B_Delete2
0001661E 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00016624                            
00016624                            Obj6B_Delete2:
00016624 4EF9 0000 DDFE             		jmp	DeleteObject
0001662A                            ; ===========================================================================
0001662A 0000 0000                  Obj6B_TypeIndex:dc.w Obj6B_Type00-Obj6B_TypeIndex, Obj6B_Type01-Obj6B_TypeIndex
0001662E 0000 0000                  		dc.w Obj6B_Type02-Obj6B_TypeIndex, Obj6B_Type03-Obj6B_TypeIndex
00016632 0000 0000                  		dc.w Obj6B_Type04-Obj6B_TypeIndex, Obj6B_Type05-Obj6B_TypeIndex
00016636                            ; ===========================================================================
00016636                            
00016636                            Obj6B_Type00:				; XREF: Obj6B_TypeIndex
00016636 4E75                       		rts	
00016638                            ; ===========================================================================
00016638                            
00016638                            Obj6B_Type01:				; XREF: Obj6B_TypeIndex
00016638 4A28 0038                  		tst.b	$38(a0)
0001663C 6600                       		bne.s	loc_15DB4
0001663E 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00016642 7000                       		moveq	#0,d0
00016644 1028 003E                  		move.b	$3E(a0),d0
00016648 0832 0000 0000             		btst	#0,(a2,d0.w)
0001664E 6700                       		beq.s	loc_15DC2
00016650 117C 0001 0038             		move.b	#1,$38(a0)
00016656                            
00016656                            loc_15DB4:
00016656 3028 003C                  		move.w	$3C(a0),d0
0001665A B068 003A                  		cmp.w	$3A(a0),d0
0001665E 6700                       		beq.s	loc_15DE0
00016660 5468 003A                  		addq.w	#2,$3A(a0)
00016664                            
00016664                            loc_15DC2:
00016664 3028 003A                  		move.w	$3A(a0),d0
00016668 0828 0000 0022             		btst	#0,$22(a0)
0001666E 6700                       		beq.s	loc_15DD4
00016670 4440                       		neg.w	d0
00016672 0640 0080                  		addi.w	#$80,d0
00016676                            
00016676                            loc_15DD4:
00016676 3228 0034                  		move.w	$34(a0),d1
0001667A 9240                       		sub.w	d0,d1
0001667C 3141 0008                  		move.w	d1,8(a0)
00016680 4E75                       		rts	
00016682                            ; ===========================================================================
00016682                            
00016682                            loc_15DE0:
00016682 5228 0028                  		addq.b	#1,$28(a0)
00016686 317C 00B4 0036             		move.w	#$B4,$36(a0)
0001668C 4228 0038                  		clr.b	$38(a0)
00016690 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016694 7000                       		moveq	#0,d0
00016696 1028 0023                  		move.b	$23(a0),d0
0001669A 67C8                       		beq.s	loc_15DC2
0001669C 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000166A2 60C0                       		bra.s	loc_15DC2
000166A4                            ; ===========================================================================
000166A4                            
000166A4                            Obj6B_Type02:				; XREF: Obj6B_TypeIndex
000166A4 4A28 0038                  		tst.b	$38(a0)
000166A8 6600                       		bne.s	loc_15E14
000166AA 5368 0036                  		subq.w	#1,$36(a0)
000166AE 6600                       		bne.s	loc_15E1E
000166B0 117C 0001 0038             		move.b	#1,$38(a0)
000166B6                            
000166B6                            loc_15E14:
000166B6 4A68 003A                  		tst.w	$3A(a0)
000166BA 6700                       		beq.s	loc_15E3C
000166BC 5568 003A                  		subq.w	#2,$3A(a0)
000166C0                            
000166C0                            loc_15E1E:
000166C0 3028 003A                  		move.w	$3A(a0),d0
000166C4 0828 0000 0022             		btst	#0,$22(a0)
000166CA 6700                       		beq.s	loc_15E30
000166CC 4440                       		neg.w	d0
000166CE 0640 0080                  		addi.w	#$80,d0
000166D2                            
000166D2                            loc_15E30:
000166D2 3228 0034                  		move.w	$34(a0),d1
000166D6 9240                       		sub.w	d0,d1
000166D8 3141 0008                  		move.w	d1,8(a0)
000166DC 4E75                       		rts	
000166DE                            ; ===========================================================================
000166DE                            
000166DE                            loc_15E3C:
000166DE 5328 0028                  		subq.b	#1,$28(a0)
000166E2 4228 0038                  		clr.b	$38(a0)
000166E6 45F8 FC00                  		lea	($FFFFFC00).w,a2
000166EA 7000                       		moveq	#0,d0
000166EC 1028 0023                  		move.b	$23(a0),d0
000166F0 67CE                       		beq.s	loc_15E1E
000166F2 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
000166F8 60C6                       		bra.s	loc_15E1E
000166FA                            ; ===========================================================================
000166FA                            
000166FA                            Obj6B_Type03:				; XREF: Obj6B_TypeIndex
000166FA 4A28 0038                  		tst.b	$38(a0)
000166FE 6600                       		bne.s	loc_15E7C
00016700 4A68 003A                  		tst.w	$3A(a0)
00016704 6700                       		beq.s	loc_15E6A
00016706 5368 003A                  		subq.w	#1,$3A(a0)
0001670A 6000                       		bra.s	loc_15E8E
0001670C                            ; ===========================================================================
0001670C                            
0001670C                            loc_15E6A:
0001670C 5368 0036                  		subq.w	#1,$36(a0)
00016710 6A00                       		bpl.s	loc_15E8E
00016712 317C 003C 0036             		move.w	#$3C,$36(a0)
00016718 117C 0001 0038             		move.b	#1,$38(a0)
0001671E                            
0001671E                            loc_15E7C:
0001671E 5068 003A                  		addq.w	#8,$3A(a0)
00016722 3028 003A                  		move.w	$3A(a0),d0
00016726 B068 003C                  		cmp.w	$3C(a0),d0
0001672A 6600                       		bne.s	loc_15E8E
0001672C 4228 0038                  		clr.b	$38(a0)
00016730                            
00016730                            loc_15E8E:
00016730 3028 003A                  		move.w	$3A(a0),d0
00016734 0828 0000 0022             		btst	#0,$22(a0)
0001673A 6700                       		beq.s	loc_15EA0
0001673C 4440                       		neg.w	d0
0001673E 0640 0038                  		addi.w	#$38,d0
00016742                            
00016742                            loc_15EA0:
00016742 3228 0030                  		move.w	$30(a0),d1
00016746 D240                       		add.w	d0,d1
00016748 3141 000C                  		move.w	d1,$C(a0)
0001674C 4E75                       		rts	
0001674E                            ; ===========================================================================
0001674E                            
0001674E                            Obj6B_Type04:				; XREF: Obj6B_TypeIndex
0001674E 4A28 0038                  		tst.b	$38(a0)
00016752 6600                       		bne.s	loc_15ED0
00016754 4A68 003A                  		tst.w	$3A(a0)
00016758 6700                       		beq.s	loc_15EBE
0001675A 5168 003A                  		subq.w	#8,$3A(a0)
0001675E 6000                       		bra.s	loc_15EF0
00016760                            ; ===========================================================================
00016760                            
00016760                            loc_15EBE:
00016760 5368 0036                  		subq.w	#1,$36(a0)
00016764 6A00                       		bpl.s	loc_15EF0
00016766 317C 003C 0036             		move.w	#$3C,$36(a0)
0001676C 117C 0001 0038             		move.b	#1,$38(a0)
00016772                            
00016772                            loc_15ED0:
00016772 3028 003A                  		move.w	$3A(a0),d0
00016776 B068 003C                  		cmp.w	$3C(a0),d0
0001677A 6700                       		beq.s	loc_15EE0
0001677C 5068 003A                  		addq.w	#8,$3A(a0)
00016780 6000                       		bra.s	loc_15EF0
00016782                            ; ===========================================================================
00016782                            
00016782                            loc_15EE0:
00016782 5368 0036                  		subq.w	#1,$36(a0)
00016786 6A00                       		bpl.s	loc_15EF0
00016788 317C 003C 0036             		move.w	#$3C,$36(a0)
0001678E 4228 0038                  		clr.b	$38(a0)
00016792                            
00016792                            loc_15EF0:
00016792 3028 003A                  		move.w	$3A(a0),d0
00016796 0828 0000 0022             		btst	#0,$22(a0)
0001679C 6700                       		beq.s	loc_15F02
0001679E 4440                       		neg.w	d0
000167A0 0640 0038                  		addi.w	#$38,d0
000167A4                            
000167A4                            loc_15F02:
000167A4 3228 0030                  		move.w	$30(a0),d1
000167A8 D240                       		add.w	d0,d1
000167AA 3141 000C                  		move.w	d1,$C(a0)
000167AE 4E75                       		rts	
000167B0                            ; ===========================================================================
000167B0                            
000167B0                            Obj6B_Type05:				; XREF: Obj6B_TypeIndex
000167B0 4A28 0038                  		tst.b	$38(a0)
000167B4 6600                       		bne.s	loc_15F3E
000167B6 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
000167BA 7000                       		moveq	#0,d0
000167BC 1028 003E                  		move.b	$3E(a0),d0
000167C0 0832 0000 0000             		btst	#0,(a2,d0.w)
000167C6 6700                       		beq.s	locret_15F5C
000167C8 117C 0001 0038             		move.b	#1,$38(a0)
000167CE 45F8 FC00                  		lea	($FFFFFC00).w,a2
000167D2 7000                       		moveq	#0,d0
000167D4 1028 0023                  		move.b	$23(a0),d0
000167D8 6700                       		beq.s	loc_15F3E
000167DA 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000167E0                            
000167E0                            loc_15F3E:
000167E0 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
000167E8 06A8 0000 8000 000C        		addi.l	#$8000,$C(a0)
000167F0 3168 0008 0034             		move.w	8(a0),$34(a0)
000167F6 0C68 0980 0008             		cmpi.w	#$980,8(a0)
000167FC 6700                       		beq.s	loc_15F5E
000167FE                            
000167FE                            locret_15F5C:
000167FE 4E75                       		rts	
00016800                            ; ===========================================================================
00016800                            
00016800                            loc_15F5E:
00016800 4228 0028                  		clr.b	$28(a0)
00016804 4228 0038                  		clr.b	$38(a0)
00016808 4E75                       		rts	
0001680A                            ; ===========================================================================
0001680A                            ; ---------------------------------------------------------------------------
0001680A                            ; Sprite mappings - stomper and	platforms (SBZ)
0001680A                            ; ---------------------------------------------------------------------------
0001680A                            Map_obj6B:
0001680A                            	include "_maps\obj6B.asm"
0001680A                            ; ---------------------------------------------------------------------------
0001680A                            ; Sprite mappings - stomper and	platforms (SBZ)
0001680A                            ; ---------------------------------------------------------------------------
0001680A 0000 0000                  		dc.w byte_15F72-Map_obj6B, byte_15F87-Map_obj6B
0001680E 0000 0000                  		dc.w byte_15F87-Map_obj6B, byte_15F87-Map_obj6B
00016812 0000                       		dc.w byte_15FB0-Map_obj6B
00016814 04                         byte_15F72:	dc.b 4
00016815 F40E 21AF C0               		dc.b $F4, $E, $21, $AF,	$C0
0001681A F40E 21B2 E0               		dc.b $F4, $E, $21, $B2,	$E0
0001681F F40E 21B2 00               		dc.b $F4, $E, $21, $B2,	0
00016824 F40E 29AF 20               		dc.b $F4, $E, $29, $AF,	$20
00016829 08                         byte_15F87:	dc.b 8
0001682A E00C 000C E4               		dc.b $E0, $C, 0, $C, $E4
0001682F E008 0010 04               		dc.b $E0, 8, 0,	$10, 4
00016834 E80E 2013 E4               		dc.b $E8, $E, $20, $13,	$E4
00016839 E80A 201F 04               		dc.b $E8, $A, $20, $1F,	4
0001683E 000E 2013 E4               		dc.b 0,	$E, $20, $13, $E4
00016843 000A 201F 04               		dc.b 0,	$A, $20, $1F, 4
00016848 180C 000C E4               		dc.b $18, $C, 0, $C, $E4
0001684D 1808 0010 04               		dc.b $18, 8, 0,	$10, 4
00016852 0E                         byte_15FB0:	dc.b $E
00016853 C00F 0000 80               		dc.b $C0, $F, 0, 0, $80
00016858 C00F 0010 A0               		dc.b $C0, $F, 0, $10, $A0
0001685D C00F 0020 C0               		dc.b $C0, $F, 0, $20, $C0
00016862 C00F 0010 E0               		dc.b $C0, $F, 0, $10, $E0
00016867 C00F 0020 00               		dc.b $C0, $F, 0, $20, 0
0001686C C00F 0010 20               		dc.b $C0, $F, 0, $10, $20
00016871 C00F 0030 40               		dc.b $C0, $F, 0, $30, $40
00016876 C00D 0040 60               		dc.b $C0, $D, 0, $40, $60
0001687B E00F 0048 80               		dc.b $E0, $F, 0, $48, $80
00016880 E00F 0048 C0               		dc.b $E0, $F, 0, $48, $C0
00016885 E00F 0058 00               		dc.b $E0, $F, 0, $58, 0
0001688A 000F 0048 80               		dc.b 0,	$F, 0, $48, $80
0001688F 000F 0058 C0               		dc.b 0,	$F, 0, $58, $C0
00016894 200F 0058 80               		dc.b $20, $F, 0, $58, $80
0001689A 00                         		even
0001689A 00                         		even
0001689A                            
0001689A                            ; ===========================================================================
0001689A                            ; ---------------------------------------------------------------------------
0001689A                            ; Object 6C - vanishing	platforms (SBZ)
0001689A                            ; ---------------------------------------------------------------------------
0001689A                            
0001689A                            Obj6C:					; XREF: Obj_Index
0001689A 7000                       		moveq	#0,d0
0001689C 1028 0024                  		move.b	$24(a0),d0
000168A0 323B 0000                  		move.w	Obj6C_Index(pc,d0.w),d1
000168A4 4EFB 1000                  		jmp	Obj6C_Index(pc,d1.w)
000168A8                            ; ===========================================================================
000168A8 0000                       Obj6C_Index:	dc.w Obj6C_Main-Obj6C_Index
000168AA 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
000168AC 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
000168AE 0000                       		dc.w loc_16068-Obj6C_Index
000168B0                            ; ===========================================================================
000168B0                            
000168B0                            Obj6C_Main:				; XREF: Obj6C_Index
000168B0 5C28 0024                  		addq.b	#6,$24(a0)
000168B4 217C 0000 0000 0004        		move.l	#Map_obj6C,4(a0)
000168BC 317C 44C3 0002             		move.w	#$44C3,2(a0)
000168C2 0028 0004 0001             		ori.b	#4,1(a0)
000168C8 117C 0010 0019             		move.b	#$10,$19(a0)
000168CE 117C 0004 0018             		move.b	#4,$18(a0)
000168D4 7000                       		moveq	#0,d0
000168D6 1028 0028                  		move.b	$28(a0),d0	; get object type
000168DA 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
000168DE 5240                       		addq.w	#1,d0		; add 1
000168E0 EF48                       		lsl.w	#7,d0		; multiply by $80
000168E2 3200                       		move.w	d0,d1
000168E4 5340                       		subq.w	#1,d0
000168E6 3140 0030                  		move.w	d0,$30(a0)
000168EA 3140 0032                  		move.w	d0,$32(a0)
000168EE 7000                       		moveq	#0,d0
000168F0 1028 0028                  		move.b	$28(a0),d0	; get object type
000168F4 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st digit
000168F8 0641 0080                  		addi.w	#$80,d1
000168FC C0C1                       		mulu.w	d1,d0
000168FE E088                       		lsr.l	#8,d0
00016900 3140 0036                  		move.w	d0,$36(a0)
00016904 5341                       		subq.w	#1,d1
00016906 3141 0038                  		move.w	d1,$38(a0)
0001690A                            
0001690A                            loc_16068:				; XREF: Obj6C_Index
0001690A 3038 FE04                  		move.w	($FFFFFE04).w,d0
0001690E 9068 0036                  		sub.w	$36(a0),d0
00016912 C068 0038                  		and.w	$38(a0),d0
00016916 6600                       		bne.s	Obj6C_Animate
00016918 5928 0024                  		subq.b	#4,$24(a0)
0001691C 6000                       		bra.s	Obj6C_Vanish
0001691E                            ; ===========================================================================
0001691E                            
0001691E                            Obj6C_Animate:
0001691E 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
00016924 4EB9 0000 AE82             		jsr	AnimateSprite
0001692A 6000 953E                  		bra.w	MarkObjGone
0001692E                            ; ===========================================================================
0001692E                            
0001692E                            Obj6C_Vanish:				; XREF: Obj6C_Index
0001692E 5368 0030                  		subq.w	#1,$30(a0)
00016932 6A00                       		bpl.s	loc_160AA
00016934 317C 007F 0030             		move.w	#127,$30(a0)
0001693A 4A28 001C                  		tst.b	$1C(a0)
0001693E 6700                       		beq.s	loc_160A4
00016940 3168 0032 0030             		move.w	$32(a0),$30(a0)
00016946                            
00016946                            loc_160A4:
00016946 0868 0000 001C             		bchg	#0,$1C(a0)
0001694C                            
0001694C                            loc_160AA:
0001694C 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
00016952 4EB9 0000 AE82             		jsr	AnimateSprite
00016958 0828 0001 001A             		btst	#1,$1A(a0)	; has platform vanished?
0001695E 6600                       		bne.s	Obj6C_NotSolid	; if yes, branch
00016960 0C28 0002 0024             		cmpi.b	#2,$24(a0)
00016966 6600                       		bne.s	loc_160D6
00016968 7200                       		moveq	#0,d1
0001696A 1228 0019                  		move.b	$19(a0),d1
0001696E 4EB9 0000 7A4C             		jsr	(PlatformObject).l
00016974 6000 94F4                  		bra.w	MarkObjGone
00016978                            ; ===========================================================================
00016978                            
00016978                            loc_160D6:
00016978 7200                       		moveq	#0,d1
0001697A 1228 0019                  		move.b	$19(a0),d1
0001697E 4EB9 0000 7BC0             		jsr	(ExitPlatform).l
00016984 3428 0008                  		move.w	8(a0),d2
00016988 4EB9 0000 812A             		jsr	(MvSonicOnPtfm2).l
0001698E 6000 94DA                  		bra.w	MarkObjGone
00016992                            ; ===========================================================================
00016992                            
00016992                            Obj6C_NotSolid:				; XREF: Obj6C_Vanish
00016992 0828 0003 0022             		btst	#3,$22(a0)
00016998 6700                       		beq.s	Obj6C_Display
0001699A 43F8 D000                  		lea	($FFFFD000).w,a1
0001699E 08A9 0003 0022             		bclr	#3,$22(a1)
000169A4 08A8 0003 0022             		bclr	#3,$22(a0)
000169AA 117C 0002 0024             		move.b	#2,$24(a0)
000169B0 4228 0025                  		clr.b	$25(a0)
000169B4                            
000169B4                            Obj6C_Display:
000169B4 6000 94B4                  		bra.w	MarkObjGone
000169B8                            ; ===========================================================================
000169B8                            Ani_obj6C:
000169B8                            	include "_anim\obj6C.asm"
000169B8                            ; ---------------------------------------------------------------------------
000169B8                            ; Animation script - vanishing platforms (SBZ)
000169B8                            ; ---------------------------------------------------------------------------
000169B8 0000                       		dc.w byte_1611A-Ani_obj6C
000169BA 0000                       		dc.w byte_16122-Ani_obj6C
000169BC 0700 0102 03FE 0100        byte_1611A:	dc.b 7,	0, 1, 2, 3, $FE, 1, 0
000169C4 0703 0201 00FE 0100        byte_16122:	dc.b 7,	3, 2, 1, 0, $FE, 1, 0
000169CC                            		even
000169CC                            		even
000169CC                            
000169CC                            ; ---------------------------------------------------------------------------
000169CC                            ; Sprite mappings - vanishing platforms	(SBZ)
000169CC                            ; ---------------------------------------------------------------------------
000169CC                            Map_obj6C:
000169CC                            	include "_maps\obj6C.asm"
000169CC                            ; ---------------------------------------------------------------------------
000169CC                            ; Sprite mappings - vanishing platforms	(SBZ)
000169CC                            ; ---------------------------------------------------------------------------
000169CC 0000 0000                  		dc.w byte_16132-Map_obj6C, byte_16138-Map_obj6C
000169D0 0000 0000                  		dc.w byte_1613E-Map_obj6C, byte_16144-Map_obj6C
000169D4 01                         byte_16132:	dc.b 1
000169D5 F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0
000169DA 01                         byte_16138:	dc.b 1
000169DB F807 0010 F8               		dc.b $F8, 7, 0,	$10, $F8
000169E0 01                         byte_1613E:	dc.b 1
000169E1 F803 0018 FC               		dc.b $F8, 3, 0,	$18, $FC
000169E6 00                         byte_16144:	dc.b 0
000169E8 00                         		even
000169E8 00                         		even
000169E8                            
000169E8                            ; ===========================================================================
000169E8                            ; ---------------------------------------------------------------------------
000169E8                            ; Object 6E - electrocution orbs (SBZ)
000169E8                            ; ---------------------------------------------------------------------------
000169E8                            
000169E8                            Obj6E:					; XREF: Obj_Index
000169E8 7000                       		moveq	#0,d0
000169EA 1028 0024                  		move.b	$24(a0),d0
000169EE 323B 0000                  		move.w	Obj6E_Index(pc,d0.w),d1
000169F2 4EFB 1000                  		jmp	Obj6E_Index(pc,d1.w)
000169F6                            ; ===========================================================================
000169F6 0000                       Obj6E_Index:	dc.w Obj6E_Main-Obj6E_Index
000169F8 0000                       		dc.w Obj6E_Shock-Obj6E_Index
000169FA                            ; ===========================================================================
000169FA                            
000169FA                            Obj6E_Main:				; XREF: Obj6E_Index
000169FA 5428 0024                  		addq.b	#2,$24(a0)
000169FE 217C 0000 0000 0004        		move.l	#Map_obj6E,4(a0)
00016A06 317C 047E 0002             		move.w	#$47E,2(a0)
00016A0C 0028 0004 0001             		ori.b	#4,1(a0)
00016A12 117C 0028 0019             		move.b	#$28,$19(a0)
00016A18 7000                       		moveq	#0,d0
00016A1A 1028 0028                  		move.b	$28(a0),d0	; read object type
00016A1E E948                       		lsl.w	#4,d0		; multiply by $10
00016A20 5340                       		subq.w	#1,d0
00016A22 3140 0034                  		move.w	d0,$34(a0)
00016A26                            
00016A26                            Obj6E_Shock:				; XREF: Obj6E_Index
00016A26 3038 FE04                  		move.w	($FFFFFE04).w,d0
00016A2A C068 0034                  		and.w	$34(a0),d0
00016A2E 6600                       		bne.s	Obj6E_Animate
00016A30 117C 0001 001C             		move.b	#1,$1C(a0)	; run "shocking" animation
00016A36 4A28 0001                  		tst.b	1(a0)
00016A3A 6A00                       		bpl.s	Obj6E_Animate
00016A3C 303C 00B1                  		move.w	#$B1,d0
00016A40 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play electricity sound
00016A46                            
00016A46                            Obj6E_Animate:
00016A46 43F9 0000 0000             		lea	(Ani_obj6E).l,a1
00016A4C 4EB9 0000 AE82             		jsr	AnimateSprite
00016A52 117C 0000 0020             		move.b	#0,$20(a0)
00016A58 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is frame number 4 displayed?
00016A5E 6600                       		bne.s	Obj6E_Display	; if not, branch
00016A60 117C 00A4 0020             		move.b	#$A4,$20(a0)	; if yes, make object hurt Sonic
00016A66                            
00016A66                            Obj6E_Display:
00016A66 6000 9402                  		bra.w	MarkObjGone
00016A6A                            ; ===========================================================================
00016A6A                            Ani_obj6E:
00016A6A                            	include "_anim\obj6E.asm"
00016A6A                            ; ---------------------------------------------------------------------------
00016A6A                            ; Animation script - electrocution orbs (SBZ)
00016A6A                            ; ---------------------------------------------------------------------------
00016A6A 0000                       		dc.w byte_161CC-Ani_obj6E
00016A6C 0000                       		dc.w byte_161D0-Ani_obj6E
00016A6E 0700 FF00                  byte_161CC:	dc.b 7,	0, $FF,	0
00016A72 0001 0101 0203 0304 0404+  byte_161D0:	dc.b 0,	1, 1, 1, 2, 3, 3, 4, 4,	4, 5, 5, 5, 0, $FD, 0
00016A82                            		even
00016A82                            		even
00016A82                            
00016A82                            ; ---------------------------------------------------------------------------
00016A82                            ; Sprite mappings - electrocution orbs (SBZ)
00016A82                            ; ---------------------------------------------------------------------------
00016A82                            Map_obj6E:
00016A82                            	include "_maps\obj6E.asm"
00016A82                            Map_26ed:
00016A82 0000                       Map_26ed_0: 	dc.w Map_26ed_C-Map_26ed
00016A84 0000                       Map_26ed_2: 	dc.w Map_26ed_12-Map_26ed
00016A86 0000                       Map_26ed_4: 	dc.w Map_26ed_1D-Map_26ed
00016A88 0000                       Map_26ed_6: 	dc.w Map_26ed_3C-Map_26ed
00016A8A 0000                       Map_26ed_8: 	dc.w Map_26ed_65-Map_26ed
00016A8C 0000                       Map_26ed_A: 	dc.w Map_26ed_84-Map_26ed
00016A8E 01                         Map_26ed_C: 	dc.b $1
00016A8F 0805 0000 F8               	dc.b $8, $5, $0, $0, $F8
00016A94 02                         Map_26ed_12: 	dc.b $2
00016A95 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016A9A 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016A9F 06                         Map_26ed_1D: 	dc.b $6
00016AA0 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016AA5 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016AAA F605 0010 0C               	dc.b $F6, $5, $0, $10, $C
00016AAF F605 0010 1C               	dc.b $F6, $5, $0, $10, $1C
00016AB4 F605 0810 D4               	dc.b $F6, $5, $8, $10, $D4
00016AB9 F605 0810 E4               	dc.b $F6, $5, $8, $10, $E4
00016ABE 08                         Map_26ed_3C: 	dc.b $8
00016ABF F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016AC4 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016AC9 F605 0010 0C               	dc.b $F6, $5, $0, $10, $C
00016ACE F605 0010 1C               	dc.b $F6, $5, $0, $10, $1C
00016AD3 F605 0810 E4               	dc.b $F6, $5, $8, $10, $E4
00016AD8 F605 0010 2C               	dc.b $F6, $5, $0, $10, $2C
00016ADD F605 0810 D4               	dc.b $F6, $5, $8, $10, $D4
00016AE2 F605 0810 C4               	dc.b $F6, $5, $8, $10, $C4
00016AE7 06                         Map_26ed_65: 	dc.b $6
00016AE8 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016AED 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016AF2 F605 0010 1C               	dc.b $F6, $5, $0, $10, $1C
00016AF7 F605 0010 2C               	dc.b $F6, $5, $0, $10, $2C
00016AFC F605 0810 D4               	dc.b $F6, $5, $8, $10, $D4
00016B01 F605 0810 C4               	dc.b $F6, $5, $8, $10, $C4
00016B06 04                         Map_26ed_84: 	dc.b $4
00016B07 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016B0C 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016B11 F605 0010 2C               	dc.b $F6, $5, $0, $10, $2C
00016B16 F605 0810 C4               	dc.b $F6, $5, $8, $10, $C4
00016B1C 00                         	even
00016B1C 00                         	even
00016B1C                            
00016B1C                            ; ===========================================================================
00016B1C                            ; ---------------------------------------------------------------------------
00016B1C                            ; Object 6F - spinning platforms that move around a conveyor belt (SBZ)
00016B1C                            ; ---------------------------------------------------------------------------
00016B1C                            
00016B1C                            Obj6F:					; XREF: Obj_Index
00016B1C 7000                       		moveq	#0,d0
00016B1E 1028 0024                  		move.b	$24(a0),d0
00016B22 323B 0000                  		move.w	Obj6F_Index(pc,d0.w),d1
00016B26 4EBB 1000                  		jsr	Obj6F_Index(pc,d1.w)
00016B2A 3028 0030                  		move.w	$30(a0),d0
00016B2E 0240 FF80                  		andi.w	#$FF80,d0
00016B32 3238 F700                  		move.w	($FFFFF700).w,d1
00016B36 0441 0080                  		subi.w	#$80,d1
00016B3A 0241 FF80                  		andi.w	#$FF80,d1
00016B3E 9041                       		sub.w	d1,d0
00016B40 0C40 0280                  		cmpi.w	#$280,d0
00016B44 6200                       		bhi.s	loc_1629A
00016B46                            
00016B46                            Obj6F_Display:
00016B46 4EF9 0000 DDC2             		jmp	DisplaySprite
00016B4C                            ; ===========================================================================
00016B4C                            
00016B4C                            loc_1629A:
00016B4C 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; check if act	is 3
00016B52 6600                       		bne.s	Obj6F_Act1or2	; if not, branch
00016B54 0C40 FF80                  		cmpi.w	#-$80,d0
00016B58 64EC                       		bcc.s	Obj6F_Display
00016B5A                            
00016B5A                            Obj6F_Act1or2:
00016B5A 1028 002F                  		move.b	$2F(a0),d0
00016B5E 6A00                       		bpl.s	Obj6F_Delete
00016B60 0240 007F                  		andi.w	#$7F,d0
00016B64 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00016B68 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00016B6E                            
00016B6E                            Obj6F_Delete:
00016B6E 4EF9 0000 DDFE             		jmp	DeleteObject
00016B74                            ; ===========================================================================
00016B74 0000                       Obj6F_Index:	dc.w Obj6F_Main-Obj6F_Index
00016B76 0000                       		dc.w loc_163D8-Obj6F_Index
00016B78                            ; ===========================================================================
00016B78                            
00016B78                            Obj6F_Main:				; XREF: Obj6F_Index
00016B78 1028 0028                  		move.b	$28(a0),d0
00016B7C 6B00 0000                  		bmi.w	loc_16380
00016B80 5428 0024                  		addq.b	#2,$24(a0)
00016B84 217C 0001 61DC 0004        		move.l	#Map_obj69a,4(a0)
00016B8C 317C 04DF 0002             		move.w	#$4DF,2(a0)
00016B92 117C 0010 0019             		move.b	#$10,$19(a0)
00016B98 0028 0004 0001             		ori.b	#4,1(a0)
00016B9E 117C 0004 0018             		move.b	#4,$18(a0)
00016BA4 7000                       		moveq	#0,d0
00016BA6 1028 0028                  		move.b	$28(a0),d0
00016BAA 3200                       		move.w	d0,d1
00016BAC E648                       		lsr.w	#3,d0
00016BAE 0240 001E                  		andi.w	#$1E,d0
00016BB2 45FA 0000                  		lea	off_164A6(pc),a2
00016BB6 D4F2 0000                  		adda.w	(a2,d0.w),a2
00016BBA 315A 0038                  		move.w	(a2)+,$38(a0)
00016BBE 315A 0030                  		move.w	(a2)+,$30(a0)
00016BC2 214A 003C                  		move.l	a2,$3C(a0)
00016BC6 0241 000F                  		andi.w	#$F,d1
00016BCA E549                       		lsl.w	#2,d1
00016BCC 1141 0038                  		move.b	d1,$38(a0)
00016BD0 117C 0004 003A             		move.b	#4,$3A(a0)
00016BD6 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00016BDA 6700                       		beq.s	loc_16356
00016BDC 117C 0001 003B             		move.b	#1,$3B(a0)
00016BE2 4428 003A                  		neg.b	$3A(a0)
00016BE6 7200                       		moveq	#0,d1
00016BE8 1228 0038                  		move.b	$38(a0),d1
00016BEC D228 003A                  		add.b	$3A(a0),d1
00016BF0 B228 0039                  		cmp.b	$39(a0),d1
00016BF4 6500                       		bcs.s	loc_16352
00016BF6 1001                       		move.b	d1,d0
00016BF8 7200                       		moveq	#0,d1
00016BFA 4A00                       		tst.b	d0
00016BFC 6A00                       		bpl.s	loc_16352
00016BFE 1228 0039                  		move.b	$39(a0),d1
00016C02 5901                       		subq.b	#4,d1
00016C04                            
00016C04                            loc_16352:
00016C04 1141 0038                  		move.b	d1,$38(a0)
00016C08                            
00016C08                            loc_16356:
00016C08 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00016C0E 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00016C14 4A41                       		tst.w	d1
00016C16 6600                       		bne.s	loc_1636C
00016C18 117C 0001 001C             		move.b	#1,$1C(a0)
00016C1E                            
00016C1E                            loc_1636C:
00016C1E 0C41 0008                  		cmpi.w	#8,d1
00016C22 6600                       		bne.s	loc_16378
00016C24 117C 0000 001C             		move.b	#0,$1C(a0)
00016C2A                            
00016C2A                            loc_16378:
00016C2A 6100 C0D6                  		bsr.w	Obj63_ChangeDir
00016C2E 6000 0000                  		bra.w	loc_163D8
00016C32                            ; ===========================================================================
00016C32                            
00016C32                            loc_16380:				; XREF: Obj6F_Main
00016C32 1140 002F                  		move.b	d0,$2F(a0)
00016C36 0240 007F                  		andi.w	#$7F,d0
00016C3A 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00016C3E 08F2 0000 0000             		bset	#0,(a2,d0.w)
00016C44 6700                       		beq.s	loc_1639A
00016C46 4EF9 0000 DDFE             		jmp	DeleteObject
00016C4C                            ; ===========================================================================
00016C4C                            
00016C4C                            loc_1639A:
00016C4C D040                       		add.w	d0,d0
00016C4E 0240 001E                  		andi.w	#$1E,d0
00016C52 0640 0080                  		addi.w	#$80,d0
00016C56 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00016C5C D4F2 0000                  		adda.w	(a2,d0.w),a2
00016C60 321A                       		move.w	(a2)+,d1
00016C62 2248                       		movea.l	a0,a1
00016C64 6000                       		bra.s	Obj6F_LoadPform
00016C66                            ; ===========================================================================
00016C66                            
00016C66                            Obj6F_Loop:
00016C66 4EB9 0000 E248             		jsr	SingleObjLoad
00016C6C 6600                       		bne.s	loc_163D0
00016C6E                            
00016C6E                            Obj6F_LoadPform:			; XREF: loc_1639A
00016C6E 12BC 006F                  		move.b	#$6F,0(a1)
00016C72 335A 0008                  		move.w	(a2)+,8(a1)
00016C76 335A 000C                  		move.w	(a2)+,$C(a1)
00016C7A 301A                       		move.w	(a2)+,d0
00016C7C 1340 0028                  		move.b	d0,$28(a1)
00016C80                            
00016C80                            loc_163D0:
00016C80 51C9 FFE4                  		dbf	d1,Obj6F_Loop
00016C84                            
00016C84 588F                       		addq.l	#4,sp
00016C86 4E75                       		rts	
00016C88                            ; ===========================================================================
00016C88                            
00016C88                            loc_163D8:				; XREF: Obj6F_Index
00016C88 43F9 0000 0000             		lea	(Ani_obj6F).l,a1
00016C8E 4EB9 0000 AE82             		jsr	AnimateSprite
00016C94 4A28 001A                  		tst.b	$1A(a0)
00016C98 6600                       		bne.s	loc_16404
00016C9A 3F28 0008                  		move.w	8(a0),-(sp)
00016C9E 6100 0000                  		bsr.w	loc_16424
00016CA2 323C 001B                  		move.w	#$1B,d1
00016CA6 343C 0007                  		move.w	#7,d2
00016CAA 3602                       		move.w	d2,d3
00016CAC 5243                       		addq.w	#1,d3
00016CAE 381F                       		move.w	(sp)+,d4
00016CB0 6000 94E0                  		bra.w	SolidObject
00016CB4                            ; ===========================================================================
00016CB4                            
00016CB4                            loc_16404:
00016CB4 0828 0003 0022             		btst	#3,$22(a0)
00016CBA 6700                       		beq.s	loc_16420
00016CBC 43F8 D000                  		lea	($FFFFD000).w,a1
00016CC0 08A9 0003 0022             		bclr	#3,$22(a1)
00016CC6 08A8 0003 0022             		bclr	#3,$22(a0)
00016CCC 4228 0025                  		clr.b	$25(a0)
00016CD0                            
00016CD0                            loc_16420:
00016CD0 6000 0002                  		bra.w	*+4
00016CD4                            
00016CD4                            loc_16424:
00016CD4 3028 0008                  		move.w	8(a0),d0
00016CD8 B068 0034                  		cmp.w	$34(a0),d0
00016CDC 6600                       		bne.s	loc_16484
00016CDE 3028 000C                  		move.w	$C(a0),d0
00016CE2 B068 0036                  		cmp.w	$36(a0),d0
00016CE6 6600                       		bne.s	loc_16484
00016CE8 7200                       		moveq	#0,d1
00016CEA 1228 0038                  		move.b	$38(a0),d1
00016CEE D228 003A                  		add.b	$3A(a0),d1
00016CF2 B228 0039                  		cmp.b	$39(a0),d1
00016CF6 6500                       		bcs.s	loc_16456
00016CF8 1001                       		move.b	d1,d0
00016CFA 7200                       		moveq	#0,d1
00016CFC 4A00                       		tst.b	d0
00016CFE 6A00                       		bpl.s	loc_16456
00016D00 1228 0039                  		move.b	$39(a0),d1
00016D04 5901                       		subq.b	#4,d1
00016D06                            
00016D06                            loc_16456:
00016D06 1141 0038                  		move.b	d1,$38(a0)
00016D0A 2268 003C                  		movea.l	$3C(a0),a1
00016D0E 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00016D14 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00016D1A 4A41                       		tst.w	d1
00016D1C 6600                       		bne.s	loc_16474
00016D1E 117C 0001 001C             		move.b	#1,$1C(a0)
00016D24                            
00016D24                            loc_16474:
00016D24 0C41 0008                  		cmpi.w	#8,d1
00016D28 6600                       		bne.s	loc_16480
00016D2A 117C 0000 001C             		move.b	#0,$1C(a0)
00016D30                            
00016D30                            loc_16480:
00016D30 6100 BFD0                  		bsr.w	Obj63_ChangeDir
00016D34                            
00016D34                            loc_16484:
00016D34 4EF9 0000 DD9C             		jmp	SpeedToPos
00016D3A                            ; ===========================================================================
00016D3A                            Ani_obj6F:
00016D3A                            	include "_anim\obj6F.asm"
00016D3A                            ; ---------------------------------------------------------------------------
00016D3A                            ; Animation script - platform on conveyor belt (SBZ)
00016D3A                            ; ---------------------------------------------------------------------------
00016D3A 0000                       		dc.w byte_1648E-Ani_obj6F
00016D3C 0000                       		dc.w byte_164A2-Ani_obj6F
00016D3E 0000 0102 0304 4342 4140+  byte_1648E:	dc.b 0,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00016D4B 6423 2221 00FF 00          		dc.b $64, $23, $22, $21, 0, $FF, 0
00016D52 0F00 FF                    byte_164A2:	dc.b $F, 0, $FF
00016D56 00                         		even
00016D56 00                         		even
00016D56                            
00016D56 0000 0000 0000             off_164A6:	dc.w word_164B2-off_164A6, word_164C6-off_164A6, word_164DA-off_164A6
00016D5C 0000 0000 0000             		dc.w word_164EE-off_164A6, word_16502-off_164A6, word_16516-off_164A6
00016D62 0010 0E80 0E14 0370 0EEF+  word_164B2:	dc.w $10, $E80,	$E14, $370, $EEF, $302,	$EEF, $340, $E14, $3AE
00016D76 0010 0F80 0F14 02E0 0FEF+  word_164C6:	dc.w $10, $F80,	$F14, $2E0, $FEF, $272,	$FEF, $2B0, $F14, $31E
00016D8A 0010 1080 1014 0270 10EF+  word_164DA:	dc.w $10, $1080, $1014,	$270, $10EF, $202, $10EF, $240,	$1014, $2AE
00016D9E 0010 0F80 0F14 0570 0FEF+  word_164EE:	dc.w $10, $F80,	$F14, $570, $FEF, $502,	$FEF, $540, $F14, $5AE
00016DB2 0010 1B80 1B14 0670 1BEF+  word_16502:	dc.w $10, $1B80, $1B14,	$670, $1BEF, $602, $1BEF, $640,	$1B14, $6AE
00016DC6 0010 1C80 1C14 05E0 1CEF+  word_16516:	dc.w $10, $1C80, $1C14,	$5E0, $1CEF, $572, $1CEF, $5B0,	$1C14, $61E
00016DDA                            ; ===========================================================================
00016DDA                            ; ---------------------------------------------------------------------------
00016DDA                            ; Object 70 - large girder block (SBZ)
00016DDA                            ; ---------------------------------------------------------------------------
00016DDA                            
00016DDA                            Obj70:					; XREF: Obj_Index
00016DDA 7000                       		moveq	#0,d0
00016DDC 1028 0024                  		move.b	$24(a0),d0
00016DE0 323B 0000                  		move.w	Obj70_Index(pc,d0.w),d1
00016DE4 4EFB 1000                  		jmp	Obj70_Index(pc,d1.w)
00016DE8                            ; ===========================================================================
00016DE8 0000                       Obj70_Index:	dc.w Obj70_Main-Obj70_Index
00016DEA 0000                       		dc.w Obj70_Action-Obj70_Index
00016DEC                            ; ===========================================================================
00016DEC                            
00016DEC                            Obj70_Main:				; XREF: Obj70_Index
00016DEC 5428 0024                  		addq.b	#2,$24(a0)
00016DF0 217C 0000 0000 0004        		move.l	#Map_obj70,4(a0)
00016DF8 317C 42F0 0002             		move.w	#$42F0,2(a0)
00016DFE 0028 0004 0001             		ori.b	#4,1(a0)
00016E04 117C 0004 0018             		move.b	#4,$18(a0)
00016E0A 117C 0060 0019             		move.b	#$60,$19(a0)
00016E10 117C 0018 0016             		move.b	#$18,$16(a0)
00016E16 3168 0008 0032             		move.w	8(a0),$32(a0)
00016E1C 3168 000C 0030             		move.w	$C(a0),$30(a0)
00016E22 6100 0000                  		bsr.w	Obj70_Move2
00016E26                            
00016E26                            Obj70_Action:				; XREF: Obj70_Index
00016E26 3F28 0008                  		move.w	8(a0),-(sp)
00016E2A 4A68 003A                  		tst.w	$3A(a0)
00016E2E 6700                       		beq.s	Obj70_Move
00016E30 5368 003A                  		subq.w	#1,$3A(a0)
00016E34 6600                       		bne.s	Obj70_Solid
00016E36                            
00016E36                            Obj70_Move:
00016E36 4EB9 0000 DD9C             		jsr	SpeedToPos
00016E3C 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from movement duration
00016E40 6600                       		bne.s	Obj70_Solid	; if time remains, branch
00016E42 6100 0000                  		bsr.w	Obj70_Move2	; if time is zero, branch
00016E46                            
00016E46                            Obj70_Solid:
00016E46 381F                       		move.w	(sp)+,d4
00016E48 4A28 0001                  		tst.b	1(a0)
00016E4C 6A00                       		bpl.s	Obj70_ChkDel
00016E4E 7200                       		moveq	#0,d1
00016E50 1228 0019                  		move.b	$19(a0),d1
00016E54 0641 000B                  		addi.w	#$B,d1
00016E58 7400                       		moveq	#0,d2
00016E5A 1428 0016                  		move.b	$16(a0),d2
00016E5E 3602                       		move.w	d2,d3
00016E60 5243                       		addq.w	#1,d3
00016E62 6100 932E                  		bsr.w	SolidObject
00016E66                            
00016E66                            Obj70_ChkDel:
00016E66 3028 0032                  		move.w	$32(a0),d0
00016E6A 0240 FF80                  		andi.w	#$FF80,d0
00016E6E 3238 F700                  		move.w	($FFFFF700).w,d1
00016E72 0441 0080                  		subi.w	#$80,d1
00016E76 0241 FF80                  		andi.w	#$FF80,d1
00016E7A 9041                       		sub.w	d1,d0
00016E7C 0C40 0280                  		cmpi.w	#$280,d0
00016E80 6200                       		bhi.s	Obj70_Delete
00016E82 4EF9 0000 DDC2             		jmp	DisplaySprite
00016E88                            ; ===========================================================================
00016E88                            
00016E88                            Obj70_Delete:
00016E88 4EF9 0000 DDFE             		jmp	DeleteObject
00016E8E                            ; ===========================================================================
00016E8E                            
00016E8E                            Obj70_Move2:				; XREF: Obj70_Main
00016E8E 1028 0038                  		move.b	$38(a0),d0
00016E92 0240 0018                  		andi.w	#$18,d0
00016E96 43F9 0000 0000             		lea	(Obj70_MoveData).l,a1
00016E9C 43F1 0000                  		lea	(a1,d0.w),a1
00016EA0 3159 0010                  		move.w	(a1)+,$10(a0)
00016EA4 3159 0012                  		move.w	(a1)+,$12(a0)
00016EA8 3159 0034                  		move.w	(a1)+,$34(a0)
00016EAC 5028 0038                  		addq.b	#8,$38(a0)	; use next movedata set
00016EB0 317C 0007 003A             		move.w	#7,$3A(a0)
00016EB6 4E75                       		rts	
00016EB8                            ; ===========================================================================
00016EB8 0100 0000 0060 0000        Obj70_MoveData:	dc.w   $100,	 0,   $60,     0 ; x-speed, y-speed, duration, blank
00016EC0 0000 0100 0030 0000        		dc.w	  0,  $100,   $30,     0
00016EC8 FF00 FFC0 0060 0000        		dc.w  $FF00, $FFC0,   $60,     0
00016ED0 0000 FF00 0018 0000        		dc.w	  0, $FF00,   $18,     0
00016ED8                            ; ---------------------------------------------------------------------------
00016ED8                            ; Sprite mappings - large girder block (SBZ)
00016ED8                            ; ---------------------------------------------------------------------------
00016ED8                            Map_obj70:
00016ED8                            	include "_maps\obj70.asm"
00016ED8                            ; ---------------------------------------------------------------------------
00016ED8                            ; Sprite mappings - large girder block (SBZ)
00016ED8                            ; ---------------------------------------------------------------------------
00016ED8 0000                       		dc.w byte_1662A-Map_obj70
00016EDA 0C                         byte_1662A:	dc.b $C
00016EDB E80E 0000 A0               		dc.b $E8, $E, 0, 0, $A0
00016EE0 000E 1000 A0               		dc.b 0,	$E, $10, 0, $A0
00016EE5 E80E 0006 C0               		dc.b $E8, $E, 0, 6, $C0
00016EEA 000E 1006 C0               		dc.b 0,	$E, $10, 6, $C0
00016EEF E80E 0006 E0               		dc.b $E8, $E, 0, 6, $E0
00016EF4 000E 1006 E0               		dc.b 0,	$E, $10, 6, $E0
00016EF9 E80E 0006 00               		dc.b $E8, $E, 0, 6, 0
00016EFE 000E 1006 00               		dc.b 0,	$E, $10, 6, 0
00016F03 E80E 0006 20               		dc.b $E8, $E, 0, 6, $20
00016F08 000E 1006 20               		dc.b 0,	$E, $10, 6, $20
00016F0D E80E 0006 40               		dc.b $E8, $E, 0, 6, $40
00016F12 000E 1006 40               		dc.b 0,	$E, $10, 6, $40
00016F18 00                         		even
00016F18 00                         		even
00016F18                            
00016F18                            ; ===========================================================================
00016F18                            ; ---------------------------------------------------------------------------
00016F18                            ; Object 72 - teleporter (SBZ)
00016F18                            ; ---------------------------------------------------------------------------
00016F18                            
00016F18                            Obj72:					; XREF: Obj_Index
00016F18 7000                       		moveq	#0,d0
00016F1A 1028 0024                  		move.b	$24(a0),d0
00016F1E 323B 0000                  		move.w	Obj72_Index(pc,d0.w),d1
00016F22 4EBB 1000                  		jsr	Obj72_Index(pc,d1.w)
00016F26 3028 0008                  		move.w	8(a0),d0
00016F2A 0240 FF80                  		andi.w	#$FF80,d0
00016F2E 3238 F700                  		move.w	($FFFFF700).w,d1
00016F32 0441 0080                  		subi.w	#$80,d1
00016F36 0241 FF80                  		andi.w	#$FF80,d1
00016F3A 9041                       		sub.w	d1,d0
00016F3C 0C40 0280                  		cmpi.w	#$280,d0
00016F40 6200                       		bhi.s	Obj72_Delete
00016F42 4E75                       		rts	
00016F44                            ; ===========================================================================
00016F44                            
00016F44                            Obj72_Delete:
00016F44 4EF9 0000 DDFE             		jmp	DeleteObject
00016F4A                            ; ===========================================================================
00016F4A 0000                       Obj72_Index:	dc.w Obj72_Main-Obj72_Index
00016F4C 0000                       		dc.w loc_166C8-Obj72_Index
00016F4E 0000                       		dc.w loc_1675E-Obj72_Index
00016F50 0000                       		dc.w loc_16798-Obj72_Index
00016F52                            ; ===========================================================================
00016F52                            
00016F52                            Obj72_Main:				; XREF: Obj72_Index
00016F52 5428 0024                  		addq.b	#2,$24(a0)
00016F56 1028 0028                  		move.b	$28(a0),d0
00016F5A D040                       		add.w	d0,d0
00016F5C 0240 001E                  		andi.w	#$1E,d0
00016F60 45FA 0000                  		lea	Obj72_Data(pc),a2
00016F64 D4F2 0000                  		adda.w	(a2,d0.w),a2
00016F68 315A 003A                  		move.w	(a2)+,$3A(a0)
00016F6C 214A 003C                  		move.l	a2,$3C(a0)
00016F70 315A 0036                  		move.w	(a2)+,$36(a0)
00016F74 315A 0038                  		move.w	(a2)+,$38(a0)
00016F78                            
00016F78                            loc_166C8:				; XREF: Obj72_Index
00016F78 43F8 D000                  		lea	($FFFFD000).w,a1
00016F7C 3029 0008                  		move.w	8(a1),d0
00016F80 9068 0008                  		sub.w	8(a0),d0
00016F84 0828 0000 0022             		btst	#0,$22(a0)
00016F8A 6700                       		beq.s	loc_166E0
00016F8C 0640 000F                  		addi.w	#$F,d0
00016F90                            
00016F90                            loc_166E0:
00016F90 0C40 0010                  		cmpi.w	#$10,d0
00016F94 6400                       		bcc.s	locret_1675C
00016F96 3229 000C                  		move.w	$C(a1),d1
00016F9A 9268 000C                  		sub.w	$C(a0),d1
00016F9E 0641 0020                  		addi.w	#$20,d1
00016FA2 0C41 0040                  		cmpi.w	#$40,d1
00016FA6 6400                       		bcc.s	locret_1675C
00016FA8 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00016FAC 6600                       		bne.s	locret_1675C
00016FAE 0C28 0007 0028             		cmpi.b	#7,$28(a0)
00016FB4 6600                       		bne.s	loc_1670E
00016FB6 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w
00016FBC 6500                       		bcs.s	locret_1675C
00016FBE                            
00016FBE                            loc_1670E:
00016FBE 5428 0024                  		addq.b	#2,$24(a0)
00016FC2 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
00016FC8 137C 0002 001C             		move.b	#2,$1C(a1)	; use Sonic's rolling animation
00016FCE 337C 0800 0014             		move.w	#$800,$14(a1)
00016FD4 337C 0000 0010             		move.w	#0,$10(a1)
00016FDA 337C 0000 0012             		move.w	#0,$12(a1)
00016FE0 08A8 0005 0022             		bclr	#5,$22(a0)
00016FE6 08A9 0005 0022             		bclr	#5,$22(a1)
00016FEC 08E9 0001 0022             		bset	#1,$22(a1)
00016FF2 3368 0008 0008             		move.w	8(a0),8(a1)
00016FF8 3368 000C 000C             		move.w	$C(a0),$C(a1)
00016FFE 4228 0032                  		clr.b	$32(a0)
00017002 303C 00BE                  		move.w	#$BE,d0
00017006 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play Sonic rolling sound
0001700C                            
0001700C                            locret_1675C:
0001700C 4E75                       		rts	
0001700E                            ; ===========================================================================
0001700E                            
0001700E                            loc_1675E:				; XREF: Obj72_Index
0001700E 43F8 D000                  		lea	($FFFFD000).w,a1
00017012 1028 0032                  		move.b	$32(a0),d0
00017016 5428 0032                  		addq.b	#2,$32(a0)
0001701A 4EB9 0000 2CC4             		jsr	(CalcSine).l
00017020 EA40                       		asr.w	#5,d0
00017022 3428 000C                  		move.w	$C(a0),d2
00017026 9440                       		sub.w	d0,d2
00017028 3342 000C                  		move.w	d2,$C(a1)
0001702C 0C28 0080 0032             		cmpi.b	#$80,$32(a0)
00017032 6600                       		bne.s	locret_16796
00017034 6100 0000                  		bsr.w	sub_1681C
00017038 5428 0024                  		addq.b	#2,$24(a0)
0001703C 303C 00BC                  		move.w	#$BC,d0
00017040 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play teleport sound
00017046                            
00017046                            locret_16796:
00017046 4E75                       		rts	
00017048                            ; ===========================================================================
00017048                            
00017048                            loc_16798:				; XREF: Obj72_Index
00017048 588F                       		addq.l	#4,sp
0001704A 43F8 D000                  		lea	($FFFFD000).w,a1
0001704E 5328 002E                  		subq.b	#1,$2E(a0)
00017052 6A00                       		bpl.s	loc_167DA
00017054 3368 0036 0008             		move.w	$36(a0),8(a1)
0001705A 3368 0038 000C             		move.w	$38(a0),$C(a1)
00017060 7200                       		moveq	#0,d1
00017062 1228 003A                  		move.b	$3A(a0),d1
00017066 5801                       		addq.b	#4,d1
00017068 B228 003B                  		cmp.b	$3B(a0),d1
0001706C 6500                       		bcs.s	loc_167C2
0001706E 7200                       		moveq	#0,d1
00017070 6000                       		bra.s	loc_16800
00017072                            ; ===========================================================================
00017072                            
00017072                            loc_167C2:
00017072 1141 003A                  		move.b	d1,$3A(a0)
00017076 2468 003C                  		movea.l	$3C(a0),a2
0001707A 3172 1000 0036             		move.w	(a2,d1.w),$36(a0)
00017080 3172 1002 0038             		move.w	2(a2,d1.w),$38(a0)
00017086 6000 0000                  		bra.w	sub_1681C
0001708A                            ; ===========================================================================
0001708A                            
0001708A                            loc_167DA:
0001708A 2429 0008                  		move.l	8(a1),d2
0001708E 2629 000C                  		move.l	$C(a1),d3
00017092 3029 0010                  		move.w	$10(a1),d0
00017096 48C0                       		ext.l	d0
00017098 E180                       		asl.l	#8,d0
0001709A D480                       		add.l	d0,d2
0001709C 3029 0012                  		move.w	$12(a1),d0
000170A0 48C0                       		ext.l	d0
000170A2 E180                       		asl.l	#8,d0
000170A4 D680                       		add.l	d0,d3
000170A6 2342 0008                  		move.l	d2,8(a1)
000170AA 2343 000C                  		move.l	d3,$C(a1)
000170AE 4E75                       		rts	
000170B0                            ; ===========================================================================
000170B0                            
000170B0                            loc_16800:
000170B0 0269 07FF 000C             		andi.w	#$7FF,$C(a1)
000170B6 4228 0024                  		clr.b	$24(a0)
000170BA 4238 F7C8                  		clr.b	($FFFFF7C8).w
000170BE 337C 0000 0010             		move.w	#0,$10(a1)
000170C4 337C 0200 0012             		move.w	#$200,$12(a1)
000170CA 4E75                       		rts	
000170CC                            
000170CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000170CC                            
000170CC                            
000170CC                            sub_1681C:
000170CC 7000                       		moveq	#0,d0
000170CE 343C 1000                  		move.w	#$1000,d2
000170D2 3028 0036                  		move.w	$36(a0),d0
000170D6 9069 0008                  		sub.w	8(a1),d0
000170DA 6C00                       		bge.s	loc_16830
000170DC 4440                       		neg.w	d0
000170DE 4442                       		neg.w	d2
000170E0                            
000170E0                            loc_16830:
000170E0 7200                       		moveq	#0,d1
000170E2 363C 1000                  		move.w	#$1000,d3
000170E6 3228 0038                  		move.w	$38(a0),d1
000170EA 9269 000C                  		sub.w	$C(a1),d1
000170EE 6C00                       		bge.s	loc_16844
000170F0 4441                       		neg.w	d1
000170F2 4443                       		neg.w	d3
000170F4                            
000170F4                            loc_16844:
000170F4 B240                       		cmp.w	d0,d1
000170F6 6500                       		bcs.s	loc_1687A
000170F8 7200                       		moveq	#0,d1
000170FA 3228 0038                  		move.w	$38(a0),d1
000170FE 9269 000C                  		sub.w	$C(a1),d1
00017102 4841                       		swap	d1
00017104 83C3                       		divs.w	d3,d1
00017106 7000                       		moveq	#0,d0
00017108 3028 0036                  		move.w	$36(a0),d0
0001710C 9069 0008                  		sub.w	8(a1),d0
00017110 6700                       		beq.s	loc_16866
00017112 4840                       		swap	d0
00017114 81C1                       		divs.w	d1,d0
00017116                            
00017116                            loc_16866:
00017116 3340 0010                  		move.w	d0,$10(a1)
0001711A 3343 0012                  		move.w	d3,$12(a1)
0001711E 4A41                       		tst.w	d1
00017120 6A00                       		bpl.s	loc_16874
00017122 4441                       		neg.w	d1
00017124                            
00017124                            loc_16874:
00017124 3141 002E                  		move.w	d1,$2E(a0)
00017128 4E75                       		rts	
0001712A                            ; ===========================================================================
0001712A                            
0001712A                            loc_1687A:
0001712A 7000                       		moveq	#0,d0
0001712C 3028 0036                  		move.w	$36(a0),d0
00017130 9069 0008                  		sub.w	8(a1),d0
00017134 4840                       		swap	d0
00017136 81C2                       		divs.w	d2,d0
00017138 7200                       		moveq	#0,d1
0001713A 3228 0038                  		move.w	$38(a0),d1
0001713E 9269 000C                  		sub.w	$C(a1),d1
00017142 6700                       		beq.s	loc_16898
00017144 4841                       		swap	d1
00017146 83C0                       		divs.w	d0,d1
00017148                            
00017148                            loc_16898:
00017148 3341 0012                  		move.w	d1,$12(a1)
0001714C 3342 0010                  		move.w	d2,$10(a1)
00017150 4A40                       		tst.w	d0
00017152 6A00                       		bpl.s	loc_168A6
00017154 4440                       		neg.w	d0
00017156                            
00017156                            loc_168A6:
00017156 3140 002E                  		move.w	d0,$2E(a0)
0001715A 4E75                       		rts	
0001715C                            ; End of function sub_1681C
0001715C                            
0001715C                            ; ===========================================================================
0001715C 0000 0000 0000             Obj72_Data:	dc.w word_168BC-Obj72_Data, word_168C2-Obj72_Data, word_168C8-Obj72_Data
00017162 0000 0000 0000             		dc.w word_168E6-Obj72_Data, word_168EC-Obj72_Data, word_1690A-Obj72_Data
00017168 0000 0000                  		dc.w word_16910-Obj72_Data, word_1692E-Obj72_Data
0001716C 0004 0794 098C             word_168BC:	dc.w 4,	$794, $98C
00017172 0004 0094 038C             word_168C2:	dc.w 4,	$94, $38C
00017178 001C 0794 02E8             word_168C8:	dc.w $1C, $794,	$2E8
0001717E 07A4 02C0 07D0             		dc.w $7A4, $2C0, $7D0
00017184 02AC 0858 02AC             		dc.w $2AC, $858, $2AC
0001718A 0884 0298 0894             		dc.w $884, $298, $894
00017190 0270 0894 0190             		dc.w $270, $894, $190
00017196 0004 0894 0690             word_168E6:	dc.w 4,	$894, $690
0001719C 001C 1194 0470             word_168EC:	dc.w $1C, $1194, $470
000171A2 1184 0498 1158             		dc.w $1184, $498, $1158
000171A8 04AC 0FD0 04AC             		dc.w $4AC, $FD0, $4AC
000171AE 0FA4 04C0 0F94             		dc.w $FA4, $4C0, $F94
000171B4 04E8 0F94 0590             		dc.w $4E8, $F94, $590
000171BA 0004 1294 0490             word_1690A:	dc.w 4,	$1294, $490
000171C0 001C 1594 FFE8             word_16910:	dc.w $1C, $1594, $FFE8
000171C6 1584 FFC0 1560             		dc.w $1584, $FFC0, $1560
000171CC FFAC 14D0 FFAC             		dc.w $FFAC, $14D0, $FFAC
000171D2 14A4 FF98 1494             		dc.w $14A4, $FF98, $1494
000171D8 FF70 1494 FD90             		dc.w $FF70, $1494, $FD90
000171DE 0004 0894 0090             word_1692E:	dc.w 4,	$894, $90
000171E4                            ; ===========================================================================
000171E4                            ; ---------------------------------------------------------------------------
000171E4                            ; Object 78 - Caterkiller enemy	(MZ, SBZ)
000171E4                            ; ---------------------------------------------------------------------------
000171E4                            
000171E4                            Obj78:					; XREF: Obj_Index
000171E4 7000                       		moveq	#0,d0
000171E6 1028 0024                  		move.b	$24(a0),d0
000171EA 323B 0000                  		move.w	Obj78_Index(pc,d0.w),d1
000171EE 4EFB 1000                  		jmp	Obj78_Index(pc,d1.w)
000171F2                            ; ===========================================================================
000171F2 0000                       Obj78_Index:	dc.w Obj78_Main-Obj78_Index
000171F4 0000                       		dc.w Obj78_Action-Obj78_Index
000171F6 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
000171F8 0000                       		dc.w Obj78_BodySeg2-Obj78_Index
000171FA 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
000171FC 0000                       		dc.w Obj78_Delete-Obj78_Index
000171FE 0000                       		dc.w loc_16CC0-Obj78_Index
00017200                            ; ===========================================================================
00017200                            
00017200                            locret_16950:
00017200 4E75                       		rts	
00017202                            ; ===========================================================================
00017202                            
00017202                            Obj78_Main:				; XREF: Obj78_Index
00017202 117C 0007 0016             		move.b	#7,$16(a0)
00017208 117C 0008 0017             		move.b	#8,$17(a0)
0001720E 4EB9 0000 DD70             		jsr	ObjectFall
00017214 4EBA E4A6                  		jsr	ObjHitFloor
00017218 4A41                       		tst.w	d1
0001721A 6AE4                       		bpl.s	locret_16950
0001721C D368 000C                  		add.w	d1,$C(a0)
00017220 4268 0012                  		clr.w	$12(a0)
00017224 5428 0024                  		addq.b	#2,$24(a0)
00017228 217C 0000 0000 0004        		move.l	#Map_obj78,4(a0)
00017230 317C 22B0 0002             		move.w	#$22B0,2(a0)
00017236 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; if level is SBZ, branch
0001723C 6700                       		beq.s	loc_16996
0001723E 317C 24FF 0002             		move.w	#$24FF,2(a0)	; MZ specific code
00017244                            
00017244                            loc_16996:
00017244 0228 0003 0001             		andi.b	#3,1(a0)
0001724A 0028 0004 0001             		ori.b	#4,1(a0)
00017250 1168 0001 0022             		move.b	1(a0),$22(a0)
00017256 117C 0004 0018             		move.b	#4,$18(a0)
0001725C 117C 0008 0019             		move.b	#8,$19(a0)
00017262 117C 000B 0020             		move.b	#$B,$20(a0)
00017268 3428 0008                  		move.w	8(a0),d2
0001726C 7A0C                       		moveq	#$C,d5
0001726E 0828 0000 0022             		btst	#0,$22(a0)
00017274 6700                       		beq.s	loc_169CA
00017276 4445                       		neg.w	d5
00017278                            
00017278                            loc_169CA:
00017278 1C3C 0004                  		move.b	#4,d6
0001727C 7600                       		moveq	#0,d3
0001727E 7804                       		moveq	#4,d4
00017280 2448                       		movea.l	a0,a2
00017282 7202                       		moveq	#2,d1
00017284                            
00017284                            Obj78_LoadBody:
00017284 4EB9 0000 E25E             		jsr	SingleObjLoad2
0001728A 6600                       		bne.s	Obj78_QuitLoad
0001728C 12BC 0078                  		move.b	#$78,0(a1)	; load body segment object
00017290 1346 0024                  		move.b	d6,$24(a1)
00017294 5406                       		addq.b	#2,d6
00017296 2368 0004 0004             		move.l	4(a0),4(a1)
0001729C 3368 0002 0002             		move.w	2(a0),2(a1)
000172A2 137C 0005 0018             		move.b	#5,$18(a1)
000172A8 137C 0008 0019             		move.b	#8,$19(a1)
000172AE 137C 00CB 0020             		move.b	#$CB,$20(a1)
000172B4 D445                       		add.w	d5,d2
000172B6 3342 0008                  		move.w	d2,8(a1)
000172BA 3368 000C 000C             		move.w	$C(a0),$C(a1)
000172C0 1368 0022 0022             		move.b	$22(a0),$22(a1)
000172C6 1368 0022 0001             		move.b	$22(a0),1(a1)
000172CC 137C 0008 001A             		move.b	#8,$1A(a1)
000172D2 234A 003C                  		move.l	a2,$3C(a1)
000172D6 1344 003C                  		move.b	d4,$3C(a1)
000172DA 5804                       		addq.b	#4,d4
000172DC 2449                       		movea.l	a1,a2
000172DE                            
000172DE                            Obj78_QuitLoad:
000172DE 51C9 FFA4                  		dbf	d1,Obj78_LoadBody ; repeat sequence 2 more times
000172E2                            
000172E2 117C 0007 002A             		move.b	#7,$2A(a0)
000172E8 4228 003C                  		clr.b	$3C(a0)
000172EC                            
000172EC                            Obj78_Action:				; XREF: Obj78_Index
000172EC 4A28 0022                  		tst.b	$22(a0)
000172F0 6B00 0000                  		bmi.w	loc_16C96
000172F4 7000                       		moveq	#0,d0
000172F6 1028 0025                  		move.b	$25(a0),d0
000172FA 323B 0000                  		move.w	Obj78_Index2(pc,d0.w),d1
000172FE 4EBB 1000                  		jsr	Obj78_Index2(pc,d1.w)
00017302 1228 002B                  		move.b	$2B(a0),d1
00017306 6A00                       		bpl.s	Obj78_Display
00017308 43F9 0000 0000             		lea	(Ani_obj78).l,a1
0001730E 1028 0026                  		move.b	$26(a0),d0
00017312 0240 007F                  		andi.w	#$7F,d0
00017316 5828 0026                  		addq.b	#4,$26(a0)
0001731A 1031 0000                  		move.b	(a1,d0.w),d0
0001731E 6A00                       		bpl.s	Obj78_AniHead
00017320 08A8 0007 002B             		bclr	#7,$2B(a0)
00017326 6000                       		bra.s	Obj78_Display
00017328                            ; ===========================================================================
00017328                            
00017328                            Obj78_AniHead:
00017328 0201 0010                  		andi.b	#$10,d1
0001732C D001                       		add.b	d1,d0
0001732E 1140 001A                  		move.b	d0,$1A(a0)
00017332                            
00017332                            Obj78_Display:
00017332 3028 0008                  		move.w	8(a0),d0
00017336 0240 FF80                  		andi.w	#$FF80,d0
0001733A 3238 F700                  		move.w	($FFFFF700).w,d1
0001733E 0441 0080                  		subi.w	#$80,d1
00017342 0241 FF80                  		andi.w	#$FF80,d1
00017346 9041                       		sub.w	d1,d0
00017348 0C40 0280                  		cmpi.w	#$280,d0
0001734C 6200 0000                  		bhi.w	Obj78_ChkGone
00017350 4EF9 0000 DDC2             		jmp	DisplaySprite
00017356                            ; ===========================================================================
00017356                            
00017356                            Obj78_ChkGone:
00017356 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001735A 7000                       		moveq	#0,d0
0001735C 1028 0023                  		move.b	$23(a0),d0
00017360 6700                       		beq.s	loc_16ABC
00017362 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00017368                            
00017368                            loc_16ABC:
00017368 117C 000A 0024             		move.b	#$A,$24(a0)	; run "Obj78_Delete" routine
0001736E 4E75                       		rts	
00017370                            ; ===========================================================================
00017370                            
00017370                            Obj78_Delete:				; XREF: Obj78_Index
00017370 4EF9 0000 DDFE             		jmp	DeleteObject
00017376                            ; ===========================================================================
00017376 0000                       Obj78_Index2:	dc.w Obj78_Move-Obj78_Index2
00017378 0000                       		dc.w loc_16B02-Obj78_Index2
0001737A                            ; ===========================================================================
0001737A                            
0001737A                            Obj78_Move:				; XREF: Obj78_Index2
0001737A 5328 002A                  		subq.b	#1,$2A(a0)
0001737E 6B00                       		bmi.s	Obj78_Move2
00017380 4E75                       		rts	
00017382                            ; ===========================================================================
00017382                            
00017382                            Obj78_Move2:
00017382 5428 0025                  		addq.b	#2,$25(a0)
00017386 117C 0010 002A             		move.b	#$10,$2A(a0)
0001738C 317C FF40 0010             		move.w	#-$C0,$10(a0)
00017392 317C 0040 0014             		move.w	#$40,$14(a0)
00017398 0868 0004 002B             		bchg	#4,$2B(a0)
0001739E 6600                       		bne.s	loc_16AFC
000173A0 4268 0010                  		clr.w	$10(a0)
000173A4 4468 0014                  		neg.w	$14(a0)
000173A8                            
000173A8                            loc_16AFC:
000173A8 08E8 0007 002B             		bset	#7,$2B(a0)
000173AE                            
000173AE                            loc_16B02:				; XREF: Obj78_Index2
000173AE 5328 002A                  		subq.b	#1,$2A(a0)
000173B2 6B00                       		bmi.s	loc_16B5E
000173B4 2F28 0008                  		move.l	8(a0),-(sp)
000173B8 2428 0008                  		move.l	8(a0),d2
000173BC 3028 0010                  		move.w	$10(a0),d0
000173C0 0828 0000 0022             		btst	#0,$22(a0)
000173C6 6700                       		beq.s	loc_16B1E
000173C8 4440                       		neg.w	d0
000173CA                            
000173CA                            loc_16B1E:
000173CA 48C0                       		ext.l	d0
000173CC E180                       		asl.l	#8,d0
000173CE D480                       		add.l	d0,d2
000173D0 2142 0008                  		move.l	d2,8(a0)
000173D4 4EBA E2E6                  		jsr	ObjHitFloor
000173D8 241F                       		move.l	(sp)+,d2
000173DA 0C41 FFF8                  		cmpi.w	#-8,d1
000173DE 6D00                       		blt.s	loc_16B70
000173E0 0C41 000C                  		cmpi.w	#$C,d1
000173E4 6C00                       		bge.s	loc_16B70
000173E6 D368 000C                  		add.w	d1,$C(a0)
000173EA 4842                       		swap	d2
000173EC B468 0008                  		cmp.w	8(a0),d2
000173F0 6700                       		beq.s	locret_16B5C
000173F2 7000                       		moveq	#0,d0
000173F4 1028 003C                  		move.b	$3C(a0),d0
000173F8 5228 003C                  		addq.b	#1,$3C(a0)
000173FC 0228 000F 003C             		andi.b	#$F,$3C(a0)
00017402 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00017406                            
00017406                            locret_16B5C:
00017406 4E75                       		rts	
00017408                            ; ===========================================================================
00017408                            
00017408                            loc_16B5E:
00017408 5528 0025                  		subq.b	#2,$25(a0)
0001740C 117C 0007 002A             		move.b	#7,$2A(a0)
00017412 317C 0000 0010             		move.w	#0,$10(a0)
00017418 4E75                       		rts	
0001741A                            ; ===========================================================================
0001741A                            
0001741A                            loc_16B70:
0001741A 2142 0008                  		move.l	d2,8(a0)
0001741E 0868 0000 0022             		bchg	#0,$22(a0)
00017424 1168 0022 0001             		move.b	$22(a0),1(a0)
0001742A 7000                       		moveq	#0,d0
0001742C 1028 003C                  		move.b	$3C(a0),d0
00017430 11BC 0080 002C             		move.b	#$80,$2C(a0,d0.w)
00017436 5228 003C                  		addq.b	#1,$3C(a0)
0001743A 0228 000F 003C             		andi.b	#$F,$3C(a0)
00017440 4E75                       		rts	
00017442                            ; ===========================================================================
00017442                            
00017442                            Obj78_BodySeg2:				; XREF: Obj78_Index
00017442 2268 003C                  		movea.l	$3C(a0),a1
00017446 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
0001744C 6A00                       		bpl.s	Obj78_BodySeg1
0001744E 43F9 0000 0000             		lea	(Ani_obj78).l,a1
00017454 1028 0026                  		move.b	$26(a0),d0
00017458 0240 007F                  		andi.w	#$7F,d0
0001745C 5828 0026                  		addq.b	#4,$26(a0)
00017460 4A31 0004                  		tst.b	4(a1,d0.w)
00017464 6A00                       		bpl.s	Obj78_AniBody
00017466 5828 0026                  		addq.b	#4,$26(a0)
0001746A                            
0001746A                            Obj78_AniBody:
0001746A 1031 0000                  		move.b	(a1,d0.w),d0
0001746E 5000                       		addq.b	#8,d0
00017470 1140 001A                  		move.b	d0,$1A(a0)
00017474                            
00017474                            Obj78_BodySeg1:				; XREF: Obj78_Index
00017474 2268 003C                  		movea.l	$3C(a0),a1
00017478 4A28 0022                  		tst.b	$22(a0)
0001747C 6B00 0000                  		bmi.w	loc_16C90
00017480 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00017486 1169 0025 0025             		move.b	$25(a1),$25(a0)
0001748C 6700 0000                  		beq.w	loc_16C64
00017490 3169 0014 0014             		move.w	$14(a1),$14(a0)
00017496 3029 0010                  		move.w	$10(a1),d0
0001749A D069 0014                  		add.w	$14(a1),d0
0001749E 3140 0010                  		move.w	d0,$10(a0)
000174A2 2428 0008                  		move.l	8(a0),d2
000174A6 2602                       		move.l	d2,d3
000174A8 3028 0010                  		move.w	$10(a0),d0
000174AC 0828 0000 0022             		btst	#0,$22(a0)
000174B2 6700                       		beq.s	loc_16C0C
000174B4 4440                       		neg.w	d0
000174B6                            
000174B6                            loc_16C0C:
000174B6 48C0                       		ext.l	d0
000174B8 E180                       		asl.l	#8,d0
000174BA D480                       		add.l	d0,d2
000174BC 2142 0008                  		move.l	d2,8(a0)
000174C0 4843                       		swap	d3
000174C2 B668 0008                  		cmp.w	8(a0),d3
000174C6 6700                       		beq.s	loc_16C64
000174C8 7000                       		moveq	#0,d0
000174CA 1028 003C                  		move.b	$3C(a0),d0
000174CE 1231 002C                  		move.b	$2C(a1,d0.w),d1
000174D2 0C01 0080                  		cmpi.b	#-$80,d1
000174D6 6600                       		bne.s	loc_16C50
000174D8 4843                       		swap	d3
000174DA 2143 0008                  		move.l	d3,8(a0)
000174DE 1181 002C                  		move.b	d1,$2C(a0,d0.w)
000174E2 0868 0000 0022             		bchg	#0,$22(a0)
000174E8 1168 0022 0001             		move.b	$22(a0),1(a0)
000174EE 5228 003C                  		addq.b	#1,$3C(a0)
000174F2 0228 000F 003C             		andi.b	#$F,$3C(a0)
000174F8 6000                       		bra.s	loc_16C64
000174FA                            ; ===========================================================================
000174FA                            
000174FA                            loc_16C50:
000174FA 4881                       		ext.w	d1
000174FC D368 000C                  		add.w	d1,$C(a0)
00017500 5228 003C                  		addq.b	#1,$3C(a0)
00017504 0228 000F 003C             		andi.b	#$F,$3C(a0)
0001750A 1181 002C                  		move.b	d1,$2C(a0,d0.w)
0001750E                            
0001750E                            loc_16C64:
0001750E 0C29 000C 0024             		cmpi.b	#$C,$24(a1)
00017514 6700                       		beq.s	loc_16C90
00017516 0C11 0027                  		cmpi.b	#$27,0(a1)
0001751A 6700                       		beq.s	loc_16C7C
0001751C 0C29 000A 0024             		cmpi.b	#$A,$24(a1)
00017522 6600                       		bne.s	loc_16C82
00017524                            
00017524                            loc_16C7C:
00017524 117C 000A 0024             		move.b	#$A,$24(a0)
0001752A                            
0001752A                            loc_16C82:
0001752A 4EF9 0000 DDC2             		jmp	DisplaySprite
00017530                            
00017530                            ; ===========================================================================
00017530 FE00 FE80 0180 0200        Obj78_FragSpeed:dc.w $FE00, $FE80, $180, $200
00017538                            ; ===========================================================================
00017538                            
00017538                            loc_16C90:
00017538 08E9 0007 0022             		bset	#7,$22(a1)
0001753E                            
0001753E                            loc_16C96:
0001753E 7000                       		moveq	#0,d0
00017540 1028 0024                  		move.b	$24(a0),d0
00017544 303B 00E8                  		move.w	Obj78_FragSpeed-2(pc,d0.w),d0
00017548 0828 0000 0022             		btst	#0,$22(a0)
0001754E 6700                       		beq.s	loc_16CAA
00017550 4440                       		neg.w	d0
00017552                            
00017552                            loc_16CAA:
00017552 3140 0010                  		move.w	d0,$10(a0)
00017556 317C FC00 0012             		move.w	#-$400,$12(a0)
0001755C 117C 000C 0024             		move.b	#$C,$24(a0)
00017562 0228 00F8 001A             		andi.b	#-8,$1A(a0)
00017568                            
00017568                            loc_16CC0:				; XREF: Obj78_Index
00017568 4EB9 0000 DD70             		jsr	ObjectFall
0001756E 4A68 0012                  		tst.w	$12(a0)
00017572 6B00                       		bmi.s	loc_16CE0
00017574 4EBA E146                  		jsr	ObjHitFloor
00017578 4A41                       		tst.w	d1
0001757A 6A00                       		bpl.s	loc_16CE0
0001757C D368 000C                  		add.w	d1,$C(a0)
00017580 317C FC00 0012             		move.w	#-$400,$12(a0)
00017586                            
00017586                            loc_16CE0:
00017586 4A28 0001                  		tst.b	1(a0)
0001758A 6A00 FDCA                  		bpl.w	Obj78_ChkGone
0001758E 4EF9 0000 DDC2             		jmp	DisplaySprite
00017594                            ; ===========================================================================
00017594                            Ani_obj78:
00017594                            	include "_anim\obj78.asm"
00017594                            ; ---------------------------------------------------------------------------
00017594                            ; Animation script - Caterkiller enemy (uses non-standard format)
00017594                            ; ---------------------------------------------------------------------------
00017594 0000 0000 0000 0000 0000+  	dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 1
000175A4 0101 0101 0101 0202 0202+  	dc.b 1,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 3, 3, 3, 3, 3
000175B4 0404 0404 0404 0505 0505+  	dc.b 4,	4, 4, 4, 4, 4, 5, 5, 5,	5, 5, 6, 6, 6, 6, 6
000175C4 0606 0707 0707 0707 0707+  	dc.b 6,	6, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, $FF, 7, 7, $FF
000175D4 0707 0707 0707 0707 0707+  	dc.b 7,	7, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, 7, 7, 7, 6
000175E4 0606 0606 0606 0505 0505+  	dc.b 6,	6, 6, 6, 6, 6, 5, 5, 5,	5, 5, 4, 4, 4, 4, 4
000175F4 0403 0303 0303 0202 0202+  	dc.b 4,	3, 3, 3, 3, 3, 2, 2, 2,	2, 2, 1, 1, 1, 1, 1
00017604 0101 0000 0000 0000 0000+  	dc.b 1,	1, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, $FF, 0, 0, $FF
00017614                            	even
00017614                            	even
00017614                            
00017614                            ; ---------------------------------------------------------------------------
00017614                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
00017614                            ; ---------------------------------------------------------------------------
00017614                            Map_obj78:
00017614                            	include "_maps\obj78.asm"
00017614                            ; ---------------------------------------------------------------------------
00017614                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
00017614                            ; ---------------------------------------------------------------------------
00017614 0000 0000                  		dc.w byte_16D9E-Map_obj78, byte_16DA4-Map_obj78
00017618 0000 0000                  		dc.w byte_16DAA-Map_obj78, byte_16DB0-Map_obj78
0001761C 0000 0000                  		dc.w byte_16DB6-Map_obj78, byte_16DBC-Map_obj78
00017620 0000 0000                  		dc.w byte_16DC2-Map_obj78, byte_16DC8-Map_obj78
00017624 0000 0000                  		dc.w byte_16DCE-Map_obj78, byte_16DD4-Map_obj78
00017628 0000 0000                  		dc.w byte_16DDA-Map_obj78, byte_16DE0-Map_obj78
0001762C 0000 0000                  		dc.w byte_16DE6-Map_obj78, byte_16DEC-Map_obj78
00017630 0000 0000                  		dc.w byte_16DF2-Map_obj78, byte_16DF8-Map_obj78
00017634 0000 0000                  		dc.w byte_16DFE-Map_obj78, byte_16E04-Map_obj78
00017638 0000 0000                  		dc.w byte_16E0A-Map_obj78, byte_16E10-Map_obj78
0001763C 0000 0000                  		dc.w byte_16E16-Map_obj78, byte_16E1C-Map_obj78
00017640 0000 0000                  		dc.w byte_16E22-Map_obj78, byte_16E28-Map_obj78
00017644 01                         byte_16D9E:	dc.b 1
00017645 F206 0000 F8               		dc.b $F2, 6, 0,	0, $F8
0001764A 01                         byte_16DA4:	dc.b 1
0001764B F106 0000 F8               		dc.b $F1, 6, 0,	0, $F8
00017650 01                         byte_16DAA:	dc.b 1
00017651 F006 0000 F8               		dc.b $F0, 6, 0,	0, $F8
00017656 01                         byte_16DB0:	dc.b 1
00017657 EF06 0000 F8               		dc.b $EF, 6, 0,	0, $F8
0001765C 01                         byte_16DB6:	dc.b 1
0001765D EE06 0000 F8               		dc.b $EE, 6, 0,	0, $F8
00017662 01                         byte_16DBC:	dc.b 1
00017663 ED06 0000 F8               		dc.b $ED, 6, 0,	0, $F8
00017668 01                         byte_16DC2:	dc.b 1
00017669 EC06 0000 F8               		dc.b $EC, 6, 0,	0, $F8
0001766E 01                         byte_16DC8:	dc.b 1
0001766F EB06 0000 F8               		dc.b $EB, 6, 0,	0, $F8
00017674 01                         byte_16DCE:	dc.b 1
00017675 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001767A 01                         byte_16DD4:	dc.b 1
0001767B F705 000C F8               		dc.b $F7, 5, 0,	$C, $F8
00017680 01                         byte_16DDA:	dc.b 1
00017681 F605 000C F8               		dc.b $F6, 5, 0,	$C, $F8
00017686 01                         byte_16DE0:	dc.b 1
00017687 F505 000C F8               		dc.b $F5, 5, 0,	$C, $F8
0001768C 01                         byte_16DE6:	dc.b 1
0001768D F405 000C F8               		dc.b $F4, 5, 0,	$C, $F8
00017692 01                         byte_16DEC:	dc.b 1
00017693 F305 000C F8               		dc.b $F3, 5, 0,	$C, $F8
00017698 01                         byte_16DF2:	dc.b 1
00017699 F205 000C F8               		dc.b $F2, 5, 0,	$C, $F8
0001769E 01                         byte_16DF8:	dc.b 1
0001769F F105 000C F8               		dc.b $F1, 5, 0,	$C, $F8
000176A4 01                         byte_16DFE:	dc.b 1
000176A5 F206 0006 F8               		dc.b $F2, 6, 0,	6, $F8
000176AA 01                         byte_16E04:	dc.b 1
000176AB F106 0006 F8               		dc.b $F1, 6, 0,	6, $F8
000176B0 01                         byte_16E0A:	dc.b 1
000176B1 F006 0006 F8               		dc.b $F0, 6, 0,	6, $F8
000176B6 01                         byte_16E10:	dc.b 1
000176B7 EF06 0006 F8               		dc.b $EF, 6, 0,	6, $F8
000176BC 01                         byte_16E16:	dc.b 1
000176BD EE06 0006 F8               		dc.b $EE, 6, 0,	6, $F8
000176C2 01                         byte_16E1C:	dc.b 1
000176C3 ED06 0006 F8               		dc.b $ED, 6, 0,	6, $F8
000176C8 01                         byte_16E22:	dc.b 1
000176C9 EC06 0006 F8               		dc.b $EC, 6, 0,	6, $F8
000176CE 01                         byte_16E28:	dc.b 1
000176CF EB06 0006 F8               		dc.b $EB, 6, 0,	6, $F8
000176D4                            		even
000176D4                            		even
000176D4                            
000176D4                            ; ===========================================================================
000176D4                            ; ---------------------------------------------------------------------------
000176D4                            ; Object 79 - lamppost
000176D4                            ; ---------------------------------------------------------------------------
000176D4                            
000176D4                            Obj79:					; XREF: Obj_Index
000176D4 7000                       		moveq	#0,d0
000176D6 1028 0024                  		move.b	$24(a0),d0
000176DA 323B 0000                  		move.w	Obj79_Index(pc,d0.w),d1
000176DE 4EBB 1000                  		jsr	Obj79_Index(pc,d1.w)
000176E2 4EFA 8786                  		jmp	MarkObjGone
000176E6                            ; ===========================================================================
000176E6 0000                       Obj79_Index:	dc.w Obj79_Main-Obj79_Index
000176E8 0000                       		dc.w Obj79_BlueLamp-Obj79_Index
000176EA 0000                       		dc.w Obj79_AfterHit-Obj79_Index
000176EC 0000                       		dc.w Obj79_Twirl-Obj79_Index
000176EE                            ; ===========================================================================
000176EE                            
000176EE                            Obj79_Main:				; XREF: Obj79_Index
000176EE 5428 0024                  		addq.b	#2,$24(a0)
000176F2 217C 0000 0000 0004        		move.l	#Map_obj79,4(a0)
000176FA 317C 07A0 0002             		move.w	#$7A0,2(a0)
00017700 117C 0004 0001             		move.b	#4,1(a0)
00017706 117C 0008 0019             		move.b	#8,$19(a0)
0001770C 117C 0005 0018             		move.b	#5,$18(a0)
00017712 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017716 7000                       		moveq	#0,d0
00017718 1028 0023                  		move.b	$23(a0),d0
0001771C 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00017722 0832 0000 0002             		btst	#0,2(a2,d0.w)
00017728 6600                       		bne.s	Obj79_RedLamp
0001772A 1238 FE30                  		move.b	($FFFFFE30).w,d1
0001772E 0201 007F                  		andi.b	#$7F,d1
00017732 1428 0028                  		move.b	$28(a0),d2	; get lamppost number
00017736 0202 007F                  		andi.b	#$7F,d2
0001773A B202                       		cmp.b	d2,d1		; is lamppost number higher than the number hit?
0001773C 6500                       		bcs.s	Obj79_BlueLamp	; if yes, branch
0001773E                            
0001773E                            Obj79_RedLamp:
0001773E 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00017744 117C 0004 0024             		move.b	#4,$24(a0)	; run "Obj79_AfterHit" routine
0001774A 117C 0003 001A             		move.b	#3,$1A(a0)	; use red lamppost frame
00017750 4E75                       		rts	
00017752                            ; ===========================================================================
00017752                            
00017752                            Obj79_BlueLamp:				; XREF: Obj79_Index
00017752 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00017756 6600 0000                  		bne.w	locret_16F90	; if yes, branch
0001775A 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0001775E 6B00 0000                  		bmi.w	locret_16F90
00017762 1238 FE30                  		move.b	($FFFFFE30).w,d1
00017766 0201 007F                  		andi.b	#$7F,d1
0001776A 1428 0028                  		move.b	$28(a0),d2
0001776E 0202 007F                  		andi.b	#$7F,d2
00017772 B202                       		cmp.b	d2,d1
00017774 6500                       		bcs.s	Obj79_HitLamp
00017776 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001777A 7000                       		moveq	#0,d0
0001777C 1028 0023                  		move.b	$23(a0),d0
00017780 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00017786 117C 0004 0024             		move.b	#4,$24(a0)
0001778C 117C 0003 001A             		move.b	#3,$1A(a0)
00017792 6000 0000                  		bra.w	locret_16F90
00017796                            ; ===========================================================================
00017796                            
00017796                            Obj79_HitLamp:
00017796 3038 D008                  		move.w	($FFFFD008).w,d0
0001779A 9068 0008                  		sub.w	8(a0),d0
0001779E 5040                       		addq.w	#8,d0
000177A0 0C40 0010                  		cmpi.w	#$10,d0
000177A4 6400 0000                  		bcc.w	locret_16F90
000177A8 3038 D00C                  		move.w	($FFFFD00C).w,d0
000177AC 9068 000C                  		sub.w	$C(a0),d0
000177B0 0640 0040                  		addi.w	#$40,d0
000177B4 0C40 0068                  		cmpi.w	#$68,d0
000177B8 6400                       		bcc.s	locret_16F90
000177BA 303C 00A1                  		move.w	#$A1,d0
000177BE 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play lamppost sound
000177C4 5428 0024                  		addq.b	#2,$24(a0)
000177C8 4EB9 0000 E248             		jsr	SingleObjLoad
000177CE 6600                       		bne.s	loc_16F76
000177D0 12BC 0079                  		move.b	#$79,0(a1)	; load twirling	lamp object
000177D4 137C 0006 0024             		move.b	#6,$24(a1)	; use "Obj79_Twirl" routine
000177DA 3368 0008 0030             		move.w	8(a0),$30(a1)
000177E0 3368 000C 0032             		move.w	$C(a0),$32(a1)
000177E6 0469 0018 0032             		subi.w	#$18,$32(a1)
000177EC 237C 0000 0000 0004        		move.l	#Map_obj79,4(a1)
000177F4 337C 07A0 0002             		move.w	#$7A0,2(a1)
000177FA 137C 0004 0001             		move.b	#4,1(a1)
00017800 137C 0008 0019             		move.b	#8,$19(a1)
00017806 137C 0004 0018             		move.b	#4,$18(a1)
0001780C 137C 0002 001A             		move.b	#2,$1A(a1)
00017812 337C 0020 0036             		move.w	#$20,$36(a1)
00017818                            
00017818                            loc_16F76:
00017818 117C 0001 001A             		move.b	#1,$1A(a0)	; use "post only" frame, with no lamp
0001781E 6100 0000                  		bsr.w	Obj79_StoreInfo
00017822 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017826 7000                       		moveq	#0,d0
00017828 1028 0023                  		move.b	$23(a0),d0
0001782C 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00017832                            
00017832                            locret_16F90:
00017832 4E75                       		rts	
00017834                            ; ===========================================================================
00017834                            
00017834                            Obj79_AfterHit:				; XREF: Obj79_Index
00017834 4E75                       		rts	
00017836                            ; ===========================================================================
00017836                            
00017836                            Obj79_Twirl:				; XREF: Obj79_Index
00017836 5368 0036                  		subq.w	#1,$36(a0)
0001783A 6A00                       		bpl.s	loc_16FA0
0001783C 117C 0004 0024             		move.b	#4,$24(a0)
00017842                            
00017842                            loc_16FA0:
00017842 1028 0026                  		move.b	$26(a0),d0
00017846 0428 0010 0026             		subi.b	#$10,$26(a0)
0001784C 0400 0040                  		subi.b	#$40,d0
00017850 4EB9 0000 2CC4             		jsr	(CalcSine).l
00017856 C3FC 0C00                  		muls.w	#$C00,d1
0001785A 4841                       		swap	d1
0001785C D268 0030                  		add.w	$30(a0),d1
00017860 3141 0008                  		move.w	d1,8(a0)
00017864 C1FC 0C00                  		muls.w	#$C00,d0
00017868 4840                       		swap	d0
0001786A D068 0032                  		add.w	$32(a0),d0
0001786E 3140 000C                  		move.w	d0,$C(a0)
00017872 4E75                       		rts	
00017874                            ; ===========================================================================
00017874                            ; ---------------------------------------------------------------------------
00017874                            ; Subroutine to	store information when you hit a lamppost
00017874                            ; ---------------------------------------------------------------------------
00017874                            
00017874                            Obj79_StoreInfo:			; XREF: Obj79_HitLamp
00017874 11E8 0028 FE30             		move.b	$28(a0),($FFFFFE30).w 		; lamppost number
0001787A 11F8 FE30 FE31             		move.b	($FFFFFE30).w,($FFFFFE31).w
00017880 31E8 0008 FE32             		move.w	8(a0),($FFFFFE32).w		; x-position
00017886 31E8 000C FE34             		move.w	$C(a0),($FFFFFE34).w		; y-position
0001788C 31F8 FE20 FE36             		move.w	($FFFFFE20).w,($FFFFFE36).w 	; rings
00017892 11F8 FE1B FE54             		move.b	($FFFFFE1B).w,($FFFFFE54).w 	; lives
00017898 21F8 FE22 FE38             		move.l	($FFFFFE22).w,($FFFFFE38).w 	; time
0001789E 11F8 F742 FE3C             		move.b	($FFFFF742).w,($FFFFFE3C).w 	; routine counter for dynamic level mod
000178A4 31F8 F72E FE3E             		move.w	($FFFFF72E).w,($FFFFFE3E).w 	; lower y-boundary of level
000178AA 31F8 F700 FE40             		move.w	($FFFFF700).w,($FFFFFE40).w 	; screen x-position
000178B0 31F8 F704 FE42             		move.w	($FFFFF704).w,($FFFFFE42).w 	; screen y-position
000178B6 31F8 F708 FE44             		move.w	($FFFFF708).w,($FFFFFE44).w 	; bg position
000178BC 31F8 F70C FE46             		move.w	($FFFFF70C).w,($FFFFFE46).w 	; bg position
000178C2 31F8 F710 FE48             		move.w	($FFFFF710).w,($FFFFFE48).w 	; bg position
000178C8 31F8 F714 FE4A             		move.w	($FFFFF714).w,($FFFFFE4A).w 	; bg position
000178CE 31F8 F718 FE4C             		move.w	($FFFFF718).w,($FFFFFE4C).w 	; bg position
000178D4 31F8 F71C FE4E             		move.w	($FFFFF71C).w,($FFFFFE4E).w 	; bg position
000178DA 31F8 F648 FE50             		move.w	($FFFFF648).w,($FFFFFE50).w 	; water height
000178E0 11F8 F64D FE52             		move.b	($FFFFF64D).w,($FFFFFE52).w 	; rountine counter for water
000178E6 11F8 F64E FE53             		move.b	($FFFFF64E).w,($FFFFFE53).w 	; water direction
000178EC 4E75                       		rts	
000178EE                            
000178EE                            ; ---------------------------------------------------------------------------
000178EE                            ; Subroutine to	load stored info when you start	a level	from a lamppost
000178EE                            ; ---------------------------------------------------------------------------
000178EE                            
000178EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000178EE                            
000178EE                            
000178EE                            Obj79_LoadInfo:				; XREF: LevelSizeLoad
000178EE 11F8 FE31 FE30             		move.b	($FFFFFE31).w,($FFFFFE30).w
000178F4 31F8 FE32 D008             		move.w	($FFFFFE32).w,($FFFFD008).w
000178FA 31F8 FE34 D00C             		move.w	($FFFFFE34).w,($FFFFD00C).w
00017900 31F8 FE36 FE20             		move.w	($FFFFFE36).w,($FFFFFE20).w
00017906 11F8 FE54 FE1B             		move.b	($FFFFFE54).w,($FFFFFE1B).w
0001790C 4278 FE20                  		clr.w	($FFFFFE20).w
00017910 4238 FE1B                  		clr.b	($FFFFFE1B).w
00017914 21F8 FE38 FE22             		move.l	($FFFFFE38).w,($FFFFFE22).w
0001791A 11FC 003B FE25             		move.b	#59,($FFFFFE25).w
00017920 5338 FE24                  		subq.b	#1,($FFFFFE24).w
00017924 11F8 FE3C F742             		move.b	($FFFFFE3C).w,($FFFFF742).w
0001792A 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
00017930 31F8 FE3E F72E             		move.w	($FFFFFE3E).w,($FFFFF72E).w
00017936 31F8 FE3E F726             		move.w	($FFFFFE3E).w,($FFFFF726).w
0001793C 31F8 FE40 F700             		move.w	($FFFFFE40).w,($FFFFF700).w
00017942 31F8 FE42 F704             		move.w	($FFFFFE42).w,($FFFFF704).w
00017948 31F8 FE44 F708             		move.w	($FFFFFE44).w,($FFFFF708).w
0001794E 31F8 FE46 F70C             		move.w	($FFFFFE46).w,($FFFFF70C).w
00017954 31F8 FE48 F710             		move.w	($FFFFFE48).w,($FFFFF710).w
0001795A 31F8 FE4A F714             		move.w	($FFFFFE4A).w,($FFFFF714).w
00017960 31F8 FE4C F718             		move.w	($FFFFFE4C).w,($FFFFF718).w
00017966 31F8 FE4E F71C             		move.w	($FFFFFE4E).w,($FFFFF71C).w
0001796C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00017972 6600                       		bne.s	loc_170E4
00017974 31F8 FE50 F648             		move.w	($FFFFFE50).w,($FFFFF648).w
0001797A 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
00017980 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
00017986                            
00017986                            loc_170E4:
00017986 4A38 FE30                  		tst.b	($FFFFFE30).w
0001798A 6A00                       		bpl.s	locret_170F6
0001798C 3038 FE32                  		move.w	($FFFFFE32).w,d0
00017990 0440 00A0                  		subi.w	#$A0,d0
00017994 31C0 F728                  		move.w	d0,($FFFFF728).w
00017998                            
00017998                            locret_170F6:
00017998 4E75                       		rts	
0001799A                            ; End of function Obj79_LoadInfo
0001799A                            
0001799A                            ; ===========================================================================
0001799A                            ; ---------------------------------------------------------------------------
0001799A                            ; Sprite mappings - lamppost
0001799A                            ; ---------------------------------------------------------------------------
0001799A                            Map_obj79:
0001799A                            	include "_maps\obj79.asm"
0001799A                            ; ---------------------------------------------------------------------------
0001799A                            ; Sprite mappings - lamppost
0001799A                            ; ---------------------------------------------------------------------------
0001799A 0000 0000                  		dc.w byte_17100-Map_obj79, byte_1711F-Map_obj79
0001799E 0000 0000                  		dc.w byte_17134-Map_obj79, byte_1713F-Map_obj79
000179A2 06                         byte_17100:	dc.b 6
000179A3 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
000179A8 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
000179AD F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
000179B2 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
000179B7 D401 0006 F8               		dc.b $D4, 1, 0,	6, $F8
000179BC D401 0806 00               		dc.b $D4, 1, 8,	6, 0
000179C1 04                         byte_1711F:	dc.b 4
000179C2 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
000179C7 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
000179CC F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
000179D1 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
000179D6 02                         byte_17134:	dc.b 2
000179D7 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
000179DC F801 0808 00               		dc.b $F8, 1, 8,	8, 0
000179E1 06                         byte_1713F:	dc.b 6
000179E2 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
000179E7 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
000179EC F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
000179F1 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
000179F6 D401 0008 F8               		dc.b $D4, 1, 0,	8, $F8
000179FB D401 0808 00               		dc.b $D4, 1, 8,	8, 0
00017A00                            		even
00017A00                            		even
00017A00                            
00017A00                            ; ===========================================================================
00017A00                            ; ---------------------------------------------------------------------------
00017A00                            ; Object 7D - hidden points at the end of a level
00017A00                            ; ---------------------------------------------------------------------------
00017A00                            
00017A00                            Obj7D:					; XREF: Obj_Index
00017A00 7000                       		moveq	#0,d0
00017A02 1028 0024                  		move.b	$24(a0),d0
00017A06 323B 0000                  		move.w	Obj7D_Index(pc,d0.w),d1
00017A0A 4EFB 1000                  		jmp	Obj7D_Index(pc,d1.w)
00017A0E                            ; ===========================================================================
00017A0E 0000                       Obj7D_Index:	dc.w Obj7D_Main-Obj7D_Index
00017A10 0000                       		dc.w Obj7D_DelayDel-Obj7D_Index
00017A12                            ; ===========================================================================
00017A12                            
00017A12                            Obj7D_Main:				; XREF: Obj7D_Index
00017A12 7410                       		moveq	#$10,d2
00017A14 3602                       		move.w	d2,d3
00017A16 D643                       		add.w	d3,d3
00017A18 43F8 D000                  		lea	($FFFFD000).w,a1
00017A1C 3029 0008                  		move.w	8(a1),d0
00017A20 9068 0008                  		sub.w	8(a0),d0
00017A24 D042                       		add.w	d2,d0
00017A26 B043                       		cmp.w	d3,d0
00017A28 6400                       		bcc.s	Obj7D_ChkDel
00017A2A 3229 000C                  		move.w	$C(a1),d1
00017A2E 9268 000C                  		sub.w	$C(a0),d1
00017A32 D242                       		add.w	d2,d1
00017A34 B243                       		cmp.w	d3,d1
00017A36 6400                       		bcc.s	Obj7D_ChkDel
00017A38 4A78 FE08                  		tst.w	($FFFFFE08).w
00017A3C 6600                       		bne.s	Obj7D_ChkDel
00017A3E 4A38 F7CD                  		tst.b	($FFFFF7CD).w
00017A42 6600                       		bne.s	Obj7D_ChkDel
00017A44 5428 0024                  		addq.b	#2,$24(a0)
00017A48 217C 0000 0000 0004        		move.l	#Map_obj7D,4(a0)
00017A50 317C 84B6 0002             		move.w	#$84B6,2(a0)
00017A56 0028 0004 0001             		ori.b	#4,1(a0)
00017A5C 117C 0000 0018             		move.b	#0,$18(a0)
00017A62 117C 0010 0019             		move.b	#$10,$19(a0)
00017A68 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00017A6E 317C 0077 0030             		move.w	#119,$30(a0)	; set display time to 2	seconds
00017A74 303C 00C9                  		move.w	#$C9,d0
00017A78 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play bonus sound
00017A7E 7000                       		moveq	#0,d0
00017A80 1028 0028                  		move.b	$28(a0),d0
00017A84 D040                       		add.w	d0,d0
00017A86 303B 0000                  		move.w	Obj7D_Points(pc,d0.w),d0 ; load	bonus points array
00017A8A 4EB9 0000 0000             		jsr	AddPoints
00017A90                            
00017A90                            Obj7D_ChkDel:
00017A90 3028 0008                  		move.w	8(a0),d0
00017A94 0240 FF80                  		andi.w	#$FF80,d0
00017A98 3238 F700                  		move.w	($FFFFF700).w,d1
00017A9C 0441 0080                  		subi.w	#$80,d1
00017AA0 0241 FF80                  		andi.w	#$FF80,d1
00017AA4 9041                       		sub.w	d1,d0
00017AA6 0C40 0280                  		cmpi.w	#$280,d0
00017AAA 6200                       		bhi.s	Obj7D_Delete
00017AAC 4E75                       		rts	
00017AAE                            ; ===========================================================================
00017AAE                            
00017AAE                            Obj7D_Delete:
00017AAE 4EF9 0000 DDFE             		jmp	DeleteObject
00017AB4                            ; ===========================================================================
00017AB4 0000                       Obj7D_Points:	dc.w 0			; Bonus	points array
00017AB6 03E8                       		dc.w 1000
00017AB8 0064                       		dc.w 100
00017ABA 0001                       		dc.w 1
00017ABC                            ; ===========================================================================
00017ABC                            
00017ABC                            Obj7D_DelayDel:				; XREF: Obj7D_Index
00017ABC 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from display time
00017AC0 6B00                       		bmi.s	Obj7D_Delete2	; if time is zero, branch
00017AC2 3028 0008                  		move.w	8(a0),d0
00017AC6 0240 FF80                  		andi.w	#-$80,d0
00017ACA 3238 F700                  		move.w	($FFFFF700).w,d1
00017ACE 0441 0080                  		subi.w	#$80,d1
00017AD2 0241 FF80                  		andi.w	#-$80,d1
00017AD6 9041                       		sub.w	d1,d0
00017AD8 0C40 0280                  		cmpi.w	#$280,d0
00017ADC 6200                       		bhi.s	Obj7D_Delete2
00017ADE 4EF9 0000 DDC2             		jmp	DisplaySprite
00017AE4                            ; ===========================================================================
00017AE4                            
00017AE4                            Obj7D_Delete2:
00017AE4 4EF9 0000 DDFE             		jmp	DeleteObject
00017AEA                            ; ===========================================================================
00017AEA                            ; ---------------------------------------------------------------------------
00017AEA                            ; Sprite mappings - hidden points at the end of	a level
00017AEA                            ; ---------------------------------------------------------------------------
00017AEA                            Map_obj7D:
00017AEA                            	include "_maps\obj7D.asm"
00017AEA                            ; ---------------------------------------------------------------------------
00017AEA                            ; Sprite mappings - hidden points at the end of	a level
00017AEA                            ; ---------------------------------------------------------------------------
00017AEA 0000 0000                  		dc.w byte_17250-Map_obj7D, byte_17251-Map_obj7D
00017AEE 0000 0000                  		dc.w byte_17257-Map_obj7D, byte_1725D-Map_obj7D
00017AF2 00                         byte_17250:	dc.b 0
00017AF3 01                         byte_17251:	dc.b 1
00017AF4 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
00017AF9 01                         byte_17257:	dc.b 1
00017AFA F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
00017AFF 01                         byte_1725D:	dc.b 1
00017B00 F40E 0018 F0               		dc.b $F4, $E, 0, $18, $F0
00017B06 00                         		even
00017B06 00                         		even
00017B06                            
00017B06                            ; ===========================================================================
00017B06                            ; ---------------------------------------------------------------------------
00017B06                            ; Object 8A - "SONIC TEAM PRESENTS" and	credits
00017B06                            ; ---------------------------------------------------------------------------
00017B06                            
00017B06                            Obj8A:					; XREF: Obj_Index
00017B06 7000                       		moveq	#0,d0
00017B08 1028 0024                  		move.b	$24(a0),d0
00017B0C 323B 0000                  		move.w	Obj8A_Index(pc,d0.w),d1
00017B10 4EFB 1000                  		jmp	Obj8A_Index(pc,d1.w)
00017B14                            ; ===========================================================================
00017B14 0000                       Obj8A_Index:	dc.w Obj8A_Main-Obj8A_Index
00017B16 0000                       		dc.w Obj8A_Display-Obj8A_Index
00017B18                            ; ===========================================================================
00017B18                            
00017B18                            Obj8A_Main:				; XREF: Obj8A_Index
00017B18 5428 0024                  		addq.b	#2,$24(a0)
00017B1C 317C 0120 0008             		move.w	#$120,8(a0)
00017B22 317C 00F0 000A             		move.w	#$F0,$A(a0)
00017B28 217C 0000 0000 0004        		move.l	#Map_obj8A,4(a0)
00017B30 317C 05A0 0002             		move.w	#$5A0,2(a0)
00017B36 3038 FFF4                  		move.w	($FFFFFFF4).w,d0 ; load	credits	index number
00017B3A 1140 001A                  		move.b	d0,$1A(a0)	; display appropriate sprite
00017B3E 117C 0000 0001             		move.b	#0,1(a0)
00017B44 117C 0000 0018             		move.b	#0,$18(a0)
00017B4A 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w ; is the scene	number 04 (title screen)?
00017B50 6600                       		bne.s	Obj8A_Display	; if not, branch
00017B52 317C 00A6 0002             		move.w	#$A6,2(a0)
00017B58 117C 000A 001A             		move.b	#$A,$1A(a0)	; display "SONIC TEAM PRESENTS"
00017B5E 4A38 FFE3                  		tst.b	($FFFFFFE3).w	; is hidden credits cheat on?
00017B62 6700                       		beq.s	Obj8A_Display	; if not, branch
00017B64 0C38 0072 F604             		cmpi.b	#$72,($FFFFF604).w ; is	Start+A+C+Down being pressed?
00017B6A 6600                       		bne.s	Obj8A_Display	; if not, branch
00017B6C 31FC 0EEE FBC0             		move.w	#$EEE,($FFFFFBC0).w ; 3rd pallet, 1st entry = white
00017B72 31FC 0880 FBC2             		move.w	#$880,($FFFFFBC2).w ; 3rd pallet, 2nd entry = cyan
00017B78 4EF9 0000 DDFE             		jmp	DeleteObject
00017B7E                            ; ===========================================================================
00017B7E                            
00017B7E                            Obj8A_Display:				; XREF: Obj8A_Index
00017B7E 4EF9 0000 DDC2             		jmp	DisplaySprite
00017B84                            ; ===========================================================================
00017B84                            ; ---------------------------------------------------------------------------
00017B84                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
00017B84                            ; ---------------------------------------------------------------------------
00017B84                            Map_obj8A:
00017B84                            	include "_maps\obj8A.asm"
00017B84                            ; ================================================================================
00017B84                            ; Sprite Mappings - generated by Flex 2 Sun Mar 23 2025 20:55:17 GMT-0500 (Central Daylight Time)
00017B84                            ; ================================================================================
00017B84                            
00017B84                            DATAV02AM357W0A:
00017B84 0000 0000                  	dc.w DATAV02AM357W0A_0-DATAV02AM357W0A, DATAV02AM357W0A_1-DATAV02AM357W0A
00017B88 0000 0000                  	dc.w DATAV02AM357W0A_2-DATAV02AM357W0A, DATAV02AM357W0A_3-DATAV02AM357W0A
00017B8C 0000 0000                  	dc.w DATAV02AM357W0A_4-DATAV02AM357W0A, DATAV02AM357W0A_5-DATAV02AM357W0A
00017B90 0000 0000                  	dc.w DATAV02AM357W0A_6-DATAV02AM357W0A, DATAV02AM357W0A_7-DATAV02AM357W0A
00017B94 0000 0000                  	dc.w DATAV02AM357W0A_8-DATAV02AM357W0A, DATAV02AM357W0A_9-DATAV02AM357W0A
00017B98 0000                       	dc.w DATAV02AM357W0A_A-DATAV02AM357W0A
00017B9A 0E                         DATAV02AM357W0A_0: dc.b $E
00017B9B F805 802E 88               	dc.b $F8, $5, $80, $2E, $88
00017BA0 F805 8026 98               	dc.b $F8, $5, $80, $26, $98
00017BA5 F805 801A A8               	dc.b $F8, $5, $80, $1A, $A8
00017BAA F801 8046 B8               	dc.b $F8, $1, $80, $46, $B8
00017BAF F805 801E C0               	dc.b $F8, $5, $80, $1E, $C0
00017BB4 F805 803E D8               	dc.b $F8, $5, $80, $3E, $D8
00017BB9 F805 800E E8               	dc.b $F8, $5, $80, $E, $E8
00017BBE F805 8004 F8               	dc.b $F8, $5, $80, $4, $F8
00017BC3 F809 8008 08               	dc.b $F8, $9, $80, $8, $8
00017BC8 F805 802E 28               	dc.b $F8, $5, $80, $2E, $28
00017BCD F805 803E 38               	dc.b $F8, $5, $80, $3E, $38
00017BD2 F805 8004 48               	dc.b $F8, $5, $80, $4, $48
00017BD7 F805 805C 58               	dc.b $F8, $5, $80, $5C, $58
00017BDC F805 805C 68               	dc.b $F8, $5, $80, $5C, $68
00017BE1 10                         DATAV02AM357W0A_1: dc.b $10
00017BE2 D805 0000 80               	dc.b $D8, $5, $0, $0, $80
00017BE7 D805 0004 90               	dc.b $D8, $5, $0, $4, $90
00017BEC D809 0008 A0               	dc.b $D8, $9, $0, $8, $A0
00017BF1 D805 000E B4               	dc.b $D8, $5, $0, $E, $B4
00017BF6 D805 0012 D0               	dc.b $D8, $5, $0, $12, $D0
00017BFB D805 0016 E0               	dc.b $D8, $5, $0, $16, $E0
00017C00 D805 0004 F0               	dc.b $D8, $5, $0, $4, $F0
00017C05 D805 001A 00               	dc.b $D8, $5, $0, $1A, $0
00017C0A 0805 001E C8               	dc.b $8, $5, $0, $1E, $C8
00017C0F 0805 0004 D8               	dc.b $8, $5, $0, $4, $D8
00017C14 0805 0022 E8               	dc.b $8, $5, $0, $22, $E8
00017C19 0805 0026 F8               	dc.b $8, $5, $0, $26, $F8
00017C1E 0805 0016 08               	dc.b $8, $5, $0, $16, $8
00017C23 0805 002A 20               	dc.b $8, $5, $0, $2A, $20
00017C28 0805 0004 30               	dc.b $8, $5, $0, $4, $30
00017C2D 0805 002E 44               	dc.b $8, $5, $0, $2E, $44
00017C32 0A                         DATAV02AM357W0A_2: dc.b $A
00017C33 D805 0012 80               	dc.b $D8, $5, $0, $12, $80
00017C38 D805 0022 90               	dc.b $D8, $5, $0, $22, $90
00017C3D D805 0026 A0               	dc.b $D8, $5, $0, $26, $A0
00017C42 D805 0000 B0               	dc.b $D8, $5, $0, $0, $B0
00017C47 D805 0022 C0               	dc.b $D8, $5, $0, $22, $C0
00017C4C D805 0004 D0               	dc.b $D8, $5, $0, $4, $D0
00017C51 D809 0008 E0               	dc.b $D8, $9, $0, $8, $E0
00017C56 0805 002A E8               	dc.b $8, $5, $0, $2A, $E8
00017C5B 0805 0032 F8               	dc.b $8, $5, $0, $32, $F8
00017C60 0805 0036 08               	dc.b $8, $5, $0, $36, $8
00017C65 18                         DATAV02AM357W0A_3: dc.b $18
00017C66 D805 001E 88               	dc.b $D8, $5, $0, $1E, $88
00017C6B D805 003A 98               	dc.b $D8, $5, $0, $3A, $98
00017C70 D805 0004 A8               	dc.b $D8, $5, $0, $4, $A8
00017C75 D805 0022 B8               	dc.b $D8, $5, $0, $22, $B8
00017C7A D805 0004 C8               	dc.b $D8, $5, $0, $4, $C8
00017C7F D805 001E D8               	dc.b $D8, $5, $0, $1E, $D8
00017C84 D805 003E E8               	dc.b $D8, $5, $0, $3E, $E8
00017C89 D805 000E F8               	dc.b $D8, $5, $0, $E, $F8
00017C8E D805 0022 08               	dc.b $D8, $5, $0, $22, $8
00017C93 D805 0042 20               	dc.b $D8, $5, $0, $42, $20
00017C98 D805 000E 30               	dc.b $D8, $5, $0, $E, $30
00017C9D D805 002E 40               	dc.b $D8, $5, $0, $2E, $40
00017CA2 D801 0046 50               	dc.b $D8, $1, $0, $46, $50
00017CA7 D805 0000 58               	dc.b $D8, $5, $0, $0, $58
00017CAC D805 001A 68               	dc.b $D8, $5, $0, $1A, $68
00017CB1 0805 0048 C0               	dc.b $8, $5, $0, $48, $C0
00017CB6 0801 0046 D0               	dc.b $8, $1, $0, $46, $D0
00017CBB 0805 0000 D8               	dc.b $8, $5, $0, $0, $D8
00017CC0 0801 0046 E8               	dc.b $8, $1, $0, $46, $E8
00017CC5 0805 002E F0               	dc.b $8, $5, $0, $2E, $F0
00017CCA 0805 0016 00               	dc.b $8, $5, $0, $16, $0
00017CCF 0805 0004 10               	dc.b $8, $5, $0, $4, $10
00017CD4 0805 001A 20               	dc.b $8, $5, $0, $1A, $20
00017CD9 0805 0042 30               	dc.b $8, $5, $0, $42, $30
00017CDE 14                         DATAV02AM357W0A_4: dc.b $14
00017CDF D005 0042 A0               	dc.b $D0, $5, $0, $42, $A0
00017CE4 D005 000E B0               	dc.b $D0, $5, $0, $E, $B0
00017CE9 D005 002E C0               	dc.b $D0, $5, $0, $2E, $C0
00017CEE D001 0046 D0               	dc.b $D0, $1, $0, $46, $D0
00017CF3 D005 0000 D8               	dc.b $D0, $5, $0, $0, $D8
00017CF8 D005 001A E8               	dc.b $D0, $5, $0, $1A, $E8
00017CFD 0005 004C E8               	dc.b $0, $5, $0, $4C, $E8
00017D02 0001 0046 F8               	dc.b $0, $1, $0, $46, $F8
00017D07 0005 001A 04               	dc.b $0, $5, $0, $1A, $4
00017D0C 0005 002A 14               	dc.b $0, $5, $0, $2A, $14
00017D11 0005 0004 24               	dc.b $0, $5, $0, $4, $24
00017D16 2005 0012 D0               	dc.b $20, $5, $0, $12, $D0
00017D1B 2005 003A E0               	dc.b $20, $5, $0, $3A, $E0
00017D20 2005 000E F0               	dc.b $20, $5, $0, $E, $F0
00017D25 2005 001A 00               	dc.b $20, $5, $0, $1A, $0
00017D2A 2001 0046 10               	dc.b $20, $1, $0, $46, $10
00017D2F 2005 0050 18               	dc.b $20, $5, $0, $50, $18
00017D34 2005 0022 30               	dc.b $20, $5, $0, $22, $30
00017D39 2001 0046 40               	dc.b $20, $1, $0, $46, $40
00017D3E 2005 000E 48               	dc.b $20, $5, $0, $E, $48
00017D43 1A                         DATAV02AM357W0A_5: dc.b $1A
00017D44 D805 002E 98               	dc.b $D8, $5, $0, $2E, $98
00017D49 D805 0026 A8               	dc.b $D8, $5, $0, $26, $A8
00017D4E D805 0032 B8               	dc.b $D8, $5, $0, $32, $B8
00017D53 D805 001A C8               	dc.b $D8, $5, $0, $1A, $C8
00017D58 D805 0054 D8               	dc.b $D8, $5, $0, $54, $D8
00017D5D D805 0012 F8               	dc.b $D8, $5, $0, $12, $F8
00017D62 D805 0022 08               	dc.b $D8, $5, $0, $22, $8
00017D67 D805 0026 18               	dc.b $D8, $5, $0, $26, $18
00017D6C D805 0042 28               	dc.b $D8, $5, $0, $42, $28
00017D71 D805 0032 38               	dc.b $D8, $5, $0, $32, $38
00017D76 D805 001E 48               	dc.b $D8, $5, $0, $1E, $48
00017D7B D805 000E 58               	dc.b $D8, $5, $0, $E, $58
00017D80 0809 0008 88               	dc.b $8, $9, $0, $8, $88
00017D85 0805 0004 9C               	dc.b $8, $5, $0, $4, $9C
00017D8A 0805 002E AC               	dc.b $8, $5, $0, $2E, $AC
00017D8F 0805 0004 BC               	dc.b $8, $5, $0, $4, $BC
00017D94 0805 003E CC               	dc.b $8, $5, $0, $3E, $CC
00017D99 0805 0026 DC               	dc.b $8, $5, $0, $26, $DC
00017D9E 0805 001A F8               	dc.b $8, $5, $0, $1A, $F8
00017DA3 0805 0004 08               	dc.b $8, $5, $0, $4, $8
00017DA8 0805 0058 18               	dc.b $8, $5, $0, $58, $18
00017DAD 0805 0004 28               	dc.b $8, $5, $0, $4, $28
00017DB2 0809 0008 38               	dc.b $8, $9, $0, $8, $38
00017DB7 0805 0032 4C               	dc.b $8, $5, $0, $32, $4C
00017DBC 0805 0022 5C               	dc.b $8, $5, $0, $22, $5C
00017DC1 0805 0004 6C               	dc.b $8, $5, $0, $4, $6C
00017DC6 17                         DATAV02AM357W0A_6: dc.b $17
00017DC7 D005 002E 98               	dc.b $D0, $5, $0, $2E, $98
00017DCC D005 0026 A8               	dc.b $D0, $5, $0, $26, $A8
00017DD1 D005 0032 B8               	dc.b $D0, $5, $0, $32, $B8
00017DD6 D005 001A C8               	dc.b $D0, $5, $0, $1A, $C8
00017DDB D005 0054 D8               	dc.b $D0, $5, $0, $54, $D8
00017DE0 D005 0012 F8               	dc.b $D0, $5, $0, $12, $F8
00017DE5 D005 0022 08               	dc.b $D0, $5, $0, $22, $8
00017DEA D005 0026 18               	dc.b $D0, $5, $0, $26, $18
00017DEF D005 0000 28               	dc.b $D0, $5, $0, $0, $28
00017DF4 D005 0022 38               	dc.b $D0, $5, $0, $22, $38
00017DF9 D005 0004 48               	dc.b $D0, $5, $0, $4, $48
00017DFE D009 0008 58               	dc.b $D0, $9, $0, $8, $58
00017E03 0005 004C D0               	dc.b $0, $5, $0, $4C, $D0
00017E08 0001 0046 E0               	dc.b $0, $1, $0, $46, $E0
00017E0D 0009 0008 E8               	dc.b $0, $9, $0, $8, $E8
00017E12 0001 0046 FC               	dc.b $0, $1, $0, $46, $FC
00017E17 0005 003E 04               	dc.b $0, $5, $0, $3E, $4
00017E1C 0005 0004 14               	dc.b $0, $5, $0, $4, $14
00017E21 2009 0008 D0               	dc.b $20, $9, $0, $8, $D0
00017E26 2005 0004 E4               	dc.b $20, $5, $0, $4, $E4
00017E2B 2005 001E F4               	dc.b $20, $5, $0, $1E, $F4
00017E30 2005 0058 04               	dc.b $20, $5, $0, $58, $4
00017E35 2005 002A 14               	dc.b $20, $5, $0, $2A, $14
00017E3A 1F                         DATAV02AM357W0A_7: dc.b $1F
00017E3B D805 002E 80               	dc.b $D8, $5, $0, $2E, $80
00017E40 D805 0012 90               	dc.b $D8, $5, $0, $12, $90
00017E45 D805 000E A0               	dc.b $D8, $5, $0, $E, $A0
00017E4A D805 001E B0               	dc.b $D8, $5, $0, $1E, $B0
00017E4F D801 0046 C0               	dc.b $D8, $1, $0, $46, $C0
00017E54 D805 0004 C8               	dc.b $D8, $5, $0, $4, $C8
00017E59 D805 0016 D8               	dc.b $D8, $5, $0, $16, $D8
00017E5E D805 003E F8               	dc.b $D8, $5, $0, $3E, $F8
00017E63 D805 003A 08               	dc.b $D8, $5, $0, $3A, $8
00017E68 D805 0004 18               	dc.b $D8, $5, $0, $4, $18
00017E6D D805 001A 28               	dc.b $D8, $5, $0, $1A, $28
00017E72 D805 0058 38               	dc.b $D8, $5, $0, $58, $38
00017E77 D805 002E 48               	dc.b $D8, $5, $0, $2E, $48
00017E7C 0005 005C B0               	dc.b $0, $5, $0, $5C, $B0
00017E81 0005 0032 C0               	dc.b $0, $5, $0, $32, $C0
00017E86 0005 004C D0               	dc.b $0, $5, $0, $4C, $D0
00017E8B 0001 0046 E0               	dc.b $0, $1, $0, $46, $E0
00017E90 0005 0026 E8               	dc.b $0, $5, $0, $26, $E8
00017E95 0009 0008 00               	dc.b $0, $9, $0, $8, $0
00017E9A 0001 0046 14               	dc.b $0, $1, $0, $46, $14
00017E9F 0005 001A 1C               	dc.b $0, $5, $0, $1A, $1C
00017EA4 0005 000E 2C               	dc.b $0, $5, $0, $E, $2C
00017EA9 0005 0000 3C               	dc.b $0, $5, $0, $0, $3C
00017EAE 0001 0046 4C               	dc.b $0, $1, $0, $46, $4C
00017EB3 0005 002E 54               	dc.b $0, $5, $0, $2E, $54
00017EB8 0005 003A 64               	dc.b $0, $5, $0, $3A, $64
00017EBD 0001 0046 74               	dc.b $0, $1, $0, $46, $74
00017EC2 2005 0012 F8               	dc.b $20, $5, $0, $12, $F8
00017EC7 2005 0004 08               	dc.b $20, $5, $0, $4, $8
00017ECC 2005 0012 18               	dc.b $20, $5, $0, $12, $18
00017ED1 2005 0004 28               	dc.b $20, $5, $0, $4, $28
00017ED6 0F                         DATAV02AM357W0A_8: dc.b $F
00017ED7 F805 0012 80               	dc.b $F8, $5, $0, $12, $80
00017EDC F805 0022 90               	dc.b $F8, $5, $0, $22, $90
00017EE1 F805 000E A0               	dc.b $F8, $5, $0, $E, $A0
00017EE6 F805 002E B0               	dc.b $F8, $5, $0, $2E, $B0
00017EEB F805 000E C0               	dc.b $F8, $5, $0, $E, $C0
00017EF0 F805 001A D0               	dc.b $F8, $5, $0, $1A, $D0
00017EF5 F805 003E E0               	dc.b $F8, $5, $0, $3E, $E0
00017EFA F805 000E F0               	dc.b $F8, $5, $0, $E, $F0
00017EFF F805 0042 00               	dc.b $F8, $5, $0, $42, $0
00017F04 F805 0048 18               	dc.b $F8, $5, $0, $48, $18
00017F09 F805 002A 28               	dc.b $F8, $5, $0, $2A, $28
00017F0E F805 002E 40               	dc.b $F8, $5, $0, $2E, $40
00017F13 F805 000E 50               	dc.b $F8, $5, $0, $E, $50
00017F18 F805 0000 60               	dc.b $F8, $5, $0, $0, $60
00017F1D F805 0004 70               	dc.b $F8, $5, $0, $4, $70
00017F22 08                         DATAV02AM357W0A_9: dc.b $8
00017F23 3005 003E C0               	dc.b $30, $5, $0, $3E, $C0
00017F28 3005 0022 D0               	dc.b $30, $5, $0, $22, $D0
00017F2D 3005 002A E0               	dc.b $30, $5, $0, $2A, $E0
00017F32 3005 0004 F8               	dc.b $30, $5, $0, $4, $F8
00017F37 3005 0000 08               	dc.b $30, $5, $0, $0, $8
00017F3C 3005 0004 18               	dc.b $30, $5, $0, $4, $18
00017F41 3001 0046 28               	dc.b $30, $1, $0, $46, $28
00017F46 3005 001A 30               	dc.b $30, $5, $0, $1A, $30
00017F4B 20                         DATAV02AM357W0A_A: dc.b $20
00017F4C ED05 002E BF               	dc.b $ED, $5, $0, $2E, $BF
00017F51 ED05 0026 CD               	dc.b $ED, $5, $0, $26, $CD
00017F56 ED09 0008 DD               	dc.b $ED, $9, $0, $8, $DD
00017F5B ED05 000E F1               	dc.b $ED, $5, $0, $E, $F1
00017F60 ED05 0026 00               	dc.b $ED, $5, $0, $26, $0
00017F65 ED05 001A 10               	dc.b $ED, $5, $0, $1A, $10
00017F6A ED05 000E 1F               	dc.b $ED, $5, $0, $E, $1F
00017F6F FD05 0012 BF               	dc.b $FD, $5, $0, $12, $BF
00017F74 FD05 0016 CE               	dc.b $FD, $5, $0, $16, $CE
00017F79 FD05 000E DD               	dc.b $FD, $5, $0, $E, $DD
00017F7E FD05 0004 EC               	dc.b $FD, $5, $0, $4, $EC
00017F83 FD05 002E FC               	dc.b $FD, $5, $0, $2E, $FC
00017F88 FD05 000E 0A               	dc.b $FD, $5, $0, $E, $A
00017F8D 0D05 0004 BE               	dc.b $D, $5, $0, $4, $BE
00017F92 0D05 0054 CE               	dc.b $D, $5, $0, $54, $CE
00017F97 0D05 0054 DD               	dc.b $D, $5, $0, $54, $DD
00017F9C 0D05 0032 F2               	dc.b $D, $5, $0, $32, $F2
00017FA1 0D05 001A 02               	dc.b $D, $5, $0, $1A, $2
00017FA6 0D05 0054 11               	dc.b $D, $5, $0, $54, $11
00017FAB 0D05 002A 20               	dc.b $D, $5, $0, $2A, $20
00017FB0 0D01 0046 30               	dc.b $D, $1, $0, $46, $30
00017FB5 0D05 001A 38               	dc.b $D, $5, $0, $1A, $38
00017FBA 0D05 0000 47               	dc.b $D, $5, $0, $0, $47
00017FBF 1D05 003E BE               	dc.b $1D, $5, $0, $3E, $BE
00017FC4 1D05 0026 CE               	dc.b $1D, $5, $0, $26, $CE
00017FC9 1D05 003E E4               	dc.b $1D, $5, $0, $3E, $E4
00017FCE 1D05 003A F4               	dc.b $1D, $5, $0, $3A, $F4
00017FD3 1D05 000E 04               	dc.b $1D, $5, $0, $E, $4
00017FD8 1D05 000E 2A               	dc.b $1D, $5, $0, $E, $2A
00017FDD 1D05 0022 1A               	dc.b $1D, $5, $0, $22, $1A
00017FE2 1D05 0012 39               	dc.b $1D, $5, $0, $12, $39
00017FE7 1D05 0026 48               	dc.b $1D, $5, $0, $26, $48
00017FEC                            	even
00017FEC                            	even
00017FEC                            
00017FEC                            ; ===========================================================================
00017FEC                            ; ---------------------------------------------------------------------------
00017FEC                            ; Object 3D - matthew boss - modified by GK89
00017FEC                            ; ---------------------------------------------------------------------------
00017FEC                            
00017FEC                            Obj3D:					; XREF: Obj_Index
00017FEC 7000                       		moveq	#0,d0
00017FEE 1028 0024                  		move.b	$24(a0),d0
00017FF2 323B 0000                  		move.w	Obj3D_Index(pc,d0.w),d1
00017FF6 4EFB 1000                  		jmp	Obj3D_Index(pc,d1.w)
00017FFA                            ; ===========================================================================
00017FFA 0000                       Obj3D_Index:	dc.w Obj3D_Main-Obj3D_Index
00017FFC 0000                       		dc.w Obj3D_ShipMain-Obj3D_Index
00017FFE 0000                       		dc.w Obj3D_FaceMain-Obj3D_Index
00018000 0000                       		dc.w Obj3D_FlameMain-Obj3D_Index
00018002                            
00018002 0200                       Obj3D_ObjData:	dc.b 2,	0		; routine counter, animation
00018004 0401                       		dc.b 4,	1
00018006 0607                       		dc.b 6,	7
00018008                            ; ===========================================================================
00018008                            
00018008                            Obj3D_Main:				; XREF: Obj3D_Index
00018008 45F9 0001 8002             		lea	(Obj3D_ObjData).l,a2
0001800E 2248                       		movea.l	a0,a1
00018010 7202                       		moveq	#2,d1
00018012 6000                       		bra.s	Obj3D_LoadBoss
00018014                            ; ===========================================================================
00018014                            
00018014                            Obj3D_Loop:
00018014 4EB9 0000 E25E             		jsr	SingleObjLoad2
0001801A 6600                       		bne.s	loc_17772
0001801C                            
0001801C                            Obj3D_LoadBoss:				; XREF: Obj3D_Main
0001801C 135A 0024                  		move.b	(a2)+,$24(a1)
00018020 12BC 003D                  		move.b	#$3D,0(a1)
00018024 3368 0008 0008             		move.w	8(a0),8(a1)
0001802A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018030 237C 0000 0000 0004        		move.l	#Map_Eggman,4(a1)
00018038 337C 0400 0002             		move.w	#$400,2(a1)
0001803E 137C 0004 0001             		move.b	#4,1(a1)
00018044 137C 0020 0019             		move.b	#$20,$19(a1)
0001804A 137C 0003 0018             		move.b	#3,$18(a1)
00018050 135A 001C                  		move.b	(a2)+,$1C(a1)
00018054 2348 0034                  		move.l	a0,$34(a1)
00018058 51C9 FFBA                  		dbf	d1,Obj3D_Loop	; repeat sequence 2 more times
0001805C                            
0001805C                            loc_17772:
0001805C 3168 0008 0030             		move.w	8(a0),$30(a0)
00018062 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018068 117C 000F 0020             		move.b	#$F,$20(a0)
0001806E 117C 0028 0021             		move.b	#$28,$21(a0)	; set number of	hits to	8
00018074                            
00018074                            Obj3D_ShipMain:				; XREF: Obj3D_Index
00018074 7000                       		moveq	#0,d0
00018076 1028 0025                  		move.b	$25(a0),d0
0001807A 323B 0000                  		move.w	Obj3D_ShipIndex(pc,d0.w),d1
0001807E 4EBB 1000                  		jsr	Obj3D_ShipIndex(pc,d1.w)
00018082 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
00018088 4EB9 0000 AE82             		jsr	AnimateSprite
0001808E 1028 0022                  		move.b	$22(a0),d0
00018092 0200 0003                  		andi.b	#3,d0
00018096 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001809C 8128 0001                  		or.b	d0,1(a0)
000180A0 4EF9 0000 DDC2             		jmp	DisplaySprite
000180A6                            ; ===========================================================================
000180A6 0000                       Obj3D_ShipIndex:dc.w Obj3D_ShipStart-Obj3D_ShipIndex
000180A8 0000                       		dc.w Obj3D_MakeBall-Obj3D_ShipIndex
000180AA 0000                       		dc.w Obj3D_ShipMove-Obj3D_ShipIndex
000180AC 0000                       		dc.w loc_17954-Obj3D_ShipIndex
000180AE 0000                       		dc.w loc_1797A-Obj3D_ShipIndex
000180B0 0000                       		dc.w loc_179AC-Obj3D_ShipIndex
000180B2 0000                       		dc.w loc_179F6-Obj3D_ShipIndex
000180B4                            ; ===========================================================================
000180B4                            
000180B4                            Obj3D_ShipStart:			; XREF: Obj3D_ShipIndex
000180B4 4EB9 0000 0000             		jsr    Obj3D_ShipMove
000180BA 6100 0000                  		bsr.w	BossMove
000180BE 0C68 0338 0038             		cmpi.w	#$338,$38(a0)
000180C4 6600                       		bne.s	loc_177E6
000180C6 317C 0000 0012             		move.w	#0,$12(a0)	; stop ship
000180CC 5428 0025                  		addq.b	#2,$25(a0)	; goto next routine
000180D0                            
000180D0                            loc_177E6:
000180D0 1028 003F                  		move.b	$3F(a0),d0
000180D4 4EB9 0000 2CC4             		jsr	(CalcSine).l
000180DA EC40                       		asr.w	#6,d0
000180DC D068 0038                  		add.w	$38(a0),d0
000180E0 3140 000C                  		move.w	d0,$C(a0)
000180E4 3168 0030 0008             		move.w	$30(a0),8(a0)
000180EA 5428 003F                  		addq.b	#2,$3F(a0)
000180EE 0C28 0008 0025             		cmpi.b	#8,$25(a0)
000180F4 6400                       		bcc.s	locret_1784A
000180F6 4A28 0022                  		tst.b	$22(a0)
000180FA 6B00                       		bmi.s	loc_1784C
000180FC 4A28 0020                  		tst.b	$20(a0)
00018100 6600                       		bne.s	locret_1784A
00018102 4A28 003E                  		tst.b	$3E(a0)
00018106 6600                       		bne.s	Obj3D_ShipFlash
00018108 117C 0020 003E             		move.b	#$20,$3E(a0)	; set number of	times for ship to flash
0001810E 303C 00AC                  		move.w	#$AC,d0
00018112 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play boss damage sound
00018118                            
00018118                            Obj3D_ShipFlash:
00018118 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd pallet, 2nd	entry
0001811C 7000                       		moveq	#0,d0		; move 0 (black) to d0
0001811E 4A51                       		tst.w	(a1)
00018120 6600                       		bne.s	loc_1783C
00018122 303C 0EEE                  		move.w	#$EEE,d0	; move 0EEE (white) to d0
00018126                            
00018126                            loc_1783C:
00018126 3280                       		move.w	d0,(a1)		; load colour stored in	d0
00018128 5328 003E                  		subq.b	#1,$3E(a0)
0001812C 6600                       		bne.s	locret_1784A
0001812E 117C 000F 0020             		move.b	#$F,$20(a0)
00018134                            
00018134                            locret_1784A:
00018134 4E75                       		rts	
00018136                            ; ===========================================================================
00018136                            
00018136                            loc_1784C:				; XREF: loc_177E6
00018136 7064                       		moveq	#100,d0
00018138 6100 0000                  		bsr.w	AddPoints
0001813C 117C 0008 0025             		move.b	#8,$25(a0)
00018142 317C 00B3 003C             		move.w	#$B3,$3C(a0)
00018148 4E75                       		rts	
0001814A                            
0001814A                            ; ---------------------------------------------------------------------------
0001814A                            ; Defeated boss	subroutine
0001814A                            ; ---------------------------------------------------------------------------
0001814A                            
0001814A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001814A                            
0001814A                            
0001814A                            BossDefeated:
0001814A 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0001814E 0200 0007                  		andi.b	#7,d0
00018152 6600                       		bne.s	locret_178A2
00018154 4EB9 0000 E248             		jsr	SingleObjLoad
0001815A 6600                       		bne.s	locret_178A2
0001815C 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
00018160 3368 0008 0008             		move.w	8(a0),8(a1)
00018166 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001816C 4EB9 0000 2C9E             		jsr	(RandomNumber).l
00018172 3200                       		move.w	d0,d1
00018174 7200                       		moveq	#0,d1
00018176 1200                       		move.b	d0,d1
00018178 E409                       		lsr.b	#2,d1
0001817A 0441 0020                  		subi.w	#$20,d1
0001817E D369 0008                  		add.w	d1,8(a1)
00018182 E048                       		lsr.w	#8,d0
00018184 E608                       		lsr.b	#3,d0
00018186 D169 000C                  		add.w	d0,$C(a1)
0001818A                            
0001818A                            locret_178A2:
0001818A 4E75                       		rts	
0001818C                            ; End of function BossDefeated
0001818C                            
0001818C                            ; ---------------------------------------------------------------------------
0001818C                            ; Subroutine to	move a boss
0001818C                            ; ---------------------------------------------------------------------------
0001818C                            
0001818C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001818C                            
0001818C                            
0001818C                            BossMove:
0001818C 2428 0030                  		move.l	$30(a0),d2
00018190 2628 0038                  		move.l	$38(a0),d3
00018194 3028 0010                  		move.w	$10(a0),d0
00018198 48C0                       		ext.l	d0
0001819A E180                       		asl.l	#8,d0
0001819C D480                       		add.l	d0,d2
0001819E 3028 0012                  		move.w	$12(a0),d0
000181A2 48C0                       		ext.l	d0
000181A4 E180                       		asl.l	#8,d0
000181A6 D680                       		add.l	d0,d3
000181A8 2142 0030                  		move.l	d2,$30(a0)
000181AC 2143 0038                  		move.l	d3,$38(a0)
000181B0 4E75                       		rts	
000181B2                            ; End of function BossMove
000181B2                            
000181B2                            ; ===========================================================================
000181B2                            
000181B2                            Obj3D_MakeBall:				; XREF: Obj3D_ShipIndex		
000181B2 6100 FFD8                  		bsr.w	BossMove
000181B6 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
000181BC 6600                       		bne.s	loc_17916
000181BE 317C 0000 0010             		move.w	#0,$10(a0)
000181C4 317C 0000 0012             		move.w	#0,$12(a0)
000181CA 5428 0025                  		addq.b	#2,$25(a0)
000181CE 4EB9 0000 E25E             		jsr	SingleObjLoad2
000181D4 6600                       		bne.s	loc_17910
000181D6 12BC 0048                  		move.b	#$48,0(a1)	; load swinging	ball object
000181DA 3368 0030 0008             		move.w	$30(a0),8(a1)
000181E0 3368 0038 000C             		move.w	$38(a0),$C(a1)
000181E6 2348 0034                  		move.l	a0,$34(a1)
000181EA                            
000181EA                            loc_17910:
000181EA 317C 0077 003C             		move.w	#$77,$3C(a0)
000181F0                            
000181F0                            loc_17916:
000181F0 6000 FEDE                  		bra.w	loc_177E6
000181F4                            ; ===========================================================================
000181F4                            
000181F4                            Obj3D_ShipMove:				; XREF:  sonic follow move
000181F4 5368 003C                  		subq.w	#1,$3C(a0)
000181F8 4EB9 0000 0000             		jsr 	Obj3D_UpStuff
000181FE 5428 0025                  		addq.b	#2,$25(a0)
00018202 317C 003F 003C             		move.w	#$3F,$3C(a0)
00018208 3038 D008                  		move.w	($FFFFD008).w,d0	 
0001820C 9068 0008                  		sub.w	8(a0),d0		 
00018210 6A00                       		bpl.s	Obj3D_left			 
00018212 08A8 0000 0022             		bclr	#0,$22(a0)		 
00018218 6000                       		bra.s	Obj3D_right		 
0001821A 08A8 0005 0022             		bclr	#5,$22(a0)
00018220 4EB9 0000 0000              		jsr     loc_17950
00018226 4E75                       		rts
00018228                            ; ===========================================================================
00018228                            
00018228                            Obj3D_right:
00018228 317C FF00 0010             		move.w	#-$100,$10(a0)	
0001822E 4E75                       		Rts
00018230                            
00018230                            Obj3D_left:
00018230 317C 0100 0010             		move.w	#$100,$10(a0)	 
00018236 0828 0000 0022             		btst	#0,$22(a0)	; is matt facing	left?
0001823C 6600                       		bne.s	RTSboss  	; if not, branch
0001823E 0868 0000 0022              		bchg	#0,$22(a0)
00018244                            
00018244                            RTSboss:	    
00018244 4E75                       		rts
00018246                             ; ===========================================================================
00018246                            
00018246                            Obj3D_UpStuff:
00018246 3038 D00C                  		move.w	($FFFFD00C).w,d0	 
0001824A 9068 000C                  		sub.w	$C(a0),d0		 
0001824E 6A00                       		bpl.s	Obj3D_down			 
00018250 6000                        		bra.s	Obj3D_up		 
00018252 08A8 0005 0022             		bclr	#5,$22(a0)
00018258                             
00018258                            Obj3D_up:		
00018258 317C FEE0 0012             		move.w	#-$120,$12(a0)           ; Up	 
0001825E 4E75                        	    rts
00018260                            
00018260                            Obj3D_down:
00018260 317C 0120 0012              		move.w	#$120, $12(a0)           ; Down
00018266                            
00018266                            loc_17950:
00018266 6000 FE68                  		bra.w	loc_177E6
0001826A                            ; ===========================================================================
0001826A                            
0001826A                            loc_17954:				; XREF: Obj3D_ShipIndex
0001826A 5368 003C                  		subq.w	#1,$3C(a0)
0001826E 6B00                       		bmi.s	loc_17960
00018270 6100 FF1A                  		bsr.w	BossMove
00018274 6000                       		bra.s	loc_17976
00018276                            ; ===========================================================================
00018276                            
00018276                            loc_17960:
00018276 0868 0000 0022             		bchg	#0,$22(a0)
0001827C 317C 003F 003C             		move.w	#$3F,$3C(a0)
00018282 5528 0025                  		subq.b	#2,$25(a0)
00018286 317C 0000 0010             		move.w	#0,$10(a0)
0001828C                            
0001828C                            loc_17976:
0001828C 6000 FE42                  		bra.w	loc_177E6
00018290                            ; ===========================================================================
00018290                            
00018290                            loc_1797A:				; XREF: Obj3D_ShipIndex
00018290 5368 003C                  		subq.w	#1,$3C(a0)
00018294 6B00                       		bmi.s	loc_17984
00018296 6000 FEB2                  		bra.w	BossDefeated
0001829A                            ; ===========================================================================
0001829A                            
0001829A                            loc_17984:
0001829A 08E8 0000 0022             		bset	#0,$22(a0)
000182A0 08A8 0007 0022             		bclr	#7,$22(a0)
000182A6 4268 0010                  		clr.w	$10(a0)
000182AA 5428 0025                  		addq.b	#2,$25(a0)
000182AE 317C FFDA 003C             		move.w	#-$26,$3C(a0)
000182B4 4A38 F7A7                  		tst.b	($FFFFF7A7).w
000182B8 6600                       		bne.s	locret_179AA
000182BA 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
000182C0 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
000182C6 6000 FE82                  		bra.w	BossDefeated
000182CA                            
000182CA                            locret_179AA:
000182CA 4E75                       		rts	
000182CC                            ; ===========================================================================
000182CC                            
000182CC                            loc_179AC:				; XREF: Obj3D_ShipIndex
000182CC 4EB9 0000 DD70             		jsr ObjectFall		
000182D2 5268 003C                  		addq.w	#1,$3C(a0)
000182D6 6700                       		beq.s	loc_179BC
000182D8 6A00                       		bpl.s	loc_179C2
000182DA 6000                       		bra.s	loc_179EE
000182DC                            ; ===========================================================================
000182DC                            
000182DC                            loc_179BC:
000182DC 4268 0012                  		clr.w	$12(a0)
000182E0 6000                       		bra.s	loc_179EE
000182E2                            ; ===========================================================================
000182E2                            
000182E2                            loc_179C2:
000182E2 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
000182E8 6500                       		bcs.s	loc_179DA
000182EA 6700                       		beq.s	loc_179E0
000182EC 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
000182F2 6500                       		bcs.s	loc_179EE
000182F4 5428 0025                  		addq.b	#2,$25(a0)
000182F8 6000                       		bra.s	loc_179EE
000182FA                            ; ===========================================================================
000182FA                            
000182FA                            loc_179DA:
000182FA 5168 0012                  		subq.w	#8,$12(a0)
000182FE 6000                       		bra.s	loc_179EE
00018300 6000 FE48                  		bra.w	BossDefeated
00018304                            ; ===========================================================================
00018304                            
00018304                            loc_179E0:
00018304 4268 0012                  		clr.w	$12(a0)
00018308 303C 0081                  		move.w	#$81,d0
0001830C 4EB9 0000 15BA             		jsr	(PlaySound).l	; play GHZ music
00018312                            
00018312                            loc_179EE:
00018312 6100 FE78                  		bsr.w	BossMove
00018316 6000 FDB8                  		bra.w	loc_177E6
0001831A                            ; ===========================================================================
0001831A                            
0001831A                            loc_179F6:				; XREF: Obj3D_ShipIndex
0001831A 0C78 2AC0 F72A             		cmpi.w	#$2AC0,($FFFFF72A).w
00018320 6700                       		beq.s	loc_17A10
00018322 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00018326 6000                       		bra.s	loc_17A16
00018328                            ; ===========================================================================
00018328                            
00018328                            loc_17A10:
00018328 4A28 0001                  		tst.b	1(a0)
0001832C 6A00                       		bpl.s	Obj3D_ShipDel
0001832E                            
0001832E                            loc_17A16:
0001832E 6100 FE5C                  		bsr.w	BossMove
00018332 6000 FD9C                  		bra.w	loc_177E6
00018336                            ; ===========================================================================
00018336                            
00018336                            Obj3D_ShipDel:
00018336 4EF9 0000 DDFE             		jmp	DeleteObject
0001833C                            ; ===========================================================================
0001833C                            
0001833C                            Obj3D_FaceMain:				; XREF: Obj3D_Index
0001833C 7000                       		moveq	#0,d0
0001833E 7201                       		moveq	#1,d1
00018340 2268 0034                  		movea.l	$34(a0),a1
00018344 1029 0025                  		move.b	$25(a1),d0
00018348 5900                       		subq.b	#4,d0
0001834A 6600                       		bne.s	loc_17A3E
0001834C 0C69 2A00 0030             		cmpi.w	#$2A00,$30(a1)
00018352 6600                       		bne.s	loc_17A46
00018354 7204                       		moveq	#4,d1
00018356                            
00018356                            loc_17A3E:
00018356 5D00                       		subq.b	#6,d0
00018358 6B00                       		bmi.s	loc_17A46
0001835A 720A                       		moveq	#$A,d1
0001835C 6000                       		bra.s	loc_17A5A
0001835E                            ; ===========================================================================
0001835E                            
0001835E                            loc_17A46:
0001835E 4A29 0020                  		tst.b	$20(a1)
00018362 6600                       		bne.s	loc_17A50
00018364 7205                       		moveq	#5,d1
00018366 6000                       		bra.s	loc_17A5A
00018368                            ; ===========================================================================
00018368                            
00018368                            loc_17A50:
00018368 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001836E 6500                       		bcs.s	loc_17A5A
00018370 7204                       		moveq	#4,d1
00018372                            
00018372                            loc_17A5A:
00018372 1141 001C                  		move.b	d1,$1C(a0)
00018376 5500                       		subq.b	#2,d0
00018378 6600                       		bne.s	Obj3D_FaceDisp
0001837A 117C 0006 001C             		move.b	#6,$1C(a0)
00018380 4A28 0001                  		tst.b	1(a0)
00018384 6A00                       		bpl.s	Obj3D_FaceDel
00018386                            
00018386                            Obj3D_FaceDisp:
00018386 6000                       		bra.s	Obj3D_Display
00018388                            ; ===========================================================================
00018388                            
00018388                            Obj3D_FaceDel:
00018388 4EF9 0000 DDFE             		jmp	DeleteObject
0001838E                            ; ===========================================================================
0001838E                            
0001838E                            Obj3D_FlameMain:			; XREF: Obj3D_Index
0001838E 117C 0007 001C             		move.b	#7,$1C(a0)
00018394 2268 0034                  		movea.l	$34(a0),a1
00018398 0C29 000C 0025             		cmpi.b	#$C,$25(a1)
0001839E 6600                       		bne.s	loc_17A96
000183A0 117C 000B 001C             		move.b	#$B,$1C(a0)
000183A6 4A28 0001                  		tst.b	1(a0)
000183AA 6A00                       		bpl.s	Obj3D_FlameDel
000183AC 6000                       		bra.s	Obj3D_FlameDisp
000183AE                            ; ===========================================================================
000183AE                            
000183AE                            loc_17A96:
000183AE 3029 0010                  		move.w	$10(a1),d0
000183B2 6700                       		beq.s	Obj3D_FlameDisp
000183B4 117C 0008 001C             		move.b	#8,$1C(a0)
000183BA                            
000183BA                            Obj3D_FlameDisp:
000183BA 6000                       		bra.s	Obj3D_Display
000183BC                            ; ===========================================================================
000183BC                            
000183BC                            Obj3D_FlameDel:
000183BC 4EF9 0000 DDFE             		jmp	DeleteObject
000183C2                            ; ===========================================================================
000183C2                            
000183C2                            Obj3D_Display:				; XREF: Obj3D_FaceDisp; Obj3D_FlameDisp
000183C2 2268 0034                  		movea.l	$34(a0),a1
000183C6 3169 0008 0008             		move.w	8(a1),8(a0)
000183CC 3169 000C 000C             		move.w	$C(a1),$C(a0)
000183D2 1169 0022 0022             		move.b	$22(a1),$22(a0)
000183D8 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
000183DE 4EB9 0000 AE82             		jsr	AnimateSprite
000183E4 1028 0022                  		move.b	$22(a0),d0
000183E8 0200 0003                  		andi.b	#3,d0
000183EC 0228 00FC 0001             		andi.b	#$FC,1(a0)
000183F2 8128 0001                  		or.b	d0,1(a0)
000183F6 4EF9 0000 DDC2             		jmp	DisplaySprite
000183FC                            ; ===========================================================================
000183FC                            ; ---------------------------------------------------------------------------
000183FC                            ; Object 48 - ball on a	chain that Eggman swings (GHZ)
000183FC                            ; ---------------------------------------------------------------------------
000183FC                            
000183FC                            Obj48:					; XREF: Obj_Index
000183FC 7000                       		moveq	#0,d0
000183FE 1028 0024                  		move.b	$24(a0),d0
00018402 323B 0000                  		move.w	Obj48_Index(pc,d0.w),d1
00018406 4EFB 1000                  		jmp	Obj48_Index(pc,d1.w)
0001840A                            ; ===========================================================================
0001840A 0000                       Obj48_Index:	dc.w Obj48_Main-Obj48_Index
0001840C 0000                       		dc.w Obj48_Base-Obj48_Index
0001840E 0000                       		dc.w Obj48_Display2-Obj48_Index
00018410 0000                       		dc.w loc_17C68-Obj48_Index
00018412 0000                       		dc.w Obj48_ChkVanish-Obj48_Index
00018414                            ; ===========================================================================
00018414                            
00018414                            Obj48_Main:				; XREF: Obj48_Index
00018414 5428 0024                  		addq.b	#2,$24(a0)
00018418 317C 4080 0026             		move.w	#$4080,$26(a0)
0001841E 317C FE00 003E             		move.w	#-$200,$3E(a0)
00018424 217C 0000 0000 0004        		move.l	#Map_BossItems,4(a0)
0001842C 317C 046C 0002             		move.w	#$46C,2(a0)
00018432 45E8 0028                  		lea	$28(a0),a2
00018436 14FC 0000                  		move.b	#0,(a2)+
0001843A 7205                       		moveq	#5,d1
0001843C 2248                       		movea.l	a0,a1
0001843E 6000                       		bra.s	loc_17B60
00018440                            ; ===========================================================================
00018440                            
00018440                            Obj48_MakeLinks:
00018440 4EB9 0000 E25E             		jsr	SingleObjLoad2
00018446 6600                       		bne.s	Obj48_MakeBall
00018448 3368 0008 0008             		move.w	8(a0),8(a1)
0001844E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018454 12BC 0048                  		move.b	#$48,0(a1)	; load chain link object
00018458 137C 0006 0024             		move.b	#6,$24(a1)
0001845E 237C 0000 8244 0004        		move.l	#Map_obj15,4(a1)
00018466 337C 0380 0002             		move.w	#$380,2(a1)
0001846C 137C 0001 001A             		move.b	#1,$1A(a1)
00018472 5228 0028                  		addq.b	#1,$28(a0)
00018476                            
00018476                            loc_17B60:				; XREF: Obj48_Main
00018476 3A09                       		move.w	a1,d5
00018478 0445 D000                  		subi.w	#$D000,d5
0001847C EC4D                       		lsr.w	#6,d5
0001847E 0245 007F                  		andi.w	#$7F,d5
00018482 14C5                       		move.b	d5,(a2)+
00018484 137C 0004 0001             		move.b	#4,1(a1)
0001848A 137C 0008 0019             		move.b	#8,$19(a1)
00018490 137C 0006 0018             		move.b	#6,$18(a1)
00018496 2368 0034 0034             		move.l	$34(a0),$34(a1)
0001849C 51C9 FFA2                  		dbf	d1,Obj48_MakeLinks ; repeat sequence 5 more times
000184A0                            
000184A0                            Obj48_MakeBall:
000184A0 137C 0008 0024             		move.b	#8,$24(a1)
000184A6 237C 0000 8834 0004        		move.l	#Map_obj48,4(a1) ; load	different mappings for final link
000184AE 337C 43AA 0002             		move.w	#$43AA,2(a1)	; use different	graphics
000184B4 137C 0001 001A             		move.b	#1,$1A(a1)
000184BA 137C 0005 0018             		move.b	#5,$18(a1)
000184C0 137C 0081 0020             		move.b	#$81,$20(a1)	; make object hurt Sonic
000184C6 4E75                       		rts	
000184C8                            ; ===========================================================================
000184C8                            
000184C8 0010 2030 4060             Obj48_PosData:	dc.b 0,	$10, $20, $30, $40, $60	; y-position data for links and	giant ball
000184CE                            
000184CE                            ; ===========================================================================
000184CE                            
000184CE                            Obj48_Base:				; XREF: Obj48_Index
000184CE 47F9 0001 84C8             		lea	(Obj48_PosData).l,a3
000184D4 45E8 0028                  		lea	$28(a0),a2
000184D8 7C00                       		moveq	#0,d6
000184DA 1C1A                       		move.b	(a2)+,d6
000184DC                            
000184DC                            loc_17BC6:
000184DC 7800                       		moveq	#0,d4
000184DE 181A                       		move.b	(a2)+,d4
000184E0 ED4C                       		lsl.w	#6,d4
000184E2 0684 00FF D000             		addi.l	#$FFD000,d4
000184E8 2244                       		movea.l	d4,a1
000184EA 101B                       		move.b	(a3)+,d0
000184EC B029 003C                  		cmp.b	$3C(a1),d0
000184F0 6700                       		beq.s	loc_17BE0
000184F2 5229 003C                  		addq.b	#1,$3C(a1)
000184F6                            
000184F6                            loc_17BE0:
000184F6 51CE FFE4                  		dbf	d6,loc_17BC6
000184FA                            
000184FA B029 003C                  		cmp.b	$3C(a1),d0
000184FE 6600                       		bne.s	loc_17BFA
00018500 2268 0034                  		movea.l	$34(a0),a1
00018504 0C29 0006 0025             		cmpi.b	#6,$25(a1)
0001850A 6600                       		bne.s	loc_17BFA
0001850C 5428 0024                  		addq.b	#2,$24(a0)
00018510                            
00018510                            loc_17BFA:
00018510 0C68 0020 0032             		cmpi.w	#$20,$32(a0)
00018516 6700                       		beq.s	Obj48_Display
00018518 5268 0032                  		addq.w	#1,$32(a0)
0001851C                            
0001851C                            Obj48_Display:
0001851C 6100 0000                  		bsr.w	sub_17C2A
00018520 1028 0026                  		move.b	$26(a0),d0
00018524 4EB9 0000 81B6             		jsr	(Obj15_Move2).l
0001852A 4EF9 0000 DDC2             		jmp	DisplaySprite
00018530                            ; ===========================================================================
00018530                            
00018530                            Obj48_Display2:				; XREF: Obj48_Index
00018530 6100 0000                  		bsr.w	sub_17C2A
00018534 4EB9 0000 8176             		jsr	(Obj48_Move).l
0001853A 4EF9 0000 DDC2             		jmp	DisplaySprite
00018540                            
00018540                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018540                            
00018540                            
00018540                            sub_17C2A:				; XREF: Obj48_Display; Obj48_Display2
00018540 2268 0034                  		movea.l	$34(a0),a1
00018544 0628 0020 001B             		addi.b	#$20,$1B(a0)
0001854A 6400                       		bcc.s	loc_17C3C
0001854C 0868 0000 001A             		bchg	#0,$1A(a0)
00018552                            
00018552                            loc_17C3C:
00018552 3169 0008 003A             		move.w	8(a1),$3A(a0)
00018558 3029 000C                  		move.w	$C(a1),d0
0001855C D068 0032                  		add.w	$32(a0),d0
00018560 3140 0038                  		move.w	d0,$38(a0)
00018564 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001856A 4A29 0022                  		tst.b	$22(a1)
0001856E 6A00                       		bpl.s	locret_17C66
00018570 10BC 003F                  		move.b	#$3F,0(a0)
00018574 117C 0000 0024             		move.b	#0,$24(a0)
0001857A                            
0001857A                            locret_17C66:
0001857A 4E75                       		rts	
0001857C                            ; End of function sub_17C2A
0001857C                            
0001857C                            ; ===========================================================================
0001857C                            
0001857C                            loc_17C68:				; XREF: Obj48_Index
0001857C 2268 0034                  		movea.l	$34(a0),a1
00018580 4A29 0022                  		tst.b	$22(a1)
00018584 6A00                       		bpl.s	Obj48_Display3
00018586 10BC 003F                  		move.b	#$3F,0(a0)
0001858A 117C 0000 0024             		move.b	#0,$24(a0)
00018590                            
00018590                            Obj48_Display3:
00018590 4EF9 0000 DDC2             		jmp	DisplaySprite
00018596                            ; ===========================================================================
00018596                            
00018596                            Obj48_ChkVanish:			; XREF: Obj48_Index
00018596 7000                       		moveq	#0,d0
00018598 4A28 001A                  		tst.b	$1A(a0)
0001859C 6600                       		bne.s	Obj48_Vanish
0001859E 5200                       		addq.b	#1,d0
000185A0                            
000185A0                            Obj48_Vanish:
000185A0 1140 001A                  		move.b	d0,$1A(a0)
000185A4 2268 0034                  		movea.l	$34(a0),a1
000185A8 4A29 0022                  		tst.b	$22(a1)
000185AC 6A00                       		bpl.s	Obj48_Display4
000185AE 117C 0000 0020             		move.b	#0,$20(a0)
000185B4 6100 FB94                  		bsr.w	BossDefeated
000185B8 5328 003C                  		subq.b	#1,$3C(a0)
000185BC 6A00                       		bpl.s	Obj48_Display4
000185BE 10BC 003F                  		move.b	#$3F,(a0)
000185C2 117C 0000 0024             		move.b	#0,$24(a0)
000185C8                            
000185C8                            Obj48_Display4:
000185C8 4EF9 0000 DDC2             		jmp	DisplaySprite
000185CE                            ; ===========================================================================
000185CE                            Ani_Eggman:
000185CE                            	include "_anim\Eggman.asm"
000185CE                            ; ---------------------------------------------------------------------------
000185CE                            ; Animation script - Eggman (bosses)
000185CE                            ; ---------------------------------------------------------------------------
000185CE 0000                       		dc.w byte_17CD4-Ani_Eggman
000185D0 0000                       		dc.w byte_17CD8-Ani_Eggman
000185D2 0000                       		dc.w byte_17CDC-Ani_Eggman
000185D4 0000                       		dc.w byte_17CE0-Ani_Eggman
000185D6 0000                       		dc.w byte_17CE4-Ani_Eggman
000185D8 0000                       		dc.w byte_17CE8-Ani_Eggman
000185DA 0000                       		dc.w byte_17CEC-Ani_Eggman
000185DC 0000                       		dc.w byte_17CF0-Ani_Eggman
000185DE 0000                       		dc.w byte_17CF4-Ani_Eggman
000185E0 0000                       		dc.w byte_17CF8-Ani_Eggman
000185E2 0000                       		dc.w byte_17CFC-Ani_Eggman
000185E4 0000                       		dc.w byte_17D00-Ani_Eggman
000185E6 0F00 FF00                  byte_17CD4:	dc.b $F, 0, $FF, 0
000185EA 0501 02FF                  byte_17CD8:	dc.b 5,	1, 2, $FF
000185EE 0301 02FF                  byte_17CDC:	dc.b 3,	1, 2, $FF
000185F2 0101 02FF                  byte_17CE0:	dc.b 1,	1, 2, $FF
000185F6 0403 04FF                  byte_17CE4:	dc.b 4,	3, 4, $FF
000185FA 1F05 01FF                  byte_17CE8:	dc.b $1F, 5, 1,	$FF
000185FE 0306 01FF                  byte_17CEC:	dc.b 3,	6, 1, $FF
00018602 0F0A FF00                  byte_17CF0:	dc.b $F, $A, $FF, 0
00018606 0308 09FF                  byte_17CF4:	dc.b 3,	8, 9, $FF
0001860A 0108 09FF                  byte_17CF8:	dc.b 1,	8, 9, $FF
0001860E 0F07 FF00                  byte_17CFC:	dc.b $F, 7, $FF, 0
00018612 0209 080B 0C0B 0C09 08FE+  byte_17D00:	dc.b 2,	9, 8, $B, $C, $B, $C, 9, 8, $FE, 2, 0
0001861E                            		even
0001861E                            		even
0001861E                            Ani_TetoB:
0001861E                            	include "_anim\TetoB.asm"
0001861E                            ; ---------------------------------------------------------------------------
0001861E                            ; Animation script - Eggman (bosses)
0001861E                            ; ---------------------------------------------------------------------------
0001861E 0000                       		dc.w spin-Ani_TetoB
00018620 0000                       		dc.w static-Ani_TetoB
00018622 0000                       		dc.w static2-Ani_TetoB
00018624 0400 0102 03FF 00          spin:	dc.b 4, 0, 1, 2, 3, $FF, 0
0001862B 0500 FF                    static:	dc.b 5,	0, $FF
0001862E 0501 FF                    static2:	dc.b 5,	1, $FF
00018632 00                         		even
00018632 00                         		even
00018632                            ; ---------------------------------------------------------------------------
00018632                            ; Sprite mappings - Eggman (boss levels)
00018632                            ; ---------------------------------------------------------------------------
00018632                            Map_Eggman:
00018632                            	include "_maps\Eggman.asm"
00018632                            Map_dc7e:
00018632 0000                       Map_dc7e_0: 	dc.w Map_dc7e_1A-Map_dc7e
00018634 0000                       Map_dc7e_2: 	dc.w Map_dc7e_39-Map_dc7e
00018636 0000                       Map_dc7e_4: 	dc.w Map_dc7e_44-Map_dc7e
00018638 0000                       Map_dc7e_6: 	dc.w Map_dc7e_4F-Map_dc7e
0001863A 0000                       Map_dc7e_8: 	dc.w Map_dc7e_5F-Map_dc7e
0001863C 0000                       Map_dc7e_A: 	dc.w Map_dc7e_6F-Map_dc7e
0001863E 0000                       Map_dc7e_C: 	dc.w Map_dc7e_7F-Map_dc7e
00018640 0000                       Map_dc7e_E: 	dc.w Map_dc7e_8F-Map_dc7e
00018642 0000                       Map_dc7e_10: 	dc.w Map_dc7e_A4-Map_dc7e
00018644 0000                       Map_dc7e_12: 	dc.w Map_dc7e_AA-Map_dc7e
00018646 0000                       Map_dc7e_14: 	dc.w Map_dc7e_B0-Map_dc7e
00018648 0000                       Map_dc7e_16: 	dc.w Map_dc7e_B1-Map_dc7e
0001864A 0000                       Map_dc7e_18: 	dc.w Map_dc7e_BC-Map_dc7e
0001864C 06                         Map_dc7e_1A: 	dc.b $6
0001864D EC01 000A E4               	dc.b $EC, $1, $0, $A, $E4
00018652 EC05 000C 0C               	dc.b $EC, $5, $0, $C, $C
00018657 FC0E 2010 E4               	dc.b $FC, $E, $20, $10, $E4
0001865C FC0E 201C 04               	dc.b $FC, $E, $20, $1C, $4
00018661 140C 2028 EC               	dc.b $14, $C, $20, $28, $EC
00018666 1400 202C 0C               	dc.b $14, $0, $20, $2C, $C
0001866B 02                         Map_dc7e_39: 	dc.b $2
0001866C E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
00018671 EC0D 0002 EC               	dc.b $EC, $D, $0, $2, $EC
00018676 02                         Map_dc7e_44: 	dc.b $2
00018677 E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
0001867C EC0D 0035 EC               	dc.b $EC, $D, $0, $35, $EC
00018681 03                         Map_dc7e_4F: 	dc.b $3
00018682 E408 003D F4               	dc.b $E4, $8, $0, $3D, $F4
00018687 EC09 0040 EC               	dc.b $EC, $9, $0, $40, $EC
0001868C EC05 0046 04               	dc.b $EC, $5, $0, $46, $4
00018691 03                         Map_dc7e_5F: 	dc.b $3
00018692 E408 004A F4               	dc.b $E4, $8, $0, $4A, $F4
00018697 EC09 004D EC               	dc.b $EC, $9, $0, $4D, $EC
0001869C EC05 0053 04               	dc.b $EC, $5, $0, $53, $4
000186A1 03                         Map_dc7e_6F: 	dc.b $3
000186A2 E408 0057 F4               	dc.b $E4, $8, $0, $57, $F4
000186A7 EC09 005A EC               	dc.b $EC, $9, $0, $5A, $EC
000186AC EC05 0060 04               	dc.b $EC, $5, $0, $60, $4
000186B1 03                         Map_dc7e_7F: 	dc.b $3
000186B2 E404 0064 04               	dc.b $E4, $4, $0, $64, $4
000186B7 E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
000186BC EC0D 0035 EC               	dc.b $EC, $D, $0, $35, $EC
000186C1 04                         Map_dc7e_8F: 	dc.b $4
000186C2 E409 0066 F4               	dc.b $E4, $9, $0, $66, $F4
000186C7 E408 0057 F4               	dc.b $E4, $8, $0, $57, $F4
000186CC EC09 005A EC               	dc.b $EC, $9, $0, $5A, $EC
000186D1 EC05 0060 04               	dc.b $EC, $5, $0, $60, $4
000186D6 01                         Map_dc7e_A4: 	dc.b $1
000186D7 0405 002D 22               	dc.b $4, $5, $0, $2D, $22
000186DC 01                         Map_dc7e_AA: 	dc.b $1
000186DD 0405 0031 22               	dc.b $4, $5, $0, $31, $22
000186E2 00                         Map_dc7e_B0: 	dc.b $0
000186E3 02                         Map_dc7e_B1: 	dc.b $2
000186E4 0008 012A 22               	dc.b $0, $8, $1, $2A, $22
000186E9 0808 112A 22               	dc.b $8, $8, $11, $2A, $22
000186EE 02                         Map_dc7e_BC: 	dc.b $2
000186EF F80B 012D 22               	dc.b $F8, $B, $1, $2D, $22
000186F4 0001 0139 3A               	dc.b $0, $1, $1, $39, $3A
000186FA 00                         	even
000186FA 00                         	even
000186FA                            
000186FA                            ; ---------------------------------------------------------------------------
000186FA                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
000186FA                            ; ---------------------------------------------------------------------------
000186FA                            Map_BossItems:
000186FA                            	include "_maps\Boss items.asm"
000186FA                            ; ---------------------------------------------------------------------------
000186FA                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
000186FA                            ; ---------------------------------------------------------------------------
000186FA 0000 0000                  		dc.w byte_17DE4-Map_BossItems, byte_17DEA-Map_BossItems
000186FE 0000 0000                  		dc.w byte_17DF6-Map_BossItems, byte_17DFC-Map_BossItems
00018702 0000 0000                  		dc.w byte_17E02-Map_BossItems, byte_17E08-Map_BossItems
00018706 0000 0000                  		dc.w byte_17E1E-Map_BossItems, byte_17E2A-Map_BossItems
0001870A 01                         byte_17DE4:	dc.b 1
0001870B F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00018710 02                         byte_17DEA:	dc.b 2
00018711 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8
00018716 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001871B 00                         		dc.b 0
0001871C 01                         byte_17DF6:	dc.b 1
0001871D FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC
00018722 01                         byte_17DFC:	dc.b 1
00018723 1409 0007 F4               		dc.b $14, 9, 0,	7, $F4
00018728 01                         byte_17E02:	dc.b 1
00018729 1405 000D F8               		dc.b $14, 5, 0,	$D, $F8
0001872E 04                         byte_17E08:	dc.b 4
0001872F F004 0011 F8               		dc.b $F0, 4, 0,	$11, $F8
00018734 F801 0013 F8               		dc.b $F8, 1, 0,	$13, $F8
00018739 F801 0813 00               		dc.b $F8, 1, 8,	$13, 0
0001873E 0804 0015 F8               		dc.b 8,	4, 0, $15, $F8
00018743 00                         		dc.b 0
00018744 02                         byte_17E1E:	dc.b 2
00018745 0005 0017 00               		dc.b 0,	5, 0, $17, 0
0001874A 0000 001B 10               		dc.b 0,	0, 0, $1B, $10
0001874F 00                         		dc.b 0
00018750 02                         byte_17E2A:	dc.b 2
00018751 1804 001C 00               		dc.b $18, 4, 0,	$1C, 0
00018756 000B 001E 10               		dc.b 0,	$B, 0, $1E, $10
0001875C 00                         		even
0001875C 00                         		even
0001875C                            
0001875C                            ; ===========================================================================
0001875C                            ; ---------------------------------------------------------------------------
0001875C                            ; Object 77 - Fatass teto boss fight in LZ -STDH
0001875C                            ; ---------------------------------------------------------------------------
0001875C                            
0001875C                            
0001875C                            obj77:					; XREF: Obj_Index
0001875C 7000                       		moveq	#0,d0
0001875E 1028 0024                  		move.b	$24(a0),d0
00018762 323B 0000                  		move.w	obj77_Index(pc,d0.w),d1
00018766 4EFB 1000                  		jmp	obj77_Index(pc,d1.w)
0001876A                            ; ===========================================================================
0001876A 0000                       obj77_Index:	dc.w obj77_Main-obj77_Index
0001876C 0000                       		dc.w obj77_ShipMain-obj77_Index
0001876E 0000                       		dc.w obj77_FaceMain-obj77_Index
00018770 0000                       		dc.w obj77_FlameMain-obj77_Index
00018772                            
00018772 0200                       obj77_ObjData:	dc.b 2,	0		; routine counter, animation
00018774 0401                       		dc.b 4,	1
00018776 0607                       		dc.b 6,	7
00018778                            ; ===========================================================================
00018778                            
00018778                            obj77_Main:				; XREF: obj77_Index
00018778 45F9 0001 8772             		lea	(obj77_ObjData).l,a2
0001877E 2248                       		movea.l	a0,a1
00018780 7202                       		moveq	#2,d1
00018782 6000                       		bra.s	obj77_LoadBoss
00018784                            ; ===========================================================================
00018784                            
00018784                            obj77_Loop:
00018784 4EB9 0000 E25E             		jsr	SingleObjLoad2
0001878A 6600                       		bne.s	loc2_17772
0001878C                            
0001878C                            obj77_LoadBoss:				; XREF: obj77_Main
0001878C 135A 0024                  		move.b	(a2)+,$24(a1)
00018790 12BC 0077                  		move.b	#$77,0(a1)
00018794 3368 0008 0008             		move.w	8(a0),8(a1)
0001879A 3368 000C 000C             		move.w	$C(a0),$C(a1)
000187A0 237C 0000 0000 0004        		move.l	#Map_TetoBoss,4(a1)
000187A8 337C 0400 0002             		move.w	#$400,2(a1)
000187AE 137C 0004 0001             		move.b	#4,1(a1)
000187B4 137C 0020 0019             		move.b	#$20,$19(a1)
000187BA 137C 0003 0018             		move.b	#3,$18(a1)
000187C0 135A 001C                  		move.b	(a2)+,$1C(a1)
000187C4 2348 0034                  		move.l	a0,$34(a1)
000187C8 51C9 FFBA                  		dbf	d1,obj77_Loop	; repeat sequence 2 more times
000187CC                            
000187CC                            loc2_17772:
000187CC 3168 0008 0030             		move.w	8(a0),$30(a0)
000187D2 3168 000C 0038             		move.w	$C(a0),$38(a0)
000187D8 117C 000F 0020             		move.b	#$F,$20(a0)
000187DE 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
000187E4                            
000187E4                            obj77_ShipMain:				; XREF: obj77_Index
000187E4 7000                       		moveq	#0,d0
000187E6 1028 0025                  		move.b	$25(a0),d0
000187EA 323B 0000                  		move.w	obj77_ShipIndex(pc,d0.w),d1
000187EE 4EBB 1000                  		jsr	obj77_ShipIndex(pc,d1.w)
000187F2 43F9 0001 861E             		lea	(Ani_TetoB).l,a1
000187F8 4EB9 0000 AE82             		jsr	AnimateSprite
000187FE 1028 0022                  		move.b	$22(a0),d0
00018802 0200 0003                  		andi.b	#3,d0
00018806 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001880C 8128 0001                  		or.b	d0,1(a0)
00018810 4EF9 0000 DDC2             		jmp	DisplaySprite
00018816                            ; ===========================================================================
00018816 0000                       obj77_ShipIndex:dc.w obj77_ShipStart-obj77_ShipIndex
00018818 0000                       		dc.w obj77_MakeBall-obj77_ShipIndex
0001881A 0000                       		dc.w obj77_ShipMove-obj77_ShipIndex
0001881C 0000                       		dc.w loc2_17954-obj77_ShipIndex
0001881E 0000                       		dc.w fatassruns-obj77_ShipIndex		
00018820 0000                       		dc.w loc2_1797A-obj77_ShipIndex
00018822 0000                       		dc.w loc2_179AC-obj77_ShipIndex
00018824 0000                       		dc.w loc2_179F6-obj77_ShipIndex
00018826                            ; ===========================================================================
00018826                            
00018826                            obj77_ShipStart:			; XREF: obj77_ShipIndex
00018826                            	;	move.w	#$100,$12(a0)	; move ship down
00018826 6100 F964                  		bsr.w	BossMove
0001882A 0C68 06E0 0038             		cmpi.w	#$6E0,$38(a0)
00018830 6600                       		bne.s	loc2_177E6
00018832 317C 0000 0012             		move.w	#0,$12(a0)	; stop ship
00018838 5428 0025                  		addq.b	#2,$25(a0)	; goto next routine
0001883C                            
0001883C                            loc2_177E6:
0001883C                            ;		move.b	$3F(a0),d0
0001883C                            ;		jsr	(CalcSine).l
0001883C EC40                       		asr.w	#6,d0
0001883E D068 0038                  		add.w	$38(a0),d0
00018842 3140 000C                  		move.w	d0,$C(a0)
00018846 3168 0030 0008             		move.w	$30(a0),8(a0)
0001884C 5428 003F                  		addq.b	#2,$3F(a0)
00018850 0C28 000A 0025             		cmpi.b	#$A,$25(a0)
00018856 6400                       		bcc.s	locret_1784A2
00018858 4A28 0022                  		tst.b	$22(a0)
0001885C 6B00                       		bmi.s	loc2_1784C
0001885E 4A28 0020                  		tst.b	$20(a0)
00018862 6600                       		bne.s	locret_1784A2
00018864 4A28 003E                  		tst.b	$3E(a0)
00018868 6600                       		bne.s	obj77_ShipFlash
0001886A 117C 0060 003E             		move.b	#$60,$3E(a0)	; set number of	times for ship to flash
00018870 303C 00AC                  		move.w	#$AC,d0
00018874 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001887A                            
0001887A                            obj77_ShipFlash:
0001887A 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd pallet, 2nd	entry
0001887E 7000                       		moveq	#0,d0		; move 0 (black) to d0
00018880 4A51                       		tst.w	(a1)
00018882 6600                       		bne.s	loc2_1783C
00018884 303C 0EEE                  		move.w	#$EEE,d0	; move 0EEE (white) to d0
00018888                            
00018888                            loc2_1783C:
00018888 3280                       		move.w	d0,(a1)		; load colour stored in	d0
0001888A 5328 003E                  		subq.b	#1,$3E(a0)
0001888E 6600                       		bne.s	locret_1784A2
00018890 117C 000F 0020             		move.b	#$F,$20(a0)
00018896                            
00018896                            locret_1784A2:
00018896 4E75                       		rts	
00018898                            ; ===========================================================================
00018898                            
00018898                            loc2_1784C:				; XREF: loc2_177E6
00018898 7064                       		moveq	#100,d0
0001889A 6100 0000                  		bsr.w	AddPoints
0001889E 117C 000A 0025             		move.b	#$A,$25(a0)
000188A4 317C 00B3 003C             		move.w	#$B3,$3C(a0)
000188AA 4E75                       		rts	
000188AC                            ; ===========================================================================
000188AC                            
000188AC                            obj77_MakeBall:				; XREF: obj77_ShipIndex
000188AC 317C FF00 0010             		move.w	#-$100,$10(a0)
000188B2 117C 0001 001C             		move.b	#1,$1C(a0)	; it runs
000188B8 6100 F8D2                  		bsr.w	BossMove
000188BC 0C68 1E00 0030             		cmpi.w	#$1E00,$30(a0)
000188C2 6600                       		bne.s	loc2_17916
000188C4 317C 0000 0010             		move.w	#0,$10(a0)
000188CA 117C 0002 001C             		move.b	#2,$1C(a0)	; stare
000188D0 317C 0000 0012             		move.w	#0,$12(a0)
000188D6 5428 0025                  		addq.b	#2,$25(a0)
000188DA                            
000188DA                            loc2_17910:
000188DA 317C 0077 003C             		move.w	#$77,$3C(a0)
000188E0                            
000188E0                            loc2_17916:
000188E0 6000 FF5A                  		bra.w	loc2_177E6
000188E4                            ; ===========================================================================
000188E4                            
000188E4                            obj77_ShipMove:				; XREF: obj77_ShipIndex
000188E4 6100 F8A6                  		bsr.w	BossMove
000188E8 5368 003C                  		subq.w	#1,$3C(a0)
000188EC 6A00                       		bpl.s	loc2_17950 ; if time remains go here
000188EE 117C 0000 001C             		move.b	#0,$1C(a0)	; make it spin
000188F4 117C 0087 0020             		move.b	#$87,$20(a0) ; the spinning hurts you
000188FA 317C FE00 0010             		move.w	#-$200,$10(a0)	; move the ship	sideways
00018900 0C68 1D10 0030             		cmpi.w	#$1D10,$30(a0) ; is teto here
00018906 6600                       		bne.s	loc2_17950 ; if not branch
00018908                            
00018908                            fatass_attack:
00018908 317C 0000 0010             		move.w	#0,$10(a0) ; stop her
0001890E 317C FE00 0012             		move.w	#-$200,$12(a0) ; OH SHIT SHES GOING UP
00018914 0C68 0680 0038              		cmpi.w	#$680,$38(a0) ; is she here
0001891A 6600                       		bne.s	loc2_17950    ; if not you know the drill
0001891C 5428 0025                  		addq.b	#2,$25(a0)	; next routine!
00018920 317C 0000 0012             		move.w	#0,$12(a0) ; stop her		
00018926                            
00018926                            loc2_17950:
00018926 6000 FF14                  		bra.w	loc2_177E6
0001892A                            ; ===========================================================================
0001892A                            
0001892A                            loc2_17954:				; XREF: obj77_ShipIndex
0001892A 6100 F860                  		bsr.w	BossMove
0001892E 317C 0400 0012             		move.w	#$400,$12(a0) ; RUN A EARTHQUAKE!!
00018934                            		; i suck at programming
00018934 0C68 06E0 0038              		cmpi.w	#$6E0,$38(a0) ; is she back to the ground
0001893A 6600                       		bne.s	loc2_17976    ; if not blah blah
0001893C 317C 0000 0012             		move.w	#0,$12(a0) ; stop her		
00018942 5428 0025                  		addq.b	#2,$25(a0)	; next routine!
00018946 303C 00B9                  		move.w	#$B9,d0
0001894A 4EB9 0000 15BA             		jsr	(PlaySound).l	; play the earthquake sound
00018950                            
00018950                            Peartobombs:	
00018950 4EB9 0000 E25E                		jsr	SingleObjLoad2
00018956 6600                       		bne.s	secondone
00018958 12BC 0019                  		move.b	#$19,0(a1)	; load pearto bomb
0001895C 337C 1D70 0008             		move.w	#$1D70,8(a1)
00018962 337C 0670 000C             		move.w	#$670,$C(a1)
00018968                            secondone:		
00018968 4EB9 0000 E25E                		jsr	SingleObjLoad2
0001896E 6600                       		bne.s	loc2_17976		
00018970 12BC 0019                  		move.b	#$19,0(a1)	; load pearto bomb 2
00018974 337C 1D20 0008             		move.w	#$1D20,8(a1)
0001897A 337C 0670 000C             		move.w	#$670,$C(a1)
00018980                            lastone:
00018980 4EB9 0000 E25E                		jsr	SingleObjLoad2
00018986 6600                       		bne.s	loc2_17976		
00018988 12BC 0019                  		move.b	#$19,0(a1)	; load pearto bomb 3
0001898C 337C 1E00 0008             		move.w	#$1E00,8(a1)
00018992 337C 0670 000C             		move.w	#$670,$C(a1)
00018998                            		
00018998                            loc2_17976:
00018998 6000 FEA2                  		bra.w	loc2_177E6
0001899C                            		
0001899C                            ; ===========================================================================
0001899C                            Fatassruns:
0001899C 6100 F7EE                   		bsr.w	BossMove
000189A0 317C 0200 0010             		move.w	#$200,$10(a0)	; IT RUNS!!
000189A6 0C68 1E00 0030             		cmpi.w	#$1E00,$30(a0) ; is she back here
000189AC 6600                       		bne.s	processstuff ; is not go here
000189AE 317C 0000 0010             		move.w	#0,$10(a0)	; stop'
000189B4 117C 0002 001C             		move.b	#2,$1C(a0)	; stareeeee
000189BA 5928 0025                  		subq.b	#4,$25(a0) ; make the boss loop
000189BE 317C 0077 003C             		move.w	#$77,$3C(a0) ; timeerr
000189C4 117C 000F 0020             		move.b	#$F,$20(a0) ; now you can hit her
000189CA                            		
000189CA                            		
000189CA                            processstuff:
000189CA 6000 FE70                  		bra.w	loc2_177E6
000189CE                            ; ===========================================================================
000189CE                            
000189CE                            loc2_1797A:				; XREF: obj77_ShipIndex
000189CE 5368 003C                  		subq.w	#1,$3C(a0)
000189D2 6B00                       		bmi.s	loc2_17984
000189D4 6000 F774                  		bra.w	BossDefeated
000189D8                            ; ===========================================================================
000189D8                            
000189D8                            loc2_17984:
000189D8 08E8 0000 0022             		bset	#0,$22(a0)
000189DE 08A8 0007 0022             		bclr	#7,$22(a0)
000189E4 4268 0010                  		clr.w	$10(a0)
000189E8 5428 0025                  		addq.b	#2,$25(a0)
000189EC 317C FFDA 003C             		move.w	#-$26,$3C(a0)
000189F2 4A38 F7A7                  		tst.b	($FFFFF7A7).w
000189F6 6600                       		bne.s	locret_179AA2
000189F8 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
000189FE                            
000189FE                            locret_179AA2:
000189FE 4E75                       		rts	
00018A00                            ; ===========================================================================
00018A00                            
00018A00                            loc2_179AC:				; XREF: obj77_ShipIndex
00018A00 5268 003C                  		addq.w	#1,$3C(a0)
00018A04 6700                       		beq.s	loc2_179BC
00018A06 6A00                       		bpl.s	loc2_179C2
00018A08 0668 0018 0012             		addi.w	#$18,$12(a0)
00018A0E 6000                       		bra.s	loc2_179EE
00018A10                            ; ===========================================================================
00018A10                            
00018A10                            loc2_179BC:
00018A10 4268 0012                  		clr.w	$12(a0)
00018A14 6000                       		bra.s	loc2_179EE
00018A16                            ; ===========================================================================
00018A16                            
00018A16                            loc2_179C2:
00018A16 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00018A1C 6500                       		bcs.s	loc2_179DA
00018A1E 6700                       		beq.s	loc2_179E0
00018A20 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00018A26 6500                       		bcs.s	loc2_179EE
00018A28 5428 0025                  		addq.b	#2,$25(a0)
00018A2C 6000                       		bra.s	loc2_179EE
00018A2E                            ; ===========================================================================
00018A2E                            
00018A2E                            loc2_179DA:
00018A2E 5168 0012                  		subq.w	#8,$12(a0)
00018A32 6000                       		bra.s	loc2_179EE
00018A34                            ; ===========================================================================
00018A34                            
00018A34                            loc2_179E0:
00018A34 4268 0012                  		clr.w	$12(a0)
00018A38 303C 0097                  		move.w	#$97,d0
00018A3C 4EB9 0000 15BA             		jsr	(PlaySound).l	; play lz3 music
00018A42                            
00018A42                            loc2_179EE:
00018A42 6100 F748                  		bsr.w	BossMove
00018A46 6000 FDF4                  		bra.w	loc2_177E6
00018A4A                            ; ===========================================================================
00018A4A                            
00018A4A                            loc2_179F6:				; XREF: obj77_ShipIndex
00018A4A 317C 0400 0010             		move.w	#$400,$10(a0)
00018A50 317C FFC0 0012             		move.w	#-$40,$12(a0)
00018A56 0C78 1F00 F72A             		cmpi.w	#$1F00,($FFFFF72A).w
00018A5C 6700                       		beq.s	loc2_17A10
00018A5E 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00018A62 6000                       		bra.s	loc2_17A16
00018A64                            ; ===========================================================================
00018A64                            
00018A64                            loc2_17A10:
00018A64 4A28 0001                  		tst.b	1(a0)
00018A68 6A00                       		bpl.s	obj77_ShipDel
00018A6A                            
00018A6A                            loc2_17A16:
00018A6A 6100 F720                  		bsr.w	BossMove
00018A6E 6000 FDCC                  		bra.w	loc2_177E6
00018A72                            ; ===========================================================================
00018A72                            
00018A72                            obj77_ShipDel:
00018A72 4EF9 0000 DDFE             		jmp	DeleteObject
00018A78                            ; ===========================================================================
00018A78                            
00018A78                            obj77_FaceMain:				; XREF: obj77_Index
00018A78 4E75                       		rts
00018A7A                            ; ===========================================================================
00018A7A                            
00018A7A                            obj77_FlameMain:			; XREF: obj77_Index
00018A7A 4E75                       		rts
00018A7C                            ; ===========================================================================
00018A7C                            
00018A7C                            obj77_Display:				; XREF: obj77_FaceDisp; obj77_FlameDisp
00018A7C 43F9 0001 861E             		lea	(Ani_TetoB).l,a1
00018A82 4EB9 0000 AE82             		jsr	AnimateSprite
00018A88 4EF9 0000 DDC2             		jmp	DisplaySprite
00018A8E                            ; ---------------------------------------------------------------------------
00018A8E                            ; Sprite mappings - Fatass teto boss
00018A8E                            ; ---------------------------------------------------------------------------
00018A8E                            Map_TetoBoss:
00018A8E                            	include "_maps\tetoboss.asm"
00018A8E                            Map_f09a:
00018A8E 0000                       Map_f09a_0: 	dc.w Map_f09a_8-Map_f09a
00018A90 0000                       Map_f09a_2: 	dc.w Map_f09a_18-Map_f09a
00018A92 0000                       Map_f09a_4: 	dc.w Map_f09a_37-Map_f09a
00018A94 0000                       Map_f09a_6: 	dc.w Map_f09a_47-Map_f09a
00018A96 03                         Map_f09a_8: 	dc.b $3
00018A97 E50F 602B F0               	dc.b $E5, $F, $60, $2B, $F0
00018A9C 050E 603B F0               	dc.b $5, $E, $60, $3B, $F0
00018AA1 DD00 6047 F8               	dc.b $DD, $0, $60, $47, $F8
00018AA6 06                         Map_f09a_18: 	dc.b $6
00018AA7 EC0E 6000 E4               	dc.b $EC, $E, $60, $0, $E4
00018AAC 040E 600C EC               	dc.b $4, $E, $60, $C, $EC
00018AB1 E408 6018 F4               	dc.b $E4, $8, $60, $18, $F4
00018AB6 1C00 601B F4               	dc.b $1C, $0, $60, $1B, $F4
00018ABB EC0A 601C 04               	dc.b $EC, $A, $60, $1C, $4
00018AC0 0406 6025 0C               	dc.b $4, $6, $60, $25, $C
00018AC5 03                         Map_f09a_37: 	dc.b $3
00018AC6 E50F 682B F0               	dc.b $E5, $F, $68, $2B, $F0
00018ACB 050E 683B F0               	dc.b $5, $E, $68, $3B, $F0
00018AD0 DD00 6847 00               	dc.b $DD, $0, $68, $47, $0
00018AD5 06                         Map_f09a_47: 	dc.b $6
00018AD6 ED0E 6048 E4               	dc.b $ED, $E, $60, $48, $E4
00018ADB 050E 6054 EC               	dc.b $5, $E, $60, $54, $EC
00018AE0 E508 6060 F4               	dc.b $E5, $8, $60, $60, $F4
00018AE5 DD00 6063 FC               	dc.b $DD, $0, $60, $63, $FC
00018AEA ED0A 6064 04               	dc.b $ED, $A, $60, $64, $4
00018AEF 0502 606D 0C               	dc.b $5, $2, $60, $6D, $C
00018AF4                            	even
00018AF4                            	even
00018AF4                            ; ===========================================================================
00018AF4                            ; ---------------------------------------------------------------------------
00018AF4                            ; Object 73 - Eggman (MZ)
00018AF4                            ; ---------------------------------------------------------------------------
00018AF4                            
00018AF4                            Obj73:					; XREF: Obj_Index
00018AF4 7000                       		moveq	#0,d0
00018AF6 1028 0024                  		move.b	$24(a0),d0
00018AFA 323B 0000                  		move.w	Obj73_Index(pc,d0.w),d1
00018AFE 4EFB 1000                  		jmp	Obj73_Index(pc,d1.w)
00018B02                            ; ===========================================================================
00018B02 0000                       Obj73_Index:	dc.w Obj73_Main-Obj73_Index
00018B04 0000                       		dc.w Obj73_ShipMain-Obj73_Index
00018B06 0000                       		dc.w Obj73_FaceMain-Obj73_Index
00018B08 0000                       		dc.w Obj73_FlameMain-Obj73_Index
00018B0A 0000                       		dc.w Obj73_TubeMain-Obj73_Index
00018B0C                            
00018B0C 0200 04                    Obj73_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
00018B0F 0401 04                    		dc.b 4,	1, 4
00018B12 0607 04                    		dc.b 6,	7, 4
00018B15 0800 03                    		dc.b 8,	0, 3
00018B18                            ; ===========================================================================
00018B18                            
00018B18                            Obj73_Main:				; XREF: Obj73_Index
00018B18 3168 0008 0030             		move.w	8(a0),$30(a0)
00018B1E 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018B24 117C 000F 0020             		move.b	#$F,$20(a0)
00018B2A 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00018B30 45FA FFDA                  		lea	Obj73_ObjData(pc),a2
00018B34 2248                       		movea.l	a0,a1
00018B36 7203                       		moveq	#3,d1
00018B38 6000                       		bra.s	Obj73_LoadBoss
00018B3A                            ; ===========================================================================
00018B3A                            
00018B3A                            Obj73_Loop:
00018B3A 4EB9 0000 E25E             		jsr	SingleObjLoad2
00018B40 6600                       		bne.s	Obj73_ShipMain
00018B42 12BC 0073                  		move.b	#$73,0(a1)
00018B46 3368 0008 0008             		move.w	8(a0),8(a1)
00018B4C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018B52                            
00018B52                            Obj73_LoadBoss:				; XREF: Obj73_Main
00018B52 08A8 0000 0022             		bclr	#0,$22(a0)
00018B58 4229 0025                  		clr.b	$25(a1)
00018B5C 135A 0024                  		move.b	(a2)+,$24(a1)
00018B60 135A 001C                  		move.b	(a2)+,$1C(a1)
00018B64 135A 0018                  		move.b	(a2)+,$18(a1)
00018B68 237C 0001 8632 0004        		move.l	#Map_Eggman,4(a1)
00018B70 337C 0400 0002             		move.w	#$400,2(a1)
00018B76 137C 0004 0001             		move.b	#4,1(a1)
00018B7C 137C 0020 0019             		move.b	#$20,$19(a1)
00018B82 2348 0034                  		move.l	a0,$34(a1)
00018B86 51C9 FFB2                  		dbf	d1,Obj73_Loop	; repeat sequence 3 more times
00018B8A                            
00018B8A                            Obj73_ShipMain:
00018B8A 7000                       		moveq	#0,d0
00018B8C 1028 0025                  		move.b	$25(a0),d0
00018B90 323B 0000                  		move.w	Obj73_ShipIndex(pc,d0.w),d1
00018B94 4EBB 1000                  		jsr	Obj73_ShipIndex(pc,d1.w)
00018B98 43F9 0001 85CE             		lea	(Ani_Eggman).l,a1
00018B9E 4EB9 0000 AE82             		jsr	AnimateSprite
00018BA4 7003                       		moveq	#3,d0
00018BA6 C028 0022                  		and.b	$22(a0),d0
00018BAA 0228 00FC 0001             		andi.b	#$FC,1(a0)
00018BB0 8128 0001                  		or.b	d0,1(a0)
00018BB4 4EF9 0000 DDC2             		jmp	DisplaySprite
00018BBA                            ; ===========================================================================
00018BBA 0000                       Obj73_ShipIndex:dc.w loc_18302-Obj73_ShipIndex
00018BBC 0000                       		dc.w loc_183AA-Obj73_ShipIndex
00018BBE 0000                       		dc.w loc_184F6-Obj73_ShipIndex
00018BC0 0000                       		dc.w loc_1852C-Obj73_ShipIndex
00018BC2 0000                       		dc.w loc_18582-Obj73_ShipIndex
00018BC4                            ; ===========================================================================
00018BC4                            
00018BC4                            loc_18302:				; XREF: Obj73_ShipIndex
00018BC4 1028 003F                  		move.b	$3F(a0),d0
00018BC8 5428 003F                  		addq.b	#2,$3F(a0)
00018BCC 4EB9 0000 2CC4             		jsr	(CalcSine).l
00018BD2 E440                       		asr.w	#2,d0
00018BD4 3140 0012                  		move.w	d0,$12(a0)
00018BD8 317C FF00 0010             		move.w	#-$100,$10(a0)
00018BDE 6100 F5AC                  		bsr.w	BossMove
00018BE2 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
00018BE8 6600                       		bne.s	loc_18334
00018BEA 5428 0025                  		addq.b	#2,$25(a0)
00018BEE 4228 0028                  		clr.b	$28(a0)
00018BF2 42A8 0010                  		clr.l	$10(a0)
00018BF6                            
00018BF6                            loc_18334:
00018BF6 4EB9 0000 2C9E             		jsr	(RandomNumber).l
00018BFC 1140 0034                  		move.b	d0,$34(a0)
00018C00                            
00018C00                            loc_1833E:
00018C00 3168 0038 000C             		move.w	$38(a0),$C(a0)
00018C06 3168 0030 0008             		move.w	$30(a0),8(a0)
00018C0C 0C28 0004 0025             		cmpi.b	#4,$25(a0)
00018C12 6400                       		bcc.s	locret_18390
00018C14 4A28 0022                  		tst.b	$22(a0)
00018C18 6B00                       		bmi.s	loc_18392
00018C1A 4A28 0020                  		tst.b	$20(a0)
00018C1E 6600                       		bne.s	locret_18390
00018C20 4A28 003E                  		tst.b	$3E(a0)
00018C24 6600                       		bne.s	loc_18374
00018C26 117C 0028 003E             		move.b	#$28,$3E(a0)
00018C2C 303C 00AC                  		move.w	#$AC,d0
00018C30 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play boss damage sound
00018C36                            
00018C36                            loc_18374:
00018C36 43F8 FB22                  		lea	($FFFFFB22).w,a1
00018C3A 7000                       		moveq	#0,d0
00018C3C 4A51                       		tst.w	(a1)
00018C3E 6600                       		bne.s	loc_18382
00018C40 303C 0EEE                  		move.w	#$EEE,d0
00018C44                            
00018C44                            loc_18382:
00018C44 3280                       		move.w	d0,(a1)
00018C46 5328 003E                  		subq.b	#1,$3E(a0)
00018C4A 6600                       		bne.s	locret_18390
00018C4C 117C 000F 0020             		move.b	#$F,$20(a0)
00018C52                            
00018C52                            locret_18390:
00018C52 4E75                       		rts	
00018C54                            ; ===========================================================================
00018C54                            
00018C54                            loc_18392:				; XREF: loc_1833E
00018C54 7064                       		moveq	#100,d0
00018C56 6100 0000                  		bsr.w	AddPoints
00018C5A 117C 0004 0025             		move.b	#4,$25(a0)
00018C60 317C 00B4 003C             		move.w	#$B4,$3C(a0)
00018C66 4268 0010                  		clr.w	$10(a0)
00018C6A 4E75                       		rts	
00018C6C                            ; ===========================================================================
00018C6C                            
00018C6C                            loc_183AA:				; XREF: Obj73_ShipIndex
00018C6C 7000                       		moveq	#0,d0
00018C6E 1028 0028                  		move.b	$28(a0),d0
00018C72 303B 0000                  		move.w	off_183C2(pc,d0.w),d0
00018C76 4EBB 0000                  		jsr	off_183C2(pc,d0.w)
00018C7A 0228 0006 0028             		andi.b	#6,$28(a0)
00018C80 6000 FF7E                  		bra.w	loc_1833E
00018C84                            ; ===========================================================================
00018C84 0000                       off_183C2:	dc.w loc_183CA-off_183C2
00018C86 0000                       		dc.w Obj73_MakeLava2-off_183C2
00018C88 0000                       		dc.w loc_183CA-off_183C2
00018C8A 0000                       		dc.w Obj73_MakeLava2-off_183C2
00018C8C                            ; ===========================================================================
00018C8C                            
00018C8C                            loc_183CA:				; XREF: off_183C2
00018C8C 4A68 0010                  		tst.w	$10(a0)
00018C90 6600                       		bne.s	loc_183FE
00018C92 7040                       		moveq	#$40,d0
00018C94 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
00018C9A 6700                       		beq.s	loc_183E6
00018C9C 6500                       		bcs.s	loc_183DE
00018C9E 4440                       		neg.w	d0
00018CA0                            
00018CA0                            loc_183DE:
00018CA0 3140 0012                  		move.w	d0,$12(a0)
00018CA4 6000 F4E6                  		bra.w	BossMove
00018CA8                            ; ===========================================================================
00018CA8                            
00018CA8                            loc_183E6:
00018CA8 317C 0200 0010             		move.w	#$200,$10(a0)
00018CAE 317C 0100 0012             		move.w	#$100,$12(a0)
00018CB4 0828 0000 0022             		btst	#0,$22(a0)
00018CBA 6600                       		bne.s	loc_183FE
00018CBC 4468 0010                  		neg.w	$10(a0)
00018CC0                            
00018CC0                            loc_183FE:
00018CC0 0C28 0018 003E             		cmpi.b	#$18,$3E(a0)
00018CC6 6400                       		bcc.s	Obj73_MakeLava
00018CC8 6100 F4C2                  		bsr.w	BossMove
00018CCC 5968 0012                  		subq.w	#4,$12(a0)
00018CD0                            
00018CD0                            Obj73_MakeLava:
00018CD0 5328 0034                  		subq.b	#1,$34(a0)
00018CD4 6400                       		bcc.s	loc_1845C
00018CD6 4EB9 0000 E248             		jsr	SingleObjLoad
00018CDC 6600                       		bne.s	loc_1844A
00018CDE 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
00018CE2 337C 02E8 000C             		move.w	#$2E8,$C(a1)	; set Y	position
00018CE8 4EB9 0000 2C9E             		jsr	(RandomNumber).l
00018CEE 0280 0000 FFFF             		andi.l	#$FFFF,d0
00018CF4 80FC 0050                  		divu.w	#$50,d0
00018CF8 4840                       		swap	d0
00018CFA 0640 1878                  		addi.w	#$1878,d0
00018CFE 3340 0008                  		move.w	d0,8(a1)
00018D02 EE09                       		lsr.b	#7,d1
00018D04 337C 00FF 0028             		move.w	#$FF,$28(a1)
00018D0A                            
00018D0A                            loc_1844A:
00018D0A 4EB9 0000 2C9E             		jsr	(RandomNumber).l
00018D10 0200 001F                  		andi.b	#$1F,d0
00018D14 0600 0040                  		addi.b	#$40,d0
00018D18 1140 0034                  		move.b	d0,$34(a0)
00018D1C                            
00018D1C                            loc_1845C:
00018D1C 0828 0000 0022             		btst	#0,$22(a0)
00018D22 6700                       		beq.s	loc_18474
00018D24 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
00018D2A 6D00                       		blt.s	locret_1849C
00018D2C 317C 1910 0030             		move.w	#$1910,$30(a0)
00018D32 6000                       		bra.s	loc_18482
00018D34                            ; ===========================================================================
00018D34                            
00018D34                            loc_18474:
00018D34 0C68 1830 0030             		cmpi.w	#$1830,$30(a0)
00018D3A 6E00                       		bgt.s	locret_1849C
00018D3C 317C 1830 0030             		move.w	#$1830,$30(a0)
00018D42                            
00018D42                            loc_18482:
00018D42 4268 0010                  		clr.w	$10(a0)
00018D46 317C FE80 0012             		move.w	#-$180,$12(a0)
00018D4C 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
00018D52 6400                       		bcc.s	loc_18498
00018D54 4468 0012                  		neg.w	$12(a0)
00018D58                            
00018D58                            loc_18498:
00018D58 5428 0028                  		addq.b	#2,$28(a0)
00018D5C                            
00018D5C                            locret_1849C:
00018D5C 4E75                       		rts	
00018D5E                            ; ===========================================================================
00018D5E                            
00018D5E                            Obj73_MakeLava2:			; XREF: off_183C2
00018D5E 6100 F42C                  		bsr.w	BossMove
00018D62 3028 0038                  		move.w	$38(a0),d0
00018D66 0440 022C                  		subi.w	#$22C,d0
00018D6A 6E00                       		bgt.s	locret_184F4
00018D6C 303C 022C                  		move.w	#$22C,d0
00018D70 4A68 0012                  		tst.w	$12(a0)
00018D74 6700                       		beq.s	loc_184EA
00018D76 4268 0012                  		clr.w	$12(a0)
00018D7A 317C 0050 003C             		move.w	#$50,$3C(a0)
00018D80 0868 0000 0022             		bchg	#0,$22(a0)
00018D86 4EB9 0000 E248             		jsr	SingleObjLoad
00018D8C 6600                       		bne.s	loc_184EA
00018D8E 3368 0030 0008             		move.w	$30(a0),8(a1)
00018D94 3368 0038 000C             		move.w	$38(a0),$C(a1)
00018D9A 0669 0018 000C             		addi.w	#$18,$C(a1)
00018DA0 12BC 0074                  		move.b	#$74,(a1)	; load lava ball object
00018DA4 137C 0001 0028             		move.b	#1,$28(a1)
00018DAA                            
00018DAA                            loc_184EA:
00018DAA 5368 003C                  		subq.w	#1,$3C(a0)
00018DAE 6600                       		bne.s	locret_184F4
00018DB0 5428 0028                  		addq.b	#2,$28(a0)
00018DB4                            
00018DB4                            locret_184F4:
00018DB4 4E75                       		rts	
00018DB6                            ; ===========================================================================
00018DB6                            
00018DB6                            loc_184F6:				; XREF: Obj73_ShipIndex
00018DB6 5368 003C                  		subq.w	#1,$3C(a0)
00018DBA 6B00                       		bmi.s	loc_18500
00018DBC 6000 F38C                  		bra.w	BossDefeated
00018DC0                            ; ===========================================================================
00018DC0                            
00018DC0                            loc_18500:
00018DC0 08E8 0000 0022             		bset	#0,$22(a0)
00018DC6 08A8 0007 0022             		bclr	#7,$22(a0)
00018DCC 4268 0010                  		clr.w	$10(a0)
00018DD0 5428 0025                  		addq.b	#2,$25(a0)
00018DD4 317C FFDA 003C             		move.w	#-$26,$3C(a0)
00018DDA 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00018DDE 6600                       		bne.s	locret_1852A
00018DE0 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00018DE6 4268 0012                  		clr.w	$12(a0)
00018DEA                            
00018DEA                            locret_1852A:
00018DEA 4E75                       		rts	
00018DEC                            ; ===========================================================================
00018DEC                            
00018DEC                            loc_1852C:				; XREF: Obj73_ShipIndex
00018DEC 5268 003C                  		addq.w	#1,$3C(a0)
00018DF0 6700                       		beq.s	loc_18544
00018DF2 6A00                       		bpl.s	loc_1854E
00018DF4 0C68 0270 0038             		cmpi.w	#$270,$38(a0)
00018DFA 6400                       		bcc.s	loc_18544
00018DFC 0668 0018 0012             		addi.w	#$18,$12(a0)
00018E02 6000                       		bra.s	loc_1857A
00018E04                            ; ===========================================================================
00018E04                            
00018E04                            loc_18544:
00018E04 4268 0012                  		clr.w	$12(a0)
00018E08 4268 003C                  		clr.w	$3C(a0)
00018E0C 6000                       		bra.s	loc_1857A
00018E0E                            ; ===========================================================================
00018E0E                            
00018E0E                            loc_1854E:
00018E0E 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00018E14 6500                       		bcs.s	loc_18566
00018E16 6700                       		beq.s	loc_1856C
00018E18 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00018E1E 6500                       		bcs.s	loc_1857A
00018E20 5428 0025                  		addq.b	#2,$25(a0)
00018E24 6000                       		bra.s	loc_1857A
00018E26                            ; ===========================================================================
00018E26                            
00018E26                            loc_18566:
00018E26 5168 0012                  		subq.w	#8,$12(a0)
00018E2A 6000                       		bra.s	loc_1857A
00018E2C                            ; ===========================================================================
00018E2C                            
00018E2C                            loc_1856C:
00018E2C 4268 0012                  		clr.w	$12(a0)
00018E30 303C 0083                  		move.w	#$83,d0
00018E34 4EB9 0000 15BA             		jsr	(PlaySound).l	; play MZ music
00018E3A                            
00018E3A                            loc_1857A:
00018E3A 6100 F350                  		bsr.w	BossMove
00018E3E 6000 FDC0                  		bra.w	loc_1833E
00018E42                            ; ===========================================================================
00018E42                            
00018E42                            loc_18582:				; XREF: Obj73_ShipIndex
00018E42 317C 0500 0010             		move.w	#$500,$10(a0)
00018E48 317C FFC0 0012             		move.w	#-$40,$12(a0)
00018E4E 0C78 1960 F72A             		cmpi.w	#$1960,($FFFFF72A).w
00018E54 6400                       		bcc.s	loc_1859C
00018E56 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00018E5A 6000                       		bra.s	loc_185A2
00018E5C                            ; ===========================================================================
00018E5C                            
00018E5C                            loc_1859C:
00018E5C 4A28 0001                  		tst.b	1(a0)
00018E60 6A00                       		bpl.s	Obj73_ShipDel
00018E62                            
00018E62                            loc_185A2:
00018E62 6100 F328                  		bsr.w	BossMove
00018E66 6000 FD98                  		bra.w	loc_1833E
00018E6A                            ; ===========================================================================
00018E6A                            
00018E6A                            Obj73_ShipDel:
00018E6A 4EF9 0000 DDFE             		jmp	DeleteObject
00018E70                            ; ===========================================================================
00018E70                            
00018E70                            Obj73_FaceMain:				; XREF: Obj73_Index
00018E70 7000                       		moveq	#0,d0
00018E72 7201                       		moveq	#1,d1
00018E74 2268 0034                  		movea.l	$34(a0),a1
00018E78 1029 0025                  		move.b	$25(a1),d0
00018E7C 5540                       		subq.w	#2,d0
00018E7E 6600                       		bne.s	loc_185D2
00018E80 0829 0001 0028             		btst	#1,$28(a1)
00018E86 6700                       		beq.s	loc_185DA
00018E88 4A69 0012                  		tst.w	$12(a1)
00018E8C 6600                       		bne.s	loc_185DA
00018E8E 7204                       		moveq	#4,d1
00018E90 6000                       		bra.s	loc_185EE
00018E92                            ; ===========================================================================
00018E92                            
00018E92                            loc_185D2:
00018E92 5500                       		subq.b	#2,d0
00018E94 6B00                       		bmi.s	loc_185DA
00018E96 720A                       		moveq	#$A,d1
00018E98 6000                       		bra.s	loc_185EE
00018E9A                            ; ===========================================================================
00018E9A                            
00018E9A                            loc_185DA:
00018E9A 4A29 0020                  		tst.b	$20(a1)
00018E9E 6600                       		bne.s	loc_185E4
00018EA0 7205                       		moveq	#5,d1
00018EA2 6000                       		bra.s	loc_185EE
00018EA4                            ; ===========================================================================
00018EA4                            
00018EA4                            loc_185E4:
00018EA4 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00018EAA 6500                       		bcs.s	loc_185EE
00018EAC 7204                       		moveq	#4,d1
00018EAE                            
00018EAE                            loc_185EE:
00018EAE 1141 001C                  		move.b	d1,$1C(a0)
00018EB2 5900                       		subq.b	#4,d0
00018EB4 6600                       		bne.s	loc_18602
00018EB6 117C 0006 001C             		move.b	#6,$1C(a0)
00018EBC 4A28 0001                  		tst.b	1(a0)
00018EC0 6A00                       		bpl.s	Obj73_FaceDel
00018EC2                            
00018EC2                            loc_18602:
00018EC2 6000                       		bra.s	Obj73_Display
00018EC4                            ; ===========================================================================
00018EC4                            
00018EC4                            Obj73_FaceDel:
00018EC4 4EF9 0000 DDFE             		jmp	DeleteObject
00018ECA                            ; ===========================================================================
00018ECA                            
00018ECA                            Obj73_FlameMain:			; XREF: Obj73_Index
00018ECA 117C 0007 001C             		move.b	#7,$1C(a0)
00018ED0 2268 0034                  		movea.l	$34(a0),a1
00018ED4 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00018EDA 6D00                       		blt.s	loc_1862A
00018EDC 117C 000B 001C             		move.b	#$B,$1C(a0)
00018EE2 4A28 0001                  		tst.b	1(a0)
00018EE6 6A00                       		bpl.s	Obj73_FlameDel
00018EE8 6000                       		bra.s	loc_18636
00018EEA                            ; ===========================================================================
00018EEA                            
00018EEA                            loc_1862A:
00018EEA 4A69 0010                  		tst.w	$10(a1)
00018EEE 6700                       		beq.s	loc_18636
00018EF0 117C 0008 001C             		move.b	#8,$1C(a0)
00018EF6                            
00018EF6                            loc_18636:
00018EF6 6000                       		bra.s	Obj73_Display
00018EF8                            ; ===========================================================================
00018EF8                            
00018EF8                            Obj73_FlameDel:				; XREF: Obj73_FlameMain
00018EF8 4EF9 0000 DDFE             		jmp	DeleteObject
00018EFE                            ; ===========================================================================
00018EFE                            
00018EFE                            Obj73_Display:
00018EFE 43F9 0001 85CE             		lea	(Ani_Eggman).l,a1
00018F04 4EB9 0000 AE82             		jsr	AnimateSprite
00018F0A                            
00018F0A                            loc_1864A:
00018F0A 2268 0034                  		movea.l	$34(a0),a1
00018F0E 3169 0008 0008             		move.w	8(a1),8(a0)
00018F14 3169 000C 000C             		move.w	$C(a1),$C(a0)
00018F1A 1169 0022 0022             		move.b	$22(a1),$22(a0)
00018F20 7003                       		moveq	#3,d0
00018F22 C028 0022                  		and.b	$22(a0),d0
00018F26 0228 00FC 0001             		andi.b	#-4,1(a0)
00018F2C 8128 0001                  		or.b	d0,1(a0)
00018F30 4EF9 0000 DDC2             		jmp	DisplaySprite
00018F36                            ; ===========================================================================
00018F36                            
00018F36                            Obj73_TubeMain:				; XREF: Obj73_Index
00018F36 2268 0034                  		movea.l	$34(a0),a1
00018F3A 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00018F40 6600                       		bne.s	loc_18688
00018F42 4A28 0001                  		tst.b	1(a0)
00018F46 6A00                       		bpl.s	Obj73_TubeDel
00018F48                            
00018F48                            loc_18688:
00018F48 217C 0001 86FA 0004        		move.l	#Map_BossItems,4(a0)
00018F50 317C 246C 0002             		move.w	#$246C,2(a0)
00018F56 117C 0004 001A             		move.b	#4,$1A(a0)
00018F5C 60AC                       		bra.s	loc_1864A
00018F5E                            ; ===========================================================================
00018F5E                            
00018F5E                            Obj73_TubeDel:
00018F5E 4EF9 0000 DDFE             		jmp	DeleteObject
00018F64                            ; ===========================================================================
00018F64                            ; ---------------------------------------------------------------------------
00018F64                            ; Object 74 - lava that	Eggman drops (MZ)
00018F64                            ; ---------------------------------------------------------------------------
00018F64                            
00018F64                            Obj74:					; XREF: Obj_Index
00018F64 7000                       		moveq	#0,d0
00018F66 1028 0024                  		move.b	$24(a0),d0
00018F6A 303B 0000                  		move.w	Obj74_Index(pc,d0.w),d0
00018F6E 4EBB 0000                  		jsr	Obj74_Index(pc,d0.w)
00018F72 4EF9 0000 DDC2             		jmp	DisplaySprite
00018F78                            ; ===========================================================================
00018F78 0000                       Obj74_Index:	dc.w Obj74_Main-Obj74_Index
00018F7A 0000                       		dc.w Obj74_Action-Obj74_Index
00018F7C 0000                       		dc.w loc_18886-Obj74_Index
00018F7E 0000                       		dc.w Obj74_Delete3-Obj74_Index
00018F80                            ; ===========================================================================
00018F80                            
00018F80                            Obj74_Main:				; XREF: Obj74_Index
00018F80 117C 0008 0016             		move.b	#8,$16(a0)
00018F86 117C 0008 0017             		move.b	#8,$17(a0)
00018F8C 217C 0000 BA80 0004        		move.l	#Map_obj14,4(a0)
00018F94 317C 0345 0002             		move.w	#$345,2(a0)
00018F9A 117C 0004 0001             		move.b	#4,1(a0)
00018FA0 117C 0005 0018             		move.b	#5,$18(a0)
00018FA6 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018FAC 117C 0008 0019             		move.b	#8,$19(a0)
00018FB2 5428 0024                  		addq.b	#2,$24(a0)
00018FB6 4A28 0028                  		tst.b	$28(a0)
00018FBA 6600                       		bne.s	loc_1870A
00018FBC 117C 008B 0020             		move.b	#$8B,$20(a0)
00018FC2 5428 0024                  		addq.b	#2,$24(a0)
00018FC6 6000 0000                  		bra.w	loc_18886
00018FCA                            ; ===========================================================================
00018FCA                            
00018FCA                            loc_1870A:
00018FCA 117C 001E 0029             		move.b	#$1E,$29(a0)
00018FD0 303C 00AE                  		move.w	#$AE,d0
00018FD4 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play lava sound
00018FDA                            
00018FDA                            Obj74_Action:				; XREF: Obj74_Index
00018FDA 7000                       		moveq	#0,d0
00018FDC 1028 0025                  		move.b	$25(a0),d0
00018FE0 303B 0000                  		move.w	Obj74_Index2(pc,d0.w),d0
00018FE4 4EBB 0000                  		jsr	Obj74_Index2(pc,d0.w)
00018FE8 4EB9 0000 DD9C             		jsr	SpeedToPos
00018FEE 43F9 0000 EC7C             		lea	(Ani_obj14).l,a1
00018FF4 4EB9 0000 AE82             		jsr	AnimateSprite
00018FFA 0C68 02E8 000C             		cmpi.w	#$2E8,$C(a0)
00019000 6200                       		bhi.s	Obj74_Delete
00019002 4E75                       		rts	
00019004                            ; ===========================================================================
00019004                            
00019004                            Obj74_Delete:
00019004 4EF9 0000 DDFE             		jmp	DeleteObject
0001900A                            ; ===========================================================================
0001900A 0000                       Obj74_Index2:	dc.w Obj74_Drop-Obj74_Index2
0001900C 0000                       		dc.w Obj74_MakeFlame-Obj74_Index2
0001900E 0000                       		dc.w Obj74_Duplicate-Obj74_Index2
00019010 0000                       		dc.w Obj74_FallEdge-Obj74_Index2
00019012                            ; ===========================================================================
00019012                            
00019012                            Obj74_Drop:				; XREF: Obj74_Index2
00019012 08E8 0001 0022             		bset	#1,$22(a0)
00019018 5328 0029                  		subq.b	#1,$29(a0)
0001901C 6A00                       		bpl.s	locret_18780
0001901E 117C 008B 0020             		move.b	#$8B,$20(a0)
00019024 4228 0028                  		clr.b	$28(a0)
00019028 0668 0018 0012             		addi.w	#$18,$12(a0)
0001902E 08A8 0001 0022             		bclr	#1,$22(a0)
00019034 6100 C686                  		bsr.w	ObjHitFloor
00019038 4A41                       		tst.w	d1
0001903A 6A00                       		bpl.s	locret_18780
0001903C 5428 0025                  		addq.b	#2,$25(a0)
00019040                            
00019040                            locret_18780:
00019040 4E75                       		rts	
00019042                            ; ===========================================================================
00019042                            
00019042                            Obj74_MakeFlame:			; XREF: Obj74_Index2
00019042 5568 000C                  		subq.w	#2,$C(a0)
00019046 08E8 0007 0002             		bset	#7,2(a0)
0001904C 317C 00A0 0010             		move.w	#$A0,$10(a0)
00019052 4268 0012                  		clr.w	$12(a0)
00019056 3168 0008 0030             		move.w	8(a0),$30(a0)
0001905C 3168 000C 0038             		move.w	$C(a0),$38(a0)
00019062 117C 0003 0029             		move.b	#3,$29(a0)
00019068 4EB9 0000 E25E             		jsr	SingleObjLoad2
0001906E 6600                       		bne.s	loc_187CA
00019070 47D1                       		lea	(a1),a3
00019072 45D0                       		lea	(a0),a2
00019074 7003                       		moveq	#3,d0
00019076                            
00019076                            Obj74_Loop:
00019076 26DA                       		move.l	(a2)+,(a3)+
00019078 26DA                       		move.l	(a2)+,(a3)+
0001907A 26DA                       		move.l	(a2)+,(a3)+
0001907C 26DA                       		move.l	(a2)+,(a3)+
0001907E 51C8 FFF6                  		dbf	d0,Obj74_Loop
00019082                            
00019082 4469 0010                  		neg.w	$10(a1)
00019086 5429 0025                  		addq.b	#2,$25(a1)
0001908A                            
0001908A                            loc_187CA:
0001908A 5428 0025                  		addq.b	#2,$25(a0)
0001908E 4E75                       		rts	
00019090                            
00019090                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019090                            
00019090                            
00019090                            Obj74_Duplicate2:			; XREF: Obj74_Duplicate
00019090 4EB9 0000 E25E             		jsr	SingleObjLoad2
00019096 6600                       		bne.s	locret_187EE
00019098 3368 0008 0008             		move.w	8(a0),8(a1)
0001909E 3368 000C 000C             		move.w	$C(a0),$C(a1)
000190A4 12BC 0074                  		move.b	#$74,(a1)
000190A8 337C 0067 0028             		move.w	#$67,$28(a1)
000190AE                            
000190AE                            locret_187EE:
000190AE 4E75                       		rts	
000190B0                            ; End of function Obj74_Duplicate2
000190B0                            
000190B0                            ; ===========================================================================
000190B0                            
000190B0                            Obj74_Duplicate:			; XREF: Obj74_Index2
000190B0 6100 C60A                  		bsr.w	ObjHitFloor
000190B4 4A41                       		tst.w	d1
000190B6 6A00                       		bpl.s	loc_18826
000190B8 3028 0008                  		move.w	8(a0),d0
000190BC 0C40 1940                  		cmpi.w	#$1940,d0
000190C0 6E00                       		bgt.s	loc_1882C
000190C2 3228 0030                  		move.w	$30(a0),d1
000190C6 B240                       		cmp.w	d0,d1
000190C8 6700                       		beq.s	loc_1881E
000190CA 0240 0010                  		andi.w	#$10,d0
000190CE 0241 0010                  		andi.w	#$10,d1
000190D2 B240                       		cmp.w	d0,d1
000190D4 6700                       		beq.s	loc_1881E
000190D6 61B8                       		bsr.s	Obj74_Duplicate2
000190D8 3168 0008 0032             		move.w	8(a0),$32(a0)
000190DE                            
000190DE                            loc_1881E:
000190DE 3168 0008 0030             		move.w	8(a0),$30(a0)
000190E4 4E75                       		rts	
000190E6                            ; ===========================================================================
000190E6                            
000190E6                            loc_18826:
000190E6 5428 0025                  		addq.b	#2,$25(a0)
000190EA 4E75                       		rts	
000190EC                            ; ===========================================================================
000190EC                            
000190EC                            loc_1882C:
000190EC 5428 0024                  		addq.b	#2,$24(a0)
000190F0 4E75                       		rts	
000190F2                            ; ===========================================================================
000190F2                            
000190F2                            Obj74_FallEdge:				; XREF: Obj74_Index2
000190F2 08A8 0001 0022             		bclr	#1,$22(a0)
000190F8 0668 0024 0012             		addi.w	#$24,$12(a0)	; make flame fall
000190FE 3028 0008                  		move.w	8(a0),d0
00019102 9068 0032                  		sub.w	$32(a0),d0
00019106 6A00                       		bpl.s	loc_1884A
00019108 4440                       		neg.w	d0
0001910A                            
0001910A                            loc_1884A:
0001910A 0C40 0012                  		cmpi.w	#$12,d0
0001910E 6600                       		bne.s	loc_18856
00019110 08A8 0007 0002             		bclr	#7,2(a0)
00019116                            
00019116                            loc_18856:
00019116 6100 C5A4                  		bsr.w	ObjHitFloor
0001911A 4A41                       		tst.w	d1
0001911C 6A00                       		bpl.s	locret_1887E
0001911E 5328 0029                  		subq.b	#1,$29(a0)
00019122 6700                       		beq.s	Obj74_Delete2
00019124 4268 0012                  		clr.w	$12(a0)
00019128 3168 0032 0008             		move.w	$32(a0),8(a0)
0001912E 3168 0038 000C             		move.w	$38(a0),$C(a0)
00019134 08E8 0007 0002             		bset	#7,2(a0)
0001913A 5528 0025                  		subq.b	#2,$25(a0)
0001913E                            
0001913E                            locret_1887E:
0001913E 4E75                       		rts	
00019140                            ; ===========================================================================
00019140                            
00019140                            Obj74_Delete2:
00019140 4EF9 0000 DDFE             		jmp	DeleteObject
00019146                            ; ===========================================================================
00019146                            
00019146                            loc_18886:				; XREF: Obj74_Index
00019146 08E8 0007 0002             		bset	#7,2(a0)
0001914C 5328 0029                  		subq.b	#1,$29(a0)
00019150 6600                       		bne.s	Obj74_Animate
00019152 117C 0001 001C             		move.b	#1,$1C(a0)
00019158 5968 000C                  		subq.w	#4,$C(a0)
0001915C 4228 0020                  		clr.b	$20(a0)
00019160                            
00019160                            Obj74_Animate:
00019160 43F9 0000 EC7C             		lea	(Ani_obj14).l,a1
00019166 4EF9 0000 AE82             		jmp	AnimateSprite
0001916C                            ; ===========================================================================
0001916C                            
0001916C                            Obj74_Delete3:				; XREF: Obj74_Index
0001916C 4EF9 0000 DDFE             		jmp	DeleteObject
00019172                            ; ===========================================================================
00019172                            
00019172                            Obj7A_Delete:
00019172 4EF9 0000 DDFE             		jmp	DeleteObject
00019178                            ; ===========================================================================
00019178                            ; ---------------------------------------------------------------------------
00019178                            ; Object 7A - Eggman (SLZ)
00019178                            ; ---------------------------------------------------------------------------
00019178                            
00019178                            Obj7A:					; XREF: Obj_Index
00019178 7000                       		moveq	#0,d0
0001917A 1028 0024                  		move.b	$24(a0),d0
0001917E 323B 0000                  		move.w	Obj7A_Index(pc,d0.w),d1
00019182 4EFB 1000                  		jmp	Obj7A_Index(pc,d1.w)
00019186                            ; ===========================================================================
00019186 0000                       Obj7A_Index:	dc.w Obj7A_Main-Obj7A_Index
00019188 0000                       		dc.w Obj7A_ShipMain-Obj7A_Index
0001918A 0000                       		dc.w Obj7A_FaceMain-Obj7A_Index
0001918C 0000                       		dc.w Obj7A_FlameMain-Obj7A_Index
0001918E 0000                       		dc.w Obj7A_TubeMain-Obj7A_Index
00019190                            
00019190 0200 04                    Obj7A_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
00019193 0401 04                    		dc.b 4,	1, 4
00019196 0607 04                    		dc.b 6,	7, 4
00019199 0800 03                    		dc.b 8,	0, 3
0001919C                            ; ===========================================================================
0001919C                            
0001919C                            Obj7A_Main:				; XREF: Obj7A_Index
0001919C 317C 2188 0008             		move.w	#$2188,8(a0)
000191A2 317C 0228 000C             		move.w	#$228,$C(a0)
000191A8 3168 0008 0030             		move.w	8(a0),$30(a0)
000191AE 3168 000C 0038             		move.w	$C(a0),$38(a0)
000191B4 117C 000F 0020             		move.b	#$F,$20(a0)
000191BA 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
000191C0 45FA FFCE                  		lea	Obj7A_ObjData(pc),a2
000191C4 2248                       		movea.l	a0,a1
000191C6 7203                       		moveq	#3,d1
000191C8 6000                       		bra.s	Obj7A_LoadBoss
000191CA                            ; ===========================================================================
000191CA                            
000191CA                            Obj7A_Loop:
000191CA 4EB9 0000 E25E             		jsr	SingleObjLoad2
000191D0 6600                       		bne.s	loc_1895C
000191D2 12BC 007A                  		move.b	#$7A,0(a1)
000191D6 3368 0008 0008             		move.w	8(a0),8(a1)
000191DC 3368 000C 000C             		move.w	$C(a0),$C(a1)
000191E2                            
000191E2                            Obj7A_LoadBoss:				; XREF: Obj7A_Main
000191E2 08A8 0000 0022             		bclr	#0,$22(a0)
000191E8 4229 0025                  		clr.b	$25(a1)
000191EC 135A 0024                  		move.b	(a2)+,$24(a1)
000191F0 135A 001C                  		move.b	(a2)+,$1C(a1)
000191F4 135A 0018                  		move.b	(a2)+,$18(a1)
000191F8 237C 0001 8632 0004        		move.l	#Map_Eggman,4(a1)
00019200 337C 0400 0002             		move.w	#$400,2(a1)
00019206 137C 0004 0001             		move.b	#4,1(a1)
0001920C 137C 0020 0019             		move.b	#$20,$19(a1)
00019212 2348 0034                  		move.l	a0,$34(a1)
00019216 51C9 FFB2                  		dbf	d1,Obj7A_Loop	; repeat sequence 3 more times
0001921A                            
0001921A                            loc_1895C:
0001921A 43F8 D040                  		lea	($FFFFD040).w,a1
0001921E 45E8 002A                  		lea	$2A(a0),a2
00019222 705E                       		moveq	#$5E,d0
00019224 723E                       		moveq	#$3E,d1
00019226                            
00019226                            loc_18968:
00019226 B011                       		cmp.b	(a1),d0
00019228 6600                       		bne.s	loc_18974
0001922A 4A29 0028                  		tst.b	$28(a1)
0001922E 6700                       		beq.s	loc_18974
00019230 34C9                       		move.w	a1,(a2)+
00019232                            
00019232                            loc_18974:
00019232 D2FC 0040                  		adda.w	#$40,a1
00019236 51C9 FFEE                  		dbf	d1,loc_18968
0001923A                            
0001923A                            Obj7A_ShipMain:				; XREF: Obj7A_Index
0001923A 7000                       		moveq	#0,d0
0001923C 1028 0025                  		move.b	$25(a0),d0
00019240 303B 0000                  		move.w	Obj7A_ShipIndex(pc,d0.w),d0
00019244 4EBB 0000                  		jsr	Obj7A_ShipIndex(pc,d0.w)
00019248 43F9 0001 85CE             		lea	(Ani_Eggman).l,a1
0001924E 4EB9 0000 AE82             		jsr	AnimateSprite
00019254 7003                       		moveq	#3,d0
00019256 C028 0022                  		and.b	$22(a0),d0
0001925A 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019260 8128 0001                  		or.b	d0,1(a0)
00019264 4EF9 0000 DDC2             		jmp	DisplaySprite
0001926A                            ; ===========================================================================
0001926A 0000                       Obj7A_ShipIndex:dc.w loc_189B8-Obj7A_ShipIndex
0001926C 0000                       		dc.w loc_18A5E-Obj7A_ShipIndex
0001926E 0000                       		dc.w Obj7A_MakeBall-Obj7A_ShipIndex
00019270 0000                       		dc.w loc_18B48-Obj7A_ShipIndex
00019272 0000                       		dc.w loc_18B80-Obj7A_ShipIndex
00019274 0000                       		dc.w loc_18BC6-Obj7A_ShipIndex
00019276                            ; ===========================================================================
00019276                            
00019276                            loc_189B8:				; XREF: Obj7A_ShipIndex
00019276 317C FF00 0010             		move.w	#-$100,$10(a0)
0001927C 0C68 2120 0030             		cmpi.w	#$2120,$30(a0)
00019282 6400                       		bcc.s	loc_189CA
00019284 5428 0025                  		addq.b	#2,$25(a0)
00019288                            
00019288                            loc_189CA:
00019288 6100 EF02                  		bsr.w	BossMove
0001928C 1028 003F                  		move.b	$3F(a0),d0
00019290 5428 003F                  		addq.b	#2,$3F(a0)
00019294 4EB9 0000 2CC4             		jsr	(CalcSine).l
0001929A EC40                       		asr.w	#6,d0
0001929C D068 0038                  		add.w	$38(a0),d0
000192A0 3140 000C                  		move.w	d0,$C(a0)
000192A4 3168 0030 0008             		move.w	$30(a0),8(a0)
000192AA 6000                       		bra.s	loc_189FE
000192AC                            ; ===========================================================================
000192AC                            
000192AC                            loc_189EE:
000192AC 6100 EEDE                  		bsr.w	BossMove
000192B0 3168 0038 000C             		move.w	$38(a0),$C(a0)
000192B6 3168 0030 0008             		move.w	$30(a0),8(a0)
000192BC                            
000192BC                            loc_189FE:
000192BC 0C28 0006 0025             		cmpi.b	#6,$25(a0)
000192C2 6400                       		bcc.s	locret_18A44
000192C4 4A28 0022                  		tst.b	$22(a0)
000192C8 6B00                       		bmi.s	loc_18A46
000192CA 4A28 0020                  		tst.b	$20(a0)
000192CE 6600                       		bne.s	locret_18A44
000192D0 4A28 003E                  		tst.b	$3E(a0)
000192D4 6600                       		bne.s	loc_18A28
000192D6 117C 0020 003E             		move.b	#$20,$3E(a0)
000192DC 303C 00AC                  		move.w	#$AC,d0
000192E0 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play boss damage sound
000192E6                            
000192E6                            loc_18A28:
000192E6 43F8 FB22                  		lea	($FFFFFB22).w,a1
000192EA 7000                       		moveq	#0,d0
000192EC 4A51                       		tst.w	(a1)
000192EE 6600                       		bne.s	loc_18A36
000192F0 303C 0EEE                  		move.w	#$EEE,d0
000192F4                            
000192F4                            loc_18A36:
000192F4 3280                       		move.w	d0,(a1)
000192F6 5328 003E                  		subq.b	#1,$3E(a0)
000192FA 6600                       		bne.s	locret_18A44
000192FC 117C 000F 0020             		move.b	#$F,$20(a0)
00019302                            
00019302                            locret_18A44:
00019302 4E75                       		rts	
00019304                            ; ===========================================================================
00019304                            
00019304                            loc_18A46:
00019304 7064                       		moveq	#100,d0
00019306 6100 0000                  		bsr.w	AddPoints
0001930A 117C 0006 0025             		move.b	#6,$25(a0)
00019310 117C 0078 003C             		move.b	#$78,$3C(a0)
00019316 4268 0010                  		clr.w	$10(a0)
0001931A 4E75                       		rts	
0001931C                            ; ===========================================================================
0001931C                            
0001931C                            loc_18A5E:				; XREF: Obj7A_ShipIndex
0001931C 3028 0030                  		move.w	$30(a0),d0
00019320 317C 0200 0010             		move.w	#$200,$10(a0)
00019326 0828 0000 0022             		btst	#0,$22(a0)
0001932C 6600                       		bne.s	loc_18A7C
0001932E 4468 0010                  		neg.w	$10(a0)
00019332 0C40 2008                  		cmpi.w	#$2008,d0
00019336 6E00                       		bgt.s	loc_18A88
00019338 6000                       		bra.s	loc_18A82
0001933A                            ; ===========================================================================
0001933A                            
0001933A                            loc_18A7C:
0001933A 0C40 2138                  		cmpi.w	#$2138,d0
0001933E 6D00                       		blt.s	loc_18A88
00019340                            
00019340                            loc_18A82:
00019340 0868 0000 0022             		bchg	#0,$22(a0)
00019346                            
00019346                            loc_18A88:
00019346 3028 0008                  		move.w	8(a0),d0
0001934A 72FF                       		moveq	#-1,d1
0001934C 7402                       		moveq	#2,d2
0001934E 45E8 002A                  		lea	$2A(a0),a2
00019352 7828                       		moveq	#$28,d4
00019354 4A68 0010                  		tst.w	$10(a0)
00019358 6A00                       		bpl.s	loc_18A9E
0001935A 4444                       		neg.w	d4
0001935C                            
0001935C                            loc_18A9E:
0001935C 321A                       		move.w	(a2)+,d1
0001935E 2641                       		movea.l	d1,a3
00019360 082B 0003 0022             		btst	#3,$22(a3)
00019366 6600                       		bne.s	loc_18AB4
00019368 362B 0008                  		move.w	8(a3),d3
0001936C D644                       		add.w	d4,d3
0001936E 9640                       		sub.w	d0,d3
00019370 6700                       		beq.s	loc_18AC0
00019372                            
00019372                            loc_18AB4:
00019372 51CA FFE8                  		dbf	d2,loc_18A9E
00019376                            
00019376 1142 0028                  		move.b	d2,$28(a0)
0001937A 6000 FF0C                  		bra.w	loc_189CA
0001937E                            ; ===========================================================================
0001937E                            
0001937E                            loc_18AC0:
0001937E 1142 0028                  		move.b	d2,$28(a0)
00019382 5428 0025                  		addq.b	#2,$25(a0)
00019386 117C 0028 003C             		move.b	#$28,$3C(a0)
0001938C 6000 FEFA                  		bra.w	loc_189CA
00019390                            ; ===========================================================================
00019390                            
00019390                            Obj7A_MakeBall:				; XREF: Obj7A_ShipIndex
00019390 0C28 0028 003C             		cmpi.b	#$28,$3C(a0)
00019396 6600                       		bne.s	loc_18B36
00019398 70FF                       		moveq	#-1,d0
0001939A 1028 0028                  		move.b	$28(a0),d0
0001939E 4880                       		ext.w	d0
000193A0 6B00                       		bmi.s	loc_18B40
000193A2 5540                       		subq.w	#2,d0
000193A4 4440                       		neg.w	d0
000193A6 D040                       		add.w	d0,d0
000193A8 43E8 002A                  		lea	$2A(a0),a1
000193AC 3031 0000                  		move.w	(a1,d0.w),d0
000193B0 2440                       		movea.l	d0,a2
000193B2 43F8 D040                  		lea	($FFFFD040).w,a1
000193B6 723E                       		moveq	#$3E,d1
000193B8                            
000193B8                            loc_18AFA:
000193B8 B0A9 003C                  		cmp.l	$3C(a1),d0
000193BC 6700                       		beq.s	loc_18B40
000193BE D2FC 0040                  		adda.w	#$40,a1
000193C2 51C9 FFF4                  		dbf	d1,loc_18AFA
000193C6                            
000193C6 2F08                       		move.l	a0,-(sp)
000193C8 41D2                       		lea	(a2),a0
000193CA 4EB9 0000 E25E             		jsr	SingleObjLoad2
000193D0 205F                       		movea.l	(sp)+,a0
000193D2 6600                       		bne.s	loc_18B40
000193D4 12BC 007B                  		move.b	#$7B,(a1)	; load spiked ball object
000193D8 3368 0008 0008             		move.w	8(a0),8(a1)
000193DE 3368 000C 000C             		move.w	$C(a0),$C(a1)
000193E4 0669 0020 000C             		addi.w	#$20,$C(a1)
000193EA 136A 0022 0022             		move.b	$22(a2),$22(a1)
000193F0 234A 003C                  		move.l	a2,$3C(a1)
000193F4                            
000193F4                            loc_18B36:
000193F4 5328 003C                  		subq.b	#1,$3C(a0)
000193F8 6700                       		beq.s	loc_18B40
000193FA 6000 FEC0                  		bra.w	loc_189FE
000193FE                            ; ===========================================================================
000193FE                            
000193FE                            loc_18B40:
000193FE 5528 0025                  		subq.b	#2,$25(a0)
00019402 6000 FE84                  		bra.w	loc_189CA
00019406                            ; ===========================================================================
00019406                            
00019406                            loc_18B48:				; XREF: Obj7A_ShipIndex
00019406 5328 003C                  		subq.b	#1,$3C(a0)
0001940A 6B00                       		bmi.s	loc_18B52
0001940C 6000 ED3C                  		bra.w	BossDefeated
00019410                            ; ===========================================================================
00019410                            
00019410                            loc_18B52:
00019410 5428 0025                  		addq.b	#2,$25(a0)
00019414 4268 0012                  		clr.w	$12(a0)
00019418 08E8 0000 0022             		bset	#0,$22(a0)
0001941E 08A8 0007 0022             		bclr	#7,$22(a0)
00019424 4268 0010                  		clr.w	$10(a0)
00019428 117C 00E8 003C             		move.b	#-$18,$3C(a0)
0001942E 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00019432 6600                       		bne.s	loc_18B7C
00019434 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
0001943A                            
0001943A                            loc_18B7C:
0001943A 6000 FE80                  		bra.w	loc_189FE
0001943E                            ; ===========================================================================
0001943E                            
0001943E                            loc_18B80:				; XREF: Obj7A_ShipIndex
0001943E 5228 003C                  		addq.b	#1,$3C(a0)
00019442 6700                       		beq.s	loc_18B90
00019444 6A00                       		bpl.s	loc_18B96
00019446 0668 0018 0012             		addi.w	#$18,$12(a0)
0001944C 6000                       		bra.s	loc_18BC2
0001944E                            ; ===========================================================================
0001944E                            
0001944E                            loc_18B90:
0001944E 4268 0012                  		clr.w	$12(a0)
00019452 6000                       		bra.s	loc_18BC2
00019454                            ; ===========================================================================
00019454                            
00019454                            loc_18B96:
00019454 0C28 0020 003C             		cmpi.b	#$20,$3C(a0)
0001945A 6500                       		bcs.s	loc_18BAE
0001945C 6700                       		beq.s	loc_18BB4
0001945E 0C28 002A 003C             		cmpi.b	#$2A,$3C(a0)
00019464 6500                       		bcs.s	loc_18BC2
00019466 5428 0025                  		addq.b	#2,$25(a0)
0001946A 6000                       		bra.s	loc_18BC2
0001946C                            ; ===========================================================================
0001946C                            
0001946C                            loc_18BAE:
0001946C 5168 0012                  		subq.w	#8,$12(a0)
00019470 6000                       		bra.s	loc_18BC2
00019472                            ; ===========================================================================
00019472                            
00019472                            loc_18BB4:
00019472 4268 0012                  		clr.w	$12(a0)
00019476 303C 0084                  		move.w	#$84,d0
0001947A 4EB9 0000 15BA             		jsr	(PlaySound).l	; play SLZ music
00019480                            
00019480                            loc_18BC2:
00019480 6000 FE2A                  		bra.w	loc_189EE
00019484                            ; ===========================================================================
00019484                            
00019484                            loc_18BC6:				; XREF: Obj7A_ShipIndex
00019484 317C 0400 0010             		move.w	#$400,$10(a0)
0001948A 317C FFC0 0012             		move.w	#-$40,$12(a0)
00019490 0C78 2160 F72A             		cmpi.w	#$2160,($FFFFF72A).w
00019496 6400                       		bcc.s	loc_18BE0
00019498 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001949C 6000                       		bra.s	loc_18BE8
0001949E                            ; ===========================================================================
0001949E                            
0001949E                            loc_18BE0:
0001949E 4A28 0001                  		tst.b	1(a0)
000194A2 6A00 FCCE                  		bpl.w	Obj7A_Delete
000194A6                            
000194A6                            loc_18BE8:
000194A6 6100 ECE4                  		bsr.w	BossMove
000194AA 6000 FDDC                  		bra.w	loc_189CA
000194AE                            ; ===========================================================================
000194AE                            
000194AE                            Obj7A_FaceMain:				; XREF: Obj7A_Index
000194AE 7000                       		moveq	#0,d0
000194B0 7201                       		moveq	#1,d1
000194B2 2268 0034                  		movea.l	$34(a0),a1
000194B6 1029 0025                  		move.b	$25(a1),d0
000194BA 0C00 0006                  		cmpi.b	#6,d0
000194BE 6B00                       		bmi.s	loc_18C06
000194C0 720A                       		moveq	#$A,d1
000194C2 6000                       		bra.s	loc_18C1A
000194C4                            ; ===========================================================================
000194C4                            
000194C4                            loc_18C06:
000194C4 4A29 0020                  		tst.b	$20(a1)
000194C8 6600                       		bne.s	loc_18C10
000194CA 7205                       		moveq	#5,d1
000194CC 6000                       		bra.s	loc_18C1A
000194CE                            ; ===========================================================================
000194CE                            
000194CE                            loc_18C10:
000194CE 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
000194D4 6500                       		bcs.s	loc_18C1A
000194D6 7204                       		moveq	#4,d1
000194D8                            
000194D8                            loc_18C1A:
000194D8 1141 001C                  		move.b	d1,$1C(a0)
000194DC 0C00 000A                  		cmpi.b	#$A,d0
000194E0 6600                       		bne.s	loc_18C32
000194E2 117C 0006 001C             		move.b	#6,$1C(a0)
000194E8 4A28 0001                  		tst.b	1(a0)
000194EC 6A00 FC84                  		bpl.w	Obj7A_Delete
000194F0                            
000194F0                            loc_18C32:
000194F0 6000                       		bra.s	loc_18C6C
000194F2                            ; ===========================================================================
000194F2                            
000194F2                            Obj7A_FlameMain:			; XREF: Obj7A_Index
000194F2 117C 0008 001C             		move.b	#8,$1C(a0)
000194F8 2268 0034                  		movea.l	$34(a0),a1
000194FC 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00019502 6600                       		bne.s	loc_18C56
00019504 4A28 0001                  		tst.b	1(a0)
00019508 6A00 FC68                  		bpl.w	Obj7A_Delete
0001950C 117C 000B 001C             		move.b	#$B,$1C(a0)
00019512 6000                       		bra.s	loc_18C6C
00019514                            ; ===========================================================================
00019514                            
00019514                            loc_18C56:
00019514 0C29 0008 0025             		cmpi.b	#8,$25(a1)
0001951A 6E00                       		bgt.s	loc_18C6C
0001951C 0C29 0004 0025             		cmpi.b	#4,$25(a1)
00019522 6D00                       		blt.s	loc_18C6C
00019524 117C 0007 001C             		move.b	#7,$1C(a0)
0001952A                            
0001952A                            loc_18C6C:
0001952A 43F9 0001 85CE             		lea	(Ani_Eggman).l,a1
00019530 4EB9 0000 AE82             		jsr	AnimateSprite
00019536                            
00019536                            loc_18C78:
00019536 2268 0034                  		movea.l	$34(a0),a1
0001953A 3169 0008 0008             		move.w	8(a1),8(a0)
00019540 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019546 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001954C 7003                       		moveq	#3,d0
0001954E C028 0022                  		and.b	$22(a0),d0
00019552 0228 00FC 0001             		andi.b	#-4,1(a0)
00019558 8128 0001                  		or.b	d0,1(a0)
0001955C 4EF9 0000 DDC2             		jmp	DisplaySprite
00019562                            ; ===========================================================================
00019562                            
00019562                            Obj7A_TubeMain:				; XREF: Obj7A_Index
00019562 2268 0034                  		movea.l	$34(a0),a1
00019566 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001956C 6600                       		bne.s	loc_18CB8
0001956E 4A28 0001                  		tst.b	1(a0)
00019572 6A00 FBFE                  		bpl.w	Obj7A_Delete
00019576                            
00019576                            loc_18CB8:
00019576 217C 0001 86FA 0004        		move.l	#Map_BossItems,4(a0)
0001957E 317C 246C 0002             		move.w	#$246C,2(a0)
00019584 117C 0003 001A             		move.b	#3,$1A(a0)
0001958A 60AA                       		bra.s	loc_18C78
0001958C                            ; ===========================================================================
0001958C                            ; ---------------------------------------------------------------------------
0001958C                            ; Object 7B - exploding	spikeys	that Eggman drops (SLZ)
0001958C                            ; ---------------------------------------------------------------------------
0001958C                            
0001958C                            Obj7B:					; XREF: Obj_Index
0001958C 7000                       		moveq	#0,d0
0001958E 1028 0024                  		move.b	$24(a0),d0
00019592 303B 0000                  		move.w	Obj7B_Index(pc,d0.w),d0
00019596 4EBB 0000                  		jsr	Obj7B_Index(pc,d0.w)
0001959A 3028 0030                  		move.w	$30(a0),d0
0001959E 0240 FF80                  		andi.w	#$FF80,d0
000195A2 3238 F700                  		move.w	($FFFFF700).w,d1
000195A6 0441 0080                  		subi.w	#$80,d1
000195AA 0241 FF80                  		andi.w	#$FF80,d1
000195AE 9041                       		sub.w	d1,d0
000195B0 6B00 FBC0                  		bmi.w	Obj7A_Delete
000195B4 0C40 0280                  		cmpi.w	#$280,d0
000195B8 6200 FBB8                  		bhi.w	Obj7A_Delete
000195BC 4EF9 0000 DDC2             		jmp	DisplaySprite
000195C2                            ; ===========================================================================
000195C2 0000                       Obj7B_Index:	dc.w Obj7B_Main-Obj7B_Index
000195C4 0000                       		dc.w Obj7B_Fall-Obj7B_Index
000195C6 0000                       		dc.w loc_18DC6-Obj7B_Index
000195C8 0000                       		dc.w loc_18EAA-Obj7B_Index
000195CA 0000                       		dc.w Obj7B_Explode-Obj7B_Index
000195CC 0000                       		dc.w Obj7B_MoveFrag-Obj7B_Index
000195CE                            ; ===========================================================================
000195CE                            
000195CE                            Obj7B_Main:				; XREF: Obj7B_Index
000195CE 217C 0001 2188 0004        		move.l	#Map_obj5Ea,4(a0)
000195D6 317C 0518 0002             		move.w	#$518,2(a0)
000195DC 117C 0001 001A             		move.b	#1,$1A(a0)
000195E2 0028 0004 0001             		ori.b	#4,1(a0)
000195E8 117C 0004 0018             		move.b	#4,$18(a0)
000195EE 117C 008B 0020             		move.b	#$8B,$20(a0)
000195F4 117C 000C 0019             		move.b	#$C,$19(a0)
000195FA 2268 003C                  		movea.l	$3C(a0),a1
000195FE 3169 0008 0030             		move.w	8(a1),$30(a0)
00019604 3169 000C 0034             		move.w	$C(a1),$34(a0)
0001960A 08E8 0000 0022             		bset	#0,$22(a0)
00019610 3028 0008                  		move.w	8(a0),d0
00019614 B069 0008                  		cmp.w	8(a1),d0
00019618 6E00                       		bgt.s	loc_18D68
0001961A 08A8 0000 0022             		bclr	#0,$22(a0)
00019620 117C 0002 003A             		move.b	#2,$3A(a0)
00019626                            
00019626                            loc_18D68:
00019626 5428 0024                  		addq.b	#2,$24(a0)
0001962A                            
0001962A                            Obj7B_Fall:				; XREF: Obj7B_Index
0001962A 4EB9 0000 DD70             		jsr	ObjectFall
00019630 2268 003C                  		movea.l	$3C(a0),a1
00019634 45F9 0000 0000             		lea	(word_19018).l,a2
0001963A 7000                       		moveq	#0,d0
0001963C 1029 001A                  		move.b	$1A(a1),d0
00019640 3228 0008                  		move.w	8(a0),d1
00019644 9268 0030                  		sub.w	$30(a0),d1
00019648 6400                       		bcc.s	loc_18D8E
0001964A 5440                       		addq.w	#2,d0
0001964C                            
0001964C                            loc_18D8E:
0001964C D040                       		add.w	d0,d0
0001964E 3228 0034                  		move.w	$34(a0),d1
00019652 D272 0000                  		add.w	(a2,d0.w),d1
00019656 B268 000C                  		cmp.w	$C(a0),d1
0001965A 6E00                       		bgt.s	locret_18DC4
0001965C 2268 003C                  		movea.l	$3C(a0),a1
00019660 7202                       		moveq	#2,d1
00019662 0828 0000 0022             		btst	#0,$22(a0)
00019668 6700                       		beq.s	loc_18DAE
0001966A 7200                       		moveq	#0,d1
0001966C                            
0001966C                            loc_18DAE:
0001966C 317C 00F0 0028             		move.w	#$F0,$28(a0)
00019672 117C 000A 001F             		move.b	#10,$1F(a0)	; set frame duration to	10 frames
00019678 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
0001967E 6000 0000                  		bra.w	loc_18FA2
00019682                            ; ===========================================================================
00019682                            
00019682                            locret_18DC4:
00019682 4E75                       		rts	
00019684                            ; ===========================================================================
00019684                            
00019684                            loc_18DC6:				; XREF: Obj7B_Index
00019684 2268 003C                  		movea.l	$3C(a0),a1
00019688 7000                       		moveq	#0,d0
0001968A 1028 003A                  		move.b	$3A(a0),d0
0001968E 9029 003A                  		sub.b	$3A(a1),d0
00019692 6700                       		beq.s	loc_18E2A
00019694 6400                       		bcc.s	loc_18DDA
00019696 4400                       		neg.b	d0
00019698                            
00019698                            loc_18DDA:
00019698 323C F7E8                  		move.w	#-$818,d1
0001969C 343C FEEC                  		move.w	#-$114,d2
000196A0 0C00 0001                  		cmpi.b	#1,d0
000196A4 6700                       		beq.s	loc_18E00
000196A6 323C F6A0                  		move.w	#-$960,d1
000196AA 343C FF0C                  		move.w	#-$F4,d2
000196AE 0C69 09C0 0038             		cmpi.w	#$9C0,$38(a1)
000196B4 6D00                       		blt.s	loc_18E00
000196B6 323C F5E0                  		move.w	#-$A20,d1
000196BA 343C FF80                  		move.w	#-$80,d2
000196BE                            
000196BE                            loc_18E00:
000196BE 3141 0012                  		move.w	d1,$12(a0)
000196C2 3142 0010                  		move.w	d2,$10(a0)
000196C6 3028 0008                  		move.w	8(a0),d0
000196CA 9068 0030                  		sub.w	$30(a0),d0
000196CE 6400                       		bcc.s	loc_18E16
000196D0 4468 0010                  		neg.w	$10(a0)
000196D4                            
000196D4                            loc_18E16:
000196D4 117C 0001 001A             		move.b	#1,$1A(a0)
000196DA 317C 0020 0028             		move.w	#$20,$28(a0)
000196E0 5428 0024                  		addq.b	#2,$24(a0)
000196E4 6000 0000                  		bra.w	loc_18EAA
000196E8                            ; ===========================================================================
000196E8                            
000196E8                            loc_18E2A:				; XREF: loc_18DC6
000196E8 45F9 0000 0000             		lea	(word_19018).l,a2
000196EE 7000                       		moveq	#0,d0
000196F0 1029 001A                  		move.b	$1A(a1),d0
000196F4 343C 0028                  		move.w	#$28,d2
000196F8 3228 0008                  		move.w	8(a0),d1
000196FC 9268 0030                  		sub.w	$30(a0),d1
00019700 6400                       		bcc.s	loc_18E48
00019702 4442                       		neg.w	d2
00019704 5440                       		addq.w	#2,d0
00019706                            
00019706                            loc_18E48:
00019706 D040                       		add.w	d0,d0
00019708 3228 0034                  		move.w	$34(a0),d1
0001970C D272 0000                  		add.w	(a2,d0.w),d1
00019710 3141 000C                  		move.w	d1,$C(a0)
00019714 D468 0030                  		add.w	$30(a0),d2
00019718 3142 0008                  		move.w	d2,8(a0)
0001971C 4268 000E                  		clr.w	$E(a0)
00019720 4268 000A                  		clr.w	$A(a0)
00019724 5368 0028                  		subq.w	#1,$28(a0)
00019728 6600                       		bne.s	loc_18E7A
0001972A 317C 0020 0028             		move.w	#$20,$28(a0)
00019730 117C 0008 0024             		move.b	#8,$24(a0)
00019736 4E75                       		rts	
00019738                            ; ===========================================================================
00019738                            
00019738                            loc_18E7A:
00019738 0C68 0078 0028             		cmpi.w	#$78,$28(a0)
0001973E 6600                       		bne.s	loc_18E88
00019740 117C 0005 001F             		move.b	#5,$1F(a0)
00019746                            
00019746                            loc_18E88:
00019746 0C68 003C 0028             		cmpi.w	#$3C,$28(a0)
0001974C 6600                       		bne.s	loc_18E96
0001974E 117C 0002 001F             		move.b	#2,$1F(a0)
00019754                            
00019754                            loc_18E96:
00019754 5328 001E                  		subq.b	#1,$1E(a0)
00019758 6E00                       		bgt.s	locret_18EA8
0001975A 0868 0000 001A             		bchg	#0,$1A(a0)
00019760 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00019766                            
00019766                            locret_18EA8:
00019766 4E75                       		rts	
00019768                            ; ===========================================================================
00019768                            
00019768                            loc_18EAA:				; XREF: Obj7B_Index
00019768 43F8 D040                  		lea	($FFFFD040).w,a1
0001976C 707A                       		moveq	#$7A,d0
0001976E 7240                       		moveq	#$40,d1
00019770 743E                       		moveq	#$3E,d2
00019772                            
00019772                            loc_18EB4:
00019772 B011                       		cmp.b	(a1),d0
00019774 6700                       		beq.s	loc_18EC0
00019776 D2C1                       		adda.w	d1,a1
00019778 51CA FFF8                  		dbf	d2,loc_18EB4
0001977C                            
0001977C 6000                       		bra.s	loc_18F38
0001977E                            ; ===========================================================================
0001977E                            
0001977E                            loc_18EC0:
0001977E 3029 0008                  		move.w	8(a1),d0
00019782 3229 000C                  		move.w	$C(a1),d1
00019786 3428 0008                  		move.w	8(a0),d2
0001978A 3628 000C                  		move.w	$C(a0),d3
0001978E 45FA 0000                  		lea	byte_19022(pc),a2
00019792 47FA 0000                  		lea	byte_19026(pc),a3
00019796 181A                       		move.b	(a2)+,d4
00019798 4884                       		ext.w	d4
0001979A D044                       		add.w	d4,d0
0001979C 181B                       		move.b	(a3)+,d4
0001979E 4884                       		ext.w	d4
000197A0 D444                       		add.w	d4,d2
000197A2 B440                       		cmp.w	d0,d2
000197A4 6500                       		bcs.s	loc_18F38
000197A6 181A                       		move.b	(a2)+,d4
000197A8 4884                       		ext.w	d4
000197AA D044                       		add.w	d4,d0
000197AC 181B                       		move.b	(a3)+,d4
000197AE 4884                       		ext.w	d4
000197B0 D444                       		add.w	d4,d2
000197B2 B042                       		cmp.w	d2,d0
000197B4 6500                       		bcs.s	loc_18F38
000197B6 181A                       		move.b	(a2)+,d4
000197B8 4884                       		ext.w	d4
000197BA D244                       		add.w	d4,d1
000197BC 181B                       		move.b	(a3)+,d4
000197BE 4884                       		ext.w	d4
000197C0 D644                       		add.w	d4,d3
000197C2 B641                       		cmp.w	d1,d3
000197C4 6500                       		bcs.s	loc_18F38
000197C6 181A                       		move.b	(a2)+,d4
000197C8 4884                       		ext.w	d4
000197CA D244                       		add.w	d4,d1
000197CC 181B                       		move.b	(a3)+,d4
000197CE 4884                       		ext.w	d4
000197D0 D644                       		add.w	d4,d3
000197D2 B243                       		cmp.w	d3,d1
000197D4 6500                       		bcs.s	loc_18F38
000197D6 5428 0024                  		addq.b	#2,$24(a0)
000197DA 4268 0028                  		clr.w	$28(a0)
000197DE 4229 0020                  		clr.b	$20(a1)
000197E2 5329 0021                  		subq.b	#1,$21(a1)
000197E6 6600                       		bne.s	loc_18F38
000197E8 08E9 0007 0022             		bset	#7,$22(a1)
000197EE 4268 0010                  		clr.w	$10(a0)
000197F2 4268 0012                  		clr.w	$12(a0)
000197F6                            
000197F6                            loc_18F38:
000197F6 4A68 0012                  		tst.w	$12(a0)
000197FA 6A00                       		bpl.s	loc_18F5C
000197FC 4EB9 0000 DD70             		jsr	ObjectFall
00019802 3028 0034                  		move.w	$34(a0),d0
00019806 0440 002F                  		subi.w	#$2F,d0
0001980A B068 000C                  		cmp.w	$C(a0),d0
0001980E 6E00                       		bgt.s	loc_18F58
00019810 4EB9 0000 DD70             		jsr	ObjectFall
00019816                            
00019816                            loc_18F58:
00019816 6000 FF20                  		bra.w	loc_18E7A
0001981A                            ; ===========================================================================
0001981A                            
0001981A                            loc_18F5C:
0001981A 4EB9 0000 DD70             		jsr	ObjectFall
00019820 2268 003C                  		movea.l	$3C(a0),a1
00019824 45F9 0000 0000             		lea	(word_19018).l,a2
0001982A 7000                       		moveq	#0,d0
0001982C 1029 001A                  		move.b	$1A(a1),d0
00019830 3228 0008                  		move.w	8(a0),d1
00019834 9268 0030                  		sub.w	$30(a0),d1
00019838 6400                       		bcc.s	loc_18F7E
0001983A 5440                       		addq.w	#2,d0
0001983C                            
0001983C                            loc_18F7E:
0001983C D040                       		add.w	d0,d0
0001983E 3228 0034                  		move.w	$34(a0),d1
00019842 D272 0000                  		add.w	(a2,d0.w),d1
00019846 B268 000C                  		cmp.w	$C(a0),d1
0001984A 6ECA                       		bgt.s	loc_18F58
0001984C 2268 003C                  		movea.l	$3C(a0),a1
00019850 7202                       		moveq	#2,d1
00019852 4A68 0010                  		tst.w	$10(a0)
00019856 6B00                       		bmi.s	loc_18F9C
00019858 7200                       		moveq	#0,d1
0001985A                            
0001985A                            loc_18F9C:
0001985A 317C 0000 0028             		move.w	#0,$28(a0)
00019860                            
00019860                            loc_18FA2:
00019860 1341 003A                  		move.b	d1,$3A(a1)
00019864 1141 003A                  		move.b	d1,$3A(a0)
00019868 B229 001A                  		cmp.b	$1A(a1),d1
0001986C 6700                       		beq.s	loc_19008
0001986E 08A9 0003 0022             		bclr	#3,$22(a1)
00019874 6700                       		beq.s	loc_19008
00019876 4229 0025                  		clr.b	$25(a1)
0001987A 137C 0002 0024             		move.b	#2,$24(a1)
00019880 45F8 D000                  		lea	($FFFFD000).w,a2
00019884 3568 0012 0012             		move.w	$12(a0),$12(a2)
0001988A 446A 0012                  		neg.w	$12(a2)
0001988E 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
00019894 6600                       		bne.s	loc_18FDC
00019896 E0EA 0012                  		asr	$12(a2)
0001989A                            
0001989A                            loc_18FDC:
0001989A 08EA 0001 0022             		bset	#1,$22(a2)
000198A0 08AA 0003 0022             		bclr	#3,$22(a2)
000198A6 422A 003C                  		clr.b	$3C(a2)
000198AA 2F08                       		move.l	a0,-(sp)
000198AC 41D2                       		lea	(a2),a0
000198AE 4EBA A356                  		jsr	Obj01_ChkRoll
000198B2 205F                       		movea.l	(sp)+,a0
000198B4 157C 0002 0024             		move.b	#2,$24(a2)
000198BA 303C 00CC                  		move.w	#$CC,d0
000198BE 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play "spring" sound
000198C4                            
000198C4                            loc_19008:
000198C4 4268 0010                  		clr.w	$10(a0)
000198C8 4268 0012                  		clr.w	$12(a0)
000198CC 5428 0024                  		addq.b	#2,$24(a0)
000198D0 6000 FE66                  		bra.w	loc_18E7A
000198D4                            ; ===========================================================================
000198D4 FFF8 FFE4 FFD1 FFE4 FFF8   word_19018:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
000198DE                            		even
000198DE E830 E830                  byte_19022:	dc.b $E8, $30, $E8, $30
000198E2                            		even
000198E2 08F0 08F0                  byte_19026:	dc.b 8,	$F0, 8,	$F0
000198E6                            		even
000198E6                            ; ===========================================================================
000198E6                            
000198E6                            Obj7B_Explode:				; XREF: Obj7B_Index
000198E6 10BC 003F                  		move.b	#$3F,(a0)
000198EA 4228 0024                  		clr.b	$24(a0)
000198EE 0C68 0020 0028             		cmpi.w	#$20,$28(a0)
000198F4 6700                       		beq.s	Obj7B_MakeFrag
000198F6 4E75                       		rts	
000198F8                            ; ===========================================================================
000198F8                            
000198F8                            Obj7B_MakeFrag:
000198F8 3168 0034 000C             		move.w	$34(a0),$C(a0)
000198FE 7203                       		moveq	#3,d1
00019900 45FA 0000                  		lea	Obj7B_FragSpeed(pc),a2
00019904                            
00019904                            Obj7B_Loop:
00019904 4EB9 0000 E248             		jsr	SingleObjLoad
0001990A 6600                       		bne.s	loc_1909A
0001990C 12BC 007B                  		move.b	#$7B,(a1)	; load shrapnel	object
00019910 137C 000A 0024             		move.b	#$A,$24(a1)
00019916 237C 0000 0000 0004        		move.l	#Map_obj7B,4(a1)
0001991E 137C 0003 0018             		move.b	#3,$18(a1)
00019924 337C 0518 0002             		move.w	#$518,2(a1)
0001992A 3368 0008 0008             		move.w	8(a0),8(a1)
00019930 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019936 335A 0010                  		move.w	(a2)+,$10(a1)
0001993A 335A 0012                  		move.w	(a2)+,$12(a1)
0001993E 137C 0098 0020             		move.b	#$98,$20(a1)
00019944 0029 0004 0001             		ori.b	#4,1(a1)
0001994A 08E9 0007 0001             		bset	#7,1(a1)
00019950 137C 000C 0019             		move.b	#$C,$19(a1)
00019956                            
00019956                            loc_1909A:
00019956 51C9 FFAC                  		dbf	d1,Obj7B_Loop	; repeat sequence 3 more times
0001995A                            
0001995A 4E75                       		rts	
0001995C                            ; ===========================================================================
0001995C FF00 FCC0                  Obj7B_FragSpeed:dc.w $FF00, $FCC0	; horizontal, vertical
00019960 FF60 FDC0                  		dc.w $FF60, $FDC0
00019964 0100 FCC0                  		dc.w $100, $FCC0
00019968 00A0 FDC0                  		dc.w $A0, $FDC0
0001996C                            ; ===========================================================================
0001996C                            
0001996C                            Obj7B_MoveFrag:				; XREF: Obj7B_Index
0001996C 4EB9 0000 DD9C             		jsr	SpeedToPos
00019972 3168 0008 0030             		move.w	8(a0),$30(a0)
00019978 3168 000C 0034             		move.w	$C(a0),$34(a0)
0001997E 0668 0018 0012             		addi.w	#$18,$12(a0)
00019984 7004                       		moveq	#4,d0
00019986 C078 FE0E                  		and.w	($FFFFFE0E).w,d0
0001998A E448                       		lsr.w	#2,d0
0001998C 1140 001A                  		move.b	d0,$1A(a0)
00019990 4A28 0001                  		tst.b	1(a0)
00019994 6A00 F7DC                  		bpl.w	Obj7A_Delete
00019998 4E75                       		rts	
0001999A                            ; ===========================================================================
0001999A                            ; ---------------------------------------------------------------------------
0001999A                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
0001999A                            ; ---------------------------------------------------------------------------
0001999A                            Map_obj7B:
0001999A                            	include "_maps\obj7B.asm"
0001999A                            ; ---------------------------------------------------------------------------
0001999A                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
0001999A                            ; ---------------------------------------------------------------------------
0001999A 0000                       		dc.w byte_190E2-Map_obj7B
0001999C 0000                       		dc.w byte_190E8-Map_obj7B
0001999E 01                         byte_190E2:	dc.b 1
0001999F FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
000199A4 01                         byte_190E8:	dc.b 1
000199A5 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
000199AA                            		even
000199AA                            		even
000199AA                            
000199AA                            ; ===========================================================================
000199AA                            ; ---------------------------------------------------------------------------
000199AA                            ; Object 75 - Eggman (SYZ)
000199AA                            ; ---------------------------------------------------------------------------
000199AA                            
000199AA                            Obj75:					; XREF: Obj_Index
000199AA 7000                       		moveq	#0,d0
000199AC 1028 0024                  		move.b	$24(a0),d0
000199B0 323B 0000                  		move.w	Obj75_Index(pc,d0.w),d1
000199B4 4EFB 1000                  		jmp	Obj75_Index(pc,d1.w)
000199B8                            ; ===========================================================================
000199B8 0000                       Obj75_Index:	dc.w Obj75_Main-Obj75_Index
000199BA 0000                       		dc.w Obj75_ShipMain-Obj75_Index
000199BC 0000                       		dc.w Obj75_FaceMain-Obj75_Index
000199BE 0000                       		dc.w Obj75_FlameMain-Obj75_Index
000199C0 0000                       		dc.w Obj75_SpikeMain-Obj75_Index
000199C2                            
000199C2 0200 05                    Obj75_ObjData:	dc.b 2,	0, 5		; routine number, animation, priority
000199C5 0401 05                    		dc.b 4,	1, 5
000199C8 0607 05                    		dc.b 6,	7, 5
000199CB 0800 05                    		dc.b 8,	0, 5
000199CE                            ; ===========================================================================
000199CE                            
000199CE                            Obj75_Main:				; XREF: Obj75_Index
000199CE 317C 2DB0 0008             		move.w	#$2DB0,8(a0)
000199D4 317C 04DA 000C             		move.w	#$4DA,$C(a0)
000199DA 3168 0008 0030             		move.w	8(a0),$30(a0)
000199E0 3168 000C 0038             		move.w	$C(a0),$38(a0)
000199E6 117C 000F 0020             		move.b	#$F,$20(a0)
000199EC 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
000199F2 45FA FFCE                  		lea	Obj75_ObjData(pc),a2
000199F6 2248                       		movea.l	a0,a1
000199F8 7203                       		moveq	#3,d1
000199FA 6000                       		bra.s	Obj75_LoadBoss
000199FC                            ; ===========================================================================
000199FC                            
000199FC                            Obj75_Loop:
000199FC 4EB9 0000 E25E             		jsr	SingleObjLoad2
00019A02 6600                       		bne.s	Obj75_ShipMain
00019A04 12BC 0075                  		move.b	#$75,(a1)
00019A08 3368 0008 0008             		move.w	8(a0),8(a1)
00019A0E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019A14                            
00019A14                            Obj75_LoadBoss:				; XREF: Obj75_Main
00019A14 08A8 0000 0022             		bclr	#0,$22(a0)
00019A1A 4229 0025                  		clr.b	$25(a1)
00019A1E 135A 0024                  		move.b	(a2)+,$24(a1)
00019A22 135A 001C                  		move.b	(a2)+,$1C(a1)
00019A26 135A 0018                  		move.b	(a2)+,$18(a1)
00019A2A 237C 0001 8632 0004        		move.l	#Map_Eggman,4(a1)
00019A32 337C 0400 0002             		move.w	#$400,2(a1)
00019A38 137C 0004 0001             		move.b	#4,1(a1)
00019A3E 137C 0020 0019             		move.b	#$20,$19(a1)
00019A44 2348 0034                  		move.l	a0,$34(a1)
00019A48 51C9 FFB2                  		dbf	d1,Obj75_Loop	; repeat sequence 3 more times
00019A4C                            
00019A4C                            Obj75_ShipMain:				; XREF: Obj75_Index
00019A4C 7000                       		moveq	#0,d0
00019A4E 1028 0025                  		move.b	$25(a0),d0
00019A52 323B 0000                  		move.w	Obj75_ShipIndex(pc,d0.w),d1
00019A56 4EBB 1000                  		jsr	Obj75_ShipIndex(pc,d1.w)
00019A5A 43F9 0001 85CE             		lea	(Ani_Eggman).l,a1
00019A60 4EB9 0000 AE82             		jsr	AnimateSprite
00019A66 7003                       		moveq	#3,d0
00019A68 C028 0022                  		and.b	$22(a0),d0
00019A6C 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019A72 8128 0001                  		or.b	d0,1(a0)
00019A76 4EF9 0000 DDC2             		jmp	DisplaySprite
00019A7C                            ; ===========================================================================
00019A7C 0000 0000                  Obj75_ShipIndex:dc.w loc_191CC-Obj75_ShipIndex,	loc_19270-Obj75_ShipIndex
00019A80 0000 0000                  		dc.w loc_192EC-Obj75_ShipIndex,	loc_19474-Obj75_ShipIndex
00019A84 0000 0000                  		dc.w loc_194AC-Obj75_ShipIndex,	loc_194F2-Obj75_ShipIndex
00019A88                            ; ===========================================================================
00019A88                            
00019A88                            loc_191CC:				; XREF: Obj75_ShipIndex
00019A88 317C FF00 0010             		move.w	#-$100,$10(a0)
00019A8E 0C68 2D38 0030             		cmpi.w	#$2D38,$30(a0)
00019A94 6400                       		bcc.s	loc_191DE
00019A96 5428 0025                  		addq.b	#2,$25(a0)
00019A9A                            
00019A9A                            loc_191DE:
00019A9A 1028 003F                  		move.b	$3F(a0),d0
00019A9E 5428 003F                  		addq.b	#2,$3F(a0)
00019AA2 4EB9 0000 2CC4             		jsr	(CalcSine).l
00019AA8 E440                       		asr.w	#2,d0
00019AAA 3140 0012                  		move.w	d0,$12(a0)
00019AAE                            
00019AAE                            loc_191F2:
00019AAE 6100 E6DC                  		bsr.w	BossMove
00019AB2 3168 0038 000C             		move.w	$38(a0),$C(a0)
00019AB8 3168 0030 0008             		move.w	$30(a0),8(a0)
00019ABE                            
00019ABE                            loc_19202:
00019ABE 3028 0008                  		move.w	8(a0),d0
00019AC2 0440 2C00                  		subi.w	#$2C00,d0
00019AC6 EA48                       		lsr.w	#5,d0
00019AC8 1140 0034                  		move.b	d0,$34(a0)
00019ACC 0C28 0006 0025             		cmpi.b	#6,$25(a0)
00019AD2 6400                       		bcc.s	locret_19256
00019AD4 4A28 0022                  		tst.b	$22(a0)
00019AD8 6B00                       		bmi.s	loc_19258
00019ADA 4A28 0020                  		tst.b	$20(a0)
00019ADE 6600                       		bne.s	locret_19256
00019AE0 4A28 003E                  		tst.b	$3E(a0)
00019AE4 6600                       		bne.s	loc_1923A
00019AE6 117C 0020 003E             		move.b	#$20,$3E(a0)
00019AEC 303C 00AC                  		move.w	#$AC,d0
00019AF0 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play boss damage sound
00019AF6                            
00019AF6                            loc_1923A:
00019AF6 43F8 FB22                  		lea	($FFFFFB22).w,a1
00019AFA 7000                       		moveq	#0,d0
00019AFC 4A51                       		tst.w	(a1)
00019AFE 6600                       		bne.s	loc_19248
00019B00 303C 0EEE                  		move.w	#$EEE,d0
00019B04                            
00019B04                            loc_19248:
00019B04 3280                       		move.w	d0,(a1)
00019B06 5328 003E                  		subq.b	#1,$3E(a0)
00019B0A 6600                       		bne.s	locret_19256
00019B0C 117C 000F 0020             		move.b	#$F,$20(a0)
00019B12                            
00019B12                            locret_19256:
00019B12 4E75                       		rts	
00019B14                            ; ===========================================================================
00019B14                            
00019B14                            loc_19258:				; XREF: loc_19202
00019B14 7064                       		moveq	#100,d0
00019B16 6100 0000                  		bsr.w	AddPoints
00019B1A 117C 0006 0025             		move.b	#6,$25(a0)
00019B20 317C 00B4 003C             		move.w	#$B4,$3C(a0)
00019B26 4268 0010                  		clr.w	$10(a0)
00019B2A 4E75                       		rts	
00019B2C                            ; ===========================================================================
00019B2C                            
00019B2C                            loc_19270:				; XREF: Obj75_ShipIndex
00019B2C 3028 0030                  		move.w	$30(a0),d0
00019B30 317C 0140 0010             		move.w	#$140,$10(a0)
00019B36 0828 0000 0022             		btst	#0,$22(a0)
00019B3C 6600                       		bne.s	loc_1928E
00019B3E 4468 0010                  		neg.w	$10(a0)
00019B42 0C40 2C08                  		cmpi.w	#$2C08,d0
00019B46 6E00                       		bgt.s	loc_1929E
00019B48 6000                       		bra.s	loc_19294
00019B4A                            ; ===========================================================================
00019B4A                            
00019B4A                            loc_1928E:
00019B4A 0C40 2D38                  		cmpi.w	#$2D38,d0
00019B4E 6D00                       		blt.s	loc_1929E
00019B50                            
00019B50                            loc_19294:
00019B50 0868 0000 0022             		bchg	#0,$22(a0)
00019B56 4228 003D                  		clr.b	$3D(a0)
00019B5A                            
00019B5A                            loc_1929E:
00019B5A 0440 2C10                  		subi.w	#$2C10,d0
00019B5E 0240 001F                  		andi.w	#$1F,d0
00019B62 0440 001F                  		subi.w	#$1F,d0
00019B66 6A00                       		bpl.s	loc_192AE
00019B68 4440                       		neg.w	d0
00019B6A                            
00019B6A                            loc_192AE:
00019B6A 5340                       		subq.w	#1,d0
00019B6C 6E00                       		bgt.s	loc_192E8
00019B6E 4A28 003D                  		tst.b	$3D(a0)
00019B72 6600                       		bne.s	loc_192E8
00019B74 3238 D008                  		move.w	($FFFFD008).w,d1
00019B78 0441 2C00                  		subi.w	#$2C00,d1
00019B7C EA41                       		asr.w	#5,d1
00019B7E B228 0034                  		cmp.b	$34(a0),d1
00019B82 6600                       		bne.s	loc_192E8
00019B84 7000                       		moveq	#0,d0
00019B86 1028 0034                  		move.b	$34(a0),d0
00019B8A EB40                       		asl.w	#5,d0
00019B8C 0640 2C10                  		addi.w	#$2C10,d0
00019B90 3140 0030                  		move.w	d0,$30(a0)
00019B94 6100 0000                  		bsr.w	Obj75_FindBlocks
00019B98 5428 0025                  		addq.b	#2,$25(a0)
00019B9C 4268 0028                  		clr.w	$28(a0)
00019BA0 4268 0010                  		clr.w	$10(a0)
00019BA4                            
00019BA4                            loc_192E8:
00019BA4 6000 FEF4                  		bra.w	loc_191DE
00019BA8                            ; ===========================================================================
00019BA8                            
00019BA8                            loc_192EC:				; XREF: Obj75_ShipIndex
00019BA8 7000                       		moveq	#0,d0
00019BAA 1028 0028                  		move.b	$28(a0),d0
00019BAE 303B 0000                  		move.w	off_192FA(pc,d0.w),d0
00019BB2 4EFB 0000                  		jmp	off_192FA(pc,d0.w)
00019BB6                            ; ===========================================================================
00019BB6 0000                       off_192FA:	dc.w loc_19302-off_192FA
00019BB8 0000                       		dc.w loc_19348-off_192FA
00019BBA 0000                       		dc.w loc_1938E-off_192FA
00019BBC 0000                       		dc.w loc_193D0-off_192FA
00019BBE                            ; ===========================================================================
00019BBE                            
00019BBE                            loc_19302:				; XREF: off_192FA
00019BBE 317C 0180 0012             		move.w	#$180,$12(a0)
00019BC4 3028 0038                  		move.w	$38(a0),d0
00019BC8 0C40 0556                  		cmpi.w	#$556,d0
00019BCC 6500                       		bcs.s	loc_19344
00019BCE 317C 0556 0038             		move.w	#$556,$38(a0)
00019BD4 4268 003C                  		clr.w	$3C(a0)
00019BD8 70FF                       		moveq	#-1,d0
00019BDA 3028 0036                  		move.w	$36(a0),d0
00019BDE 6700                       		beq.s	loc_1933C
00019BE0 2240                       		movea.l	d0,a1
00019BE2 137C 00FF 0029             		move.b	#-1,$29(a1)
00019BE8 117C 00FF 0029             		move.b	#-1,$29(a0)
00019BEE 2348 0034                  		move.l	a0,$34(a1)
00019BF2 317C 0032 003C             		move.w	#$32,$3C(a0)
00019BF8                            
00019BF8                            loc_1933C:
00019BF8 4268 0012                  		clr.w	$12(a0)
00019BFC 5428 0028                  		addq.b	#2,$28(a0)
00019C00                            
00019C00                            loc_19344:
00019C00 6000 FEAC                  		bra.w	loc_191F2
00019C04                            ; ===========================================================================
00019C04                            
00019C04                            loc_19348:				; XREF: off_192FA
00019C04 5368 003C                  		subq.w	#1,$3C(a0)
00019C08 6A00                       		bpl.s	loc_19366
00019C0A 5428 0028                  		addq.b	#2,$28(a0)
00019C0E 317C F800 0012             		move.w	#-$800,$12(a0)
00019C14 4A68 0036                  		tst.w	$36(a0)
00019C18 6600                       		bne.s	loc_19362
00019C1A E0E8 0012                  		asr	$12(a0)
00019C1E                            
00019C1E                            loc_19362:
00019C1E 7000                       		moveq	#0,d0
00019C20 6000                       		bra.s	loc_1937C
00019C22                            ; ===========================================================================
00019C22                            
00019C22                            loc_19366:
00019C22 7000                       		moveq	#0,d0
00019C24 0C68 001E 003C             		cmpi.w	#$1E,$3C(a0)
00019C2A 6E00                       		bgt.s	loc_1937C
00019C2C 7002                       		moveq	#2,d0
00019C2E 0828 0001 003D             		btst	#1,$3D(a0)
00019C34 6700                       		beq.s	loc_1937C
00019C36 4440                       		neg.w	d0
00019C38                            
00019C38                            loc_1937C:
00019C38 D068 0038                  		add.w	$38(a0),d0
00019C3C 3140 000C                  		move.w	d0,$C(a0)
00019C40 3168 0030 0008             		move.w	$30(a0),8(a0)
00019C46 6000 FE76                  		bra.w	loc_19202
00019C4A                            ; ===========================================================================
00019C4A                            
00019C4A                            loc_1938E:				; XREF: off_192FA
00019C4A 303C 04DA                  		move.w	#$4DA,d0
00019C4E 4A68 0036                  		tst.w	$36(a0)
00019C52 6700                       		beq.s	loc_1939C
00019C54 0440 0018                  		subi.w	#$18,d0
00019C58                            
00019C58                            loc_1939C:
00019C58 B068 0038                  		cmp.w	$38(a0),d0
00019C5C 6D00                       		blt.s	loc_193BE
00019C5E 317C 0008 003C             		move.w	#8,$3C(a0)
00019C64 4A68 0036                  		tst.w	$36(a0)
00019C68 6700                       		beq.s	loc_193B4
00019C6A 317C 002D 003C             		move.w	#$2D,$3C(a0)
00019C70                            
00019C70                            loc_193B4:
00019C70 5428 0028                  		addq.b	#2,$28(a0)
00019C74 4268 0012                  		clr.w	$12(a0)
00019C78 6000                       		bra.s	loc_193CC
00019C7A                            ; ===========================================================================
00019C7A                            
00019C7A                            loc_193BE:
00019C7A 0C68 FFC0 0012             		cmpi.w	#-$40,$12(a0)
00019C80 6C00                       		bge.s	loc_193CC
00019C82 0668 000C 0012             		addi.w	#$C,$12(a0)
00019C88                            
00019C88                            loc_193CC:
00019C88 6000 FE24                  		bra.w	loc_191F2
00019C8C                            ; ===========================================================================
00019C8C                            
00019C8C                            loc_193D0:				; XREF: off_192FA
00019C8C 5368 003C                  		subq.w	#1,$3C(a0)
00019C90 6E00                       		bgt.s	loc_19406
00019C92 6B00                       		bmi.s	loc_193EE
00019C94 70FF                       		moveq	#-1,d0
00019C96 3028 0036                  		move.w	$36(a0),d0
00019C9A 6700                       		beq.s	loc_193E8
00019C9C 2240                       		movea.l	d0,a1
00019C9E 137C 000A 0029             		move.b	#$A,$29(a1)
00019CA4                            
00019CA4                            loc_193E8:
00019CA4 4268 0036                  		clr.w	$36(a0)
00019CA8 6000                       		bra.s	loc_19406
00019CAA                            ; ===========================================================================
00019CAA                            
00019CAA                            loc_193EE:
00019CAA 0C68 FFE2 003C             		cmpi.w	#-$1E,$3C(a0)
00019CB0 6600                       		bne.s	loc_19406
00019CB2 4228 0029                  		clr.b	$29(a0)
00019CB6 5528 0025                  		subq.b	#2,$25(a0)
00019CBA 117C 00FF 003D             		move.b	#-1,$3D(a0)
00019CC0 6000                       		bra.s	loc_19446
00019CC2                            ; ===========================================================================
00019CC2                            
00019CC2                            loc_19406:
00019CC2 7001                       		moveq	#1,d0
00019CC4 4A68 0036                  		tst.w	$36(a0)
00019CC8 6700                       		beq.s	loc_19410
00019CCA 7002                       		moveq	#2,d0
00019CCC                            
00019CCC                            loc_19410:
00019CCC 0C68 04DA 0038             		cmpi.w	#$4DA,$38(a0)
00019CD2 6700                       		beq.s	loc_19424
00019CD4 6D00                       		blt.s	loc_1941C
00019CD6 4440                       		neg.w	d0
00019CD8                            
00019CD8                            loc_1941C:
00019CD8 4A68 0036                  		tst.w	$36(a0)
00019CDC D168 0038                  		add.w	d0,$38(a0)
00019CE0                            
00019CE0                            loc_19424:
00019CE0 7000                       		moveq	#0,d0
00019CE2 4A68 0036                  		tst.w	$36(a0)
00019CE6 6700                       		beq.s	loc_19438
00019CE8 7002                       		moveq	#2,d0
00019CEA 0828 0000 003D             		btst	#0,$3D(a0)
00019CF0 6700                       		beq.s	loc_19438
00019CF2 4440                       		neg.w	d0
00019CF4                            
00019CF4                            loc_19438:
00019CF4 D068 0038                  		add.w	$38(a0),d0
00019CF8 3140 000C                  		move.w	d0,$C(a0)
00019CFC 3168 0030 0008             		move.w	$30(a0),8(a0)
00019D02                            
00019D02                            loc_19446:
00019D02 6000 FDBA                  		bra.w	loc_19202
00019D06                            
00019D06                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019D06                            
00019D06                            
00019D06                            Obj75_FindBlocks:			; XREF: loc_192AE
00019D06 4268 0036                  		clr.w	$36(a0)
00019D0A 43F8 D040                  		lea	($FFFFD040).w,a1
00019D0E 703E                       		moveq	#$3E,d0
00019D10 7276                       		moveq	#$76,d1
00019D12 1428 0034                  		move.b	$34(a0),d2
00019D16                            
00019D16                            Obj75_FindLoop:
00019D16 B211                       		cmp.b	(a1),d1		; is object a SYZ boss block?
00019D18 6600                       		bne.s	loc_1946A	; if not, branch
00019D1A B429 0028                  		cmp.b	$28(a1),d2
00019D1E 6600                       		bne.s	loc_1946A
00019D20 3149 0036                  		move.w	a1,$36(a0)
00019D24 6000                       		bra.s	locret_19472
00019D26                            ; ===========================================================================
00019D26                            
00019D26                            loc_1946A:
00019D26 43E9 0040                  		lea	$40(a1),a1	; next object RAM entry
00019D2A 51C8 FFEA                  		dbf	d0,Obj75_FindLoop
00019D2E                            
00019D2E                            locret_19472:
00019D2E 4E75                       		rts	
00019D30                            ; End of function Obj75_FindBlocks
00019D30                            
00019D30                            ; ===========================================================================
00019D30                            
00019D30                            loc_19474:				; XREF: Obj75_ShipIndex
00019D30 5368 003C                  		subq.w	#1,$3C(a0)
00019D34 6B00                       		bmi.s	loc_1947E
00019D36 6000 E412                  		bra.w	BossDefeated
00019D3A                            ; ===========================================================================
00019D3A                            
00019D3A                            loc_1947E:
00019D3A 5428 0025                  		addq.b	#2,$25(a0)
00019D3E 4268 0012                  		clr.w	$12(a0)
00019D42 08E8 0000 0022             		bset	#0,$22(a0)
00019D48 08A8 0007 0022             		bclr	#7,$22(a0)
00019D4E 4268 0010                  		clr.w	$10(a0)
00019D52 317C FFFF 003C             		move.w	#-1,$3C(a0)
00019D58 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00019D5C 6600                       		bne.s	loc_194A8
00019D5E 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00019D64                            
00019D64                            loc_194A8:
00019D64 6000 FD58                  		bra.w	loc_19202
00019D68                            ; ===========================================================================
00019D68                            
00019D68                            loc_194AC:				; XREF: Obj75_ShipIndex
00019D68 5268 003C                  		addq.w	#1,$3C(a0)
00019D6C 6700                       		beq.s	loc_194BC
00019D6E 6A00                       		bpl.s	loc_194C2
00019D70 0668 0018 0012             		addi.w	#$18,$12(a0)
00019D76 6000                       		bra.s	loc_194EE
00019D78                            ; ===========================================================================
00019D78                            
00019D78                            loc_194BC:
00019D78 4268 0012                  		clr.w	$12(a0)
00019D7C 6000                       		bra.s	loc_194EE
00019D7E                            ; ===========================================================================
00019D7E                            
00019D7E                            loc_194C2:
00019D7E 0C68 0020 003C             		cmpi.w	#$20,$3C(a0)
00019D84 6500                       		bcs.s	loc_194DA
00019D86 6700                       		beq.s	loc_194E0
00019D88 0C68 002A 003C             		cmpi.w	#$2A,$3C(a0)
00019D8E 6500                       		bcs.s	loc_194EE
00019D90 5428 0025                  		addq.b	#2,$25(a0)
00019D94 6000                       		bra.s	loc_194EE
00019D96                            ; ===========================================================================
00019D96                            
00019D96                            loc_194DA:
00019D96 5168 0012                  		subq.w	#8,$12(a0)
00019D9A 6000                       		bra.s	loc_194EE
00019D9C                            ; ===========================================================================
00019D9C                            
00019D9C                            loc_194E0:
00019D9C 4268 0012                  		clr.w	$12(a0)
00019DA0 303C 0085                  		move.w	#$85,d0
00019DA4 4EB9 0000 15BA             		jsr	(PlaySound).l	; play SYZ music
00019DAA                            
00019DAA                            loc_194EE:
00019DAA 6000 FD02                  		bra.w	loc_191F2
00019DAE                            ; ===========================================================================
00019DAE                            
00019DAE                            loc_194F2:				; XREF: Obj75_ShipIndex
00019DAE 317C 0400 0010             		move.w	#$400,$10(a0)
00019DB4 317C FFC0 0012             		move.w	#-$40,$12(a0)
00019DBA 0C78 2D40 F72A             		cmpi.w	#$2D40,($FFFFF72A).w
00019DC0 6400                       		bcc.s	loc_1950C
00019DC2 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00019DC6 6000                       		bra.s	loc_19512
00019DC8                            ; ===========================================================================
00019DC8                            
00019DC8                            loc_1950C:
00019DC8 4A28 0001                  		tst.b	1(a0)
00019DCC 6A00                       		bpl.s	Obj75_ShipDelete
00019DCE                            
00019DCE                            loc_19512:
00019DCE 6100 E3BC                  		bsr.w	BossMove
00019DD2 6000 FCC6                  		bra.w	loc_191DE
00019DD6                            ; ===========================================================================
00019DD6                            
00019DD6                            Obj75_ShipDelete:
00019DD6 4EF9 0000 DDFE             		jmp	DeleteObject
00019DDC                            ; ===========================================================================
00019DDC                            
00019DDC                            Obj75_FaceMain:				; XREF: Obj75_Index
00019DDC 7201                       		moveq	#1,d1
00019DDE 2268 0034                  		movea.l	$34(a0),a1
00019DE2 7000                       		moveq	#0,d0
00019DE4 1029 0025                  		move.b	$25(a1),d0
00019DE8 303B 0000                  		move.w	off_19546(pc,d0.w),d0
00019DEC 4EBB 0000                  		jsr	off_19546(pc,d0.w)
00019DF0 1141 001C                  		move.b	d1,$1C(a0)
00019DF4 1010                       		move.b	(a0),d0
00019DF6 B011                       		cmp.b	(a1),d0
00019DF8 6600                       		bne.s	Obj75_FaceDelete
00019DFA 6000                       		bra.s	loc_195BE
00019DFC                            ; ===========================================================================
00019DFC                            
00019DFC                            Obj75_FaceDelete:
00019DFC 4EF9 0000 DDFE             		jmp	DeleteObject
00019E02                            ; ===========================================================================
00019E02 0000 0000                  off_19546:	dc.w loc_19574-off_19546, loc_19574-off_19546
00019E06 0000 0000                  		dc.w loc_1955A-off_19546, loc_19552-off_19546
00019E0A 0000 0000                  		dc.w loc_19552-off_19546, loc_19556-off_19546
00019E0E                            ; ===========================================================================
00019E0E                            
00019E0E                            loc_19552:				; XREF: off_19546
00019E0E 720A                       		moveq	#$A,d1
00019E10 4E75                       		rts	
00019E12                            ; ===========================================================================
00019E12                            
00019E12                            loc_19556:				; XREF: off_19546
00019E12 7206                       		moveq	#6,d1
00019E14 4E75                       		rts	
00019E16                            ; ===========================================================================
00019E16                            
00019E16                            loc_1955A:				; XREF: off_19546
00019E16 7000                       		moveq	#0,d0
00019E18 1029 0028                  		move.b	$28(a1),d0
00019E1C 303B 0000                  		move.w	off_19568(pc,d0.w),d0
00019E20 4EFB 0000                  		jmp	off_19568(pc,d0.w)
00019E24                            ; ===========================================================================
00019E24 0000 0000                  off_19568:	dc.w loc_19570-off_19568, loc_19572-off_19568
00019E28 0000 0000                  		dc.w loc_19570-off_19568, loc_19570-off_19568
00019E2C                            ; ===========================================================================
00019E2C                            
00019E2C                            loc_19570:				; XREF: off_19568
00019E2C 6000                       		bra.s	loc_19574
00019E2E                            ; ===========================================================================
00019E2E                            
00019E2E                            loc_19572:				; XREF: off_19568
00019E2E 7206                       		moveq	#6,d1
00019E30                            
00019E30                            loc_19574:				; XREF: off_19546
00019E30 4A29 0020                  		tst.b	$20(a1)
00019E34 6600                       		bne.s	loc_1957E
00019E36 7205                       		moveq	#5,d1
00019E38 4E75                       		rts	
00019E3A                            ; ===========================================================================
00019E3A                            
00019E3A                            loc_1957E:
00019E3A 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00019E40 6500                       		bcs.s	locret_19588
00019E42 7204                       		moveq	#4,d1
00019E44                            
00019E44                            locret_19588:
00019E44 4E75                       		rts	
00019E46                            ; ===========================================================================
00019E46                            
00019E46                            Obj75_FlameMain:			; XREF: Obj75_Index
00019E46 117C 0007 001C             		move.b	#7,$1C(a0)
00019E4C 2268 0034                  		movea.l	$34(a0),a1
00019E50 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00019E56 6600                       		bne.s	loc_195AA
00019E58 117C 000B 001C             		move.b	#$B,$1C(a0)
00019E5E 4A28 0001                  		tst.b	1(a0)
00019E62 6A00                       		bpl.s	Obj75_FlameDelete
00019E64 6000                       		bra.s	loc_195B6
00019E66                            ; ===========================================================================
00019E66                            
00019E66                            loc_195AA:
00019E66 4A69 0010                  		tst.w	$10(a1)
00019E6A 6700                       		beq.s	loc_195B6
00019E6C 117C 0008 001C             		move.b	#8,$1C(a0)
00019E72                            
00019E72                            loc_195B6:
00019E72 6000                       		bra.s	loc_195BE
00019E74                            ; ===========================================================================
00019E74                            
00019E74                            Obj75_FlameDelete:
00019E74 4EF9 0000 DDFE             		jmp	DeleteObject
00019E7A                            ; ===========================================================================
00019E7A                            
00019E7A                            loc_195BE:
00019E7A 43F9 0001 85CE             		lea	(Ani_Eggman).l,a1
00019E80 4EB9 0000 AE82             		jsr	AnimateSprite
00019E86 2268 0034                  		movea.l	$34(a0),a1
00019E8A 3169 0008 0008             		move.w	8(a1),8(a0)
00019E90 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019E96                            
00019E96                            loc_195DA:
00019E96 1169 0022 0022             		move.b	$22(a1),$22(a0)
00019E9C 7003                       		moveq	#3,d0
00019E9E C028 0022                  		and.b	$22(a0),d0
00019EA2 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019EA8 8128 0001                  		or.b	d0,1(a0)
00019EAC 4EF9 0000 DDC2             		jmp	DisplaySprite
00019EB2                            ; ===========================================================================
00019EB2                            
00019EB2                            Obj75_SpikeMain:			; XREF: Obj75_Index
00019EB2 217C 0001 86FA 0004        		move.l	#Map_BossItems,4(a0)
00019EBA 317C 246C 0002             		move.w	#$246C,2(a0)
00019EC0 117C 0005 001A             		move.b	#5,$1A(a0)
00019EC6 2268 0034                  		movea.l	$34(a0),a1
00019ECA 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00019ED0 6600                       		bne.s	loc_1961C
00019ED2 4A28 0001                  		tst.b	1(a0)
00019ED6 6A00                       		bpl.s	Obj75_SpikeDelete
00019ED8                            
00019ED8                            loc_1961C:
00019ED8 3169 0008 0008             		move.w	8(a1),8(a0)
00019EDE 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019EE4 3028 003C                  		move.w	$3C(a0),d0
00019EE8 0C29 0004 0025             		cmpi.b	#4,$25(a1)
00019EEE 6600                       		bne.s	loc_19652
00019EF0 0C29 0006 0028             		cmpi.b	#6,$28(a1)
00019EF6 6700                       		beq.s	loc_1964C
00019EF8 4A29 0028                  		tst.b	$28(a1)
00019EFC 6600                       		bne.s	loc_19658
00019EFE 0C40 0094                  		cmpi.w	#$94,d0
00019F02 6C00                       		bge.s	loc_19658
00019F04 5E40                       		addq.w	#7,d0
00019F06 6000                       		bra.s	loc_19658
00019F08                            ; ===========================================================================
00019F08                            
00019F08                            loc_1964C:
00019F08 4A69 003C                  		tst.w	$3C(a1)
00019F0C 6A00                       		bpl.s	loc_19658
00019F0E                            
00019F0E                            loc_19652:
00019F0E 4A40                       		tst.w	d0
00019F10 6F00                       		ble.s	loc_19658
00019F12 5B40                       		subq.w	#5,d0
00019F14                            
00019F14                            loc_19658:
00019F14 3140 003C                  		move.w	d0,$3C(a0)
00019F18 E440                       		asr.w	#2,d0
00019F1A D168 000C                  		add.w	d0,$C(a0)
00019F1E 117C 0008 0019             		move.b	#8,$19(a0)
00019F24 117C 000C 0016             		move.b	#$C,$16(a0)
00019F2A 4228 0020                  		clr.b	$20(a0)
00019F2E 2268 0034                  		movea.l	$34(a0),a1
00019F32 4A29 0020                  		tst.b	$20(a1)
00019F36 6700                       		beq.s	loc_19688
00019F38 4A29 0029                  		tst.b	$29(a1)
00019F3C 6600                       		bne.s	loc_19688
00019F3E 117C 0084 0020             		move.b	#$84,$20(a0)
00019F44                            
00019F44                            loc_19688:
00019F44 6000 FF50                  		bra.w	loc_195DA
00019F48                            ; ===========================================================================
00019F48                            
00019F48                            Obj75_SpikeDelete:
00019F48 4EF9 0000 DDFE             		jmp	DeleteObject
00019F4E                            ; ===========================================================================
00019F4E                            ; ---------------------------------------------------------------------------
00019F4E                            ; Object 76 - blocks that Eggman picks up (SYZ)
00019F4E                            ; ---------------------------------------------------------------------------
00019F4E                            
00019F4E                            Obj76:					; XREF: Obj_Index
00019F4E 7000                       		moveq	#0,d0
00019F50 1028 0024                  		move.b	$24(a0),d0
00019F54 323B 0000                  		move.w	Obj76_Index(pc,d0.w),d1
00019F58 4EFB 1000                  		jmp	Obj76_Index(pc,d1.w)
00019F5C                            ; ===========================================================================
00019F5C 0000                       Obj76_Index:	dc.w Obj76_Main-Obj76_Index
00019F5E 0000                       		dc.w Obj76_Action-Obj76_Index
00019F60 0000                       		dc.w loc_19762-Obj76_Index
00019F62                            ; ===========================================================================
00019F62                            
00019F62                            Obj76_Main:				; XREF: Obj76_Index
00019F62 7800                       		moveq	#0,d4
00019F64 3A3C 2C10                  		move.w	#$2C10,d5
00019F68 7C09                       		moveq	#9,d6
00019F6A 43D0                       		lea	(a0),a1
00019F6C 6000                       		bra.s	Obj76_MakeBlock
00019F6E                            ; ===========================================================================
00019F6E                            
00019F6E                            Obj76_Loop:
00019F6E 4EB9 0000 E248             		jsr	SingleObjLoad
00019F74 6600                       		bne.s	Obj76_ExitLoop
00019F76                            
00019F76                            Obj76_MakeBlock:			; XREF: Obj76_Main
00019F76 12BC 0076                  		move.b	#$76,(a1)
00019F7A 237C 0000 0000 0004        		move.l	#Map_obj76,4(a1)
00019F82 337C 4000 0002             		move.w	#$4000,2(a1)
00019F88 137C 0004 0001             		move.b	#4,1(a1)
00019F8E 137C 0010 0019             		move.b	#$10,$19(a1)
00019F94 137C 0010 0016             		move.b	#$10,$16(a1)
00019F9A 137C 0003 0018             		move.b	#3,$18(a1)
00019FA0 3345 0008                  		move.w	d5,8(a1)	; set x-position
00019FA4 337C 0582 000C             		move.w	#$582,$C(a1)
00019FAA 3344 0028                  		move.w	d4,$28(a1)
00019FAE 0644 0101                  		addi.w	#$101,d4
00019FB2 0645 0020                  		addi.w	#$20,d5		; add $20 to next x-position
00019FB6 5429 0024                  		addq.b	#2,$24(a1)
00019FBA 51CE FFB2                  		dbf	d6,Obj76_Loop	; repeat sequence 9 more times
00019FBE                            
00019FBE                            Obj76_ExitLoop:
00019FBE 4E75                       		rts	
00019FC0                            ; ===========================================================================
00019FC0                            
00019FC0                            Obj76_Action:				; XREF: Obj76_Index
00019FC0 1028 0029                  		move.b	$29(a0),d0
00019FC4 B028 0028                  		cmp.b	$28(a0),d0
00019FC8 6700                       		beq.s	Obj76_Solid
00019FCA 4A00                       		tst.b	d0
00019FCC 6B00                       		bmi.s	loc_19718
00019FCE                            
00019FCE                            loc_19712:
00019FCE 6100 0000                  		bsr.w	Obj76_Break
00019FD2 6000                       		bra.s	Obj76_Display
00019FD4                            ; ===========================================================================
00019FD4                            
00019FD4                            loc_19718:
00019FD4 2268 0034                  		movea.l	$34(a0),a1
00019FD8 4A29 0021                  		tst.b	$21(a1)
00019FDC 67F0                       		beq.s	loc_19712
00019FDE 3169 0008 0008             		move.w	8(a1),8(a0)
00019FE4 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019FEA 0668 002C 000C             		addi.w	#$2C,$C(a0)
00019FF0 B2C8                       		cmpa.w	a0,a1
00019FF2 6500                       		bcs.s	Obj76_Display
00019FF4 3029 0012                  		move.w	$12(a1),d0
00019FF8 48C0                       		ext.l	d0
00019FFA E080                       		asr.l	#8,d0
00019FFC D168 000C                  		add.w	d0,$C(a0)
0001A000 6000                       		bra.s	Obj76_Display
0001A002                            ; ===========================================================================
0001A002                            
0001A002                            Obj76_Solid:				; XREF: Obj76_Action
0001A002 323C 001B                  		move.w	#$1B,d1
0001A006 343C 0010                  		move.w	#$10,d2
0001A00A 363C 0011                  		move.w	#$11,d3
0001A00E 3828 0008                  		move.w	8(a0),d4
0001A012 4EB9 0001 0192             		jsr	SolidObject
0001A018                            
0001A018                            Obj76_Display:				; XREF: Obj76_Action
0001A018 4EF9 0000 DDC2             		jmp	DisplaySprite
0001A01E                            ; ===========================================================================
0001A01E                            
0001A01E                            loc_19762:				; XREF: Obj76_Index
0001A01E 4A28 0001                  		tst.b	1(a0)
0001A022 6A00                       		bpl.s	Obj76_Delete
0001A024 4EB9 0000 DD70             		jsr	ObjectFall
0001A02A 4EF9 0000 DDC2             		jmp	DisplaySprite
0001A030                            ; ===========================================================================
0001A030                            
0001A030                            Obj76_Delete:
0001A030 4EF9 0000 DDFE             		jmp	DeleteObject
0001A036                            
0001A036                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001A036                            
0001A036                            
0001A036                            Obj76_Break:				; XREF: Obj76_Action
0001A036 49FA 0000                  		lea	Obj76_FragSpeed(pc),a4
0001A03A 4BFA 0000                  		lea	Obj76_FragPos(pc),a5
0001A03E 7801                       		moveq	#1,d4
0001A040 7203                       		moveq	#3,d1
0001A042 7438                       		moveq	#$38,d2
0001A044 5428 0024                  		addq.b	#2,$24(a0)
0001A048 117C 0008 0019             		move.b	#8,$19(a0)
0001A04E 117C 0008 0016             		move.b	#8,$16(a0)
0001A054 43D0                       		lea	(a0),a1
0001A056 6000                       		bra.s	Obj76_MakeFrag
0001A058                            ; ===========================================================================
0001A058                            
0001A058                            Obj76_LoopFrag:
0001A058 4EB9 0000 E25E             		jsr	SingleObjLoad2
0001A05E 6600                       		bne.s	loc_197D4
0001A060                            
0001A060                            Obj76_MakeFrag:
0001A060 45D0                       		lea	(a0),a2
0001A062 47D1                       		lea	(a1),a3
0001A064 7603                       		moveq	#3,d3
0001A066                            
0001A066                            loc_197AA:
0001A066 26DA                       		move.l	(a2)+,(a3)+
0001A068 26DA                       		move.l	(a2)+,(a3)+
0001A06A 26DA                       		move.l	(a2)+,(a3)+
0001A06C 26DA                       		move.l	(a2)+,(a3)+
0001A06E 51CB FFF6                  		dbf	d3,loc_197AA
0001A072                            
0001A072 335C 0010                  		move.w	(a4)+,$10(a1)
0001A076 335C 0012                  		move.w	(a4)+,$12(a1)
0001A07A 361D                       		move.w	(a5)+,d3
0001A07C D769 0008                  		add.w	d3,8(a1)
0001A080 361D                       		move.w	(a5)+,d3
0001A082 D769 000C                  		add.w	d3,$C(a1)
0001A086 1344 001A                  		move.b	d4,$1A(a1)
0001A08A 5244                       		addq.w	#1,d4
0001A08C 51C9 FFCA                  		dbf	d1,Obj76_LoopFrag ; repeat sequence 3 more times
0001A090                            
0001A090                            loc_197D4:
0001A090 303C 00CB                  		move.w	#$CB,d0
0001A094 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play smashing sound
0001A09A                            ; End of function Obj76_Break
0001A09A                            
0001A09A                            ; ===========================================================================
0001A09A FE80 FE00                  Obj76_FragSpeed:dc.w $FE80, $FE00
0001A09E 0180 FE00                  		dc.w $180, $FE00
0001A0A2 FF00 FF00                  		dc.w $FF00, $FF00
0001A0A6 0100 FF00                  		dc.w $100, $FF00
0001A0AA FFF8 FFF8                  Obj76_FragPos:	dc.w $FFF8, $FFF8
0001A0AE 0010 0000                  		dc.w $10, 0
0001A0B2 0000 0010                  		dc.w 0,	$10
0001A0B6 0010 0010                  		dc.w $10, $10
0001A0BA                            ; ---------------------------------------------------------------------------
0001A0BA                            ; Sprite mappings - blocks that	Eggman picks up (SYZ)
0001A0BA                            ; ---------------------------------------------------------------------------
0001A0BA                            Map_obj76:
0001A0BA                            	include "_maps\obj76.asm"
0001A0BA                            ; ---------------------------------------------------------------------------
0001A0BA                            ; Sprite mappings - blocks that	Robotnik picks up (SYZ)
0001A0BA                            ; ---------------------------------------------------------------------------
0001A0BA 0000 0000                  		dc.w byte_19808-Map_obj76, byte_19814-Map_obj76
0001A0BE 0000 0000                  		dc.w byte_1981A-Map_obj76, byte_19820-Map_obj76
0001A0C2 0000                       		dc.w byte_19826-Map_obj76
0001A0C4 02                         byte_19808:	dc.b 2
0001A0C5 F00D 0071 F0               		dc.b $F0, $D, 0, $71, $F0
0001A0CA 000D 0079 F0               		dc.b 0,	$D, 0, $79, $F0
0001A0CF 00                         		dc.b 0
0001A0D0 01                         byte_19814:	dc.b 1
0001A0D1 F805 0071 F8               		dc.b $F8, 5, 0,	$71, $F8
0001A0D6 01                         byte_1981A:	dc.b 1
0001A0D7 F805 0075 F8               		dc.b $F8, 5, 0,	$75, $F8
0001A0DC 01                         byte_19820:	dc.b 1
0001A0DD F805 0079 F8               		dc.b $F8, 5, 0,	$79, $F8
0001A0E2 01                         byte_19826:	dc.b 1
0001A0E3 F805 007D F8               		dc.b $F8, 5, 0,	$7D, $F8
0001A0E8                            		even
0001A0E8                            		even
0001A0E8                            
0001A0E8                            ; ===========================================================================
0001A0E8                            
0001A0E8                            loc_1982C:				; XREF: loc_19C62; loc_19C80
0001A0E8 4EF9 0000 DDFE             		jmp	DeleteObject
0001A0EE                            ; ===========================================================================
0001A0EE                            ; ---------------------------------------------------------------------------
0001A0EE                            ; Object 82 - Eggman (SBZ2)
0001A0EE                            ; ---------------------------------------------------------------------------
0001A0EE                            
0001A0EE                            Obj82:					; XREF: Obj_Index
0001A0EE 7000                       		moveq	#0,d0
0001A0F0 1028 0024                  		move.b	$24(a0),d0
0001A0F4 323B 0000                  		move.w	Obj82_Index(pc,d0.w),d1
0001A0F8 4EFB 1000                  		jmp	Obj82_Index(pc,d1.w)
0001A0FC                            ; ===========================================================================
0001A0FC 0000                       Obj82_Index:	dc.w Obj82_Main-Obj82_Index
0001A0FE 0000                       		dc.w Obj82_Eggman-Obj82_Index
0001A100 0000                       		dc.w Obj82_Switch-Obj82_Index
0001A102                            
0001A102 0200 03                    Obj82_ObjData:	dc.b 2,	0, 3		; routine number, animation, priority
0001A105 0400 03                    		dc.b 4,	0, 3
0001A108                            ; ===========================================================================
0001A108                            
0001A108                            Obj82_Main:				; XREF: Obj82_Index
0001A108 45FA FFF8                  		lea	Obj82_ObjData(pc),a2
0001A10C 317C 2160 0008             		move.w	#$2160,8(a0)
0001A112 317C 05A4 000C             		move.w	#$5A4,$C(a0)
0001A118 117C 000F 0020             		move.b	#$F,$20(a0)
0001A11E 117C 0010 0021             		move.b	#$10,$21(a0)
0001A124 08A8 0000 0022             		bclr	#0,$22(a0)
0001A12A 4228 0025                  		clr.b	$25(a0)
0001A12E 115A 0024                  		move.b	(a2)+,$24(a0)
0001A132 115A 001C                  		move.b	(a2)+,$1C(a0)
0001A136 115A 0018                  		move.b	(a2)+,$18(a0)
0001A13A 217C 0000 0000 0004        		move.l	#Map_obj82,4(a0)
0001A142 317C 0400 0002             		move.w	#$400,2(a0)
0001A148 117C 0004 0001             		move.b	#4,1(a0)
0001A14E 08E8 0007 0001             		bset	#7,1(a0)
0001A154 117C 0020 0019             		move.b	#$20,$19(a0)
0001A15A 4EB9 0000 E25E             		jsr	SingleObjLoad2
0001A160 6600                       		bne.s	Obj82_Eggman
0001A162 2348 0034                  		move.l	a0,$34(a1)
0001A166 12BC 0082                  		move.b	#$82,(a1)	; load switch object
0001A16A 337C 2130 0008             		move.w	#$2130,8(a1)
0001A170 337C 05BC 000C             		move.w	#$5BC,$C(a1)
0001A176 4228 0025                  		clr.b	$25(a0)
0001A17A 135A 0024                  		move.b	(a2)+,$24(a1)
0001A17E 135A 001C                  		move.b	(a2)+,$1C(a1)
0001A182 135A 0018                  		move.b	(a2)+,$18(a1)
0001A186 237C 0000 C5B6 0004        		move.l	#Map_obj32,4(a1)
0001A18E 337C 04A4 0002             		move.w	#$4A4,2(a1)
0001A194 137C 0004 0001             		move.b	#4,1(a1)
0001A19A 08E9 0007 0001             		bset	#7,1(a1)
0001A1A0 137C 0010 0019             		move.b	#$10,$19(a1)
0001A1A6 137C 0000 001A             		move.b	#0,$1A(a1)
0001A1AC                            
0001A1AC                            Obj82_Eggman:				; XREF: Obj82_Index
0001A1AC 7000                       		moveq	#0,d0
0001A1AE 1028 0025                  		move.b	$25(a0),d0
0001A1B2 323B 0000                  		move.w	Obj82_EggIndex(pc,d0.w),d1
0001A1B6 4EBB 1000                  		jsr	Obj82_EggIndex(pc,d1.w)
0001A1BA 43FA 0000                  		lea	Ani_obj82(pc),a1
0001A1BE 4EB9 0000 AE82             		jsr	AnimateSprite
0001A1C4 4EF9 0000 DDC2             		jmp	DisplaySprite
0001A1CA                            ; ===========================================================================
0001A1CA 0000                       Obj82_EggIndex:	dc.w Obj82_ChkSonic-Obj82_EggIndex
0001A1CC 0000                       		dc.w Obj82_PreLeap-Obj82_EggIndex
0001A1CE 0000                       		dc.w Obj82_Leap-Obj82_EggIndex
0001A1D0 0000                       		dc.w loc_19934-Obj82_EggIndex
0001A1D2                            ; ===========================================================================
0001A1D2                            
0001A1D2                            Obj82_ChkSonic:				; XREF: Obj82_EggIndex
0001A1D2 3028 0008                  		move.w	8(a0),d0
0001A1D6 9078 D008                  		sub.w	($FFFFD008).w,d0
0001A1DA 0C40 0080                  		cmpi.w	#128,d0		; is Sonic within 128 pixels of	Eggman?
0001A1DE 6400                       		bcc.s	loc_19934	; if not, branch
0001A1E0 5428 0025                  		addq.b	#2,$25(a0)
0001A1E4 317C 00B4 003C             		move.w	#180,$3C(a0)	; set delay to 3 seconds
0001A1EA 117C 0001 001C             		move.b	#1,$1C(a0)
0001A1F0                            
0001A1F0                            loc_19934:				; XREF: Obj82_EggIndex
0001A1F0 4EF9 0000 DD9C             		jmp	SpeedToPos
0001A1F6                            ; ===========================================================================
0001A1F6                            
0001A1F6                            Obj82_PreLeap:				; XREF: Obj82_EggIndex
0001A1F6 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from time delay
0001A1FA 6600                       		bne.s	loc_19954	; if time remains, branch
0001A1FC 5428 0025                  		addq.b	#2,$25(a0)
0001A200 117C 0002 001C             		move.b	#2,$1C(a0)
0001A206 5868 000C                  		addq.w	#4,$C(a0)
0001A20A 317C 000F 003C             		move.w	#15,$3C(a0)
0001A210                            
0001A210                            loc_19954:
0001A210 60DE                       		bra.s	loc_19934
0001A212                            ; ===========================================================================
0001A212                            
0001A212                            Obj82_Leap:				; XREF: Obj82_EggIndex
0001A212 5368 003C                  		subq.w	#1,$3C(a0)
0001A216 6E00                       		bgt.s	loc_199D0
0001A218 6600                       		bne.s	loc_1996A
0001A21A 317C FF04 0010             		move.w	#-$FC,$10(a0)	; make Eggman leap
0001A220 317C FC40 0012             		move.w	#-$3C0,$12(a0)
0001A226                            
0001A226                            loc_1996A:
0001A226 0C68 2132 0008             		cmpi.w	#$2132,8(a0)
0001A22C 6E00                       		bgt.s	loc_19976
0001A22E 4268 0010                  		clr.w	$10(a0)
0001A232                            
0001A232                            loc_19976:
0001A232 0668 0024 0012             		addi.w	#$24,$12(a0)
0001A238 4A68 0012                  		tst.w	$12(a0)
0001A23C 6B00                       		bmi.s	Obj82_FindBlocks
0001A23E 0C68 0595 000C             		cmpi.w	#$595,$C(a0)
0001A244 6500                       		bcs.s	Obj82_FindBlocks
0001A246 317C 5357 0028             		move.w	#$5357,$28(a0)
0001A24C 0C68 059B 000C             		cmpi.w	#$59B,$C(a0)
0001A252 6500                       		bcs.s	Obj82_FindBlocks
0001A254 317C 059B 000C             		move.w	#$59B,$C(a0)
0001A25A 4268 0012                  		clr.w	$12(a0)
0001A25E                            
0001A25E                            Obj82_FindBlocks:
0001A25E 3028 0010                  		move.w	$10(a0),d0
0001A262 8068 0012                  		or.w	$12(a0),d0
0001A266 6600                       		bne.s	loc_199D0
0001A268 43F8 D000                  		lea	($FFFFD000).w,a1 ; start at the	first object RAM
0001A26C 703E                       		moveq	#$3E,d0
0001A26E 7240                       		moveq	#$40,d1
0001A270                            
0001A270                            Obj82_FindLoop:	
0001A270 D2C1                       		adda.w	d1,a1		; jump to next object RAM
0001A272 0C11 0083                  		cmpi.b	#$83,(a1)	; is object a block? (object $83)
0001A276 57C8 FFF8                  		dbeq	d0,Obj82_FindLoop ; if not, repeat (max	$3E times)
0001A27A                            
0001A27A 6600                       		bne.s	loc_199D0
0001A27C 337C 474F 0028             		move.w	#$474F,$28(a1)	; set block to disintegrate
0001A282 5428 0025                  		addq.b	#2,$25(a0)
0001A286 117C 0001 001C             		move.b	#1,$1C(a0)
0001A28C                            
0001A28C                            loc_199D0:
0001A28C 6000 FF62                  		bra.w	loc_19934
0001A290                            ; ===========================================================================
0001A290                            
0001A290                            Obj82_Switch:				; XREF: Obj82_Index
0001A290 7000                       		moveq	#0,d0
0001A292 1028 0025                  		move.b	$25(a0),d0
0001A296 303B 0000                  		move.w	Obj82_SwIndex(pc,d0.w),d0
0001A29A 4EFB 0000                  		jmp	Obj82_SwIndex(pc,d0.w)
0001A29E                            ; ===========================================================================
0001A29E 0000                       Obj82_SwIndex:	dc.w loc_199E6-Obj82_SwIndex
0001A2A0 0000                       		dc.w Obj82_SwDisplay-Obj82_SwIndex
0001A2A2                            ; ===========================================================================
0001A2A2                            
0001A2A2                            loc_199E6:				; XREF: Obj82_SwIndex
0001A2A2 2268 0034                  		movea.l	$34(a0),a1
0001A2A6 0C69 5357 0028             		cmpi.w	#$5357,$28(a1)
0001A2AC 6600                       		bne.s	Obj82_SwDisplay
0001A2AE 117C 0001 001A             		move.b	#1,$1A(a0)
0001A2B4 5428 0025                  		addq.b	#2,$25(a0)
0001A2B8                            
0001A2B8                            Obj82_SwDisplay:			; XREF: Obj82_SwIndex
0001A2B8 4EF9 0000 DDC2             		jmp	DisplaySprite
0001A2BE                            ; ===========================================================================
0001A2BE                            Ani_obj82:
0001A2BE                            	include "_anim\obj82.asm"
0001A2BE                            ; ---------------------------------------------------------------------------
0001A2BE                            ; Animation script - Eggman (SBZ2)
0001A2BE                            ; ---------------------------------------------------------------------------
0001A2BE 0000                       		dc.w byte_19A10-Ani_obj82
0001A2C0 0000                       		dc.w byte_19A14-Ani_obj82
0001A2C2 0000                       		dc.w byte_19A18-Ani_obj82
0001A2C4 0000                       		dc.w byte_19A20-Ani_obj82
0001A2C6 0000                       		dc.w byte_19A24-Ani_obj82
0001A2C8 0000                       		dc.w byte_19A2A-Ani_obj82
0001A2CA 0000                       		dc.w byte_19A30-Ani_obj82
0001A2CC 7E00 FF00                  byte_19A10:	dc.b $7E, 0, $FF, 0
0001A2D0 0601 02FF                  byte_19A14:	dc.b 6,	1, 2, $FF
0001A2D4 0E03 0404 0000 00FF        byte_19A18:	dc.b $E, 3, 4, 4, 0, 0,	0, $FF
0001A2DC 0005 09FF                  byte_19A20:	dc.b 0,	5, 9, $FF
0001A2E0 0607 0408 04FF             byte_19A24:	dc.b 6,	7, 4, 8, 4, $FF
0001A2E6 0F04 0303 FF00             byte_19A2A:	dc.b $F, 4, 3, 3, $FF, 0
0001A2EC 7E06 FF00                  byte_19A30:	dc.b $7E, 6, $FF, 0
0001A2F0                            		even
0001A2F0                            		even
0001A2F0                            
0001A2F0                            ; ---------------------------------------------------------------------------
0001A2F0                            ; Sprite mappings - Eggman (SBZ2)
0001A2F0                            ; ---------------------------------------------------------------------------
0001A2F0                            Map_obj82:
0001A2F0                            	include "_maps\obj82.asm"
0001A2F0                            ; ================================================================================
0001A2F0                            ; Sprite Mappings - generated by Flex 2 Fri Mar 21 2025 21:13:29 GMT-0500 (Central Daylight Time)
0001A2F0                            ; ================================================================================
0001A2F0                            
0001A2F0                            DATAA16Z12RYSAF:
0001A2F0 0000 0000                  	dc.w DATAA16Z12RYSAF_0-DATAA16Z12RYSAF, DATAA16Z12RYSAF_1-DATAA16Z12RYSAF
0001A2F4 0000 0000                  	dc.w DATAA16Z12RYSAF_2-DATAA16Z12RYSAF, DATAA16Z12RYSAF_3-DATAA16Z12RYSAF
0001A2F8 0000 0000                  	dc.w DATAA16Z12RYSAF_4-DATAA16Z12RYSAF, DATAA16Z12RYSAF_5-DATAA16Z12RYSAF
0001A2FC 0000 0000                  	dc.w DATAA16Z12RYSAF_6-DATAA16Z12RYSAF, DATAA16Z12RYSAF_7-DATAA16Z12RYSAF
0001A300 0000 0000                  	dc.w DATAA16Z12RYSAF_8-DATAA16Z12RYSAF, DATAA16Z12RYSAF_9-DATAA16Z12RYSAF
0001A304 0000                       	dc.w DATAA16Z12RYSAF_A-DATAA16Z12RYSAF
0001A306 03                         DATAA16Z12RYSAF_0: dc.b $3
0001A307 FC00 006D E8               	dc.b $FC, $0, $0, $6D, $E8
0001A30C E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A311 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A316 04                         DATAA16Z12RYSAF_1: dc.b $4
0001A317 E80D 000C F0               	dc.b $E8, $D, $0, $C, $F0
0001A31C E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A321 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A326 FC00 006D E8               	dc.b $FC, $0, $0, $6D, $E8
0001A32B 04                         DATAA16Z12RYSAF_2: dc.b $4
0001A32C E90D 000C F0               	dc.b $E9, $D, $0, $C, $F0
0001A331 E90E 0000 F0               	dc.b $E9, $E, $0, $0, $F0
0001A336 010F 005D F0               	dc.b $1, $F, $0, $5D, $F0
0001A33B FD00 006D E8               	dc.b $FD, $0, $0, $6D, $E8
0001A340 03                         DATAA16Z12RYSAF_3: dc.b $3
0001A341 E80F 006E E8               	dc.b $E8, $F, $0, $6E, $E8
0001A346 080D 007E E8               	dc.b $8, $D, $0, $7E, $E8
0001A34B F005 0086 08               	dc.b $F0, $5, $0, $86, $8
0001A350 04                         DATAA16Z12RYSAF_4: dc.b $4
0001A351 E00F 008A E8               	dc.b $E0, $F, $0, $8A, $E8
0001A356 000C 009A E8               	dc.b $0, $C, $0, $9A, $E8
0001A35B 0806 009E F0               	dc.b $8, $6, $0, $9E, $F0
0001A360 E805 00A4 08               	dc.b $E8, $5, $0, $A4, $8
0001A365 04                         DATAA16Z12RYSAF_5: dc.b $4
0001A366 E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001A36B E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001A370 E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A375 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A37A 07                         DATAA16Z12RYSAF_6: dc.b $7
0001A37B E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001A380 E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001A385 0409 082E 00               	dc.b $4, $9, $8, $2E, $0
0001A38A 0405 0834 E8               	dc.b $4, $5, $8, $34, $E8
0001A38F F00F 081E F0               	dc.b $F0, $F, $8, $1E, $F0
0001A394 F104 0838 10               	dc.b $F1, $4, $8, $38, $10
0001A399 F104 0038 E0               	dc.b $F1, $4, $0, $38, $E0
0001A39E 04                         DATAA16Z12RYSAF_7: dc.b $4
0001A39F 080D 00A8 E4               	dc.b $8, $D, $0, $A8, $E4
0001A3A4 E80F 00B0 EC               	dc.b $E8, $F, $0, $B0, $EC
0001A3A9 0805 00C0 04               	dc.b $8, $5, $0, $C0, $4
0001A3AE F005 00C4 0C               	dc.b $F0, $5, $0, $C4, $C
0001A3B3 05                         DATAA16Z12RYSAF_8: dc.b $5
0001A3B4 0C05 00C8 E4               	dc.b $C, $5, $0, $C8, $E4
0001A3B9 E40F 00CC EC               	dc.b $E4, $F, $0, $CC, $EC
0001A3BE 040C 00DC EC               	dc.b $4, $C, $0, $DC, $EC
0001A3C3 0C05 00E0 FC               	dc.b $C, $5, $0, $E0, $FC
0001A3C8 EC04 00E4 0C               	dc.b $EC, $4, $0, $E4, $C
0001A3CD 08                         DATAA16Z12RYSAF_9: dc.b $8
0001A3CE E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001A3D3 E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001A3D8 E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A3DD 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A3E2 E00D 3ECE F0               	dc.b $E0, $D, $3E, $CE, $F0
0001A3E7 F00D 3ECE F0               	dc.b $F0, $D, $3E, $CE, $F0
0001A3EC 000D 3ECE F0               	dc.b $0, $D, $3E, $CE, $F0
0001A3F1 100D 3ECE F0               	dc.b $10, $D, $3E, $CE, $F0
0001A3F6 03                         DATAA16Z12RYSAF_A: dc.b $3
0001A3F7 EC0D 003A E4               	dc.b $EC, $D, $0, $3A, $E4
0001A3FC F408 0042 04               	dc.b $F4, $8, $0, $42, $4
0001A401 EC0D 0045 FC               	dc.b $EC, $D, $0, $45, $FC
0001A406                            	even
0001A406                            	even
0001A406                            
0001A406                            ; ===========================================================================
0001A406                            ; ---------------------------------------------------------------------------
0001A406                            ; Object 83 - blocks that disintegrate Eggman	presses	a switch (SBZ2)
0001A406                            ; ---------------------------------------------------------------------------
0001A406                            
0001A406                            Obj83:					; XREF: Obj_Index
0001A406 7000                       		moveq	#0,d0
0001A408 1028 0024                  		move.b	$24(a0),d0
0001A40C 323B 0000                  		move.w	Obj83_Index(pc,d0.w),d1
0001A410 4EFB 1000                  		jmp	Obj83_Index(pc,d1.w)
0001A414                            ; ===========================================================================
0001A414 0000                       Obj83_Index:	dc.w Obj83_Main-Obj83_Index
0001A416 0000                       		dc.w Obj83_ChkBreak-Obj83_Index
0001A418 0000                       		dc.w loc_19C36-Obj83_Index
0001A41A 0000                       		dc.w loc_19C62-Obj83_Index
0001A41C 0000                       		dc.w loc_19C72-Obj83_Index
0001A41E 0000                       		dc.w loc_19C80-Obj83_Index
0001A420                            ; ===========================================================================
0001A420                            
0001A420                            Obj83_Main:				; XREF: Obj83_Index
0001A420 317C 2080 0008             		move.w	#$2080,8(a0)
0001A426 317C 05D0 000C             		move.w	#$5D0,$C(a0)
0001A42C 117C 0080 0019             		move.b	#$80,$19(a0)
0001A432 117C 0010 0016             		move.b	#$10,$16(a0)
0001A438 117C 0004 0001             		move.b	#4,1(a0)
0001A43E 08E8 0007 0001             		bset	#7,1(a0)
0001A444 7800                       		moveq	#0,d4
0001A446 3A3C 2010                  		move.w	#$2010,d5
0001A44A 7C07                       		moveq	#7,d6
0001A44C 45E8 0030                  		lea	$30(a0),a2
0001A450                            
0001A450                            Obj83_MakeBlock:
0001A450 4EB9 0000 E248             		jsr	SingleObjLoad
0001A456 6600                       		bne.s	Obj83_ExitMake
0001A458 34C9                       		move.w	a1,(a2)+
0001A45A 12BC 0083                  		move.b	#$83,(a1)	; load block object
0001A45E 237C 0000 0000 0004        		move.l	#Map_obj83,4(a1)
0001A466 337C 4518 0002             		move.w	#$4518,2(a1)
0001A46C 137C 0004 0001             		move.b	#4,1(a1)
0001A472 137C 0010 0019             		move.b	#$10,$19(a1)
0001A478 137C 0010 0016             		move.b	#$10,$16(a1)
0001A47E 137C 0003 0018             		move.b	#3,$18(a1)
0001A484 3345 0008                  		move.w	d5,8(a1)	; set X	position
0001A488 337C 05D0 000C             		move.w	#$5D0,$C(a1)
0001A48E 0645 0020                  		addi.w	#$20,d5		; add $20 for next X position
0001A492 137C 0008 0024             		move.b	#8,$24(a1)
0001A498 51CE FFB6                  		dbf	d6,Obj83_MakeBlock ; repeat sequence 7 more times
0001A49C                            
0001A49C                            Obj83_ExitMake:
0001A49C 5428 0024                  		addq.b	#2,$24(a0)
0001A4A0 4E75                       		rts	
0001A4A2                            ; ===========================================================================
0001A4A2                            
0001A4A2                            Obj83_ChkBreak:				; XREF: Obj83_Index
0001A4A2 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001A4A8 6600                       		bne.s	Obj83_Solid	; if not, branch
0001A4AA 4228 001A                  		clr.b	$1A(a0)
0001A4AE 5428 0024                  		addq.b	#2,$24(a0)	; next subroutine
0001A4B2                            
0001A4B2                            Obj83_Solid:
0001A4B2 7000                       		moveq	#0,d0
0001A4B4 1028 001A                  		move.b	$1A(a0),d0
0001A4B8 4400                       		neg.b	d0
0001A4BA 4880                       		ext.w	d0
0001A4BC 5040                       		addq.w	#8,d0
0001A4BE E940                       		asl.w	#4,d0
0001A4C0 383C 2100                  		move.w	#$2100,d4
0001A4C4 9840                       		sub.w	d0,d4
0001A4C6 1140 0019                  		move.b	d0,$19(a0)
0001A4CA 3144 0008                  		move.w	d4,8(a0)
0001A4CE 720B                       		moveq	#$B,d1
0001A4D0 D240                       		add.w	d0,d1
0001A4D2 7410                       		moveq	#$10,d2
0001A4D4 7611                       		moveq	#$11,d3
0001A4D6 4EF9 0001 0192             		jmp	SolidObject
0001A4DC                            ; ===========================================================================
0001A4DC                            
0001A4DC                            loc_19C36:				; XREF: Obj83_Index
0001A4DC 0428 000E 001E             		subi.b	#$E,$1E(a0)
0001A4E2 6400                       		bcc.s	Obj83_Solid2
0001A4E4 70FF                       		moveq	#-1,d0
0001A4E6 1028 001A                  		move.b	$1A(a0),d0
0001A4EA 4880                       		ext.w	d0
0001A4EC D040                       		add.w	d0,d0
0001A4EE 3030 0030                  		move.w	$30(a0,d0.w),d0
0001A4F2 2240                       		movea.l	d0,a1
0001A4F4 337C 474F 0028             		move.w	#$474F,$28(a1)
0001A4FA 5228 001A                  		addq.b	#1,$1A(a0)
0001A4FE 0C28 0008 001A             		cmpi.b	#8,$1A(a0)
0001A504 6700                       		beq.s	loc_19C62
0001A506                            
0001A506                            Obj83_Solid2:
0001A506 60AA                       		bra.s	Obj83_Solid
0001A508                            ; ===========================================================================
0001A508                            
0001A508                            loc_19C62:				; XREF: Obj83_Index
0001A508 08A8 0003 0022             		bclr	#3,$22(a0)
0001A50E 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001A514 6000 FBD2                  		bra.w	loc_1982C
0001A518                            ; ===========================================================================
0001A518                            
0001A518                            loc_19C72:				; XREF: Obj83_Index
0001A518 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001A51E 6700                       		beq.s	Obj83_Break	; if yes, branch
0001A520 4EF9 0000 DDC2             		jmp	DisplaySprite
0001A526                            ; ===========================================================================
0001A526                            
0001A526                            loc_19C80:				; XREF: Obj83_Index
0001A526 4A28 0001                  		tst.b	1(a0)
0001A52A 6A00 FBBC                  		bpl.w	loc_1982C
0001A52E 4EB9 0000 DD70             		jsr	ObjectFall
0001A534 4EF9 0000 DDC2             		jmp	DisplaySprite
0001A53A                            ; ===========================================================================
0001A53A                            
0001A53A                            Obj83_Break:				; XREF: loc_19C72
0001A53A 49FA 0000                  		lea	Obj83_FragSpeed(pc),a4
0001A53E 4BFA 0000                  		lea	Obj83_FragPos(pc),a5
0001A542 7801                       		moveq	#1,d4
0001A544 7203                       		moveq	#3,d1
0001A546 7438                       		moveq	#$38,d2
0001A548 5428 0024                  		addq.b	#2,$24(a0)
0001A54C 117C 0008 0019             		move.b	#8,$19(a0)
0001A552 117C 0008 0016             		move.b	#8,$16(a0)
0001A558 43D0                       		lea	(a0),a1
0001A55A 6000                       		bra.s	Obj83_MakeFrag
0001A55C                            ; ===========================================================================
0001A55C                            
0001A55C                            Obj83_LoopFrag:
0001A55C 4EB9 0000 E25E             		jsr	SingleObjLoad2
0001A562 6600                       		bne.s	Obj83_BreakSnd
0001A564                            
0001A564                            Obj83_MakeFrag:				; XREF: Obj83_Break
0001A564 45D0                       		lea	(a0),a2
0001A566 47D1                       		lea	(a1),a3
0001A568 7603                       		moveq	#3,d3
0001A56A                            
0001A56A                            loc_19CC4:
0001A56A 26DA                       		move.l	(a2)+,(a3)+
0001A56C 26DA                       		move.l	(a2)+,(a3)+
0001A56E 26DA                       		move.l	(a2)+,(a3)+
0001A570 26DA                       		move.l	(a2)+,(a3)+
0001A572 51CB FFF6                  		dbf	d3,loc_19CC4
0001A576                            
0001A576 335C 0012                  		move.w	(a4)+,$12(a1)
0001A57A 361D                       		move.w	(a5)+,d3
0001A57C D769 0008                  		add.w	d3,8(a1)
0001A580 361D                       		move.w	(a5)+,d3
0001A582 D769 000C                  		add.w	d3,$C(a1)
0001A586 1344 001A                  		move.b	d4,$1A(a1)
0001A58A 5244                       		addq.w	#1,d4
0001A58C 51C9 FFCE                  		dbf	d1,Obj83_LoopFrag ; repeat sequence 3 more times
0001A590                            
0001A590                            Obj83_BreakSnd:
0001A590 303C 00CB                  		move.w	#$CB,d0
0001A594 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play smashing sound
0001A59A 4EF9 0000 DDC2             		jmp	DisplaySprite
0001A5A0                            ; ===========================================================================
0001A5A0 0080 0000                  Obj83_FragSpeed:dc.w $80, 0
0001A5A4 0120 00C0                  		dc.w $120, $C0
0001A5A8 FFF8 FFF8                  Obj83_FragPos:	dc.w $FFF8, $FFF8
0001A5AC 0010 0000                  		dc.w $10, 0
0001A5B0 0000 0010                  		dc.w 0,	$10
0001A5B4 0010 0010                  		dc.w $10, $10
0001A5B8                            ; ---------------------------------------------------------------------------
0001A5B8                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001A5B8                            ; ---------------------------------------------------------------------------
0001A5B8                            Map_obj83:
0001A5B8                            	include "_maps\obj83.asm"
0001A5B8                            ; ---------------------------------------------------------------------------
0001A5B8                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001A5B8                            ; ---------------------------------------------------------------------------
0001A5B8 0000 0000                  		dc.w byte_19D1C-Map_obj83, byte_19D22-Map_obj83
0001A5BC 0000 0000                  		dc.w byte_19D2E-Map_obj83, byte_19D3A-Map_obj83
0001A5C0 0000                       		dc.w byte_19D46-Map_obj83
0001A5C2 01                         byte_19D1C:	dc.b 1
0001A5C3 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001A5C8 02                         byte_19D22:	dc.b 2
0001A5C9 F801 0000 F8               		dc.b $F8, 1, 0,	0, $F8
0001A5CE F801 0004 00               		dc.b $F8, 1, 0,	4, 0
0001A5D3 00                         		dc.b 0
0001A5D4 02                         byte_19D2E:	dc.b 2
0001A5D5 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
0001A5DA F801 000C 00               		dc.b $F8, 1, 0,	$C, 0
0001A5DF 00                         		dc.b 0
0001A5E0 02                         byte_19D3A:	dc.b 2
0001A5E1 F801 0002 F8               		dc.b $F8, 1, 0,	2, $F8
0001A5E6 F801 0006 00               		dc.b $F8, 1, 0,	6, 0
0001A5EB 00                         		dc.b 0
0001A5EC 02                         byte_19D46:	dc.b 2
0001A5ED F801 000A F8               		dc.b $F8, 1, 0,	$A, $F8
0001A5F2 F801 000E 00               		dc.b $F8, 1, 0,	$E, 0
0001A5F8 00                         		even
0001A5F8 00                         		even
0001A5F8                            
0001A5F8                            ; ===========================================================================
0001A5F8                            ; ---------------------------------------------------------------------------
0001A5F8                            ; Object 85 - Eggman (FZ)
0001A5F8                            ; ---------------------------------------------------------------------------
0001A5F8                            
0001A5F8                            Obj85_Delete:
0001A5F8 4EF9 0000 DDFE             		jmp	DeleteObject
0001A5FE                            ; ===========================================================================
0001A5FE                            
0001A5FE                            Obj85:					; XREF: Obj_Index
0001A5FE 7000                       		moveq	#0,d0
0001A600 1028 0024                  		move.b	$24(a0),d0
0001A604 303B 0000                  		move.w	Obj85_Index(pc,d0.w),d0
0001A608 4EFB 0000                  		jmp	Obj85_Index(pc,d0.w)
0001A60C                            ; ===========================================================================
0001A60C 0000                       Obj85_Index:	dc.w Obj85_Main-Obj85_Index
0001A60E 0000                       		dc.w Obj85_Eggman-Obj85_Index
0001A610 0000                       		dc.w loc_1A38E-Obj85_Index
0001A612 0000                       		dc.w loc_1A346-Obj85_Index
0001A614 0000                       		dc.w loc_1A2C6-Obj85_Index
0001A616 0000                       		dc.w loc_1A3AC-Obj85_Index
0001A618 0000                       		dc.w loc_1A264-Obj85_Index
0001A61A                            
0001A61A 0100 0100 0470             Obj85_ObjData:	dc.w $100, $100, $470	; X pos, Y pos,	VRAM setting
0001A620 0001 A2F0                  		dc.l Map_obj82		; mappings pointer
0001A624 25B0 0590 0300             		dc.w $25B0, $590, $300
0001A62A 0000 0000                  		dc.l Map_obj84
0001A62E 26E0 0596 03A0             		dc.w $26E0, $596, $3A0
0001A634 0000 0000                  		dc.l Map_FZBoss
0001A638 26E0 0596 0470             		dc.w $26E0, $596, $470
0001A63E 0001 A2F0                  		dc.l Map_obj82
0001A642 26E0 0596 0400             		dc.w $26E0, $596, $400
0001A648 0001 8632                  		dc.l Map_Eggman
0001A64C 26E0 0596 0400             		dc.w $26E0, $596, $400
0001A652 0001 8632                  		dc.l Map_Eggman
0001A656                            
0001A656 0200 0420 19               Obj85_ObjData2:	dc.b 2,	0, 4, $20, $19	; routine num, animation, sprite priority, width, height
0001A65B 0400 0112 08               		dc.b 4,	0, 1, $12, 8
0001A660 0600 0300 00               		dc.b 6,	0, 3, 0, 0
0001A665 0800 0300 00               		dc.b 8,	0, 3, 0, 0
0001A66A 0A00 0320 20               		dc.b $A, 0, 3, $20, $20
0001A66F 0C00 0300 00               		dc.b $C, 0, 3, 0, 0
0001A674                            ; ===========================================================================
0001A674                            
0001A674                            Obj85_Main:				; XREF: Obj85_Index
0001A674 45FA FFA4                  		lea	Obj85_ObjData(pc),a2
0001A678 47FA FFDC                  		lea	Obj85_ObjData2(pc),a3
0001A67C 2248                       		movea.l	a0,a1
0001A67E 7205                       		moveq	#5,d1
0001A680 6000                       		bra.s	Obj85_LoadBoss
0001A682                            ; ===========================================================================
0001A682                            
0001A682                            Obj85_Loop:
0001A682 4EB9 0000 E25E             		jsr	SingleObjLoad2
0001A688 6600                       		bne.s	loc_19E20
0001A68A                            
0001A68A                            Obj85_LoadBoss:				; XREF: Obj85_Main
0001A68A 12BC 0085                  		move.b	#$85,(a1)
0001A68E 335A 0008                  		move.w	(a2)+,8(a1)
0001A692 335A 000C                  		move.w	(a2)+,$C(a1)
0001A696 335A 0002                  		move.w	(a2)+,2(a1)
0001A69A 235A 0004                  		move.l	(a2)+,4(a1)
0001A69E 135B 0024                  		move.b	(a3)+,$24(a1)
0001A6A2 135B 001C                  		move.b	(a3)+,$1C(a1)
0001A6A6 135B 0018                  		move.b	(a3)+,$18(a1)
0001A6AA 135B 0017                  		move.b	(a3)+,$17(a1)
0001A6AE 135B 0016                  		move.b	(a3)+,$16(a1)
0001A6B2 137C 0004 0001             		move.b	#4,1(a1)
0001A6B8 08E8 0007 0001             		bset	#7,1(a0)
0001A6BE 2348 0034                  		move.l	a0,$34(a1)
0001A6C2 51C9 FFBE                  		dbf	d1,Obj85_Loop
0001A6C6                            
0001A6C6                            loc_19E20:
0001A6C6 45E8 0036                  		lea	$36(a0),a2
0001A6CA 4EB9 0000 E248             		jsr	SingleObjLoad
0001A6D0 6600                       		bne.s	loc_19E5A
0001A6D2 12BC 0086                  		move.b	#$86,(a1)	; load energy ball object
0001A6D6 3489                       		move.w	a1,(a2)
0001A6D8 2348 0034                  		move.l	a0,$34(a1)
0001A6DC 45E8 0038                  		lea	$38(a0),a2
0001A6E0 7400                       		moveq	#0,d2
0001A6E2 7203                       		moveq	#3,d1
0001A6E4                            
0001A6E4                            loc_19E3E:
0001A6E4 4EB9 0000 E25E             		jsr	SingleObjLoad2
0001A6EA 6600                       		bne.s	loc_19E5A
0001A6EC 34C9                       		move.w	a1,(a2)+
0001A6EE 12BC 0084                  		move.b	#$84,(a1)	; load crushing	cylinder object
0001A6F2 2348 0034                  		move.l	a0,$34(a1)
0001A6F6 1342 0028                  		move.b	d2,$28(a1)
0001A6FA 5442                       		addq.w	#2,d2
0001A6FC 51C9 FFE6                  		dbf	d1,loc_19E3E
0001A700                            
0001A700                            loc_19E5A:
0001A700 317C 0000 0034             		move.w	#0,$34(a0)
0001A706 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001A70C 317C FFFF 0030             		move.w	#-1,$30(a0)
0001A712                            
0001A712                            Obj85_Eggman:				; XREF: Obj85_Index
0001A712 7000                       		moveq	#0,d0
0001A714 1028 0034                  		move.b	$34(a0),d0
0001A718 303B 0000                  		move.w	off_19E80(pc,d0.w),d0
0001A71C 4EBB 0000                  		jsr	off_19E80(pc,d0.w)
0001A720 4EF9 0000 DDC2             		jmp	DisplaySprite
0001A726                            ; ===========================================================================
0001A726 0000 0000                  off_19E80:	dc.w loc_19E90-off_19E80, loc_19EA8-off_19E80
0001A72A 0000 0000                  		dc.w loc_19FE6-off_19E80, loc_1A02A-off_19E80
0001A72E 0000 0000                  		dc.w loc_1A074-off_19E80, loc_1A112-off_19E80
0001A732 0000 0000                  		dc.w loc_1A192-off_19E80, loc_1A1D4-off_19E80
0001A736                            ; ===========================================================================
0001A736                            
0001A736                            loc_19E90:				; XREF: off_19E80
0001A736 4AB8 F680                  		tst.l	($FFFFF680).w
0001A73A 6600                       		bne.s	loc_19EA2
0001A73C 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
0001A742 6500                       		bcs.s	loc_19EA2
0001A744 5428 0034                  		addq.b	#2,$34(a0)
0001A748                            
0001A748                            loc_19EA2:
0001A748 52B8 F636                  		addq.l	#1,($FFFFF636).w
0001A74C 4E75                       		rts	
0001A74E                            ; ===========================================================================
0001A74E                            
0001A74E                            loc_19EA8:				; XREF: off_19E80
0001A74E 4A68 0030                  		tst.w	$30(a0)
0001A752 6A00                       		bpl.s	loc_19F10
0001A754 4268 0030                  		clr.w	$30(a0)
0001A758 4EB9 0000 2C9E             		jsr	(RandomNumber).l
0001A75E 0240 000C                  		andi.w	#$C,d0
0001A762 3200                       		move.w	d0,d1
0001A764 5441                       		addq.w	#2,d1
0001A766 4A80                       		tst.l	d0
0001A768 6A00                       		bpl.s	loc_19EC6
0001A76A C141                       		exg	d1,d0
0001A76C                            
0001A76C                            loc_19EC6:
0001A76C 43FA 0000                  		lea	word_19FD6(pc),a1
0001A770 3031 0000                  		move.w	(a1,d0.w),d0
0001A774 3231 1000                  		move.w	(a1,d1.w),d1
0001A778 3140 0030                  		move.w	d0,$30(a0)
0001A77C 74FF                       		moveq	#-1,d2
0001A77E 3430 0038                  		move.w	$38(a0,d0.w),d2
0001A782 2242                       		movea.l	d2,a1
0001A784 137C 00FF 0029             		move.b	#-1,$29(a1)
0001A78A 337C FFFF 0030             		move.w	#-1,$30(a1)
0001A790 3430 1038                  		move.w	$38(a0,d1.w),d2
0001A794 2242                       		movea.l	d2,a1
0001A796 137C 0001 0029             		move.b	#1,$29(a1)
0001A79C 337C 0000 0030             		move.w	#0,$30(a1)
0001A7A2 317C 0001 0032             		move.w	#1,$32(a0)
0001A7A8 4228 0035                  		clr.b	$35(a0)
0001A7AC 303C 00B7                  		move.w	#$B7,d0
0001A7B0 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play rumbling sound
0001A7B6                            
0001A7B6                            loc_19F10:
0001A7B6 4A68 0032                  		tst.w	$32(a0)
0001A7BA 6B00 0000                  		bmi.w	loc_19FA6
0001A7BE 08A8 0000 0022             		bclr	#0,$22(a0)
0001A7C4 3038 D008                  		move.w	($FFFFD008).w,d0
0001A7C8 9068 0008                  		sub.w	8(a0),d0
0001A7CC 6500                       		bcs.s	loc_19F2E
0001A7CE 08E8 0000 0022             		bset	#0,$22(a0)
0001A7D4                            
0001A7D4                            loc_19F2E:
0001A7D4 323C 002B                  		move.w	#$2B,d1
0001A7D8 343C 0014                  		move.w	#$14,d2
0001A7DC 363C 0014                  		move.w	#$14,d3
0001A7E0 3828 0008                  		move.w	8(a0),d4
0001A7E4 4EB9 0001 0192             		jsr	SolidObject
0001A7EA 4A44                       		tst.w	d4
0001A7EC 6E00                       		bgt.s	loc_19F50
0001A7EE                            
0001A7EE                            loc_19F48:
0001A7EE 4A28 0035                  		tst.b	$35(a0)
0001A7F2 6600                       		bne.s	loc_19F88
0001A7F4 6000                       		bra.s	loc_19F96
0001A7F6                            ; ===========================================================================
0001A7F6                            
0001A7F6                            loc_19F50:
0001A7F6 5E78 F636                  		addq.w	#7,($FFFFF636).w
0001A7FA 0C38 0002 D01C             		cmpi.b	#2,($FFFFD01C).w
0001A800 66EC                       		bne.s	loc_19F48
0001A802 303C 0300                  		move.w	#$300,d0
0001A806 0828 0000 0022             		btst	#0,$22(a0)
0001A80C 6600                       		bne.s	loc_19F6A
0001A80E 4440                       		neg.w	d0
0001A810                            
0001A810                            loc_19F6A:
0001A810 31C0 D010                  		move.w	d0,($FFFFD010).w
0001A814 4A28 0035                  		tst.b	$35(a0)
0001A818 6600                       		bne.s	loc_19F88
0001A81A 5328 0021                  		subq.b	#1,$21(a0)
0001A81E 117C 0064 0035             		move.b	#$64,$35(a0)
0001A824 303C 00AC                  		move.w	#$AC,d0
0001A828 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001A82E                            
0001A82E                            loc_19F88:
0001A82E 5328 0035                  		subq.b	#1,$35(a0)
0001A832 6700                       		beq.s	loc_19F96
0001A834 117C 0003 001C             		move.b	#3,$1C(a0)
0001A83A 6000                       		bra.s	loc_19F9C
0001A83C                            ; ===========================================================================
0001A83C                            
0001A83C                            loc_19F96:
0001A83C 117C 0001 001C             		move.b	#1,$1C(a0)
0001A842                            
0001A842                            loc_19F9C:
0001A842 43FA FA7A                  		lea	Ani_obj82(pc),a1
0001A846 4EF9 0000 AE82             		jmp	AnimateSprite
0001A84C                            ; ===========================================================================
0001A84C                            
0001A84C                            loc_19FA6:
0001A84C 4A28 0021                  		tst.b	$21(a0)
0001A850 6700                       		beq.s	loc_19FBC
0001A852 5428 0034                  		addq.b	#2,$34(a0)
0001A856 317C FFFF 0030             		move.w	#-1,$30(a0)
0001A85C 4268 0032                  		clr.w	$32(a0)
0001A860 4E75                       		rts	
0001A862                            ; ===========================================================================
0001A862                            
0001A862                            loc_19FBC:
0001A862 117C 0006 0034             		move.b	#6,$34(a0)
0001A868 317C 25C0 0008             		move.w	#$25C0,8(a0)
0001A86E 317C 053C 000C             		move.w	#$53C,$C(a0)
0001A874 117C 0014 0016             		move.b	#$14,$16(a0)
0001A87A 4E75                       		rts	
0001A87C                            ; ===========================================================================
0001A87C 0000 0002 0002 0004 0004+  word_19FD6:	dc.w 0,	2, 2, 4, 4, 6, 6, 0
0001A88C                            ; ===========================================================================
0001A88C                            
0001A88C                            loc_19FE6:				; XREF: off_19E80
0001A88C 70FF                       		moveq	#-1,d0
0001A88E 3028 0036                  		move.w	$36(a0),d0
0001A892 2240                       		movea.l	d0,a1
0001A894 4A68 0030                  		tst.w	$30(a0)
0001A898 6A00                       		bpl.s	loc_1A000
0001A89A 4268 0030                  		clr.w	$30(a0)
0001A89E 137C 00FF 0029             		move.b	#-1,$29(a1)
0001A8A4 6100                       		bsr.s	loc_1A020
0001A8A6                            
0001A8A6                            loc_1A000:
0001A8A6 700F                       		moveq	#$F,d0
0001A8A8 C078 FE0E                  		and.w	($FFFFFE0E).w,d0
0001A8AC 6600                       		bne.s	loc_1A00A
0001A8AE 6100                       		bsr.s	loc_1A020
0001A8B0                            
0001A8B0                            loc_1A00A:
0001A8B0 4A68 0032                  		tst.w	$32(a0)
0001A8B4 6700                       		beq.s	locret_1A01E
0001A8B6 5528 0034                  		subq.b	#2,$34(a0)
0001A8BA 317C FFFF 0030             		move.w	#-1,$30(a0)
0001A8C0 4268 0032                  		clr.w	$32(a0)
0001A8C4                            
0001A8C4                            locret_1A01E:
0001A8C4 4E75                       		rts	
0001A8C6                            ; ===========================================================================
0001A8C6                            
0001A8C6                            loc_1A020:
0001A8C6 303C 00B1                  		move.w	#$B1,d0
0001A8CA 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play electricity sound
0001A8D0                            ; ===========================================================================
0001A8D0                            
0001A8D0                            loc_1A02A:				; XREF: off_19E80
0001A8D0 117C 0030 0017             		move.b	#$30,$17(a0)
0001A8D6 08E8 0000 0022             		bset	#0,$22(a0)
0001A8DC 4EB9 0000 DD9C             		jsr	SpeedToPos
0001A8E2 117C 0006 001A             		move.b	#6,$1A(a0)
0001A8E8 0668 0010 0012             		addi.w	#$10,$12(a0)
0001A8EE 0C68 059C 000C             		cmpi.w	#$59C,$C(a0)
0001A8F4 6500                       		bcs.s	loc_1A070
0001A8F6 317C 059C 000C             		move.w	#$59C,$C(a0)
0001A8FC 5428 0034                  		addq.b	#2,$34(a0)
0001A900 117C 0020 0017             		move.b	#$20,$17(a0)
0001A906 317C 0100 0010             		move.w	#$100,$10(a0)
0001A90C 317C FF00 0012             		move.w	#-$100,$12(a0)
0001A912 5438 F742                  		addq.b	#2,($FFFFF742).w
0001A916                            
0001A916                            loc_1A070:
0001A916 6000 0000                  		bra.w	loc_1A166
0001A91A                            ; ===========================================================================
0001A91A                            
0001A91A                            loc_1A074:				; XREF: off_19E80
0001A91A 08E8 0000 0022             		bset	#0,$22(a0)
0001A920 117C 0004 001C             		move.b	#4,$1C(a0)
0001A926 4EB9 0000 DD9C             		jsr	SpeedToPos
0001A92C 0668 0010 0012             		addi.w	#$10,$12(a0)
0001A932 0C68 05A3 000C             		cmpi.w	#$5A3,$C(a0)
0001A938 6500                       		bcs.s	loc_1A09A
0001A93A 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001A940                            
0001A940                            loc_1A09A:
0001A940 317C 0400 0010             		move.w	#$400,$10(a0)
0001A946 3028 0008                  		move.w	8(a0),d0
0001A94A 9078 D008                  		sub.w	($FFFFD008).w,d0
0001A94E 6A00                       		bpl.s	loc_1A0B4
0001A950 317C 0500 0010             		move.w	#$500,$10(a0)
0001A956 6000 0000                  		bra.w	loc_1A0F2
0001A95A                            ; ===========================================================================
0001A95A                            
0001A95A                            loc_1A0B4:
0001A95A 0440 0070                  		subi.w	#$70,d0
0001A95E 6500                       		bcs.s	loc_1A0F2
0001A960 0468 0100 0010             		subi.w	#$100,$10(a0)
0001A966 5140                       		subq.w	#8,d0
0001A968 6500                       		bcs.s	loc_1A0F2
0001A96A 0468 0100 0010             		subi.w	#$100,$10(a0)
0001A970 5140                       		subq.w	#8,d0
0001A972 6500                       		bcs.s	loc_1A0F2
0001A974 0468 0080 0010             		subi.w	#$80,$10(a0)
0001A97A 5140                       		subq.w	#8,d0
0001A97C 6500                       		bcs.s	loc_1A0F2
0001A97E 0468 0080 0010             		subi.w	#$80,$10(a0)
0001A984 5140                       		subq.w	#8,d0
0001A986 6500                       		bcs.s	loc_1A0F2
0001A988 0468 0080 0010             		subi.w	#$80,$10(a0)
0001A98E 0440 0038                  		subi.w	#$38,d0
0001A992 6500                       		bcs.s	loc_1A0F2
0001A994 4268 0010                  		clr.w	$10(a0)
0001A998                            
0001A998                            loc_1A0F2:
0001A998 0C68 26A0 0008             		cmpi.w	#$26A0,8(a0)
0001A99E 6500                       		bcs.s	loc_1A110
0001A9A0 317C 26A0 0008             		move.w	#$26A0,8(a0)
0001A9A6 317C 0240 0010             		move.w	#$240,$10(a0)
0001A9AC 317C FB40 0012             		move.w	#-$4C0,$12(a0)
0001A9B2 5428 0034                  		addq.b	#2,$34(a0)
0001A9B6                            
0001A9B6                            loc_1A110:
0001A9B6 6000                       		bra.s	loc_1A15C
0001A9B8                            ; ===========================================================================
0001A9B8                            
0001A9B8                            loc_1A112:				; XREF: off_19E80
0001A9B8 4EB9 0000 DD9C             		jsr	SpeedToPos
0001A9BE 0C68 26E0 0008             		cmpi.w	#$26E0,8(a0)
0001A9C4 6500                       		bcs.s	loc_1A124
0001A9C6 4268 0010                  		clr.w	$10(a0)
0001A9CA                            
0001A9CA                            loc_1A124:
0001A9CA 0668 0034 0012             		addi.w	#$34,$12(a0)
0001A9D0 4A68 0012                  		tst.w	$12(a0)
0001A9D4 6B00                       		bmi.s	loc_1A142
0001A9D6 0C68 0592 000C             		cmpi.w	#$592,$C(a0)
0001A9DC 6500                       		bcs.s	loc_1A142
0001A9DE 317C 0592 000C             		move.w	#$592,$C(a0)
0001A9E4 4268 0012                  		clr.w	$12(a0)
0001A9E8                            
0001A9E8                            loc_1A142:
0001A9E8 3028 0010                  		move.w	$10(a0),d0
0001A9EC 8068 0012                  		or.w	$12(a0),d0
0001A9F0 6600                       		bne.s	loc_1A15C
0001A9F2 5428 0034                  		addq.b	#2,$34(a0)
0001A9F6 317C FE80 0012             		move.w	#-$180,$12(a0)
0001A9FC 117C 0001 0021             		move.b	#1,$21(a0)
0001AA02                            
0001AA02                            loc_1A15C:
0001AA02 43FA F8BA                  		lea	Ani_obj82(pc),a1
0001AA06 4EB9 0000 AE82             		jsr	AnimateSprite
0001AA0C                            
0001AA0C                            loc_1A166:
0001AA0C 0C78 2700 F72A             		cmpi.w	#$2700,($FFFFF72A).w
0001AA12 6C00                       		bge.s	loc_1A172
0001AA14 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001AA18                            
0001AA18                            loc_1A172:
0001AA18 0C28 000C 0034             		cmpi.b	#$C,$34(a0)
0001AA1E 6C00                       		bge.s	locret_1A190
0001AA20 323C 001B                  		move.w	#$1B,d1
0001AA24 343C 0070                  		move.w	#$70,d2
0001AA28 363C 0071                  		move.w	#$71,d3
0001AA2C 3828 0008                  		move.w	8(a0),d4
0001AA30 4EF9 0001 0192             		jmp	SolidObject
0001AA36                            ; ===========================================================================
0001AA36                            
0001AA36                            locret_1A190:
0001AA36 4E75                       		rts	
0001AA38                            ; ===========================================================================
0001AA38                            
0001AA38                            loc_1A192:				; XREF: off_19E80
0001AA38 217C 0001 8632 0004        		move.l	#Map_Eggman,4(a0)
0001AA40 317C 0400 0002             		move.w	#$400,2(a0)
0001AA46 117C 0000 001C             		move.b	#0,$1C(a0)
0001AA4C 08E8 0000 0022             		bset	#0,$22(a0)
0001AA52 4EB9 0000 DD9C             		jsr	SpeedToPos
0001AA58 0C68 0544 000C             		cmpi.w	#$544,$C(a0)
0001AA5E 6400                       		bcc.s	loc_1A1D0
0001AA60 317C 0180 0010             		move.w	#$180,$10(a0)
0001AA66 317C FFE8 0012             		move.w	#-$18,$12(a0)
0001AA6C 117C 000F 0020             		move.b	#$F,$20(a0)
0001AA72 5428 0034                  		addq.b	#2,$34(a0)
0001AA76                            
0001AA76                            loc_1A1D0:
0001AA76 6000 FF8A                  		bra.w	loc_1A15C
0001AA7A                            ; ===========================================================================
0001AA7A                            
0001AA7A                            loc_1A1D4:				; XREF: off_19E80
0001AA7A 08E8 0000 0022             		bset	#0,$22(a0)
0001AA80 4EB9 0000 DD9C             		jsr	SpeedToPos
0001AA86 4A68 0030                  		tst.w	$30(a0)
0001AA8A 6600                       		bne.s	loc_1A1FC
0001AA8C 4A28 0020                  		tst.b	$20(a0)
0001AA90 6600                       		bne.s	loc_1A216
0001AA92 317C 001E 0030             		move.w	#$1E,$30(a0)
0001AA98 303C 00AC                  		move.w	#$AC,d0
0001AA9C 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001AAA2                            
0001AAA2                            loc_1A1FC:
0001AAA2 5368 0030                  		subq.w	#1,$30(a0)
0001AAA6 6600                       		bne.s	loc_1A216
0001AAA8 4A28 0022                  		tst.b	$22(a0)
0001AAAC 6A00                       		bpl.s	loc_1A210
0001AAAE 317C 0060 0012             		move.w	#$60,$12(a0)
0001AAB4 6000                       		bra.s	loc_1A216
0001AAB6                            ; ===========================================================================
0001AAB6                            
0001AAB6                            loc_1A210:
0001AAB6 117C 000F 0020             		move.b	#$F,$20(a0)
0001AABC                            
0001AABC                            loc_1A216:
0001AABC 0C78 2790 D008             		cmpi.w	#$2790,($FFFFD008).w
0001AAC2 6D00                       		blt.s	loc_1A23A
0001AAC4 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w
0001AACA 31FC 0000 F602             		move.w	#0,($FFFFF602).w
0001AAD0 4278 D014                  		clr.w	($FFFFD014).w
0001AAD4 4A68 0012                  		tst.w	$12(a0)
0001AAD8 6A00                       		bpl.s	loc_1A248
0001AADA 31FC 0100 F602             		move.w	#$100,($FFFFF602).w
0001AAE0                            
0001AAE0                            loc_1A23A:
0001AAE0 0C78 27E0 D008             		cmpi.w	#$27E0,($FFFFD008).w
0001AAE6 6D00                       		blt.s	loc_1A248
0001AAE8 31FC 27E0 D008             		move.w	#$27E0,($FFFFD008).w
0001AAEE                            
0001AAEE                            loc_1A248:
0001AAEE 0C68 2900 0008             		cmpi.w	#$2900,8(a0)
0001AAF4 6500                       		bcs.s	loc_1A260
0001AAF6 4A28 0001                  		tst.b	1(a0)
0001AAFA 6B00                       		bmi.s	loc_1A260
0001AAFC 11FC 0018 F600             		move.b	#$18,($FFFFF600).w
0001AB02 6000 FAF4                  		bra.w	Obj85_Delete
0001AB06                            ; ===========================================================================
0001AB06                            
0001AB06                            loc_1A260:
0001AB06 6000 FEFA                  		bra.w	loc_1A15C
0001AB0A                            ; ===========================================================================
0001AB0A                            
0001AB0A                            loc_1A264:				; XREF: Obj85_Index
0001AB0A 2268 0034                  		movea.l	$34(a0),a1
0001AB0E 1011                       		move.b	(a1),d0
0001AB10 B010                       		cmp.b	(a0),d0
0001AB12 6600 FAE4                  		bne.w	Obj85_Delete
0001AB16 117C 0007 001C             		move.b	#7,$1C(a0)
0001AB1C 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001AB22 6C00                       		bge.s	loc_1A280
0001AB24 6000                       		bra.s	loc_1A2A6
0001AB26                            ; ===========================================================================
0001AB26                            
0001AB26                            loc_1A280:
0001AB26 4A69 0010                  		tst.w	$10(a1)
0001AB2A 6700                       		beq.s	loc_1A28C
0001AB2C 117C 000B 001C             		move.b	#$B,$1C(a0)
0001AB32                            
0001AB32                            loc_1A28C:
0001AB32 43FA DA9A                  		lea	Ani_Eggman(pc),a1
0001AB36 4EB9 0000 AE82             		jsr	AnimateSprite
0001AB3C                            
0001AB3C                            loc_1A296:
0001AB3C 2268 0034                  		movea.l	$34(a0),a1
0001AB40 3169 0008 0008             		move.w	8(a1),8(a0)
0001AB46 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001AB4C                            
0001AB4C                            loc_1A2A6:
0001AB4C 2268 0034                  		movea.l	$34(a0),a1
0001AB50 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001AB56 7003                       		moveq	#3,d0
0001AB58 C028 0022                  		and.b	$22(a0),d0
0001AB5C 0228 00FC 0001             		andi.b	#-4,1(a0)
0001AB62 8128 0001                  		or.b	d0,1(a0)
0001AB66 4EF9 0000 DDC2             		jmp	DisplaySprite
0001AB6C                            ; ===========================================================================
0001AB6C                            
0001AB6C                            loc_1A2C6:				; XREF: Obj85_Index
0001AB6C 2268 0034                  		movea.l	$34(a0),a1
0001AB70 1011                       		move.b	(a1),d0
0001AB72 B010                       		cmp.b	(a0),d0
0001AB74 6600 FA82                  		bne.w	Obj85_Delete
0001AB78 0CA9 0001 8632 0004        		cmpi.l	#Map_Eggman,4(a1)
0001AB80 6700                       		beq.s	loc_1A2E4
0001AB82 117C 000A 001A             		move.b	#$A,$1A(a0)
0001AB88 60C2                       		bra.s	loc_1A2A6
0001AB8A                            ; ===========================================================================
0001AB8A                            
0001AB8A                            loc_1A2E4:
0001AB8A 117C 0001 001C             		move.b	#1,$1C(a0)
0001AB90 4A29 0021                  		tst.b	$21(a1)
0001AB94 6F00                       		ble.s	loc_1A312
0001AB96 117C 0006 001C             		move.b	#6,$1C(a0)
0001AB9C 217C 0001 8632 0004        		move.l	#Map_Eggman,4(a0)
0001ABA4 317C 0400 0002             		move.w	#$400,2(a0)
0001ABAA 43FA DA22                  		lea	Ani_Eggman(pc),a1
0001ABAE 4EB9 0000 AE82             		jsr	AnimateSprite
0001ABB4 6000 FF86                  		bra.w	loc_1A296
0001ABB8                            ; ===========================================================================
0001ABB8                            
0001ABB8                            loc_1A312:
0001ABB8 4A28 0001                  		tst.b	1(a0)
0001ABBC 6A00 FA3A                  		bpl.w	Obj85_Delete
0001ABC0 6100 D588                  		bsr.w	BossDefeated
0001ABC4 117C 0002 0018             		move.b	#2,$18(a0)
0001ABCA 117C 0000 001C             		move.b	#0,$1C(a0)
0001ABD0 217C 0000 0000 0004        		move.l	#Map_Eggman2,4(a0)
0001ABD8 317C 03A0 0002             		move.w	#$3A0,2(a0)
0001ABDE 43FA 0000                  		lea	Ani_obj85(pc),a1
0001ABE2 4EB9 0000 AE82             		jsr	AnimateSprite
0001ABE8 6000 FF52                  		bra.w	loc_1A296
0001ABEC                            ; ===========================================================================
0001ABEC                            
0001ABEC                            loc_1A346:				; XREF: Obj85_Index
0001ABEC 08E8 0000 0022             		bset	#0,$22(a0)
0001ABF2 2268 0034                  		movea.l	$34(a0),a1
0001ABF6 0CA9 0001 8632 0004        		cmpi.l	#Map_Eggman,4(a1)
0001ABFE 6700                       		beq.s	loc_1A35E
0001AC00 6000 FF4A                  		bra.w	loc_1A2A6
0001AC04                            ; ===========================================================================
0001AC04                            
0001AC04                            loc_1A35E:
0001AC04 3169 0008 0008             		move.w	8(a1),8(a0)
0001AC0A 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001AC10 4A28 001E                  		tst.b	$1E(a0)
0001AC14 6600                       		bne.s	loc_1A376
0001AC16 117C 0014 001E             		move.b	#$14,$1E(a0)
0001AC1C                            
0001AC1C                            loc_1A376:
0001AC1C 5328 001E                  		subq.b	#1,$1E(a0)
0001AC20 6E00                       		bgt.s	loc_1A38A
0001AC22 5228 001A                  		addq.b	#1,$1A(a0)
0001AC26 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0001AC2C 6E00 F9CA                  		bgt.w	Obj85_Delete
0001AC30                            
0001AC30                            loc_1A38A:
0001AC30 6000 FF0A                  		bra.w	loc_1A296
0001AC34                            ; ===========================================================================
0001AC34                            
0001AC34                            loc_1A38E:				; XREF: Obj85_Index
0001AC34 117C 000B 001A             		move.b	#$B,$1A(a0)
0001AC3A 3038 D008                  		move.w	($FFFFD008).w,d0
0001AC3E 9068 0008                  		sub.w	8(a0),d0
0001AC42 6500                       		bcs.s	loc_1A3A6
0001AC44 4A28 0001                  		tst.b	1(a0)
0001AC48 6A00 F9AE                  		bpl.w	Obj85_Delete
0001AC4C                            
0001AC4C                            loc_1A3A6:
0001AC4C 4EF9 0000 DDC2             		jmp	DisplaySprite
0001AC52                            ; ===========================================================================
0001AC52                            
0001AC52                            loc_1A3AC:				; XREF: Obj85_Index
0001AC52 117C 0000 001A             		move.b	#0,$1A(a0)
0001AC58 08E8 0000 0022             		bset	#0,$22(a0)
0001AC5E 2268 0034                  		movea.l	$34(a0),a1
0001AC62 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001AC68 6600                       		bne.s	loc_1A3D0
0001AC6A 0CA9 0001 8632 0004        		cmpi.l	#Map_Eggman,4(a1)
0001AC72 6700 F984                  		beq.w	Obj85_Delete
0001AC76                            
0001AC76                            loc_1A3D0:
0001AC76 6000 FED4                  		bra.w	loc_1A2A6
0001AC7A                            ; ===========================================================================
0001AC7A                            Ani_obj85:
0001AC7A                            	include "_anim\obj85.asm"
0001AC7A                            ; ---------------------------------------------------------------------------
0001AC7A                            ; Animation script - Eggman (FZ)
0001AC7A                            ; ---------------------------------------------------------------------------
0001AC7A 0000                       		dc.w byte_1A3D6-Ani_obj85
0001AC7C 0300 01FF                  byte_1A3D6:	dc.b 3,	0, 1, $FF
0001AC80                            		even
0001AC80                            		even
0001AC80                            
0001AC80                            Map_Eggman2:
0001AC80                            	include "_maps\Eggman2.asm"
0001AC80                            ; ---------------------------------------------------------------------------
0001AC80                            ; Sprite mappings - Eggman (FZ)
0001AC80                            ; ---------------------------------------------------------------------------
0001AC80 0000                       		dc.w byte_1A3DE-Map_Eggman2
0001AC82 0000                       		dc.w byte_1A3FD-Map_Eggman2
0001AC84 06                         byte_1A3DE:	dc.b 6
0001AC85 E408 0020 F4               		dc.b $E4, 8, 0,	$20, $F4
0001AC8A EC0D 0023 E4               		dc.b $EC, $D, 0, $23, $E4
0001AC8F EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001AC94 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001AC99 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001AC9E 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001ACA3 06                         byte_1A3FD:	dc.b 6
0001ACA4 E40A 0031 F4               		dc.b $E4, $A, 0, $31, $F4
0001ACA9 EC05 0023 E4               		dc.b $EC, 5, 0,	$23, $E4
0001ACAE EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001ACB3 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001ACB8 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001ACBD 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001ACC2                            		even
0001ACC2                            		even
0001ACC2                            
0001ACC2                            Map_FZBoss:
0001ACC2                            	include "_maps\FZ boss.asm"
0001ACC2                            ; ---------------------------------------------------------------------------
0001ACC2                            ; Sprite mappings - boss (FZ)
0001ACC2                            ; ---------------------------------------------------------------------------
0001ACC2 0000                       		dc.w byte_1A422-Map_FZBoss
0001ACC4 0000                       		dc.w byte_1A42D-Map_FZBoss
0001ACC6 0000                       		dc.w byte_1A43D-Map_FZBoss
0001ACC8 02                         byte_1A422:	dc.b 2
0001ACC9 140E 2800 F4               		dc.b $14, $E, $28, 0, $F4
0001ACCE 2400 280C EC               		dc.b $24, 0, $28, $C, $EC
0001ACD3 03                         byte_1A42D:	dc.b 3
0001ACD4 0C05 280D 0C               		dc.b $C, 5, $28, $D, $C
0001ACD9 1C00 2811 0C               		dc.b $1C, 0, $28, $11, $C
0001ACDE 140D 2812 EC               		dc.b $14, $D, $28, $12,	$EC
0001ACE3 02                         byte_1A43D:	dc.b 2
0001ACE4 0C01 281A 0C               		dc.b $C, 1, $28, $1A, $C
0001ACE9 140C 281C EC               		dc.b $14, $C, $28, $1C,	$EC
0001ACEE                            		even
0001ACEE                            		even
0001ACEE                            
0001ACEE                            ; ===========================================================================
0001ACEE                            
0001ACEE                            Obj84_Delete:
0001ACEE 4EF9 0000 DDFE             		jmp	DeleteObject
0001ACF4                            ; ===========================================================================
0001ACF4                            ; ---------------------------------------------------------------------------
0001ACF4                            ; Object 84 - cylinder Eggman	hides in (FZ)
0001ACF4                            ; ---------------------------------------------------------------------------
0001ACF4                            
0001ACF4                            Obj84:					; XREF: Obj_Index
0001ACF4 7000                       		moveq	#0,d0
0001ACF6 1028 0024                  		move.b	$24(a0),d0
0001ACFA 303B 0000                  		move.w	Obj84_Index(pc,d0.w),d0
0001ACFE 4EFB 0000                  		jmp	Obj84_Index(pc,d0.w)
0001AD02                            ; ===========================================================================
0001AD02 0000                       Obj84_Index:	dc.w Obj84_Main-Obj84_Index
0001AD04 0000                       		dc.w loc_1A4CE-Obj84_Index
0001AD06 0000                       		dc.w loc_1A57E-Obj84_Index
0001AD08                            
0001AD08 24D0 0620                  Obj84_PosData:	dc.w $24D0, $620
0001AD0C 2550 0620                  		dc.w $2550, $620
0001AD10 2490 04C0                  		dc.w $2490, $4C0
0001AD14 2510 04C0                  		dc.w $2510, $4C0
0001AD18                            ; ===========================================================================
0001AD18                            
0001AD18                            Obj84_Main:				; XREF: Obj84_Index
0001AD18 43FA FFEE                  		lea	Obj84_PosData(pc),a1
0001AD1C 7000                       		moveq	#0,d0
0001AD1E 1028 0028                  		move.b	$28(a0),d0
0001AD22 D040                       		add.w	d0,d0
0001AD24 D2C0                       		adda.w	d0,a1
0001AD26 117C 0004 0001             		move.b	#4,1(a0)
0001AD2C 08E8 0007 0001             		bset	#7,1(a0)
0001AD32 08E8 0004 0001             		bset	#4,1(a0)
0001AD38 317C 0300 0002             		move.w	#$300,2(a0)
0001AD3E 217C 0000 0000 0004        		move.l	#Map_obj84,4(a0)
0001AD46 3159 0008                  		move.w	(a1)+,8(a0)
0001AD4A 3151 000C                  		move.w	(a1),$C(a0)
0001AD4E 3159 0038                  		move.w	(a1)+,$38(a0)
0001AD52 117C 0020 0016             		move.b	#$20,$16(a0)
0001AD58 117C 0060 0017             		move.b	#$60,$17(a0)
0001AD5E 117C 0020 0019             		move.b	#$20,$19(a0)
0001AD64 117C 0060 0016             		move.b	#$60,$16(a0)
0001AD6A 117C 0003 0018             		move.b	#3,$18(a0)
0001AD70 5428 0024                  		addq.b	#2,$24(a0)
0001AD74                            
0001AD74                            loc_1A4CE:				; XREF: Obj84_Index
0001AD74 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001AD7A 6F00                       		ble.s	loc_1A4DC
0001AD7C 08E8 0001 0001             		bset	#1,1(a0)
0001AD82                            
0001AD82                            loc_1A4DC:
0001AD82 42A8 003C                  		clr.l	$3C(a0)
0001AD86 4A28 0029                  		tst.b	$29(a0)
0001AD8A 6700                       		beq.s	loc_1A4EA
0001AD8C 5428 0024                  		addq.b	#2,$24(a0)
0001AD90                            
0001AD90                            loc_1A4EA:
0001AD90 2028 003C                  		move.l	$3C(a0),d0
0001AD94 2228 0038                  		move.l	$38(a0),d1
0001AD98 D280                       		add.l	d0,d1
0001AD9A 4841                       		swap	d1
0001AD9C 3141 000C                  		move.w	d1,$C(a0)
0001ADA0 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0001ADA6 6600                       		bne.s	loc_1A524
0001ADA8 4A68 0030                  		tst.w	$30(a0)
0001ADAC 6A00                       		bpl.s	loc_1A524
0001ADAE 70F6                       		moveq	#-$A,d0
0001ADB0 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001ADB6 6F00                       		ble.s	loc_1A514
0001ADB8 700E                       		moveq	#$E,d0
0001ADBA                            
0001ADBA                            loc_1A514:
0001ADBA D240                       		add.w	d0,d1
0001ADBC 2268 0034                  		movea.l	$34(a0),a1
0001ADC0 3341 000C                  		move.w	d1,$C(a1)
0001ADC4 3368 0008 0008             		move.w	8(a0),8(a1)
0001ADCA                            
0001ADCA                            loc_1A524:
0001ADCA 323C 002B                  		move.w	#$2B,d1
0001ADCE 343C 0060                  		move.w	#$60,d2
0001ADD2 363C 0061                  		move.w	#$61,d3
0001ADD6 3828 0008                  		move.w	8(a0),d4
0001ADDA 4EB9 0001 0192             		jsr	SolidObject
0001ADE0 7000                       		moveq	#0,d0
0001ADE2 3228 003C                  		move.w	$3C(a0),d1
0001ADE6 6A00                       		bpl.s	loc_1A550
0001ADE8 4441                       		neg.w	d1
0001ADEA 5141                       		subq.w	#8,d1
0001ADEC 6500                       		bcs.s	loc_1A55C
0001ADEE 5200                       		addq.b	#1,d0
0001ADF0 E841                       		asr.w	#4,d1
0001ADF2 D041                       		add.w	d1,d0
0001ADF4 6000                       		bra.s	loc_1A55C
0001ADF6                            ; ===========================================================================
0001ADF6                            
0001ADF6                            loc_1A550:
0001ADF6 0441 0027                  		subi.w	#$27,d1
0001ADFA 6500                       		bcs.s	loc_1A55C
0001ADFC 5200                       		addq.b	#1,d0
0001ADFE E841                       		asr.w	#4,d1
0001AE00 D041                       		add.w	d1,d0
0001AE02                            
0001AE02                            loc_1A55C:
0001AE02 1140 001A                  		move.b	d0,$1A(a0)
0001AE06 3038 D008                  		move.w	($FFFFD008).w,d0
0001AE0A 9068 0008                  		sub.w	8(a0),d0
0001AE0E 6B00                       		bmi.s	loc_1A578
0001AE10 0440 0140                  		subi.w	#$140,d0
0001AE14 6B00                       		bmi.s	loc_1A578
0001AE16 4A28 0001                  		tst.b	1(a0)
0001AE1A 6A00 FED2                  		bpl.w	Obj84_Delete
0001AE1E                            
0001AE1E                            loc_1A578:
0001AE1E 4EF9 0000 DDC2             		jmp	DisplaySprite
0001AE24                            ; ===========================================================================
0001AE24                            
0001AE24                            loc_1A57E:				; XREF: Obj84_Index
0001AE24 7000                       		moveq	#0,d0
0001AE26 1028 0028                  		move.b	$28(a0),d0
0001AE2A 303B 0000                  		move.w	off_1A590(pc,d0.w),d0
0001AE2E 4EBB 0000                  		jsr	off_1A590(pc,d0.w)
0001AE32 6000 FF5C                  		bra.w	loc_1A4EA
0001AE36                            ; ===========================================================================
0001AE36 0000                       off_1A590:	dc.w loc_1A598-off_1A590
0001AE38 0000                       		dc.w loc_1A598-off_1A590
0001AE3A 0000                       		dc.w loc_1A604-off_1A590
0001AE3C 0000                       		dc.w loc_1A604-off_1A590
0001AE3E                            ; ===========================================================================
0001AE3E                            
0001AE3E                            loc_1A598:				; XREF: off_1A590
0001AE3E 4A28 0029                  		tst.b	$29(a0)
0001AE42 6600                       		bne.s	loc_1A5D4
0001AE44 2268 0034                  		movea.l	$34(a0),a1
0001AE48 4A29 0021                  		tst.b	$21(a1)
0001AE4C 6600                       		bne.s	loc_1A5B4
0001AE4E 6100 D2FA                  		bsr.w	BossDefeated
0001AE52 04A8 0001 0000 003C        		subi.l	#$10000,$3C(a0)
0001AE5A                            
0001AE5A                            loc_1A5B4:
0001AE5A 06A8 0002 0000 003C        		addi.l	#$20000,$3C(a0)
0001AE62 6400                       		bcc.s	locret_1A602
0001AE64 42A8 003C                  		clr.l	$3C(a0)
0001AE68 2268 0034                  		movea.l	$34(a0),a1
0001AE6C 5369 0032                  		subq.w	#1,$32(a1)
0001AE70 4269 0030                  		clr.w	$30(a1)
0001AE74 5528 0024                  		subq.b	#2,$24(a0)
0001AE78 4E75                       		rts	
0001AE7A                            ; ===========================================================================
0001AE7A                            
0001AE7A                            loc_1A5D4:
0001AE7A 0C68 FFF0 003C             		cmpi.w	#-$10,$3C(a0)
0001AE80 6C00                       		bge.s	loc_1A5E4
0001AE82 04A8 0002 8000 003C        		subi.l	#$28000,$3C(a0)
0001AE8A                            
0001AE8A                            loc_1A5E4:
0001AE8A 04A8 0000 8000 003C        		subi.l	#$8000,$3C(a0)
0001AE92 0C68 FF60 003C             		cmpi.w	#-$A0,$3C(a0)
0001AE98 6E00                       		bgt.s	locret_1A602
0001AE9A 4268 003E                  		clr.w	$3E(a0)
0001AE9E 317C FF60 003C             		move.w	#-$A0,$3C(a0)
0001AEA4 4228 0029                  		clr.b	$29(a0)
0001AEA8                            
0001AEA8                            locret_1A602:
0001AEA8 4E75                       		rts	
0001AEAA                            ; ===========================================================================
0001AEAA                            
0001AEAA                            loc_1A604:				; XREF: off_1A590
0001AEAA 08E8 0001 0001             		bset	#1,1(a0)
0001AEB0 4A28 0029                  		tst.b	$29(a0)
0001AEB4 6600                       		bne.s	loc_1A646
0001AEB6 2268 0034                  		movea.l	$34(a0),a1
0001AEBA 4A29 0021                  		tst.b	$21(a1)
0001AEBE 6600                       		bne.s	loc_1A626
0001AEC0 6100 D288                  		bsr.w	BossDefeated
0001AEC4 06A8 0001 0000 003C        		addi.l	#$10000,$3C(a0)
0001AECC                            
0001AECC                            loc_1A626:
0001AECC 04A8 0002 0000 003C        		subi.l	#$20000,$3C(a0)
0001AED4 6400                       		bcc.s	locret_1A674
0001AED6 42A8 003C                  		clr.l	$3C(a0)
0001AEDA 2268 0034                  		movea.l	$34(a0),a1
0001AEDE 5369 0032                  		subq.w	#1,$32(a1)
0001AEE2 4269 0030                  		clr.w	$30(a1)
0001AEE6 5528 0024                  		subq.b	#2,$24(a0)
0001AEEA 4E75                       		rts	
0001AEEC                            ; ===========================================================================
0001AEEC                            
0001AEEC                            loc_1A646:
0001AEEC 0C68 0010 003C             		cmpi.w	#$10,$3C(a0)
0001AEF2 6D00                       		blt.s	loc_1A656
0001AEF4 06A8 0002 8000 003C        		addi.l	#$28000,$3C(a0)
0001AEFC                            
0001AEFC                            loc_1A656:
0001AEFC 06A8 0000 8000 003C        		addi.l	#$8000,$3C(a0)
0001AF04 0C68 00A0 003C             		cmpi.w	#$A0,$3C(a0)
0001AF0A 6D00                       		blt.s	locret_1A674
0001AF0C 4268 003E                  		clr.w	$3E(a0)
0001AF10 317C 00A0 003C             		move.w	#$A0,$3C(a0)
0001AF16 4228 0029                  		clr.b	$29(a0)
0001AF1A                            
0001AF1A                            locret_1A674:
0001AF1A 4E75                       		rts	
0001AF1C                            ; ===========================================================================
0001AF1C                            ; ---------------------------------------------------------------------------
0001AF1C                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001AF1C                            ; ---------------------------------------------------------------------------
0001AF1C                            Map_obj84:
0001AF1C                            	include "_maps\obj84.asm"
0001AF1C                            ; ---------------------------------------------------------------------------
0001AF1C                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001AF1C                            ; ---------------------------------------------------------------------------
0001AF1C 0000 0000                  		dc.w byte_1A68E-Map_obj84, byte_1A6AD-Map_obj84
0001AF20 0000 0000                  		dc.w byte_1A6D6-Map_obj84, byte_1A709-Map_obj84
0001AF24 0000 0000                  		dc.w byte_1A746-Map_obj84, byte_1A788-Map_obj84
0001AF28 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001AF2C 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001AF30 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A7CF-Map_obj84
0001AF34 06                         byte_1A68E:	dc.b 6
0001AF35 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AF3A A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AF3F B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AF44 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AF49 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AF4E B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AF53 08                         byte_1A6AD:	dc.b 8
0001AF54 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AF59 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AF5E B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AF63 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AF68 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AF6D B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AF72 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001AF77 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001AF7C 0A                         byte_1A6D6:	dc.b $A
0001AF7D A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AF82 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AF87 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AF8C B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AF91 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AF96 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AF9B D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001AFA0 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001AFA5 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001AFAA F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001AFAF 0C                         byte_1A709:	dc.b $C
0001AFB0 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AFB5 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AFBA B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AFBF B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AFC4 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AFC9 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AFCE D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001AFD3 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001AFD8 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001AFDD F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001AFE2 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001AFE7 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001AFEC 0D                         byte_1A746:	dc.b $D
0001AFED A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AFF2 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AFF7 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AFFC B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B001 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B006 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B00B D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001B010 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001B015 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001B01A F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001B01F 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001B024 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001B029 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001B02E 0E                         byte_1A788:	dc.b $E
0001B02F A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B034 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B039 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B03E B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B043 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B048 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B04D D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001B052 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001B057 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001B05C F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001B061 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001B066 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001B06B 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001B070 580F 4050 F0               		dc.b $58, $F, $40, $50,	$F0
0001B075 02                         byte_1A7CF:	dc.b 2
0001B076 F804 0068 F0               		dc.b $F8, 4, 0,	$68, $F0
0001B07B 000C 006A F0               		dc.b 0,	$C, 0, $6A, $F0
0001B080                            		even
0001B080                            		even
0001B080                            
0001B080                            ; ===========================================================================
0001B080                            ; ---------------------------------------------------------------------------
0001B080                            ; Object 86 - energy balls (FZ)
0001B080                            ; ---------------------------------------------------------------------------
0001B080                            
0001B080                            Obj86:					; XREF: Obj_Index
0001B080 7000                       		moveq	#0,d0
0001B082 1028 0024                  		move.b	$24(a0),d0
0001B086 303B 0000                  		move.w	Obj86_Index(pc,d0.w),d0
0001B08A 4EFB 0000                  		jmp	Obj86_Index(pc,d0.w)
0001B08E                            ; ===========================================================================
0001B08E 0000                       Obj86_Index:	dc.w Obj86_Main-Obj86_Index
0001B090 0000                       		dc.w Obj86_Generator-Obj86_Index
0001B092 0000                       		dc.w Obj86_MakeBalls-Obj86_Index
0001B094 0000                       		dc.w loc_1A962-Obj86_Index
0001B096 0000                       		dc.w loc_1A982-Obj86_Index
0001B098                            ; ===========================================================================
0001B098                            
0001B098                            Obj86_Main:				; XREF: Obj86_Index
0001B098 317C 2588 0008             		move.w	#$2588,8(a0)
0001B09E 317C 053C 000C             		move.w	#$53C,$C(a0)
0001B0A4 317C 0300 0002             		move.w	#$300,2(a0)
0001B0AA 217C 0000 0000 0004        		move.l	#Map_obj86,4(a0)
0001B0B2 117C 0000 001C             		move.b	#0,$1C(a0)
0001B0B8 117C 0003 0018             		move.b	#3,$18(a0)
0001B0BE 117C 0008 0017             		move.b	#8,$17(a0)
0001B0C4 117C 0008 0016             		move.b	#8,$16(a0)
0001B0CA 117C 0004 0001             		move.b	#4,1(a0)
0001B0D0 08E8 0007 0001             		bset	#7,1(a0)
0001B0D6 5428 0024                  		addq.b	#2,$24(a0)
0001B0DA                            
0001B0DA                            Obj86_Generator:			; XREF: Obj86_Index
0001B0DA 2268 0034                  		movea.l	$34(a0),a1
0001B0DE 0C29 0006 0034             		cmpi.b	#6,$34(a1)
0001B0E4 6600                       		bne.s	loc_1A850
0001B0E6 10BC 003F                  		move.b	#$3F,(a0)
0001B0EA 117C 0000 0024             		move.b	#0,$24(a0)
0001B0F0 4EF9 0000 DDC2             		jmp	DisplaySprite
0001B0F6                            ; ===========================================================================
0001B0F6                            
0001B0F6                            loc_1A850:
0001B0F6 117C 0000 001C             		move.b	#0,$1C(a0)
0001B0FC 4A28 0029                  		tst.b	$29(a0)
0001B100 6700                       		beq.s	loc_1A86C
0001B102 5428 0024                  		addq.b	#2,$24(a0)
0001B106 117C 0001 001C             		move.b	#1,$1C(a0)
0001B10C 117C 003E 0028             		move.b	#$3E,$28(a0)
0001B112                            
0001B112                            loc_1A86C:
0001B112 323C 0013                  		move.w	#$13,d1
0001B116 343C 0008                  		move.w	#8,d2
0001B11A 363C 0011                  		move.w	#$11,d3
0001B11E 3828 0008                  		move.w	8(a0),d4
0001B122 4EB9 0001 0192             		jsr	SolidObject
0001B128 3038 D008                  		move.w	($FFFFD008).w,d0
0001B12C 9068 0008                  		sub.w	8(a0),d0
0001B130 6B00                       		bmi.s	loc_1A89A
0001B132 0440 0140                  		subi.w	#$140,d0
0001B136 6B00                       		bmi.s	loc_1A89A
0001B138 4A28 0001                  		tst.b	1(a0)
0001B13C 6A00 FBB0                  		bpl.w	Obj84_Delete
0001B140                            
0001B140                            loc_1A89A:
0001B140 43FA 0000                  		lea	Ani_obj86(pc),a1
0001B144 4EB9 0000 AE82             		jsr	AnimateSprite
0001B14A 4EF9 0000 DDC2             		jmp	DisplaySprite
0001B150                            ; ===========================================================================
0001B150                            
0001B150                            Obj86_MakeBalls:			; XREF: Obj86_Index
0001B150 4A28 0029                  		tst.b	$29(a0)
0001B154 6700 0000                  		beq.w	loc_1A954
0001B158 4228 0029                  		clr.b	$29(a0)
0001B15C D068 0030                  		add.w	$30(a0),d0
0001B160 0240 001E                  		andi.w	#$1E,d0
0001B164 D4C0                       		adda.w	d0,a2
0001B166 5868 0030                  		addq.w	#4,$30(a0)
0001B16A 4268 0032                  		clr.w	$32(a0)
0001B16E 7403                       		moveq	#3,d2
0001B170                            
0001B170                            Obj86_Loop:
0001B170 4EB9 0000 E25E             		jsr	SingleObjLoad2
0001B176 6600 0000                  		bne.w	loc_1A954
0001B17A 12BC 0086                  		move.b	#$86,(a1)
0001B17E 3368 0008 0008             		move.w	8(a0),8(a1)
0001B184 337C 053C 000C             		move.w	#$53C,$C(a1)
0001B18A 137C 0008 0024             		move.b	#8,$24(a1)
0001B190 337C 2300 0002             		move.w	#$2300,2(a1)
0001B196 237C 0000 0000 0004        		move.l	#Map_obj86a,4(a1)
0001B19E 137C 000C 0016             		move.b	#$C,$16(a1)
0001B1A4 137C 000C 0017             		move.b	#$C,$17(a1)
0001B1AA 137C 0000 0020             		move.b	#0,$20(a1)
0001B1B0 137C 0003 0018             		move.b	#3,$18(a1)
0001B1B6 337C 003E 0028             		move.w	#$3E,$28(a1)
0001B1BC 137C 0004 0001             		move.b	#4,1(a1)
0001B1C2 08E9 0007 0001             		bset	#7,1(a1)
0001B1C8 2348 0034                  		move.l	a0,$34(a1)
0001B1CC 4EB9 0000 2C9E             		jsr	(RandomNumber).l
0001B1D2 3228 0032                  		move.w	$32(a0),d1
0001B1D6 C3FC FFB1                  		muls.w	#-$4F,d1
0001B1DA 0641 2578                  		addi.w	#$2578,d1
0001B1DE 0240 001F                  		andi.w	#$1F,d0
0001B1E2 0440 0010                  		subi.w	#$10,d0
0001B1E6 D041                       		add.w	d1,d0
0001B1E8 3340 0030                  		move.w	d0,$30(a1)
0001B1EC 5268 0032                  		addq.w	#1,$32(a0)
0001B1F0 3168 0032 0038             		move.w	$32(a0),$38(a0)
0001B1F6 51CA FF78                  		dbf	d2,Obj86_Loop	; repeat sequence 3 more times
0001B1FA                            
0001B1FA                            loc_1A954:
0001B1FA 4A68 0032                  		tst.w	$32(a0)
0001B1FE 6600                       		bne.s	loc_1A95E
0001B200 5428 0024                  		addq.b	#2,$24(a0)
0001B204                            
0001B204                            loc_1A95E:
0001B204 6000 FF0C                  		bra.w	loc_1A86C
0001B208                            ; ===========================================================================
0001B208                            
0001B208                            loc_1A962:				; XREF: Obj86_Index
0001B208 117C 0002 001C             		move.b	#2,$1C(a0)
0001B20E 4A68 0038                  		tst.w	$38(a0)
0001B212 6600                       		bne.s	loc_1A97E
0001B214 117C 0002 0024             		move.b	#2,$24(a0)
0001B21A 2268 0034                  		movea.l	$34(a0),a1
0001B21E 337C FFFF 0032             		move.w	#-1,$32(a1)
0001B224                            
0001B224                            loc_1A97E:
0001B224 6000 FEEC                  		bra.w	loc_1A86C
0001B228                            ; ===========================================================================
0001B228                            
0001B228                            loc_1A982:				; XREF: Obj86_Index
0001B228 7000                       		moveq	#0,d0
0001B22A 1028 0025                  		move.b	$25(a0),d0
0001B22E 303B 0000                  		move.w	Obj86_Index2(pc,d0.w),d0
0001B232 4EBB 0000                  		jsr	Obj86_Index2(pc,d0.w)
0001B236 43FA 0000                  		lea	Ani_obj86a(pc),a1
0001B23A 4EB9 0000 AE82             		jsr	AnimateSprite
0001B240 4EF9 0000 DDC2             		jmp	DisplaySprite
0001B246                            ; ===========================================================================
0001B246 0000                       Obj86_Index2:	dc.w loc_1A9A6-Obj86_Index2
0001B248 0000                       		dc.w loc_1A9C0-Obj86_Index2
0001B24A 0000                       		dc.w loc_1AA1E-Obj86_Index2
0001B24C                            ; ===========================================================================
0001B24C                            
0001B24C                            loc_1A9A6:				; XREF: Obj86_Index2
0001B24C 3028 0030                  		move.w	$30(a0),d0
0001B250 9068 0008                  		sub.w	8(a0),d0
0001B254 E940                       		asl.w	#4,d0
0001B256 3140 0010                  		move.w	d0,$10(a0)
0001B25A 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001B260 5428 0025                  		addq.b	#2,$25(a0)
0001B264 4E75                       		rts	
0001B266                            ; ===========================================================================
0001B266                            
0001B266                            loc_1A9C0:				; XREF: Obj86_Index2
0001B266 4A68 0010                  		tst.w	$10(a0)
0001B26A 6700                       		beq.s	loc_1A9E6
0001B26C 4EB9 0000 DD9C             		jsr	SpeedToPos
0001B272 3028 0008                  		move.w	8(a0),d0
0001B276 9068 0030                  		sub.w	$30(a0),d0
0001B27A 6400                       		bcc.s	loc_1A9E6
0001B27C 4268 0010                  		clr.w	$10(a0)
0001B280 D168 0008                  		add.w	d0,8(a0)
0001B284 2268 0034                  		movea.l	$34(a0),a1
0001B288 5369 0032                  		subq.w	#1,$32(a1)
0001B28C                            
0001B28C                            loc_1A9E6:
0001B28C 117C 0000 001C             		move.b	#0,$1C(a0)
0001B292 5368 0028                  		subq.w	#1,$28(a0)
0001B296 6600                       		bne.s	locret_1AA1C
0001B298 5428 0025                  		addq.b	#2,$25(a0)
0001B29C 117C 0001 001C             		move.b	#1,$1C(a0)
0001B2A2 117C 009A 0020             		move.b	#$9A,$20(a0)
0001B2A8 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001B2AE 7000                       		moveq	#0,d0
0001B2B0 3038 D008                  		move.w	($FFFFD008).w,d0
0001B2B4 9068 0008                  		sub.w	8(a0),d0
0001B2B8 3140 0010                  		move.w	d0,$10(a0)
0001B2BC 317C 0140 0012             		move.w	#$140,$12(a0)
0001B2C2                            
0001B2C2                            locret_1AA1C:
0001B2C2 4E75                       		rts	
0001B2C4                            ; ===========================================================================
0001B2C4                            
0001B2C4                            loc_1AA1E:				; XREF: Obj86_Index2
0001B2C4 4EB9 0000 DD9C             		jsr	SpeedToPos
0001B2CA 0C68 05E0 000C             		cmpi.w	#$5E0,$C(a0)
0001B2D0 6400                       		bcc.s	loc_1AA34
0001B2D2 5368 0028                  		subq.w	#1,$28(a0)
0001B2D6 6700                       		beq.s	loc_1AA34
0001B2D8 4E75                       		rts	
0001B2DA                            ; ===========================================================================
0001B2DA                            
0001B2DA                            loc_1AA34:
0001B2DA 2268 0034                  		movea.l	$34(a0),a1
0001B2DE 5369 0038                  		subq.w	#1,$38(a1)
0001B2E2 6000 FA0A                  		bra.w	Obj84_Delete
0001B2E6                            ; ===========================================================================
0001B2E6                            Ani_obj86:
0001B2E6                            	include "_anim\obj86.asm"
0001B2E6                            ; ---------------------------------------------------------------------------
0001B2E6                            ; Animation script - energy ball launcher (FZ)
0001B2E6                            ; ---------------------------------------------------------------------------
0001B2E6 0000                       		dc.w byte_1AA46-Ani_obj86
0001B2E8 0000                       		dc.w byte_1AA4A-Ani_obj86
0001B2EA 0000                       		dc.w byte_1AA50-Ani_obj86
0001B2EC 7E00 FF00                  byte_1AA46:	dc.b $7E, 0, $FF, 0
0001B2F0 0100 0200 03FF             byte_1AA4A:	dc.b 1,	0, 2, 0, 3, $FF
0001B2F6 0101 0201 03FF             byte_1AA50:	dc.b 1,	1, 2, 1, 3, $FF
0001B2FC                            		even
0001B2FC                            		even
0001B2FC                            
0001B2FC                            ; ---------------------------------------------------------------------------
0001B2FC                            ; Sprite mappings - energy ball	launcher (FZ)
0001B2FC                            ; ---------------------------------------------------------------------------
0001B2FC                            Map_obj86:
0001B2FC                            	include "_maps\obj86.asm"
0001B2FC                            ; ---------------------------------------------------------------------------
0001B2FC                            ; Sprite mappings - energy ball	launcher (FZ)
0001B2FC                            ; ---------------------------------------------------------------------------
0001B2FC 0000 0000                  		dc.w byte_1AA5E-Map_obj86, byte_1AA64-Map_obj86
0001B300 0000 0000                  		dc.w byte_1AA6A-Map_obj86, byte_1AA70-Map_obj86
0001B304 01                         byte_1AA5E:	dc.b 1
0001B305 F805 006E F8               		dc.b $F8, 5, 0,	$6E, $F8
0001B30A 01                         byte_1AA64:	dc.b 1
0001B30B F805 0076 F8               		dc.b $F8, 5, 0,	$76, $F8
0001B310 01                         byte_1AA6A:	dc.b 1
0001B311 F805 0072 F8               		dc.b $F8, 5, 0,	$72, $F8
0001B316 01                         byte_1AA70:	dc.b 1
0001B317 F805 1072 F8               		dc.b $F8, 5, $10, $72, $F8
0001B31C                            		even
0001B31C                            		even
0001B31C                            
0001B31C                            Ani_obj86a:
0001B31C                            	include "_anim\obj86a.asm"
0001B31C                            ; ---------------------------------------------------------------------------
0001B31C                            ; Animation script - energy balls (FZ)
0001B31C                            ; ---------------------------------------------------------------------------
0001B31C 0000                       		dc.w byte_1AA7A-Ani_obj86a
0001B31E 0000                       		dc.w byte_1AA9C-Ani_obj86a
0001B320 0100 0A08 0A01 0A09 0A06+  byte_1AA7A:	dc.b 1,	0, $A, 8, $A, 1, $A, 9,	$A, 6, $A, 7, $A, 0, $A
0001B32F 080A 010A 090A 060A 070A+  		dc.b 8,	$A, 1, $A, 9, $A, 6, $A, 7, $A,	2, $A, 3, $A, 4
0001B33E 0A05 FF00                  		dc.b $A, 5, $FF, 0
0001B342 0006 0501 0507 0501 05FF   byte_1AA9C:	dc.b 0,	6, 5, 1, 5, 7, 5, 1, 5,	$FF
0001B34C                            		even
0001B34C                            		even
0001B34C                            
0001B34C                            ; ---------------------------------------------------------------------------
0001B34C                            ; Sprite mappings - energy balls (FZ)
0001B34C                            ; ---------------------------------------------------------------------------
0001B34C                            Map_obj86a:
0001B34C                            	include "_maps\obj86a.asm"
0001B34C                            ; ---------------------------------------------------------------------------
0001B34C                            ; Sprite mappings - energy balls (FZ)
0001B34C                            ; ---------------------------------------------------------------------------
0001B34C 0000 0000                  		dc.w byte_1AABC-Map_obj86a, byte_1AAC7-Map_obj86a
0001B350 0000 0000                  		dc.w byte_1AAD2-Map_obj86a, byte_1AADD-Map_obj86a
0001B354 0000 0000                  		dc.w byte_1AAE8-Map_obj86a, byte_1AAF3-Map_obj86a
0001B358 0000 0000                  		dc.w byte_1AAFE-Map_obj86a, byte_1AB04-Map_obj86a
0001B35C 0000 0000                  		dc.w byte_1AB0A-Map_obj86a, byte_1AB15-Map_obj86a
0001B360 0000                       		dc.w byte_1AB20-Map_obj86a
0001B362 02                         byte_1AABC:	dc.b 2
0001B363 F00D 007A F0               		dc.b $F0, $D, 0, $7A, $F0
0001B368 000D 187A F0               		dc.b 0,	$D, $18, $7A, $F0
0001B36D 02                         byte_1AAC7:	dc.b 2
0001B36E F406 0082 F4               		dc.b $F4, 6, 0,	$82, $F4
0001B373 F402 1882 04               		dc.b $F4, 2, $18, $82, 4
0001B378 02                         byte_1AAD2:	dc.b 2
0001B379 F804 0088 F8               		dc.b $F8, 4, 0,	$88, $F8
0001B37E 0004 1088 F8               		dc.b 0,	4, $10,	$88, $F8
0001B383 02                         byte_1AADD:	dc.b 2
0001B384 F804 008A F8               		dc.b $F8, 4, 0,	$8A, $F8
0001B389 0004 108A F8               		dc.b 0,	4, $10,	$8A, $F8
0001B38E 02                         byte_1AAE8:	dc.b 2
0001B38F F804 008C F8               		dc.b $F8, 4, 0,	$8C, $F8
0001B394 0004 108C F8               		dc.b 0,	4, $10,	$8C, $F8
0001B399 02                         byte_1AAF3:	dc.b 2
0001B39A F406 008E F4               		dc.b $F4, 6, 0,	$8E, $F4
0001B39F F402 188E 04               		dc.b $F4, 2, $18, $8E, 4
0001B3A4 01                         byte_1AAFE:	dc.b 1
0001B3A5 F805 0094 F8               		dc.b $F8, 5, 0,	$94, $F8
0001B3AA 01                         byte_1AB04:	dc.b 1
0001B3AB F805 0098 F8               		dc.b $F8, 5, 0,	$98, $F8
0001B3B0 02                         byte_1AB0A:	dc.b 2
0001B3B1 F00D 087A F0               		dc.b $F0, $D, 8, $7A, $F0
0001B3B6 000D 107A F0               		dc.b 0,	$D, $10, $7A, $F0
0001B3BB 02                         byte_1AB15:	dc.b 2
0001B3BC F406 1082 F4               		dc.b $F4, 6, $10, $82, $F4
0001B3C1 F402 0882 04               		dc.b $F4, 2, 8,	$82, 4
0001B3C6 00                         byte_1AB20:	dc.b 0
0001B3C8 00                         		even
0001B3C8 00                         		even
0001B3C8                            
0001B3C8                            ; ===========================================================================
0001B3C8                            ; ---------------------------------------------------------------------------
0001B3C8                            ; Object 3E - prison capsule
0001B3C8                            ; ---------------------------------------------------------------------------
0001B3C8                            
0001B3C8                            Obj3E:					; XREF: Obj_Index
0001B3C8 7000                       		moveq	#0,d0
0001B3CA 1028 0024                  		move.b	$24(a0),d0
0001B3CE 323B 0000                  		move.w	Obj3E_Index(pc,d0.w),d1
0001B3D2 4EBB 1000                  		jsr	Obj3E_Index(pc,d1.w)
0001B3D6 3028 0008                  		move.w	8(a0),d0
0001B3DA 0240 FF80                  		andi.w	#$FF80,d0
0001B3DE 3238 F700                  		move.w	($FFFFF700).w,d1
0001B3E2 0441 0080                  		subi.w	#$80,d1
0001B3E6 0241 FF80                  		andi.w	#$FF80,d1
0001B3EA 9041                       		sub.w	d1,d0
0001B3EC 0C40 0280                  		cmpi.w	#$280,d0
0001B3F0 6200                       		bhi.s	Obj3E_Delete
0001B3F2 4EF9 0000 DDC2             		jmp	DisplaySprite
0001B3F8                            ; ===========================================================================
0001B3F8                            
0001B3F8                            Obj3E_Delete:
0001B3F8 4EF9 0000 DDFE             		jmp	DeleteObject
0001B3FE                            ; ===========================================================================
0001B3FE 0000                       Obj3E_Index:	dc.w Obj3E_Main-Obj3E_Index
0001B400 0000                       		dc.w Obj3E_BodyMain-Obj3E_Index
0001B402 0000                       		dc.w Obj3E_Switched-Obj3E_Index
0001B404 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001B406 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001B408 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001B40A 0000                       		dc.w Obj3E_Animals-Obj3E_Index
0001B40C 0000                       		dc.w Obj3E_EndAct-Obj3E_Index
0001B40E                            
0001B40E 0220 0400                  Obj3E_Var:	dc.b 2,	$20, 4,	0	; routine, width, priority, frame
0001B412 040C 0501                  		dc.b 4,	$C, 5, 1
0001B416 0610 0403                  		dc.b 6,	$10, 4,	3
0001B41A 0810 0305                  		dc.b 8,	$10, 3,	5
0001B41E                            ; ===========================================================================
0001B41E                            
0001B41E                            Obj3E_Main:				; XREF: Obj3E_Index
0001B41E 217C 0000 0000 0004        		move.l	#Map_obj3E,4(a0)
0001B426 317C 049D 0002             		move.w	#$49D,2(a0)
0001B42C 117C 0004 0001             		move.b	#4,1(a0)
0001B432 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001B438 7000                       		moveq	#0,d0
0001B43A 1028 0028                  		move.b	$28(a0),d0
0001B43E E548                       		lsl.w	#2,d0
0001B440 43FB 00CC                  		lea	Obj3E_Var(pc,d0.w),a1
0001B444 1159 0024                  		move.b	(a1)+,$24(a0)
0001B448 1159 0019                  		move.b	(a1)+,$19(a0)
0001B44C 1159 0018                  		move.b	(a1)+,$18(a0)
0001B450 1159 001A                  		move.b	(a1)+,$1A(a0)
0001B454 0C40 0008                  		cmpi.w	#8,d0		; is object type number	02?
0001B458 6600                       		bne.s	Obj3E_Not02	; if not, branch
0001B45A 117C 0006 0020             		move.b	#6,$20(a0)
0001B460 117C 0008 0021             		move.b	#8,$21(a0)
0001B466                            
0001B466                            Obj3E_Not02:
0001B466 4E75                       		rts	
0001B468                            ; ===========================================================================
0001B468                            
0001B468                            Obj3E_BodyMain:				; XREF: Obj3E_Index
0001B468 0C38 0002 F7A7             		cmpi.b	#2,($FFFFF7A7).w
0001B46E 6700                       		beq.s	Obj3E_ChkOpened
0001B470 323C 002B                  		move.w	#$2B,d1
0001B474 343C 0018                  		move.w	#$18,d2
0001B478 363C 0018                  		move.w	#$18,d3
0001B47C 3828 0008                  		move.w	8(a0),d4
0001B480 4EF9 0001 0192             		jmp	SolidObject
0001B486                            ; ===========================================================================
0001B486                            
0001B486                            Obj3E_ChkOpened:
0001B486 4A28 0025                  		tst.b	$25(a0)		; has the prison been opened?
0001B48A 6700                       		beq.s	Obj3E_DoOpen	; if yes, branch
0001B48C 4228 0025                  		clr.b	$25(a0)
0001B490 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001B496 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001B49C                            
0001B49C                            Obj3E_DoOpen:
0001B49C 117C 0002 001A             		move.b	#2,$1A(a0)	; use frame number 2 (destroyed	prison)
0001B4A2 4E75                       		rts	
0001B4A4                            ; ===========================================================================
0001B4A4                            
0001B4A4                            Obj3E_Switched:				; XREF: Obj3E_Index
0001B4A4 323C 0017                  		move.w	#$17,d1
0001B4A8 343C 0008                  		move.w	#8,d2
0001B4AC 363C 0008                  		move.w	#8,d3
0001B4B0 3828 0008                  		move.w	8(a0),d4
0001B4B4 4EB9 0001 0192             		jsr	SolidObject
0001B4BA 43F9 0000 0000             		lea	(Ani_obj3E).l,a1
0001B4C0 4EB9 0000 AE82             		jsr	AnimateSprite
0001B4C6 3168 0030 000C             		move.w	$30(a0),$C(a0)
0001B4CC 4A28 0025                  		tst.b	$25(a0)
0001B4D0 6700                       		beq.s	locret_1AC60
0001B4D2 5068 000C                  		addq.w	#8,$C(a0)
0001B4D6 117C 000A 0024             		move.b	#$A,$24(a0)
0001B4DC 317C 003C 001E             		move.w	#$3C,$1E(a0)
0001B4E2 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0001B4E6 4238 F7AA                  		clr.b	($FFFFF7AA).w	; lock screen position
0001B4EA 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0001B4F0 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0001B4F6 6700                       		beq.s	Obj3E_MoveLeft	; GMZ: If not, branch
0001B4F8 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; make Sonic run to	the right
0001B4FE 6000                       		bra.s	Obj3E_ContinueCode
0001B500                            
0001B500                            Obj3E_MoveLeft:
0001B500 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0001B506                            
0001B506                            Obj3E_ContinueCode:
0001B506 4228 0025                  		clr.b	$25(a0)
0001B50A 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001B510 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001B516                            
0001B516                            locret_1AC60:
0001B516 4E75                       		rts	
0001B518                            ; ===========================================================================
0001B518                            
0001B518                            Obj3E_Explosion:			; XREF: Obj3E_Index
0001B518 7007                       		moveq	#7,d0
0001B51A C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001B51E 6600                       		bne.s	loc_1ACA0
0001B520 4EB9 0000 E248             		jsr	SingleObjLoad
0001B526 6600                       		bne.s	loc_1ACA0
0001B528 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
0001B52C 3368 0008 0008             		move.w	8(a0),8(a1)
0001B532 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B538 4EB9 0000 2C9E             		jsr	(RandomNumber).l
0001B53E 7200                       		moveq	#0,d1
0001B540 1200                       		move.b	d0,d1
0001B542 E409                       		lsr.b	#2,d1
0001B544 0441 0020                  		subi.w	#$20,d1
0001B548 D369 0008                  		add.w	d1,8(a1)
0001B54C E048                       		lsr.w	#8,d0
0001B54E E608                       		lsr.b	#3,d0
0001B550 D169 000C                  		add.w	d0,$C(a1)
0001B554                            
0001B554                            loc_1ACA0:
0001B554 5368 001E                  		subq.w	#1,$1E(a0)
0001B558 6700                       		beq.s	Obj3E_MakeAnimal
0001B55A 4E75                       		rts	
0001B55C                            ; ===========================================================================
0001B55C                            
0001B55C                            Obj3E_MakeAnimal:
0001B55C 11FC 0002 F7A7             		move.b	#2,($FFFFF7A7).w
0001B562 117C 000C 0024             		move.b	#$C,$24(a0)	; replace explosions with animals
0001B568 117C 0006 001A             		move.b	#6,$1A(a0)
0001B56E 317C 0096 001E             		move.w	#$96,$1E(a0)
0001B574 0668 0020 000C             		addi.w	#$20,$C(a0)
0001B57A 7C07                       		moveq	#7,d6
0001B57C 3A3C 009A                  		move.w	#$9A,d5
0001B580 78E4                       		moveq	#-$1C,d4
0001B582                            
0001B582                            Obj3E_Loop:
0001B582 4EB9 0000 E248             		jsr	SingleObjLoad
0001B588 6600                       		bne.s	locret_1ACF8
0001B58A 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001B58E 3368 0008 0008             		move.w	8(a0),8(a1)
0001B594 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B59A D969 0008                  		add.w	d4,8(a1)
0001B59E 5E44                       		addq.w	#7,d4
0001B5A0 3345 0036                  		move.w	d5,$36(a1)
0001B5A4 5145                       		subq.w	#8,d5
0001B5A6 51CE FFDA                  		dbf	d6,Obj3E_Loop	; repeat 7 more	times
0001B5AA                            
0001B5AA                            locret_1ACF8:
0001B5AA 4E75                       		rts	
0001B5AC                            ; ===========================================================================
0001B5AC                            
0001B5AC                            Obj3E_Animals:				; XREF: Obj3E_Index
0001B5AC 7007                       		moveq	#7,d0
0001B5AE C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001B5B2 6600                       		bne.s	loc_1AD38
0001B5B4 4EB9 0000 E248             		jsr	SingleObjLoad
0001B5BA 6600                       		bne.s	loc_1AD38
0001B5BC 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001B5C0 3368 0008 0008             		move.w	8(a0),8(a1)
0001B5C6 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B5CC 4EB9 0000 2C9E             		jsr	(RandomNumber).l
0001B5D2 0240 001F                  		andi.w	#$1F,d0
0001B5D6 5D40                       		subq.w	#6,d0
0001B5D8 4A41                       		tst.w	d1
0001B5DA 6A00                       		bpl.s	loc_1AD2E
0001B5DC 4440                       		neg.w	d0
0001B5DE                            
0001B5DE                            loc_1AD2E:
0001B5DE D169 0008                  		add.w	d0,8(a1)
0001B5E2 337C 000C 0036             		move.w	#$C,$36(a1)
0001B5E8                            
0001B5E8                            loc_1AD38:
0001B5E8 5368 001E                  		subq.w	#1,$1E(a0)
0001B5EC 6600                       		bne.s	locret_1AD48
0001B5EE 5428 0024                  		addq.b	#2,$24(a0)
0001B5F2 317C 00B4 001E             		move.w	#180,$1E(a0)
0001B5F8                            
0001B5F8                            locret_1AD48:
0001B5F8 4E75                       		rts	
0001B5FA                            ; ===========================================================================
0001B5FA                            
0001B5FA                            Obj3E_EndAct:				; XREF: Obj3E_Index
0001B5FA 703E                       		moveq	#$3E,d0
0001B5FC 7228                       		moveq	#$28,d1
0001B5FE 7440                       		moveq	#$40,d2
0001B600 43F8 D040                  		lea	($FFFFD040).w,a1 ; load	object RAM
0001B604                            
0001B604                            Obj3E_FindObj28:
0001B604 B211                       		cmp.b	(a1),d1		; is object $28	(animal) loaded?
0001B606 6700                       		beq.s	Obj3E_Obj28Found ; if yes, branch
0001B608 D2C2                       		adda.w	d2,a1		; next object RAM
0001B60A 51C8 FFF8                  		dbf	d0,Obj3E_FindObj28 ; repeat $3E	times
0001B60E                            
0001B60E 4EB9 0000 F44E             		jsr	GotThroughAct
0001B614 4EF9 0000 DDFE             		jmp	DeleteObject
0001B61A                            ; ===========================================================================
0001B61A                            
0001B61A                            Obj3E_Obj28Found:
0001B61A 4E75                       		rts	
0001B61C                            ; ===========================================================================
0001B61C                            Ani_obj3E:
0001B61C                            	include "_anim\obj3E.asm"
0001B61C                            ; ---------------------------------------------------------------------------
0001B61C                            ; Animation script - prison capsule
0001B61C                            ; ---------------------------------------------------------------------------
0001B61C 0000                       		dc.w byte_1AD70-Ani_obj3E
0001B61E 0000                       		dc.w byte_1AD70-Ani_obj3E
0001B620 0201 03FF                  byte_1AD70:	dc.b 2,	1, 3, $FF
0001B624                            		even
0001B624                            		even
0001B624                            
0001B624                            ; ---------------------------------------------------------------------------
0001B624                            ; Sprite mappings - prison capsule
0001B624                            ; ---------------------------------------------------------------------------
0001B624                            Map_obj3E:
0001B624                            	include "_maps\obj3E.asm"
0001B624                            ; ---------------------------------------------------------------------------
0001B624                            ; Sprite mappings - prison capsule
0001B624                            ; ---------------------------------------------------------------------------
0001B624 0000 0000                  		dc.w byte_1AD82-Map_obj3E, byte_1ADA6-Map_obj3E
0001B628 0000 0000                  		dc.w byte_1ADAC-Map_obj3E, byte_1ADCB-Map_obj3E
0001B62C 0000 0000                  		dc.w byte_1ADD1-Map_obj3E, byte_1ADDC-Map_obj3E
0001B630 0000                       		dc.w byte_1ADE2-Map_obj3E
0001B632 07                         byte_1AD82:	dc.b 7
0001B633 E00C 2000 F0               		dc.b $E0, $C, $20, 0, $F0
0001B638 E80D 2004 E0               		dc.b $E8, $D, $20, 4, $E0
0001B63D E80D 200C 00               		dc.b $E8, $D, $20, $C, 0
0001B642 F80E 2014 E0               		dc.b $F8, $E, $20, $14,	$E0
0001B647 F80E 2020 00               		dc.b $F8, $E, $20, $20,	0
0001B64C 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001B651 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001B656 01                         byte_1ADA6:	dc.b 1
0001B657 F809 003C F4               		dc.b $F8, 9, 0,	$3C, $F4
0001B65C 06                         byte_1ADAC:	dc.b 6
0001B65D 0008 2042 E0               		dc.b 0,	8, $20,	$42, $E0
0001B662 080C 2045 E0               		dc.b 8,	$C, $20, $45, $E0
0001B667 0004 2049 10               		dc.b 0,	4, $20,	$49, $10
0001B66C 080C 204B 00               		dc.b 8,	$C, $20, $4B, 0
0001B671 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001B676 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001B67B 01                         byte_1ADCB:	dc.b 1
0001B67C F809 004F F4               		dc.b $F8, 9, 0,	$4F, $F4
0001B681 02                         byte_1ADD1:	dc.b 2
0001B682 E80E 2055 F0               		dc.b $E8, $E, $20, $55,	$F0
0001B687 000E 2061 F0               		dc.b 0,	$E, $20, $61, $F0
0001B68C 01                         byte_1ADDC:	dc.b 1
0001B68D F007 206D F8               		dc.b $F0, 7, $20, $6D, $F8
0001B692 00                         byte_1ADE2:	dc.b 0
0001B694 00                         		even
0001B694 00                         		even
0001B694                            
0001B694                            ; ---------------------------------------------------------------------------
0001B694                            ; Object touch response	subroutine - $20(a0) in	the object RAM
0001B694                            ; ---------------------------------------------------------------------------
0001B694                            
0001B694                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B694                            
0001B694                            
0001B694                            TouchResponse:				; XREF: Obj01
0001B694 4E71                       		nop	
0001B696 3428 0008                  		move.w	8(a0),d2	; load Sonic's x-axis value
0001B69A 3628 000C                  		move.w	$C(a0),d3	; load Sonic's y-axis value
0001B69E 5142                       		subq.w	#8,d2
0001B6A0 7A00                       		moveq	#0,d5
0001B6A2 1A28 0016                  		move.b	$16(a0),d5	; load Sonic's height
0001B6A6 5705                       		subq.b	#3,d5
0001B6A8 9645                       		sub.w	d5,d3
0001B6AA 0C28 0039 001A             		cmpi.b	#$39,$1A(a0)	; is Sonic ducking?
0001B6B0 6600                       		bne.s	Touch_NoDuck	; if not, branch
0001B6B2 0643 000C                  		addi.w	#$C,d3
0001B6B6 7A0A                       		moveq	#$A,d5
0001B6B8                            
0001B6B8                            Touch_NoDuck:
0001B6B8 383C 0010                  		move.w	#$10,d4
0001B6BC DA45                       		add.w	d5,d5
0001B6BE 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking the object RAM
0001B6C2 3C3C 005F                  		move.w	#$5F,d6
0001B6C6                            
0001B6C6                            Touch_Loop:
0001B6C6 4A29 0001                  		tst.b	1(a1)
0001B6CA 6A00                       		bpl.s	Touch_NextObj
0001B6CC 1029 0020                  		move.b	$20(a1),d0	; load touch response number
0001B6D0 6600                       		bne.s	Touch_Height	; if touch response is not 0, branch
0001B6D2                            
0001B6D2                            Touch_NextObj:
0001B6D2 43E9 0040                  		lea	$40(a1),a1	; next object RAM
0001B6D6 51CE FFEE                  		dbf	d6,Touch_Loop	; repeat $5F more times
0001B6DA                            
0001B6DA 7000                       		moveq	#0,d0
0001B6DC 4E75                       		rts	
0001B6DE                            ; ===========================================================================
0001B6DE 1414                       Touch_Sizes:	dc.b  $14, $14		; width, height
0001B6E0 0C14                       		dc.b   $C, $14
0001B6E2 140C                       		dc.b  $14,  $C
0001B6E4 0410                       		dc.b	4, $10
0001B6E6 0C12                       		dc.b   $C, $12
0001B6E8 1010                       		dc.b  $10, $10
0001B6EA 0606                       		dc.b	6,   6
0001B6EC 180C                       		dc.b  $18,  $C
0001B6EE 0C10                       		dc.b   $C, $10
0001B6F0 100C                       		dc.b  $10,  $C
0001B6F2 0808                       		dc.b	8,   8
0001B6F4 1410                       		dc.b  $14, $10
0001B6F6 1408                       		dc.b  $14,   8
0001B6F8 0E0E                       		dc.b   $E,  $E
0001B6FA 1818                       		dc.b  $18, $18
0001B6FC 2810                       		dc.b  $28, $10
0001B6FE 1018                       		dc.b  $10, $18
0001B700 0810                       		dc.b	8, $10
0001B702 2070                       		dc.b  $20, $70
0001B704 4020                       		dc.b  $40, $20
0001B706 8020                       		dc.b  $80, $20
0001B708 2020                       		dc.b  $20, $20
0001B70A 0808                       		dc.b	8,   8
0001B70C 0404                       		dc.b	4,   4
0001B70E 2008                       		dc.b  $20,   8
0001B710 0C0C                       		dc.b   $C,  $C
0001B712 0804                       		dc.b	8,   4
0001B714 1804                       		dc.b  $18,   4
0001B716 2804                       		dc.b  $28,   4
0001B718 0408                       		dc.b	4,   8
0001B71A 0418                       		dc.b	4, $18
0001B71C 0428                       		dc.b	4, $28
0001B71E 0420                       		dc.b	4, $20
0001B720 1818                       		dc.b  $18, $18
0001B722 0C18                       		dc.b   $C, $18
0001B724 4808                       		dc.b  $48,   8
0001B726                            ; ===========================================================================
0001B726                            
0001B726                            Touch_Height:				; XREF: TouchResponse
0001B726 0240 003F                  		andi.w	#$3F,d0
0001B72A D040                       		add.w	d0,d0
0001B72C 45FB 00AE                  		lea	Touch_Sizes-2(pc,d0.w),a2
0001B730 7200                       		moveq	#0,d1
0001B732 121A                       		move.b	(a2)+,d1
0001B734 3029 0008                  		move.w	8(a1),d0
0001B738 9041                       		sub.w	d1,d0
0001B73A 9042                       		sub.w	d2,d0
0001B73C 6400                       		bcc.s	loc_1AE98
0001B73E D241                       		add.w	d1,d1
0001B740 D041                       		add.w	d1,d0
0001B742 6500                       		bcs.s	Touch_Width
0001B744 6000 FF8C                  		bra.w	Touch_NextObj
0001B748                            ; ===========================================================================
0001B748                            
0001B748                            loc_1AE98:
0001B748 B044                       		cmp.w	d4,d0
0001B74A 6200 FF86                  		bhi.w	Touch_NextObj
0001B74E                            
0001B74E                            Touch_Width:
0001B74E 7200                       		moveq	#0,d1
0001B750 121A                       		move.b	(a2)+,d1
0001B752 3029 000C                  		move.w	$C(a1),d0
0001B756 9041                       		sub.w	d1,d0
0001B758 9043                       		sub.w	d3,d0
0001B75A 6400                       		bcc.s	loc_1AEB6
0001B75C D241                       		add.w	d1,d1
0001B75E D240                       		add.w	d0,d1
0001B760 6500                       		bcs.s	Touch_ChkValue
0001B762 6000 FF6E                  		bra.w	Touch_NextObj
0001B766                            ; ===========================================================================
0001B766                            
0001B766                            loc_1AEB6:
0001B766 B045                       		cmp.w	d5,d0
0001B768 6200 FF68                  		bhi.w	Touch_NextObj
0001B76C                            
0001B76C                            Touch_ChkValue:
0001B76C 1229 0020                  		move.b	$20(a1),d1	; load touch response number
0001B770 0201 00C0                  		andi.b	#$C0,d1		; is touch response $40	or higher?
0001B774 6700 0000                  		beq.w	Touch_Enemy	; if not, branch
0001B778 0C01 00C0                  		cmpi.b	#$C0,d1		; is touch response $C0	or higher?
0001B77C 6700 0000                  		beq.w	Touch_Special	; if yes, branch
0001B780 4A01                       		tst.b	d1		; is touch response $80-$BF ?
0001B782 6B00 0000                  		bmi.w	Touch_ChkHurt	; if yes, branch
0001B786                            
0001B786                            ; touch	response is $40-$7F
0001B786                            
0001B786 1029 0020                  		move.b	$20(a1),d0
0001B78A 0200 003F                  		andi.b	#$3F,d0
0001B78E 0C00 0006                  		cmpi.b	#6,d0		; is touch response $46	?
0001B792 6700                       		beq.s	Touch_Monitor	; if yes, branch
0001B794 0C68 005A 0030             		cmpi.w	#$5A,$30(a0)
0001B79A 6400 0000                  		bcc.w	locret_1AEF2
0001B79E 5429 0024                  		addq.b	#2,$24(a1)	; advance the object's routine counter
0001B7A2                            
0001B7A2                            locret_1AEF2:
0001B7A2 4E75                       		rts	
0001B7A4                            ; ===========================================================================
0001B7A4                            
0001B7A4                            Touch_Monitor:
0001B7A4 4A68 0012                  		tst.w	$12(a0)		; is Sonic moving upwards?
0001B7A8 6A00                       		bpl.s	loc_1AF1E	; if not, branch
0001B7AA 3028 000C                  		move.w	$C(a0),d0
0001B7AE 0440 0010                  		subi.w	#$10,d0
0001B7B2 B069 000C                  		cmp.w	$C(a1),d0
0001B7B6 6500                       		bcs.s	locret_1AF2E
0001B7B8 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001B7BC 337C FE80 0012             		move.w	#-$180,$12(a1)
0001B7C2 4A29 0025                  		tst.b	$25(a1)
0001B7C6 6600                       		bne.s	locret_1AF2E
0001B7C8 5829 0025                  		addq.b	#4,$25(a1)	; advance the monitor's routine counter
0001B7CC 4E75                       		rts	
0001B7CE                            ; ===========================================================================
0001B7CE                            
0001B7CE                            loc_1AF1E:
0001B7CE 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling/jumping?
0001B7D4 6600                       		bne.s	locret_1AF2E
0001B7D6 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001B7DA 5429 0024                  		addq.b	#2,$24(a1)	; advance the monitor's routine counter
0001B7DE                            
0001B7DE                            locret_1AF2E:
0001B7DE 4E75                       		rts	
0001B7E0                            ; ===========================================================================
0001B7E0                            
0001B7E0                            Touch_Enemy:				; XREF: Touch_ChkValue
0001B7E0 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001B7E4 6600                       		bne.s	loc_1AF40	; if yes, branch
0001B7E6 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling?
0001B7EC 6600 0000                  		bne.w	Touch_ChkHurt	; if not, branch
0001B7F0                            
0001B7F0                            loc_1AF40:
0001B7F0 4A29 0021                  		tst.b	$21(a1)
0001B7F4 6700                       		beq.s	Touch_KillEnemy
0001B7F6 4468 0010                  		neg.w	$10(a0)
0001B7FA 4468 0012                  		neg.w	$12(a0)
0001B7FE E0E8 0010                  		asr	$10(a0)
0001B802 E0E8 0012                  		asr	$12(a0)
0001B806 137C 0000 0020             		move.b	#0,$20(a1)
0001B80C 5329 0021                  		subq.b	#1,$21(a1)
0001B810 6600                       		bne.s	locret_1AF68
0001B812 08E9 0007 0022             		bset	#7,$22(a1)
0001B818                            
0001B818                            locret_1AF68:
0001B818 4E75                       		rts	
0001B81A                            ; ===========================================================================
0001B81A                            
0001B81A                            Touch_KillEnemy:
0001B81A 08E9 0007 0022             		bset	#7,$22(a1)
0001B820 7000                       		moveq	#0,d0
0001B822 3038 F7D0                  		move.w	($FFFFF7D0).w,d0
0001B826 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w ; add 2 to item bonus counter
0001B82A 0C40 0006                  		cmpi.w	#6,d0
0001B82E 6500                       		bcs.s	loc_1AF82
0001B830 7006                       		moveq	#6,d0
0001B832                            
0001B832                            loc_1AF82:
0001B832 3340 003E                  		move.w	d0,$3E(a1)
0001B836 303B 0000                  		move.w	Enemy_Points(pc,d0.w),d0
0001B83A 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 enemies been destroyed?
0001B840 6500                       		bcs.s	loc_1AF9C	; if not, branch
0001B842 303C 03E8                  		move.w	#1000,d0	; fix bonus to 10000
0001B846 337C 000A 003E             		move.w	#$A,$3E(a1)
0001B84C                            
0001B84C                            loc_1AF9C:
0001B84C 6100 0000                  		bsr.w	AddPoints
0001B850 7400                       		moveq	#0,d2	; GMZ
0001B852 7205                       		moveq	#5,d1	; GMZ: Amount of explosion objects
0001B854 2449                       		move.l	a1,a2	; GMZ: Save a1 address on a2
0001B856                            
0001B856                            TouchKE_Explode:
0001B856 12BC 0027                  		move.b	#$27,0(a1)	; change object	to points
0001B85A 137C 0000 0024             		move.b	#0,$24(a1)
0001B860 1342 0028                  		move.b	d2,$28(a1)	; GMZ: Set subtype
0001B864                            
0001B864                            TouchKE_NextExplosion:
0001B864 5802                       		addq.b	#4,d2
0001B866 4EB9 0000 E248             		jsr	SingleObjLoad
0001B86C 6600                       		bne.s	TouchKE_NoExplosion
0001B86E 336A 0008 0008             		move.w	8(a2),8(a1)
0001B874 336A 000C 000C             		move.w	$C(a2),$C(a1)
0001B87A 51C9 FFDA                  		dbf	d1,TouchKE_Explode
0001B87E                            
0001B87E                            TouchKE_NoExplosion:
0001B87E 224A                       		move.l	a2,a1	; GMZ: Restore original a1 address
0001B880 4A68 0012                  		tst.w	$12(a0)
0001B884 6B00                       		bmi.s	loc_1AFC2
0001B886 3028 000C                  		move.w	$C(a0),d0
0001B88A B069 000C                  		cmp.w	$C(a1),d0
0001B88E 6400                       		bcc.s	loc_1AFCA
0001B890 4468 0012                  		neg.w	$12(a0)
0001B894 4E75                       		rts	
0001B896                            ; ===========================================================================
0001B896                            
0001B896                            loc_1AFC2:
0001B896 0668 0100 0012             		addi.w	#$100,$12(a0)
0001B89C 4E75                       		rts	
0001B89E                            ; ===========================================================================
0001B89E                            
0001B89E                            loc_1AFCA:
0001B89E 0468 0100 0012             		subi.w	#$100,$12(a0)
0001B8A4 4E75                       		rts	
0001B8A6                            ; ===========================================================================
0001B8A6 000A 0014 0032 0064        Enemy_Points:	dc.w 10, 20, 50, 100
0001B8AE                            ; ===========================================================================
0001B8AE                            
0001B8AE                            loc_1AFDA:				; XREF: Touch_CatKiller
0001B8AE 08E9 0007 0022             		bset	#7,$22(a1)
0001B8B4                            
0001B8B4                            Touch_ChkHurt:				; XREF: Touch_ChkValue
0001B8B4 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001B8B8 6700                       		beq.s	Touch_Hurt	; if not, branch
0001B8BA                            
0001B8BA                            loc_1AFE6:				; XREF: Touch_Hurt
0001B8BA 70FF                       		moveq	#-1,d0
0001B8BC 4E75                       		rts	
0001B8BE                            ; ===========================================================================
0001B8BE                            
0001B8BE                            Touch_Hurt:				; XREF: Touch_ChkHurt
0001B8BE 4E71                       		nop	
0001B8C0 4A68 0030                  		tst.w	$30(a0)
0001B8C4 66F4                       		bne.s	loc_1AFE6
0001B8C6 2449                       		movea.l	a1,a2
0001B8C8                            
0001B8C8                            ; End of function TouchResponse
0001B8C8                            ; continue straight to HurtSonic
0001B8C8                            
0001B8C8                            ; ---------------------------------------------------------------------------
0001B8C8                            ; Hurting Sonic	subroutine
0001B8C8                            ; ---------------------------------------------------------------------------
0001B8C8                            
0001B8C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B8C8                            
0001B8C8                            
0001B8C8                            HurtSonic:
0001B8C8 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have a shield?
0001B8CC 6600                       		bne.s	Hurt_Shield	; if yes, branch
0001B8CE 4A78 FE20                  		tst.w	($FFFFFE20).w	; does Sonic have any rings?
0001B8D2 6700 0000                  		beq.w	Hurt_NoRings	; if not, branch
0001B8D6 4EB9 0000 E248             		jsr	SingleObjLoad
0001B8DC 6600                       		bne.s	Hurt_Shield
0001B8DE 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	multi rings object
0001B8E2 3368 0008 0008             		move.w	8(a0),8(a1)
0001B8E8 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B8EE                            
0001B8EE                            Hurt_Shield:
0001B8EE 11FC 0000 FE2C             		move.b	#0,($FFFFFE2C).w ; remove shield
0001B8F4 117C 0004 0024             		move.b	#4,$24(a0)
0001B8FA 6100 8704                  		bsr.w	Sonic_ResetOnFloor
0001B8FE 08E8 0001 0022             		bset	#1,$22(a0)
0001B904 317C FC00 0012             		move.w	#-$400,$12(a0)	; make Sonic bounce away from the object
0001B90A 317C FE00 0010             		move.w	#-$200,$10(a0)
0001B910 0828 0006 0022             		btst	#6,$22(a0)
0001B916 6700                       		beq.s	Hurt_Reverse
0001B918 317C FE00 0012             		move.w	#-$200,$12(a0)
0001B91E 317C FF00 0010             		move.w	#-$100,$10(a0)
0001B924                            
0001B924                            Hurt_Reverse:
0001B924 3028 0008                  		move.w	8(a0),d0
0001B928 B06A 0008                  		cmp.w	8(a2),d0
0001B92C 6500                       		bcs.s	Hurt_ChkSpikes	; if Sonic is left of the object, branch
0001B92E 4468 0010                  		neg.w	$10(a0)		; if Sonic is right of the object, reverse
0001B932                            
0001B932                            Hurt_ChkSpikes:
0001B932 317C 0000 0014             		move.w	#0,$14(a0)
0001B938 117C 001A 001C             		move.b	#$1A,$1C(a0)
0001B93E 317C 0078 0030             		move.w	#$78,$30(a0)
0001B944 303C 00A3                  		move.w	#$A3,d0		; load normal damage sound
0001B948 0C12 0036                  		cmpi.b	#$36,(a2)	; was damage caused by spikes?
0001B94C 6600                       		bne.s	Hurt_Sound	; if not, branch
0001B94E 0C12 0016                  		cmpi.b	#$16,(a2)	; was damage caused by LZ harpoon?
0001B952 6600                       		bne.s	Hurt_Sound	; if not, branch
0001B954 303C 00A6                  		move.w	#$A6,d0		; load spikes damage sound
0001B958                            
0001B958                            Hurt_Sound:
0001B958 4EB9 0000 15C0             		jsr	(PlaySound_Special).l
0001B95E 70FF                       		moveq	#-1,d0
0001B960 4E75                       		rts	
0001B962                            ; ===========================================================================
0001B962                            
0001B962                            Hurt_NoRings:
0001B962 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat on?
0001B966 6600 FF86                  		bne.w	Hurt_Shield	; if yes, branch
0001B96A                            ; End of function HurtSonic
0001B96A                            
0001B96A                            ; ---------------------------------------------------------------------------
0001B96A                            ; Subroutine to	kill Sonic
0001B96A                            ; ---------------------------------------------------------------------------
0001B96A                            
0001B96A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B96A                            
0001B96A                            
0001B96A                            KillSonic:
0001B96A 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	active?
0001B96E 6600                       		bne.s	Kill_NoDeath	; if yes, branch
0001B970 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; remove invincibility
0001B976 117C 0006 0024             		move.b	#6,$24(a0)
0001B97C 6100 8682                  		bsr.w	Sonic_ResetOnFloor
0001B980 08E8 0001 0022             		bset	#1,$22(a0)
0001B986 317C F900 0012             		move.w	#-$700,$12(a0)
0001B98C 317C 0000 0010             		move.w	#0,$10(a0)
0001B992 317C 0000 0014             		move.w	#0,$14(a0)
0001B998 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001B99E 117C 0018 001C             		move.b	#$18,$1C(a0)
0001B9A4 08E8 0007 0002             		bset	#7,2(a0)
0001B9AA 303C 00A3                  		move.w	#$A3,d0		; play normal death sound
0001B9AE 0C12 0036                  		cmpi.b	#$36,(a2)	; check	if you were killed by spikes
0001B9B2 6600                       		bne.s	Kill_Sound
0001B9B4 303C 00A6                  		move.w	#$A6,d0		; play spikes death sound
0001B9B8                            
0001B9B8                            Kill_Sound:
0001B9B8 4EB9 0000 15C0             		jsr	(PlaySound_Special).l
0001B9BE                            
0001B9BE                            Kill_NoDeath:
0001B9BE 70FF                       		moveq	#-1,d0
0001B9C0 4E75                       		rts	
0001B9C2                            ; End of function KillSonic
0001B9C2                            
0001B9C2                            
0001B9C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B9C2                            
0001B9C2                            
0001B9C2                            Touch_Special:				; XREF: Touch_ChkValue
0001B9C2 1229 0020                  		move.b	$20(a1),d1
0001B9C6 0201 003F                  		andi.b	#$3F,d1
0001B9CA 0C01 000B                  		cmpi.b	#$B,d1		; is touch response $CB	?
0001B9CE 6700                       		beq.s	Touch_CatKiller	; if yes, branch
0001B9D0 0C01 000C                  		cmpi.b	#$C,d1		; is touch response $CC	?
0001B9D4 6700                       		beq.s	Touch_Yadrin	; if yes, branch
0001B9D6 0C01 0017                  		cmpi.b	#$17,d1		; is touch response $D7	?
0001B9DA 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001B9DC 0C01 0021                  		cmpi.b	#$21,d1		; is touch response $E1	?
0001B9E0 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001B9E2 4E75                       		rts	
0001B9E4                            ; ===========================================================================
0001B9E4                            
0001B9E4                            Touch_CatKiller:			; XREF: Touch_Special
0001B9E4 6000 FEC8                  		bra.w	loc_1AFDA
0001B9E8                            ; ===========================================================================
0001B9E8                            
0001B9E8                            Touch_Yadrin:				; XREF: Touch_Special
0001B9E8 9A40                       		sub.w	d0,d5
0001B9EA 0C45 0008                  		cmpi.w	#8,d5
0001B9EE 6400                       		bcc.s	loc_1B144
0001B9F0 3029 0008                  		move.w	8(a1),d0
0001B9F4 5940                       		subq.w	#4,d0
0001B9F6 0829 0000 0022             		btst	#0,$22(a1)
0001B9FC 6700                       		beq.s	loc_1B130
0001B9FE 0440 0010                  		subi.w	#$10,d0
0001BA02                            
0001BA02                            loc_1B130:
0001BA02 9042                       		sub.w	d2,d0
0001BA04 6400                       		bcc.s	loc_1B13C
0001BA06 0640 0018                  		addi.w	#$18,d0
0001BA0A 6500                       		bcs.s	loc_1B140
0001BA0C 6000                       		bra.s	loc_1B144
0001BA0E                            ; ===========================================================================
0001BA0E                            
0001BA0E                            loc_1B13C:
0001BA0E B044                       		cmp.w	d4,d0
0001BA10 6200                       		bhi.s	loc_1B144
0001BA12                            
0001BA12                            loc_1B140:
0001BA12 6000 FEA0                  		bra.w	Touch_ChkHurt
0001BA16                            ; ===========================================================================
0001BA16                            
0001BA16                            loc_1B144:
0001BA16 6000 FDC8                  		bra.w	Touch_Enemy
0001BA1A                            ; ===========================================================================
0001BA1A                            
0001BA1A                            Touch_D7orE1:				; XREF: Touch_Special
0001BA1A 5229 0021                  		addq.b	#1,$21(a1)
0001BA1E 4E75                       		rts	
0001BA20                            ; End of function Touch_Special
0001BA20                            
0001BA20                            ; ---------------------------------------------------------------------------
0001BA20                            ; Subroutine to	show the special stage layout
0001BA20                            ; ---------------------------------------------------------------------------
0001BA20                            
0001BA20                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BA20                            
0001BA20                            
0001BA20                            SS_ShowLayout:				; XREF: SpecialStage
0001BA20 6100 0000                  		bsr.w	SS_AniWallsRings
0001BA24 6100 0000                  		bsr.w	SS_AniItems
0001BA28 3F05                       		move.w	d5,-(sp)
0001BA2A 43F8 8000                  		lea	($FFFF8000).w,a1
0001BA2E 1038 F780                  		move.b	($FFFFF780).w,d0
0001BA32 0200 00FC                  		andi.b	#$FC,d0
0001BA36 4EB9 0000 2CC4             		jsr	(CalcSine).l
0001BA3C 3800                       		move.w	d0,d4
0001BA3E 3A01                       		move.w	d1,d5
0001BA40 C9FC 0018                  		muls.w	#$18,d4
0001BA44 CBFC 0018                  		muls.w	#$18,d5
0001BA48 7400                       		moveq	#0,d2
0001BA4A 3438 F700                  		move.w	($FFFFF700).w,d2
0001BA4E 84FC 0018                  		divu.w	#$18,d2
0001BA52 4842                       		swap	d2
0001BA54 4442                       		neg.w	d2
0001BA56 0642 FF4C                  		addi.w	#-$B4,d2
0001BA5A 7600                       		moveq	#0,d3
0001BA5C 3638 F704                  		move.w	($FFFFF704).w,d3
0001BA60 86FC 0018                  		divu.w	#$18,d3
0001BA64 4843                       		swap	d3
0001BA66 4443                       		neg.w	d3
0001BA68 0643 FF4C                  		addi.w	#-$B4,d3
0001BA6C 3E3C 000F                  		move.w	#$F,d7
0001BA70                            
0001BA70                            loc_1B19E:
0001BA70 48A7 E000                  		movem.w	d0-d2,-(sp)
0001BA74 48A7 C000                  		movem.w	d0-d1,-(sp)
0001BA78 4440                       		neg.w	d0
0001BA7A C3C2                       		muls.w	d2,d1
0001BA7C C1C3                       		muls.w	d3,d0
0001BA7E 2C00                       		move.l	d0,d6
0001BA80 DC81                       		add.l	d1,d6
0001BA82 4C9F 0003                  		movem.w	(sp)+,d0-d1
0001BA86 C1C2                       		muls.w	d2,d0
0001BA88 C3C3                       		muls.w	d3,d1
0001BA8A D280                       		add.l	d0,d1
0001BA8C 2406                       		move.l	d6,d2
0001BA8E 3C3C 000F                  		move.w	#$F,d6
0001BA92                            
0001BA92                            loc_1B1C0:
0001BA92 2002                       		move.l	d2,d0
0001BA94 E080                       		asr.l	#8,d0
0001BA96 32C0                       		move.w	d0,(a1)+
0001BA98 2001                       		move.l	d1,d0
0001BA9A E080                       		asr.l	#8,d0
0001BA9C 32C0                       		move.w	d0,(a1)+
0001BA9E D485                       		add.l	d5,d2
0001BAA0 D284                       		add.l	d4,d1
0001BAA2 51CE FFEE                  		dbf	d6,loc_1B1C0
0001BAA6                            
0001BAA6 4C9F 0007                  		movem.w	(sp)+,d0-d2
0001BAAA 0643 0018                  		addi.w	#$18,d3
0001BAAE 51CF FFC0                  		dbf	d7,loc_1B19E
0001BAB2                            
0001BAB2 3A1F                       		move.w	(sp)+,d5
0001BAB4 41F9 00FF 0000             		lea	($FF0000).l,a0
0001BABA 7000                       		moveq	#0,d0
0001BABC 3038 F704                  		move.w	($FFFFF704).w,d0
0001BAC0 80FC 0018                  		divu.w	#$18,d0
0001BAC4 C0FC 0080                  		mulu.w	#$80,d0
0001BAC8 D1C0                       		adda.l	d0,a0
0001BACA 7000                       		moveq	#0,d0
0001BACC 3038 F700                  		move.w	($FFFFF700).w,d0
0001BAD0 80FC 0018                  		divu.w	#$18,d0
0001BAD4 D0C0                       		adda.w	d0,a0
0001BAD6 49F8 8000                  		lea	($FFFF8000).w,a4
0001BADA 3E3C 000F                  		move.w	#$F,d7
0001BADE                            
0001BADE                            loc_1B20C:
0001BADE 3C3C 000F                  		move.w	#$F,d6
0001BAE2                            
0001BAE2                            loc_1B210:
0001BAE2 7000                       		moveq	#0,d0
0001BAE4 1018                       		move.b	(a0)+,d0
0001BAE6 6700                       		beq.s	loc_1B268
0001BAE8 0C00 004E                  		cmpi.b	#$4E,d0
0001BAEC 6200                       		bhi.s	loc_1B268
0001BAEE 3614                       		move.w	(a4),d3
0001BAF0 0643 0120                  		addi.w	#$120,d3
0001BAF4 0C43 0070                  		cmpi.w	#$70,d3
0001BAF8 6500                       		bcs.s	loc_1B268
0001BAFA 0C43 01D0                  		cmpi.w	#$1D0,d3
0001BAFE 6400                       		bcc.s	loc_1B268
0001BB00 342C 0002                  		move.w	2(a4),d2
0001BB04 0642 00F0                  		addi.w	#$F0,d2
0001BB08 0C42 0070                  		cmpi.w	#$70,d2
0001BB0C 6500                       		bcs.s	loc_1B268
0001BB0E 0C42 0170                  		cmpi.w	#$170,d2
0001BB12 6400                       		bcc.s	loc_1B268
0001BB14 4BF9 00FF 4000             		lea	($FF4000).l,a5
0001BB1A E748                       		lsl.w	#3,d0
0001BB1C 4BF5 0000                  		lea	(a5,d0.w),a5
0001BB20 225D                       		movea.l	(a5)+,a1
0001BB22 321D                       		move.w	(a5)+,d1
0001BB24 D241                       		add.w	d1,d1
0001BB26 D2F1 1000                  		adda.w	(a1,d1.w),a1
0001BB2A 365D                       		movea.w	(a5)+,a3
0001BB2C 7200                       		moveq	#0,d1
0001BB2E 1219                       		move.b	(a1)+,d1
0001BB30 5301                       		subq.b	#1,d1
0001BB32 6B00                       		bmi.s	loc_1B268
0001BB34 4EB9 0000 DF20             		jsr	sub_D762
0001BB3A                            
0001BB3A                            loc_1B268:
0001BB3A 584C                       		addq.w	#4,a4
0001BB3C 51CE FFA4                  		dbf	d6,loc_1B210
0001BB40                            
0001BB40 41E8 0070                  		lea	$70(a0),a0
0001BB44 51CF FF98                  		dbf	d7,loc_1B20C
0001BB48                            
0001BB48 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0001BB4C 0C05 0050                  		cmpi.b	#$50,d5
0001BB50 6700                       		beq.s	loc_1B288
0001BB52 24BC 0000 0000             		move.l	#0,(a2)
0001BB58 4E75                       		rts	
0001BB5A                            ; ===========================================================================
0001BB5A                            
0001BB5A                            loc_1B288:
0001BB5A 157C 0000 FFFB             		move.b	#0,-5(a2)
0001BB60 4E75                       		rts	
0001BB62                            ; End of function SS_ShowLayout
0001BB62                            
0001BB62                            ; ---------------------------------------------------------------------------
0001BB62                            ; Subroutine to	animate	walls and rings	in the special stage
0001BB62                            ; ---------------------------------------------------------------------------
0001BB62                            
0001BB62                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BB62                            
0001BB62                            
0001BB62                            SS_AniWallsRings:			; XREF: SS_ShowLayout
0001BB62 43F9 00FF 400C             		lea	($FF400C).l,a1
0001BB68 7000                       		moveq	#0,d0
0001BB6A 1038 F780                  		move.b	($FFFFF780).w,d0
0001BB6E E408                       		lsr.b	#2,d0
0001BB70 0240 000F                  		andi.w	#$F,d0
0001BB74 7223                       		moveq	#$23,d1
0001BB76                            
0001BB76                            loc_1B2A4:
0001BB76 3280                       		move.w	d0,(a1)
0001BB78 5049                       		addq.w	#8,a1
0001BB7A 51C9 FFFA                  		dbf	d1,loc_1B2A4
0001BB7E                            
0001BB7E 43F9 00FF 4005             		lea	($FF4005).l,a1
0001BB84 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
0001BB88 6A00                       		bpl.s	loc_1B2C8
0001BB8A 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
0001BB90 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
0001BB94 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
0001BB9A                            
0001BB9A                            loc_1B2C8:
0001BB9A 1378 FEC3 01D0             		move.b	($FFFFFEC3).w,$1D0(a1)
0001BBA0 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
0001BBA4 6A00                       		bpl.s	loc_1B2E4
0001BBA6 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
0001BBAC 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
0001BBB0 0238 0001 FEC5             		andi.b	#1,($FFFFFEC5).w
0001BBB6                            
0001BBB6                            loc_1B2E4:
0001BBB6 1038 FEC5                  		move.b	($FFFFFEC5).w,d0
0001BBBA 1340 0138                  		move.b	d0,$138(a1)
0001BBBE 1340 0160                  		move.b	d0,$160(a1)
0001BBC2 1340 0148                  		move.b	d0,$148(a1)
0001BBC6 1340 0150                  		move.b	d0,$150(a1)
0001BBCA 1340 01D8                  		move.b	d0,$1D8(a1)
0001BBCE 1340 01E0                  		move.b	d0,$1E0(a1)
0001BBD2 1340 01E8                  		move.b	d0,$1E8(a1)
0001BBD6 1340 01F0                  		move.b	d0,$1F0(a1)
0001BBDA 1340 01F8                  		move.b	d0,$1F8(a1)
0001BBDE 1340 0200                  		move.b	d0,$200(a1)
0001BBE2 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
0001BBE6 6A00                       		bpl.s	loc_1B326
0001BBE8 11FC 0004 FEC6             		move.b	#4,($FFFFFEC6).w
0001BBEE 5238 FEC7                  		addq.b	#1,($FFFFFEC7).w
0001BBF2 0238 0003 FEC7             		andi.b	#3,($FFFFFEC7).w
0001BBF8                            
0001BBF8                            loc_1B326:
0001BBF8 1038 FEC7                  		move.b	($FFFFFEC7).w,d0
0001BBFC 1340 0168                  		move.b	d0,$168(a1)
0001BC00 1340 0170                  		move.b	d0,$170(a1)
0001BC04 1340 0178                  		move.b	d0,$178(a1)
0001BC08 1340 0180                  		move.b	d0,$180(a1)
0001BC0C 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
0001BC10 6A00                       		bpl.s	loc_1B350
0001BC12 11FC 0007 FEC0             		move.b	#7,($FFFFFEC0).w
0001BC18 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
0001BC1C 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
0001BC22                            
0001BC22                            loc_1B350:
0001BC22 43F9 00FF 4016             		lea	($FF4016).l,a1
0001BC28 41F9 0000 0000             		lea	(SS_WaRiVramSet).l,a0
0001BC2E 7000                       		moveq	#0,d0
0001BC30 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
0001BC34 D040                       		add.w	d0,d0
0001BC36 41F0 0000                  		lea	(a0,d0.w),a0
0001BC3A 3290                       		move.w	(a0),(a1)
0001BC3C 3368 0002 0008             		move.w	2(a0),8(a1)
0001BC42 3368 0004 0010             		move.w	4(a0),$10(a1)
0001BC48 3368 0006 0018             		move.w	6(a0),$18(a1)
0001BC4E 3368 0008 0020             		move.w	8(a0),$20(a1)
0001BC54 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001BC5A 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001BC60 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001BC66 D0FC 0020                  		adda.w	#$20,a0
0001BC6A D2FC 0048                  		adda.w	#$48,a1
0001BC6E 3290                       		move.w	(a0),(a1)
0001BC70 3368 0002 0008             		move.w	2(a0),8(a1)
0001BC76 3368 0004 0010             		move.w	4(a0),$10(a1)
0001BC7C 3368 0006 0018             		move.w	6(a0),$18(a1)
0001BC82 3368 0008 0020             		move.w	8(a0),$20(a1)
0001BC88 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001BC8E 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001BC94 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001BC9A D0FC 0020                  		adda.w	#$20,a0
0001BC9E D2FC 0048                  		adda.w	#$48,a1
0001BCA2 3290                       		move.w	(a0),(a1)
0001BCA4 3368 0002 0008             		move.w	2(a0),8(a1)
0001BCAA 3368 0004 0010             		move.w	4(a0),$10(a1)
0001BCB0 3368 0006 0018             		move.w	6(a0),$18(a1)
0001BCB6 3368 0008 0020             		move.w	8(a0),$20(a1)
0001BCBC 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001BCC2 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001BCC8 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001BCCE D0FC 0020                  		adda.w	#$20,a0
0001BCD2 D2FC 0048                  		adda.w	#$48,a1
0001BCD6 3290                       		move.w	(a0),(a1)
0001BCD8 3368 0002 0008             		move.w	2(a0),8(a1)
0001BCDE 3368 0004 0010             		move.w	4(a0),$10(a1)
0001BCE4 3368 0006 0018             		move.w	6(a0),$18(a1)
0001BCEA 3368 0008 0020             		move.w	8(a0),$20(a1)
0001BCF0 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001BCF6 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001BCFC 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001BD02 D0FC 0020                  		adda.w	#$20,a0
0001BD06 D2FC 0048                  		adda.w	#$48,a1
0001BD0A 4E75                       		rts	
0001BD0C                            ; End of function SS_AniWallsRings
0001BD0C                            
0001BD0C                            ; ===========================================================================
0001BD0C 0142 6142 0142 0142 0142+  SS_WaRiVramSet:	dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001BD1C 0142 6142 0142 0142 0142+  		dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001BD2C 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001BD3C 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001BD4C 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001BD5C 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001BD6C 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001BD7C 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001BD8C                            ; ---------------------------------------------------------------------------
0001BD8C                            ; Subroutine to	remove items when you collect them in the special stage
0001BD8C                            ; ---------------------------------------------------------------------------
0001BD8C                            
0001BD8C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BD8C                            
0001BD8C                            
0001BD8C                            SS_RemoveCollectedItem:			; XREF: Obj09_ChkItems
0001BD8C 45F9 00FF 4400             		lea	($FF4400).l,a2
0001BD92 303C 001F                  		move.w	#$1F,d0
0001BD96                            
0001BD96                            loc_1B4C4:
0001BD96 4A12                       		tst.b	(a2)
0001BD98 6700                       		beq.s	locret_1B4CE
0001BD9A 504A                       		addq.w	#8,a2
0001BD9C 51C8 FFF8                  		dbf	d0,loc_1B4C4
0001BDA0                            
0001BDA0                            locret_1B4CE:
0001BDA0 4E75                       		rts	
0001BDA2                            ; End of function SS_RemoveCollectedItem
0001BDA2                            
0001BDA2                            ; ---------------------------------------------------------------------------
0001BDA2                            ; Subroutine to	animate	special	stage items when you touch them
0001BDA2                            ; ---------------------------------------------------------------------------
0001BDA2                            
0001BDA2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BDA2                            
0001BDA2                            
0001BDA2                            SS_AniItems:				; XREF: SS_ShowLayout
0001BDA2 41F9 00FF 4400             		lea	($FF4400).l,a0
0001BDA8 3E3C 001F                  		move.w	#$1F,d7
0001BDAC                            
0001BDAC                            loc_1B4DA:
0001BDAC 7000                       		moveq	#0,d0
0001BDAE 1010                       		move.b	(a0),d0
0001BDB0 6700                       		beq.s	loc_1B4E8
0001BDB2 E548                       		lsl.w	#2,d0
0001BDB4 227B 0000                  		movea.l	SS_AniIndex-4(pc,d0.w),a1
0001BDB8 4E91                       		jsr	(a1)
0001BDBA                            
0001BDBA                            loc_1B4E8:
0001BDBA 5048                       		addq.w	#8,a0
0001BDBC                            
0001BDBC                            loc_1B4EA:
0001BDBC 51CF FFEE                  		dbf	d7,loc_1B4DA
0001BDC0                            
0001BDC0 4E75                       		rts	
0001BDC2                            ; End of function SS_AniItems
0001BDC2                            
0001BDC2                            ; ===========================================================================
0001BDC2 0000 0000                  SS_AniIndex:	dc.l SS_AniRingSparks
0001BDC6 0000 0000                  		dc.l SS_AniBumper
0001BDCA 0000 0000                  		dc.l SS_Ani1Up
0001BDCE 0000 0000                  		dc.l SS_AniReverse
0001BDD2 0000 0000                  		dc.l SS_AniEmeraldSparks
0001BDD6 0000 0000                  		dc.l SS_AniGlassBlock
0001BDDA                            ; ===========================================================================
0001BDDA                            
0001BDDA                            SS_AniRingSparks:			; XREF: SS_AniIndex
0001BDDA 5328 0002                  		subq.b	#1,2(a0)
0001BDDE 6A00                       		bpl.s	locret_1B530
0001BDE0 117C 0005 0002             		move.b	#5,2(a0)
0001BDE6 7000                       		moveq	#0,d0
0001BDE8 1028 0003                  		move.b	3(a0),d0
0001BDEC 5228 0003                  		addq.b	#1,3(a0)
0001BDF0 2268 0004                  		movea.l	4(a0),a1
0001BDF4 103B 0000                  		move.b	SS_AniRingData(pc,d0.w),d0
0001BDF8 1280                       		move.b	d0,(a1)
0001BDFA 6600                       		bne.s	locret_1B530
0001BDFC 4290                       		clr.l	(a0)
0001BDFE 42A8 0004                  		clr.l	4(a0)
0001BE02                            
0001BE02                            locret_1B530:
0001BE02 4E75                       		rts	
0001BE04                            ; ===========================================================================
0001BE04 4243 4445 0000             SS_AniRingData:	dc.b $42, $43, $44, $45, 0, 0
0001BE0A                            ; ===========================================================================
0001BE0A                            
0001BE0A                            SS_AniBumper:				; XREF: SS_AniIndex
0001BE0A 5328 0002                  		subq.b	#1,2(a0)
0001BE0E 6A00                       		bpl.s	locret_1B566
0001BE10 117C 0007 0002             		move.b	#7,2(a0)
0001BE16 7000                       		moveq	#0,d0
0001BE18 1028 0003                  		move.b	3(a0),d0
0001BE1C 5228 0003                  		addq.b	#1,3(a0)
0001BE20 2268 0004                  		movea.l	4(a0),a1
0001BE24 103B 0000                  		move.b	SS_AniBumpData(pc,d0.w),d0
0001BE28 6600                       		bne.s	loc_1B564
0001BE2A 4290                       		clr.l	(a0)
0001BE2C 42A8 0004                  		clr.l	4(a0)
0001BE30 12BC 0025                  		move.b	#$25,(a1)
0001BE34 4E75                       		rts	
0001BE36                            ; ===========================================================================
0001BE36                            
0001BE36                            loc_1B564:
0001BE36 1280                       		move.b	d0,(a1)
0001BE38                            
0001BE38                            locret_1B566:
0001BE38 4E75                       		rts	
0001BE3A                            ; ===========================================================================
0001BE3A 3233 3233 0000             SS_AniBumpData:	dc.b $32, $33, $32, $33, 0, 0
0001BE40                            ; ===========================================================================
0001BE40                            
0001BE40                            SS_Ani1Up:				; XREF: SS_AniIndex
0001BE40 5328 0002                  		subq.b	#1,2(a0)
0001BE44 6A00                       		bpl.s	locret_1B596
0001BE46 117C 0005 0002             		move.b	#5,2(a0)
0001BE4C 7000                       		moveq	#0,d0
0001BE4E 1028 0003                  		move.b	3(a0),d0
0001BE52 5228 0003                  		addq.b	#1,3(a0)
0001BE56 2268 0004                  		movea.l	4(a0),a1
0001BE5A 103B 0000                  		move.b	SS_Ani1UpData(pc,d0.w),d0
0001BE5E 1280                       		move.b	d0,(a1)
0001BE60 6600                       		bne.s	locret_1B596
0001BE62 4290                       		clr.l	(a0)
0001BE64 42A8 0004                  		clr.l	4(a0)
0001BE68                            
0001BE68                            locret_1B596:
0001BE68 4E75                       		rts	
0001BE6A                            ; ===========================================================================
0001BE6A 4647 4849 0000             SS_Ani1UpData:	dc.b $46, $47, $48, $49, 0, 0
0001BE70                            ; ===========================================================================
0001BE70                            
0001BE70                            SS_AniReverse:				; XREF: SS_AniIndex
0001BE70 5328 0002                  		subq.b	#1,2(a0)
0001BE74 6A00                       		bpl.s	locret_1B5CC
0001BE76 117C 0007 0002             		move.b	#7,2(a0)
0001BE7C 7000                       		moveq	#0,d0
0001BE7E 1028 0003                  		move.b	3(a0),d0
0001BE82 5228 0003                  		addq.b	#1,3(a0)
0001BE86 2268 0004                  		movea.l	4(a0),a1
0001BE8A 103B 0000                  		move.b	SS_AniRevData(pc,d0.w),d0
0001BE8E 6600                       		bne.s	loc_1B5CA
0001BE90 4290                       		clr.l	(a0)
0001BE92 42A8 0004                  		clr.l	4(a0)
0001BE96 12BC 002B                  		move.b	#$2B,(a1)
0001BE9A 4E75                       		rts	
0001BE9C                            ; ===========================================================================
0001BE9C                            
0001BE9C                            loc_1B5CA:
0001BE9C 1280                       		move.b	d0,(a1)
0001BE9E                            
0001BE9E                            locret_1B5CC:
0001BE9E 4E75                       		rts	
0001BEA0                            ; ===========================================================================
0001BEA0 2B31 2B31 0000             SS_AniRevData:	dc.b $2B, $31, $2B, $31, 0, 0
0001BEA6                            ; ===========================================================================
0001BEA6                            
0001BEA6                            SS_AniEmeraldSparks:			; XREF: SS_AniIndex
0001BEA6 5328 0002                  		subq.b	#1,2(a0)
0001BEAA 6A00                       		bpl.s	locret_1B60C
0001BEAC 117C 0005 0002             		move.b	#5,2(a0)
0001BEB2 7000                       		moveq	#0,d0
0001BEB4 1028 0003                  		move.b	3(a0),d0
0001BEB8 5228 0003                  		addq.b	#1,3(a0)
0001BEBC 2268 0004                  		movea.l	4(a0),a1
0001BEC0 103B 0000                  		move.b	SS_AniEmerData(pc,d0.w),d0
0001BEC4 1280                       		move.b	d0,(a1)
0001BEC6 6600                       		bne.s	locret_1B60C
0001BEC8 4290                       		clr.l	(a0)
0001BECA 42A8 0004                  		clr.l	4(a0)
0001BECE 11FC 0004 D024             		move.b	#4,($FFFFD024).w
0001BED4 303C 00A8                  		move.w	#$A8,d0
0001BED8 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play special stage GOAL	sound
0001BEDE                            
0001BEDE                            locret_1B60C:
0001BEDE 4E75                       		rts	
0001BEE0                            ; ===========================================================================
0001BEE0 4647 4849 0000             SS_AniEmerData:	dc.b $46, $47, $48, $49, 0, 0
0001BEE6                            ; ===========================================================================
0001BEE6                            
0001BEE6                            SS_AniGlassBlock:			; XREF: SS_AniIndex
0001BEE6 5328 0002                  		subq.b	#1,2(a0)
0001BEEA 6A00                       		bpl.s	locret_1B640
0001BEEC 117C 0001 0002             		move.b	#1,2(a0)
0001BEF2 7000                       		moveq	#0,d0
0001BEF4 1028 0003                  		move.b	3(a0),d0
0001BEF8 5228 0003                  		addq.b	#1,3(a0)
0001BEFC 2268 0004                  		movea.l	4(a0),a1
0001BF00 103B 0000                  		move.b	SS_AniGlassData(pc,d0.w),d0
0001BF04 1280                       		move.b	d0,(a1)
0001BF06 6600                       		bne.s	locret_1B640
0001BF08 12A8 0004                  		move.b	4(a0),(a1)
0001BF0C 4290                       		clr.l	(a0)
0001BF0E 42A8 0004                  		clr.l	4(a0)
0001BF12                            
0001BF12                            locret_1B640:
0001BF12 4E75                       		rts	
0001BF14                            ; ===========================================================================
0001BF14 4B4C 4D4E 4B4C 4D4E 0000   SS_AniGlassData:dc.b $4B, $4C, $4D, $4E, $4B, $4C, $4D,	$4E, 0,	0
0001BF1E                            ; ---------------------------------------------------------------------------
0001BF1E                            ; Special stage	layout pointers
0001BF1E                            ; ---------------------------------------------------------------------------
0001BF1E                            SS_LayoutIndex:
0001BF1E                            	include "_inc\Special stage layout pointers.asm"
0001BF1E                            ; ---------------------------------------------------------------------------
0001BF1E                            ; Special stage	layout pointers
0001BF1E                            ; ---------------------------------------------------------------------------
0001BF1E 0000 0000                  	dc.l SS_1
0001BF22 0000 0000                  	dc.l SS_2
0001BF26 0000 0000                  	dc.l SS_3
0001BF2A 0000 0000                  	dc.l SS_4
0001BF2E 0000 0000                  	dc.l SS_5
0001BF32 0000 0000                  	dc.l SS_6
0001BF36                            	even
0001BF36                            	even
0001BF36                            
0001BF36                            ; ---------------------------------------------------------------------------
0001BF36                            ; Special stage	start locations
0001BF36                            ; ---------------------------------------------------------------------------
0001BF36                            SS_StartLoc:	incbin	misc\sloc_ss.bin
0001BF4E                            		even
0001BF4E                            
0001BF4E                            ; ---------------------------------------------------------------------------
0001BF4E                            ; Subroutine to	load special stage layout
0001BF4E                            ; ---------------------------------------------------------------------------
0001BF4E                            
0001BF4E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BF4E                            
0001BF4E                            
0001BF4E                            SS_Load:				; XREF: SpecialStage
0001BF4E 7000                       		moveq	#0,d0
0001BF50 1038 FE16                  		move.b	($FFFFFE16).w,d0 ; load	number of last special stage entered
0001BF54 5238 FE16                  		addq.b	#1,($FFFFFE16).w
0001BF58 0C38 0006 FE16             		cmpi.b	#6,($FFFFFE16).w
0001BF5E 6500                       		bcs.s	SS_ChkEmldNum
0001BF60 11FC 0000 FE16             		move.b	#0,($FFFFFE16).w ; reset if higher than	6
0001BF66                            
0001BF66                            SS_ChkEmldNum:
0001BF66 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all emeralds?
0001BF6C 6700                       		beq.s	SS_LoadData	; if yes, branch
0001BF6E 7200                       		moveq	#0,d1
0001BF70 1238 FE57                  		move.b	($FFFFFE57).w,d1
0001BF74 5301                       		subq.b	#1,d1
0001BF76 6500                       		bcs.s	SS_LoadData
0001BF78 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0001BF7C                            
0001BF7C                            SS_ChkEmldLoop:	
0001BF7C B033 1000                  		cmp.b	(a3,d1.w),d0
0001BF80 6600                       		bne.s	SS_ChkEmldRepeat
0001BF82 60CA                       		bra.s	SS_Load
0001BF84                            ; ===========================================================================
0001BF84                            
0001BF84                            SS_ChkEmldRepeat:
0001BF84 51C9 FFF6                  		dbf	d1,SS_ChkEmldLoop
0001BF88                            
0001BF88                            SS_LoadData:
0001BF88 E548                       		lsl.w	#2,d0
0001BF8A 43FB 00AA                  		lea	SS_StartLoc(pc,d0.w),a1
0001BF8E 31D9 D008                  		move.w	(a1)+,($FFFFD008).w
0001BF92 31D9 D00C                  		move.w	(a1)+,($FFFFD00C).w
0001BF96 207B 0086                  		movea.l	SS_LayoutIndex(pc,d0.w),a0
0001BF9A 43F9 00FF 4000             		lea	($FF4000).l,a1
0001BFA0 303C 0000                  		move.w	#0,d0
0001BFA4 4EB9 0000 1942             		jsr	(EniDec).l
0001BFAA 43F9 00FF 0000             		lea	($FF0000).l,a1
0001BFB0 303C 0FFF                  		move.w	#$FFF,d0
0001BFB4                            
0001BFB4                            SS_ClrRAM3:
0001BFB4 4299                       		clr.l	(a1)+
0001BFB6 51C8 FFFC                  		dbf	d0,SS_ClrRAM3
0001BFBA                            
0001BFBA 43F9 00FF 1020             		lea	($FF1020).l,a1
0001BFC0 41F9 00FF 4000             		lea	($FF4000).l,a0
0001BFC6 723F                       		moveq	#$3F,d1
0001BFC8                            
0001BFC8                            loc_1B6F6:
0001BFC8 743F                       		moveq	#$3F,d2
0001BFCA                            
0001BFCA                            loc_1B6F8:
0001BFCA 12D8                       		move.b	(a0)+,(a1)+
0001BFCC 51CA FFFC                  		dbf	d2,loc_1B6F8
0001BFD0                            
0001BFD0 43E9 0040                  		lea	$40(a1),a1
0001BFD4 51C9 FFF2                  		dbf	d1,loc_1B6F6
0001BFD8                            
0001BFD8 43F9 00FF 4008             		lea	($FF4008).l,a1
0001BFDE 41F9 0000 0000             		lea	(SS_MapIndex).l,a0
0001BFE4 724D                       		moveq	#$4D,d1
0001BFE6                            
0001BFE6                            loc_1B714:
0001BFE6 22D8                       		move.l	(a0)+,(a1)+
0001BFE8 32FC 0000                  		move.w	#0,(a1)+
0001BFEC 1368 FFFC FFFF             		move.b	-4(a0),-1(a1)
0001BFF2 32D8                       		move.w	(a0)+,(a1)+
0001BFF4 51C9 FFF0                  		dbf	d1,loc_1B714
0001BFF8                            
0001BFF8 43F9 00FF 4400             		lea	($FF4400).l,a1
0001BFFE 323C 003F                  		move.w	#$3F,d1
0001C002                            
0001C002                            loc_1B730:
0001C002                            
0001C002 4299                       		clr.l	(a1)+
0001C004 51C9 FFFC                  		dbf	d1,loc_1B730
0001C008                            
0001C008 4E75                       		rts	
0001C00A                            ; End of function SS_Load
0001C00A                            
0001C00A                            ; ===========================================================================
0001C00A                            ; ---------------------------------------------------------------------------
0001C00A                            ; Special stage	mappings and VRAM pointers
0001C00A                            ; ---------------------------------------------------------------------------
0001C00A                            SS_MapIndex:
0001C00A                            	include "_inc\Special stage mappings and VRAM pointers.asm"
0001C00A                            ; ---------------------------------------------------------------------------
0001C00A                            ; Special stage	mappings and VRAM pointers
0001C00A                            ; ---------------------------------------------------------------------------
0001C00A 0000 0000                  	dc.l Map_SSWalls	; address of mappings
0001C00E 0142                       	dc.w $142		; VRAM setting
0001C010 0000 0000                  	dc.l Map_SSWalls
0001C014 0142                       	dc.w $142
0001C016 0000 0000                  	dc.l Map_SSWalls
0001C01A 0142                       	dc.w $142
0001C01C 0000 0000                  	dc.l Map_SSWalls
0001C020 0142                       	dc.w $142
0001C022 0000 0000                  	dc.l Map_SSWalls
0001C026 0142                       	dc.w $142
0001C028 0000 0000                  	dc.l Map_SSWalls
0001C02C 0142                       	dc.w $142
0001C02E 0000 0000                  	dc.l Map_SSWalls
0001C032 0142                       	dc.w $142
0001C034 0000 0000                  	dc.l Map_SSWalls
0001C038 0142                       	dc.w $142
0001C03A 0000 0000                  	dc.l Map_SSWalls
0001C03E 0142                       	dc.w $142
0001C040 0000 0000                  	dc.l Map_SSWalls
0001C044 2142                       	dc.w $2142
0001C046 0000 0000                  	dc.l Map_SSWalls
0001C04A 2142                       	dc.w $2142
0001C04C 0000 0000                  	dc.l Map_SSWalls
0001C050 2142                       	dc.w $2142
0001C052 0000 0000                  	dc.l Map_SSWalls
0001C056 2142                       	dc.w $2142
0001C058 0000 0000                  	dc.l Map_SSWalls
0001C05C 2142                       	dc.w $2142
0001C05E 0000 0000                  	dc.l Map_SSWalls
0001C062 2142                       	dc.w $2142
0001C064 0000 0000                  	dc.l Map_SSWalls
0001C068 2142                       	dc.w $2142
0001C06A 0000 0000                  	dc.l Map_SSWalls
0001C06E 2142                       	dc.w $2142
0001C070 0000 0000                  	dc.l Map_SSWalls
0001C074 2142                       	dc.w $2142
0001C076 0000 0000                  	dc.l Map_SSWalls
0001C07A 4142                       	dc.w $4142
0001C07C 0000 0000                  	dc.l Map_SSWalls
0001C080 4142                       	dc.w $4142
0001C082 0000 0000                  	dc.l Map_SSWalls
0001C086 4142                       	dc.w $4142
0001C088 0000 0000                  	dc.l Map_SSWalls
0001C08C 4142                       	dc.w $4142
0001C08E 0000 0000                  	dc.l Map_SSWalls
0001C092 4142                       	dc.w $4142
0001C094 0000 0000                  	dc.l Map_SSWalls
0001C098 4142                       	dc.w $4142
0001C09A 0000 0000                  	dc.l Map_SSWalls
0001C09E 4142                       	dc.w $4142
0001C0A0 0000 0000                  	dc.l Map_SSWalls
0001C0A4 4142                       	dc.w $4142
0001C0A6 0000 0000                  	dc.l Map_SSWalls
0001C0AA 4142                       	dc.w $4142
0001C0AC 0000 0000                  	dc.l Map_SSWalls
0001C0B0 6142                       	dc.w $6142
0001C0B2 0000 0000                  	dc.l Map_SSWalls
0001C0B6 6142                       	dc.w $6142
0001C0B8 0000 0000                  	dc.l Map_SSWalls
0001C0BC 6142                       	dc.w $6142
0001C0BE 0000 0000                  	dc.l Map_SSWalls
0001C0C2 6142                       	dc.w $6142
0001C0C4 0000 0000                  	dc.l Map_SSWalls
0001C0C8 6142                       	dc.w $6142
0001C0CA 0000 0000                  	dc.l Map_SSWalls
0001C0CE 6142                       	dc.w $6142
0001C0D0 0000 0000                  	dc.l Map_SSWalls
0001C0D4 6142                       	dc.w $6142
0001C0D6 0000 0000                  	dc.l Map_SSWalls
0001C0DA 6142                       	dc.w $6142
0001C0DC 0000 0000                  	dc.l Map_SSWalls
0001C0E0 6142                       	dc.w $6142
0001C0E2 0000 F2B6                  	dc.l Map_obj47
0001C0E6 023B                       	dc.w $23B
0001C0E8 0000 0000                  	dc.l Map_SS_R
0001C0EC 0570                       	dc.w $570
0001C0EE 0000 0000                  	dc.l Map_SS_R
0001C0F2 0251                       	dc.w $251
0001C0F4 0000 0000                  	dc.l Map_SS_R
0001C0F8 0370                       	dc.w $370
0001C0FA 0000 0000                  	dc.l Map_SS_Up
0001C0FE 0263                       	dc.w $263
0001C100 0000 0000                  	dc.l Map_SS_Down
0001C104 0263                       	dc.w $263
0001C106 0000 0000                  	dc.l Map_SS_R
0001C10A 22F0                       	dc.w $22F0
0001C10C 0000 0000                  	dc.l Map_SS_Glass
0001C110 0470                       	dc.w $470
0001C112 0000 0000                  	dc.l Map_SS_Glass
0001C116 05F0                       	dc.w $5F0
0001C118 0000 0000                  	dc.l Map_SS_Glass
0001C11C 65F0                       	dc.w $65F0
0001C11E 0000 0000                  	dc.l Map_SS_Glass
0001C122 25F0                       	dc.w $25F0
0001C124 0000 0000                  	dc.l Map_SS_Glass
0001C128 45F0                       	dc.w $45F0
0001C12A 0000 0000                  	dc.l Map_SS_R
0001C12E 02F0                       	dc.w $2F0
0001C130 0100 F2B6                  	dc.l Map_obj47+$1000000	; add frame no.	* $1000000
0001C134 023B                       	dc.w $23B
0001C136 0200 F2B6                  	dc.l Map_obj47+$2000000
0001C13A 023B                       	dc.w $23B
0001C13C 0000 0000                  	dc.l Map_SS_R
0001C140 0797                       	dc.w $797
0001C142 0000 0000                  	dc.l Map_SS_R
0001C146 07A0                       	dc.w $7A0
0001C148 0000 0000                  	dc.l Map_SS_R
0001C14C 07A9                       	dc.w $7A9
0001C14E 0000 0000                  	dc.l Map_SS_R
0001C152 0797                       	dc.w $797
0001C154 0000 0000                  	dc.l Map_SS_R
0001C158 07A0                       	dc.w $7A0
0001C15A 0000 0000                  	dc.l Map_SS_R
0001C15E 07A9                       	dc.w $7A9
0001C160 0000 A620                  	dc.l Map_obj25
0001C164 27B2                       	dc.w $27B2
0001C166 0000 0000                  	dc.l Map_SS_Chaos3
0001C16A 0770                       	dc.w $770
0001C16C 0000 0000                  	dc.l Map_SS_Chaos3
0001C170 2770                       	dc.w $2770
0001C172 0000 0000                  	dc.l Map_SS_Chaos3
0001C176 4770                       	dc.w $4770
0001C178 0000 0000                  	dc.l Map_SS_Chaos3
0001C17C 6770                       	dc.w $6770
0001C17E 0000 0000                  	dc.l Map_SS_Chaos1
0001C182 0770                       	dc.w $770
0001C184 0000 0000                  	dc.l Map_SS_Chaos2
0001C188 0770                       	dc.w $770
0001C18A 0000 0000                  	dc.l Map_SS_R
0001C18E 04F0                       	dc.w $4F0
0001C190 0400 A620                  	dc.l Map_obj25+$4000000
0001C194 27B2                       	dc.w $27B2
0001C196 0500 A620                  	dc.l Map_obj25+$5000000
0001C19A 27B2                       	dc.w $27B2
0001C19C 0600 A620                  	dc.l Map_obj25+$6000000
0001C1A0 27B2                       	dc.w $27B2
0001C1A2 0700 A620                  	dc.l Map_obj25+$7000000
0001C1A6 27B2                       	dc.w $27B2
0001C1A8 0000 0000                  	dc.l Map_SS_Glass
0001C1AC 23F0                       	dc.w $23F0
0001C1AE 0000 0000                  	dc.l Map_SS_Glass+$1000000
0001C1B2 23F0                       	dc.w $23F0
0001C1B4 0000 0000                  	dc.l Map_SS_Glass+$2000000
0001C1B8 23F0                       	dc.w $23F0
0001C1BA 0000 0000                  	dc.l Map_SS_Glass+$3000000
0001C1BE 23F0                       	dc.w $23F0
0001C1C0 0000 0000                  	dc.l Map_SS_R+$2000000
0001C1C4 04F0                       	dc.w $4F0
0001C1C6 0000 0000                  	dc.l Map_SS_Glass
0001C1CA 05F0                       	dc.w $5F0
0001C1CC 0000 0000                  	dc.l Map_SS_Glass
0001C1D0 65F0                       	dc.w $65F0
0001C1D2 0000 0000                  	dc.l Map_SS_Glass
0001C1D6 25F0                       	dc.w $25F0
0001C1D8 0000 0000                  	dc.l Map_SS_Glass
0001C1DC 45F0                       	dc.w $45F0
0001C1DC 45F0                       	dc.w $45F0
0001C1DE                            
0001C1DE                            ; ---------------------------------------------------------------------------
0001C1DE                            ; Sprite mappings - special stage "R" block
0001C1DE                            ; ---------------------------------------------------------------------------
0001C1DE                            Map_SS_R:
0001C1DE                            	include "_maps\SSRblock.asm"
0001C1DE                            ; ---------------------------------------------------------------------------
0001C1DE                            ; Sprite mappings - special stage "R" block
0001C1DE                            ; ---------------------------------------------------------------------------
0001C1DE 0000 0000                  		dc.w byte_1B912-Map_SS_R, byte_1B918-Map_SS_R
0001C1E2 0000                       		dc.w byte_1B91E-Map_SS_R
0001C1E4 01                         byte_1B912:	dc.b 1
0001C1E5 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001C1EA 01                         byte_1B918:	dc.b 1
0001C1EB F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001C1F0 00                         byte_1B91E:	dc.b 0
0001C1F2 00                         		even
0001C1F2 00                         		even
0001C1F2                            
0001C1F2                            ; ---------------------------------------------------------------------------
0001C1F2                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001C1F2                            ; ---------------------------------------------------------------------------
0001C1F2                            Map_SS_Glass:
0001C1F2                            	include "_maps\SSglassblock.asm"
0001C1F2                            ; ---------------------------------------------------------------------------
0001C1F2                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001C1F2                            ; ---------------------------------------------------------------------------
0001C1F2 0000 0000                  		dc.w byte_1B928-Map_SS_Glass, byte_1B92E-Map_SS_Glass
0001C1F6 0000 0000                  		dc.w byte_1B934-Map_SS_Glass, byte_1B93A-Map_SS_Glass
0001C1FA 01                         byte_1B928:	dc.b 1
0001C1FB F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001C200 01                         byte_1B92E:	dc.b 1
0001C201 F40A 0800 F4               		dc.b $F4, $A, 8, 0, $F4
0001C206 01                         byte_1B934:	dc.b 1
0001C207 F40A 1800 F4               		dc.b $F4, $A, $18, 0, $F4
0001C20C 01                         byte_1B93A:	dc.b 1
0001C20D F40A 1000 F4               		dc.b $F4, $A, $10, 0, $F4
0001C212                            		even
0001C212                            		even
0001C212                            
0001C212                            ; ---------------------------------------------------------------------------
0001C212                            ; Sprite mappings - special stage "UP" block
0001C212                            ; ---------------------------------------------------------------------------
0001C212                            Map_SS_Up:
0001C212                            	include "_maps\SSUPblock.asm"
0001C212                            ; ---------------------------------------------------------------------------
0001C212                            ; Sprite mappings - special stage "UP" block
0001C212                            ; ---------------------------------------------------------------------------
0001C212 0000                       		dc.w byte_1B944-Map_SS_Up
0001C214 0000                       		dc.w byte_1B94A-Map_SS_Up
0001C216 01                         byte_1B944:	dc.b 1
0001C217 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001C21C 01                         byte_1B94A:	dc.b 1
0001C21D F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001C222                            		even
0001C222                            		even
0001C222                            
0001C222                            ; ---------------------------------------------------------------------------
0001C222                            ; Sprite mappings - special stage "DOWN" block
0001C222                            ; ---------------------------------------------------------------------------
0001C222                            Map_SS_Down:
0001C222                            	include "_maps\SSDOWNblock.asm"
0001C222                            ; ---------------------------------------------------------------------------
0001C222                            ; Sprite mappings - special stage "DOWN" block
0001C222                            ; ---------------------------------------------------------------------------
0001C222 0000                       		dc.w byte_1B954-Map_SS_Down
0001C224 0000                       		dc.w byte_1B95A-Map_SS_Down
0001C226 01                         byte_1B954:	dc.b 1
0001C227 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001C22C 01                         byte_1B95A:	dc.b 1
0001C22D F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001C232                            		even
0001C232                            		even
0001C232                            
0001C232                            ; ---------------------------------------------------------------------------
0001C232                            ; Sprite mappings - special stage chaos	emeralds
0001C232                            ; ---------------------------------------------------------------------------
0001C232 0000                       Map_SS_Chaos1:	dc.w byte_1B96C-Map_SS_Chaos1
0001C234 0000                       		dc.w byte_1B97E-Map_SS_Chaos1
0001C236 0000                       Map_SS_Chaos2:	dc.w byte_1B972-Map_SS_Chaos2
0001C238 0000                       		dc.w byte_1B97E-Map_SS_Chaos2
0001C23A 0000                       Map_SS_Chaos3:	dc.w byte_1B978-Map_SS_Chaos3
0001C23C 0000                       		dc.w byte_1B97E-Map_SS_Chaos3
0001C23E 01                         byte_1B96C:	dc.b 1
0001C23F F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001C244 01                         byte_1B972:	dc.b 1
0001C245 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0001C24A 01                         byte_1B978:	dc.b 1
0001C24B F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0001C250 01                         byte_1B97E:	dc.b 1
0001C251 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001C256                            		even
0001C256                            ; ===========================================================================
0001C256                            ; ---------------------------------------------------------------------------
0001C256                            ; Object 09 - Sonic (special stage)
0001C256                            ; ---------------------------------------------------------------------------
0001C256                            
0001C256                            Obj09:					; XREF: Obj_Index
0001C256 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
0001C25A 6700                       		beq.s	Obj09_Normal	; if not, branch
0001C25C 6100 0000                  		bsr.w	SS_FixCamera
0001C260 6000 0000                  		bra.w	DebugMode
0001C264                            ; ===========================================================================
0001C264                            
0001C264                            Obj09_Normal:
0001C264 7000                       		moveq	#0,d0
0001C266 1028 0024                  		move.b	$24(a0),d0
0001C26A 323B 0000                  		move.w	Obj09_Index(pc,d0.w),d1
0001C26E 4EFB 1000                  		jmp	Obj09_Index(pc,d1.w)
0001C272                            ; ===========================================================================
0001C272 0000                       Obj09_Index:	dc.w Obj09_Main-Obj09_Index
0001C274 0000                       		dc.w Obj09_ChkDebug-Obj09_Index
0001C276 0000                       		dc.w Obj09_ExitStage-Obj09_Index
0001C278 0000                       		dc.w Obj09_Exit2-Obj09_Index
0001C27A                            ; ===========================================================================
0001C27A                            
0001C27A                            Obj09_Main:				; XREF: Obj09_Index
0001C27A 5428 0024                  		addq.b	#2,$24(a0)
0001C27E 117C 000E 0016             		move.b	#$E,$16(a0)
0001C284 117C 0007 0017             		move.b	#7,$17(a0)
0001C28A 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
0001C292 317C 0780 0002             		move.w	#$780,2(a0)
0001C298 117C 0004 0001             		move.b	#4,1(a0)
0001C29E 117C 0000 0018             		move.b	#0,$18(a0)
0001C2A4 117C 0002 001C             		move.b	#2,$1C(a0)
0001C2AA 08E8 0002 0022             		bset	#2,$22(a0)
0001C2B0 08E8 0001 0022             		bset	#1,$22(a0)
0001C2B6                            
0001C2B6                            Obj09_ChkDebug:				; XREF: Obj09_Index
0001C2B6 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat enabled?
0001C2BA 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001C2BC 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001C2C2 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001C2C4 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring
0001C2CA                            
0001C2CA                            Obj09_NoDebug:
0001C2CA 117C 0000 0030             		move.b	#0,$30(a0)
0001C2D0 7000                       		moveq	#0,d0
0001C2D2 1028 0022                  		move.b	$22(a0),d0
0001C2D6 0240 0002                  		andi.w	#2,d0
0001C2DA 323B 0000                  		move.w	Obj09_Modes(pc,d0.w),d1
0001C2DE 4EBB 1000                  		jsr	Obj09_Modes(pc,d1.w)
0001C2E2 4EBA 81D6                  		jsr	LoadSonicDynPLC
0001C2E6 4EF9 0000 DDC2             		jmp	DisplaySprite
0001C2EC                            ; ===========================================================================
0001C2EC 0000                       Obj09_Modes:	dc.w Obj09_OnWall-Obj09_Modes
0001C2EE 0000                       		dc.w Obj09_InAir-Obj09_Modes
0001C2F0                            ; ===========================================================================
0001C2F0                            
0001C2F0                            Obj09_OnWall:				; XREF: Obj09_Modes
0001C2F0 6100 0000                  		bsr.w	Obj09_Jump
0001C2F4 6100 0000                  		bsr.w	Obj09_Move
0001C2F8 6100 0000                  		bsr.w	Obj09_Fall
0001C2FC 6000                       		bra.s	Obj09_Display
0001C2FE                            ; ===========================================================================
0001C2FE                            
0001C2FE                            Obj09_InAir:				; XREF: Obj09_Modes
0001C2FE 6100 0000                  		bsr.w	nullsub_2
0001C302 6100 0000                  		bsr.w	Obj09_Move
0001C306 6100 0000                  		bsr.w	Obj09_Fall
0001C30A                            
0001C30A                            Obj09_Display:				; XREF: Obj09_OnWall
0001C30A 6100 0000                  		bsr.w	Obj09_ChkItems
0001C30E 6100 0000                  		bsr.w	Obj09_ChkItems2
0001C312 4EB9 0000 DD9C             		jsr	SpeedToPos
0001C318 6100 0000                  		bsr.w	SS_FixCamera
0001C31C 3038 F780                  		move.w	($FFFFF780).w,d0
0001C320 D078 F782                  		add.w	($FFFFF782).w,d0
0001C324 31C0 F780                  		move.w	d0,($FFFFF780).w
0001C328 4EB9 0001 4224             		jsr	Sonic_Animate
0001C32E 4E75                       		rts	
0001C330                            
0001C330                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C330                            
0001C330                            
0001C330                            Obj09_Move:				; XREF: Obj09_OnWall; Obj09_InAir
0001C330 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
0001C336 6700                       		beq.s	Obj09_ChkRight	; if not, branch
0001C338 6100 0000                  		bsr.w	Obj09_MoveLeft
0001C33C                            
0001C33C                            Obj09_ChkRight:
0001C33C 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
0001C342 6700                       		beq.s	loc_1BA78	; if not, branch
0001C344 6100 0000                  		bsr.w	Obj09_MoveRight
0001C348                            
0001C348                            loc_1BA78:
0001C348 1038 F602                  		move.b	($FFFFF602).w,d0
0001C34C 0200 000C                  		andi.b	#$C,d0
0001C350 6600                       		bne.s	loc_1BAA8
0001C352 3028 0014                  		move.w	$14(a0),d0
0001C356 6700                       		beq.s	loc_1BAA8
0001C358 6B00                       		bmi.s	loc_1BA9A
0001C35A 0440 000C                  		subi.w	#$C,d0
0001C35E 6400                       		bcc.s	loc_1BA94
0001C360 303C 0000                  		move.w	#0,d0
0001C364                            
0001C364                            loc_1BA94:
0001C364 3140 0014                  		move.w	d0,$14(a0)
0001C368 6000                       		bra.s	loc_1BAA8
0001C36A                            ; ===========================================================================
0001C36A                            
0001C36A                            loc_1BA9A:
0001C36A 0640 000C                  		addi.w	#$C,d0
0001C36E 6400                       		bcc.s	loc_1BAA4
0001C370 303C 0000                  		move.w	#0,d0
0001C374                            
0001C374                            loc_1BAA4:
0001C374 3140 0014                  		move.w	d0,$14(a0)
0001C378                            
0001C378                            loc_1BAA8:
0001C378 1038 F780                  		move.b	($FFFFF780).w,d0
0001C37C 0600 0020                  		addi.b	#$20,d0
0001C380 0200 00C0                  		andi.b	#$C0,d0
0001C384 4400                       		neg.b	d0
0001C386 4EB9 0000 2CC4             		jsr	(CalcSine).l
0001C38C C3E8 0014                  		muls.w	$14(a0),d1
0001C390 D3A8 0008                  		add.l	d1,8(a0)
0001C394 C1E8 0014                  		muls.w	$14(a0),d0
0001C398 D1A8 000C                  		add.l	d0,$C(a0)
0001C39C 48E7 C000                  		movem.l	d0-d1,-(sp)
0001C3A0 2428 000C                  		move.l	$C(a0),d2
0001C3A4 2628 0008                  		move.l	8(a0),d3
0001C3A8 6100 0000                  		bsr.w	sub_1BCE8
0001C3AC 6700                       		beq.s	loc_1BAF2
0001C3AE 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001C3B2 93A8 0008                  		sub.l	d1,8(a0)
0001C3B6 91A8 000C                  		sub.l	d0,$C(a0)
0001C3BA 317C 0000 0014             		move.w	#0,$14(a0)
0001C3C0 4E75                       		rts	
0001C3C2                            ; ===========================================================================
0001C3C2                            
0001C3C2                            loc_1BAF2:
0001C3C2 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001C3C6 4E75                       		rts	
0001C3C8                            ; End of function Obj09_Move
0001C3C8                            
0001C3C8                            
0001C3C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C3C8                            
0001C3C8                            
0001C3C8                            Obj09_MoveLeft:				; XREF: Obj09_Move
0001C3C8 08E8 0000 0022             		bset	#0,$22(a0)
0001C3CE 3028 0014                  		move.w	$14(a0),d0
0001C3D2 6700                       		beq.s	loc_1BB06
0001C3D4 6A00                       		bpl.s	loc_1BB1A
0001C3D6                            
0001C3D6                            loc_1BB06:
0001C3D6 0440 000C                  		subi.w	#$C,d0
0001C3DA 0C40 F800                  		cmpi.w	#-$800,d0
0001C3DE 6E00                       		bgt.s	loc_1BB14
0001C3E0 303C F800                  		move.w	#-$800,d0
0001C3E4                            
0001C3E4                            loc_1BB14:
0001C3E4 3140 0014                  		move.w	d0,$14(a0)
0001C3E8 4E75                       		rts	
0001C3EA                            ; ===========================================================================
0001C3EA                            
0001C3EA                            loc_1BB1A:
0001C3EA 0440 0040                  		subi.w	#$40,d0
0001C3EE 6400                       		bcc.s	loc_1BB22
0001C3F0 4E71                       		nop	
0001C3F2                            
0001C3F2                            loc_1BB22:
0001C3F2 3140 0014                  		move.w	d0,$14(a0)
0001C3F6 4E75                       		rts	
0001C3F8                            ; End of function Obj09_MoveLeft
0001C3F8                            
0001C3F8                            
0001C3F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C3F8                            
0001C3F8                            
0001C3F8                            Obj09_MoveRight:			; XREF: Obj09_Move
0001C3F8 08A8 0000 0022             		bclr	#0,$22(a0)
0001C3FE 3028 0014                  		move.w	$14(a0),d0
0001C402 6B00                       		bmi.s	loc_1BB48
0001C404 0640 000C                  		addi.w	#$C,d0
0001C408 0C40 0800                  		cmpi.w	#$800,d0
0001C40C 6D00                       		blt.s	loc_1BB42
0001C40E 303C 0800                  		move.w	#$800,d0
0001C412                            
0001C412                            loc_1BB42:
0001C412 3140 0014                  		move.w	d0,$14(a0)
0001C416 6000                       		bra.s	locret_1BB54
0001C418                            ; ===========================================================================
0001C418                            
0001C418                            loc_1BB48:
0001C418 0640 0040                  		addi.w	#$40,d0
0001C41C 6400                       		bcc.s	loc_1BB50
0001C41E 4E71                       		nop	
0001C420                            
0001C420                            loc_1BB50:
0001C420 3140 0014                  		move.w	d0,$14(a0)
0001C424                            
0001C424                            locret_1BB54:
0001C424 4E75                       		rts	
0001C426                            ; End of function Obj09_MoveRight
0001C426                            
0001C426                            
0001C426                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C426                            
0001C426                            
0001C426                            Obj09_Jump:				; XREF: Obj09_OnWall
0001C426 1038 F603                  		move.b	($FFFFF603).w,d0
0001C42A 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
0001C42E 6700                       		beq.s	Obj09_NoJump	; if not, branch
0001C430 1038 F780                  		move.b	($FFFFF780).w,d0
0001C434 0200 00FC                  		andi.b	#$FC,d0
0001C438 4400                       		neg.b	d0
0001C43A 0400 0040                  		subi.b	#$40,d0
0001C43E 4EB9 0000 2CC4             		jsr	(CalcSine).l
0001C444 C3FC 0680                  		muls.w	#$680,d1
0001C448 E081                       		asr.l	#8,d1
0001C44A 3141 0010                  		move.w	d1,$10(a0)
0001C44E C1FC 0680                  		muls.w	#$680,d0
0001C452 E080                       		asr.l	#8,d0
0001C454 3140 0012                  		move.w	d0,$12(a0)
0001C458 08E8 0001 0022             		bset	#1,$22(a0)
0001C45E 303C 00A0                  		move.w	#$A0,d0
0001C462 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play jumping sound
0001C468                            
0001C468                            Obj09_NoJump:
0001C468 4E75                       		rts	
0001C46A                            ; End of function Obj09_Jump
0001C46A                            
0001C46A                            
0001C46A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C46A                            
0001C46A                            
0001C46A                            nullsub_2:				; XREF: Obj09_InAir
0001C46A 4E75                       		rts	
0001C46C                            ; End of function nullsub_2
0001C46C                            
0001C46C                            ; ===========================================================================
0001C46C                            ; ---------------------------------------------------------------------------
0001C46C                            ; unused subroutine to limit Sonic's upward vertical speed
0001C46C                            ; ---------------------------------------------------------------------------
0001C46C 323C FC00                  		move.w	#-$400,d1
0001C470 B268 0012                  		cmp.w	$12(a0),d1
0001C474 6F00                       		ble.s	locret_1BBB4
0001C476 1038 F602                  		move.b	($FFFFF602).w,d0
0001C47A 0200 0070                  		andi.b	#$70,d0
0001C47E 6600                       		bne.s	locret_1BBB4
0001C480 3141 0012                  		move.w	d1,$12(a0)
0001C484                            
0001C484                            locret_1BBB4:
0001C484 4E75                       		rts	
0001C486                            ; ---------------------------------------------------------------------------
0001C486                            ; Subroutine to	fix the	camera on Sonic's position (special stage)
0001C486                            ; ---------------------------------------------------------------------------
0001C486                            
0001C486                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C486                            
0001C486                            
0001C486                            SS_FixCamera:				; XREF: Obj09
0001C486 3428 000C                  		move.w	$C(a0),d2
0001C48A 3628 0008                  		move.w	8(a0),d3
0001C48E 3038 F700                  		move.w	($FFFFF700).w,d0
0001C492 0443 00A0                  		subi.w	#$A0,d3
0001C496 6500                       		bcs.s	loc_1BBCE
0001C498 9043                       		sub.w	d3,d0
0001C49A 9178 F700                  		sub.w	d0,($FFFFF700).w
0001C49E                            
0001C49E                            loc_1BBCE:
0001C49E 3038 F704                  		move.w	($FFFFF704).w,d0
0001C4A2 0442 0070                  		subi.w	#$70,d2
0001C4A6 6500                       		bcs.s	locret_1BBDE
0001C4A8 9042                       		sub.w	d2,d0
0001C4AA 9178 F704                  		sub.w	d0,($FFFFF704).w
0001C4AE                            
0001C4AE                            locret_1BBDE:
0001C4AE 4E75                       		rts	
0001C4B0                            ; End of function SS_FixCamera
0001C4B0                            
0001C4B0                            ; ===========================================================================
0001C4B0                            
0001C4B0                            Obj09_ExitStage:			; XREF: Obj09_Index
0001C4B0 0678 0040 F782             		addi.w	#$40,($FFFFF782).w
0001C4B6 0C78 1800 F782             		cmpi.w	#$1800,($FFFFF782).w
0001C4BC 6600                       		bne.s	loc_1BBF4
0001C4BE 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001C4C4                            
0001C4C4                            loc_1BBF4:
0001C4C4 0C78 3000 F782             		cmpi.w	#$3000,($FFFFF782).w
0001C4CA 6D00                       		blt.s	loc_1BC12
0001C4CC 31FC 0000 F782             		move.w	#0,($FFFFF782).w
0001C4D2 31FC 4000 F780             		move.w	#$4000,($FFFFF780).w
0001C4D8 5428 0024                  		addq.b	#2,$24(a0)
0001C4DC 317C 003C 0038             		move.w	#$3C,$38(a0)
0001C4E2                            
0001C4E2                            loc_1BC12:
0001C4E2 3038 F780                  		move.w	($FFFFF780).w,d0
0001C4E6 D078 F782                  		add.w	($FFFFF782).w,d0
0001C4EA 31C0 F780                  		move.w	d0,($FFFFF780).w
0001C4EE 4EB9 0001 4224             		jsr	Sonic_Animate
0001C4F4 4EB9 0001 44BA             		jsr	LoadSonicDynPLC
0001C4FA 6100 FF8A                  		bsr.w	SS_FixCamera
0001C4FE 4EF9 0000 DDC2             		jmp	DisplaySprite
0001C504                            ; ===========================================================================
0001C504                            
0001C504                            Obj09_Exit2:				; XREF: Obj09_Index
0001C504 5368 0038                  		subq.w	#1,$38(a0)
0001C508 6600                       		bne.s	loc_1BC40
0001C50A 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001C510                            
0001C510                            loc_1BC40:
0001C510 4EB9 0001 4224             		jsr	Sonic_Animate
0001C516 4EB9 0001 44BA             		jsr	LoadSonicDynPLC
0001C51C 6100 FF68                  		bsr.w	SS_FixCamera
0001C520 4EF9 0000 DDC2             		jmp	DisplaySprite
0001C526                            
0001C526                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C526                            
0001C526                            
0001C526                            Obj09_Fall:				; XREF: Obj09_OnWall; Obj09_InAir
0001C526 2428 000C                  		move.l	$C(a0),d2
0001C52A 2628 0008                  		move.l	8(a0),d3
0001C52E 1038 F780                  		move.b	($FFFFF780).w,d0
0001C532 0200 00FC                  		andi.b	#$FC,d0
0001C536 4EB9 0000 2CC4             		jsr	(CalcSine).l
0001C53C 3828 0010                  		move.w	$10(a0),d4
0001C540 48C4                       		ext.l	d4
0001C542 E184                       		asl.l	#8,d4
0001C544 C1FC 002A                  		muls.w	#$2A,d0
0001C548 D084                       		add.l	d4,d0
0001C54A 3828 0012                  		move.w	$12(a0),d4
0001C54E 48C4                       		ext.l	d4
0001C550 E184                       		asl.l	#8,d4
0001C552 C3FC 002A                  		muls.w	#$2A,d1
0001C556 D284                       		add.l	d4,d1
0001C558 D680                       		add.l	d0,d3
0001C55A 6100 0000                  		bsr.w	sub_1BCE8
0001C55E 6700                       		beq.s	loc_1BCB0
0001C560 9680                       		sub.l	d0,d3
0001C562 7000                       		moveq	#0,d0
0001C564 3140 0010                  		move.w	d0,$10(a0)
0001C568 08A8 0001 0022             		bclr	#1,$22(a0)
0001C56E D481                       		add.l	d1,d2
0001C570 6100 0000                  		bsr.w	sub_1BCE8
0001C574 6700                       		beq.s	loc_1BCC6
0001C576 9481                       		sub.l	d1,d2
0001C578 7200                       		moveq	#0,d1
0001C57A 3141 0012                  		move.w	d1,$12(a0)
0001C57E 4E75                       		rts	
0001C580                            ; ===========================================================================
0001C580                            
0001C580                            loc_1BCB0:
0001C580 D481                       		add.l	d1,d2
0001C582 6100 0000                  		bsr.w	sub_1BCE8
0001C586 6700                       		beq.s	loc_1BCD4
0001C588 9481                       		sub.l	d1,d2
0001C58A 7200                       		moveq	#0,d1
0001C58C 3141 0012                  		move.w	d1,$12(a0)
0001C590 08A8 0001 0022             		bclr	#1,$22(a0)
0001C596                            
0001C596                            loc_1BCC6:
0001C596 E080                       		asr.l	#8,d0
0001C598 E081                       		asr.l	#8,d1
0001C59A 3140 0010                  		move.w	d0,$10(a0)
0001C59E 3141 0012                  		move.w	d1,$12(a0)
0001C5A2 4E75                       		rts	
0001C5A4                            ; ===========================================================================
0001C5A4                            
0001C5A4                            loc_1BCD4:
0001C5A4 E080                       		asr.l	#8,d0
0001C5A6 E081                       		asr.l	#8,d1
0001C5A8 3140 0010                  		move.w	d0,$10(a0)
0001C5AC 3141 0012                  		move.w	d1,$12(a0)
0001C5B0 08E8 0001 0022             		bset	#1,$22(a0)
0001C5B6 4E75                       		rts	
0001C5B8                            ; End of function Obj09_Fall
0001C5B8                            
0001C5B8                            
0001C5B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C5B8                            
0001C5B8                            
0001C5B8                            sub_1BCE8:				; XREF: Obj09_Move; Obj09_Fall
0001C5B8 43F9 00FF 0000             		lea	($FF0000).l,a1
0001C5BE 7800                       		moveq	#0,d4
0001C5C0 4842                       		swap	d2
0001C5C2 3802                       		move.w	d2,d4
0001C5C4 4842                       		swap	d2
0001C5C6 0644 0044                  		addi.w	#$44,d4
0001C5CA 88FC 0018                  		divu.w	#$18,d4
0001C5CE C8FC 0080                  		mulu.w	#$80,d4
0001C5D2 D3C4                       		adda.l	d4,a1
0001C5D4 7800                       		moveq	#0,d4
0001C5D6 4843                       		swap	d3
0001C5D8 3803                       		move.w	d3,d4
0001C5DA 4843                       		swap	d3
0001C5DC 0644 0014                  		addi.w	#$14,d4
0001C5E0 88FC 0018                  		divu.w	#$18,d4
0001C5E4 D2C4                       		adda.w	d4,a1
0001C5E6 7A00                       		moveq	#0,d5
0001C5E8 1819                       		move.b	(a1)+,d4
0001C5EA 6100                       		bsr.s	sub_1BD30
0001C5EC 1819                       		move.b	(a1)+,d4
0001C5EE 6100                       		bsr.s	sub_1BD30
0001C5F0 D2FC 007E                  		adda.w	#$7E,a1
0001C5F4 1819                       		move.b	(a1)+,d4
0001C5F6 6100                       		bsr.s	sub_1BD30
0001C5F8 1819                       		move.b	(a1)+,d4
0001C5FA 6100                       		bsr.s	sub_1BD30
0001C5FC 4A05                       		tst.b	d5
0001C5FE 4E75                       		rts	
0001C600                            ; End of function sub_1BCE8
0001C600                            
0001C600                            
0001C600                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C600                            
0001C600                            
0001C600                            sub_1BD30:				; XREF: sub_1BCE8
0001C600 6700                       		beq.s	locret_1BD44
0001C602 0C04 0028                  		cmpi.b	#$28,d4
0001C606 6700                       		beq.s	locret_1BD44
0001C608 0C04 003A                  		cmpi.b	#$3A,d4
0001C60C 6500                       		bcs.s	loc_1BD46
0001C60E 0C04 004B                  		cmpi.b	#$4B,d4
0001C612 6400                       		bcc.s	loc_1BD46
0001C614                            
0001C614                            locret_1BD44:
0001C614 4E75                       		rts	
0001C616                            ; ===========================================================================
0001C616                            
0001C616                            loc_1BD46:
0001C616 1144 0030                  		move.b	d4,$30(a0)
0001C61A 2149 0032                  		move.l	a1,$32(a0)
0001C61E 7AFF                       		moveq	#-1,d5
0001C620 4E75                       		rts	
0001C622                            ; End of function sub_1BD30
0001C622                            
0001C622                            
0001C622                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C622                            
0001C622                            
0001C622                            Obj09_ChkItems:				; XREF: Obj09_Display
0001C622 43F9 00FF 0000             		lea	($FF0000).l,a1
0001C628 7800                       		moveq	#0,d4
0001C62A 3828 000C                  		move.w	$C(a0),d4
0001C62E 0644 0050                  		addi.w	#$50,d4
0001C632 88FC 0018                  		divu.w	#$18,d4
0001C636 C8FC 0080                  		mulu.w	#$80,d4
0001C63A D3C4                       		adda.l	d4,a1
0001C63C 7800                       		moveq	#0,d4
0001C63E 3828 0008                  		move.w	8(a0),d4
0001C642 0644 0020                  		addi.w	#$20,d4
0001C646 88FC 0018                  		divu.w	#$18,d4
0001C64A D2C4                       		adda.w	d4,a1
0001C64C 1811                       		move.b	(a1),d4
0001C64E 6600                       		bne.s	Obj09_ChkCont
0001C650 4A28 003A                  		tst.b	$3A(a0)
0001C654 6600 0000                  		bne.w	Obj09_MakeGhostSolid
0001C658 7800                       		moveq	#0,d4
0001C65A 4E75                       		rts	
0001C65C                            ; ===========================================================================
0001C65C                            
0001C65C                            Obj09_ChkCont:
0001C65C 0C04 003A                  		cmpi.b	#$3A,d4		; is the item a	ring?
0001C660 6600                       		bne.s	Obj09_Chk1Up
0001C662 6100 F728                  		bsr.w	SS_RemoveCollectedItem
0001C666 6600                       		bne.s	Obj09_GetCont
0001C668 14BC 0001                  		move.b	#1,(a2)
0001C66C 2549 0004                  		move.l	a1,4(a2)
0001C670                            
0001C670                            Obj09_GetCont:
0001C670 4EB9 0000 A308             		jsr	CollectRing
0001C676 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; check if you have 50 rings
0001C67C 6500                       		bcs.s	Obj09_NoCont
0001C67E 08F8 0000 FE1B             		bset	#0,($FFFFFE1B).w
0001C684 6600                       		bne.s	Obj09_NoCont
0001C686 5238 FE18                  		addq.b	#1,($FFFFFE18).w ; add 1 to number of continues
0001C68A 303C 00BF                  		move.w	#$BF,d0
0001C68E 4EB9 0000 15BA             		jsr	(PlaySound).l	; play extra continue sound
0001C694                            
0001C694                            Obj09_NoCont:
0001C694 7800                       		moveq	#0,d4
0001C696 4E75                       		rts	
0001C698                            ; ===========================================================================
0001C698                            
0001C698                            Obj09_Chk1Up:
0001C698 0C04 0028                  		cmpi.b	#$28,d4		; is the item an extra life?
0001C69C 6600                       		bne.s	Obj09_ChkEmer
0001C69E 6100 F6EC                  		bsr.w	SS_RemoveCollectedItem
0001C6A2 6600                       		bne.s	Obj09_Get1Up
0001C6A4 14BC 0003                  		move.b	#3,(a2)
0001C6A8 2549 0004                  		move.l	a1,4(a2)
0001C6AC                            
0001C6AC                            Obj09_Get1Up:
0001C6AC 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to number of lives
0001C6B0 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to lives counter
0001C6B4 303C 0088                  		move.w	#$88,d0
0001C6B8 4EB9 0000 15BA             		jsr	(PlaySound).l	; play extra life music
0001C6BE 7800                       		moveq	#0,d4
0001C6C0 4E75                       		rts	
0001C6C2                            ; ===========================================================================
0001C6C2                            
0001C6C2                            Obj09_ChkEmer:
0001C6C2 0C04 003B                  		cmpi.b	#$3B,d4		; is the item an emerald?
0001C6C6 6500                       		bcs.s	Obj09_ChkGhost
0001C6C8 0C04 0040                  		cmpi.b	#$40,d4
0001C6CC 6200                       		bhi.s	Obj09_ChkGhost
0001C6CE 6100 F6BC                  		bsr.w	SS_RemoveCollectedItem
0001C6D2 6600                       		bne.s	Obj09_GetEmer
0001C6D4 14BC 0005                  		move.b	#5,(a2)
0001C6D8 2549 0004                  		move.l	a1,4(a2)
0001C6DC                            
0001C6DC                            Obj09_GetEmer:
0001C6DC 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all the emeralds?
0001C6E2 6700                       		beq.s	Obj09_NoEmer	; if yes, branch
0001C6E4 0404 003B                  		subi.b	#$3B,d4
0001C6E8 7000                       		moveq	#0,d0
0001C6EA 1038 FE57                  		move.b	($FFFFFE57).w,d0
0001C6EE 45F8 FE58                  		lea	($FFFFFE58).w,a2
0001C6F2 1584 0000                  		move.b	d4,(a2,d0.w)
0001C6F6 5238 FE57                  		addq.b	#1,($FFFFFE57).w ; add 1 to number of emeralds
0001C6FA                            
0001C6FA                            Obj09_NoEmer:
0001C6FA 303C 0093                  		move.w	#$93,d0
0001C6FE 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play emerald music
0001C704 7800                       		moveq	#0,d4
0001C706 4E75                       		rts	
0001C708                            ; ===========================================================================
0001C708                            
0001C708                            Obj09_ChkGhost:
0001C708 0C04 0041                  		cmpi.b	#$41,d4		; is the item a	ghost block?
0001C70C 6600                       		bne.s	Obj09_ChkGhostTag
0001C70E 117C 0001 003A             		move.b	#1,$3A(a0)	; mark the ghost block as "passed"
0001C714                            
0001C714                            Obj09_ChkGhostTag:
0001C714 0C04 004A                  		cmpi.b	#$4A,d4		; is the item a	switch for ghost blocks?
0001C718 6600                       		bne.s	Obj09_NoGhost
0001C71A 0C28 0001 003A             		cmpi.b	#1,$3A(a0)	; have the ghost blocks	been passed?
0001C720 6600                       		bne.s	Obj09_NoGhost	; if not, branch
0001C722 117C 0002 003A             		move.b	#2,$3A(a0)	; mark the ghost blocks	as "solid"
0001C728                            
0001C728                            Obj09_NoGhost:
0001C728 78FF                       		moveq	#-1,d4
0001C72A 4E75                       		rts	
0001C72C                            ; ===========================================================================
0001C72C                            
0001C72C                            Obj09_MakeGhostSolid:
0001C72C 0C28 0002 003A             		cmpi.b	#2,$3A(a0)	; is the ghost marked as "solid"?
0001C732 6600                       		bne.s	Obj09_GhostNotSolid ; if not, branch
0001C734 43F9 00FF 1020             		lea	($FF1020).l,a1
0001C73A 723F                       		moveq	#$3F,d1
0001C73C                            
0001C73C                            Obj09_GhostLoop2:
0001C73C 743F                       		moveq	#$3F,d2
0001C73E                            
0001C73E                            Obj09_GhostLoop:
0001C73E 0C11 0041                  		cmpi.b	#$41,(a1)	; is the item a	ghost block?
0001C742 6600                       		bne.s	Obj09_NoReplace	; if not, branch
0001C744 12BC 002C                  		move.b	#$2C,(a1)	; replace ghost	block with a solid block
0001C748                            
0001C748                            Obj09_NoReplace:
0001C748 5249                       		addq.w	#1,a1
0001C74A 51CA FFF2                  		dbf	d2,Obj09_GhostLoop
0001C74E 43E9 0040                  		lea	$40(a1),a1
0001C752 51C9 FFE8                  		dbf	d1,Obj09_GhostLoop2
0001C756                            
0001C756                            Obj09_GhostNotSolid:
0001C756 4228 003A                  		clr.b	$3A(a0)
0001C75A 7800                       		moveq	#0,d4
0001C75C 4E75                       		rts	
0001C75E                            ; End of function Obj09_ChkItems
0001C75E                            
0001C75E                            
0001C75E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C75E                            
0001C75E                            
0001C75E                            Obj09_ChkItems2:			; XREF: Obj09_Display
0001C75E 1028 0030                  		move.b	$30(a0),d0
0001C762 6600                       		bne.s	Obj09_ChkBumper
0001C764 5328 0036                  		subq.b	#1,$36(a0)
0001C768 6A00                       		bpl.s	loc_1BEA0
0001C76A 117C 0000 0036             		move.b	#0,$36(a0)
0001C770                            
0001C770                            loc_1BEA0:
0001C770 5328 0037                  		subq.b	#1,$37(a0)
0001C774 6A00                       		bpl.s	locret_1BEAC
0001C776 117C 0000 0037             		move.b	#0,$37(a0)
0001C77C                            
0001C77C                            locret_1BEAC:
0001C77C 4E75                       		rts	
0001C77E                            ; ===========================================================================
0001C77E                            
0001C77E                            Obj09_ChkBumper:
0001C77E 0C00 0025                  		cmpi.b	#$25,d0		; is the item a	bumper?
0001C782 6600                       		bne.s	Obj09_GOAL
0001C784 2228 0032                  		move.l	$32(a0),d1
0001C788 0481 00FF 0001             		subi.l	#$FF0001,d1
0001C78E 3401                       		move.w	d1,d2
0001C790 0241 007F                  		andi.w	#$7F,d1
0001C794 C2FC 0018                  		mulu.w	#$18,d1
0001C798 0441 0014                  		subi.w	#$14,d1
0001C79C EE4A                       		lsr.w	#7,d2
0001C79E 0242 007F                  		andi.w	#$7F,d2
0001C7A2 C4FC 0018                  		mulu.w	#$18,d2
0001C7A6 0442 0044                  		subi.w	#$44,d2
0001C7AA 9268 0008                  		sub.w	8(a0),d1
0001C7AE 9468 000C                  		sub.w	$C(a0),d2
0001C7B2 4EB9 0000 2F92             		jsr	(CalcAngle).l
0001C7B8 4EB9 0000 2CC4             		jsr	(CalcSine).l
0001C7BE C3FC F900                  		muls.w	#-$700,d1
0001C7C2 E081                       		asr.l	#8,d1
0001C7C4 3141 0010                  		move.w	d1,$10(a0)
0001C7C8 C1FC F900                  		muls.w	#-$700,d0
0001C7CC E080                       		asr.l	#8,d0
0001C7CE 3140 0012                  		move.w	d0,$12(a0)
0001C7D2 08E8 0001 0022             		bset	#1,$22(a0)
0001C7D8 6100 F5B2                  		bsr.w	SS_RemoveCollectedItem
0001C7DC 6600                       		bne.s	Obj09_BumpSnd
0001C7DE 14BC 0002                  		move.b	#2,(a2)
0001C7E2 2028 0032                  		move.l	$32(a0),d0
0001C7E6 5380                       		subq.l	#1,d0
0001C7E8 2540 0004                  		move.l	d0,4(a2)
0001C7EC                            
0001C7EC                            Obj09_BumpSnd:
0001C7EC 303C 00B4                  		move.w	#$B4,d0
0001C7F0 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play bumper sound
0001C7F6                            ; ===========================================================================
0001C7F6                            
0001C7F6                            Obj09_GOAL:
0001C7F6 0C00 0027                  		cmpi.b	#$27,d0		; is the item a	"GOAL"?
0001C7FA 6600                       		bne.s	Obj09_UPblock
0001C7FC 5428 0024                  		addq.b	#2,$24(a0)	; run routine "Obj09_ExitStage"
0001C800 303C 00A8                  		move.w	#$A8,d0		; change item
0001C804 4EB9 0000 15C0             		jsr	(PlaySound_Special).l ;	play "GOAL" sound
0001C80A 4E75                       		rts	
0001C80C                            ; ===========================================================================
0001C80C                            
0001C80C                            Obj09_UPblock:
0001C80C 0C00 0029                  		cmpi.b	#$29,d0		; is the item an "UP" block?
0001C810 6600                       		bne.s	Obj09_DOWNblock
0001C812 4A28 0036                  		tst.b	$36(a0)
0001C816 6600 0000                  		bne.w	Obj09_NoGlass
0001C81A 117C 001E 0036             		move.b	#$1E,$36(a0)
0001C820 0838 0006 F783             		btst	#6,($FFFFF783).w
0001C826 6700                       		beq.s	Obj09_UPsnd
0001C828 E1F8 F782                  		asl	($FFFFF782).w	; increase stage rotation speed
0001C82C 2268 0032                  		movea.l	$32(a0),a1
0001C830 5389                       		subq.l	#1,a1
0001C832 12BC 002A                  		move.b	#$2A,(a1)	; change item to a "DOWN" block
0001C836                            
0001C836                            Obj09_UPsnd:
0001C836 303C 00A9                  		move.w	#$A9,d0
0001C83A 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play up/down sound
0001C840                            ; ===========================================================================
0001C840                            
0001C840                            Obj09_DOWNblock:
0001C840 0C00 002A                  		cmpi.b	#$2A,d0		; is the item a	"DOWN" block?
0001C844 6600                       		bne.s	Obj09_Rblock
0001C846 4A28 0036                  		tst.b	$36(a0)
0001C84A 6600 0000                  		bne.w	Obj09_NoGlass
0001C84E 117C 001E 0036             		move.b	#$1E,$36(a0)
0001C854 0838 0006 F783             		btst	#6,($FFFFF783).w
0001C85A 6600                       		bne.s	Obj09_DOWNsnd
0001C85C E0F8 F782                  		asr	($FFFFF782).w	; reduce stage rotation	speed
0001C860 2268 0032                  		movea.l	$32(a0),a1
0001C864 5389                       		subq.l	#1,a1
0001C866 12BC 0029                  		move.b	#$29,(a1)	; change item to an "UP" block
0001C86A                            
0001C86A                            Obj09_DOWNsnd:
0001C86A 303C 00A9                  		move.w	#$A9,d0
0001C86E 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play up/down sound
0001C874                            ; ===========================================================================
0001C874                            
0001C874                            Obj09_Rblock:
0001C874 0C00 002B                  		cmpi.b	#$2B,d0		; is the item an "R" block?
0001C878 6600                       		bne.s	Obj09_ChkGlass
0001C87A 4A28 0037                  		tst.b	$37(a0)
0001C87E 6600 0000                  		bne.w	Obj09_NoGlass
0001C882 117C 001E 0037             		move.b	#$1E,$37(a0)
0001C888 6100 F502                  		bsr.w	SS_RemoveCollectedItem
0001C88C 6600                       		bne.s	Obj09_RevStage
0001C88E 14BC 0004                  		move.b	#4,(a2)
0001C892 2028 0032                  		move.l	$32(a0),d0
0001C896 5380                       		subq.l	#1,d0
0001C898 2540 0004                  		move.l	d0,4(a2)
0001C89C                            
0001C89C                            Obj09_RevStage:
0001C89C 4478 F782                  		neg.w	($FFFFF782).w	; reverse stage	rotation
0001C8A0 303C 00A9                  		move.w	#$A9,d0
0001C8A4 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play sound
0001C8AA                            ; ===========================================================================
0001C8AA                            
0001C8AA                            Obj09_ChkGlass:
0001C8AA 0C00 002D                  		cmpi.b	#$2D,d0		; is the item a	glass block?
0001C8AE 6700                       		beq.s	Obj09_Glass	; if yes, branch
0001C8B0 0C00 002E                  		cmpi.b	#$2E,d0
0001C8B4 6700                       		beq.s	Obj09_Glass
0001C8B6 0C00 002F                  		cmpi.b	#$2F,d0
0001C8BA 6700                       		beq.s	Obj09_Glass
0001C8BC 0C00 0030                  		cmpi.b	#$30,d0
0001C8C0 6600                       		bne.s	Obj09_NoGlass	; if not, branch
0001C8C2                            
0001C8C2                            Obj09_Glass:
0001C8C2 6100 F4C8                  		bsr.w	SS_RemoveCollectedItem
0001C8C6 6600                       		bne.s	Obj09_GlassSnd
0001C8C8 14BC 0006                  		move.b	#6,(a2)
0001C8CC 2268 0032                  		movea.l	$32(a0),a1
0001C8D0 5389                       		subq.l	#1,a1
0001C8D2 2549 0004                  		move.l	a1,4(a2)
0001C8D6 1011                       		move.b	(a1),d0
0001C8D8 5200                       		addq.b	#1,d0		; change glass type when touched
0001C8DA 0C00 0030                  		cmpi.b	#$30,d0
0001C8DE 6300                       		bls.s	Obj09_GlassUpdate ; if glass is	still there, branch
0001C8E0 4200                       		clr.b	d0		; remove the glass block when it's destroyed
0001C8E2                            
0001C8E2                            Obj09_GlassUpdate:
0001C8E2 1540 0004                  		move.b	d0,4(a2)	; update the stage layout
0001C8E6                            
0001C8E6                            Obj09_GlassSnd:
0001C8E6 303C 00BA                  		move.w	#$BA,d0
0001C8EA 4EF9 0000 15C0             		jmp	(PlaySound_Special).l ;	play glass block sound
0001C8F0                            ; ===========================================================================
0001C8F0                            
0001C8F0                            Obj09_NoGlass:
0001C8F0 4E75                       		rts	
0001C8F2                            ; End of function Obj09_ChkItems2
0001C8F2                            
0001C8F2                            ; ===========================================================================
0001C8F2                            ; ---------------------------------------------------------------------------
0001C8F2                            ; Object 10 - blank
0001C8F2                            ; ---------------------------------------------------------------------------
0001C8F2                            
0001C8F2                            Obj10:					; XREF: Obj_Index
0001C8F2 4E75                       		rts	
0001C8F4                            ; ---------------------------------------------------------------------------
0001C8F4                            ; Subroutine to	animate	level graphics
0001C8F4                            ; ---------------------------------------------------------------------------
0001C8F4                            
0001C8F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C8F4                            
0001C8F4                            
0001C8F4                            AniArt_Load:				; XREF: Demo_Time; loc_F54
0001C8F4 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001C8F8 6600                       		bne.s	AniArt_Pause	; if yes, branch
0001C8FA 4DF9 00C0 0000             		lea	($C00000).l,a6
0001C900 6100 0000                  		bsr.w	AniArt_GiantRing
0001C904 7000                       		moveq	#0,d0
0001C906 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001C90A D040                       		add.w	d0,d0
0001C90C 303B 0000                  		move.w	AniArt_Index(pc,d0.w),d0
0001C910 4EFB 0000                  		jmp	AniArt_Index(pc,d0.w)
0001C914                            ; ===========================================================================
0001C914                            
0001C914                            AniArt_Pause:
0001C914 4E75                       		rts	
0001C916                            ; End of function AniArt_Load
0001C916                            
0001C916                            ; ===========================================================================
0001C916 0000 0000                  AniArt_Index:	dc.w AniArt_GHZ-AniArt_Index, AniArt_none-AniArt_Index
0001C91A 0000 0000                  		dc.w AniArt_MZ-AniArt_Index, AniArt_none-AniArt_Index
0001C91E 0000 0000                  		dc.w AniArt_none-AniArt_Index, AniArt_SBZ-AniArt_Index
0001C922 0000                       		dc.w AniArt_Ending-AniArt_Index
0001C924                            ; ===========================================================================
0001C924                            ; ---------------------------------------------------------------------------
0001C924                            ; Animated pattern routine - Green Hill
0001C924                            ; ---------------------------------------------------------------------------
0001C924                            
0001C924                            AniArt_GHZ:				; XREF: AniArt_Index
0001C924 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001C928 6A00                       		bpl.s	loc_1C08A
0001C92A 11FC 0005 F7B1             		move.b	#5,($FFFFF7B1).w ; time	to display each	frame for
0001C930 43F9 0000 0000             		lea	(Art_GhzWater).l,a1 ; load waterfall patterns
0001C936 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C93A 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001C93E 0240 0001                  		andi.w	#1,d0
0001C942 6700                       		beq.s	loc_1C078
0001C944 43E9 0100                  		lea	$100(a1),a1	; load next frame
0001C948                            
0001C948                            loc_1C078:
0001C948 23FC 6F00 0001 00C0 0004   		move.l	#$6F000001,($C00004).l ; VRAM address
0001C952 323C 0007                  		move.w	#7,d1		; number of 8x8	tiles
0001C956 6000 0000                  		bra.w	LoadTiles
0001C95A                            ; ===========================================================================
0001C95A                            
0001C95A                            loc_1C08A:
0001C95A 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001C95E 6A00                       		bpl.s	loc_1C0C0
0001C960 11FC 000F F7B3             		move.b	#$F,($FFFFF7B3).w
0001C966 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001C96C 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001C970 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001C974 0240 0001                  		andi.w	#1,d0
0001C978 6700                       		beq.s	loc_1C0AE
0001C97A 43E9 0200                  		lea	$200(a1),a1
0001C97E                            
0001C97E                            loc_1C0AE:
0001C97E 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001C988 323C 000F                  		move.w	#$F,d1
0001C98C 6000 0000                  		bra.w	LoadTiles
0001C990                            ; ===========================================================================
0001C990                            
0001C990                            loc_1C0C0:
0001C990 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001C994 6A00                       		bpl.s	locret_1C10C
0001C996 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001C99C 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001C9A0 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001C9A4 0240 0003                  		andi.w	#3,d0
0001C9A8 103B 0000                  		move.b	byte_1C10E(pc,d0.w),d0
0001C9AC 0800 0000                  		btst	#0,d0
0001C9B0 6600                       		bne.s	loc_1C0E8
0001C9B2 11FC 007F F7B5             		move.b	#$7F,($FFFFF7B5).w
0001C9B8                            
0001C9B8                            loc_1C0E8:
0001C9B8 EF48                       		lsl.w	#7,d0
0001C9BA 3200                       		move.w	d0,d1
0001C9BC D040                       		add.w	d0,d0
0001C9BE D041                       		add.w	d1,d0
0001C9C0 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001C9CA 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001C9D0 43F1 0000                  		lea	(a1,d0.w),a1
0001C9D4 323C 000B                  		move.w	#$B,d1
0001C9D8 6100 0000                  		bsr.w	LoadTiles
0001C9DC                            
0001C9DC                            locret_1C10C:
0001C9DC 4E75                       		rts	
0001C9DE                            ; ===========================================================================
0001C9DE 0001 0201                  byte_1C10E:	dc.b 0,	1, 2, 1
0001C9E2                            ; ===========================================================================
0001C9E2                            ; ---------------------------------------------------------------------------
0001C9E2                            ; Animated pattern routine - Marble
0001C9E2                            ; ---------------------------------------------------------------------------
0001C9E2                            
0001C9E2                            AniArt_MZ:				; XREF: AniArt_Index
0001C9E2 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001C9E6 6A00                       		bpl.s	loc_1C150
0001C9E8 11FC 0013 F7B1             		move.b	#$13,($FFFFF7B1).w
0001C9EE 43F9 0000 0000             		lea	(Art_MzLava1).l,a1 ; load lava surface patterns
0001C9F4 7000                       		moveq	#0,d0
0001C9F6 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C9FA 5200                       		addq.b	#1,d0
0001C9FC 0C00 0003                  		cmpi.b	#3,d0
0001CA00 6600                       		bne.s	loc_1C134
0001CA02 7000                       		moveq	#0,d0
0001CA04                            
0001CA04                            loc_1C134:
0001CA04 11C0 F7B0                  		move.b	d0,($FFFFF7B0).w
0001CA08 C0FC 0100                  		mulu.w	#$100,d0
0001CA0C D2C0                       		adda.w	d0,a1
0001CA0E 23FC 5C40 0001 00C0 0004   		move.l	#$5C400001,($C00004).l
0001CA18 323C 0007                  		move.w	#7,d1
0001CA1C 6100 0000                  		bsr.w	LoadTiles
0001CA20                            
0001CA20                            loc_1C150:
0001CA20 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001CA24 6A00                       		bpl.s	loc_1C1AE
0001CA26 11FC 0001 F7B3             		move.b	#1,($FFFFF7B3).w
0001CA2C 7000                       		moveq	#0,d0
0001CA2E 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001CA32 49F9 0000 0000             		lea	(Art_MzLava2).l,a4 ; load lava patterns
0001CA38 EE58                       		ror.w	#7,d0
0001CA3A D8C0                       		adda.w	d0,a4
0001CA3C 23FC 5A40 0001 00C0 0004   		move.l	#$5A400001,($C00004).l
0001CA46 7600                       		moveq	#0,d3
0001CA48 1638 F7B2                  		move.b	($FFFFF7B2).w,d3
0001CA4C 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001CA50 1638 FE68                  		move.b	($FFFFFE68).w,d3
0001CA54 343C 0003                  		move.w	#3,d2
0001CA58                            
0001CA58                            loc_1C188:
0001CA58 3003                       		move.w	d3,d0
0001CA5A D040                       		add.w	d0,d0
0001CA5C 0240 001E                  		andi.w	#$1E,d0
0001CA60 47F9 0000 0000             		lea	(AniArt_MZextra).l,a3
0001CA66 3033 0000                  		move.w	(a3,d0.w),d0
0001CA6A 47F3 0000                  		lea	(a3,d0.w),a3
0001CA6E 224C                       		movea.l	a4,a1
0001CA70 323C 001F                  		move.w	#$1F,d1
0001CA74 4E93                       		jsr	(a3)
0001CA76 5843                       		addq.w	#4,d3
0001CA78 51CA FFDE                  		dbf	d2,loc_1C188
0001CA7C 4E75                       		rts	
0001CA7E                            ; ===========================================================================
0001CA7E                            
0001CA7E                            loc_1C1AE:
0001CA7E 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001CA82 6A00 0000                  		bpl.w	locret_1C1EA
0001CA86 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001CA8C 43F9 0000 0000             		lea	(Art_MzTorch).l,a1 ; load torch	patterns
0001CA92 7000                       		moveq	#0,d0
0001CA94 1038 F7B6                  		move.b	($FFFFF7B6).w,d0
0001CA98 5238 F7B6                  		addq.b	#1,($FFFFF7B6).w
0001CA9C 0238 0003 F7B6             		andi.b	#3,($FFFFF7B6).w
0001CAA2 C0FC 00C0                  		mulu.w	#$C0,d0
0001CAA6 D2C0                       		adda.w	d0,a1
0001CAA8 23FC 5E40 0001 00C0 0004   		move.l	#$5E400001,($C00004).l
0001CAB2 323C 0005                  		move.w	#5,d1
0001CAB6 6000 0000                  		bra.w	LoadTiles
0001CABA                            ; ===========================================================================
0001CABA                            
0001CABA                            locret_1C1EA:
0001CABA 4E75                       		rts	
0001CABC                            ; ===========================================================================
0001CABC                            ; ---------------------------------------------------------------------------
0001CABC                            ; Animated pattern routine - Scrap Brain
0001CABC                            ; ---------------------------------------------------------------------------
0001CABC                            
0001CABC                            AniArt_SBZ:				; XREF: AniArt_Index
0001CABC 4A38 F7B4                  		tst.b	($FFFFF7B4).w
0001CAC0 6700                       		beq.s	loc_1C1F8
0001CAC2 5338 F7B4                  		subq.b	#1,($FFFFF7B4).w
0001CAC6 6000                       		bra.s	loc_1C250
0001CAC8                            ; ===========================================================================
0001CAC8                            
0001CAC8                            loc_1C1F8:
0001CAC8 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001CACC 6A00                       		bpl.s	loc_1C250
0001CACE 11FC 0007 F7B1             		move.b	#7,($FFFFF7B1).w
0001CAD4 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
0001CADA 23FC 4900 0002 00C0 0004   		move.l	#$49000002,($C00004).l
0001CAE4 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001CAE8 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001CAEC 0240 0007                  		andi.w	#7,d0
0001CAF0 6700                       		beq.s	loc_1C234
0001CAF2 5340                       		subq.w	#1,d0
0001CAF4 C0FC 0180                  		mulu.w	#$180,d0
0001CAF8 43F1 0000                  		lea	(a1,d0.w),a1
0001CAFC 323C 000B                  		move.w	#$B,d1
0001CB00 6000 0000                  		bra.w	LoadTiles
0001CB04                            ; ===========================================================================
0001CB04                            
0001CB04                            loc_1C234:
0001CB04 11FC 00B4 F7B4             		move.b	#$B4,($FFFFF7B4).w
0001CB0A                            
0001CB0A                            loc_1C23A:
0001CB0A 323C 0005                  		move.w	#5,d1
0001CB0E 6100 0000                  		bsr.w	LoadTiles
0001CB12 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001CB18 323C 0005                  		move.w	#5,d1
0001CB1C 6000 0000                  		bra.w	LoadTiles
0001CB20                            ; ===========================================================================
0001CB20                            
0001CB20                            loc_1C250:
0001CB20 4A38 F7B5                  		tst.b	($FFFFF7B5).w
0001CB24 6700                       		beq.s	loc_1C25C
0001CB26 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001CB2A 6000                       		bra.s	locret_1C2A0
0001CB2C                            ; ===========================================================================
0001CB2C                            
0001CB2C                            loc_1C25C:
0001CB2C 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001CB30 6A00                       		bpl.s	locret_1C2A0
0001CB32 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001CB38 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001CB3E 23FC 4A80 0002 00C0 0004   		move.l	#$4A800002,($C00004).l
0001CB48 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001CB4C 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001CB50 0240 0007                  		andi.w	#7,d0
0001CB54 6700                       		beq.s	loc_1C298
0001CB56 5340                       		subq.w	#1,d0
0001CB58 C0FC 0180                  		mulu.w	#$180,d0
0001CB5C 43F1 0000                  		lea	(a1,d0.w),a1
0001CB60 323C 000B                  		move.w	#$B,d1
0001CB64 6000 0000                  		bra.w	LoadTiles
0001CB68                            ; ===========================================================================
0001CB68                            
0001CB68                            loc_1C298:
0001CB68 11FC 0078 F7B5             		move.b	#$78,($FFFFF7B5).w
0001CB6E 609A                       		bra.s	loc_1C23A
0001CB70                            ; ===========================================================================
0001CB70                            
0001CB70                            locret_1C2A0:
0001CB70 4E75                       		rts	
0001CB72                            ; ===========================================================================
0001CB72                            ; ---------------------------------------------------------------------------
0001CB72                            ; Animated pattern routine - ending sequence
0001CB72                            ; ---------------------------------------------------------------------------
0001CB72                            
0001CB72                            AniArt_Ending:				; XREF: AniArt_Index
0001CB72 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001CB76 6A00                       		bpl.s	loc_1C2F4
0001CB78 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001CB7E 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001CB84 45F8 9400                  		lea	($FFFF9400).w,a2
0001CB88 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001CB8C 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001CB90 0240 0001                  		andi.w	#1,d0
0001CB94 6700                       		beq.s	loc_1C2CE
0001CB96 43E9 0200                  		lea	$200(a1),a1
0001CB9A 45EA 0200                  		lea	$200(a2),a2
0001CB9E                            
0001CB9E                            loc_1C2CE:
0001CB9E 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001CBA8 323C 000F                  		move.w	#$F,d1
0001CBAC 6100 0000                  		bsr.w	LoadTiles
0001CBB0 224A                       		movea.l	a2,a1
0001CBB2 23FC 7200 0001 00C0 0004   		move.l	#$72000001,($C00004).l
0001CBBC 323C 000F                  		move.w	#$F,d1
0001CBC0 6000 0000                  		bra.w	LoadTiles
0001CBC4                            ; ===========================================================================
0001CBC4                            
0001CBC4                            loc_1C2F4:
0001CBC4 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001CBC8 6A00                       		bpl.s	loc_1C33C
0001CBCA 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001CBD0 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001CBD4 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001CBD8 0240 0007                  		andi.w	#7,d0
0001CBDC 103B 0000                  		move.b	byte_1C334(pc,d0.w),d0
0001CBE0 EF48                       		lsl.w	#7,d0
0001CBE2 3200                       		move.w	d0,d1
0001CBE4 D040                       		add.w	d0,d0
0001CBE6 D041                       		add.w	d1,d0
0001CBE8 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001CBF2 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001CBF8 43F1 0000                  		lea	(a1,d0.w),a1
0001CBFC 323C 000B                  		move.w	#$B,d1
0001CC00 6000 0000                  		bra.w	LoadTiles
0001CC04                            ; ===========================================================================
0001CC04 0000 0001 0202 0201        byte_1C334:	dc.b 0,	0, 0, 1, 2, 2, 2, 1
0001CC0C                            ; ===========================================================================
0001CC0C                            
0001CC0C                            loc_1C33C:
0001CC0C 5338 F7B9                  		subq.b	#1,($FFFFF7B9).w
0001CC10 6A00                       		bpl.s	loc_1C37A
0001CC12 11FC 000E F7B9             		move.b	#$E,($FFFFF7B9).w
0001CC18 1038 F7B8                  		move.b	($FFFFF7B8).w,d0
0001CC1C 5238 F7B8                  		addq.b	#1,($FFFFF7B8).w
0001CC20 0240 0003                  		andi.w	#3,d0
0001CC24 103B 0000                  		move.b	byte_1C376(pc,d0.w),d0
0001CC28 E148                       		lsl.w	#8,d0
0001CC2A D040                       		add.w	d0,d0
0001CC2C 23FC 7000 0001 00C0 0004   		move.l	#$70000001,($C00004).l
0001CC36 43F8 9800                  		lea	($FFFF9800).w,a1 ; load	special	flower patterns	(from RAM)
0001CC3A 43F1 0000                  		lea	(a1,d0.w),a1
0001CC3E 323C 000F                  		move.w	#$F,d1
0001CC42 6000 0000                  		bra.w	LoadTiles
0001CC46                            ; ===========================================================================
0001CC46 0001 0201                  byte_1C376:	dc.b 0,	1, 2, 1
0001CC4A                            ; ===========================================================================
0001CC4A                            
0001CC4A                            loc_1C37A:
0001CC4A 5338 F7BB                  		subq.b	#1,($FFFFF7BB).w
0001CC4E 6A00                       		bpl.s	locret_1C3B4
0001CC50 11FC 000B F7BB             		move.b	#$B,($FFFFF7BB).w
0001CC56 1038 F7BA                  		move.b	($FFFFF7BA).w,d0
0001CC5A 5238 F7BA                  		addq.b	#1,($FFFFF7BA).w
0001CC5E 0240 0003                  		andi.w	#3,d0
0001CC62 103B 00E2                  		move.b	byte_1C376(pc,d0.w),d0
0001CC66 E148                       		lsl.w	#8,d0
0001CC68 D040                       		add.w	d0,d0
0001CC6A 23FC 6800 0001 00C0 0004   		move.l	#$68000001,($C00004).l
0001CC74 43F8 9E00                  		lea	($FFFF9E00).w,a1 ; load	special	flower patterns	(from RAM)
0001CC78 43F1 0000                  		lea	(a1,d0.w),a1
0001CC7C 323C 000F                  		move.w	#$F,d1
0001CC80 6000 0000                  		bra.w	LoadTiles
0001CC84                            ; ===========================================================================
0001CC84                            
0001CC84                            locret_1C3B4:
0001CC84 4E75                       		rts	
0001CC86                            ; ===========================================================================
0001CC86                            
0001CC86                            AniArt_none:				; XREF: AniArt_Index
0001CC86 4E75                       		rts	
0001CC88                            
0001CC88                            ; ---------------------------------------------------------------------------
0001CC88                            ; Subroutine to	load (d1 - 1) 8x8 tiles
0001CC88                            ; ---------------------------------------------------------------------------
0001CC88                            
0001CC88                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CC88                            
0001CC88                            
0001CC88                            LoadTiles:
0001CC88 2C99                       		move.l	(a1)+,(a6)
0001CC8A 2C99                       		move.l	(a1)+,(a6)
0001CC8C 2C99                       		move.l	(a1)+,(a6)
0001CC8E 2C99                       		move.l	(a1)+,(a6)
0001CC90 2C99                       		move.l	(a1)+,(a6)
0001CC92 2C99                       		move.l	(a1)+,(a6)
0001CC94 2C99                       		move.l	(a1)+,(a6)
0001CC96 2C99                       		move.l	(a1)+,(a6)
0001CC98 51C9 FFEE                  		dbf	d1,LoadTiles
0001CC9C 4E75                       		rts	
0001CC9E                            ; End of function LoadTiles
0001CC9E                            
0001CC9E                            ; ===========================================================================
0001CC9E                            ; ---------------------------------------------------------------------------
0001CC9E                            ; Animated pattern routine - more Marble Zone
0001CC9E                            ; ---------------------------------------------------------------------------
0001CC9E 0000 0000                  AniArt_MZextra:	dc.w loc_1C3EE-AniArt_MZextra, loc_1C3FA-AniArt_MZextra
0001CCA2 0000 0000                  		dc.w loc_1C410-AniArt_MZextra, loc_1C41E-AniArt_MZextra
0001CCA6 0000 0000                  		dc.w loc_1C434-AniArt_MZextra, loc_1C442-AniArt_MZextra
0001CCAA 0000 0000                  		dc.w loc_1C458-AniArt_MZextra, loc_1C466-AniArt_MZextra
0001CCAE 0000 0000                  		dc.w loc_1C47C-AniArt_MZextra, loc_1C48A-AniArt_MZextra
0001CCB2 0000 0000                  		dc.w loc_1C4A0-AniArt_MZextra, loc_1C4AE-AniArt_MZextra
0001CCB6 0000 0000                  		dc.w loc_1C4C4-AniArt_MZextra, loc_1C4D2-AniArt_MZextra
0001CCBA 0000 0000                  		dc.w loc_1C4E8-AniArt_MZextra, loc_1C4FA-AniArt_MZextra
0001CCBE                            ; ===========================================================================
0001CCBE                            
0001CCBE                            loc_1C3EE:				; XREF: AniArt_MZextra
0001CCBE 2C91                       		move.l	(a1),(a6)
0001CCC0 43E9 0010                  		lea	$10(a1),a1
0001CCC4 51C9 FFF8                  		dbf	d1,loc_1C3EE
0001CCC8 4E75                       		rts	
0001CCCA                            ; ===========================================================================
0001CCCA                            
0001CCCA                            loc_1C3FA:				; XREF: AniArt_MZextra
0001CCCA 2029 0002                  		move.l	2(a1),d0
0001CCCE 1029 0001                  		move.b	1(a1),d0
0001CCD2 E098                       		ror.l	#8,d0
0001CCD4 2C80                       		move.l	d0,(a6)
0001CCD6 43E9 0010                  		lea	$10(a1),a1
0001CCDA 51C9 FFEE                  		dbf	d1,loc_1C3FA
0001CCDE 4E75                       		rts	
0001CCE0                            ; ===========================================================================
0001CCE0                            
0001CCE0                            loc_1C410:				; XREF: AniArt_MZextra
0001CCE0 2CA9 0002                  		move.l	2(a1),(a6)
0001CCE4 43E9 0010                  		lea	$10(a1),a1
0001CCE8 51C9 FFF6                  		dbf	d1,loc_1C410
0001CCEC 4E75                       		rts	
0001CCEE                            ; ===========================================================================
0001CCEE                            
0001CCEE                            loc_1C41E:				; XREF: AniArt_MZextra
0001CCEE 2029 0004                  		move.l	4(a1),d0
0001CCF2 1029 0003                  		move.b	3(a1),d0
0001CCF6 E098                       		ror.l	#8,d0
0001CCF8 2C80                       		move.l	d0,(a6)
0001CCFA 43E9 0010                  		lea	$10(a1),a1
0001CCFE 51C9 FFEE                  		dbf	d1,loc_1C41E
0001CD02 4E75                       		rts	
0001CD04                            ; ===========================================================================
0001CD04                            
0001CD04                            loc_1C434:				; XREF: AniArt_MZextra
0001CD04 2CA9 0004                  		move.l	4(a1),(a6)
0001CD08 43E9 0010                  		lea	$10(a1),a1
0001CD0C 51C9 FFF6                  		dbf	d1,loc_1C434
0001CD10 4E75                       		rts	
0001CD12                            ; ===========================================================================
0001CD12                            
0001CD12                            loc_1C442:				; XREF: AniArt_MZextra
0001CD12 2029 0006                  		move.l	6(a1),d0
0001CD16 1029 0005                  		move.b	5(a1),d0
0001CD1A E098                       		ror.l	#8,d0
0001CD1C 2C80                       		move.l	d0,(a6)
0001CD1E 43E9 0010                  		lea	$10(a1),a1
0001CD22 51C9 FFEE                  		dbf	d1,loc_1C442
0001CD26 4E75                       		rts	
0001CD28                            ; ===========================================================================
0001CD28                            
0001CD28                            loc_1C458:				; XREF: AniArt_MZextra
0001CD28 2CA9 0006                  		move.l	6(a1),(a6)
0001CD2C 43E9 0010                  		lea	$10(a1),a1
0001CD30 51C9 FFF6                  		dbf	d1,loc_1C458
0001CD34 4E75                       		rts	
0001CD36                            ; ===========================================================================
0001CD36                            
0001CD36                            loc_1C466:				; XREF: AniArt_MZextra
0001CD36 2029 0008                  		move.l	8(a1),d0
0001CD3A 1029 0007                  		move.b	7(a1),d0
0001CD3E E098                       		ror.l	#8,d0
0001CD40 2C80                       		move.l	d0,(a6)
0001CD42 43E9 0010                  		lea	$10(a1),a1
0001CD46 51C9 FFEE                  		dbf	d1,loc_1C466
0001CD4A 4E75                       		rts	
0001CD4C                            ; ===========================================================================
0001CD4C                            
0001CD4C                            loc_1C47C:				; XREF: AniArt_MZextra
0001CD4C 2CA9 0008                  		move.l	8(a1),(a6)
0001CD50 43E9 0010                  		lea	$10(a1),a1
0001CD54 51C9 FFF6                  		dbf	d1,loc_1C47C
0001CD58 4E75                       		rts	
0001CD5A                            ; ===========================================================================
0001CD5A                            
0001CD5A                            loc_1C48A:				; XREF: AniArt_MZextra
0001CD5A 2029 000A                  		move.l	$A(a1),d0
0001CD5E 1029 0009                  		move.b	9(a1),d0
0001CD62 E098                       		ror.l	#8,d0
0001CD64 2C80                       		move.l	d0,(a6)
0001CD66 43E9 0010                  		lea	$10(a1),a1
0001CD6A 51C9 FFEE                  		dbf	d1,loc_1C48A
0001CD6E 4E75                       		rts	
0001CD70                            ; ===========================================================================
0001CD70                            
0001CD70                            loc_1C4A0:				; XREF: AniArt_MZextra
0001CD70 2CA9 000A                  		move.l	$A(a1),(a6)
0001CD74 43E9 0010                  		lea	$10(a1),a1
0001CD78 51C9 FFF6                  		dbf	d1,loc_1C4A0
0001CD7C 4E75                       		rts	
0001CD7E                            ; ===========================================================================
0001CD7E                            
0001CD7E                            loc_1C4AE:				; XREF: AniArt_MZextra
0001CD7E 2029 000C                  		move.l	$C(a1),d0
0001CD82 1029 000B                  		move.b	$B(a1),d0
0001CD86 E098                       		ror.l	#8,d0
0001CD88 2C80                       		move.l	d0,(a6)
0001CD8A 43E9 0010                  		lea	$10(a1),a1
0001CD8E 51C9 FFEE                  		dbf	d1,loc_1C4AE
0001CD92 4E75                       		rts	
0001CD94                            ; ===========================================================================
0001CD94                            
0001CD94                            loc_1C4C4:				; XREF: AniArt_MZextra
0001CD94 2CA9 000C                  		move.l	$C(a1),(a6)
0001CD98 43E9 0010                  		lea	$10(a1),a1
0001CD9C 51C9 FFF6                  		dbf	d1,loc_1C4C4
0001CDA0 4E75                       		rts	
0001CDA2                            ; ===========================================================================
0001CDA2                            
0001CDA2                            loc_1C4D2:				; XREF: AniArt_MZextra
0001CDA2 2029 000C                  		move.l	$C(a1),d0
0001CDA6 E198                       		rol.l	#8,d0
0001CDA8 1011                       		move.b	0(a1),d0
0001CDAA 2C80                       		move.l	d0,(a6)
0001CDAC 43E9 0010                  		lea	$10(a1),a1
0001CDB0 51C9 FFF0                  		dbf	d1,loc_1C4D2
0001CDB4 4E75                       		rts	
0001CDB6                            ; ===========================================================================
0001CDB6                            
0001CDB6                            loc_1C4E8:				; XREF: AniArt_MZextra
0001CDB6 3CA9 000E                  		move.w	$E(a1),(a6)
0001CDBA 3C91                       		move.w	0(a1),(a6)
0001CDBC 43E9 0010                  		lea	$10(a1),a1
0001CDC0 51C9 FFF4                  		dbf	d1,loc_1C4E8
0001CDC4 4E75                       		rts	
0001CDC6                            ; ===========================================================================
0001CDC6                            
0001CDC6                            loc_1C4FA:				; XREF: AniArt_MZextra
0001CDC6 2011                       		move.l	0(a1),d0
0001CDC8 1029 000F                  		move.b	$F(a1),d0
0001CDCC E098                       		ror.l	#8,d0
0001CDCE 2C80                       		move.l	d0,(a6)
0001CDD0 43E9 0010                  		lea	$10(a1),a1
0001CDD4 51C9 FFF0                  		dbf	d1,loc_1C4FA
0001CDD8 4E75                       		rts	
0001CDDA                            
0001CDDA                            ; ---------------------------------------------------------------------------
0001CDDA                            ; Animated pattern routine - giant ring
0001CDDA                            ; ---------------------------------------------------------------------------
0001CDDA                            
0001CDDA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CDDA                            
0001CDDA                            
0001CDDA                            AniArt_GiantRing:			; XREF: AniArt_Load
0001CDDA 4A78 F7BE                  		tst.w	($FFFFF7BE).w
0001CDDE 6600                       		bne.s	loc_1C518
0001CDE0 4E75                       		rts	
0001CDE2                            ; ===========================================================================
0001CDE2                            
0001CDE2                            loc_1C518:
0001CDE2 0478 01C0 F7BE             		subi.w	#$1C0,($FFFFF7BE).w
0001CDE8 43F9 0000 0000             		lea	(Art_BigRing).l,a1 ; load giant	ring patterns
0001CDEE 7000                       		moveq	#0,d0
0001CDF0 3038 F7BE                  		move.w	($FFFFF7BE).w,d0
0001CDF4 43F1 0000                  		lea	(a1,d0.w),a1
0001CDF8 0640 8000                  		addi.w	#$8000,d0
0001CDFC E588                       		lsl.l	#2,d0
0001CDFE E448                       		lsr.w	#2,d0
0001CE00 0040 4000                  		ori.w	#$4000,d0
0001CE04 4840                       		swap	d0
0001CE06 2D40 0004                  		move.l	d0,4(a6)
0001CE0A 323C 000D                  		move.w	#$D,d1
0001CE0E 6000 FE78                  		bra.w	LoadTiles
0001CE12                            ; End of function AniArt_GiantRing
0001CE12                            
0001CE12                            ; ===========================================================================
0001CE12                            ; ---------------------------------------------------------------------------
0001CE12                            ; Object 21 - SCORE, TIME, RINGS
0001CE12                            ; ---------------------------------------------------------------------------
0001CE12                            
0001CE12                            Obj21:					; XREF: Obj_Index
0001CE12 7000                       		moveq	#0,d0
0001CE14 1028 0024                  		move.b	$24(a0),d0
0001CE18 323B 0000                  		move.w	Obj21_Index(pc,d0.w),d1
0001CE1C 4EFB 1000                  		jmp	Obj21_Index(pc,d1.w)
0001CE20                            ; ===========================================================================
0001CE20 0000                       Obj21_Index:	dc.w Obj21_Main-Obj21_Index
0001CE22 0000                       		dc.w Obj21_Flash-Obj21_Index
0001CE24                            ; ===========================================================================
0001CE24                            
0001CE24                            Obj21_Main:				; XREF: Obj21_Main
0001CE24 5428 0024                  		addq.b	#2,$24(a0)
0001CE28 317C 0090 0008             		move.w	#$90,8(a0)
0001CE2E 317C 0108 000A             		move.w	#$108,$A(a0)
0001CE34 217C 0000 0000 0004        		move.l	#Map_obj21,4(a0)
0001CE3C 317C 06CA 0002             		move.w	#$6CA,2(a0)
0001CE42 117C 0000 0001             		move.b	#0,1(a0)
0001CE48 117C 0000 0018             		move.b	#0,$18(a0)
0001CE4E                            
0001CE4E                            Obj21_Flash:				; XREF: Obj21_Main
0001CE4E 4A78 FE20                  		tst.w	($FFFFFE20).w	; do you have any rings?
0001CE52 6700                       		beq.s	Obj21_Flash2	; if not, branch
0001CE54 4228 001A                  		clr.b	$1A(a0)		; make all counters yellow
0001CE58 4EF9 0000 DDC2             		jmp	DisplaySprite
0001CE5E                            ; ===========================================================================
0001CE5E                            
0001CE5E                            Obj21_Flash2:
0001CE5E 7000                       		moveq	#0,d0
0001CE60 0838 0003 FE05             		btst	#3,($FFFFFE05).w
0001CE66 6600                       		bne.s	Obj21_Display
0001CE68 5240                       		addq.w	#1,d0		; make ring counter flash red
0001CE6A 0C38 0009 FE23             		cmpi.b	#9,($FFFFFE23).w ; have	9 minutes elapsed?
0001CE70 6600                       		bne.s	Obj21_Display	; if not, branch
0001CE72 5440                       		addq.w	#2,d0		; make time counter flash red
0001CE74                            
0001CE74                            Obj21_Display:
0001CE74 1140 001A                  		move.b	d0,$1A(a0)
0001CE78 4EF9 0000 DDC2             		jmp	DisplaySprite
0001CE7E                            ; ===========================================================================
0001CE7E                            ; ---------------------------------------------------------------------------
0001CE7E                            ; Sprite mappings - SCORE, TIME, RINGS
0001CE7E                            ; ---------------------------------------------------------------------------
0001CE7E                            Map_obj21:
0001CE7E                            	include "_maps\obj21.asm"
0001CE7E                            ; ---------------------------------------------------------------------------
0001CE7E                            ; Sprite mappings - SCORE, TIME, RINGS
0001CE7E                            ; ---------------------------------------------------------------------------
0001CE7E 0000 0000                  		dc.w byte_1C5BC-Map_obj21, byte_1C5F0-Map_obj21
0001CE82 0000 0000                  		dc.w byte_1C624-Map_obj21, byte_1C658-Map_obj21
0001CE86 0A                         byte_1C5BC:	dc.b $A
0001CE87 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001CE8C 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001CE91 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001CE96 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001CE9B 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001CEA0 A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001CEA5 A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001CEAA A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001CEAF 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001CEB4 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001CEB9 00                         		dc.b 0
0001CEBA 0A                         byte_1C5F0:	dc.b $A
0001CEBB 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001CEC0 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001CEC5 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001CECA 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001CECF 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001CED4 A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001CED9 A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001CEDE A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001CEE3 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001CEE8 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001CEED 00                         		dc.b 0
0001CEEE 0A                         byte_1C624:	dc.b $A
0001CEEF 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001CEF4 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001CEF9 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001CEFE 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001CF03 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001CF08 A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001CF0D A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001CF12 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001CF17 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001CF1C 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001CF21 00                         		dc.b 0
0001CF22 0A                         byte_1C658:	dc.b $A
0001CF23 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001CF28 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001CF2D 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001CF32 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001CF37 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001CF3C A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001CF41 A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001CF46 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001CF4B 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001CF50 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001CF56 00                         		even
0001CF56 00                         		even
0001CF56                            
0001CF56                            ; ---------------------------------------------------------------------------
0001CF56                            ; Add points subroutine
0001CF56                            ; ---------------------------------------------------------------------------
0001CF56                            
0001CF56                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CF56                            
0001CF56                            
0001CF56                            AddPoints:
0001CF56 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; set score counter to	update
0001CF5C 45F8 FFC0                  		lea	($FFFFFFC0).w,a2
0001CF60 47F8 FE26                  		lea	($FFFFFE26).w,a3
0001CF64 D193                       		add.l	d0,(a3)		; add d0*10 to the score
0001CF66 223C 000F 423F             		move.l	#999999,d1
0001CF6C B293                       		cmp.l	(a3),d1		; is #999999 higher than the score?
0001CF6E 6200 0000                  		bhi.w	loc_1C6AC	; if yes, branch
0001CF72 2681                       		move.l	d1,(a3)		; reset	score to #999999
0001CF74 2481                       		move.l	d1,(a2)
0001CF76                            
0001CF76                            loc_1C6AC:
0001CF76 2013                       		move.l	(a3),d0
0001CF78 B092                       		cmp.l	(a2),d0
0001CF7A 6500 0000                  		bcs.w	locret_1C6B6
0001CF7E 2480                       		move.l	d0,(a2)
0001CF80                            
0001CF80                            locret_1C6B6:
0001CF80 4E75                       		rts	
0001CF82                            ; End of function AddPoints
0001CF82                            
0001CF82                            ; ---------------------------------------------------------------------------
0001CF82                            ; Subroutine to	update the HUD
0001CF82                            ; ---------------------------------------------------------------------------
0001CF82                            
0001CF82                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CF82                            
0001CF82                            
0001CF82                            HudUpdate:
0001CF82 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	on?
0001CF86 6600 0000                  		bne.w	HudDebug	; if yes, branch
0001CF8A 4A38 FE1F                  		tst.b	($FFFFFE1F).w	; does the score need updating?
0001CF8E 6700                       		beq.s	Hud_ChkRings	; if not, branch
0001CF90 4238 FE1F                  		clr.b	($FFFFFE1F).w
0001CF94 203C 5C80 0003             		move.l	#$5C800003,d0	; set VRAM address
0001CF9A 2238 FE26                  		move.l	($FFFFFE26).w,d1 ; load	score
0001CF9E 6100 0000                  		bsr.w	Hud_Score
0001CFA2                            
0001CFA2                            Hud_ChkRings:
0001CFA2 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001CFA6 6700                       		beq.s	Hud_ChkTime	; if not, branch
0001CFA8 6A00                       		bpl.s	loc_1C6E4
0001CFAA 6100 0000                  		bsr.w	Hud_LoadZero
0001CFAE                            
0001CFAE                            loc_1C6E4:
0001CFAE 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001CFB2 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001CFB8 7200                       		moveq	#0,d1
0001CFBA 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001CFBE 6100 0000                  		bsr.w	Hud_Rings
0001CFC2                            
0001CFC2                            Hud_ChkTime:
0001CFC2 4A38 FE1E                  		tst.b	($FFFFFE1E).w	; does the time	need updating?
0001CFC6 6700                       		beq.s	Hud_ChkLives	; if not, branch
0001CFC8 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001CFCC 6600                       		bne.s	Hud_ChkLives	; if yes, branch
0001CFCE 43F8 FE22                  		lea	($FFFFFE22).w,a1
0001CFD2 0C99 0009 3B3B             		cmpi.l	#$93B3B,(a1)+	; is the time 9.59?
0001CFD8 6700                       		beq.s	TimeOver	; if yes, branch
0001CFDA 5221                       		addq.b	#1,-(a1)
0001CFDC 0C11 003C                  		cmpi.b	#60,(a1)
0001CFE0 6500                       		bcs.s	Hud_ChkLives
0001CFE2 12BC 0000                  		move.b	#0,(a1)
0001CFE6 5221                       		addq.b	#1,-(a1)
0001CFE8 0C11 003C                  		cmpi.b	#60,(a1)
0001CFEC 6500                       		bcs.s	loc_1C734
0001CFEE 12BC 0000                  		move.b	#0,(a1)
0001CFF2 5221                       		addq.b	#1,-(a1)
0001CFF4 0C11 0009                  		cmpi.b	#9,(a1)
0001CFF8 6500                       		bcs.s	loc_1C734
0001CFFA 12BC 0009                  		move.b	#9,(a1)
0001CFFE                            
0001CFFE                            loc_1C734:
0001CFFE 203C 5E40 0003             		move.l	#$5E400003,d0
0001D004 7200                       		moveq	#0,d1
0001D006 1238 FE23                  		move.b	($FFFFFE23).w,d1 ; load	minutes
0001D00A 6100 0000                  		bsr.w	Hud_Mins
0001D00E 203C 5EC0 0003             		move.l	#$5EC00003,d0
0001D014 7200                       		moveq	#0,d1
0001D016 1238 FE24                  		move.b	($FFFFFE24).w,d1 ; load	seconds
0001D01A 6100 0000                  		bsr.w	Hud_Secs
0001D01E                            
0001D01E                            Hud_ChkLives:
0001D01E 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001D022 6700                       		beq.s	Hud_ChkBonus	; if not, branch
0001D024 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001D028 6100 0000                  		bsr.w	Hud_Lives
0001D02C                            
0001D02C                            Hud_ChkBonus:
0001D02C 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; do time/ring bonus counters need updating?
0001D030 6700                       		beq.s	Hud_End		; if not, branch
0001D032 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001D036 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l
0001D040 7200                       		moveq	#0,d1
0001D042 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001D046 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001D04A 7200                       		moveq	#0,d1
0001D04C 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001D050 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001D054                            
0001D054                            Hud_End:
0001D054 4E75                       		rts	
0001D056                            ; ===========================================================================
0001D056                            
0001D056                            TimeOver:				; XREF: Hud_ChkTime
0001D056 4238 FE1E                  		clr.b	($FFFFFE1E).w
0001D05A 41F8 D000                  		lea	($FFFFD000).w,a0
0001D05E 2448                       		movea.l	a0,a2
0001D060 6100 E908                  		bsr.w	KillSonic
0001D064 11FC 0001 FE1A             		move.b	#1,($FFFFFE1A).w
0001D06A 4E75                       		rts	
0001D06C                            ; ===========================================================================
0001D06C                            
0001D06C                            HudDebug:				; XREF: HudUpdate
0001D06C 6100 0000                  		bsr.w	HudDb_XY
0001D070 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001D074 6700                       		beq.s	HudDb_ObjCount	; if not, branch
0001D076 6A00                       		bpl.s	HudDb_Rings
0001D078 6100 0000                  		bsr.w	Hud_LoadZero
0001D07C                            
0001D07C                            HudDb_Rings:
0001D07C 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001D080 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001D086 7200                       		moveq	#0,d1
0001D088 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001D08C 6100 0000                  		bsr.w	Hud_Rings
0001D090                            
0001D090                            HudDb_ObjCount:
0001D090 203C 5EC0 0003             		move.l	#$5EC00003,d0	; set VRAM address
0001D096 7200                       		moveq	#0,d1
0001D098 1238 F62C                  		move.b	($FFFFF62C).w,d1 ; load	"number	of objects" counter
0001D09C 6100 0000                  		bsr.w	Hud_Secs
0001D0A0 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001D0A4 6700                       		beq.s	HudDb_ChkBonus	; if not, branch
0001D0A6 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001D0AA 6100 0000                  		bsr.w	Hud_Lives
0001D0AE                            
0001D0AE                            HudDb_ChkBonus:
0001D0AE 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; does the ring/time bonus counter need	updating?
0001D0B2 6700                       		beq.s	HudDb_End	; if not, branch
0001D0B4 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001D0B8 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l ; set VRAM address
0001D0C2 7200                       		moveq	#0,d1
0001D0C4 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001D0C8 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001D0CC 7200                       		moveq	#0,d1
0001D0CE 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001D0D2 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001D0D6                            
0001D0D6                            HudDb_End:
0001D0D6 4E75                       		rts	
0001D0D8                            ; End of function HudUpdate
0001D0D8                            
0001D0D8                            ; ---------------------------------------------------------------------------
0001D0D8                            ; Subroutine to	load "0" on the	HUD
0001D0D8                            ; ---------------------------------------------------------------------------
0001D0D8                            
0001D0D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D0D8                            
0001D0D8                            
0001D0D8                            Hud_LoadZero:				; XREF: HudUpdate
0001D0D8 23FC 5F40 0003 00C0 0004   		move.l	#$5F400003,($C00004).l
0001D0E2 45FA 0000                  		lea	Hud_TilesZero(pc),a2
0001D0E6 343C 0002                  		move.w	#2,d2
0001D0EA 6000                       		bra.s	loc_1C83E
0001D0EC                            ; End of function Hud_LoadZero
0001D0EC                            
0001D0EC                            ; ---------------------------------------------------------------------------
0001D0EC                            ; Subroutine to	load uncompressed HUD patterns ("E", "0", colon)
0001D0EC                            ; ---------------------------------------------------------------------------
0001D0EC                            
0001D0EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D0EC                            
0001D0EC                            
0001D0EC                            Hud_Base:				; XREF: Level; SS_EndLoop; EndingSequence
0001D0EC 4DF9 00C0 0000             		lea	($C00000).l,a6
0001D0F2 6100 0000                  		bsr.w	Hud_Lives
0001D0F6 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l
0001D100 45FA 0000                  		lea	Hud_TilesBase(pc),a2
0001D104 343C 000E                  		move.w	#$E,d2
0001D108                            
0001D108                            loc_1C83E:				; XREF: Hud_LoadZero
0001D108 43FA 0000                  		lea	Art_Hud(pc),a1
0001D10C                            
0001D10C                            loc_1C842:
0001D10C 323C 000F                  		move.w	#$F,d1
0001D110 101A                       		move.b	(a2)+,d0
0001D112 6B00                       		bmi.s	loc_1C85E
0001D114 4880                       		ext.w	d0
0001D116 EB48                       		lsl.w	#5,d0
0001D118 47F1 0000                  		lea	(a1,d0.w),a3
0001D11C                            
0001D11C                            loc_1C852:
0001D11C 2C9B                       		move.l	(a3)+,(a6)
0001D11E 51C9 FFFC                  		dbf	d1,loc_1C852
0001D122                            
0001D122                            loc_1C858:
0001D122 51CA FFE8                  		dbf	d2,loc_1C842
0001D126                            
0001D126 4E75                       		rts	
0001D128                            ; ===========================================================================
0001D128                            
0001D128                            loc_1C85E:
0001D128 2CBC 0000 0000             		move.l	#0,(a6)
0001D12E 51C9 FFF8                  		dbf	d1,loc_1C85E
0001D132                            
0001D132 60EE                       		bra.s	loc_1C858
0001D134                            ; End of function Hud_Base
0001D134                            
0001D134                            ; ===========================================================================
0001D134 16FF FFFF FFFF FF00 0014+  Hud_TilesBase:	dc.b $16, $FF, $FF, $FF, $FF, $FF, $FF,	0, 0, $14, 0, 0
0001D140 FFFF 0000                  Hud_TilesZero:	dc.b $FF, $FF, 0, 0
0001D144                            ; ---------------------------------------------------------------------------
0001D144                            ; Subroutine to	load debug mode	numbers	patterns
0001D144                            ; ---------------------------------------------------------------------------
0001D144                            
0001D144                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D144                            
0001D144                            
0001D144                            HudDb_XY:				; XREF: HudDebug
0001D144 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l ; set VRAM address
0001D14E 3238 F700                  		move.w	($FFFFF700).w,d1 ; load	camera x-position
0001D152 4841                       		swap	d1
0001D154 3238 D008                  		move.w	($FFFFD008).w,d1 ; load	Sonic's x-position
0001D158 6100                       		bsr.s	HudDb_XY2
0001D15A 3238 F704                  		move.w	($FFFFF704).w,d1 ; load	camera y-position
0001D15E 4841                       		swap	d1
0001D160 3238 D00C                  		move.w	($FFFFD00C).w,d1 ; load	Sonic's y-position
0001D164                            ; End of function HudDb_XY
0001D164                            
0001D164                            
0001D164                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D164                            
0001D164                            
0001D164                            HudDb_XY2:
0001D164 7C07                       		moveq	#7,d6
0001D166 43F9 0000 05F4             		lea	(Art_Text).l,a1
0001D16C                            
0001D16C                            HudDb_XYLoop:
0001D16C E959                       		rol.w	#4,d1
0001D16E 3401                       		move.w	d1,d2
0001D170 0242 000F                  		andi.w	#$F,d2
0001D174 0C42 000A                  		cmpi.w	#$A,d2
0001D178 6500                       		bcs.s	loc_1C8B2
0001D17A 5E42                       		addq.w	#7,d2
0001D17C                            
0001D17C                            loc_1C8B2:
0001D17C EB4A                       		lsl.w	#5,d2
0001D17E 47F1 2000                  		lea	(a1,d2.w),a3
0001D182 2C9B                       		move.l	(a3)+,(a6)
0001D184 2C9B                       		move.l	(a3)+,(a6)
0001D186 2C9B                       		move.l	(a3)+,(a6)
0001D188 2C9B                       		move.l	(a3)+,(a6)
0001D18A 2C9B                       		move.l	(a3)+,(a6)
0001D18C 2C9B                       		move.l	(a3)+,(a6)
0001D18E 2C9B                       		move.l	(a3)+,(a6)
0001D190 2C9B                       		move.l	(a3)+,(a6)
0001D192 4841                       		swap	d1
0001D194 51CE FFD6                  		dbf	d6,HudDb_XYLoop	; repeat 7 more	times
0001D198                            
0001D198 4E75                       		rts	
0001D19A                            ; End of function HudDb_XY2
0001D19A                            
0001D19A                            ; ---------------------------------------------------------------------------
0001D19A                            ; Subroutine to	load rings numbers patterns
0001D19A                            ; ---------------------------------------------------------------------------
0001D19A                            
0001D19A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D19A                            
0001D19A                            
0001D19A                            Hud_Rings:				; XREF: HudUpdate
0001D19A 45F9 0000 0000             		lea	(Hud_100).l,a2
0001D1A0 7C02                       		moveq	#2,d6
0001D1A2 6000                       		bra.s	Hud_LoadArt
0001D1A4                            ; End of function Hud_Rings
0001D1A4                            
0001D1A4                            ; ---------------------------------------------------------------------------
0001D1A4                            ; Subroutine to	load score numbers patterns
0001D1A4                            ; ---------------------------------------------------------------------------
0001D1A4                            
0001D1A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D1A4                            
0001D1A4                            
0001D1A4                            Hud_Score:				; XREF: HudUpdate
0001D1A4 45F9 0000 0000             		lea	(Hud_100000).l,a2
0001D1AA 7C05                       		moveq	#5,d6
0001D1AC                            
0001D1AC                            Hud_LoadArt:
0001D1AC 7800                       		moveq	#0,d4
0001D1AE 43FA 0000                  		lea	Art_Hud(pc),a1
0001D1B2                            
0001D1B2                            Hud_ScoreLoop:
0001D1B2 7400                       		moveq	#0,d2
0001D1B4 261A                       		move.l	(a2)+,d3
0001D1B6                            
0001D1B6                            loc_1C8EC:
0001D1B6 9283                       		sub.l	d3,d1
0001D1B8 6500                       		bcs.s	loc_1C8F4
0001D1BA 5242                       		addq.w	#1,d2
0001D1BC 60F8                       		bra.s	loc_1C8EC
0001D1BE                            ; ===========================================================================
0001D1BE                            
0001D1BE                            loc_1C8F4:
0001D1BE D283                       		add.l	d3,d1
0001D1C0 4A42                       		tst.w	d2
0001D1C2 6700                       		beq.s	loc_1C8FE
0001D1C4 383C 0001                  		move.w	#1,d4
0001D1C8                            
0001D1C8                            loc_1C8FE:
0001D1C8 4A44                       		tst.w	d4
0001D1CA 6700                       		beq.s	loc_1C92C
0001D1CC ED4A                       		lsl.w	#6,d2
0001D1CE 2D40 0004                  		move.l	d0,4(a6)
0001D1D2 47F1 2000                  		lea	(a1,d2.w),a3
0001D1D6 2C9B                       		move.l	(a3)+,(a6)
0001D1D8 2C9B                       		move.l	(a3)+,(a6)
0001D1DA 2C9B                       		move.l	(a3)+,(a6)
0001D1DC 2C9B                       		move.l	(a3)+,(a6)
0001D1DE 2C9B                       		move.l	(a3)+,(a6)
0001D1E0 2C9B                       		move.l	(a3)+,(a6)
0001D1E2 2C9B                       		move.l	(a3)+,(a6)
0001D1E4 2C9B                       		move.l	(a3)+,(a6)
0001D1E6 2C9B                       		move.l	(a3)+,(a6)
0001D1E8 2C9B                       		move.l	(a3)+,(a6)
0001D1EA 2C9B                       		move.l	(a3)+,(a6)
0001D1EC 2C9B                       		move.l	(a3)+,(a6)
0001D1EE 2C9B                       		move.l	(a3)+,(a6)
0001D1F0 2C9B                       		move.l	(a3)+,(a6)
0001D1F2 2C9B                       		move.l	(a3)+,(a6)
0001D1F4 2C9B                       		move.l	(a3)+,(a6)
0001D1F6                            
0001D1F6                            loc_1C92C:
0001D1F6 0680 0040 0000             		addi.l	#$400000,d0
0001D1FC 51CE FFB4                  		dbf	d6,Hud_ScoreLoop
0001D200                            
0001D200 4E75                       		rts	
0001D202                            ; End of function Hud_Score
0001D202                            
0001D202                            ; ---------------------------------------------------------------------------
0001D202                            ; Subroutine to	load countdown numbers on the continue screen
0001D202                            ; ---------------------------------------------------------------------------
0001D202                            
0001D202                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D202                            
0001D202                            
0001D202                            ContScrCounter:				; XREF: ContinueScreen
0001D202 23FC 5F80 0003 00C0 0004   		move.l	#$5F800003,($C00004).l ; set VRAM address
0001D20C 4DF9 00C0 0000             		lea	($C00000).l,a6
0001D212 45F9 0000 0000             		lea	(Hud_10).l,a2
0001D218 7C01                       		moveq	#1,d6
0001D21A 7800                       		moveq	#0,d4
0001D21C 43FA 0000                  		lea	Art_Hud(pc),a1 ; load numbers patterns
0001D220                            
0001D220                            ContScr_Loop:
0001D220 7400                       		moveq	#0,d2
0001D222 261A                       		move.l	(a2)+,d3
0001D224                            
0001D224                            loc_1C95A:
0001D224 9283                       		sub.l	d3,d1
0001D226 6500                       		bcs.s	loc_1C962
0001D228 5242                       		addq.w	#1,d2
0001D22A 60F8                       		bra.s	loc_1C95A
0001D22C                            ; ===========================================================================
0001D22C                            
0001D22C                            loc_1C962:
0001D22C D283                       		add.l	d3,d1
0001D22E ED4A                       		lsl.w	#6,d2
0001D230 47F1 2000                  		lea	(a1,d2.w),a3
0001D234 2C9B                       		move.l	(a3)+,(a6)
0001D236 2C9B                       		move.l	(a3)+,(a6)
0001D238 2C9B                       		move.l	(a3)+,(a6)
0001D23A 2C9B                       		move.l	(a3)+,(a6)
0001D23C 2C9B                       		move.l	(a3)+,(a6)
0001D23E 2C9B                       		move.l	(a3)+,(a6)
0001D240 2C9B                       		move.l	(a3)+,(a6)
0001D242 2C9B                       		move.l	(a3)+,(a6)
0001D244 2C9B                       		move.l	(a3)+,(a6)
0001D246 2C9B                       		move.l	(a3)+,(a6)
0001D248 2C9B                       		move.l	(a3)+,(a6)
0001D24A 2C9B                       		move.l	(a3)+,(a6)
0001D24C 2C9B                       		move.l	(a3)+,(a6)
0001D24E 2C9B                       		move.l	(a3)+,(a6)
0001D250 2C9B                       		move.l	(a3)+,(a6)
0001D252 2C9B                       		move.l	(a3)+,(a6)
0001D254 51CE FFCA                  		dbf	d6,ContScr_Loop	; repeat 1 more	time
0001D258                            
0001D258 4E75                       		rts	
0001D25A                            ; End of function ContScrCounter
0001D25A                            
0001D25A                            ; ===========================================================================
0001D25A                            ; ---------------------------------------------------------------------------
0001D25A                            ; HUD counter sizes
0001D25A                            ; ---------------------------------------------------------------------------
0001D25A 0001 86A0                  Hud_100000:	dc.l 100000		; XREF: Hud_Score
0001D25E 0000 2710                  Hud_10000:	dc.l 10000
0001D262 0000 03E8                  Hud_1000:	dc.l 1000		; XREF: Hud_TimeRingBonus
0001D266 0000 0064                  Hud_100:	dc.l 100		; XREF: Hud_Rings
0001D26A 0000 000A                  Hud_10:		dc.l 10			; XREF: ContScrCounter; Hud_Secs; Hud_Lives
0001D26E 0000 0001                  Hud_1:		dc.l 1			; XREF: Hud_Mins
0001D272                            
0001D272                            ; ---------------------------------------------------------------------------
0001D272                            ; Subroutine to	load time numbers patterns
0001D272                            ; ---------------------------------------------------------------------------
0001D272                            
0001D272                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D272                            
0001D272                            
0001D272                            Hud_Mins:				; XREF: Hud_ChkTime
0001D272 45F9 0001 D26E             		lea	(Hud_1).l,a2
0001D278 7C00                       		moveq	#0,d6
0001D27A 6000                       		bra.s	loc_1C9BA
0001D27C                            ; End of function Hud_Mins
0001D27C                            
0001D27C                            
0001D27C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D27C                            
0001D27C                            
0001D27C                            Hud_Secs:				; XREF: Hud_ChkTime
0001D27C 45F9 0001 D26A             		lea	(Hud_10).l,a2
0001D282 7C01                       		moveq	#1,d6
0001D284                            
0001D284                            loc_1C9BA:
0001D284 7800                       		moveq	#0,d4
0001D286 43FA 0000                  		lea	Art_Hud(pc),a1
0001D28A                            
0001D28A                            Hud_TimeLoop:
0001D28A 7400                       		moveq	#0,d2
0001D28C 261A                       		move.l	(a2)+,d3
0001D28E                            
0001D28E                            loc_1C9C4:
0001D28E 9283                       		sub.l	d3,d1
0001D290 6500                       		bcs.s	loc_1C9CC
0001D292 5242                       		addq.w	#1,d2
0001D294 60F8                       		bra.s	loc_1C9C4
0001D296                            ; ===========================================================================
0001D296                            
0001D296                            loc_1C9CC:
0001D296 D283                       		add.l	d3,d1
0001D298 4A42                       		tst.w	d2
0001D29A 6700                       		beq.s	loc_1C9D6
0001D29C 383C 0001                  		move.w	#1,d4
0001D2A0                            
0001D2A0                            loc_1C9D6:
0001D2A0 ED4A                       		lsl.w	#6,d2
0001D2A2 2D40 0004                  		move.l	d0,4(a6)
0001D2A6 47F1 2000                  		lea	(a1,d2.w),a3
0001D2AA 2C9B                       		move.l	(a3)+,(a6)
0001D2AC 2C9B                       		move.l	(a3)+,(a6)
0001D2AE 2C9B                       		move.l	(a3)+,(a6)
0001D2B0 2C9B                       		move.l	(a3)+,(a6)
0001D2B2 2C9B                       		move.l	(a3)+,(a6)
0001D2B4 2C9B                       		move.l	(a3)+,(a6)
0001D2B6 2C9B                       		move.l	(a3)+,(a6)
0001D2B8 2C9B                       		move.l	(a3)+,(a6)
0001D2BA 2C9B                       		move.l	(a3)+,(a6)
0001D2BC 2C9B                       		move.l	(a3)+,(a6)
0001D2BE 2C9B                       		move.l	(a3)+,(a6)
0001D2C0 2C9B                       		move.l	(a3)+,(a6)
0001D2C2 2C9B                       		move.l	(a3)+,(a6)
0001D2C4 2C9B                       		move.l	(a3)+,(a6)
0001D2C6 2C9B                       		move.l	(a3)+,(a6)
0001D2C8 2C9B                       		move.l	(a3)+,(a6)
0001D2CA 0680 0040 0000             		addi.l	#$400000,d0
0001D2D0 51CE FFB8                  		dbf	d6,Hud_TimeLoop
0001D2D4                            
0001D2D4 4E75                       		rts	
0001D2D6                            ; End of function Hud_Secs
0001D2D6                            
0001D2D6                            ; ---------------------------------------------------------------------------
0001D2D6                            ; Subroutine to	load time/ring bonus numbers patterns
0001D2D6                            ; ---------------------------------------------------------------------------
0001D2D6                            
0001D2D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D2D6                            
0001D2D6                            
0001D2D6                            Hud_TimeRingBonus:			; XREF: Hud_ChkBonus
0001D2D6 45F9 0001 D262             		lea	(Hud_1000).l,a2
0001D2DC 7C03                       		moveq	#3,d6
0001D2DE 7800                       		moveq	#0,d4
0001D2E0 43FA 0000                  		lea	Art_Hud(pc),a1
0001D2E4                            
0001D2E4                            Hud_BonusLoop:
0001D2E4 7400                       		moveq	#0,d2
0001D2E6 261A                       		move.l	(a2)+,d3
0001D2E8                            
0001D2E8                            loc_1CA1E:
0001D2E8 9283                       		sub.l	d3,d1
0001D2EA 6500                       		bcs.s	loc_1CA26
0001D2EC 5242                       		addq.w	#1,d2
0001D2EE 60F8                       		bra.s	loc_1CA1E
0001D2F0                            ; ===========================================================================
0001D2F0                            
0001D2F0                            loc_1CA26:
0001D2F0 D283                       		add.l	d3,d1
0001D2F2 4A42                       		tst.w	d2
0001D2F4 6700                       		beq.s	loc_1CA30
0001D2F6 383C 0001                  		move.w	#1,d4
0001D2FA                            
0001D2FA                            loc_1CA30:
0001D2FA 4A44                       		tst.w	d4
0001D2FC 6700                       		beq.s	Hud_ClrBonus
0001D2FE ED4A                       		lsl.w	#6,d2
0001D300 47F1 2000                  		lea	(a1,d2.w),a3
0001D304 2C9B                       		move.l	(a3)+,(a6)
0001D306 2C9B                       		move.l	(a3)+,(a6)
0001D308 2C9B                       		move.l	(a3)+,(a6)
0001D30A 2C9B                       		move.l	(a3)+,(a6)
0001D30C 2C9B                       		move.l	(a3)+,(a6)
0001D30E 2C9B                       		move.l	(a3)+,(a6)
0001D310 2C9B                       		move.l	(a3)+,(a6)
0001D312 2C9B                       		move.l	(a3)+,(a6)
0001D314 2C9B                       		move.l	(a3)+,(a6)
0001D316 2C9B                       		move.l	(a3)+,(a6)
0001D318 2C9B                       		move.l	(a3)+,(a6)
0001D31A 2C9B                       		move.l	(a3)+,(a6)
0001D31C 2C9B                       		move.l	(a3)+,(a6)
0001D31E 2C9B                       		move.l	(a3)+,(a6)
0001D320 2C9B                       		move.l	(a3)+,(a6)
0001D322 2C9B                       		move.l	(a3)+,(a6)
0001D324                            
0001D324                            loc_1CA5A:
0001D324 51CE FFBE                  		dbf	d6,Hud_BonusLoop ; repeat 3 more times
0001D328                            
0001D328 4E75                       		rts	
0001D32A                            ; ===========================================================================
0001D32A                            
0001D32A                            Hud_ClrBonus:
0001D32A 7A0F                       		moveq	#$F,d5
0001D32C                            
0001D32C                            Hud_ClrBonusLoop:
0001D32C 2CBC 0000 0000             		move.l	#0,(a6)
0001D332 51CD FFF8                  		dbf	d5,Hud_ClrBonusLoop
0001D336                            
0001D336 60EC                       		bra.s	loc_1CA5A
0001D338                            ; End of function Hud_TimeRingBonus
0001D338                            
0001D338                            ; ---------------------------------------------------------------------------
0001D338                            ; Subroutine to	load uncompressed lives	counter	patterns
0001D338                            ; ---------------------------------------------------------------------------
0001D338                            
0001D338                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D338                            
0001D338                            
0001D338                            Hud_Lives:				; XREF: Hud_ChkLives
0001D338 203C 7BA0 0003             		move.l	#$7BA00003,d0	; set VRAM address
0001D33E 7200                       		moveq	#0,d1
0001D340 1238 FE12                  		move.b	($FFFFFE12).w,d1 ; load	number of lives
0001D344 45F9 0001 D26A             		lea	(Hud_10).l,a2
0001D34A 7C01                       		moveq	#1,d6
0001D34C 7800                       		moveq	#0,d4
0001D34E 43FA 0000                  		lea	Art_LivesNums(pc),a1
0001D352                            
0001D352                            Hud_LivesLoop:
0001D352 2D40 0004                  		move.l	d0,4(a6)
0001D356 7400                       		moveq	#0,d2
0001D358 261A                       		move.l	(a2)+,d3
0001D35A                            
0001D35A                            loc_1CA90:
0001D35A 9283                       		sub.l	d3,d1
0001D35C 6500                       		bcs.s	loc_1CA98
0001D35E 5242                       		addq.w	#1,d2
0001D360 60F8                       		bra.s	loc_1CA90
0001D362                            ; ===========================================================================
0001D362                            
0001D362                            loc_1CA98:
0001D362 D283                       		add.l	d3,d1
0001D364 4A42                       		tst.w	d2
0001D366 6700                       		beq.s	loc_1CAA2
0001D368 383C 0001                  		move.w	#1,d4
0001D36C                            
0001D36C                            loc_1CAA2:
0001D36C 4A44                       		tst.w	d4
0001D36E 6700                       		beq.s	Hud_ClrLives
0001D370                            
0001D370                            loc_1CAA6:
0001D370 EB4A                       		lsl.w	#5,d2
0001D372 47F1 2000                  		lea	(a1,d2.w),a3
0001D376 2C9B                       		move.l	(a3)+,(a6)
0001D378 2C9B                       		move.l	(a3)+,(a6)
0001D37A 2C9B                       		move.l	(a3)+,(a6)
0001D37C 2C9B                       		move.l	(a3)+,(a6)
0001D37E 2C9B                       		move.l	(a3)+,(a6)
0001D380 2C9B                       		move.l	(a3)+,(a6)
0001D382 2C9B                       		move.l	(a3)+,(a6)
0001D384 2C9B                       		move.l	(a3)+,(a6)
0001D386                            
0001D386                            loc_1CABC:
0001D386 0680 0040 0000             		addi.l	#$400000,d0
0001D38C 51CE FFC4                  		dbf	d6,Hud_LivesLoop ; repeat 1 more time
0001D390                            
0001D390 4E75                       		rts	
0001D392                            ; ===========================================================================
0001D392                            
0001D392                            Hud_ClrLives:
0001D392 4A46                       		tst.w	d6
0001D394 67DA                       		beq.s	loc_1CAA6
0001D396 7A07                       		moveq	#7,d5
0001D398                            
0001D398                            Hud_ClrLivesLoop:
0001D398 2CBC 0000 0000             		move.l	#0,(a6)
0001D39E 51CD FFF8                  		dbf	d5,Hud_ClrLivesLoop
0001D3A2 60E2                       		bra.s	loc_1CABC
0001D3A4                            ; End of function Hud_Lives
0001D3A4                            
0001D3A4                            ; ===========================================================================
0001D3A4                            Art_Hud:	incbin	artunc\HUD.bin		; 8x16 pixel numbers on HUD
0001D6A4                            		even
0001D6A4                            Art_LivesNums:	incbin	artunc\livescnt.bin	; 8x8 pixel numbers on lives counter
0001D7E4                            		even
0001D7E4                            ; ===========================================================================
0001D7E4                            ; ---------------------------------------------------------------------------
0001D7E4                            ; When debug mode is currently in use
0001D7E4                            ; ---------------------------------------------------------------------------
0001D7E4                            
0001D7E4                            DebugMode:				; XREF: Obj01; Obj09
0001D7E4 7000                       		moveq	#0,d0
0001D7E6 1038 FE08                  		move.b	($FFFFFE08).w,d0
0001D7EA 323B 0000                  		move.w	Debug_Index(pc,d0.w),d1
0001D7EE 4EFB 1000                  		jmp	Debug_Index(pc,d1.w)
0001D7F2                            ; ===========================================================================
0001D7F2 0000                       Debug_Index:	dc.w Debug_Main-Debug_Index
0001D7F4 0000                       		dc.w Debug_Skip-Debug_Index
0001D7F6                            ; ===========================================================================
0001D7F6                            
0001D7F6                            Debug_Main:				; XREF: Debug_Index
0001D7F6 5438 FE08                  		addq.b	#2,($FFFFFE08).w
0001D7FA 31F8 F72C FEF0             		move.w	($FFFFF72C).w,($FFFFFEF0).w ; buffer level x-boundary
0001D800 31F8 F726 FEF2             		move.w	($FFFFF726).w,($FFFFFEF2).w ; buffer level y-boundary
0001D806 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0001D80C 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
0001D812 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
0001D818 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
0001D81E 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
0001D824 117C 0000 001A             		move.b	#0,$1A(a0)
0001D82A 117C 0000 001C             		move.b	#0,$1C(a0)
0001D830 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)?
0001D836 6600                       		bne.s	Debug_Zone	; if not, branch
0001D838 31FC 0000 F782             		move.w	#0,($FFFFF782).w ; stop	special	stage rotating
0001D83E 31FC 0000 F780             		move.w	#0,($FFFFF780).w ; make	special	stage "upright"
0001D844 7006                       		moveq	#6,d0		; use 6th debug	item list
0001D846 6000                       		bra.s	Debug_UseList
0001D848                            ; ===========================================================================
0001D848                            
0001D848                            Debug_Zone:
0001D848 7000                       		moveq	#0,d0
0001D84A 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001D84E                            
0001D84E                            Debug_UseList:
0001D84E 45F9 0000 0000             		lea	(DebugList).l,a2
0001D854 D040                       		add.w	d0,d0
0001D856 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001D85A 3C1A                       		move.w	(a2)+,d6
0001D85C BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001D860 6200                       		bhi.s	loc_1CF9E
0001D862 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w
0001D868                            
0001D868                            loc_1CF9E:
0001D868 6100 0000                  		bsr.w	Debug_ShowItem
0001D86C 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001D872 11FC 0001 FE0B             		move.b	#1,($FFFFFE0B).w
0001D878                            
0001D878                            Debug_Skip:				; XREF: Debug_Index
0001D878 7006                       		moveq	#6,d0
0001D87A 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
0001D880 6700                       		beq.s	loc_1CFBE
0001D882 7000                       		moveq	#0,d0
0001D884 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001D888                            
0001D888                            loc_1CFBE:
0001D888 45F9 0000 0000             		lea	(DebugList).l,a2
0001D88E D040                       		add.w	d0,d0
0001D890 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001D894 3C1A                       		move.w	(a2)+,d6
0001D896 6100 0000                  		bsr.w	Debug_Control
0001D89A 4EF9 0000 DDC2             		jmp	DisplaySprite
0001D8A0                            
0001D8A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D8A0                            
0001D8A0                            
0001D8A0                            Debug_Control:
0001D8A0 7800                       		moveq	#0,d4
0001D8A2 323C 0001                  		move.w	#1,d1
0001D8A6 1838 F605                  		move.b	($FFFFF605).w,d4
0001D8AA 0244 000F                  		andi.w	#$F,d4		; is up/down/left/right	pressed?
0001D8AE 6600                       		bne.s	loc_1D018	; if yes, branch
0001D8B0 1038 F604                  		move.b	($FFFFF604).w,d0
0001D8B4 0240 000F                  		andi.w	#$F,d0
0001D8B8 6600                       		bne.s	loc_1D000
0001D8BA 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001D8C0 11FC 000F FE0B             		move.b	#$F,($FFFFFE0B).w
0001D8C6 6000 0000                  		bra.w	Debug_BackItem
0001D8CA                            ; ===========================================================================
0001D8CA                            
0001D8CA                            loc_1D000:
0001D8CA 5338 FE0A                  		subq.b	#1,($FFFFFE0A).w
0001D8CE 6600                       		bne.s	loc_1D01C
0001D8D0 11FC 0001 FE0A             		move.b	#1,($FFFFFE0A).w
0001D8D6 5238 FE0B                  		addq.b	#1,($FFFFFE0B).w
0001D8DA 6600                       		bne.s	loc_1D018
0001D8DC 11FC 00FF FE0B             		move.b	#-1,($FFFFFE0B).w
0001D8E2                            
0001D8E2                            loc_1D018:
0001D8E2 1838 F604                  		move.b	($FFFFF604).w,d4
0001D8E6                            
0001D8E6                            loc_1D01C:
0001D8E6 7200                       		moveq	#0,d1
0001D8E8 1238 FE0B                  		move.b	($FFFFFE0B).w,d1
0001D8EC 5241                       		addq.w	#1,d1
0001D8EE 4841                       		swap	d1
0001D8F0 E881                       		asr.l	#4,d1
0001D8F2 2428 000C                  		move.l	$C(a0),d2
0001D8F6 2628 0008                  		move.l	8(a0),d3
0001D8FA 0804 0000                  		btst	#0,d4		; is up	being pressed?
0001D8FE 6700                       		beq.s	loc_1D03C	; if not, branch
0001D900 9481                       		sub.l	d1,d2
0001D902 6400                       		bcc.s	loc_1D03C
0001D904 7400                       		moveq	#0,d2
0001D906                            
0001D906                            loc_1D03C:
0001D906 0804 0001                  		btst	#1,d4		; is down being	pressed?
0001D90A 6700                       		beq.s	loc_1D052	; if not, branch
0001D90C D481                       		add.l	d1,d2
0001D90E 0C82 07FF 0000             		cmpi.l	#$7FF0000,d2
0001D914 6500                       		bcs.s	loc_1D052
0001D916 243C 07FF 0000             		move.l	#$7FF0000,d2
0001D91C                            
0001D91C                            loc_1D052:
0001D91C 0804 0002                  		btst	#2,d4
0001D920 6700                       		beq.s	loc_1D05E
0001D922 9681                       		sub.l	d1,d3
0001D924 6400                       		bcc.s	loc_1D05E
0001D926 7600                       		moveq	#0,d3
0001D928                            
0001D928                            loc_1D05E:
0001D928 0804 0003                  		btst	#3,d4
0001D92C 6700                       		beq.s	loc_1D066
0001D92E D681                       		add.l	d1,d3
0001D930                            
0001D930                            loc_1D066:
0001D930 2142 000C                  		move.l	d2,$C(a0)
0001D934 2143 0008                  		move.l	d3,8(a0)
0001D938                            
0001D938                            Debug_BackItem:
0001D938 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
0001D93E 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001D940 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001D946 6700                       		beq.s	Debug_NextItem	; if not, branch
0001D948 5338 FE06                  		subq.b	#1,($FFFFFE06).w ; go back 1 item
0001D94C 6400                       		bcc.s	Debug_NoLoop
0001D94E DD38 FE06                  		add.b	d6,($FFFFFE06).w
0001D952 6000                       		bra.s	Debug_NoLoop
0001D954                            ; ===========================================================================
0001D954                            
0001D954                            Debug_NextItem:
0001D954 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
0001D95A 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001D95C 5238 FE06                  		addq.b	#1,($FFFFFE06).w ; go forwards 1 item
0001D960 BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001D964 6200                       		bhi.s	Debug_NoLoop
0001D966 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w ; loop	back to	first item
0001D96C                            
0001D96C                            Debug_NoLoop:
0001D96C 6000 0000                  		bra.w	Debug_ShowItem
0001D970                            ; ===========================================================================
0001D970                            
0001D970                            Debug_MakeItem:
0001D970 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001D976 6700                       		beq.s	Debug_Exit	; if not, branch
0001D978 4EB9 0000 E248             		jsr	SingleObjLoad
0001D97E 6600                       		bne.s	Debug_Exit
0001D980 3368 0008 0008             		move.w	8(a0),8(a1)
0001D986 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001D98C 12A8 0004                  		move.b	4(a0),0(a1)	; create object
0001D990 1368 0001 0001             		move.b	1(a0),1(a1)
0001D996 1368 0001 0022             		move.b	1(a0),$22(a1)
0001D99C 0229 007F 0022             		andi.b	#$7F,$22(a1)
0001D9A2 7000                       		moveq	#0,d0
0001D9A4 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001D9A8 E748                       		lsl.w	#3,d0
0001D9AA 1372 0004 0028             		move.b	4(a2,d0.w),$28(a1)
0001D9B0 4E75                       		rts	
0001D9B2                            ; ===========================================================================
0001D9B2                            
0001D9B2                            Debug_Exit:
0001D9B2 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001D9B8 6700                       		beq.s	Debug_DoNothing	; if not, branch
0001D9BA 7000                       		moveq	#0,d0
0001D9BC 31C0 FE08                  		move.w	d0,($FFFFFE08).w ; deactivate debug mode
0001D9C0 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001D9C8 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001D9CE 11C0 D01C                  		move.b	d0,($FFFFD01C).w
0001D9D2 3140 000A                  		move.w	d0,$A(a0)
0001D9D6 3140 000E                  		move.w	d0,$E(a0)
0001D9DA 31F8 FEF0 F72C             		move.w	($FFFFFEF0).w,($FFFFF72C).w ; restore level boundaries
0001D9E0 31F8 FEF2 F726             		move.w	($FFFFFEF2).w,($FFFFF726).w
0001D9E6 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; are you in	the special stage?
0001D9EC 6600                       		bne.s	Debug_DoNothing	; if not, branch
0001D9EE 4278 F780                  		clr.w	($FFFFF780).w
0001D9F2 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set new level rotation speed
0001D9F8 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001DA00 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001DA06 11FC 0002 D01C             		move.b	#2,($FFFFD01C).w
0001DA0C 08F8 0002 D022             		bset	#2,($FFFFD022).w
0001DA12 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001DA18                            
0001DA18                            Debug_DoNothing:
0001DA18 4E75                       		rts	
0001DA1A                            ; End of function Debug_Control
0001DA1A                            
0001DA1A                            
0001DA1A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DA1A                            
0001DA1A                            
0001DA1A                            Debug_ShowItem:				; XREF: Debug_Main
0001DA1A 7000                       		moveq	#0,d0
0001DA1C 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001DA20 E748                       		lsl.w	#3,d0
0001DA22 2172 0000 0004             		move.l	(a2,d0.w),4(a0)	; load mappings	for item
0001DA28 3172 0006 0002             		move.w	6(a2,d0.w),2(a0) ; load	VRAM setting for item
0001DA2E 1172 0005 001A             		move.b	5(a2,d0.w),$1A(a0) ; load frame	number for item
0001DA34 4E75                       		rts	
0001DA36                            ; End of function Debug_ShowItem
0001DA36                            
0001DA36                            ; ===========================================================================
0001DA36                            ; ---------------------------------------------------------------------------
0001DA36                            ; Debug	list pointers
0001DA36                            ; ---------------------------------------------------------------------------
0001DA36                            DebugList:
0001DA36                            	include "_inc\Debug list pointers.asm"
0001DA36                            ; ---------------------------------------------------------------------------
0001DA36                            ; Debug	list pointers
0001DA36                            ; ---------------------------------------------------------------------------
0001DA36 0000                       	dc.w Debug_GHZ-DebugList
0001DA38 0000                       	dc.w Debug_LZ-DebugList
0001DA3A 0000                       	dc.w Debug_MZ-DebugList
0001DA3C 0000                       	dc.w Debug_SLZ-DebugList
0001DA3E 0000                       	dc.w Debug_SYZ-DebugList
0001DA40 0000                       	dc.w Debug_SBZ-DebugList
0001DA42 0000                       	dc.w Debug_Ending-DebugList
0001DA42 0000                       	dc.w Debug_Ending-DebugList
0001DA44                            
0001DA44                            ; ---------------------------------------------------------------------------
0001DA44                            ; Debug	list - Green Hill
0001DA44                            ; ---------------------------------------------------------------------------
0001DA44                            Debug_GHZ:
0001DA44                            	include "_inc\Debug list - GHZ.asm"
0001DA44                            ; ---------------------------------------------------------------------------
0001DA44                            ; Debug	list - Green Hill
0001DA44                            ; ---------------------------------------------------------------------------
0001DA44 0010                       	dc.w $10			; number of items in list
0001DA46 2500 A620                  	dc.l Map_obj25+$25000000	; mappings pointer, object type * 10^6
0001DA4A 0000 27B2                  	dc.b 0,	0, $27,	$B2		; subtype, frame, VRAM setting (2 bytes)
0001DA4E 2600 AC26                  	dc.l Map_obj26+$26000000
0001DA52 0000 0680                  	dc.b 0,	0, 6, $80
0001DA56 1F00 9E18                  	dc.l Map_obj1F+$1F000000
0001DA5A 0000 0400                  	dc.b 0,	0, 4, 0
0001DA5E 2200 A0D4                  	dc.l Map_obj22+$22000000
0001DA62 0000 0444                  	dc.b 0,	0, 4, $44
0001DA66 2B00 B29A                  	dc.l Map_obj2B+$2B000000
0001DA6A 0000 047B                  	dc.b 0,	0, 4, $7B
0001DA6E 3600 D7AA                  	dc.l Map_obj36+$36000000
0001DA72 0000 051B                  	dc.b 0,	0, 5, $1B
0001DA76 1800 8734                  	dc.l Map_obj18+$18000000
0001DA7A 0000 4000                  	dc.b 0,	0, $40,	0
0001DA7E 3B00 D8D0                  	dc.l Map_obj3B+$3B000000
0001DA82 0000 63D0                  	dc.b 0,	0, $63,	$D0
0001DA86 4000 FF5C                  	dc.l Map_obj40+$40000000
0001DA8A 0000 04F0                  	dc.b 0,	0, 4, $F0
0001DA8E 4100 E4D6                  	dc.l Map_obj41+$41000000
0001DA92 0000 0523                  	dc.b 0,	0, 5, $23
0001DA96 4200 E6FC                  	dc.l Map_obj42+$42000000
0001DA9A 0000 249B                  	dc.b 0,	0, $24,	$9B
0001DA9E 4400 EA0A                  	dc.l Map_obj44+$44000000
0001DAA2 0000 434C                  	dc.b 0,	0, $43,	$4C
0001DAA6 1900 8834                  	dc.l Map_obj48+$19000000
0001DAAA 0000 43AA                  	dc.b 0,	0, $43,	$AA
0001DAAE 7901 799A                  	dc.l Map_obj79+$79000000
0001DAB2 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DAB6 4B00 A660                  	dc.l Map_obj4B+$4B000000
0001DABA 0000 2400                  	dc.b 0,	0, $24,	0
0001DABE 7D01 7AEA                  	dc.l Map_obj7D+$7D000000
0001DAC2 0101 84B6                  	dc.b 1,	1, $84,	$B6
0001DAC6                            	even
0001DAC6                            	even
0001DAC6                            
0001DAC6                            ; ---------------------------------------------------------------------------
0001DAC6                            ; Debug	list - Labyrinth
0001DAC6                            ; ---------------------------------------------------------------------------
0001DAC6                            Debug_LZ:
0001DAC6                            	include "_inc\Debug list - LZ.asm"
0001DAC6                            ; ---------------------------------------------------------------------------
0001DAC6                            ; Debug	list - Labyrinth
0001DAC6                            ; ---------------------------------------------------------------------------
0001DAC6 0019                       	dc.w $19
0001DAC8 2500 A620                  	dc.l Map_obj25+$25000000
0001DACC 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DAD0 2600 AC26                  	dc.l Map_obj26+$26000000
0001DAD4 0000 0680                  	dc.b 0,	0, 6, $80
0001DAD8 4100 E4D6                  	dc.l Map_obj41+$41000000
0001DADC 0000 0523                  	dc.b 0,	0, 5, $23
0001DAE0 2C00 B34A                  	dc.l Map_obj2C+$2C000000
0001DAE4 0800 2486                  	dc.b 8,	0, $24,	$86
0001DAE8 2D00 B53E                  	dc.l Map_obj2D+$2D000000
0001DAEC 0002 84A6                  	dc.b 0,	2, $84,	$A6
0001DAF0 1601 2730                  	dc.l Map_obj16+$16000000
0001DAF4 0000 03CC                  	dc.b 0,	0, 3, $CC
0001DAF8 1601 2730                  	dc.l Map_obj16+$16000000
0001DAFC 0203 03CC                  	dc.b 2,	3, 3, $CC
0001DB00 3300 C9F6                  	dc.l Map_obj33+$33000000
0001DB04 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001DB08 3200 C5B6                  	dc.l Map_obj32+$32000000
0001DB0C 0000 0513                  	dc.b 0,	0, 5, $13
0001DB10 3600 D7AA                  	dc.l Map_obj36+$36000000
0001DB14 0000 051B                  	dc.b 0,	0, 5, $1B
0001DB18 5201 0852                  	dc.l Map_obj52a+$52000000
0001DB1C 0400 43BC                  	dc.b 4,	0, $43,	$BC
0001DB20 6101 2958                  	dc.l Map_obj61+$61000000
0001DB24 0100 43E6                  	dc.b 1,	0, $43,	$E6
0001DB28 6101 2958                  	dc.l Map_obj61+$61000000
0001DB2C 1301 43E6                  	dc.b $13, 1, $43, $E6
0001DB30 6101 2958                  	dc.l Map_obj61+$61000000
0001DB34 0500 43E6                  	dc.b 5,	0, $43,	$E6
0001DB38 6201 2AAC                  	dc.l Map_obj62+$62000000
0001DB3C 0000 443E                  	dc.b 0,	0, $44,	$3E
0001DB40 6101 2958                  	dc.l Map_obj61+$61000000
0001DB44 2702 43E6                  	dc.b $27, 2, $43, $E6
0001DB48 6101 2958                  	dc.l Map_obj61+$61000000
0001DB4C 3003 43E6                  	dc.b $30, 3, $43, $E6
0001DB50 6301 2E0E                  	dc.l Map_obj63+$63000000
0001DB54 7F00 03F6                  	dc.b $7F, 0, 3,	$F6
0001DB58 6001 267A                  	dc.l Map_obj60+$60000000
0001DB5C 0000 0467                  	dc.b 0,	0, 4, $67
0001DB60 6401 3154                  	dc.l Map_obj64+$64000000
0001DB64 8413 8348                  	dc.b $84, $13, $83, $48
0001DB68 6501 32DC                  	dc.l Map_obj65+$65000000
0001DB6C 0202 C259                  	dc.b 2,	2, $C2,	$59
0001DB70 6501 32DC                  	dc.l Map_obj65+$65000000
0001DB74 0909 C259                  	dc.b 9,	9, $C2,	$59
0001DB78 0B01 1ACA                  	dc.l Map_obj0B+$B000000
0001DB7C 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001DB80 0C01 1B9A                  	dc.l Map_obj0C+$C000000
0001DB84 0200 4328                  	dc.b 2,	0, $43,	$28
0001DB88 7901 799A                  	dc.l Map_obj79+$79000000
0001DB8C 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DB90                            	even
0001DB90                            	even
0001DB90                            
0001DB90                            ; ---------------------------------------------------------------------------
0001DB90                            ; Debug	list - Marble
0001DB90                            ; ---------------------------------------------------------------------------
0001DB90                            Debug_MZ:
0001DB90                            	include "_inc\Debug list - MZ.asm"
0001DB90                            ; ---------------------------------------------------------------------------
0001DB90                            ; Debug	list - Marble
0001DB90                            ; ---------------------------------------------------------------------------
0001DB90 0012                       	dc.w $12
0001DB92 2500 A620                  	dc.l Map_obj25+$25000000
0001DB96 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DB9A 2600 AC26                  	dc.l Map_obj26+$26000000
0001DB9E 0000 0680                  	dc.b 0,	0, 6, $80
0001DBA2 2200 A0D4                  	dc.l Map_obj22+$22000000
0001DBA6 0000 0444                  	dc.b 0,	0, 4, $44
0001DBAA 3600 D7AA                  	dc.l Map_obj36+$36000000
0001DBAE 0000 051B                  	dc.b 0,	0, 5, $1B
0001DBB2 4100 E4D6                  	dc.l Map_obj41+$41000000
0001DBB6 0000 0523                  	dc.b 0,	0, 5, $23
0001DBBA 1300 BA80                  	dc.l Map_obj14+$13000000
0001DBBE 0000 0345                  	dc.b 0,	0, 3, $45
0001DBC2 4600 F0BC                  	dc.l Map_obj46+$46000000
0001DBC6 0000 4000                  	dc.b 0,	0, $40,	0
0001DBCA 4C00 FA08                  	dc.l Map_obj4C+$4C000000
0001DBCE 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001DBD2 4E00 FCEC                  	dc.l Map_obj4E+$4E000000
0001DBD6 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001DBDA 3300 C9F6                  	dc.l Map_obj33+$33000000
0001DBDE 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001DBE2 5001 00EA                  	dc.l Map_obj50+$50000000
0001DBE6 0000 247B                  	dc.b 0,	0, $24,	$7B
0001DBEA 5101 0586                  	dc.l Map_obj51+$51000000
0001DBEE 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001DBF2 5201 07FC                  	dc.l Map_obj52+$52000000
0001DBF6 0000 02B8                  	dc.b 0,	0, 2, $B8
0001DBFA 5300 8DCC                  	dc.l Map_obj53+$53000000
0001DBFE 0000 62B8                  	dc.b 0,	0, $62,	$B8
0001DC02 5400 F9CE                  	dc.l Map_obj54+$54000000
0001DC06 0000 8680                  	dc.b 0,	0, $86,	$80
0001DC0A 5501 09F0                  	dc.l Map_obj55+$55000000
0001DC0E 0000 04B8                  	dc.b 0,	0, 4, $B8
0001DC12 7801 7614                  	dc.l Map_obj78+$78000000
0001DC16 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001DC1A 7901 799A                  	dc.l Map_obj79+$79000000
0001DC1E 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DC22                            	even
0001DC22                            	even
0001DC22                            
0001DC22                            ; ---------------------------------------------------------------------------
0001DC22                            ; Debug	list - Star Light
0001DC22                            ; ---------------------------------------------------------------------------
0001DC22                            Debug_SLZ:
0001DC22                            	include "_inc\Debug list - SLZ.asm"
0001DC22                            ; ---------------------------------------------------------------------------
0001DC22                            ; Debug	list - Star Light
0001DC22                            ; ---------------------------------------------------------------------------
0001DC22 000F                       	dc.w $F
0001DC24 2500 A620                  	dc.l Map_obj25+$25000000
0001DC28 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DC2C 2600 AC26                  	dc.l Map_obj26+$26000000
0001DC30 0000 0680                  	dc.b 0,	0, 6, $80
0001DC34 5901 14F2                  	dc.l Map_obj59+$59000000
0001DC38 0000 4000                  	dc.b 0,	0, $40,	0
0001DC3C 5300 8DCC                  	dc.l Map_obj53+$53000000
0001DC40 0002 44E0                  	dc.b 0,	2, $44,	$E0
0001DC44 1800 8792                  	dc.l Map_obj18b+$18000000
0001DC48 0000 4000                  	dc.b 0,	0, $40,	0
0001DC4C 5A01 162C                  	dc.l Map_obj5A+$5A000000
0001DC50 0000 4000                  	dc.b 0,	0, $40,	0
0001DC54 5B01 17E4                  	dc.l Map_obj5B+$5B000000
0001DC58 0000 4000                  	dc.b 0,	0, $40,	0
0001DC5C 5D01 1DB4                  	dc.l Map_obj5D+$5D000000
0001DC60 0000 43A0                  	dc.b 0,	0, $43,	$A0
0001DC64 5E01 2146                  	dc.l Map_obj5E+$5E000000
0001DC68 0000 0374                  	dc.b 0,	0, 3, $74
0001DC6C 4100 E4D6                  	dc.l Map_obj41+$41000000
0001DC70 0000 0523                  	dc.b 0,	0, 5, $23
0001DC74 1300 BA80                  	dc.l Map_obj14+$13000000
0001DC78 0000 0480                  	dc.b 0,	0, 4, $80
0001DC7C 1C00 8EDC                  	dc.l Map_obj1C+$1C000000
0001DC80 0000 44D8                  	dc.b 0,	0, $44,	$D8
0001DC84 5F01 23C4                  	dc.l Map_obj5F+$5F000000
0001DC88 0000 0400                  	dc.b 0,	0, 4, 0
0001DC8C 6001 267A                  	dc.l Map_obj60+$60000000
0001DC90 0000 2429                  	dc.b 0,	0, $24,	$29
0001DC94 7901 799A                  	dc.l Map_obj79+$79000000
0001DC98 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DC9C                            	even
0001DC9C                            	even
0001DC9C                            
0001DC9C                            ; ---------------------------------------------------------------------------
0001DC9C                            ; Debug	list - Spring Yard
0001DC9C                            ; ---------------------------------------------------------------------------
0001DC9C                            Debug_SYZ:
0001DC9C                            	include "_inc\Debug list - SYZ.asm"
0001DC9C                            ; ---------------------------------------------------------------------------
0001DC9C                            ; Debug	list - Spring Yard
0001DC9C                            ; ---------------------------------------------------------------------------
0001DC9C 000F                       	dc.w $F
0001DC9E 2500 A620                  	dc.l Map_obj25+$25000000
0001DCA2 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DCA6 2600 AC26                  	dc.l Map_obj26+$26000000
0001DCAA 0000 0680                  	dc.b 0,	0, 6, $80
0001DCAE 3600 D7AA                  	dc.l Map_obj36+$36000000
0001DCB2 0000 051B                  	dc.b 0,	0, 5, $1B
0001DCB6 4100 E4D6                  	dc.l Map_obj41+$41000000
0001DCBA 0000 0523                  	dc.b 0,	0, 5, $23
0001DCBE 4300 E95C                  	dc.l Map_obj43+$43000000
0001DCC2 0000 04B8                  	dc.b 0,	0, 4, $B8
0001DCC6 1200 F13A                  	dc.l Map_obj12+$12000000
0001DCCA 0000 0000                  	dc.b 0,	0, 0, 0
0001DCCE 4700 F2B6                  	dc.l Map_obj47+$47000000
0001DCD2 0000 0380                  	dc.b 0,	0, 3, $80
0001DCD6 1F00 9E18                  	dc.l Map_obj1F+$1F000000
0001DCDA 0000 0400                  	dc.b 0,	0, 4, 0
0001DCDE 2200 A0D4                  	dc.l Map_obj22+$22000000
0001DCE2 0000 0444                  	dc.b 0,	0, 4, $44
0001DCE6 5001 00EA                  	dc.l Map_obj50+$50000000
0001DCEA 0000 247B                  	dc.b 0,	0, $24,	$7B
0001DCEE 1800 8780                  	dc.l Map_obj18a+$18000000
0001DCF2 0000 4000                  	dc.b 0,	0, $40,	0
0001DCF6 5601 0EB2                  	dc.l Map_obj56+$56000000
0001DCFA 0000 4000                  	dc.b 0,	0, $40,	0
0001DCFE 3200 C5B6                  	dc.l Map_obj32+$32000000
0001DD02 0000 0513                  	dc.b 0,	0, 5, $13
0001DD06 7801 7614                  	dc.l Map_obj78+$78000000
0001DD0A 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001DD0E 7901 799A                  	dc.l Map_obj79+$79000000
0001DD12 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DD16                            	even
0001DD16                            	even
0001DD16                            
0001DD16                            ; ---------------------------------------------------------------------------
0001DD16                            ; Debug	list - Scrap Brain
0001DD16                            ; ---------------------------------------------------------------------------
0001DD16                            Debug_SBZ:
0001DD16                            	include "_inc\Debug list - SBZ.asm"
0001DD16                            ; ---------------------------------------------------------------------------
0001DD16                            ; Debug	list - Scrap Brain
0001DD16                            ; ---------------------------------------------------------------------------
0001DD16 001D                       	dc.w $1D
0001DD18 2500 A620                  	dc.l Map_obj25+$25000000
0001DD1C 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DD20 2600 AC26                  	dc.l Map_obj26+$26000000
0001DD24 0000 0680                  	dc.b 0,	0, 6, $80
0001DD28 5F01 23C4                  	dc.l Map_obj5F+$5F000000
0001DD2C 0000 0400                  	dc.b 0,	0, 4, 0
0001DD30 6001 267A                  	dc.l Map_obj60+$60000000
0001DD34 0000 0429                  	dc.b 0,	0, 4, $29
0001DD38 7801 7614                  	dc.l Map_obj78+$78000000
0001DD3C 0000 22B0                  	dc.b 0,	0, $22,	$B0
0001DD40 1501 124E                  	dc.l Map_obj15b+$15000000
0001DD44 0702 4391                  	dc.b 7,	2, $43,	$91
0001DD48 6701 5F28                  	dc.l Map_obj67+$67000000
0001DD4C E000 C344                  	dc.b $E0, 0, $C3, $44
0001DD50 5201 07FC                  	dc.l Map_obj52+$52000000
0001DD54 2802 22C0                  	dc.b $28, 2, $22, $C0
0001DD58 3200 C5B6                  	dc.l Map_obj32+$32000000
0001DD5C 0000 0513                  	dc.b 0,	0, 5, $13
0001DD60 6901 6182                  	dc.l Map_obj69+$69000000
0001DD64 0300 4492                  	dc.b 3,	0, $44,	$92
0001DD68 6901 61DC                  	dc.l Map_obj69a+$69000000
0001DD6C 8300 04DF                  	dc.b $83, 0, 4,	$DF
0001DD70 6A01 643A                  	dc.l Map_obj6A+$6A000000
0001DD74 0200 43B5                  	dc.b 2,	0, $43,	$B5
0001DD78 5300 8DCC                  	dc.l Map_obj53+$53000000
0001DD7C 0000 43F5                  	dc.b 0,	0, $43,	$F5
0001DD80 5201 07FC                  	dc.l Map_obj52+$52000000
0001DD84 3903 4460                  	dc.b $39, 3, $44, $60
0001DD88 6B01 680A                  	dc.l Map_obj6B+$6B000000
0001DD8C 0000 22C0                  	dc.b 0,	0, $22,	$C0
0001DD90 2A00 9072                  	dc.l Map_obj2A+$2A000000
0001DD94 0000 42E8                  	dc.b 0,	0, $42,	$E8
0001DD98 6B01 680A                  	dc.l Map_obj6B+$6B000000
0001DD9C 1301 22C0                  	dc.b $13, 1, $22, $C0
0001DDA0 6A01 643A                  	dc.l Map_obj6A+$6A000000
0001DDA4 0100 43B5                  	dc.b 1,	0, $43,	$B5
0001DDA8 6B01 680A                  	dc.l Map_obj6B+$6B000000
0001DDAC 2401 22C0                  	dc.b $24, 1, $22, $C0
0001DDB0 6A01 643A                  	dc.l Map_obj6A+$6A000000
0001DDB4 0402 43B5                  	dc.b 4,	2, $43,	$B5
0001DDB8 6B01 680A                  	dc.l Map_obj6B+$6B000000
0001DDBC 3401 22C0                  	dc.b $34, 1, $22, $C0
0001DDC0 6C01 69CC                  	dc.l Map_obj6C+$6C000000
0001DDC4 0000 44C3                  	dc.b 0,	0, $44,	$C3
0001DDC8 6D00 EDAC                  	dc.l Map_obj6D+$6D000000
0001DDCC 6400 83D9                  	dc.b $64, 0, $83, $D9
0001DDD0 6D00 EDAC                  	dc.l Map_obj6D+$6D000000
0001DDD4 640B 83D9                  	dc.b $64, $B, $83, $D9
0001DDD8 6E01 6A82                  	dc.l Map_obj6E+$6E000000
0001DDDC 0400 047E                  	dc.b 4,	0, 4, $7E
0001DDE0 7001 6ED8                  	dc.l Map_obj70+$70000000
0001DDE4 0000 42F0                  	dc.b 0,	0, $42,	$F0
0001DDE8 7101 1C5A                  	dc.l Map_obj71+$71000000
0001DDEC 1100 8680                  	dc.b $11, 0, $86, $80
0001DDF0 1E00 9530                  	dc.l Map_obj1E+$1E000000
0001DDF4 0400 2302                  	dc.b 4,	0, $23,	2
0001DDF8 7901 799A                  	dc.l Map_obj79+$79000000
0001DDFC 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DE00                            	even
0001DE00                            	even
0001DE00                            
0001DE00                            ; ---------------------------------------------------------------------------
0001DE00                            ; Debug	list - ending sequence / special stage
0001DE00                            ; ---------------------------------------------------------------------------
0001DE00                            Debug_Ending:
0001DE00                            	include "_inc\Debug list - Ending and SS.asm"
0001DE00                            ; ---------------------------------------------------------------------------
0001DE00                            ; Debug	list - ending sequence / special stage
0001DE00                            ; ---------------------------------------------------------------------------
0001DE00 000D                       	dc.w $D
0001DE02 2500 A620                  	dc.l Map_obj25+$25000000
0001DE06 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DE0A 4700 F2B6                  	dc.l Map_obj47+$47000000
0001DE0E 0000 0380                  	dc.b 0,	0, 3, $80
0001DE12 2800 9B4A                  	dc.l Map_obj28a+$28000000
0001DE16 0A00 05A0                  	dc.b $A, 0, 5, $A0
0001DE1A 2800 9B4A                  	dc.l Map_obj28a+$28000000
0001DE1E 0B00 05A0                  	dc.b $B, 0, 5, $A0
0001DE22 2800 9B4A                  	dc.l Map_obj28a+$28000000
0001DE26 0C00 05A0                  	dc.b $C, 0, 5, $A0
0001DE2A 2800 9B32                  	dc.l Map_obj28+$28000000
0001DE2E 0D00 0553                  	dc.b $D, 0, 5, $53
0001DE32 2800 9B32                  	dc.l Map_obj28+$28000000
0001DE36 0E00 0553                  	dc.b $E, 0, 5, $53
0001DE3A 2800 9B32                  	dc.l Map_obj28+$28000000
0001DE3E 0F00 0573                  	dc.b $F, 0, 5, $73
0001DE42 2800 9B32                  	dc.l Map_obj28+$28000000
0001DE46 1000 0573                  	dc.b $10, 0, 5,	$73
0001DE4A 2800 9B4A                  	dc.l Map_obj28a+$28000000
0001DE4E 1100 0585                  	dc.b $11, 0, 5,	$85
0001DE52 2800 9B62                  	dc.l Map_obj28b+$28000000
0001DE56 1200 0593                  	dc.b $12, 0, 5,	$93
0001DE5A 2800 9B4A                  	dc.l Map_obj28a+$28000000
0001DE5E 1300 0565                  	dc.b $13, 0, 5,	$65
0001DE62 2800 9B62                  	dc.l Map_obj28b+$28000000
0001DE66 1400 05B3                  	dc.b $14, 0, 5,	$B3
0001DE6A                            	even
0001DE6A                            	even
0001DE6A                            
0001DE6A                            ; ---------------------------------------------------------------------------
0001DE6A                            ; Main level load blocks
0001DE6A                            ; ---------------------------------------------------------------------------
0001DE6A                            MainLoadBlocks:
0001DE6A                            	include "_inc\Main level load blocks.asm"
0001DE6A                            ; ---------------------------------------------------------------------------
0001DE6A                            ; Main level load blocks
0001DE6A                            ;
0001DE6A                            ; ===FORMAT===
0001DE6A                            ; level	patterns + (1st	PLC num	* 10^6)
0001DE6A                            ; 16x16	mappings + (2nd	PLC num	* 10^6)
0001DE6A                            ; 256x256 mappings
0001DE6A                            ; blank, music (unused), pal index (unused), pal index
0001DE6A                            ; ---------------------------------------------------------------------------
0001DE6A 0000 0000                  	dc.l Nem_GHZ_2nd+$4000000
0001DE6E 0000 0000                  	dc.l Blk16_GHZ+$5000000
0001DE72 0000 0000                  	dc.l Blk256_GHZ
0001DE76 0081 0404                  	dc.b 0,	$81, 4,	4
0001DE7A 0000 0000                  	dc.l Nem_LZ+$6000000
0001DE7E 0000 0000                  	dc.l Blk16_LZ+$7000000
0001DE82 0000 0000                  	dc.l Blk256_LZ
0001DE86 0082 0505                  	dc.b 0,	$82, 5,	5
0001DE8A 0000 0000                  	dc.l Nem_MZ+$8000000
0001DE8E 0000 0000                  	dc.l Blk16_MZ+$9000000
0001DE92 0000 0000                  	dc.l Blk256_MZ
0001DE96 0083 0606                  	dc.b 0,	$83, 6,	6
0001DE9A 0000 0000                  	dc.l Nem_SLZ+$A000000
0001DE9E 0000 0000                  	dc.l Blk16_SLZ+$B000000
0001DEA2 0000 0000                  	dc.l Blk256_SLZ
0001DEA6 0084 0707                  	dc.b 0,	$84, 7,	7
0001DEAA 0000 0000                  	dc.l Nem_SYZ+$C000000
0001DEAE 0000 0000                  	dc.l Blk16_SYZ+$D000000
0001DEB2 0000 0000                  	dc.l Blk256_SYZ
0001DEB6 0085 0808                  	dc.b 0,	$85, 8,	8
0001DEBA 0000 0000                  	dc.l Nem_SBZ+$E000000
0001DEBE 0000 0000                  	dc.l Blk16_SBZ+$F000000
0001DEC2 0000 0000                  	dc.l Blk256_SBZ
0001DEC6 0086 0909                  	dc.b 0,	$86, 9,	9
0001DECA 0000 0000                  	dc.l Nem_GHZ_2nd	; main load block for ending
0001DECE 0000 0000                  	dc.l Blk16_GHZ
0001DED2 0000 0000                  	dc.l Blk256_GHZ
0001DED6 0086 1313                  	dc.b 0,	$86, $13, $13
0001DEDA                            	even
0001DEDA                            	even
0001DEDA                            
0001DEDA                            ; ---------------------------------------------------------------------------
0001DEDA                            ; Pattern load cues
0001DEDA                            ; ---------------------------------------------------------------------------
0001DEDA                            ArtLoadCues:
0001DEDA                            	include "_inc\Pattern load cues.asm"
0001DEDA                            ; ---------------------------------------------------------------------------
0001DEDA                            ; Pattern load cues - index
0001DEDA                            ; ---------------------------------------------------------------------------
0001DEDA 0000 0000                  	dc.w PLC_Main-ArtLoadCues, PLC_Main2-ArtLoadCues
0001DEDE 0000 0000                  	dc.w PLC_Explode-ArtLoadCues, PLC_GameOver-ArtLoadCues
0001DEE2 0000 0000                  	dc.w PLC_GHZ-ArtLoadCues, PLC_GHZ2-ArtLoadCues
0001DEE6 0000 0000                  	dc.w PLC_LZ-ArtLoadCues, PLC_LZ2-ArtLoadCues
0001DEEA 0000 0000                  	dc.w PLC_MZ-ArtLoadCues, PLC_MZ2-ArtLoadCues
0001DEEE 0000 0000                  	dc.w PLC_SLZ-ArtLoadCues, PLC_SLZ2-ArtLoadCues
0001DEF2 0000 0000                  	dc.w PLC_SYZ-ArtLoadCues, PLC_SYZ2-ArtLoadCues
0001DEF6 0000 0000                  	dc.w PLC_SBZ-ArtLoadCues, PLC_SBZ2-ArtLoadCues
0001DEFA 0000 0000                  	dc.w PLC_TitleCard-ArtLoadCues,	PLC_Boss-ArtLoadCues
0001DEFE 0000 0000                  	dc.w PLC_Signpost-ArtLoadCues, PLC_Warp-ArtLoadCues
0001DF02 0000 0000                  	dc.w PLC_SpeStage-ArtLoadCues, PLC_GHZAnimals-ArtLoadCues
0001DF06 0000 0000                  	dc.w PLC_LZAnimals-ArtLoadCues,	PLC_MZAnimals-ArtLoadCues
0001DF0A 0000 0000                  	dc.w PLC_SLZAnimals-ArtLoadCues, PLC_SYZAnimals-ArtLoadCues
0001DF0E 0000 0000                  	dc.w PLC_SBZAnimals-ArtLoadCues, PLC_SpeStResult-ArtLoadCues
0001DF12 0000 0000                  	dc.w PLC_Ending-ArtLoadCues, PLC_TryAgain-ArtLoadCues
0001DF16 0000 0000                  	dc.w PLC_EggmanSBZ2-ArtLoadCues, PLC_FZBoss-ArtLoadCues
0001DF1A 0000                       	dc.w Plc_TetoBoss-ArtLoadCues
0001DF1C                            ; ---------------------------------------------------------------------------
0001DF1C                            ; Pattern load cues - standard block 1
0001DF1C                            ; ---------------------------------------------------------------------------
0001DF1C 0004                       PLC_Main:	dc.w 4
0001DF1E 0000 0000                  		dc.l Nem_Lamp		; lamppost
0001DF22 F400                       		dc.w $F400
0001DF24 0000 0000                  		dc.l Nem_Hud		; HUD
0001DF28 D940                       		dc.w $D940
0001DF2A 0000 0000                  		dc.l Nem_Lives		; lives	counter
0001DF2E FA80                       		dc.w $FA80
0001DF30 0000 0000                  		dc.l Nem_Ring		; rings
0001DF34 F640                       		dc.w $F640
0001DF36 0000 0000                  		dc.l Nem_Points		; points from enemy
0001DF3A F2E0                       		dc.w $F2E0
0001DF3C                            ; ---------------------------------------------------------------------------
0001DF3C                            ; Pattern load cues - standard block 2
0001DF3C                            ; ---------------------------------------------------------------------------
0001DF3C 0002                       PLC_Main2:	dc.w 2
0001DF3E 0000 0000                  		dc.l Nem_Monitors	; monitors
0001DF42 D000                       		dc.w $D000
0001DF44 0000 0000                  		dc.l Nem_Shield		; shield
0001DF48 A820                       		dc.w $A820
0001DF4A 0000 0000                  		dc.l Nem_Stars		; invincibility	stars
0001DF4E AB80                       		dc.w $AB80
0001DF50                            ; ---------------------------------------------------------------------------
0001DF50                            ; Pattern load cues - explosion
0001DF50                            ; ---------------------------------------------------------------------------
0001DF50 0000                       PLC_Explode:	dc.w 0
0001DF52 0000 0000                  		dc.l Nem_Explode	; explosion
0001DF56 B400                       		dc.w $B400
0001DF58                            ; ---------------------------------------------------------------------------
0001DF58                            ; Pattern load cues - game/time	over
0001DF58                            ; ---------------------------------------------------------------------------
0001DF58 0000                       PLC_GameOver:	dc.w 0
0001DF5A 0000 0000                  		dc.l Nem_GameOver	; game/time over
0001DF5E ABC0                       		dc.w $ABC0
0001DF60                            ; ---------------------------------------------------------------------------
0001DF60                            ; Pattern load cues - Green Hill
0001DF60                            ; ---------------------------------------------------------------------------
0001DF60 000B                       PLC_GHZ:	dc.w $B
0001DF62 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0001DF66 0000                       		dc.w 0
0001DF68 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001DF6C 39A0                       		dc.w $39A0
0001DF6E 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001DF72 6B00                       		dc.w $6B00
0001DF74 0000 0000                  		dc.l Nem_PplRock	; purple rock
0001DF78 7A00                       		dc.w $7A00
0001DF7A 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001DF7E 8000                       		dc.w $8000
0001DF80 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001DF84 8880                       		dc.w $8880
0001DF86 0000 0000                  		dc.l Nem_Chopper	; chopper enemy
0001DF8A 8F60                       		dc.w $8F60
0001DF8C 0000 0000                  		dc.l Nem_Newtron	; newtron enemy
0001DF90 9360                       		dc.w $9360
0001DF92 0000 0000                  		dc.l Nem_Motobug	; motobug enemy
0001DF96 9E00                       		dc.w $9E00
0001DF98 0000 0000                  		dc.l Nem_Spikes		; spikes
0001DF9C A360                       		dc.w $A360
0001DF9E 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001DFA2 A460                       		dc.w $A460
0001DFA4 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001DFA8 A660                       		dc.w $A660
0001DFAA 0005                       PLC_GHZ2:	dc.w 5
0001DFAC 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001DFB0 7000                       		dc.w $7000
0001DFB2 0000 0000                  		dc.l Nem_Bridge		; bridge
0001DFB6 71C0                       		dc.w $71C0
0001DFB8 0000 0000                  		dc.l Nem_SpikePole	; spiked pole
0001DFBC 7300                       		dc.w $7300
0001DFBE 0000 0000                  		dc.l Nem_Ball		; giant	ball
0001DFC2 7540                       		dc.w $7540
0001DFC4 0000 0000                  		dc.l Nem_GhzWall1	; breakable wall
0001DFC8 A1E0                       		dc.w $A1E0
0001DFCA 0000 0000                  		dc.l Nem_GhzWall2	; normal wall
0001DFCE 6980                       		dc.w $6980
0001DFD0                            ; ---------------------------------------------------------------------------
0001DFD0                            ; Pattern load cues - Labyrinth
0001DFD0                            ; ---------------------------------------------------------------------------
0001DFD0 000B                       PLC_LZ:		dc.w $B
0001DFD2 0000 0000                  		dc.l Nem_LZ		; LZ main patterns
0001DFD6 0000                       		dc.w 0
0001DFD8 0000 0000                  		dc.l Nem_LzBlock1	; block
0001DFDC 3C00                       		dc.w $3C00
0001DFDE 0000 0000                  		dc.l Nem_LzBlock2	; blocks
0001DFE2 3E00                       		dc.w $3E00
0001DFE4 0000 0000                  		dc.l Nem_Splash		; waterfalls and splash
0001DFE8 4B20                       		dc.w $4B20
0001DFEA 0000 0000                  		dc.l Nem_Water		; water	surface
0001DFEE 6000                       		dc.w $6000
0001DFF0 0000 0000                  		dc.l Nem_LzSpikeBall	; spiked ball
0001DFF4 6200                       		dc.w $6200
0001DFF6 0000 0000                  		dc.l Nem_FlapDoor	; flapping door
0001DFFA 6500                       		dc.w $6500
0001DFFC 0000 0000                  		dc.l Nem_Bubbles	; bubbles and numbers
0001E000 6900                       		dc.w $6900
0001E002 0000 0000                  		dc.l Nem_LzBlock3	; block
0001E006 7780                       		dc.w $7780
0001E008 0000 0000                  		dc.l Nem_LzDoor1	; vertical door
0001E00C 7880                       		dc.w $7880
0001E00E 0000 0000                  		dc.l Nem_Harpoon	; harpoon
0001E012 7980                       		dc.w $7980
0001E014 0000 0000                  		dc.l Nem_Burrobot	; burrobot enemy
0001E018 94C0                       		dc.w $94C0
0001E01A 000C                       PLC_LZ2:	dc.w $C
0001E01C 0000 0000                  		dc.l Nem_LzPole		; pole that breaks
0001E020 7BC0                       		dc.w $7BC0
0001E022 0000 0000                  		dc.l Nem_LzDoor2	; large	horizontal door
0001E026 7CC0                       		dc.w $7CC0
0001E028 0000 0000                  		dc.l Nem_LzWheel	; wheel
0001E02C 7EC0                       		dc.w $7EC0
0001E02E 0000 0000                  		dc.l Nem_Gargoyle	; gargoyle head
0001E032 5D20                       		dc.w $5D20
0001E034 0000 0000                  		dc.l Nem_LzSonic	; Sonic	holding	his breath
0001E038 8800                       		dc.w $8800
0001E03A 0000 0000                  		dc.l Nem_LzPlatfm	; rising platform
0001E03E 89E0                       		dc.w $89E0
0001E040 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001E044 8CE0                       		dc.w $8CE0
0001E046 0000 0000                  		dc.l Nem_Jaws		; jaws enemy
0001E04A 90C0                       		dc.w $90C0
0001E04C 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E050 A1E0                       		dc.w $A1E0
0001E052 0000 0000                  		dc.l Nem_Cork		; cork block
0001E056 A000                       		dc.w $A000
0001E058 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E05C A360                       		dc.w $A360
0001E05E 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E062 A460                       		dc.w $A460
0001E064 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E068 A660                       		dc.w $A660
0001E06A                            ; ---------------------------------------------------------------------------
0001E06A                            ; Pattern load cues - Marble
0001E06A                            ; ---------------------------------------------------------------------------
0001E06A 0009                       PLC_MZ:		dc.w 9
0001E06C 0000 0000                  		dc.l Nem_MZ		; MZ main patterns
0001E070 0000                       		dc.w 0
0001E072 0000 0000                  		dc.l Nem_MzMetal	; metal	blocks
0001E076 6000                       		dc.w $6000
0001E078 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001E07C 68A0                       		dc.w $68A0
0001E07E 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001E082 7000                       		dc.w $7000
0001E084 0000 0000                  		dc.l Nem_MzGlass	; green	glassy block
0001E088 71C0                       		dc.w $71C0
0001E08A 0000 0000                  		dc.l Nem_Lava		; lava
0001E08E 7500                       		dc.w $7500
0001E090 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001E094 8880                       		dc.w $8880
0001E096 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001E09A 8F60                       		dc.w $8F60
0001E09C 0000 0000                  		dc.l Nem_Basaran	; basaran enemy
0001E0A0 9700                       		dc.w $9700
0001E0A2 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001E0A6 9FE0                       		dc.w $9FE0
0001E0A8 0004                       PLC_MZ2:	dc.w 4
0001E0AA 0000 0000                  		dc.l Nem_MzSwitch	; switch
0001E0AE A260                       		dc.w $A260
0001E0B0 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E0B4 A360                       		dc.w $A360
0001E0B6 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E0BA A460                       		dc.w $A460
0001E0BC 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E0C0 A660                       		dc.w $A660
0001E0C2 0000 0000                  		dc.l Nem_MzBlock	; green	stone block
0001E0C6 5700                       		dc.w $5700
0001E0C8                            ; ---------------------------------------------------------------------------
0001E0C8                            ; Pattern load cues - Star Light
0001E0C8                            ; ---------------------------------------------------------------------------
0001E0C8 0008                       PLC_SLZ:	dc.w 8
0001E0CA 0000 0000                  		dc.l Nem_SLZ		; SLZ main patterns
0001E0CE 0000                       		dc.w 0
0001E0D0 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001E0D4 8000                       		dc.w $8000
0001E0D6 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001E0DA 8520                       		dc.w $8520
0001E0DC 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001E0E0 9000                       		dc.w $9000
0001E0E2 0000 0000                  		dc.l Nem_SlzBlock	; block
0001E0E6 9C00                       		dc.w $9C00
0001E0E8 0000 0000                  		dc.l Nem_SlzWall	; breakable wall
0001E0EC A260                       		dc.w $A260
0001E0EE 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E0F2 A360                       		dc.w $A360
0001E0F4 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E0F8 A460                       		dc.w $A460
0001E0FA 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E0FE A660                       		dc.w $A660
0001E100 0005                       PLC_SLZ2:	dc.w 5
0001E102 0000 0000                  		dc.l Nem_Seesaw		; seesaw
0001E106 6E80                       		dc.w $6E80
0001E108 0000 0000                  		dc.l Nem_Fan		; fan
0001E10C 7400                       		dc.w $7400
0001E10E 0000 0000                  		dc.l Nem_Pylon		; foreground pylon
0001E112 7980                       		dc.w $7980
0001E114 0000 0000                  		dc.l Nem_SlzSwing	; swinging platform
0001E118 7B80                       		dc.w $7B80
0001E11A 0000 0000                  		dc.l Nem_SlzCannon	; fireball launcher
0001E11E 9B00                       		dc.w $9B00
0001E120 0000 0000                  		dc.l Nem_SlzSpike	; spikeball
0001E124 9E00                       		dc.w $9E00
0001E126                            ; ---------------------------------------------------------------------------
0001E126                            ; Pattern load cues - Spring Yard
0001E126                            ; ---------------------------------------------------------------------------
0001E126 0004                       PLC_SYZ:	dc.w 4
0001E128 0000 0000                  		dc.l Nem_SYZ		; SYZ main patterns
0001E12C 0000                       		dc.w 0
0001E12E 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001E132 8000                       		dc.w $8000
0001E134 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001E138 8880                       		dc.w $8880
0001E13A 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001E13E 8F60                       		dc.w $8F60
0001E140 0000 0000                  		dc.l Nem_Roller		; roller enemy
0001E144 9700                       		dc.w $9700
0001E146 0007                       PLC_SYZ2:	dc.w 7
0001E148 0000 0000                  		dc.l Nem_Bumper		; bumper
0001E14C 7000                       		dc.w $7000
0001E14E 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001E152 72C0                       		dc.w $72C0
0001E154 0000 0000                  		dc.l Nem_SyzSpike2	; small	spikeball
0001E158 7740                       		dc.w $7740
0001E15A 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001E15E 9FE0                       		dc.w $9FE0
0001E160 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E164 A1E0                       		dc.w $A1E0
0001E166 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E16A A360                       		dc.w $A360
0001E16C 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E170 A460                       		dc.w $A460
0001E172 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E176 A660                       		dc.w $A660
0001E178                            ; ---------------------------------------------------------------------------
0001E178                            ; Pattern load cues - Scrap Brain
0001E178                            ; ---------------------------------------------------------------------------
0001E178 000B                       PLC_SBZ:	dc.w $B
0001E17A 0000 0000                  		dc.l Nem_SBZ		; SBZ main patterns
0001E17E 0000                       		dc.w 0
0001E180 0000 0000                  		dc.l Nem_Stomper	; moving platform and stomper
0001E184 5800                       		dc.w $5800
0001E186 0000 0000                  		dc.l Nem_SbzDoor1	; door
0001E18A 5D00                       		dc.w $5D00
0001E18C 0000 0000                  		dc.l Nem_Girder		; girder
0001E190 5E00                       		dc.w $5E00
0001E192 0000 0000                  		dc.l Nem_BallHog	; ball hog enemy
0001E196 6040                       		dc.w $6040
0001E198 0000 0000                  		dc.l Nem_SbzWheel1	; spot on large	wheel
0001E19C 6880                       		dc.w $6880
0001E19E 0000 0000                  		dc.l Nem_SbzWheel2	; wheel	that grabs Sonic
0001E1A2 6900                       		dc.w $6900
0001E1A4 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001E1A8 7220                       		dc.w $7220
0001E1AA 0000 0000                  		dc.l Nem_Cutter		; pizza	cutter
0001E1AE 76A0                       		dc.w $76A0
0001E1B0 0000 0000                  		dc.l Nem_FlamePipe	; flaming pipe
0001E1B4 7B20                       		dc.w $7B20
0001E1B6 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001E1BA 7EA0                       		dc.w $7EA0
0001E1BC 0000 0000                  		dc.l Nem_SbzBlock	; vanishing block
0001E1C0 9860                       		dc.w $9860
0001E1C2 000C                       PLC_SBZ2:	dc.w $C
0001E1C4 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001E1C8 5600                       		dc.w $5600
0001E1CA 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001E1CE 8000                       		dc.w $8000
0001E1D0 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001E1D4 8520                       		dc.w $8520
0001E1D6 0000 0000                  		dc.l Nem_SlideFloor	; floor	that slides away
0001E1DA 8C00                       		dc.w $8C00
0001E1DC 0000 0000                  		dc.l Nem_SbzDoor2	; horizontal door
0001E1E0 8DE0                       		dc.w $8DE0
0001E1E2 0000 0000                  		dc.l Nem_Electric	; electric orb
0001E1E6 8FC0                       		dc.w $8FC0
0001E1E8 0000 0000                  		dc.l Nem_TrapDoor	; trapdoor
0001E1EC 9240                       		dc.w $9240
0001E1EE 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001E1F2 7F20                       		dc.w $7F20
0001E1F4 0000 0000                  		dc.l Nem_SpinPform	; small	spinning platform
0001E1F8 9BE0                       		dc.w $9BE0
0001E1FA 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E1FE A1E0                       		dc.w $A1E0
0001E200 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E204 A360                       		dc.w $A360
0001E206 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E20A A460                       		dc.w $A460
0001E20C 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E210 A660                       		dc.w $A660
0001E212                            ; ---------------------------------------------------------------------------
0001E212                            ; Pattern load cues - title card
0001E212                            ; ---------------------------------------------------------------------------
0001E212 0000                       PLC_TitleCard:	dc.w 0
0001E214 0000 0000                  		dc.l Nem_TitleCard
0001E218 B000                       		dc.w $B000
0001E21A                            ; ---------------------------------------------------------------------------
0001E21A                            ; Pattern load cues - act 3 boss
0001E21A                            ; ---------------------------------------------------------------------------
0001E21A 0005                       PLC_Boss:	dc.w 5
0001E21C 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001E220 8000                       		dc.w $8000
0001E222 0000 0000                  		dc.l Nem_Weapons	; Eggman's weapons
0001E226 8D80                       		dc.w $8D80
0001E228 0000 0000                  		dc.l Nem_Prison		; prison capsule
0001E22C 93A0                       		dc.w $93A0
0001E22E 0000 0000                  		dc.l Nem_Bomb		; bomb enemy (gets overwritten)
0001E232 A300                       		dc.w $A300
0001E234 0000 0000                  		dc.l Nem_SlzSpike	; spikeball (SLZ boss)
0001E238 A300                       		dc.w $A300
0001E23A 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001E23E A540                       		dc.w $A540
0001E240                            ; ---------------------------------------------------------------------------
0001E240                            ; Pattern load cues - act 1/2 signpost
0001E240                            ; ---------------------------------------------------------------------------
0001E240 0002                       PLC_Signpost:	dc.w 2
0001E242 0000 0000                  		dc.l Nem_SignPost	; signpost
0001E246 D000                       		dc.w $D000
0001E248 0000 0000                  		dc.l Nem_Bonus		; hidden bonus points
0001E24C 96C0                       		dc.w $96C0
0001E24E 0000 0000                  		dc.l Nem_BigFlash	; giant	ring flash effect
0001E252 8C40                       		dc.w $8C40
0001E254                            ; ---------------------------------------------------------------------------
0001E254                            ; Pattern load cues - beta special stage warp effect
0001E254                            ; ---------------------------------------------------------------------------
0001E254 0000                       PLC_Warp:	dc.w 0
0001E256 0000 0000                  		dc.l Nem_Warp
0001E25A A820                       		dc.w $A820
0001E25C                            ; ---------------------------------------------------------------------------
0001E25C                            ; Pattern load cues - special stage
0001E25C                            ; ---------------------------------------------------------------------------
0001E25C 0010                       PLC_SpeStage:	dc.w $10
0001E25E 0000 0000                  		dc.l Nem_SSBgCloud	; bubble and cloud background
0001E262 0000                       		dc.w 0
0001E264 0000 0000                  		dc.l Nem_SSBgFish	; bird and fish	background
0001E268 0A20                       		dc.w $A20
0001E26A 0000 0000                  		dc.l Nem_SSWalls	; walls
0001E26E 2840                       		dc.w $2840
0001E270 0000 0000                  		dc.l Nem_Bumper		; bumper
0001E274 4760                       		dc.w $4760
0001E276 0000 0000                  		dc.l Nem_SSGOAL		; GOAL block
0001E27A 4A20                       		dc.w $4A20
0001E27C 0000 0000                  		dc.l Nem_SSUpDown	; UP and DOWN blocks
0001E280 4C60                       		dc.w $4C60
0001E282 0000 0000                  		dc.l Nem_SSRBlock	; R block
0001E286 5E00                       		dc.w $5E00
0001E288 0000 0000                  		dc.l Nem_SS1UpBlock	; 1UP block
0001E28C 6E00                       		dc.w $6E00
0001E28E 0000 0000                  		dc.l Nem_SSEmStars	; emerald collection stars
0001E292 7E00                       		dc.w $7E00
0001E294 0000 0000                  		dc.l Nem_SSRedWhite	; red and white	block
0001E298 8E00                       		dc.w $8E00
0001E29A 0000 0000                  		dc.l Nem_SSGhost	; ghost	block
0001E29E 9E00                       		dc.w $9E00
0001E2A0 0000 0000                  		dc.l Nem_SSWBlock	; W block
0001E2A4 AE00                       		dc.w $AE00
0001E2A6 0000 0000                  		dc.l Nem_SSGlass	; glass	block
0001E2AA BE00                       		dc.w $BE00
0001E2AC 0000 0000                  		dc.l Nem_SSEmerald	; emeralds
0001E2B0 EE00                       		dc.w $EE00
0001E2B2 0000 0000                  		dc.l Nem_SSZone1	; ZONE 1 block
0001E2B6 F2E0                       		dc.w $F2E0
0001E2B8 0000 0000                  		dc.l Nem_SSZone2	; ZONE 2 block
0001E2BC F400                       		dc.w $F400
0001E2BE 0000 0000                  		dc.l Nem_SSZone3	; ZONE 3 block
0001E2C2 F520                       		dc.w $F520
0001E2C4 0000 0000                  		dc.l Nem_SSZone4	; ZONE 4 block
0001E2C8 F2E0                       		dc.w $F2E0
0001E2CA 0000 0000                  		dc.l Nem_SSZone5	; ZONE 5 block
0001E2CE F400                       		dc.w $F400
0001E2D0 0000 0000                  		dc.l Nem_SSZone6	; ZONE 6 block
0001E2D4 F520                       		dc.w $F520
0001E2D6                            ; ---------------------------------------------------------------------------
0001E2D6                            ; Pattern load cues - GHZ animals
0001E2D6                            ; ---------------------------------------------------------------------------
0001E2D6 0001                       PLC_GHZAnimals:	dc.w 1
0001E2D8 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E2DC B000                       		dc.w $B000
0001E2DE 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E2E2 B240                       		dc.w $B240
0001E2E4                            ; ---------------------------------------------------------------------------
0001E2E4                            ; Pattern load cues - LZ animals
0001E2E4                            ; ---------------------------------------------------------------------------
0001E2E4 0001                       PLC_LZAnimals:	dc.w 1
0001E2E6 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001E2EA B000                       		dc.w $B000
0001E2EC 0000 0000                  		dc.l Nem_Seal		; seal
0001E2F0 B240                       		dc.w $B240
0001E2F2                            ; ---------------------------------------------------------------------------
0001E2F2                            ; Pattern load cues - MZ animals
0001E2F2                            ; ---------------------------------------------------------------------------
0001E2F2 0001                       PLC_MZAnimals:	dc.w 1
0001E2F4 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001E2F8 B000                       		dc.w $B000
0001E2FA 0000 0000                  		dc.l Nem_Seal		; seal
0001E2FE B240                       		dc.w $B240
0001E300                            ; ---------------------------------------------------------------------------
0001E300                            ; Pattern load cues - SLZ animals
0001E300                            ; ---------------------------------------------------------------------------
0001E300 0001                       PLC_SLZAnimals:	dc.w 1
0001E302 0000 0000                  		dc.l Nem_Pig		; pig
0001E306 B000                       		dc.w $B000
0001E308 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E30C B240                       		dc.w $B240
0001E30E                            ; ---------------------------------------------------------------------------
0001E30E                            ; Pattern load cues - SYZ animals
0001E30E                            ; ---------------------------------------------------------------------------
0001E30E 0001                       PLC_SYZAnimals:	dc.w 1
0001E310 0000 0000                  		dc.l Nem_Pig		; pig
0001E314 B000                       		dc.w $B000
0001E316 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E31A B240                       		dc.w $B240
0001E31C                            ; ---------------------------------------------------------------------------
0001E31C                            ; Pattern load cues - SBZ animals
0001E31C                            ; ---------------------------------------------------------------------------
0001E31C 0001                       PLC_SBZAnimals:	dc.w 1
0001E31E 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E322 B000                       		dc.w $B000
0001E324 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E328 B240                       		dc.w $B240
0001E32A                            ; ---------------------------------------------------------------------------
0001E32A                            ; Pattern load cues - special stage results screen
0001E32A                            ; ---------------------------------------------------------------------------
0001E32A 0001                       PLC_SpeStResult:dc.w 1
0001E32C 0000 0000                  		dc.l Nem_ResultEm	; emeralds
0001E330 A820                       		dc.w $A820
0001E332 0000 0000                  		dc.l Nem_MiniSonic	; mini Sonic
0001E336 AA20                       		dc.w $AA20
0001E338                            ; ---------------------------------------------------------------------------
0001E338                            ; Pattern load cues - ending sequence
0001E338                            ; ---------------------------------------------------------------------------
0001E338 000E                       PLC_Ending:	dc.w $E
0001E33A 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0001E33E 0000                       		dc.w 0
0001E340 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001E344 39A0                       		dc.w $39A0
0001E346 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001E34A 6B00                       		dc.w $6B00
0001E34C 0000 0000                  		dc.l Nem_EndFlower	; flowers
0001E350 7400                       		dc.w $7400
0001E352 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001E356 78A0                       		dc.w $78A0
0001E358 0000 0000                  		dc.l Nem_EndSonic	; Sonic
0001E35C 7C20                       		dc.w $7C20
0001E35E 0000 0000                  		dc.l Nem_EndEggman	; Eggman's death (unused)
0001E362 A480                       		dc.w $A480
0001E364 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E368 AA60                       		dc.w $AA60
0001E36A 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E36E ACA0                       		dc.w $ACA0
0001E370 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001E374 AE60                       		dc.w $AE60
0001E376 0000 0000                  		dc.l Nem_Seal		; seal
0001E37A B0A0                       		dc.w $B0A0
0001E37C 0000 0000                  		dc.l Nem_Pig		; pig
0001E380 B260                       		dc.w $B260
0001E382 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E386 B4A0                       		dc.w $B4A0
0001E388 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001E38C B660                       		dc.w $B660
0001E38E 0000 0000                  		dc.l Nem_EndStH		; "SONIC THE HEDGEHOG"
0001E392 B8A0                       		dc.w $B8A0
0001E394                            ; ---------------------------------------------------------------------------
0001E394                            ; Pattern load cues - "TRY AGAIN" and "END" screens
0001E394                            ; ---------------------------------------------------------------------------
0001E394 0002                       PLC_TryAgain:	dc.w 2
0001E396 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001E39A 78A0                       		dc.w $78A0
0001E39C 0000 0000                  		dc.l Nem_TryAgain	; Eggman
0001E3A0 7C20                       		dc.w $7C20
0001E3A2 0000 0000                  		dc.l Nem_CreditText	; credits alphabet
0001E3A6 B400                       		dc.w $B400
0001E3A8                            ; ---------------------------------------------------------------------------
0001E3A8                            ; Pattern load cues - Eggman on SBZ 2
0001E3A8                            ; ---------------------------------------------------------------------------
0001E3A8 0002                       PLC_EggmanSBZ2:	dc.w 2
0001E3AA 0000 0000                  		dc.l Nem_SbzBlock	; block
0001E3AE A300                       		dc.w $A300
0001E3B0 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman
0001E3B4 8000                       		dc.w $8000
0001E3B6 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E3BA 9400                       		dc.w $9400
0001E3BC                            ; ---------------------------------------------------------------------------
0001E3BC                            ; Pattern load cues - final boss
0001E3BC                            ; ---------------------------------------------------------------------------
0001E3BC 0004                       PLC_FZBoss:	dc.w 4
0001E3BE 0000 0000                  		dc.l Nem_FzEggman	; Eggman after boss
0001E3C2 7400                       		dc.w $7400
0001E3C4 0000 0000                  		dc.l Nem_FzBoss		; FZ boss
0001E3C8 6000                       		dc.w $6000
0001E3CA 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001E3CE 8000                       		dc.w $8000
0001E3D0 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman without ship
0001E3D4 8E00                       		dc.w $8E00
0001E3D6 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001E3DA A540                       		dc.w $A540
0001E3DC                            ; ---------------------------------------------------------------------------
0001E3DC                            ; Pattern load cues - Teto boss
0001E3DC                            ; ---------------------------------------------------------------------------
0001E3DC 0002                       PLC_TetoBoss:	dc.w 2
0001E3DE 0000 0000                  		dc.l Nem_Tetoboss		; Eggman main patterns
0001E3E2 8000                       		dc.w $8000
0001E3E4 0000 0000                  		dc.l Nem_Prison		; prison capsule
0001E3E8 93A0                       		dc.w $93A0
0001E3EA 0000 0000                  		dc.l Nem_Peartobomb		; bomb enemy (gets overwritten)
0001E3EE 9000                       		dc.w $9000
0001E3F0                            		even
0001E3F0                            		even
0001E3F0                            
0001E3F0                            		incbin	misc\padding.bin
0001E4DE                            		even
0001E4DE                            Nem_SegaLogo:	incbin	artnem\segalogo.bin	; large Sega logo
0001E92E                            		even
0001E92E                            Eni_SegaLogo:	incbin	mapeni\segalogo.bin	; large Sega logo (mappings)
0001E9C0                            		even
0001E9C0                            Nem_Gomer:	incbin	artnem\gomer.bin
0001EB02                            		even
0001EB02                            Eni_Gomer:	incbin	mapeni\gomer.bin
0001EB50                            		even
0001EB50                            Eni_Title:	incbin	mapeni\titlescr.bin	; title screen foreground (mappings)
0001EC64                            		even
0001EC64                            Nem_TitleFg:	incbin	artnem\titlefor.bin	; title screen foreground
0001FB2E                            		even
0001FB2E                            Nem_TitleSonic:	incbin	artnem\titleson.bin	; Sonic on title screen
00023C34                            		even
00023C34                            Nem_TitleTM:	incbin	artnem\titletm.bin	; TM on title screen
00023C68                            		even
00023C68                            Eni_JapNames:	incbin	mapeni\japcreds.bin	; Japanese credits (mappings)
00023D26                            		even
00023D26                            Nem_JapNames:	incbin	artnem\japcreds.bin	; Japanese credits
000241CE                            		even
000241CE                            Eni_Idiot:	incbin	mapeni\idiot.bin	; Idiot (mappings)
0002422C                            		even
0002422C                            Nem_Idiot:	incbin	artnem\idiot.bin	; Idiot
00024E32                            		even
00024E32                            ; ---------------------------------------------------------------------------
00024E32                            ; Sprite mappings - Sonic
00024E32                            ; ---------------------------------------------------------------------------
00024E32                            Map_Sonic:
00024E32                            	include "_maps\Sonic.asm"
00024E32                            Map_6d2d:
00024E32 0000                       Map_6d2d_0: 	dc.w Map_6d2d_B8-Map_6d2d
00024E34 0000                       Map_6d2d_2: 	dc.w Map_6d2d_B9-Map_6d2d
00024E36 0000                       Map_6d2d_4: 	dc.w Map_6d2d_C4-Map_6d2d
00024E38 0000                       Map_6d2d_6: 	dc.w Map_6d2d_D4-Map_6d2d
00024E3A 0000                       Map_6d2d_8: 	dc.w Map_6d2d_E4-Map_6d2d
00024E3C 0000                       Map_6d2d_A: 	dc.w Map_6d2d_F4-Map_6d2d
00024E3E 0000                       Map_6d2d_C: 	dc.w Map_6d2d_104-Map_6d2d
00024E40 0000                       Map_6d2d_E: 	dc.w Map_6d2d_119-Map_6d2d
00024E42 0000                       Map_6d2d_10: 	dc.w Map_6d2d_124-Map_6d2d
00024E44 0000                       Map_6d2d_12: 	dc.w Map_6d2d_12F-Map_6d2d
00024E46 0000                       Map_6d2d_14: 	dc.w Map_6d2d_144-Map_6d2d
00024E48 0000                       Map_6d2d_16: 	dc.w Map_6d2d_14F-Map_6d2d
00024E4A 0000                       Map_6d2d_18: 	dc.w Map_6d2d_15F-Map_6d2d
00024E4C 0000                       Map_6d2d_1A: 	dc.w Map_6d2d_179-Map_6d2d
00024E4E 0000                       Map_6d2d_1C: 	dc.w Map_6d2d_198-Map_6d2d
00024E50 0000                       Map_6d2d_1E: 	dc.w Map_6d2d_1AD-Map_6d2d
00024E52 0000                       Map_6d2d_20: 	dc.w Map_6d2d_1C7-Map_6d2d
00024E54 0000                       Map_6d2d_22: 	dc.w Map_6d2d_1DC-Map_6d2d
00024E56 0000                       Map_6d2d_24: 	dc.w Map_6d2d_1F6-Map_6d2d
00024E58 0000                       Map_6d2d_26: 	dc.w Map_6d2d_20B-Map_6d2d
00024E5A 0000                       Map_6d2d_28: 	dc.w Map_6d2d_216-Map_6d2d
00024E5C 0000                       Map_6d2d_2A: 	dc.w Map_6d2d_221-Map_6d2d
00024E5E 0000                       Map_6d2d_2C: 	dc.w Map_6d2d_236-Map_6d2d
00024E60 0000                       Map_6d2d_2E: 	dc.w Map_6d2d_241-Map_6d2d
00024E62 0000                       Map_6d2d_30: 	dc.w Map_6d2d_251-Map_6d2d
00024E64 0000                       Map_6d2d_32: 	dc.w Map_6d2d_270-Map_6d2d
00024E66 0000                       Map_6d2d_34: 	dc.w Map_6d2d_28F-Map_6d2d
00024E68 0000                       Map_6d2d_36: 	dc.w Map_6d2d_2A4-Map_6d2d
00024E6A 0000                       Map_6d2d_38: 	dc.w Map_6d2d_2BE-Map_6d2d
00024E6C 0000                       Map_6d2d_3A: 	dc.w Map_6d2d_2D3-Map_6d2d
00024E6E 0000                       Map_6d2d_3C: 	dc.w Map_6d2d_2ED-Map_6d2d
00024E70 0000                       Map_6d2d_3E: 	dc.w Map_6d2d_2F8-Map_6d2d
00024E72 0000                       Map_6d2d_40: 	dc.w Map_6d2d_303-Map_6d2d
00024E74 0000                       Map_6d2d_42: 	dc.w Map_6d2d_30E-Map_6d2d
00024E76 0000                       Map_6d2d_44: 	dc.w Map_6d2d_319-Map_6d2d
00024E78 0000                       Map_6d2d_46: 	dc.w Map_6d2d_32E-Map_6d2d
00024E7A 0000                       Map_6d2d_48: 	dc.w Map_6d2d_33E-Map_6d2d
00024E7C 0000                       Map_6d2d_4A: 	dc.w Map_6d2d_353-Map_6d2d
00024E7E 0000                       Map_6d2d_4C: 	dc.w Map_6d2d_363-Map_6d2d
00024E80 0000                       Map_6d2d_4E: 	dc.w Map_6d2d_36E-Map_6d2d
00024E82 0000                       Map_6d2d_50: 	dc.w Map_6d2d_379-Map_6d2d
00024E84 0000                       Map_6d2d_52: 	dc.w Map_6d2d_384-Map_6d2d
00024E86 0000                       Map_6d2d_54: 	dc.w Map_6d2d_38F-Map_6d2d
00024E88 0000                       Map_6d2d_56: 	dc.w Map_6d2d_3A4-Map_6d2d
00024E8A 0000                       Map_6d2d_58: 	dc.w Map_6d2d_3AF-Map_6d2d
00024E8C 0000                       Map_6d2d_5A: 	dc.w Map_6d2d_3C4-Map_6d2d
00024E8E 0000                       Map_6d2d_5C: 	dc.w Map_6d2d_3CF-Map_6d2d
00024E90 0000                       Map_6d2d_5E: 	dc.w Map_6d2d_3D5-Map_6d2d
00024E92 0000                       Map_6d2d_60: 	dc.w Map_6d2d_3DB-Map_6d2d
00024E94 0000                       Map_6d2d_62: 	dc.w Map_6d2d_3E1-Map_6d2d
00024E96 0000                       Map_6d2d_64: 	dc.w Map_6d2d_3E7-Map_6d2d
00024E98 0000                       Map_6d2d_66: 	dc.w Map_6d2d_3ED-Map_6d2d
00024E9A 0000                       Map_6d2d_68: 	dc.w Map_6d2d_3F8-Map_6d2d
00024E9C 0000                       Map_6d2d_6A: 	dc.w Map_6d2d_3FE-Map_6d2d
00024E9E 0000                       Map_6d2d_6C: 	dc.w Map_6d2d_409-Map_6d2d
00024EA0 0000                       Map_6d2d_6E: 	dc.w Map_6d2d_40F-Map_6d2d
00024EA2 0000                       Map_6d2d_70: 	dc.w Map_6d2d_41A-Map_6d2d
00024EA4 0000                       Map_6d2d_72: 	dc.w Map_6d2d_42F-Map_6d2d
00024EA6 0000                       Map_6d2d_74: 	dc.w Map_6d2d_44E-Map_6d2d
00024EA8 0000                       Map_6d2d_76: 	dc.w Map_6d2d_459-Map_6d2d
00024EAA 0000                       Map_6d2d_78: 	dc.w Map_6d2d_464-Map_6d2d
00024EAC 0000                       Map_6d2d_7A: 	dc.w Map_6d2d_479-Map_6d2d
00024EAE 0000                       Map_6d2d_7C: 	dc.w Map_6d2d_484-Map_6d2d
00024EB0 0000                       Map_6d2d_7E: 	dc.w Map_6d2d_494-Map_6d2d
00024EB2 0000                       Map_6d2d_80: 	dc.w Map_6d2d_4A9-Map_6d2d
00024EB4 0000                       Map_6d2d_82: 	dc.w Map_6d2d_4B9-Map_6d2d
00024EB6 0000                       Map_6d2d_84: 	dc.w Map_6d2d_4CE-Map_6d2d
00024EB8 0000                       Map_6d2d_86: 	dc.w Map_6d2d_4E3-Map_6d2d
00024EBA 0000                       Map_6d2d_88: 	dc.w Map_6d2d_4FD-Map_6d2d
00024EBC 0000                       Map_6d2d_8A: 	dc.w Map_6d2d_517-Map_6d2d
00024EBE 0000                       Map_6d2d_8C: 	dc.w Map_6d2d_522-Map_6d2d
00024EC0 0000                       Map_6d2d_8E: 	dc.w Map_6d2d_532-Map_6d2d
00024EC2 0000                       Map_6d2d_90: 	dc.w Map_6d2d_53D-Map_6d2d
00024EC4 0000                       Map_6d2d_92: 	dc.w Map_6d2d_54D-Map_6d2d
00024EC6 0000                       Map_6d2d_94: 	dc.w Map_6d2d_558-Map_6d2d
00024EC8 0000                       Map_6d2d_96: 	dc.w Map_6d2d_568-Map_6d2d
00024ECA 0000                       Map_6d2d_98: 	dc.w Map_6d2d_578-Map_6d2d
00024ECC 0000                       Map_6d2d_9A: 	dc.w Map_6d2d_592-Map_6d2d
00024ECE 0000                       Map_6d2d_9C: 	dc.w Map_6d2d_5AC-Map_6d2d
00024ED0 0000                       Map_6d2d_9E: 	dc.w Map_6d2d_5B7-Map_6d2d
00024ED2 0000                       Map_6d2d_A0: 	dc.w Map_6d2d_5C7-Map_6d2d
00024ED4 0000                       Map_6d2d_A2: 	dc.w Map_6d2d_5CD-Map_6d2d
00024ED6 0000                       Map_6d2d_A4: 	dc.w Map_6d2d_5D3-Map_6d2d
00024ED8 0000                       Map_6d2d_A6: 	dc.w Map_6d2d_5D9-Map_6d2d
00024EDA 0000                       Map_6d2d_A8: 	dc.w Map_6d2d_5EE-Map_6d2d
00024EDC 0000                       Map_6d2d_AA: 	dc.w Map_6d2d_5FE-Map_6d2d
00024EDE 0000                       Map_6d2d_AC: 	dc.w Map_6d2d_60E-Map_6d2d
00024EE0 0000                       Map_6d2d_AE: 	dc.w Map_6d2d_61E-Map_6d2d
00024EE2 0000                       Map_6d2d_B0: 	dc.w Map_6d2d_629-Map_6d2d
00024EE4 0000                       Map_6d2d_B2: 	dc.w Map_6d2d_634-Map_6d2d
00024EE6 0000                       Map_6d2d_B4: 	dc.w Map_6d2d_644-Map_6d2d
00024EE8 0000                       Map_6d2d_B6: 	dc.w Map_6d2d_64F-Map_6d2d
00024EEA 00                         Map_6d2d_B8: 	dc.b $0
00024EEB 02                         Map_6d2d_B9: 	dc.b $2
00024EEC ED0E 0000 ED               	dc.b $ED, $E, $0, $0, $ED
00024EF1 0509 000C F5               	dc.b $5, $9, $0, $C, $F5
00024EF6 03                         Map_6d2d_C4: 	dc.b $3
00024EF7 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00024EFC FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00024F01 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00024F06 03                         Map_6d2d_D4: 	dc.b $3
00024F07 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00024F0C FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00024F11 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00024F16 03                         Map_6d2d_E4: 	dc.b $3
00024F17 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00024F1C FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00024F21 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00024F26 03                         Map_6d2d_F4: 	dc.b $3
00024F27 EC0A 0000 F0               	dc.b $EC, $A, $0, $0, $F0
00024F2C 0408 0009 F0               	dc.b $4, $8, $0, $9, $F0
00024F31 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00024F36 04                         Map_6d2d_104: 	dc.b $4
00024F37 EB0D 0000 EC               	dc.b $EB, $D, $0, $0, $EC
00024F3C FB09 0008 EC               	dc.b $FB, $9, $0, $8, $EC
00024F41 FB06 000E 04               	dc.b $FB, $6, $0, $E, $4
00024F46 0B04 0014 EC               	dc.b $B, $4, $0, $14, $EC
00024F4B 02                         Map_6d2d_119: 	dc.b $2
00024F4C EC0D 0000 ED               	dc.b $EC, $D, $0, $0, $ED
00024F51 FC0E 0008 F5               	dc.b $FC, $E, $0, $8, $F5
00024F56 02                         Map_6d2d_124: 	dc.b $2
00024F57 ED09 0000 F3               	dc.b $ED, $9, $0, $0, $F3
00024F5C FD0A 0006 F3               	dc.b $FD, $A, $0, $6, $F3
00024F61 04                         Map_6d2d_12F: 	dc.b $4
00024F62 EB09 0000 F4               	dc.b $EB, $9, $0, $0, $F4
00024F67 FB09 0006 EC               	dc.b $FB, $9, $0, $6, $EC
00024F6C FB06 000C 04               	dc.b $FB, $6, $0, $C, $4
00024F71 0B04 0012 EC               	dc.b $B, $4, $0, $12, $EC
00024F76 02                         Map_6d2d_144: 	dc.b $2
00024F77 FC0E 0000 EB               	dc.b $FC, $E, $0, $0, $EB
00024F7C EC09 000C F3               	dc.b $EC, $9, $0, $C, $F3
00024F81 03                         Map_6d2d_14F: 	dc.b $3
00024F82 ED0D 0000 EC               	dc.b $ED, $D, $0, $0, $EC
00024F87 FD0C 0008 F4               	dc.b $FD, $C, $0, $8, $F4
00024F8C 0509 000C F4               	dc.b $5, $9, $0, $C, $F4
00024F91 05                         Map_6d2d_15F: 	dc.b $5
00024F92 EB09 0000 EB               	dc.b $EB, $9, $0, $0, $EB
00024F97 EB06 0006 03               	dc.b $EB, $6, $0, $6, $3
00024F9C FB08 000C EB               	dc.b $FB, $8, $0, $C, $EB
00024FA1 0309 000F F3               	dc.b $3, $9, $0, $F, $F3
00024FA6 1300 0015 FB               	dc.b $13, $0, $0, $15, $FB
00024FAB 06                         Map_6d2d_179: 	dc.b $6
00024FAC EC09 0000 EC               	dc.b $EC, $9, $0, $0, $EC
00024FB1 EC01 0006 04               	dc.b $EC, $1, $0, $6, $4
00024FB6 FC0C 0008 EC               	dc.b $FC, $C, $0, $8, $EC
00024FBB 0409 000C F4               	dc.b $4, $9, $0, $C, $F4
00024FC0 FC05 0012 0C               	dc.b $FC, $5, $0, $12, $C
00024FC5 F400 0016 14               	dc.b $F4, $0, $0, $16, $14
00024FCA 04                         Map_6d2d_198: 	dc.b $4
00024FCB ED09 0000 ED               	dc.b $ED, $9, $0, $0, $ED
00024FD0 ED01 0006 05               	dc.b $ED, $1, $0, $6, $5
00024FD5 FD0D 0008 F5               	dc.b $FD, $D, $0, $8, $F5
00024FDA 0D08 0010 FD               	dc.b $D, $8, $0, $10, $FD
00024FDF 05                         Map_6d2d_1AD: 	dc.b $5
00024FE0 EB09 0000 EB               	dc.b $EB, $9, $0, $0, $EB
00024FE5 EB05 0006 03               	dc.b $EB, $5, $0, $6, $3
00024FEA FB0D 000A F3               	dc.b $FB, $D, $0, $A, $F3
00024FEF 0B08 0012 F3               	dc.b $B, $8, $0, $12, $F3
00024FF4 1304 0015 FB               	dc.b $13, $4, $0, $15, $FB
00024FF9 04                         Map_6d2d_1C7: 	dc.b $4
00024FFA EC09 0000 EC               	dc.b $EC, $9, $0, $0, $EC
00024FFF EC01 0006 04               	dc.b $EC, $1, $0, $6, $4
00025004 FC0D 0008 F4               	dc.b $FC, $D, $0, $8, $F4
00025009 0C08 0010 FC               	dc.b $C, $8, $0, $10, $FC
0002500E 05                         Map_6d2d_1DC: 	dc.b $5
0002500F ED09 0000 ED               	dc.b $ED, $9, $0, $0, $ED
00025014 ED01 0006 05               	dc.b $ED, $1, $0, $6, $5
00025019 FD00 0008 ED               	dc.b $FD, $0, $0, $8, $ED
0002501E FD0D 0009 F5               	dc.b $FD, $D, $0, $9, $F5
00025023 0D08 0011 FD               	dc.b $D, $8, $0, $11, $FD
00025028 04                         Map_6d2d_1F6: 	dc.b $4
00025029 F407 0000 EB               	dc.b $F4, $7, $0, $0, $EB
0002502E EC09 0008 FB               	dc.b $EC, $9, $0, $8, $FB
00025033 FC04 000E FB               	dc.b $FC, $4, $0, $E, $FB
00025038 0409 0010 FB               	dc.b $4, $9, $0, $10, $FB
0002503D 02                         Map_6d2d_20B: 	dc.b $2
0002503E F407 0000 EC               	dc.b $F4, $7, $0, $0, $EC
00025043 EC0B 0008 FC               	dc.b $EC, $B, $0, $8, $FC
00025048 02                         Map_6d2d_216: 	dc.b $2
00025049 F406 0000 ED               	dc.b $F4, $6, $0, $0, $ED
0002504E F40A 0006 FD               	dc.b $F4, $A, $0, $6, $FD
00025053 04                         Map_6d2d_221: 	dc.b $4
00025054 F406 0000 EB               	dc.b $F4, $6, $0, $0, $EB
00025059 EC09 0006 FB               	dc.b $EC, $9, $0, $6, $FB
0002505E FC04 000C FB               	dc.b $FC, $4, $0, $C, $FB
00025063 0409 000E FB               	dc.b $4, $9, $0, $E, $FB
00025068 02                         Map_6d2d_236: 	dc.b $2
00025069 F406 0000 EC               	dc.b $F4, $6, $0, $0, $EC
0002506E F40B 0006 FC               	dc.b $F4, $B, $0, $6, $FC
00025073 03                         Map_6d2d_241: 	dc.b $3
00025074 F407 0000 ED               	dc.b $F4, $7, $0, $0, $ED
00025079 EC00 0008 FD               	dc.b $EC, $0, $0, $8, $FD
0002507E F40A 0009 FD               	dc.b $F4, $A, $0, $9, $FD
00025083 06                         Map_6d2d_251: 	dc.b $6
00025084 FD06 0000 EB               	dc.b $FD, $6, $0, $0, $EB
00025089 ED04 0006 F3               	dc.b $ED, $4, $0, $6, $F3
0002508E F504 0008 EB               	dc.b $F5, $4, $0, $8, $EB
00025093 F50A 000A FB               	dc.b $F5, $A, $0, $A, $FB
00025098 0D00 0013 FB               	dc.b $D, $0, $0, $13, $FB
0002509D FD00 0014 13               	dc.b $FD, $0, $0, $14, $13
000250A2 06                         Map_6d2d_270: 	dc.b $6
000250A3 FC06 0000 EC               	dc.b $FC, $6, $0, $0, $EC
000250A8 E408 0006 F4               	dc.b $E4, $8, $0, $6, $F4
000250AD EC04 0009 FC               	dc.b $EC, $4, $0, $9, $FC
000250B2 F404 000B EC               	dc.b $F4, $4, $0, $B, $EC
000250B7 F40A 000D FC               	dc.b $F4, $A, $0, $D, $FC
000250BC 0C00 0016 FC               	dc.b $C, $0, $0, $16, $FC
000250C1 04                         Map_6d2d_28F: 	dc.b $4
000250C2 FB06 0000 ED               	dc.b $FB, $6, $0, $0, $ED
000250C7 F304 0006 ED               	dc.b $F3, $4, $0, $6, $ED
000250CC EB0A 0008 FD               	dc.b $EB, $A, $0, $8, $FD
000250D1 0304 0011 FD               	dc.b $3, $4, $0, $11, $FD
000250D6 05                         Map_6d2d_2A4: 	dc.b $5
000250D7 FD06 0000 EB               	dc.b $FD, $6, $0, $0, $EB
000250DC ED08 0006 F3               	dc.b $ED, $8, $0, $6, $F3
000250E1 F504 0009 EB               	dc.b $F5, $4, $0, $9, $EB
000250E6 F50D 000B FB               	dc.b $F5, $D, $0, $B, $FB
000250EB 0508 0013 FB               	dc.b $5, $8, $0, $13, $FB
000250F0 04                         Map_6d2d_2BE: 	dc.b $4
000250F1 FC06 0000 EC               	dc.b $FC, $6, $0, $0, $EC
000250F6 F404 0006 EC               	dc.b $F4, $4, $0, $6, $EC
000250FB EC0A 0008 FC               	dc.b $EC, $A, $0, $8, $FC
00025100 0404 0011 FC               	dc.b $4, $4, $0, $11, $FC
00025105 05                         Map_6d2d_2D3: 	dc.b $5
00025106 FB06 0000 ED               	dc.b $FB, $6, $0, $0, $ED
0002510B EB0A 0006 FD               	dc.b $EB, $A, $0, $6, $FD
00025110 F304 000F ED               	dc.b $F3, $4, $0, $F, $ED
00025115 0304 0011 FD               	dc.b $3, $4, $0, $11, $FD
0002511A 0B00 0013 FD               	dc.b $B, $0, $0, $13, $FD
0002511F 02                         Map_6d2d_2ED: 	dc.b $2
00025120 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00025125 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
0002512A 02                         Map_6d2d_2F8: 	dc.b $2
0002512B EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00025130 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
00025135 02                         Map_6d2d_303: 	dc.b $2
00025136 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
0002513B FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
00025140 02                         Map_6d2d_30E: 	dc.b $2
00025141 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00025146 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
0002514B 04                         Map_6d2d_319: 	dc.b $4
0002514C EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00025151 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00025156 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
0002515B FE00 0014 EE               	dc.b $FE, $0, $0, $14, $EE
00025160 03                         Map_6d2d_32E: 	dc.b $3
00025161 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00025166 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
0002516B FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00025170 04                         Map_6d2d_33E: 	dc.b $4
00025171 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00025176 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
0002517B FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00025180 FE00 0014 EE               	dc.b $FE, $0, $0, $14, $EE
00025185 03                         Map_6d2d_353: 	dc.b $3
00025186 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
0002518B EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00025190 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00025195 02                         Map_6d2d_363: 	dc.b $2
00025196 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
0002519B F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
000251A0 02                         Map_6d2d_36E: 	dc.b $2
000251A1 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
000251A6 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
000251AB 02                         Map_6d2d_379: 	dc.b $2
000251AC F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
000251B1 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
000251B6 02                         Map_6d2d_384: 	dc.b $2
000251B7 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
000251BC F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
000251C1 04                         Map_6d2d_38F: 	dc.b $4
000251C2 FA06 0000 EE               	dc.b $FA, $6, $0, $0, $EE
000251C7 F204 0006 EE               	dc.b $F2, $4, $0, $6, $EE
000251CC EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
000251D1 0A00 0014 FE               	dc.b $A, $0, $0, $14, $FE
000251D6 02                         Map_6d2d_3A4: 	dc.b $2
000251D7 F207 0000 EE               	dc.b $F2, $7, $0, $0, $EE
000251DC EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
000251E1 04                         Map_6d2d_3AF: 	dc.b $4
000251E2 FA06 0000 EE               	dc.b $FA, $6, $0, $0, $EE
000251E7 F204 0006 EE               	dc.b $F2, $4, $0, $6, $EE
000251EC EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
000251F1 0A00 0014 FE               	dc.b $A, $0, $0, $14, $FE
000251F6 02                         Map_6d2d_3C4: 	dc.b $2
000251F7 F207 0000 EE               	dc.b $F2, $7, $0, $0, $EE
000251FC EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
00025201 01                         Map_6d2d_3CF: 	dc.b $1
00025202 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00025207 01                         Map_6d2d_3D5: 	dc.b $1
00025208 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
0002520D 01                         Map_6d2d_3DB: 	dc.b $1
0002520E F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00025213 01                         Map_6d2d_3E1: 	dc.b $1
00025214 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00025219 01                         Map_6d2d_3E7: 	dc.b $1
0002521A F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
0002521F 02                         Map_6d2d_3ED: 	dc.b $2
00025220 F40E 0000 EC               	dc.b $F4, $E, $0, $0, $EC
00025225 F402 000C 0C               	dc.b $F4, $2, $0, $C, $C
0002522A 01                         Map_6d2d_3F8: 	dc.b $1
0002522B F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00025230 02                         Map_6d2d_3FE: 	dc.b $2
00025231 EC0B 0000 F4               	dc.b $EC, $B, $0, $0, $F4
00025236 0C08 000C F4               	dc.b $C, $8, $0, $C, $F4
0002523B 01                         Map_6d2d_409: 	dc.b $1
0002523C F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00025241 02                         Map_6d2d_40F: 	dc.b $2
00025242 ED09 0000 F0               	dc.b $ED, $9, $0, $0, $F0
00025247 FD0E 0006 F0               	dc.b $FD, $E, $0, $6, $F0
0002524C 04                         Map_6d2d_41A: 	dc.b $4
0002524D ED09 0000 F0               	dc.b $ED, $9, $0, $0, $F0
00025252 FD0D 0006 F0               	dc.b $FD, $D, $0, $6, $F0
00025257 0D04 000E 00               	dc.b $D, $4, $0, $E, $0
0002525C 0500 0010 E8               	dc.b $5, $0, $0, $10, $E8
00025261 06                         Map_6d2d_42F: 	dc.b $6
00025262 F404 0000 F4               	dc.b $F4, $4, $0, $0, $F4
00025267 FC0D 0002 EC               	dc.b $FC, $D, $0, $2, $EC
0002526C 0C08 000A F4               	dc.b $C, $8, $0, $A, $F4
00025271 0C00 000D EC               	dc.b $C, $0, $0, $D, $EC
00025276 FC02 000E 0C               	dc.b $FC, $2, $0, $E, $C
0002527B F400 0011 04               	dc.b $F4, $0, $0, $11, $4
00025280 02                         Map_6d2d_44E: 	dc.b $2
00025281 040D 0000 E4               	dc.b $4, $D, $0, $0, $E4
00025286 EC0A 0008 EC               	dc.b $EC, $A, $0, $8, $EC
0002528B 02                         Map_6d2d_459: 	dc.b $2
0002528C 040D 0000 E3               	dc.b $4, $D, $0, $0, $E3
00025291 EC0A 0008 EB               	dc.b $EC, $A, $0, $8, $EB
00025296 04                         Map_6d2d_464: 	dc.b $4
00025297 F40D 0000 FC               	dc.b $F4, $D, $0, $0, $FC
0002529C F705 0008 EC               	dc.b $F7, $5, $0, $8, $EC
000252A1 0408 000C 03               	dc.b $4, $8, $0, $C, $3
000252A6 0700 000F EC               	dc.b $7, $0, $0, $F, $EC
000252AB 02                         Map_6d2d_479: 	dc.b $2
000252AC F40A 0000 E8               	dc.b $F4, $A, $0, $0, $E8
000252B1 F40A 0800 00               	dc.b $F4, $A, $8, $0, $0
000252B6 03                         Map_6d2d_484: 	dc.b $3
000252B7 F40D 0000 EB               	dc.b $F4, $D, $0, $0, $EB
000252BC FC00 0008 0B               	dc.b $FC, $0, $0, $8, $B
000252C1 040C 0009 EC               	dc.b $4, $C, $0, $9, $EC
000252C6 04                         Map_6d2d_494: 	dc.b $4
000252C7 F40D 0000 FC               	dc.b $F4, $D, $0, $0, $FC
000252CC F705 0008 EC               	dc.b $F7, $5, $0, $8, $EC
000252D1 0408 000C 02               	dc.b $4, $8, $0, $C, $2
000252D6 0700 000F EC               	dc.b $7, $0, $0, $F, $EC
000252DB 03                         Map_6d2d_4A9: 	dc.b $3
000252DC E80B 0000 F0               	dc.b $E8, $B, $0, $0, $F0
000252E1 0804 000C F8               	dc.b $8, $4, $0, $C, $F8
000252E6 1000 000E F8               	dc.b $10, $0, $0, $E, $F8
000252EB 04                         Map_6d2d_4B9: 	dc.b $4
000252EC F80E 0000 E8               	dc.b $F8, $E, $0, $0, $E8
000252F1 0005 000C 08               	dc.b $0, $5, $0, $C, $8
000252F6 F800 0010 08               	dc.b $F8, $0, $0, $10, $8
000252FB F000 0011 F8               	dc.b $F0, $0, $0, $11, $F8
00025300 04                         Map_6d2d_4CE: 	dc.b $4
00025301 F80E 0000 E8               	dc.b $F8, $E, $0, $0, $E8
00025306 0005 000C 08               	dc.b $0, $5, $0, $C, $8
0002530B F800 0010 08               	dc.b $F8, $0, $0, $10, $8
00025310 F000 0011 F8               	dc.b $F0, $0, $0, $11, $F8
00025315 05                         Map_6d2d_4E3: 	dc.b $5
00025316 E80A 0000 F4               	dc.b $E8, $A, $0, $0, $F4
0002531B F001 0009 0C               	dc.b $F0, $1, $0, $9, $C
00025320 0009 000B F4               	dc.b $0, $9, $0, $B, $F4
00025325 1004 0011 F4               	dc.b $10, $4, $0, $11, $F4
0002532A 0000 0013 EC               	dc.b $0, $0, $0, $13, $EC
0002532F 05                         Map_6d2d_4FD: 	dc.b $5
00025330 E80A 0000 F4               	dc.b $E8, $A, $0, $0, $F4
00025335 E801 0009 0C               	dc.b $E8, $1, $0, $9, $C
0002533A 0009 000B F4               	dc.b $0, $9, $0, $B, $F4
0002533F 1004 0011 F4               	dc.b $10, $4, $0, $11, $F4
00025344 0000 0013 EC               	dc.b $0, $0, $0, $13, $EC
00025349 02                         Map_6d2d_517: 	dc.b $2
0002534A ED0A 0000 F3               	dc.b $ED, $A, $0, $0, $F3
0002534F 050D 0009 EB               	dc.b $5, $D, $0, $9, $EB
00025354 03                         Map_6d2d_522: 	dc.b $3
00025355 EC0A 0000 F3               	dc.b $EC, $A, $0, $0, $F3
0002535A 0408 0009 F3               	dc.b $4, $8, $0, $9, $F3
0002535F 0C04 000C F3               	dc.b $C, $4, $0, $C, $F3
00025364 02                         Map_6d2d_532: 	dc.b $2
00025365 ED0A 0000 F3               	dc.b $ED, $A, $0, $0, $F3
0002536A 050D 0009 EB               	dc.b $5, $D, $0, $9, $EB
0002536F 03                         Map_6d2d_53D: 	dc.b $3
00025370 EC0A 0000 F3               	dc.b $EC, $A, $0, $0, $F3
00025375 0408 0009 F3               	dc.b $4, $8, $0, $9, $F3
0002537A 0C04 000C F3               	dc.b $C, $4, $0, $C, $F3
0002537F 02                         Map_6d2d_54D: 	dc.b $2
00025380 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00025385 FC0E 0006 F0               	dc.b $FC, $E, $0, $6, $F0
0002538A 03                         Map_6d2d_558: 	dc.b $3
0002538B EC0A 0000 F0               	dc.b $EC, $A, $0, $0, $F0
00025390 0405 0009 F8               	dc.b $4, $5, $0, $9, $F8
00025395 E400 000D F8               	dc.b $E4, $0, $0, $D, $F8
0002539A 03                         Map_6d2d_568: 	dc.b $3
0002539B E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
000253A0 E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
000253A5 F80B 000A F4               	dc.b $F8, $B, $0, $A, $F4
000253AA 05                         Map_6d2d_578: 	dc.b $5
000253AB E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
000253B0 E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
000253B5 F809 000A F4               	dc.b $F8, $9, $0, $A, $F4
000253BA 080C 0010 F4               	dc.b $8, $C, $0, $10, $F4
000253BF 1000 0014 F4               	dc.b $10, $0, $0, $14, $F4
000253C4 05                         Map_6d2d_592: 	dc.b $5
000253C5 E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
000253CA E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
000253CF F809 000A F4               	dc.b $F8, $9, $0, $A, $F4
000253D4 080C 0010 F4               	dc.b $8, $C, $0, $10, $F4
000253D9 1000 0014 F4               	dc.b $10, $0, $0, $14, $F4
000253DE 02                         Map_6d2d_5AC: 	dc.b $2
000253DF EC08 0000 F0               	dc.b $EC, $8, $0, $0, $F0
000253E4 F40F 0003 F0               	dc.b $F4, $F, $0, $3, $F0
000253E9 03                         Map_6d2d_5B7: 	dc.b $3
000253EA EC08 0000 F0               	dc.b $EC, $8, $0, $0, $F0
000253EF F40E 0003 F0               	dc.b $F4, $E, $0, $3, $F0
000253F4 0C08 000F F8               	dc.b $C, $8, $0, $F, $F8
000253F9 01                         Map_6d2d_5C7: 	dc.b $1
000253FA F00B 0000 F4               	dc.b $F0, $B, $0, $0, $F4
000253FF 01                         Map_6d2d_5CD: 	dc.b $1
00025400 F406 0000 F8               	dc.b $F4, $6, $0, $0, $F8
00025405 01                         Map_6d2d_5D3: 	dc.b $1
00025406 F801 0000 FC               	dc.b $F8, $1, $0, $0, $FC
0002540B 04                         Map_6d2d_5D9: 	dc.b $4
0002540C F40D 0800 E4               	dc.b $F4, $D, $8, $0, $E4
00025411 F705 0808 04               	dc.b $F7, $5, $8, $8, $4
00025416 0408 080C E5               	dc.b $4, $8, $8, $C, $E5
0002541B 0700 080F 0C               	dc.b $7, $0, $8, $F, $C
00025420 03                         Map_6d2d_5EE: 	dc.b $3
00025421 F40D 0800 F5               	dc.b $F4, $D, $8, $0, $F5
00025426 FC00 0808 ED               	dc.b $FC, $0, $8, $8, $ED
0002542B 040C 0809 F4               	dc.b $4, $C, $8, $9, $F4
00025430 03                         Map_6d2d_5FE: 	dc.b $3
00025431 F00E 0000 EC               	dc.b $F0, $E, $0, $0, $EC
00025436 F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
0002543B 080C 000E F4               	dc.b $8, $C, $0, $E, $F4
00025440 03                         Map_6d2d_60E: 	dc.b $3
00025441 EB09 0000 F4               	dc.b $EB, $9, $0, $0, $F4
00025446 FB0E 0006 EC               	dc.b $FB, $E, $0, $6, $EC
0002544B 0301 0012 0C               	dc.b $3, $1, $0, $12, $C
00025450 02                         Map_6d2d_61E: 	dc.b $2
00025451 F00F 0000 EC               	dc.b $F0, $F, $0, $0, $EC
00025456 F802 0010 0C               	dc.b $F8, $2, $0, $10, $C
0002545B 02                         Map_6d2d_629: 	dc.b $2
0002545C F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
00025461 EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
00025466 03                         Map_6d2d_634: 	dc.b $3
00025467 ED0F 0000 F3               	dc.b $ED, $F, $0, $0, $F3
0002546C 0D00 0010 F3               	dc.b $D, $0, $0, $10, $F3
00025471 0D04 0011 03               	dc.b $D, $4, $0, $11, $3
00025476 02                         Map_6d2d_644: 	dc.b $2
00025477 F60F 0000 EE               	dc.b $F6, $F, $0, $0, $EE
0002547C EE08 0010 F6               	dc.b $EE, $8, $0, $10, $F6
00025481 04                         Map_6d2d_64F: 	dc.b $4
00025482 ED08 0000 F3               	dc.b $ED, $8, $0, $0, $F3
00025487 F50E 0003 EB               	dc.b $F5, $E, $0, $3, $EB
0002548C F503 000F 0B               	dc.b $F5, $3, $0, $F, $B
00025491 0D08 0013 F3               	dc.b $D, $8, $0, $13, $F3
00025496                            	even
00025496                            	even
00025496                            
00025496                            ; ---------------------------------------------------------------------------
00025496                            ; Uncompressed graphics	loading	array for Sonic
00025496                            ; ---------------------------------------------------------------------------
00025496                            SonicDynPLC:
00025496                            	include "_inc\Sonic dynamic pattern load cues.asm"
00025496                            DPLC_2d5b:
00025496 0000                       DPLC_2d5b_0: 	dc.w DPLC_2d5b_B8-DPLC_2d5b
00025498 0000                       DPLC_2d5b_2: 	dc.w DPLC_2d5b_B9-DPLC_2d5b
0002549A 0000                       DPLC_2d5b_4: 	dc.w DPLC_2d5b_BE-DPLC_2d5b
0002549C 0000                       DPLC_2d5b_6: 	dc.w DPLC_2d5b_C5-DPLC_2d5b
0002549E 0000                       DPLC_2d5b_8: 	dc.w DPLC_2d5b_CC-DPLC_2d5b
000254A0 0000                       DPLC_2d5b_A: 	dc.w DPLC_2d5b_D3-DPLC_2d5b
000254A2 0000                       DPLC_2d5b_C: 	dc.w DPLC_2d5b_DA-DPLC_2d5b
000254A4 0000                       DPLC_2d5b_E: 	dc.w DPLC_2d5b_E3-DPLC_2d5b
000254A6 0000                       DPLC_2d5b_10: 	dc.w DPLC_2d5b_E8-DPLC_2d5b
000254A8 0000                       DPLC_2d5b_12: 	dc.w DPLC_2d5b_ED-DPLC_2d5b
000254AA 0000                       DPLC_2d5b_14: 	dc.w DPLC_2d5b_F6-DPLC_2d5b
000254AC 0000                       DPLC_2d5b_16: 	dc.w DPLC_2d5b_FB-DPLC_2d5b
000254AE 0000                       DPLC_2d5b_18: 	dc.w DPLC_2d5b_102-DPLC_2d5b
000254B0 0000                       DPLC_2d5b_1A: 	dc.w DPLC_2d5b_10D-DPLC_2d5b
000254B2 0000                       DPLC_2d5b_1C: 	dc.w DPLC_2d5b_11A-DPLC_2d5b
000254B4 0000                       DPLC_2d5b_1E: 	dc.w DPLC_2d5b_123-DPLC_2d5b
000254B6 0000                       DPLC_2d5b_20: 	dc.w DPLC_2d5b_12E-DPLC_2d5b
000254B8 0000                       DPLC_2d5b_22: 	dc.w DPLC_2d5b_137-DPLC_2d5b
000254BA 0000                       DPLC_2d5b_24: 	dc.w DPLC_2d5b_142-DPLC_2d5b
000254BC 0000                       DPLC_2d5b_26: 	dc.w DPLC_2d5b_14B-DPLC_2d5b
000254BE 0000                       DPLC_2d5b_28: 	dc.w DPLC_2d5b_150-DPLC_2d5b
000254C0 0000                       DPLC_2d5b_2A: 	dc.w DPLC_2d5b_155-DPLC_2d5b
000254C2 0000                       DPLC_2d5b_2C: 	dc.w DPLC_2d5b_15E-DPLC_2d5b
000254C4 0000                       DPLC_2d5b_2E: 	dc.w DPLC_2d5b_163-DPLC_2d5b
000254C6 0000                       DPLC_2d5b_30: 	dc.w DPLC_2d5b_16A-DPLC_2d5b
000254C8 0000                       DPLC_2d5b_32: 	dc.w DPLC_2d5b_177-DPLC_2d5b
000254CA 0000                       DPLC_2d5b_34: 	dc.w DPLC_2d5b_184-DPLC_2d5b
000254CC 0000                       DPLC_2d5b_36: 	dc.w DPLC_2d5b_18D-DPLC_2d5b
000254CE 0000                       DPLC_2d5b_38: 	dc.w DPLC_2d5b_198-DPLC_2d5b
000254D0 0000                       DPLC_2d5b_3A: 	dc.w DPLC_2d5b_1A1-DPLC_2d5b
000254D2 0000                       DPLC_2d5b_3C: 	dc.w DPLC_2d5b_1AC-DPLC_2d5b
000254D4 0000                       DPLC_2d5b_3E: 	dc.w DPLC_2d5b_1B1-DPLC_2d5b
000254D6 0000                       DPLC_2d5b_40: 	dc.w DPLC_2d5b_1B6-DPLC_2d5b
000254D8 0000                       DPLC_2d5b_42: 	dc.w DPLC_2d5b_1BB-DPLC_2d5b
000254DA 0000                       DPLC_2d5b_44: 	dc.w DPLC_2d5b_1C0-DPLC_2d5b
000254DC 0000                       DPLC_2d5b_46: 	dc.w DPLC_2d5b_1C9-DPLC_2d5b
000254DE 0000                       DPLC_2d5b_48: 	dc.w DPLC_2d5b_1D0-DPLC_2d5b
000254E0 0000                       DPLC_2d5b_4A: 	dc.w DPLC_2d5b_1D9-DPLC_2d5b
000254E2 0000                       DPLC_2d5b_4C: 	dc.w DPLC_2d5b_1E0-DPLC_2d5b
000254E4 0000                       DPLC_2d5b_4E: 	dc.w DPLC_2d5b_1E5-DPLC_2d5b
000254E6 0000                       DPLC_2d5b_50: 	dc.w DPLC_2d5b_1EA-DPLC_2d5b
000254E8 0000                       DPLC_2d5b_52: 	dc.w DPLC_2d5b_1EF-DPLC_2d5b
000254EA 0000                       DPLC_2d5b_54: 	dc.w DPLC_2d5b_1F4-DPLC_2d5b
000254EC 0000                       DPLC_2d5b_56: 	dc.w DPLC_2d5b_1FD-DPLC_2d5b
000254EE 0000                       DPLC_2d5b_58: 	dc.w DPLC_2d5b_202-DPLC_2d5b
000254F0 0000                       DPLC_2d5b_5A: 	dc.w DPLC_2d5b_20B-DPLC_2d5b
000254F2 0000                       DPLC_2d5b_5C: 	dc.w DPLC_2d5b_210-DPLC_2d5b
000254F4 0000                       DPLC_2d5b_5E: 	dc.w DPLC_2d5b_213-DPLC_2d5b
000254F6 0000                       DPLC_2d5b_60: 	dc.w DPLC_2d5b_216-DPLC_2d5b
000254F8 0000                       DPLC_2d5b_62: 	dc.w DPLC_2d5b_219-DPLC_2d5b
000254FA 0000                       DPLC_2d5b_64: 	dc.w DPLC_2d5b_21C-DPLC_2d5b
000254FC 0000                       DPLC_2d5b_66: 	dc.w DPLC_2d5b_21F-DPLC_2d5b
000254FE 0000                       DPLC_2d5b_68: 	dc.w DPLC_2d5b_224-DPLC_2d5b
00025500 0000                       DPLC_2d5b_6A: 	dc.w DPLC_2d5b_227-DPLC_2d5b
00025502 0000                       DPLC_2d5b_6C: 	dc.w DPLC_2d5b_22C-DPLC_2d5b
00025504 0000                       DPLC_2d5b_6E: 	dc.w DPLC_2d5b_22F-DPLC_2d5b
00025506 0000                       DPLC_2d5b_70: 	dc.w DPLC_2d5b_234-DPLC_2d5b
00025508 0000                       DPLC_2d5b_72: 	dc.w DPLC_2d5b_23D-DPLC_2d5b
0002550A 0000                       DPLC_2d5b_74: 	dc.w DPLC_2d5b_242-DPLC_2d5b
0002550C 0000                       DPLC_2d5b_76: 	dc.w DPLC_2d5b_247-DPLC_2d5b
0002550E 0000                       DPLC_2d5b_78: 	dc.w DPLC_2d5b_24C-DPLC_2d5b
00025510 0000                       DPLC_2d5b_7A: 	dc.w DPLC_2d5b_251-DPLC_2d5b
00025512 0000                       DPLC_2d5b_7C: 	dc.w DPLC_2d5b_254-DPLC_2d5b
00025514 0000                       DPLC_2d5b_7E: 	dc.w DPLC_2d5b_25B-DPLC_2d5b
00025516 0000                       DPLC_2d5b_80: 	dc.w DPLC_2d5b_260-DPLC_2d5b
00025518 0000                       DPLC_2d5b_82: 	dc.w DPLC_2d5b_267-DPLC_2d5b
0002551A 0000                       DPLC_2d5b_84: 	dc.w DPLC_2d5b_270-DPLC_2d5b
0002551C 0000                       DPLC_2d5b_86: 	dc.w DPLC_2d5b_279-DPLC_2d5b
0002551E 0000                       DPLC_2d5b_88: 	dc.w DPLC_2d5b_284-DPLC_2d5b
00025520 0000                       DPLC_2d5b_8A: 	dc.w DPLC_2d5b_28F-DPLC_2d5b
00025522 0000                       DPLC_2d5b_8C: 	dc.w DPLC_2d5b_294-DPLC_2d5b
00025524 0000                       DPLC_2d5b_8E: 	dc.w DPLC_2d5b_29B-DPLC_2d5b
00025526 0000                       DPLC_2d5b_90: 	dc.w DPLC_2d5b_2A0-DPLC_2d5b
00025528 0000                       DPLC_2d5b_92: 	dc.w DPLC_2d5b_2A7-DPLC_2d5b
0002552A 0000                       DPLC_2d5b_94: 	dc.w DPLC_2d5b_2AC-DPLC_2d5b
0002552C 0000                       DPLC_2d5b_96: 	dc.w DPLC_2d5b_2B3-DPLC_2d5b
0002552E 0000                       DPLC_2d5b_98: 	dc.w DPLC_2d5b_2BA-DPLC_2d5b
00025530 0000                       DPLC_2d5b_9A: 	dc.w DPLC_2d5b_2C5-DPLC_2d5b
00025532 0000                       DPLC_2d5b_9C: 	dc.w DPLC_2d5b_2D0-DPLC_2d5b
00025534 0000                       DPLC_2d5b_9E: 	dc.w DPLC_2d5b_2D5-DPLC_2d5b
00025536 0000                       DPLC_2d5b_A0: 	dc.w DPLC_2d5b_2DC-DPLC_2d5b
00025538 0000                       DPLC_2d5b_A2: 	dc.w DPLC_2d5b_2DF-DPLC_2d5b
0002553A 0000                       DPLC_2d5b_A4: 	dc.w DPLC_2d5b_2E2-DPLC_2d5b
0002553C 0000                       DPLC_2d5b_A6: 	dc.w DPLC_2d5b_2E5-DPLC_2d5b
0002553E 0000                       DPLC_2d5b_A8: 	dc.w DPLC_2d5b_2EA-DPLC_2d5b
00025540 0000                       DPLC_2d5b_AA: 	dc.w DPLC_2d5b_2F1-DPLC_2d5b
00025542 0000                       DPLC_2d5b_AC: 	dc.w DPLC_2d5b_2F8-DPLC_2d5b
00025544 0000                       DPLC_2d5b_AE: 	dc.w DPLC_2d5b_2FF-DPLC_2d5b
00025546 0000                       DPLC_2d5b_B0: 	dc.w DPLC_2d5b_304-DPLC_2d5b
00025548 0000                       DPLC_2d5b_B2: 	dc.w DPLC_2d5b_309-DPLC_2d5b
0002554A 0000                       DPLC_2d5b_B4: 	dc.w DPLC_2d5b_30E-DPLC_2d5b
0002554C 0000                       DPLC_2d5b_B6: 	dc.w DPLC_2d5b_313-DPLC_2d5b
0002554E 00                         DPLC_2d5b_B8: 	dc.b $0
0002554F 02                         DPLC_2d5b_B9: 	dc.b $2
00025550 F000                       	dc.b $F0, $0
00025552 1010                       	dc.b $10, $10
00025554 03                         DPLC_2d5b_BE: 	dc.b $3
00025555 5012                       	dc.b $50, $12
00025557 5018                       	dc.b $50, $18
00025559 201E                       	dc.b $20, $1E
0002555B 03                         DPLC_2d5b_C5: 	dc.b $3
0002555C 5021                       	dc.b $50, $21
0002555E 5018                       	dc.b $50, $18
00025560 201E                       	dc.b $20, $1E
00025562 03                         DPLC_2d5b_CC: 	dc.b $3
00025563 5021                       	dc.b $50, $21
00025565 5018                       	dc.b $50, $18
00025567 2027                       	dc.b $20, $27
00025569 03                         DPLC_2d5b_D3: 	dc.b $3
0002556A 802A                       	dc.b $80, $2A
0002556C 2033                       	dc.b $20, $33
0002556E 2036                       	dc.b $20, $36
00025570 04                         DPLC_2d5b_DA: 	dc.b $4
00025571 7039                       	dc.b $70, $39
00025573 5041                       	dc.b $50, $41
00025575 5047                       	dc.b $50, $47
00025577 104D                       	dc.b $10, $4D
00025579 02                         DPLC_2d5b_E3: 	dc.b $2
0002557A 7039                       	dc.b $70, $39
0002557C B04F                       	dc.b $B0, $4F
0002557E 02                         DPLC_2d5b_E8: 	dc.b $2
0002557F 505B                       	dc.b $50, $5B
00025581 8061                       	dc.b $80, $61
00025583 04                         DPLC_2d5b_ED: 	dc.b $4
00025584 505B                       	dc.b $50, $5B
00025586 506A                       	dc.b $50, $6A
00025588 5070                       	dc.b $50, $70
0002558A 1076                       	dc.b $10, $76
0002558C 02                         DPLC_2d5b_F6: 	dc.b $2
0002558D F4F0                       	dc.b $F4, $F0
0002558F 1500                       	dc.b $15, $0
00025591 03                         DPLC_2d5b_FB: 	dc.b $3
00025592 7039                       	dc.b $70, $39
00025594 3078                       	dc.b $30, $78
00025596 507C                       	dc.b $50, $7C
00025598 05                         DPLC_2d5b_102: 	dc.b $5
00025599 5082                       	dc.b $50, $82
0002559B 5088                       	dc.b $50, $88
0002559D 208E                       	dc.b $20, $8E
0002559F 5091                       	dc.b $50, $91
000255A1 0097                       	dc.b $0, $97
000255A3 06                         DPLC_2d5b_10D: 	dc.b $6
000255A4 5082                       	dc.b $50, $82
000255A6 1098                       	dc.b $10, $98
000255A8 309A                       	dc.b $30, $9A
000255AA 509E                       	dc.b $50, $9E
000255AC 30A4                       	dc.b $30, $A4
000255AE 00A8                       	dc.b $0, $A8
000255B0 04                         DPLC_2d5b_11A: 	dc.b $4
000255B1 50A9                       	dc.b $50, $A9
000255B3 10AF                       	dc.b $10, $AF
000255B5 70B1                       	dc.b $70, $B1
000255B7 20B9                       	dc.b $20, $B9
000255B9 05                         DPLC_2d5b_123: 	dc.b $5
000255BA 50BC                       	dc.b $50, $BC
000255BC 30C2                       	dc.b $30, $C2
000255BE 70C6                       	dc.b $70, $C6
000255C0 20CE                       	dc.b $20, $CE
000255C2 10D1                       	dc.b $10, $D1
000255C4 04                         DPLC_2d5b_12E: 	dc.b $4
000255C5 50BC                       	dc.b $50, $BC
000255C7 10D3                       	dc.b $10, $D3
000255C9 70D5                       	dc.b $70, $D5
000255CB 20DD                       	dc.b $20, $DD
000255CD 05                         DPLC_2d5b_137: 	dc.b $5
000255CE 5082                       	dc.b $50, $82
000255D0 1098                       	dc.b $10, $98
000255D2 008E                       	dc.b $0, $8E
000255D4 70E0                       	dc.b $70, $E0
000255D6 20E8                       	dc.b $20, $E8
000255D8 04                         DPLC_2d5b_142: 	dc.b $4
000255D9 70EB                       	dc.b $70, $EB
000255DB 50F3                       	dc.b $50, $F3
000255DD 10F9                       	dc.b $10, $F9
000255DF 50FB                       	dc.b $50, $FB
000255E1 02                         DPLC_2d5b_14B: 	dc.b $2
000255E2 70EB                       	dc.b $70, $EB
000255E4 B101                       	dc.b $B1, $1
000255E6 02                         DPLC_2d5b_150: 	dc.b $2
000255E7 510D                       	dc.b $51, $D
000255E9 8113                       	dc.b $81, $13
000255EB 04                         DPLC_2d5b_155: 	dc.b $4
000255EC 510D                       	dc.b $51, $D
000255EE 511C                       	dc.b $51, $1C
000255F0 1122                       	dc.b $11, $22
000255F2 5124                       	dc.b $51, $24
000255F4 02                         DPLC_2d5b_15E: 	dc.b $2
000255F5 510D                       	dc.b $51, $D
000255F7 B12A                       	dc.b $B1, $2A
000255F9 03                         DPLC_2d5b_163: 	dc.b $3
000255FA 70EB                       	dc.b $70, $EB
000255FC 0101                       	dc.b $1, $1
000255FE 8136                       	dc.b $81, $36
00025600 06                         DPLC_2d5b_16A: 	dc.b $6
00025601 513F                       	dc.b $51, $3F
00025603 1145                       	dc.b $11, $45
00025605 1147                       	dc.b $11, $47
00025607 8149                       	dc.b $81, $49
00025609 0152                       	dc.b $1, $52
0002560B 0153                       	dc.b $1, $53
0002560D 06                         DPLC_2d5b_177: 	dc.b $6
0002560E 513F                       	dc.b $51, $3F
00025610 2154                       	dc.b $21, $54
00025612 1157                       	dc.b $11, $57
00025614 1159                       	dc.b $11, $59
00025616 815B                       	dc.b $81, $5B
00025618 0152                       	dc.b $1, $52
0002561A 04                         DPLC_2d5b_184: 	dc.b $4
0002561B 5164                       	dc.b $51, $64
0002561D 116A                       	dc.b $11, $6A
0002561F 816C                       	dc.b $81, $6C
00025621 1175                       	dc.b $11, $75
00025623 05                         DPLC_2d5b_18D: 	dc.b $5
00025624 5177                       	dc.b $51, $77
00025626 217D                       	dc.b $21, $7D
00025628 1180                       	dc.b $11, $80
0002562A 7182                       	dc.b $71, $82
0002562C 218A                       	dc.b $21, $8A
0002562E 04                         DPLC_2d5b_198: 	dc.b $4
0002562F 5177                       	dc.b $51, $77
00025631 118D                       	dc.b $11, $8D
00025633 818F                       	dc.b $81, $8F
00025635 1198                       	dc.b $11, $98
00025637 05                         DPLC_2d5b_1A1: 	dc.b $5
00025638 513F                       	dc.b $51, $3F
0002563A 819A                       	dc.b $81, $9A
0002563C 1159                       	dc.b $11, $59
0002563E 11A3                       	dc.b $11, $A3
00025640 0152                       	dc.b $1, $52
00025642 02                         DPLC_2d5b_1AC: 	dc.b $2
00025643 51A5                       	dc.b $51, $A5
00025645 B1AB                       	dc.b $B1, $AB
00025647 02                         DPLC_2d5b_1B1: 	dc.b $2
00025648 505B                       	dc.b $50, $5B
0002564A B1B7                       	dc.b $B1, $B7
0002564C 02                         DPLC_2d5b_1B6: 	dc.b $2
0002564D 51A5                       	dc.b $51, $A5
0002564F B1C3                       	dc.b $B1, $C3
00025651 02                         DPLC_2d5b_1BB: 	dc.b $2
00025652 505B                       	dc.b $50, $5B
00025654 B1CF                       	dc.b $B1, $CF
00025656 04                         DPLC_2d5b_1C0: 	dc.b $4
00025657 51DB                       	dc.b $51, $DB
00025659 11E1                       	dc.b $11, $E1
0002565B B1E3                       	dc.b $B1, $E3
0002565D 01EF                       	dc.b $1, $EF
0002565F 03                         DPLC_2d5b_1C9: 	dc.b $3
00025660 51F0                       	dc.b $51, $F0
00025662 11F6                       	dc.b $11, $F6
00025664 B1F8                       	dc.b $B1, $F8
00025666 04                         DPLC_2d5b_1D0: 	dc.b $4
00025667 51DB                       	dc.b $51, $DB
00025669 1204                       	dc.b $12, $4
0002566B B206                       	dc.b $B2, $6
0002566D 01EF                       	dc.b $1, $EF
0002566F 03                         DPLC_2d5b_1D9: 	dc.b $3
00025670 51F0                       	dc.b $51, $F0
00025672 11F6                       	dc.b $11, $F6
00025674 B212                       	dc.b $B2, $12
00025676 02                         DPLC_2d5b_1E0: 	dc.b $2
00025677 521E                       	dc.b $52, $1E
00025679 B224                       	dc.b $B2, $24
0002567B 02                         DPLC_2d5b_1E5: 	dc.b $2
0002567C 510D                       	dc.b $51, $D
0002567E B230                       	dc.b $B2, $30
00025680 02                         DPLC_2d5b_1EA: 	dc.b $2
00025681 521E                       	dc.b $52, $1E
00025683 B23C                       	dc.b $B2, $3C
00025685 02                         DPLC_2d5b_1EF: 	dc.b $2
00025686 510D                       	dc.b $51, $D
00025688 B248                       	dc.b $B2, $48
0002568A 04                         DPLC_2d5b_1F4: 	dc.b $4
0002568B 5254                       	dc.b $52, $54
0002568D 125A                       	dc.b $12, $5A
0002568F B25C                       	dc.b $B2, $5C
00025691 0268                       	dc.b $2, $68
00025693 02                         DPLC_2d5b_1FD: 	dc.b $2
00025694 7269                       	dc.b $72, $69
00025696 B271                       	dc.b $B2, $71
00025698 04                         DPLC_2d5b_202: 	dc.b $4
00025699 5254                       	dc.b $52, $54
0002569B 127D                       	dc.b $12, $7D
0002569D B27F                       	dc.b $B2, $7F
0002569F 0268                       	dc.b $2, $68
000256A1 02                         DPLC_2d5b_20B: 	dc.b $2
000256A2 7269                       	dc.b $72, $69
000256A4 B28B                       	dc.b $B2, $8B
000256A6 01                         DPLC_2d5b_210: 	dc.b $1
000256A7 F297                       	dc.b $F2, $97
000256A9 01                         DPLC_2d5b_213: 	dc.b $1
000256AA F2A7                       	dc.b $F2, $A7
000256AC 01                         DPLC_2d5b_216: 	dc.b $1
000256AD F2B7                       	dc.b $F2, $B7
000256AF 01                         DPLC_2d5b_219: 	dc.b $1
000256B0 F2C7                       	dc.b $F2, $C7
000256B2 01                         DPLC_2d5b_21C: 	dc.b $1
000256B3 F2D7                       	dc.b $F2, $D7
000256B5 02                         DPLC_2d5b_21F: 	dc.b $2
000256B6 B2E7                       	dc.b $B2, $E7
000256B8 22F3                       	dc.b $22, $F3
000256BA 01                         DPLC_2d5b_224: 	dc.b $1
000256BB F2F6                       	dc.b $F2, $F6
000256BD 02                         DPLC_2d5b_227: 	dc.b $2
000256BE B306                       	dc.b $B3, $6
000256C0 2312                       	dc.b $23, $12
000256C2 01                         DPLC_2d5b_22C: 	dc.b $1
000256C3 F315                       	dc.b $F3, $15
000256C5 02                         DPLC_2d5b_22F: 	dc.b $2
000256C6 5325                       	dc.b $53, $25
000256C8 B32B                       	dc.b $B3, $2B
000256CA 04                         DPLC_2d5b_234: 	dc.b $4
000256CB 5337                       	dc.b $53, $37
000256CD 733D                       	dc.b $73, $3D
000256CF 1345                       	dc.b $13, $45
000256D1 0347                       	dc.b $3, $47
000256D3 02                         DPLC_2d5b_23D: 	dc.b $2
000256D4 D348                       	dc.b $D3, $48
000256D6 34EC                       	dc.b $34, $EC
000256D8 02                         DPLC_2d5b_242: 	dc.b $2
000256D9 F528                       	dc.b $F5, $28
000256DB 0538                       	dc.b $5, $38
000256DD 02                         DPLC_2d5b_247: 	dc.b $2
000256DE F539                       	dc.b $F5, $39
000256E0 0549                       	dc.b $5, $49
000256E2 02                         DPLC_2d5b_24C: 	dc.b $2
000256E3 E356                       	dc.b $E3, $56
000256E5 054A                       	dc.b $5, $4A
000256E7 01                         DPLC_2d5b_251: 	dc.b $1
000256E8 8365                       	dc.b $83, $65
000256EA 03                         DPLC_2d5b_254: 	dc.b $3
000256EB 736E                       	dc.b $73, $6E
000256ED 0376                       	dc.b $3, $76
000256EF 3377                       	dc.b $33, $77
000256F1 02                         DPLC_2d5b_25B: 	dc.b $2
000256F2 E37B                       	dc.b $E3, $7B
000256F4 054A                       	dc.b $5, $4A
000256F6 03                         DPLC_2d5b_260: 	dc.b $3
000256F7 B38A                       	dc.b $B3, $8A
000256F9 1396                       	dc.b $13, $96
000256FB 0398                       	dc.b $3, $98
000256FD 04                         DPLC_2d5b_267: 	dc.b $4
000256FE B399                       	dc.b $B3, $99
00025700 33A5                       	dc.b $33, $A5
00025702 03A9                       	dc.b $3, $A9
00025704 03AA                       	dc.b $3, $AA
00025706 04                         DPLC_2d5b_270: 	dc.b $4
00025707 B3AB                       	dc.b $B3, $AB
00025709 33B7                       	dc.b $33, $B7
0002570B 03BB                       	dc.b $3, $BB
0002570D 03BC                       	dc.b $3, $BC
0002570F 05                         DPLC_2d5b_279: 	dc.b $5
00025710 83BD                       	dc.b $83, $BD
00025712 13C6                       	dc.b $13, $C6
00025714 53C8                       	dc.b $53, $C8
00025716 13CE                       	dc.b $13, $CE
00025718 03D0                       	dc.b $3, $D0
0002571A 05                         DPLC_2d5b_284: 	dc.b $5
0002571B 83D1                       	dc.b $83, $D1
0002571D 13DA                       	dc.b $13, $DA
0002571F 53C8                       	dc.b $53, $C8
00025721 13CE                       	dc.b $13, $CE
00025723 03D0                       	dc.b $3, $D0
00025725 02                         DPLC_2d5b_28F: 	dc.b $2
00025726 83DC                       	dc.b $83, $DC
00025728 73E5                       	dc.b $73, $E5
0002572A 03                         DPLC_2d5b_294: 	dc.b $3
0002572B 83ED                       	dc.b $83, $ED
0002572D 23F6                       	dc.b $23, $F6
0002572F 13F9                       	dc.b $13, $F9
00025731 02                         DPLC_2d5b_29B: 	dc.b $2
00025732 83FB                       	dc.b $83, $FB
00025734 7404                       	dc.b $74, $4
00025736 03                         DPLC_2d5b_2A0: 	dc.b $3
00025737 83ED                       	dc.b $83, $ED
00025739 240C                       	dc.b $24, $C
0002573B 140F                       	dc.b $14, $F
0002573D 02                         DPLC_2d5b_2A7: 	dc.b $2
0002573E 5411                       	dc.b $54, $11
00025740 B417                       	dc.b $B4, $17
00025742 03                         DPLC_2d5b_2AC: 	dc.b $3
00025743 8423                       	dc.b $84, $23
00025745 342C                       	dc.b $34, $2C
00025747 0430                       	dc.b $4, $30
00025749 03                         DPLC_2d5b_2B3: 	dc.b $3
0002574A 7431                       	dc.b $74, $31
0002574C 1439                       	dc.b $14, $39
0002574E B43B                       	dc.b $B4, $3B
00025750 05                         DPLC_2d5b_2BA: 	dc.b $5
00025751 7447                       	dc.b $74, $47
00025753 144F                       	dc.b $14, $4F
00025755 5451                       	dc.b $54, $51
00025757 3457                       	dc.b $34, $57
00025759 045B                       	dc.b $4, $5B
0002575B 05                         DPLC_2d5b_2C5: 	dc.b $5
0002575C 745C                       	dc.b $74, $5C
0002575E 144F                       	dc.b $14, $4F
00025760 5464                       	dc.b $54, $64
00025762 3457                       	dc.b $34, $57
00025764 045B                       	dc.b $4, $5B
00025766 02                         DPLC_2d5b_2D0: 	dc.b $2
00025767 246A                       	dc.b $24, $6A
00025769 F46D                       	dc.b $F4, $6D
0002576B 03                         DPLC_2d5b_2D5: 	dc.b $3
0002576C 247D                       	dc.b $24, $7D
0002576E B480                       	dc.b $B4, $80
00025770 248C                       	dc.b $24, $8C
00025772 01                         DPLC_2d5b_2DC: 	dc.b $1
00025773 B48F                       	dc.b $B4, $8F
00025775 01                         DPLC_2d5b_2DF: 	dc.b $1
00025776 549B                       	dc.b $54, $9B
00025778 01                         DPLC_2d5b_2E2: 	dc.b $1
00025779 14A1                       	dc.b $14, $A1
0002577B 02                         DPLC_2d5b_2E5: 	dc.b $2
0002577C E356                       	dc.b $E3, $56
0002577E 054A                       	dc.b $5, $4A
00025780 03                         DPLC_2d5b_2EA: 	dc.b $3
00025781 736E                       	dc.b $73, $6E
00025783 0376                       	dc.b $3, $76
00025785 3377                       	dc.b $33, $77
00025787 03                         DPLC_2d5b_2F1: 	dc.b $3
00025788 B4A3                       	dc.b $B4, $A3
0002578A 14AF                       	dc.b $14, $AF
0002578C 34B1                       	dc.b $34, $B1
0002578E 03                         DPLC_2d5b_2F8: 	dc.b $3
0002578F 54B5                       	dc.b $54, $B5
00025791 B4BB                       	dc.b $B4, $BB
00025793 1074                       	dc.b $10, $74
00025795 02                         DPLC_2d5b_2FF: 	dc.b $2
00025796 F4C7                       	dc.b $F4, $C7
00025798 24D7                       	dc.b $24, $D7
0002579A 02                         DPLC_2d5b_304: 	dc.b $2
0002579B F4DA                       	dc.b $F4, $DA
0002579D 14EA                       	dc.b $14, $EA
0002579F 02                         DPLC_2d5b_309: 	dc.b $2
000257A0 F502                       	dc.b $F5, $2
000257A2 2512                       	dc.b $25, $12
000257A4 02                         DPLC_2d5b_30E: 	dc.b $2
000257A5 F515                       	dc.b $F5, $15
000257A7 2525                       	dc.b $25, $25
000257A9 02                         DPLC_2d5b_313: 	dc.b $2
000257AA F54B                       	dc.b $F5, $4B
000257AC 755B                       	dc.b $75, $5B
000257AE                            	even
000257AE                            	even
000257AE                            
000257AE                            ; ---------------------------------------------------------------------------
000257AE                            ; Uncompressed graphics	- Sonic
000257AE                            ; ---------------------------------------------------------------------------
000257AE                            Art_Sonic:	incbin	artunc\sonic.bin	; Sonic
000303CE                            		even
000303CE                            ; ---------------------------------------------------------------------------
000303CE                            ; Compressed graphics - various
000303CE                            ; ---------------------------------------------------------------------------
000303CE                            Nem_Smoke:	incbin	artnem\xxxsmoke.bin	; unused smoke
000304D2                            		even
000304D2                            Nem_SyzSparkle:	incbin	artnem\xxxstars.bin	; unused stars
0003050C                            		even
0003050C                            Nem_Shield:	incbin	artnem\shield.bin	; shield
000306A2                            		even
000306A2                            Nem_Stars:	incbin	artnem\invstars.bin	; invincibility stars
000307EA                            		even
000307EA                            Nem_LzSonic:	incbin	artnem\xxxlzson.bin	; unused LZ Sonic holding his breath
000308F4                            		even
000308F4                            Nem_UnkFire:	incbin	artnem\xxxfire.bin	; unused fireball
00030946                            		even
00030946                            Nem_Warp:	incbin	artnem\xxxflash.bin	; unused entry to special stage flash
00030B8E                            		even
00030B8E                            Nem_Goggle:	incbin	artnem\xxxgoggl.bin	; unused goggles
00030D14                            		even
00030D14                            ; ---------------------------------------------------------------------------
00030D14                            ; Sprite mappings - walls of the special stage
00030D14                            ; ---------------------------------------------------------------------------
00030D14                            Map_SSWalls:
00030D14                            	include "_maps\SSwalls.asm"
00030D14                            ; ---------------------------------------------------------------------------
00030D14                            ; Sprite mappings - walls of the special stage
00030D14                            ; ---------------------------------------------------------------------------
00030D14 0000 0000                  		dc.w byte_2C584-Map_SSWalls, byte_2C58A-Map_SSWalls
00030D18 0000 0000                  		dc.w byte_2C590-Map_SSWalls, byte_2C596-Map_SSWalls
00030D1C 0000 0000                  		dc.w byte_2C59C-Map_SSWalls, byte_2C5A2-Map_SSWalls
00030D20 0000 0000                  		dc.w byte_2C5A8-Map_SSWalls, byte_2C5AE-Map_SSWalls
00030D24 0000 0000                  		dc.w byte_2C5B4-Map_SSWalls, byte_2C5BA-Map_SSWalls
00030D28 0000 0000                  		dc.w byte_2C5C0-Map_SSWalls, byte_2C5C6-Map_SSWalls
00030D2C 0000 0000                  		dc.w byte_2C5CC-Map_SSWalls, byte_2C5D2-Map_SSWalls
00030D30 0000 0000                  		dc.w byte_2C5D8-Map_SSWalls, byte_2C5DE-Map_SSWalls
00030D34 01                         byte_2C584:	dc.b 1
00030D35 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00030D3A 01                         byte_2C58A:	dc.b 1
00030D3B F00F 0009 F0               		dc.b $F0, $F, 0, 9, $F0
00030D40 01                         byte_2C590:	dc.b 1
00030D41 F00F 0019 F0               		dc.b $F0, $F, 0, $19, $F0
00030D46 01                         byte_2C596:	dc.b 1
00030D47 F00F 0029 F0               		dc.b $F0, $F, 0, $29, $F0
00030D4C 01                         byte_2C59C:	dc.b 1
00030D4D F00F 0039 F0               		dc.b $F0, $F, 0, $39, $F0
00030D52 01                         byte_2C5A2:	dc.b 1
00030D53 F00F 0049 F0               		dc.b $F0, $F, 0, $49, $F0
00030D58 01                         byte_2C5A8:	dc.b 1
00030D59 F00F 0059 F0               		dc.b $F0, $F, 0, $59, $F0
00030D5E 01                         byte_2C5AE:	dc.b 1
00030D5F F00F 0069 F0               		dc.b $F0, $F, 0, $69, $F0
00030D64 01                         byte_2C5B4:	dc.b 1
00030D65 F00F 0079 F0               		dc.b $F0, $F, 0, $79, $F0
00030D6A 01                         byte_2C5BA:	dc.b 1
00030D6B F00F 0089 F0               		dc.b $F0, $F, 0, $89, $F0
00030D70 01                         byte_2C5C0:	dc.b 1
00030D71 F00F 0099 F0               		dc.b $F0, $F, 0, $99, $F0
00030D76 01                         byte_2C5C6:	dc.b 1
00030D77 F00F 00A9 F0               		dc.b $F0, $F, 0, $A9, $F0
00030D7C 01                         byte_2C5CC:	dc.b 1
00030D7D F00F 00B9 F0               		dc.b $F0, $F, 0, $B9, $F0
00030D82 01                         byte_2C5D2:	dc.b 1
00030D83 F00F 00C9 F0               		dc.b $F0, $F, 0, $C9, $F0
00030D88 01                         byte_2C5D8:	dc.b 1
00030D89 F00F 00D9 F0               		dc.b $F0, $F, 0, $D9, $F0
00030D8E 01                         byte_2C5DE:	dc.b 1
00030D8F F00F 00E9 F0               		dc.b $F0, $F, 0, $E9, $F0
00030D94                            		even
00030D94                            		even
00030D94                            ; ---------------------------------------------------------------------------
00030D94                            ; Compressed graphics - special stage
00030D94                            ; ---------------------------------------------------------------------------
00030D94                            Nem_SSWalls:	incbin	artnem\sswalls.bin	; special stage walls
000316CC                            		even
000316CC                            Eni_SSBg1:	incbin	mapeni\ssbg1.bin	; special stage background (mappings)
0003181A                            		even
0003181A                            Nem_SSBgFish:	incbin	artnem\ssbg1.bin	; special stage birds and fish background
00032CAC                            		even
00032CAC                            Eni_SSBg2:	incbin	mapeni\ssbg2.bin	; special stage background (mappings)
00032FAC                            		even
00032FAC                            Nem_SSBgCloud:	incbin	artnem\ssbg2.bin	; special stage clouds background
000334A0                            		even
000334A0                            Nem_SSGOAL:	incbin	artnem\ssgoal.bin	; special stage GOAL block
0003358E                            		even
0003358E                            Nem_SSRBlock:	incbin	artnem\ssr.bin		; special stage R block
0003365E                            		even
0003365E                            Nem_SS1UpBlock:	incbin	artnem\ss1up.bin	; special stage 1UP block
00033754                            		even
00033754                            Nem_SSEmStars:	incbin	artnem\ssemstar.bin	; special stage stars from a collected emerald
000337B2                            		even
000337B2                            Nem_SSRedWhite:	incbin	artnem\ssredwhi.bin	; special stage red/white block
00033844                            		even
00033844                            Nem_SSZone1:	incbin	artnem\sszone1.bin	; special stage ZONE1 block
00033906                            		even
00033906                            Nem_SSZone2:	incbin	artnem\sszone2.bin	; ZONE2 block
000339D4                            		even
000339D4                            Nem_SSZone3:	incbin	artnem\sszone3.bin	; ZONE3 block
00033AA0                            		even
00033AA0                            Nem_SSZone4:	incbin	artnem\sszone4.bin	; ZONE4 block
00033B68                            		even
00033B68                            Nem_SSZone5:	incbin	artnem\sszone5.bin	; ZONE5 block
00033C32                            		even
00033C32                            Nem_SSZone6:	incbin	artnem\sszone6.bin	; ZONE6 block
00033D02                            		even
00033D02                            Nem_SSUpDown:	incbin	artnem\ssupdown.bin	; special stage UP/DOWN block
00033EF6                            		even
00033EF6                            Nem_SSEmerald:	incbin	artnem\ssemeral.bin	; special stage chaos emeralds
0003405E                            		even
0003405E                            Nem_SSGhost:	incbin	artnem\ssghost.bin	; special stage ghost block
0003410E                            		even
0003410E                            Nem_SSWBlock:	incbin	artnem\ssw.bin		; special stage W block
000341E8                            		even
000341E8                            Nem_SSGlass:	incbin	artnem\ssglass.bin	; special stage destroyable glass block
0003426C                            		even
0003426C                            Nem_ResultEm:	incbin	artnem\ssresems.bin	; chaos emeralds on special stage results screen
000343EA                            		even
000343EA                            ; ---------------------------------------------------------------------------
000343EA                            ; Compressed graphics - GHZ stuff
000343EA                            ; ---------------------------------------------------------------------------
000343EA                            Nem_Stalk:	incbin	artnem\ghzstalk.bin	; GHZ flower stalk
00034434                            		even
00034434                            Nem_Swing:	incbin	artnem\ghzswing.bin	; GHZ swinging platform
0003454E                            		even
0003454E                            Nem_Bridge:	incbin	artnem\ghzbridg.bin	; GHZ bridge
0003463A                            		even
0003463A                            Nem_GhzUnkBlock:incbin	artnem\xxxghzbl.bin	; unused GHZ block
00034682                            		even
00034682                            Nem_Ball:	incbin	artnem\ghzball.bin	; GHZ giant ball
00034820                            		even
00034820                            Nem_Spikes:	incbin	artnem\spikes.bin	; spikes
0003489C                            		even
0003489C                            Nem_GhzLog:	incbin	artnem\xxxghzlo.bin	; unused GHZ log
00034AB0                            		even
00034AB0                            Nem_SpikePole:	incbin	artnem\ghzlog.bin	; GHZ spiked log
00034BDC                            		even
00034BDC                            Nem_PplRock:	incbin	artnem\ghzrock.bin	; GHZ purple rock
00034D0A                            		even
00034D0A                            Nem_GhzWall1:	incbin	artnem\ghzwall1.bin	; GHZ destroyable wall
00034DA8                            		even
00034DA8                            Nem_GhzWall2:	incbin	artnem\ghzwall2.bin	; GHZ normal wall
00034E08                            		even
00034E08                            ; ---------------------------------------------------------------------------
00034E08                            ; Compressed graphics - LZ stuff
00034E08                            ; ---------------------------------------------------------------------------
00034E08                            Nem_Water:	incbin	artnem\lzwater.bin	; LZ water surface
00034F2C                            		even
00034F2C                            Nem_Splash:	incbin	artnem\lzsplash.bin	; LZ waterfalls and splashes
00035720                            		even
00035720                            Nem_LzSpikeBall:incbin	artnem\lzspball.bin	; LZ spiked ball on chain
000358A0                            		even
000358A0                            Nem_FlapDoor:	incbin	artnem\lzflapdo.bin	; LZ flapping door
00035A0A                            		even
00035A0A                            Nem_Bubbles:	incbin	artnem\lzbubble.bin	; LZ bubbles and countdown numbers
00036060                            		even
00036060                            Nem_LzBlock3:	incbin	artnem\lzblock3.bin	; LZ 32x16 block
00036116                            		even
00036116                            Nem_LzDoor1:	incbin	artnem\lzvdoor.bin	; LZ vertical door
000361B8                            		even
000361B8                            Nem_Harpoon:	incbin	artnem\lzharpoo.bin	; LZ harpoon
00036314                            		even
00036314                            Nem_LzPole:	incbin	artnem\lzpole.bin	; LZ pole that breaks
00036378                            		even
00036378                            Nem_LzDoor2:	incbin	artnem\lzhdoor.bin	; LZ large horizontal door
000364CA                            		even
000364CA                            Nem_LzWheel:	incbin	artnem\lzwheel.bin	; LZ wheel from corner of conveyor belt
000369AC                            		even
000369AC                            Nem_Gargoyle:	incbin	artnem\lzgargoy.bin	; LZ gargoyle head and spitting fire
00036B1C                            		even
00036B1C                            Nem_LzBlock2:	incbin	artnem\lzblock2.bin	; LZ blocks
00036DD4                            		even
00036DD4                            Nem_LzPlatfm:	incbin	artnem\lzptform.bin	; LZ rising platforms
00036F0C                            		even
00036F0C                            Nem_Cork:	incbin	artnem\lzcork.bin	; LZ cork block
00037036                            		even
00037036                            Nem_LzBlock1:	incbin	artnem\lzblock1.bin	; LZ 32x32 block
00037146                            		even
00037146                            ; ---------------------------------------------------------------------------
00037146                            ; Compressed graphics - MZ stuff
00037146                            ; ---------------------------------------------------------------------------
00037146                            Nem_MzMetal:	incbin	artnem\mzmetal.bin	; MZ metal blocks
000373D4                            		even
000373D4                            Nem_MzSwitch:	incbin	artnem\mzswitch.bin	; MZ switch
00037492                            		even
00037492                            Nem_MzGlass:	incbin	artnem\mzglassy.bin	; MZ green glassy block
0003754A                            		even
0003754A                            Nem_GhzGrass:	incbin	artnem\xxxgrass.bin	; unused grass (GHZ or MZ?)
0003759E                            		even
0003759E                            Nem_MzFire:	incbin	artnem\mzfire.bin	; MZ fireballs
00037870 00                         		even
00037870                            Nem_Lava:	incbin	artnem\mzlava.bin	; MZ lava
00038186                            		even
00038186                            Nem_MzBlock:	incbin	artnem\mzblock.bin	; MZ green pushable block
000382EA                            		even
000382EA                            Nem_MzUnkBlock:	incbin	artnem\xxxmzblo.bin	; MZ unused background block
00038372                            		even
00038372                            ; ---------------------------------------------------------------------------
00038372                            ; Compressed graphics - SLZ stuff
00038372                            ; ---------------------------------------------------------------------------
00038372                            Nem_Seesaw:	incbin	artnem\slzseesa.bin	; SLZ seesaw
000385AE                            		even
000385AE                            Nem_SlzSpike:	incbin	artnem\slzspike.bin	; SLZ spikeball that sits on a seesaw
000386F4                            		even
000386F4                            Nem_Fan:	incbin	artnem\slzfan.bin	; SLZ fan
00038938                            		even
00038938                            Nem_SlzWall:	incbin	artnem\slzwall.bin	; SLZ smashable wall
0003899A                            		even
0003899A                            Nem_Pylon:	incbin	artnem\slzpylon.bin	; SLZ foreground pylon
00038A7C                            		even
00038A7C                            Nem_SlzSwing:	incbin	artnem\slzswing.bin	; SLZ swinging platform
00038C5E                            		even
00038C5E                            Nem_SlzBlock:	incbin	artnem\slzblock.bin	; SLZ 32x32 block
00038D6A                            		even
00038D6A                            Nem_SlzCannon:	incbin	artnem\slzcanno.bin	; SLZ fireball launcher cannon
00038E0E                            		even
00038E0E                            ; ---------------------------------------------------------------------------
00038E0E                            ; Compressed graphics - SYZ stuff
00038E0E                            ; ---------------------------------------------------------------------------
00038E0E                            Nem_Bumper:	incbin	artnem\syzbumpe.bin	; SYZ bumper
00038F78                            		even
00038F78                            Nem_SyzSpike2:	incbin	artnem\syzsspik.bin	; SYZ small spikeball
00038FDA                            		even
00038FDA                            Nem_LzSwitch:	incbin	artnem\switch.bin	; LZ/SYZ/SBZ switch
000390BC                            		even
000390BC                            Nem_SyzSpike1:	incbin	artnem\syzlspik.bin	; SYZ/SBZ large spikeball
0003934A                            		even
0003934A                            ; ---------------------------------------------------------------------------
0003934A                            ; Compressed graphics - SBZ stuff
0003934A                            ; ---------------------------------------------------------------------------
0003934A                            Nem_SbzWheel1:	incbin	artnem\sbzwhee1.bin	; SBZ spot on rotating wheel that Sonic runs around
0003939E                            		even
0003939E                            Nem_SbzWheel2:	incbin	artnem\sbzwhee2.bin	; SBZ wheel that grabs Sonic
0003963A                            		even
0003963A                            Nem_Cutter:	incbin	artnem\sbzcutte.bin	; SBZ pizza cutter
0003983E                            		even
0003983E                            Nem_Stomper:	incbin	artnem\sbzstomp.bin	; SBZ stomper
000399DC                            		even
000399DC                            Nem_SpinPform:	incbin	artnem\sbzpform.bin	; SBZ spinning platform
00039D0C                            		even
00039D0C                            Nem_TrapDoor:	incbin	artnem\sbztrapd.bin	; SBZ trapdoor
00039EEA                            		even
00039EEA                            Nem_SbzFloor:	incbin	artnem\sbzfloor.bin	; SBZ collapsing floor
00039F42                            		even
00039F42                            Nem_Electric:	incbin	artnem\sbzshock.bin	; SBZ electric shock orb
0003A10C 00                         		even
0003A10C                            Nem_SbzBlock:	incbin	artnem\sbzvanis.bin	; SBZ vanishing block
0003A20A                            		even
0003A20A                            Nem_FlamePipe:	incbin	artnem\sbzflame.bin	; SBZ flaming pipe
0003A396                            		even
0003A396                            Nem_SbzDoor1:	incbin	artnem\sbzvdoor.bin	; SBZ small vertical door
0003A3E6                            		even
0003A3E6                            Nem_SlideFloor:	incbin	artnem\sbzslide.bin	; SBZ floor that slides away
0003A43E                            		even
0003A43E                            Nem_SbzDoor2:	incbin	artnem\sbzhdoor.bin	; SBZ large horizontal door
0003A53A                            		even
0003A53A                            Nem_Girder:	incbin	artnem\sbzgirde.bin	; SBZ crushing girder
0003A650                            		even
0003A650                            ; ---------------------------------------------------------------------------
0003A650                            ; Compressed graphics - enemies
0003A650                            ; ---------------------------------------------------------------------------
0003A650                            Nem_BallHog:	incbin	artnem\ballhog.bin	; ball hog
0003AA10                            		even
0003AA10                            Nem_Crabmeat:	incbin	artnem\crabmeat.bin	; crabmeat
0003ABBA 00                         		even
0003ABBA                            Nem_Buzz:	incbin	artnem\buzzbomb.bin	; buzz bomber
0003AF7C 00                         		even
0003AF7C                            Nem_UnkExplode:	incbin	artnem\xxxexplo.bin	; unused explosion
0003B164                            		even
0003B164                            Nem_Burrobot:	incbin	artnem\burrobot.bin	; burrobot
0003B31C 00                         		even
0003B31C                            Nem_Chopper:	incbin	artnem\chopper.bin	; chopper
0003B466                            		even
0003B466                            Nem_Jaws:	incbin	artnem\jaws.bin		; jaws
0003B6F0                            		even
0003B6F0                            Nem_Roller:	incbin	artnem\roller.bin	; roller
0003BD14                            		even
0003BD14                            Nem_Motobug:	incbin	artnem\motobug.bin	; moto bug
0003BF0A                            		even
0003BF0A                            Nem_Newtron:	incbin	artnem\newtron.bin	; newtron
0003C528                            		even
0003C528                            Nem_Yadrin:	incbin	artnem\yadrin.bin	; yadrin
0003C928 00                         		even
0003C928                            Nem_Basaran:	incbin	artnem\basaran.bin	; basaran
0003CC24                            		even
0003CC24                            Nem_Splats:	incbin	artnem\splats.bin	; splats
0003CE6C                            		even
0003CE6C                            Nem_Bomb:	incbin	artnem\bomb.bin		; bomb
0003D104                            		even
0003D104                            Nem_Orbinaut:	incbin	artnem\orbinaut.bin	; orbinaut
0003D2E2                            		even
0003D2E2                            Nem_Cater:	incbin	artnem\caterkil.bin	; caterkiller
0003D470                            		even
0003D470                            ; ---------------------------------------------------------------------------
0003D470                            ; Compressed graphics - various
0003D470                            ; ---------------------------------------------------------------------------
0003D470                            Nem_TitleCard:	incbin	artnem\ttlcards.bin	; title cards
0003DA7E                            		even
0003DA7E                            Nem_Hud:	incbin	artnem\hud.bin		; HUD (rings, time, score)
0003DB74                            		even
0003DB74                            Nem_Lives:	incbin	artnem\lifeicon.bin	; life counter icon
0003DC7A                            		even
0003DC7A                            Nem_Ring:	incbin	artnem\rings.bin	; rings
0003DD6E                            		even
0003DD6E                            Nem_Monitors:	incbin	artnem\monitors.bin	; monitors
0003E2B2                            		even
0003E2B2                            Nem_Explode:	incbin	artnem\explosio.bin	; explosion
0003E918                            		even
0003E918                            Nem_Points:	incbin	artnem\points.bin	; points from destroyed enemy or object
0003E9C8                            		even
0003E9C8                            Nem_GameOver:	incbin	artnem\gameover.bin	; game over / time over
0003EB5A                            		even
0003EB5A                            Nem_HSpring:	incbin	artnem\springh.bin	; horizontal spring
0003EC5C                            		even
0003EC5C                            Nem_VSpring:	incbin	artnem\springv.bin	; vertical spring
0003ED38                            		even
0003ED38                            Nem_SignPost:	incbin	artnem\signpost.bin	; end of level signpost
0003F1B4                            		even
0003F1B4                            Nem_Lamp:	incbin	artnem\lamppost.bin	; lamppost
0003F274                            		even
0003F274                            Nem_BigFlash:	incbin	artnem\rngflash.bin	; flash from giant ring
0003F3E8                            		even
0003F3E8                            Nem_Bonus:	incbin	artnem\bonus.bin	; hidden bonuses at end of a level
0003F6EA                            		even
0003F6EA                            ; ---------------------------------------------------------------------------
0003F6EA                            ; Compressed graphics - continue screen
0003F6EA                            ; ---------------------------------------------------------------------------
0003F6EA                            Nem_ContSonic:	incbin	artnem\cntsonic.bin	; Sonic on continue screen
0003F99A                            		even
0003F99A                            Nem_MiniSonic:	incbin	artnem\cntother.bin	; mini Sonic and text on continue screen
0003FBD4                            		even
0003FBD4                            ; ---------------------------------------------------------------------------
0003FBD4                            ; Compressed graphics - animals
0003FBD4                            ; ---------------------------------------------------------------------------
0003FBD4                            Nem_Rabbit:	incbin	artnem\rabbit.bin	; rabbit
0003FD2C                            		even
0003FD2C                            Nem_Chicken:	incbin	artnem\chicken.bin	; chicken
0003FE88                            		even
0003FE88                            Nem_BlackBird:	incbin	artnem\blackbrd.bin	; blackbird
00040004                            		even
00040004                            Nem_Seal:	incbin	artnem\seal.bin		; seal
00040120                            		even
00040120                            Nem_Pig:	incbin	artnem\pig.bin		; pig
00040256                            		even
00040256                            Nem_Flicky:	incbin	artnem\flicky.bin	; flicky
00040390                            		even
00040390                            Nem_Squirrel:	incbin	artnem\squirrel.bin	; squirrel
000404EC                            		even
000404EC                            ; ---------------------------------------------------------------------------
000404EC                            ; Compressed graphics - primary patterns and block mappings
000404EC                            ; ---------------------------------------------------------------------------
000404EC                            Blk16_GHZ:	incbin	map16\ghz.bin
00040E00                            		even
00040E00                            Nem_GHZ_1st:	incbin	artnem\8x8ghz1.bin	; GHZ primary patterns
0004270E                            		even
0004270E                            Nem_GHZ_2nd:	incbin	artnem\8x8ghz2.bin	; GHZ secondary patterns
00043A8E                            		even
00043A8E                            Blk256_GHZ:	incbin	map256\ghz.bin
00045D8C                            		even
00045D8C                            Blk16_LZ:	incbin	map16\lz.bin
000464C6                            		even
000464C6                            Nem_LZ:		incbin	artnem\8x8lz.bin	; LZ primary patterns
000488C8                            		even
000488C8                            Blk256_LZ:	incbin	map256\lz.bin
0004B248                            		even
0004B248                            Blk16_MZ:	incbin	map16\mz.bin
0004B9A4                            		even
0004B9A4                            Nem_MZ:		incbin	artnem\8x8mz.bin	; MZ primary patterns
0004E22C                            		even
0004E22C                            Blk256_MZ:	incbin	map256\mz.bin
0004F9B0                            		even
0004F9B0                            Blk16_SLZ:	incbin	map16\slz.bin
0005007A                            		even
0005007A                            Nem_SLZ:	incbin	artnem\8x8slz.bin	; SLZ primary patterns
00051FCE                            		even
00051FCE                            Blk256_SLZ:	incbin	map256\slz.bin
00052648                            		even
00052648                            Blk16_SYZ:	incbin	map16\syz.bin
0005326E                            		even
0005326E                            Nem_SYZ:	incbin	artnem\8x8syz.bin	; SYZ primary patterns
00057800                            		even
00057800                            Blk256_SYZ:	incbin	map256\syz.bin
0005985C                            		even
0005985C                            Blk16_SBZ:	incbin	map16\sbz.bin
0005A7A4                            		even
0005A7A4                            Nem_SBZ:	incbin	artnem\8x8sbz.bin	; SBZ primary patterns
0005D168                            		even
0005D168                            Blk256_SBZ:	incbin	map256\sbz.bin
0005FC5E                            		even
0005FC5E                            ; ---------------------------------------------------------------------------
0005FC5E                            ; Compressed graphics - bosses and ending sequence
0005FC5E                            ; ---------------------------------------------------------------------------
0005FC5E                            Nem_Eggman:	incbin	artnem\bossmain.bin	; boss main patterns
00060478 00                         		even
00060478                            Nem_Tetoboss:	incbin	artnem\TetoBoss.bin	; boss main patterns
00060AC6                            		even
00060AC6                            Nem_Peartobomb:	incbin	artnem\peartobomb.bin	; boss main patterns
00060B40                            		even
00060B40                            Nem_Weapons:	incbin	artnem\bossxtra.bin	; boss add-ons and weapons
00060E2A                            		even
00060E2A                            Nem_Prison:	incbin	artnem\prison.bin	; prison capsule
000616AE                            		even
000616AE                            Nem_Sbz2Eggman:	incbin	artnem\sbz2boss.bin	; Eggman in SBZ2 and FZ
00062404 00                         		even
00062404                            Nem_FzBoss:	incbin	artnem\fzboss.bin	; FZ boss
00062B6C                            		even
00062B6C                            Nem_FzEggman:	incbin	artnem\fzboss2.bin	; Eggman after the FZ boss
000630EC                            		even
000630EC                            Nem_Exhaust:	incbin	artnem\bossflam.bin	; boss exhaust flame
0006320C                            		even
0006320C                            Nem_EndEm:	incbin	artnem\endemera.bin	; ending sequence chaos emeralds
0006340A                            		even
0006340A                            Nem_EndSonic:	incbin	artnem\endsonic.bin	; ending sequence Sonic
000645E8                            		even
000645E8                            Nem_TryAgain:	incbin	artnem\tryagain.bin	; ending "try again" screen
00064F2C                            		even
00064F2C                            Nem_EndEggman:	incbin	artnem\xxxend.bin	; unused boss sequence on ending
00065302                            		even
00065302                            Kos_EndFlowers:	incbin	artkos\flowers.bin	; ending sequence animated flowers
00065892                            		even
00065892                            Nem_EndFlower:	incbin	artnem\endflowe.bin	; ending sequence flowers
00065B1A                            		even
00065B1A                            Nem_CreditText:	incbin	artnem\credits.bin	; credits alphabet
00066108 00                         		even
00066108                            Nem_EndStH:	incbin	artnem\endtext.bin	; ending sequence "Sonic the Hedgehog" text
00066390                            		even
00066390                            		incbin	misc\padding2.bin
00066494                            		even
00066494                            ; ---------------------------------------------------------------------------
00066494                            ; Collision data
00066494                            ; ---------------------------------------------------------------------------
00066494                            AngleMap:	incbin	collide\anglemap.bin	; floor angle map
00066594                            		even
00066594                            CollArray1:	incbin	collide\carray_n.bin	; normal collision array
00067594                            		even
00067594                            CollArray2:	incbin	collide\carray_r.bin	; rotated collision array
00068594                            		even
00068594                            Col_GHZ:	incbin	collide\ghz.bin		; GHZ index
0006874C 00                         		even
0006874C                            Col_LZ:		incbin	collide\lz.bin		; LZ index
000688B4                            		even
000688B4                            Col_MZ:		incbin	collide\mz.bin		; MZ index
00068A44                            		even
00068A44                            Col_SLZ:	incbin	collide\slz.bin		; SLZ index
00068C38                            		even
00068C38                            Col_SYZ:	incbin	collide\syz.bin		; SYZ index
00068E3E                            		even
00068E3E                            Col_SBZ:	incbin	collide\sbz.bin		; SBZ index
000690DC                            		even
000690DC                            ; ---------------------------------------------------------------------------
000690DC                            ; Special layouts
000690DC                            ; ---------------------------------------------------------------------------
000690DC                            SS_1:		incbin	sslayout\1.bin
00069356                            		even
00069356                            SS_2:		incbin	sslayout\2.bin
00069768                            		even
00069768                            SS_3:		incbin	sslayout\3.bin
00069AC4                            		even
00069AC4                            SS_4:		incbin	sslayout\4.bin
00069F9E                            		even
00069F9E                            SS_5:		incbin	sslayout\5.bin
0006A470                            		even
0006A470                            SS_6:		incbin	sslayout\6.bin
0006A780                            		even
0006A780                            ; ---------------------------------------------------------------------------
0006A780                            ; Animated uncompressed graphics
0006A780                            ; ---------------------------------------------------------------------------
0006A780                            Art_GhzWater:	incbin	artunc\ghzwater.bin	; GHZ waterfall
0006A980                            		even
0006A980                            Art_GhzFlower1:	incbin	artunc\ghzflowl.bin	; GHZ large flower
0006AD80                            		even
0006AD80                            Art_GhzFlower2:	incbin	artunc\ghzflows.bin	; GHZ small flower
0006B200                            		even
0006B200                            Art_MzLava1:	incbin	artunc\mzlava1.bin	; MZ lava surface
0006B500                            		even
0006B500                            Art_MzLava2:	incbin	artunc\mzlava2.bin	; MZ lava
0006BB00                            		even
0006BB00                            Art_MzTorch:	incbin	artunc\mztorch.bin	; MZ torch in background
0006BE00                            		even
0006BE00                            Art_SbzSmoke:	incbin	artunc\sbzsmoke.bin	; SBZ smoke in background
0006C880                            		even
0006C880                            
0006C880                            ; ---------------------------------------------------------------------------
0006C880                            ; Level	layout index
0006C880                            ; ---------------------------------------------------------------------------
0006C880 0000 0000 0000             Level_Index:	dc.w Level_GHZ1-Level_Index, Level_GHZbg-Level_Index, byte_68D70-Level_Index
0006C886 0000 0000 0000             		dc.w Level_GHZ2-Level_Index, Level_GHZbg-Level_Index, byte_68E3C-Level_Index
0006C88C 0000 0000 0000             		dc.w Level_GHZ3-Level_Index, Level_GHZbg-Level_Index, byte_68F84-Level_Index
0006C892 0000 0000 0000             		dc.w byte_68F88-Level_Index, byte_68F88-Level_Index, byte_68F88-Level_Index
0006C898 0000 0000 0000             		dc.w Level_LZ1-Level_Index, Level_LZbg-Level_Index, byte_69190-Level_Index
0006C89E 0000 0000 0000             		dc.w Level_LZ2-Level_Index, Level_LZbg-Level_Index, byte_6922E-Level_Index
0006C8A4 0000 0000 0000             		dc.w Level_LZ3-Level_Index, Level_LZbg-Level_Index, byte_6934C-Level_Index
0006C8AA 0000 0000 0000             		dc.w Level_SBZ3-Level_Index, Level_LZbg-Level_Index, byte_6940A-Level_Index
0006C8B0 0000 0000 0000             		dc.w Level_MZ1-Level_Index, Level_MZ1bg-Level_Index, Level_MZ1-Level_Index
0006C8B6 0000 0000 0000             		dc.w Level_MZ2-Level_Index, Level_MZ2bg-Level_Index, byte_6965C-Level_Index
0006C8BC 0000 0000 0000             		dc.w Level_MZ3-Level_Index, Level_MZ3bg-Level_Index, byte_697E6-Level_Index
0006C8C2 0000 0000 0000             		dc.w byte_697EA-Level_Index, byte_697EA-Level_Index, byte_697EA-Level_Index
0006C8C8 0000 0000 0000             		dc.w Level_SLZ1-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0006C8CE 0000 0000 0000             		dc.w Level_SLZ2-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0006C8D4 0000 0000 0000             		dc.w Level_SLZ3-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0006C8DA 0000 0000 0000             		dc.w byte_69B84-Level_Index, byte_69B84-Level_Index, byte_69B84-Level_Index
0006C8E0 0000 0000 0000             		dc.w Level_SYZ1-Level_Index, Level_SYZbg-Level_Index, byte_69C7E-Level_Index
0006C8E6 0000 0000 0000             		dc.w Level_SYZ2-Level_Index, Level_SYZbg-Level_Index, byte_69D86-Level_Index
0006C8EC 0000 0000 0000             		dc.w Level_SYZ3-Level_Index, Level_SYZbg-Level_Index, byte_69EE4-Level_Index
0006C8F2 0000 0000 0000             		dc.w byte_69EE8-Level_Index, byte_69EE8-Level_Index, byte_69EE8-Level_Index
0006C8F8 0000 0000 0000             		dc.w Level_SBZ1-Level_Index, Level_SBZ1bg-Level_Index, Level_SBZ1bg-Level_Index
0006C8FE 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, Level_SBZ2bg-Level_Index
0006C904 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, byte_6A2F8-Level_Index
0006C90A 0000 0000 0000             		dc.w byte_6A2FC-Level_Index, byte_6A2FC-Level_Index, byte_6A2FC-Level_Index
0006C910 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
0006C916 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
0006C91C 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
0006C922 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
0006C928                            
0006C928                            Level_GHZ1:	incbin	levels\ghz1.bin
0006CA1A                            		even
0006CA1A 0000 0000                  byte_68D70:	dc.b 0,	0, 0, 0
0006CA1E                            Level_GHZ2:	incbin	levels\ghz2.bin
0006CAE6                            		even
0006CAE6 0000 0000                  byte_68E3C:	dc.b 0,	0, 0, 0
0006CAEA                            Level_GHZ3:	incbin	levels\ghz3.bin
0006CC0C                            		even
0006CC0C                            Level_GHZbg:	incbin	levels\ghzbg.bin
0006CC2E                            		even
0006CC2E 0000 0000                  byte_68F84:	dc.b 0,	0, 0, 0
0006CC32 0000 0000                  byte_68F88:	dc.b 0,	0, 0, 0
0006CC36                            
0006CC36                            Level_LZ1:	incbin	levels\lz1.bin
0006CD38                            		even
0006CD38                            Level_LZbg:	incbin	levels\lzbg.bin
0006CE3A                            		even
0006CE3A 0000 0000                  byte_69190:	dc.b 0,	0, 0, 0
0006CE3E                            Level_LZ2:	incbin	levels\lz2.bin
0006CED8                            		even
0006CED8 0000 0000                  byte_6922E:	dc.b 0,	0, 0, 0
0006CEDC                            Level_LZ3:	incbin	levels\lz3.bin
0006CFF6                            		even
0006CFF6 0000 0000                  byte_6934C:	dc.b 0,	0, 0, 0
0006CFFA                            Level_SBZ3:	incbin	levels\sbz3.bin
0006D0B4                            		even
0006D0B4 0000 0000                  byte_6940A:	dc.b 0,	0, 0, 0
0006D0B8                            
0006D0B8                            Level_MZ1:	incbin	levels\mz1.bin
0006D156                            		even
0006D156                            Level_MZ1bg:	incbin	levels\mz1bg.bin
0006D1D0                            		even
0006D1D0                            Level_MZ2:	incbin	levels\mz2.bin
0006D274                            		even
0006D274                            Level_MZ2bg:	incbin	levels\mz2bg.bin
0006D306                            		even
0006D306 0000 0000                  byte_6965C:	dc.b 0,	0, 0, 0
0006D30A                            Level_MZ3:	incbin	levels\mz3.bin
0006D3EC                            		even
0006D3EC                            Level_MZ3bg:	incbin	levels\mz3bg.bin
0006D490 00                         		even
0006D490 0000 0000                  byte_697E6:	dc.b 0,	0, 0, 0
0006D494 0000 0000                  byte_697EA:	dc.b 0,	0, 0, 0
0006D498                            
0006D498                            Level_SLZ1:	incbin	levels\slz1.bin
0006D5AA                            		even
0006D5AA                            Level_SLZbg:	incbin	levels\slzbg.bin
0006D5C4                            		even
0006D5C4                            Level_SLZ2:	incbin	levels\slz2.bin
0006D6B4                            		even
0006D6B4                            Level_SLZ3:	incbin	levels\slz3.bin
0006D7CE                            		even
0006D7CE 0000 0000                  byte_69B84:	dc.b 0,	0, 0, 0
0006D7D2                            
0006D7D2                            Level_SYZ1:	incbin	levels\syz1.bin
0006D88E 00                         		even
0006D88E                            Level_SYZbg:	incbin	levels\syzbg.bin
0006D8C8                            		even
0006D8C8 0000 0000                  byte_69C7E:	dc.b 0,	0, 0, 0
0006D8CC                            Level_SYZ2:	incbin	levels\syz2.bin
0006D9D0                            		even
0006D9D0 0000 0000                  byte_69D86:	dc.b 0,	0, 0, 0
0006D9D4                            Level_SYZ3:	incbin	levels\syz3.bin
0006DB2E 00                         		even
0006DB2E 0000 0000                  byte_69EE4:	dc.b 0,	0, 0, 0
0006DB32 0000 0000                  byte_69EE8:	dc.b 0,	0, 0, 0
0006DB36                            
0006DB36                            Level_SBZ1:	incbin	levels\sbz1.bin
0006DC58                            		even
0006DC58                            Level_SBZ1bg:	incbin	levels\sbz1bg.bin
0006DC96                            		even
0006DC96                            Level_SBZ2:	incbin	levels\sbz2.bin
0006DDD8                            		even
0006DDD8                            Level_SBZ2bg:	incbin	levels\sbz2bg.bin
0006DF42                            		even
0006DF42 0000 0000                  byte_6A2F8:	dc.b 0,	0, 0, 0
0006DF46 0000 0000                  byte_6A2FC:	dc.b 0,	0, 0, 0
0006DF4A                            Level_End:	incbin	levels\ending.bin
0006DF7A 00                         		even
0006DF7A 0000 0000                  byte_6A320:	dc.b 0,	0, 0, 0
0006DF7E                            
0006DF7E                            ; ---------------------------------------------------------------------------
0006DF7E                            ; Animated uncompressed giant ring graphics
0006DF7E                            ; ---------------------------------------------------------------------------
0006DF7E                            Art_BigRing:	incbin	artunc\bigring.bin
0006EBBE                            		even
0006EBBE                            
0006EBBE                            		incbin	misc\padding3.bin
0006EC5A                            		even
0006EC5A                            
0006EC5A                            ; ---------------------------------------------------------------------------
0006EC5A                            ; Sprite locations index
0006EC5A                            ; ---------------------------------------------------------------------------
0006EC5A 0000 0000                  ObjPos_Index:	dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EC5E 0000 0000                  		dc.w ObjPos_GHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EC62 0000 0000                  		dc.w ObjPos_GHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EC66 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EC6A 0000 0000                  		dc.w ObjPos_LZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EC6E 0000 0000                  		dc.w ObjPos_LZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EC72 0000 0000                  		dc.w ObjPos_LZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EC76 0000 0000                  		dc.w ObjPos_SBZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EC7A 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EC7E 0000 0000                  		dc.w ObjPos_MZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EC82 0000 0000                  		dc.w ObjPos_MZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EC86 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EC8A 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EC8E 0000 0000                  		dc.w ObjPos_SLZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EC92 0000 0000                  		dc.w ObjPos_SLZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EC96 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EC9A 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EC9E 0000 0000                  		dc.w ObjPos_SYZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006ECA2 0000 0000                  		dc.w ObjPos_SYZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006ECA6 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006ECAA 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006ECAE 0000 0000                  		dc.w ObjPos_SBZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006ECB2 0000 0000                  		dc.w ObjPos_FZ-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006ECB6 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006ECBA 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006ECBE 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006ECC2 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006ECC6 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006ECCA 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
0006ECCE 0000 0000                  		dc.w ObjPos_LZ2pf1-ObjPos_Index, ObjPos_LZ2pf2-ObjPos_Index
0006ECD2 0000 0000                  		dc.w ObjPos_LZ3pf1-ObjPos_Index, ObjPos_LZ3pf2-ObjPos_Index
0006ECD6 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
0006ECDA 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
0006ECDE 0000 0000                  		dc.w ObjPos_SBZ1pf3-ObjPos_Index, ObjPos_SBZ1pf4-ObjPos_Index
0006ECE2 0000 0000                  		dc.w ObjPos_SBZ1pf5-ObjPos_Index, ObjPos_SBZ1pf6-ObjPos_Index
0006ECE6 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
0006ECEA FFFF 0000 0000             		dc.b $FF, $FF, 0, 0, 0,	0
0006ECF0                            ObjPos_GHZ1:	incbin	objpos\ghz1.bin
0006F53C                            		even
0006F53C                            ObjPos_GHZ2:	incbin	objpos\ghz2.bin
0006F5F0                            		even
0006F5F0                            ObjPos_GHZ3:	incbin	objpos\ghz3.bin
00070034                            		even
00070034                            ObjPos_LZ1:	incbin	objpos\lz1.bin
000703DC                            		even
000703DC                            ObjPos_LZ2:	incbin	objpos\lz2.bin
00070712                            		even
00070712                            ObjPos_LZ3:	incbin	objpos\lz3.bin
00070C28                            		even
00070C28                            ObjPos_SBZ3:	incbin	objpos\sbz3.bin
000710C0                            		even
000710C0                            ObjPos_LZ1pf1:	incbin	objpos\lz1pf1.bin
000710F2                            		even
000710F2                            ObjPos_LZ1pf2:	incbin	objpos\lz1pf2.bin
00071124                            		even
00071124                            ObjPos_LZ2pf1:	incbin	objpos\lz2pf1.bin
00071156                            		even
00071156                            ObjPos_LZ2pf2:	incbin	objpos\lz2pf2.bin
00071188                            		even
00071188                            ObjPos_LZ3pf1:	incbin	objpos\lz3pf1.bin
000711D2                            		even
000711D2                            ObjPos_LZ3pf2:	incbin	objpos\lz3pf2.bin
00071210                            		even
00071210                            ObjPos_MZ1:	incbin	objpos\mz1.bin
0007157C                            		even
0007157C                            ObjPos_MZ2:	incbin	objpos\mz2.bin
00071A26                            		even
00071A26                            ObjPos_MZ3:	incbin	objpos\mz3.bin
00071F9C                            		even
00071F9C                            ObjPos_SLZ1:	incbin	objpos\slz1.bin
00071FC6                            		even
00071FC6                            ObjPos_SLZ2:	incbin	objpos\slz2.bin
0007242E                            		even
0007242E                            ObjPos_SLZ3:	incbin	objpos\slz3.bin
00072A10                            		even
00072A10                            ObjPos_SYZ1:	incbin	objpos\syz1.bin
00073082                            		even
00073082                            ObjPos_SYZ2:	incbin	objpos\syz2.bin
000735EC                            		even
000735EC                            ObjPos_SYZ3:	incbin	objpos\syz3.bin
00073BF2                            		even
00073BF2                            ObjPos_SBZ1:	incbin	objpos\sbz1.bin
00074330                            		even
00074330                            ObjPos_SBZ2:	incbin	objpos\sbz2.bin
00074A0E                            		even
00074A0E                            ObjPos_FZ:	incbin	objpos\fz.bin
00074A20                            		even
00074A20                            ObjPos_SBZ1pf1:	incbin	objpos\sbz1pf1.bin
00074A52                            		even
00074A52                            ObjPos_SBZ1pf2:	incbin	objpos\sbz1pf2.bin
00074A84                            		even
00074A84                            ObjPos_SBZ1pf3:	incbin	objpos\sbz1pf3.bin
00074AB6                            		even
00074AB6                            ObjPos_SBZ1pf4:	incbin	objpos\sbz1pf4.bin
00074AE8                            		even
00074AE8                            ObjPos_SBZ1pf5:	incbin	objpos\sbz1pf5.bin
00074B1A                            		even
00074B1A                            ObjPos_SBZ1pf6:	incbin	objpos\sbz1pf6.bin
00074B52                            		even
00074B52                            ObjPos_End:	incbin	objpos\ending.bin
00074CAE                            		even
00074CAE FFFF 0000 0000             ObjPos_Null:	dc.b $FF, $FF, 0, 0, 0,	0
00074CB4                            ; ---------------------------------------------------------------------------
00074CB4                            		incbin	misc\padding4.bin
000752DE                            		even
000752DE                            
000752DE 0000 0000                  Go_SoundTypes:	dc.l SoundTypes		; XREF: Sound_Play
000752E2 0000 0000                  Go_SoundD0:	dc.l SoundD0Index	; XREF: Sound_D0toDF
000752E6 0000 0000                  Go_MusicIndex:	dc.l MusicIndex		; XREF: Sound_81to9F
000752EA 0000 0000                  Go_SoundIndex:	dc.l SoundIndex		; XREF: Sound_A0toCF
000752EE 0000 0000                  off_719A0:	dc.l byte_71A94		; XREF: Sound_81to9F
000752F2 0000 0000                  Go_PSGIndex:	dc.l PSG_Index		; XREF: sub_72926
000752F6                            ; ---------------------------------------------------------------------------
000752F6                            ; PSG instruments used in music
000752F6                            ; ---------------------------------------------------------------------------
000752F6 0000 0000 0000 0000 0000+  PSG_Index:	dc.l PSG1, PSG2, PSG3
00075302 0000 0000 0000 0000 0000+  		dc.l PSG4, PSG5, PSG6
0007530E 0000 0000 0000 0000 0000+  		dc.l PSG7, PSG8, PSG9
0007531A                            PSG1:		incbin	sound\psg1.bin
00075331                            PSG2:		incbin	sound\psg2.bin
00075338                            PSG3:		incbin	sound\psg3.bin
00075349                            PSG4:		incbin	sound\psg4.bin
00075354                            PSG6:		incbin	sound\psg6.bin
00075363                            PSG5:		incbin	sound\psg5.bin
0007538D                            PSG7:		incbin	sound\psg7.bin
000753A9                            PSG8:		incbin	sound\psg8.bin
000753D1                            PSG9:		incbin	sound\psg9.bin
000753E2                            
000753E2 0772 7326 1508 FF05        byte_71A94:	dc.b 7,	$72, $73, $26, $15, 8, $FF, 5
000753EA                            ; ---------------------------------------------------------------------------
000753EA                            ; Music	Pointers
000753EA                            ; ---------------------------------------------------------------------------
000753EA 0000 0000 0000 0000        MusicIndex:	dc.l Music81, Music82
000753F2 0000 0000 0000 0000        		dc.l Music83, Music84
000753FA 0000 0000 0000 0000        		dc.l Music85, Music86
00075402 0000 0000 0000 0000        		dc.l Music87, Music88
0007540A 0000 0000 0000 0000        		dc.l Music89, Music8A
00075412 0000 0000 0000 0000        		dc.l Music8B, Music8C
0007541A 0000 0000 0000 0000        		dc.l Music8D, Music8E
00075422 0000 0000 0000 0000        		dc.l Music8F, Music90
0007542A 0000 0000 0000 0000        		dc.l Music91, Music92
00075432 0000 0000 0000 0000        		dc.l Music93, Music94
0007543A 0000 0000 0000 0000        		dc.l Music95, Music96
00075442 0000 0000 0000 0000        		dc.l Music97, Music98
0007544A 0000 0000 0000 0000        		dc.l Music99, Music9A
00075452 0000 0000 0000 0000        		dc.l Music9B, Music9C
0007545A 0000 0000 0000 0000        		dc.l Music9D, Music9E
00075462 0000 0000                  		dc.l Music9F
00075466                            ; ---------------------------------------------------------------------------
00075466                            ; Type of sound	being played ($90 = music; $70 = normal	sound effect)
00075466                            ; ---------------------------------------------------------------------------
00075466 9090 9090 9090 9090 9090+  SoundTypes:	dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$90
00075476 9090 9090 9090 9090 9090+  		dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$80
00075486 7070 7070 7070 7070 7068+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $68, $70, $70, $70, $60, $70,	$70
00075496 6070 6070 7070 7070 7070+  		dc.b $60, $70, $60, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $7F,	$60
000754A6 7070 7070 7070 7070 7070+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $70,	$80
000754B6 8080 8080 8080 8080 8080+  		dc.b $80, $80, $80, $80, $80, $80, $80,	$80, $80, $80, $80, $80, $80, $80, $80,	$90
000754C6 9090 9090                  		dc.b $90, $90, $90, $90
000754CA                            
000754CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000754CA                            
000754CA                            
000754CA                            sub_71B4C:				; XREF: loc_B10; PalToCRAM
000754CA 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000754D2 4E71                       		nop	
000754D4 4E71                       		nop	
000754D6 4E71                       		nop	
000754D8                            
000754D8                            loc_71B5A:
000754D8 0839 0000 00A1 1100        		btst	#0,($A11100).l
000754E0 66F6                       		bne.s	loc_71B5A
000754E2                            
000754E2 0839 0007 00A0 1FFD        		btst	#7,($A01FFD).l
000754EA 6700                       		beq.s	loc_71B82
000754EC 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
000754F4 4E71                       		nop	
000754F6 4E71                       		nop	
000754F8 4E71                       		nop	
000754FA 4E71                       		nop	
000754FC 4E71                       		nop	
000754FE 60CA                       		bra.s	sub_71B4C
00075500                            ; ===========================================================================
00075500                            
00075500                            loc_71B82:
00075500 4DF9 00FF F000             		lea	($FFF000).l,a6
00075506 422E 000E                  		clr.b	$E(a6)
0007550A 4A2E 0003                  		tst.b	3(a6)		; is music paused?
0007550E 6600 0000                  		bne.w	loc_71E50	; if yes, branch
00075512 532E 0001                  		subq.b	#1,1(a6)
00075516 6600                       		bne.s	loc_71B9E
00075518 4EBA 0000                  		jsr	sub_7260C(pc)
0007551C                            
0007551C                            loc_71B9E:
0007551C 102E 0004                  		move.b	4(a6),d0
00075520 6700                       		beq.s	loc_71BA8
00075522 4EBA 0000                  		jsr	sub_72504(pc)
00075526                            
00075526                            loc_71BA8:
00075526 4A2E 0024                  		tst.b	$24(a6)
0007552A 6700                       		beq.s	loc_71BB2
0007552C 4EBA 0000                  		jsr	sub_7267C(pc)
00075530                            
00075530                            loc_71BB2:
00075530 4A6E 000A                  		tst.w	$A(a6)		; is music or sound being played?
00075534 6700                       		beq.s	loc_71BBC	; if not, branch
00075536 4EBA 0000                  		jsr	Sound_Play(pc)
0007553A                            
0007553A                            loc_71BBC:
0007553A 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
00075540 6700                       		beq.s	loc_71BC8
00075542 4EBA 0000                  		jsr	Sound_ChkValue(pc)
00075546                            
00075546                            loc_71BC8:
00075546 4BEE 0040                  		lea	$40(a6),a5
0007554A 4A15                       		tst.b	(a5)
0007554C 6A00                       		bpl.s	loc_71BD4
0007554E 4EBA 0000                  		jsr	sub_71C4E(pc)
00075552                            
00075552                            loc_71BD4:
00075552 422E 0008                  		clr.b	8(a6)
00075556 7E05                       		moveq	#5,d7
00075558                            
00075558                            loc_71BDA:
00075558 DAFC 0030                  		adda.w	#$30,a5
0007555C 4A15                       		tst.b	(a5)
0007555E 6A00                       		bpl.s	loc_71BE6
00075560 4EBA 0000                  		jsr	sub_71CCA(pc)
00075564                            
00075564                            loc_71BE6:
00075564 51CF FFF2                  		dbf	d7,loc_71BDA
00075568                            
00075568 7E02                       		moveq	#2,d7
0007556A                            
0007556A                            loc_71BEC:
0007556A DAFC 0030                  		adda.w	#$30,a5
0007556E 4A15                       		tst.b	(a5)
00075570 6A00                       		bpl.s	loc_71BF8
00075572 4EBA 0000                  		jsr	sub_72850(pc)
00075576                            
00075576                            loc_71BF8:
00075576 51CF FFF2                  		dbf	d7,loc_71BEC
0007557A                            
0007557A 1D7C 0080 000E             		move.b	#$80,$E(a6)
00075580 7E02                       		moveq	#2,d7
00075582                            
00075582                            loc_71C04:
00075582 DAFC 0030                  		adda.w	#$30,a5
00075586 4A15                       		tst.b	(a5)
00075588 6A00                       		bpl.s	loc_71C10
0007558A 4EBA 0000                  		jsr	sub_71CCA(pc)
0007558E                            
0007558E                            loc_71C10:
0007558E 51CF FFF2                  		dbf	d7,loc_71C04
00075592                            
00075592 7E02                       		moveq	#2,d7
00075594                            
00075594                            loc_71C16:
00075594 DAFC 0030                  		adda.w	#$30,a5
00075598 4A15                       		tst.b	(a5)
0007559A 6A00                       		bpl.s	loc_71C22
0007559C 4EBA 0000                  		jsr	sub_72850(pc)
000755A0                            
000755A0                            loc_71C22:
000755A0 51CF FFF2                  		dbf	d7,loc_71C16
000755A4 1D7C 0040 000E             		move.b	#$40,$E(a6)
000755AA DAFC 0030                  		adda.w	#$30,a5
000755AE 4A15                       		tst.b	(a5)
000755B0 6A00                       		bpl.s	loc_71C38
000755B2 4EBA 0000                  		jsr	sub_71CCA(pc)
000755B6                            
000755B6                            loc_71C38:
000755B6 DAFC 0030                  		adda.w	#$30,a5
000755BA 4A15                       		tst.b	(a5)
000755BC 6A00                       		bpl.s	loc_71C44
000755BE 4EBA 0000                  		jsr	sub_72850(pc)
000755C2                            
000755C2                            loc_71C44:
000755C2 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
000755CA 4E75                       		rts	
000755CC                            ; End of function sub_71B4C
000755CC                            
000755CC                            
000755CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000755CC                            
000755CC                            
000755CC                            sub_71C4E:				; XREF: sub_71B4C
000755CC 532D 000E                  		subq.b	#1,$E(a5)
000755D0 6600                       		bne.s	locret_71CAA
000755D2 1D7C 0080 0008             		move.b	#$80,8(a6)
000755D8 286D 0004                  		movea.l	4(a5),a4
000755DC                            
000755DC                            loc_71C5E:
000755DC 7A00                       		moveq	#0,d5
000755DE 1A1C                       		move.b	(a4)+,d5
000755E0 0C05 00E0                  		cmpi.b	#-$20,d5
000755E4 6500                       		bcs.s	loc_71C6E
000755E6 4EBA 0000                  		jsr	sub_72A5A(pc)
000755EA 60F0                       		bra.s	loc_71C5E
000755EC                            ; ===========================================================================
000755EC                            
000755EC                            loc_71C6E:
000755EC 4A05                       		tst.b	d5
000755EE 6A00                       		bpl.s	loc_71C84
000755F0 1B45 0010                  		move.b	d5,$10(a5)
000755F4 1A1C                       		move.b	(a4)+,d5
000755F6 6A00                       		bpl.s	loc_71C84
000755F8 534C                       		subq.w	#1,a4
000755FA 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
00075600 6000                       		bra.s	loc_71C88
00075602                            ; ===========================================================================
00075602                            
00075602                            loc_71C84:
00075602 4EBA 0000                  		jsr	sub_71D40(pc)
00075606                            
00075606                            loc_71C88:
00075606 2B4C 0004                  		move.l	a4,4(a5)
0007560A 0815 0002                  		btst	#2,(a5)
0007560E 6600                       		bne.s	locret_71CAA
00075610 7000                       		moveq	#0,d0
00075612 102D 0010                  		move.b	$10(a5),d0
00075616 0C00 0080                  		cmpi.b	#$80,d0
0007561A 6700                       		beq.s	locret_71CAA
0007561C 0800 0003                  		btst	#3,d0
00075620 6600                       		bne.s	loc_71CAC
00075622 13C0 00A0 1FFF             		move.b	d0,($A01FFF).l
00075628                            
00075628                            locret_71CAA:
00075628 4E75                       		rts	
0007562A                            ; ===========================================================================
0007562A                            
0007562A                            loc_71CAC:
0007562A 0400 0088                  		subi.b	#$88,d0
0007562E 103B 0000                  		move.b	byte_71CC4(pc,d0.w),d0
00075632 13C0 00A0 00EA             		move.b	d0,($A000EA).l
00075638 13FC 0083 00A0 1FFF        		move.b	#$83,($A01FFF).l
00075640 4E75                       		rts	
00075642                            ; End of function sub_71C4E
00075642                            
00075642                            ; ===========================================================================
00075642 1215 1C1D FFFF             byte_71CC4:	dc.b $12, $15, $1C, $1D, $FF, $FF
00075648                            
00075648                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075648                            
00075648                            
00075648                            sub_71CCA:				; XREF: sub_71B4C
00075648 532D 000E                  		subq.b	#1,$E(a5)
0007564C 6600                       		bne.s	loc_71CE0
0007564E 0895 0004                  		bclr	#4,(a5)
00075652 4EBA 0000                  		jsr	sub_71CEC(pc)
00075656 4EBA 0000                  		jsr	sub_71E18(pc)
0007565A 6000 0000                  		bra.w	loc_726E2
0007565E                            ; ===========================================================================
0007565E                            
0007565E                            loc_71CE0:
0007565E 4EBA 0000                  		jsr	sub_71D9E(pc)
00075662 4EBA 0000                  		jsr	sub_71DC6(pc)
00075666 6000 0000                  		bra.w	loc_71E24
0007566A                            ; End of function sub_71CCA
0007566A                            
0007566A                            
0007566A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007566A                            
0007566A                            
0007566A                            sub_71CEC:				; XREF: sub_71CCA
0007566A 286D 0004                  		movea.l	4(a5),a4
0007566E 0895 0001                  		bclr	#1,(a5)
00075672                            
00075672                            loc_71CF4:
00075672 7A00                       		moveq	#0,d5
00075674 1A1C                       		move.b	(a4)+,d5
00075676 0C05 00E0                  		cmpi.b	#-$20,d5
0007567A 6500                       		bcs.s	loc_71D04
0007567C 4EBA 0000                  		jsr	sub_72A5A(pc)
00075680 60F0                       		bra.s	loc_71CF4
00075682                            ; ===========================================================================
00075682                            
00075682                            loc_71D04:
00075682 4EBA 0000                  		jsr	sub_726FE(pc)
00075686 4A05                       		tst.b	d5
00075688 6A00                       		bpl.s	loc_71D1A
0007568A 4EBA 0000                  		jsr	sub_71D22(pc)
0007568E 1A1C                       		move.b	(a4)+,d5
00075690 6A00                       		bpl.s	loc_71D1A
00075692 534C                       		subq.w	#1,a4
00075694 6000 0000                  		bra.w	sub_71D60
00075698                            ; ===========================================================================
00075698                            
00075698                            loc_71D1A:
00075698 4EBA 0000                  		jsr	sub_71D40(pc)
0007569C 6000 0000                  		bra.w	sub_71D60
000756A0                            ; End of function sub_71CEC
000756A0                            
000756A0                            
000756A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000756A0                            
000756A0                            
000756A0                            sub_71D22:				; XREF: sub_71CEC
000756A0 0405 0080                  		subi.b	#$80,d5
000756A4 6700                       		beq.s	loc_71D58
000756A6 DA2D 0008                  		add.b	8(a5),d5
000756AA 0245 007F                  		andi.w	#$7F,d5
000756AE E34D                       		lsl.w	#1,d5
000756B0 41FA 0000                  		lea	word_72790(pc),a0
000756B4 3C30 5000                  		move.w	(a0,d5.w),d6
000756B8 3B46 0010                  		move.w	d6,$10(a5)
000756BC 4E75                       		rts	
000756BE                            ; End of function sub_71D22
000756BE                            
000756BE                            
000756BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000756BE                            
000756BE                            
000756BE                            sub_71D40:				; XREF: sub_71C4E; sub_71CEC; sub_72878
000756BE 1005                       		move.b	d5,d0
000756C0 122D 0002                  		move.b	2(a5),d1
000756C4                            
000756C4                            loc_71D46:
000756C4 5301                       		subq.b	#1,d1
000756C6 6700                       		beq.s	loc_71D4E
000756C8 D005                       		add.b	d5,d0
000756CA 60F8                       		bra.s	loc_71D46
000756CC                            ; ===========================================================================
000756CC                            
000756CC                            loc_71D4E:
000756CC 1B40 000F                  		move.b	d0,$F(a5)
000756D0 1B40 000E                  		move.b	d0,$E(a5)
000756D4 4E75                       		rts	
000756D6                            ; End of function sub_71D40
000756D6                            
000756D6                            ; ===========================================================================
000756D6                            
000756D6                            loc_71D58:				; XREF: sub_71D22
000756D6 08D5 0001                  		bset	#1,(a5)
000756DA 426D 0010                  		clr.w	$10(a5)
000756DE                            
000756DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000756DE                            
000756DE                            
000756DE                            sub_71D60:				; XREF: sub_71CEC; sub_72878; sub_728AC
000756DE 2B4C 0004                  		move.l	a4,4(a5)
000756E2 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
000756E8 0815 0004                  		btst	#4,(a5)
000756EC 6600                       		bne.s	locret_71D9C
000756EE 1B6D 0013 0012             		move.b	$13(a5),$12(a5)
000756F4 422D 000C                  		clr.b	$C(a5)
000756F8 0815 0003                  		btst	#3,(a5)
000756FC 6700                       		beq.s	locret_71D9C
000756FE 206D 0014                  		movea.l	$14(a5),a0
00075702 1B58 0018                  		move.b	(a0)+,$18(a5)
00075706 1B58 0019                  		move.b	(a0)+,$19(a5)
0007570A 1B58 001A                  		move.b	(a0)+,$1A(a5)
0007570E 1018                       		move.b	(a0)+,d0
00075710 E208                       		lsr.b	#1,d0
00075712 1B40 001B                  		move.b	d0,$1B(a5)
00075716 426D 001C                  		clr.w	$1C(a5)
0007571A                            
0007571A                            locret_71D9C:
0007571A 4E75                       		rts	
0007571C                            ; End of function sub_71D60
0007571C                            
0007571C                            
0007571C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007571C                            
0007571C                            
0007571C                            sub_71D9E:				; XREF: sub_71CCA; sub_72850
0007571C 4A2D 0012                  		tst.b	$12(a5)
00075720 6700                       		beq.s	locret_71DC4
00075722 532D 0012                  		subq.b	#1,$12(a5)
00075726 6600                       		bne.s	locret_71DC4
00075728 08D5 0001                  		bset	#1,(a5)
0007572C 4A2D 0001                  		tst.b	1(a5)
00075730 6B00 0000                  		bmi.w	loc_71DBE
00075734 4EBA 0000                  		jsr	sub_726FE(pc)
00075738 584F                       		addq.w	#4,sp
0007573A 4E75                       		rts	
0007573C                            ; ===========================================================================
0007573C                            
0007573C                            loc_71DBE:
0007573C 4EBA 0000                  		jsr	sub_729A0(pc)
00075740 584F                       		addq.w	#4,sp
00075742                            
00075742                            locret_71DC4:
00075742 4E75                       		rts	
00075744                            ; End of function sub_71D9E
00075744                            
00075744                            
00075744                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075744                            
00075744                            
00075744                            sub_71DC6:				; XREF: sub_71CCA; sub_72850
00075744 584F                       		addq.w	#4,sp
00075746 0815 0003                  		btst	#3,(a5)
0007574A 6700                       		beq.s	locret_71E16
0007574C 4A2D 0018                  		tst.b	$18(a5)
00075750 6700                       		beq.s	loc_71DDA
00075752 532D 0018                  		subq.b	#1,$18(a5)
00075756 4E75                       		rts	
00075758                            ; ===========================================================================
00075758                            
00075758                            loc_71DDA:
00075758 532D 0019                  		subq.b	#1,$19(a5)
0007575C 6700                       		beq.s	loc_71DE2
0007575E 4E75                       		rts	
00075760                            ; ===========================================================================
00075760                            
00075760                            loc_71DE2:
00075760 206D 0014                  		movea.l	$14(a5),a0
00075764 1B68 0001 0019             		move.b	1(a0),$19(a5)
0007576A 4A2D 001B                  		tst.b	$1B(a5)
0007576E 6600                       		bne.s	loc_71DFE
00075770 1B68 0003 001B             		move.b	3(a0),$1B(a5)
00075776 442D 001A                  		neg.b	$1A(a5)
0007577A 4E75                       		rts	
0007577C                            ; ===========================================================================
0007577C                            
0007577C                            loc_71DFE:
0007577C 532D 001B                  		subq.b	#1,$1B(a5)
00075780 1C2D 001A                  		move.b	$1A(a5),d6
00075784 4886                       		ext.w	d6
00075786 DC6D 001C                  		add.w	$1C(a5),d6
0007578A 3B46 001C                  		move.w	d6,$1C(a5)
0007578E DC6D 0010                  		add.w	$10(a5),d6
00075792 594F                       		subq.w	#4,sp
00075794                            
00075794                            locret_71E16:
00075794 4E75                       		rts	
00075796                            ; End of function sub_71DC6
00075796                            
00075796                            
00075796                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075796                            
00075796                            
00075796                            sub_71E18:				; XREF: sub_71CCA
00075796 0815 0001                  		btst	#1,(a5)
0007579A 6600                       		bne.s	locret_71E48
0007579C 3C2D 0010                  		move.w	$10(a5),d6
000757A0 6700                       		beq.s	loc_71E4A
000757A2                            
000757A2                            loc_71E24:				; XREF: sub_71CCA
000757A2 102D 001E                  		move.b	$1E(a5),d0
000757A6 4880                       		ext.w	d0
000757A8 DC40                       		add.w	d0,d6
000757AA 0815 0002                  		btst	#2,(a5)
000757AE 6600                       		bne.s	locret_71E48
000757B0 3206                       		move.w	d6,d1
000757B2 E049                       		lsr.w	#8,d1
000757B4 103C 00A4                  		move.b	#-$5C,d0
000757B8 4EBA 0000                  		jsr	sub_72722(pc)
000757BC 1206                       		move.b	d6,d1
000757BE 103C 00A0                  		move.b	#-$60,d0
000757C2 4EBA 0000                  		jsr	sub_72722(pc)
000757C6                            
000757C6                            locret_71E48:
000757C6 4E75                       		rts	
000757C8                            ; ===========================================================================
000757C8                            
000757C8                            loc_71E4A:
000757C8 08D5 0001                  		bset	#1,(a5)
000757CC 4E75                       		rts	
000757CE                            ; End of function sub_71E18
000757CE                            
000757CE                            ; ===========================================================================
000757CE                            
000757CE                            loc_71E50:				; XREF: sub_71B4C
000757CE 6B00                       		bmi.s	loc_71E94
000757D0 0C2E 0002 0003             		cmpi.b	#2,3(a6)
000757D6 6700 0000                  		beq.w	loc_71EFE
000757DA 1D7C 0002 0003             		move.b	#2,3(a6)
000757E0 7602                       		moveq	#2,d3
000757E2 103C 00B4                  		move.b	#-$4C,d0
000757E6 7200                       		moveq	#0,d1
000757E8                            
000757E8                            loc_71E6A:
000757E8 4EBA 0000                  		jsr	sub_7272E(pc)
000757EC 4EBA 0000                  		jsr	sub_72764(pc)
000757F0 5200                       		addq.b	#1,d0
000757F2 51CB FFF4                  		dbf	d3,loc_71E6A
000757F6                            
000757F6 7602                       		moveq	#2,d3
000757F8 7028                       		moveq	#$28,d0
000757FA                            
000757FA                            loc_71E7C:
000757FA 1203                       		move.b	d3,d1
000757FC 4EBA 0000                  		jsr	sub_7272E(pc)
00075800 5801                       		addq.b	#4,d1
00075802 4EBA 0000                  		jsr	sub_7272E(pc)
00075806 51CB FFF2                  		dbf	d3,loc_71E7C
0007580A                            
0007580A 4EBA 0000                  		jsr	sub_729B6(pc)
0007580E 6000 FDB2                  		bra.w	loc_71C44
00075812                            ; ===========================================================================
00075812                            
00075812                            loc_71E94:				; XREF: loc_71E50
00075812 422E 0003                  		clr.b	3(a6)
00075816 7630                       		moveq	#$30,d3
00075818 4BEE 0040                  		lea	$40(a6),a5
0007581C 7806                       		moveq	#6,d4
0007581E                            
0007581E                            loc_71EA0:
0007581E 0815 0007                  		btst	#7,(a5)
00075822 6700                       		beq.s	loc_71EB8
00075824 0815 0002                  		btst	#2,(a5)
00075828 6600                       		bne.s	loc_71EB8
0007582A 103C 00B4                  		move.b	#-$4C,d0
0007582E 122D 000A                  		move.b	$A(a5),d1
00075832 4EBA 0000                  		jsr	sub_72722(pc)
00075836                            
00075836                            loc_71EB8:
00075836 DAC3                       		adda.w	d3,a5
00075838 51CC FFE4                  		dbf	d4,loc_71EA0
0007583C                            
0007583C 4BEE 0220                  		lea	$220(a6),a5
00075840 7802                       		moveq	#2,d4
00075842                            
00075842                            loc_71EC4:
00075842 0815 0007                  		btst	#7,(a5)
00075846 6700                       		beq.s	loc_71EDC
00075848 0815 0002                  		btst	#2,(a5)
0007584C 6600                       		bne.s	loc_71EDC
0007584E 103C 00B4                  		move.b	#-$4C,d0
00075852 122D 000A                  		move.b	$A(a5),d1
00075856 4EBA 0000                  		jsr	sub_72722(pc)
0007585A                            
0007585A                            loc_71EDC:
0007585A DAC3                       		adda.w	d3,a5
0007585C 51CC FFE4                  		dbf	d4,loc_71EC4
00075860                            
00075860 4BEE 0340                  		lea	$340(a6),a5
00075864 0815 0007                  		btst	#7,(a5)
00075868 6700                       		beq.s	loc_71EFE
0007586A 0815 0002                  		btst	#2,(a5)
0007586E 6600                       		bne.s	loc_71EFE
00075870 103C 00B4                  		move.b	#-$4C,d0
00075874 122D 000A                  		move.b	$A(a5),d1
00075878 4EBA 0000                  		jsr	sub_72722(pc)
0007587C                            
0007587C                            loc_71EFE:
0007587C 6000 FD44                  		bra.w	loc_71C44
00075880                            
00075880                            ; ---------------------------------------------------------------------------
00075880                            ; Subroutine to	play a sound or	music track
00075880                            ; ---------------------------------------------------------------------------
00075880                            
00075880                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075880                            
00075880                            
00075880                            Sound_Play:				; XREF: sub_71B4C
00075880 2079 0007 52DE             		movea.l	(Go_SoundTypes).l,a0
00075886 43EE 000A                  		lea	$A(a6),a1	; load music track number
0007588A 1616                       		move.b	0(a6),d3
0007588C 7802                       		moveq	#2,d4
0007588E                            
0007588E                            loc_71F12:
0007588E 1011                       		move.b	(a1),d0		; move track number to d0
00075890 1200                       		move.b	d0,d1
00075892 4219                       		clr.b	(a1)+
00075894 0400 0081                  		subi.b	#$81,d0
00075898 6500                       		bcs.s	loc_71F3E
0007589A 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
000758A0 6700                       		beq.s	loc_71F2C
000758A2 1D41 000A                  		move.b	d1,$A(a6)
000758A6 6000                       		bra.s	loc_71F3E
000758A8                            ; ===========================================================================
000758A8                            
000758A8                            loc_71F2C:
000758A8 0240 007F                  		andi.w	#$7F,d0
000758AC 1430 0000                  		move.b	(a0,d0.w),d2
000758B0 B403                       		cmp.b	d3,d2
000758B2 6500                       		bcs.s	loc_71F3E
000758B4 1602                       		move.b	d2,d3
000758B6 1D41 0009                  		move.b	d1,9(a6)	; set music flag
000758BA                            
000758BA                            loc_71F3E:
000758BA 51CC FFD2                  		dbf	d4,loc_71F12
000758BE                            
000758BE 4A03                       		tst.b	d3
000758C0 6B00                       		bmi.s	locret_71F4A
000758C2 1C83                       		move.b	d3,0(a6)
000758C4                            
000758C4                            locret_71F4A:
000758C4 4E75                       		rts	
000758C6                            ; End of function Sound_Play
000758C6                            
000758C6                            
000758C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000758C6                            
000758C6                            
000758C6                            Sound_ChkValue:				; XREF: sub_71B4C
000758C6 7E00                       		moveq	#0,d7
000758C8 1E2E 0009                  		move.b	9(a6),d7
000758CC 6700 0000                  		beq.w	Sound_E4
000758D0 6A00                       		bpl.s	locret_71F8C
000758D2 1D7C 0080 0009             		move.b	#$80,9(a6)	; reset	music flag
000758D8 0C07 009F                  		cmpi.b	#$9F,d7
000758DC 6300 0000                  		bls.w	Sound_81to9F	; music	$81-$9F
000758E0 0C07 00A0                  		cmpi.b	#$A0,d7
000758E4 6500 0000                  		bcs.w	locret_71F8C
000758E8 0C07 00CF                  		cmpi.b	#$CF,d7
000758EC 6300 0000                  		bls.w	Sound_A0toCF	; sound	$A0-$CF
000758F0 0C07 00D0                  		cmpi.b	#$D0,d7
000758F4 6500 0000                  		bcs.w	locret_71F8C
000758F8 0C07 00E0                  		cmpi.b	#$E0,d7
000758FC 6500 0000                  		bcs.w	Sound_D0toDF	; sound	$D0-$DF
00075900 0C07 00E5                  		cmpi.b	#$E5,d7
00075904 6300                       		bls.s	Sound_E0toE5	; sound	$E0-$E5
00075906                            
00075906                            locret_71F8C:
00075906 4E75                       		rts	
00075908                            ; ===========================================================================
00075908                            
00075908                            Sound_E0toE5				; XREF: Sound_ChkValue
00075908 0407 00E0                  		subi.b	#$E0,d7
0007590C E54F                       		lsl.w	#2,d7
0007590E 4EFB 7000                  		jmp	Sound_ExIndex(pc,d7.w)
00075912                            ; ===========================================================================
00075912                            
00075912                            Sound_ExIndex:
00075912 6000 0000                  		bra.w	Sound_E0
00075916                            ; ===========================================================================
00075916 6000 0000                  		bra.w	Sound_E1
0007591A                            ; ===========================================================================
0007591A 6000 0000                  		bra.w	Sound_E2
0007591E                            ; ===========================================================================
0007591E 6000 0000                  		bra.w	Sound_E3
00075922                            ; ===========================================================================
00075922 6000 0000                  		bra.w	Sound_E4
00075926                            ; ===========================================================================
00075926 6000 0000                  		bra.w	Sound_E5
0007592A                            ; ===========================================================================
0007592A                            ; ---------------------------------------------------------------------------
0007592A                            ; Play "Say-gaa" PCM sound
0007592A                            ; ---------------------------------------------------------------------------
0007592A                            
0007592A                            Sound_E1:				  
0007592A 45F9 0000 0000             		lea	(SegaPCM).l,a2			; Load the SEGA PCM sample into a2. It's important that we use a2 since a0 and a1 are going to be used up ahead when reading the joypad ports 
00075930 263C 0000 0000             		move.l	#(SegaPCM_End-SegaPCM),d3			; Load the size of the SEGA PCM sample into d3 
00075936 13FC 002A 00A0 4000        		move.b	#$2A,($A04000).l		; $A04000 = $2A -> Write to DAC channel	  
0007593E                            PlayPCM_Loop:	  
0007593E 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
00075944 303C 0014                  		move.w	#$14,d0				; Write the pitch ($14 in this case) to d0 
00075948 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)  
0007594C 5383                       		sub.l	#1,d3				; Subtract 1 from the PCM sample size 
0007594E 6700                       		beq.s	return_PlayPCM			; If d3 = 0, we finished playing the PCM sample, so stop playing, leave this loop, and unfreeze the 68K 
00075950 41F8 F604                  		lea	($FFFFF604).w,a0		; address where JoyPad states are written 
00075954 43F9 00A1 0003             		lea	($A10003).l,a1			; address where JoyPad states are read from 
0007595A 4EB8 1418                  		jsr	(Joypad_Read).w			; Read only the first joypad port. It's important that we do NOT do the two ports, we don't have the cycles for that 
0007595E 0838 0007 F604             		btst	#7,($FFFFF604).w		; Check for Start button 
00075964 6600                       		bne.s	return_PlayPCM			; If start is pressed, stop playing, leave this loop, and unfreeze the 68K 
00075966 60D6                       		bra.s	PlayPCM_Loop			; Otherwise, continue playing PCM sample 
00075968                            return_PlayPCM: 
00075968 584F                       		addq.w	#4,sp 
0007596A 4E75                       		rts
0007596C                            		
0007596C                            ; ---------------------------------------------------------------------------
0007596C                            ; Play you are an idiot pcm sound
0007596C                            ; since the sfx already crashes the game forever load it here :V
0007596C                            ; ---------------------------------------------------------------------------
0007596C                            
0007596C                            Sound_E5: 
0007596C 4EB8 14E8                  		jsr	ClearScreen
00075970                            		;control port on a5
00075970 2ABC 9401 9340             		move.l	#$94000000+((($280>>1)&$FF00)<<8)+$9300+(($280>>1)&$FF),(a5)
00075976 2ABC 96FC 9500             		move.l	#$96000000+((($FFFFF800>>1)&$FF00)<<8)+$9500+(($FFFFF800>>1)&$FF),(a5)
0007597C 3ABC 977F                  		move.w	#$9700+(((($FFFFF800>>1)&$FF0000)>>16)&$7F),(a5)
00075980 3ABC 7800                  		move.w	#$4000+($F800&$3FFF),(a5)
00075984 3ABC 0083                  		move.w	#$80+(($F800&$C000)>>14),(a5) ; clear sprites
00075988                            		
00075988 3ABC 8700                  		move.w	#$8700,(a5) ; first colour is bg now
0007598C                            		
0007598C 2ABC 4000 0000             		move.l	#$40000000,(a5)
00075992 41F9 0002 422C             		lea	(Nem_Idiot).l,a0 ;	load idiot sprites
00075998 4EB8 1664                  		jsr	NemDec
0007599C 43F9 00FF 0000             		lea	($FF0000).l,a1
000759A2 41F9 0002 41CE             		lea	(Eni_Idiot).l,a0 ; load mappings for IDIOT
000759A8 303C 0000                  		move.w	#0,d0
000759AC 4EB8 1942                  		jsr	EniDec
000759B0 43F9 00FF 0000             		lea	($FF0000).l,a1
000759B6 203C 4304 0003             		move.l	#$43040003,d0
000759BC 7223                       		moveq	#35,d1
000759BE 740D                       		moveq	#13,d2
000759C0 4EB8 1644                  		jsr	ShowVDPGraphics
000759C4 7014                       		moveq	#20,d0
000759C6 4EB8 2302                  		jsr	PalLoad2	; load pallet
000759CA                            		
000759CA                            Sound_E5_StartPCM:
000759CA 45F9 0000 0000             		lea	(IdiotPCM).l,a2			; Load the idiot PCM sample into a2. It's important that we use a2 since a0 and a1 are going to be used up ahead when reading the joypad ports 
000759D0 263C 0000 0000             		move.l	#(IdiotPCM_End-IdiotPCM),d3			; Load the size of the idiot PCM sample into d3 
000759D6 13FC 002A 00A0 4000        		move.b	#$2A,($A04000).l		; $A04000 = $2A -> Write to DAC channel	  
000759DE                            PlayPCM_LoopE5:	  
000759DE                            
000759DE 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
000759E4                            		
000759E4 5278 FE24                  		addq.w	#1,($FFFFFE24).w
000759E8                            		
000759E8 1038 FE24                  		move.b	($FFFFFE24).w,d0
000759EC 0200 000F                  		andi.b	#$F,d0
000759F0 6700                       		beq.s	SfxE5SwapPalette
000759F2                            		
000759F2 303C 0056                  		move.w	#$58-2,d0				; Write the pitch ($58 in this case) to d0  (-28 from the check before)
000759F6 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)   (14 cycles)
000759FA 5383                       		sub.l	#1,d3				; Subtract 1 from the PCM sample size 
000759FC 67CC                       		beq.s	Sound_E5_StartPCM			; If d3 = 0, we finished playing the PCM sample, DONT STOP
000759FE 60DE                       		bra.s	PlayPCM_LoopE5
00075A00                            		
00075A00                            SfxE5SwapPalette:
00075A00                            		
00075A00 2ABC 9400 9308             		move.l	#$94000000+((($10>>1)&$FF00)<<8)+$9300+(($10>>1)&$FF),(a5) ; len
00075A06                            		
00075A06                            		
00075A06 0838 0004 FE24             		btst	#4,($FFFFFE24).w
00075A0C 6700                       		beq.s	@not_black
00075A0E 2ABC 96FD 9598             		move.l	#$96000000+((($FFFFFB30>>1)&$FF00)<<8)+$9500+(($FFFFFB30>>1)&$FF),(a5)	; source	
00075A14 6000                       		bra.s	@merge
00075A16                            	@not_black:
00075A16 2ABC 96FD 9590             		move.l	#$96000000+((($FFFFFB20>>1)&$FF00)<<8)+$9500+(($FFFFFB20>>1)&$FF),(a5)	; source
00075A1C                            	@merge:
00075A1C 3ABC 977F                  		move.w	#$9700+(((($FFFFFB20>>1)&$FF0000)>>16)&$7F),(a5) ; source
00075A20 3ABC C000                  		move.w	#$C000+(0&$3FFF),(a5) ; dest
00075A24 31FC 0080 F640             		move.w	#$80+((0&$C000)>>14),($FFFFF640).w ;dest
00075A2A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00075A2E                            		
00075A2E 303C 004D                  		move.w	#$58-11,d0				; attempt at removing the little jumps
00075A32 51C8 FFFE                  		dbf	d0,*				; (14 cycles)
00075A36 60A6                       		bra.s	PlayPCM_LoopE5
00075A38                            		
00075A38                            ; ===========================================================================
00075A38                            ; ---------------------------------------------------------------------------
00075A38                            ; Play music track $81-$9F
00075A38                            ; ---------------------------------------------------------------------------
00075A38                            
00075A38                            Sound_81to9F:				; XREF: Sound_ChkValue
00075A38 0C07 0088                  		cmpi.b	#$88,d7		; is "extra life" music	played?
00075A3C 6600                       		bne.s	loc_72024	; if not, branch
00075A3E 4A2E 0027                  		tst.b	$27(a6)
00075A42 6600 0000                  		bne.w	loc_721B6
00075A46 4BEE 0040                  		lea	$40(a6),a5
00075A4A 7009                       		moveq	#9,d0
00075A4C                            
00075A4C                            loc_71FE6:
00075A4C 0895 0002                  		bclr	#2,(a5)
00075A50 DAFC 0030                  		adda.w	#$30,a5
00075A54 51C8 FFF6                  		dbf	d0,loc_71FE6
00075A58                            
00075A58 4BEE 0220                  		lea	$220(a6),a5
00075A5C 7005                       		moveq	#5,d0
00075A5E                            
00075A5E                            loc_71FF8:
00075A5E 0895 0007                  		bclr	#7,(a5)
00075A62 DAFC 0030                  		adda.w	#$30,a5
00075A66 51C8 FFF6                  		dbf	d0,loc_71FF8
00075A6A 4216                       		clr.b	0(a6)
00075A6C 204E                       		movea.l	a6,a0
00075A6E 43EE 03A0                  		lea	$3A0(a6),a1
00075A72 303C 0087                  		move.w	#$87,d0
00075A76                            
00075A76                            loc_72012:
00075A76 22D8                       		move.l	(a0)+,(a1)+
00075A78 51C8 FFFC                  		dbf	d0,loc_72012
00075A7C                            
00075A7C 1D7C 0080 0027             		move.b	#$80,$27(a6)
00075A82 4216                       		clr.b	0(a6)
00075A84 6000                       		bra.s	loc_7202C
00075A86                            ; ===========================================================================
00075A86                            
00075A86                            loc_72024:
00075A86 422E 0027                  		clr.b	$27(a6)
00075A8A 422E 0026                  		clr.b	$26(a6)
00075A8E                            
00075A8E                            loc_7202C:
00075A8E 4EBA 0000                  		jsr	sub_725CA(pc)
00075A92 2879 0007 52EE             		movea.l	(off_719A0).l,a4
00075A98 0407 0081                  		subi.b	#$81,d7
00075A9C 1D74 7000 0029             		move.b	(a4,d7.w),$29(a6)
00075AA2 2879 0007 52E6             		movea.l	(Go_MusicIndex).l,a4
00075AA8 E54F                       		lsl.w	#2,d7
00075AAA 2874 7000                  		movea.l	(a4,d7.w),a4
00075AAE 7000                       		moveq	#0,d0
00075AB0 3014                       		move.w	(a4),d0
00075AB2 D08C                       		add.l	a4,d0
00075AB4 2D40 0018                  		move.l	d0,$18(a6)
00075AB8 102C 0005                  		move.b	5(a4),d0
00075ABC 1D40 0028                  		move.b	d0,$28(a6)
00075AC0 4A2E 002A                  		tst.b	$2A(a6)
00075AC4 6700                       		beq.s	loc_72068
00075AC6 102E 0029                  		move.b	$29(a6),d0
00075ACA                            
00075ACA                            loc_72068:
00075ACA 1D40 0002                  		move.b	d0,2(a6)
00075ACE 1D40 0001                  		move.b	d0,1(a6)
00075AD2 7200                       		moveq	#0,d1
00075AD4 264C                       		movea.l	a4,a3
00075AD6 5C4C                       		addq.w	#6,a4
00075AD8 7E00                       		moveq	#0,d7
00075ADA 1E2B 0002                  		move.b	2(a3),d7
00075ADE 6700 0000                  		beq.w	loc_72114
00075AE2 5307                       		subq.b	#1,d7
00075AE4 123C 00C0                  		move.b	#-$40,d1
00075AE8 182B 0004                  		move.b	4(a3),d4
00075AEC 7C30                       		moveq	#$30,d6
00075AEE 1A3C 0001                  		move.b	#1,d5
00075AF2 43EE 0040                  		lea	$40(a6),a1
00075AF6 45FA 0000                  		lea	byte_721BA(pc),a2
00075AFA                            
00075AFA                            loc_72098:
00075AFA 08D1 0007                  		bset	#7,(a1)
00075AFE 135A 0001                  		move.b	(a2)+,1(a1)
00075B02 1344 0002                  		move.b	d4,2(a1)
00075B06 1346 000D                  		move.b	d6,$D(a1)
00075B0A 1341 000A                  		move.b	d1,$A(a1)
00075B0E 1345 000E                  		move.b	d5,$E(a1)
00075B12 7000                       		moveq	#0,d0
00075B14 301C                       		move.w	(a4)+,d0
00075B16 D08B                       		add.l	a3,d0
00075B18 2340 0004                  		move.l	d0,4(a1)
00075B1C 335C 0008                  		move.w	(a4)+,8(a1)
00075B20 D2C6                       		adda.w	d6,a1
00075B22 51CF FFD6                  		dbf	d7,loc_72098
00075B26 0C2B 0007 0002             		cmpi.b	#7,2(a3)
00075B2C 6600                       		bne.s	loc_720D8
00075B2E 702B                       		moveq	#$2B,d0
00075B30 7200                       		moveq	#0,d1
00075B32 4EBA 0000                  		jsr	sub_7272E(pc)
00075B36 6000 0000                  		bra.w	loc_72114
00075B3A                            ; ===========================================================================
00075B3A                            
00075B3A                            loc_720D8:
00075B3A 7028                       		moveq	#$28,d0
00075B3C 7206                       		moveq	#6,d1
00075B3E 4EBA 0000                  		jsr	sub_7272E(pc)
00075B42 103C 0042                  		move.b	#$42,d0
00075B46 727F                       		moveq	#$7F,d1
00075B48 4EBA 0000                  		jsr	sub_72764(pc)
00075B4C 103C 004A                  		move.b	#$4A,d0
00075B50 727F                       		moveq	#$7F,d1
00075B52 4EBA 0000                  		jsr	sub_72764(pc)
00075B56 103C 0046                  		move.b	#$46,d0
00075B5A 727F                       		moveq	#$7F,d1
00075B5C 4EBA 0000                  		jsr	sub_72764(pc)
00075B60 103C 004E                  		move.b	#$4E,d0
00075B64 727F                       		moveq	#$7F,d1
00075B66 4EBA 0000                  		jsr	sub_72764(pc)
00075B6A 103C 00B6                  		move.b	#-$4A,d0
00075B6E 123C 00C0                  		move.b	#-$40,d1
00075B72 4EBA 0000                  		jsr	sub_72764(pc)
00075B76                            
00075B76                            loc_72114:
00075B76 7E00                       		moveq	#0,d7
00075B78 1E2B 0003                  		move.b	3(a3),d7
00075B7C 6700                       		beq.s	loc_72154
00075B7E 5307                       		subq.b	#1,d7
00075B80 43EE 0190                  		lea	$190(a6),a1
00075B84 45FA 0000                  		lea	byte_721C2(pc),a2
00075B88                            
00075B88                            loc_72126:
00075B88 08D1 0007                  		bset	#7,(a1)
00075B8C 135A 0001                  		move.b	(a2)+,1(a1)
00075B90 1344 0002                  		move.b	d4,2(a1)
00075B94 1346 000D                  		move.b	d6,$D(a1)
00075B98 1345 000E                  		move.b	d5,$E(a1)
00075B9C 7000                       		moveq	#0,d0
00075B9E 301C                       		move.w	(a4)+,d0
00075BA0 D08B                       		add.l	a3,d0
00075BA2 2340 0004                  		move.l	d0,4(a1)
00075BA6 335C 0008                  		move.w	(a4)+,8(a1)
00075BAA 101C                       		move.b	(a4)+,d0
00075BAC 135C 000B                  		move.b	(a4)+,$B(a1)
00075BB0 D2C6                       		adda.w	d6,a1
00075BB2 51CF FFD4                  		dbf	d7,loc_72126
00075BB6                            
00075BB6                            loc_72154:
00075BB6 43EE 0220                  		lea	$220(a6),a1
00075BBA 7E05                       		moveq	#5,d7
00075BBC                            
00075BBC                            loc_7215A:
00075BBC 4A11                       		tst.b	(a1)
00075BBE 6A00 0000                  		bpl.w	loc_7217C
00075BC2 7000                       		moveq	#0,d0
00075BC4 1029 0001                  		move.b	1(a1),d0
00075BC8 6B00                       		bmi.s	loc_7216E
00075BCA 5500                       		subq.b	#2,d0
00075BCC E508                       		lsl.b	#2,d0
00075BCE 6000                       		bra.s	loc_72170
00075BD0                            ; ===========================================================================
00075BD0                            
00075BD0                            loc_7216E:
00075BD0 E608                       		lsr.b	#3,d0
00075BD2                            
00075BD2                            loc_72170:
00075BD2 41FA 0000                  		lea	dword_722CC(pc),a0
00075BD6 2070 0000                  		movea.l	(a0,d0.w),a0
00075BDA 08D0 0002                  		bset	#2,(a0)
00075BDE                            
00075BDE                            loc_7217C:
00075BDE D2C6                       		adda.w	d6,a1
00075BE0 51CF FFDA                  		dbf	d7,loc_7215A
00075BE4                            
00075BE4 4A6E 0340                  		tst.w	$340(a6)
00075BE8 6A00                       		bpl.s	loc_7218E
00075BEA 08EE 0002 0100             		bset	#2,$100(a6)
00075BF0                            
00075BF0                            loc_7218E:
00075BF0 4A6E 0370                  		tst.w	$370(a6)
00075BF4 6A00                       		bpl.s	loc_7219A
00075BF6 08EE 0002 01F0             		bset	#2,$1F0(a6)
00075BFC                            
00075BFC                            loc_7219A:
00075BFC 4BEE 0070                  		lea	$70(a6),a5
00075C00 7805                       		moveq	#5,d4
00075C02                            
00075C02                            loc_721A0:
00075C02 4EBA 0000                  		jsr	sub_726FE(pc)
00075C06 DAC6                       		adda.w	d6,a5
00075C08 51CC FFF8                  		dbf	d4,loc_721A0
00075C0C 7802                       		moveq	#2,d4
00075C0E                            
00075C0E                            loc_721AC:
00075C0E 4EBA 0000                  		jsr	sub_729A0(pc)
00075C12 DAC6                       		adda.w	d6,a5
00075C14 51CC FFF8                  		dbf	d4,loc_721AC
00075C18                            
00075C18                            loc_721B6:
00075C18 584F                       		addq.w	#4,sp
00075C1A 4E75                       		rts	
00075C1C                            ; ===========================================================================
00075C1C 0600 0102 0405 0600        byte_721BA:	dc.b 6,	0, 1, 2, 4, 5, 6, 0
00075C24                            		even
00075C24 80A0 C000                  byte_721C2:	dc.b $80, $A0, $C0, 0
00075C28                            		even
00075C28                            ; ===========================================================================
00075C28                            ; ---------------------------------------------------------------------------
00075C28                            ; Play normal sound effect
00075C28                            ; ---------------------------------------------------------------------------
00075C28                            
00075C28                            Sound_A0toCF:				; XREF: Sound_ChkValue
00075C28 4A2E 0027                  		tst.b	$27(a6)
00075C2C 6600 0000                  		bne.w	loc_722C6
00075C30 4A2E 0004                  		tst.b	4(a6)
00075C34 6600 0000                  		bne.w	loc_722C6
00075C38 4A2E 0024                  		tst.b	$24(a6)
00075C3C 6600 0000                  		bne.w	loc_722C6
00075C40 0C07 00B5                  		cmpi.b	#$B5,d7		; is ring sound	effect played?
00075C44 6600                       		bne.s	Sound_notB5	; if not, branch
00075C46 4A2E 002B                  		tst.b	$2B(a6)
00075C4A 6600                       		bne.s	loc_721EE
00075C4C 1E3C 00CE                  		move.b	#$CE,d7		; play ring sound in left speaker
00075C50                            
00075C50                            loc_721EE:
00075C50 086E 0000 002B             		bchg	#0,$2B(a6)	; change speaker
00075C56                            
00075C56                            Sound_notB5:
00075C56 0C07 00A7                  		cmpi.b	#$A7,d7		; is "pushing" sound played?
00075C5A 6600                       		bne.s	Sound_notA7	; if not, branch
00075C5C 4A2E 002C                  		tst.b	$2C(a6)
00075C60 6600 0000                  		bne.w	locret_722C4
00075C64 1D7C 0080 002C             		move.b	#$80,$2C(a6)
00075C6A                            
00075C6A                            Sound_notA7:
00075C6A 2079 0007 52EA             		movea.l	(Go_SoundIndex).l,a0
00075C70 0407 00A0                  		subi.b	#$A0,d7
00075C74 E54F                       		lsl.w	#2,d7
00075C76 2670 7000                  		movea.l	(a0,d7.w),a3
00075C7A 224B                       		movea.l	a3,a1
00075C7C 7200                       		moveq	#0,d1
00075C7E 3219                       		move.w	(a1)+,d1
00075C80 D28B                       		add.l	a3,d1
00075C82 1A19                       		move.b	(a1)+,d5
00075C84 1E19                       		move.b	(a1)+,d7
00075C86 5307                       		subq.b	#1,d7
00075C88 7C30                       		moveq	#$30,d6
00075C8A                            
00075C8A                            loc_72228:
00075C8A 7600                       		moveq	#0,d3
00075C8C 1629 0001                  		move.b	1(a1),d3
00075C90 1803                       		move.b	d3,d4
00075C92 6B00                       		bmi.s	loc_72244
00075C94 5543                       		subq.w	#2,d3
00075C96 E54B                       		lsl.w	#2,d3
00075C98 4BFA 0000                  		lea	dword_722CC(pc),a5
00075C9C 2A75 3000                  		movea.l	(a5,d3.w),a5
00075CA0 08D5 0002                  		bset	#2,(a5)
00075CA4 6000                       		bra.s	loc_7226E
00075CA6                            ; ===========================================================================
00075CA6                            
00075CA6                            loc_72244:
00075CA6 E64B                       		lsr.w	#3,d3
00075CA8 4BFA 0000                  		lea	dword_722CC(pc),a5
00075CAC 2A75 3000                  		movea.l	(a5,d3.w),a5
00075CB0 08D5 0002                  		bset	#2,(a5)
00075CB4 0C04 00C0                  		cmpi.b	#$C0,d4
00075CB8 6600                       		bne.s	loc_7226E
00075CBA 1004                       		move.b	d4,d0
00075CBC 0000 001F                  		ori.b	#$1F,d0
00075CC0 13C0 00C0 0011             		move.b	d0,($C00011).l
00075CC6 0840 0005                  		bchg	#5,d0
00075CCA 13C0 00C0 0011             		move.b	d0,($C00011).l
00075CD0                            
00075CD0                            loc_7226E:
00075CD0 2A7B 3000                  		movea.l	dword_722EC(pc,d3.w),a5
00075CD4 244D                       		movea.l	a5,a2
00075CD6 700B                       		moveq	#$B,d0
00075CD8                            
00075CD8                            loc_72276:
00075CD8 429A                       		clr.l	(a2)+
00075CDA 51C8 FFFC                  		dbf	d0,loc_72276
00075CDE                            
00075CDE 3A99                       		move.w	(a1)+,(a5)
00075CE0 1B45 0002                  		move.b	d5,2(a5)
00075CE4 7000                       		moveq	#0,d0
00075CE6 3019                       		move.w	(a1)+,d0
00075CE8 D08B                       		add.l	a3,d0
00075CEA 2B40 0004                  		move.l	d0,4(a5)
00075CEE 3B59 0008                  		move.w	(a1)+,8(a5)
00075CF2 1B7C 0001 000E             		move.b	#1,$E(a5)
00075CF8 1B46 000D                  		move.b	d6,$D(a5)
00075CFC 4A04                       		tst.b	d4
00075CFE 6B00                       		bmi.s	loc_722A8
00075D00 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
00075D06 2B41 0020                  		move.l	d1,$20(a5)
00075D0A                            
00075D0A                            loc_722A8:
00075D0A 51CF FF7E                  		dbf	d7,loc_72228
00075D0E                            
00075D0E 4A2E 0250                  		tst.b	$250(a6)
00075D12 6A00                       		bpl.s	loc_722B8
00075D14 08EE 0002 0340             		bset	#2,$340(a6)
00075D1A                            
00075D1A                            loc_722B8:
00075D1A 4A2E 0310                  		tst.b	$310(a6)
00075D1E 6A00                       		bpl.s	locret_722C4
00075D20 08EE 0002 0370             		bset	#2,$370(a6)
00075D26                            
00075D26                            locret_722C4:
00075D26 4E75                       		rts	
00075D28                            ; ===========================================================================
00075D28                            
00075D28                            loc_722C6:
00075D28 4216                       		clr.b	0(a6)
00075D2A 4E75                       		rts	
00075D2C                            ; ===========================================================================
00075D2C 00FF F0D0                  dword_722CC:	dc.l $FFF0D0
00075D30 0000 0000                  		dc.l 0
00075D34 00FF F100                  		dc.l $FFF100
00075D38 00FF F130                  		dc.l $FFF130
00075D3C 00FF F190                  		dc.l $FFF190
00075D40 00FF F1C0                  		dc.l $FFF1C0
00075D44 00FF F1F0                  		dc.l $FFF1F0
00075D48 00FF F1F0                  		dc.l $FFF1F0
00075D4C 00FF F220                  dword_722EC:	dc.l $FFF220
00075D50 0000 0000                  		dc.l 0
00075D54 00FF F250                  		dc.l $FFF250
00075D58 00FF F280                  		dc.l $FFF280
00075D5C 00FF F2B0                  		dc.l $FFF2B0
00075D60 00FF F2E0                  		dc.l $FFF2E0
00075D64 00FF F310                  		dc.l $FFF310
00075D68 00FF F310                  		dc.l $FFF310
00075D6C                            ; ===========================================================================
00075D6C                            ; ---------------------------------------------------------------------------
00075D6C                            ; Play GHZ waterfall sound
00075D6C                            ; ---------------------------------------------------------------------------
00075D6C                            
00075D6C                            Sound_D0toDF:				; XREF: Sound_ChkValue
00075D6C 4A2E 0027                  		tst.b	$27(a6)
00075D70 6600 0000                  		bne.w	locret_723C6
00075D74 4A2E 0004                  		tst.b	4(a6)
00075D78 6600 0000                  		bne.w	locret_723C6
00075D7C 4A2E 0024                  		tst.b	$24(a6)
00075D80 6600 0000                  		bne.w	locret_723C6
00075D84 2079 0007 52E2             		movea.l	(Go_SoundD0).l,a0
00075D8A 0407 00D0                  		subi.b	#$D0,d7
00075D8E E54F                       		lsl.w	#2,d7
00075D90 2670 7000                  		movea.l	(a0,d7.w),a3
00075D94 224B                       		movea.l	a3,a1
00075D96 7000                       		moveq	#0,d0
00075D98 3019                       		move.w	(a1)+,d0
00075D9A D08B                       		add.l	a3,d0
00075D9C 2D40 0020                  		move.l	d0,$20(a6)
00075DA0 1A19                       		move.b	(a1)+,d5
00075DA2 1E19                       		move.b	(a1)+,d7
00075DA4 5307                       		subq.b	#1,d7
00075DA6 7C30                       		moveq	#$30,d6
00075DA8                            
00075DA8                            loc_72348:
00075DA8 1829 0001                  		move.b	1(a1),d4
00075DAC 6B00                       		bmi.s	loc_7235A
00075DAE 08EE 0002 0100             		bset	#2,$100(a6)
00075DB4 4BEE 0340                  		lea	$340(a6),a5
00075DB8 6000                       		bra.s	loc_72364
00075DBA                            ; ===========================================================================
00075DBA                            
00075DBA                            loc_7235A:
00075DBA 08EE 0002 01F0             		bset	#2,$1F0(a6)
00075DC0 4BEE 0370                  		lea	$370(a6),a5
00075DC4                            
00075DC4                            loc_72364:
00075DC4 244D                       		movea.l	a5,a2
00075DC6 700B                       		moveq	#$B,d0
00075DC8                            
00075DC8                            loc_72368:
00075DC8 429A                       		clr.l	(a2)+
00075DCA 51C8 FFFC                  		dbf	d0,loc_72368
00075DCE                            
00075DCE 3A99                       		move.w	(a1)+,(a5)
00075DD0 1B45 0002                  		move.b	d5,2(a5)
00075DD4 7000                       		moveq	#0,d0
00075DD6 3019                       		move.w	(a1)+,d0
00075DD8 D08B                       		add.l	a3,d0
00075DDA 2B40 0004                  		move.l	d0,4(a5)
00075DDE 3B59 0008                  		move.w	(a1)+,8(a5)
00075DE2 1B7C 0001 000E             		move.b	#1,$E(a5)
00075DE8 1B46 000D                  		move.b	d6,$D(a5)
00075DEC 4A04                       		tst.b	d4
00075DEE 6B00                       		bmi.s	loc_72396
00075DF0 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
00075DF6                            
00075DF6                            loc_72396:
00075DF6 51CF FFB0                  		dbf	d7,loc_72348
00075DFA                            
00075DFA 4A2E 0250                  		tst.b	$250(a6)
00075DFE 6A00                       		bpl.s	loc_723A6
00075E00 08EE 0002 0340             		bset	#2,$340(a6)
00075E06                            
00075E06                            loc_723A6:
00075E06 4A2E 0310                  		tst.b	$310(a6)
00075E0A 6A00                       		bpl.s	locret_723C6
00075E0C 08EE 0002 0370             		bset	#2,$370(a6)
00075E12 0004 001F                  		ori.b	#$1F,d4
00075E16 13C4 00C0 0011             		move.b	d4,($C00011).l
00075E1C 0844 0005                  		bchg	#5,d4
00075E20 13C4 00C0 0011             		move.b	d4,($C00011).l
00075E26                            
00075E26                            locret_723C6:
00075E26 4E75                       		rts	
00075E28                            ; End of function Sound_ChkValue
00075E28                            
00075E28                            ; ===========================================================================
00075E28 00FF F100                  		dc.l $FFF100
00075E2C 00FF F1F0                  		dc.l $FFF1F0
00075E30 00FF F250                  		dc.l $FFF250
00075E34 00FF F310                  		dc.l $FFF310
00075E38 00FF F340                  		dc.l $FFF340
00075E3C 00FF F370                  		dc.l $FFF370
00075E40                            
00075E40                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075E40                            
00075E40                            
00075E40                            Snd_FadeOut1:				; XREF: Sound_E0
00075E40 4216                       		clr.b	0(a6)
00075E42 4BEE 0220                  		lea	$220(a6),a5
00075E46 7E05                       		moveq	#5,d7
00075E48                            
00075E48                            loc_723EA:
00075E48 4A15                       		tst.b	(a5)
00075E4A 6A00 0000                  		bpl.w	loc_72472
00075E4E 0895 0007                  		bclr	#7,(a5)
00075E52 7600                       		moveq	#0,d3
00075E54 162D 0001                  		move.b	1(a5),d3
00075E58 6B00                       		bmi.s	loc_7243C
00075E5A 4EBA 0000                  		jsr	sub_726FE(pc)
00075E5E 0C03 0004                  		cmpi.b	#4,d3
00075E62 6600                       		bne.s	loc_72416
00075E64 4A2E 0340                  		tst.b	$340(a6)
00075E68 6A00                       		bpl.s	loc_72416
00075E6A 4BEE 0340                  		lea	$340(a6),a5
00075E6E 226E 0020                  		movea.l	$20(a6),a1
00075E72 6000                       		bra.s	loc_72428
00075E74                            ; ===========================================================================
00075E74                            
00075E74                            loc_72416:
00075E74 5503                       		subq.b	#2,d3
00075E76 E50B                       		lsl.b	#2,d3
00075E78 41FA FEB2                  		lea	dword_722CC(pc),a0
00075E7C 264D                       		movea.l	a5,a3
00075E7E 2A70 3000                  		movea.l	(a0,d3.w),a5
00075E82 226E 0018                  		movea.l	$18(a6),a1
00075E86                            
00075E86                            loc_72428:
00075E86 0895 0002                  		bclr	#2,(a5)
00075E8A 08D5 0001                  		bset	#1,(a5)
00075E8E 102D 000B                  		move.b	$B(a5),d0
00075E92 4EBA 0000                  		jsr	sub_72C4E(pc)
00075E96 2A4B                       		movea.l	a3,a5
00075E98 6000                       		bra.s	loc_72472
00075E9A                            ; ===========================================================================
00075E9A                            
00075E9A                            loc_7243C:
00075E9A 4EBA 0000                  		jsr	sub_729A0(pc)
00075E9E 41EE 0370                  		lea	$370(a6),a0
00075EA2 0C03 00E0                  		cmpi.b	#$E0,d3
00075EA6 6700                       		beq.s	loc_7245A
00075EA8 0C03 00C0                  		cmpi.b	#$C0,d3
00075EAC 6700                       		beq.s	loc_7245A
00075EAE E60B                       		lsr.b	#3,d3
00075EB0 41FA FE7A                  		lea	dword_722CC(pc),a0
00075EB4 2070 3000                  		movea.l	(a0,d3.w),a0
00075EB8                            
00075EB8                            loc_7245A:
00075EB8 0890 0002                  		bclr	#2,(a0)
00075EBC 08D0 0001                  		bset	#1,(a0)
00075EC0 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
00075EC6 6600                       		bne.s	loc_72472
00075EC8 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
00075ED0                            
00075ED0                            loc_72472:
00075ED0 DAFC 0030                  		adda.w	#$30,a5
00075ED4 51CF FF72                  		dbf	d7,loc_723EA
00075ED8                            
00075ED8 4E75                       		rts	
00075EDA                            ; End of function Snd_FadeOut1
00075EDA                            
00075EDA                            
00075EDA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075EDA                            
00075EDA                            
00075EDA                            Snd_FadeOut2:				; XREF: Sound_E0
00075EDA 4BEE 0340                  		lea	$340(a6),a5
00075EDE 4A15                       		tst.b	(a5)
00075EE0 6A00                       		bpl.s	loc_724AE
00075EE2 0895 0007                  		bclr	#7,(a5)
00075EE6 0815 0002                  		btst	#2,(a5)
00075EEA 6600                       		bne.s	loc_724AE
00075EEC 4EBA 0000                  		jsr	loc_7270A(pc)
00075EF0 4BEE 0100                  		lea	$100(a6),a5
00075EF4 0895 0002                  		bclr	#2,(a5)
00075EF8 08D5 0001                  		bset	#1,(a5)
00075EFC 4A15                       		tst.b	(a5)
00075EFE 6A00                       		bpl.s	loc_724AE
00075F00 226E 0018                  		movea.l	$18(a6),a1
00075F04 102D 000B                  		move.b	$B(a5),d0
00075F08 4EBA 0000                  		jsr	sub_72C4E(pc)
00075F0C                            
00075F0C                            loc_724AE:
00075F0C 4BEE 0370                  		lea	$370(a6),a5
00075F10 4A15                       		tst.b	(a5)
00075F12 6A00                       		bpl.s	locret_724E4
00075F14 0895 0007                  		bclr	#7,(a5)
00075F18 0815 0002                  		btst	#2,(a5)
00075F1C 6600                       		bne.s	locret_724E4
00075F1E 4EBA 0000                  		jsr	loc_729A6(pc)
00075F22 4BEE 01F0                  		lea	$1F0(a6),a5
00075F26 0895 0002                  		bclr	#2,(a5)
00075F2A 08D5 0001                  		bset	#1,(a5)
00075F2E 4A15                       		tst.b	(a5)
00075F30 6A00                       		bpl.s	locret_724E4
00075F32 0C2D 00E0 0001             		cmpi.b	#-$20,1(a5)
00075F38 6600                       		bne.s	locret_724E4
00075F3A 13ED 001F 00C0 0011        		move.b	$1F(a5),($C00011).l
00075F42                            
00075F42                            locret_724E4:
00075F42 4E75                       		rts	
00075F44                            ; End of function Snd_FadeOut2
00075F44                            
00075F44                            ; ===========================================================================
00075F44                            ; ---------------------------------------------------------------------------
00075F44                            ; Fade out music
00075F44                            ; ---------------------------------------------------------------------------
00075F44                            
00075F44                            Sound_E0:				; XREF: Sound_ExIndex
00075F44 4EBA FEFA                  		jsr	Snd_FadeOut1(pc)
00075F48 4EBA FF90                  		jsr	Snd_FadeOut2(pc)
00075F4C 1D7C 0003 0006             		move.b	#3,6(a6)
00075F52 1D7C 0028 0004             		move.b	#$28,4(a6)
00075F58 422E 0040                  		clr.b	$40(a6)
00075F5C 422E 002A                  		clr.b	$2A(a6)
00075F60 4E75                       		rts	
00075F62                            
00075F62                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075F62                            
00075F62                            
00075F62                            sub_72504:				; XREF: sub_71B4C
00075F62 102E 0006                  		move.b	6(a6),d0
00075F66 6700                       		beq.s	loc_72510
00075F68 532E 0006                  		subq.b	#1,6(a6)
00075F6C 4E75                       		rts	
00075F6E                            ; ===========================================================================
00075F6E                            
00075F6E                            loc_72510:
00075F6E 532E 0004                  		subq.b	#1,4(a6)
00075F72 6700 0000                  		beq.w	Sound_E4
00075F76 1D7C 0003 0006             		move.b	#3,6(a6)
00075F7C 4BEE 0070                  		lea	$70(a6),a5
00075F80 7E05                       		moveq	#5,d7
00075F82                            
00075F82                            loc_72524:
00075F82 4A15                       		tst.b	(a5)
00075F84 6A00                       		bpl.s	loc_72538
00075F86 522D 0009                  		addq.b	#1,9(a5)
00075F8A 6A00                       		bpl.s	loc_72534
00075F8C 0895 0007                  		bclr	#7,(a5)
00075F90 6000                       		bra.s	loc_72538
00075F92                            ; ===========================================================================
00075F92                            
00075F92                            loc_72534:
00075F92 4EBA 0000                  		jsr	sub_72CB4(pc)
00075F96                            
00075F96                            loc_72538:
00075F96 DAFC 0030                  		adda.w	#$30,a5
00075F9A 51CF FFE6                  		dbf	d7,loc_72524
00075F9E                            
00075F9E 7E02                       		moveq	#2,d7
00075FA0                            
00075FA0                            loc_72542:
00075FA0 4A15                       		tst.b	(a5)
00075FA2 6A00                       		bpl.s	loc_72560
00075FA4 522D 0009                  		addq.b	#1,9(a5)
00075FA8 0C2D 0010 0009             		cmpi.b	#$10,9(a5)
00075FAE 6500                       		bcs.s	loc_72558
00075FB0 0895 0007                  		bclr	#7,(a5)
00075FB4 6000                       		bra.s	loc_72560
00075FB6                            ; ===========================================================================
00075FB6                            
00075FB6                            loc_72558:
00075FB6 1C2D 0009                  		move.b	9(a5),d6
00075FBA 4EBA 0000                  		jsr	sub_7296A(pc)
00075FBE                            
00075FBE                            loc_72560:
00075FBE DAFC 0030                  		adda.w	#$30,a5
00075FC2 51CF FFDC                  		dbf	d7,loc_72542
00075FC6                            
00075FC6 4E75                       		rts	
00075FC8                            ; End of function sub_72504
00075FC8                            
00075FC8                            
00075FC8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075FC8                            
00075FC8                            
00075FC8                            sub_7256A:				; XREF: Sound_E4; sub_725CA
00075FC8 7602                       		moveq	#2,d3
00075FCA 7028                       		moveq	#$28,d0
00075FCC                            
00075FCC                            loc_7256E:
00075FCC 1203                       		move.b	d3,d1
00075FCE 4EBA 0000                  		jsr	sub_7272E(pc)
00075FD2 5801                       		addq.b	#4,d1
00075FD4 4EBA 0000                  		jsr	sub_7272E(pc)
00075FD8 51CB FFF2                  		dbf	d3,loc_7256E
00075FDC                            
00075FDC 7040                       		moveq	#$40,d0
00075FDE 727F                       		moveq	#$7F,d1
00075FE0 7802                       		moveq	#2,d4
00075FE2                            
00075FE2                            loc_72584:
00075FE2 7603                       		moveq	#3,d3
00075FE4                            
00075FE4                            loc_72586:
00075FE4 4EBA 0000                  		jsr	sub_7272E(pc)
00075FE8 4EBA 0000                  		jsr	sub_72764(pc)
00075FEC 5840                       		addq.w	#4,d0
00075FEE 51CB FFF4                  		dbf	d3,loc_72586
00075FF2                            
00075FF2 0400 000F                  		subi.b	#$F,d0
00075FF6 51CC FFEA                  		dbf	d4,loc_72584
00075FFA                            
00075FFA 4E75                       		rts	
00075FFC                            ; End of function sub_7256A
00075FFC                            
00075FFC                            ; ===========================================================================
00075FFC                            ; ---------------------------------------------------------------------------
00075FFC                            ; Stop music
00075FFC                            ; ---------------------------------------------------------------------------
00075FFC                            
00075FFC                            Sound_E4:				; XREF: Sound_ChkValue; Sound_ExIndex; sub_72504
00075FFC 702B                       		moveq	#$2B,d0
00075FFE 123C 0080                  		move.b	#$80,d1
00076002 4EBA 0000                  		jsr	sub_7272E(pc)
00076006 7027                       		moveq	#$27,d0
00076008 7200                       		moveq	#0,d1
0007600A 4EBA 0000                  		jsr	sub_7272E(pc)
0007600E 204E                       		movea.l	a6,a0
00076010 303C 00E3                  		move.w	#$E3,d0
00076014                            
00076014                            loc_725B6:
00076014 4298                       		clr.l	(a0)+
00076016 51C8 FFFC                  		dbf	d0,loc_725B6
0007601A                            
0007601A 1D7C 0080 0009             		move.b	#$80,9(a6)	; set music to $80 (silence)
00076020 4EBA FFA6                  		jsr	sub_7256A(pc)
00076024 6000 0000                  		bra.w	sub_729B6
00076028                            
00076028                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00076028                            
00076028                            
00076028                            sub_725CA:				; XREF: Sound_ChkValue
00076028 204E                       		movea.l	a6,a0
0007602A 1216                       		move.b	0(a6),d1
0007602C 142E 0027                  		move.b	$27(a6),d2
00076030 162E 002A                  		move.b	$2A(a6),d3
00076034 182E 0026                  		move.b	$26(a6),d4
00076038 3A2E 000A                  		move.w	$A(a6),d5
0007603C 303C 0087                  		move.w	#$87,d0
00076040                            
00076040                            loc_725E4:
00076040 4298                       		clr.l	(a0)+
00076042 51C8 FFFC                  		dbf	d0,loc_725E4
00076046                            
00076046 1C81                       		move.b	d1,0(a6)
00076048 1D42 0027                  		move.b	d2,$27(a6)
0007604C 1D43 002A                  		move.b	d3,$2A(a6)
00076050 1D44 0026                  		move.b	d4,$26(a6)
00076054 3D45 000A                  		move.w	d5,$A(a6)
00076058 1D7C 0080 0009             		move.b	#$80,9(a6)
0007605E 4EBA FF68                  		jsr	sub_7256A(pc)
00076062 6000 0000                  		bra.w	sub_729B6
00076066                            ; End of function sub_725CA
00076066                            
00076066                            
00076066                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00076066                            
00076066                            
00076066                            sub_7260C:				; XREF: sub_71B4C
00076066 1D6E 0002 0001             		move.b	2(a6),1(a6)
0007606C 41EE 004E                  		lea	$4E(a6),a0
00076070 7030                       		moveq	#$30,d0
00076072 7209                       		moveq	#9,d1
00076074                            
00076074                            loc_7261A:
00076074 5210                       		addq.b	#1,(a0)
00076076 D0C0                       		adda.w	d0,a0
00076078 51C9 FFFA                  		dbf	d1,loc_7261A
0007607C                            
0007607C 4E75                       		rts	
0007607E                            ; End of function sub_7260C
0007607E                            
0007607E                            ; ===========================================================================
0007607E                            ; ---------------------------------------------------------------------------
0007607E                            ; Speed	up music
0007607E                            ; ---------------------------------------------------------------------------
0007607E                            
0007607E                            Sound_E2:				; XREF: Sound_ExIndex
0007607E 4A2E 0027                  		tst.b	$27(a6)
00076082 6600                       		bne.s	loc_7263E
00076084 1D6E 0029 0002             		move.b	$29(a6),2(a6)
0007608A 1D6E 0029 0001             		move.b	$29(a6),1(a6)
00076090 1D7C 0080 002A             		move.b	#$80,$2A(a6)
00076096 4E75                       		rts	
00076098                            ; ===========================================================================
00076098                            
00076098                            loc_7263E:
00076098 1D6E 03C9 03A2             		move.b	$3C9(a6),$3A2(a6)
0007609E 1D6E 03C9 03A1             		move.b	$3C9(a6),$3A1(a6)
000760A4 1D7C 0080 03CA             		move.b	#$80,$3CA(a6)
000760AA 4E75                       		rts	
000760AC                            ; ===========================================================================
000760AC                            ; ---------------------------------------------------------------------------
000760AC                            ; Change music back to normal speed
000760AC                            ; ---------------------------------------------------------------------------
000760AC                            
000760AC                            Sound_E3:				; XREF: Sound_ExIndex
000760AC 4A2E 0027                  		tst.b	$27(a6)
000760B0 6600                       		bne.s	loc_7266A
000760B2 1D6E 0028 0002             		move.b	$28(a6),2(a6)
000760B8 1D6E 0028 0001             		move.b	$28(a6),1(a6)
000760BE 422E 002A                  		clr.b	$2A(a6)
000760C2 4E75                       		rts	
000760C4                            ; ===========================================================================
000760C4                            
000760C4                            loc_7266A:
000760C4 1D6E 03C8 03A2             		move.b	$3C8(a6),$3A2(a6)
000760CA 1D6E 03C8 03A1             		move.b	$3C8(a6),$3A1(a6)
000760D0 422E 03CA                  		clr.b	$3CA(a6)
000760D4 4E75                       		rts	
000760D6                            
000760D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000760D6                            
000760D6                            
000760D6                            sub_7267C:				; XREF: sub_71B4C
000760D6 4A2E 0025                  		tst.b	$25(a6)
000760DA 6700                       		beq.s	loc_72688
000760DC 532E 0025                  		subq.b	#1,$25(a6)
000760E0 4E75                       		rts	
000760E2                            ; ===========================================================================
000760E2                            
000760E2                            loc_72688:
000760E2 4A2E 0026                  		tst.b	$26(a6)
000760E6 6700                       		beq.s	loc_726D6
000760E8 532E 0026                  		subq.b	#1,$26(a6)
000760EC 1D7C 0002 0025             		move.b	#2,$25(a6)
000760F2 4BEE 0070                  		lea	$70(a6),a5
000760F6 7E05                       		moveq	#5,d7
000760F8                            
000760F8                            loc_7269E:
000760F8 4A15                       		tst.b	(a5)
000760FA 6A00                       		bpl.s	loc_726AA
000760FC 532D 0009                  		subq.b	#1,9(a5)
00076100 4EBA 0000                  		jsr	sub_72CB4(pc)
00076104                            
00076104                            loc_726AA:
00076104 DAFC 0030                  		adda.w	#$30,a5
00076108 51CF FFEE                  		dbf	d7,loc_7269E
0007610C 7E02                       		moveq	#2,d7
0007610E                            
0007610E                            loc_726B4:
0007610E 4A15                       		tst.b	(a5)
00076110 6A00                       		bpl.s	loc_726CC
00076112 532D 0009                  		subq.b	#1,9(a5)
00076116 1C2D 0009                  		move.b	9(a5),d6
0007611A 0C06 0010                  		cmpi.b	#$10,d6
0007611E 6500                       		bcs.s	loc_726C8
00076120 7C0F                       		moveq	#$F,d6
00076122                            
00076122                            loc_726C8:
00076122 4EBA 0000                  		jsr	sub_7296A(pc)
00076126                            
00076126                            loc_726CC:
00076126 DAFC 0030                  		adda.w	#$30,a5
0007612A 51CF FFE2                  		dbf	d7,loc_726B4
0007612E 4E75                       		rts	
00076130                            ; ===========================================================================
00076130                            
00076130                            loc_726D6:
00076130 08AE 0002 0040             		bclr	#2,$40(a6)
00076136 422E 0024                  		clr.b	$24(a6)
0007613A 4E75                       		rts	
0007613C                            ; End of function sub_7267C
0007613C                            
0007613C                            ; ===========================================================================
0007613C                            
0007613C                            loc_726E2:				; XREF: sub_71CCA
0007613C 0815 0001                  		btst	#1,(a5)
00076140 6600                       		bne.s	locret_726FC
00076142 0815 0002                  		btst	#2,(a5)
00076146 6600                       		bne.s	locret_726FC
00076148 7028                       		moveq	#$28,d0
0007614A 122D 0001                  		move.b	1(a5),d1
0007614E 0001 00F0                  		ori.b	#-$10,d1
00076152 6000 0000                  		bra.w	sub_7272E
00076156                            ; ===========================================================================
00076156                            
00076156                            locret_726FC:
00076156 4E75                       		rts	
00076158                            
00076158                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00076158                            
00076158                            
00076158                            sub_726FE:				; XREF: sub_71CEC; sub_71D9E; Sound_ChkValue; Snd_FadeOut1
00076158 0815 0004                  		btst	#4,(a5)
0007615C 6600                       		bne.s	locret_72714
0007615E 0815 0002                  		btst	#2,(a5)
00076162 6600                       		bne.s	locret_72714
00076164                            
00076164                            loc_7270A:				; XREF: Snd_FadeOut2
00076164 7028                       		moveq	#$28,d0
00076166 122D 0001                  		move.b	1(a5),d1
0007616A 6000 0000                  		bra.w	sub_7272E
0007616E                            ; ===========================================================================
0007616E                            
0007616E                            locret_72714:
0007616E 4E75                       		rts	
00076170                            ; End of function sub_726FE
00076170                            
00076170                            ; ===========================================================================
00076170                            
00076170                            loc_72716:				; XREF: sub_72A5A
00076170 0815 0002                  		btst	#2,(a5)
00076174 6600                       		bne.s	locret_72720
00076176 6000 0000                  		bra.w	sub_72722
0007617A                            ; ===========================================================================
0007617A                            
0007617A                            locret_72720:
0007617A 4E75                       		rts	
0007617C                            
0007617C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007617C                            
0007617C                            
0007617C                            sub_72722:				; XREF: sub_71E18; sub_72C4E; sub_72CB4
0007617C 082D 0002 0001             		btst	#2,1(a5)
00076182 6600                       		bne.s	loc_7275A
00076184 D02D 0001                  		add.b	1(a5),d0
00076188                            ; End of function sub_72722
00076188                            
00076188                            
00076188                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00076188                            
00076188                            
00076188                            sub_7272E:				; XREF: loc_71E6A
00076188 1439 00A0 4000             		move.b	($A04000).l,d2
0007618E 0802 0007                  		btst	#7,d2
00076192 66F4                       		bne.s	sub_7272E
00076194 13C0 00A0 4000             		move.b	d0,($A04000).l
0007619A 4E71                       		nop	
0007619C 4E71                       		nop	
0007619E 4E71                       		nop	
000761A0                            
000761A0                            loc_72746:
000761A0 1439 00A0 4000             		move.b	($A04000).l,d2
000761A6 0802 0007                  		btst	#7,d2
000761AA 66F4                       		bne.s	loc_72746
000761AC                            
000761AC 13C1 00A0 4001             		move.b	d1,($A04001).l
000761B2 4E75                       		rts	
000761B4                            ; End of function sub_7272E
000761B4                            
000761B4                            ; ===========================================================================
000761B4                            
000761B4                            loc_7275A:				; XREF: sub_72722
000761B4 142D 0001                  		move.b	1(a5),d2
000761B8 0882 0002                  		bclr	#2,d2
000761BC D002                       		add.b	d2,d0
000761BE                            
000761BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000761BE                            
000761BE                            
000761BE                            sub_72764:				; XREF: loc_71E6A; Sound_ChkValue; sub_7256A; sub_72764
000761BE 1439 00A0 4000             		move.b	($A04000).l,d2
000761C4 0802 0007                  		btst	#7,d2
000761C8 66F4                       		bne.s	sub_72764
000761CA 13C0 00A0 4002             		move.b	d0,($A04002).l
000761D0 4E71                       		nop	
000761D2 4E71                       		nop	
000761D4 4E71                       		nop	
000761D6                            
000761D6                            loc_7277C:
000761D6 1439 00A0 4000             		move.b	($A04000).l,d2
000761DC 0802 0007                  		btst	#7,d2
000761E0 66F4                       		bne.s	loc_7277C
000761E2                            
000761E2 13C1 00A0 4003             		move.b	d1,($A04003).l
000761E8 4E75                       		rts	
000761EA                            ; End of function sub_72764
000761EA                            
000761EA                            ; ===========================================================================
000761EA 025E 0284 02AB 02D3 02FE+  word_72790:	dc.w $25E, $284, $2AB, $2D3, $2FE, $32D, $35C, $38F, $3C5
000761FC 03FF 043C 047C 0A5E 0A84+  		dc.w $3FF, $43C, $47C, $A5E, $A84, $AAB, $AD3, $AFE, $B2D
0007620E 0B5C 0B8F 0BC5 0BFF 0C3C+  		dc.w $B5C, $B8F, $BC5, $BFF, $C3C, $C7C, $125E,	$1284
0007621E 12AB 12D3 12FE 132D 135C+  		dc.w $12AB, $12D3, $12FE, $132D, $135C,	$138F, $13C5, $13FF
0007622E 143C 147C 1A5E 1A84 1AAB+  		dc.w $143C, $147C, $1A5E, $1A84, $1AAB,	$1AD3, $1AFE, $1B2D
0007623E 1B5C 1B8F 1BC5 1BFF 1C3C+  		dc.w $1B5C, $1B8F, $1BC5, $1BFF, $1C3C,	$1C7C, $225E, $2284
0007624E 22AB 22D3 22FE 232D 235C+  		dc.w $22AB, $22D3, $22FE, $232D, $235C,	$238F, $23C5, $23FF
0007625E 243C 247C 2A5E 2A84 2AAB+  		dc.w $243C, $247C, $2A5E, $2A84, $2AAB,	$2AD3, $2AFE, $2B2D
0007626E 2B5C 2B8F 2BC5 2BFF 2C3C+  		dc.w $2B5C, $2B8F, $2BC5, $2BFF, $2C3C,	$2C7C, $325E, $3284
0007627E 32AB 32D3 32FE 332D 335C+  		dc.w $32AB, $32D3, $32FE, $332D, $335C,	$338F, $33C5, $33FF
0007628E 343C 347C 3A5E 3A84 3AAB+  		dc.w $343C, $347C, $3A5E, $3A84, $3AAB,	$3AD3, $3AFE, $3B2D
0007629E 3B5C 3B8F 3BC5 3BFF 3C3C+  		dc.w $3B5C, $3B8F, $3BC5, $3BFF, $3C3C,	$3C7C
000762AA                            
000762AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000762AA                            
000762AA                            
000762AA                            sub_72850:				; XREF: sub_71B4C
000762AA 532D 000E                  		subq.b	#1,$E(a5)
000762AE 6600                       		bne.s	loc_72866
000762B0 0895 0004                  		bclr	#4,(a5)
000762B4 4EBA 0000                  		jsr	sub_72878(pc)
000762B8 4EBA 0000                  		jsr	sub_728DC(pc)
000762BC 6000 0000                  		bra.w	loc_7292E
000762C0                            ; ===========================================================================
000762C0                            
000762C0                            loc_72866:
000762C0 4EBA F45A                  		jsr	sub_71D9E(pc)
000762C4 4EBA 0000                  		jsr	sub_72926(pc)
000762C8 4EBA F47A                  		jsr	sub_71DC6(pc)
000762CC 4EBA 0000                  		jsr	sub_728E2(pc)
000762D0 4E75                       		rts	
000762D2                            ; End of function sub_72850
000762D2                            
000762D2                            
000762D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000762D2                            
000762D2                            
000762D2                            sub_72878:				; XREF: sub_72850
000762D2 0895 0001                  		bclr	#1,(a5)
000762D6 286D 0004                  		movea.l	4(a5),a4
000762DA                            
000762DA                            loc_72880:
000762DA 7A00                       		moveq	#0,d5
000762DC 1A1C                       		move.b	(a4)+,d5
000762DE 0C05 00E0                  		cmpi.b	#$E0,d5
000762E2 6500                       		bcs.s	loc_72890
000762E4 4EBA 0000                  		jsr	sub_72A5A(pc)
000762E8 60F0                       		bra.s	loc_72880
000762EA                            ; ===========================================================================
000762EA                            
000762EA                            loc_72890:
000762EA 4A05                       		tst.b	d5
000762EC 6A00                       		bpl.s	loc_728A4
000762EE 4EBA 0000                  		jsr	sub_728AC(pc)
000762F2 1A1C                       		move.b	(a4)+,d5
000762F4 4A05                       		tst.b	d5
000762F6 6A00                       		bpl.s	loc_728A4
000762F8 534C                       		subq.w	#1,a4
000762FA 6000 F3E2                  		bra.w	sub_71D60
000762FE                            ; ===========================================================================
000762FE                            
000762FE                            loc_728A4:
000762FE 4EBA F3BE                  		jsr	sub_71D40(pc)
00076302 6000 F3DA                  		bra.w	sub_71D60
00076306                            ; End of function sub_72878
00076306                            
00076306                            
00076306                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00076306                            
00076306                            
00076306                            sub_728AC:				; XREF: sub_72878
00076306 0405 0081                  		subi.b	#$81,d5
0007630A 6500                       		bcs.s	loc_728CA
0007630C DA2D 0008                  		add.b	8(a5),d5
00076310 0245 007F                  		andi.w	#$7F,d5
00076314 E34D                       		lsl.w	#1,d5
00076316 41FA 0000                  		lea	word_729CE(pc),a0
0007631A 3B70 5000 0010             		move.w	(a0,d5.w),$10(a5)
00076320 6000 F3BC                  		bra.w	sub_71D60
00076324                            ; ===========================================================================
00076324                            
00076324                            loc_728CA:
00076324 08D5 0001                  		bset	#1,(a5)
00076328 3B7C FFFF 0010             		move.w	#-1,$10(a5)
0007632E 4EBA F3AE                  		jsr	sub_71D60(pc)
00076332 6000 0000                  		bra.w	sub_729A0
00076336                            ; End of function sub_728AC
00076336                            
00076336                            
00076336                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00076336                            
00076336                            
00076336                            sub_728DC:				; XREF: sub_72850
00076336 3C2D 0010                  		move.w	$10(a5),d6
0007633A 6B00                       		bmi.s	loc_72920
0007633C                            ; End of function sub_728DC
0007633C                            
0007633C                            
0007633C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007633C                            
0007633C                            
0007633C                            sub_728E2:				; XREF: sub_72850
0007633C 102D 001E                  		move.b	$1E(a5),d0
00076340 4880                       		ext.w	d0
00076342 DC40                       		add.w	d0,d6
00076344 0815 0002                  		btst	#2,(a5)
00076348 6600                       		bne.s	locret_7291E
0007634A 0815 0001                  		btst	#1,(a5)
0007634E 6600                       		bne.s	locret_7291E
00076350 102D 0001                  		move.b	1(a5),d0
00076354 0C00 00E0                  		cmpi.b	#$E0,d0
00076358 6600                       		bne.s	loc_72904
0007635A 103C 00C0                  		move.b	#$C0,d0
0007635E                            
0007635E                            loc_72904:
0007635E 3206                       		move.w	d6,d1
00076360 0201 000F                  		andi.b	#$F,d1
00076364 8001                       		or.b	d1,d0
00076366 E84E                       		lsr.w	#4,d6
00076368 0206 003F                  		andi.b	#$3F,d6
0007636C 13C0 00C0 0011             		move.b	d0,($C00011).l
00076372 13C6 00C0 0011             		move.b	d6,($C00011).l
00076378                            
00076378                            locret_7291E:
00076378 4E75                       		rts	
0007637A                            ; End of function sub_728E2
0007637A                            
0007637A                            ; ===========================================================================
0007637A                            
0007637A                            loc_72920:				; XREF: sub_728DC
0007637A 08D5 0001                  		bset	#1,(a5)
0007637E 4E75                       		rts	
00076380                            
00076380                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00076380                            
00076380                            
00076380                            sub_72926:				; XREF: sub_72850
00076380 4A2D 000B                  		tst.b	$B(a5)
00076384 6700 0000                  		beq.w	locret_7298A
00076388                            
00076388                            loc_7292E:				; XREF: sub_72850
00076388 1C2D 0009                  		move.b	9(a5),d6
0007638C 7000                       		moveq	#0,d0
0007638E 102D 000B                  		move.b	$B(a5),d0
00076392 6700                       		beq.s	sub_7296A
00076394 2079 0007 52F2             		movea.l	(Go_PSGIndex).l,a0
0007639A 5340                       		subq.w	#1,d0
0007639C E548                       		lsl.w	#2,d0
0007639E 2070 0000                  		movea.l	(a0,d0.w),a0
000763A2 102D 000C                  		move.b	$C(a5),d0
000763A6 1030 0000                  		move.b	(a0,d0.w),d0
000763AA 522D 000C                  		addq.b	#1,$C(a5)
000763AE 0800 0007                  		btst	#7,d0
000763B2 6700                       		beq.s	loc_72960
000763B4 0C00 0080                  		cmpi.b	#$80,d0
000763B8 6700                       		beq.s	loc_7299A
000763BA                            
000763BA                            loc_72960:
000763BA DC40                       		add.w	d0,d6
000763BC 0C06 0010                  		cmpi.b	#$10,d6
000763C0 6500                       		bcs.s	sub_7296A
000763C2 7C0F                       		moveq	#$F,d6
000763C4                            ; End of function sub_72926
000763C4                            
000763C4                            
000763C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000763C4                            
000763C4                            
000763C4                            sub_7296A:				; XREF: sub_72504; sub_7267C; sub_72926
000763C4 0815 0001                  		btst	#1,(a5)
000763C8 6600                       		bne.s	locret_7298A
000763CA 0815 0002                  		btst	#2,(a5)
000763CE 6600                       		bne.s	locret_7298A
000763D0 0815 0004                  		btst	#4,(a5)
000763D4 6600                       		bne.s	loc_7298C
000763D6                            
000763D6                            loc_7297C:
000763D6 8C2D 0001                  		or.b	1(a5),d6
000763DA 0606 0010                  		addi.b	#$10,d6
000763DE 13C6 00C0 0011             		move.b	d6,($C00011).l
000763E4                            
000763E4                            locret_7298A:
000763E4 4E75                       		rts	
000763E6                            ; ===========================================================================
000763E6                            
000763E6                            loc_7298C:
000763E6 4A2D 0013                  		tst.b	$13(a5)
000763EA 67EA                       		beq.s	loc_7297C
000763EC 4A2D 0012                  		tst.b	$12(a5)
000763F0 66E4                       		bne.s	loc_7297C
000763F2 4E75                       		rts	
000763F4                            ; End of function sub_7296A
000763F4                            
000763F4                            ; ===========================================================================
000763F4                            
000763F4                            loc_7299A:				; XREF: sub_72926
000763F4 532D 000C                  		subq.b	#1,$C(a5)
000763F8 4E75                       		rts	
000763FA                            
000763FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000763FA                            
000763FA                            
000763FA                            sub_729A0:				; XREF: sub_71D9E; Sound_ChkValue; Snd_FadeOut1; sub_728AC
000763FA 0815 0002                  		btst	#2,(a5)
000763FE 6600                       		bne.s	locret_729B4
00076400                            
00076400                            loc_729A6:				; XREF: Snd_FadeOut2
00076400 102D 0001                  		move.b	1(a5),d0
00076404 0000 001F                  		ori.b	#$1F,d0
00076408 13C0 00C0 0011             		move.b	d0,($C00011).l
0007640E                            
0007640E                            locret_729B4:
0007640E 4E75                       		rts	
00076410                            ; End of function sub_729A0
00076410                            
00076410                            
00076410                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00076410                            
00076410                            
00076410                            sub_729B6:				; XREF: loc_71E7C
00076410 41F9 00C0 0011             		lea	($C00011).l,a0
00076416 10BC 009F                  		move.b	#$9F,(a0)
0007641A 10BC 00BF                  		move.b	#$BF,(a0)
0007641E 10BC 00DF                  		move.b	#$DF,(a0)
00076422 10BC 00FF                  		move.b	#$FF,(a0)
00076426 4E75                       		rts	
00076428                            ; End of function sub_729B6
00076428                            
00076428                            ; ===========================================================================
00076428 0356 0326 02F9 02CE 02A5+  word_729CE:	dc.w $356, $326, $2F9, $2CE, $2A5, $280, $25C, $23A, $21A
0007643A 01FB 01DF 01C4 01AB 0193+  		dc.w $1FB, $1DF, $1C4, $1AB, $193, $17D, $167, $153, $140
0007644C 012E 011D 010D 00FE 00EF+  		dc.w $12E, $11D, $10D, $FE, $EF, $E2, $D6, $C9,	$BE, $B4
00076460 00A9 00A0 0097 008F 0087+  		dc.w $A9, $A0, $97, $8F, $87, $7F, $78,	$71, $6B, $65
00076474 005F 005A 0055 0050 004B+  		dc.w $5F, $5A, $55, $50, $4B, $47, $43,	$40, $3C, $39
00076488 0036 0033 0030 002D 002B+  		dc.w $36, $33, $30, $2D, $2B, $28, $26,	$24, $22, $20
0007649C 001F 001D 001B 001A 0018+  		dc.w $1F, $1D, $1B, $1A, $18, $17, $16,	$15, $13, $12
000764B0 0011 0000                  		dc.w $11, 0
000764B4                            
000764B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000764B4                            
000764B4                            
000764B4                            sub_72A5A:				; XREF: sub_71C4E; sub_71CEC; sub_72878
000764B4 0445 00E0                  		subi.w	#$E0,d5
000764B8 E54D                       		lsl.w	#2,d5
000764BA 4EFB 5000                  		jmp	loc_72A64(pc,d5.w)
000764BE                            ; End of function sub_72A5A
000764BE                            
000764BE                            ; ===========================================================================
000764BE                            
000764BE                            loc_72A64:
000764BE 6000 0000                  		bra.w	loc_72ACC
000764C2                            ; ===========================================================================
000764C2 6000 0000                  		bra.w	loc_72AEC
000764C6                            ; ===========================================================================
000764C6 6000 0000                  		bra.w	loc_72AF2
000764CA                            ; ===========================================================================
000764CA 6000 0000                  		bra.w	loc_72AF8
000764CE                            ; ===========================================================================
000764CE 6000 0000                  		bra.w	loc_72B14
000764D2                            ; ===========================================================================
000764D2 6000 0000                  		bra.w	loc_72B9E
000764D6                            ; ===========================================================================
000764D6 6000 0000                  		bra.w	loc_72BA4
000764DA                            ; ===========================================================================
000764DA 6000 0000                  		bra.w	loc_72BAE
000764DE                            ; ===========================================================================
000764DE 6000 0000                  		bra.w	loc_72BB4
000764E2                            ; ===========================================================================
000764E2 6000 0000                  		bra.w	loc_72BBE
000764E6                            ; ===========================================================================
000764E6 6000 0000                  		bra.w	loc_72BC6
000764EA                            ; ===========================================================================
000764EA 6000 0000                  		bra.w	loc_72BD0
000764EE                            ; ===========================================================================
000764EE 6000 0000                  		bra.w	loc_72BE6
000764F2                            ; ===========================================================================
000764F2 6000 0000                  		bra.w	loc_72BEE
000764F6                            ; ===========================================================================
000764F6 6000 0000                  		bra.w	loc_72BF4
000764FA                            ; ===========================================================================
000764FA 6000 0000                  		bra.w	loc_72C26
000764FE                            ; ===========================================================================
000764FE 6000 0000                  		bra.w	loc_72D30
00076502                            ; ===========================================================================
00076502 6000 0000                  		bra.w	loc_72D52
00076506                            ; ===========================================================================
00076506 6000 0000                  		bra.w	loc_72D58
0007650A                            ; ===========================================================================
0007650A 6000 0000                  		bra.w	loc_72E06
0007650E                            ; ===========================================================================
0007650E 6000 0000                  		bra.w	loc_72E20
00076512                            ; ===========================================================================
00076512 6000 0000                  		bra.w	loc_72E26
00076516                            ; ===========================================================================
00076516 6000 0000                  		bra.w	loc_72E2C
0007651A                            ; ===========================================================================
0007651A 6000 0000                  		bra.w	loc_72E38
0007651E                            ; ===========================================================================
0007651E 6000 0000                  		bra.w	loc_72E52
00076522                            ; ===========================================================================
00076522 6000 0000                  		bra.w	loc_72E64
00076526                            ; ===========================================================================
00076526                            
00076526                            loc_72ACC:				; XREF: loc_72A64
00076526 121C                       		move.b	(a4)+,d1
00076528 4A2D 0001                  		tst.b	1(a5)
0007652C 6B00                       		bmi.s	locret_72AEA
0007652E 102D 000A                  		move.b	$A(a5),d0
00076532 0200 0037                  		andi.b	#$37,d0
00076536 8200                       		or.b	d0,d1
00076538 1B41 000A                  		move.b	d1,$A(a5)
0007653C 103C 00B4                  		move.b	#$B4,d0
00076540 6000 FC2E                  		bra.w	loc_72716
00076544                            ; ===========================================================================
00076544                            
00076544                            locret_72AEA:
00076544 4E75                       		rts	
00076546                            ; ===========================================================================
00076546                            
00076546                            loc_72AEC:				; XREF: loc_72A64
00076546 1B5C 001E                  		move.b	(a4)+,$1E(a5)
0007654A 4E75                       		rts	
0007654C                            ; ===========================================================================
0007654C                            
0007654C                            loc_72AF2:				; XREF: loc_72A64
0007654C 1D5C 0007                  		move.b	(a4)+,7(a6)
00076550 4E75                       		rts	
00076552                            ; ===========================================================================
00076552                            
00076552                            loc_72AF8:				; XREF: loc_72A64
00076552 7000                       		moveq	#0,d0
00076554 102D 000D                  		move.b	$D(a5),d0
00076558 2875 0000                  		movea.l	(a5,d0.w),a4
0007655C 2BBC 0000 0000 0000        		move.l	#0,(a5,d0.w)
00076564 544C                       		addq.w	#2,a4
00076566 5800                       		addq.b	#4,d0
00076568 1B40 000D                  		move.b	d0,$D(a5)
0007656C 4E75                       		rts	
0007656E                            ; ===========================================================================
0007656E                            
0007656E                            loc_72B14:				; XREF: loc_72A64
0007656E 204E                       		movea.l	a6,a0
00076570 43EE 03A0                  		lea	$3A0(a6),a1
00076574 303C 0087                  		move.w	#$87,d0
00076578                            
00076578                            loc_72B1E:
00076578 20D9                       		move.l	(a1)+,(a0)+
0007657A 51C8 FFFC                  		dbf	d0,loc_72B1E
0007657E                            
0007657E 08EE 0002 0040             		bset	#2,$40(a6)
00076584 264D                       		movea.l	a5,a3
00076586 1C3C 0028                  		move.b	#$28,d6
0007658A 9C2E 0026                  		sub.b	$26(a6),d6
0007658E 7E05                       		moveq	#5,d7
00076590 4BEE 0070                  		lea	$70(a6),a5
00076594                            
00076594                            loc_72B3A:
00076594 0815 0007                  		btst	#7,(a5)
00076598 6700                       		beq.s	loc_72B5C
0007659A 08D5 0001                  		bset	#1,(a5)
0007659E DD2D 0009                  		add.b	d6,9(a5)
000765A2 0815 0002                  		btst	#2,(a5)
000765A6 6600                       		bne.s	loc_72B5C
000765A8 7000                       		moveq	#0,d0
000765AA 102D 000B                  		move.b	$B(a5),d0
000765AE 226E 0018                  		movea.l	$18(a6),a1
000765B2 4EBA 0000                  		jsr	sub_72C4E(pc)
000765B6                            
000765B6                            loc_72B5C:
000765B6 DAFC 0030                  		adda.w	#$30,a5
000765BA 51CF FFD8                  		dbf	d7,loc_72B3A
000765BE                            
000765BE 7E02                       		moveq	#2,d7
000765C0                            
000765C0                            loc_72B66:
000765C0 0815 0007                  		btst	#7,(a5)
000765C4 6700                       		beq.s	loc_72B78
000765C6 08D5 0001                  		bset	#1,(a5)
000765CA 4EBA FE2E                  		jsr	sub_729A0(pc)
000765CE DD2D 0009                  		add.b	d6,9(a5)
000765D2                            
000765D2                            loc_72B78:
000765D2 DAFC 0030                  		adda.w	#$30,a5
000765D6 51CF FFE8                  		dbf	d7,loc_72B66
000765DA 2A4B                       		movea.l	a3,a5
000765DC 1D7C 0080 0024             		move.b	#$80,$24(a6)
000765E2 1D7C 0028 0026             		move.b	#$28,$26(a6)
000765E8 422E 0027                  		clr.b	$27(a6)
000765EC 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
000765F4 504F                       		addq.w	#8,sp
000765F6 4E75                       		rts	
000765F8                            ; ===========================================================================
000765F8                            
000765F8                            loc_72B9E:				; XREF: loc_72A64
000765F8 1B5C 0002                  		move.b	(a4)+,2(a5)
000765FC 4E75                       		rts	
000765FE                            ; ===========================================================================
000765FE                            
000765FE                            loc_72BA4:				; XREF: loc_72A64
000765FE 101C                       		move.b	(a4)+,d0
00076600 D12D 0009                  		add.b	d0,9(a5)
00076604 6000 0000                  		bra.w	sub_72CB4
00076608                            ; ===========================================================================
00076608                            
00076608                            loc_72BAE:				; XREF: loc_72A64
00076608 08D5 0004                  		bset	#4,(a5)
0007660C 4E75                       		rts	
0007660E                            ; ===========================================================================
0007660E                            
0007660E                            loc_72BB4:				; XREF: loc_72A64
0007660E 1B54 0012                  		move.b	(a4),$12(a5)
00076612 1B5C 0013                  		move.b	(a4)+,$13(a5)
00076616 4E75                       		rts	
00076618                            ; ===========================================================================
00076618                            
00076618                            loc_72BBE:				; XREF: loc_72A64
00076618 101C                       		move.b	(a4)+,d0
0007661A D12D 0008                  		add.b	d0,8(a5)
0007661E 4E75                       		rts	
00076620                            ; ===========================================================================
00076620                            
00076620                            loc_72BC6:				; XREF: loc_72A64
00076620 1D54 0002                  		move.b	(a4),2(a6)
00076624 1D5C 0001                  		move.b	(a4)+,1(a6)
00076628 4E75                       		rts	
0007662A                            ; ===========================================================================
0007662A                            
0007662A                            loc_72BD0:				; XREF: loc_72A64
0007662A 41EE 0040                  		lea	$40(a6),a0
0007662E 101C                       		move.b	(a4)+,d0
00076630 7230                       		moveq	#$30,d1
00076632 7409                       		moveq	#9,d2
00076634                            
00076634                            loc_72BDA:
00076634 1140 0002                  		move.b	d0,2(a0)
00076638 D0C1                       		adda.w	d1,a0
0007663A 51CA FFF8                  		dbf	d2,loc_72BDA
0007663E                            
0007663E 4E75                       		rts	
00076640                            ; ===========================================================================
00076640                            
00076640                            loc_72BE6:				; XREF: loc_72A64
00076640 101C                       		move.b	(a4)+,d0
00076642 D12D 0009                  		add.b	d0,9(a5)
00076646 4E75                       		rts	
00076648                            ; ===========================================================================
00076648                            
00076648                            loc_72BEE:				; XREF: loc_72A64
00076648 422E 002C                  		clr.b	$2C(a6)
0007664C 4E75                       		rts	
0007664E                            ; ===========================================================================
0007664E                            
0007664E                            loc_72BF4:				; XREF: loc_72A64
0007664E 0895 0007                  		bclr	#7,(a5)
00076652 0895 0004                  		bclr	#4,(a5)
00076656 4EBA FB00                  		jsr	sub_726FE(pc)
0007665A 4A2E 0250                  		tst.b	$250(a6)
0007665E 6B00                       		bmi.s	loc_72C22
00076660 264D                       		movea.l	a5,a3
00076662 4BEE 0100                  		lea	$100(a6),a5
00076666 226E 0018                  		movea.l	$18(a6),a1
0007666A 0895 0002                  		bclr	#2,(a5)
0007666E 08D5 0001                  		bset	#1,(a5)
00076672 102D 000B                  		move.b	$B(a5),d0
00076676 4EBA 0000                  		jsr	sub_72C4E(pc)
0007667A 2A4B                       		movea.l	a3,a5
0007667C                            
0007667C                            loc_72C22:
0007667C 504F                       		addq.w	#8,sp
0007667E 4E75                       		rts	
00076680                            ; ===========================================================================
00076680                            
00076680                            loc_72C26:				; XREF: loc_72A64
00076680 7000                       		moveq	#0,d0
00076682 101C                       		move.b	(a4)+,d0
00076684 1B40 000B                  		move.b	d0,$B(a5)
00076688 0815 0002                  		btst	#2,(a5)
0007668C 6600 0000                  		bne.w	locret_72CAA
00076690 226E 0018                  		movea.l	$18(a6),a1
00076694 4A2E 000E                  		tst.b	$E(a6)
00076698 6700                       		beq.s	sub_72C4E
0007669A 226D 0020                  		movea.l	$20(a5),a1
0007669E 4A2E 000E                  		tst.b	$E(a6)
000766A2 6B00                       		bmi.s	sub_72C4E
000766A4 226E 0020                  		movea.l	$20(a6),a1
000766A8                            
000766A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000766A8                            
000766A8                            
000766A8                            sub_72C4E:				; XREF: Snd_FadeOut1; et al
000766A8 5340                       		subq.w	#1,d0
000766AA 6B00                       		bmi.s	loc_72C5C
000766AC 323C 0019                  		move.w	#$19,d1
000766B0                            
000766B0                            loc_72C56:
000766B0 D2C1                       		adda.w	d1,a1
000766B2 51C8 FFFC                  		dbf	d0,loc_72C56
000766B6                            
000766B6                            loc_72C5C:
000766B6 1219                       		move.b	(a1)+,d1
000766B8 1B41 001F                  		move.b	d1,$1F(a5)
000766BC 1801                       		move.b	d1,d4
000766BE 103C 00B0                  		move.b	#$B0,d0
000766C2 4EBA FAB8                  		jsr	sub_72722(pc)
000766C6 45FA 0000                  		lea	byte_72D18(pc),a2
000766CA 7613                       		moveq	#$13,d3
000766CC                            
000766CC                            loc_72C72:
000766CC 101A                       		move.b	(a2)+,d0
000766CE 1219                       		move.b	(a1)+,d1
000766D0 4EBA FAAA                  		jsr	sub_72722(pc)
000766D4 51CB FFF6                  		dbf	d3,loc_72C72
000766D8 7A03                       		moveq	#3,d5
000766DA 0244 0007                  		andi.w	#7,d4
000766DE 183B 4000                  		move.b	byte_72CAC(pc,d4.w),d4
000766E2 162D 0009                  		move.b	9(a5),d3
000766E6                            
000766E6                            loc_72C8C:
000766E6 101A                       		move.b	(a2)+,d0
000766E8 1219                       		move.b	(a1)+,d1
000766EA E20C                       		lsr.b	#1,d4
000766EC 6400                       		bcc.s	loc_72C96
000766EE D203                       		add.b	d3,d1
000766F0                            
000766F0                            loc_72C96:
000766F0 4EBA FA8A                  		jsr	sub_72722(pc)
000766F4 51CD FFF0                  		dbf	d5,loc_72C8C
000766F8 103C 00B4                  		move.b	#$B4,d0
000766FC 122D 000A                  		move.b	$A(a5),d1
00076700 4EBA FA7A                  		jsr	sub_72722(pc)
00076704                            
00076704                            locret_72CAA:
00076704 4E75                       		rts	
00076706                            ; End of function sub_72C4E
00076706                            
00076706                            ; ===========================================================================
00076706 0808 0808 0A0E 0E0F        byte_72CAC:	dc.b 8,	8, 8, 8, $A, $E, $E, $F
0007670E                            
0007670E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007670E                            
0007670E                            
0007670E                            sub_72CB4:				; XREF: sub_72504; sub_7267C; loc_72BA4
0007670E 0815 0002                  		btst	#2,(a5)
00076712 6600                       		bne.s	locret_72D16
00076714 7000                       		moveq	#0,d0
00076716 102D 000B                  		move.b	$B(a5),d0
0007671A 226E 0018                  		movea.l	$18(a6),a1
0007671E 4A2E 000E                  		tst.b	$E(a6)
00076722 6700                       		beq.s	loc_72CD8
00076724 226E 0020                  		movea.l	$20(a6),a1
00076728 4A2E 000E                  		tst.b	$E(a6)
0007672C 6B00                       		bmi.s	loc_72CD8
0007672E 226E 0020                  		movea.l	$20(a6),a1
00076732                            
00076732                            loc_72CD8:
00076732 5340                       		subq.w	#1,d0
00076734 6B00                       		bmi.s	loc_72CE6
00076736 323C 0019                  		move.w	#$19,d1
0007673A                            
0007673A                            loc_72CE0:
0007673A D2C1                       		adda.w	d1,a1
0007673C 51C8 FFFC                  		dbf	d0,loc_72CE0
00076740                            
00076740                            loc_72CE6:
00076740 D2FC 0015                  		adda.w	#$15,a1
00076744 45FA 0000                  		lea	byte_72D2C(pc),a2
00076748 102D 001F                  		move.b	$1F(a5),d0
0007674C 0240 0007                  		andi.w	#7,d0
00076750 183B 00B4                  		move.b	byte_72CAC(pc,d0.w),d4
00076754 162D 0009                  		move.b	9(a5),d3
00076758 6B00                       		bmi.s	locret_72D16
0007675A 7A03                       		moveq	#3,d5
0007675C                            
0007675C                            loc_72D02:
0007675C 101A                       		move.b	(a2)+,d0
0007675E 1219                       		move.b	(a1)+,d1
00076760 E20C                       		lsr.b	#1,d4
00076762 6400                       		bcc.s	loc_72D12
00076764 D203                       		add.b	d3,d1
00076766 6500                       		bcs.s	loc_72D12
00076768 4EBA FA12                  		jsr	sub_72722(pc)
0007676C                            
0007676C                            loc_72D12:
0007676C 51CD FFEE                  		dbf	d5,loc_72D02
00076770                            
00076770                            locret_72D16:
00076770 4E75                       		rts	
00076772                            ; End of function sub_72CB4
00076772                            
00076772                            ; ===========================================================================
00076772 3038 343C 5058 545C 6068   byte_72D18:	dc.b $30, $38, $34, $3C, $50, $58, $54,	$5C, $60, $68
0007677C 646C 7078 747C 8088 848C   		dc.b $64, $6C, $70, $78, $74, $7C, $80,	$88, $84, $8C
00076786 4048 444C                  byte_72D2C:	dc.b $40, $48, $44, $4C
0007678A                            ; ===========================================================================
0007678A                            
0007678A                            loc_72D30:				; XREF: loc_72A64
0007678A 08D5 0003                  		bset	#3,(a5)
0007678E 2B4C 0014                  		move.l	a4,$14(a5)
00076792 1B5C 0018                  		move.b	(a4)+,$18(a5)
00076796 1B5C 0019                  		move.b	(a4)+,$19(a5)
0007679A 1B5C 001A                  		move.b	(a4)+,$1A(a5)
0007679E 101C                       		move.b	(a4)+,d0
000767A0 E208                       		lsr.b	#1,d0
000767A2 1B40 001B                  		move.b	d0,$1B(a5)
000767A6 426D 001C                  		clr.w	$1C(a5)
000767AA 4E75                       		rts	
000767AC                            ; ===========================================================================
000767AC                            
000767AC                            loc_72D52:				; XREF: loc_72A64
000767AC 08D5 0003                  		bset	#3,(a5)
000767B0 4E75                       		rts	
000767B2                            ; ===========================================================================
000767B2                            
000767B2                            loc_72D58:				; XREF: loc_72A64
000767B2 0895 0007                  		bclr	#7,(a5)
000767B6 0895 0004                  		bclr	#4,(a5)
000767BA 4A2D 0001                  		tst.b	1(a5)
000767BE 6B00                       		bmi.s	loc_72D74
000767C0 4A2E 0008                  		tst.b	8(a6)
000767C4 6B00 0000                  		bmi.w	loc_72E02
000767C8 4EBA F98E                  		jsr	sub_726FE(pc)
000767CC 6000                       		bra.s	loc_72D78
000767CE                            ; ===========================================================================
000767CE                            
000767CE                            loc_72D74:
000767CE 4EBA FC2A                  		jsr	sub_729A0(pc)
000767D2                            
000767D2                            loc_72D78:
000767D2 4A2E 000E                  		tst.b	$E(a6)
000767D6 6A00 0000                  		bpl.w	loc_72E02
000767DA 4216                       		clr.b	0(a6)
000767DC 7000                       		moveq	#0,d0
000767DE 102D 0001                  		move.b	1(a5),d0
000767E2 6B00                       		bmi.s	loc_72DCC
000767E4 41FA F546                  		lea	dword_722CC(pc),a0
000767E8 264D                       		movea.l	a5,a3
000767EA 0C00 0004                  		cmpi.b	#4,d0
000767EE 6600                       		bne.s	loc_72DA8
000767F0 4A2E 0340                  		tst.b	$340(a6)
000767F4 6A00                       		bpl.s	loc_72DA8
000767F6 4BEE 0340                  		lea	$340(a6),a5
000767FA 226E 0020                  		movea.l	$20(a6),a1
000767FE 6000                       		bra.s	loc_72DB8
00076800                            ; ===========================================================================
00076800                            
00076800                            loc_72DA8:
00076800 5500                       		subq.b	#2,d0
00076802 E508                       		lsl.b	#2,d0
00076804 2A70 0000                  		movea.l	(a0,d0.w),a5
00076808 4A15                       		tst.b	(a5)
0007680A 6A00                       		bpl.s	loc_72DC8
0007680C 226E 0018                  		movea.l	$18(a6),a1
00076810                            
00076810                            loc_72DB8:
00076810 0895 0002                  		bclr	#2,(a5)
00076814 08D5 0001                  		bset	#1,(a5)
00076818 102D 000B                  		move.b	$B(a5),d0
0007681C 4EBA FE8A                  		jsr	sub_72C4E(pc)
00076820                            
00076820                            loc_72DC8:
00076820 2A4B                       		movea.l	a3,a5
00076822 6000                       		bra.s	loc_72E02
00076824                            ; ===========================================================================
00076824                            
00076824                            loc_72DCC:
00076824 41EE 0370                  		lea	$370(a6),a0
00076828 4A10                       		tst.b	(a0)
0007682A 6A00                       		bpl.s	loc_72DE0
0007682C 0C00 00E0                  		cmpi.b	#$E0,d0
00076830 6700                       		beq.s	loc_72DEA
00076832 0C00 00C0                  		cmpi.b	#$C0,d0
00076836 6700                       		beq.s	loc_72DEA
00076838                            
00076838                            loc_72DE0:
00076838 41FA F4F2                  		lea	dword_722CC(pc),a0
0007683C E608                       		lsr.b	#3,d0
0007683E 2070 0000                  		movea.l	(a0,d0.w),a0
00076842                            
00076842                            loc_72DEA:
00076842 0890 0002                  		bclr	#2,(a0)
00076846 08D0 0001                  		bset	#1,(a0)
0007684A 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
00076850 6600                       		bne.s	loc_72E02
00076852 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
0007685A                            
0007685A                            loc_72E02:
0007685A 504F                       		addq.w	#8,sp
0007685C 4E75                       		rts	
0007685E                            ; ===========================================================================
0007685E                            
0007685E                            loc_72E06:				; XREF: loc_72A64
0007685E 1B7C 00E0 0001             		move.b	#$E0,1(a5)
00076864 1B5C 001F                  		move.b	(a4)+,$1F(a5)
00076868 0815 0002                  		btst	#2,(a5)
0007686C 6600                       		bne.s	locret_72E1E
0007686E 13EC FFFF 00C0 0011        		move.b	-1(a4),($C00011).l
00076876                            
00076876                            locret_72E1E:
00076876 4E75                       		rts	
00076878                            ; ===========================================================================
00076878                            
00076878                            loc_72E20:				; XREF: loc_72A64
00076878 0895 0003                  		bclr	#3,(a5)
0007687C 4E75                       		rts	
0007687E                            ; ===========================================================================
0007687E                            
0007687E                            loc_72E26:				; XREF: loc_72A64
0007687E 1B5C 000B                  		move.b	(a4)+,$B(a5)
00076882 4E75                       		rts	
00076884                            ; ===========================================================================
00076884                            
00076884                            loc_72E2C:				; XREF: loc_72A64
00076884 101C                       		move.b	(a4)+,d0
00076886 E148                       		lsl.w	#8,d0
00076888 101C                       		move.b	(a4)+,d0
0007688A D8C0                       		adda.w	d0,a4
0007688C 534C                       		subq.w	#1,a4
0007688E 4E75                       		rts	
00076890                            ; ===========================================================================
00076890                            
00076890                            loc_72E38:				; XREF: loc_72A64
00076890 7000                       		moveq	#0,d0
00076892 101C                       		move.b	(a4)+,d0
00076894 121C                       		move.b	(a4)+,d1
00076896 4A35 0024                  		tst.b	$24(a5,d0.w)
0007689A 6600                       		bne.s	loc_72E48
0007689C 1B81 0024                  		move.b	d1,$24(a5,d0.w)
000768A0                            
000768A0                            loc_72E48:
000768A0 5335 0024                  		subq.b	#1,$24(a5,d0.w)
000768A4 66DE                       		bne.s	loc_72E2C
000768A6 544C                       		addq.w	#2,a4
000768A8 4E75                       		rts	
000768AA                            ; ===========================================================================
000768AA                            
000768AA                            loc_72E52:				; XREF: loc_72A64
000768AA 7000                       		moveq	#0,d0
000768AC 102D 000D                  		move.b	$D(a5),d0
000768B0 5900                       		subq.b	#4,d0
000768B2 2B8C 0000                  		move.l	a4,(a5,d0.w)
000768B6 1B40 000D                  		move.b	d0,$D(a5)
000768BA 60C8                       		bra.s	loc_72E2C
000768BC                            ; ===========================================================================
000768BC                            
000768BC                            loc_72E64:				; XREF: loc_72A64
000768BC 103C 0088                  		move.b	#$88,d0
000768C0 123C 000F                  		move.b	#$F,d1
000768C4 4EBA F8C2                  		jsr	sub_7272E(pc)
000768C8 103C 008C                  		move.b	#$8C,d0
000768CC 123C 000F                  		move.b	#$F,d1
000768D0 6000 F8B6                  		bra.w	sub_7272E
000768D4                            ; ===========================================================================
000768D4                            Kos_Z80:	incbin	sound\z80_1.bin
00076984 0000                       		dc.w ((SegaPCM&$FF)<<8)+((SegaPCM&$FF00)>>8)
00076986 21                         		dc.b $21
00076987 0000                       		dc.w (((EndOfRom-SegaPCM)&$FF)<<8)+(((EndOfRom-SegaPCM)&$FF00)>>8)
00076989                            		incbin	sound\z80_2.bin
00078034                            		even
00078034                            Music81:	incbin	sound\jahl.bin ; 	Green Hill Act 1
0007E834                            		even
0007E834                            Music82:	incbin	sound\music82.bin ; Labyrinth Act 1
000880D2                            		even
000880D2                            Music83:	incbin	sound\music83.bin ; Marble Act 1
0008BCF2 00                         		even
0008BCF2                            Music84:	include	sound\music84.asm ; Star Light Act 1
0008BCF2                            music84_Header:
0008BCF2 =00000001                  smpsHeaderStartSong = 1
0008BCF2 0000                       	smpsHeaderVoice     music84_Voices
0008BCF4 0603                       	smpsHeaderChan      $06, $03
0008BCF6 0205                       	smpsHeaderTempo     $02, $05
0008BCF8                            
0008BCFC 0000 0000                  	smpsHeaderFM        music84_FM1,	$00, $00
0008BD00 0000 0000                  	smpsHeaderFM        music84_FM2,	$00, $00
0008BD04 0000 0000                  	smpsHeaderFM        music84_FM3,	$00, $00
0008BD08 0000 0000                  	smpsHeaderFM        music84_FM4,	$00, $00
0008BD0C 0000 0000                  	smpsHeaderFM        music84_FM5,	$00, $00
0008BD10 0000 0000 0000             	smpsHeaderPSG       music84_PSG1,	$00, $00, $00, $00
0008BD16 0000 0000 0000             	smpsHeaderPSG       music84_PSG2,	$00, $00, $00, $00
0008BD1C 0000 0000 0000             	smpsHeaderPSG       music84_PSG3,	$00, $00, $00, $00
0008BD22                            
0008BD22                            ; FM1 Data
0008BD22                            music84_FM1:
0008BD22 E0C0                       	smpsPan             panCenter, $00
0008BD26 E107                       	smpsAlterNote       $07
0008BD28 9B03 8007                  	dc.b	nD2, $03, nRst, $07
0008BD2C E106                       	smpsAlterNote       $06
0008BD2E 9903 800B                  	dc.b	nC2, $03, nRst, $0B
0008BD32 E10B                       	smpsAlterNote       $0B
0008BD34 9606 800B A201             	dc.b	nA1, $06, nRst, $0B, nA2, $01
0008BD3A E10C                       	smpsAlterNote       $0C
0008BD3C E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
0008BD3F E10B                       	smpsAlterNote       $0B
0008BD41 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
0008BD44 E109                       	smpsAlterNote       $09
0008BD46 E7A0 029E 01               	dc.b	smpsNoAttack, nG2, $02, nF2, $01
0008BD4B E108                       	smpsAlterNote       $08
0008BD4D 8001                       	dc.b	nRst, $01
0008BD4F E10B                       	smpsAlterNote       $0B
0008BD51 9603 A203 8001             	dc.b	nA1, $03, nA2, $03, nRst, $01
0008BD57 E107                       	smpsAlterNote       $07
0008BD59 9B03                       	dc.b	nD2, $03
0008BD5B                            
0008BD5B                            music84_Jump04:
0008BD5B E107                       	smpsAlterNote       $07
0008BD5D 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008BD61 E10B                       	smpsAlterNote       $0B
0008BD63 A202 8001                  	dc.b	nA2, $02, nRst, $01
0008BD67 E107                       	smpsAlterNote       $07
0008BD69 9B03                       	dc.b	nD2, $03
0008BD6B E11A                       	smpsAlterNote       $1A
0008BD6D A301                       	dc.b	nBb2, $01
0008BD6F E1F2                       	smpsAlterNote       $F2
0008BD71 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008BD74 E1FF                       	smpsAlterNote       $FF
0008BD76 E701                       	dc.b	smpsNoAttack, $01
0008BD78 E111                       	smpsAlterNote       $11
0008BD7A E701                       	dc.b	smpsNoAttack, $01
0008BD7C E106                       	smpsAlterNote       $06
0008BD7E E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
0008BD81 E107                       	smpsAlterNote       $07
0008BD83 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008BD87 E108                       	smpsAlterNote       $08
0008BD89 9C06 8001 9C02 8001        	dc.b	nEb2, $06, nRst, $01, nEb2, $02, nRst, $01
0008BD91 E109                       	smpsAlterNote       $09
0008BD93 A003                       	dc.b	nG2, $03
0008BD95 E10C                       	smpsAlterNote       $0C
0008BD97 A303 8001                  	dc.b	nBb2, $03, nRst, $01
0008BD9B E1FD                       	smpsAlterNote       $FD
0008BD9D A401                       	dc.b	nB2, $01
0008BD9F E109                       	smpsAlterNote       $09
0008BDA1 E701                       	dc.b	smpsNoAttack, $01
0008BDA3 E106                       	smpsAlterNote       $06
0008BDA5 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008BDA8 E109                       	smpsAlterNote       $09
0008BDAA A007                       	dc.b	nG2, $07
0008BDAC E108                       	smpsAlterNote       $08
0008BDAE 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
0008BDB2 E107                       	smpsAlterNote       $07
0008BDB4 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
0008BDBA E10B                       	smpsAlterNote       $0B
0008BDBC A203 8001                  	dc.b	nA2, $03, nRst, $01
0008BDC0 E107                       	smpsAlterNote       $07
0008BDC2 9B03                       	dc.b	nD2, $03
0008BDC4 E11A                       	smpsAlterNote       $1A
0008BDC6 A301                       	dc.b	nBb2, $01
0008BDC8 E1F9                       	smpsAlterNote       $F9
0008BDCA E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008BDCD E107                       	smpsAlterNote       $07
0008BDCF E701                       	dc.b	smpsNoAttack, $01
0008BDD1 E111                       	smpsAlterNote       $11
0008BDD3 E701                       	dc.b	smpsNoAttack, $01
0008BDD5 E106                       	smpsAlterNote       $06
0008BDD7 E7A5 0280 01               	dc.b	smpsNoAttack, nC3, $02, nRst, $01
0008BDDC E107                       	smpsAlterNote       $07
0008BDDE 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
0008BDE6 E1EC                       	smpsAlterNote       $EC
0008BDE8 A101                       	dc.b	nAb2, $01
0008BDEA E108                       	smpsAlterNote       $08
0008BDEC E701                       	dc.b	smpsNoAttack, $01
0008BDEE E116                       	smpsAlterNote       $16
0008BDF0 E701                       	dc.b	smpsNoAttack, $01
0008BDF2 E1F5                       	smpsAlterNote       $F5
0008BDF4 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
0008BDF7 E10B                       	smpsAlterNote       $0B
0008BDF9 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008BDFD E107                       	smpsAlterNote       $07
0008BDFF 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
0008BE05 E109                       	smpsAlterNote       $09
0008BE07 9E03 8001                  	dc.b	nF2, $03, nRst, $01
0008BE0B E10B                       	smpsAlterNote       $0B
0008BE0D 9603                       	dc.b	nA1, $03
0008BE0F E107                       	smpsAlterNote       $07
0008BE11 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
0008BE17 E10B                       	smpsAlterNote       $0B
0008BE19 A203 8001                  	dc.b	nA2, $03, nRst, $01
0008BE1D E107                       	smpsAlterNote       $07
0008BE1F 9B02 8001                  	dc.b	nD2, $02, nRst, $01
0008BE23 E11A                       	smpsAlterNote       $1A
0008BE25 A301                       	dc.b	nBb2, $01
0008BE27 E1F9                       	smpsAlterNote       $F9
0008BE29 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008BE2C E107                       	smpsAlterNote       $07
0008BE2E E701                       	dc.b	smpsNoAttack, $01
0008BE30 E1FB                       	smpsAlterNote       $FB
0008BE32 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008BE35 E106                       	smpsAlterNote       $06
0008BE37 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008BE3B E107                       	smpsAlterNote       $07
0008BE3D 9B03                       	dc.b	nD2, $03
0008BE3F E108                       	smpsAlterNote       $08
0008BE41 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
0008BE47 E109                       	smpsAlterNote       $09
0008BE49 A002 8001                  	dc.b	nG2, $02, nRst, $01
0008BE4D E10C                       	smpsAlterNote       $0C
0008BE4F A303                       	dc.b	nBb2, $03
0008BE51 E1F0                       	smpsAlterNote       $F0
0008BE53 A401                       	dc.b	nB2, $01
0008BE55 E1FD                       	smpsAlterNote       $FD
0008BE57 E701 E7A5 01               	dc.b	smpsNoAttack, $01, smpsNoAttack, nC3, $01
0008BE5C E106                       	smpsAlterNote       $06
0008BE5E 8001                       	dc.b	nRst, $01
0008BE60 E109                       	smpsAlterNote       $09
0008BE62 A006 8001                  	dc.b	nG2, $06, nRst, $01
0008BE66 E108                       	smpsAlterNote       $08
0008BE68 9C02 8001                  	dc.b	nEb2, $02, nRst, $01
0008BE6C E107                       	smpsAlterNote       $07
0008BE6E 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0008BE74 E10B                       	smpsAlterNote       $0B
0008BE76 A203                       	dc.b	nA2, $03
0008BE78 E107                       	smpsAlterNote       $07
0008BE7A 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008BE7E E1F2                       	smpsAlterNote       $F2
0008BE80 A401                       	dc.b	nB2, $01
0008BE82 E1FF                       	smpsAlterNote       $FF
0008BE84 E701                       	dc.b	smpsNoAttack, $01
0008BE86 E107                       	smpsAlterNote       $07
0008BE88 E701                       	dc.b	smpsNoAttack, $01
0008BE8A E1FB                       	smpsAlterNote       $FB
0008BE8C E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008BE8F E106                       	smpsAlterNote       $06
0008BE91 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008BE95 E107                       	smpsAlterNote       $07
0008BE97 9B02 8001 A706 8001 9B03   	dc.b	nD2, $02, nRst, $01, nD3, $06, nRst, $01, nD2, $03
0008BEA1 E117                       	smpsAlterNote       $17
0008BEA3 A001                       	dc.b	nG2, $01
0008BEA5 E1FA                       	smpsAlterNote       $FA
0008BEA7 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
0008BEAA E108                       	smpsAlterNote       $08
0008BEAC E701                       	dc.b	smpsNoAttack, $01
0008BEAE E1E7                       	smpsAlterNote       $E7
0008BEB0 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
0008BEB3 E103                       	smpsAlterNote       $03
0008BEB5 E701                       	dc.b	smpsNoAttack, $01
0008BEB7 E10B                       	smpsAlterNote       $0B
0008BEB9 E702                       	dc.b	smpsNoAttack, $02
0008BEBB E107                       	smpsAlterNote       $07
0008BEBD 9B03 8001 A702 8001        	dc.b	nD2, $03, nRst, $01, nD3, $02, nRst, $01
0008BEC5 E106                       	smpsAlterNote       $06
0008BEC7 9903 A503 8001             	dc.b	nC2, $03, nC3, $03, nRst, $01
0008BECD E10C                       	smpsAlterNote       $0C
0008BECF 9703 9703 8001             	dc.b	nBb1, $03, nBb1, $03, nRst, $01
0008BED5 E109                       	smpsAlterNote       $09
0008BED7 9E03                       	dc.b	nF2, $03
0008BED9 E10C                       	smpsAlterNote       $0C
0008BEDB 9703 8001                  	dc.b	nBb1, $03, nRst, $01
0008BEDF E1EA                       	smpsAlterNote       $EA
0008BEE1 A201                       	dc.b	nA2, $01
0008BEE3 E106                       	smpsAlterNote       $06
0008BEE5 E701                       	dc.b	smpsNoAttack, $01
0008BEE7 E1E2                       	smpsAlterNote       $E2
0008BEE9 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
0008BEEC E1F0                       	smpsAlterNote       $F0
0008BEEE E701                       	dc.b	smpsNoAttack, $01
0008BEF0 E10C                       	smpsAlterNote       $0C
0008BEF2 E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
0008BEFE E116                       	smpsAlterNote       $16
0008BF00 9C01                       	dc.b	nEb2, $01
0008BF02 E105                       	smpsAlterNote       $05
0008BF04 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
0008BF07 E1F1                       	smpsAlterNote       $F1
0008BF09 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
0008BF0C E1FF                       	smpsAlterNote       $FF
0008BF0E E701                       	dc.b	smpsNoAttack, $01
0008BF10 E109                       	smpsAlterNote       $09
0008BF12 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008BF16 E10C                       	smpsAlterNote       $0C
0008BF18 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $01
0008BF24 9702 8001 9703             	dc.b	nBb1, $02, nRst, $01, nBb1, $03
0008BF2A E109                       	smpsAlterNote       $09
0008BF2C 9E03 8001                  	dc.b	nF2, $03, nRst, $01
0008BF30 E10C                       	smpsAlterNote       $0C
0008BF32 9703                       	dc.b	nBb1, $03
0008BF34 E11A                       	smpsAlterNote       $1A
0008BF36 A101                       	dc.b	nAb2, $01
0008BF38 E1FB                       	smpsAlterNote       $FB
0008BF3A E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
0008BF3D E10A                       	smpsAlterNote       $0A
0008BF3F E701                       	dc.b	smpsNoAttack, $01
0008BF41 E1E8                       	smpsAlterNote       $E8
0008BF43 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
0008BF46 E106                       	smpsAlterNote       $06
0008BF48 E701                       	dc.b	smpsNoAttack, $01
0008BF4A E10C                       	smpsAlterNote       $0C
0008BF4C E702 9703 8001 A306 9703+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nBb1, $03, nRst, $01
0008BF58 E1F9                       	smpsAlterNote       $F9
0008BF5A 9D01                       	dc.b	nE2, $01
0008BF5C E108                       	smpsAlterNote       $08
0008BF5E E701                       	dc.b	smpsNoAttack, $01
0008BF60 E1F6                       	smpsAlterNote       $F6
0008BF62 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
0008BF65 E109                       	smpsAlterNote       $09
0008BF67 E703 8001                  	dc.b	smpsNoAttack, $03, nRst, $01
0008BF6B E10C                       	smpsAlterNote       $0C
0008BF6D 9703 9703 8001 A302 8001+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $02, nRst, $01, nBb1, $03
0008BF79 E108                       	smpsAlterNote       $08
0008BF7B 9D03 8001 9D03             	dc.b	nE2, $03, nRst, $01, nE2, $03
0008BF81 E106                       	smpsAlterNote       $06
0008BF83 A403 8001                  	dc.b	nB2, $03, nRst, $01
0008BF87 E108                       	smpsAlterNote       $08
0008BF89 9D03                       	dc.b	nE2, $03
0008BF8B E1EB                       	smpsAlterNote       $EB
0008BF8D A801                       	dc.b	nEb3, $01
0008BF8F E109                       	smpsAlterNote       $09
0008BF91 E701                       	dc.b	smpsNoAttack, $01
0008BF93 E1FA                       	smpsAlterNote       $FA
0008BF95 E7A9 01                    	dc.b	smpsNoAttack, nE3, $01
0008BF98 E108                       	smpsAlterNote       $08
0008BF9A E703 8001 9D03 A907 9D03+  	dc.b	smpsNoAttack, $03, nRst, $01, nE2, $03, nE3, $07, nE2, $03, nRst, $01
0008BFA6 E1E9                       	smpsAlterNote       $E9
0008BFA8 A301                       	dc.b	nBb2, $01
0008BFAA E107                       	smpsAlterNote       $07
0008BFAC E701                       	dc.b	smpsNoAttack, $01
0008BFAE E1F0                       	smpsAlterNote       $F0
0008BFB0 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008BFB3 E1F7                       	smpsAlterNote       $F7
0008BFB5 E701                       	dc.b	smpsNoAttack, $01
0008BFB7 E107                       	smpsAlterNote       $07
0008BFB9 E701                       	dc.b	smpsNoAttack, $01
0008BFBB E106                       	smpsAlterNote       $06
0008BFBD E701                       	dc.b	smpsNoAttack, $01
0008BFBF E108                       	smpsAlterNote       $08
0008BFC1 9D03 8001 9D03             	dc.b	nE2, $03, nRst, $01, nE2, $03
0008BFC7 E106                       	smpsAlterNote       $06
0008BFC9 A403 8001                  	dc.b	nB2, $03, nRst, $01
0008BFCD E108                       	smpsAlterNote       $08
0008BFCF 9D03                       	dc.b	nE2, $03
0008BFD1 E10B                       	smpsAlterNote       $0B
0008BFD3 9603 8001 9602 8001        	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01
0008BFDB E108                       	smpsAlterNote       $08
0008BFDD 9D03                       	dc.b	nE2, $03
0008BFDF E10B                       	smpsAlterNote       $0B
0008BFE1 9603 8001                  	dc.b	nA1, $03, nRst, $01
0008BFE5 E113                       	smpsAlterNote       $13
0008BFE7 A001                       	dc.b	nG2, $01
0008BFE9 E118                       	smpsAlterNote       $18
0008BFEB E701                       	dc.b	smpsNoAttack, $01
0008BFED E1E9                       	smpsAlterNote       $E9
0008BFEF E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
0008BFF2 E1F3                       	smpsAlterNote       $F3
0008BFF4 E701                       	dc.b	smpsNoAttack, $01
0008BFF6 E1FD                       	smpsAlterNote       $FD
0008BFF8 E701                       	dc.b	smpsNoAttack, $01
0008BFFA E102                       	smpsAlterNote       $02
0008BFFC E701                       	dc.b	smpsNoAttack, $01
0008BFFE E107                       	smpsAlterNote       $07
0008C000 8001                       	dc.b	nRst, $01
0008C002 E10B                       	smpsAlterNote       $0B
0008C004 9603                       	dc.b	nA1, $03
0008C006 E10C                       	smpsAlterNote       $0C
0008C008 9706 8001 9703             	dc.b	nBb1, $06, nRst, $01, nBb1, $03
0008C00E E10B                       	smpsAlterNote       $0B
0008C010 9603 8001 A206 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA2, $06, nRst, $01, nA1, $03, nA2, $03
0008C01C 8001 9602 8001             	dc.b	nRst, $01, nA1, $02, nRst, $01
0008C022 E107                       	smpsAlterNote       $07
0008C024 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0008C02A E10B                       	smpsAlterNote       $0B
0008C02C A203                       	dc.b	nA2, $03
0008C02E E107                       	smpsAlterNote       $07
0008C030 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008C034 E1F2                       	smpsAlterNote       $F2
0008C036 A401                       	dc.b	nB2, $01
0008C038 E1FF                       	smpsAlterNote       $FF
0008C03A E701                       	dc.b	smpsNoAttack, $01
0008C03C E107                       	smpsAlterNote       $07
0008C03E E701                       	dc.b	smpsNoAttack, $01
0008C040 E1FB                       	smpsAlterNote       $FB
0008C042 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008C045 E106                       	smpsAlterNote       $06
0008C047 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008C04B E107                       	smpsAlterNote       $07
0008C04D 9B02 8001                  	dc.b	nD2, $02, nRst, $01
0008C051 E108                       	smpsAlterNote       $08
0008C053 9C06 8001 9C03             	dc.b	nEb2, $06, nRst, $01, nEb2, $03
0008C059 E109                       	smpsAlterNote       $09
0008C05B A003 8001                  	dc.b	nG2, $03, nRst, $01
0008C05F E10C                       	smpsAlterNote       $0C
0008C061 A302 8001                  	dc.b	nBb2, $02, nRst, $01
0008C065 E1F0                       	smpsAlterNote       $F0
0008C067 A401                       	dc.b	nB2, $01
0008C069 E109                       	smpsAlterNote       $09
0008C06B E701                       	dc.b	smpsNoAttack, $01
0008C06D E106                       	smpsAlterNote       $06
0008C06F E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008C072 E109                       	smpsAlterNote       $09
0008C074 A007                       	dc.b	nG2, $07
0008C076 E108                       	smpsAlterNote       $08
0008C078 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
0008C07C E107                       	smpsAlterNote       $07
0008C07E 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0008C084 E10B                       	smpsAlterNote       $0B
0008C086 A202 8001                  	dc.b	nA2, $02, nRst, $01
0008C08A E107                       	smpsAlterNote       $07
0008C08C 9B03                       	dc.b	nD2, $03
0008C08E E11A                       	smpsAlterNote       $1A
0008C090 A301                       	dc.b	nBb2, $01
0008C092 E1F2                       	smpsAlterNote       $F2
0008C094 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008C097 E1FF                       	smpsAlterNote       $FF
0008C099 E701                       	dc.b	smpsNoAttack, $01
0008C09B E111                       	smpsAlterNote       $11
0008C09D E701                       	dc.b	smpsNoAttack, $01
0008C09F E106                       	smpsAlterNote       $06
0008C0A1 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
0008C0A4 E107                       	smpsAlterNote       $07
0008C0A6 9B03 8001 A706 8001 9B02+  	dc.b	nD2, $03, nRst, $01, nD3, $06, nRst, $01, nD2, $02, nRst, $01
0008C0B2 E117                       	smpsAlterNote       $17
0008C0B4 A001                       	dc.b	nG2, $01
0008C0B6 E1FA                       	smpsAlterNote       $FA
0008C0B8 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
0008C0BB E116                       	smpsAlterNote       $16
0008C0BD E701                       	dc.b	smpsNoAttack, $01
0008C0BF E1F5                       	smpsAlterNote       $F5
0008C0C1 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
0008C0C4 E103                       	smpsAlterNote       $03
0008C0C6 E701                       	dc.b	smpsNoAttack, $01
0008C0C8 E10B                       	smpsAlterNote       $0B
0008C0CA E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008C0CE E107                       	smpsAlterNote       $07
0008C0D0 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0008C0D6 E109                       	smpsAlterNote       $09
0008C0D8 9E03                       	dc.b	nF2, $03
0008C0DA E10B                       	smpsAlterNote       $0B
0008C0DC 9603 8001                  	dc.b	nA1, $03, nRst, $01
0008C0E0 E107                       	smpsAlterNote       $07
0008C0E2 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
0008C0E8 E10B                       	smpsAlterNote       $0B
0008C0EA A203 8001                  	dc.b	nA2, $03, nRst, $01
0008C0EE E107                       	smpsAlterNote       $07
0008C0F0 9B03                       	dc.b	nD2, $03
0008C0F2 E11A                       	smpsAlterNote       $1A
0008C0F4 A301                       	dc.b	nBb2, $01
0008C0F6 E1F9                       	smpsAlterNote       $F9
0008C0F8 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008C0FB E107                       	smpsAlterNote       $07
0008C0FD E701                       	dc.b	smpsNoAttack, $01
0008C0FF E111                       	smpsAlterNote       $11
0008C101 E701                       	dc.b	smpsNoAttack, $01
0008C103 E106                       	smpsAlterNote       $06
0008C105 E7A5 0280 01               	dc.b	smpsNoAttack, nC3, $02, nRst, $01
0008C10A E107                       	smpsAlterNote       $07
0008C10C 9B03                       	dc.b	nD2, $03
0008C10E E108                       	smpsAlterNote       $08
0008C110 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
0008C116 E109                       	smpsAlterNote       $09
0008C118 A003                       	dc.b	nG2, $03
0008C11A E10C                       	smpsAlterNote       $0C
0008C11C A303 8001                  	dc.b	nBb2, $03, nRst, $01
0008C120 E1FD                       	smpsAlterNote       $FD
0008C122 A401 E7A5 01               	dc.b	nB2, $01, smpsNoAttack, nC3, $01
0008C127 E106                       	smpsAlterNote       $06
0008C129 8001                       	dc.b	nRst, $01
0008C12B E109                       	smpsAlterNote       $09
0008C12D A006 8001                  	dc.b	nG2, $06, nRst, $01
0008C131 E108                       	smpsAlterNote       $08
0008C133 9C03                       	dc.b	nEb2, $03
0008C135 E107                       	smpsAlterNote       $07
0008C137 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
0008C13D E10B                       	smpsAlterNote       $0B
0008C13F A203 8001                  	dc.b	nA2, $03, nRst, $01
0008C143 E107                       	smpsAlterNote       $07
0008C145 9B02 8001                  	dc.b	nD2, $02, nRst, $01
0008C149 E11A                       	smpsAlterNote       $1A
0008C14B A301                       	dc.b	nBb2, $01
0008C14D E1F9                       	smpsAlterNote       $F9
0008C14F E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008C152 E107                       	smpsAlterNote       $07
0008C154 E701                       	dc.b	smpsNoAttack, $01
0008C156 E1FB                       	smpsAlterNote       $FB
0008C158 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008C15B E106                       	smpsAlterNote       $06
0008C15D E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008C161 E107                       	smpsAlterNote       $07
0008C163 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
0008C16B E1EC                       	smpsAlterNote       $EC
0008C16D A101                       	dc.b	nAb2, $01
0008C16F E108                       	smpsAlterNote       $08
0008C171 E701                       	dc.b	smpsNoAttack, $01
0008C173 E1E7                       	smpsAlterNote       $E7
0008C175 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
0008C178 E1F5                       	smpsAlterNote       $F5
0008C17A E701                       	dc.b	smpsNoAttack, $01
0008C17C E10B                       	smpsAlterNote       $0B
0008C17E E702                       	dc.b	smpsNoAttack, $02
0008C180 E107                       	smpsAlterNote       $07
0008C182 9B03 8001 A703             	dc.b	nD2, $03, nRst, $01, nD3, $03
0008C188 E106                       	smpsAlterNote       $06
0008C18A 9903 8001 A503             	dc.b	nC2, $03, nRst, $01, nC3, $03
0008C190 E10C                       	smpsAlterNote       $0C
0008C192 9703 8001 9702 8001        	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01
0008C19A E109                       	smpsAlterNote       $09
0008C19C 9E03                       	dc.b	nF2, $03
0008C19E E10C                       	smpsAlterNote       $0C
0008C1A0 9703 8001                  	dc.b	nBb1, $03, nRst, $01
0008C1A4 E1EA                       	smpsAlterNote       $EA
0008C1A6 A201                       	dc.b	nA2, $01
0008C1A8 E106                       	smpsAlterNote       $06
0008C1AA E701                       	dc.b	smpsNoAttack, $01
0008C1AC E114                       	smpsAlterNote       $14
0008C1AE E701                       	dc.b	smpsNoAttack, $01
0008C1B0 E1F0                       	smpsAlterNote       $F0
0008C1B2 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
0008C1B5 E10C                       	smpsAlterNote       $0C
0008C1B7 E702 8001 9702 8001 A306+  	dc.b	smpsNoAttack, $02, nRst, $01, nBb1, $02, nRst, $01, nBb2, $06, nRst, $01
0008C1C3 9703                       	dc.b	nBb1, $03
0008C1C5 E116                       	smpsAlterNote       $16
0008C1C7 9C01                       	dc.b	nEb2, $01
0008C1C9 E105                       	smpsAlterNote       $05
0008C1CB E79D 01                    	dc.b	smpsNoAttack, nE2, $01
0008C1CE E113                       	smpsAlterNote       $13
0008C1D0 E701                       	dc.b	smpsNoAttack, $01
0008C1D2 E1FF                       	smpsAlterNote       $FF
0008C1D4 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
0008C1D7 E109                       	smpsAlterNote       $09
0008C1D9 E703                       	dc.b	smpsNoAttack, $03
0008C1DB E10C                       	smpsAlterNote       $0C
0008C1DD 9703 8001 9702 8001 A303+  	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb2, $03, nBb1, $03
0008C1E9 8001 9703 9703 8001        	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
0008C1F1 E109                       	smpsAlterNote       $09
0008C1F3 9E03                       	dc.b	nF2, $03
0008C1F5 E10C                       	smpsAlterNote       $0C
0008C1F7 9703 8001                  	dc.b	nBb1, $03, nRst, $01
0008C1FB E1EC                       	smpsAlterNote       $EC
0008C1FD A201                       	dc.b	nA2, $01
0008C1FF E10A                       	smpsAlterNote       $0A
0008C201 E701                       	dc.b	smpsNoAttack, $01
0008C203 E1E8                       	smpsAlterNote       $E8
0008C205 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
0008C208 E1F7                       	smpsAlterNote       $F7
0008C20A E701                       	dc.b	smpsNoAttack, $01
0008C20C E10C                       	smpsAlterNote       $0C
0008C20E E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
0008C21A E1EA                       	smpsAlterNote       $EA
0008C21C 9D01                       	dc.b	nE2, $01
0008C21E E108                       	smpsAlterNote       $08
0008C220 E701                       	dc.b	smpsNoAttack, $01
0008C222 E1F6                       	smpsAlterNote       $F6
0008C224 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
0008C227 E105                       	smpsAlterNote       $05
0008C229 E701                       	dc.b	smpsNoAttack, $01
0008C22B E109                       	smpsAlterNote       $09
0008C22D E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008C231 E10C                       	smpsAlterNote       $0C
0008C233 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $01
0008C23F E108                       	smpsAlterNote       $08
0008C241 9D02 8001 9D03             	dc.b	nE2, $02, nRst, $01, nE2, $03
0008C247 E106                       	smpsAlterNote       $06
0008C249 A403 8001                  	dc.b	nB2, $03, nRst, $01
0008C24D E108                       	smpsAlterNote       $08
0008C24F 9D03                       	dc.b	nE2, $03
0008C251 E1EB                       	smpsAlterNote       $EB
0008C253 A801                       	dc.b	nEb3, $01
0008C255 E109                       	smpsAlterNote       $09
0008C257 E701                       	dc.b	smpsNoAttack, $01
0008C259 E1EB                       	smpsAlterNote       $EB
0008C25B E7A9 01                    	dc.b	smpsNoAttack, nE3, $01
0008C25E E108                       	smpsAlterNote       $08
0008C260 E704 9D03 8001 A906 9D03+  	dc.b	smpsNoAttack, $04, nE2, $03, nRst, $01, nE3, $06, nE2, $03, nRst, $01
0008C26C E1E9                       	smpsAlterNote       $E9
0008C26E A301                       	dc.b	nBb2, $01
0008C270 E1F8                       	smpsAlterNote       $F8
0008C272 E701                       	dc.b	smpsNoAttack, $01
0008C274 E116                       	smpsAlterNote       $16
0008C276 E701                       	dc.b	smpsNoAttack, $01
0008C278 E1F7                       	smpsAlterNote       $F7
0008C27A E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008C27D E107                       	smpsAlterNote       $07
0008C27F E701                       	dc.b	smpsNoAttack, $01
0008C281 E1EE                       	smpsAlterNote       $EE
0008C283 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008C286 E106                       	smpsAlterNote       $06
0008C288 8001                       	dc.b	nRst, $01
0008C28A E108                       	smpsAlterNote       $08
0008C28C 9D03 9D03 8001             	dc.b	nE2, $03, nE2, $03, nRst, $01
0008C292 E106                       	smpsAlterNote       $06
0008C294 A402 8001                  	dc.b	nB2, $02, nRst, $01
0008C298 E108                       	smpsAlterNote       $08
0008C29A 9D03                       	dc.b	nE2, $03
0008C29C E10B                       	smpsAlterNote       $0B
0008C29E 9603 8001 9603             	dc.b	nA1, $03, nRst, $01, nA1, $03
0008C2A4 E108                       	smpsAlterNote       $08
0008C2A6 9D03 8001                  	dc.b	nE2, $03, nRst, $01
0008C2AA E10B                       	smpsAlterNote       $0B
0008C2AC 9603                       	dc.b	nA1, $03
0008C2AE E10E                       	smpsAlterNote       $0E
0008C2B0 A001                       	dc.b	nG2, $01
0008C2B2 E118                       	smpsAlterNote       $18
0008C2B4 E701                       	dc.b	smpsNoAttack, $01
0008C2B6 E1E9                       	smpsAlterNote       $E9
0008C2B8 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
0008C2BB E1EE                       	smpsAlterNote       $EE
0008C2BD E701                       	dc.b	smpsNoAttack, $01
0008C2BF E1F8                       	smpsAlterNote       $F8
0008C2C1 E701                       	dc.b	smpsNoAttack, $01
0008C2C3 E102                       	smpsAlterNote       $02
0008C2C5 E701                       	dc.b	smpsNoAttack, $01
0008C2C7 E107                       	smpsAlterNote       $07
0008C2C9 8001                       	dc.b	nRst, $01
0008C2CB E10B                       	smpsAlterNote       $0B
0008C2CD 9603                       	dc.b	nA1, $03
0008C2CF E10C                       	smpsAlterNote       $0C
0008C2D1 9707 9703 8001             	dc.b	nBb1, $07, nBb1, $03, nRst, $01
0008C2D7 E10B                       	smpsAlterNote       $0B
0008C2D9 9602 8001 A206 8001 9603+  	dc.b	nA1, $02, nRst, $01, nA2, $06, nRst, $01, nA1, $03, nA2, $03
0008C2E5 8001 9603                  	dc.b	nRst, $01, nA1, $03
0008C2E9 E10C                       	smpsAlterNote       $0C
0008C2EB 9706 800F 9703 9703 8019+  	dc.b	nBb1, $06, nRst, $0F, nBb1, $03, nBb1, $03, nRst, $19, nBb1, $02
0008C2F7 8001                       	dc.b	nRst, $01
0008C2F9 E10B                       	smpsAlterNote       $0B
0008C2FB 9606 800F 9602 8001        	dc.b	nA1, $06, nRst, $0F, nA1, $02, nRst, $01
0008C303 E107                       	smpsAlterNote       $07
0008C305 9B06 8001                  	dc.b	nD2, $06, nRst, $01
0008C309 E10B                       	smpsAlterNote       $0B
0008C30B 9603                       	dc.b	nA1, $03
0008C30D E109                       	smpsAlterNote       $09
0008C30F 9E03 8001                  	dc.b	nF2, $03, nRst, $01
0008C313 E108                       	smpsAlterNote       $08
0008C315 9D06                       	dc.b	nE2, $06
0008C317 E107                       	smpsAlterNote       $07
0008C319 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008C31D E106                       	smpsAlterNote       $06
0008C31F 9903                       	dc.b	nC2, $03
0008C321 E10C                       	smpsAlterNote       $0C
0008C323 9703 8001                  	dc.b	nBb1, $03, nRst, $01
0008C327 E10B                       	smpsAlterNote       $0B
0008C329 9603 9603 8001 9602 8001+  	dc.b	nA1, $03, nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03
0008C335 9603 8001 9603 9603 8001   	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
0008C33F E10C                       	smpsAlterNote       $0C
0008C341 9706 8001 9702 8001 9703+  	dc.b	nBb1, $06, nRst, $01, nBb1, $02, nRst, $01, nBb1, $03, nBb1, $03
0008C34D 8001 9703 9703 8001 9703+  	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03
0008C359 8001                       	dc.b	nRst, $01
0008C35B E10B                       	smpsAlterNote       $0B
0008C35D 9602 8001 9603 9603 8001+  	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
0008C369 9603 8001 9602 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03, nA1, $07
0008C375 9603 8001 9603 9603 8001+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $02
0008C381 8001 9603 9603 8001 9603   	dc.b	nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
0008C38B E10C                       	smpsAlterNote       $0C
0008C38D 9707 800E 9703 9703 8019+  	dc.b	nBb1, $07, nRst, $0E, nBb1, $03, nBb1, $03, nRst, $19, nBb1, $03
0008C399 E10B                       	smpsAlterNote       $0B
0008C39B 9606 800F 9602 8001        	dc.b	nA1, $06, nRst, $0F, nA1, $02, nRst, $01
0008C3A3 E107                       	smpsAlterNote       $07
0008C3A5 9B06 8001                  	dc.b	nD2, $06, nRst, $01
0008C3A9 E10B                       	smpsAlterNote       $0B
0008C3AB 9603                       	dc.b	nA1, $03
0008C3AD E109                       	smpsAlterNote       $09
0008C3AF 9E03 8001                  	dc.b	nF2, $03, nRst, $01
0008C3B3 E108                       	smpsAlterNote       $08
0008C3B5 9D06 8001                  	dc.b	nE2, $06, nRst, $01
0008C3B9 E107                       	smpsAlterNote       $07
0008C3BB 9B02 8001                  	dc.b	nD2, $02, nRst, $01
0008C3BF E106                       	smpsAlterNote       $06
0008C3C1 9903                       	dc.b	nC2, $03
0008C3C3 E10C                       	smpsAlterNote       $0C
0008C3C5 9703 8001                  	dc.b	nBb1, $03, nRst, $01
0008C3C9 E10B                       	smpsAlterNote       $0B
0008C3CB 9603 9603 8001 9603 9603+  	dc.b	nA1, $03, nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
0008C3D7 9602 8001 9603 9603 8001   	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01
0008C3E1 E10C                       	smpsAlterNote       $0C
0008C3E3 9706 8001 9703 9703 8001+  	dc.b	nBb1, $06, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $02
0008C3EF 8001 9703 9703 8001 9703+  	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03
0008C3FB 8001                       	dc.b	nRst, $01
0008C3FD E10B                       	smpsAlterNote       $0B
0008C3FF 9602 8001 9603 9603 8001+  	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
0008C40B 9603 8001 9603 9603 8001   	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
0008C415 E10C                       	smpsAlterNote       $0C
0008C417 9706 9703 8001 9703 9703+  	dc.b	nBb1, $06, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
0008C423 9703 9703 8001 9702 8001+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb1, $03
0008C42F E10B                       	smpsAlterNote       $0B
0008C431 9603 8001 9603 9603 8001+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
0008C43D 9603 8001 9602 8001 9603   	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03
0008C447 E10C                       	smpsAlterNote       $0C
0008C449 9707 9703 8001 9703 9703+  	dc.b	nBb1, $07, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
0008C455 9702 8001 9703 9703 8001+  	dc.b	nBb1, $02, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03
0008C461 E10B                       	smpsAlterNote       $0B
0008C463 9603 8001 9602 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03, nA1, $03
0008C46F 8001                       	dc.b	nRst, $01
0008C471 E1EC                       	smpsAlterNote       $EC
0008C473 A101                       	dc.b	nAb2, $01
0008C475 E1FA                       	smpsAlterNote       $FA
0008C477 E701                       	dc.b	smpsNoAttack, $01
0008C479 E116                       	smpsAlterNote       $16
0008C47B E701                       	dc.b	smpsNoAttack, $01
0008C47D E1F5                       	smpsAlterNote       $F5
0008C47F E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
0008C482 E10B                       	smpsAlterNote       $0B
0008C484 E702 8001 9603 9606 8001+  	dc.b	smpsNoAttack, $02, nRst, $01, nA1, $03, nA1, $06, nRst, $01, nA1, $03
0008C490 9603 8001 9603 800B 9602+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nRst, $0B, nA1, $02, nRst, $01
0008C49C E107                       	smpsAlterNote       $07
0008C49E 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0008C4A4 E10B                       	smpsAlterNote       $0B
0008C4A6 A203                       	dc.b	nA2, $03
0008C4A8 E107                       	smpsAlterNote       $07
0008C4AA 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008C4AE E1F3                       	smpsAlterNote       $F3
0008C4B0 A401                       	dc.b	nB2, $01
0008C4B2 E102                       	smpsAlterNote       $02
0008C4B4 E701                       	dc.b	smpsNoAttack, $01
0008C4B6 E109                       	smpsAlterNote       $09
0008C4B8 E701                       	dc.b	smpsNoAttack, $01
0008C4BA E102                       	smpsAlterNote       $02
0008C4BC E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008C4BF E106                       	smpsAlterNote       $06
0008C4C1 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008C4C5 E107                       	smpsAlterNote       $07
0008C4C7 9B02 8001                  	dc.b	nD2, $02, nRst, $01
0008C4CB E108                       	smpsAlterNote       $08
0008C4CD 9C06 8001 9C03             	dc.b	nEb2, $06, nRst, $01, nEb2, $03
0008C4D3 E109                       	smpsAlterNote       $09
0008C4D5 A003 8001                  	dc.b	nG2, $03, nRst, $01
0008C4D9 E1F2                       	smpsAlterNote       $F2
0008C4DB A401                       	dc.b	nB2, $01
0008C4DD E1FF                       	smpsAlterNote       $FF
0008C4DF E701                       	dc.b	smpsNoAttack, $01
0008C4E1 E111                       	smpsAlterNote       $11
0008C4E3 E701                       	dc.b	smpsNoAttack, $01
0008C4E5 E1FB                       	smpsAlterNote       $FB
0008C4E7 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008C4EA E106                       	smpsAlterNote       $06
0008C4EC E702                       	dc.b	smpsNoAttack, $02
0008C4EE E109                       	smpsAlterNote       $09
0008C4F0 A007                       	dc.b	nG2, $07
0008C4F2 E108                       	smpsAlterNote       $08
0008C4F4 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
0008C4F8 E107                       	smpsAlterNote       $07
0008C4FA 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0008C500 E10B                       	smpsAlterNote       $0B
0008C502 A202 8001                  	dc.b	nA2, $02, nRst, $01
0008C506 E107                       	smpsAlterNote       $07
0008C508 9B03                       	dc.b	nD2, $03
0008C50A E11A                       	smpsAlterNote       $1A
0008C50C A301                       	dc.b	nBb2, $01
0008C50E E1F2                       	smpsAlterNote       $F2
0008C510 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008C513 E1FF                       	smpsAlterNote       $FF
0008C515 E701                       	dc.b	smpsNoAttack, $01
0008C517 E111                       	smpsAlterNote       $11
0008C519 E701                       	dc.b	smpsNoAttack, $01
0008C51B E106                       	smpsAlterNote       $06
0008C51D E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
0008C520 E107                       	smpsAlterNote       $07
0008C522 9B03 8001 A706 8001 9B02+  	dc.b	nD2, $03, nRst, $01, nD3, $06, nRst, $01, nD2, $02, nRst, $01
0008C52E E117                       	smpsAlterNote       $17
0008C530 A001                       	dc.b	nG2, $01
0008C532 E1FA                       	smpsAlterNote       $FA
0008C534 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
0008C537 E116                       	smpsAlterNote       $16
0008C539 E701                       	dc.b	smpsNoAttack, $01
0008C53B E1F5                       	smpsAlterNote       $F5
0008C53D E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
0008C540 E103                       	smpsAlterNote       $03
0008C542 E701                       	dc.b	smpsNoAttack, $01
0008C544 E10B                       	smpsAlterNote       $0B
0008C546 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008C54A E107                       	smpsAlterNote       $07
0008C54C 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0008C552 E109                       	smpsAlterNote       $09
0008C554 9E03                       	dc.b	nF2, $03
0008C556 E10B                       	smpsAlterNote       $0B
0008C558 9603 8001                  	dc.b	nA1, $03, nRst, $01
0008C55C E107                       	smpsAlterNote       $07
0008C55E 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
0008C564 E10B                       	smpsAlterNote       $0B
0008C566 A203 8001                  	dc.b	nA2, $03, nRst, $01
0008C56A E107                       	smpsAlterNote       $07
0008C56C 9B03                       	dc.b	nD2, $03
0008C56E E11A                       	smpsAlterNote       $1A
0008C570 A301                       	dc.b	nBb2, $01
0008C572 E1F9                       	smpsAlterNote       $F9
0008C574 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008C577 E1FF                       	smpsAlterNote       $FF
0008C579 E701                       	dc.b	smpsNoAttack, $01
0008C57B E111                       	smpsAlterNote       $11
0008C57D E701                       	dc.b	smpsNoAttack, $01
0008C57F E106                       	smpsAlterNote       $06
0008C581 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
0008C584 E107                       	smpsAlterNote       $07
0008C586 9B03                       	dc.b	nD2, $03
0008C588 E108                       	smpsAlterNote       $08
0008C58A 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
0008C590 E109                       	smpsAlterNote       $09
0008C592 A003                       	dc.b	nG2, $03
0008C594 E1F0                       	smpsAlterNote       $F0
0008C596 A501                       	dc.b	nC3, $01
0008C598 E106                       	smpsAlterNote       $06
0008C59A E705 8001                  	dc.b	smpsNoAttack, $05, nRst, $01
0008C59E E109                       	smpsAlterNote       $09
0008C5A0 A006 8001                  	dc.b	nG2, $06, nRst, $01
0008C5A4 E108                       	smpsAlterNote       $08
0008C5A6 9C03                       	dc.b	nEb2, $03
0008C5A8 E107                       	smpsAlterNote       $07
0008C5AA 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
0008C5B0 E10B                       	smpsAlterNote       $0B
0008C5B2 A203 8001                  	dc.b	nA2, $03, nRst, $01
0008C5B6 E107                       	smpsAlterNote       $07
0008C5B8 9B02 8001                  	dc.b	nD2, $02, nRst, $01
0008C5BC E11A                       	smpsAlterNote       $1A
0008C5BE A301                       	dc.b	nBb2, $01
0008C5C0 E1F9                       	smpsAlterNote       $F9
0008C5C2 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008C5C5 E107                       	smpsAlterNote       $07
0008C5C7 E701                       	dc.b	smpsNoAttack, $01
0008C5C9 E1FB                       	smpsAlterNote       $FB
0008C5CB E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008C5CE E106                       	smpsAlterNote       $06
0008C5D0 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008C5D4 E107                       	smpsAlterNote       $07
0008C5D6 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
0008C5DE E1EC                       	smpsAlterNote       $EC
0008C5E0 A101                       	dc.b	nAb2, $01
0008C5E2 E108                       	smpsAlterNote       $08
0008C5E4 E701                       	dc.b	smpsNoAttack, $01
0008C5E6 E1E7                       	smpsAlterNote       $E7
0008C5E8 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
0008C5EB E1F5                       	smpsAlterNote       $F5
0008C5ED E701                       	dc.b	smpsNoAttack, $01
0008C5EF E10B                       	smpsAlterNote       $0B
0008C5F1 E702                       	dc.b	smpsNoAttack, $02
0008C5F3 E107                       	smpsAlterNote       $07
0008C5F5 9B03 8001 A703             	dc.b	nD2, $03, nRst, $01, nD3, $03
0008C5FB E106                       	smpsAlterNote       $06
0008C5FD 9903 8001 A503             	dc.b	nC2, $03, nRst, $01, nC3, $03
0008C603 E10C                       	smpsAlterNote       $0C
0008C605 9703 8001 9702 8001        	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01
0008C60D E109                       	smpsAlterNote       $09
0008C60F 9E03                       	dc.b	nF2, $03
0008C611 E10C                       	smpsAlterNote       $0C
0008C613 9703 8001                  	dc.b	nBb1, $03, nRst, $01
0008C617 E1EA                       	smpsAlterNote       $EA
0008C619 A201                       	dc.b	nA2, $01
0008C61B E106                       	smpsAlterNote       $06
0008C61D E701                       	dc.b	smpsNoAttack, $01
0008C61F E114                       	smpsAlterNote       $14
0008C621 E701                       	dc.b	smpsNoAttack, $01
0008C623 E1F0                       	smpsAlterNote       $F0
0008C625 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
0008C628 E10C                       	smpsAlterNote       $0C
0008C62A E702 8001 9702 8001 A306+  	dc.b	smpsNoAttack, $02, nRst, $01, nBb1, $02, nRst, $01, nBb2, $06, nRst, $01
0008C636 9703                       	dc.b	nBb1, $03
0008C638 E116                       	smpsAlterNote       $16
0008C63A 9C01                       	dc.b	nEb2, $01
0008C63C E105                       	smpsAlterNote       $05
0008C63E E79D 01                    	dc.b	smpsNoAttack, nE2, $01
0008C641 E113                       	smpsAlterNote       $13
0008C643 E701                       	dc.b	smpsNoAttack, $01
0008C645 E1FF                       	smpsAlterNote       $FF
0008C647 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
0008C64A E109                       	smpsAlterNote       $09
0008C64C E703                       	dc.b	smpsNoAttack, $03
0008C64E E10C                       	smpsAlterNote       $0C
0008C650 9703 8001 9702 8001 A303+  	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb2, $03, nBb1, $03
0008C65C 8001 9703 9703 8001        	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
0008C664 E109                       	smpsAlterNote       $09
0008C666 9E03                       	dc.b	nF2, $03
0008C668 E10C                       	smpsAlterNote       $0C
0008C66A 9703 8001                  	dc.b	nBb1, $03, nRst, $01
0008C66E E1EA                       	smpsAlterNote       $EA
0008C670 A201                       	dc.b	nA2, $01
0008C672 E106                       	smpsAlterNote       $06
0008C674 E701                       	dc.b	smpsNoAttack, $01
0008C676 E1E2                       	smpsAlterNote       $E2
0008C678 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
0008C67B E1F0                       	smpsAlterNote       $F0
0008C67D E701                       	dc.b	smpsNoAttack, $01
0008C67F E10C                       	smpsAlterNote       $0C
0008C681 E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
0008C68D E116                       	smpsAlterNote       $16
0008C68F 9C01                       	dc.b	nEb2, $01
0008C691 E105                       	smpsAlterNote       $05
0008C693 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
0008C696 E1F1                       	smpsAlterNote       $F1
0008C698 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
0008C69B E1FF                       	smpsAlterNote       $FF
0008C69D E701                       	dc.b	smpsNoAttack, $01
0008C69F E109                       	smpsAlterNote       $09
0008C6A1 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008C6A5 E10C                       	smpsAlterNote       $0C
0008C6A7 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $04
0008C6B3 E106                       	smpsAlterNote       $06
0008C6B5 9903                       	dc.b	nC2, $03
0008C6B7 E107                       	smpsAlterNote       $07
0008C6B9 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008C6BD E109                       	smpsAlterNote       $09
0008C6BF 8003 940D 8004             	dc.b	nRst, $03, nG1, $0D, nRst, $04
0008C6C5 E107                       	smpsAlterNote       $07
0008C6C7 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008C6CB E108                       	smpsAlterNote       $08
0008C6CD 9D03                       	dc.b	nE2, $03
0008C6CF E10B                       	smpsAlterNote       $0B
0008C6D1 8004 960D 8004             	dc.b	nRst, $04, nA1, $0D, nRst, $04
0008C6D7 E109                       	smpsAlterNote       $09
0008C6D9 9E03 A003 8001             	dc.b	nF2, $03, nG2, $03, nRst, $01
0008C6DF E10C                       	smpsAlterNote       $0C
0008C6E1 8003 970D 8001             	dc.b	nRst, $03, nBb1, $0D, nRst, $01
0008C6E7 E106                       	smpsAlterNote       $06
0008C6E9 9903                       	dc.b	nC2, $03
0008C6EB E11A                       	smpsAlterNote       $1A
0008C6ED A301                       	dc.b	nBb2, $01
0008C6EF E1F9                       	smpsAlterNote       $F9
0008C6F1 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008C6F4 E1FF                       	smpsAlterNote       $FF
0008C6F6 E701                       	dc.b	smpsNoAttack, $01
0008C6F8 E111                       	smpsAlterNote       $11
0008C6FA E701                       	dc.b	smpsNoAttack, $01
0008C6FC E106                       	smpsAlterNote       $06
0008C6FE E7A5 0399 0380 04          	dc.b	smpsNoAttack, nC3, $03, nC2, $03, nRst, $04
0008C705 E109                       	smpsAlterNote       $09
0008C707 A003                       	dc.b	nG2, $03
0008C709 E106                       	smpsAlterNote       $06
0008C70B 9907                       	dc.b	nC2, $07
0008C70D E107                       	smpsAlterNote       $07
0008C70F 9B03 8001 9B02 8001        	dc.b	nD2, $03, nRst, $01, nD2, $02, nRst, $01
0008C717 E10B                       	smpsAlterNote       $0B
0008C719 A203                       	dc.b	nA2, $03
0008C71B E107                       	smpsAlterNote       $07
0008C71D 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008C721 E1F2                       	smpsAlterNote       $F2
0008C723 A401                       	dc.b	nB2, $01
0008C725 E1F9                       	smpsAlterNote       $F9
0008C727 E701                       	dc.b	smpsNoAttack, $01
0008C729 E107                       	smpsAlterNote       $07
0008C72B E701                       	dc.b	smpsNoAttack, $01
0008C72D E1FB                       	smpsAlterNote       $FB
0008C72F E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008C732 E106                       	smpsAlterNote       $06
0008C734 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008C738 E107                       	smpsAlterNote       $07
0008C73A 9B03                       	dc.b	nD2, $03
0008C73C E108                       	smpsAlterNote       $08
0008C73E 9C06 8001 A803             	dc.b	nEb2, $06, nRst, $01, nEb3, $03
0008C744 E109                       	smpsAlterNote       $09
0008C746 A003 8001                  	dc.b	nG2, $03, nRst, $01
0008C74A E1F2                       	smpsAlterNote       $F2
0008C74C A401                       	dc.b	nB2, $01
0008C74E E1F9                       	smpsAlterNote       $F9
0008C750 E701                       	dc.b	smpsNoAttack, $01
0008C752 E107                       	smpsAlterNote       $07
0008C754 E701                       	dc.b	smpsNoAttack, $01
0008C756 E1FB                       	smpsAlterNote       $FB
0008C758 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008C75B E106                       	smpsAlterNote       $06
0008C75D E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008C761 E108                       	smpsAlterNote       $08
0008C763 9C06 8001                  	dc.b	nEb2, $06, nRst, $01
0008C767 E10C                       	smpsAlterNote       $0C
0008C769 A302 8001                  	dc.b	nBb2, $02, nRst, $01
0008C76D E107                       	smpsAlterNote       $07
0008C76F 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0008C775 E10B                       	smpsAlterNote       $0B
0008C777 A203                       	dc.b	nA2, $03
0008C779 E107                       	smpsAlterNote       $07
0008C77B 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008C77F E1F2                       	smpsAlterNote       $F2
0008C781 A401                       	dc.b	nB2, $01
0008C783 E1FF                       	smpsAlterNote       $FF
0008C785 E701                       	dc.b	smpsNoAttack, $01
0008C787 E107                       	smpsAlterNote       $07
0008C789 E701                       	dc.b	smpsNoAttack, $01
0008C78B E1FB                       	smpsAlterNote       $FB
0008C78D E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008C790 E106                       	smpsAlterNote       $06
0008C792 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008C796 E107                       	smpsAlterNote       $07
0008C798 9B02 8001                  	dc.b	nD2, $02, nRst, $01
0008C79C E108                       	smpsAlterNote       $08
0008C79E 9C06 8001 A803             	dc.b	nEb2, $06, nRst, $01, nEb3, $03
0008C7A4 E109                       	smpsAlterNote       $09
0008C7A6 A003 8001                  	dc.b	nG2, $03, nRst, $01
0008C7AA E1F2                       	smpsAlterNote       $F2
0008C7AC A401                       	dc.b	nB2, $01
0008C7AE E1FF                       	smpsAlterNote       $FF
0008C7B0 E701                       	dc.b	smpsNoAttack, $01
0008C7B2 E111                       	smpsAlterNote       $11
0008C7B4 E701                       	dc.b	smpsNoAttack, $01
0008C7B6 E1FB                       	smpsAlterNote       $FB
0008C7B8 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008C7BB E106                       	smpsAlterNote       $06
0008C7BD E702                       	dc.b	smpsNoAttack, $02
0008C7BF E108                       	smpsAlterNote       $08
0008C7C1 9C07                       	dc.b	nEb2, $07
0008C7C3 E10C                       	smpsAlterNote       $0C
0008C7C5 A303 8001                  	dc.b	nBb2, $03, nRst, $01
0008C7C9 E107                       	smpsAlterNote       $07
0008C7CB 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0008C7D1 E10B                       	smpsAlterNote       $0B
0008C7D3 A202 8001                  	dc.b	nA2, $02, nRst, $01
0008C7D7 E107                       	smpsAlterNote       $07
0008C7D9 9B03                       	dc.b	nD2, $03
0008C7DB E11A                       	smpsAlterNote       $1A
0008C7DD A301                       	dc.b	nBb2, $01
0008C7DF E1F2                       	smpsAlterNote       $F2
0008C7E1 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008C7E4 E1FF                       	smpsAlterNote       $FF
0008C7E6 E701                       	dc.b	smpsNoAttack, $01
0008C7E8 E111                       	smpsAlterNote       $11
0008C7EA E701                       	dc.b	smpsNoAttack, $01
0008C7EC E106                       	smpsAlterNote       $06
0008C7EE E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
0008C7F1 E107                       	smpsAlterNote       $07
0008C7F3 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008C7F7 E108                       	smpsAlterNote       $08
0008C7F9 9C06 8001 A802 8001        	dc.b	nEb2, $06, nRst, $01, nEb3, $02, nRst, $01
0008C801 E109                       	smpsAlterNote       $09
0008C803 A003                       	dc.b	nG2, $03
0008C805 E11A                       	smpsAlterNote       $1A
0008C807 A301                       	dc.b	nBb2, $01
0008C809 E1F2                       	smpsAlterNote       $F2
0008C80B E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008C80E E1FF                       	smpsAlterNote       $FF
0008C810 E701                       	dc.b	smpsNoAttack, $01
0008C812 E111                       	smpsAlterNote       $11
0008C814 E701                       	dc.b	smpsNoAttack, $01
0008C816 E106                       	smpsAlterNote       $06
0008C818 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
0008C81B E108                       	smpsAlterNote       $08
0008C81D 9C07                       	dc.b	nEb2, $07
0008C81F E10C                       	smpsAlterNote       $0C
0008C821 A303 8001                  	dc.b	nBb2, $03, nRst, $01
0008C825 E107                       	smpsAlterNote       $07
0008C827 9B02 8001 9B03 9B03 8001+  	dc.b	nD2, $02, nRst, $01, nD2, $03, nD2, $03, nRst, $01, nD2, $03
0008C833 9B03 8001 9B03 9B03 8001   	dc.b	nD2, $03, nRst, $01, nD2, $03, nD2, $03, nRst, $01
0008C83D E108                       	smpsAlterNote       $08
0008C83F 9C06                       	dc.b	nEb2, $06
0008C841 E10C                       	smpsAlterNote       $0C
0008C843 9703 8001                  	dc.b	nBb1, $03, nRst, $01
0008C847 E108                       	smpsAlterNote       $08
0008C849 9C03                       	dc.b	nEb2, $03
0008C84B E109                       	smpsAlterNote       $09
0008C84D A003 8001                  	dc.b	nG2, $03, nRst, $01
0008C851 E10C                       	smpsAlterNote       $0C
0008C853 A302 8001 A303 8007        	dc.b	nBb2, $02, nRst, $01, nBb2, $03, nRst, $07
0008C85B E107                       	smpsAlterNote       $07
0008C85D 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008C861 F6F4 F8                    	smpsJump            music84_Jump04
0008C864                            
0008C864                            ; FM2 Data
0008C864                            music84_FM2:
0008C864 E0C0                       	smpsPan             panCenter, $00
0008C868 E10B                       	smpsAlterNote       $0B
0008C86A C603 8007                  	dc.b	nA5, $03, nRst, $07
0008C86E E109                       	smpsAlterNote       $09
0008C870 C403 800B                  	dc.b	nG5, $03, nRst, $0B
0008C874 E108                       	smpsAlterNote       $08
0008C876 C103 8004                  	dc.b	nE5, $03, nRst, $04
0008C87C E080                       	smpsPan             panLeft, $00
0008C87E E10C                       	smpsAlterNote       $0C
0008C880 E6F9                       	smpsAlterVol        $F9
0008C882 C703                       	dc.b	nBb5, $03
0008C884 E10B                       	smpsAlterNote       $0B
0008C886 C603 8001                  	dc.b	nA5, $03, nRst, $01
0008C88A E109                       	smpsAlterNote       $09
0008C88C C402 8001 C203             	dc.b	nG5, $02, nRst, $01, nF5, $03
0008C892 E108                       	smpsAlterNote       $08
0008C894 C103 8001                  	dc.b	nE5, $03, nRst, $01
0008C898 E106                       	smpsAlterNote       $06
0008C89A BD03                       	dc.b	nC5, $03
0008C89C E10B                       	smpsAlterNote       $0B
0008C89E BA03 8001                  	dc.b	nA4, $03, nRst, $01
0008C8A4 E0C0                       	smpsPan             panCenter, $00
0008C8A6 E107                       	smpsAlterNote       $07
0008C8A8 E606                       	smpsAlterVol        $06
0008C8AA BF03                       	dc.b	nD5, $03
0008C8AC                            
0008C8AC                            music84_Jump03:
0008C8AC E108                       	smpsAlterNote       $08
0008C8AE C103 8001                  	dc.b	nE5, $03, nRst, $01
0008C8B2 E109                       	smpsAlterNote       $09
0008C8B4 C202 8001 C403             	dc.b	nF5, $02, nRst, $01, nG5, $03
0008C8BA E10B                       	smpsAlterNote       $0B
0008C8BC C607                       	dc.b	nA5, $07
0008C8BE E107                       	smpsAlterNote       $07
0008C8C0 BF03 8001                  	dc.b	nD5, $03, nRst, $01
0008C8C4 E106                       	smpsAlterNote       $06
0008C8C6 C90D                       	dc.b	nC6, $0D
0008C8C8 E100                       	smpsAlterNote       $00
0008C8CA E701                       	dc.b	smpsNoAttack, $01
0008C8CC E1FF                       	smpsAlterNote       $FF
0008C8CE E701                       	dc.b	smpsNoAttack, $01
0008C8D0 E103                       	smpsAlterNote       $03
0008C8D2 E701                       	dc.b	smpsNoAttack, $01
0008C8D4 E109                       	smpsAlterNote       $09
0008C8D6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C8DA E106                       	smpsAlterNote       $06
0008C8DC E701                       	dc.b	smpsNoAttack, $01
0008C8DE E100                       	smpsAlterNote       $00
0008C8E0 E701                       	dc.b	smpsNoAttack, $01
0008C8E2 E10C                       	smpsAlterNote       $0C
0008C8E4 C703 8001                  	dc.b	nBb5, $03, nRst, $01
0008C8E8 E10B                       	smpsAlterNote       $0B
0008C8EA C603                       	dc.b	nA5, $03
0008C8EC E109                       	smpsAlterNote       $09
0008C8EE C403 8001                  	dc.b	nG5, $03, nRst, $01
0008C8F2 E10B                       	smpsAlterNote       $0B
0008C8F4 C60D                       	dc.b	nA5, $0D
0008C8F6 E105                       	smpsAlterNote       $05
0008C8F8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C8FC E10B                       	smpsAlterNote       $0B
0008C8FE E701                       	dc.b	smpsNoAttack, $01
0008C900 E10E                       	smpsAlterNote       $0E
0008C902 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C906 E108                       	smpsAlterNote       $08
0008C908 E701                       	dc.b	smpsNoAttack, $01
0008C90A E104                       	smpsAlterNote       $04
0008C90C E701                       	dc.b	smpsNoAttack, $01
0008C90E E105                       	smpsAlterNote       $05
0008C910 E701                       	dc.b	smpsNoAttack, $01
0008C912 E10B                       	smpsAlterNote       $0B
0008C914 E701                       	dc.b	smpsNoAttack, $01
0008C916 E10F                       	smpsAlterNote       $0F
0008C918 E701                       	dc.b	smpsNoAttack, $01
0008C91A E10B                       	smpsAlterNote       $0B
0008C91C E701                       	dc.b	smpsNoAttack, $01
0008C91E E108                       	smpsAlterNote       $08
0008C920 E701                       	dc.b	smpsNoAttack, $01
0008C922 E104                       	smpsAlterNote       $04
0008C924 E701                       	dc.b	smpsNoAttack, $01
0008C926 E108                       	smpsAlterNote       $08
0008C928 E701                       	dc.b	smpsNoAttack, $01
0008C92A E10E                       	smpsAlterNote       $0E
0008C92C E701                       	dc.b	smpsNoAttack, $01
0008C92E E10F                       	smpsAlterNote       $0F
0008C930 E701                       	dc.b	smpsNoAttack, $01
0008C932 E10B                       	smpsAlterNote       $0B
0008C934 E701                       	dc.b	smpsNoAttack, $01
0008C936 E105                       	smpsAlterNote       $05
0008C938 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C93C E108                       	smpsAlterNote       $08
0008C93E E701                       	dc.b	smpsNoAttack, $01
0008C940 E10E                       	smpsAlterNote       $0E
0008C942 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C946 E108                       	smpsAlterNote       $08
0008C948 E701                       	dc.b	smpsNoAttack, $01
0008C94A E105                       	smpsAlterNote       $05
0008C94C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C950 E10B                       	smpsAlterNote       $0B
0008C952 E701                       	dc.b	smpsNoAttack, $01
0008C954 E10F                       	smpsAlterNote       $0F
0008C956 E701 800E                  	dc.b	smpsNoAttack, $01, nRst, $0E
0008C95A E107                       	smpsAlterNote       $07
0008C95C BF03 8001                  	dc.b	nD5, $03, nRst, $01
0008C960 E108                       	smpsAlterNote       $08
0008C962 C103                       	dc.b	nE5, $03
0008C964 E109                       	smpsAlterNote       $09
0008C966 C203 8001 C402 8001        	dc.b	nF5, $03, nRst, $01, nG5, $02, nRst, $01
0008C96E E10B                       	smpsAlterNote       $0B
0008C970 C606 8001                  	dc.b	nA5, $06, nRst, $01
0008C974 E107                       	smpsAlterNote       $07
0008C976 BF03                       	dc.b	nD5, $03
0008C978 E106                       	smpsAlterNote       $06
0008C97A C90D 8001                  	dc.b	nC6, $0D, nRst, $01
0008C97E E107                       	smpsAlterNote       $07
0008C980 CB03                       	dc.b	nD6, $03
0008C982 E10C                       	smpsAlterNote       $0C
0008C984 C704 8001                  	dc.b	nBb5, $04, nRst, $01
0008C988 E10B                       	smpsAlterNote       $0B
0008C98A C604 8001                  	dc.b	nA5, $04, nRst, $01
0008C98E E109                       	smpsAlterNote       $09
0008C990 C404                       	dc.b	nG5, $04
0008C992 E10B                       	smpsAlterNote       $0B
0008C994 C60D                       	dc.b	nA5, $0D
0008C996 E108                       	smpsAlterNote       $08
0008C998 E701                       	dc.b	smpsNoAttack, $01
0008C99A E104                       	smpsAlterNote       $04
0008C99C E701                       	dc.b	smpsNoAttack, $01
0008C99E E108                       	smpsAlterNote       $08
0008C9A0 E701                       	dc.b	smpsNoAttack, $01
0008C9A2 E10B                       	smpsAlterNote       $0B
0008C9A4 E701                       	dc.b	smpsNoAttack, $01
0008C9A6 E10F                       	smpsAlterNote       $0F
0008C9A8 E701                       	dc.b	smpsNoAttack, $01
0008C9AA E10B                       	smpsAlterNote       $0B
0008C9AC E701                       	dc.b	smpsNoAttack, $01
0008C9AE E105                       	smpsAlterNote       $05
0008C9B0 E701                       	dc.b	smpsNoAttack, $01
0008C9B2 E104                       	smpsAlterNote       $04
0008C9B4 E701                       	dc.b	smpsNoAttack, $01
0008C9B6 E108                       	smpsAlterNote       $08
0008C9B8 E701                       	dc.b	smpsNoAttack, $01
0008C9BA E10E                       	smpsAlterNote       $0E
0008C9BC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C9C0 E10B                       	smpsAlterNote       $0B
0008C9C2 E701                       	dc.b	smpsNoAttack, $01
0008C9C4 E105                       	smpsAlterNote       $05
0008C9C6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C9CA E10B                       	smpsAlterNote       $0B
0008C9CC E701                       	dc.b	smpsNoAttack, $01
0008C9CE E10E                       	smpsAlterNote       $0E
0008C9D0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008C9D4 E108                       	smpsAlterNote       $08
0008C9D6 E701                       	dc.b	smpsNoAttack, $01
0008C9D8 E104                       	smpsAlterNote       $04
0008C9DA E701                       	dc.b	smpsNoAttack, $01
0008C9DC E105                       	smpsAlterNote       $05
0008C9DE E701                       	dc.b	smpsNoAttack, $01
0008C9E0 E10B                       	smpsAlterNote       $0B
0008C9E2 E701                       	dc.b	smpsNoAttack, $01
0008C9E4 E10F                       	smpsAlterNote       $0F
0008C9E6 E701                       	dc.b	smpsNoAttack, $01
0008C9E8 E10B                       	smpsAlterNote       $0B
0008C9EA E701                       	dc.b	smpsNoAttack, $01
0008C9EC E108                       	smpsAlterNote       $08
0008C9EE E701                       	dc.b	smpsNoAttack, $01
0008C9F0 E105                       	smpsAlterNote       $05
0008C9F2 8001                       	dc.b	nRst, $01
0008C9F4 E109                       	smpsAlterNote       $09
0008C9F6 C401                       	dc.b	nG5, $01
0008C9F8 E10B                       	smpsAlterNote       $0B
0008C9FA E7C5 02C6 0D80 01C6 04     	dc.b	smpsNoAttack, nAb5, $02, nA5, $0D, nRst, $01, nA5, $04
0008CA03 E109                       	smpsAlterNote       $09
0008CA05 C404 8001                  	dc.b	nG5, $04, nRst, $01
0008CA09 E10B                       	smpsAlterNote       $0B
0008CA0B C604 8001                  	dc.b	nA5, $04, nRst, $01
0008CA0F E107                       	smpsAlterNote       $07
0008CA11 BF0D                       	dc.b	nD5, $0D
0008CA13 E101                       	smpsAlterNote       $01
0008CA15 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CA19 E104                       	smpsAlterNote       $04
0008CA1B E701                       	dc.b	smpsNoAttack, $01
0008CA1D E10A                       	smpsAlterNote       $0A
0008CA1F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CA23 E104                       	smpsAlterNote       $04
0008CA25 E701                       	dc.b	smpsNoAttack, $01
0008CA27 E101                       	smpsAlterNote       $01
0008CA29 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CA2D E107                       	smpsAlterNote       $07
0008CA2F E701                       	dc.b	smpsNoAttack, $01
0008CA31 E10B                       	smpsAlterNote       $0B
0008CA33 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008CA37 E108                       	smpsAlterNote       $08
0008CA39 C101                       	dc.b	nE5, $01
0008CA3B E109                       	smpsAlterNote       $09
0008CA3D E7C2 01C4 01               	dc.b	smpsNoAttack, nF5, $01, nG5, $01
0008CA42 E10B                       	smpsAlterNote       $0B
0008CA44 C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
0008CA4C E108                       	smpsAlterNote       $08
0008CA4E CD06                       	dc.b	nE6, $06
0008CA50 E109                       	smpsAlterNote       $09
0008CA52 CE07                       	dc.b	nF6, $07
0008CA54 E108                       	smpsAlterNote       $08
0008CA56 CD03 8001                  	dc.b	nE6, $03, nRst, $01
0008CA5A E106                       	smpsAlterNote       $06
0008CA5C C903                       	dc.b	nC6, $03
0008CA5E E109                       	smpsAlterNote       $09
0008CA60 C403 8001                  	dc.b	nG5, $03, nRst, $01
0008CA64 E10C                       	smpsAlterNote       $0C
0008CA66 C70D                       	dc.b	nBb5, $0D
0008CA68 E106                       	smpsAlterNote       $06
0008CA6A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CA6E E109                       	smpsAlterNote       $09
0008CA70 E701                       	dc.b	smpsNoAttack, $01
0008CA72 E10F                       	smpsAlterNote       $0F
0008CA74 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CA78 E109                       	smpsAlterNote       $09
0008CA7A E701                       	dc.b	smpsNoAttack, $01
0008CA7C E106                       	smpsAlterNote       $06
0008CA7E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CA82 E10C                       	smpsAlterNote       $0C
0008CA84 E701                       	dc.b	smpsNoAttack, $01
0008CA86 E110                       	smpsAlterNote       $10
0008CA88 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008CA8C E10B                       	smpsAlterNote       $0B
0008CA8E C606 C50E                  	dc.b	nA5, $06, nAb5, $0E
0008CA92 E105                       	smpsAlterNote       $05
0008CA94 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CA98 E10B                       	smpsAlterNote       $0B
0008CA9A E701                       	dc.b	smpsNoAttack, $01
0008CA9C E10E                       	smpsAlterNote       $0E
0008CA9E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CAA2 E108                       	smpsAlterNote       $08
0008CAA4 E701                       	dc.b	smpsNoAttack, $01
0008CAA6 E104                       	smpsAlterNote       $04
0008CAA8 E701                       	dc.b	smpsNoAttack, $01
0008CAAA E105                       	smpsAlterNote       $05
0008CAAC E701                       	dc.b	smpsNoAttack, $01
0008CAAE E10B                       	smpsAlterNote       $0B
0008CAB0 E701                       	dc.b	smpsNoAttack, $01
0008CAB2 E10F                       	smpsAlterNote       $0F
0008CAB4 E701                       	dc.b	smpsNoAttack, $01
0008CAB6 E10B                       	smpsAlterNote       $0B
0008CAB8 E701                       	dc.b	smpsNoAttack, $01
0008CABA E108                       	smpsAlterNote       $08
0008CABC E701                       	dc.b	smpsNoAttack, $01
0008CABE E104                       	smpsAlterNote       $04
0008CAC0 E701                       	dc.b	smpsNoAttack, $01
0008CAC2 E108                       	smpsAlterNote       $08
0008CAC4 E701                       	dc.b	smpsNoAttack, $01
0008CAC6 E10E                       	smpsAlterNote       $0E
0008CAC8 E701                       	dc.b	smpsNoAttack, $01
0008CACA E10F                       	smpsAlterNote       $0F
0008CACC E701                       	dc.b	smpsNoAttack, $01
0008CACE E10B                       	smpsAlterNote       $0B
0008CAD0 E701                       	dc.b	smpsNoAttack, $01
0008CAD2 E105                       	smpsAlterNote       $05
0008CAD4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CAD8 E108                       	smpsAlterNote       $08
0008CADA E701                       	dc.b	smpsNoAttack, $01
0008CADC E10E                       	smpsAlterNote       $0E
0008CADE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CAE2 E108                       	smpsAlterNote       $08
0008CAE4 E701                       	dc.b	smpsNoAttack, $01
0008CAE6 E105                       	smpsAlterNote       $05
0008CAE8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CAEC E10B                       	smpsAlterNote       $0B
0008CAEE E701                       	dc.b	smpsNoAttack, $01
0008CAF0 E10F                       	smpsAlterNote       $0F
0008CAF2 E701                       	dc.b	smpsNoAttack, $01
0008CAF4 E10E                       	smpsAlterNote       $0E
0008CAF6 E701                       	dc.b	smpsNoAttack, $01
0008CAF8 E108                       	smpsAlterNote       $08
0008CAFA E701                       	dc.b	smpsNoAttack, $01
0008CAFC E104                       	smpsAlterNote       $04
0008CAFE E701                       	dc.b	smpsNoAttack, $01
0008CB00 E108                       	smpsAlterNote       $08
0008CB02 E701                       	dc.b	smpsNoAttack, $01
0008CB04 E10E                       	smpsAlterNote       $0E
0008CB06 E701                       	dc.b	smpsNoAttack, $01
0008CB08 E10F                       	smpsAlterNote       $0F
0008CB0A E701                       	dc.b	smpsNoAttack, $01
0008CB0C E10B                       	smpsAlterNote       $0B
0008CB0E E701                       	dc.b	smpsNoAttack, $01
0008CB10 E105                       	smpsAlterNote       $05
0008CB12 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CB16 E108                       	smpsAlterNote       $08
0008CB18 E701                       	dc.b	smpsNoAttack, $01
0008CB1A E10E                       	smpsAlterNote       $0E
0008CB1C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CB20 E108                       	smpsAlterNote       $08
0008CB22 E701                       	dc.b	smpsNoAttack, $01
0008CB24 E105                       	smpsAlterNote       $05
0008CB26 E701                       	dc.b	smpsNoAttack, $01
0008CB28 E10B                       	smpsAlterNote       $0B
0008CB2A C60D                       	dc.b	nA5, $0D
0008CB2C E108                       	smpsAlterNote       $08
0008CB2E E701                       	dc.b	smpsNoAttack, $01
0008CB30 E104                       	smpsAlterNote       $04
0008CB32 E701                       	dc.b	smpsNoAttack, $01
0008CB34 E105                       	smpsAlterNote       $05
0008CB36 E701                       	dc.b	smpsNoAttack, $01
0008CB38 E10B                       	smpsAlterNote       $0B
0008CB3A E701                       	dc.b	smpsNoAttack, $01
0008CB3C E10F                       	smpsAlterNote       $0F
0008CB3E E701                       	dc.b	smpsNoAttack, $01
0008CB40 E10B                       	smpsAlterNote       $0B
0008CB42 E701                       	dc.b	smpsNoAttack, $01
0008CB44 E108                       	smpsAlterNote       $08
0008CB46 E701                       	dc.b	smpsNoAttack, $01
0008CB48 E104                       	smpsAlterNote       $04
0008CB4A E701                       	dc.b	smpsNoAttack, $01
0008CB4C E108                       	smpsAlterNote       $08
0008CB4E E701                       	dc.b	smpsNoAttack, $01
0008CB50 E10E                       	smpsAlterNote       $0E
0008CB52 E701                       	dc.b	smpsNoAttack, $01
0008CB54 E10F                       	smpsAlterNote       $0F
0008CB56 E701                       	dc.b	smpsNoAttack, $01
0008CB5A E109                       	smpsAlterNote       $09
0008CB5C E6FF                       	smpsAlterVol        $FF
0008CB5E C206 8001 C203 C203 8001   	dc.b	nF5, $06, nRst, $01, nF5, $03, nF5, $03, nRst, $01
0008CB68 E108                       	smpsAlterNote       $08
0008CB6A C103 800E                  	dc.b	nE5, $03, nRst, $0E
0008CB70 E107                       	smpsAlterNote       $07
0008CB72 E601                       	smpsAlterVol        $01
0008CB74 BF03                       	dc.b	nD5, $03
0008CB76 E108                       	smpsAlterNote       $08
0008CB78 C103 8001                  	dc.b	nE5, $03, nRst, $01
0008CB7C E109                       	smpsAlterNote       $09
0008CB7E C203 C403 8001             	dc.b	nF5, $03, nG5, $03, nRst, $01
0008CB84 E10B                       	smpsAlterNote       $0B
0008CB86 C606 8001                  	dc.b	nA5, $06, nRst, $01
0008CB8A E107                       	smpsAlterNote       $07
0008CB8C BF02 8001                  	dc.b	nD5, $02, nRst, $01
0008CB90 E106                       	smpsAlterNote       $06
0008CB92 C90D                       	dc.b	nC6, $0D
0008CB94 E103                       	smpsAlterNote       $03
0008CB96 E701                       	dc.b	smpsNoAttack, $01
0008CB98 E1FF                       	smpsAlterNote       $FF
0008CB9A E701                       	dc.b	smpsNoAttack, $01
0008CB9C E103                       	smpsAlterNote       $03
0008CB9E E701                       	dc.b	smpsNoAttack, $01
0008CBA0 E109                       	smpsAlterNote       $09
0008CBA2 E701                       	dc.b	smpsNoAttack, $01
0008CBA4 E10A                       	smpsAlterNote       $0A
0008CBA6 E701                       	dc.b	smpsNoAttack, $01
0008CBA8 E106                       	smpsAlterNote       $06
0008CBAA E701                       	dc.b	smpsNoAttack, $01
0008CBAC E100                       	smpsAlterNote       $00
0008CBAE E701                       	dc.b	smpsNoAttack, $01
0008CBB0 E10C                       	smpsAlterNote       $0C
0008CBB2 C703 8001                  	dc.b	nBb5, $03, nRst, $01
0008CBB6 E10B                       	smpsAlterNote       $0B
0008CBB8 C603                       	dc.b	nA5, $03
0008CBBA E109                       	smpsAlterNote       $09
0008CBBC C403 8001                  	dc.b	nG5, $03, nRst, $01
0008CBC0 E10B                       	smpsAlterNote       $0B
0008CBC2 C60D                       	dc.b	nA5, $0D
0008CBC4 E105                       	smpsAlterNote       $05
0008CBC6 E701                       	dc.b	smpsNoAttack, $01
0008CBC8 E104                       	smpsAlterNote       $04
0008CBCA E701                       	dc.b	smpsNoAttack, $01
0008CBCC E108                       	smpsAlterNote       $08
0008CBCE E701                       	dc.b	smpsNoAttack, $01
0008CBD0 E10E                       	smpsAlterNote       $0E
0008CBD2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CBD6 E10B                       	smpsAlterNote       $0B
0008CBD8 E701                       	dc.b	smpsNoAttack, $01
0008CBDA E105                       	smpsAlterNote       $05
0008CBDC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CBE0 E10B                       	smpsAlterNote       $0B
0008CBE2 E701                       	dc.b	smpsNoAttack, $01
0008CBE4 E10E                       	smpsAlterNote       $0E
0008CBE6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CBEA E108                       	smpsAlterNote       $08
0008CBEC E701                       	dc.b	smpsNoAttack, $01
0008CBEE E104                       	smpsAlterNote       $04
0008CBF0 E701                       	dc.b	smpsNoAttack, $01
0008CBF2 E105                       	smpsAlterNote       $05
0008CBF4 E701                       	dc.b	smpsNoAttack, $01
0008CBF6 E10B                       	smpsAlterNote       $0B
0008CBF8 E701                       	dc.b	smpsNoAttack, $01
0008CBFA E10F                       	smpsAlterNote       $0F
0008CBFC E701                       	dc.b	smpsNoAttack, $01
0008CBFE E10B                       	smpsAlterNote       $0B
0008CC00 E701                       	dc.b	smpsNoAttack, $01
0008CC02 E108                       	smpsAlterNote       $08
0008CC04 E701                       	dc.b	smpsNoAttack, $01
0008CC06 E104                       	smpsAlterNote       $04
0008CC08 E701                       	dc.b	smpsNoAttack, $01
0008CC0A E108                       	smpsAlterNote       $08
0008CC0C E701                       	dc.b	smpsNoAttack, $01
0008CC0E E10E                       	smpsAlterNote       $0E
0008CC10 E701                       	dc.b	smpsNoAttack, $01
0008CC12 E10F                       	smpsAlterNote       $0F
0008CC14 E701                       	dc.b	smpsNoAttack, $01
0008CC16 E10B                       	smpsAlterNote       $0B
0008CC18 E701                       	dc.b	smpsNoAttack, $01
0008CC1A E105                       	smpsAlterNote       $05
0008CC1C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CC20 E108                       	smpsAlterNote       $08
0008CC22 E701                       	dc.b	smpsNoAttack, $01
0008CC24 E10E                       	smpsAlterNote       $0E
0008CC26 E701                       	dc.b	smpsNoAttack, $01
0008CC28 E10F                       	smpsAlterNote       $0F
0008CC2A 800F                       	dc.b	nRst, $0F
0008CC2C E107                       	smpsAlterNote       $07
0008CC2E BF02 8001                  	dc.b	nD5, $02, nRst, $01
0008CC32 E108                       	smpsAlterNote       $08
0008CC34 C103                       	dc.b	nE5, $03
0008CC36 E109                       	smpsAlterNote       $09
0008CC38 C203 8001 C403             	dc.b	nF5, $03, nRst, $01, nG5, $03
0008CC3E E10B                       	smpsAlterNote       $0B
0008CC40 C606 8001                  	dc.b	nA5, $06, nRst, $01
0008CC44 E107                       	smpsAlterNote       $07
0008CC46 BF03                       	dc.b	nD5, $03
0008CC48 E106                       	smpsAlterNote       $06
0008CC4A C90E                       	dc.b	nC6, $0E
0008CC4C E107                       	smpsAlterNote       $07
0008CC4E CB03 8001                  	dc.b	nD6, $03, nRst, $01
0008CC52 E10C                       	smpsAlterNote       $0C
0008CC54 C704                       	dc.b	nBb5, $04
0008CC56 E10B                       	smpsAlterNote       $0B
0008CC58 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008CC5C E109                       	smpsAlterNote       $09
0008CC5E C404                       	dc.b	nG5, $04
0008CC60 E10B                       	smpsAlterNote       $0B
0008CC62 C60D                       	dc.b	nA5, $0D
0008CC64 E108                       	smpsAlterNote       $08
0008CC66 E701                       	dc.b	smpsNoAttack, $01
0008CC68 E105                       	smpsAlterNote       $05
0008CC6A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CC6E E10B                       	smpsAlterNote       $0B
0008CC70 E701                       	dc.b	smpsNoAttack, $01
0008CC72 E10F                       	smpsAlterNote       $0F
0008CC74 E701                       	dc.b	smpsNoAttack, $01
0008CC76 E10E                       	smpsAlterNote       $0E
0008CC78 E701                       	dc.b	smpsNoAttack, $01
0008CC7A E108                       	smpsAlterNote       $08
0008CC7C E701                       	dc.b	smpsNoAttack, $01
0008CC7E E104                       	smpsAlterNote       $04
0008CC80 E701                       	dc.b	smpsNoAttack, $01
0008CC82 E108                       	smpsAlterNote       $08
0008CC84 E701                       	dc.b	smpsNoAttack, $01
0008CC86 E10B                       	smpsAlterNote       $0B
0008CC88 E701                       	dc.b	smpsNoAttack, $01
0008CC8A E10F                       	smpsAlterNote       $0F
0008CC8C E701                       	dc.b	smpsNoAttack, $01
0008CC8E E10B                       	smpsAlterNote       $0B
0008CC90 E701                       	dc.b	smpsNoAttack, $01
0008CC92 E105                       	smpsAlterNote       $05
0008CC94 E701                       	dc.b	smpsNoAttack, $01
0008CC96 E104                       	smpsAlterNote       $04
0008CC98 E701                       	dc.b	smpsNoAttack, $01
0008CC9A E108                       	smpsAlterNote       $08
0008CC9C E701                       	dc.b	smpsNoAttack, $01
0008CC9E E10E                       	smpsAlterNote       $0E
0008CCA0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CCA4 E10B                       	smpsAlterNote       $0B
0008CCA6 E701                       	dc.b	smpsNoAttack, $01
0008CCA8 E105                       	smpsAlterNote       $05
0008CCAA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CCAE E10B                       	smpsAlterNote       $0B
0008CCB0 E701                       	dc.b	smpsNoAttack, $01
0008CCB2 E10E                       	smpsAlterNote       $0E
0008CCB4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CCB8 E108                       	smpsAlterNote       $08
0008CCBA E701                       	dc.b	smpsNoAttack, $01
0008CCBC E105                       	smpsAlterNote       $05
0008CCBE 8001                       	dc.b	nRst, $01
0008CCC0 E109                       	smpsAlterNote       $09
0008CCC2 C402                       	dc.b	nG5, $02
0008CCC4 E10B                       	smpsAlterNote       $0B
0008CCC6 E7C5 01C6 0EC6 0480 01     	dc.b	smpsNoAttack, nAb5, $01, nA5, $0E, nA5, $04, nRst, $01
0008CCCF E109                       	smpsAlterNote       $09
0008CCD1 C404                       	dc.b	nG5, $04
0008CCD3 E10B                       	smpsAlterNote       $0B
0008CCD5 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008CCD9 E107                       	smpsAlterNote       $07
0008CCDB BF0D                       	dc.b	nD5, $0D
0008CCDD E101                       	smpsAlterNote       $01
0008CCDF E701                       	dc.b	smpsNoAttack, $01
0008CCE1 E100                       	smpsAlterNote       $00
0008CCE3 E701                       	dc.b	smpsNoAttack, $01
0008CCE5 E104                       	smpsAlterNote       $04
0008CCE7 E701                       	dc.b	smpsNoAttack, $01
0008CCE9 E10A                       	smpsAlterNote       $0A
0008CCEB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CCEF E107                       	smpsAlterNote       $07
0008CCF1 E701                       	dc.b	smpsNoAttack, $01
0008CCF3 E101                       	smpsAlterNote       $01
0008CCF5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CCF9 E107                       	smpsAlterNote       $07
0008CCFB E701                       	dc.b	smpsNoAttack, $01
0008CCFD E10A                       	smpsAlterNote       $0A
0008CCFF E701                       	dc.b	smpsNoAttack, $01
0008CD01 E10B                       	smpsAlterNote       $0B
0008CD03 8001                       	dc.b	nRst, $01
0008CD05 E108                       	smpsAlterNote       $08
0008CD07 C101                       	dc.b	nE5, $01
0008CD09 E109                       	smpsAlterNote       $09
0008CD0B E7C2 01C4 01               	dc.b	smpsNoAttack, nF5, $01, nG5, $01
0008CD10 E10B                       	smpsAlterNote       $0B
0008CD12 C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
0008CD1A E108                       	smpsAlterNote       $08
0008CD1C CD06 8001                  	dc.b	nE6, $06, nRst, $01
0008CD20 E109                       	smpsAlterNote       $09
0008CD22 CE06 8001                  	dc.b	nF6, $06, nRst, $01
0008CD26 E108                       	smpsAlterNote       $08
0008CD28 CD02 8001                  	dc.b	nE6, $02, nRst, $01
0008CD2C E106                       	smpsAlterNote       $06
0008CD2E C903                       	dc.b	nC6, $03
0008CD30 E109                       	smpsAlterNote       $09
0008CD32 C403 8001                  	dc.b	nG5, $03, nRst, $01
0008CD36 E10C                       	smpsAlterNote       $0C
0008CD38 C70D                       	dc.b	nBb5, $0D
0008CD3A E109                       	smpsAlterNote       $09
0008CD3C E701                       	dc.b	smpsNoAttack, $01
0008CD3E E105                       	smpsAlterNote       $05
0008CD40 E701                       	dc.b	smpsNoAttack, $01
0008CD42 E109                       	smpsAlterNote       $09
0008CD44 E701                       	dc.b	smpsNoAttack, $01
0008CD46 E10F                       	smpsAlterNote       $0F
0008CD48 E701                       	dc.b	smpsNoAttack, $01
0008CD4A E110                       	smpsAlterNote       $10
0008CD4C E701                       	dc.b	smpsNoAttack, $01
0008CD4E E10C                       	smpsAlterNote       $0C
0008CD50 E701                       	dc.b	smpsNoAttack, $01
0008CD52 E106                       	smpsAlterNote       $06
0008CD54 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CD58 E109                       	smpsAlterNote       $09
0008CD5A E701                       	dc.b	smpsNoAttack, $01
0008CD5C E10F                       	smpsAlterNote       $0F
0008CD5E E701                       	dc.b	smpsNoAttack, $01
0008CD60 E110                       	smpsAlterNote       $10
0008CD62 8001                       	dc.b	nRst, $01
0008CD64 E10B                       	smpsAlterNote       $0B
0008CD66 C606 8001 C50D             	dc.b	nA5, $06, nRst, $01, nAb5, $0D
0008CD6C E105                       	smpsAlterNote       $05
0008CD6E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CD72 E108                       	smpsAlterNote       $08
0008CD74 E701                       	dc.b	smpsNoAttack, $01
0008CD76 E10E                       	smpsAlterNote       $0E
0008CD78 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CD7C E108                       	smpsAlterNote       $08
0008CD7E E701                       	dc.b	smpsNoAttack, $01
0008CD80 E105                       	smpsAlterNote       $05
0008CD82 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CD86 E10B                       	smpsAlterNote       $0B
0008CD88 E701                       	dc.b	smpsNoAttack, $01
0008CD8A E10F                       	smpsAlterNote       $0F
0008CD8C E701                       	dc.b	smpsNoAttack, $01
0008CD8E E10E                       	smpsAlterNote       $0E
0008CD90 E701                       	dc.b	smpsNoAttack, $01
0008CD92 E108                       	smpsAlterNote       $08
0008CD94 E701                       	dc.b	smpsNoAttack, $01
0008CD96 E104                       	smpsAlterNote       $04
0008CD98 E701                       	dc.b	smpsNoAttack, $01
0008CD9A E108                       	smpsAlterNote       $08
0008CD9C E701                       	dc.b	smpsNoAttack, $01
0008CD9E E10B                       	smpsAlterNote       $0B
0008CDA0 E701                       	dc.b	smpsNoAttack, $01
0008CDA2 E10F                       	smpsAlterNote       $0F
0008CDA4 E701                       	dc.b	smpsNoAttack, $01
0008CDA6 E10B                       	smpsAlterNote       $0B
0008CDA8 E701                       	dc.b	smpsNoAttack, $01
0008CDAA E105                       	smpsAlterNote       $05
0008CDAC E701                       	dc.b	smpsNoAttack, $01
0008CDAE E104                       	smpsAlterNote       $04
0008CDB0 E701                       	dc.b	smpsNoAttack, $01
0008CDB2 E108                       	smpsAlterNote       $08
0008CDB4 E701                       	dc.b	smpsNoAttack, $01
0008CDB6 E10E                       	smpsAlterNote       $0E
0008CDB8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CDBC E10B                       	smpsAlterNote       $0B
0008CDBE E701                       	dc.b	smpsNoAttack, $01
0008CDC0 E105                       	smpsAlterNote       $05
0008CDC2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CDC6 E10B                       	smpsAlterNote       $0B
0008CDC8 E701                       	dc.b	smpsNoAttack, $01
0008CDCA E10E                       	smpsAlterNote       $0E
0008CDCC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CDD0 E108                       	smpsAlterNote       $08
0008CDD2 E701                       	dc.b	smpsNoAttack, $01
0008CDD4 E104                       	smpsAlterNote       $04
0008CDD6 E701                       	dc.b	smpsNoAttack, $01
0008CDD8 E105                       	smpsAlterNote       $05
0008CDDA E701                       	dc.b	smpsNoAttack, $01
0008CDDC E10B                       	smpsAlterNote       $0B
0008CDDE E701                       	dc.b	smpsNoAttack, $01
0008CDE0 E10F                       	smpsAlterNote       $0F
0008CDE2 E701                       	dc.b	smpsNoAttack, $01
0008CDE4 E10B                       	smpsAlterNote       $0B
0008CDE6 E701                       	dc.b	smpsNoAttack, $01
0008CDE8 E108                       	smpsAlterNote       $08
0008CDEA E701                       	dc.b	smpsNoAttack, $01
0008CDEC E104                       	smpsAlterNote       $04
0008CDEE E701                       	dc.b	smpsNoAttack, $01
0008CDF0 E108                       	smpsAlterNote       $08
0008CDF2 E701                       	dc.b	smpsNoAttack, $01
0008CDF4 E10E                       	smpsAlterNote       $0E
0008CDF6 E701                       	dc.b	smpsNoAttack, $01
0008CDF8 E10F                       	smpsAlterNote       $0F
0008CDFA E701                       	dc.b	smpsNoAttack, $01
0008CDFC E10B                       	smpsAlterNote       $0B
0008CDFE E701                       	dc.b	smpsNoAttack, $01
0008CE00 E105                       	smpsAlterNote       $05
0008CE02 E701                       	dc.b	smpsNoAttack, $01
0008CE04 E10B                       	smpsAlterNote       $0B
0008CE06 C60E                       	dc.b	nA5, $0E
0008CE08 E105                       	smpsAlterNote       $05
0008CE0A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CE0E E10B                       	smpsAlterNote       $0B
0008CE10 E701                       	dc.b	smpsNoAttack, $01
0008CE12 E10E                       	smpsAlterNote       $0E
0008CE14 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CE18 E108                       	smpsAlterNote       $08
0008CE1A E701                       	dc.b	smpsNoAttack, $01
0008CE1C E104                       	smpsAlterNote       $04
0008CE1E E701                       	dc.b	smpsNoAttack, $01
0008CE20 E105                       	smpsAlterNote       $05
0008CE22 E701                       	dc.b	smpsNoAttack, $01
0008CE24 E10B                       	smpsAlterNote       $0B
0008CE26 E701                       	dc.b	smpsNoAttack, $01
0008CE28 E10F                       	smpsAlterNote       $0F
0008CE2A E701                       	dc.b	smpsNoAttack, $01
0008CE2C E10B                       	smpsAlterNote       $0B
0008CE2E E701                       	dc.b	smpsNoAttack, $01
0008CE30 E108                       	smpsAlterNote       $08
0008CE32 E701                       	dc.b	smpsNoAttack, $01
0008CE34 E104                       	smpsAlterNote       $04
0008CE36 E701                       	dc.b	smpsNoAttack, $01
0008CE38 E108                       	smpsAlterNote       $08
0008CE3A E701                       	dc.b	smpsNoAttack, $01
0008CE3C E10E                       	smpsAlterNote       $0E
0008CE3E E701                       	dc.b	smpsNoAttack, $01
0008CE40 E10F                       	smpsAlterNote       $0F
0008CE42 E701                       	dc.b	smpsNoAttack, $01
0008CE44 E10B                       	smpsAlterNote       $0B
0008CE46 E701                       	dc.b	smpsNoAttack, $01
0008CE48 E105                       	smpsAlterNote       $05
0008CE4A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CE4E E108                       	smpsAlterNote       $08
0008CE50 E701                       	dc.b	smpsNoAttack, $01
0008CE52 E10E                       	smpsAlterNote       $0E
0008CE54 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CE58 E108                       	smpsAlterNote       $08
0008CE5A E701                       	dc.b	smpsNoAttack, $01
0008CE5C E105                       	smpsAlterNote       $05
0008CE5E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CE62 E10B                       	smpsAlterNote       $0B
0008CE64 E701                       	dc.b	smpsNoAttack, $01
0008CE66 E10F                       	smpsAlterNote       $0F
0008CE68 E701                       	dc.b	smpsNoAttack, $01
0008CE6A E10E                       	smpsAlterNote       $0E
0008CE6C E701                       	dc.b	smpsNoAttack, $01
0008CE6E E108                       	smpsAlterNote       $08
0008CE70 E701                       	dc.b	smpsNoAttack, $01
0008CE72 E104                       	smpsAlterNote       $04
0008CE74 E701                       	dc.b	smpsNoAttack, $01
0008CE76 E108                       	smpsAlterNote       $08
0008CE78 E701                       	dc.b	smpsNoAttack, $01
0008CE7A E10E                       	smpsAlterNote       $0E
0008CE7C E701                       	dc.b	smpsNoAttack, $01
0008CE7E E10F                       	smpsAlterNote       $0F
0008CE80 E701                       	dc.b	smpsNoAttack, $01
0008CE82 E10B                       	smpsAlterNote       $0B
0008CE84 E701                       	dc.b	smpsNoAttack, $01
0008CE86 E105                       	smpsAlterNote       $05
0008CE88 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CE8C E108                       	smpsAlterNote       $08
0008CE8E E701                       	dc.b	smpsNoAttack, $01
0008CE90 E10E                       	smpsAlterNote       $0E
0008CE92 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CE96 E108                       	smpsAlterNote       $08
0008CE98 E701                       	dc.b	smpsNoAttack, $01
0008CE9A E105                       	smpsAlterNote       $05
0008CE9C E701                       	dc.b	smpsNoAttack, $01
0008CEA0 E10B                       	smpsAlterNote       $0B
0008CEA2 E6FD                       	smpsAlterVol        $FD
0008CEA4 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008CEA8 E109                       	smpsAlterNote       $09
0008CEAA C404                       	dc.b	nG5, $04
0008CEAC E10B                       	smpsAlterNote       $0B
0008CEAE C604 8001                  	dc.b	nA5, $04, nRst, $01
0008CEB2 E107                       	smpsAlterNote       $07
0008CEB4 BF0A BF03 8001             	dc.b	nD5, $0A, nD5, $03, nRst, $01
0008CEBA E10B                       	smpsAlterNote       $0B
0008CEBC C604                       	dc.b	nA5, $04
0008CEBE E109                       	smpsAlterNote       $09
0008CEC0 C404 8001                  	dc.b	nG5, $04, nRst, $01
0008CEC4 E10B                       	smpsAlterNote       $0B
0008CEC6 C604                       	dc.b	nA5, $04
0008CEC8 E108                       	smpsAlterNote       $08
0008CECA C10A 8001 C102 8001        	dc.b	nE5, $0A, nRst, $01, nE5, $02, nRst, $01
0008CED2 E106                       	smpsAlterNote       $06
0008CED4 C904 8001                  	dc.b	nC6, $04, nRst, $01
0008CED8 E10C                       	smpsAlterNote       $0C
0008CEDA C704                       	dc.b	nBb5, $04
0008CEDC E10B                       	smpsAlterNote       $0B
0008CEDE C604 8001                  	dc.b	nA5, $04, nRst, $01
0008CEE2 E109                       	smpsAlterNote       $09
0008CEE4 C403 C203 8001 C402 8001   	dc.b	nG5, $03, nF5, $03, nRst, $01, nG5, $02, nRst, $01
0008CEEE E10B                       	smpsAlterNote       $0B
0008CEF0 C60D                       	dc.b	nA5, $0D
0008CEF2 E108                       	smpsAlterNote       $08
0008CEF4 E701                       	dc.b	smpsNoAttack, $01
0008CEF6 E104                       	smpsAlterNote       $04
0008CEF8 E701                       	dc.b	smpsNoAttack, $01
0008CEFA E108                       	smpsAlterNote       $08
0008CEFC E701                       	dc.b	smpsNoAttack, $01
0008CEFE E10E                       	smpsAlterNote       $0E
0008CF00 E701                       	dc.b	smpsNoAttack, $01
0008CF02 E10F                       	smpsAlterNote       $0F
0008CF04 E701                       	dc.b	smpsNoAttack, $01
0008CF06 E10B                       	smpsAlterNote       $0B
0008CF08 E701                       	dc.b	smpsNoAttack, $01
0008CF0A E105                       	smpsAlterNote       $05
0008CF0C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CF10 E108                       	smpsAlterNote       $08
0008CF12 E701                       	dc.b	smpsNoAttack, $01
0008CF14 E10E                       	smpsAlterNote       $0E
0008CF16 E701                       	dc.b	smpsNoAttack, $01
0008CF18 E10F                       	smpsAlterNote       $0F
0008CF1A 8001                       	dc.b	nRst, $01
0008CF1C E109                       	smpsAlterNote       $09
0008CF1E C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
0008CF24 E108                       	smpsAlterNote       $08
0008CF26 C10D                       	dc.b	nE5, $0D
0008CF28 E102                       	smpsAlterNote       $02
0008CF2A E701                       	dc.b	smpsNoAttack, $01
0008CF2C E101                       	smpsAlterNote       $01
0008CF2E E701                       	dc.b	smpsNoAttack, $01
0008CF30 E105                       	smpsAlterNote       $05
0008CF32 E701                       	dc.b	smpsNoAttack, $01
0008CF34 E10B                       	smpsAlterNote       $0B
0008CF36 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CF3A E108                       	smpsAlterNote       $08
0008CF3C E701                       	dc.b	smpsNoAttack, $01
0008CF3E E102                       	smpsAlterNote       $02
0008CF40 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CF44 E108                       	smpsAlterNote       $08
0008CF46 E701                       	dc.b	smpsNoAttack, $01
0008CF48 E10B                       	smpsAlterNote       $0B
0008CF4A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CF4E E105                       	smpsAlterNote       $05
0008CF50 E701                       	dc.b	smpsNoAttack, $01
0008CF52 E101                       	smpsAlterNote       $01
0008CF54 E701                       	dc.b	smpsNoAttack, $01
0008CF56 E102                       	smpsAlterNote       $02
0008CF58 E701                       	dc.b	smpsNoAttack, $01
0008CF5A E108                       	smpsAlterNote       $08
0008CF5C E701                       	dc.b	smpsNoAttack, $01
0008CF5E E10C                       	smpsAlterNote       $0C
0008CF60 E701                       	dc.b	smpsNoAttack, $01
0008CF62 E108                       	smpsAlterNote       $08
0008CF64 E701                       	dc.b	smpsNoAttack, $01
0008CF66 E105                       	smpsAlterNote       $05
0008CF68 E701                       	dc.b	smpsNoAttack, $01
0008CF6A E101                       	smpsAlterNote       $01
0008CF6C E701                       	dc.b	smpsNoAttack, $01
0008CF6E E105                       	smpsAlterNote       $05
0008CF70 E701                       	dc.b	smpsNoAttack, $01
0008CF72 E10B                       	smpsAlterNote       $0B
0008CF74 E701                       	dc.b	smpsNoAttack, $01
0008CF76 E10C                       	smpsAlterNote       $0C
0008CF78 E701                       	dc.b	smpsNoAttack, $01
0008CF7A E108                       	smpsAlterNote       $08
0008CF7C E701                       	dc.b	smpsNoAttack, $01
0008CF7E E102                       	smpsAlterNote       $02
0008CF80 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CF84 E105                       	smpsAlterNote       $05
0008CF86 E701                       	dc.b	smpsNoAttack, $01
0008CF88 E10B                       	smpsAlterNote       $0B
0008CF8A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CF8E E105                       	smpsAlterNote       $05
0008CF90 E701                       	dc.b	smpsNoAttack, $01
0008CF92 E102                       	smpsAlterNote       $02
0008CF94 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CF98 E108                       	smpsAlterNote       $08
0008CF9A E701                       	dc.b	smpsNoAttack, $01
0008CF9C E10C                       	smpsAlterNote       $0C
0008CF9E E701                       	dc.b	smpsNoAttack, $01
0008CFA0 E10B                       	smpsAlterNote       $0B
0008CFA2 E701                       	dc.b	smpsNoAttack, $01
0008CFA4 E105                       	smpsAlterNote       $05
0008CFA6 E701                       	dc.b	smpsNoAttack, $01
0008CFA8 E101                       	smpsAlterNote       $01
0008CFAA E701                       	dc.b	smpsNoAttack, $01
0008CFAC E105                       	smpsAlterNote       $05
0008CFAE E701                       	dc.b	smpsNoAttack, $01
0008CFB0 E108                       	smpsAlterNote       $08
0008CFB2 E701                       	dc.b	smpsNoAttack, $01
0008CFB4 E10C                       	smpsAlterNote       $0C
0008CFB6 E701                       	dc.b	smpsNoAttack, $01
0008CFB8 E108                       	smpsAlterNote       $08
0008CFBA E701                       	dc.b	smpsNoAttack, $01
0008CFBC E102                       	smpsAlterNote       $02
0008CFBE E701                       	dc.b	smpsNoAttack, $01
0008CFC0 E101                       	smpsAlterNote       $01
0008CFC2 E701                       	dc.b	smpsNoAttack, $01
0008CFC4 E105                       	smpsAlterNote       $05
0008CFC6 E701                       	dc.b	smpsNoAttack, $01
0008CFC8 E10B                       	smpsAlterNote       $0B
0008CFCA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CFCE E108                       	smpsAlterNote       $08
0008CFD0 E701                       	dc.b	smpsNoAttack, $01
0008CFD2 E102                       	smpsAlterNote       $02
0008CFD4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CFD8 E108                       	smpsAlterNote       $08
0008CFDA E701                       	dc.b	smpsNoAttack, $01
0008CFDC E10B                       	smpsAlterNote       $0B
0008CFDE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CFE2 E105                       	smpsAlterNote       $05
0008CFE4 E701                       	dc.b	smpsNoAttack, $01
0008CFE6 E101                       	smpsAlterNote       $01
0008CFE8 E701                       	dc.b	smpsNoAttack, $01
0008CFEA E102                       	smpsAlterNote       $02
0008CFEC E701                       	dc.b	smpsNoAttack, $01
0008CFEE E108                       	smpsAlterNote       $08
0008CFF0 E701                       	dc.b	smpsNoAttack, $01
0008CFF2 E10C                       	smpsAlterNote       $0C
0008CFF4 E701                       	dc.b	smpsNoAttack, $01
0008CFF6 E108                       	smpsAlterNote       $08
0008CFF8 E701                       	dc.b	smpsNoAttack, $01
0008CFFA E105                       	smpsAlterNote       $05
0008CFFC E701                       	dc.b	smpsNoAttack, $01
0008CFFE E101                       	smpsAlterNote       $01
0008D000 E701                       	dc.b	smpsNoAttack, $01
0008D002 E105                       	smpsAlterNote       $05
0008D004 E701                       	dc.b	smpsNoAttack, $01
0008D006 E10B                       	smpsAlterNote       $0B
0008D008 E701                       	dc.b	smpsNoAttack, $01
0008D00A E10C                       	smpsAlterNote       $0C
0008D00C E701                       	dc.b	smpsNoAttack, $01
0008D00E E108                       	smpsAlterNote       $08
0008D010 E701                       	dc.b	smpsNoAttack, $01
0008D012 E102                       	smpsAlterNote       $02
0008D014 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D018 E105                       	smpsAlterNote       $05
0008D01A E701                       	dc.b	smpsNoAttack, $01
0008D01C E10B                       	smpsAlterNote       $0B
0008D01E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D022 E105                       	smpsAlterNote       $05
0008D024 E701                       	dc.b	smpsNoAttack, $01
0008D026 E101                       	smpsAlterNote       $01
0008D028 E701                       	dc.b	smpsNoAttack, $01
0008D02A E102                       	smpsAlterNote       $02
0008D02C E701                       	dc.b	smpsNoAttack, $01
0008D02E E108                       	smpsAlterNote       $08
0008D030 E701                       	dc.b	smpsNoAttack, $01
0008D032 E10C                       	smpsAlterNote       $0C
0008D034 E701                       	dc.b	smpsNoAttack, $01
0008D036 E108                       	smpsAlterNote       $08
0008D038 E701                       	dc.b	smpsNoAttack, $01
0008D03A E105                       	smpsAlterNote       $05
0008D03C E701                       	dc.b	smpsNoAttack, $01
0008D03E E101                       	smpsAlterNote       $01
0008D040 E701                       	dc.b	smpsNoAttack, $01
0008D042 E105                       	smpsAlterNote       $05
0008D044 E701                       	dc.b	smpsNoAttack, $01
0008D046 E10B                       	smpsAlterNote       $0B
0008D048 E701                       	dc.b	smpsNoAttack, $01
0008D04A E10C                       	smpsAlterNote       $0C
0008D04C E701                       	dc.b	smpsNoAttack, $01
0008D04E E108                       	smpsAlterNote       $08
0008D050 E701                       	dc.b	smpsNoAttack, $01
0008D052 E102                       	smpsAlterNote       $02
0008D054 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D058 E105                       	smpsAlterNote       $05
0008D05A E701                       	dc.b	smpsNoAttack, $01
0008D05C E10B                       	smpsAlterNote       $0B
0008D05E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D062 E105                       	smpsAlterNote       $05
0008D064 E701                       	dc.b	smpsNoAttack, $01
0008D066 E102                       	smpsAlterNote       $02
0008D068 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D06C E108                       	smpsAlterNote       $08
0008D06E E701                       	dc.b	smpsNoAttack, $01
0008D070 E10C                       	smpsAlterNote       $0C
0008D072 E701                       	dc.b	smpsNoAttack, $01
0008D074 E10B                       	smpsAlterNote       $0B
0008D076 E701                       	dc.b	smpsNoAttack, $01
0008D078 E105                       	smpsAlterNote       $05
0008D07A E701                       	dc.b	smpsNoAttack, $01
0008D07C E101                       	smpsAlterNote       $01
0008D07E E701                       	dc.b	smpsNoAttack, $01
0008D080 E105                       	smpsAlterNote       $05
0008D082 E701                       	dc.b	smpsNoAttack, $01
0008D084 E108                       	smpsAlterNote       $08
0008D086 E701                       	dc.b	smpsNoAttack, $01
0008D088 E10C                       	smpsAlterNote       $0C
0008D08A E701                       	dc.b	smpsNoAttack, $01
0008D08E E10B                       	smpsAlterNote       $0B
0008D090 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008D094 E109                       	smpsAlterNote       $09
0008D096 C404                       	dc.b	nG5, $04
0008D098 E10B                       	smpsAlterNote       $0B
0008D09A C604 8001                  	dc.b	nA5, $04, nRst, $01
0008D09E E107                       	smpsAlterNote       $07
0008D0A0 BF0A BF03 8001             	dc.b	nD5, $0A, nD5, $03, nRst, $01
0008D0A6 E10B                       	smpsAlterNote       $0B
0008D0A8 C604                       	dc.b	nA5, $04
0008D0AA E109                       	smpsAlterNote       $09
0008D0AC C404 8001                  	dc.b	nG5, $04, nRst, $01
0008D0B0 E10B                       	smpsAlterNote       $0B
0008D0B2 C604                       	dc.b	nA5, $04
0008D0B4 E108                       	smpsAlterNote       $08
0008D0B6 C10A 8001 C103             	dc.b	nE5, $0A, nRst, $01, nE5, $03
0008D0BC E106                       	smpsAlterNote       $06
0008D0BE C904 8001                  	dc.b	nC6, $04, nRst, $01
0008D0C2 E10C                       	smpsAlterNote       $0C
0008D0C4 C704                       	dc.b	nBb5, $04
0008D0C6 E10B                       	smpsAlterNote       $0B
0008D0C8 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008D0CC E109                       	smpsAlterNote       $09
0008D0CE C403 C203 8001 C402 8001   	dc.b	nG5, $03, nF5, $03, nRst, $01, nG5, $02, nRst, $01
0008D0D8 E10B                       	smpsAlterNote       $0B
0008D0DA C60D                       	dc.b	nA5, $0D
0008D0DC E108                       	smpsAlterNote       $08
0008D0DE E701                       	dc.b	smpsNoAttack, $01
0008D0E0 E104                       	smpsAlterNote       $04
0008D0E2 E701                       	dc.b	smpsNoAttack, $01
0008D0E4 E108                       	smpsAlterNote       $08
0008D0E6 E701                       	dc.b	smpsNoAttack, $01
0008D0E8 E10B                       	smpsAlterNote       $0B
0008D0EA E701                       	dc.b	smpsNoAttack, $01
0008D0EC E10F                       	smpsAlterNote       $0F
0008D0EE E701                       	dc.b	smpsNoAttack, $01
0008D0F0 E10B                       	smpsAlterNote       $0B
0008D0F2 E701                       	dc.b	smpsNoAttack, $01
0008D0F4 E105                       	smpsAlterNote       $05
0008D0F6 E701                       	dc.b	smpsNoAttack, $01
0008D0F8 E104                       	smpsAlterNote       $04
0008D0FA E701                       	dc.b	smpsNoAttack, $01
0008D0FC E108                       	smpsAlterNote       $08
0008D0FE E701                       	dc.b	smpsNoAttack, $01
0008D100 E10E                       	smpsAlterNote       $0E
0008D102 E701                       	dc.b	smpsNoAttack, $01
0008D104 E10F                       	smpsAlterNote       $0F
0008D106 8001                       	dc.b	nRst, $01
0008D108 E109                       	smpsAlterNote       $09
0008D10A C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
0008D110 E108                       	smpsAlterNote       $08
0008D112 C10D                       	dc.b	nE5, $0D
0008D114 E105                       	smpsAlterNote       $05
0008D116 E701                       	dc.b	smpsNoAttack, $01
0008D118 E101                       	smpsAlterNote       $01
0008D11A E701                       	dc.b	smpsNoAttack, $01
0008D11C E105                       	smpsAlterNote       $05
0008D11E E701                       	dc.b	smpsNoAttack, $01
0008D120 E10B                       	smpsAlterNote       $0B
0008D122 E701                       	dc.b	smpsNoAttack, $01
0008D124 E10C                       	smpsAlterNote       $0C
0008D126 E701                       	dc.b	smpsNoAttack, $01
0008D128 E108                       	smpsAlterNote       $08
0008D12A E701                       	dc.b	smpsNoAttack, $01
0008D12C E102                       	smpsAlterNote       $02
0008D12E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D132 E105                       	smpsAlterNote       $05
0008D134 E701                       	dc.b	smpsNoAttack, $01
0008D136 E10B                       	smpsAlterNote       $0B
0008D138 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D13C E105                       	smpsAlterNote       $05
0008D13E E701                       	dc.b	smpsNoAttack, $01
0008D140 E102                       	smpsAlterNote       $02
0008D142 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D146 E108                       	smpsAlterNote       $08
0008D148 E701                       	dc.b	smpsNoAttack, $01
0008D14A E10C                       	smpsAlterNote       $0C
0008D14C E701                       	dc.b	smpsNoAttack, $01
0008D14E E10B                       	smpsAlterNote       $0B
0008D150 E701                       	dc.b	smpsNoAttack, $01
0008D152 E105                       	smpsAlterNote       $05
0008D154 E701                       	dc.b	smpsNoAttack, $01
0008D156 E101                       	smpsAlterNote       $01
0008D158 E701                       	dc.b	smpsNoAttack, $01
0008D15A E105                       	smpsAlterNote       $05
0008D15C E701                       	dc.b	smpsNoAttack, $01
0008D15E E108                       	smpsAlterNote       $08
0008D160 E701                       	dc.b	smpsNoAttack, $01
0008D162 E10C                       	smpsAlterNote       $0C
0008D164 E701                       	dc.b	smpsNoAttack, $01
0008D166 E108                       	smpsAlterNote       $08
0008D168 E701                       	dc.b	smpsNoAttack, $01
0008D16A E102                       	smpsAlterNote       $02
0008D16C E701                       	dc.b	smpsNoAttack, $01
0008D16E E101                       	smpsAlterNote       $01
0008D170 E701                       	dc.b	smpsNoAttack, $01
0008D172 E105                       	smpsAlterNote       $05
0008D174 E701                       	dc.b	smpsNoAttack, $01
0008D176 E10B                       	smpsAlterNote       $0B
0008D178 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D17C E108                       	smpsAlterNote       $08
0008D17E E701                       	dc.b	smpsNoAttack, $01
0008D180 E102                       	smpsAlterNote       $02
0008D182 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D186 E108                       	smpsAlterNote       $08
0008D188 E701                       	dc.b	smpsNoAttack, $01
0008D18A E10B                       	smpsAlterNote       $0B
0008D18C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D190 E105                       	smpsAlterNote       $05
0008D192 E701                       	dc.b	smpsNoAttack, $01
0008D194 E101                       	smpsAlterNote       $01
0008D196 E701                       	dc.b	smpsNoAttack, $01
0008D198 E102                       	smpsAlterNote       $02
0008D19A E701                       	dc.b	smpsNoAttack, $01
0008D19C E108                       	smpsAlterNote       $08
0008D19E E701                       	dc.b	smpsNoAttack, $01
0008D1A0 E10C                       	smpsAlterNote       $0C
0008D1A2 E701                       	dc.b	smpsNoAttack, $01
0008D1A4 E108                       	smpsAlterNote       $08
0008D1A6 E701                       	dc.b	smpsNoAttack, $01
0008D1A8 E105                       	smpsAlterNote       $05
0008D1AA E701                       	dc.b	smpsNoAttack, $01
0008D1AC E101                       	smpsAlterNote       $01
0008D1AE E701                       	dc.b	smpsNoAttack, $01
0008D1B0 E105                       	smpsAlterNote       $05
0008D1B2 E701                       	dc.b	smpsNoAttack, $01
0008D1B4 E10B                       	smpsAlterNote       $0B
0008D1B6 E701                       	dc.b	smpsNoAttack, $01
0008D1B8 E10C                       	smpsAlterNote       $0C
0008D1BA E701                       	dc.b	smpsNoAttack, $01
0008D1BC E108                       	smpsAlterNote       $08
0008D1BE E701                       	dc.b	smpsNoAttack, $01
0008D1C0 E102                       	smpsAlterNote       $02
0008D1C2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D1C6 E108                       	smpsAlterNote       $08
0008D1C8 E701                       	dc.b	smpsNoAttack, $01
0008D1CA E10B                       	smpsAlterNote       $0B
0008D1CC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D1D0 E105                       	smpsAlterNote       $05
0008D1D2 E701                       	dc.b	smpsNoAttack, $01
0008D1D4 E101                       	smpsAlterNote       $01
0008D1D6 E701                       	dc.b	smpsNoAttack, $01
0008D1D8 E102                       	smpsAlterNote       $02
0008D1DA E701                       	dc.b	smpsNoAttack, $01
0008D1DC E108                       	smpsAlterNote       $08
0008D1DE E701                       	dc.b	smpsNoAttack, $01
0008D1E0 E10C                       	smpsAlterNote       $0C
0008D1E2 E701                       	dc.b	smpsNoAttack, $01
0008D1E4 E108                       	smpsAlterNote       $08
0008D1E6 E701                       	dc.b	smpsNoAttack, $01
0008D1E8 E105                       	smpsAlterNote       $05
0008D1EA E701                       	dc.b	smpsNoAttack, $01
0008D1EC E101                       	smpsAlterNote       $01
0008D1EE E701                       	dc.b	smpsNoAttack, $01
0008D1F0 E105                       	smpsAlterNote       $05
0008D1F2 E701                       	dc.b	smpsNoAttack, $01
0008D1F4 E10B                       	smpsAlterNote       $0B
0008D1F6 E701                       	dc.b	smpsNoAttack, $01
0008D1F8 E10C                       	smpsAlterNote       $0C
0008D1FA E701                       	dc.b	smpsNoAttack, $01
0008D1FC E108                       	smpsAlterNote       $08
0008D1FE E701                       	dc.b	smpsNoAttack, $01
0008D200 E102                       	smpsAlterNote       $02
0008D202 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D206 E105                       	smpsAlterNote       $05
0008D208 E701                       	dc.b	smpsNoAttack, $01
0008D20A E10B                       	smpsAlterNote       $0B
0008D20C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D210 E105                       	smpsAlterNote       $05
0008D212 E701                       	dc.b	smpsNoAttack, $01
0008D214 E102                       	smpsAlterNote       $02
0008D216 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D21A E108                       	smpsAlterNote       $08
0008D21C E701                       	dc.b	smpsNoAttack, $01
0008D21E E10C                       	smpsAlterNote       $0C
0008D220 E701                       	dc.b	smpsNoAttack, $01
0008D222 E10B                       	smpsAlterNote       $0B
0008D224 E701                       	dc.b	smpsNoAttack, $01
0008D226 E105                       	smpsAlterNote       $05
0008D228 E701                       	dc.b	smpsNoAttack, $01
0008D22A E101                       	smpsAlterNote       $01
0008D22C E701                       	dc.b	smpsNoAttack, $01
0008D22E E105                       	smpsAlterNote       $05
0008D230 E701                       	dc.b	smpsNoAttack, $01
0008D232 E108                       	smpsAlterNote       $08
0008D234 E701                       	dc.b	smpsNoAttack, $01
0008D236 E10C                       	smpsAlterNote       $0C
0008D238 E701                       	dc.b	smpsNoAttack, $01
0008D23A E108                       	smpsAlterNote       $08
0008D23C E701                       	dc.b	smpsNoAttack, $01
0008D23E E102                       	smpsAlterNote       $02
0008D240 E701                       	dc.b	smpsNoAttack, $01
0008D242 E101                       	smpsAlterNote       $01
0008D244 E701                       	dc.b	smpsNoAttack, $01
0008D246 E105                       	smpsAlterNote       $05
0008D248 E701                       	dc.b	smpsNoAttack, $01
0008D24A E10B                       	smpsAlterNote       $0B
0008D24C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D250 E108                       	smpsAlterNote       $08
0008D252 E701                       	dc.b	smpsNoAttack, $01
0008D254 E102                       	smpsAlterNote       $02
0008D256 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D25A E108                       	smpsAlterNote       $08
0008D25C E701                       	dc.b	smpsNoAttack, $01
0008D25E E10B                       	smpsAlterNote       $0B
0008D260 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D264 E105                       	smpsAlterNote       $05
0008D266 E701                       	dc.b	smpsNoAttack, $01
0008D268 E102                       	smpsAlterNote       $02
0008D26A 8001                       	dc.b	nRst, $01
0008D26C E107                       	smpsAlterNote       $07
0008D26E BF01 8001                  	dc.b	nD5, $01, nRst, $01
0008D272 E108                       	smpsAlterNote       $08
0008D274 C001 C10E                  	dc.b	nEb5, $01, nE5, $0E
0008D278 E102                       	smpsAlterNote       $02
0008D27A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D27E E108                       	smpsAlterNote       $08
0008D280 E701                       	dc.b	smpsNoAttack, $01
0008D282 E10B                       	smpsAlterNote       $0B
0008D284 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D288 E105                       	smpsAlterNote       $05
0008D28A E701                       	dc.b	smpsNoAttack, $01
0008D28C E101                       	smpsAlterNote       $01
0008D28E E701                       	dc.b	smpsNoAttack, $01
0008D290 E102                       	smpsAlterNote       $02
0008D292 E701                       	dc.b	smpsNoAttack, $01
0008D294 E108                       	smpsAlterNote       $08
0008D296 E701                       	dc.b	smpsNoAttack, $01
0008D298 E10C                       	smpsAlterNote       $0C
0008D29A E701                       	dc.b	smpsNoAttack, $01
0008D29C E108                       	smpsAlterNote       $08
0008D29E E701                       	dc.b	smpsNoAttack, $01
0008D2A0 E105                       	smpsAlterNote       $05
0008D2A2 E701                       	dc.b	smpsNoAttack, $01
0008D2A4 E101                       	smpsAlterNote       $01
0008D2A6 E701                       	dc.b	smpsNoAttack, $01
0008D2A8 E105                       	smpsAlterNote       $05
0008D2AA E701                       	dc.b	smpsNoAttack, $01
0008D2AC E10B                       	smpsAlterNote       $0B
0008D2AE E701                       	dc.b	smpsNoAttack, $01
0008D2B0 E10C                       	smpsAlterNote       $0C
0008D2B2 E701                       	dc.b	smpsNoAttack, $01
0008D2B4 E108                       	smpsAlterNote       $08
0008D2B6 E701                       	dc.b	smpsNoAttack, $01
0008D2B8 E102                       	smpsAlterNote       $02
0008D2BA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D2BE E105                       	smpsAlterNote       $05
0008D2C0 E701                       	dc.b	smpsNoAttack, $01
0008D2C2 E10B                       	smpsAlterNote       $0B
0008D2C4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D2C8 E105                       	smpsAlterNote       $05
0008D2CA E701                       	dc.b	smpsNoAttack, $01
0008D2CC E102                       	smpsAlterNote       $02
0008D2CE E701                       	dc.b	smpsNoAttack, $01
0008D2D0 E109                       	smpsAlterNote       $09
0008D2D2 C40A C207                  	dc.b	nG5, $0A, nF5, $07
0008D2D6 E108                       	smpsAlterNote       $08
0008D2D8 C10D                       	dc.b	nE5, $0D
0008D2DA E105                       	smpsAlterNote       $05
0008D2DC E701                       	dc.b	smpsNoAttack, $01
0008D2DE E101                       	smpsAlterNote       $01
0008D2E0 E701                       	dc.b	smpsNoAttack, $01
0008D2E2 E102                       	smpsAlterNote       $02
0008D2E4 E701                       	dc.b	smpsNoAttack, $01
0008D2E6 E108                       	smpsAlterNote       $08
0008D2E8 E701                       	dc.b	smpsNoAttack, $01
0008D2EA E10C                       	smpsAlterNote       $0C
0008D2EC E701                       	dc.b	smpsNoAttack, $01
0008D2EE E108                       	smpsAlterNote       $08
0008D2F0 E701                       	dc.b	smpsNoAttack, $01
0008D2F2 E105                       	smpsAlterNote       $05
0008D2F4 E701                       	dc.b	smpsNoAttack, $01
0008D2F6 E101                       	smpsAlterNote       $01
0008D2F8 E701                       	dc.b	smpsNoAttack, $01
0008D2FA E105                       	smpsAlterNote       $05
0008D2FC E701                       	dc.b	smpsNoAttack, $01
0008D2FE E10B                       	smpsAlterNote       $0B
0008D300 E701                       	dc.b	smpsNoAttack, $01
0008D302 E10C                       	smpsAlterNote       $0C
0008D304 E701                       	dc.b	smpsNoAttack, $01
0008D306 E108                       	smpsAlterNote       $08
0008D308 E701                       	dc.b	smpsNoAttack, $01
0008D30A E102                       	smpsAlterNote       $02
0008D30C E701 E701 800E             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $0E
0008D314 E10B                       	smpsAlterNote       $0B
0008D316 BA01 8001                  	dc.b	nA4, $01, nRst, $01
0008D31A E10C                       	smpsAlterNote       $0C
0008D31C BB01 8001                  	dc.b	nBb4, $01, nRst, $01
0008D320 E10B                       	smpsAlterNote       $0B
0008D322 BA03 BA06 8001             	dc.b	nA4, $03, nA4, $06, nRst, $01
0008D328 E107                       	smpsAlterNote       $07
0008D32A BF03                       	dc.b	nD5, $03
0008D32C E108                       	smpsAlterNote       $08
0008D32E C103 8001                  	dc.b	nE5, $03, nRst, $01
0008D332 E109                       	smpsAlterNote       $09
0008D334 C203 C403 8001             	dc.b	nF5, $03, nG5, $03, nRst, $01
0008D33A E10B                       	smpsAlterNote       $0B
0008D33C C606 8001                  	dc.b	nA5, $06, nRst, $01
0008D340 E107                       	smpsAlterNote       $07
0008D342 BF02 8001                  	dc.b	nD5, $02, nRst, $01
0008D346 E106                       	smpsAlterNote       $06
0008D348 C90D                       	dc.b	nC6, $0D
0008D34A E103                       	smpsAlterNote       $03
0008D34C E701                       	dc.b	smpsNoAttack, $01
0008D34E E1FF                       	smpsAlterNote       $FF
0008D350 E701                       	dc.b	smpsNoAttack, $01
0008D352 E103                       	smpsAlterNote       $03
0008D354 E701                       	dc.b	smpsNoAttack, $01
0008D356 E109                       	smpsAlterNote       $09
0008D358 E701                       	dc.b	smpsNoAttack, $01
0008D35A E10A                       	smpsAlterNote       $0A
0008D35C E701                       	dc.b	smpsNoAttack, $01
0008D35E E106                       	smpsAlterNote       $06
0008D360 E701                       	dc.b	smpsNoAttack, $01
0008D362 E100                       	smpsAlterNote       $00
0008D364 E701                       	dc.b	smpsNoAttack, $01
0008D366 E10C                       	smpsAlterNote       $0C
0008D368 C703 8001                  	dc.b	nBb5, $03, nRst, $01
0008D36C E10B                       	smpsAlterNote       $0B
0008D36E C603                       	dc.b	nA5, $03
0008D370 E109                       	smpsAlterNote       $09
0008D372 C403 8001                  	dc.b	nG5, $03, nRst, $01
0008D376 E10B                       	smpsAlterNote       $0B
0008D378 C60D                       	dc.b	nA5, $0D
0008D37A E105                       	smpsAlterNote       $05
0008D37C E701                       	dc.b	smpsNoAttack, $01
0008D37E E104                       	smpsAlterNote       $04
0008D380 E701                       	dc.b	smpsNoAttack, $01
0008D382 E108                       	smpsAlterNote       $08
0008D384 E701                       	dc.b	smpsNoAttack, $01
0008D386 E10E                       	smpsAlterNote       $0E
0008D388 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D38C E10B                       	smpsAlterNote       $0B
0008D38E E701                       	dc.b	smpsNoAttack, $01
0008D390 E105                       	smpsAlterNote       $05
0008D392 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D396 E10B                       	smpsAlterNote       $0B
0008D398 E701                       	dc.b	smpsNoAttack, $01
0008D39A E10E                       	smpsAlterNote       $0E
0008D39C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D3A0 E108                       	smpsAlterNote       $08
0008D3A2 E701                       	dc.b	smpsNoAttack, $01
0008D3A4 E104                       	smpsAlterNote       $04
0008D3A6 E701                       	dc.b	smpsNoAttack, $01
0008D3A8 E105                       	smpsAlterNote       $05
0008D3AA E701                       	dc.b	smpsNoAttack, $01
0008D3AC E10B                       	smpsAlterNote       $0B
0008D3AE E701                       	dc.b	smpsNoAttack, $01
0008D3B0 E10F                       	smpsAlterNote       $0F
0008D3B2 E701                       	dc.b	smpsNoAttack, $01
0008D3B4 E10B                       	smpsAlterNote       $0B
0008D3B6 E701                       	dc.b	smpsNoAttack, $01
0008D3B8 E108                       	smpsAlterNote       $08
0008D3BA E701                       	dc.b	smpsNoAttack, $01
0008D3BC E104                       	smpsAlterNote       $04
0008D3BE E701                       	dc.b	smpsNoAttack, $01
0008D3C0 E108                       	smpsAlterNote       $08
0008D3C2 E701                       	dc.b	smpsNoAttack, $01
0008D3C4 E10E                       	smpsAlterNote       $0E
0008D3C6 E701                       	dc.b	smpsNoAttack, $01
0008D3C8 E10F                       	smpsAlterNote       $0F
0008D3CA E701                       	dc.b	smpsNoAttack, $01
0008D3CC E10B                       	smpsAlterNote       $0B
0008D3CE E701                       	dc.b	smpsNoAttack, $01
0008D3D0 E105                       	smpsAlterNote       $05
0008D3D2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D3D6 E108                       	smpsAlterNote       $08
0008D3D8 E701                       	dc.b	smpsNoAttack, $01
0008D3DA E10E                       	smpsAlterNote       $0E
0008D3DC E701                       	dc.b	smpsNoAttack, $01
0008D3DE E10F                       	smpsAlterNote       $0F
0008D3E0 800F                       	dc.b	nRst, $0F
0008D3E2 E107                       	smpsAlterNote       $07
0008D3E4 BF02 8001                  	dc.b	nD5, $02, nRst, $01
0008D3E8 E108                       	smpsAlterNote       $08
0008D3EA C103                       	dc.b	nE5, $03
0008D3EC E109                       	smpsAlterNote       $09
0008D3EE C203 8001 C403             	dc.b	nF5, $03, nRst, $01, nG5, $03
0008D3F4 E10B                       	smpsAlterNote       $0B
0008D3F6 C607                       	dc.b	nA5, $07
0008D3F8 E107                       	smpsAlterNote       $07
0008D3FA BF03 8001                  	dc.b	nD5, $03, nRst, $01
0008D3FE E106                       	smpsAlterNote       $06
0008D400 C90D                       	dc.b	nC6, $0D
0008D402 E107                       	smpsAlterNote       $07
0008D404 CB03 8001                  	dc.b	nD6, $03, nRst, $01
0008D408 E10C                       	smpsAlterNote       $0C
0008D40A C704                       	dc.b	nBb5, $04
0008D40C E10B                       	smpsAlterNote       $0B
0008D40E C604 8001                  	dc.b	nA5, $04, nRst, $01
0008D412 E109                       	smpsAlterNote       $09
0008D414 C404                       	dc.b	nG5, $04
0008D416 E10B                       	smpsAlterNote       $0B
0008D418 C60D                       	dc.b	nA5, $0D
0008D41A E108                       	smpsAlterNote       $08
0008D41C E701                       	dc.b	smpsNoAttack, $01
0008D41E E105                       	smpsAlterNote       $05
0008D420 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D424 E10B                       	smpsAlterNote       $0B
0008D426 E701                       	dc.b	smpsNoAttack, $01
0008D428 E10F                       	smpsAlterNote       $0F
0008D42A E701                       	dc.b	smpsNoAttack, $01
0008D42C E10E                       	smpsAlterNote       $0E
0008D42E E701                       	dc.b	smpsNoAttack, $01
0008D430 E108                       	smpsAlterNote       $08
0008D432 E701                       	dc.b	smpsNoAttack, $01
0008D434 E104                       	smpsAlterNote       $04
0008D436 E701                       	dc.b	smpsNoAttack, $01
0008D438 E108                       	smpsAlterNote       $08
0008D43A E701                       	dc.b	smpsNoAttack, $01
0008D43C E10B                       	smpsAlterNote       $0B
0008D43E E701                       	dc.b	smpsNoAttack, $01
0008D440 E10F                       	smpsAlterNote       $0F
0008D442 E701                       	dc.b	smpsNoAttack, $01
0008D444 E10B                       	smpsAlterNote       $0B
0008D446 E701                       	dc.b	smpsNoAttack, $01
0008D448 E105                       	smpsAlterNote       $05
0008D44A E701                       	dc.b	smpsNoAttack, $01
0008D44C E104                       	smpsAlterNote       $04
0008D44E E701                       	dc.b	smpsNoAttack, $01
0008D450 E108                       	smpsAlterNote       $08
0008D452 E701                       	dc.b	smpsNoAttack, $01
0008D454 E10E                       	smpsAlterNote       $0E
0008D456 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D45A E10B                       	smpsAlterNote       $0B
0008D45C E701                       	dc.b	smpsNoAttack, $01
0008D45E E105                       	smpsAlterNote       $05
0008D460 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D464 E10B                       	smpsAlterNote       $0B
0008D466 E701                       	dc.b	smpsNoAttack, $01
0008D468 E10E                       	smpsAlterNote       $0E
0008D46A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D46E E108                       	smpsAlterNote       $08
0008D470 E701                       	dc.b	smpsNoAttack, $01
0008D472 E105                       	smpsAlterNote       $05
0008D474 8001                       	dc.b	nRst, $01
0008D476 E109                       	smpsAlterNote       $09
0008D478 C401 8001                  	dc.b	nG5, $01, nRst, $01
0008D47C E10B                       	smpsAlterNote       $0B
0008D47E C501 C60E C604 8001        	dc.b	nAb5, $01, nA5, $0E, nA5, $04, nRst, $01
0008D486 E109                       	smpsAlterNote       $09
0008D488 C404                       	dc.b	nG5, $04
0008D48A E10B                       	smpsAlterNote       $0B
0008D48C C604 8001                  	dc.b	nA5, $04, nRst, $01
0008D490 E107                       	smpsAlterNote       $07
0008D492 BF0D                       	dc.b	nD5, $0D
0008D494 E101                       	smpsAlterNote       $01
0008D496 E701                       	dc.b	smpsNoAttack, $01
0008D498 E100                       	smpsAlterNote       $00
0008D49A E701                       	dc.b	smpsNoAttack, $01
0008D49C E104                       	smpsAlterNote       $04
0008D49E E701                       	dc.b	smpsNoAttack, $01
0008D4A0 E10A                       	smpsAlterNote       $0A
0008D4A2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D4A6 E107                       	smpsAlterNote       $07
0008D4A8 E701                       	dc.b	smpsNoAttack, $01
0008D4AA E101                       	smpsAlterNote       $01
0008D4AC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D4B0 E107                       	smpsAlterNote       $07
0008D4B2 E701                       	dc.b	smpsNoAttack, $01
0008D4B4 E10A                       	smpsAlterNote       $0A
0008D4B6 E701                       	dc.b	smpsNoAttack, $01
0008D4B8 E10B                       	smpsAlterNote       $0B
0008D4BA 8001                       	dc.b	nRst, $01
0008D4BC E108                       	smpsAlterNote       $08
0008D4BE 8001                       	dc.b	nRst, $01
0008D4C0 E109                       	smpsAlterNote       $09
0008D4C2 8001 C401                  	dc.b	nRst, $01, nG5, $01
0008D4C6 E10B                       	smpsAlterNote       $0B
0008D4C8 C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
0008D4D0 E108                       	smpsAlterNote       $08
0008D4D2 CD06 8001                  	dc.b	nE6, $06, nRst, $01
0008D4D6 E109                       	smpsAlterNote       $09
0008D4D8 CE06 8001                  	dc.b	nF6, $06, nRst, $01
0008D4DC E108                       	smpsAlterNote       $08
0008D4DE CD02 8001                  	dc.b	nE6, $02, nRst, $01
0008D4E2 E106                       	smpsAlterNote       $06
0008D4E4 C903                       	dc.b	nC6, $03
0008D4E6 E109                       	smpsAlterNote       $09
0008D4E8 C403 8001                  	dc.b	nG5, $03, nRst, $01
0008D4EC E10C                       	smpsAlterNote       $0C
0008D4EE C70D                       	dc.b	nBb5, $0D
0008D4F0 E109                       	smpsAlterNote       $09
0008D4F2 E701                       	dc.b	smpsNoAttack, $01
0008D4F4 E105                       	smpsAlterNote       $05
0008D4F6 E701                       	dc.b	smpsNoAttack, $01
0008D4F8 E109                       	smpsAlterNote       $09
0008D4FA E701                       	dc.b	smpsNoAttack, $01
0008D4FC E10F                       	smpsAlterNote       $0F
0008D4FE E701                       	dc.b	smpsNoAttack, $01
0008D500 E110                       	smpsAlterNote       $10
0008D502 E701                       	dc.b	smpsNoAttack, $01
0008D504 E10C                       	smpsAlterNote       $0C
0008D506 E701                       	dc.b	smpsNoAttack, $01
0008D508 E106                       	smpsAlterNote       $06
0008D50A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D50E E109                       	smpsAlterNote       $09
0008D510 E701                       	dc.b	smpsNoAttack, $01
0008D512 E10F                       	smpsAlterNote       $0F
0008D514 E701                       	dc.b	smpsNoAttack, $01
0008D516 E110                       	smpsAlterNote       $10
0008D518 8001                       	dc.b	nRst, $01
0008D51A E10B                       	smpsAlterNote       $0B
0008D51C C606 8001                  	dc.b	nA5, $06, nRst, $01
0008D520 E109                       	smpsAlterNote       $09
0008D522 C40D                       	dc.b	nG5, $0D
0008D524 E103                       	smpsAlterNote       $03
0008D526 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D52A E106                       	smpsAlterNote       $06
0008D52C E701                       	dc.b	smpsNoAttack, $01
0008D52E E10C                       	smpsAlterNote       $0C
0008D530 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D534 E106                       	smpsAlterNote       $06
0008D536 E701                       	dc.b	smpsNoAttack, $01
0008D538 E103                       	smpsAlterNote       $03
0008D53A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D53E E109                       	smpsAlterNote       $09
0008D540 E701                       	dc.b	smpsNoAttack, $01
0008D542 E10D                       	smpsAlterNote       $0D
0008D544 E701                       	dc.b	smpsNoAttack, $01
0008D546 E10C                       	smpsAlterNote       $0C
0008D548 E701                       	dc.b	smpsNoAttack, $01
0008D54A E106                       	smpsAlterNote       $06
0008D54C E701                       	dc.b	smpsNoAttack, $01
0008D54E E102                       	smpsAlterNote       $02
0008D550 E701                       	dc.b	smpsNoAttack, $01
0008D552 E103                       	smpsAlterNote       $03
0008D554 8001                       	dc.b	nRst, $01
0008D556 E10B                       	smpsAlterNote       $0B
0008D558 C60D                       	dc.b	nA5, $0D
0008D55A E108                       	smpsAlterNote       $08
0008D55C E701                       	dc.b	smpsNoAttack, $01
0008D55E E104                       	smpsAlterNote       $04
0008D560 E701                       	dc.b	smpsNoAttack, $01
0008D562 E108                       	smpsAlterNote       $08
0008D564 E701                       	dc.b	smpsNoAttack, $01
0008D566 E10B                       	smpsAlterNote       $0B
0008D568 E701                       	dc.b	smpsNoAttack, $01
0008D56A E10F                       	smpsAlterNote       $0F
0008D56C E701                       	dc.b	smpsNoAttack, $01
0008D56E E10B                       	smpsAlterNote       $0B
0008D570 E701                       	dc.b	smpsNoAttack, $01
0008D572 E105                       	smpsAlterNote       $05
0008D574 E701                       	dc.b	smpsNoAttack, $01
0008D576 E104                       	smpsAlterNote       $04
0008D578 E701                       	dc.b	smpsNoAttack, $01
0008D57A E108                       	smpsAlterNote       $08
0008D57C E701                       	dc.b	smpsNoAttack, $01
0008D57E E10E                       	smpsAlterNote       $0E
0008D580 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D584 E10B                       	smpsAlterNote       $0B
0008D586 E701                       	dc.b	smpsNoAttack, $01
0008D588 E105                       	smpsAlterNote       $05
0008D58A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D58E E10C                       	smpsAlterNote       $0C
0008D590 C70E                       	dc.b	nBb5, $0E
0008D592 E106                       	smpsAlterNote       $06
0008D594 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D598 E10C                       	smpsAlterNote       $0C
0008D59A E701                       	dc.b	smpsNoAttack, $01
0008D59C E10F                       	smpsAlterNote       $0F
0008D59E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D5A2 E109                       	smpsAlterNote       $09
0008D5A4 E701                       	dc.b	smpsNoAttack, $01
0008D5A6 E105                       	smpsAlterNote       $05
0008D5A8 E701                       	dc.b	smpsNoAttack, $01
0008D5AA E106                       	smpsAlterNote       $06
0008D5AC E701                       	dc.b	smpsNoAttack, $01
0008D5AE E10C                       	smpsAlterNote       $0C
0008D5B0 E701                       	dc.b	smpsNoAttack, $01
0008D5B2 E110                       	smpsAlterNote       $10
0008D5B4 E701                       	dc.b	smpsNoAttack, $01
0008D5B6 E10C                       	smpsAlterNote       $0C
0008D5B8 E701                       	dc.b	smpsNoAttack, $01
0008D5BA E109                       	smpsAlterNote       $09
0008D5BC E701                       	dc.b	smpsNoAttack, $01
0008D5BE E105                       	smpsAlterNote       $05
0008D5C0 E701                       	dc.b	smpsNoAttack, $01
0008D5C2 E106                       	smpsAlterNote       $06
0008D5C4 8001 C90C                  	dc.b	nRst, $01, nC6, $0C
0008D5C8 E107                       	smpsAlterNote       $07
0008D5CA CA01 E7CB 01               	dc.b	nCs6, $01, smpsNoAttack, nD6, $01
0008D5CF E108                       	smpsAlterNote       $08
0008D5D1 CD0D                       	dc.b	nE6, $0D
0008D5D3 E107                       	smpsAlterNote       $07
0008D5D5 CB0D                       	dc.b	nD6, $0D
0008D5D7 E104                       	smpsAlterNote       $04
0008D5D9 E701                       	dc.b	smpsNoAttack, $01
0008D5DB E100                       	smpsAlterNote       $00
0008D5DD E701                       	dc.b	smpsNoAttack, $01
0008D5DF E101                       	smpsAlterNote       $01
0008D5E1 E701                       	dc.b	smpsNoAttack, $01
0008D5E3 E107                       	smpsAlterNote       $07
0008D5E5 E701                       	dc.b	smpsNoAttack, $01
0008D5E7 E10B                       	smpsAlterNote       $0B
0008D5E9 E701                       	dc.b	smpsNoAttack, $01
0008D5EB E107                       	smpsAlterNote       $07
0008D5ED E701                       	dc.b	smpsNoAttack, $01
0008D5EF E104                       	smpsAlterNote       $04
0008D5F1 E701                       	dc.b	smpsNoAttack, $01
0008D5F3 E100                       	smpsAlterNote       $00
0008D5F5 E701                       	dc.b	smpsNoAttack, $01
0008D5F7 E104                       	smpsAlterNote       $04
0008D5F9 E701                       	dc.b	smpsNoAttack, $01
0008D5FB E10A                       	smpsAlterNote       $0A
0008D5FD E701                       	dc.b	smpsNoAttack, $01
0008D5FF E10B                       	smpsAlterNote       $0B
0008D601 E701                       	dc.b	smpsNoAttack, $01
0008D603 E108                       	smpsAlterNote       $08
0008D605 CC0D                       	dc.b	nEb6, $0D
0008D607 E105                       	smpsAlterNote       $05
0008D609 E701                       	dc.b	smpsNoAttack, $01
0008D60B E101                       	smpsAlterNote       $01
0008D60D E701                       	dc.b	smpsNoAttack, $01
0008D60F E102                       	smpsAlterNote       $02
0008D611 E701                       	dc.b	smpsNoAttack, $01
0008D613 E108                       	smpsAlterNote       $08
0008D615 E701                       	dc.b	smpsNoAttack, $01
0008D617 E106                       	smpsAlterNote       $06
0008D619 C903 8004 C902 C902 8001+  	dc.b	nC6, $03, nRst, $04, nC6, $02, nC6, $02, nRst, $01, nC6, $01
0008D625 8001                       	dc.b	nRst, $01
0008D627 E107                       	smpsAlterNote       $07
0008D629 CB0D                       	dc.b	nD6, $0D
0008D62B E104                       	smpsAlterNote       $04
0008D62D E701                       	dc.b	smpsNoAttack, $01
0008D62F E100                       	smpsAlterNote       $00
0008D631 E701                       	dc.b	smpsNoAttack, $01
0008D633 E104                       	smpsAlterNote       $04
0008D635 E701                       	dc.b	smpsNoAttack, $01
0008D637 E107                       	smpsAlterNote       $07
0008D639 E701                       	dc.b	smpsNoAttack, $01
0008D63B E10B                       	smpsAlterNote       $0B
0008D63D E701                       	dc.b	smpsNoAttack, $01
0008D63F E107                       	smpsAlterNote       $07
0008D641 E701                       	dc.b	smpsNoAttack, $01
0008D643 E101                       	smpsAlterNote       $01
0008D645 E701                       	dc.b	smpsNoAttack, $01
0008D647 E100                       	smpsAlterNote       $00
0008D649 E701                       	dc.b	smpsNoAttack, $01
0008D64B E104                       	smpsAlterNote       $04
0008D64D E701                       	dc.b	smpsNoAttack, $01
0008D64F E10A                       	smpsAlterNote       $0A
0008D651 E701                       	dc.b	smpsNoAttack, $01
0008D653 E10B                       	smpsAlterNote       $0B
0008D655 8001                       	dc.b	nRst, $01
0008D657 E109                       	smpsAlterNote       $09
0008D659 CE0A                       	dc.b	nF6, $0A
0008D65B E108                       	smpsAlterNote       $08
0008D65D CC07                       	dc.b	nEb6, $07
0008D65F E106                       	smpsAlterNote       $06
0008D661 C903 8004 C902 C902 C902+  	dc.b	nC6, $03, nRst, $04, nC6, $02, nC6, $02, nC6, $02, nRst, $01
0008D66D E107                       	smpsAlterNote       $07
0008D66F CB0D                       	dc.b	nD6, $0D
0008D671 E101                       	smpsAlterNote       $01
0008D673 E701                       	dc.b	smpsNoAttack, $01
0008D675 E100                       	smpsAlterNote       $00
0008D677 E701                       	dc.b	smpsNoAttack, $01
0008D679 E104                       	smpsAlterNote       $04
0008D67B E701                       	dc.b	smpsNoAttack, $01
0008D67D E10A                       	smpsAlterNote       $0A
0008D67F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D683 E107                       	smpsAlterNote       $07
0008D685 E701                       	dc.b	smpsNoAttack, $01
0008D687 E101                       	smpsAlterNote       $01
0008D689 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D68D E107                       	smpsAlterNote       $07
0008D68F E701                       	dc.b	smpsNoAttack, $01
0008D691 E10A                       	smpsAlterNote       $0A
0008D693 E701                       	dc.b	smpsNoAttack, $01
0008D695 E10B                       	smpsAlterNote       $0B
0008D697 8001                       	dc.b	nRst, $01
0008D699 E108                       	smpsAlterNote       $08
0008D69B CC0D                       	dc.b	nEb6, $0D
0008D69D E102                       	smpsAlterNote       $02
0008D69F E701                       	dc.b	smpsNoAttack, $01
0008D6A1 E101                       	smpsAlterNote       $01
0008D6A3 E701                       	dc.b	smpsNoAttack, $01
0008D6A5 E105                       	smpsAlterNote       $05
0008D6A7 E701                       	dc.b	smpsNoAttack, $01
0008D6A9 E108                       	smpsAlterNote       $08
0008D6AB 8001                       	dc.b	nRst, $01
0008D6AD E106                       	smpsAlterNote       $06
0008D6AF C903 8004 C901 8001 C902+  	dc.b	nC6, $03, nRst, $04, nC6, $01, nRst, $01, nC6, $02, nC6, $02
0008D6BB 8001                       	dc.b	nRst, $01
0008D6BD E107                       	smpsAlterNote       $07
0008D6BF CB0D                       	dc.b	nD6, $0D
0008D6C1 E101                       	smpsAlterNote       $01
0008D6C3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D6C7 E104                       	smpsAlterNote       $04
0008D6C9 E701                       	dc.b	smpsNoAttack, $01
0008D6CB E10A                       	smpsAlterNote       $0A
0008D6CD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D6D1 E104                       	smpsAlterNote       $04
0008D6D3 E701                       	dc.b	smpsNoAttack, $01
0008D6D5 E101                       	smpsAlterNote       $01
0008D6D7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D6DB E107                       	smpsAlterNote       $07
0008D6DD E701                       	dc.b	smpsNoAttack, $01
0008D6DF E10B                       	smpsAlterNote       $0B
0008D6E1 E701                       	dc.b	smpsNoAttack, $01
0008D6E3 E10A                       	smpsAlterNote       $0A
0008D6E5 E701                       	dc.b	smpsNoAttack, $01
0008D6E7 E104                       	smpsAlterNote       $04
0008D6E9 E701                       	dc.b	smpsNoAttack, $01
0008D6EB E100                       	smpsAlterNote       $00
0008D6ED E701                       	dc.b	smpsNoAttack, $01
0008D6EF E101                       	smpsAlterNote       $01
0008D6F1 801C                       	dc.b	nRst, $1C
0008D6F5 E107                       	smpsAlterNote       $07
0008D6F7 BF03 8001                  	dc.b	nD5, $03, nRst, $01
0008D6FB E603                       	smpsAlterVol        $03
0008D6FD F6F1 AD                    	smpsJump            music84_Jump03
0008D700                            
0008D700                            ; FM3 Data
0008D700                            music84_FM3:
0008D700 E0C0                       	smpsPan             panCenter, $00
0008D704 E109                       	smpsAlterNote       $09
0008D706 C203 8007                  	dc.b	nF5, $03, nRst, $07
0008D70A E108                       	smpsAlterNote       $08
0008D70C C103 800B                  	dc.b	nE5, $03, nRst, $0B
0008D710 E10B                       	smpsAlterNote       $0B
0008D712 BA03 8006                  	dc.b	nA4, $03, nRst, $06
0008D718 E040                       	smpsPan             panRight, $00
0008D71A E110                       	smpsAlterNote       $10
0008D71C E6F9                       	smpsAlterVol        $F9
0008D71E C702 8001                  	dc.b	nBb5, $02, nRst, $01
0008D722 E10F                       	smpsAlterNote       $0F
0008D724 C603                       	dc.b	nA5, $03
0008D726 E10D                       	smpsAlterNote       $0D
0008D728 C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
0008D72E E10C                       	smpsAlterNote       $0C
0008D730 C103 8001                  	dc.b	nE5, $03, nRst, $01
0008D734 E10A                       	smpsAlterNote       $0A
0008D736 BD02 8001                  	dc.b	nC5, $02, nRst, $01
0008D73A E10F                       	smpsAlterNote       $0F
0008D73C BA01 8001                  	dc.b	nA4, $01, nRst, $01
0008D740 E0C0                       	smpsPan             panCenter, $00
0008D744 E109                       	smpsAlterNote       $09
0008D746 E609                       	smpsAlterVol        $09
0008D748 B603                       	dc.b	nF4, $03
0008D74A                            
0008D74A                            music84_Jump02:
0008D74A E70A                       	dc.b	smpsNoAttack, $0A
0008D74C E103                       	smpsAlterNote       $03
0008D74E E701                       	dc.b	smpsNoAttack, $01
0008D750 E102                       	smpsAlterNote       $02
0008D752 E701                       	dc.b	smpsNoAttack, $01
0008D754 E106                       	smpsAlterNote       $06
0008D756 E701                       	dc.b	smpsNoAttack, $01
0008D758 E10C                       	smpsAlterNote       $0C
0008D75A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D75E E109                       	smpsAlterNote       $09
0008D760 E701                       	dc.b	smpsNoAttack, $01
0008D762 E103                       	smpsAlterNote       $03
0008D764 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D768 E109                       	smpsAlterNote       $09
0008D76A E701                       	dc.b	smpsNoAttack, $01
0008D76C E10C                       	smpsAlterNote       $0C
0008D76E E701                       	dc.b	smpsNoAttack, $01
0008D770 E10D                       	smpsAlterNote       $0D
0008D772 8001                       	dc.b	nRst, $01
0008D774 E109                       	smpsAlterNote       $09
0008D776 B80D                       	dc.b	nG4, $0D
0008D778 E103                       	smpsAlterNote       $03
0008D77A E701                       	dc.b	smpsNoAttack, $01
0008D77C E102                       	smpsAlterNote       $02
0008D77E E701                       	dc.b	smpsNoAttack, $01
0008D780 E106                       	smpsAlterNote       $06
0008D782 E701                       	dc.b	smpsNoAttack, $01
0008D784 E10C                       	smpsAlterNote       $0C
0008D786 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D78A E109                       	smpsAlterNote       $09
0008D78C E701                       	dc.b	smpsNoAttack, $01
0008D78E E103                       	smpsAlterNote       $03
0008D790 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D794 E109                       	smpsAlterNote       $09
0008D796 E701                       	dc.b	smpsNoAttack, $01
0008D798 E10C                       	smpsAlterNote       $0C
0008D79A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D79E E106                       	smpsAlterNote       $06
0008D7A0 E701                       	dc.b	smpsNoAttack, $01
0008D7A2 E102                       	smpsAlterNote       $02
0008D7A4 E701                       	dc.b	smpsNoAttack, $01
0008D7A6 E103                       	smpsAlterNote       $03
0008D7A8 E701                       	dc.b	smpsNoAttack, $01
0008D7AA E109                       	smpsAlterNote       $09
0008D7AC E701                       	dc.b	smpsNoAttack, $01
0008D7AE E10D                       	smpsAlterNote       $0D
0008D7B0 E701                       	dc.b	smpsNoAttack, $01
0008D7B2 E109                       	smpsAlterNote       $09
0008D7B4 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008D7B8 E10B                       	smpsAlterNote       $0B
0008D7BA BA0D                       	dc.b	nA4, $0D
0008D7BC E105                       	smpsAlterNote       $05
0008D7BE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D7C2 E108                       	smpsAlterNote       $08
0008D7C4 E701                       	dc.b	smpsNoAttack, $01
0008D7C6 E10E                       	smpsAlterNote       $0E
0008D7C8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D7CC E108                       	smpsAlterNote       $08
0008D7CE E701                       	dc.b	smpsNoAttack, $01
0008D7D0 E104                       	smpsAlterNote       $04
0008D7D2 E701                       	dc.b	smpsNoAttack, $01
0008D7D4 E105                       	smpsAlterNote       $05
0008D7D6 E701                       	dc.b	smpsNoAttack, $01
0008D7D8 E10B                       	smpsAlterNote       $0B
0008D7DA E701                       	dc.b	smpsNoAttack, $01
0008D7DC E10F                       	smpsAlterNote       $0F
0008D7DE E701                       	dc.b	smpsNoAttack, $01
0008D7E0 E10B                       	smpsAlterNote       $0B
0008D7E2 E701                       	dc.b	smpsNoAttack, $01
0008D7E4 E108                       	smpsAlterNote       $08
0008D7E6 E701                       	dc.b	smpsNoAttack, $01
0008D7E8 E104                       	smpsAlterNote       $04
0008D7EA E701                       	dc.b	smpsNoAttack, $01
0008D7EC E108                       	smpsAlterNote       $08
0008D7EE E701                       	dc.b	smpsNoAttack, $01
0008D7F0 E10E                       	smpsAlterNote       $0E
0008D7F2 E701                       	dc.b	smpsNoAttack, $01
0008D7F4 E10F                       	smpsAlterNote       $0F
0008D7F6 E701                       	dc.b	smpsNoAttack, $01
0008D7F8 E10B                       	smpsAlterNote       $0B
0008D7FA E701                       	dc.b	smpsNoAttack, $01
0008D7FC E105                       	smpsAlterNote       $05
0008D7FE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D802 E108                       	smpsAlterNote       $08
0008D804 E701                       	dc.b	smpsNoAttack, $01
0008D806 E10E                       	smpsAlterNote       $0E
0008D808 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D80C E108                       	smpsAlterNote       $08
0008D80E E701                       	dc.b	smpsNoAttack, $01
0008D810 E105                       	smpsAlterNote       $05
0008D812 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D816 E10B                       	smpsAlterNote       $0B
0008D818 E701                       	dc.b	smpsNoAttack, $01
0008D81A E10F                       	smpsAlterNote       $0F
0008D81C E701                       	dc.b	smpsNoAttack, $01
0008D81E E10E                       	smpsAlterNote       $0E
0008D820 E701                       	dc.b	smpsNoAttack, $01
0008D822 E108                       	smpsAlterNote       $08
0008D824 E701                       	dc.b	smpsNoAttack, $01
0008D826 E104                       	smpsAlterNote       $04
0008D828 E701                       	dc.b	smpsNoAttack, $01
0008D82A E105                       	smpsAlterNote       $05
0008D82C 8001                       	dc.b	nRst, $01
0008D82E E108                       	smpsAlterNote       $08
0008D830 B50A                       	dc.b	nE4, $0A
0008D832 E109                       	smpsAlterNote       $09
0008D834 B60D                       	dc.b	nF4, $0D
0008D836 E106                       	smpsAlterNote       $06
0008D838 E701                       	dc.b	smpsNoAttack, $01
0008D83A E103                       	smpsAlterNote       $03
0008D83C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D840 E109                       	smpsAlterNote       $09
0008D842 E701                       	dc.b	smpsNoAttack, $01
0008D844 E10D                       	smpsAlterNote       $0D
0008D846 E701                       	dc.b	smpsNoAttack, $01
0008D848 E10C                       	smpsAlterNote       $0C
0008D84A E701                       	dc.b	smpsNoAttack, $01
0008D84C E106                       	smpsAlterNote       $06
0008D84E E701                       	dc.b	smpsNoAttack, $01
0008D850 E102                       	smpsAlterNote       $02
0008D852 E701                       	dc.b	smpsNoAttack, $01
0008D854 E106                       	smpsAlterNote       $06
0008D856 E701                       	dc.b	smpsNoAttack, $01
0008D858 E109                       	smpsAlterNote       $09
0008D85A E701                       	dc.b	smpsNoAttack, $01
0008D85C E10D                       	smpsAlterNote       $0D
0008D85E E701                       	dc.b	smpsNoAttack, $01
0008D860 E109                       	smpsAlterNote       $09
0008D862 B80D                       	dc.b	nG4, $0D
0008D864 E106                       	smpsAlterNote       $06
0008D866 E701                       	dc.b	smpsNoAttack, $01
0008D868 E103                       	smpsAlterNote       $03
0008D86A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D86E E109                       	smpsAlterNote       $09
0008D870 E701                       	dc.b	smpsNoAttack, $01
0008D872 E10D                       	smpsAlterNote       $0D
0008D874 E701                       	dc.b	smpsNoAttack, $01
0008D876 E10C                       	smpsAlterNote       $0C
0008D878 E701                       	dc.b	smpsNoAttack, $01
0008D87A E106                       	smpsAlterNote       $06
0008D87C E701                       	dc.b	smpsNoAttack, $01
0008D87E E102                       	smpsAlterNote       $02
0008D880 E701                       	dc.b	smpsNoAttack, $01
0008D882 E106                       	smpsAlterNote       $06
0008D884 E701                       	dc.b	smpsNoAttack, $01
0008D886 E109                       	smpsAlterNote       $09
0008D888 E701                       	dc.b	smpsNoAttack, $01
0008D88A E10D                       	smpsAlterNote       $0D
0008D88C E701                       	dc.b	smpsNoAttack, $01
0008D88E E109                       	smpsAlterNote       $09
0008D890 E701                       	dc.b	smpsNoAttack, $01
0008D892 E103                       	smpsAlterNote       $03
0008D894 E701                       	dc.b	smpsNoAttack, $01
0008D896 E102                       	smpsAlterNote       $02
0008D898 E701                       	dc.b	smpsNoAttack, $01
0008D89A E106                       	smpsAlterNote       $06
0008D89C E701                       	dc.b	smpsNoAttack, $01
0008D89E E10C                       	smpsAlterNote       $0C
0008D8A0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D8A4 E109                       	smpsAlterNote       $09
0008D8A6 E701                       	dc.b	smpsNoAttack, $01
0008D8A8 E10B                       	smpsAlterNote       $0B
0008D8AA BA0D                       	dc.b	nA4, $0D
0008D8AC E108                       	smpsAlterNote       $08
0008D8AE E701                       	dc.b	smpsNoAttack, $01
0008D8B0 E104                       	smpsAlterNote       $04
0008D8B2 E701                       	dc.b	smpsNoAttack, $01
0008D8B4 E108                       	smpsAlterNote       $08
0008D8B6 E701                       	dc.b	smpsNoAttack, $01
0008D8B8 E10B                       	smpsAlterNote       $0B
0008D8BA E701                       	dc.b	smpsNoAttack, $01
0008D8BC E10F                       	smpsAlterNote       $0F
0008D8BE E701                       	dc.b	smpsNoAttack, $01
0008D8C0 E10B                       	smpsAlterNote       $0B
0008D8C2 E701                       	dc.b	smpsNoAttack, $01
0008D8C4 E105                       	smpsAlterNote       $05
0008D8C6 E701                       	dc.b	smpsNoAttack, $01
0008D8C8 E104                       	smpsAlterNote       $04
0008D8CA E701                       	dc.b	smpsNoAttack, $01
0008D8CC E108                       	smpsAlterNote       $08
0008D8CE E701                       	dc.b	smpsNoAttack, $01
0008D8D0 E10E                       	smpsAlterNote       $0E
0008D8D2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D8D6 E10B                       	smpsAlterNote       $0B
0008D8D8 E701                       	dc.b	smpsNoAttack, $01
0008D8DA E105                       	smpsAlterNote       $05
0008D8DC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D8E0 E10B                       	smpsAlterNote       $0B
0008D8E2 E701                       	dc.b	smpsNoAttack, $01
0008D8E4 E10E                       	smpsAlterNote       $0E
0008D8E6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D8EA E108                       	smpsAlterNote       $08
0008D8EC E701                       	dc.b	smpsNoAttack, $01
0008D8EE E104                       	smpsAlterNote       $04
0008D8F0 E701                       	dc.b	smpsNoAttack, $01
0008D8F2 E105                       	smpsAlterNote       $05
0008D8F4 E701                       	dc.b	smpsNoAttack, $01
0008D8F6 E10B                       	smpsAlterNote       $0B
0008D8F8 E701                       	dc.b	smpsNoAttack, $01
0008D8FA E10F                       	smpsAlterNote       $0F
0008D8FC E701                       	dc.b	smpsNoAttack, $01
0008D8FE E10B                       	smpsAlterNote       $0B
0008D900 E701                       	dc.b	smpsNoAttack, $01
0008D902 E108                       	smpsAlterNote       $08
0008D904 E701                       	dc.b	smpsNoAttack, $01
0008D906 E105                       	smpsAlterNote       $05
0008D908 8001                       	dc.b	nRst, $01
0008D90A E109                       	smpsAlterNote       $09
0008D90C B609 8001                  	dc.b	nF4, $09, nRst, $01
0008D910 E108                       	smpsAlterNote       $08
0008D912 B506 8001                  	dc.b	nE4, $06, nRst, $01
0008D916 E107                       	smpsAlterNote       $07
0008D918 B30D 8001                  	dc.b	nD4, $0D, nRst, $01
0008D91C E108                       	smpsAlterNote       $08
0008D91E B502 8001                  	dc.b	nE4, $02, nRst, $01
0008D922 E109                       	smpsAlterNote       $09
0008D924 B603 B803 8001             	dc.b	nF4, $03, nG4, $03, nRst, $01
0008D92A E10B                       	smpsAlterNote       $0B
0008D92C BA0D                       	dc.b	nA4, $0D
0008D92E E108                       	smpsAlterNote       $08
0008D930 E701                       	dc.b	smpsNoAttack, $01
0008D932 E104                       	smpsAlterNote       $04
0008D934 E701                       	dc.b	smpsNoAttack, $01
0008D936 E108                       	smpsAlterNote       $08
0008D938 E701                       	dc.b	smpsNoAttack, $01
0008D93A E10E                       	smpsAlterNote       $0E
0008D93C E701                       	dc.b	smpsNoAttack, $01
0008D93E E10F                       	smpsAlterNote       $0F
0008D940 E701                       	dc.b	smpsNoAttack, $01
0008D942 E10B                       	smpsAlterNote       $0B
0008D944 E701                       	dc.b	smpsNoAttack, $01
0008D946 E105                       	smpsAlterNote       $05
0008D948 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D94C E108                       	smpsAlterNote       $08
0008D94E E701                       	dc.b	smpsNoAttack, $01
0008D950 E10E                       	smpsAlterNote       $0E
0008D952 E701                       	dc.b	smpsNoAttack, $01
0008D954 E10F                       	smpsAlterNote       $0F
0008D956 8001                       	dc.b	nRst, $01
0008D958 E109                       	smpsAlterNote       $09
0008D95A C20D                       	dc.b	nF5, $0D
0008D95C E103                       	smpsAlterNote       $03
0008D95E E701                       	dc.b	smpsNoAttack, $01
0008D960 E102                       	smpsAlterNote       $02
0008D962 E701                       	dc.b	smpsNoAttack, $01
0008D964 E106                       	smpsAlterNote       $06
0008D966 E701                       	dc.b	smpsNoAttack, $01
0008D968 E10C                       	smpsAlterNote       $0C
0008D96A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D96E E109                       	smpsAlterNote       $09
0008D970 E701                       	dc.b	smpsNoAttack, $01
0008D972 E103                       	smpsAlterNote       $03
0008D974 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D978 E109                       	smpsAlterNote       $09
0008D97A E701                       	dc.b	smpsNoAttack, $01
0008D97C E10C                       	smpsAlterNote       $0C
0008D97E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D982 E106                       	smpsAlterNote       $06
0008D984 E701                       	dc.b	smpsNoAttack, $01
0008D986 E102                       	smpsAlterNote       $02
0008D988 E701                       	dc.b	smpsNoAttack, $01
0008D98A E103                       	smpsAlterNote       $03
0008D98C E701                       	dc.b	smpsNoAttack, $01
0008D98E E109                       	smpsAlterNote       $09
0008D990 E701                       	dc.b	smpsNoAttack, $01
0008D992 E10D                       	smpsAlterNote       $0D
0008D994 E701                       	dc.b	smpsNoAttack, $01
0008D996 E109                       	smpsAlterNote       $09
0008D998 E701                       	dc.b	smpsNoAttack, $01
0008D99A E106                       	smpsAlterNote       $06
0008D99C E701                       	dc.b	smpsNoAttack, $01
0008D99E E102                       	smpsAlterNote       $02
0008D9A0 E701                       	dc.b	smpsNoAttack, $01
0008D9A2 E106                       	smpsAlterNote       $06
0008D9A4 E701                       	dc.b	smpsNoAttack, $01
0008D9A6 E10C                       	smpsAlterNote       $0C
0008D9A8 E701                       	dc.b	smpsNoAttack, $01
0008D9AA E10D                       	smpsAlterNote       $0D
0008D9AC E701                       	dc.b	smpsNoAttack, $01
0008D9AE E109                       	smpsAlterNote       $09
0008D9B0 E701                       	dc.b	smpsNoAttack, $01
0008D9B2 E103                       	smpsAlterNote       $03
0008D9B4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D9B8 E106                       	smpsAlterNote       $06
0008D9BA E701                       	dc.b	smpsNoAttack, $01
0008D9BC E10C                       	smpsAlterNote       $0C
0008D9BE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D9C2 E106                       	smpsAlterNote       $06
0008D9C4 E701                       	dc.b	smpsNoAttack, $01
0008D9C6 E103                       	smpsAlterNote       $03
0008D9C8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D9CC E109                       	smpsAlterNote       $09
0008D9CE E701                       	dc.b	smpsNoAttack, $01
0008D9D0 E10D                       	smpsAlterNote       $0D
0008D9D2 E701                       	dc.b	smpsNoAttack, $01
0008D9D4 E10C                       	smpsAlterNote       $0C
0008D9D6 E701                       	dc.b	smpsNoAttack, $01
0008D9D8 E106                       	smpsAlterNote       $06
0008D9DA E701                       	dc.b	smpsNoAttack, $01
0008D9DC E102                       	smpsAlterNote       $02
0008D9DE E701                       	dc.b	smpsNoAttack, $01
0008D9E0 E106                       	smpsAlterNote       $06
0008D9E2 E701                       	dc.b	smpsNoAttack, $01
0008D9E4 E109                       	smpsAlterNote       $09
0008D9E6 E701                       	dc.b	smpsNoAttack, $01
0008D9E8 E10D                       	smpsAlterNote       $0D
0008D9EA E701                       	dc.b	smpsNoAttack, $01
0008D9EC E109                       	smpsAlterNote       $09
0008D9EE E701                       	dc.b	smpsNoAttack, $01
0008D9F0 E103                       	smpsAlterNote       $03
0008D9F2 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008D9F6 E109                       	smpsAlterNote       $09
0008D9F8 C206                       	dc.b	nF5, $06
0008D9FA E108                       	smpsAlterNote       $08
0008D9FC C10E                       	dc.b	nE5, $0E
0008D9FE E102                       	smpsAlterNote       $02
0008DA00 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DA04 E108                       	smpsAlterNote       $08
0008DA06 E701                       	dc.b	smpsNoAttack, $01
0008DA08 E10B                       	smpsAlterNote       $0B
0008DA0A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DA0E E105                       	smpsAlterNote       $05
0008DA10 E701                       	dc.b	smpsNoAttack, $01
0008DA12 E101                       	smpsAlterNote       $01
0008DA14 E701                       	dc.b	smpsNoAttack, $01
0008DA16 E102                       	smpsAlterNote       $02
0008DA18 E701                       	dc.b	smpsNoAttack, $01
0008DA1A E108                       	smpsAlterNote       $08
0008DA1C E701                       	dc.b	smpsNoAttack, $01
0008DA1E E10C                       	smpsAlterNote       $0C
0008DA20 E701                       	dc.b	smpsNoAttack, $01
0008DA22 E107                       	smpsAlterNote       $07
0008DA24 BF0E                       	dc.b	nD5, $0E
0008DA26 E101                       	smpsAlterNote       $01
0008DA28 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DA2C E107                       	smpsAlterNote       $07
0008DA2E E701                       	dc.b	smpsNoAttack, $01
0008DA30 E10A                       	smpsAlterNote       $0A
0008DA32 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DA36 E104                       	smpsAlterNote       $04
0008DA38 E701                       	dc.b	smpsNoAttack, $01
0008DA3A E100                       	smpsAlterNote       $00
0008DA3C E701                       	dc.b	smpsNoAttack, $01
0008DA3E E104                       	smpsAlterNote       $04
0008DA40 E701                       	dc.b	smpsNoAttack, $01
0008DA42 E107                       	smpsAlterNote       $07
0008DA44 E701                       	dc.b	smpsNoAttack, $01
0008DA46 E10B                       	smpsAlterNote       $0B
0008DA48 E701                       	dc.b	smpsNoAttack, $01
0008DA4A E107                       	smpsAlterNote       $07
0008DA4C E701                       	dc.b	smpsNoAttack, $01
0008DA4E E101                       	smpsAlterNote       $01
0008DA50 E701                       	dc.b	smpsNoAttack, $01
0008DA52 E100                       	smpsAlterNote       $00
0008DA54 E701                       	dc.b	smpsNoAttack, $01
0008DA56 E104                       	smpsAlterNote       $04
0008DA58 E701                       	dc.b	smpsNoAttack, $01
0008DA5A E10A                       	smpsAlterNote       $0A
0008DA5C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DA60 E107                       	smpsAlterNote       $07
0008DA62 E701                       	dc.b	smpsNoAttack, $01
0008DA64 E101                       	smpsAlterNote       $01
0008DA66 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DA6A E107                       	smpsAlterNote       $07
0008DA6C E701                       	dc.b	smpsNoAttack, $01
0008DA6E E10A                       	smpsAlterNote       $0A
0008DA70 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DA74 E104                       	smpsAlterNote       $04
0008DA76 E701                       	dc.b	smpsNoAttack, $01
0008DA78 E100                       	smpsAlterNote       $00
0008DA7A E701                       	dc.b	smpsNoAttack, $01
0008DA7C E101                       	smpsAlterNote       $01
0008DA7E E701                       	dc.b	smpsNoAttack, $01
0008DA80 E107                       	smpsAlterNote       $07
0008DA82 E701                       	dc.b	smpsNoAttack, $01
0008DA84 E10B                       	smpsAlterNote       $0B
0008DA86 E701                       	dc.b	smpsNoAttack, $01
0008DA88 E107                       	smpsAlterNote       $07
0008DA8A E701                       	dc.b	smpsNoAttack, $01
0008DA8C E104                       	smpsAlterNote       $04
0008DA8E E701                       	dc.b	smpsNoAttack, $01
0008DA90 E100                       	smpsAlterNote       $00
0008DA92 E701                       	dc.b	smpsNoAttack, $01
0008DA94 E104                       	smpsAlterNote       $04
0008DA96 E701                       	dc.b	smpsNoAttack, $01
0008DA98 E10A                       	smpsAlterNote       $0A
0008DA9A E701                       	dc.b	smpsNoAttack, $01
0008DA9C E10B                       	smpsAlterNote       $0B
0008DA9E E701                       	dc.b	smpsNoAttack, $01
0008DAA0 E107                       	smpsAlterNote       $07
0008DAA2 E701                       	dc.b	smpsNoAttack, $01
0008DAA4 E101                       	smpsAlterNote       $01
0008DAA6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DAAA E104                       	smpsAlterNote       $04
0008DAAC E701                       	dc.b	smpsNoAttack, $01
0008DAAE E10A                       	smpsAlterNote       $0A
0008DAB0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DAB4 E104                       	smpsAlterNote       $04
0008DAB6 E701                       	dc.b	smpsNoAttack, $01
0008DAB8 E101                       	smpsAlterNote       $01
0008DABA E701                       	dc.b	smpsNoAttack, $01
0008DABE E107                       	smpsAlterNote       $07
0008DAC0 E6FF                       	smpsAlterVol        $FF
0008DAC2 BF06 8001 BF03 BF03 8001+  	dc.b	nD5, $06, nRst, $01, nD5, $03, nD5, $03, nRst, $01, nCs5, $03
0008DACE 8004                       	dc.b	nRst, $04
0008DAD2 E109                       	smpsAlterNote       $09
0008DAD4 E602                       	smpsAlterVol        $02
0008DAD6 B803 B603 8001             	dc.b	nG4, $03, nF4, $03, nRst, $01
0008DADC E108                       	smpsAlterNote       $08
0008DADE B502 8001                  	dc.b	nE4, $02, nRst, $01
0008DAE2 E109                       	smpsAlterNote       $09
0008DAE4 B60D                       	dc.b	nF4, $0D
0008DAE6 E106                       	smpsAlterNote       $06
0008DAE8 E701                       	dc.b	smpsNoAttack, $01
0008DAEA E102                       	smpsAlterNote       $02
0008DAEC E701                       	dc.b	smpsNoAttack, $01
0008DAEE E106                       	smpsAlterNote       $06
0008DAF0 E701                       	dc.b	smpsNoAttack, $01
0008DAF2 E109                       	smpsAlterNote       $09
0008DAF4 E701                       	dc.b	smpsNoAttack, $01
0008DAF6 E10D                       	smpsAlterNote       $0D
0008DAF8 E701                       	dc.b	smpsNoAttack, $01
0008DAFA E109                       	smpsAlterNote       $09
0008DAFC E701                       	dc.b	smpsNoAttack, $01
0008DAFE E103                       	smpsAlterNote       $03
0008DB00 E701                       	dc.b	smpsNoAttack, $01
0008DB02 E102                       	smpsAlterNote       $02
0008DB04 E701                       	dc.b	smpsNoAttack, $01
0008DB06 E106                       	smpsAlterNote       $06
0008DB08 E701                       	dc.b	smpsNoAttack, $01
0008DB0A E10C                       	smpsAlterNote       $0C
0008DB0C E701                       	dc.b	smpsNoAttack, $01
0008DB0E E10D                       	smpsAlterNote       $0D
0008DB10 8001                       	dc.b	nRst, $01
0008DB12 E109                       	smpsAlterNote       $09
0008DB14 B80D                       	dc.b	nG4, $0D
0008DB16 E106                       	smpsAlterNote       $06
0008DB18 E701                       	dc.b	smpsNoAttack, $01
0008DB1A E102                       	smpsAlterNote       $02
0008DB1C E701                       	dc.b	smpsNoAttack, $01
0008DB1E E106                       	smpsAlterNote       $06
0008DB20 E701                       	dc.b	smpsNoAttack, $01
0008DB22 E10C                       	smpsAlterNote       $0C
0008DB24 E701                       	dc.b	smpsNoAttack, $01
0008DB26 E10D                       	smpsAlterNote       $0D
0008DB28 E701                       	dc.b	smpsNoAttack, $01
0008DB2A E109                       	smpsAlterNote       $09
0008DB2C E701                       	dc.b	smpsNoAttack, $01
0008DB2E E103                       	smpsAlterNote       $03
0008DB30 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DB34 E106                       	smpsAlterNote       $06
0008DB36 E701                       	dc.b	smpsNoAttack, $01
0008DB38 E10C                       	smpsAlterNote       $0C
0008DB3A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DB3E E106                       	smpsAlterNote       $06
0008DB40 E701                       	dc.b	smpsNoAttack, $01
0008DB42 E103                       	smpsAlterNote       $03
0008DB44 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DB48 E109                       	smpsAlterNote       $09
0008DB4A E701                       	dc.b	smpsNoAttack, $01
0008DB4C E10D                       	smpsAlterNote       $0D
0008DB4E E701                       	dc.b	smpsNoAttack, $01
0008DB50 E10C                       	smpsAlterNote       $0C
0008DB52 E701                       	dc.b	smpsNoAttack, $01
0008DB54 E109                       	smpsAlterNote       $09
0008DB56 8001                       	dc.b	nRst, $01
0008DB58 E10B                       	smpsAlterNote       $0B
0008DB5A BA03                       	dc.b	nA4, $03
0008DB5C E10C                       	smpsAlterNote       $0C
0008DB5E BB03 8001                  	dc.b	nBb4, $03, nRst, $01
0008DB62 E10B                       	smpsAlterNote       $0B
0008DB64 BA02 8001 C603             	dc.b	nA4, $02, nRst, $01, nA5, $03
0008DB6A E10C                       	smpsAlterNote       $0C
0008DB6C C703 8001                  	dc.b	nBb5, $03, nRst, $01
0008DB70 E10B                       	smpsAlterNote       $0B
0008DB72 C603 D203 8001             	dc.b	nA5, $03, nA6, $03, nRst, $01
0008DB78 E10C                       	smpsAlterNote       $0C
0008DB7A D303                       	dc.b	nBb6, $03
0008DB7C E10B                       	smpsAlterNote       $0B
0008DB7E D20D                       	dc.b	nA6, $0D
0008DB80 E108                       	smpsAlterNote       $08
0008DB82 E701                       	dc.b	smpsNoAttack, $01
0008DB84 E104                       	smpsAlterNote       $04
0008DB86 E701                       	dc.b	smpsNoAttack, $01
0008DB88 E105                       	smpsAlterNote       $05
0008DB8A E701                       	dc.b	smpsNoAttack, $01
0008DB8C E10B                       	smpsAlterNote       $0B
0008DB8E E701                       	dc.b	smpsNoAttack, $01
0008DB90 E10F                       	smpsAlterNote       $0F
0008DB92 E701                       	dc.b	smpsNoAttack, $01
0008DB94 E10B                       	smpsAlterNote       $0B
0008DB96 E701                       	dc.b	smpsNoAttack, $01
0008DB98 E108                       	smpsAlterNote       $08
0008DB9A E701                       	dc.b	smpsNoAttack, $01
0008DB9C E104                       	smpsAlterNote       $04
0008DB9E E701                       	dc.b	smpsNoAttack, $01
0008DBA0 E108                       	smpsAlterNote       $08
0008DBA2 E701                       	dc.b	smpsNoAttack, $01
0008DBA4 E10E                       	smpsAlterNote       $0E
0008DBA6 E701                       	dc.b	smpsNoAttack, $01
0008DBA8 E10F                       	smpsAlterNote       $0F
0008DBAA E701                       	dc.b	smpsNoAttack, $01
0008DBAC E10B                       	smpsAlterNote       $0B
0008DBAE E701                       	dc.b	smpsNoAttack, $01
0008DBB0 E105                       	smpsAlterNote       $05
0008DBB2 E701 E701 8007             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $07
0008DBB8 E109                       	smpsAlterNote       $09
0008DBBA CE07                       	dc.b	nF6, $07
0008DBBC E108                       	smpsAlterNote       $08
0008DBBE CD06 8001                  	dc.b	nE6, $06, nRst, $01
0008DBC2 E109                       	smpsAlterNote       $09
0008DBC4 CE03 8001                  	dc.b	nF6, $03, nRst, $01
0008DBC8 E108                       	smpsAlterNote       $08
0008DBCA CC0D                       	dc.b	nEb6, $0D
0008DBCC E102                       	smpsAlterNote       $02
0008DBCE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DBD2 E108                       	smpsAlterNote       $08
0008DBD4 E701                       	dc.b	smpsNoAttack, $01
0008DBD6 E10B                       	smpsAlterNote       $0B
0008DBD8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DBDC E105                       	smpsAlterNote       $05
0008DBDE E701                       	dc.b	smpsNoAttack, $01
0008DBE0 E101                       	smpsAlterNote       $01
0008DBE2 E701                       	dc.b	smpsNoAttack, $01
0008DBE4 E102                       	smpsAlterNote       $02
0008DBE6 E701                       	dc.b	smpsNoAttack, $01
0008DBE8 E108                       	smpsAlterNote       $08
0008DBEA E701                       	dc.b	smpsNoAttack, $01
0008DBEC E10C                       	smpsAlterNote       $0C
0008DBEE E701                       	dc.b	smpsNoAttack, $01
0008DBF0 E108                       	smpsAlterNote       $08
0008DBF2 E701                       	dc.b	smpsNoAttack, $01
0008DBF4 E105                       	smpsAlterNote       $05
0008DBF6 E701                       	dc.b	smpsNoAttack, $01
0008DBF8 E101                       	smpsAlterNote       $01
0008DBFA E701                       	dc.b	smpsNoAttack, $01
0008DBFC E105                       	smpsAlterNote       $05
0008DBFE E701                       	dc.b	smpsNoAttack, $01
0008DC00 E10B                       	smpsAlterNote       $0B
0008DC02 E701                       	dc.b	smpsNoAttack, $01
0008DC04 E10C                       	smpsAlterNote       $0C
0008DC06 E701                       	dc.b	smpsNoAttack, $01
0008DC08 E108                       	smpsAlterNote       $08
0008DC0A E701                       	dc.b	smpsNoAttack, $01
0008DC0C E107                       	smpsAlterNote       $07
0008DC0E CB03 8001 CA03 CB03 8001   	dc.b	nD6, $03, nRst, $01, nCs6, $03, nD6, $03, nRst, $01
0008DC18 E10B                       	smpsAlterNote       $0B
0008DC1A C602 8001 C503 C603 8001   	dc.b	nA5, $02, nRst, $01, nAb5, $03, nA5, $03, nRst, $01
0008DC24 E109                       	smpsAlterNote       $09
0008DC26 C203                       	dc.b	nF5, $03
0008DC28 E108                       	smpsAlterNote       $08
0008DC2A C103 8001                  	dc.b	nE5, $03, nRst, $01
0008DC2E E109                       	smpsAlterNote       $09
0008DC30 C20D                       	dc.b	nF5, $0D
0008DC32 E108                       	smpsAlterNote       $08
0008DC34 C10E                       	dc.b	nE5, $0E
0008DC36 E107                       	smpsAlterNote       $07
0008DC38 BF0D                       	dc.b	nD5, $0D
0008DC3A E104                       	smpsAlterNote       $04
0008DC3C E701                       	dc.b	smpsNoAttack, $01
0008DC3E E100                       	smpsAlterNote       $00
0008DC40 E701                       	dc.b	smpsNoAttack, $01
0008DC42 E104                       	smpsAlterNote       $04
0008DC44 E701                       	dc.b	smpsNoAttack, $01
0008DC46 E107                       	smpsAlterNote       $07
0008DC48 E701                       	dc.b	smpsNoAttack, $01
0008DC4A E10B                       	smpsAlterNote       $0B
0008DC4C E701                       	dc.b	smpsNoAttack, $01
0008DC4E E107                       	smpsAlterNote       $07
0008DC50 E701                       	dc.b	smpsNoAttack, $01
0008DC52 E101                       	smpsAlterNote       $01
0008DC54 E701                       	dc.b	smpsNoAttack, $01
0008DC56 E100                       	smpsAlterNote       $00
0008DC58 E701                       	dc.b	smpsNoAttack, $01
0008DC5A E104                       	smpsAlterNote       $04
0008DC5C E701                       	dc.b	smpsNoAttack, $01
0008DC5E E10A                       	smpsAlterNote       $0A
0008DC60 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DC64 E107                       	smpsAlterNote       $07
0008DC66 E701                       	dc.b	smpsNoAttack, $01
0008DC68 E101                       	smpsAlterNote       $01
0008DC6A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DC6E E107                       	smpsAlterNote       $07
0008DC70 E701                       	dc.b	smpsNoAttack, $01
0008DC72 E10A                       	smpsAlterNote       $0A
0008DC74 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DC78 E104                       	smpsAlterNote       $04
0008DC7A E701                       	dc.b	smpsNoAttack, $01
0008DC7C E100                       	smpsAlterNote       $00
0008DC7E E701                       	dc.b	smpsNoAttack, $01
0008DC80 E101                       	smpsAlterNote       $01
0008DC82 E701                       	dc.b	smpsNoAttack, $01
0008DC84 E107                       	smpsAlterNote       $07
0008DC86 E701                       	dc.b	smpsNoAttack, $01
0008DC88 E10B                       	smpsAlterNote       $0B
0008DC8A E701                       	dc.b	smpsNoAttack, $01
0008DC8C E107                       	smpsAlterNote       $07
0008DC8E E701                       	dc.b	smpsNoAttack, $01
0008DC90 E104                       	smpsAlterNote       $04
0008DC92 E701                       	dc.b	smpsNoAttack, $01
0008DC94 E100                       	smpsAlterNote       $00
0008DC96 E701                       	dc.b	smpsNoAttack, $01
0008DC98 E104                       	smpsAlterNote       $04
0008DC9A E701                       	dc.b	smpsNoAttack, $01
0008DC9C E10A                       	smpsAlterNote       $0A
0008DC9E E701                       	dc.b	smpsNoAttack, $01
0008DCA0 E10B                       	smpsAlterNote       $0B
0008DCA2 E701                       	dc.b	smpsNoAttack, $01
0008DCA4 E107                       	smpsAlterNote       $07
0008DCA6 E701                       	dc.b	smpsNoAttack, $01
0008DCA8 E101                       	smpsAlterNote       $01
0008DCAA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DCAE E104                       	smpsAlterNote       $04
0008DCB0 E701                       	dc.b	smpsNoAttack, $01
0008DCB2 E10A                       	smpsAlterNote       $0A
0008DCB4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DCB8 E104                       	smpsAlterNote       $04
0008DCBA E701                       	dc.b	smpsNoAttack, $01
0008DCBC E101                       	smpsAlterNote       $01
0008DCBE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DCC2 E107                       	smpsAlterNote       $07
0008DCC4 E701                       	dc.b	smpsNoAttack, $01
0008DCC6 E10B                       	smpsAlterNote       $0B
0008DCC8 E701                       	dc.b	smpsNoAttack, $01
0008DCCA E10A                       	smpsAlterNote       $0A
0008DCCC E701                       	dc.b	smpsNoAttack, $01
0008DCCE E104                       	smpsAlterNote       $04
0008DCD0 E701                       	dc.b	smpsNoAttack, $01
0008DCD2 E100                       	smpsAlterNote       $00
0008DCD4 E701                       	dc.b	smpsNoAttack, $01
0008DCD6 E104                       	smpsAlterNote       $04
0008DCD8 E701                       	dc.b	smpsNoAttack, $01
0008DCDA E107                       	smpsAlterNote       $07
0008DCDC E701                       	dc.b	smpsNoAttack, $01
0008DCDE E10B                       	smpsAlterNote       $0B
0008DCE0 E701                       	dc.b	smpsNoAttack, $01
0008DCE2 E107                       	smpsAlterNote       $07
0008DCE4 E701                       	dc.b	smpsNoAttack, $01
0008DCE6 E101                       	smpsAlterNote       $01
0008DCE8 E701                       	dc.b	smpsNoAttack, $01
0008DCEA E100                       	smpsAlterNote       $00
0008DCEC E701                       	dc.b	smpsNoAttack, $01
0008DCEE E104                       	smpsAlterNote       $04
0008DCF0 E701                       	dc.b	smpsNoAttack, $01
0008DCF2 E10A                       	smpsAlterNote       $0A
0008DCF4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DCF8 E107                       	smpsAlterNote       $07
0008DCFA E701                       	dc.b	smpsNoAttack, $01
0008DCFC E101                       	smpsAlterNote       $01
0008DCFE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DD02 E107                       	smpsAlterNote       $07
0008DD04 E701                       	dc.b	smpsNoAttack, $01
0008DD06 E10A                       	smpsAlterNote       $0A
0008DD08 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DD0C E104                       	smpsAlterNote       $04
0008DD0E E701                       	dc.b	smpsNoAttack, $01
0008DD10 E100                       	smpsAlterNote       $00
0008DD12 E701                       	dc.b	smpsNoAttack, $01
0008DD14 E101                       	smpsAlterNote       $01
0008DD16 E701                       	dc.b	smpsNoAttack, $01
0008DD18 E107                       	smpsAlterNote       $07
0008DD1A E701                       	dc.b	smpsNoAttack, $01
0008DD1C E10B                       	smpsAlterNote       $0B
0008DD1E E701                       	dc.b	smpsNoAttack, $01
0008DD20 E107                       	smpsAlterNote       $07
0008DD22 E701                       	dc.b	smpsNoAttack, $01
0008DD24 E104                       	smpsAlterNote       $04
0008DD26 E701                       	dc.b	smpsNoAttack, $01
0008DD28 E100                       	smpsAlterNote       $00
0008DD2A E701                       	dc.b	smpsNoAttack, $01
0008DD2C E101                       	smpsAlterNote       $01
0008DD2E 8001                       	dc.b	nRst, $01
0008DD30 E109                       	smpsAlterNote       $09
0008DD32 C20D                       	dc.b	nF5, $0D
0008DD34 E106                       	smpsAlterNote       $06
0008DD36 E701                       	dc.b	smpsNoAttack, $01
0008DD38 E102                       	smpsAlterNote       $02
0008DD3A E701                       	dc.b	smpsNoAttack, $01
0008DD3C E106                       	smpsAlterNote       $06
0008DD3E E701                       	dc.b	smpsNoAttack, $01
0008DD40 E10C                       	smpsAlterNote       $0C
0008DD42 E701                       	dc.b	smpsNoAttack, $01
0008DD44 E10D                       	smpsAlterNote       $0D
0008DD46 E701                       	dc.b	smpsNoAttack, $01
0008DD48 E109                       	smpsAlterNote       $09
0008DD4A E701                       	dc.b	smpsNoAttack, $01
0008DD4C E103                       	smpsAlterNote       $03
0008DD4E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DD52 E106                       	smpsAlterNote       $06
0008DD54 E701                       	dc.b	smpsNoAttack, $01
0008DD56 E10C                       	smpsAlterNote       $0C
0008DD58 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DD5C E106                       	smpsAlterNote       $06
0008DD5E E701                       	dc.b	smpsNoAttack, $01
0008DD60 E103                       	smpsAlterNote       $03
0008DD62 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DD66 E109                       	smpsAlterNote       $09
0008DD68 E701                       	dc.b	smpsNoAttack, $01
0008DD6A E10D                       	smpsAlterNote       $0D
0008DD6C E701                       	dc.b	smpsNoAttack, $01
0008DD6E E10C                       	smpsAlterNote       $0C
0008DD70 E701                       	dc.b	smpsNoAttack, $01
0008DD72 E109                       	smpsAlterNote       $09
0008DD74 8001                       	dc.b	nRst, $01
0008DD76 E108                       	smpsAlterNote       $08
0008DD78 C10D                       	dc.b	nE5, $0D
0008DD7A E109                       	smpsAlterNote       $09
0008DD7C C20A 8001                  	dc.b	nF5, $0A, nRst, $01
0008DD80 E108                       	smpsAlterNote       $08
0008DD82 C10D                       	dc.b	nE5, $0D
0008DD84 E102                       	smpsAlterNote       $02
0008DD86 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DD8A E105                       	smpsAlterNote       $05
0008DD8C E701                       	dc.b	smpsNoAttack, $01
0008DD8E E108                       	smpsAlterNote       $08
0008DD90 8001                       	dc.b	nRst, $01
0008DD92 E107                       	smpsAlterNote       $07
0008DD94 BF0D                       	dc.b	nD5, $0D
0008DD96 E108                       	smpsAlterNote       $08
0008DD98 C107                       	dc.b	nE5, $07
0008DD9A E109                       	smpsAlterNote       $09
0008DD9C C207 C406 8001             	dc.b	nF5, $07, nG5, $06, nRst, $01
0008DDA2 E10B                       	smpsAlterNote       $0B
0008DDA4 C603                       	dc.b	nA5, $03
0008DDA6 E10C                       	smpsAlterNote       $0C
0008DDA8 C707 C703 8001             	dc.b	nBb5, $07, nBb5, $03, nRst, $01
0008DDAE E10B                       	smpsAlterNote       $0B
0008DDB0 C603 D206 8001             	dc.b	nA5, $03, nA6, $06, nRst, $01
0008DDB6 E109                       	smpsAlterNote       $09
0008DDB8 D003                       	dc.b	nG6, $03
0008DDBA E108                       	smpsAlterNote       $08
0008DDBC CD02 8001                  	dc.b	nE6, $02, nRst, $01
0008DDC0 E10B                       	smpsAlterNote       $0B
0008DDC2 C601 8001                  	dc.b	nA5, $01, nRst, $01
0008DDC6 E108                       	smpsAlterNote       $08
0008DDC8 C102                       	dc.b	nE5, $02
0008DDCC E10C                       	smpsAlterNote       $0C
0008DDCE E6FB                       	smpsAlterVol        $FB
0008DDD0 A306 800F A303 A303 8019+  	dc.b	nBb2, $06, nRst, $0F, nBb2, $03, nBb2, $03, nRst, $19, nBb2, $02
0008DDDC 8001                       	dc.b	nRst, $01
0008DDDE E10B                       	smpsAlterNote       $0B
0008DDE0 A206 800F A202 8001        	dc.b	nA2, $06, nRst, $0F, nA2, $02, nRst, $01
0008DDE8 E107                       	smpsAlterNote       $07
0008DDEA A706 8001                  	dc.b	nD3, $06, nRst, $01
0008DDEE E10B                       	smpsAlterNote       $0B
0008DDF0 A203                       	dc.b	nA2, $03
0008DDF2 E109                       	smpsAlterNote       $09
0008DDF4 AA03 8001                  	dc.b	nF3, $03, nRst, $01
0008DDF8 E108                       	smpsAlterNote       $08
0008DDFA A906                       	dc.b	nE3, $06
0008DDFC E107                       	smpsAlterNote       $07
0008DDFE A703 8001                  	dc.b	nD3, $03, nRst, $01
0008DE02 E106                       	smpsAlterNote       $06
0008DE04 A503                       	dc.b	nC3, $03
0008DE06 E10C                       	smpsAlterNote       $0C
0008DE08 A303 8001                  	dc.b	nBb2, $03, nRst, $01
0008DE0C E10B                       	smpsAlterNote       $0B
0008DE0E A203 8004                  	dc.b	nA2, $03, nRst, $04
0008DE12 E11B                       	smpsAlterNote       $1B
0008DE14 C401                       	dc.b	nG5, $01
0008DE16 E1F4                       	smpsAlterNote       $F4
0008DE18 E7C5 01                    	dc.b	smpsNoAttack, nAb5, $01
0008DE1B E106                       	smpsAlterNote       $06
0008DE1D E701                       	dc.b	smpsNoAttack, $01
0008DE1F E10F                       	smpsAlterNote       $0F
0008DE21 E701                       	dc.b	smpsNoAttack, $01
0008DE23 E1E4                       	smpsAlterNote       $E4
0008DE25 E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
0008DE28 E1F6                       	smpsAlterNote       $F6
0008DE2A E701                       	dc.b	smpsNoAttack, $01
0008DE2C E108                       	smpsAlterNote       $08
0008DE2E E701                       	dc.b	smpsNoAttack, $01
0008DE30 E10B                       	smpsAlterNote       $0B
0008DE32 E706                       	dc.b	smpsNoAttack, $06
0008DE34 E105                       	smpsAlterNote       $05
0008DE36 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DE3A E108                       	smpsAlterNote       $08
0008DE3C E701                       	dc.b	smpsNoAttack, $01
0008DE3E E10E                       	smpsAlterNote       $0E
0008DE40 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DE44 E108                       	smpsAlterNote       $08
0008DE46 E701                       	dc.b	smpsNoAttack, $01
0008DE48 E105                       	smpsAlterNote       $05
0008DE4A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DE4E E10B                       	smpsAlterNote       $0B
0008DE50 E701                       	dc.b	smpsNoAttack, $01
0008DE52 E10F                       	smpsAlterNote       $0F
0008DE54 E701                       	dc.b	smpsNoAttack, $01
0008DE56 E10E                       	smpsAlterNote       $0E
0008DE58 E701                       	dc.b	smpsNoAttack, $01
0008DE5A E108                       	smpsAlterNote       $08
0008DE5C E701                       	dc.b	smpsNoAttack, $01
0008DE5E E104                       	smpsAlterNote       $04
0008DE60 E701                       	dc.b	smpsNoAttack, $01
0008DE62 E108                       	smpsAlterNote       $08
0008DE64 E701                       	dc.b	smpsNoAttack, $01
0008DE66 E10B                       	smpsAlterNote       $0B
0008DE68 E701                       	dc.b	smpsNoAttack, $01
0008DE6A E10F                       	smpsAlterNote       $0F
0008DE6C E701                       	dc.b	smpsNoAttack, $01
0008DE6E E10B                       	smpsAlterNote       $0B
0008DE70 E701                       	dc.b	smpsNoAttack, $01
0008DE72 E105                       	smpsAlterNote       $05
0008DE74 E701                       	dc.b	smpsNoAttack, $01
0008DE76 E104                       	smpsAlterNote       $04
0008DE78 E701                       	dc.b	smpsNoAttack, $01
0008DE7A E108                       	smpsAlterNote       $08
0008DE7C E701                       	dc.b	smpsNoAttack, $01
0008DE7E E10E                       	smpsAlterNote       $0E
0008DE80 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DE84 E10B                       	smpsAlterNote       $0B
0008DE86 E701                       	dc.b	smpsNoAttack, $01
0008DE88 E105                       	smpsAlterNote       $05
0008DE8A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DE8E E10B                       	smpsAlterNote       $0B
0008DE90 E701                       	dc.b	smpsNoAttack, $01
0008DE92 E10E                       	smpsAlterNote       $0E
0008DE94 E701                       	dc.b	smpsNoAttack, $01
0008DE96 E10F                       	smpsAlterNote       $0F
0008DE98 8001                       	dc.b	nRst, $01
0008DE9A E109                       	smpsAlterNote       $09
0008DE9C C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
0008DEA2 E108                       	smpsAlterNote       $08
0008DEA4 C101 8001                  	dc.b	nE5, $01, nRst, $01
0008DEA8 E109                       	smpsAlterNote       $09
0008DEAA C202                       	dc.b	nF5, $02
0008DEAC E108                       	smpsAlterNote       $08
0008DEAE C102                       	dc.b	nE5, $02
0008DEB0 E107                       	smpsAlterNote       $07
0008DEB2 BF02 8001                  	dc.b	nD5, $02, nRst, $01
0008DEB6 E108                       	smpsAlterNote       $08
0008DEB8 C101 8001                  	dc.b	nE5, $01, nRst, $01
0008DEBC E107                       	smpsAlterNote       $07
0008DEBE BF02                       	dc.b	nD5, $02
0008DEC0 E106                       	smpsAlterNote       $06
0008DEC2 BD02 8001                  	dc.b	nC5, $02, nRst, $01
0008DEC6 E107                       	smpsAlterNote       $07
0008DEC8 BF01 8001                  	dc.b	nD5, $01, nRst, $01
0008DECC E106                       	smpsAlterNote       $06
0008DECE BD02                       	dc.b	nC5, $02
0008DED0 E10C                       	smpsAlterNote       $0C
0008DED2 BB02                       	dc.b	nBb4, $02
0008DED4 E106                       	smpsAlterNote       $06
0008DED6 BD02 8001                  	dc.b	nC5, $02, nRst, $01
0008DEDA E10C                       	smpsAlterNote       $0C
0008DEDC BB01 8001                  	dc.b	nBb4, $01, nRst, $01
0008DEE0 E10B                       	smpsAlterNote       $0B
0008DEE2 BA02                       	dc.b	nA4, $02
0008DEE4 E10C                       	smpsAlterNote       $0C
0008DEE6 BB02                       	dc.b	nBb4, $02
0008DEE8 E10B                       	smpsAlterNote       $0B
0008DEEA BA02 8001 B901 8001 BA02   	dc.b	nA4, $02, nRst, $01, nAb4, $01, nRst, $01, nA4, $02
0008DEF4 E108                       	smpsAlterNote       $08
0008DEF6 B502 8001 C101 8001        	dc.b	nE4, $02, nRst, $01, nE5, $01, nRst, $01
0008DEFE E107                       	smpsAlterNote       $07
0008DF00 BE02                       	dc.b	nCs5, $02
0008DF02 E10B                       	smpsAlterNote       $0B
0008DF04 BA02                       	dc.b	nA4, $02
0008DF06 E109                       	smpsAlterNote       $09
0008DF08 B802 8001                  	dc.b	nG4, $02, nRst, $01
0008DF0C E108                       	smpsAlterNote       $08
0008DF0E B501 8001                  	dc.b	nE4, $01, nRst, $01
0008DF12 E10B                       	smpsAlterNote       $0B
0008DF14 AE02                       	dc.b	nA3, $02
0008DF16 E10C                       	smpsAlterNote       $0C
0008DF18 A307 800E A303 A303 8019+  	dc.b	nBb2, $07, nRst, $0E, nBb2, $03, nBb2, $03, nRst, $19, nBb2, $03
0008DF24 E10B                       	smpsAlterNote       $0B
0008DF26 A206 800F A202 8001        	dc.b	nA2, $06, nRst, $0F, nA2, $02, nRst, $01
0008DF2E E107                       	smpsAlterNote       $07
0008DF30 A706 8001                  	dc.b	nD3, $06, nRst, $01
0008DF34 E10B                       	smpsAlterNote       $0B
0008DF36 A203                       	dc.b	nA2, $03
0008DF38 E109                       	smpsAlterNote       $09
0008DF3A AA03 8001                  	dc.b	nF3, $03, nRst, $01
0008DF3E E108                       	smpsAlterNote       $08
0008DF40 A906 8001                  	dc.b	nE3, $06, nRst, $01
0008DF44 E107                       	smpsAlterNote       $07
0008DF46 A702 8001                  	dc.b	nD3, $02, nRst, $01
0008DF4A E106                       	smpsAlterNote       $06
0008DF4C A503                       	dc.b	nC3, $03
0008DF4E E10C                       	smpsAlterNote       $0C
0008DF50 A303 8001                  	dc.b	nBb2, $03, nRst, $01
0008DF56 E107                       	smpsAlterNote       $07
0008DF58 B20D                       	dc.b	nCs4, $0D
0008DF5A E104                       	smpsAlterNote       $04
0008DF5C E701                       	dc.b	smpsNoAttack, $01
0008DF5E E100                       	smpsAlterNote       $00
0008DF60 E701                       	dc.b	smpsNoAttack, $01
0008DF62 E104                       	smpsAlterNote       $04
0008DF64 E701                       	dc.b	smpsNoAttack, $01
0008DF66 E10A                       	smpsAlterNote       $0A
0008DF68 E701                       	dc.b	smpsNoAttack, $01
0008DF6A E10B                       	smpsAlterNote       $0B
0008DF6C E701                       	dc.b	smpsNoAttack, $01
0008DF6E E107                       	smpsAlterNote       $07
0008DF70 E701                       	dc.b	smpsNoAttack, $01
0008DF72 E101                       	smpsAlterNote       $01
0008DF74 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DF78 E104                       	smpsAlterNote       $04
0008DF7A E701                       	dc.b	smpsNoAttack, $01
0008DF7C E10A                       	smpsAlterNote       $0A
0008DF7E E701                       	dc.b	smpsNoAttack, $01
0008DF80 E10B                       	smpsAlterNote       $0B
0008DF82 8001                       	dc.b	nRst, $01
0008DF84 E107                       	smpsAlterNote       $07
0008DF86 B30D                       	dc.b	nD4, $0D
0008DF88 E104                       	smpsAlterNote       $04
0008DF8A E701                       	dc.b	smpsNoAttack, $01
0008DF8C E100                       	smpsAlterNote       $00
0008DF8E E701                       	dc.b	smpsNoAttack, $01
0008DF90 E104                       	smpsAlterNote       $04
0008DF92 E701                       	dc.b	smpsNoAttack, $01
0008DF94 E10A                       	smpsAlterNote       $0A
0008DF96 E701                       	dc.b	smpsNoAttack, $01
0008DF98 E10B                       	smpsAlterNote       $0B
0008DF9A E701                       	dc.b	smpsNoAttack, $01
0008DF9C E107                       	smpsAlterNote       $07
0008DF9E E701                       	dc.b	smpsNoAttack, $01
0008DFA0 E101                       	smpsAlterNote       $01
0008DFA2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DFA6 E104                       	smpsAlterNote       $04
0008DFA8 E701                       	dc.b	smpsNoAttack, $01
0008DFAA E10A                       	smpsAlterNote       $0A
0008DFAC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DFB0 E104                       	smpsAlterNote       $04
0008DFB2 E701                       	dc.b	smpsNoAttack, $01
0008DFB4 E101                       	smpsAlterNote       $01
0008DFB6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DFBA E107                       	smpsAlterNote       $07
0008DFBC E701                       	dc.b	smpsNoAttack, $01
0008DFBE E10B                       	smpsAlterNote       $0B
0008DFC0 E701                       	dc.b	smpsNoAttack, $01
0008DFC2 E10A                       	smpsAlterNote       $0A
0008DFC4 E701                       	dc.b	smpsNoAttack, $01
0008DFC6 E107                       	smpsAlterNote       $07
0008DFC8 8001                       	dc.b	nRst, $01
0008DFCA E108                       	smpsAlterNote       $08
0008DFCC B50D                       	dc.b	nE4, $0D
0008DFCE E102                       	smpsAlterNote       $02
0008DFD0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DFD4 E105                       	smpsAlterNote       $05
0008DFD6 E701                       	dc.b	smpsNoAttack, $01
0008DFD8 E10B                       	smpsAlterNote       $0B
0008DFDA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DFDE E105                       	smpsAlterNote       $05
0008DFE0 E701                       	dc.b	smpsNoAttack, $01
0008DFE2 E102                       	smpsAlterNote       $02
0008DFE4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DFE8 E108                       	smpsAlterNote       $08
0008DFEA E701                       	dc.b	smpsNoAttack, $01
0008DFEC E10C                       	smpsAlterNote       $0C
0008DFEE E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008DFF2 E107                       	smpsAlterNote       $07
0008DFF4 B30D                       	dc.b	nD4, $0D
0008DFF6 E101                       	smpsAlterNote       $01
0008DFF8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DFFC E104                       	smpsAlterNote       $04
0008DFFE E701                       	dc.b	smpsNoAttack, $01
0008E000 E10A                       	smpsAlterNote       $0A
0008E002 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E006 E104                       	smpsAlterNote       $04
0008E008 E701                       	dc.b	smpsNoAttack, $01
0008E00A E101                       	smpsAlterNote       $01
0008E00C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E010 E107                       	smpsAlterNote       $07
0008E012 E701                       	dc.b	smpsNoAttack, $01
0008E014 E10B                       	smpsAlterNote       $0B
0008E016 E701                       	dc.b	smpsNoAttack, $01
0008E018 E10A                       	smpsAlterNote       $0A
0008E01A E701                       	dc.b	smpsNoAttack, $01
0008E01C E104                       	smpsAlterNote       $04
0008E01E E701                       	dc.b	smpsNoAttack, $01
0008E020 E100                       	smpsAlterNote       $00
0008E022 E701                       	dc.b	smpsNoAttack, $01
0008E024 E104                       	smpsAlterNote       $04
0008E026 E701                       	dc.b	smpsNoAttack, $01
0008E028 E107                       	smpsAlterNote       $07
0008E02A E701                       	dc.b	smpsNoAttack, $01
0008E02C E10B                       	smpsAlterNote       $0B
0008E02E E701                       	dc.b	smpsNoAttack, $01
0008E030 E107                       	smpsAlterNote       $07
0008E032 E701 B20E                  	dc.b	smpsNoAttack, $01, nCs4, $0E
0008E036 E101                       	smpsAlterNote       $01
0008E038 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E03C E107                       	smpsAlterNote       $07
0008E03E E701                       	dc.b	smpsNoAttack, $01
0008E040 E10A                       	smpsAlterNote       $0A
0008E042 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E046 E104                       	smpsAlterNote       $04
0008E048 E701                       	dc.b	smpsNoAttack, $01
0008E04A E100                       	smpsAlterNote       $00
0008E04C E701                       	dc.b	smpsNoAttack, $01
0008E04E E101                       	smpsAlterNote       $01
0008E050 E701                       	dc.b	smpsNoAttack, $01
0008E052 E107                       	smpsAlterNote       $07
0008E054 E701                       	dc.b	smpsNoAttack, $01
0008E056 E10B                       	smpsAlterNote       $0B
0008E058 E701                       	dc.b	smpsNoAttack, $01
0008E05A E107                       	smpsAlterNote       $07
0008E05C B30E                       	dc.b	nD4, $0E
0008E05E E101                       	smpsAlterNote       $01
0008E060 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E064 E107                       	smpsAlterNote       $07
0008E066 E701                       	dc.b	smpsNoAttack, $01
0008E068 E10A                       	smpsAlterNote       $0A
0008E06A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E06E E104                       	smpsAlterNote       $04
0008E070 E701                       	dc.b	smpsNoAttack, $01
0008E072 E100                       	smpsAlterNote       $00
0008E074 E701                       	dc.b	smpsNoAttack, $01
0008E076 E101                       	smpsAlterNote       $01
0008E078 E701                       	dc.b	smpsNoAttack, $01
0008E07A E107                       	smpsAlterNote       $07
0008E07C E701                       	dc.b	smpsNoAttack, $01
0008E07E E10B                       	smpsAlterNote       $0B
0008E080 E701                       	dc.b	smpsNoAttack, $01
0008E082 E107                       	smpsAlterNote       $07
0008E084 E701                       	dc.b	smpsNoAttack, $01
0008E086 E104                       	smpsAlterNote       $04
0008E088 E701                       	dc.b	smpsNoAttack, $01
0008E08A E100                       	smpsAlterNote       $00
0008E08C E701                       	dc.b	smpsNoAttack, $01
0008E08E E104                       	smpsAlterNote       $04
0008E090 E701                       	dc.b	smpsNoAttack, $01
0008E092 E10A                       	smpsAlterNote       $0A
0008E094 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E098 E107                       	smpsAlterNote       $07
0008E09A E701 B20D                  	dc.b	smpsNoAttack, $01, nCs4, $0D
0008E09E E104                       	smpsAlterNote       $04
0008E0A0 E701                       	dc.b	smpsNoAttack, $01
0008E0A2 E100                       	smpsAlterNote       $00
0008E0A4 E701                       	dc.b	smpsNoAttack, $01
0008E0A6 E101                       	smpsAlterNote       $01
0008E0A8 E701                       	dc.b	smpsNoAttack, $01
0008E0AA E107                       	smpsAlterNote       $07
0008E0AC E701                       	dc.b	smpsNoAttack, $01
0008E0AE E10B                       	smpsAlterNote       $0B
0008E0B0 E701                       	dc.b	smpsNoAttack, $01
0008E0B2 E107                       	smpsAlterNote       $07
0008E0B4 E701                       	dc.b	smpsNoAttack, $01
0008E0B6 E104                       	smpsAlterNote       $04
0008E0B8 E701                       	dc.b	smpsNoAttack, $01
0008E0BA E100                       	smpsAlterNote       $00
0008E0BC E701                       	dc.b	smpsNoAttack, $01
0008E0BE E104                       	smpsAlterNote       $04
0008E0C0 E701                       	dc.b	smpsNoAttack, $01
0008E0C2 E10A                       	smpsAlterNote       $0A
0008E0C4 E701                       	dc.b	smpsNoAttack, $01
0008E0C6 E10B                       	smpsAlterNote       $0B
0008E0C8 E701                       	dc.b	smpsNoAttack, $01
0008E0CC E6FF                       	smpsAlterVol        $FF
0008E0CE A206 8001 A203 A203 8001+  	dc.b	nA2, $06, nRst, $01, nA2, $03, nA2, $03, nRst, $01, nA2, $03
0008E0DA 800B A202 8001             	dc.b	nRst, $0B, nA2, $02, nRst, $01
0008E0E2 E109                       	smpsAlterNote       $09
0008E0E4 E601                       	smpsAlterVol        $01
0008E0E6 B60D                       	dc.b	nF4, $0D
0008E0E8 E106                       	smpsAlterNote       $06
0008E0EA E701                       	dc.b	smpsNoAttack, $01
0008E0EC E102                       	smpsAlterNote       $02
0008E0EE E701                       	dc.b	smpsNoAttack, $01
0008E0F0 E106                       	smpsAlterNote       $06
0008E0F2 E701                       	dc.b	smpsNoAttack, $01
0008E0F4 E109                       	smpsAlterNote       $09
0008E0F6 E701                       	dc.b	smpsNoAttack, $01
0008E0F8 E10D                       	smpsAlterNote       $0D
0008E0FA E701                       	dc.b	smpsNoAttack, $01
0008E0FC E109                       	smpsAlterNote       $09
0008E0FE E701                       	dc.b	smpsNoAttack, $01
0008E100 E103                       	smpsAlterNote       $03
0008E102 E701                       	dc.b	smpsNoAttack, $01
0008E104 E102                       	smpsAlterNote       $02
0008E106 E701                       	dc.b	smpsNoAttack, $01
0008E108 E106                       	smpsAlterNote       $06
0008E10A E701                       	dc.b	smpsNoAttack, $01
0008E10C E10C                       	smpsAlterNote       $0C
0008E10E E701                       	dc.b	smpsNoAttack, $01
0008E110 E10D                       	smpsAlterNote       $0D
0008E112 8001                       	dc.b	nRst, $01
0008E114 E109                       	smpsAlterNote       $09
0008E116 B80D                       	dc.b	nG4, $0D
0008E118 E106                       	smpsAlterNote       $06
0008E11A E701                       	dc.b	smpsNoAttack, $01
0008E11C E102                       	smpsAlterNote       $02
0008E11E E701                       	dc.b	smpsNoAttack, $01
0008E120 E106                       	smpsAlterNote       $06
0008E122 E701                       	dc.b	smpsNoAttack, $01
0008E124 E109                       	smpsAlterNote       $09
0008E126 E701                       	dc.b	smpsNoAttack, $01
0008E128 E10D                       	smpsAlterNote       $0D
0008E12A E701                       	dc.b	smpsNoAttack, $01
0008E12C E109                       	smpsAlterNote       $09
0008E12E E701                       	dc.b	smpsNoAttack, $01
0008E130 E103                       	smpsAlterNote       $03
0008E132 E701                       	dc.b	smpsNoAttack, $01
0008E134 E102                       	smpsAlterNote       $02
0008E136 E701                       	dc.b	smpsNoAttack, $01
0008E138 E106                       	smpsAlterNote       $06
0008E13A E701                       	dc.b	smpsNoAttack, $01
0008E13C E10C                       	smpsAlterNote       $0C
0008E13E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E142 E106                       	smpsAlterNote       $06
0008E144 E701                       	dc.b	smpsNoAttack, $01
0008E146 E103                       	smpsAlterNote       $03
0008E148 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E14C E109                       	smpsAlterNote       $09
0008E14E E701                       	dc.b	smpsNoAttack, $01
0008E150 E10D                       	smpsAlterNote       $0D
0008E152 E701                       	dc.b	smpsNoAttack, $01
0008E154 E10C                       	smpsAlterNote       $0C
0008E156 E701                       	dc.b	smpsNoAttack, $01
0008E158 E109                       	smpsAlterNote       $09
0008E15A 8001                       	dc.b	nRst, $01
0008E15C E10B                       	smpsAlterNote       $0B
0008E15E BA0D                       	dc.b	nA4, $0D
0008E160 E105                       	smpsAlterNote       $05
0008E162 E701                       	dc.b	smpsNoAttack, $01
0008E164 E104                       	smpsAlterNote       $04
0008E166 E701                       	dc.b	smpsNoAttack, $01
0008E168 E108                       	smpsAlterNote       $08
0008E16A E701                       	dc.b	smpsNoAttack, $01
0008E16C E10E                       	smpsAlterNote       $0E
0008E16E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E172 E10B                       	smpsAlterNote       $0B
0008E174 E701                       	dc.b	smpsNoAttack, $01
0008E176 E105                       	smpsAlterNote       $05
0008E178 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E17C E10B                       	smpsAlterNote       $0B
0008E17E E701                       	dc.b	smpsNoAttack, $01
0008E180 E10E                       	smpsAlterNote       $0E
0008E182 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E186 E108                       	smpsAlterNote       $08
0008E188 E701                       	dc.b	smpsNoAttack, $01
0008E18A E104                       	smpsAlterNote       $04
0008E18C E701                       	dc.b	smpsNoAttack, $01
0008E18E E105                       	smpsAlterNote       $05
0008E190 E701                       	dc.b	smpsNoAttack, $01
0008E192 E10B                       	smpsAlterNote       $0B
0008E194 E701                       	dc.b	smpsNoAttack, $01
0008E196 E10F                       	smpsAlterNote       $0F
0008E198 E701                       	dc.b	smpsNoAttack, $01
0008E19A E10B                       	smpsAlterNote       $0B
0008E19C E701                       	dc.b	smpsNoAttack, $01
0008E19E E108                       	smpsAlterNote       $08
0008E1A0 E701                       	dc.b	smpsNoAttack, $01
0008E1A2 E104                       	smpsAlterNote       $04
0008E1A4 E701                       	dc.b	smpsNoAttack, $01
0008E1A6 E108                       	smpsAlterNote       $08
0008E1A8 E701                       	dc.b	smpsNoAttack, $01
0008E1AA E10E                       	smpsAlterNote       $0E
0008E1AC E701                       	dc.b	smpsNoAttack, $01
0008E1AE E10F                       	smpsAlterNote       $0F
0008E1B0 E701                       	dc.b	smpsNoAttack, $01
0008E1B2 E10B                       	smpsAlterNote       $0B
0008E1B4 E701                       	dc.b	smpsNoAttack, $01
0008E1B6 E105                       	smpsAlterNote       $05
0008E1B8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E1BC E108                       	smpsAlterNote       $08
0008E1BE E701                       	dc.b	smpsNoAttack, $01
0008E1C0 E10E                       	smpsAlterNote       $0E
0008E1C2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E1C6 E108                       	smpsAlterNote       $08
0008E1C8 E701                       	dc.b	smpsNoAttack, $01
0008E1CA E105                       	smpsAlterNote       $05
0008E1CC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E1D0 E108                       	smpsAlterNote       $08
0008E1D2 B50A 8001                  	dc.b	nE4, $0A, nRst, $01
0008E1D6 E109                       	smpsAlterNote       $09
0008E1D8 B60D                       	dc.b	nF4, $0D
0008E1DA E103                       	smpsAlterNote       $03
0008E1DC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E1E0 E106                       	smpsAlterNote       $06
0008E1E2 E701                       	dc.b	smpsNoAttack, $01
0008E1E4 E10C                       	smpsAlterNote       $0C
0008E1E6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E1EA E106                       	smpsAlterNote       $06
0008E1EC E701                       	dc.b	smpsNoAttack, $01
0008E1EE E103                       	smpsAlterNote       $03
0008E1F0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E1F4 E109                       	smpsAlterNote       $09
0008E1F6 E701                       	dc.b	smpsNoAttack, $01
0008E1F8 E10D                       	smpsAlterNote       $0D
0008E1FA E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008E1FE E109                       	smpsAlterNote       $09
0008E200 B80D                       	dc.b	nG4, $0D
0008E202 E103                       	smpsAlterNote       $03
0008E204 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E208 E109                       	smpsAlterNote       $09
0008E20A E701                       	dc.b	smpsNoAttack, $01
0008E20C E10C                       	smpsAlterNote       $0C
0008E20E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E212 E106                       	smpsAlterNote       $06
0008E214 E701                       	dc.b	smpsNoAttack, $01
0008E216 E102                       	smpsAlterNote       $02
0008E218 E701                       	dc.b	smpsNoAttack, $01
0008E21A E103                       	smpsAlterNote       $03
0008E21C E701                       	dc.b	smpsNoAttack, $01
0008E21E E109                       	smpsAlterNote       $09
0008E220 E701                       	dc.b	smpsNoAttack, $01
0008E222 E10D                       	smpsAlterNote       $0D
0008E224 E701                       	dc.b	smpsNoAttack, $01
0008E226 E109                       	smpsAlterNote       $09
0008E228 E701                       	dc.b	smpsNoAttack, $01
0008E22A E106                       	smpsAlterNote       $06
0008E22C E701                       	dc.b	smpsNoAttack, $01
0008E22E E102                       	smpsAlterNote       $02
0008E230 E701                       	dc.b	smpsNoAttack, $01
0008E232 E106                       	smpsAlterNote       $06
0008E234 E701                       	dc.b	smpsNoAttack, $01
0008E236 E10C                       	smpsAlterNote       $0C
0008E238 E701                       	dc.b	smpsNoAttack, $01
0008E23A E10D                       	smpsAlterNote       $0D
0008E23C E701                       	dc.b	smpsNoAttack, $01
0008E23E E109                       	smpsAlterNote       $09
0008E240 E701                       	dc.b	smpsNoAttack, $01
0008E242 E10B                       	smpsAlterNote       $0B
0008E244 BA0D                       	dc.b	nA4, $0D
0008E246 E108                       	smpsAlterNote       $08
0008E248 E701                       	dc.b	smpsNoAttack, $01
0008E24A E105                       	smpsAlterNote       $05
0008E24C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E250 E10B                       	smpsAlterNote       $0B
0008E252 E701                       	dc.b	smpsNoAttack, $01
0008E254 E10F                       	smpsAlterNote       $0F
0008E256 E701                       	dc.b	smpsNoAttack, $01
0008E258 E10E                       	smpsAlterNote       $0E
0008E25A E701                       	dc.b	smpsNoAttack, $01
0008E25C E108                       	smpsAlterNote       $08
0008E25E E701                       	dc.b	smpsNoAttack, $01
0008E260 E104                       	smpsAlterNote       $04
0008E262 E701                       	dc.b	smpsNoAttack, $01
0008E264 E108                       	smpsAlterNote       $08
0008E266 E701                       	dc.b	smpsNoAttack, $01
0008E268 E10B                       	smpsAlterNote       $0B
0008E26A E701                       	dc.b	smpsNoAttack, $01
0008E26C E10F                       	smpsAlterNote       $0F
0008E26E E701                       	dc.b	smpsNoAttack, $01
0008E270 E10B                       	smpsAlterNote       $0B
0008E272 E701                       	dc.b	smpsNoAttack, $01
0008E274 E105                       	smpsAlterNote       $05
0008E276 E701                       	dc.b	smpsNoAttack, $01
0008E278 E104                       	smpsAlterNote       $04
0008E27A E701                       	dc.b	smpsNoAttack, $01
0008E27C E108                       	smpsAlterNote       $08
0008E27E E701                       	dc.b	smpsNoAttack, $01
0008E280 E10E                       	smpsAlterNote       $0E
0008E282 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E286 E10B                       	smpsAlterNote       $0B
0008E288 E701                       	dc.b	smpsNoAttack, $01
0008E28A E105                       	smpsAlterNote       $05
0008E28C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E290 E10B                       	smpsAlterNote       $0B
0008E292 E701                       	dc.b	smpsNoAttack, $01
0008E294 E10E                       	smpsAlterNote       $0E
0008E296 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E29A E108                       	smpsAlterNote       $08
0008E29C E701                       	dc.b	smpsNoAttack, $01
0008E29E E105                       	smpsAlterNote       $05
0008E2A0 8001                       	dc.b	nRst, $01
0008E2A2 E109                       	smpsAlterNote       $09
0008E2A4 B60A                       	dc.b	nF4, $0A
0008E2A6 E108                       	smpsAlterNote       $08
0008E2A8 B507                       	dc.b	nE4, $07
0008E2AA E107                       	smpsAlterNote       $07
0008E2AC B30D 8001                  	dc.b	nD4, $0D, nRst, $01
0008E2B0 E108                       	smpsAlterNote       $08
0008E2B2 B503                       	dc.b	nE4, $03
0008E2B4 E109                       	smpsAlterNote       $09
0008E2B6 B603 8001 B802 8001        	dc.b	nF4, $03, nRst, $01, nG4, $02, nRst, $01
0008E2BE E10B                       	smpsAlterNote       $0B
0008E2C0 BA0D                       	dc.b	nA4, $0D
0008E2C2 E108                       	smpsAlterNote       $08
0008E2C4 E701                       	dc.b	smpsNoAttack, $01
0008E2C6 E104                       	smpsAlterNote       $04
0008E2C8 E701                       	dc.b	smpsNoAttack, $01
0008E2CA E108                       	smpsAlterNote       $08
0008E2CC E701                       	dc.b	smpsNoAttack, $01
0008E2CE E10B                       	smpsAlterNote       $0B
0008E2D0 E701                       	dc.b	smpsNoAttack, $01
0008E2D2 E10F                       	smpsAlterNote       $0F
0008E2D4 E701                       	dc.b	smpsNoAttack, $01
0008E2D6 E10B                       	smpsAlterNote       $0B
0008E2D8 E701                       	dc.b	smpsNoAttack, $01
0008E2DA E105                       	smpsAlterNote       $05
0008E2DC E701                       	dc.b	smpsNoAttack, $01
0008E2DE E104                       	smpsAlterNote       $04
0008E2E0 E701                       	dc.b	smpsNoAttack, $01
0008E2E2 E108                       	smpsAlterNote       $08
0008E2E4 E701                       	dc.b	smpsNoAttack, $01
0008E2E6 E10E                       	smpsAlterNote       $0E
0008E2E8 E701                       	dc.b	smpsNoAttack, $01
0008E2EA E10F                       	smpsAlterNote       $0F
0008E2EC 8001                       	dc.b	nRst, $01
0008E2EE E109                       	smpsAlterNote       $09
0008E2F0 C20D                       	dc.b	nF5, $0D
0008E2F2 E106                       	smpsAlterNote       $06
0008E2F4 E701                       	dc.b	smpsNoAttack, $01
0008E2F6 E102                       	smpsAlterNote       $02
0008E2F8 E701                       	dc.b	smpsNoAttack, $01
0008E2FA E106                       	smpsAlterNote       $06
0008E2FC E701                       	dc.b	smpsNoAttack, $01
0008E2FE E109                       	smpsAlterNote       $09
0008E300 E701                       	dc.b	smpsNoAttack, $01
0008E302 E10D                       	smpsAlterNote       $0D
0008E304 E701                       	dc.b	smpsNoAttack, $01
0008E306 E109                       	smpsAlterNote       $09
0008E308 E701                       	dc.b	smpsNoAttack, $01
0008E30A E103                       	smpsAlterNote       $03
0008E30C E701                       	dc.b	smpsNoAttack, $01
0008E30E E102                       	smpsAlterNote       $02
0008E310 E701                       	dc.b	smpsNoAttack, $01
0008E312 E106                       	smpsAlterNote       $06
0008E314 E701                       	dc.b	smpsNoAttack, $01
0008E316 E10C                       	smpsAlterNote       $0C
0008E318 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E31C E109                       	smpsAlterNote       $09
0008E31E E701                       	dc.b	smpsNoAttack, $01
0008E320 E103                       	smpsAlterNote       $03
0008E322 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E326 E109                       	smpsAlterNote       $09
0008E328 E701                       	dc.b	smpsNoAttack, $01
0008E32A E10C                       	smpsAlterNote       $0C
0008E32C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E330 E106                       	smpsAlterNote       $06
0008E332 E701                       	dc.b	smpsNoAttack, $01
0008E334 E102                       	smpsAlterNote       $02
0008E336 E701                       	dc.b	smpsNoAttack, $01
0008E338 E103                       	smpsAlterNote       $03
0008E33A E701                       	dc.b	smpsNoAttack, $01
0008E33C E109                       	smpsAlterNote       $09
0008E33E E701                       	dc.b	smpsNoAttack, $01
0008E340 E10D                       	smpsAlterNote       $0D
0008E342 E701                       	dc.b	smpsNoAttack, $01
0008E344 E109                       	smpsAlterNote       $09
0008E346 E701                       	dc.b	smpsNoAttack, $01
0008E348 E106                       	smpsAlterNote       $06
0008E34A E701                       	dc.b	smpsNoAttack, $01
0008E34C E102                       	smpsAlterNote       $02
0008E34E E701                       	dc.b	smpsNoAttack, $01
0008E350 E106                       	smpsAlterNote       $06
0008E352 E701                       	dc.b	smpsNoAttack, $01
0008E354 E10C                       	smpsAlterNote       $0C
0008E356 E701                       	dc.b	smpsNoAttack, $01
0008E358 E10D                       	smpsAlterNote       $0D
0008E35A E701                       	dc.b	smpsNoAttack, $01
0008E35C E109                       	smpsAlterNote       $09
0008E35E E701                       	dc.b	smpsNoAttack, $01
0008E360 E103                       	smpsAlterNote       $03
0008E362 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E366 E106                       	smpsAlterNote       $06
0008E368 E701                       	dc.b	smpsNoAttack, $01
0008E36A E10C                       	smpsAlterNote       $0C
0008E36C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E370 E106                       	smpsAlterNote       $06
0008E372 E701                       	dc.b	smpsNoAttack, $01
0008E374 E103                       	smpsAlterNote       $03
0008E376 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E37A E109                       	smpsAlterNote       $09
0008E37C E701                       	dc.b	smpsNoAttack, $01
0008E37E E10D                       	smpsAlterNote       $0D
0008E380 E701                       	dc.b	smpsNoAttack, $01
0008E382 E10C                       	smpsAlterNote       $0C
0008E384 E701                       	dc.b	smpsNoAttack, $01
0008E386 E106                       	smpsAlterNote       $06
0008E388 E701                       	dc.b	smpsNoAttack, $01
0008E38A E103                       	smpsAlterNote       $03
0008E38C 8001                       	dc.b	nRst, $01
0008E38E E109                       	smpsAlterNote       $09
0008E390 C206 8001                  	dc.b	nF5, $06, nRst, $01
0008E396 E10C                       	smpsAlterNote       $0C
0008E398 E601                       	smpsAlterVol        $01
0008E39A BB0D                       	dc.b	nBb4, $0D
0008E39C E106                       	smpsAlterNote       $06
0008E39E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E3A2 E109                       	smpsAlterNote       $09
0008E3A4 E701                       	dc.b	smpsNoAttack, $01
0008E3A6 E10F                       	smpsAlterNote       $0F
0008E3A8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E3AC E109                       	smpsAlterNote       $09
0008E3AE E701                       	dc.b	smpsNoAttack, $01
0008E3B0 E106                       	smpsAlterNote       $06
0008E3B2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E3B6 E10C                       	smpsAlterNote       $0C
0008E3B8 E701                       	dc.b	smpsNoAttack, $01
0008E3BA E110                       	smpsAlterNote       $10
0008E3BC E701                       	dc.b	smpsNoAttack, $01
0008E3BE E10F                       	smpsAlterNote       $0F
0008E3C0 E701                       	dc.b	smpsNoAttack, $01
0008E3C2 E109                       	smpsAlterNote       $09
0008E3C4 E701                       	dc.b	smpsNoAttack, $01
0008E3C6 E105                       	smpsAlterNote       $05
0008E3C8 E701                       	dc.b	smpsNoAttack, $01
0008E3CA E106                       	smpsAlterNote       $06
0008E3CC 8001 BD0D                  	dc.b	nRst, $01, nC5, $0D
0008E3D0 E103                       	smpsAlterNote       $03
0008E3D2 E701                       	dc.b	smpsNoAttack, $01
0008E3D4 E1FF                       	smpsAlterNote       $FF
0008E3D6 E701                       	dc.b	smpsNoAttack, $01
0008E3D8 E103                       	smpsAlterNote       $03
0008E3DA E701                       	dc.b	smpsNoAttack, $01
0008E3DC E106                       	smpsAlterNote       $06
0008E3DE E701                       	dc.b	smpsNoAttack, $01
0008E3E0 E10A                       	smpsAlterNote       $0A
0008E3E2 E701                       	dc.b	smpsNoAttack, $01
0008E3E4 E106                       	smpsAlterNote       $06
0008E3E6 E701                       	dc.b	smpsNoAttack, $01
0008E3E8 E100                       	smpsAlterNote       $00
0008E3EA E701                       	dc.b	smpsNoAttack, $01
0008E3EC E1FF                       	smpsAlterNote       $FF
0008E3EE E701                       	dc.b	smpsNoAttack, $01
0008E3F0 E103                       	smpsAlterNote       $03
0008E3F2 E701                       	dc.b	smpsNoAttack, $01
0008E3F4 E109                       	smpsAlterNote       $09
0008E3F6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E3FA E106                       	smpsAlterNote       $06
0008E3FC E701                       	dc.b	smpsNoAttack, $01
0008E3FE E100                       	smpsAlterNote       $00
0008E400 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E404 E107                       	smpsAlterNote       $07
0008E406 BF0E                       	dc.b	nD5, $0E
0008E408 E101                       	smpsAlterNote       $01
0008E40A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E40E E107                       	smpsAlterNote       $07
0008E410 E701                       	dc.b	smpsNoAttack, $01
0008E412 E10A                       	smpsAlterNote       $0A
0008E414 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E418 E104                       	smpsAlterNote       $04
0008E41A E701                       	dc.b	smpsNoAttack, $01
0008E41C E100                       	smpsAlterNote       $00
0008E41E E701                       	dc.b	smpsNoAttack, $01
0008E420 E101                       	smpsAlterNote       $01
0008E422 E701                       	dc.b	smpsNoAttack, $01
0008E424 E107                       	smpsAlterNote       $07
0008E426 E701                       	dc.b	smpsNoAttack, $01
0008E428 E10B                       	smpsAlterNote       $0B
0008E42A E701                       	dc.b	smpsNoAttack, $01
0008E42C E107                       	smpsAlterNote       $07
0008E42E E701                       	dc.b	smpsNoAttack, $01
0008E430 E104                       	smpsAlterNote       $04
0008E432 E701                       	dc.b	smpsNoAttack, $01
0008E434 E100                       	smpsAlterNote       $00
0008E436 E701                       	dc.b	smpsNoAttack, $01
0008E438 E101                       	smpsAlterNote       $01
0008E43A 8001                       	dc.b	nRst, $01
0008E43C E108                       	smpsAlterNote       $08
0008E43E C10C                       	dc.b	nE5, $0C
0008E440 E109                       	smpsAlterNote       $09
0008E442 C201 8001                  	dc.b	nF5, $01, nRst, $01
0008E446 E10A                       	smpsAlterNote       $0A
0008E448 8001                       	dc.b	nRst, $01
0008E44A E109                       	smpsAlterNote       $09
0008E44C C40C C20D                  	dc.b	nG5, $0C, nF5, $0D
0008E450 E106                       	smpsAlterNote       $06
0008E452 E701                       	dc.b	smpsNoAttack, $01
0008E454 E102                       	smpsAlterNote       $02
0008E456 E701                       	dc.b	smpsNoAttack, $01
0008E458 E103                       	smpsAlterNote       $03
0008E45A E701                       	dc.b	smpsNoAttack, $01
0008E45C E109                       	smpsAlterNote       $09
0008E45E E701                       	dc.b	smpsNoAttack, $01
0008E460 E10D                       	smpsAlterNote       $0D
0008E462 E701                       	dc.b	smpsNoAttack, $01
0008E464 E109                       	smpsAlterNote       $09
0008E466 E701                       	dc.b	smpsNoAttack, $01
0008E468 E106                       	smpsAlterNote       $06
0008E46A E701                       	dc.b	smpsNoAttack, $01
0008E46C E102                       	smpsAlterNote       $02
0008E46E E701                       	dc.b	smpsNoAttack, $01
0008E470 E106                       	smpsAlterNote       $06
0008E472 E701                       	dc.b	smpsNoAttack, $01
0008E474 E10C                       	smpsAlterNote       $0C
0008E476 E701                       	dc.b	smpsNoAttack, $01
0008E478 E10D                       	smpsAlterNote       $0D
0008E47A E701                       	dc.b	smpsNoAttack, $01
0008E47C E109                       	smpsAlterNote       $09
0008E47E C40D                       	dc.b	nG5, $0D
0008E480 E106                       	smpsAlterNote       $06
0008E482 E701                       	dc.b	smpsNoAttack, $01
0008E484 E102                       	smpsAlterNote       $02
0008E486 E701                       	dc.b	smpsNoAttack, $01
0008E488 E103                       	smpsAlterNote       $03
0008E48A E701                       	dc.b	smpsNoAttack, $01
0008E48C E109                       	smpsAlterNote       $09
0008E48E E701                       	dc.b	smpsNoAttack, $01
0008E490 E108                       	smpsAlterNote       $08
0008E492 C007 C002 C002 8001 C001+  	dc.b	nEb5, $07, nEb5, $02, nEb5, $02, nRst, $01, nEb5, $01, nRst, $01
0008E49E E109                       	smpsAlterNote       $09
0008E4A0 C20D                       	dc.b	nF5, $0D
0008E4A2 E106                       	smpsAlterNote       $06
0008E4A4 E701                       	dc.b	smpsNoAttack, $01
0008E4A6 E102                       	smpsAlterNote       $02
0008E4A8 E701                       	dc.b	smpsNoAttack, $01
0008E4AA E106                       	smpsAlterNote       $06
0008E4AC E701                       	dc.b	smpsNoAttack, $01
0008E4AE E109                       	smpsAlterNote       $09
0008E4B0 E701                       	dc.b	smpsNoAttack, $01
0008E4B2 E10D                       	smpsAlterNote       $0D
0008E4B4 E701                       	dc.b	smpsNoAttack, $01
0008E4B6 E109                       	smpsAlterNote       $09
0008E4B8 E701                       	dc.b	smpsNoAttack, $01
0008E4BA E103                       	smpsAlterNote       $03
0008E4BC E701                       	dc.b	smpsNoAttack, $01
0008E4BE E102                       	smpsAlterNote       $02
0008E4C0 E701                       	dc.b	smpsNoAttack, $01
0008E4C2 E106                       	smpsAlterNote       $06
0008E4C4 E701                       	dc.b	smpsNoAttack, $01
0008E4C6 E10C                       	smpsAlterNote       $0C
0008E4C8 E701                       	dc.b	smpsNoAttack, $01
0008E4CA E10D                       	smpsAlterNote       $0D
0008E4CC 8001                       	dc.b	nRst, $01
0008E4CE E112                       	smpsAlterNote       $12
0008E4D0 C401                       	dc.b	nG5, $01
0008E4D2 E1EB                       	smpsAlterNote       $EB
0008E4D4 E7C5 01                    	dc.b	smpsNoAttack, nAb5, $01
0008E4D7 E1FD                       	smpsAlterNote       $FD
0008E4D9 E701                       	dc.b	smpsNoAttack, $01
0008E4DB E10F                       	smpsAlterNote       $0F
0008E4DD E701                       	dc.b	smpsNoAttack, $01
0008E4DF E118                       	smpsAlterNote       $18
0008E4E1 E701                       	dc.b	smpsNoAttack, $01
0008E4E3 E1ED                       	smpsAlterNote       $ED
0008E4E5 E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
0008E4E8 E1FF                       	smpsAlterNote       $FF
0008E4EA E701                       	dc.b	smpsNoAttack, $01
0008E4EC E10B                       	smpsAlterNote       $0B
0008E4EE E703                       	dc.b	smpsNoAttack, $03
0008E4F0 E109                       	smpsAlterNote       $09
0008E4F2 C407                       	dc.b	nG5, $07
0008E4F4 E108                       	smpsAlterNote       $08
0008E4F6 C006 8001 C002 C002 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $02, nEb5, $02, nEb5, $02, nRst, $01
0008E502 E109                       	smpsAlterNote       $09
0008E504 C20D                       	dc.b	nF5, $0D
0008E506 E103                       	smpsAlterNote       $03
0008E508 E701                       	dc.b	smpsNoAttack, $01
0008E50A E102                       	smpsAlterNote       $02
0008E50C E701                       	dc.b	smpsNoAttack, $01
0008E50E E106                       	smpsAlterNote       $06
0008E510 E701                       	dc.b	smpsNoAttack, $01
0008E512 E10C                       	smpsAlterNote       $0C
0008E514 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E518 E109                       	smpsAlterNote       $09
0008E51A E701                       	dc.b	smpsNoAttack, $01
0008E51C E103                       	smpsAlterNote       $03
0008E51E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E522 E109                       	smpsAlterNote       $09
0008E524 E701                       	dc.b	smpsNoAttack, $01
0008E526 E10C                       	smpsAlterNote       $0C
0008E528 E701                       	dc.b	smpsNoAttack, $01
0008E52A E10D                       	smpsAlterNote       $0D
0008E52C 8001                       	dc.b	nRst, $01
0008E52E E10B                       	smpsAlterNote       $0B
0008E530 C609 8001                  	dc.b	nA5, $09, nRst, $01
0008E534 E109                       	smpsAlterNote       $09
0008E536 B806 8001                  	dc.b	nG4, $06, nRst, $01
0008E53A E108                       	smpsAlterNote       $08
0008E53C C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
0008E548 8001                       	dc.b	nRst, $01
0008E54A E109                       	smpsAlterNote       $09
0008E54C C20D                       	dc.b	nF5, $0D
0008E54E E103                       	smpsAlterNote       $03
0008E550 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E554 E106                       	smpsAlterNote       $06
0008E556 E701                       	dc.b	smpsNoAttack, $01
0008E558 E10C                       	smpsAlterNote       $0C
0008E55A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E55E E106                       	smpsAlterNote       $06
0008E560 E701                       	dc.b	smpsNoAttack, $01
0008E562 E103                       	smpsAlterNote       $03
0008E564 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E568 E109                       	smpsAlterNote       $09
0008E56A E701                       	dc.b	smpsNoAttack, $01
0008E56C E10D                       	smpsAlterNote       $0D
0008E56E E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008E574 E108                       	smpsAlterNote       $08
0008E576 E6FF                       	smpsAlterVol        $FF
0008E578 A806                       	dc.b	nEb3, $06
0008E57A E10C                       	smpsAlterNote       $0C
0008E57C A303 8001                  	dc.b	nBb2, $03, nRst, $01
0008E580 E108                       	smpsAlterNote       $08
0008E582 A803                       	dc.b	nEb3, $03
0008E584 E109                       	smpsAlterNote       $09
0008E586 AC03 8001                  	dc.b	nG3, $03, nRst, $01
0008E58A E10C                       	smpsAlterNote       $0C
0008E58C AF02 8001 AF03 8007        	dc.b	nBb3, $02, nRst, $01, nBb3, $03, nRst, $07
0008E596 E109                       	smpsAlterNote       $09
0008E598 E602                       	smpsAlterVol        $02
0008E59A B604                       	dc.b	nF4, $04
0008E59C E602                       	smpsAlterVol        $02
0008E59E F6F1 AA                    	smpsJump            music84_Jump02
0008E5A1                            
0008E5A1                            ; FM4 Data
0008E5A1                            music84_FM4:
0008E5A3 E040                       	smpsPan             panRight, $00
0008E5A5 8003                       	dc.b	nRst, $03
0008E5A7 E10F                       	smpsAlterNote       $0F
0008E5A9 C603 8008                  	dc.b	nA5, $03, nRst, $08
0008E5AD E10D                       	smpsAlterNote       $0D
0008E5AF C403 800A                  	dc.b	nG5, $03, nRst, $0A
0008E5B3 E10C                       	smpsAlterNote       $0C
0008E5B5 C103 8004                  	dc.b	nE5, $03, nRst, $04
0008E5BB E6FE                       	smpsAlterVol        $FE
0008E5BD E110                       	smpsAlterNote       $10
0008E5BF C703 8001                  	dc.b	nBb5, $03, nRst, $01
0008E5C3 E10F                       	smpsAlterNote       $0F
0008E5C5 C602 8001                  	dc.b	nA5, $02, nRst, $01
0008E5C9 E10D                       	smpsAlterNote       $0D
0008E5CB C403 C401 E7C2 0280 01     	dc.b	nG5, $03, nG5, $01, smpsNoAttack, nF5, $02, nRst, $01
0008E5D4 E10C                       	smpsAlterNote       $0C
0008E5D6 C103                       	dc.b	nE5, $03
0008E5D8 E10A                       	smpsAlterNote       $0A
0008E5DA BD03 8001                  	dc.b	nC5, $03, nRst, $01
0008E5E0 03                         	dc.b	$03
0008E5E1                            
0008E5E1                            music84_Jump01:
0008E5E1 E10B                       	smpsAlterNote       $0B
0008E5E3 BF03 8001                  	dc.b	nD5, $03, nRst, $01
0008E5E7 E10C                       	smpsAlterNote       $0C
0008E5E9 C102 8001                  	dc.b	nE5, $02, nRst, $01
0008E5ED E10D                       	smpsAlterNote       $0D
0008E5EF C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
0008E5F9 E10B                       	smpsAlterNote       $0B
0008E5FB BF03 C90D                  	dc.b	nD5, $03, nC6, $0D
0008E5FF E107                       	smpsAlterNote       $07
0008E601 E701                       	dc.b	smpsNoAttack, $01
0008E603 E103                       	smpsAlterNote       $03
0008E605 E701                       	dc.b	smpsNoAttack, $01
0008E607 E104                       	smpsAlterNote       $04
0008E609 E701                       	dc.b	smpsNoAttack, $01
0008E60B E10A                       	smpsAlterNote       $0A
0008E60D E701                       	dc.b	smpsNoAttack, $01
0008E60F E10E                       	smpsAlterNote       $0E
0008E611 E701                       	dc.b	smpsNoAttack, $01
0008E613 E10A                       	smpsAlterNote       $0A
0008E615 E701                       	dc.b	smpsNoAttack, $01
0008E617 E107                       	smpsAlterNote       $07
0008E619 E701                       	dc.b	smpsNoAttack, $01
0008E61B E104                       	smpsAlterNote       $04
0008E61D 8001                       	dc.b	nRst, $01
0008E61F E110                       	smpsAlterNote       $10
0008E621 C703                       	dc.b	nBb5, $03
0008E623 E10F                       	smpsAlterNote       $0F
0008E625 C603 8001                  	dc.b	nA5, $03, nRst, $01
0008E629 E10D                       	smpsAlterNote       $0D
0008E62B C402 8001 C60D             	dc.b	nG5, $02, nRst, $01, nA5, $0D
0008E631 E10C                       	smpsAlterNote       $0C
0008E633 E701                       	dc.b	smpsNoAttack, $01
0008E635 E108                       	smpsAlterNote       $08
0008E637 E701                       	dc.b	smpsNoAttack, $01
0008E639 E10C                       	smpsAlterNote       $0C
0008E63B E701                       	dc.b	smpsNoAttack, $01
0008E63D E10F                       	smpsAlterNote       $0F
0008E63F E701                       	dc.b	smpsNoAttack, $01
0008E641 E113                       	smpsAlterNote       $13
0008E643 E701                       	dc.b	smpsNoAttack, $01
0008E645 E10F                       	smpsAlterNote       $0F
0008E647 E701                       	dc.b	smpsNoAttack, $01
0008E649 E109                       	smpsAlterNote       $09
0008E64B E701                       	dc.b	smpsNoAttack, $01
0008E64D E108                       	smpsAlterNote       $08
0008E64F E701                       	dc.b	smpsNoAttack, $01
0008E651 E10C                       	smpsAlterNote       $0C
0008E653 E701                       	dc.b	smpsNoAttack, $01
0008E655 E112                       	smpsAlterNote       $12
0008E657 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E65B E10C                       	smpsAlterNote       $0C
0008E65D E701                       	dc.b	smpsNoAttack, $01
0008E65F E109                       	smpsAlterNote       $09
0008E661 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E665 E10F                       	smpsAlterNote       $0F
0008E667 E701                       	dc.b	smpsNoAttack, $01
0008E669 E113                       	smpsAlterNote       $13
0008E66B E701                       	dc.b	smpsNoAttack, $01
0008E66D E112                       	smpsAlterNote       $12
0008E66F E701                       	dc.b	smpsNoAttack, $01
0008E671 E10C                       	smpsAlterNote       $0C
0008E673 E701                       	dc.b	smpsNoAttack, $01
0008E675 E108                       	smpsAlterNote       $08
0008E677 E701                       	dc.b	smpsNoAttack, $01
0008E679 E10C                       	smpsAlterNote       $0C
0008E67B E701                       	dc.b	smpsNoAttack, $01
0008E67D E10F                       	smpsAlterNote       $0F
0008E67F E701                       	dc.b	smpsNoAttack, $01
0008E681 E113                       	smpsAlterNote       $13
0008E683 E701                       	dc.b	smpsNoAttack, $01
0008E685 E10F                       	smpsAlterNote       $0F
0008E687 E701                       	dc.b	smpsNoAttack, $01
0008E689 E109                       	smpsAlterNote       $09
0008E68B E701                       	dc.b	smpsNoAttack, $01
0008E68D E108                       	smpsAlterNote       $08
0008E68F E701                       	dc.b	smpsNoAttack, $01
0008E691 E10C                       	smpsAlterNote       $0C
0008E693 E701                       	dc.b	smpsNoAttack, $01
0008E695 E112                       	smpsAlterNote       $12
0008E697 E701                       	dc.b	smpsNoAttack, $01
0008E699 E113                       	smpsAlterNote       $13
0008E69B 800F                       	dc.b	nRst, $0F
0008E69D E10B                       	smpsAlterNote       $0B
0008E69F BF03                       	dc.b	nD5, $03
0008E6A1 E10C                       	smpsAlterNote       $0C
0008E6A3 C103 8001                  	dc.b	nE5, $03, nRst, $01
0008E6A7 E10D                       	smpsAlterNote       $0D
0008E6A9 C202 8001 C403 C607        	dc.b	nF5, $02, nRst, $01, nG5, $03, nA5, $07
0008E6B1 E10B                       	smpsAlterNote       $0B
0008E6B3 BF03 8001 C90D CB03 8001   	dc.b	nD5, $03, nRst, $01, nC6, $0D, nD6, $03, nRst, $01
0008E6BD E110                       	smpsAlterNote       $10
0008E6BF C704                       	dc.b	nBb5, $04
0008E6C1 E10F                       	smpsAlterNote       $0F
0008E6C3 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008E6C7 E10D                       	smpsAlterNote       $0D
0008E6C9 C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
0008E6CF E109                       	smpsAlterNote       $09
0008E6D1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E6D5 E10F                       	smpsAlterNote       $0F
0008E6D7 E701                       	dc.b	smpsNoAttack, $01
0008E6D9 E112                       	smpsAlterNote       $12
0008E6DB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E6DF E10C                       	smpsAlterNote       $0C
0008E6E1 E701                       	dc.b	smpsNoAttack, $01
0008E6E3 E108                       	smpsAlterNote       $08
0008E6E5 E701                       	dc.b	smpsNoAttack, $01
0008E6E7 E109                       	smpsAlterNote       $09
0008E6E9 E701                       	dc.b	smpsNoAttack, $01
0008E6EB E10F                       	smpsAlterNote       $0F
0008E6ED E701                       	dc.b	smpsNoAttack, $01
0008E6EF E113                       	smpsAlterNote       $13
0008E6F1 E701                       	dc.b	smpsNoAttack, $01
0008E6F3 E10F                       	smpsAlterNote       $0F
0008E6F5 E701                       	dc.b	smpsNoAttack, $01
0008E6F7 E10C                       	smpsAlterNote       $0C
0008E6F9 E701                       	dc.b	smpsNoAttack, $01
0008E6FB E108                       	smpsAlterNote       $08
0008E6FD E701                       	dc.b	smpsNoAttack, $01
0008E6FF E10C                       	smpsAlterNote       $0C
0008E701 E701                       	dc.b	smpsNoAttack, $01
0008E703 E112                       	smpsAlterNote       $12
0008E705 E701                       	dc.b	smpsNoAttack, $01
0008E707 E113                       	smpsAlterNote       $13
0008E709 E701                       	dc.b	smpsNoAttack, $01
0008E70B E10F                       	smpsAlterNote       $0F
0008E70D E701                       	dc.b	smpsNoAttack, $01
0008E70F E109                       	smpsAlterNote       $09
0008E711 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E715 E10C                       	smpsAlterNote       $0C
0008E717 E701                       	dc.b	smpsNoAttack, $01
0008E719 E112                       	smpsAlterNote       $12
0008E71B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E71F E10C                       	smpsAlterNote       $0C
0008E721 E701                       	dc.b	smpsNoAttack, $01
0008E723 E109                       	smpsAlterNote       $09
0008E725 E701                       	dc.b	smpsNoAttack, $01
0008E727 E10D                       	smpsAlterNote       $0D
0008E729 C401 8001                  	dc.b	nG5, $01, nRst, $01
0008E72D E10F                       	smpsAlterNote       $0F
0008E72F C501 8001 C60D C604 8001   	dc.b	nAb5, $01, nRst, $01, nA5, $0D, nA5, $04, nRst, $01
0008E739 E10D                       	smpsAlterNote       $0D
0008E73B C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
0008E741 E10B                       	smpsAlterNote       $0B
0008E743 BF0D                       	dc.b	nD5, $0D
0008E745 E108                       	smpsAlterNote       $08
0008E747 E701                       	dc.b	smpsNoAttack, $01
0008E749 E104                       	smpsAlterNote       $04
0008E74B E701                       	dc.b	smpsNoAttack, $01
0008E74D E108                       	smpsAlterNote       $08
0008E74F E701                       	dc.b	smpsNoAttack, $01
0008E751 E10B                       	smpsAlterNote       $0B
0008E753 E701                       	dc.b	smpsNoAttack, $01
0008E755 E10F                       	smpsAlterNote       $0F
0008E757 E701                       	dc.b	smpsNoAttack, $01
0008E759 E10B                       	smpsAlterNote       $0B
0008E75B E701                       	dc.b	smpsNoAttack, $01
0008E75D E105                       	smpsAlterNote       $05
0008E75F E701                       	dc.b	smpsNoAttack, $01
0008E761 E104                       	smpsAlterNote       $04
0008E763 E701                       	dc.b	smpsNoAttack, $01
0008E765 E108                       	smpsAlterNote       $08
0008E767 E701                       	dc.b	smpsNoAttack, $01
0008E769 E10E                       	smpsAlterNote       $0E
0008E76B E701                       	dc.b	smpsNoAttack, $01
0008E76D E10F                       	smpsAlterNote       $0F
0008E76F 8001                       	dc.b	nRst, $01
0008E771 E10C                       	smpsAlterNote       $0C
0008E773 C101                       	dc.b	nE5, $01
0008E775 E10D                       	smpsAlterNote       $0D
0008E777 C201 C401 C607             	dc.b	nF5, $01, nG5, $01, nA5, $07
0008E77D E10F                       	smpsAlterNote       $0F
0008E77F C606 8001                  	dc.b	nA5, $06, nRst, $01
0008E783 E10C                       	smpsAlterNote       $0C
0008E785 CD06 8001                  	dc.b	nE6, $06, nRst, $01
0008E789 E10D                       	smpsAlterNote       $0D
0008E78B CE06 8001                  	dc.b	nF6, $06, nRst, $01
0008E78F E10C                       	smpsAlterNote       $0C
0008E791 CD03                       	dc.b	nE6, $03
0008E793 E10A                       	smpsAlterNote       $0A
0008E795 C903 8001                  	dc.b	nC6, $03, nRst, $01
0008E799 E10D                       	smpsAlterNote       $0D
0008E79B C402 8001 C70D E701        	dc.b	nG5, $02, nRst, $01, nBb5, $0D, smpsNoAttack, $01
0008E7A3 E109                       	smpsAlterNote       $09
0008E7A5 E701                       	dc.b	smpsNoAttack, $01
0008E7A7 E10D                       	smpsAlterNote       $0D
0008E7A9 E701                       	dc.b	smpsNoAttack, $01
0008E7AB E110                       	smpsAlterNote       $10
0008E7AD E701                       	dc.b	smpsNoAttack, $01
0008E7AF E114                       	smpsAlterNote       $14
0008E7B1 E701                       	dc.b	smpsNoAttack, $01
0008E7B3 E110                       	smpsAlterNote       $10
0008E7B5 E701                       	dc.b	smpsNoAttack, $01
0008E7B7 E10A                       	smpsAlterNote       $0A
0008E7B9 E701                       	dc.b	smpsNoAttack, $01
0008E7BB E109                       	smpsAlterNote       $09
0008E7BD E701                       	dc.b	smpsNoAttack, $01
0008E7BF E10D                       	smpsAlterNote       $0D
0008E7C1 E701                       	dc.b	smpsNoAttack, $01
0008E7C3 E113                       	smpsAlterNote       $13
0008E7C5 E701                       	dc.b	smpsNoAttack, $01
0008E7C7 E114                       	smpsAlterNote       $14
0008E7C9 8001                       	dc.b	nRst, $01
0008E7CB E10F                       	smpsAlterNote       $0F
0008E7CD C606 8001 C50D             	dc.b	nA5, $06, nRst, $01, nAb5, $0D
0008E7D3 E10C                       	smpsAlterNote       $0C
0008E7D5 E701                       	dc.b	smpsNoAttack, $01
0008E7D7 E108                       	smpsAlterNote       $08
0008E7D9 E701                       	dc.b	smpsNoAttack, $01
0008E7DB E10C                       	smpsAlterNote       $0C
0008E7DD E701                       	dc.b	smpsNoAttack, $01
0008E7DF E112                       	smpsAlterNote       $12
0008E7E1 E701                       	dc.b	smpsNoAttack, $01
0008E7E3 E113                       	smpsAlterNote       $13
0008E7E5 E701                       	dc.b	smpsNoAttack, $01
0008E7E7 E10F                       	smpsAlterNote       $0F
0008E7E9 E701                       	dc.b	smpsNoAttack, $01
0008E7EB E109                       	smpsAlterNote       $09
0008E7ED E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E7F1 E10C                       	smpsAlterNote       $0C
0008E7F3 E701                       	dc.b	smpsNoAttack, $01
0008E7F5 E112                       	smpsAlterNote       $12
0008E7F7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E7FB E10C                       	smpsAlterNote       $0C
0008E7FD E701                       	dc.b	smpsNoAttack, $01
0008E7FF E109                       	smpsAlterNote       $09
0008E801 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E805 E10F                       	smpsAlterNote       $0F
0008E807 E701                       	dc.b	smpsNoAttack, $01
0008E809 E113                       	smpsAlterNote       $13
0008E80B E701                       	dc.b	smpsNoAttack, $01
0008E80D E112                       	smpsAlterNote       $12
0008E80F E701                       	dc.b	smpsNoAttack, $01
0008E811 E10C                       	smpsAlterNote       $0C
0008E813 E701                       	dc.b	smpsNoAttack, $01
0008E815 E108                       	smpsAlterNote       $08
0008E817 E701                       	dc.b	smpsNoAttack, $01
0008E819 E10C                       	smpsAlterNote       $0C
0008E81B E701                       	dc.b	smpsNoAttack, $01
0008E81D E10F                       	smpsAlterNote       $0F
0008E81F E701                       	dc.b	smpsNoAttack, $01
0008E821 E113                       	smpsAlterNote       $13
0008E823 E701                       	dc.b	smpsNoAttack, $01
0008E825 E10F                       	smpsAlterNote       $0F
0008E827 E701                       	dc.b	smpsNoAttack, $01
0008E829 E109                       	smpsAlterNote       $09
0008E82B E701                       	dc.b	smpsNoAttack, $01
0008E82D E108                       	smpsAlterNote       $08
0008E82F E701                       	dc.b	smpsNoAttack, $01
0008E831 E10C                       	smpsAlterNote       $0C
0008E833 E701                       	dc.b	smpsNoAttack, $01
0008E835 E112                       	smpsAlterNote       $12
0008E837 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E83B E10F                       	smpsAlterNote       $0F
0008E83D E701                       	dc.b	smpsNoAttack, $01
0008E83F E109                       	smpsAlterNote       $09
0008E841 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E845 E10F                       	smpsAlterNote       $0F
0008E847 E701                       	dc.b	smpsNoAttack, $01
0008E849 E113                       	smpsAlterNote       $13
0008E84B E701                       	dc.b	smpsNoAttack, $01
0008E84D E112                       	smpsAlterNote       $12
0008E84F E701                       	dc.b	smpsNoAttack, $01
0008E851 E10C                       	smpsAlterNote       $0C
0008E853 E701                       	dc.b	smpsNoAttack, $01
0008E855 E108                       	smpsAlterNote       $08
0008E857 E701                       	dc.b	smpsNoAttack, $01
0008E859 E10C                       	smpsAlterNote       $0C
0008E85B E701                       	dc.b	smpsNoAttack, $01
0008E85D E10F                       	smpsAlterNote       $0F
0008E85F E701                       	dc.b	smpsNoAttack, $01
0008E861 E113                       	smpsAlterNote       $13
0008E863 E701                       	dc.b	smpsNoAttack, $01
0008E865 E10F                       	smpsAlterNote       $0F
0008E867 E701                       	dc.b	smpsNoAttack, $01
0008E869 E109                       	smpsAlterNote       $09
0008E86B E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008E86F E10F                       	smpsAlterNote       $0F
0008E871 C60D                       	dc.b	nA5, $0D
0008E873 E109                       	smpsAlterNote       $09
0008E875 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E879 E10C                       	smpsAlterNote       $0C
0008E87B E701                       	dc.b	smpsNoAttack, $01
0008E87D E112                       	smpsAlterNote       $12
0008E87F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E883 E10C                       	smpsAlterNote       $0C
0008E885 E701                       	dc.b	smpsNoAttack, $01
0008E887 E109                       	smpsAlterNote       $09
0008E889 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E88D E10F                       	smpsAlterNote       $0F
0008E88F E701                       	dc.b	smpsNoAttack, $01
0008E891 E113                       	smpsAlterNote       $13
0008E893 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008E899 E10D                       	smpsAlterNote       $0D
0008E89B C206 C203 8001 C203        	dc.b	nF5, $06, nF5, $03, nRst, $01, nF5, $03
0008E8A3 E10C                       	smpsAlterNote       $0C
0008E8A5 C103 800E                  	dc.b	nE5, $03, nRst, $0E
0008E8AB E6FF                       	smpsAlterVol        $FF
0008E8AD E10B                       	smpsAlterNote       $0B
0008E8AF BF03 8001                  	dc.b	nD5, $03, nRst, $01
0008E8B3 E10C                       	smpsAlterNote       $0C
0008E8B5 C103                       	dc.b	nE5, $03
0008E8B7 E10D                       	smpsAlterNote       $0D
0008E8B9 C203 8001 C403 C606 8001   	dc.b	nF5, $03, nRst, $01, nG5, $03, nA5, $06, nRst, $01
0008E8C3 E10B                       	smpsAlterNote       $0B
0008E8C5 BF03 C90D                  	dc.b	nD5, $03, nC6, $0D
0008E8C9 E107                       	smpsAlterNote       $07
0008E8CB E701                       	dc.b	smpsNoAttack, $01
0008E8CD E104                       	smpsAlterNote       $04
0008E8CF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E8D3 E10A                       	smpsAlterNote       $0A
0008E8D5 E701                       	dc.b	smpsNoAttack, $01
0008E8D7 E10D                       	smpsAlterNote       $0D
0008E8D9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E8DD E107                       	smpsAlterNote       $07
0008E8DF E701                       	dc.b	smpsNoAttack, $01
0008E8E1 E104                       	smpsAlterNote       $04
0008E8E3 8001                       	dc.b	nRst, $01
0008E8E5 E110                       	smpsAlterNote       $10
0008E8E7 C703                       	dc.b	nBb5, $03
0008E8E9 E10F                       	smpsAlterNote       $0F
0008E8EB C603 8001                  	dc.b	nA5, $03, nRst, $01
0008E8EF E10D                       	smpsAlterNote       $0D
0008E8F1 C403 C60D                  	dc.b	nG5, $03, nA5, $0D
0008E8F5 E10C                       	smpsAlterNote       $0C
0008E8F7 E701                       	dc.b	smpsNoAttack, $01
0008E8F9 E108                       	smpsAlterNote       $08
0008E8FB E701                       	dc.b	smpsNoAttack, $01
0008E8FD E109                       	smpsAlterNote       $09
0008E8FF E701                       	dc.b	smpsNoAttack, $01
0008E901 E10F                       	smpsAlterNote       $0F
0008E903 E701                       	dc.b	smpsNoAttack, $01
0008E905 E113                       	smpsAlterNote       $13
0008E907 E701                       	dc.b	smpsNoAttack, $01
0008E909 E10F                       	smpsAlterNote       $0F
0008E90B E701                       	dc.b	smpsNoAttack, $01
0008E90D E10C                       	smpsAlterNote       $0C
0008E90F E701                       	dc.b	smpsNoAttack, $01
0008E911 E108                       	smpsAlterNote       $08
0008E913 E701                       	dc.b	smpsNoAttack, $01
0008E915 E10C                       	smpsAlterNote       $0C
0008E917 E701                       	dc.b	smpsNoAttack, $01
0008E919 E112                       	smpsAlterNote       $12
0008E91B E701                       	dc.b	smpsNoAttack, $01
0008E91D E113                       	smpsAlterNote       $13
0008E91F E701                       	dc.b	smpsNoAttack, $01
0008E921 E10F                       	smpsAlterNote       $0F
0008E923 E701                       	dc.b	smpsNoAttack, $01
0008E925 E109                       	smpsAlterNote       $09
0008E927 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E92B E10C                       	smpsAlterNote       $0C
0008E92D E701                       	dc.b	smpsNoAttack, $01
0008E92F E112                       	smpsAlterNote       $12
0008E931 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E935 E10C                       	smpsAlterNote       $0C
0008E937 E701                       	dc.b	smpsNoAttack, $01
0008E939 E109                       	smpsAlterNote       $09
0008E93B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E93F E10F                       	smpsAlterNote       $0F
0008E941 E701                       	dc.b	smpsNoAttack, $01
0008E943 E113                       	smpsAlterNote       $13
0008E945 E701                       	dc.b	smpsNoAttack, $01
0008E947 E112                       	smpsAlterNote       $12
0008E949 E701                       	dc.b	smpsNoAttack, $01
0008E94B E10C                       	smpsAlterNote       $0C
0008E94D E701                       	dc.b	smpsNoAttack, $01
0008E94F E108                       	smpsAlterNote       $08
0008E951 E701                       	dc.b	smpsNoAttack, $01
0008E953 E10C                       	smpsAlterNote       $0C
0008E955 E701                       	dc.b	smpsNoAttack, $01
0008E957 E10F                       	smpsAlterNote       $0F
0008E959 E701                       	dc.b	smpsNoAttack, $01
0008E95B E113                       	smpsAlterNote       $13
0008E95D E701                       	dc.b	smpsNoAttack, $01
0008E95F E10F                       	smpsAlterNote       $0F
0008E961 BA03 8001                  	dc.b	nA4, $03, nRst, $01
0008E965 E110                       	smpsAlterNote       $10
0008E967 BB03                       	dc.b	nBb4, $03
0008E969 E10F                       	smpsAlterNote       $0F
0008E96B BA06 8001                  	dc.b	nA4, $06, nRst, $01
0008E96F E10B                       	smpsAlterNote       $0B
0008E971 BF03                       	dc.b	nD5, $03
0008E973 E10C                       	smpsAlterNote       $0C
0008E975 C103 8001                  	dc.b	nE5, $03, nRst, $01
0008E979 E10D                       	smpsAlterNote       $0D
0008E97B C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
0008E985 E10B                       	smpsAlterNote       $0B
0008E987 BF02 8001 C90D 8001 CB02+  	dc.b	nD5, $02, nRst, $01, nC6, $0D, nRst, $01, nD6, $02, nRst, $01
0008E993 E110                       	smpsAlterNote       $10
0008E995 C704 8001                  	dc.b	nBb5, $04, nRst, $01
0008E999 E10F                       	smpsAlterNote       $0F
0008E99B C604                       	dc.b	nA5, $04
0008E99D E10D                       	smpsAlterNote       $0D
0008E99F C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
0008E9A5 E109                       	smpsAlterNote       $09
0008E9A7 E701                       	dc.b	smpsNoAttack, $01
0008E9A9 E108                       	smpsAlterNote       $08
0008E9AB E701                       	dc.b	smpsNoAttack, $01
0008E9AD E10C                       	smpsAlterNote       $0C
0008E9AF E701                       	dc.b	smpsNoAttack, $01
0008E9B1 E112                       	smpsAlterNote       $12
0008E9B3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E9B7 E10F                       	smpsAlterNote       $0F
0008E9B9 E701                       	dc.b	smpsNoAttack, $01
0008E9BB E109                       	smpsAlterNote       $09
0008E9BD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E9C1 E10F                       	smpsAlterNote       $0F
0008E9C3 E701                       	dc.b	smpsNoAttack, $01
0008E9C5 E112                       	smpsAlterNote       $12
0008E9C7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E9CB E10C                       	smpsAlterNote       $0C
0008E9CD E701                       	dc.b	smpsNoAttack, $01
0008E9CF E108                       	smpsAlterNote       $08
0008E9D1 E701                       	dc.b	smpsNoAttack, $01
0008E9D3 E109                       	smpsAlterNote       $09
0008E9D5 E701                       	dc.b	smpsNoAttack, $01
0008E9D7 E10F                       	smpsAlterNote       $0F
0008E9D9 E701                       	dc.b	smpsNoAttack, $01
0008E9DB E113                       	smpsAlterNote       $13
0008E9DD E701                       	dc.b	smpsNoAttack, $01
0008E9DF E10F                       	smpsAlterNote       $0F
0008E9E1 E701                       	dc.b	smpsNoAttack, $01
0008E9E3 E10C                       	smpsAlterNote       $0C
0008E9E5 E701                       	dc.b	smpsNoAttack, $01
0008E9E7 E108                       	smpsAlterNote       $08
0008E9E9 E701                       	dc.b	smpsNoAttack, $01
0008E9EB E10C                       	smpsAlterNote       $0C
0008E9ED E701                       	dc.b	smpsNoAttack, $01
0008E9EF E112                       	smpsAlterNote       $12
0008E9F1 E701                       	dc.b	smpsNoAttack, $01
0008E9F3 E113                       	smpsAlterNote       $13
0008E9F5 E701                       	dc.b	smpsNoAttack, $01
0008E9F7 E10F                       	smpsAlterNote       $0F
0008E9F9 E701                       	dc.b	smpsNoAttack, $01
0008E9FB E109                       	smpsAlterNote       $09
0008E9FD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EA01 E10C                       	smpsAlterNote       $0C
0008EA03 E701                       	dc.b	smpsNoAttack, $01
0008EA05 E112                       	smpsAlterNote       $12
0008EA07 E701                       	dc.b	smpsNoAttack, $01
0008EA09 E113                       	smpsAlterNote       $13
0008EA0B 8001                       	dc.b	nRst, $01
0008EA0D E10F                       	smpsAlterNote       $0F
0008EA0F C602 C602 C602 8001 C601+  	dc.b	nA5, $02, nA5, $02, nA5, $02, nRst, $01, nA5, $01, nRst, $01
0008EA1B C602 C602 8001 C604        	dc.b	nA5, $02, nA5, $02, nRst, $01, nA5, $04
0008EA23 E10D                       	smpsAlterNote       $0D
0008EA25 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
0008EA2B E10B                       	smpsAlterNote       $0B
0008EA2D BF0D                       	dc.b	nD5, $0D
0008EA2F E108                       	smpsAlterNote       $08
0008EA31 E701                       	dc.b	smpsNoAttack, $01
0008EA33 E104                       	smpsAlterNote       $04
0008EA35 E701                       	dc.b	smpsNoAttack, $01
0008EA37 E105                       	smpsAlterNote       $05
0008EA39 E701                       	dc.b	smpsNoAttack, $01
0008EA3B E10B                       	smpsAlterNote       $0B
0008EA3D E701                       	dc.b	smpsNoAttack, $01
0008EA3F E10F                       	smpsAlterNote       $0F
0008EA41 E701                       	dc.b	smpsNoAttack, $01
0008EA43 E10B                       	smpsAlterNote       $0B
0008EA45 E701                       	dc.b	smpsNoAttack, $01
0008EA47 E108                       	smpsAlterNote       $08
0008EA49 E701                       	dc.b	smpsNoAttack, $01
0008EA4B E104                       	smpsAlterNote       $04
0008EA4D E701                       	dc.b	smpsNoAttack, $01
0008EA4F E108                       	smpsAlterNote       $08
0008EA51 E701                       	dc.b	smpsNoAttack, $01
0008EA53 E10E                       	smpsAlterNote       $0E
0008EA55 E701                       	dc.b	smpsNoAttack, $01
0008EA57 E10F                       	smpsAlterNote       $0F
0008EA59 E701                       	dc.b	smpsNoAttack, $01
0008EA5B E10C                       	smpsAlterNote       $0C
0008EA5D C101                       	dc.b	nE5, $01
0008EA5F E10D                       	smpsAlterNote       $0D
0008EA61 C201 C401 8001 C606        	dc.b	nF5, $01, nG5, $01, nRst, $01, nA5, $06
0008EA69 E10F                       	smpsAlterNote       $0F
0008EA6B C607                       	dc.b	nA5, $07
0008EA6D E10C                       	smpsAlterNote       $0C
0008EA6F CD07                       	dc.b	nE6, $07
0008EA71 E10D                       	smpsAlterNote       $0D
0008EA73 CE06 8001                  	dc.b	nF6, $06, nRst, $01
0008EA77 E10C                       	smpsAlterNote       $0C
0008EA79 CD03                       	dc.b	nE6, $03
0008EA7B E10A                       	smpsAlterNote       $0A
0008EA7D C903 8001                  	dc.b	nC6, $03, nRst, $01
0008EA81 E10D                       	smpsAlterNote       $0D
0008EA83 C403 C70D E701             	dc.b	nG5, $03, nBb5, $0D, smpsNoAttack, $01
0008EA89 E10A                       	smpsAlterNote       $0A
0008EA8B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EA8F E110                       	smpsAlterNote       $10
0008EA91 E701                       	dc.b	smpsNoAttack, $01
0008EA93 E114                       	smpsAlterNote       $14
0008EA95 E701                       	dc.b	smpsNoAttack, $01
0008EA97 E113                       	smpsAlterNote       $13
0008EA99 E701                       	dc.b	smpsNoAttack, $01
0008EA9B E10D                       	smpsAlterNote       $0D
0008EA9D E701                       	dc.b	smpsNoAttack, $01
0008EA9F E109                       	smpsAlterNote       $09
0008EAA1 E701                       	dc.b	smpsNoAttack, $01
0008EAA3 E10D                       	smpsAlterNote       $0D
0008EAA5 E701                       	dc.b	smpsNoAttack, $01
0008EAA7 E110                       	smpsAlterNote       $10
0008EAA9 E701                       	dc.b	smpsNoAttack, $01
0008EAAB E114                       	smpsAlterNote       $14
0008EAAD E701                       	dc.b	smpsNoAttack, $01
0008EAAF E10F                       	smpsAlterNote       $0F
0008EAB1 C607 C50D                  	dc.b	nA5, $07, nAb5, $0D
0008EAB5 E10C                       	smpsAlterNote       $0C
0008EAB7 E701                       	dc.b	smpsNoAttack, $01
0008EAB9 E108                       	smpsAlterNote       $08
0008EABB E701                       	dc.b	smpsNoAttack, $01
0008EABD E10C                       	smpsAlterNote       $0C
0008EABF E701                       	dc.b	smpsNoAttack, $01
0008EAC1 E10F                       	smpsAlterNote       $0F
0008EAC3 E701                       	dc.b	smpsNoAttack, $01
0008EAC5 E113                       	smpsAlterNote       $13
0008EAC7 E701                       	dc.b	smpsNoAttack, $01
0008EAC9 E10F                       	smpsAlterNote       $0F
0008EACB E701                       	dc.b	smpsNoAttack, $01
0008EACD E109                       	smpsAlterNote       $09
0008EACF E701                       	dc.b	smpsNoAttack, $01
0008EAD1 E108                       	smpsAlterNote       $08
0008EAD3 E701                       	dc.b	smpsNoAttack, $01
0008EAD5 E10C                       	smpsAlterNote       $0C
0008EAD7 E701                       	dc.b	smpsNoAttack, $01
0008EAD9 E112                       	smpsAlterNote       $12
0008EADB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EADF E10F                       	smpsAlterNote       $0F
0008EAE1 E701                       	dc.b	smpsNoAttack, $01
0008EAE3 E109                       	smpsAlterNote       $09
0008EAE5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EAE9 E10F                       	smpsAlterNote       $0F
0008EAEB E701                       	dc.b	smpsNoAttack, $01
0008EAED E112                       	smpsAlterNote       $12
0008EAEF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EAF3 E10C                       	smpsAlterNote       $0C
0008EAF5 E701                       	dc.b	smpsNoAttack, $01
0008EAF7 E108                       	smpsAlterNote       $08
0008EAF9 E701                       	dc.b	smpsNoAttack, $01
0008EAFB E109                       	smpsAlterNote       $09
0008EAFD E701                       	dc.b	smpsNoAttack, $01
0008EAFF E10F                       	smpsAlterNote       $0F
0008EB01 E701                       	dc.b	smpsNoAttack, $01
0008EB03 E113                       	smpsAlterNote       $13
0008EB05 E701                       	dc.b	smpsNoAttack, $01
0008EB07 E10F                       	smpsAlterNote       $0F
0008EB09 E701                       	dc.b	smpsNoAttack, $01
0008EB0B E10C                       	smpsAlterNote       $0C
0008EB0D E701                       	dc.b	smpsNoAttack, $01
0008EB0F E108                       	smpsAlterNote       $08
0008EB11 E701                       	dc.b	smpsNoAttack, $01
0008EB13 E10C                       	smpsAlterNote       $0C
0008EB15 E701                       	dc.b	smpsNoAttack, $01
0008EB17 E112                       	smpsAlterNote       $12
0008EB19 E701                       	dc.b	smpsNoAttack, $01
0008EB1B E113                       	smpsAlterNote       $13
0008EB1D E701                       	dc.b	smpsNoAttack, $01
0008EB1F E10F                       	smpsAlterNote       $0F
0008EB21 E701                       	dc.b	smpsNoAttack, $01
0008EB23 E109                       	smpsAlterNote       $09
0008EB25 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EB29 E10C                       	smpsAlterNote       $0C
0008EB2B E701                       	dc.b	smpsNoAttack, $01
0008EB2D E112                       	smpsAlterNote       $12
0008EB2F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EB33 E10C                       	smpsAlterNote       $0C
0008EB35 E701                       	dc.b	smpsNoAttack, $01
0008EB37 E109                       	smpsAlterNote       $09
0008EB39 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EB3D E10F                       	smpsAlterNote       $0F
0008EB3F E701                       	dc.b	smpsNoAttack, $01
0008EB41 E113                       	smpsAlterNote       $13
0008EB43 E701                       	dc.b	smpsNoAttack, $01
0008EB45 E112                       	smpsAlterNote       $12
0008EB47 E701                       	dc.b	smpsNoAttack, $01
0008EB49 E10C                       	smpsAlterNote       $0C
0008EB4B E701                       	dc.b	smpsNoAttack, $01
0008EB4D E109                       	smpsAlterNote       $09
0008EB4F 8001                       	dc.b	nRst, $01
0008EB51 E10F                       	smpsAlterNote       $0F
0008EB53 C60D                       	dc.b	nA5, $0D
0008EB55 E10C                       	smpsAlterNote       $0C
0008EB57 E701                       	dc.b	smpsNoAttack, $01
0008EB59 E108                       	smpsAlterNote       $08
0008EB5B E701                       	dc.b	smpsNoAttack, $01
0008EB5D E10C                       	smpsAlterNote       $0C
0008EB5F E701                       	dc.b	smpsNoAttack, $01
0008EB61 E112                       	smpsAlterNote       $12
0008EB63 E701                       	dc.b	smpsNoAttack, $01
0008EB65 E113                       	smpsAlterNote       $13
0008EB67 E701                       	dc.b	smpsNoAttack, $01
0008EB69 E10F                       	smpsAlterNote       $0F
0008EB6B E701                       	dc.b	smpsNoAttack, $01
0008EB6D E109                       	smpsAlterNote       $09
0008EB6F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EB73 E10C                       	smpsAlterNote       $0C
0008EB75 E701                       	dc.b	smpsNoAttack, $01
0008EB77 E112                       	smpsAlterNote       $12
0008EB79 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EB7D E10C                       	smpsAlterNote       $0C
0008EB7F E701                       	dc.b	smpsNoAttack, $01
0008EB81 E109                       	smpsAlterNote       $09
0008EB83 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EB87 E10F                       	smpsAlterNote       $0F
0008EB89 E701                       	dc.b	smpsNoAttack, $01
0008EB8B E113                       	smpsAlterNote       $13
0008EB8D E701                       	dc.b	smpsNoAttack, $01
0008EB8F E112                       	smpsAlterNote       $12
0008EB91 E701                       	dc.b	smpsNoAttack, $01
0008EB93 E10C                       	smpsAlterNote       $0C
0008EB95 E701                       	dc.b	smpsNoAttack, $01
0008EB97 E108                       	smpsAlterNote       $08
0008EB99 E701                       	dc.b	smpsNoAttack, $01
0008EB9B E10C                       	smpsAlterNote       $0C
0008EB9D E701                       	dc.b	smpsNoAttack, $01
0008EB9F E10F                       	smpsAlterNote       $0F
0008EBA1 E701                       	dc.b	smpsNoAttack, $01
0008EBA3 E113                       	smpsAlterNote       $13
0008EBA5 E701                       	dc.b	smpsNoAttack, $01
0008EBA7 E10F                       	smpsAlterNote       $0F
0008EBA9 E701                       	dc.b	smpsNoAttack, $01
0008EBAB E109                       	smpsAlterNote       $09
0008EBAD E701                       	dc.b	smpsNoAttack, $01
0008EBAF E108                       	smpsAlterNote       $08
0008EBB1 E701                       	dc.b	smpsNoAttack, $01
0008EBB3 E10C                       	smpsAlterNote       $0C
0008EBB5 E701                       	dc.b	smpsNoAttack, $01
0008EBB7 E112                       	smpsAlterNote       $12
0008EBB9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EBBD E10F                       	smpsAlterNote       $0F
0008EBBF E701                       	dc.b	smpsNoAttack, $01
0008EBC1 E109                       	smpsAlterNote       $09
0008EBC3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EBC7 E10F                       	smpsAlterNote       $0F
0008EBC9 E701                       	dc.b	smpsNoAttack, $01
0008EBCB E112                       	smpsAlterNote       $12
0008EBCD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EBD1 E10C                       	smpsAlterNote       $0C
0008EBD3 E701                       	dc.b	smpsNoAttack, $01
0008EBD5 E108                       	smpsAlterNote       $08
0008EBD7 E701                       	dc.b	smpsNoAttack, $01
0008EBD9 E10C                       	smpsAlterNote       $0C
0008EBDB E701                       	dc.b	smpsNoAttack, $01
0008EBDD E10F                       	smpsAlterNote       $0F
0008EBDF E701                       	dc.b	smpsNoAttack, $01
0008EBE1 E113                       	smpsAlterNote       $13
0008EBE3 E701                       	dc.b	smpsNoAttack, $01
0008EBE5 E10F                       	smpsAlterNote       $0F
0008EBE7 E701                       	dc.b	smpsNoAttack, $01
0008EBE9 E109                       	smpsAlterNote       $09
0008EBEB E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008EBF1 E601                       	smpsAlterVol        $01
0008EBF3 E10F                       	smpsAlterNote       $0F
0008EBF5 C604                       	dc.b	nA5, $04
0008EBF7 E10D                       	smpsAlterNote       $0D
0008EBF9 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
0008EBFF E10B                       	smpsAlterNote       $0B
0008EC01 BF0A 8001 BF02 8001        	dc.b	nD5, $0A, nRst, $01, nD5, $02, nRst, $01
0008EC09 E10F                       	smpsAlterNote       $0F
0008EC0B C604 8001                  	dc.b	nA5, $04, nRst, $01
0008EC0F E10D                       	smpsAlterNote       $0D
0008EC11 C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
0008EC17 E10C                       	smpsAlterNote       $0C
0008EC19 C109 8001 C103             	dc.b	nE5, $09, nRst, $01, nE5, $03
0008EC1F E10A                       	smpsAlterNote       $0A
0008EC21 C904 8001                  	dc.b	nC6, $04, nRst, $01
0008EC25 E110                       	smpsAlterNote       $10
0008EC27 C704 8001                  	dc.b	nBb5, $04, nRst, $01
0008EC2B E10F                       	smpsAlterNote       $0F
0008EC2D C604                       	dc.b	nA5, $04
0008EC2F E10D                       	smpsAlterNote       $0D
0008EC31 C403 8001 C202 8001 C403+  	dc.b	nG5, $03, nRst, $01, nF5, $02, nRst, $01, nG5, $03, nA5, $0E
0008EC3D E109                       	smpsAlterNote       $09
0008EC3F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EC43 E10F                       	smpsAlterNote       $0F
0008EC45 E701                       	dc.b	smpsNoAttack, $01
0008EC47 E112                       	smpsAlterNote       $12
0008EC49 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EC4D E10C                       	smpsAlterNote       $0C
0008EC4F E701                       	dc.b	smpsNoAttack, $01
0008EC51 E108                       	smpsAlterNote       $08
0008EC53 E701                       	dc.b	smpsNoAttack, $01
0008EC55 E10C                       	smpsAlterNote       $0C
0008EC57 E701                       	dc.b	smpsNoAttack, $01
0008EC59 E10F                       	smpsAlterNote       $0F
0008EC5B E701                       	dc.b	smpsNoAttack, $01
0008EC5D E113                       	smpsAlterNote       $13
0008EC5F E701                       	dc.b	smpsNoAttack, $01
0008EC61 E10D                       	smpsAlterNote       $0D
0008EC63 C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
0008EC69 E10C                       	smpsAlterNote       $0C
0008EC6B C10D                       	dc.b	nE5, $0D
0008EC6D E109                       	smpsAlterNote       $09
0008EC6F E701                       	dc.b	smpsNoAttack, $01
0008EC71 E105                       	smpsAlterNote       $05
0008EC73 E701                       	dc.b	smpsNoAttack, $01
0008EC75 E106                       	smpsAlterNote       $06
0008EC77 E701                       	dc.b	smpsNoAttack, $01
0008EC79 E10C                       	smpsAlterNote       $0C
0008EC7B E701                       	dc.b	smpsNoAttack, $01
0008EC7D E110                       	smpsAlterNote       $10
0008EC7F E701                       	dc.b	smpsNoAttack, $01
0008EC81 E10C                       	smpsAlterNote       $0C
0008EC83 E701                       	dc.b	smpsNoAttack, $01
0008EC85 E109                       	smpsAlterNote       $09
0008EC87 E701                       	dc.b	smpsNoAttack, $01
0008EC89 E105                       	smpsAlterNote       $05
0008EC8B E701                       	dc.b	smpsNoAttack, $01
0008EC8D E109                       	smpsAlterNote       $09
0008EC8F E701                       	dc.b	smpsNoAttack, $01
0008EC91 E10F                       	smpsAlterNote       $0F
0008EC93 E701                       	dc.b	smpsNoAttack, $01
0008EC95 E110                       	smpsAlterNote       $10
0008EC97 E701                       	dc.b	smpsNoAttack, $01
0008EC99 E10C                       	smpsAlterNote       $0C
0008EC9B E701                       	dc.b	smpsNoAttack, $01
0008EC9D E106                       	smpsAlterNote       $06
0008EC9F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ECA3 E109                       	smpsAlterNote       $09
0008ECA5 E701                       	dc.b	smpsNoAttack, $01
0008ECA7 E10F                       	smpsAlterNote       $0F
0008ECA9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ECAD E109                       	smpsAlterNote       $09
0008ECAF E701                       	dc.b	smpsNoAttack, $01
0008ECB1 E106                       	smpsAlterNote       $06
0008ECB3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ECB7 E10C                       	smpsAlterNote       $0C
0008ECB9 E701                       	dc.b	smpsNoAttack, $01
0008ECBB E110                       	smpsAlterNote       $10
0008ECBD E701                       	dc.b	smpsNoAttack, $01
0008ECBF E10F                       	smpsAlterNote       $0F
0008ECC1 E701                       	dc.b	smpsNoAttack, $01
0008ECC3 E109                       	smpsAlterNote       $09
0008ECC5 E701                       	dc.b	smpsNoAttack, $01
0008ECC7 E105                       	smpsAlterNote       $05
0008ECC9 E701                       	dc.b	smpsNoAttack, $01
0008ECCB E109                       	smpsAlterNote       $09
0008ECCD E701                       	dc.b	smpsNoAttack, $01
0008ECCF E10C                       	smpsAlterNote       $0C
0008ECD1 E701                       	dc.b	smpsNoAttack, $01
0008ECD3 E110                       	smpsAlterNote       $10
0008ECD5 E701                       	dc.b	smpsNoAttack, $01
0008ECD7 E10C                       	smpsAlterNote       $0C
0008ECD9 E701                       	dc.b	smpsNoAttack, $01
0008ECDB E106                       	smpsAlterNote       $06
0008ECDD E701                       	dc.b	smpsNoAttack, $01
0008ECDF E105                       	smpsAlterNote       $05
0008ECE1 E701                       	dc.b	smpsNoAttack, $01
0008ECE3 E109                       	smpsAlterNote       $09
0008ECE5 E701                       	dc.b	smpsNoAttack, $01
0008ECE7 E10F                       	smpsAlterNote       $0F
0008ECE9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ECED E10C                       	smpsAlterNote       $0C
0008ECEF E701                       	dc.b	smpsNoAttack, $01
0008ECF1 E106                       	smpsAlterNote       $06
0008ECF3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ECF7 E10C                       	smpsAlterNote       $0C
0008ECF9 E701                       	dc.b	smpsNoAttack, $01
0008ECFB E10F                       	smpsAlterNote       $0F
0008ECFD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ED01 E109                       	smpsAlterNote       $09
0008ED03 E701                       	dc.b	smpsNoAttack, $01
0008ED05 E105                       	smpsAlterNote       $05
0008ED07 E701                       	dc.b	smpsNoAttack, $01
0008ED09 E106                       	smpsAlterNote       $06
0008ED0B E701                       	dc.b	smpsNoAttack, $01
0008ED0D E10C                       	smpsAlterNote       $0C
0008ED0F E701                       	dc.b	smpsNoAttack, $01
0008ED11 E110                       	smpsAlterNote       $10
0008ED13 E701                       	dc.b	smpsNoAttack, $01
0008ED15 E10C                       	smpsAlterNote       $0C
0008ED17 E701                       	dc.b	smpsNoAttack, $01
0008ED19 E109                       	smpsAlterNote       $09
0008ED1B E701                       	dc.b	smpsNoAttack, $01
0008ED1D E105                       	smpsAlterNote       $05
0008ED1F E701                       	dc.b	smpsNoAttack, $01
0008ED21 E109                       	smpsAlterNote       $09
0008ED23 E701                       	dc.b	smpsNoAttack, $01
0008ED25 E10F                       	smpsAlterNote       $0F
0008ED27 E701                       	dc.b	smpsNoAttack, $01
0008ED29 E110                       	smpsAlterNote       $10
0008ED2B E701                       	dc.b	smpsNoAttack, $01
0008ED2D E10C                       	smpsAlterNote       $0C
0008ED2F E701                       	dc.b	smpsNoAttack, $01
0008ED31 E106                       	smpsAlterNote       $06
0008ED33 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ED37 E109                       	smpsAlterNote       $09
0008ED39 E701                       	dc.b	smpsNoAttack, $01
0008ED3B E10F                       	smpsAlterNote       $0F
0008ED3D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ED41 E109                       	smpsAlterNote       $09
0008ED43 E701                       	dc.b	smpsNoAttack, $01
0008ED45 E106                       	smpsAlterNote       $06
0008ED47 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ED4B E10C                       	smpsAlterNote       $0C
0008ED4D E701                       	dc.b	smpsNoAttack, $01
0008ED4F E110                       	smpsAlterNote       $10
0008ED51 E701                       	dc.b	smpsNoAttack, $01
0008ED53 E10F                       	smpsAlterNote       $0F
0008ED55 E701                       	dc.b	smpsNoAttack, $01
0008ED57 E109                       	smpsAlterNote       $09
0008ED59 E701                       	dc.b	smpsNoAttack, $01
0008ED5B E105                       	smpsAlterNote       $05
0008ED5D E701                       	dc.b	smpsNoAttack, $01
0008ED5F E109                       	smpsAlterNote       $09
0008ED61 E701                       	dc.b	smpsNoAttack, $01
0008ED63 E10C                       	smpsAlterNote       $0C
0008ED65 E701                       	dc.b	smpsNoAttack, $01
0008ED67 E110                       	smpsAlterNote       $10
0008ED69 E701                       	dc.b	smpsNoAttack, $01
0008ED6B E10C                       	smpsAlterNote       $0C
0008ED6D E701                       	dc.b	smpsNoAttack, $01
0008ED6F E106                       	smpsAlterNote       $06
0008ED71 E701                       	dc.b	smpsNoAttack, $01
0008ED73 E105                       	smpsAlterNote       $05
0008ED75 E701                       	dc.b	smpsNoAttack, $01
0008ED77 E109                       	smpsAlterNote       $09
0008ED79 E701                       	dc.b	smpsNoAttack, $01
0008ED7B E10F                       	smpsAlterNote       $0F
0008ED7D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ED81 E109                       	smpsAlterNote       $09
0008ED83 E701                       	dc.b	smpsNoAttack, $01
0008ED85 E106                       	smpsAlterNote       $06
0008ED87 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ED8B E10C                       	smpsAlterNote       $0C
0008ED8D E701                       	dc.b	smpsNoAttack, $01
0008ED8F E110                       	smpsAlterNote       $10
0008ED91 E701                       	dc.b	smpsNoAttack, $01
0008ED93 E10F                       	smpsAlterNote       $0F
0008ED95 E701                       	dc.b	smpsNoAttack, $01
0008ED97 E109                       	smpsAlterNote       $09
0008ED99 E701                       	dc.b	smpsNoAttack, $01
0008ED9B E105                       	smpsAlterNote       $05
0008ED9D E701                       	dc.b	smpsNoAttack, $01
0008ED9F E109                       	smpsAlterNote       $09
0008EDA1 E701                       	dc.b	smpsNoAttack, $01
0008EDA3 E10C                       	smpsAlterNote       $0C
0008EDA5 E701                       	dc.b	smpsNoAttack, $01
0008EDA7 E110                       	smpsAlterNote       $10
0008EDA9 E701                       	dc.b	smpsNoAttack, $01
0008EDAB E10C                       	smpsAlterNote       $0C
0008EDAD E701                       	dc.b	smpsNoAttack, $01
0008EDAF E106                       	smpsAlterNote       $06
0008EDB1 E701                       	dc.b	smpsNoAttack, $01
0008EDB3 E105                       	smpsAlterNote       $05
0008EDB5 E701                       	dc.b	smpsNoAttack, $01
0008EDB7 E109                       	smpsAlterNote       $09
0008EDB9 E701                       	dc.b	smpsNoAttack, $01
0008EDBB E10F                       	smpsAlterNote       $0F
0008EDBD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EDC1 E10C                       	smpsAlterNote       $0C
0008EDC3 E701                       	dc.b	smpsNoAttack, $01
0008EDC5 E106                       	smpsAlterNote       $06
0008EDC7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EDCB E10C                       	smpsAlterNote       $0C
0008EDCD E701                       	dc.b	smpsNoAttack, $01
0008EDCF E10F                       	smpsAlterNote       $0F
0008EDD1 E701                       	dc.b	smpsNoAttack, $01
0008EDD3 E110                       	smpsAlterNote       $10
0008EDD5 8001                       	dc.b	nRst, $01
0008EDD7 E10F                       	smpsAlterNote       $0F
0008EDD9 C604                       	dc.b	nA5, $04
0008EDDB E10D                       	smpsAlterNote       $0D
0008EDDD C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
0008EDE3 E10B                       	smpsAlterNote       $0B
0008EDE5 BF0A 8001 BF03             	dc.b	nD5, $0A, nRst, $01, nD5, $03
0008EDEB E10F                       	smpsAlterNote       $0F
0008EDED C604 8001                  	dc.b	nA5, $04, nRst, $01
0008EDF1 E10D                       	smpsAlterNote       $0D
0008EDF3 C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
0008EDF9 E10C                       	smpsAlterNote       $0C
0008EDFB C10A C103 8001             	dc.b	nE5, $0A, nE5, $03, nRst, $01
0008EE01 E10A                       	smpsAlterNote       $0A
0008EE03 C904                       	dc.b	nC6, $04
0008EE05 E110                       	smpsAlterNote       $10
0008EE07 C704 8001                  	dc.b	nBb5, $04, nRst, $01
0008EE0B E10F                       	smpsAlterNote       $0F
0008EE0D C604                       	dc.b	nA5, $04
0008EE0F E10D                       	smpsAlterNote       $0D
0008EE11 C403 8001 C202 8001 C403+  	dc.b	nG5, $03, nRst, $01, nF5, $02, nRst, $01, nG5, $03, nA5, $0E
0008EE1D E109                       	smpsAlterNote       $09
0008EE1F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EE23 E10F                       	smpsAlterNote       $0F
0008EE25 E701                       	dc.b	smpsNoAttack, $01
0008EE27 E112                       	smpsAlterNote       $12
0008EE29 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EE2D E10C                       	smpsAlterNote       $0C
0008EE2F E701                       	dc.b	smpsNoAttack, $01
0008EE31 E108                       	smpsAlterNote       $08
0008EE33 E701                       	dc.b	smpsNoAttack, $01
0008EE35 E109                       	smpsAlterNote       $09
0008EE37 E701                       	dc.b	smpsNoAttack, $01
0008EE39 E10F                       	smpsAlterNote       $0F
0008EE3B E701                       	dc.b	smpsNoAttack, $01
0008EE3D E113                       	smpsAlterNote       $13
0008EE3F E701                       	dc.b	smpsNoAttack, $01
0008EE41 E10D                       	smpsAlterNote       $0D
0008EE43 C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
0008EE49 E10C                       	smpsAlterNote       $0C
0008EE4B C10D                       	dc.b	nE5, $0D
0008EE4D E109                       	smpsAlterNote       $09
0008EE4F E701                       	dc.b	smpsNoAttack, $01
0008EE51 E106                       	smpsAlterNote       $06
0008EE53 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EE57 E10C                       	smpsAlterNote       $0C
0008EE59 E701                       	dc.b	smpsNoAttack, $01
0008EE5B E110                       	smpsAlterNote       $10
0008EE5D E701                       	dc.b	smpsNoAttack, $01
0008EE5F E10F                       	smpsAlterNote       $0F
0008EE61 E701                       	dc.b	smpsNoAttack, $01
0008EE63 E109                       	smpsAlterNote       $09
0008EE65 E701                       	dc.b	smpsNoAttack, $01
0008EE67 E105                       	smpsAlterNote       $05
0008EE69 E701                       	dc.b	smpsNoAttack, $01
0008EE6B E109                       	smpsAlterNote       $09
0008EE6D E701                       	dc.b	smpsNoAttack, $01
0008EE6F E10C                       	smpsAlterNote       $0C
0008EE71 E701                       	dc.b	smpsNoAttack, $01
0008EE73 E110                       	smpsAlterNote       $10
0008EE75 E701                       	dc.b	smpsNoAttack, $01
0008EE77 E10C                       	smpsAlterNote       $0C
0008EE79 E701                       	dc.b	smpsNoAttack, $01
0008EE7B E106                       	smpsAlterNote       $06
0008EE7D E701                       	dc.b	smpsNoAttack, $01
0008EE7F E105                       	smpsAlterNote       $05
0008EE81 E701                       	dc.b	smpsNoAttack, $01
0008EE83 E109                       	smpsAlterNote       $09
0008EE85 E701                       	dc.b	smpsNoAttack, $01
0008EE87 E10F                       	smpsAlterNote       $0F
0008EE89 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EE8D E10C                       	smpsAlterNote       $0C
0008EE8F E701                       	dc.b	smpsNoAttack, $01
0008EE91 E106                       	smpsAlterNote       $06
0008EE93 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EE97 E10C                       	smpsAlterNote       $0C
0008EE99 E701                       	dc.b	smpsNoAttack, $01
0008EE9B E10F                       	smpsAlterNote       $0F
0008EE9D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EEA1 E109                       	smpsAlterNote       $09
0008EEA3 E701                       	dc.b	smpsNoAttack, $01
0008EEA5 E105                       	smpsAlterNote       $05
0008EEA7 E701                       	dc.b	smpsNoAttack, $01
0008EEA9 E106                       	smpsAlterNote       $06
0008EEAB E701                       	dc.b	smpsNoAttack, $01
0008EEAD E10C                       	smpsAlterNote       $0C
0008EEAF E701                       	dc.b	smpsNoAttack, $01
0008EEB1 E110                       	smpsAlterNote       $10
0008EEB3 E701                       	dc.b	smpsNoAttack, $01
0008EEB5 E10C                       	smpsAlterNote       $0C
0008EEB7 E701                       	dc.b	smpsNoAttack, $01
0008EEB9 E109                       	smpsAlterNote       $09
0008EEBB E701                       	dc.b	smpsNoAttack, $01
0008EEBD E105                       	smpsAlterNote       $05
0008EEBF E701                       	dc.b	smpsNoAttack, $01
0008EEC1 E109                       	smpsAlterNote       $09
0008EEC3 E701                       	dc.b	smpsNoAttack, $01
0008EEC5 E10F                       	smpsAlterNote       $0F
0008EEC7 E701                       	dc.b	smpsNoAttack, $01
0008EEC9 E110                       	smpsAlterNote       $10
0008EECB E701                       	dc.b	smpsNoAttack, $01
0008EECD E10C                       	smpsAlterNote       $0C
0008EECF E701                       	dc.b	smpsNoAttack, $01
0008EED1 E106                       	smpsAlterNote       $06
0008EED3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EED7 E109                       	smpsAlterNote       $09
0008EED9 E701                       	dc.b	smpsNoAttack, $01
0008EEDB E10F                       	smpsAlterNote       $0F
0008EEDD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EEE1 E109                       	smpsAlterNote       $09
0008EEE3 E701                       	dc.b	smpsNoAttack, $01
0008EEE5 E106                       	smpsAlterNote       $06
0008EEE7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EEEB E10C                       	smpsAlterNote       $0C
0008EEED E701                       	dc.b	smpsNoAttack, $01
0008EEEF E110                       	smpsAlterNote       $10
0008EEF1 E701                       	dc.b	smpsNoAttack, $01
0008EEF3 E10F                       	smpsAlterNote       $0F
0008EEF5 E701                       	dc.b	smpsNoAttack, $01
0008EEF7 E109                       	smpsAlterNote       $09
0008EEF9 E701                       	dc.b	smpsNoAttack, $01
0008EEFB E105                       	smpsAlterNote       $05
0008EEFD E701                       	dc.b	smpsNoAttack, $01
0008EEFF E109                       	smpsAlterNote       $09
0008EF01 E701                       	dc.b	smpsNoAttack, $01
0008EF03 E10F                       	smpsAlterNote       $0F
0008EF05 E701                       	dc.b	smpsNoAttack, $01
0008EF07 E110                       	smpsAlterNote       $10
0008EF09 E701                       	dc.b	smpsNoAttack, $01
0008EF0B E10C                       	smpsAlterNote       $0C
0008EF0D E701                       	dc.b	smpsNoAttack, $01
0008EF0F E106                       	smpsAlterNote       $06
0008EF11 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EF15 E109                       	smpsAlterNote       $09
0008EF17 E701                       	dc.b	smpsNoAttack, $01
0008EF19 E10F                       	smpsAlterNote       $0F
0008EF1B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EF1F E109                       	smpsAlterNote       $09
0008EF21 E701                       	dc.b	smpsNoAttack, $01
0008EF23 E106                       	smpsAlterNote       $06
0008EF25 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EF29 E10C                       	smpsAlterNote       $0C
0008EF2B E701                       	dc.b	smpsNoAttack, $01
0008EF2D E110                       	smpsAlterNote       $10
0008EF2F E701                       	dc.b	smpsNoAttack, $01
0008EF31 E10F                       	smpsAlterNote       $0F
0008EF33 E701                       	dc.b	smpsNoAttack, $01
0008EF35 E109                       	smpsAlterNote       $09
0008EF37 E701                       	dc.b	smpsNoAttack, $01
0008EF39 E105                       	smpsAlterNote       $05
0008EF3B E701                       	dc.b	smpsNoAttack, $01
0008EF3D E109                       	smpsAlterNote       $09
0008EF3F E701                       	dc.b	smpsNoAttack, $01
0008EF41 E10C                       	smpsAlterNote       $0C
0008EF43 E701                       	dc.b	smpsNoAttack, $01
0008EF45 E110                       	smpsAlterNote       $10
0008EF47 E701                       	dc.b	smpsNoAttack, $01
0008EF49 E10C                       	smpsAlterNote       $0C
0008EF4B E701                       	dc.b	smpsNoAttack, $01
0008EF4D E106                       	smpsAlterNote       $06
0008EF4F E701                       	dc.b	smpsNoAttack, $01
0008EF51 E105                       	smpsAlterNote       $05
0008EF53 E701                       	dc.b	smpsNoAttack, $01
0008EF55 E109                       	smpsAlterNote       $09
0008EF57 E701                       	dc.b	smpsNoAttack, $01
0008EF59 E10F                       	smpsAlterNote       $0F
0008EF5B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EF5F E10C                       	smpsAlterNote       $0C
0008EF61 E701                       	dc.b	smpsNoAttack, $01
0008EF63 E106                       	smpsAlterNote       $06
0008EF65 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EF69 E10C                       	smpsAlterNote       $0C
0008EF6B E701                       	dc.b	smpsNoAttack, $01
0008EF6D E10F                       	smpsAlterNote       $0F
0008EF6F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EF73 E109                       	smpsAlterNote       $09
0008EF75 E701                       	dc.b	smpsNoAttack, $01
0008EF77 E105                       	smpsAlterNote       $05
0008EF79 E701                       	dc.b	smpsNoAttack, $01
0008EF7B E106                       	smpsAlterNote       $06
0008EF7D E701                       	dc.b	smpsNoAttack, $01
0008EF7F E10C                       	smpsAlterNote       $0C
0008EF81 E701                       	dc.b	smpsNoAttack, $01
0008EF83 E110                       	smpsAlterNote       $10
0008EF85 E701                       	dc.b	smpsNoAttack, $01
0008EF87 E10C                       	smpsAlterNote       $0C
0008EF89 E701                       	dc.b	smpsNoAttack, $01
0008EF8B E109                       	smpsAlterNote       $09
0008EF8D E701                       	dc.b	smpsNoAttack, $01
0008EF8F E105                       	smpsAlterNote       $05
0008EF91 E701                       	dc.b	smpsNoAttack, $01
0008EF93 E109                       	smpsAlterNote       $09
0008EF95 E701                       	dc.b	smpsNoAttack, $01
0008EF97 E10F                       	smpsAlterNote       $0F
0008EF99 E701                       	dc.b	smpsNoAttack, $01
0008EF9B E110                       	smpsAlterNote       $10
0008EF9D E701                       	dc.b	smpsNoAttack, $01
0008EF9F E10C                       	smpsAlterNote       $0C
0008EFA1 E701                       	dc.b	smpsNoAttack, $01
0008EFA3 E106                       	smpsAlterNote       $06
0008EFA5 E701                       	dc.b	smpsNoAttack, $01
0008EFA7 E10B                       	smpsAlterNote       $0B
0008EFA9 BF02                       	dc.b	nD5, $02
0008EFAB E10C                       	smpsAlterNote       $0C
0008EFAD C001 8001 C10D             	dc.b	nEb5, $01, nRst, $01, nE5, $0D
0008EFB3 E109                       	smpsAlterNote       $09
0008EFB5 E701                       	dc.b	smpsNoAttack, $01
0008EFB7 E105                       	smpsAlterNote       $05
0008EFB9 E701                       	dc.b	smpsNoAttack, $01
0008EFBB E109                       	smpsAlterNote       $09
0008EFBD E701                       	dc.b	smpsNoAttack, $01
0008EFBF E10F                       	smpsAlterNote       $0F
0008EFC1 E701                       	dc.b	smpsNoAttack, $01
0008EFC3 E110                       	smpsAlterNote       $10
0008EFC5 E701                       	dc.b	smpsNoAttack, $01
0008EFC7 E10C                       	smpsAlterNote       $0C
0008EFC9 E701                       	dc.b	smpsNoAttack, $01
0008EFCB E106                       	smpsAlterNote       $06
0008EFCD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EFD1 E109                       	smpsAlterNote       $09
0008EFD3 E701                       	dc.b	smpsNoAttack, $01
0008EFD5 E10F                       	smpsAlterNote       $0F
0008EFD7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EFDB E109                       	smpsAlterNote       $09
0008EFDD E701                       	dc.b	smpsNoAttack, $01
0008EFDF E106                       	smpsAlterNote       $06
0008EFE1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EFE5 E10C                       	smpsAlterNote       $0C
0008EFE7 E701                       	dc.b	smpsNoAttack, $01
0008EFE9 E110                       	smpsAlterNote       $10
0008EFEB E701                       	dc.b	smpsNoAttack, $01
0008EFED E10F                       	smpsAlterNote       $0F
0008EFEF E701                       	dc.b	smpsNoAttack, $01
0008EFF1 E109                       	smpsAlterNote       $09
0008EFF3 E701                       	dc.b	smpsNoAttack, $01
0008EFF5 E105                       	smpsAlterNote       $05
0008EFF7 E701                       	dc.b	smpsNoAttack, $01
0008EFF9 E109                       	smpsAlterNote       $09
0008EFFB E701                       	dc.b	smpsNoAttack, $01
0008EFFD E10C                       	smpsAlterNote       $0C
0008EFFF E701                       	dc.b	smpsNoAttack, $01
0008F001 E110                       	smpsAlterNote       $10
0008F003 E701                       	dc.b	smpsNoAttack, $01
0008F005 E10C                       	smpsAlterNote       $0C
0008F007 E701                       	dc.b	smpsNoAttack, $01
0008F009 E106                       	smpsAlterNote       $06
0008F00B E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008F00F E10D                       	smpsAlterNote       $0D
0008F011 C409 8001 C206 8001        	dc.b	nG5, $09, nRst, $01, nF5, $06, nRst, $01
0008F019 E10C                       	smpsAlterNote       $0C
0008F01B C10D                       	dc.b	nE5, $0D
0008F01D E106                       	smpsAlterNote       $06
0008F01F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F023 E109                       	smpsAlterNote       $09
0008F025 E701                       	dc.b	smpsNoAttack, $01
0008F027 E10F                       	smpsAlterNote       $0F
0008F029 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F02D E109                       	smpsAlterNote       $09
0008F02F E701                       	dc.b	smpsNoAttack, $01
0008F031 E106                       	smpsAlterNote       $06
0008F033 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F037 E10C                       	smpsAlterNote       $0C
0008F039 E701                       	dc.b	smpsNoAttack, $01
0008F03B E110                       	smpsAlterNote       $10
0008F03D E701                       	dc.b	smpsNoAttack, $01
0008F03F E10F                       	smpsAlterNote       $0F
0008F041 E701                       	dc.b	smpsNoAttack, $01
0008F043 E109                       	smpsAlterNote       $09
0008F045 E701                       	dc.b	smpsNoAttack, $01
0008F047 E105                       	smpsAlterNote       $05
0008F049 E701                       	dc.b	smpsNoAttack, $01
0008F04B E106                       	smpsAlterNote       $06
0008F04D 800F                       	dc.b	nRst, $0F
0008F051 E6FF                       	smpsAlterVol        $FF
0008F053 E10F                       	smpsAlterNote       $0F
0008F055 BA01                       	dc.b	nA4, $01
0008F057 E110                       	smpsAlterNote       $10
0008F059 BB02                       	dc.b	nBb4, $02
0008F05B E10F                       	smpsAlterNote       $0F
0008F05D BA03 8001 BA06             	dc.b	nA4, $03, nRst, $01, nA4, $06
0008F063 E10B                       	smpsAlterNote       $0B
0008F065 BF03 8001                  	dc.b	nD5, $03, nRst, $01
0008F069 E10C                       	smpsAlterNote       $0C
0008F06B C103                       	dc.b	nE5, $03
0008F06D E10D                       	smpsAlterNote       $0D
0008F06F C203 8001 C403 C606 8001   	dc.b	nF5, $03, nRst, $01, nG5, $03, nA5, $06, nRst, $01
0008F079 E10B                       	smpsAlterNote       $0B
0008F07B BF03 C90E                  	dc.b	nD5, $03, nC6, $0E
0008F07F E104                       	smpsAlterNote       $04
0008F081 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F085 E10A                       	smpsAlterNote       $0A
0008F087 E701                       	dc.b	smpsNoAttack, $01
0008F089 E10D                       	smpsAlterNote       $0D
0008F08B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F08F E107                       	smpsAlterNote       $07
0008F091 E701                       	dc.b	smpsNoAttack, $01
0008F093 E104                       	smpsAlterNote       $04
0008F095 8001                       	dc.b	nRst, $01
0008F097 E110                       	smpsAlterNote       $10
0008F099 C703                       	dc.b	nBb5, $03
0008F09B E10F                       	smpsAlterNote       $0F
0008F09D C603 8001                  	dc.b	nA5, $03, nRst, $01
0008F0A1 E10D                       	smpsAlterNote       $0D
0008F0A3 C403 C60D                  	dc.b	nG5, $03, nA5, $0D
0008F0A7 E10C                       	smpsAlterNote       $0C
0008F0A9 E701                       	dc.b	smpsNoAttack, $01
0008F0AB E108                       	smpsAlterNote       $08
0008F0AD E701                       	dc.b	smpsNoAttack, $01
0008F0AF E109                       	smpsAlterNote       $09
0008F0B1 E701                       	dc.b	smpsNoAttack, $01
0008F0B3 E10F                       	smpsAlterNote       $0F
0008F0B5 E701                       	dc.b	smpsNoAttack, $01
0008F0B7 E113                       	smpsAlterNote       $13
0008F0B9 E701                       	dc.b	smpsNoAttack, $01
0008F0BB E10F                       	smpsAlterNote       $0F
0008F0BD E701                       	dc.b	smpsNoAttack, $01
0008F0BF E10C                       	smpsAlterNote       $0C
0008F0C1 E701                       	dc.b	smpsNoAttack, $01
0008F0C3 E108                       	smpsAlterNote       $08
0008F0C5 E701                       	dc.b	smpsNoAttack, $01
0008F0C7 E10C                       	smpsAlterNote       $0C
0008F0C9 E701                       	dc.b	smpsNoAttack, $01
0008F0CB E112                       	smpsAlterNote       $12
0008F0CD E701                       	dc.b	smpsNoAttack, $01
0008F0CF E113                       	smpsAlterNote       $13
0008F0D1 E701                       	dc.b	smpsNoAttack, $01
0008F0D3 E10F                       	smpsAlterNote       $0F
0008F0D5 E701                       	dc.b	smpsNoAttack, $01
0008F0D7 E109                       	smpsAlterNote       $09
0008F0D9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F0DD E10C                       	smpsAlterNote       $0C
0008F0DF E701                       	dc.b	smpsNoAttack, $01
0008F0E1 E112                       	smpsAlterNote       $12
0008F0E3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F0E7 E10C                       	smpsAlterNote       $0C
0008F0E9 E701                       	dc.b	smpsNoAttack, $01
0008F0EB E109                       	smpsAlterNote       $09
0008F0ED E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F0F1 E10F                       	smpsAlterNote       $0F
0008F0F3 E701                       	dc.b	smpsNoAttack, $01
0008F0F5 E113                       	smpsAlterNote       $13
0008F0F7 E701                       	dc.b	smpsNoAttack, $01
0008F0F9 E112                       	smpsAlterNote       $12
0008F0FB E701                       	dc.b	smpsNoAttack, $01
0008F0FD E10C                       	smpsAlterNote       $0C
0008F0FF E701                       	dc.b	smpsNoAttack, $01
0008F101 E108                       	smpsAlterNote       $08
0008F103 E701                       	dc.b	smpsNoAttack, $01
0008F105 E10C                       	smpsAlterNote       $0C
0008F107 E701                       	dc.b	smpsNoAttack, $01
0008F109 E10F                       	smpsAlterNote       $0F
0008F10B E701                       	dc.b	smpsNoAttack, $01
0008F10D E113                       	smpsAlterNote       $13
0008F10F E701 800E                  	dc.b	smpsNoAttack, $01, nRst, $0E
0008F113 E10B                       	smpsAlterNote       $0B
0008F115 BF03                       	dc.b	nD5, $03
0008F117 E10C                       	smpsAlterNote       $0C
0008F119 C103 8001                  	dc.b	nE5, $03, nRst, $01
0008F11D E10D                       	smpsAlterNote       $0D
0008F11F C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
0008F129 E10B                       	smpsAlterNote       $0B
0008F12B BF02 8001 C90D 8001 CB02+  	dc.b	nD5, $02, nRst, $01, nC6, $0D, nRst, $01, nD6, $02, nRst, $01
0008F137 E110                       	smpsAlterNote       $10
0008F139 C704 8001                  	dc.b	nBb5, $04, nRst, $01
0008F13D E10F                       	smpsAlterNote       $0F
0008F13F C604                       	dc.b	nA5, $04
0008F141 E10D                       	smpsAlterNote       $0D
0008F143 C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
0008F149 E109                       	smpsAlterNote       $09
0008F14B E701                       	dc.b	smpsNoAttack, $01
0008F14D E108                       	smpsAlterNote       $08
0008F14F E701                       	dc.b	smpsNoAttack, $01
0008F151 E10C                       	smpsAlterNote       $0C
0008F153 E701                       	dc.b	smpsNoAttack, $01
0008F155 E112                       	smpsAlterNote       $12
0008F157 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F15B E10F                       	smpsAlterNote       $0F
0008F15D E701                       	dc.b	smpsNoAttack, $01
0008F15F E109                       	smpsAlterNote       $09
0008F161 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F165 E10F                       	smpsAlterNote       $0F
0008F167 E701                       	dc.b	smpsNoAttack, $01
0008F169 E112                       	smpsAlterNote       $12
0008F16B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F16F E10C                       	smpsAlterNote       $0C
0008F171 E701                       	dc.b	smpsNoAttack, $01
0008F173 E108                       	smpsAlterNote       $08
0008F175 E701                       	dc.b	smpsNoAttack, $01
0008F177 E109                       	smpsAlterNote       $09
0008F179 E701                       	dc.b	smpsNoAttack, $01
0008F17B E10F                       	smpsAlterNote       $0F
0008F17D E701                       	dc.b	smpsNoAttack, $01
0008F17F E113                       	smpsAlterNote       $13
0008F181 E701                       	dc.b	smpsNoAttack, $01
0008F183 E10F                       	smpsAlterNote       $0F
0008F185 E701                       	dc.b	smpsNoAttack, $01
0008F187 E10C                       	smpsAlterNote       $0C
0008F189 E701                       	dc.b	smpsNoAttack, $01
0008F18B E108                       	smpsAlterNote       $08
0008F18D E701                       	dc.b	smpsNoAttack, $01
0008F18F E10C                       	smpsAlterNote       $0C
0008F191 E701                       	dc.b	smpsNoAttack, $01
0008F193 E112                       	smpsAlterNote       $12
0008F195 E701                       	dc.b	smpsNoAttack, $01
0008F197 E113                       	smpsAlterNote       $13
0008F199 E701                       	dc.b	smpsNoAttack, $01
0008F19B E10F                       	smpsAlterNote       $0F
0008F19D E701                       	dc.b	smpsNoAttack, $01
0008F19F E109                       	smpsAlterNote       $09
0008F1A1 E701                       	dc.b	smpsNoAttack, $01
0008F1A3 E10D                       	smpsAlterNote       $0D
0008F1A5 C402                       	dc.b	nG5, $02
0008F1A7 E10F                       	smpsAlterNote       $0F
0008F1A9 C501 8001 C60D 8001 C604   	dc.b	nAb5, $01, nRst, $01, nA5, $0D, nRst, $01, nA5, $04
0008F1B3 E10D                       	smpsAlterNote       $0D
0008F1B5 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
0008F1BB E10B                       	smpsAlterNote       $0B
0008F1BD BF0D                       	dc.b	nD5, $0D
0008F1BF E108                       	smpsAlterNote       $08
0008F1C1 E701                       	dc.b	smpsNoAttack, $01
0008F1C3 E104                       	smpsAlterNote       $04
0008F1C5 E701                       	dc.b	smpsNoAttack, $01
0008F1C7 E105                       	smpsAlterNote       $05
0008F1C9 E701                       	dc.b	smpsNoAttack, $01
0008F1CB E10B                       	smpsAlterNote       $0B
0008F1CD E701                       	dc.b	smpsNoAttack, $01
0008F1CF E10F                       	smpsAlterNote       $0F
0008F1D1 E701                       	dc.b	smpsNoAttack, $01
0008F1D3 E10B                       	smpsAlterNote       $0B
0008F1D5 E701                       	dc.b	smpsNoAttack, $01
0008F1D7 E108                       	smpsAlterNote       $08
0008F1D9 E701                       	dc.b	smpsNoAttack, $01
0008F1DB E104                       	smpsAlterNote       $04
0008F1DD E701                       	dc.b	smpsNoAttack, $01
0008F1DF E108                       	smpsAlterNote       $08
0008F1E1 E701                       	dc.b	smpsNoAttack, $01
0008F1E3 E10E                       	smpsAlterNote       $0E
0008F1E5 E701                       	dc.b	smpsNoAttack, $01
0008F1E7 E10F                       	smpsAlterNote       $0F
0008F1E9 E701                       	dc.b	smpsNoAttack, $01
0008F1EB E10C                       	smpsAlterNote       $0C
0008F1ED C101                       	dc.b	nE5, $01
0008F1EF E10D                       	smpsAlterNote       $0D
0008F1F1 C201 C401 8001 C606        	dc.b	nF5, $01, nG5, $01, nRst, $01, nA5, $06
0008F1F9 E10F                       	smpsAlterNote       $0F
0008F1FB C607                       	dc.b	nA5, $07
0008F1FD E10C                       	smpsAlterNote       $0C
0008F1FF CD07                       	dc.b	nE6, $07
0008F201 E10D                       	smpsAlterNote       $0D
0008F203 CE06 8001                  	dc.b	nF6, $06, nRst, $01
0008F207 E10C                       	smpsAlterNote       $0C
0008F209 CD03                       	dc.b	nE6, $03
0008F20B E10A                       	smpsAlterNote       $0A
0008F20D C903 8001                  	dc.b	nC6, $03, nRst, $01
0008F211 E10D                       	smpsAlterNote       $0D
0008F213 C403 C70D E701             	dc.b	nG5, $03, nBb5, $0D, smpsNoAttack, $01
0008F219 E10A                       	smpsAlterNote       $0A
0008F21B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F21F E110                       	smpsAlterNote       $10
0008F221 E701                       	dc.b	smpsNoAttack, $01
0008F223 E114                       	smpsAlterNote       $14
0008F225 E701                       	dc.b	smpsNoAttack, $01
0008F227 E113                       	smpsAlterNote       $13
0008F229 E701                       	dc.b	smpsNoAttack, $01
0008F22B E10D                       	smpsAlterNote       $0D
0008F22D E701                       	dc.b	smpsNoAttack, $01
0008F22F E109                       	smpsAlterNote       $09
0008F231 E701                       	dc.b	smpsNoAttack, $01
0008F233 E10D                       	smpsAlterNote       $0D
0008F235 E701                       	dc.b	smpsNoAttack, $01
0008F237 E110                       	smpsAlterNote       $10
0008F239 E701                       	dc.b	smpsNoAttack, $01
0008F23B E114                       	smpsAlterNote       $14
0008F23D E701                       	dc.b	smpsNoAttack, $01
0008F23F E10F                       	smpsAlterNote       $0F
0008F241 C607                       	dc.b	nA5, $07
0008F243 E10D                       	smpsAlterNote       $0D
0008F245 C40D                       	dc.b	nG5, $0D
0008F247 E10A                       	smpsAlterNote       $0A
0008F249 E701                       	dc.b	smpsNoAttack, $01
0008F24B E106                       	smpsAlterNote       $06
0008F24D E701                       	dc.b	smpsNoAttack, $01
0008F24F E10A                       	smpsAlterNote       $0A
0008F251 E701                       	dc.b	smpsNoAttack, $01
0008F253 E10D                       	smpsAlterNote       $0D
0008F255 E701                       	dc.b	smpsNoAttack, $01
0008F257 E111                       	smpsAlterNote       $11
0008F259 E701                       	dc.b	smpsNoAttack, $01
0008F25B E10D                       	smpsAlterNote       $0D
0008F25D E701                       	dc.b	smpsNoAttack, $01
0008F25F E107                       	smpsAlterNote       $07
0008F261 E701                       	dc.b	smpsNoAttack, $01
0008F263 E106                       	smpsAlterNote       $06
0008F265 E701                       	dc.b	smpsNoAttack, $01
0008F267 E10A                       	smpsAlterNote       $0A
0008F269 E701                       	dc.b	smpsNoAttack, $01
0008F26B E110                       	smpsAlterNote       $10
0008F26D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F271 E10D                       	smpsAlterNote       $0D
0008F273 E701                       	dc.b	smpsNoAttack, $01
0008F275 E107                       	smpsAlterNote       $07
0008F277 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F27B E10F                       	smpsAlterNote       $0F
0008F27D C60E                       	dc.b	nA5, $0E
0008F27F E109                       	smpsAlterNote       $09
0008F281 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F285 E10F                       	smpsAlterNote       $0F
0008F287 E701                       	dc.b	smpsNoAttack, $01
0008F289 E112                       	smpsAlterNote       $12
0008F28B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F28F E10C                       	smpsAlterNote       $0C
0008F291 E701                       	dc.b	smpsNoAttack, $01
0008F293 E108                       	smpsAlterNote       $08
0008F295 E701                       	dc.b	smpsNoAttack, $01
0008F297 E109                       	smpsAlterNote       $09
0008F299 E701                       	dc.b	smpsNoAttack, $01
0008F29B E10F                       	smpsAlterNote       $0F
0008F29D E701                       	dc.b	smpsNoAttack, $01
0008F29F E113                       	smpsAlterNote       $13
0008F2A1 E701                       	dc.b	smpsNoAttack, $01
0008F2A3 E10F                       	smpsAlterNote       $0F
0008F2A5 E701                       	dc.b	smpsNoAttack, $01
0008F2A7 E10C                       	smpsAlterNote       $0C
0008F2A9 E701                       	dc.b	smpsNoAttack, $01
0008F2AB E108                       	smpsAlterNote       $08
0008F2AD E701                       	dc.b	smpsNoAttack, $01
0008F2AF E109                       	smpsAlterNote       $09
0008F2B1 8001                       	dc.b	nRst, $01
0008F2B3 E110                       	smpsAlterNote       $10
0008F2B5 C70D                       	dc.b	nBb5, $0D
0008F2B7 E10D                       	smpsAlterNote       $0D
0008F2B9 E701                       	dc.b	smpsNoAttack, $01
0008F2BB E109                       	smpsAlterNote       $09
0008F2BD E701                       	dc.b	smpsNoAttack, $01
0008F2BF E10D                       	smpsAlterNote       $0D
0008F2C1 E701                       	dc.b	smpsNoAttack, $01
0008F2C3 E113                       	smpsAlterNote       $13
0008F2C5 E701                       	dc.b	smpsNoAttack, $01
0008F2C7 E114                       	smpsAlterNote       $14
0008F2C9 E701                       	dc.b	smpsNoAttack, $01
0008F2CB E110                       	smpsAlterNote       $10
0008F2CD E701                       	dc.b	smpsNoAttack, $01
0008F2CF E10A                       	smpsAlterNote       $0A
0008F2D1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F2D5 E10D                       	smpsAlterNote       $0D
0008F2D7 E701                       	dc.b	smpsNoAttack, $01
0008F2D9 E113                       	smpsAlterNote       $13
0008F2DB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F2DF E10D                       	smpsAlterNote       $0D
0008F2E1 E701                       	dc.b	smpsNoAttack, $01
0008F2E3 E10A                       	smpsAlterNote       $0A
0008F2E5 E701 E701 C90C 8001 8001   	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nC6, $0C, nRst, $01, nRst, $01
0008F2EF E10B                       	smpsAlterNote       $0B
0008F2F1 8001                       	dc.b	nRst, $01
0008F2F3 E10C                       	smpsAlterNote       $0C
0008F2F5 CD0C 8001                  	dc.b	nE6, $0C, nRst, $01
0008F2F9 E10B                       	smpsAlterNote       $0B
0008F2FB CB0D                       	dc.b	nD6, $0D
0008F2FD E105                       	smpsAlterNote       $05
0008F2FF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F303 E108                       	smpsAlterNote       $08
0008F305 E701                       	dc.b	smpsNoAttack, $01
0008F307 E10E                       	smpsAlterNote       $0E
0008F309 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F30D E108                       	smpsAlterNote       $08
0008F30F E701                       	dc.b	smpsNoAttack, $01
0008F311 E105                       	smpsAlterNote       $05
0008F313 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F317 E10B                       	smpsAlterNote       $0B
0008F319 E701                       	dc.b	smpsNoAttack, $01
0008F31B E10F                       	smpsAlterNote       $0F
0008F31D E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008F321 E10C                       	smpsAlterNote       $0C
0008F323 CC0D                       	dc.b	nEb6, $0D
0008F325 E106                       	smpsAlterNote       $06
0008F327 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F32B E109                       	smpsAlterNote       $09
0008F32D E701                       	dc.b	smpsNoAttack, $01
0008F32F E10C                       	smpsAlterNote       $0C
0008F331 8001                       	dc.b	nRst, $01
0008F333 E10A                       	smpsAlterNote       $0A
0008F335 C906 8001 C901 8001 C902+  	dc.b	nC6, $06, nRst, $01, nC6, $01, nRst, $01, nC6, $02, nC6, $02
0008F341 CB0E                       	dc.b	nD6, $0E
0008F343 E105                       	smpsAlterNote       $05
0008F345 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F349 E10B                       	smpsAlterNote       $0B
0008F34B E701                       	dc.b	smpsNoAttack, $01
0008F34D E10E                       	smpsAlterNote       $0E
0008F34F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F353 E108                       	smpsAlterNote       $08
0008F355 E701                       	dc.b	smpsNoAttack, $01
0008F357 E104                       	smpsAlterNote       $04
0008F359 E701                       	dc.b	smpsNoAttack, $01
0008F35B E105                       	smpsAlterNote       $05
0008F35D E701                       	dc.b	smpsNoAttack, $01
0008F35F E10B                       	smpsAlterNote       $0B
0008F361 E701                       	dc.b	smpsNoAttack, $01
0008F363 E10F                       	smpsAlterNote       $0F
0008F365 E701                       	dc.b	smpsNoAttack, $01
0008F367 E10D                       	smpsAlterNote       $0D
0008F369 CE0A 8001                  	dc.b	nF6, $0A, nRst, $01
0008F36D E10C                       	smpsAlterNote       $0C
0008F36F CC06 8001                  	dc.b	nEb6, $06, nRst, $01
0008F373 E10A                       	smpsAlterNote       $0A
0008F375 C906 C902 8001 C901 8001+  	dc.b	nC6, $06, nC6, $02, nRst, $01, nC6, $01, nRst, $01, nC6, $02
0008F381 CB0D                       	dc.b	nD6, $0D
0008F383 E108                       	smpsAlterNote       $08
0008F385 E701                       	dc.b	smpsNoAttack, $01
0008F387 E104                       	smpsAlterNote       $04
0008F389 E701                       	dc.b	smpsNoAttack, $01
0008F38B E105                       	smpsAlterNote       $05
0008F38D E701                       	dc.b	smpsNoAttack, $01
0008F38F E10B                       	smpsAlterNote       $0B
0008F391 E701                       	dc.b	smpsNoAttack, $01
0008F393 E10F                       	smpsAlterNote       $0F
0008F395 E701                       	dc.b	smpsNoAttack, $01
0008F397 E10B                       	smpsAlterNote       $0B
0008F399 E701                       	dc.b	smpsNoAttack, $01
0008F39B E108                       	smpsAlterNote       $08
0008F39D E701                       	dc.b	smpsNoAttack, $01
0008F39F E104                       	smpsAlterNote       $04
0008F3A1 E701                       	dc.b	smpsNoAttack, $01
0008F3A3 E108                       	smpsAlterNote       $08
0008F3A5 E701                       	dc.b	smpsNoAttack, $01
0008F3A7 E10E                       	smpsAlterNote       $0E
0008F3A9 E701                       	dc.b	smpsNoAttack, $01
0008F3AB E10F                       	smpsAlterNote       $0F
0008F3AD E701                       	dc.b	smpsNoAttack, $01
0008F3AF E10C                       	smpsAlterNote       $0C
0008F3B1 CC0D                       	dc.b	nEb6, $0D
0008F3B3 E109                       	smpsAlterNote       $09
0008F3B5 E701                       	dc.b	smpsNoAttack, $01
0008F3B7 E105                       	smpsAlterNote       $05
0008F3B9 E701                       	dc.b	smpsNoAttack, $01
0008F3BB E106                       	smpsAlterNote       $06
0008F3BD E701                       	dc.b	smpsNoAttack, $01
0008F3BF E10C                       	smpsAlterNote       $0C
0008F3C1 E701                       	dc.b	smpsNoAttack, $01
0008F3C3 E10A                       	smpsAlterNote       $0A
0008F3C5 C907 C902 C902 8001 C901+  	dc.b	nC6, $07, nC6, $02, nC6, $02, nRst, $01, nC6, $01, nRst, $01
0008F3D1 CB0D                       	dc.b	nD6, $0D
0008F3D3 E108                       	smpsAlterNote       $08
0008F3D5 E701                       	dc.b	smpsNoAttack, $01
0008F3D7 E104                       	smpsAlterNote       $04
0008F3D9 E701                       	dc.b	smpsNoAttack, $01
0008F3DB E108                       	smpsAlterNote       $08
0008F3DD E701                       	dc.b	smpsNoAttack, $01
0008F3DF E10B                       	smpsAlterNote       $0B
0008F3E1 E701                       	dc.b	smpsNoAttack, $01
0008F3E3 E10F                       	smpsAlterNote       $0F
0008F3E5 E701                       	dc.b	smpsNoAttack, $01
0008F3E7 E10B                       	smpsAlterNote       $0B
0008F3E9 E701                       	dc.b	smpsNoAttack, $01
0008F3EB E105                       	smpsAlterNote       $05
0008F3ED E701                       	dc.b	smpsNoAttack, $01
0008F3EF E104                       	smpsAlterNote       $04
0008F3F1 E701                       	dc.b	smpsNoAttack, $01
0008F3F3 E108                       	smpsAlterNote       $08
0008F3F5 E701                       	dc.b	smpsNoAttack, $01
0008F3F7 E10E                       	smpsAlterNote       $0E
0008F3F9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F3FD E10B                       	smpsAlterNote       $0B
0008F3FF E701                       	dc.b	smpsNoAttack, $01
0008F401 E105                       	smpsAlterNote       $05
0008F403 E701 E701 8019             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $19
0008F40B 03                         	dc.b	$03
0008F40C E601                       	smpsAlterVol        $01
0008F40E F6F1 D1                    	smpsJump            music84_Jump01
0008F411                            
0008F411                            ; FM5 Data
0008F411                            music84_FM5:
0008F413 E080                       	smpsPan             panLeft, $00
0008F415 8003                       	dc.b	nRst, $03
0008F417 E10D                       	smpsAlterNote       $0D
0008F419 C203 8008                  	dc.b	nF5, $03, nRst, $08
0008F41D E10C                       	smpsAlterNote       $0C
0008F41F C103 800A                  	dc.b	nE5, $03, nRst, $0A
0008F423 E10F                       	smpsAlterNote       $0F
0008F425 BA03 8006                  	dc.b	nA4, $03, nRst, $06
0008F42B E6FE                       	smpsAlterVol        $FE
0008F42D C703 C603 8001             	dc.b	nBb5, $03, nA5, $03, nRst, $01
0008F433 E10D                       	smpsAlterNote       $0D
0008F435 C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
0008F43B E10C                       	smpsAlterNote       $0C
0008F43D C102 8001                  	dc.b	nE5, $02, nRst, $01
0008F441 E10A                       	smpsAlterNote       $0A
0008F443 BD01 8001                  	dc.b	nC5, $01, nRst, $01
0008F449 03                         	dc.b	$03
0008F44A                            
0008F44A                            music84_Jump00:
0008F44A 8004                       	dc.b	nRst, $04
0008F44C E602                       	smpsAlterVol        $02
0008F44E E10D                       	smpsAlterNote       $0D
0008F450 B60D                       	dc.b	nF4, $0D
0008F452 E107                       	smpsAlterNote       $07
0008F454 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F458 E10A                       	smpsAlterNote       $0A
0008F45A E701                       	dc.b	smpsNoAttack, $01
0008F45C E110                       	smpsAlterNote       $10
0008F45E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F462 E10A                       	smpsAlterNote       $0A
0008F464 E701                       	dc.b	smpsNoAttack, $01
0008F466 E107                       	smpsAlterNote       $07
0008F468 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F46C E10D                       	smpsAlterNote       $0D
0008F46E E701                       	dc.b	smpsNoAttack, $01
0008F470 E111                       	smpsAlterNote       $11
0008F472 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008F476 E10D                       	smpsAlterNote       $0D
0008F478 B80D                       	dc.b	nG4, $0D
0008F47A E107                       	smpsAlterNote       $07
0008F47C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F480 E10A                       	smpsAlterNote       $0A
0008F482 E701                       	dc.b	smpsNoAttack, $01
0008F484 E110                       	smpsAlterNote       $10
0008F486 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F48A E10A                       	smpsAlterNote       $0A
0008F48C E701                       	dc.b	smpsNoAttack, $01
0008F48E E107                       	smpsAlterNote       $07
0008F490 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F494 E10D                       	smpsAlterNote       $0D
0008F496 E701                       	dc.b	smpsNoAttack, $01
0008F498 E111                       	smpsAlterNote       $11
0008F49A E701                       	dc.b	smpsNoAttack, $01
0008F49C E110                       	smpsAlterNote       $10
0008F49E E701                       	dc.b	smpsNoAttack, $01
0008F4A0 E10A                       	smpsAlterNote       $0A
0008F4A2 E701                       	dc.b	smpsNoAttack, $01
0008F4A4 E106                       	smpsAlterNote       $06
0008F4A6 E701                       	dc.b	smpsNoAttack, $01
0008F4A8 E10A                       	smpsAlterNote       $0A
0008F4AA E701                       	dc.b	smpsNoAttack, $01
0008F4AC E10D                       	smpsAlterNote       $0D
0008F4AE E701                       	dc.b	smpsNoAttack, $01
0008F4B0 E111                       	smpsAlterNote       $11
0008F4B2 E701                       	dc.b	smpsNoAttack, $01
0008F4B4 E10D                       	smpsAlterNote       $0D
0008F4B6 E701                       	dc.b	smpsNoAttack, $01
0008F4B8 E10F                       	smpsAlterNote       $0F
0008F4BA BA0E                       	dc.b	nA4, $0E
0008F4BC E109                       	smpsAlterNote       $09
0008F4BE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F4C2 E10F                       	smpsAlterNote       $0F
0008F4C4 E701                       	dc.b	smpsNoAttack, $01
0008F4C6 E112                       	smpsAlterNote       $12
0008F4C8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F4CC E10C                       	smpsAlterNote       $0C
0008F4CE E701                       	dc.b	smpsNoAttack, $01
0008F4D0 E108                       	smpsAlterNote       $08
0008F4D2 E701                       	dc.b	smpsNoAttack, $01
0008F4D4 E109                       	smpsAlterNote       $09
0008F4D6 E701                       	dc.b	smpsNoAttack, $01
0008F4D8 E10F                       	smpsAlterNote       $0F
0008F4DA E701                       	dc.b	smpsNoAttack, $01
0008F4DC E113                       	smpsAlterNote       $13
0008F4DE E701                       	dc.b	smpsNoAttack, $01
0008F4E0 E10F                       	smpsAlterNote       $0F
0008F4E2 E701                       	dc.b	smpsNoAttack, $01
0008F4E4 E109                       	smpsAlterNote       $09
0008F4E6 E701                       	dc.b	smpsNoAttack, $01
0008F4E8 E108                       	smpsAlterNote       $08
0008F4EA E701                       	dc.b	smpsNoAttack, $01
0008F4EC E10C                       	smpsAlterNote       $0C
0008F4EE E701                       	dc.b	smpsNoAttack, $01
0008F4F0 E112                       	smpsAlterNote       $12
0008F4F2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F4F6 E10F                       	smpsAlterNote       $0F
0008F4F8 E701                       	dc.b	smpsNoAttack, $01
0008F4FA E109                       	smpsAlterNote       $09
0008F4FC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F500 E10F                       	smpsAlterNote       $0F
0008F502 E701                       	dc.b	smpsNoAttack, $01
0008F504 E112                       	smpsAlterNote       $12
0008F506 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F50A E10C                       	smpsAlterNote       $0C
0008F50C E701                       	dc.b	smpsNoAttack, $01
0008F50E E108                       	smpsAlterNote       $08
0008F510 E701                       	dc.b	smpsNoAttack, $01
0008F512 E109                       	smpsAlterNote       $09
0008F514 E701                       	dc.b	smpsNoAttack, $01
0008F516 E10F                       	smpsAlterNote       $0F
0008F518 E701                       	dc.b	smpsNoAttack, $01
0008F51A E113                       	smpsAlterNote       $13
0008F51C E701                       	dc.b	smpsNoAttack, $01
0008F51E E10F                       	smpsAlterNote       $0F
0008F520 E701                       	dc.b	smpsNoAttack, $01
0008F522 E10C                       	smpsAlterNote       $0C
0008F524 E701                       	dc.b	smpsNoAttack, $01
0008F526 E108                       	smpsAlterNote       $08
0008F528 E701                       	dc.b	smpsNoAttack, $01
0008F52A E109                       	smpsAlterNote       $09
0008F52C 8001                       	dc.b	nRst, $01
0008F52E E10C                       	smpsAlterNote       $0C
0008F530 B50A                       	dc.b	nE4, $0A
0008F532 E10D                       	smpsAlterNote       $0D
0008F534 B60D                       	dc.b	nF4, $0D
0008F536 E10A                       	smpsAlterNote       $0A
0008F538 E701                       	dc.b	smpsNoAttack, $01
0008F53A E106                       	smpsAlterNote       $06
0008F53C E701                       	dc.b	smpsNoAttack, $01
0008F53E E107                       	smpsAlterNote       $07
0008F540 E701                       	dc.b	smpsNoAttack, $01
0008F542 E10D                       	smpsAlterNote       $0D
0008F544 E701                       	dc.b	smpsNoAttack, $01
0008F546 E111                       	smpsAlterNote       $11
0008F548 E701                       	dc.b	smpsNoAttack, $01
0008F54A E10D                       	smpsAlterNote       $0D
0008F54C E701                       	dc.b	smpsNoAttack, $01
0008F54E E10A                       	smpsAlterNote       $0A
0008F550 E701                       	dc.b	smpsNoAttack, $01
0008F552 E106                       	smpsAlterNote       $06
0008F554 E701                       	dc.b	smpsNoAttack, $01
0008F556 E10A                       	smpsAlterNote       $0A
0008F558 E701                       	dc.b	smpsNoAttack, $01
0008F55A E110                       	smpsAlterNote       $10
0008F55C E701                       	dc.b	smpsNoAttack, $01
0008F55E E111                       	smpsAlterNote       $11
0008F560 E701                       	dc.b	smpsNoAttack, $01
0008F562 E10D                       	smpsAlterNote       $0D
0008F564 B80D                       	dc.b	nG4, $0D
0008F566 E10A                       	smpsAlterNote       $0A
0008F568 E701                       	dc.b	smpsNoAttack, $01
0008F56A E106                       	smpsAlterNote       $06
0008F56C E701                       	dc.b	smpsNoAttack, $01
0008F56E E107                       	smpsAlterNote       $07
0008F570 E701                       	dc.b	smpsNoAttack, $01
0008F572 E10D                       	smpsAlterNote       $0D
0008F574 E701                       	dc.b	smpsNoAttack, $01
0008F576 E111                       	smpsAlterNote       $11
0008F578 E701                       	dc.b	smpsNoAttack, $01
0008F57A E10D                       	smpsAlterNote       $0D
0008F57C E701                       	dc.b	smpsNoAttack, $01
0008F57E E10A                       	smpsAlterNote       $0A
0008F580 E701                       	dc.b	smpsNoAttack, $01
0008F582 E106                       	smpsAlterNote       $06
0008F584 E701                       	dc.b	smpsNoAttack, $01
0008F586 E10A                       	smpsAlterNote       $0A
0008F588 E701                       	dc.b	smpsNoAttack, $01
0008F58A E110                       	smpsAlterNote       $10
0008F58C E701                       	dc.b	smpsNoAttack, $01
0008F58E E111                       	smpsAlterNote       $11
0008F590 E701                       	dc.b	smpsNoAttack, $01
0008F592 E10D                       	smpsAlterNote       $0D
0008F594 E701                       	dc.b	smpsNoAttack, $01
0008F596 E107                       	smpsAlterNote       $07
0008F598 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F59C E10A                       	smpsAlterNote       $0A
0008F59E E701                       	dc.b	smpsNoAttack, $01
0008F5A0 E110                       	smpsAlterNote       $10
0008F5A2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F5A6 E10D                       	smpsAlterNote       $0D
0008F5A8 8001                       	dc.b	nRst, $01
0008F5AA E10F                       	smpsAlterNote       $0F
0008F5AC BA0D                       	dc.b	nA4, $0D
0008F5AE E10C                       	smpsAlterNote       $0C
0008F5B0 E701                       	dc.b	smpsNoAttack, $01
0008F5B2 E108                       	smpsAlterNote       $08
0008F5B4 E701                       	dc.b	smpsNoAttack, $01
0008F5B6 E10C                       	smpsAlterNote       $0C
0008F5B8 E701                       	dc.b	smpsNoAttack, $01
0008F5BA E112                       	smpsAlterNote       $12
0008F5BC E701                       	dc.b	smpsNoAttack, $01
0008F5BE E113                       	smpsAlterNote       $13
0008F5C0 E701                       	dc.b	smpsNoAttack, $01
0008F5C2 E10F                       	smpsAlterNote       $0F
0008F5C4 E701                       	dc.b	smpsNoAttack, $01
0008F5C6 E109                       	smpsAlterNote       $09
0008F5C8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F5CC E10C                       	smpsAlterNote       $0C
0008F5CE E701                       	dc.b	smpsNoAttack, $01
0008F5D0 E112                       	smpsAlterNote       $12
0008F5D2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F5D6 E10C                       	smpsAlterNote       $0C
0008F5D8 E701                       	dc.b	smpsNoAttack, $01
0008F5DA E109                       	smpsAlterNote       $09
0008F5DC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F5E0 E10F                       	smpsAlterNote       $0F
0008F5E2 E701                       	dc.b	smpsNoAttack, $01
0008F5E4 E113                       	smpsAlterNote       $13
0008F5E6 E701                       	dc.b	smpsNoAttack, $01
0008F5E8 E112                       	smpsAlterNote       $12
0008F5EA E701                       	dc.b	smpsNoAttack, $01
0008F5EC E10C                       	smpsAlterNote       $0C
0008F5EE E701                       	dc.b	smpsNoAttack, $01
0008F5F0 E108                       	smpsAlterNote       $08
0008F5F2 E701                       	dc.b	smpsNoAttack, $01
0008F5F4 E10C                       	smpsAlterNote       $0C
0008F5F6 E701                       	dc.b	smpsNoAttack, $01
0008F5F8 E10F                       	smpsAlterNote       $0F
0008F5FA E701                       	dc.b	smpsNoAttack, $01
0008F5FC E113                       	smpsAlterNote       $13
0008F5FE E701                       	dc.b	smpsNoAttack, $01
0008F600 E10F                       	smpsAlterNote       $0F
0008F602 E701                       	dc.b	smpsNoAttack, $01
0008F604 E109                       	smpsAlterNote       $09
0008F606 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008F60A E10D                       	smpsAlterNote       $0D
0008F60C B609 8001                  	dc.b	nF4, $09, nRst, $01
0008F610 E10C                       	smpsAlterNote       $0C
0008F612 B506 8001                  	dc.b	nE4, $06, nRst, $01
0008F616 E10B                       	smpsAlterNote       $0B
0008F618 B30D                       	dc.b	nD4, $0D
0008F61A E10C                       	smpsAlterNote       $0C
0008F61C B503 8001                  	dc.b	nE4, $03, nRst, $01
0008F620 E10D                       	smpsAlterNote       $0D
0008F622 B603 B803 8001 BA0D        	dc.b	nF4, $03, nG4, $03, nRst, $01, nA4, $0D
0008F62A E109                       	smpsAlterNote       $09
0008F62C E701                       	dc.b	smpsNoAttack, $01
0008F62E E108                       	smpsAlterNote       $08
0008F630 E701                       	dc.b	smpsNoAttack, $01
0008F632 E10C                       	smpsAlterNote       $0C
0008F634 E701                       	dc.b	smpsNoAttack, $01
0008F636 E112                       	smpsAlterNote       $12
0008F638 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F63C E10F                       	smpsAlterNote       $0F
0008F63E E701                       	dc.b	smpsNoAttack, $01
0008F640 E109                       	smpsAlterNote       $09
0008F642 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F646 E10F                       	smpsAlterNote       $0F
0008F648 E701                       	dc.b	smpsNoAttack, $01
0008F64A E112                       	smpsAlterNote       $12
0008F64C E701                       	dc.b	smpsNoAttack, $01
0008F64E E113                       	smpsAlterNote       $13
0008F650 8001                       	dc.b	nRst, $01
0008F652 E10D                       	smpsAlterNote       $0D
0008F654 C20D                       	dc.b	nF5, $0D
0008F656 E107                       	smpsAlterNote       $07
0008F658 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F65C E10A                       	smpsAlterNote       $0A
0008F65E E701                       	dc.b	smpsNoAttack, $01
0008F660 E110                       	smpsAlterNote       $10
0008F662 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F666 E10A                       	smpsAlterNote       $0A
0008F668 E701                       	dc.b	smpsNoAttack, $01
0008F66A E107                       	smpsAlterNote       $07
0008F66C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F670 E10D                       	smpsAlterNote       $0D
0008F672 E701                       	dc.b	smpsNoAttack, $01
0008F674 E111                       	smpsAlterNote       $11
0008F676 E701                       	dc.b	smpsNoAttack, $01
0008F678 E110                       	smpsAlterNote       $10
0008F67A E701                       	dc.b	smpsNoAttack, $01
0008F67C E10A                       	smpsAlterNote       $0A
0008F67E E701                       	dc.b	smpsNoAttack, $01
0008F680 E106                       	smpsAlterNote       $06
0008F682 E701                       	dc.b	smpsNoAttack, $01
0008F684 E10A                       	smpsAlterNote       $0A
0008F686 E701                       	dc.b	smpsNoAttack, $01
0008F688 E10D                       	smpsAlterNote       $0D
0008F68A E701                       	dc.b	smpsNoAttack, $01
0008F68C E111                       	smpsAlterNote       $11
0008F68E E701                       	dc.b	smpsNoAttack, $01
0008F690 E10D                       	smpsAlterNote       $0D
0008F692 E701                       	dc.b	smpsNoAttack, $01
0008F694 E107                       	smpsAlterNote       $07
0008F696 E701                       	dc.b	smpsNoAttack, $01
0008F698 E106                       	smpsAlterNote       $06
0008F69A E701                       	dc.b	smpsNoAttack, $01
0008F69C E10A                       	smpsAlterNote       $0A
0008F69E E701                       	dc.b	smpsNoAttack, $01
0008F6A0 E110                       	smpsAlterNote       $10
0008F6A2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F6A6 E10D                       	smpsAlterNote       $0D
0008F6A8 E701                       	dc.b	smpsNoAttack, $01
0008F6AA E107                       	smpsAlterNote       $07
0008F6AC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F6B0 E10D                       	smpsAlterNote       $0D
0008F6B2 E701                       	dc.b	smpsNoAttack, $01
0008F6B4 E110                       	smpsAlterNote       $10
0008F6B6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F6BA E10A                       	smpsAlterNote       $0A
0008F6BC E701                       	dc.b	smpsNoAttack, $01
0008F6BE E106                       	smpsAlterNote       $06
0008F6C0 E701                       	dc.b	smpsNoAttack, $01
0008F6C2 E107                       	smpsAlterNote       $07
0008F6C4 E701                       	dc.b	smpsNoAttack, $01
0008F6C6 E10D                       	smpsAlterNote       $0D
0008F6C8 E701                       	dc.b	smpsNoAttack, $01
0008F6CA E111                       	smpsAlterNote       $11
0008F6CC E701                       	dc.b	smpsNoAttack, $01
0008F6CE E10D                       	smpsAlterNote       $0D
0008F6D0 E701                       	dc.b	smpsNoAttack, $01
0008F6D2 E10A                       	smpsAlterNote       $0A
0008F6D4 E701                       	dc.b	smpsNoAttack, $01
0008F6D6 E106                       	smpsAlterNote       $06
0008F6D8 E701                       	dc.b	smpsNoAttack, $01
0008F6DA E10A                       	smpsAlterNote       $0A
0008F6DC E701                       	dc.b	smpsNoAttack, $01
0008F6DE E110                       	smpsAlterNote       $10
0008F6E0 E701                       	dc.b	smpsNoAttack, $01
0008F6E2 E111                       	smpsAlterNote       $11
0008F6E4 E701                       	dc.b	smpsNoAttack, $01
0008F6E6 E10D                       	smpsAlterNote       $0D
0008F6E8 E701                       	dc.b	smpsNoAttack, $01
0008F6EA E107                       	smpsAlterNote       $07
0008F6EC E701                       	dc.b	smpsNoAttack, $01
0008F6EE E10D                       	smpsAlterNote       $0D
0008F6F0 C207                       	dc.b	nF5, $07
0008F6F2 E10C                       	smpsAlterNote       $0C
0008F6F4 C10D                       	dc.b	nE5, $0D
0008F6F6 E109                       	smpsAlterNote       $09
0008F6F8 E701                       	dc.b	smpsNoAttack, $01
0008F6FA E106                       	smpsAlterNote       $06
0008F6FC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F700 E10C                       	smpsAlterNote       $0C
0008F702 E701                       	dc.b	smpsNoAttack, $01
0008F704 E110                       	smpsAlterNote       $10
0008F706 E701                       	dc.b	smpsNoAttack, $01
0008F708 E10F                       	smpsAlterNote       $0F
0008F70A E701                       	dc.b	smpsNoAttack, $01
0008F70C E109                       	smpsAlterNote       $09
0008F70E E701                       	dc.b	smpsNoAttack, $01
0008F710 E105                       	smpsAlterNote       $05
0008F712 E701                       	dc.b	smpsNoAttack, $01
0008F714 E109                       	smpsAlterNote       $09
0008F716 E701                       	dc.b	smpsNoAttack, $01
0008F718 E10C                       	smpsAlterNote       $0C
0008F71A E701                       	dc.b	smpsNoAttack, $01
0008F71C E110                       	smpsAlterNote       $10
0008F71E E701                       	dc.b	smpsNoAttack, $01
0008F720 E10B                       	smpsAlterNote       $0B
0008F722 BF0D                       	dc.b	nD5, $0D
0008F724 E108                       	smpsAlterNote       $08
0008F726 E701                       	dc.b	smpsNoAttack, $01
0008F728 E105                       	smpsAlterNote       $05
0008F72A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F72E E10B                       	smpsAlterNote       $0B
0008F730 E701                       	dc.b	smpsNoAttack, $01
0008F732 E10F                       	smpsAlterNote       $0F
0008F734 E701                       	dc.b	smpsNoAttack, $01
0008F736 E10E                       	smpsAlterNote       $0E
0008F738 E701                       	dc.b	smpsNoAttack, $01
0008F73A E108                       	smpsAlterNote       $08
0008F73C E701                       	dc.b	smpsNoAttack, $01
0008F73E E104                       	smpsAlterNote       $04
0008F740 E701                       	dc.b	smpsNoAttack, $01
0008F742 E108                       	smpsAlterNote       $08
0008F744 E701                       	dc.b	smpsNoAttack, $01
0008F746 E10E                       	smpsAlterNote       $0E
0008F748 E701                       	dc.b	smpsNoAttack, $01
0008F74A E10F                       	smpsAlterNote       $0F
0008F74C E701                       	dc.b	smpsNoAttack, $01
0008F74E E10B                       	smpsAlterNote       $0B
0008F750 E701                       	dc.b	smpsNoAttack, $01
0008F752 E105                       	smpsAlterNote       $05
0008F754 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F758 E108                       	smpsAlterNote       $08
0008F75A E701                       	dc.b	smpsNoAttack, $01
0008F75C E10E                       	smpsAlterNote       $0E
0008F75E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F762 E108                       	smpsAlterNote       $08
0008F764 E701                       	dc.b	smpsNoAttack, $01
0008F766 E105                       	smpsAlterNote       $05
0008F768 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F76C E10B                       	smpsAlterNote       $0B
0008F76E E701                       	dc.b	smpsNoAttack, $01
0008F770 E10F                       	smpsAlterNote       $0F
0008F772 E701                       	dc.b	smpsNoAttack, $01
0008F774 E10E                       	smpsAlterNote       $0E
0008F776 E701                       	dc.b	smpsNoAttack, $01
0008F778 E108                       	smpsAlterNote       $08
0008F77A E701                       	dc.b	smpsNoAttack, $01
0008F77C E104                       	smpsAlterNote       $04
0008F77E E701                       	dc.b	smpsNoAttack, $01
0008F780 E108                       	smpsAlterNote       $08
0008F782 E701                       	dc.b	smpsNoAttack, $01
0008F784 E10B                       	smpsAlterNote       $0B
0008F786 E701                       	dc.b	smpsNoAttack, $01
0008F788 E10F                       	smpsAlterNote       $0F
0008F78A E701                       	dc.b	smpsNoAttack, $01
0008F78C E10B                       	smpsAlterNote       $0B
0008F78E E701                       	dc.b	smpsNoAttack, $01
0008F790 E105                       	smpsAlterNote       $05
0008F792 E701                       	dc.b	smpsNoAttack, $01
0008F794 E104                       	smpsAlterNote       $04
0008F796 E701                       	dc.b	smpsNoAttack, $01
0008F798 E108                       	smpsAlterNote       $08
0008F79A E701                       	dc.b	smpsNoAttack, $01
0008F79C E10E                       	smpsAlterNote       $0E
0008F79E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F7A2 E10B                       	smpsAlterNote       $0B
0008F7A4 E701                       	dc.b	smpsNoAttack, $01
0008F7A6 E105                       	smpsAlterNote       $05
0008F7A8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F7AC E10B                       	smpsAlterNote       $0B
0008F7AE E701                       	dc.b	smpsNoAttack, $01
0008F7B0 E10E                       	smpsAlterNote       $0E
0008F7B2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F7B6 E108                       	smpsAlterNote       $08
0008F7B8 E701                       	dc.b	smpsNoAttack, $01
0008F7BA E105                       	smpsAlterNote       $05
0008F7BC 8001                       	dc.b	nRst, $01
0008F7C0 E601                       	smpsAlterVol        $01
0008F7C2 E10B                       	smpsAlterNote       $0B
0008F7C4 BF06 8001 BF03 BF03 8001+  	dc.b	nD5, $06, nRst, $01, nD5, $03, nD5, $03, nRst, $01, nCs5, $03
0008F7D0 8004                       	dc.b	nRst, $04
0008F7D4 E6FF                       	smpsAlterVol        $FF
0008F7D6 E10D                       	smpsAlterNote       $0D
0008F7D8 B802 8001 B603 B601        	dc.b	nG4, $02, nRst, $01, nF4, $03, nF4, $01
0008F7E0 E10C                       	smpsAlterNote       $0C
0008F7E2 E7B5 0280 01               	dc.b	smpsNoAttack, nE4, $02, nRst, $01
0008F7E7 E10D                       	smpsAlterNote       $0D
0008F7E9 B60D                       	dc.b	nF4, $0D
0008F7EB E10A                       	smpsAlterNote       $0A
0008F7ED E701                       	dc.b	smpsNoAttack, $01
0008F7EF E106                       	smpsAlterNote       $06
0008F7F1 E701                       	dc.b	smpsNoAttack, $01
0008F7F3 E10A                       	smpsAlterNote       $0A
0008F7F5 E701                       	dc.b	smpsNoAttack, $01
0008F7F7 E110                       	smpsAlterNote       $10
0008F7F9 E701                       	dc.b	smpsNoAttack, $01
0008F7FB E111                       	smpsAlterNote       $11
0008F7FD E701                       	dc.b	smpsNoAttack, $01
0008F7FF E10D                       	smpsAlterNote       $0D
0008F801 E701                       	dc.b	smpsNoAttack, $01
0008F803 E107                       	smpsAlterNote       $07
0008F805 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F809 E10A                       	smpsAlterNote       $0A
0008F80B E701                       	dc.b	smpsNoAttack, $01
0008F80D E110                       	smpsAlterNote       $10
0008F80F E701                       	dc.b	smpsNoAttack, $01
0008F811 E111                       	smpsAlterNote       $11
0008F813 8001                       	dc.b	nRst, $01
0008F815 E10D                       	smpsAlterNote       $0D
0008F817 B80D                       	dc.b	nG4, $0D
0008F819 E10A                       	smpsAlterNote       $0A
0008F81B E701                       	dc.b	smpsNoAttack, $01
0008F81D E106                       	smpsAlterNote       $06
0008F81F E701                       	dc.b	smpsNoAttack, $01
0008F821 E10A                       	smpsAlterNote       $0A
0008F823 E701                       	dc.b	smpsNoAttack, $01
0008F825 E110                       	smpsAlterNote       $10
0008F827 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F82B E10D                       	smpsAlterNote       $0D
0008F82D E701                       	dc.b	smpsNoAttack, $01
0008F82F E107                       	smpsAlterNote       $07
0008F831 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F835 E10D                       	smpsAlterNote       $0D
0008F837 E701                       	dc.b	smpsNoAttack, $01
0008F839 E110                       	smpsAlterNote       $10
0008F83B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F83F E10A                       	smpsAlterNote       $0A
0008F841 E701                       	dc.b	smpsNoAttack, $01
0008F843 E106                       	smpsAlterNote       $06
0008F845 E701                       	dc.b	smpsNoAttack, $01
0008F847 E107                       	smpsAlterNote       $07
0008F849 E701                       	dc.b	smpsNoAttack, $01
0008F84B E10D                       	smpsAlterNote       $0D
0008F84D E701                       	dc.b	smpsNoAttack, $01
0008F84F E111                       	smpsAlterNote       $11
0008F851 E701                       	dc.b	smpsNoAttack, $01
0008F853 E10D                       	smpsAlterNote       $0D
0008F855 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008F859 E10F                       	smpsAlterNote       $0F
0008F85B BA02 8001                  	dc.b	nA4, $02, nRst, $01
0008F85F E110                       	smpsAlterNote       $10
0008F861 BB03                       	dc.b	nBb4, $03
0008F863 E10F                       	smpsAlterNote       $0F
0008F865 BA03 8001 C603             	dc.b	nA4, $03, nRst, $01, nA5, $03
0008F86B E110                       	smpsAlterNote       $10
0008F86D C703 8001                  	dc.b	nBb5, $03, nRst, $01
0008F871 E10F                       	smpsAlterNote       $0F
0008F873 C603 D203 8001             	dc.b	nA5, $03, nA6, $03, nRst, $01
0008F879 E110                       	smpsAlterNote       $10
0008F87B D302 8001                  	dc.b	nBb6, $02, nRst, $01
0008F87F E10F                       	smpsAlterNote       $0F
0008F881 D20D                       	dc.b	nA6, $0D
0008F883 E10C                       	smpsAlterNote       $0C
0008F885 E701                       	dc.b	smpsNoAttack, $01
0008F887 E108                       	smpsAlterNote       $08
0008F889 E701                       	dc.b	smpsNoAttack, $01
0008F88B E10C                       	smpsAlterNote       $0C
0008F88D E701                       	dc.b	smpsNoAttack, $01
0008F88F E10F                       	smpsAlterNote       $0F
0008F891 E701                       	dc.b	smpsNoAttack, $01
0008F893 E113                       	smpsAlterNote       $13
0008F895 E701                       	dc.b	smpsNoAttack, $01
0008F897 E10F                       	smpsAlterNote       $0F
0008F899 E701                       	dc.b	smpsNoAttack, $01
0008F89B E109                       	smpsAlterNote       $09
0008F89D E701                       	dc.b	smpsNoAttack, $01
0008F89F E108                       	smpsAlterNote       $08
0008F8A1 E701                       	dc.b	smpsNoAttack, $01
0008F8A3 E10C                       	smpsAlterNote       $0C
0008F8A5 E701                       	dc.b	smpsNoAttack, $01
0008F8A7 E112                       	smpsAlterNote       $12
0008F8A9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F8AD E10F                       	smpsAlterNote       $0F
0008F8AF E701                       	dc.b	smpsNoAttack, $01
0008F8B1 E109                       	smpsAlterNote       $09
0008F8B3 E701 E701 8007             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $07
0008F8B9 E10D                       	smpsAlterNote       $0D
0008F8BB CE07                       	dc.b	nF6, $07
0008F8BD E10C                       	smpsAlterNote       $0C
0008F8BF CD06 8001                  	dc.b	nE6, $06, nRst, $01
0008F8C3 E10D                       	smpsAlterNote       $0D
0008F8C5 CE03                       	dc.b	nF6, $03
0008F8C7 E10C                       	smpsAlterNote       $0C
0008F8C9 CC0D                       	dc.b	nEb6, $0D
0008F8CB E109                       	smpsAlterNote       $09
0008F8CD E701                       	dc.b	smpsNoAttack, $01
0008F8CF E106                       	smpsAlterNote       $06
0008F8D1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F8D5 E10C                       	smpsAlterNote       $0C
0008F8D7 E701                       	dc.b	smpsNoAttack, $01
0008F8D9 E110                       	smpsAlterNote       $10
0008F8DB E701                       	dc.b	smpsNoAttack, $01
0008F8DD E10F                       	smpsAlterNote       $0F
0008F8DF E701                       	dc.b	smpsNoAttack, $01
0008F8E1 E109                       	smpsAlterNote       $09
0008F8E3 E701                       	dc.b	smpsNoAttack, $01
0008F8E5 E105                       	smpsAlterNote       $05
0008F8E7 E701                       	dc.b	smpsNoAttack, $01
0008F8E9 E109                       	smpsAlterNote       $09
0008F8EB E701                       	dc.b	smpsNoAttack, $01
0008F8ED E10C                       	smpsAlterNote       $0C
0008F8EF E701                       	dc.b	smpsNoAttack, $01
0008F8F1 E110                       	smpsAlterNote       $10
0008F8F3 E701                       	dc.b	smpsNoAttack, $01
0008F8F5 E10C                       	smpsAlterNote       $0C
0008F8F7 E701                       	dc.b	smpsNoAttack, $01
0008F8F9 E106                       	smpsAlterNote       $06
0008F8FB E701                       	dc.b	smpsNoAttack, $01
0008F8FD E105                       	smpsAlterNote       $05
0008F8FF E701                       	dc.b	smpsNoAttack, $01
0008F901 E109                       	smpsAlterNote       $09
0008F903 E701                       	dc.b	smpsNoAttack, $01
0008F905 E10F                       	smpsAlterNote       $0F
0008F907 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F90B E10C                       	smpsAlterNote       $0C
0008F90D E701                       	dc.b	smpsNoAttack, $01
0008F90F E10B                       	smpsAlterNote       $0B
0008F911 CB03 8001 CA02 8001 CB03   	dc.b	nD6, $03, nRst, $01, nCs6, $02, nRst, $01, nD6, $03
0008F91B E10F                       	smpsAlterNote       $0F
0008F91D C603 8001 C503 C603 8001   	dc.b	nA5, $03, nRst, $01, nAb5, $03, nA5, $03, nRst, $01
0008F927 E10D                       	smpsAlterNote       $0D
0008F929 C203                       	dc.b	nF5, $03
0008F92B E10C                       	smpsAlterNote       $0C
0008F92D C103 8001                  	dc.b	nE5, $03, nRst, $01
0008F931 E10D                       	smpsAlterNote       $0D
0008F933 C20D                       	dc.b	nF5, $0D
0008F935 E10C                       	smpsAlterNote       $0C
0008F937 C10D 8001                  	dc.b	nE5, $0D, nRst, $01
0008F93B E10B                       	smpsAlterNote       $0B
0008F93D BF0D                       	dc.b	nD5, $0D
0008F93F E108                       	smpsAlterNote       $08
0008F941 E701                       	dc.b	smpsNoAttack, $01
0008F943 E104                       	smpsAlterNote       $04
0008F945 E701                       	dc.b	smpsNoAttack, $01
0008F947 E108                       	smpsAlterNote       $08
0008F949 E701                       	dc.b	smpsNoAttack, $01
0008F94B E10E                       	smpsAlterNote       $0E
0008F94D E701                       	dc.b	smpsNoAttack, $01
0008F94F E10F                       	smpsAlterNote       $0F
0008F951 E701                       	dc.b	smpsNoAttack, $01
0008F953 E10B                       	smpsAlterNote       $0B
0008F955 E701                       	dc.b	smpsNoAttack, $01
0008F957 E105                       	smpsAlterNote       $05
0008F959 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F95D E108                       	smpsAlterNote       $08
0008F95F E701                       	dc.b	smpsNoAttack, $01
0008F961 E10E                       	smpsAlterNote       $0E
0008F963 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F967 E108                       	smpsAlterNote       $08
0008F969 E701                       	dc.b	smpsNoAttack, $01
0008F96B E105                       	smpsAlterNote       $05
0008F96D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F971 E10B                       	smpsAlterNote       $0B
0008F973 E701                       	dc.b	smpsNoAttack, $01
0008F975 E10F                       	smpsAlterNote       $0F
0008F977 E701                       	dc.b	smpsNoAttack, $01
0008F979 E10E                       	smpsAlterNote       $0E
0008F97B E701                       	dc.b	smpsNoAttack, $01
0008F97D E108                       	smpsAlterNote       $08
0008F97F E701                       	dc.b	smpsNoAttack, $01
0008F981 E104                       	smpsAlterNote       $04
0008F983 E701                       	dc.b	smpsNoAttack, $01
0008F985 E108                       	smpsAlterNote       $08
0008F987 E701                       	dc.b	smpsNoAttack, $01
0008F989 E10B                       	smpsAlterNote       $0B
0008F98B E701                       	dc.b	smpsNoAttack, $01
0008F98D E10F                       	smpsAlterNote       $0F
0008F98F E701                       	dc.b	smpsNoAttack, $01
0008F991 E10B                       	smpsAlterNote       $0B
0008F993 E701                       	dc.b	smpsNoAttack, $01
0008F995 E105                       	smpsAlterNote       $05
0008F997 E701                       	dc.b	smpsNoAttack, $01
0008F999 E104                       	smpsAlterNote       $04
0008F99B E701                       	dc.b	smpsNoAttack, $01
0008F99D E108                       	smpsAlterNote       $08
0008F99F E701                       	dc.b	smpsNoAttack, $01
0008F9A1 E10E                       	smpsAlterNote       $0E
0008F9A3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F9A7 E10B                       	smpsAlterNote       $0B
0008F9A9 E701                       	dc.b	smpsNoAttack, $01
0008F9AB E105                       	smpsAlterNote       $05
0008F9AD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F9B1 E10B                       	smpsAlterNote       $0B
0008F9B3 E701                       	dc.b	smpsNoAttack, $01
0008F9B5 E10E                       	smpsAlterNote       $0E
0008F9B7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F9BB E108                       	smpsAlterNote       $08
0008F9BD E701                       	dc.b	smpsNoAttack, $01
0008F9BF E104                       	smpsAlterNote       $04
0008F9C1 E701                       	dc.b	smpsNoAttack, $01
0008F9C3 E105                       	smpsAlterNote       $05
0008F9C5 E701                       	dc.b	smpsNoAttack, $01
0008F9C7 E10B                       	smpsAlterNote       $0B
0008F9C9 E701                       	dc.b	smpsNoAttack, $01
0008F9CB E10F                       	smpsAlterNote       $0F
0008F9CD E701                       	dc.b	smpsNoAttack, $01
0008F9CF E10B                       	smpsAlterNote       $0B
0008F9D1 E701                       	dc.b	smpsNoAttack, $01
0008F9D3 E108                       	smpsAlterNote       $08
0008F9D5 E701                       	dc.b	smpsNoAttack, $01
0008F9D7 E104                       	smpsAlterNote       $04
0008F9D9 E701                       	dc.b	smpsNoAttack, $01
0008F9DB E108                       	smpsAlterNote       $08
0008F9DD E701                       	dc.b	smpsNoAttack, $01
0008F9DF E10E                       	smpsAlterNote       $0E
0008F9E1 E701                       	dc.b	smpsNoAttack, $01
0008F9E3 E10F                       	smpsAlterNote       $0F
0008F9E5 E701                       	dc.b	smpsNoAttack, $01
0008F9E7 E10B                       	smpsAlterNote       $0B
0008F9E9 E701                       	dc.b	smpsNoAttack, $01
0008F9EB E105                       	smpsAlterNote       $05
0008F9ED E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F9F1 E108                       	smpsAlterNote       $08
0008F9F3 E701                       	dc.b	smpsNoAttack, $01
0008F9F5 E10E                       	smpsAlterNote       $0E
0008F9F7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F9FB E108                       	smpsAlterNote       $08
0008F9FD E701                       	dc.b	smpsNoAttack, $01
0008F9FF E105                       	smpsAlterNote       $05
0008FA01 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FA05 E10B                       	smpsAlterNote       $0B
0008FA07 E701                       	dc.b	smpsNoAttack, $01
0008FA09 E10F                       	smpsAlterNote       $0F
0008FA0B E701                       	dc.b	smpsNoAttack, $01
0008FA0D E10E                       	smpsAlterNote       $0E
0008FA0F E701                       	dc.b	smpsNoAttack, $01
0008FA11 E108                       	smpsAlterNote       $08
0008FA13 E701                       	dc.b	smpsNoAttack, $01
0008FA15 E104                       	smpsAlterNote       $04
0008FA17 E701                       	dc.b	smpsNoAttack, $01
0008FA19 E108                       	smpsAlterNote       $08
0008FA1B E701                       	dc.b	smpsNoAttack, $01
0008FA1D E10B                       	smpsAlterNote       $0B
0008FA1F E701                       	dc.b	smpsNoAttack, $01
0008FA21 E10F                       	smpsAlterNote       $0F
0008FA23 E701                       	dc.b	smpsNoAttack, $01
0008FA25 E10B                       	smpsAlterNote       $0B
0008FA27 E701                       	dc.b	smpsNoAttack, $01
0008FA29 E105                       	smpsAlterNote       $05
0008FA2B E701                       	dc.b	smpsNoAttack, $01
0008FA2D E104                       	smpsAlterNote       $04
0008FA2F E701                       	dc.b	smpsNoAttack, $01
0008FA31 E105                       	smpsAlterNote       $05
0008FA33 8001                       	dc.b	nRst, $01
0008FA35 E10D                       	smpsAlterNote       $0D
0008FA37 C20D                       	dc.b	nF5, $0D
0008FA39 E107                       	smpsAlterNote       $07
0008FA3B E701                       	dc.b	smpsNoAttack, $01
0008FA3D E106                       	smpsAlterNote       $06
0008FA3F E701                       	dc.b	smpsNoAttack, $01
0008FA41 E10A                       	smpsAlterNote       $0A
0008FA43 E701                       	dc.b	smpsNoAttack, $01
0008FA45 E110                       	smpsAlterNote       $10
0008FA47 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FA4B E10D                       	smpsAlterNote       $0D
0008FA4D E701                       	dc.b	smpsNoAttack, $01
0008FA4F E107                       	smpsAlterNote       $07
0008FA51 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FA55 E10D                       	smpsAlterNote       $0D
0008FA57 E701                       	dc.b	smpsNoAttack, $01
0008FA59 E110                       	smpsAlterNote       $10
0008FA5B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FA5F E10A                       	smpsAlterNote       $0A
0008FA61 E701                       	dc.b	smpsNoAttack, $01
0008FA63 E106                       	smpsAlterNote       $06
0008FA65 E701                       	dc.b	smpsNoAttack, $01
0008FA67 E107                       	smpsAlterNote       $07
0008FA69 E701                       	dc.b	smpsNoAttack, $01
0008FA6B E10D                       	smpsAlterNote       $0D
0008FA6D E701                       	dc.b	smpsNoAttack, $01
0008FA6F E111                       	smpsAlterNote       $11
0008FA71 E701                       	dc.b	smpsNoAttack, $01
0008FA73 E10D                       	smpsAlterNote       $0D
0008FA75 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008FA79 E10C                       	smpsAlterNote       $0C
0008FA7B C10D                       	dc.b	nE5, $0D
0008FA7D E10D                       	smpsAlterNote       $0D
0008FA7F C20A                       	dc.b	nF5, $0A
0008FA81 E10C                       	smpsAlterNote       $0C
0008FA83 C10E                       	dc.b	nE5, $0E
0008FA85 E106                       	smpsAlterNote       $06
0008FA87 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FA8B E10C                       	smpsAlterNote       $0C
0008FA8D E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008FA91 E10B                       	smpsAlterNote       $0B
0008FA93 BF0D                       	dc.b	nD5, $0D
0008FA95 E10C                       	smpsAlterNote       $0C
0008FA97 C107                       	dc.b	nE5, $07
0008FA99 E10D                       	smpsAlterNote       $0D
0008FA9B C206 8001 C406 8001 C603   	dc.b	nF5, $06, nRst, $01, nG5, $06, nRst, $01, nA5, $03
0008FAA5 E110                       	smpsAlterNote       $10
0008FAA7 C707 C703 8001             	dc.b	nBb5, $07, nBb5, $03, nRst, $01
0008FAAD E10F                       	smpsAlterNote       $0F
0008FAAF C602 8001 D206 8001        	dc.b	nA5, $02, nRst, $01, nA6, $06, nRst, $01
0008FAB7 E10D                       	smpsAlterNote       $0D
0008FAB9 D003                       	dc.b	nG6, $03
0008FABD E0C0                       	smpsPan             panCenter, $00
0008FABF E6FF                       	smpsAlterVol        $FF
0008FAC1 AA06 800F AA03 AA03 8019+  	dc.b	nF3, $06, nRst, $0F, nF3, $03, nF3, $03, nRst, $19, nF3, $02
0008FACD 8001                       	dc.b	nRst, $01
0008FACF E10C                       	smpsAlterNote       $0C
0008FAD1 A906 800F A902 8001        	dc.b	nE3, $06, nRst, $0F, nE3, $02, nRst, $01
0008FADB E604                       	smpsAlterVol        $04
0008FADD E10B                       	smpsAlterNote       $0B
0008FADF B306 8001                  	dc.b	nD4, $06, nRst, $01
0008FAE3 E10F                       	smpsAlterNote       $0F
0008FAE5 AE03                       	dc.b	nA3, $03
0008FAE7 E10D                       	smpsAlterNote       $0D
0008FAE9 B603 8001                  	dc.b	nF4, $03, nRst, $01
0008FAED E10C                       	smpsAlterNote       $0C
0008FAEF B506 8001                  	dc.b	nE4, $06, nRst, $01
0008FAF3 E10B                       	smpsAlterNote       $0B
0008FAF5 B302 8001                  	dc.b	nD4, $02, nRst, $01
0008FAF9 E10A                       	smpsAlterNote       $0A
0008FAFB B103                       	dc.b	nC4, $03
0008FAFD E110                       	smpsAlterNote       $10
0008FAFF AF03 8001                  	dc.b	nBb3, $03, nRst, $01
0008FB03 E10F                       	smpsAlterNote       $0F
0008FB05 AE03 800A                  	dc.b	nA3, $03, nRst, $0A
0008FB09 E080                       	smpsPan             panLeft, $00
0008FB0B 01                         	dc.b	$01
0008FB0E E6FB                       	smpsAlterVol        $FB
0008FB10 E1E4                       	smpsAlterNote       $E4
0008FB12 C501                       	dc.b	nAb5, $01
0008FB14 E1F4                       	smpsAlterNote       $F4
0008FB16 E701                       	dc.b	smpsNoAttack, $01
0008FB18 E104                       	smpsAlterNote       $04
0008FB1A E701                       	dc.b	smpsNoAttack, $01
0008FB1C E114                       	smpsAlterNote       $14
0008FB1E E701                       	dc.b	smpsNoAttack, $01
0008FB20 E11C                       	smpsAlterNote       $1C
0008FB22 E701                       	dc.b	smpsNoAttack, $01
0008FB24 E1EF                       	smpsAlterNote       $EF
0008FB26 E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
0008FB29 E1FF                       	smpsAlterNote       $FF
0008FB2B E701                       	dc.b	smpsNoAttack, $01
0008FB2D E10F                       	smpsAlterNote       $0F
0008FB2F C606                       	dc.b	nA5, $06
0008FB31 E109                       	smpsAlterNote       $09
0008FB33 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FB37 E10F                       	smpsAlterNote       $0F
0008FB39 E701                       	dc.b	smpsNoAttack, $01
0008FB3B E112                       	smpsAlterNote       $12
0008FB3D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FB41 E10C                       	smpsAlterNote       $0C
0008FB43 E701                       	dc.b	smpsNoAttack, $01
0008FB45 E108                       	smpsAlterNote       $08
0008FB47 E701                       	dc.b	smpsNoAttack, $01
0008FB49 E109                       	smpsAlterNote       $09
0008FB4B E701                       	dc.b	smpsNoAttack, $01
0008FB4D E10F                       	smpsAlterNote       $0F
0008FB4F E701                       	dc.b	smpsNoAttack, $01
0008FB51 E113                       	smpsAlterNote       $13
0008FB53 E701                       	dc.b	smpsNoAttack, $01
0008FB55 E10F                       	smpsAlterNote       $0F
0008FB57 E701                       	dc.b	smpsNoAttack, $01
0008FB59 E10C                       	smpsAlterNote       $0C
0008FB5B E701                       	dc.b	smpsNoAttack, $01
0008FB5D E108                       	smpsAlterNote       $08
0008FB5F E701                       	dc.b	smpsNoAttack, $01
0008FB61 E10C                       	smpsAlterNote       $0C
0008FB63 E701                       	dc.b	smpsNoAttack, $01
0008FB65 E112                       	smpsAlterNote       $12
0008FB67 E701                       	dc.b	smpsNoAttack, $01
0008FB69 E113                       	smpsAlterNote       $13
0008FB6B E701                       	dc.b	smpsNoAttack, $01
0008FB6D E10F                       	smpsAlterNote       $0F
0008FB6F E701                       	dc.b	smpsNoAttack, $01
0008FB71 E109                       	smpsAlterNote       $09
0008FB73 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FB77 E10C                       	smpsAlterNote       $0C
0008FB79 E701                       	dc.b	smpsNoAttack, $01
0008FB7B E112                       	smpsAlterNote       $12
0008FB7D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FB81 E10C                       	smpsAlterNote       $0C
0008FB83 E701                       	dc.b	smpsNoAttack, $01
0008FB85 E109                       	smpsAlterNote       $09
0008FB87 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FB8B E10F                       	smpsAlterNote       $0F
0008FB8D E701                       	dc.b	smpsNoAttack, $01
0008FB8F E113                       	smpsAlterNote       $13
0008FB91 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008FB95 E10D                       	smpsAlterNote       $0D
0008FB97 C402 8001 C203             	dc.b	nG5, $02, nRst, $01, nF5, $03
0008FB9D E10C                       	smpsAlterNote       $0C
0008FB9F C102 8001                  	dc.b	nE5, $02, nRst, $01
0008FBA3 E10D                       	smpsAlterNote       $0D
0008FBA5 C201 8001                  	dc.b	nF5, $01, nRst, $01
0008FBA9 E10C                       	smpsAlterNote       $0C
0008FBAB C102                       	dc.b	nE5, $02
0008FBAD E10B                       	smpsAlterNote       $0B
0008FBAF BF02 8001                  	dc.b	nD5, $02, nRst, $01
0008FBB3 E10C                       	smpsAlterNote       $0C
0008FBB5 C101 8001                  	dc.b	nE5, $01, nRst, $01
0008FBB9 E10B                       	smpsAlterNote       $0B
0008FBBB BF02                       	dc.b	nD5, $02
0008FBBD E10A                       	smpsAlterNote       $0A
0008FBBF BD02 BF02 8001 BD01 8001   	dc.b	nC5, $02, nD5, $02, nRst, $01, nC5, $01, nRst, $01
0008FBC9 E110                       	smpsAlterNote       $10
0008FBCB BB02                       	dc.b	nBb4, $02
0008FBCD E10A                       	smpsAlterNote       $0A
0008FBCF BD02 8001                  	dc.b	nC5, $02, nRst, $01
0008FBD3 E110                       	smpsAlterNote       $10
0008FBD5 BB01 8001                  	dc.b	nBb4, $01, nRst, $01
0008FBD9 E10F                       	smpsAlterNote       $0F
0008FBDB BA01 8001                  	dc.b	nA4, $01, nRst, $01
0008FBDF E110                       	smpsAlterNote       $10
0008FBE1 BB02                       	dc.b	nBb4, $02
0008FBE3 E10F                       	smpsAlterNote       $0F
0008FBE5 BA02 8001 B901 8001 BA02   	dc.b	nA4, $02, nRst, $01, nAb4, $01, nRst, $01, nA4, $02
0008FBEF E10C                       	smpsAlterNote       $0C
0008FBF1 B502 B501 C101 8001        	dc.b	nE4, $02, nE4, $01, nE5, $01, nRst, $01
0008FBF9 E10B                       	smpsAlterNote       $0B
0008FBFB BE01 8001                  	dc.b	nCs5, $01, nRst, $01
0008FBFF E10F                       	smpsAlterNote       $0F
0008FC01 BA02                       	dc.b	nA4, $02
0008FC05 E0C0                       	smpsPan             panCenter, $00
0008FC07 E601                       	smpsAlterVol        $01
0008FC09 E109                       	smpsAlterNote       $09
0008FC0B AA07 800E AA03 AA07 8015+  	dc.b	nF3, $07, nRst, $0E, nF3, $03, nF3, $07, nRst, $15, nF3, $03
0008FC17 E108                       	smpsAlterNote       $08
0008FC19 A906 800F A903             	dc.b	nE3, $06, nRst, $0F, nE3, $03
0008FC1F E107                       	smpsAlterNote       $07
0008FC21 B306 8001 AE03             	dc.b	nD4, $06, nRst, $01, nA3, $03
0008FC27 E109                       	smpsAlterNote       $09
0008FC29 B603 8001                  	dc.b	nF4, $03, nRst, $01
0008FC2D E108                       	smpsAlterNote       $08
0008FC2F B506 8001                  	dc.b	nE4, $06, nRst, $01
0008FC33 E107                       	smpsAlterNote       $07
0008FC35 B302 8001                  	dc.b	nD4, $02, nRst, $01
0008FC39 E106                       	smpsAlterNote       $06
0008FC3B B103                       	dc.b	nC4, $03
0008FC3D E10C                       	smpsAlterNote       $0C
0008FC3F AF03 8001                  	dc.b	nBb3, $03, nRst, $01
0008FC45 E080                       	smpsPan             panLeft, $00
0008FC47 07                         	dc.b	$07
0008FC48 E6FE                       	smpsAlterVol        $FE
0008FC4A E10B                       	smpsAlterNote       $0B
0008FC4C B20D                       	dc.b	nCs4, $0D
0008FC4E E105                       	smpsAlterNote       $05
0008FC50 E701                       	dc.b	smpsNoAttack, $01
0008FC52 E104                       	smpsAlterNote       $04
0008FC54 E701                       	dc.b	smpsNoAttack, $01
0008FC56 E108                       	smpsAlterNote       $08
0008FC58 E701                       	dc.b	smpsNoAttack, $01
0008FC5A E10E                       	smpsAlterNote       $0E
0008FC5C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FC60 E10B                       	smpsAlterNote       $0B
0008FC62 E701                       	dc.b	smpsNoAttack, $01
0008FC64 E105                       	smpsAlterNote       $05
0008FC66 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FC6A E10B                       	smpsAlterNote       $0B
0008FC6C E701                       	dc.b	smpsNoAttack, $01
0008FC6E E10E                       	smpsAlterNote       $0E
0008FC70 E701                       	dc.b	smpsNoAttack, $01
0008FC72 E10F                       	smpsAlterNote       $0F
0008FC74 8001                       	dc.b	nRst, $01
0008FC76 E10B                       	smpsAlterNote       $0B
0008FC78 B30D                       	dc.b	nD4, $0D
0008FC7A E105                       	smpsAlterNote       $05
0008FC7C E701                       	dc.b	smpsNoAttack, $01
0008FC7E E104                       	smpsAlterNote       $04
0008FC80 E701                       	dc.b	smpsNoAttack, $01
0008FC82 E108                       	smpsAlterNote       $08
0008FC84 E701                       	dc.b	smpsNoAttack, $01
0008FC86 E10E                       	smpsAlterNote       $0E
0008FC88 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FC8C E10B                       	smpsAlterNote       $0B
0008FC8E E701                       	dc.b	smpsNoAttack, $01
0008FC90 E105                       	smpsAlterNote       $05
0008FC92 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FC96 E10B                       	smpsAlterNote       $0B
0008FC98 E701                       	dc.b	smpsNoAttack, $01
0008FC9A E10E                       	smpsAlterNote       $0E
0008FC9C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FCA0 E108                       	smpsAlterNote       $08
0008FCA2 E701                       	dc.b	smpsNoAttack, $01
0008FCA4 E104                       	smpsAlterNote       $04
0008FCA6 E701                       	dc.b	smpsNoAttack, $01
0008FCA8 E105                       	smpsAlterNote       $05
0008FCAA E701                       	dc.b	smpsNoAttack, $01
0008FCAC E10B                       	smpsAlterNote       $0B
0008FCAE E701                       	dc.b	smpsNoAttack, $01
0008FCB0 E10F                       	smpsAlterNote       $0F
0008FCB2 E701                       	dc.b	smpsNoAttack, $01
0008FCB4 E10B                       	smpsAlterNote       $0B
0008FCB6 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008FCBA E10C                       	smpsAlterNote       $0C
0008FCBC B50D                       	dc.b	nE4, $0D
0008FCBE E106                       	smpsAlterNote       $06
0008FCC0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FCC4 E10C                       	smpsAlterNote       $0C
0008FCC6 E701                       	dc.b	smpsNoAttack, $01
0008FCC8 E10F                       	smpsAlterNote       $0F
0008FCCA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FCCE E109                       	smpsAlterNote       $09
0008FCD0 E701                       	dc.b	smpsNoAttack, $01
0008FCD2 E105                       	smpsAlterNote       $05
0008FCD4 E701                       	dc.b	smpsNoAttack, $01
0008FCD6 E106                       	smpsAlterNote       $06
0008FCD8 E701                       	dc.b	smpsNoAttack, $01
0008FCDA E10C                       	smpsAlterNote       $0C
0008FCDC E701                       	dc.b	smpsNoAttack, $01
0008FCDE E110                       	smpsAlterNote       $10
0008FCE0 E701                       	dc.b	smpsNoAttack, $01
0008FCE2 E10B                       	smpsAlterNote       $0B
0008FCE4 B30E                       	dc.b	nD4, $0E
0008FCE6 E105                       	smpsAlterNote       $05
0008FCE8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FCEC E10B                       	smpsAlterNote       $0B
0008FCEE E701                       	dc.b	smpsNoAttack, $01
0008FCF0 E10E                       	smpsAlterNote       $0E
0008FCF2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FCF6 E108                       	smpsAlterNote       $08
0008FCF8 E701                       	dc.b	smpsNoAttack, $01
0008FCFA E104                       	smpsAlterNote       $04
0008FCFC E701                       	dc.b	smpsNoAttack, $01
0008FCFE E105                       	smpsAlterNote       $05
0008FD00 E701                       	dc.b	smpsNoAttack, $01
0008FD02 E10B                       	smpsAlterNote       $0B
0008FD04 E701                       	dc.b	smpsNoAttack, $01
0008FD06 E10F                       	smpsAlterNote       $0F
0008FD08 E701                       	dc.b	smpsNoAttack, $01
0008FD0A E10B                       	smpsAlterNote       $0B
0008FD0C E701                       	dc.b	smpsNoAttack, $01
0008FD0E E108                       	smpsAlterNote       $08
0008FD10 E701                       	dc.b	smpsNoAttack, $01
0008FD12 E104                       	smpsAlterNote       $04
0008FD14 E701                       	dc.b	smpsNoAttack, $01
0008FD16 E108                       	smpsAlterNote       $08
0008FD18 E701                       	dc.b	smpsNoAttack, $01
0008FD1A E10E                       	smpsAlterNote       $0E
0008FD1C E701                       	dc.b	smpsNoAttack, $01
0008FD1E E10F                       	smpsAlterNote       $0F
0008FD20 E701                       	dc.b	smpsNoAttack, $01
0008FD22 E10B                       	smpsAlterNote       $0B
0008FD24 E701 B20D                  	dc.b	smpsNoAttack, $01, nCs4, $0D
0008FD28 E108                       	smpsAlterNote       $08
0008FD2A E701                       	dc.b	smpsNoAttack, $01
0008FD2C E105                       	smpsAlterNote       $05
0008FD2E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FD32 E10B                       	smpsAlterNote       $0B
0008FD34 E701                       	dc.b	smpsNoAttack, $01
0008FD36 E10F                       	smpsAlterNote       $0F
0008FD38 E701                       	dc.b	smpsNoAttack, $01
0008FD3A E10E                       	smpsAlterNote       $0E
0008FD3C E701                       	dc.b	smpsNoAttack, $01
0008FD3E E108                       	smpsAlterNote       $08
0008FD40 E701                       	dc.b	smpsNoAttack, $01
0008FD42 E104                       	smpsAlterNote       $04
0008FD44 E701                       	dc.b	smpsNoAttack, $01
0008FD46 E108                       	smpsAlterNote       $08
0008FD48 E701                       	dc.b	smpsNoAttack, $01
0008FD4A E10B                       	smpsAlterNote       $0B
0008FD4C E701                       	dc.b	smpsNoAttack, $01
0008FD4E E10F                       	smpsAlterNote       $0F
0008FD50 E701                       	dc.b	smpsNoAttack, $01
0008FD52 E10B                       	smpsAlterNote       $0B
0008FD54 B30D                       	dc.b	nD4, $0D
0008FD56 E108                       	smpsAlterNote       $08
0008FD58 E701                       	dc.b	smpsNoAttack, $01
0008FD5A E105                       	smpsAlterNote       $05
0008FD5C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FD60 E10B                       	smpsAlterNote       $0B
0008FD62 E701                       	dc.b	smpsNoAttack, $01
0008FD64 E10F                       	smpsAlterNote       $0F
0008FD66 E701                       	dc.b	smpsNoAttack, $01
0008FD68 E10E                       	smpsAlterNote       $0E
0008FD6A E701                       	dc.b	smpsNoAttack, $01
0008FD6C E108                       	smpsAlterNote       $08
0008FD6E E701                       	dc.b	smpsNoAttack, $01
0008FD70 E104                       	smpsAlterNote       $04
0008FD72 E701                       	dc.b	smpsNoAttack, $01
0008FD74 E108                       	smpsAlterNote       $08
0008FD76 E701                       	dc.b	smpsNoAttack, $01
0008FD78 E10B                       	smpsAlterNote       $0B
0008FD7A E701                       	dc.b	smpsNoAttack, $01
0008FD7C E10F                       	smpsAlterNote       $0F
0008FD7E E701                       	dc.b	smpsNoAttack, $01
0008FD80 E10B                       	smpsAlterNote       $0B
0008FD82 E701                       	dc.b	smpsNoAttack, $01
0008FD84 E105                       	smpsAlterNote       $05
0008FD86 E701                       	dc.b	smpsNoAttack, $01
0008FD88 E104                       	smpsAlterNote       $04
0008FD8A E701                       	dc.b	smpsNoAttack, $01
0008FD8C E108                       	smpsAlterNote       $08
0008FD8E E701                       	dc.b	smpsNoAttack, $01
0008FD90 E10E                       	smpsAlterNote       $0E
0008FD92 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FD96 E10B                       	smpsAlterNote       $0B
0008FD98 8001 B20D                  	dc.b	nRst, $01, nCs4, $0D
0008FD9C E108                       	smpsAlterNote       $08
0008FD9E E701                       	dc.b	smpsNoAttack, $01
0008FDA0 E104                       	smpsAlterNote       $04
0008FDA2 E701                       	dc.b	smpsNoAttack, $01
0008FDA4 E108                       	smpsAlterNote       $08
0008FDA6 E701                       	dc.b	smpsNoAttack, $01
0008FDA8 E10B                       	smpsAlterNote       $0B
0008FDAA E701                       	dc.b	smpsNoAttack, $01
0008FDAE E0C0                       	smpsPan             panCenter, $00
0008FDB0 E601                       	smpsAlterVol        $01
0008FDB2 E108                       	smpsAlterNote       $08
0008FDB4 A906 8001 A903 A903 8001+  	dc.b	nE3, $06, nRst, $01, nE3, $03, nE3, $03, nRst, $01, nE3, $06
0008FDC0 8008 A902 8001             	dc.b	nRst, $08, nE3, $02, nRst, $01
0008FDC8 E080                       	smpsPan             panLeft, $00
0008FDCA 07                         	dc.b	$07
0008FDCB E6FF                       	smpsAlterVol        $FF
0008FDCD E10D                       	smpsAlterNote       $0D
0008FDCF B60D                       	dc.b	nF4, $0D
0008FDD1 E10A                       	smpsAlterNote       $0A
0008FDD3 E701                       	dc.b	smpsNoAttack, $01
0008FDD5 E106                       	smpsAlterNote       $06
0008FDD7 E701                       	dc.b	smpsNoAttack, $01
0008FDD9 E10A                       	smpsAlterNote       $0A
0008FDDB E701                       	dc.b	smpsNoAttack, $01
0008FDDD E110                       	smpsAlterNote       $10
0008FDDF E701                       	dc.b	smpsNoAttack, $01
0008FDE1 E111                       	smpsAlterNote       $11
0008FDE3 E701                       	dc.b	smpsNoAttack, $01
0008FDE5 E10D                       	smpsAlterNote       $0D
0008FDE7 E701                       	dc.b	smpsNoAttack, $01
0008FDE9 E107                       	smpsAlterNote       $07
0008FDEB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FDEF E10A                       	smpsAlterNote       $0A
0008FDF1 E701                       	dc.b	smpsNoAttack, $01
0008FDF3 E110                       	smpsAlterNote       $10
0008FDF5 E701                       	dc.b	smpsNoAttack, $01
0008FDF7 E111                       	smpsAlterNote       $11
0008FDF9 8001                       	dc.b	nRst, $01
0008FDFB E10D                       	smpsAlterNote       $0D
0008FDFD B80D                       	dc.b	nG4, $0D
0008FDFF E10A                       	smpsAlterNote       $0A
0008FE01 E701                       	dc.b	smpsNoAttack, $01
0008FE03 E106                       	smpsAlterNote       $06
0008FE05 E701                       	dc.b	smpsNoAttack, $01
0008FE07 E10A                       	smpsAlterNote       $0A
0008FE09 E701                       	dc.b	smpsNoAttack, $01
0008FE0B E110                       	smpsAlterNote       $10
0008FE0D E701                       	dc.b	smpsNoAttack, $01
0008FE0F E111                       	smpsAlterNote       $11
0008FE11 E701                       	dc.b	smpsNoAttack, $01
0008FE13 E10D                       	smpsAlterNote       $0D
0008FE15 E701                       	dc.b	smpsNoAttack, $01
0008FE17 E107                       	smpsAlterNote       $07
0008FE19 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FE1D E10D                       	smpsAlterNote       $0D
0008FE1F E701                       	dc.b	smpsNoAttack, $01
0008FE21 E110                       	smpsAlterNote       $10
0008FE23 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FE27 E10A                       	smpsAlterNote       $0A
0008FE29 E701                       	dc.b	smpsNoAttack, $01
0008FE2B E106                       	smpsAlterNote       $06
0008FE2D E701                       	dc.b	smpsNoAttack, $01
0008FE2F E107                       	smpsAlterNote       $07
0008FE31 E701                       	dc.b	smpsNoAttack, $01
0008FE33 E10D                       	smpsAlterNote       $0D
0008FE35 E701                       	dc.b	smpsNoAttack, $01
0008FE37 E111                       	smpsAlterNote       $11
0008FE39 E701                       	dc.b	smpsNoAttack, $01
0008FE3B E10D                       	smpsAlterNote       $0D
0008FE3D E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008FE41 E10F                       	smpsAlterNote       $0F
0008FE43 BA0D                       	dc.b	nA4, $0D
0008FE45 E109                       	smpsAlterNote       $09
0008FE47 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FE4B E10C                       	smpsAlterNote       $0C
0008FE4D E701                       	dc.b	smpsNoAttack, $01
0008FE4F E112                       	smpsAlterNote       $12
0008FE51 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FE55 E10C                       	smpsAlterNote       $0C
0008FE57 E701                       	dc.b	smpsNoAttack, $01
0008FE59 E109                       	smpsAlterNote       $09
0008FE5B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FE5F E10F                       	smpsAlterNote       $0F
0008FE61 E701                       	dc.b	smpsNoAttack, $01
0008FE63 E113                       	smpsAlterNote       $13
0008FE65 E701                       	dc.b	smpsNoAttack, $01
0008FE67 E112                       	smpsAlterNote       $12
0008FE69 E701                       	dc.b	smpsNoAttack, $01
0008FE6B E10C                       	smpsAlterNote       $0C
0008FE6D E701                       	dc.b	smpsNoAttack, $01
0008FE6F E108                       	smpsAlterNote       $08
0008FE71 E701                       	dc.b	smpsNoAttack, $01
0008FE73 E10C                       	smpsAlterNote       $0C
0008FE75 E701                       	dc.b	smpsNoAttack, $01
0008FE77 E10F                       	smpsAlterNote       $0F
0008FE79 E701                       	dc.b	smpsNoAttack, $01
0008FE7B E113                       	smpsAlterNote       $13
0008FE7D E701                       	dc.b	smpsNoAttack, $01
0008FE7F E10F                       	smpsAlterNote       $0F
0008FE81 E701                       	dc.b	smpsNoAttack, $01
0008FE83 E109                       	smpsAlterNote       $09
0008FE85 E701                       	dc.b	smpsNoAttack, $01
0008FE87 E108                       	smpsAlterNote       $08
0008FE89 E701                       	dc.b	smpsNoAttack, $01
0008FE8B E10C                       	smpsAlterNote       $0C
0008FE8D E701                       	dc.b	smpsNoAttack, $01
0008FE8F E112                       	smpsAlterNote       $12
0008FE91 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FE95 E10F                       	smpsAlterNote       $0F
0008FE97 E701                       	dc.b	smpsNoAttack, $01
0008FE99 E109                       	smpsAlterNote       $09
0008FE9B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FE9F E10F                       	smpsAlterNote       $0F
0008FEA1 E701                       	dc.b	smpsNoAttack, $01
0008FEA3 E112                       	smpsAlterNote       $12
0008FEA5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FEA9 E10C                       	smpsAlterNote       $0C
0008FEAB E701                       	dc.b	smpsNoAttack, $01
0008FEAD E108                       	smpsAlterNote       $08
0008FEAF E701                       	dc.b	smpsNoAttack, $01
0008FEB1 E109                       	smpsAlterNote       $09
0008FEB3 E701                       	dc.b	smpsNoAttack, $01
0008FEB5 E10C                       	smpsAlterNote       $0C
0008FEB7 B50A                       	dc.b	nE4, $0A
0008FEB9 E10D                       	smpsAlterNote       $0D
0008FEBB B60E                       	dc.b	nF4, $0E
0008FEBD E107                       	smpsAlterNote       $07
0008FEBF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FEC3 E10D                       	smpsAlterNote       $0D
0008FEC5 E701                       	dc.b	smpsNoAttack, $01
0008FEC7 E110                       	smpsAlterNote       $10
0008FEC9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FECD E10A                       	smpsAlterNote       $0A
0008FECF E701                       	dc.b	smpsNoAttack, $01
0008FED1 E106                       	smpsAlterNote       $06
0008FED3 E701                       	dc.b	smpsNoAttack, $01
0008FED5 E107                       	smpsAlterNote       $07
0008FED7 E701                       	dc.b	smpsNoAttack, $01
0008FED9 E10D                       	smpsAlterNote       $0D
0008FEDB E701                       	dc.b	smpsNoAttack, $01
0008FEDD E111                       	smpsAlterNote       $11
0008FEDF E701                       	dc.b	smpsNoAttack, $01
0008FEE1 E10D                       	smpsAlterNote       $0D
0008FEE3 B80D                       	dc.b	nG4, $0D
0008FEE5 E10A                       	smpsAlterNote       $0A
0008FEE7 E701                       	dc.b	smpsNoAttack, $01
0008FEE9 E107                       	smpsAlterNote       $07
0008FEEB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FEEF E10D                       	smpsAlterNote       $0D
0008FEF1 E701                       	dc.b	smpsNoAttack, $01
0008FEF3 E111                       	smpsAlterNote       $11
0008FEF5 E701                       	dc.b	smpsNoAttack, $01
0008FEF7 E110                       	smpsAlterNote       $10
0008FEF9 E701                       	dc.b	smpsNoAttack, $01
0008FEFB E10A                       	smpsAlterNote       $0A
0008FEFD E701                       	dc.b	smpsNoAttack, $01
0008FEFF E106                       	smpsAlterNote       $06
0008FF01 E701                       	dc.b	smpsNoAttack, $01
0008FF03 E10A                       	smpsAlterNote       $0A
0008FF05 E701                       	dc.b	smpsNoAttack, $01
0008FF07 E10D                       	smpsAlterNote       $0D
0008FF09 E701                       	dc.b	smpsNoAttack, $01
0008FF0B E111                       	smpsAlterNote       $11
0008FF0D E701                       	dc.b	smpsNoAttack, $01
0008FF0F E10D                       	smpsAlterNote       $0D
0008FF11 E701                       	dc.b	smpsNoAttack, $01
0008FF13 E107                       	smpsAlterNote       $07
0008FF15 E701                       	dc.b	smpsNoAttack, $01
0008FF17 E106                       	smpsAlterNote       $06
0008FF19 E701                       	dc.b	smpsNoAttack, $01
0008FF1B E10A                       	smpsAlterNote       $0A
0008FF1D E701                       	dc.b	smpsNoAttack, $01
0008FF1F E110                       	smpsAlterNote       $10
0008FF21 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FF25 E10D                       	smpsAlterNote       $0D
0008FF27 E701                       	dc.b	smpsNoAttack, $01
0008FF29 E10F                       	smpsAlterNote       $0F
0008FF2B BA0D                       	dc.b	nA4, $0D
0008FF2D E10C                       	smpsAlterNote       $0C
0008FF2F E701                       	dc.b	smpsNoAttack, $01
0008FF31 E108                       	smpsAlterNote       $08
0008FF33 E701                       	dc.b	smpsNoAttack, $01
0008FF35 E109                       	smpsAlterNote       $09
0008FF37 E701                       	dc.b	smpsNoAttack, $01
0008FF39 E10F                       	smpsAlterNote       $0F
0008FF3B E701                       	dc.b	smpsNoAttack, $01
0008FF3D E113                       	smpsAlterNote       $13
0008FF3F E701                       	dc.b	smpsNoAttack, $01
0008FF41 E10F                       	smpsAlterNote       $0F
0008FF43 E701                       	dc.b	smpsNoAttack, $01
0008FF45 E10C                       	smpsAlterNote       $0C
0008FF47 E701                       	dc.b	smpsNoAttack, $01
0008FF49 E108                       	smpsAlterNote       $08
0008FF4B E701                       	dc.b	smpsNoAttack, $01
0008FF4D E10C                       	smpsAlterNote       $0C
0008FF4F E701                       	dc.b	smpsNoAttack, $01
0008FF51 E112                       	smpsAlterNote       $12
0008FF53 E701                       	dc.b	smpsNoAttack, $01
0008FF55 E113                       	smpsAlterNote       $13
0008FF57 E701                       	dc.b	smpsNoAttack, $01
0008FF59 E10F                       	smpsAlterNote       $0F
0008FF5B E701                       	dc.b	smpsNoAttack, $01
0008FF5D E109                       	smpsAlterNote       $09
0008FF5F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FF63 E10C                       	smpsAlterNote       $0C
0008FF65 E701                       	dc.b	smpsNoAttack, $01
0008FF67 E112                       	smpsAlterNote       $12
0008FF69 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FF6D E10C                       	smpsAlterNote       $0C
0008FF6F E701                       	dc.b	smpsNoAttack, $01
0008FF71 E109                       	smpsAlterNote       $09
0008FF73 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FF77 E10F                       	smpsAlterNote       $0F
0008FF79 E701                       	dc.b	smpsNoAttack, $01
0008FF7B E113                       	smpsAlterNote       $13
0008FF7D E701                       	dc.b	smpsNoAttack, $01
0008FF7F E112                       	smpsAlterNote       $12
0008FF81 E701                       	dc.b	smpsNoAttack, $01
0008FF83 E10C                       	smpsAlterNote       $0C
0008FF85 E701                       	dc.b	smpsNoAttack, $01
0008FF87 E109                       	smpsAlterNote       $09
0008FF89 8001                       	dc.b	nRst, $01
0008FF8B E10D                       	smpsAlterNote       $0D
0008FF8D B60A                       	dc.b	nF4, $0A
0008FF8F E10C                       	smpsAlterNote       $0C
0008FF91 B506 8001                  	dc.b	nE4, $06, nRst, $01
0008FF95 E10B                       	smpsAlterNote       $0B
0008FF97 B30D 8001                  	dc.b	nD4, $0D, nRst, $01
0008FF9B E10C                       	smpsAlterNote       $0C
0008FF9D B503                       	dc.b	nE4, $03
0008FF9F E10D                       	smpsAlterNote       $0D
0008FFA1 B603 8001 B802 8001 BA0D   	dc.b	nF4, $03, nRst, $01, nG4, $02, nRst, $01, nA4, $0D
0008FFAB E10C                       	smpsAlterNote       $0C
0008FFAD E701                       	dc.b	smpsNoAttack, $01
0008FFAF E108                       	smpsAlterNote       $08
0008FFB1 E701                       	dc.b	smpsNoAttack, $01
0008FFB3 E10C                       	smpsAlterNote       $0C
0008FFB5 E701                       	dc.b	smpsNoAttack, $01
0008FFB7 E112                       	smpsAlterNote       $12
0008FFB9 E701                       	dc.b	smpsNoAttack, $01
0008FFBB E113                       	smpsAlterNote       $13
0008FFBD E701                       	dc.b	smpsNoAttack, $01
0008FFBF E10F                       	smpsAlterNote       $0F
0008FFC1 E701                       	dc.b	smpsNoAttack, $01
0008FFC3 E109                       	smpsAlterNote       $09
0008FFC5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FFC9 E10C                       	smpsAlterNote       $0C
0008FFCB E701                       	dc.b	smpsNoAttack, $01
0008FFCD E112                       	smpsAlterNote       $12
0008FFCF E701                       	dc.b	smpsNoAttack, $01
0008FFD1 E113                       	smpsAlterNote       $13
0008FFD3 8001                       	dc.b	nRst, $01
0008FFD5 E10D                       	smpsAlterNote       $0D
0008FFD7 C20D                       	dc.b	nF5, $0D
0008FFD9 E10A                       	smpsAlterNote       $0A
0008FFDB E701                       	dc.b	smpsNoAttack, $01
0008FFDD E106                       	smpsAlterNote       $06
0008FFDF E701                       	dc.b	smpsNoAttack, $01
0008FFE1 E10A                       	smpsAlterNote       $0A
0008FFE3 E701                       	dc.b	smpsNoAttack, $01
0008FFE5 E110                       	smpsAlterNote       $10
0008FFE7 E701                       	dc.b	smpsNoAttack, $01
0008FFE9 E111                       	smpsAlterNote       $11
0008FFEB E701                       	dc.b	smpsNoAttack, $01
0008FFED E10D                       	smpsAlterNote       $0D
0008FFEF E701                       	dc.b	smpsNoAttack, $01
0008FFF1 E107                       	smpsAlterNote       $07
0008FFF3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FFF7 E10A                       	smpsAlterNote       $0A
0008FFF9 E701                       	dc.b	smpsNoAttack, $01
0008FFFB E110                       	smpsAlterNote       $10
0008FFFD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090001 E10A                       	smpsAlterNote       $0A
00090003 E701                       	dc.b	smpsNoAttack, $01
00090005 E107                       	smpsAlterNote       $07
00090007 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009000B E10D                       	smpsAlterNote       $0D
0009000D E701                       	dc.b	smpsNoAttack, $01
0009000F E111                       	smpsAlterNote       $11
00090011 E701                       	dc.b	smpsNoAttack, $01
00090013 E110                       	smpsAlterNote       $10
00090015 E701                       	dc.b	smpsNoAttack, $01
00090017 E10A                       	smpsAlterNote       $0A
00090019 E701                       	dc.b	smpsNoAttack, $01
0009001B E106                       	smpsAlterNote       $06
0009001D E701                       	dc.b	smpsNoAttack, $01
0009001F E10A                       	smpsAlterNote       $0A
00090021 E701                       	dc.b	smpsNoAttack, $01
00090023 E10D                       	smpsAlterNote       $0D
00090025 E701                       	dc.b	smpsNoAttack, $01
00090027 E111                       	smpsAlterNote       $11
00090029 E701                       	dc.b	smpsNoAttack, $01
0009002B E10D                       	smpsAlterNote       $0D
0009002D E701                       	dc.b	smpsNoAttack, $01
0009002F E107                       	smpsAlterNote       $07
00090031 E701                       	dc.b	smpsNoAttack, $01
00090033 E106                       	smpsAlterNote       $06
00090035 E701                       	dc.b	smpsNoAttack, $01
00090037 E10A                       	smpsAlterNote       $0A
00090039 E701                       	dc.b	smpsNoAttack, $01
0009003B E110                       	smpsAlterNote       $10
0009003D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090041 E10D                       	smpsAlterNote       $0D
00090043 E701                       	dc.b	smpsNoAttack, $01
00090045 E107                       	smpsAlterNote       $07
00090047 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009004B E10D                       	smpsAlterNote       $0D
0009004D E701                       	dc.b	smpsNoAttack, $01
0009004F E110                       	smpsAlterNote       $10
00090051 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090055 E10A                       	smpsAlterNote       $0A
00090057 E701                       	dc.b	smpsNoAttack, $01
00090059 E106                       	smpsAlterNote       $06
0009005B E701                       	dc.b	smpsNoAttack, $01
0009005D E107                       	smpsAlterNote       $07
0009005F E701                       	dc.b	smpsNoAttack, $01
00090061 E10D                       	smpsAlterNote       $0D
00090063 E701                       	dc.b	smpsNoAttack, $01
00090065 E111                       	smpsAlterNote       $11
00090067 E701                       	dc.b	smpsNoAttack, $01
00090069 E10D                       	smpsAlterNote       $0D
0009006B E701                       	dc.b	smpsNoAttack, $01
0009006D E10A                       	smpsAlterNote       $0A
0009006F E701                       	dc.b	smpsNoAttack, $01
00090071 E107                       	smpsAlterNote       $07
00090073 8001                       	dc.b	nRst, $01
00090075 E10D                       	smpsAlterNote       $0D
00090077 C206 8001                  	dc.b	nF5, $06, nRst, $01
0009007D E601                       	smpsAlterVol        $01
0009007F E110                       	smpsAlterNote       $10
00090081 BB0D                       	dc.b	nBb4, $0D
00090083 E10A                       	smpsAlterNote       $0A
00090085 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090089 E110                       	smpsAlterNote       $10
0009008B E701                       	dc.b	smpsNoAttack, $01
0009008D E113                       	smpsAlterNote       $13
0009008F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090093 E10D                       	smpsAlterNote       $0D
00090095 E701                       	dc.b	smpsNoAttack, $01
00090097 E109                       	smpsAlterNote       $09
00090099 E701                       	dc.b	smpsNoAttack, $01
0009009B E10A                       	smpsAlterNote       $0A
0009009D E701                       	dc.b	smpsNoAttack, $01
0009009F E110                       	smpsAlterNote       $10
000900A1 E701                       	dc.b	smpsNoAttack, $01
000900A3 E114                       	smpsAlterNote       $14
000900A5 E701                       	dc.b	smpsNoAttack, $01
000900A7 E110                       	smpsAlterNote       $10
000900A9 E701                       	dc.b	smpsNoAttack, $01
000900AB E10D                       	smpsAlterNote       $0D
000900AD E701                       	dc.b	smpsNoAttack, $01
000900AF E109                       	smpsAlterNote       $09
000900B1 E701                       	dc.b	smpsNoAttack, $01
000900B3 E10A                       	smpsAlterNote       $0A
000900B5 8001 BD0D                  	dc.b	nRst, $01, nC5, $0D
000900B9 E107                       	smpsAlterNote       $07
000900BB E701                       	dc.b	smpsNoAttack, $01
000900BD E103                       	smpsAlterNote       $03
000900BF E701                       	dc.b	smpsNoAttack, $01
000900C1 E107                       	smpsAlterNote       $07
000900C3 E701                       	dc.b	smpsNoAttack, $01
000900C5 E10D                       	smpsAlterNote       $0D
000900C7 E701                       	dc.b	smpsNoAttack, $01
000900C9 E10E                       	smpsAlterNote       $0E
000900CB E701                       	dc.b	smpsNoAttack, $01
000900CD E10A                       	smpsAlterNote       $0A
000900CF E701                       	dc.b	smpsNoAttack, $01
000900D1 E104                       	smpsAlterNote       $04
000900D3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000900D7 E107                       	smpsAlterNote       $07
000900D9 E701                       	dc.b	smpsNoAttack, $01
000900DB E10D                       	smpsAlterNote       $0D
000900DD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000900E1 E107                       	smpsAlterNote       $07
000900E3 E701                       	dc.b	smpsNoAttack, $01
000900E5 E104                       	smpsAlterNote       $04
000900E7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000900EB E10B                       	smpsAlterNote       $0B
000900ED BF0D                       	dc.b	nD5, $0D
000900EF E108                       	smpsAlterNote       $08
000900F1 E701                       	dc.b	smpsNoAttack, $01
000900F3 E105                       	smpsAlterNote       $05
000900F5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000900F9 E10B                       	smpsAlterNote       $0B
000900FB E701                       	dc.b	smpsNoAttack, $01
000900FD E10F                       	smpsAlterNote       $0F
000900FF E701                       	dc.b	smpsNoAttack, $01
00090101 E10E                       	smpsAlterNote       $0E
00090103 E701                       	dc.b	smpsNoAttack, $01
00090105 E108                       	smpsAlterNote       $08
00090107 E701                       	dc.b	smpsNoAttack, $01
00090109 E104                       	smpsAlterNote       $04
0009010B E701                       	dc.b	smpsNoAttack, $01
0009010D E108                       	smpsAlterNote       $08
0009010F E701                       	dc.b	smpsNoAttack, $01
00090111 E10B                       	smpsAlterNote       $0B
00090113 E701                       	dc.b	smpsNoAttack, $01
00090115 E10F                       	smpsAlterNote       $0F
00090117 E701                       	dc.b	smpsNoAttack, $01
00090119 E10B                       	smpsAlterNote       $0B
0009011B E701                       	dc.b	smpsNoAttack, $01
0009011D E105                       	smpsAlterNote       $05
0009011F E701                       	dc.b	smpsNoAttack, $01
00090121 E104                       	smpsAlterNote       $04
00090123 E701                       	dc.b	smpsNoAttack, $01
00090125 E105                       	smpsAlterNote       $05
00090127 8001                       	dc.b	nRst, $01
00090129 E10C                       	smpsAlterNote       $0C
0009012B C10C                       	dc.b	nE5, $0C
0009012D E10D                       	smpsAlterNote       $0D
0009012F C201                       	dc.b	nF5, $01
00090131 E10E                       	smpsAlterNote       $0E
00090133 C301 8001                  	dc.b	nFs5, $01, nRst, $01
00090137 E10D                       	smpsAlterNote       $0D
00090139 C40C C20D                  	dc.b	nG5, $0C, nF5, $0D
0009013D E10A                       	smpsAlterNote       $0A
0009013F E701                       	dc.b	smpsNoAttack, $01
00090141 E106                       	smpsAlterNote       $06
00090143 E701                       	dc.b	smpsNoAttack, $01
00090145 E10A                       	smpsAlterNote       $0A
00090147 E701                       	dc.b	smpsNoAttack, $01
00090149 E10D                       	smpsAlterNote       $0D
0009014B E701                       	dc.b	smpsNoAttack, $01
0009014D E111                       	smpsAlterNote       $11
0009014F E701                       	dc.b	smpsNoAttack, $01
00090151 E10D                       	smpsAlterNote       $0D
00090153 E701                       	dc.b	smpsNoAttack, $01
00090155 E107                       	smpsAlterNote       $07
00090157 E701                       	dc.b	smpsNoAttack, $01
00090159 E106                       	smpsAlterNote       $06
0009015B E701                       	dc.b	smpsNoAttack, $01
0009015D E10A                       	smpsAlterNote       $0A
0009015F E701                       	dc.b	smpsNoAttack, $01
00090161 E110                       	smpsAlterNote       $10
00090163 E701                       	dc.b	smpsNoAttack, $01
00090165 E111                       	smpsAlterNote       $11
00090167 8001                       	dc.b	nRst, $01
00090169 E10D                       	smpsAlterNote       $0D
0009016B C40D                       	dc.b	nG5, $0D
0009016D E10A                       	smpsAlterNote       $0A
0009016F E701                       	dc.b	smpsNoAttack, $01
00090171 E106                       	smpsAlterNote       $06
00090173 E701                       	dc.b	smpsNoAttack, $01
00090175 E10A                       	smpsAlterNote       $0A
00090177 E701                       	dc.b	smpsNoAttack, $01
00090179 E10D                       	smpsAlterNote       $0D
0009017B E701                       	dc.b	smpsNoAttack, $01
0009017D E10C                       	smpsAlterNote       $0C
0009017F C006 8001 C002 C002 8001+  	dc.b	nEb5, $06, nRst, $01, nEb5, $02, nEb5, $02, nRst, $01, nEb5, $01
0009018B 8001                       	dc.b	nRst, $01
0009018D E10D                       	smpsAlterNote       $0D
0009018F C20D                       	dc.b	nF5, $0D
00090191 E10A                       	smpsAlterNote       $0A
00090193 E701                       	dc.b	smpsNoAttack, $01
00090195 E106                       	smpsAlterNote       $06
00090197 E701                       	dc.b	smpsNoAttack, $01
00090199 E10A                       	smpsAlterNote       $0A
0009019B E701                       	dc.b	smpsNoAttack, $01
0009019D E110                       	smpsAlterNote       $10
0009019F E701                       	dc.b	smpsNoAttack, $01
000901A1 E111                       	smpsAlterNote       $11
000901A3 E701                       	dc.b	smpsNoAttack, $01
000901A5 E10D                       	smpsAlterNote       $0D
000901A7 E701                       	dc.b	smpsNoAttack, $01
000901A9 E107                       	smpsAlterNote       $07
000901AB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000901AF E10A                       	smpsAlterNote       $0A
000901B1 E701                       	dc.b	smpsNoAttack, $01
000901B3 E110                       	smpsAlterNote       $10
000901B5 E701                       	dc.b	smpsNoAttack, $01
000901B7 E111                       	smpsAlterNote       $11
000901B9 8001                       	dc.b	nRst, $01
000901BB E10F                       	smpsAlterNote       $0F
000901BD C60A                       	dc.b	nA5, $0A
000901BF E10D                       	smpsAlterNote       $0D
000901C1 C406 8001                  	dc.b	nG5, $06, nRst, $01
000901C5 E10C                       	smpsAlterNote       $0C
000901C7 C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
000901D3 8001                       	dc.b	nRst, $01
000901D5 E10D                       	smpsAlterNote       $0D
000901D7 C20D                       	dc.b	nF5, $0D
000901D9 E107                       	smpsAlterNote       $07
000901DB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000901DF E10A                       	smpsAlterNote       $0A
000901E1 E701                       	dc.b	smpsNoAttack, $01
000901E3 E110                       	smpsAlterNote       $10
000901E5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000901E9 E10A                       	smpsAlterNote       $0A
000901EB E701                       	dc.b	smpsNoAttack, $01
000901ED E107                       	smpsAlterNote       $07
000901EF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000901F3 E10D                       	smpsAlterNote       $0D
000901F5 E701                       	dc.b	smpsNoAttack, $01
000901F7 E111                       	smpsAlterNote       $11
000901F9 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000901FD E10D                       	smpsAlterNote       $0D
000901FF C40D                       	dc.b	nG5, $0D
00090201 E107                       	smpsAlterNote       $07
00090203 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090207 E10A                       	smpsAlterNote       $0A
00090209 E701                       	dc.b	smpsNoAttack, $01
0009020B E10D                       	smpsAlterNote       $0D
0009020D 8001                       	dc.b	nRst, $01
0009020F E10C                       	smpsAlterNote       $0C
00090211 C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
0009021D E10D                       	smpsAlterNote       $0D
0009021F C20E                       	dc.b	nF5, $0E
00090221 E107                       	smpsAlterNote       $07
00090223 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090227 E10D                       	smpsAlterNote       $0D
00090229 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0009022F E0C0                       	smpsPan             panCenter, $00
00090231 E603                       	smpsAlterVol        $03
00090233 E108                       	smpsAlterNote       $08
00090235 B406                       	dc.b	nEb4, $06
00090237 E10C                       	smpsAlterNote       $0C
00090239 AF03 8001                  	dc.b	nBb3, $03, nRst, $01
0009023D E108                       	smpsAlterNote       $08
0009023F B403                       	dc.b	nEb4, $03
00090241 E109                       	smpsAlterNote       $09
00090243 B803 8001                  	dc.b	nG4, $03, nRst, $01
00090247 E10C                       	smpsAlterNote       $0C
00090249 BB03 BB03 8008             	dc.b	nBb4, $03, nBb4, $03, nRst, $08
00090251 03                         	dc.b	$03
00090252 E6FD                       	smpsAlterVol        $FD
00090254 F6F1 F4                    	smpsJump            music84_Jump00
00090257                            
00090257                            ; PSG1 Data
00090257                            music84_PSG1:
00090257 E1FD                       	smpsAlterNote       $FD
00090259 EC04                       	smpsPSGAlterVol     $04
0009025B 9203                       	dc.b	nF1, $03
0009025D E1FE                       	smpsAlterNote       $FE
0009025F 9603                       	dc.b	nA1, $03
00090261 EC04                       	smpsPSGAlterVol     $04
00090263 E701                       	dc.b	smpsNoAttack, $01
00090265 E1FF                       	smpsAlterNote       $FF
00090267 ECFC                       	smpsPSGAlterVol     $FC
00090269 9B03                       	dc.b	nD2, $03
0009026B E1FD                       	smpsAlterNote       $FD
0009026D 9403                       	dc.b	nG1, $03
0009026F EC04                       	smpsPSGAlterVol     $04
00090271 E701                       	dc.b	smpsNoAttack, $01
00090273 E1FE                       	smpsAlterNote       $FE
00090275 ECFC                       	smpsPSGAlterVol     $FC
00090277 9703                       	dc.b	nBb1, $03
00090279 E1FF                       	smpsAlterNote       $FF
0009027B 9B03                       	dc.b	nD2, $03
0009027D EC04                       	smpsPSGAlterVol     $04
0009027F E701                       	dc.b	smpsNoAttack, $01
00090281 E1FE                       	smpsAlterNote       $FE
00090283 ECFC                       	smpsPSGAlterVol     $FC
00090285 A002                       	dc.b	nG2, $02
00090287 EC04                       	smpsPSGAlterVol     $04
00090289 E701                       	dc.b	smpsNoAttack, $01
0009028B E1FF                       	smpsAlterNote       $FF
0009028D ECFC                       	smpsPSGAlterVol     $FC
0009028F A203                       	dc.b	nA2, $03
00090291 EC0B                       	smpsPSGAlterVol     $0B
00090293 800A                       	dc.b	nRst, $0A
00090295 E105                       	smpsAlterNote       $05
00090297 01                         	dc.b	$01
00090298 E1FC                       	smpsAlterNote       $FC
0009029A 01                         	dc.b	$01
0009029B E105                       	smpsAlterNote       $05
0009029D 01                         	dc.b	$01
0009029E E1FD                       	smpsAlterNote       $FD
000902A0 01                         	dc.b	$01
000902A1 E105                       	smpsAlterNote       $05
000902A3 01                         	dc.b	$01
000902A4 E1FD                       	smpsAlterNote       $FD
000902A6 01                         	dc.b	$01
000902A7 E1FA                       	smpsAlterNote       $FA
000902A9 01                         	dc.b	$01
000902AA E1FC                       	smpsAlterNote       $FC
000902AC 01                         	dc.b	$01
000902AD E105                       	smpsAlterNote       $05
000902AF 01                         	dc.b	$01
000902B0 E108                       	smpsAlterNote       $08
000902B2 0101                       	dc.b	$01, $01
000902B4 E105                       	smpsAlterNote       $05
000902B6 01                         	dc.b	$01
000902B7 E1FA                       	smpsAlterNote       $FA
000902B9 0101                       	dc.b	$01, $01
000902BB E1FD                       	smpsAlterNote       $FD
000902BD 01                         	dc.b	$01
000902BE E105                       	smpsAlterNote       $05
000902C0 01                         	dc.b	$01
000902C1 E108                       	smpsAlterNote       $08
000902C3 01                         	dc.b	$01
000902C4 E105                       	smpsAlterNote       $05
000902C6 01                         	dc.b	$01
000902C7 E1FC                       	smpsAlterNote       $FC
000902C9 01                         	dc.b	$01
000902CA E105                       	smpsAlterNote       $05
000902CC 01                         	dc.b	$01
000902CD E1FD                       	smpsAlterNote       $FD
000902CF 01                         	dc.b	$01
000902D0                            
000902D0                            music84_Jump07:
000902D0 E105                       	smpsAlterNote       $05
000902D2 8001                       	dc.b	nRst, $01
000902D4 E1FD                       	smpsAlterNote       $FD
000902D6 01                         	dc.b	$01
000902D7 E1FA                       	smpsAlterNote       $FA
000902D9 01                         	dc.b	$01
000902DA E1FC                       	smpsAlterNote       $FC
000902DC 01                         	dc.b	$01
000902DD E1FD                       	smpsAlterNote       $FD
000902DF ECF5                       	smpsPSGAlterVol     $F5
000902E1 9206                       	dc.b	nF1, $06
000902E3 EC04                       	smpsPSGAlterVol     $04
000902E5 E701                       	dc.b	smpsNoAttack, $01
000902E7 EC07                       	smpsPSGAlterVol     $07
000902E9 8003                       	dc.b	nRst, $03
000902EB ECF5                       	smpsPSGAlterVol     $F5
000902ED 9206                       	dc.b	nF1, $06
000902EF EC04                       	smpsPSGAlterVol     $04
000902F1 E701                       	dc.b	smpsNoAttack, $01
000902F3 EC07                       	smpsPSGAlterVol     $07
000902F5 8006                       	dc.b	nRst, $06
000902F7 E100                       	smpsAlterNote       $00
000902F9 01                         	dc.b	$01
000902FA E104                       	smpsAlterNote       $04
000902FC 01                         	dc.b	$01
000902FD E100                       	smpsAlterNote       $00
000902FF 01                         	dc.b	$01
00090300 E1FB                       	smpsAlterNote       $FB
00090302 01                         	dc.b	$01
00090303 E1FD                       	smpsAlterNote       $FD
00090305 ECF5                       	smpsPSGAlterVol     $F5
00090307 9406                       	dc.b	nG1, $06
00090309 EC04                       	smpsPSGAlterVol     $04
0009030B E701                       	dc.b	smpsNoAttack, $01
0009030D EC07                       	smpsPSGAlterVol     $07
0009030F 8003                       	dc.b	nRst, $03
00090311 ECF5                       	smpsPSGAlterVol     $F5
00090313 9407                       	dc.b	nG1, $07
00090315 EC0B                       	smpsPSGAlterVol     $0B
00090317 8006                       	dc.b	nRst, $06
00090319 E100                       	smpsAlterNote       $00
0009031B 01                         	dc.b	$01
0009031C E103                       	smpsAlterNote       $03
0009031E 0101                       	dc.b	$01, $01
00090320 E1FD                       	smpsAlterNote       $FD
00090322 01                         	dc.b	$01
00090323 ECF5                       	smpsPSGAlterVol     $F5
00090325 9207                       	dc.b	nF1, $07
00090327 EC0B                       	smpsPSGAlterVol     $0B
00090329 8004                       	dc.b	nRst, $04
0009032B ECF5                       	smpsPSGAlterVol     $F5
0009032D 9206                       	dc.b	nF1, $06
0009032F EC04                       	smpsPSGAlterVol     $04
00090331 E701                       	dc.b	smpsNoAttack, $01
00090333 EC07                       	smpsPSGAlterVol     $07
00090335 8006                       	dc.b	nRst, $06
00090337 E103                       	smpsAlterNote       $03
00090339 01                         	dc.b	$01
0009033A E104                       	smpsAlterNote       $04
0009033C 01                         	dc.b	$01
0009033D E100                       	smpsAlterNote       $00
0009033F 01                         	dc.b	$01
00090340 E1FA                       	smpsAlterNote       $FA
00090342 01                         	dc.b	$01
00090343 E1FD                       	smpsAlterNote       $FD
00090345 ECF5                       	smpsPSGAlterVol     $F5
00090347 9206                       	dc.b	nF1, $06
00090349 EC04                       	smpsPSGAlterVol     $04
0009034B E701                       	dc.b	smpsNoAttack, $01
0009034D EC07                       	smpsPSGAlterVol     $07
0009034F 8003                       	dc.b	nRst, $03
00090351 ECF5                       	smpsPSGAlterVol     $F5
00090353 9106                       	dc.b	nE1, $06
00090355 EC04                       	smpsPSGAlterVol     $04
00090357 E701                       	dc.b	smpsNoAttack, $01
00090359 EC07                       	smpsPSGAlterVol     $07
0009035B 8006                       	dc.b	nRst, $06
0009035D E100                       	smpsAlterNote       $00
0009035F 01                         	dc.b	$01
00090360 E104                       	smpsAlterNote       $04
00090362 01                         	dc.b	$01
00090363 E100                       	smpsAlterNote       $00
00090365 01                         	dc.b	$01
00090366 E1FD                       	smpsAlterNote       $FD
00090368 01                         	dc.b	$01
00090369 ECF5                       	smpsPSGAlterVol     $F5
0009036B 9206                       	dc.b	nF1, $06
0009036D EC04                       	smpsPSGAlterVol     $04
0009036F E701                       	dc.b	smpsNoAttack, $01
00090371 EC07                       	smpsPSGAlterVol     $07
00090373 8003                       	dc.b	nRst, $03
00090375 ECF5                       	smpsPSGAlterVol     $F5
00090377 9207                       	dc.b	nF1, $07
00090379 EC0B                       	smpsPSGAlterVol     $0B
0009037B 8007                       	dc.b	nRst, $07
0009037D E103                       	smpsAlterNote       $03
0009037F 0101                       	dc.b	$01, $01
00090381 E1FD                       	smpsAlterNote       $FD
00090383 01                         	dc.b	$01
00090384 E1FB                       	smpsAlterNote       $FB
00090386 01                         	dc.b	$01
00090387 E1FD                       	smpsAlterNote       $FD
00090389 ECF5                       	smpsPSGAlterVol     $F5
0009038B 9406                       	dc.b	nG1, $06
0009038D EC0B                       	smpsPSGAlterVol     $0B
0009038F 8004                       	dc.b	nRst, $04
00090391 ECF5                       	smpsPSGAlterVol     $F5
00090393 9406                       	dc.b	nG1, $06
00090395 EC04                       	smpsPSGAlterVol     $04
00090397 E701                       	dc.b	smpsNoAttack, $01
00090399 EC07                       	smpsPSGAlterVol     $07
0009039B 8006                       	dc.b	nRst, $06
0009039D E100                       	smpsAlterNote       $00
0009039F 01                         	dc.b	$01
000903A0 E104                       	smpsAlterNote       $04
000903A2 01                         	dc.b	$01
000903A3 E100                       	smpsAlterNote       $00
000903A5 01                         	dc.b	$01
000903A6 E1F9                       	smpsAlterNote       $F9
000903A8 01                         	dc.b	$01
000903A9 E1FD                       	smpsAlterNote       $FD
000903AB ECF5                       	smpsPSGAlterVol     $F5
000903AD 9206                       	dc.b	nF1, $06
000903AF EC04                       	smpsPSGAlterVol     $04
000903B1 E701                       	dc.b	smpsNoAttack, $01
000903B3 EC07                       	smpsPSGAlterVol     $07
000903B5 8003                       	dc.b	nRst, $03
000903B7 ECF5                       	smpsPSGAlterVol     $F5
000903B9 9207                       	dc.b	nF1, $07
000903BB EC0B                       	smpsPSGAlterVol     $0B
000903BD 8006                       	dc.b	nRst, $06
000903BF E100                       	smpsAlterNote       $00
000903C1 01                         	dc.b	$01
000903C2 E104                       	smpsAlterNote       $04
000903C4 01                         	dc.b	$01
000903C5 E103                       	smpsAlterNote       $03
000903C7 01                         	dc.b	$01
000903C8 E1FD                       	smpsAlterNote       $FD
000903CA 01                         	dc.b	$01
000903CB ECF5                       	smpsPSGAlterVol     $F5
000903CD 9207                       	dc.b	nF1, $07
000903CF EC0B                       	smpsPSGAlterVol     $0B
000903D1 8004                       	dc.b	nRst, $04
000903D3 ECF5                       	smpsPSGAlterVol     $F5
000903D5 9206                       	dc.b	nF1, $06
000903D7 EC0B                       	smpsPSGAlterVol     $0B
000903D9 8007                       	dc.b	nRst, $07
000903DB E103                       	smpsAlterNote       $03
000903DD 0101                       	dc.b	$01, $01
000903DF E100                       	smpsAlterNote       $00
000903E1 01                         	dc.b	$01
000903E2 E1FA                       	smpsAlterNote       $FA
000903E4 01                         	dc.b	$01
000903E5 E1FD                       	smpsAlterNote       $FD
000903E7 ECF5                       	smpsPSGAlterVol     $F5
000903E9 9206                       	dc.b	nF1, $06
000903EB EC04                       	smpsPSGAlterVol     $04
000903ED E701                       	dc.b	smpsNoAttack, $01
000903EF EC07                       	smpsPSGAlterVol     $07
000903F1 8003                       	dc.b	nRst, $03
000903F3 ECF5                       	smpsPSGAlterVol     $F5
000903F5 9206                       	dc.b	nF1, $06
000903F7 EC04                       	smpsPSGAlterVol     $04
000903F9 E701                       	dc.b	smpsNoAttack, $01
000903FB EC07                       	smpsPSGAlterVol     $07
000903FD 8006                       	dc.b	nRst, $06
000903FF E100                       	smpsAlterNote       $00
00090401 01                         	dc.b	$01
00090402 E104                       	smpsAlterNote       $04
00090404 01                         	dc.b	$01
00090405 E100                       	smpsAlterNote       $00
00090407 01                         	dc.b	$01
00090408 E1FD                       	smpsAlterNote       $FD
0009040A 01                         	dc.b	$01
0009040B ECF5                       	smpsPSGAlterVol     $F5
0009040D 9206                       	dc.b	nF1, $06
0009040F EC04                       	smpsPSGAlterVol     $04
00090411 E701                       	dc.b	smpsNoAttack, $01
00090413 EC07                       	smpsPSGAlterVol     $07
00090415 8003                       	dc.b	nRst, $03
00090417 ECF5                       	smpsPSGAlterVol     $F5
00090419 9207                       	dc.b	nF1, $07
0009041B EC0B                       	smpsPSGAlterVol     $0B
0009041D 8007                       	dc.b	nRst, $07
0009041F E103                       	smpsAlterNote       $03
00090421 0101                       	dc.b	$01, $01
00090423 E1FD                       	smpsAlterNote       $FD
00090425 01                         	dc.b	$01
00090426 E1FA                       	smpsAlterNote       $FA
00090428 01                         	dc.b	$01
00090429 E1FD                       	smpsAlterNote       $FD
0009042B ECF5                       	smpsPSGAlterVol     $F5
0009042D 9206                       	dc.b	nF1, $06
0009042F EC0B                       	smpsPSGAlterVol     $0B
00090431 8004                       	dc.b	nRst, $04
00090433 ECF5                       	smpsPSGAlterVol     $F5
00090435 9206                       	dc.b	nF1, $06
00090437 EC04                       	smpsPSGAlterVol     $04
00090439 E701                       	dc.b	smpsNoAttack, $01
0009043B EC07                       	smpsPSGAlterVol     $07
0009043D 8006                       	dc.b	nRst, $06
0009043F E103                       	smpsAlterNote       $03
00090441 01                         	dc.b	$01
00090442 E104                       	smpsAlterNote       $04
00090444 01                         	dc.b	$01
00090445 E100                       	smpsAlterNote       $00
00090447 01                         	dc.b	$01
00090448 E1FA                       	smpsAlterNote       $FA
0009044A 01                         	dc.b	$01
0009044B E1FD                       	smpsAlterNote       $FD
0009044D ECF5                       	smpsPSGAlterVol     $F5
0009044F 9206                       	dc.b	nF1, $06
00090451 EC04                       	smpsPSGAlterVol     $04
00090453 E701                       	dc.b	smpsNoAttack, $01
00090455 EC07                       	smpsPSGAlterVol     $07
00090457 8003                       	dc.b	nRst, $03
00090459 ECF5                       	smpsPSGAlterVol     $F5
0009045B 9206                       	dc.b	nF1, $06
0009045D EC04                       	smpsPSGAlterVol     $04
0009045F E701                       	dc.b	smpsNoAttack, $01
00090461 EC07                       	smpsPSGAlterVol     $07
00090463 8006                       	dc.b	nRst, $06
00090465 E100                       	smpsAlterNote       $00
00090467 01                         	dc.b	$01
00090468 E104                       	smpsAlterNote       $04
0009046A 01                         	dc.b	$01
0009046B E103                       	smpsAlterNote       $03
0009046D 01                         	dc.b	$01
0009046E E1FD                       	smpsAlterNote       $FD
00090470 01                         	dc.b	$01
00090471 ECF5                       	smpsPSGAlterVol     $F5
00090473 9107                       	dc.b	nE1, $07
00090475 EC0B                       	smpsPSGAlterVol     $0B
00090477 8004                       	dc.b	nRst, $04
00090479 ECF5                       	smpsPSGAlterVol     $F5
0009047B 9106                       	dc.b	nE1, $06
0009047D EC0B                       	smpsPSGAlterVol     $0B
0009047F 8007                       	dc.b	nRst, $07
00090481 E103                       	smpsAlterNote       $03
00090483 0101                       	dc.b	$01, $01
00090485 E100                       	smpsAlterNote       $00
00090487 01                         	dc.b	$01
00090488 E1FA                       	smpsAlterNote       $FA
0009048A 01                         	dc.b	$01
0009048B E1FD                       	smpsAlterNote       $FD
0009048D ECF5                       	smpsPSGAlterVol     $F5
0009048F 9106                       	dc.b	nE1, $06
00090491 EC04                       	smpsPSGAlterVol     $04
00090493 E701                       	dc.b	smpsNoAttack, $01
00090495 EC07                       	smpsPSGAlterVol     $07
00090497 8003                       	dc.b	nRst, $03
00090499 ECF5                       	smpsPSGAlterVol     $F5
0009049B 9106                       	dc.b	nE1, $06
0009049D EC04                       	smpsPSGAlterVol     $04
0009049F E701                       	dc.b	smpsNoAttack, $01
000904A1 EC07                       	smpsPSGAlterVol     $07
000904A3 8006                       	dc.b	nRst, $06
000904A5 E100                       	smpsAlterNote       $00
000904A7 01                         	dc.b	$01
000904A8 E104                       	smpsAlterNote       $04
000904AA 01                         	dc.b	$01
000904AB E100                       	smpsAlterNote       $00
000904AD 01                         	dc.b	$01
000904AE E1FA                       	smpsAlterNote       $FA
000904B0 01                         	dc.b	$01
000904B1 E1FD                       	smpsAlterNote       $FD
000904B3 ECF5                       	smpsPSGAlterVol     $F5
000904B5 9106                       	dc.b	nE1, $06
000904B7 EC04                       	smpsPSGAlterVol     $04
000904B9 E701                       	dc.b	smpsNoAttack, $01
000904BB EC07                       	smpsPSGAlterVol     $07
000904BD 8003                       	dc.b	nRst, $03
000904BF ECF5                       	smpsPSGAlterVol     $F5
000904C1 9107 9106                  	dc.b	nE1, $07, nE1, $06
000904C5 EC04                       	smpsPSGAlterVol     $04
000904C7 E701                       	dc.b	smpsNoAttack, $01
000904C9 ECFC                       	smpsPSGAlterVol     $FC
000904CB 9103 9103                  	dc.b	nE1, $03, nE1, $03
000904CF EC04                       	smpsPSGAlterVol     $04
000904D1 E701                       	dc.b	smpsNoAttack, $01
000904D3 ECFC                       	smpsPSGAlterVol     $FC
000904D5 9106                       	dc.b	nE1, $06
000904D7 EC04                       	smpsPSGAlterVol     $04
000904D9 E701                       	dc.b	smpsNoAttack, $01
000904DB EC07                       	smpsPSGAlterVol     $07
000904DD 8006                       	dc.b	nRst, $06
000904DF E100                       	smpsAlterNote       $00
000904E1 01                         	dc.b	$01
000904E2 E104                       	smpsAlterNote       $04
000904E4 01                         	dc.b	$01
000904E5 E100                       	smpsAlterNote       $00
000904E7 01                         	dc.b	$01
000904E8 E1FA                       	smpsAlterNote       $FA
000904EA 01                         	dc.b	$01
000904EB E1F9                       	smpsAlterNote       $F9
000904ED 01                         	dc.b	$01
000904EE E1FD                       	smpsAlterNote       $FD
000904F0 01                         	dc.b	$01
000904F1 E103                       	smpsAlterNote       $03
000904F3 01                         	dc.b	$01
000904F4 E104                       	smpsAlterNote       $04
000904F6 01                         	dc.b	$01
000904F7 E100                       	smpsAlterNote       $00
000904F9 01                         	dc.b	$01
000904FA E1FA                       	smpsAlterNote       $FA
000904FC 0101                       	dc.b	$01, $01
000904FE E1FD                       	smpsAlterNote       $FD
00090500 ECF5                       	smpsPSGAlterVol     $F5
00090502 9206                       	dc.b	nF1, $06
00090504 EC04                       	smpsPSGAlterVol     $04
00090506 E701                       	dc.b	smpsNoAttack, $01
00090508 EC07                       	smpsPSGAlterVol     $07
0009050A 8003                       	dc.b	nRst, $03
0009050C ECF5                       	smpsPSGAlterVol     $F5
0009050E 9206                       	dc.b	nF1, $06
00090510 EC04                       	smpsPSGAlterVol     $04
00090512 E701                       	dc.b	smpsNoAttack, $01
00090514 EC07                       	smpsPSGAlterVol     $07
00090516 8006                       	dc.b	nRst, $06
00090518 E100                       	smpsAlterNote       $00
0009051A 01                         	dc.b	$01
0009051B E104                       	smpsAlterNote       $04
0009051D 01                         	dc.b	$01
0009051E E103                       	smpsAlterNote       $03
00090520 01                         	dc.b	$01
00090521 E1FD                       	smpsAlterNote       $FD
00090523 01                         	dc.b	$01
00090524 ECF5                       	smpsPSGAlterVol     $F5
00090526 9407                       	dc.b	nG1, $07
00090528 EC0B                       	smpsPSGAlterVol     $0B
0009052A 8004                       	dc.b	nRst, $04
0009052C ECF5                       	smpsPSGAlterVol     $F5
0009052E 9406                       	dc.b	nG1, $06
00090530 EC0B                       	smpsPSGAlterVol     $0B
00090532 8007                       	dc.b	nRst, $07
00090534 E103                       	smpsAlterNote       $03
00090536 0101                       	dc.b	$01, $01
00090538 E1FD                       	smpsAlterNote       $FD
0009053A 01                         	dc.b	$01
0009053B E1F9                       	smpsAlterNote       $F9
0009053D 01                         	dc.b	$01
0009053E E1FD                       	smpsAlterNote       $FD
00090540 ECF5                       	smpsPSGAlterVol     $F5
00090542 9206                       	dc.b	nF1, $06
00090544 EC04                       	smpsPSGAlterVol     $04
00090546 E701                       	dc.b	smpsNoAttack, $01
00090548 EC07                       	smpsPSGAlterVol     $07
0009054A 8003                       	dc.b	nRst, $03
0009054C ECF5                       	smpsPSGAlterVol     $F5
0009054E 9206                       	dc.b	nF1, $06
00090550 EC04                       	smpsPSGAlterVol     $04
00090552 E701                       	dc.b	smpsNoAttack, $01
00090554 EC07                       	smpsPSGAlterVol     $07
00090556 8006                       	dc.b	nRst, $06
00090558 E100                       	smpsAlterNote       $00
0009055A 01                         	dc.b	$01
0009055B E104                       	smpsAlterNote       $04
0009055D 01                         	dc.b	$01
0009055E E100                       	smpsAlterNote       $00
00090560 01                         	dc.b	$01
00090561 E1FA                       	smpsAlterNote       $FA
00090563 01                         	dc.b	$01
00090564 E1FD                       	smpsAlterNote       $FD
00090566 ECF5                       	smpsPSGAlterVol     $F5
00090568 9206                       	dc.b	nF1, $06
0009056A EC04                       	smpsPSGAlterVol     $04
0009056C E701                       	dc.b	smpsNoAttack, $01
0009056E EC07                       	smpsPSGAlterVol     $07
00090570 8003                       	dc.b	nRst, $03
00090572 ECF5                       	smpsPSGAlterVol     $F5
00090574 9107                       	dc.b	nE1, $07
00090576 EC0B                       	smpsPSGAlterVol     $0B
00090578 8006                       	dc.b	nRst, $06
0009057A E100                       	smpsAlterNote       $00
0009057C 01                         	dc.b	$01
0009057D E103                       	smpsAlterNote       $03
0009057F 0101                       	dc.b	$01, $01
00090581 E1FD                       	smpsAlterNote       $FD
00090583 01                         	dc.b	$01
00090584 ECF5                       	smpsPSGAlterVol     $F5
00090586 9207                       	dc.b	nF1, $07
00090588 EC0B                       	smpsPSGAlterVol     $0B
0009058A 8004                       	dc.b	nRst, $04
0009058C ECF5                       	smpsPSGAlterVol     $F5
0009058E 9206                       	dc.b	nF1, $06
00090590 EC04                       	smpsPSGAlterVol     $04
00090592 E701                       	dc.b	smpsNoAttack, $01
00090594 EC07                       	smpsPSGAlterVol     $07
00090596 8006                       	dc.b	nRst, $06
00090598 E103                       	smpsAlterNote       $03
0009059A 01                         	dc.b	$01
0009059B E104                       	smpsAlterNote       $04
0009059D 01                         	dc.b	$01
0009059E E100                       	smpsAlterNote       $00
000905A0 01                         	dc.b	$01
000905A1 E1FB                       	smpsAlterNote       $FB
000905A3 01                         	dc.b	$01
000905A4 E1FD                       	smpsAlterNote       $FD
000905A6 ECF5                       	smpsPSGAlterVol     $F5
000905A8 9406                       	dc.b	nG1, $06
000905AA EC04                       	smpsPSGAlterVol     $04
000905AC E701                       	dc.b	smpsNoAttack, $01
000905AE EC07                       	smpsPSGAlterVol     $07
000905B0 8003                       	dc.b	nRst, $03
000905B2 ECF5                       	smpsPSGAlterVol     $F5
000905B4 9406                       	dc.b	nG1, $06
000905B6 EC04                       	smpsPSGAlterVol     $04
000905B8 E701                       	dc.b	smpsNoAttack, $01
000905BA EC07                       	smpsPSGAlterVol     $07
000905BC 8006                       	dc.b	nRst, $06
000905BE E100                       	smpsAlterNote       $00
000905C0 01                         	dc.b	$01
000905C1 E104                       	smpsAlterNote       $04
000905C3 01                         	dc.b	$01
000905C4 E100                       	smpsAlterNote       $00
000905C6 01                         	dc.b	$01
000905C7 E1FD                       	smpsAlterNote       $FD
000905C9 01                         	dc.b	$01
000905CA ECF5                       	smpsPSGAlterVol     $F5
000905CC 9206                       	dc.b	nF1, $06
000905CE EC04                       	smpsPSGAlterVol     $04
000905D0 E701                       	dc.b	smpsNoAttack, $01
000905D2 EC07                       	smpsPSGAlterVol     $07
000905D4 8003                       	dc.b	nRst, $03
000905D6 ECF5                       	smpsPSGAlterVol     $F5
000905D8 9207                       	dc.b	nF1, $07
000905DA EC0B                       	smpsPSGAlterVol     $0B
000905DC 8007                       	dc.b	nRst, $07
000905DE E103                       	smpsAlterNote       $03
000905E0 0101                       	dc.b	$01, $01
000905E2 E1FD                       	smpsAlterNote       $FD
000905E4 01                         	dc.b	$01
000905E5 E1FA                       	smpsAlterNote       $FA
000905E7 01                         	dc.b	$01
000905E8 E1FD                       	smpsAlterNote       $FD
000905EA ECF5                       	smpsPSGAlterVol     $F5
000905EC 9206                       	dc.b	nF1, $06
000905EE EC0B                       	smpsPSGAlterVol     $0B
000905F0 8004                       	dc.b	nRst, $04
000905F2 ECF5                       	smpsPSGAlterVol     $F5
000905F4 9206                       	dc.b	nF1, $06
000905F6 EC04                       	smpsPSGAlterVol     $04
000905F8 E701                       	dc.b	smpsNoAttack, $01
000905FA EC07                       	smpsPSGAlterVol     $07
000905FC 8006                       	dc.b	nRst, $06
000905FE E100                       	smpsAlterNote       $00
00090600 01                         	dc.b	$01
00090601 E104                       	smpsAlterNote       $04
00090603 01                         	dc.b	$01
00090604 E100                       	smpsAlterNote       $00
00090606 01                         	dc.b	$01
00090607 E1FA                       	smpsAlterNote       $FA
00090609 01                         	dc.b	$01
0009060A E1FD                       	smpsAlterNote       $FD
0009060C ECF5                       	smpsPSGAlterVol     $F5
0009060E 9206                       	dc.b	nF1, $06
00090610 EC04                       	smpsPSGAlterVol     $04
00090612 E704                       	dc.b	smpsNoAttack, $04
00090614 ECFC                       	smpsPSGAlterVol     $FC
00090616 9207                       	dc.b	nF1, $07
00090618 EC0B                       	smpsPSGAlterVol     $0B
0009061A 8006                       	dc.b	nRst, $06
0009061C E100                       	smpsAlterNote       $00
0009061E 01                         	dc.b	$01
0009061F E104                       	smpsAlterNote       $04
00090621 01                         	dc.b	$01
00090622 E103                       	smpsAlterNote       $03
00090624 01                         	dc.b	$01
00090625 E1FD                       	smpsAlterNote       $FD
00090627 01                         	dc.b	$01
00090628 ECF5                       	smpsPSGAlterVol     $F5
0009062A 9207                       	dc.b	nF1, $07
0009062C EC0B                       	smpsPSGAlterVol     $0B
0009062E 8004                       	dc.b	nRst, $04
00090630 ECF5                       	smpsPSGAlterVol     $F5
00090632 9206                       	dc.b	nF1, $06
00090634 EC0B                       	smpsPSGAlterVol     $0B
00090636 8007                       	dc.b	nRst, $07
00090638 E103                       	smpsAlterNote       $03
0009063A 0101                       	dc.b	$01, $01
0009063C E100                       	smpsAlterNote       $00
0009063E 01                         	dc.b	$01
0009063F E1FA                       	smpsAlterNote       $FA
00090641 01                         	dc.b	$01
00090642 E1FD                       	smpsAlterNote       $FD
00090644 ECF5                       	smpsPSGAlterVol     $F5
00090646 9206                       	dc.b	nF1, $06
00090648 EC04                       	smpsPSGAlterVol     $04
0009064A E704                       	dc.b	smpsNoAttack, $04
0009064C ECFC                       	smpsPSGAlterVol     $FC
0009064E 9206                       	dc.b	nF1, $06
00090650 EC04                       	smpsPSGAlterVol     $04
00090652 E701                       	dc.b	smpsNoAttack, $01
00090654 EC07                       	smpsPSGAlterVol     $07
00090656 8006                       	dc.b	nRst, $06
00090658 E100                       	smpsAlterNote       $00
0009065A 01                         	dc.b	$01
0009065B E104                       	smpsAlterNote       $04
0009065D 01                         	dc.b	$01
0009065E E100                       	smpsAlterNote       $00
00090660 01                         	dc.b	$01
00090661 E1FD                       	smpsAlterNote       $FD
00090663 01                         	dc.b	$01
00090664 ECF5                       	smpsPSGAlterVol     $F5
00090666 9206                       	dc.b	nF1, $06
00090668 EC04                       	smpsPSGAlterVol     $04
0009066A E701                       	dc.b	smpsNoAttack, $01
0009066C EC07                       	smpsPSGAlterVol     $07
0009066E 8003                       	dc.b	nRst, $03
00090670 ECF5                       	smpsPSGAlterVol     $F5
00090672 9207                       	dc.b	nF1, $07
00090674 EC0B                       	smpsPSGAlterVol     $0B
00090676 8007                       	dc.b	nRst, $07
00090678 E103                       	smpsAlterNote       $03
0009067A 0101                       	dc.b	$01, $01
0009067C E1FD                       	smpsAlterNote       $FD
0009067E 01                         	dc.b	$01
0009067F E1FA                       	smpsAlterNote       $FA
00090681 01                         	dc.b	$01
00090682 E1FD                       	smpsAlterNote       $FD
00090684 ECF5                       	smpsPSGAlterVol     $F5
00090686 9106                       	dc.b	nE1, $06
00090688 EC0B                       	smpsPSGAlterVol     $0B
0009068A 8004                       	dc.b	nRst, $04
0009068C ECF5                       	smpsPSGAlterVol     $F5
0009068E 9106                       	dc.b	nE1, $06
00090690 EC04                       	smpsPSGAlterVol     $04
00090692 E701                       	dc.b	smpsNoAttack, $01
00090694 EC07                       	smpsPSGAlterVol     $07
00090696 8006                       	dc.b	nRst, $06
00090698 E100                       	smpsAlterNote       $00
0009069A 01                         	dc.b	$01
0009069B E104                       	smpsAlterNote       $04
0009069D 01                         	dc.b	$01
0009069E E100                       	smpsAlterNote       $00
000906A0 01                         	dc.b	$01
000906A1 E1FA                       	smpsAlterNote       $FA
000906A3 01                         	dc.b	$01
000906A4 E1FD                       	smpsAlterNote       $FD
000906A6 ECF5                       	smpsPSGAlterVol     $F5
000906A8 9106                       	dc.b	nE1, $06
000906AA EC04                       	smpsPSGAlterVol     $04
000906AC E701                       	dc.b	smpsNoAttack, $01
000906AE EC07                       	smpsPSGAlterVol     $07
000906B0 8003                       	dc.b	nRst, $03
000906B2 ECF5                       	smpsPSGAlterVol     $F5
000906B4 9106                       	dc.b	nE1, $06
000906B6 EC04                       	smpsPSGAlterVol     $04
000906B8 E701                       	dc.b	smpsNoAttack, $01
000906BA EC07                       	smpsPSGAlterVol     $07
000906BC 8006                       	dc.b	nRst, $06
000906BE E100                       	smpsAlterNote       $00
000906C0 01                         	dc.b	$01
000906C1 E104                       	smpsAlterNote       $04
000906C3 01                         	dc.b	$01
000906C4 E103                       	smpsAlterNote       $03
000906C6 01                         	dc.b	$01
000906C7 E1FD                       	smpsAlterNote       $FD
000906C9 01                         	dc.b	$01
000906CA ECF5                       	smpsPSGAlterVol     $F5
000906CC 9107                       	dc.b	nE1, $07
000906CE EC0B                       	smpsPSGAlterVol     $0B
000906D0 8004                       	dc.b	nRst, $04
000906D2 ECF5                       	smpsPSGAlterVol     $F5
000906D4 9106                       	dc.b	nE1, $06
000906D6 EC0B                       	smpsPSGAlterVol     $0B
000906D8 8007                       	dc.b	nRst, $07
000906DA E103                       	smpsAlterNote       $03
000906DC 0101                       	dc.b	$01, $01
000906DE E100                       	smpsAlterNote       $00
000906E0 01                         	dc.b	$01
000906E1 E1FA                       	smpsAlterNote       $FA
000906E3 01                         	dc.b	$01
000906E4 E1FD                       	smpsAlterNote       $FD
000906E6 ECF5                       	smpsPSGAlterVol     $F5
000906E8 9106                       	dc.b	nE1, $06
000906EA EC04                       	smpsPSGAlterVol     $04
000906EC E701                       	dc.b	smpsNoAttack, $01
000906EE EC07                       	smpsPSGAlterVol     $07
000906F0 8003                       	dc.b	nRst, $03
000906F2 ECF5                       	smpsPSGAlterVol     $F5
000906F4 9106                       	dc.b	nE1, $06
000906F6 EC04                       	smpsPSGAlterVol     $04
000906F8 E701                       	dc.b	smpsNoAttack, $01
000906FA EC07                       	smpsPSGAlterVol     $07
000906FC 8003                       	dc.b	nRst, $03
000906FE ECF5                       	smpsPSGAlterVol     $F5
00090700 9207                       	dc.b	nF1, $07
00090702 EC0B                       	smpsPSGAlterVol     $0B
00090704 8006                       	dc.b	nRst, $06
00090706 E100                       	smpsAlterNote       $00
00090708 01                         	dc.b	$01
00090709 E104                       	smpsAlterNote       $04
0009070B 01                         	dc.b	$01
0009070C E103                       	smpsAlterNote       $03
0009070E 01                         	dc.b	$01
0009070F E1FD                       	smpsAlterNote       $FD
00090711 01                         	dc.b	$01
00090712 E1F9                       	smpsAlterNote       $F9
00090714 01                         	dc.b	$01
00090715 E1FD                       	smpsAlterNote       $FD
00090717 01                         	dc.b	$01
00090718 E100                       	smpsAlterNote       $00
0009071A 01                         	dc.b	$01
0009071B E104                       	smpsAlterNote       $04
0009071D 01                         	dc.b	$01
0009071E E1FD                       	smpsAlterNote       $FD
00090720 ECF5                       	smpsPSGAlterVol     $F5
00090722 9203 9203                  	dc.b	nF1, $03, nF1, $03
00090726 EC04                       	smpsPSGAlterVol     $04
00090728 E701                       	dc.b	smpsNoAttack, $01
0009072A EC07                       	smpsPSGAlterVol     $07
0009072C 8009                       	dc.b	nRst, $09
0009072E E100                       	smpsAlterNote       $00
00090730 01                         	dc.b	$01
00090731 E104                       	smpsAlterNote       $04
00090733 01                         	dc.b	$01
00090734 E103                       	smpsAlterNote       $03
00090736 01                         	dc.b	$01
00090737 E1FD                       	smpsAlterNote       $FD
00090739 01                         	dc.b	$01
0009073A E1F9                       	smpsAlterNote       $F9
0009073C 01                         	dc.b	$01
0009073D E1FD                       	smpsAlterNote       $FD
0009073F 01                         	dc.b	$01
00090740 E100                       	smpsAlterNote       $00
00090742 01                         	dc.b	$01
00090743 E104                       	smpsAlterNote       $04
00090745 01                         	dc.b	$01
00090746 E100                       	smpsAlterNote       $00
00090748 01                         	dc.b	$01
00090749 E1FA                       	smpsAlterNote       $FA
0009074B 01                         	dc.b	$01
0009074C E1F9                       	smpsAlterNote       $F9
0009074E 01                         	dc.b	$01
0009074F E1FD                       	smpsAlterNote       $FD
00090751 01                         	dc.b	$01
00090752 E103                       	smpsAlterNote       $03
00090754 0101                       	dc.b	$01, $01
00090756 E100                       	smpsAlterNote       $00
00090758 01                         	dc.b	$01
00090759 E1FD                       	smpsAlterNote       $FD
0009075B ECF5                       	smpsPSGAlterVol     $F5
0009075D 9202                       	dc.b	nF1, $02
0009075F EC04                       	smpsPSGAlterVol     $04
00090761 E701                       	dc.b	smpsNoAttack, $01
00090763 ECFC                       	smpsPSGAlterVol     $FC
00090765 9106                       	dc.b	nE1, $06
00090767 EC04                       	smpsPSGAlterVol     $04
00090769 E701                       	dc.b	smpsNoAttack, $01
0009076B EC07                       	smpsPSGAlterVol     $07
0009076D 8006                       	dc.b	nRst, $06
0009076F E100                       	smpsAlterNote       $00
00090771 01                         	dc.b	$01
00090772 E104                       	smpsAlterNote       $04
00090774 01                         	dc.b	$01
00090775 E100                       	smpsAlterNote       $00
00090777 01                         	dc.b	$01
00090778 E1FD                       	smpsAlterNote       $FD
0009077A 01                         	dc.b	$01
0009077B E1F9                       	smpsAlterNote       $F9
0009077D 01                         	dc.b	$01
0009077E E1FD                       	smpsAlterNote       $FD
00090780 01                         	dc.b	$01
00090781 E103                       	smpsAlterNote       $03
00090783 01                         	dc.b	$01
00090784 E104                       	smpsAlterNote       $04
00090786 01                         	dc.b	$01
00090787 E1FD                       	smpsAlterNote       $FD
00090789 ECF5                       	smpsPSGAlterVol     $F5
0009078B 9102                       	dc.b	nE1, $02
0009078D EC04                       	smpsPSGAlterVol     $04
0009078F E701                       	dc.b	smpsNoAttack, $01
00090791 ECFC                       	smpsPSGAlterVol     $FC
00090793 920D                       	dc.b	nF1, $0D
00090795 E100                       	smpsAlterNote       $00
00090797 E701                       	dc.b	smpsNoAttack, $01
00090799 E104                       	smpsAlterNote       $04
0009079B E701                       	dc.b	smpsNoAttack, $01
0009079D E100                       	smpsAlterNote       $00
0009079F E701                       	dc.b	smpsNoAttack, $01
000907A1 E1FD                       	smpsAlterNote       $FD
000907A3 E701                       	dc.b	smpsNoAttack, $01
000907A5 E1F9                       	smpsAlterNote       $F9
000907A7 E701                       	dc.b	smpsNoAttack, $01
000907A9 E1FD                       	smpsAlterNote       $FD
000907AB E701                       	dc.b	smpsNoAttack, $01
000907AD E103                       	smpsAlterNote       $03
000907AF E701                       	dc.b	smpsNoAttack, $01
000907B1 E104                       	smpsAlterNote       $04
000907B3 E701                       	dc.b	smpsNoAttack, $01
000907B5 E100                       	smpsAlterNote       $00
000907B7 E701                       	dc.b	smpsNoAttack, $01
000907B9 E1FA                       	smpsAlterNote       $FA
000907BB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000907BF E1FD                       	smpsAlterNote       $FD
000907C1 E701                       	dc.b	smpsNoAttack, $01
000907C3 E103                       	smpsAlterNote       $03
000907C5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000907C9 E1FD                       	smpsAlterNote       $FD
000907CB E701                       	dc.b	smpsNoAttack, $01
000907CD E1F9                       	smpsAlterNote       $F9
000907CF E701                       	dc.b	smpsNoAttack, $01
000907D1 E1FA                       	smpsAlterNote       $FA
000907D3 E701                       	dc.b	smpsNoAttack, $01
000907D5 E100                       	smpsAlterNote       $00
000907D7 EC04                       	smpsPSGAlterVol     $04
000907D9 E701                       	dc.b	smpsNoAttack, $01
000907DB EC07                       	smpsPSGAlterVol     $07
000907DD E104                       	smpsAlterNote       $04
000907DF 8001                       	dc.b	nRst, $01
000907E1 E100                       	smpsAlterNote       $00
000907E3 01                         	dc.b	$01
000907E4 E1FD                       	smpsAlterNote       $FD
000907E6 01                         	dc.b	$01
000907E7 E1F9                       	smpsAlterNote       $F9
000907E9 01                         	dc.b	$01
000907EA E1FD                       	smpsAlterNote       $FD
000907EC 01                         	dc.b	$01
000907ED E103                       	smpsAlterNote       $03
000907EF 01                         	dc.b	$01
000907F0 E104                       	smpsAlterNote       $04
000907F2 01                         	dc.b	$01
000907F3 E1FD                       	smpsAlterNote       $FD
000907F5 ECF5                       	smpsPSGAlterVol     $F5
000907F7 9106                       	dc.b	nE1, $06
000907F9 EC04                       	smpsPSGAlterVol     $04
000907FB E701                       	dc.b	smpsNoAttack, $01
000907FD EC07                       	smpsPSGAlterVol     $07
000907FF 8003                       	dc.b	nRst, $03
00090801 ECF5                       	smpsPSGAlterVol     $F5
00090803 9106                       	dc.b	nE1, $06
00090805 EC04                       	smpsPSGAlterVol     $04
00090807 E701                       	dc.b	smpsNoAttack, $01
00090809 EC07                       	smpsPSGAlterVol     $07
0009080B 8006                       	dc.b	nRst, $06
0009080D E100                       	smpsAlterNote       $00
0009080F 01                         	dc.b	$01
00090810 E104                       	smpsAlterNote       $04
00090812 01                         	dc.b	$01
00090813 E100                       	smpsAlterNote       $00
00090815 01                         	dc.b	$01
00090816 E1FA                       	smpsAlterNote       $FA
00090818 01                         	dc.b	$01
00090819 E1FD                       	smpsAlterNote       $FD
0009081B ECF5                       	smpsPSGAlterVol     $F5
0009081D 9206                       	dc.b	nF1, $06
0009081F EC04                       	smpsPSGAlterVol     $04
00090821 E701                       	dc.b	smpsNoAttack, $01
00090823 EC07                       	smpsPSGAlterVol     $07
00090825 8003                       	dc.b	nRst, $03
00090827 ECF5                       	smpsPSGAlterVol     $F5
00090829 9207                       	dc.b	nF1, $07
0009082B EC0B                       	smpsPSGAlterVol     $0B
0009082D 8006                       	dc.b	nRst, $06
0009082F E100                       	smpsAlterNote       $00
00090831 01                         	dc.b	$01
00090832 E103                       	smpsAlterNote       $03
00090834 0101                       	dc.b	$01, $01
00090836 E1FD                       	smpsAlterNote       $FD
00090838 01                         	dc.b	$01
00090839 ECF5                       	smpsPSGAlterVol     $F5
0009083B 9107                       	dc.b	nE1, $07
0009083D EC0B                       	smpsPSGAlterVol     $0B
0009083F 8004                       	dc.b	nRst, $04
00090841 ECF5                       	smpsPSGAlterVol     $F5
00090843 9106                       	dc.b	nE1, $06
00090845 EC04                       	smpsPSGAlterVol     $04
00090847 E701                       	dc.b	smpsNoAttack, $01
00090849 EC07                       	smpsPSGAlterVol     $07
0009084B 8006                       	dc.b	nRst, $06
0009084D E103                       	smpsAlterNote       $03
0009084F 01                         	dc.b	$01
00090850 E104                       	smpsAlterNote       $04
00090852 01                         	dc.b	$01
00090853 E100                       	smpsAlterNote       $00
00090855 01                         	dc.b	$01
00090856 E1FA                       	smpsAlterNote       $FA
00090858 01                         	dc.b	$01
00090859 E1FD                       	smpsAlterNote       $FD
0009085B ECF5                       	smpsPSGAlterVol     $F5
0009085D 9106                       	dc.b	nE1, $06
0009085F EC04                       	smpsPSGAlterVol     $04
00090861 E701                       	dc.b	smpsNoAttack, $01
00090863 EC07                       	smpsPSGAlterVol     $07
00090865 8003                       	dc.b	nRst, $03
00090867 ECF5                       	smpsPSGAlterVol     $F5
00090869 9106                       	dc.b	nE1, $06
0009086B EC04                       	smpsPSGAlterVol     $04
0009086D E701                       	dc.b	smpsNoAttack, $01
0009086F EC07                       	smpsPSGAlterVol     $07
00090871 8003                       	dc.b	nRst, $03
00090873 ECF5                       	smpsPSGAlterVol     $F5
00090875 9207                       	dc.b	nF1, $07
00090877 EC0B                       	smpsPSGAlterVol     $0B
00090879 8006                       	dc.b	nRst, $06
0009087B E100                       	smpsAlterNote       $00
0009087D 01                         	dc.b	$01
0009087E E103                       	smpsAlterNote       $03
00090880 0101                       	dc.b	$01, $01
00090882 E1FD                       	smpsAlterNote       $FD
00090884 01                         	dc.b	$01
00090885 E1F9                       	smpsAlterNote       $F9
00090887 01                         	dc.b	$01
00090888 E1FA                       	smpsAlterNote       $FA
0009088A 01                         	dc.b	$01
0009088B E100                       	smpsAlterNote       $00
0009088D 01                         	dc.b	$01
0009088E E104                       	smpsAlterNote       $04
00090890 01                         	dc.b	$01
00090891 E1FD                       	smpsAlterNote       $FD
00090893 ECF5                       	smpsPSGAlterVol     $F5
00090895 9203 9203                  	dc.b	nF1, $03, nF1, $03
00090899 EC04                       	smpsPSGAlterVol     $04
0009089B E701                       	dc.b	smpsNoAttack, $01
0009089D EC07                       	smpsPSGAlterVol     $07
0009089F 8009                       	dc.b	nRst, $09
000908A1 E100                       	smpsAlterNote       $00
000908A3 01                         	dc.b	$01
000908A4 E103                       	smpsAlterNote       $03
000908A6 0101                       	dc.b	$01, $01
000908A8 E1FD                       	smpsAlterNote       $FD
000908AA 01                         	dc.b	$01
000908AB E1F9                       	smpsAlterNote       $F9
000908AD 01                         	dc.b	$01
000908AE E1FA                       	smpsAlterNote       $FA
000908B0 01                         	dc.b	$01
000908B1 E100                       	smpsAlterNote       $00
000908B3 01                         	dc.b	$01
000908B4 E104                       	smpsAlterNote       $04
000908B6 01                         	dc.b	$01
000908B7 E100                       	smpsAlterNote       $00
000908B9 01                         	dc.b	$01
000908BA E1FD                       	smpsAlterNote       $FD
000908BC 01                         	dc.b	$01
000908BD E1F9                       	smpsAlterNote       $F9
000908BF 01                         	dc.b	$01
000908C0 E1FD                       	smpsAlterNote       $FD
000908C2 01                         	dc.b	$01
000908C3 E103                       	smpsAlterNote       $03
000908C5 01                         	dc.b	$01
000908C6 E104                       	smpsAlterNote       $04
000908C8 01                         	dc.b	$01
000908C9 E100                       	smpsAlterNote       $00
000908CB 01                         	dc.b	$01
000908CC E1FD                       	smpsAlterNote       $FD
000908CE ECF5                       	smpsPSGAlterVol     $F5
000908D0 9203 9106                  	dc.b	nF1, $03, nE1, $06
000908D4 EC04                       	smpsPSGAlterVol     $04
000908D6 E701                       	dc.b	smpsNoAttack, $01
000908D8 EC07                       	smpsPSGAlterVol     $07
000908DA 8006                       	dc.b	nRst, $06
000908DC E100                       	smpsAlterNote       $00
000908DE 01                         	dc.b	$01
000908DF E104                       	smpsAlterNote       $04
000908E1 01                         	dc.b	$01
000908E2 E103                       	smpsAlterNote       $03
000908E4 01                         	dc.b	$01
000908E5 E1FD                       	smpsAlterNote       $FD
000908E7 01                         	dc.b	$01
000908E8 E1F9                       	smpsAlterNote       $F9
000908EA 01                         	dc.b	$01
000908EB E1FD                       	smpsAlterNote       $FD
000908ED 01                         	dc.b	$01
000908EE E100                       	smpsAlterNote       $00
000908F0 01                         	dc.b	$01
000908F1 E104                       	smpsAlterNote       $04
000908F3 01                         	dc.b	$01
000908F4 E1FD                       	smpsAlterNote       $FD
000908F6 ECF5                       	smpsPSGAlterVol     $F5
000908F8 9103 920D                  	dc.b	nE1, $03, nF1, $0D
000908FC E100                       	smpsAlterNote       $00
000908FE E701                       	dc.b	smpsNoAttack, $01
00090900 E104                       	smpsAlterNote       $04
00090902 E701                       	dc.b	smpsNoAttack, $01
00090904 E100                       	smpsAlterNote       $00
00090906 E701                       	dc.b	smpsNoAttack, $01
00090908 E1FD                       	smpsAlterNote       $FD
0009090A E701                       	dc.b	smpsNoAttack, $01
0009090C E1F9                       	smpsAlterNote       $F9
0009090E E701                       	dc.b	smpsNoAttack, $01
00090910 E1FD                       	smpsAlterNote       $FD
00090912 E701                       	dc.b	smpsNoAttack, $01
00090914 E103                       	smpsAlterNote       $03
00090916 E701                       	dc.b	smpsNoAttack, $01
00090918 E104                       	smpsAlterNote       $04
0009091A E701                       	dc.b	smpsNoAttack, $01
0009091C E100                       	smpsAlterNote       $00
0009091E E701                       	dc.b	smpsNoAttack, $01
00090920 E1FA                       	smpsAlterNote       $FA
00090922 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090926 E1FD                       	smpsAlterNote       $FD
00090928 E701                       	dc.b	smpsNoAttack, $01
0009092A E103                       	smpsAlterNote       $03
0009092C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090930 E100                       	smpsAlterNote       $00
00090932 E701                       	dc.b	smpsNoAttack, $01
00090934 E1FA                       	smpsAlterNote       $FA
00090936 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009093A E100                       	smpsAlterNote       $00
0009093C EC04                       	smpsPSGAlterVol     $04
0009093E E701                       	dc.b	smpsNoAttack, $01
00090940 EC07                       	smpsPSGAlterVol     $07
00090942 E104                       	smpsAlterNote       $04
00090944 8001                       	dc.b	nRst, $01
00090946 E103                       	smpsAlterNote       $03
00090948 01                         	dc.b	$01
00090949 E1FD                       	smpsAlterNote       $FD
0009094B 01                         	dc.b	$01
0009094C E1F9                       	smpsAlterNote       $F9
0009094E 01                         	dc.b	$01
0009094F E1FD                       	smpsAlterNote       $FD
00090951 01                         	dc.b	$01
00090952 E100                       	smpsAlterNote       $00
00090954 01                         	dc.b	$01
00090955 E104                       	smpsAlterNote       $04
00090957 01                         	dc.b	$01
00090958 E1FD                       	smpsAlterNote       $FD
0009095A ECF5                       	smpsPSGAlterVol     $F5
0009095C 9106                       	dc.b	nE1, $06
0009095E EC04                       	smpsPSGAlterVol     $04
00090960 E701                       	dc.b	smpsNoAttack, $01
00090962 EC07                       	smpsPSGAlterVol     $07
00090964 8003                       	dc.b	nRst, $03
00090966 ECF5                       	smpsPSGAlterVol     $F5
00090968 9106                       	dc.b	nE1, $06
0009096A EC04                       	smpsPSGAlterVol     $04
0009096C E701                       	dc.b	smpsNoAttack, $01
0009096E EC07                       	smpsPSGAlterVol     $07
00090970 8006                       	dc.b	nRst, $06
00090972 E100                       	smpsAlterNote       $00
00090974 01                         	dc.b	$01
00090975 E104                       	smpsAlterNote       $04
00090977 01                         	dc.b	$01
00090978 E100                       	smpsAlterNote       $00
0009097A 01                         	dc.b	$01
0009097B E1FD                       	smpsAlterNote       $FD
0009097D 01                         	dc.b	$01
0009097E ECF5                       	smpsPSGAlterVol     $F5
00090980 9206                       	dc.b	nF1, $06
00090982 EC04                       	smpsPSGAlterVol     $04
00090984 E701                       	dc.b	smpsNoAttack, $01
00090986 EC07                       	smpsPSGAlterVol     $07
00090988 8003                       	dc.b	nRst, $03
0009098A ECF5                       	smpsPSGAlterVol     $F5
0009098C 9207                       	dc.b	nF1, $07
0009098E EC0B                       	smpsPSGAlterVol     $0B
00090990 8007                       	dc.b	nRst, $07
00090992 E103                       	smpsAlterNote       $03
00090994 0101                       	dc.b	$01, $01
00090996 E1FD                       	smpsAlterNote       $FD
00090998 01                         	dc.b	$01
00090999 E1FA                       	smpsAlterNote       $FA
0009099B 01                         	dc.b	$01
0009099C E1FD                       	smpsAlterNote       $FD
0009099E ECF5                       	smpsPSGAlterVol     $F5
000909A0 9106                       	dc.b	nE1, $06
000909A2 EC0B                       	smpsPSGAlterVol     $0B
000909A4 8004                       	dc.b	nRst, $04
000909A6 ECF5                       	smpsPSGAlterVol     $F5
000909A8 9106                       	dc.b	nE1, $06
000909AA EC04                       	smpsPSGAlterVol     $04
000909AC E701                       	dc.b	smpsNoAttack, $01
000909AE EC07                       	smpsPSGAlterVol     $07
000909B0 8006                       	dc.b	nRst, $06
000909B2 E100                       	smpsAlterNote       $00
000909B4 01                         	dc.b	$01
000909B5 E104                       	smpsAlterNote       $04
000909B7 01                         	dc.b	$01
000909B8 E100                       	smpsAlterNote       $00
000909BA 01                         	dc.b	$01
000909BB E1FA                       	smpsAlterNote       $FA
000909BD 01                         	dc.b	$01
000909BE E1FD                       	smpsAlterNote       $FD
000909C0 ECF5                       	smpsPSGAlterVol     $F5
000909C2 9206                       	dc.b	nF1, $06
000909C4 EC04                       	smpsPSGAlterVol     $04
000909C6 E701                       	dc.b	smpsNoAttack, $01
000909C8 EC07                       	smpsPSGAlterVol     $07
000909CA 8003                       	dc.b	nRst, $03
000909CC ECF5                       	smpsPSGAlterVol     $F5
000909CE 9206                       	dc.b	nF1, $06
000909D0 EC04                       	smpsPSGAlterVol     $04
000909D2 E701                       	dc.b	smpsNoAttack, $01
000909D4 EC07                       	smpsPSGAlterVol     $07
000909D6 8006                       	dc.b	nRst, $06
000909D8 E100                       	smpsAlterNote       $00
000909DA 01                         	dc.b	$01
000909DB E104                       	smpsAlterNote       $04
000909DD 01                         	dc.b	$01
000909DE E103                       	smpsAlterNote       $03
000909E0 01                         	dc.b	$01
000909E1 E1FD                       	smpsAlterNote       $FD
000909E3 01                         	dc.b	$01
000909E4 ECF5                       	smpsPSGAlterVol     $F5
000909E6 9107                       	dc.b	nE1, $07
000909E8 EC0B                       	smpsPSGAlterVol     $0B
000909EA 8004                       	dc.b	nRst, $04
000909EC ECF5                       	smpsPSGAlterVol     $F5
000909EE 9106                       	dc.b	nE1, $06
000909F0 EC0B                       	smpsPSGAlterVol     $0B
000909F2 8007                       	dc.b	nRst, $07
000909F4 E103                       	smpsAlterNote       $03
000909F6 0101                       	dc.b	$01, $01
000909F8 E100                       	smpsAlterNote       $00
000909FA 01                         	dc.b	$01
000909FB E1FA                       	smpsAlterNote       $FA
000909FD 01                         	dc.b	$01
000909FE E1FD                       	smpsAlterNote       $FD
00090A00 ECF5                       	smpsPSGAlterVol     $F5
00090A02 9206                       	dc.b	nF1, $06
00090A04 EC04                       	smpsPSGAlterVol     $04
00090A06 E701                       	dc.b	smpsNoAttack, $01
00090A08 EC07                       	smpsPSGAlterVol     $07
00090A0A 8003                       	dc.b	nRst, $03
00090A0C ECF5                       	smpsPSGAlterVol     $F5
00090A0E 9206                       	dc.b	nF1, $06
00090A10 EC04                       	smpsPSGAlterVol     $04
00090A12 E701                       	dc.b	smpsNoAttack, $01
00090A14 EC07                       	smpsPSGAlterVol     $07
00090A16 8006                       	dc.b	nRst, $06
00090A18 E100                       	smpsAlterNote       $00
00090A1A 01                         	dc.b	$01
00090A1B E104                       	smpsAlterNote       $04
00090A1D 01                         	dc.b	$01
00090A1E E100                       	smpsAlterNote       $00
00090A20 01                         	dc.b	$01
00090A21 E1FD                       	smpsAlterNote       $FD
00090A23 01                         	dc.b	$01
00090A24 ECF5                       	smpsPSGAlterVol     $F5
00090A26 9106                       	dc.b	nE1, $06
00090A28 EC04                       	smpsPSGAlterVol     $04
00090A2A E701                       	dc.b	smpsNoAttack, $01
00090A2C EC07                       	smpsPSGAlterVol     $07
00090A2E 8003                       	dc.b	nRst, $03
00090A30 ECF5                       	smpsPSGAlterVol     $F5
00090A32 9107 9106                  	dc.b	nE1, $07, nE1, $06
00090A36 EC04                       	smpsPSGAlterVol     $04
00090A38 E701                       	dc.b	smpsNoAttack, $01
00090A3A ECFC                       	smpsPSGAlterVol     $FC
00090A3C 9103                       	dc.b	nE1, $03
00090A3E EC04                       	smpsPSGAlterVol     $04
00090A40 E701                       	dc.b	smpsNoAttack, $01
00090A42 ECFC                       	smpsPSGAlterVol     $FC
00090A44 9102                       	dc.b	nE1, $02
00090A46 EC04                       	smpsPSGAlterVol     $04
00090A48 E701                       	dc.b	smpsNoAttack, $01
00090A4A ECFC                       	smpsPSGAlterVol     $FC
00090A4C 9103                       	dc.b	nE1, $03
00090A4E EC0B                       	smpsPSGAlterVol     $0B
00090A50 800A                       	dc.b	nRst, $0A
00090A52 E100                       	smpsAlterNote       $00
00090A54 01                         	dc.b	$01
00090A55 E104                       	smpsAlterNote       $04
00090A57 01                         	dc.b	$01
00090A58 E100                       	smpsAlterNote       $00
00090A5A 01                         	dc.b	$01
00090A5B E1FA                       	smpsAlterNote       $FA
00090A5D 01                         	dc.b	$01
00090A5E E1F9                       	smpsAlterNote       $F9
00090A60 01                         	dc.b	$01
00090A61 E1FD                       	smpsAlterNote       $FD
00090A63 01                         	dc.b	$01
00090A64 E103                       	smpsAlterNote       $03
00090A66 0101                       	dc.b	$01, $01
00090A68 E100                       	smpsAlterNote       $00
00090A6A 01                         	dc.b	$01
00090A6B E1FA                       	smpsAlterNote       $FA
00090A6D 0101                       	dc.b	$01, $01
00090A6F E1FD                       	smpsAlterNote       $FD
00090A71 ECF5                       	smpsPSGAlterVol     $F5
00090A73 9206                       	dc.b	nF1, $06
00090A75 EC04                       	smpsPSGAlterVol     $04
00090A77 E704                       	dc.b	smpsNoAttack, $04
00090A79 ECFC                       	smpsPSGAlterVol     $FC
00090A7B 9206                       	dc.b	nF1, $06
00090A7D EC04                       	smpsPSGAlterVol     $04
00090A7F E701                       	dc.b	smpsNoAttack, $01
00090A81 EC07                       	smpsPSGAlterVol     $07
00090A83 8006                       	dc.b	nRst, $06
00090A85 E100                       	smpsAlterNote       $00
00090A87 01                         	dc.b	$01
00090A88 E104                       	smpsAlterNote       $04
00090A8A 01                         	dc.b	$01
00090A8B E103                       	smpsAlterNote       $03
00090A8D 01                         	dc.b	$01
00090A8E E1FD                       	smpsAlterNote       $FD
00090A90 01                         	dc.b	$01
00090A91 ECF5                       	smpsPSGAlterVol     $F5
00090A93 9407                       	dc.b	nG1, $07
00090A95 EC0B                       	smpsPSGAlterVol     $0B
00090A97 8004                       	dc.b	nRst, $04
00090A99 ECF5                       	smpsPSGAlterVol     $F5
00090A9B 9406                       	dc.b	nG1, $06
00090A9D EC0B                       	smpsPSGAlterVol     $0B
00090A9F 8007                       	dc.b	nRst, $07
00090AA1 E103                       	smpsAlterNote       $03
00090AA3 0101                       	dc.b	$01, $01
00090AA5 E1FD                       	smpsAlterNote       $FD
00090AA7 01                         	dc.b	$01
00090AA8 E1F9                       	smpsAlterNote       $F9
00090AAA 01                         	dc.b	$01
00090AAB E1FD                       	smpsAlterNote       $FD
00090AAD ECF5                       	smpsPSGAlterVol     $F5
00090AAF 9206                       	dc.b	nF1, $06
00090AB1 EC04                       	smpsPSGAlterVol     $04
00090AB3 E701                       	dc.b	smpsNoAttack, $01
00090AB5 EC07                       	smpsPSGAlterVol     $07
00090AB7 8003                       	dc.b	nRst, $03
00090AB9 ECF5                       	smpsPSGAlterVol     $F5
00090ABB 9206                       	dc.b	nF1, $06
00090ABD EC04                       	smpsPSGAlterVol     $04
00090ABF E701                       	dc.b	smpsNoAttack, $01
00090AC1 EC07                       	smpsPSGAlterVol     $07
00090AC3 8006                       	dc.b	nRst, $06
00090AC5 E100                       	smpsAlterNote       $00
00090AC7 01                         	dc.b	$01
00090AC8 E104                       	smpsAlterNote       $04
00090ACA 01                         	dc.b	$01
00090ACB E100                       	smpsAlterNote       $00
00090ACD 01                         	dc.b	$01
00090ACE E1FA                       	smpsAlterNote       $FA
00090AD0 01                         	dc.b	$01
00090AD1 E1FD                       	smpsAlterNote       $FD
00090AD3 ECF5                       	smpsPSGAlterVol     $F5
00090AD5 9206                       	dc.b	nF1, $06
00090AD7 EC04                       	smpsPSGAlterVol     $04
00090AD9 E701                       	dc.b	smpsNoAttack, $01
00090ADB EC07                       	smpsPSGAlterVol     $07
00090ADD 8003                       	dc.b	nRst, $03
00090ADF ECF5                       	smpsPSGAlterVol     $F5
00090AE1 9107                       	dc.b	nE1, $07
00090AE3 EC0B                       	smpsPSGAlterVol     $0B
00090AE5 8006                       	dc.b	nRst, $06
00090AE7 E100                       	smpsAlterNote       $00
00090AE9 01                         	dc.b	$01
00090AEA E103                       	smpsAlterNote       $03
00090AEC 0101                       	dc.b	$01, $01
00090AEE E1FD                       	smpsAlterNote       $FD
00090AF0 01                         	dc.b	$01
00090AF1 ECF5                       	smpsPSGAlterVol     $F5
00090AF3 9207                       	dc.b	nF1, $07
00090AF5 EC0B                       	smpsPSGAlterVol     $0B
00090AF7 8004                       	dc.b	nRst, $04
00090AF9 ECF5                       	smpsPSGAlterVol     $F5
00090AFB 9206                       	dc.b	nF1, $06
00090AFD EC04                       	smpsPSGAlterVol     $04
00090AFF E701                       	dc.b	smpsNoAttack, $01
00090B01 EC07                       	smpsPSGAlterVol     $07
00090B03 8006                       	dc.b	nRst, $06
00090B05 E103                       	smpsAlterNote       $03
00090B07 01                         	dc.b	$01
00090B08 E104                       	smpsAlterNote       $04
00090B0A 01                         	dc.b	$01
00090B0B E100                       	smpsAlterNote       $00
00090B0D 01                         	dc.b	$01
00090B0E E1FB                       	smpsAlterNote       $FB
00090B10 01                         	dc.b	$01
00090B11 E1FD                       	smpsAlterNote       $FD
00090B13 ECF5                       	smpsPSGAlterVol     $F5
00090B15 9406                       	dc.b	nG1, $06
00090B17 EC04                       	smpsPSGAlterVol     $04
00090B19 E701                       	dc.b	smpsNoAttack, $01
00090B1B EC07                       	smpsPSGAlterVol     $07
00090B1D 8003                       	dc.b	nRst, $03
00090B1F ECF5                       	smpsPSGAlterVol     $F5
00090B21 9406                       	dc.b	nG1, $06
00090B23 EC04                       	smpsPSGAlterVol     $04
00090B25 E701                       	dc.b	smpsNoAttack, $01
00090B27 EC07                       	smpsPSGAlterVol     $07
00090B29 8006                       	dc.b	nRst, $06
00090B2B E100                       	smpsAlterNote       $00
00090B2D 01                         	dc.b	$01
00090B2E E104                       	smpsAlterNote       $04
00090B30 01                         	dc.b	$01
00090B31 E100                       	smpsAlterNote       $00
00090B33 01                         	dc.b	$01
00090B34 E1FD                       	smpsAlterNote       $FD
00090B36 01                         	dc.b	$01
00090B37 ECF5                       	smpsPSGAlterVol     $F5
00090B39 9206                       	dc.b	nF1, $06
00090B3B EC04                       	smpsPSGAlterVol     $04
00090B3D E701                       	dc.b	smpsNoAttack, $01
00090B3F EC07                       	smpsPSGAlterVol     $07
00090B41 8003                       	dc.b	nRst, $03
00090B43 ECF5                       	smpsPSGAlterVol     $F5
00090B45 9207                       	dc.b	nF1, $07
00090B47 EC0B                       	smpsPSGAlterVol     $0B
00090B49 8007                       	dc.b	nRst, $07
00090B4B E103                       	smpsAlterNote       $03
00090B4D 0101                       	dc.b	$01, $01
00090B4F E1FD                       	smpsAlterNote       $FD
00090B51 01                         	dc.b	$01
00090B52 E1FA                       	smpsAlterNote       $FA
00090B54 01                         	dc.b	$01
00090B55 E1FD                       	smpsAlterNote       $FD
00090B57 ECF5                       	smpsPSGAlterVol     $F5
00090B59 9206                       	dc.b	nF1, $06
00090B5B EC0B                       	smpsPSGAlterVol     $0B
00090B5D 8004                       	dc.b	nRst, $04
00090B5F ECF5                       	smpsPSGAlterVol     $F5
00090B61 9206                       	dc.b	nF1, $06
00090B63 EC04                       	smpsPSGAlterVol     $04
00090B65 E701                       	dc.b	smpsNoAttack, $01
00090B67 EC07                       	smpsPSGAlterVol     $07
00090B69 8006                       	dc.b	nRst, $06
00090B6B E100                       	smpsAlterNote       $00
00090B6D 01                         	dc.b	$01
00090B6E E104                       	smpsAlterNote       $04
00090B70 01                         	dc.b	$01
00090B71 E100                       	smpsAlterNote       $00
00090B73 01                         	dc.b	$01
00090B74 E1FA                       	smpsAlterNote       $FA
00090B76 01                         	dc.b	$01
00090B77 E1FD                       	smpsAlterNote       $FD
00090B79 ECF5                       	smpsPSGAlterVol     $F5
00090B7B 9206                       	dc.b	nF1, $06
00090B7D EC04                       	smpsPSGAlterVol     $04
00090B7F E701                       	dc.b	smpsNoAttack, $01
00090B81 EC07                       	smpsPSGAlterVol     $07
00090B83 8003                       	dc.b	nRst, $03
00090B85 ECF5                       	smpsPSGAlterVol     $F5
00090B87 9207                       	dc.b	nF1, $07
00090B89 EC0B                       	smpsPSGAlterVol     $0B
00090B8B 8006                       	dc.b	nRst, $06
00090B8D E100                       	smpsAlterNote       $00
00090B8F 01                         	dc.b	$01
00090B90 E103                       	smpsAlterNote       $03
00090B92 0101                       	dc.b	$01, $01
00090B94 E1FD                       	smpsAlterNote       $FD
00090B96 01                         	dc.b	$01
00090B97 ECF5                       	smpsPSGAlterVol     $F5
00090B99 9207                       	dc.b	nF1, $07
00090B9B EC0B                       	smpsPSGAlterVol     $0B
00090B9D 8004                       	dc.b	nRst, $04
00090B9F ECF5                       	smpsPSGAlterVol     $F5
00090BA1 9206                       	dc.b	nF1, $06
00090BA3 EC0B                       	smpsPSGAlterVol     $0B
00090BA5 8007                       	dc.b	nRst, $07
00090BA7 E103                       	smpsAlterNote       $03
00090BA9 0101                       	dc.b	$01, $01
00090BAB E100                       	smpsAlterNote       $00
00090BAD 01                         	dc.b	$01
00090BAE E1FA                       	smpsAlterNote       $FA
00090BB0 01                         	dc.b	$01
00090BB1 E1FD                       	smpsAlterNote       $FD
00090BB3 ECF5                       	smpsPSGAlterVol     $F5
00090BB5 9206                       	dc.b	nF1, $06
00090BB7 EC04                       	smpsPSGAlterVol     $04
00090BB9 E701                       	dc.b	smpsNoAttack, $01
00090BBB EC07                       	smpsPSGAlterVol     $07
00090BBD 8003                       	dc.b	nRst, $03
00090BBF ECF5                       	smpsPSGAlterVol     $F5
00090BC1 9206                       	dc.b	nF1, $06
00090BC3 EC04                       	smpsPSGAlterVol     $04
00090BC5 E701                       	dc.b	smpsNoAttack, $01
00090BC7 EC07                       	smpsPSGAlterVol     $07
00090BC9 8006                       	dc.b	nRst, $06
00090BCB E100                       	smpsAlterNote       $00
00090BCD 01                         	dc.b	$01
00090BCE E104                       	smpsAlterNote       $04
00090BD0 01                         	dc.b	$01
00090BD1 E100                       	smpsAlterNote       $00
00090BD3 01                         	dc.b	$01
00090BD4 E1FD                       	smpsAlterNote       $FD
00090BD6 01                         	dc.b	$01
00090BD7 ECF5                       	smpsPSGAlterVol     $F5
00090BD9 9206                       	dc.b	nF1, $06
00090BDB EC04                       	smpsPSGAlterVol     $04
00090BDD E701                       	dc.b	smpsNoAttack, $01
00090BDF EC07                       	smpsPSGAlterVol     $07
00090BE1 8003                       	dc.b	nRst, $03
00090BE3 ECF5                       	smpsPSGAlterVol     $F5
00090BE5 9207                       	dc.b	nF1, $07
00090BE7 EC0B                       	smpsPSGAlterVol     $0B
00090BE9 8007                       	dc.b	nRst, $07
00090BEB E104                       	smpsAlterNote       $04
00090BED 0101                       	dc.b	$01, $01
00090BEF E1FB                       	smpsAlterNote       $FB
00090BF1 01                         	dc.b	$01
00090BF2 E1F6                       	smpsAlterNote       $F6
00090BF4 0101                       	dc.b	$01, $01
00090BF6 E1FF                       	smpsAlterNote       $FF
00090BF8 01                         	dc.b	$01
00090BF9 E105                       	smpsAlterNote       $05
00090BFB 01                         	dc.b	$01
00090BFC E104                       	smpsAlterNote       $04
00090BFE 01                         	dc.b	$01
00090BFF E1FB                       	smpsAlterNote       $FB
00090C01 01                         	dc.b	$01
00090C02 E1F5                       	smpsAlterNote       $F5
00090C04 01                         	dc.b	$01
00090C05 E1FC                       	smpsAlterNote       $FC
00090C07 ECF5                       	smpsPSGAlterVol     $F5
00090C09 8B0E                       	dc.b	nBb0, $0E
00090C0B E102                       	smpsAlterNote       $02
00090C0D EC0B                       	smpsPSGAlterVol     $0B
00090C0F 8001                       	dc.b	nRst, $01
00090C11 E101                       	smpsAlterNote       $01
00090C13 01                         	dc.b	$01
00090C14 E1FC                       	smpsAlterNote       $FC
00090C16 01                         	dc.b	$01
00090C17 E1F9                       	smpsAlterNote       $F9
00090C19 0101                       	dc.b	$01, $01
00090C1B E1FF                       	smpsAlterNote       $FF
00090C1D 01                         	dc.b	$01
00090C1E E102                       	smpsAlterNote       $02
00090C20 01                         	dc.b	$01
00090C21 E1FF                       	smpsAlterNote       $FF
00090C23 01                         	dc.b	$01
00090C24 E1FC                       	smpsAlterNote       $FC
00090C26 01                         	dc.b	$01
00090C27 E1F8                       	smpsAlterNote       $F8
00090C29 01                         	dc.b	$01
00090C2A E1FC                       	smpsAlterNote       $FC
00090C2C 01                         	dc.b	$01
00090C2D E101                       	smpsAlterNote       $01
00090C2F 01                         	dc.b	$01
00090C30 E102                       	smpsAlterNote       $02
00090C32 01                         	dc.b	$01
00090C33 E1FF                       	smpsAlterNote       $FF
00090C35 01                         	dc.b	$01
00090C36 E1FB                       	smpsAlterNote       $FB
00090C38 ECF5                       	smpsPSGAlterVol     $F5
00090C3A 8D0D                       	dc.b	nC1, $0D
00090C3C E101                       	smpsAlterNote       $01
00090C3E EC0B                       	smpsPSGAlterVol     $0B
00090C40 8001                       	dc.b	nRst, $01
00090C42 E102                       	smpsAlterNote       $02
00090C44 01                         	dc.b	$01
00090C45 E1FF                       	smpsAlterNote       $FF
00090C47 01                         	dc.b	$01
00090C48 E1F9                       	smpsAlterNote       $F9
00090C4A 0101                       	dc.b	$01, $01
00090C4C E1FC                       	smpsAlterNote       $FC
00090C4E 01                         	dc.b	$01
00090C4F E101                       	smpsAlterNote       $01
00090C51 0101                       	dc.b	$01, $01
00090C53 E1FC                       	smpsAlterNote       $FC
00090C55 01                         	dc.b	$01
00090C56 E1F9                       	smpsAlterNote       $F9
00090C58 0101                       	dc.b	$01, $01
00090C5A E1FF                       	smpsAlterNote       $FF
00090C5C 01                         	dc.b	$01
00090C5D E102                       	smpsAlterNote       $02
00090C5F 01                         	dc.b	$01
00090C60 E101                       	smpsAlterNote       $01
00090C62 01                         	dc.b	$01
00090C63 E1FC                       	smpsAlterNote       $FC
00090C65 ECF5                       	smpsPSGAlterVol     $F5
00090C67 8F0D                       	dc.b	nD1, $0D
00090C69 E1FF                       	smpsAlterNote       $FF
00090C6B EC04                       	smpsPSGAlterVol     $04
00090C6D E701                       	dc.b	smpsNoAttack, $01
00090C6F EC07                       	smpsPSGAlterVol     $07
00090C71 E103                       	smpsAlterNote       $03
00090C73 8001                       	dc.b	nRst, $01
00090C75 E102                       	smpsAlterNote       $02
00090C77 01                         	dc.b	$01
00090C78 E1FD                       	smpsAlterNote       $FD
00090C7A 01                         	dc.b	$01
00090C7B E1F9                       	smpsAlterNote       $F9
00090C7D 01                         	dc.b	$01
00090C7E E1FD                       	smpsAlterNote       $FD
00090C80 01                         	dc.b	$01
00090C81 E100                       	smpsAlterNote       $00
00090C83 01                         	dc.b	$01
00090C84 E103                       	smpsAlterNote       $03
00090C86 01                         	dc.b	$01
00090C87 E100                       	smpsAlterNote       $00
00090C89 01                         	dc.b	$01
00090C8A E1FA                       	smpsAlterNote       $FA
00090C8C 01                         	dc.b	$01
00090C8D E1F9                       	smpsAlterNote       $F9
00090C8F 01                         	dc.b	$01
00090C90 E1FD                       	smpsAlterNote       $FD
00090C92 01                         	dc.b	$01
00090C93 E102                       	smpsAlterNote       $02
00090C95 0101                       	dc.b	$01, $01
00090C97 E100                       	smpsAlterNote       $00
00090C99 01                         	dc.b	$01
00090C9A E1FD                       	smpsAlterNote       $FD
00090C9C ECF5                       	smpsPSGAlterVol     $F5
00090C9E 910D                       	dc.b	nE1, $0D
00090CA0 E103                       	smpsAlterNote       $03
00090CA2 EC0B                       	smpsPSGAlterVol     $0B
00090CA4 8001 01                    	dc.b	nRst, $01, $01
00090CA7 E100                       	smpsAlterNote       $00
00090CA9 01                         	dc.b	$01
00090CAA E1FA                       	smpsAlterNote       $FA
00090CAC 0101                       	dc.b	$01, $01
00090CAE E100                       	smpsAlterNote       $00
00090CB0 01                         	dc.b	$01
00090CB1 E103                       	smpsAlterNote       $03
00090CB3 01                         	dc.b	$01
00090CB4 E1FD                       	smpsAlterNote       $FD
00090CB6 ECF5                       	smpsPSGAlterVol     $F5
00090CB8 9206                       	dc.b	nF1, $06
00090CBA EC04                       	smpsPSGAlterVol     $04
00090CBC E701                       	dc.b	smpsNoAttack, $01
00090CBE EC07                       	smpsPSGAlterVol     $07
00090CC0 8003                       	dc.b	nRst, $03
00090CC2 ECF5                       	smpsPSGAlterVol     $F5
00090CC4 9207                       	dc.b	nF1, $07
00090CC6 EC0B                       	smpsPSGAlterVol     $0B
00090CC8 8006                       	dc.b	nRst, $06
00090CCA E100                       	smpsAlterNote       $00
00090CCC 01                         	dc.b	$01
00090CCD E103                       	smpsAlterNote       $03
00090CCF 0101                       	dc.b	$01, $01
00090CD1 E1FD                       	smpsAlterNote       $FD
00090CD3 01                         	dc.b	$01
00090CD4 ECF5                       	smpsPSGAlterVol     $F5
00090CD6 9407                       	dc.b	nG1, $07
00090CD8 EC0B                       	smpsPSGAlterVol     $0B
00090CDA 8004                       	dc.b	nRst, $04
00090CDC ECF5                       	smpsPSGAlterVol     $F5
00090CDE 9406                       	dc.b	nG1, $06
00090CE0 EC04                       	smpsPSGAlterVol     $04
00090CE2 E701                       	dc.b	smpsNoAttack, $01
00090CE4 EC07                       	smpsPSGAlterVol     $07
00090CE6 8006                       	dc.b	nRst, $06
00090CE8 E103                       	smpsAlterNote       $03
00090CEA 01                         	dc.b	$01
00090CEB E104                       	smpsAlterNote       $04
00090CED 01                         	dc.b	$01
00090CEE E100                       	smpsAlterNote       $00
00090CF0 01                         	dc.b	$01
00090CF1 E1F9                       	smpsAlterNote       $F9
00090CF3 01                         	dc.b	$01
00090CF4 E1FD                       	smpsAlterNote       $FD
00090CF6 ECF5                       	smpsPSGAlterVol     $F5
00090CF8 9206                       	dc.b	nF1, $06
00090CFA EC04                       	smpsPSGAlterVol     $04
00090CFC E701                       	dc.b	smpsNoAttack, $01
00090CFE EC07                       	smpsPSGAlterVol     $07
00090D00 8003                       	dc.b	nRst, $03
00090D02 ECF5                       	smpsPSGAlterVol     $F5
00090D04 9206                       	dc.b	nF1, $06
00090D06 EC04                       	smpsPSGAlterVol     $04
00090D08 E701                       	dc.b	smpsNoAttack, $01
00090D0A EC07                       	smpsPSGAlterVol     $07
00090D0C 8006                       	dc.b	nRst, $06
00090D0E E100                       	smpsAlterNote       $00
00090D10 01                         	dc.b	$01
00090D11 E104                       	smpsAlterNote       $04
00090D13 01                         	dc.b	$01
00090D14 E103                       	smpsAlterNote       $03
00090D16 01                         	dc.b	$01
00090D17 E1FD                       	smpsAlterNote       $FD
00090D19 01                         	dc.b	$01
00090D1A ECF5                       	smpsPSGAlterVol     $F5
00090D1C 9407                       	dc.b	nG1, $07
00090D1E EC0B                       	smpsPSGAlterVol     $0B
00090D20 8004                       	dc.b	nRst, $04
00090D22 ECF5                       	smpsPSGAlterVol     $F5
00090D24 9406                       	dc.b	nG1, $06
00090D26 EC0B                       	smpsPSGAlterVol     $0B
00090D28 8007                       	dc.b	nRst, $07
00090D2A E103                       	smpsAlterNote       $03
00090D2C 0101                       	dc.b	$01, $01
00090D2E E100                       	smpsAlterNote       $00
00090D30 01                         	dc.b	$01
00090D31 E1F9                       	smpsAlterNote       $F9
00090D33 01                         	dc.b	$01
00090D34 E1FD                       	smpsAlterNote       $FD
00090D36 ECF5                       	smpsPSGAlterVol     $F5
00090D38 9206                       	dc.b	nF1, $06
00090D3A EC04                       	smpsPSGAlterVol     $04
00090D3C E701                       	dc.b	smpsNoAttack, $01
00090D3E EC07                       	smpsPSGAlterVol     $07
00090D40 8003                       	dc.b	nRst, $03
00090D42 ECF5                       	smpsPSGAlterVol     $F5
00090D44 9206                       	dc.b	nF1, $06
00090D46 EC04                       	smpsPSGAlterVol     $04
00090D48 E701                       	dc.b	smpsNoAttack, $01
00090D4A EC07                       	smpsPSGAlterVol     $07
00090D4C 8006                       	dc.b	nRst, $06
00090D4E E100                       	smpsAlterNote       $00
00090D50 01                         	dc.b	$01
00090D51 E104                       	smpsAlterNote       $04
00090D53 01                         	dc.b	$01
00090D54 E100                       	smpsAlterNote       $00
00090D56 01                         	dc.b	$01
00090D57 E1FB                       	smpsAlterNote       $FB
00090D59 01                         	dc.b	$01
00090D5A E1FD                       	smpsAlterNote       $FD
00090D5C ECF5                       	smpsPSGAlterVol     $F5
00090D5E 9406                       	dc.b	nG1, $06
00090D60 EC04                       	smpsPSGAlterVol     $04
00090D62 E701                       	dc.b	smpsNoAttack, $01
00090D64 EC07                       	smpsPSGAlterVol     $07
00090D66 8003                       	dc.b	nRst, $03
00090D68 ECF5                       	smpsPSGAlterVol     $F5
00090D6A 9407                       	dc.b	nG1, $07
00090D6C EC0B                       	smpsPSGAlterVol     $0B
00090D6E 8006                       	dc.b	nRst, $06
00090D70 E100                       	smpsAlterNote       $00
00090D72 01                         	dc.b	$01
00090D73 E103                       	smpsAlterNote       $03
00090D75 0101                       	dc.b	$01, $01
00090D77 E1FD                       	smpsAlterNote       $FD
00090D79 01                         	dc.b	$01
00090D7A ECF5                       	smpsPSGAlterVol     $F5
00090D7C 9207                       	dc.b	nF1, $07
00090D7E EC0B                       	smpsPSGAlterVol     $0B
00090D80 8004                       	dc.b	nRst, $04
00090D82 ECF5                       	smpsPSGAlterVol     $F5
00090D84 9206                       	dc.b	nF1, $06
00090D86 EC04                       	smpsPSGAlterVol     $04
00090D88 E701                       	dc.b	smpsNoAttack, $01
00090D8A ECFC                       	smpsPSGAlterVol     $FC
00090D8C E1FC                       	smpsAlterNote       $FC
00090D8E 9006 8B03                  	dc.b	nEb1, $06, nBb0, $03
00090D92 EC04                       	smpsPSGAlterVol     $04
00090D94 E701                       	dc.b	smpsNoAttack, $01
00090D96 ECFC                       	smpsPSGAlterVol     $FC
00090D98 9003                       	dc.b	nEb1, $03
00090D9A E1FD                       	smpsAlterNote       $FD
00090D9C 9403                       	dc.b	nG1, $03
00090D9E EC04                       	smpsPSGAlterVol     $04
00090DA0 E701                       	dc.b	smpsNoAttack, $01
00090DA2 E1FE                       	smpsAlterNote       $FE
00090DA4 ECFC                       	smpsPSGAlterVol     $FC
00090DA6 9703 9703                  	dc.b	nBb1, $03, nBb1, $03
00090DAA EC04                       	smpsPSGAlterVol     $04
00090DAC E701                       	dc.b	smpsNoAttack, $01
00090DAE EC07                       	smpsPSGAlterVol     $07
00090DB0 8009                       	dc.b	nRst, $09
00090DB2 E100                       	smpsAlterNote       $00
00090DB4 01                         	dc.b	$01
00090DB5 F6F5 19                    	smpsJump            music84_Jump07
00090DB8                            
00090DB8                            ; PSG2 Data
00090DB8                            music84_PSG2:
00090DB8 E1FC                       	smpsAlterNote       $FC
00090DBA EC04                       	smpsPSGAlterVol     $04
00090DBC 8F03                       	dc.b	nD1, $03
00090DBE E1FD                       	smpsAlterNote       $FD
00090DC0 9203                       	dc.b	nF1, $03
00090DC2 EC04                       	smpsPSGAlterVol     $04
00090DC4 E701                       	dc.b	smpsNoAttack, $01
00090DC6 E1FE                       	smpsAlterNote       $FE
00090DC8 ECFC                       	smpsPSGAlterVol     $FC
00090DCA 9603                       	dc.b	nA1, $03
00090DCC E1FD                       	smpsAlterNote       $FD
00090DCE 9103                       	dc.b	nE1, $03
00090DD0 EC04                       	smpsPSGAlterVol     $04
00090DD2 E701                       	dc.b	smpsNoAttack, $01
00090DD4 ECFC                       	smpsPSGAlterVol     $FC
00090DD6 9403                       	dc.b	nG1, $03
00090DD8 E1FE                       	smpsAlterNote       $FE
00090DDA 9703                       	dc.b	nBb1, $03
00090DDC EC04                       	smpsPSGAlterVol     $04
00090DDE E701                       	dc.b	smpsNoAttack, $01
00090DE0 E1FF                       	smpsAlterNote       $FF
00090DE2 ECFC                       	smpsPSGAlterVol     $FC
00090DE4 9B02                       	dc.b	nD2, $02
00090DE6 EC04                       	smpsPSGAlterVol     $04
00090DE8 E701                       	dc.b	smpsNoAttack, $01
00090DEA ECFC                       	smpsPSGAlterVol     $FC
00090DEC E1FE                       	smpsAlterNote       $FE
00090DEE 9A03                       	dc.b	nCs2, $03
00090DF0 EC0B                       	smpsPSGAlterVol     $0B
00090DF2 800A                       	dc.b	nRst, $0A
00090DF4 E102                       	smpsAlterNote       $02
00090DF6 01                         	dc.b	$01
00090DF7 E10A                       	smpsAlterNote       $0A
00090DF9 01                         	dc.b	$01
00090DFA E102                       	smpsAlterNote       $02
00090DFC 01                         	dc.b	$01
00090DFD E1FC                       	smpsAlterNote       $FC
00090DFF 01                         	dc.b	$01
00090E00 E10A                       	smpsAlterNote       $0A
00090E02 01                         	dc.b	$01
00090E03 E1FC                       	smpsAlterNote       $FC
00090E05 01                         	dc.b	$01
00090E06 E108                       	smpsAlterNote       $08
00090E08 01                         	dc.b	$01
00090E09 E10A                       	smpsAlterNote       $0A
00090E0B 01                         	dc.b	$01
00090E0C E102                       	smpsAlterNote       $02
00090E0E 01                         	dc.b	$01
00090E0F E1F7                       	smpsAlterNote       $F7
00090E11 0101                       	dc.b	$01, $01
00090E13 E102                       	smpsAlterNote       $02
00090E15 01                         	dc.b	$01
00090E16 E108                       	smpsAlterNote       $08
00090E18 0101                       	dc.b	$01, $01
00090E1A E1FC                       	smpsAlterNote       $FC
00090E1C 01                         	dc.b	$01
00090E1D E10A                       	smpsAlterNote       $0A
00090E1F 01                         	dc.b	$01
00090E20 E1F7                       	smpsAlterNote       $F7
00090E22 01                         	dc.b	$01
00090E23 E102                       	smpsAlterNote       $02
00090E25 01                         	dc.b	$01
00090E26 E10A                       	smpsAlterNote       $0A
00090E28 01                         	dc.b	$01
00090E29 E102                       	smpsAlterNote       $02
00090E2B 01                         	dc.b	$01
00090E2C E1FC                       	smpsAlterNote       $FC
00090E2E 01                         	dc.b	$01
00090E2F                            
00090E2F                            music84_Jump06:
00090E2F E10A                       	smpsAlterNote       $0A
00090E31 8001                       	dc.b	nRst, $01
00090E33 E1FC                       	smpsAlterNote       $FC
00090E35 01                         	dc.b	$01
00090E36 E108                       	smpsAlterNote       $08
00090E38 01                         	dc.b	$01
00090E39 E10A                       	smpsAlterNote       $0A
00090E3B 01                         	dc.b	$01
00090E3C E1FC                       	smpsAlterNote       $FC
00090E3E ECF5                       	smpsPSGAlterVol     $F5
00090E40 8F06                       	dc.b	nD1, $06
00090E42 EC04                       	smpsPSGAlterVol     $04
00090E44 E701                       	dc.b	smpsNoAttack, $01
00090E46 EC07                       	smpsPSGAlterVol     $07
00090E48 8003                       	dc.b	nRst, $03
00090E4A ECF5                       	smpsPSGAlterVol     $F5
00090E4C 8F06                       	dc.b	nD1, $06
00090E4E EC04                       	smpsPSGAlterVol     $04
00090E50 E701                       	dc.b	smpsNoAttack, $01
00090E52 EC07                       	smpsPSGAlterVol     $07
00090E54 8006                       	dc.b	nRst, $06
00090E56 E1FF                       	smpsAlterNote       $FF
00090E58 01                         	dc.b	$01
00090E59 E102                       	smpsAlterNote       $02
00090E5B 01                         	dc.b	$01
00090E5C E1FF                       	smpsAlterNote       $FF
00090E5E 01                         	dc.b	$01
00090E5F E1F9                       	smpsAlterNote       $F9
00090E61 01                         	dc.b	$01
00090E62 E1FC                       	smpsAlterNote       $FC
00090E64 ECF5                       	smpsPSGAlterVol     $F5
00090E66 9006                       	dc.b	nEb1, $06
00090E68 EC04                       	smpsPSGAlterVol     $04
00090E6A E701                       	dc.b	smpsNoAttack, $01
00090E6C EC07                       	smpsPSGAlterVol     $07
00090E6E 8003                       	dc.b	nRst, $03
00090E70 ECF5                       	smpsPSGAlterVol     $F5
00090E72 9007                       	dc.b	nEb1, $07
00090E74 EC0B                       	smpsPSGAlterVol     $0B
00090E76 8006                       	dc.b	nRst, $06
00090E78 E1FF                       	smpsAlterNote       $FF
00090E7A 01                         	dc.b	$01
00090E7B E103                       	smpsAlterNote       $03
00090E7D 0101                       	dc.b	$01, $01
00090E7F E1FC                       	smpsAlterNote       $FC
00090E81 01                         	dc.b	$01
00090E82 ECF5                       	smpsPSGAlterVol     $F5
00090E84 8F07                       	dc.b	nD1, $07
00090E86 EC0B                       	smpsPSGAlterVol     $0B
00090E88 8004                       	dc.b	nRst, $04
00090E8A ECF5                       	smpsPSGAlterVol     $F5
00090E8C 8F06                       	dc.b	nD1, $06
00090E8E EC04                       	smpsPSGAlterVol     $04
00090E90 E701                       	dc.b	smpsNoAttack, $01
00090E92 EC07                       	smpsPSGAlterVol     $07
00090E94 8006                       	dc.b	nRst, $06
00090E96 E102                       	smpsAlterNote       $02
00090E98 01                         	dc.b	$01
00090E99 E103                       	smpsAlterNote       $03
00090E9B 01                         	dc.b	$01
00090E9C E1FF                       	smpsAlterNote       $FF
00090E9E 01                         	dc.b	$01
00090E9F E1F9                       	smpsAlterNote       $F9
00090EA1 01                         	dc.b	$01
00090EA2 E1FC                       	smpsAlterNote       $FC
00090EA4 ECF5                       	smpsPSGAlterVol     $F5
00090EA6 8F06                       	dc.b	nD1, $06
00090EA8 EC04                       	smpsPSGAlterVol     $04
00090EAA E701                       	dc.b	smpsNoAttack, $01
00090EAC EC07                       	smpsPSGAlterVol     $07
00090EAE 8003                       	dc.b	nRst, $03
00090EB0 ECF5                       	smpsPSGAlterVol     $F5
00090EB2 8F06                       	dc.b	nD1, $06
00090EB4 EC04                       	smpsPSGAlterVol     $04
00090EB6 E701                       	dc.b	smpsNoAttack, $01
00090EB8 EC07                       	smpsPSGAlterVol     $07
00090EBA 8006                       	dc.b	nRst, $06
00090EBC E1FF                       	smpsAlterNote       $FF
00090EBE 01                         	dc.b	$01
00090EBF E103                       	smpsAlterNote       $03
00090EC1 01                         	dc.b	$01
00090EC2 E1FF                       	smpsAlterNote       $FF
00090EC4 01                         	dc.b	$01
00090EC5 E1FC                       	smpsAlterNote       $FC
00090EC7 01                         	dc.b	$01
00090EC8 ECF5                       	smpsPSGAlterVol     $F5
00090ECA 8F06                       	dc.b	nD1, $06
00090ECC EC04                       	smpsPSGAlterVol     $04
00090ECE E701                       	dc.b	smpsNoAttack, $01
00090ED0 EC07                       	smpsPSGAlterVol     $07
00090ED2 8003                       	dc.b	nRst, $03
00090ED4 ECF5                       	smpsPSGAlterVol     $F5
00090ED6 8F07                       	dc.b	nD1, $07
00090ED8 EC0B                       	smpsPSGAlterVol     $0B
00090EDA 8007                       	dc.b	nRst, $07
00090EDC E101                       	smpsAlterNote       $01
00090EDE 0101                       	dc.b	$01, $01
00090EE0 E1FC                       	smpsAlterNote       $FC
00090EE2 01                         	dc.b	$01
00090EE3 E1F9                       	smpsAlterNote       $F9
00090EE5 01                         	dc.b	$01
00090EE6 E1FC                       	smpsAlterNote       $FC
00090EE8 ECF5                       	smpsPSGAlterVol     $F5
00090EEA 9006                       	dc.b	nEb1, $06
00090EEC EC0B                       	smpsPSGAlterVol     $0B
00090EEE 8004                       	dc.b	nRst, $04
00090EF0 ECF5                       	smpsPSGAlterVol     $F5
00090EF2 9006                       	dc.b	nEb1, $06
00090EF4 EC04                       	smpsPSGAlterVol     $04
00090EF6 E701                       	dc.b	smpsNoAttack, $01
00090EF8 EC07                       	smpsPSGAlterVol     $07
00090EFA 8006                       	dc.b	nRst, $06
00090EFC E100                       	smpsAlterNote       $00
00090EFE 01                         	dc.b	$01
00090EFF E102                       	smpsAlterNote       $02
00090F01 01                         	dc.b	$01
00090F02 E100                       	smpsAlterNote       $00
00090F04 01                         	dc.b	$01
00090F05 E1FD                       	smpsAlterNote       $FD
00090F07 01                         	dc.b	$01
00090F08 E1FF                       	smpsAlterNote       $FF
00090F0A ECF5                       	smpsPSGAlterVol     $F5
00090F0C 9B06                       	dc.b	nD2, $06
00090F0E EC04                       	smpsPSGAlterVol     $04
00090F10 E701                       	dc.b	smpsNoAttack, $01
00090F12 EC07                       	smpsPSGAlterVol     $07
00090F14 8003                       	dc.b	nRst, $03
00090F16 ECF5                       	smpsPSGAlterVol     $F5
00090F18 9B07                       	dc.b	nD2, $07
00090F1A EC0B                       	smpsPSGAlterVol     $0B
00090F1C 8006                       	dc.b	nRst, $06
00090F1E E102                       	smpsAlterNote       $02
00090F20 01                         	dc.b	$01
00090F21 E106                       	smpsAlterNote       $06
00090F23 01                         	dc.b	$01
00090F24 E105                       	smpsAlterNote       $05
00090F26 01                         	dc.b	$01
00090F27 E1FF                       	smpsAlterNote       $FF
00090F29 01                         	dc.b	$01
00090F2A ECF5                       	smpsPSGAlterVol     $F5
00090F2C 9B07                       	dc.b	nD2, $07
00090F2E EC0B                       	smpsPSGAlterVol     $0B
00090F30 8004                       	dc.b	nRst, $04
00090F32 ECF5                       	smpsPSGAlterVol     $F5
00090F34 9B06                       	dc.b	nD2, $06
00090F36 EC0B                       	smpsPSGAlterVol     $0B
00090F38 8007                       	dc.b	nRst, $07
00090F3A E105                       	smpsAlterNote       $05
00090F3C 0101                       	dc.b	$01, $01
00090F3E E102                       	smpsAlterNote       $02
00090F40 01                         	dc.b	$01
00090F41 E1FC                       	smpsAlterNote       $FC
00090F43 01                         	dc.b	$01
00090F44 E1FF                       	smpsAlterNote       $FF
00090F46 ECF5                       	smpsPSGAlterVol     $F5
00090F48 9B06                       	dc.b	nD2, $06
00090F4A EC04                       	smpsPSGAlterVol     $04
00090F4C E701                       	dc.b	smpsNoAttack, $01
00090F4E EC07                       	smpsPSGAlterVol     $07
00090F50 8003                       	dc.b	nRst, $03
00090F52 ECF5                       	smpsPSGAlterVol     $F5
00090F54 9B06                       	dc.b	nD2, $06
00090F56 EC04                       	smpsPSGAlterVol     $04
00090F58 E701                       	dc.b	smpsNoAttack, $01
00090F5A EC07                       	smpsPSGAlterVol     $07
00090F5C 8006                       	dc.b	nRst, $06
00090F5E E102                       	smpsAlterNote       $02
00090F60 01                         	dc.b	$01
00090F61 E106                       	smpsAlterNote       $06
00090F63 01                         	dc.b	$01
00090F64 E102                       	smpsAlterNote       $02
00090F66 01                         	dc.b	$01
00090F67 E1FF                       	smpsAlterNote       $FF
00090F69 01                         	dc.b	$01
00090F6A ECF5                       	smpsPSGAlterVol     $F5
00090F6C 9B06                       	dc.b	nD2, $06
00090F6E EC04                       	smpsPSGAlterVol     $04
00090F70 E701                       	dc.b	smpsNoAttack, $01
00090F72 EC07                       	smpsPSGAlterVol     $07
00090F74 8003                       	dc.b	nRst, $03
00090F76 ECF5                       	smpsPSGAlterVol     $F5
00090F78 9B07                       	dc.b	nD2, $07
00090F7A EC0B                       	smpsPSGAlterVol     $0B
00090F7C 8007                       	dc.b	nRst, $07
00090F7E E105                       	smpsAlterNote       $05
00090F80 0101                       	dc.b	$01, $01
00090F82 E1FF                       	smpsAlterNote       $FF
00090F84 01                         	dc.b	$01
00090F85 E1FC                       	smpsAlterNote       $FC
00090F87 01                         	dc.b	$01
00090F88 E1FF                       	smpsAlterNote       $FF
00090F8A ECF5                       	smpsPSGAlterVol     $F5
00090F8C 9B06                       	dc.b	nD2, $06
00090F8E EC0B                       	smpsPSGAlterVol     $0B
00090F90 8004                       	dc.b	nRst, $04
00090F92 ECF5                       	smpsPSGAlterVol     $F5
00090F94 9B06                       	dc.b	nD2, $06
00090F96 EC04                       	smpsPSGAlterVol     $04
00090F98 E701                       	dc.b	smpsNoAttack, $01
00090F9A EC07                       	smpsPSGAlterVol     $07
00090F9C 8006                       	dc.b	nRst, $06
00090F9E E105                       	smpsAlterNote       $05
00090FA0 01                         	dc.b	$01
00090FA1 E106                       	smpsAlterNote       $06
00090FA3 01                         	dc.b	$01
00090FA4 E102                       	smpsAlterNote       $02
00090FA6 01                         	dc.b	$01
00090FA7 E1FC                       	smpsAlterNote       $FC
00090FA9 01                         	dc.b	$01
00090FAA E1FF                       	smpsAlterNote       $FF
00090FAC ECF5                       	smpsPSGAlterVol     $F5
00090FAE 9B06                       	dc.b	nD2, $06
00090FB0 EC04                       	smpsPSGAlterVol     $04
00090FB2 E701                       	dc.b	smpsNoAttack, $01
00090FB4 EC07                       	smpsPSGAlterVol     $07
00090FB6 8003                       	dc.b	nRst, $03
00090FB8 ECF5                       	smpsPSGAlterVol     $F5
00090FBA 9B06                       	dc.b	nD2, $06
00090FBC EC04                       	smpsPSGAlterVol     $04
00090FBE E701                       	dc.b	smpsNoAttack, $01
00090FC0 EC07                       	smpsPSGAlterVol     $07
00090FC2 8006                       	dc.b	nRst, $06
00090FC4 E102                       	smpsAlterNote       $02
00090FC6 01                         	dc.b	$01
00090FC7 E106                       	smpsAlterNote       $06
00090FC9 01                         	dc.b	$01
00090FCA E105                       	smpsAlterNote       $05
00090FCC 01                         	dc.b	$01
00090FCD E1FF                       	smpsAlterNote       $FF
00090FCF 01                         	dc.b	$01
00090FD0 ECF5                       	smpsPSGAlterVol     $F5
00090FD2 9B07                       	dc.b	nD2, $07
00090FD4 EC0B                       	smpsPSGAlterVol     $0B
00090FD6 8004                       	dc.b	nRst, $04
00090FD8 ECF5                       	smpsPSGAlterVol     $F5
00090FDA 9B06                       	dc.b	nD2, $06
00090FDC EC0B                       	smpsPSGAlterVol     $0B
00090FDE 8007                       	dc.b	nRst, $07
00090FE0 E105                       	smpsAlterNote       $05
00090FE2 0101                       	dc.b	$01, $01
00090FE4 E102                       	smpsAlterNote       $02
00090FE6 01                         	dc.b	$01
00090FE7 E1FC                       	smpsAlterNote       $FC
00090FE9 01                         	dc.b	$01
00090FEA E1FF                       	smpsAlterNote       $FF
00090FEC ECF5                       	smpsPSGAlterVol     $F5
00090FEE 9B06                       	dc.b	nD2, $06
00090FF0 EC04                       	smpsPSGAlterVol     $04
00090FF2 E701                       	dc.b	smpsNoAttack, $01
00090FF4 EC07                       	smpsPSGAlterVol     $07
00090FF6 8003                       	dc.b	nRst, $03
00090FF8 ECF5                       	smpsPSGAlterVol     $F5
00090FFA 9B06                       	dc.b	nD2, $06
00090FFC EC04                       	smpsPSGAlterVol     $04
00090FFE E701                       	dc.b	smpsNoAttack, $01
00091000 EC07                       	smpsPSGAlterVol     $07
00091002 8006                       	dc.b	nRst, $06
00091004 E102                       	smpsAlterNote       $02
00091006 01                         	dc.b	$01
00091007 E106                       	smpsAlterNote       $06
00091009 01                         	dc.b	$01
0009100A E102                       	smpsAlterNote       $02
0009100C 01                         	dc.b	$01
0009100D E1FF                       	smpsAlterNote       $FF
0009100F 01                         	dc.b	$01
00091010 ECF5                       	smpsPSGAlterVol     $F5
00091012 9B06                       	dc.b	nD2, $06
00091014 EC04                       	smpsPSGAlterVol     $04
00091016 E701                       	dc.b	smpsNoAttack, $01
00091018 EC07                       	smpsPSGAlterVol     $07
0009101A 8003                       	dc.b	nRst, $03
0009101C ECF5                       	smpsPSGAlterVol     $F5
0009101E 9B07                       	dc.b	nD2, $07
00091020 E1FE                       	smpsAlterNote       $FE
00091022 9706                       	dc.b	nBb1, $06
00091024 EC04                       	smpsPSGAlterVol     $04
00091026 E701                       	dc.b	smpsNoAttack, $01
00091028 ECFC                       	smpsPSGAlterVol     $FC
0009102A 9703                       	dc.b	nBb1, $03
0009102C EC04                       	smpsPSGAlterVol     $04
0009102E E701                       	dc.b	smpsNoAttack, $01
00091030 ECFC                       	smpsPSGAlterVol     $FC
00091032 9702                       	dc.b	nBb1, $02
00091034 EC04                       	smpsPSGAlterVol     $04
00091036 E701                       	dc.b	smpsNoAttack, $01
00091038 ECFC                       	smpsPSGAlterVol     $FC
0009103A 9606                       	dc.b	nA1, $06
0009103C EC04                       	smpsPSGAlterVol     $04
0009103E E701                       	dc.b	smpsNoAttack, $01
00091040 EC07                       	smpsPSGAlterVol     $07
00091042 8006                       	dc.b	nRst, $06
00091044 E101                       	smpsAlterNote       $01
00091046 01                         	dc.b	$01
00091047 E107                       	smpsAlterNote       $07
00091049 01                         	dc.b	$01
0009104A E101                       	smpsAlterNote       $01
0009104C 01                         	dc.b	$01
0009104D E1F8                       	smpsAlterNote       $F8
0009104F 01                         	dc.b	$01
00091050 E1F7                       	smpsAlterNote       $F7
00091052 01                         	dc.b	$01
00091053 E1FC                       	smpsAlterNote       $FC
00091055 01                         	dc.b	$01
00091056 E106                       	smpsAlterNote       $06
00091058 01                         	dc.b	$01
00091059 E107                       	smpsAlterNote       $07
0009105B 01                         	dc.b	$01
0009105C E101                       	smpsAlterNote       $01
0009105E 01                         	dc.b	$01
0009105F E1F8                       	smpsAlterNote       $F8
00091061 0101                       	dc.b	$01, $01
00091063 E1FC                       	smpsAlterNote       $FC
00091065 ECF5                       	smpsPSGAlterVol     $F5
00091067 8F06                       	dc.b	nD1, $06
00091069 EC04                       	smpsPSGAlterVol     $04
0009106B E701                       	dc.b	smpsNoAttack, $01
0009106D EC07                       	smpsPSGAlterVol     $07
0009106F 8003                       	dc.b	nRst, $03
00091071 ECF5                       	smpsPSGAlterVol     $F5
00091073 8F06                       	dc.b	nD1, $06
00091075 EC04                       	smpsPSGAlterVol     $04
00091077 E701                       	dc.b	smpsNoAttack, $01
00091079 EC07                       	smpsPSGAlterVol     $07
0009107B 8006                       	dc.b	nRst, $06
0009107D E1FF                       	smpsAlterNote       $FF
0009107F 01                         	dc.b	$01
00091080 E102                       	smpsAlterNote       $02
00091082 01                         	dc.b	$01
00091083 E101                       	smpsAlterNote       $01
00091085 01                         	dc.b	$01
00091086 E1FC                       	smpsAlterNote       $FC
00091088 01                         	dc.b	$01
00091089 ECF5                       	smpsPSGAlterVol     $F5
0009108B 9007                       	dc.b	nEb1, $07
0009108D EC0B                       	smpsPSGAlterVol     $0B
0009108F 8004                       	dc.b	nRst, $04
00091091 ECF5                       	smpsPSGAlterVol     $F5
00091093 9006                       	dc.b	nEb1, $06
00091095 EC0B                       	smpsPSGAlterVol     $0B
00091097 8007                       	dc.b	nRst, $07
00091099 E103                       	smpsAlterNote       $03
0009109B 0101                       	dc.b	$01, $01
0009109D E1FC                       	smpsAlterNote       $FC
0009109F 01                         	dc.b	$01
000910A0 E1F9                       	smpsAlterNote       $F9
000910A2 01                         	dc.b	$01
000910A3 E1FC                       	smpsAlterNote       $FC
000910A5 ECF5                       	smpsPSGAlterVol     $F5
000910A7 8F06                       	dc.b	nD1, $06
000910A9 EC04                       	smpsPSGAlterVol     $04
000910AB E701                       	dc.b	smpsNoAttack, $01
000910AD EC07                       	smpsPSGAlterVol     $07
000910AF 8003                       	dc.b	nRst, $03
000910B1 ECF5                       	smpsPSGAlterVol     $F5
000910B3 8F06                       	dc.b	nD1, $06
000910B5 EC04                       	smpsPSGAlterVol     $04
000910B7 E701                       	dc.b	smpsNoAttack, $01
000910B9 EC07                       	smpsPSGAlterVol     $07
000910BB 8006                       	dc.b	nRst, $06
000910BD E1FF                       	smpsAlterNote       $FF
000910BF 01                         	dc.b	$01
000910C0 E103                       	smpsAlterNote       $03
000910C2 01                         	dc.b	$01
000910C3 E1FF                       	smpsAlterNote       $FF
000910C5 01                         	dc.b	$01
000910C6 E1F9                       	smpsAlterNote       $F9
000910C8 01                         	dc.b	$01
000910C9 E1FC                       	smpsAlterNote       $FC
000910CB ECF5                       	smpsPSGAlterVol     $F5
000910CD 8F06                       	dc.b	nD1, $06
000910CF EC04                       	smpsPSGAlterVol     $04
000910D1 E701                       	dc.b	smpsNoAttack, $01
000910D3 EC07                       	smpsPSGAlterVol     $07
000910D5 8003                       	dc.b	nRst, $03
000910D7 ECF5                       	smpsPSGAlterVol     $F5
000910D9 8F07                       	dc.b	nD1, $07
000910DB EC0B                       	smpsPSGAlterVol     $0B
000910DD 8006                       	dc.b	nRst, $06
000910DF E1FF                       	smpsAlterNote       $FF
000910E1 01                         	dc.b	$01
000910E2 E102                       	smpsAlterNote       $02
000910E4 0101                       	dc.b	$01, $01
000910E6 E1FC                       	smpsAlterNote       $FC
000910E8 01                         	dc.b	$01
000910E9 ECF5                       	smpsPSGAlterVol     $F5
000910EB 8F07                       	dc.b	nD1, $07
000910ED EC0B                       	smpsPSGAlterVol     $0B
000910EF 8004                       	dc.b	nRst, $04
000910F1 ECF5                       	smpsPSGAlterVol     $F5
000910F3 8F06                       	dc.b	nD1, $06
000910F5 EC04                       	smpsPSGAlterVol     $04
000910F7 E701                       	dc.b	smpsNoAttack, $01
000910F9 EC07                       	smpsPSGAlterVol     $07
000910FB 8006                       	dc.b	nRst, $06
000910FD E101                       	smpsAlterNote       $01
000910FF 01                         	dc.b	$01
00091100 E102                       	smpsAlterNote       $02
00091102 01                         	dc.b	$01
00091103 E1FF                       	smpsAlterNote       $FF
00091105 01                         	dc.b	$01
00091106 E1F9                       	smpsAlterNote       $F9
00091108 01                         	dc.b	$01
00091109 E1FC                       	smpsAlterNote       $FC
0009110B ECF5                       	smpsPSGAlterVol     $F5
0009110D 9006                       	dc.b	nEb1, $06
0009110F EC04                       	smpsPSGAlterVol     $04
00091111 E701                       	dc.b	smpsNoAttack, $01
00091113 EC07                       	smpsPSGAlterVol     $07
00091115 8003                       	dc.b	nRst, $03
00091117 ECF5                       	smpsPSGAlterVol     $F5
00091119 9006                       	dc.b	nEb1, $06
0009111B EC04                       	smpsPSGAlterVol     $04
0009111D E701                       	dc.b	smpsNoAttack, $01
0009111F EC07                       	smpsPSGAlterVol     $07
00091121 8006                       	dc.b	nRst, $06
00091123 E100                       	smpsAlterNote       $00
00091125 01                         	dc.b	$01
00091126 E102                       	smpsAlterNote       $02
00091128 01                         	dc.b	$01
00091129 E100                       	smpsAlterNote       $00
0009112B 01                         	dc.b	$01
0009112C E1FF                       	smpsAlterNote       $FF
0009112E 01                         	dc.b	$01
0009112F ECF5                       	smpsPSGAlterVol     $F5
00091131 9B06                       	dc.b	nD2, $06
00091133 EC04                       	smpsPSGAlterVol     $04
00091135 E701                       	dc.b	smpsNoAttack, $01
00091137 EC07                       	smpsPSGAlterVol     $07
00091139 8003                       	dc.b	nRst, $03
0009113B ECF5                       	smpsPSGAlterVol     $F5
0009113D 9B07                       	dc.b	nD2, $07
0009113F EC0B                       	smpsPSGAlterVol     $0B
00091141 8007                       	dc.b	nRst, $07
00091143 E105                       	smpsAlterNote       $05
00091145 0101                       	dc.b	$01, $01
00091147 E1FF                       	smpsAlterNote       $FF
00091149 01                         	dc.b	$01
0009114A E1FC                       	smpsAlterNote       $FC
0009114C 01                         	dc.b	$01
0009114D E1FF                       	smpsAlterNote       $FF
0009114F ECF5                       	smpsPSGAlterVol     $F5
00091151 9B06                       	dc.b	nD2, $06
00091153 EC0B                       	smpsPSGAlterVol     $0B
00091155 8004                       	dc.b	nRst, $04
00091157 ECF5                       	smpsPSGAlterVol     $F5
00091159 9B06                       	dc.b	nD2, $06
0009115B EC04                       	smpsPSGAlterVol     $04
0009115D E701                       	dc.b	smpsNoAttack, $01
0009115F EC07                       	smpsPSGAlterVol     $07
00091161 8006                       	dc.b	nRst, $06
00091163 E102                       	smpsAlterNote       $02
00091165 01                         	dc.b	$01
00091166 E106                       	smpsAlterNote       $06
00091168 01                         	dc.b	$01
00091169 E102                       	smpsAlterNote       $02
0009116B 01                         	dc.b	$01
0009116C E1FC                       	smpsAlterNote       $FC
0009116E 01                         	dc.b	$01
0009116F E1FF                       	smpsAlterNote       $FF
00091171 ECF5                       	smpsPSGAlterVol     $F5
00091173 9B06                       	dc.b	nD2, $06
00091175 EC04                       	smpsPSGAlterVol     $04
00091177 E701                       	dc.b	smpsNoAttack, $01
00091179 EC07                       	smpsPSGAlterVol     $07
0009117B 8003                       	dc.b	nRst, $03
0009117D ECF5                       	smpsPSGAlterVol     $F5
0009117F 9B07                       	dc.b	nD2, $07
00091181 EC0B                       	smpsPSGAlterVol     $0B
00091183 8006                       	dc.b	nRst, $06
00091185 E102                       	smpsAlterNote       $02
00091187 01                         	dc.b	$01
00091188 E105                       	smpsAlterNote       $05
0009118A 0101                       	dc.b	$01, $01
0009118C E1FF                       	smpsAlterNote       $FF
0009118E 01                         	dc.b	$01
0009118F ECF5                       	smpsPSGAlterVol     $F5
00091191 9B07                       	dc.b	nD2, $07
00091193 EC0B                       	smpsPSGAlterVol     $0B
00091195 8004                       	dc.b	nRst, $04
00091197 ECF5                       	smpsPSGAlterVol     $F5
00091199 9B06                       	dc.b	nD2, $06
0009119B EC0B                       	smpsPSGAlterVol     $0B
0009119D 8007                       	dc.b	nRst, $07
0009119F E105                       	smpsAlterNote       $05
000911A1 0101                       	dc.b	$01, $01
000911A3 E102                       	smpsAlterNote       $02
000911A5 01                         	dc.b	$01
000911A6 E1FC                       	smpsAlterNote       $FC
000911A8 01                         	dc.b	$01
000911A9 E1FF                       	smpsAlterNote       $FF
000911AB ECF5                       	smpsPSGAlterVol     $F5
000911AD 9B06                       	dc.b	nD2, $06
000911AF EC04                       	smpsPSGAlterVol     $04
000911B1 E701                       	dc.b	smpsNoAttack, $01
000911B3 EC07                       	smpsPSGAlterVol     $07
000911B5 8003                       	dc.b	nRst, $03
000911B7 ECF5                       	smpsPSGAlterVol     $F5
000911B9 9B06                       	dc.b	nD2, $06
000911BB EC04                       	smpsPSGAlterVol     $04
000911BD E701                       	dc.b	smpsNoAttack, $01
000911BF EC07                       	smpsPSGAlterVol     $07
000911C1 8006                       	dc.b	nRst, $06
000911C3 E102                       	smpsAlterNote       $02
000911C5 01                         	dc.b	$01
000911C6 E106                       	smpsAlterNote       $06
000911C8 01                         	dc.b	$01
000911C9 E102                       	smpsAlterNote       $02
000911CB 01                         	dc.b	$01
000911CC E1FF                       	smpsAlterNote       $FF
000911CE 01                         	dc.b	$01
000911CF ECF5                       	smpsPSGAlterVol     $F5
000911D1 9B06                       	dc.b	nD2, $06
000911D3 EC04                       	smpsPSGAlterVol     $04
000911D5 E701                       	dc.b	smpsNoAttack, $01
000911D7 EC07                       	smpsPSGAlterVol     $07
000911D9 8003                       	dc.b	nRst, $03
000911DB ECF5                       	smpsPSGAlterVol     $F5
000911DD 9B07                       	dc.b	nD2, $07
000911DF EC0B                       	smpsPSGAlterVol     $0B
000911E1 8007                       	dc.b	nRst, $07
000911E3 E105                       	smpsAlterNote       $05
000911E5 0101                       	dc.b	$01, $01
000911E7 E1FF                       	smpsAlterNote       $FF
000911E9 01                         	dc.b	$01
000911EA E1FC                       	smpsAlterNote       $FC
000911EC 01                         	dc.b	$01
000911ED E1FF                       	smpsAlterNote       $FF
000911EF ECF5                       	smpsPSGAlterVol     $F5
000911F1 9B06                       	dc.b	nD2, $06
000911F3 EC0B                       	smpsPSGAlterVol     $0B
000911F5 8004                       	dc.b	nRst, $04
000911F7 ECF5                       	smpsPSGAlterVol     $F5
000911F9 9B06                       	dc.b	nD2, $06
000911FB EC04                       	smpsPSGAlterVol     $04
000911FD E701                       	dc.b	smpsNoAttack, $01
000911FF EC07                       	smpsPSGAlterVol     $07
00091201 8006                       	dc.b	nRst, $06
00091203 E102                       	smpsAlterNote       $02
00091205 01                         	dc.b	$01
00091206 E106                       	smpsAlterNote       $06
00091208 01                         	dc.b	$01
00091209 E102                       	smpsAlterNote       $02
0009120B 01                         	dc.b	$01
0009120C E1FC                       	smpsAlterNote       $FC
0009120E 01                         	dc.b	$01
0009120F E1FF                       	smpsAlterNote       $FF
00091211 ECF5                       	smpsPSGAlterVol     $F5
00091213 9B06                       	dc.b	nD2, $06
00091215 EC04                       	smpsPSGAlterVol     $04
00091217 E701                       	dc.b	smpsNoAttack, $01
00091219 EC07                       	smpsPSGAlterVol     $07
0009121B 8003                       	dc.b	nRst, $03
0009121D ECF5                       	smpsPSGAlterVol     $F5
0009121F 9B06                       	dc.b	nD2, $06
00091221 EC04                       	smpsPSGAlterVol     $04
00091223 E701                       	dc.b	smpsNoAttack, $01
00091225 EC07                       	smpsPSGAlterVol     $07
00091227 8006                       	dc.b	nRst, $06
00091229 E102                       	smpsAlterNote       $02
0009122B 01                         	dc.b	$01
0009122C E106                       	smpsAlterNote       $06
0009122E 01                         	dc.b	$01
0009122F E105                       	smpsAlterNote       $05
00091231 01                         	dc.b	$01
00091232 E1FF                       	smpsAlterNote       $FF
00091234 01                         	dc.b	$01
00091235 ECF5                       	smpsPSGAlterVol     $F5
00091237 9B07                       	dc.b	nD2, $07
00091239 EC0B                       	smpsPSGAlterVol     $0B
0009123B 8004                       	dc.b	nRst, $04
0009123D ECF5                       	smpsPSGAlterVol     $F5
0009123F 9B06                       	dc.b	nD2, $06
00091241 EC0B                       	smpsPSGAlterVol     $0B
00091243 8007                       	dc.b	nRst, $07
00091245 E105                       	smpsAlterNote       $05
00091247 0101                       	dc.b	$01, $01
00091249 E101                       	smpsAlterNote       $01
0009124B 01                         	dc.b	$01
0009124C E1FB                       	smpsAlterNote       $FB
0009124E 01                         	dc.b	$01
0009124F E1FE                       	smpsAlterNote       $FE
00091251 ECF5                       	smpsPSGAlterVol     $F5
00091253 9A06                       	dc.b	nCs2, $06
00091255 EC04                       	smpsPSGAlterVol     $04
00091257 E701                       	dc.b	smpsNoAttack, $01
00091259 EC07                       	smpsPSGAlterVol     $07
0009125B 8003                       	dc.b	nRst, $03
0009125D ECF5                       	smpsPSGAlterVol     $F5
0009125F 9A06                       	dc.b	nCs2, $06
00091261 EC04                       	smpsPSGAlterVol     $04
00091263 E701                       	dc.b	smpsNoAttack, $01
00091265 EC07                       	smpsPSGAlterVol     $07
00091267 8003                       	dc.b	nRst, $03
00091269 E1FC                       	smpsAlterNote       $FC
0009126B ECF5                       	smpsPSGAlterVol     $F5
0009126D 8F07                       	dc.b	nD1, $07
0009126F EC0B                       	smpsPSGAlterVol     $0B
00091271 8006                       	dc.b	nRst, $06
00091273 E1FF                       	smpsAlterNote       $FF
00091275 01                         	dc.b	$01
00091276 E103                       	smpsAlterNote       $03
00091278 01                         	dc.b	$01
00091279 E102                       	smpsAlterNote       $02
0009127B 01                         	dc.b	$01
0009127C E1FC                       	smpsAlterNote       $FC
0009127E 01                         	dc.b	$01
0009127F E1F8                       	smpsAlterNote       $F8
00091281 01                         	dc.b	$01
00091282 E1FC                       	smpsAlterNote       $FC
00091284 01                         	dc.b	$01
00091285 E1FF                       	smpsAlterNote       $FF
00091287 01                         	dc.b	$01
00091288 E103                       	smpsAlterNote       $03
0009128A 01                         	dc.b	$01
0009128B E1FC                       	smpsAlterNote       $FC
0009128D ECF5                       	smpsPSGAlterVol     $F5
0009128F 8F03 8F03                  	dc.b	nD1, $03, nD1, $03
00091293 EC04                       	smpsPSGAlterVol     $04
00091295 E701                       	dc.b	smpsNoAttack, $01
00091297 EC07                       	smpsPSGAlterVol     $07
00091299 8009                       	dc.b	nRst, $09
0009129B E1FF                       	smpsAlterNote       $FF
0009129D 01                         	dc.b	$01
0009129E E103                       	smpsAlterNote       $03
000912A0 01                         	dc.b	$01
000912A1 E102                       	smpsAlterNote       $02
000912A3 01                         	dc.b	$01
000912A4 E1FC                       	smpsAlterNote       $FC
000912A6 01                         	dc.b	$01
000912A7 E1F8                       	smpsAlterNote       $F8
000912A9 01                         	dc.b	$01
000912AA E1FC                       	smpsAlterNote       $FC
000912AC 01                         	dc.b	$01
000912AD E1FF                       	smpsAlterNote       $FF
000912AF 01                         	dc.b	$01
000912B0 E103                       	smpsAlterNote       $03
000912B2 01                         	dc.b	$01
000912B3 E1FF                       	smpsAlterNote       $FF
000912B5 01                         	dc.b	$01
000912B6 E1F9                       	smpsAlterNote       $F9
000912B8 01                         	dc.b	$01
000912B9 E1F8                       	smpsAlterNote       $F8
000912BB 01                         	dc.b	$01
000912BC E1FC                       	smpsAlterNote       $FC
000912BE 01                         	dc.b	$01
000912BF E102                       	smpsAlterNote       $02
000912C1 0101                       	dc.b	$01, $01
000912C3 E1FF                       	smpsAlterNote       $FF
000912C5 01                         	dc.b	$01
000912C6 E1FC                       	smpsAlterNote       $FC
000912C8 ECF5                       	smpsPSGAlterVol     $F5
000912CA 8F02                       	dc.b	nD1, $02
000912CC EC04                       	smpsPSGAlterVol     $04
000912CE E701                       	dc.b	smpsNoAttack, $01
000912D0 ECFC                       	smpsPSGAlterVol     $FC
000912D2 E1FB                       	smpsAlterNote       $FB
000912D4 8D06                       	dc.b	nC1, $06
000912D6 EC04                       	smpsPSGAlterVol     $04
000912D8 E701                       	dc.b	smpsNoAttack, $01
000912DA EC07                       	smpsPSGAlterVol     $07
000912DC 8006                       	dc.b	nRst, $06
000912DE E1FE                       	smpsAlterNote       $FE
000912E0 01                         	dc.b	$01
000912E1 E102                       	smpsAlterNote       $02
000912E3 01                         	dc.b	$01
000912E4 E1FE                       	smpsAlterNote       $FE
000912E6 01                         	dc.b	$01
000912E7 E1FB                       	smpsAlterNote       $FB
000912E9 01                         	dc.b	$01
000912EA E1F7                       	smpsAlterNote       $F7
000912EC 01                         	dc.b	$01
000912ED E1FB                       	smpsAlterNote       $FB
000912EF 01                         	dc.b	$01
000912F0 E101                       	smpsAlterNote       $01
000912F2 01                         	dc.b	$01
000912F3 E102                       	smpsAlterNote       $02
000912F5 01                         	dc.b	$01
000912F6 E1FB                       	smpsAlterNote       $FB
000912F8 ECF5                       	smpsPSGAlterVol     $F5
000912FA 8D02                       	dc.b	nC1, $02
000912FC EC04                       	smpsPSGAlterVol     $04
000912FE E701                       	dc.b	smpsNoAttack, $01
00091300 E1FC                       	smpsAlterNote       $FC
00091302 ECFC                       	smpsPSGAlterVol     $FC
00091304 8F0D                       	dc.b	nD1, $0D
00091306 E1FF                       	smpsAlterNote       $FF
00091308 E701                       	dc.b	smpsNoAttack, $01
0009130A E103                       	smpsAlterNote       $03
0009130C E701                       	dc.b	smpsNoAttack, $01
0009130E E1FF                       	smpsAlterNote       $FF
00091310 E701                       	dc.b	smpsNoAttack, $01
00091312 E1FC                       	smpsAlterNote       $FC
00091314 E701                       	dc.b	smpsNoAttack, $01
00091316 E1F8                       	smpsAlterNote       $F8
00091318 E701                       	dc.b	smpsNoAttack, $01
0009131A E1FC                       	smpsAlterNote       $FC
0009131C E701                       	dc.b	smpsNoAttack, $01
0009131E E102                       	smpsAlterNote       $02
00091320 E701                       	dc.b	smpsNoAttack, $01
00091322 E103                       	smpsAlterNote       $03
00091324 E701                       	dc.b	smpsNoAttack, $01
00091326 E1FF                       	smpsAlterNote       $FF
00091328 E701                       	dc.b	smpsNoAttack, $01
0009132A E1F9                       	smpsAlterNote       $F9
0009132C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00091330 E1FC                       	smpsAlterNote       $FC
00091332 E701                       	dc.b	smpsNoAttack, $01
00091334 E102                       	smpsAlterNote       $02
00091336 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009133A E1FC                       	smpsAlterNote       $FC
0009133C E701                       	dc.b	smpsNoAttack, $01
0009133E E1F9                       	smpsAlterNote       $F9
00091340 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00091344 E1FF                       	smpsAlterNote       $FF
00091346 EC04                       	smpsPSGAlterVol     $04
00091348 E701                       	dc.b	smpsNoAttack, $01
0009134A EC07                       	smpsPSGAlterVol     $07
0009134C E103                       	smpsAlterNote       $03
0009134E 8001                       	dc.b	nRst, $01
00091350 E102                       	smpsAlterNote       $02
00091352 01                         	dc.b	$01
00091353 E1FB                       	smpsAlterNote       $FB
00091355 01                         	dc.b	$01
00091356 E1F7                       	smpsAlterNote       $F7
00091358 01                         	dc.b	$01
00091359 E1FB                       	smpsAlterNote       $FB
0009135B 01                         	dc.b	$01
0009135C E102                       	smpsAlterNote       $02
0009135E 01                         	dc.b	$01
0009135F E103                       	smpsAlterNote       $03
00091361 01                         	dc.b	$01
00091362 E1FB                       	smpsAlterNote       $FB
00091364 ECF5                       	smpsPSGAlterVol     $F5
00091366 8E06                       	dc.b	nCs1, $06
00091368 EC04                       	smpsPSGAlterVol     $04
0009136A E701                       	dc.b	smpsNoAttack, $01
0009136C EC07                       	smpsPSGAlterVol     $07
0009136E 8003                       	dc.b	nRst, $03
00091370 ECF5                       	smpsPSGAlterVol     $F5
00091372 8E06                       	dc.b	nCs1, $06
00091374 EC04                       	smpsPSGAlterVol     $04
00091376 E701                       	dc.b	smpsNoAttack, $01
00091378 EC07                       	smpsPSGAlterVol     $07
0009137A 8006                       	dc.b	nRst, $06
0009137C E1FE                       	smpsAlterNote       $FE
0009137E 01                         	dc.b	$01
0009137F E102                       	smpsAlterNote       $02
00091381 01                         	dc.b	$01
00091382 E1FE                       	smpsAlterNote       $FE
00091384 01                         	dc.b	$01
00091385 E1F9                       	smpsAlterNote       $F9
00091387 01                         	dc.b	$01
00091388 E1FC                       	smpsAlterNote       $FC
0009138A ECF5                       	smpsPSGAlterVol     $F5
0009138C 8F06                       	dc.b	nD1, $06
0009138E EC04                       	smpsPSGAlterVol     $04
00091390 E701                       	dc.b	smpsNoAttack, $01
00091392 EC07                       	smpsPSGAlterVol     $07
00091394 8003                       	dc.b	nRst, $03
00091396 ECF5                       	smpsPSGAlterVol     $F5
00091398 8F07                       	dc.b	nD1, $07
0009139A EC0B                       	smpsPSGAlterVol     $0B
0009139C 8006                       	dc.b	nRst, $06
0009139E E1FF                       	smpsAlterNote       $FF
000913A0 01                         	dc.b	$01
000913A1 E102                       	smpsAlterNote       $02
000913A3 0101                       	dc.b	$01, $01
000913A5 E1FB                       	smpsAlterNote       $FB
000913A7 01                         	dc.b	$01
000913A8 ECF5                       	smpsPSGAlterVol     $F5
000913AA 8E07                       	dc.b	nCs1, $07
000913AC EC0B                       	smpsPSGAlterVol     $0B
000913AE 8004                       	dc.b	nRst, $04
000913B0 ECF5                       	smpsPSGAlterVol     $F5
000913B2 8E06                       	dc.b	nCs1, $06
000913B4 EC04                       	smpsPSGAlterVol     $04
000913B6 E701                       	dc.b	smpsNoAttack, $01
000913B8 EC07                       	smpsPSGAlterVol     $07
000913BA 8006                       	dc.b	nRst, $06
000913BC E101                       	smpsAlterNote       $01
000913BE 01                         	dc.b	$01
000913BF E102                       	smpsAlterNote       $02
000913C1 01                         	dc.b	$01
000913C2 E1FE                       	smpsAlterNote       $FE
000913C4 01                         	dc.b	$01
000913C5 E1F8                       	smpsAlterNote       $F8
000913C7 01                         	dc.b	$01
000913C8 E1FB                       	smpsAlterNote       $FB
000913CA ECF5                       	smpsPSGAlterVol     $F5
000913CC 8E06                       	dc.b	nCs1, $06
000913CE EC04                       	smpsPSGAlterVol     $04
000913D0 E701                       	dc.b	smpsNoAttack, $01
000913D2 EC07                       	smpsPSGAlterVol     $07
000913D4 8003                       	dc.b	nRst, $03
000913D6 ECF5                       	smpsPSGAlterVol     $F5
000913D8 8E06                       	dc.b	nCs1, $06
000913DA EC04                       	smpsPSGAlterVol     $04
000913DC E701                       	dc.b	smpsNoAttack, $01
000913DE EC07                       	smpsPSGAlterVol     $07
000913E0 8004                       	dc.b	nRst, $04
000913E2 E1FC                       	smpsAlterNote       $FC
000913E4 ECF5                       	smpsPSGAlterVol     $F5
000913E6 8F06                       	dc.b	nD1, $06
000913E8 EC0B                       	smpsPSGAlterVol     $0B
000913EA 8006                       	dc.b	nRst, $06
000913EC E1FF                       	smpsAlterNote       $FF
000913EE 01                         	dc.b	$01
000913EF E102                       	smpsAlterNote       $02
000913F1 0101                       	dc.b	$01, $01
000913F3 E1FC                       	smpsAlterNote       $FC
000913F5 01                         	dc.b	$01
000913F6 E1F8                       	smpsAlterNote       $F8
000913F8 01                         	dc.b	$01
000913F9 E1F9                       	smpsAlterNote       $F9
000913FB 01                         	dc.b	$01
000913FC E1FF                       	smpsAlterNote       $FF
000913FE 01                         	dc.b	$01
000913FF E103                       	smpsAlterNote       $03
00091401 01                         	dc.b	$01
00091402 E1FC                       	smpsAlterNote       $FC
00091404 ECF5                       	smpsPSGAlterVol     $F5
00091406 8F03 8F03                  	dc.b	nD1, $03, nD1, $03
0009140A EC04                       	smpsPSGAlterVol     $04
0009140C E701                       	dc.b	smpsNoAttack, $01
0009140E EC07                       	smpsPSGAlterVol     $07
00091410 8009                       	dc.b	nRst, $09
00091412 E1FF                       	smpsAlterNote       $FF
00091414 01                         	dc.b	$01
00091415 E102                       	smpsAlterNote       $02
00091417 0101                       	dc.b	$01, $01
00091419 E1FC                       	smpsAlterNote       $FC
0009141B 01                         	dc.b	$01
0009141C E1F8                       	smpsAlterNote       $F8
0009141E 01                         	dc.b	$01
0009141F E1F9                       	smpsAlterNote       $F9
00091421 01                         	dc.b	$01
00091422 E1FF                       	smpsAlterNote       $FF
00091424 01                         	dc.b	$01
00091425 E103                       	smpsAlterNote       $03
00091427 01                         	dc.b	$01
00091428 E1FF                       	smpsAlterNote       $FF
0009142A 01                         	dc.b	$01
0009142B E1FC                       	smpsAlterNote       $FC
0009142D 01                         	dc.b	$01
0009142E E1F8                       	smpsAlterNote       $F8
00091430 01                         	dc.b	$01
00091431 E1FC                       	smpsAlterNote       $FC
00091433 01                         	dc.b	$01
00091434 E102                       	smpsAlterNote       $02
00091436 01                         	dc.b	$01
00091437 E103                       	smpsAlterNote       $03
00091439 01                         	dc.b	$01
0009143A E1FF                       	smpsAlterNote       $FF
0009143C 01                         	dc.b	$01
0009143D E1FC                       	smpsAlterNote       $FC
0009143F ECF5                       	smpsPSGAlterVol     $F5
00091441 8F03                       	dc.b	nD1, $03
00091443 E1FB                       	smpsAlterNote       $FB
00091445 8D06                       	dc.b	nC1, $06
00091447 EC04                       	smpsPSGAlterVol     $04
00091449 E701                       	dc.b	smpsNoAttack, $01
0009144B EC07                       	smpsPSGAlterVol     $07
0009144D 8006                       	dc.b	nRst, $06
0009144F E1FE                       	smpsAlterNote       $FE
00091451 01                         	dc.b	$01
00091452 E102                       	smpsAlterNote       $02
00091454 01                         	dc.b	$01
00091455 E101                       	smpsAlterNote       $01
00091457 01                         	dc.b	$01
00091458 E1FB                       	smpsAlterNote       $FB
0009145A 01                         	dc.b	$01
0009145B E1F7                       	smpsAlterNote       $F7
0009145D 01                         	dc.b	$01
0009145E E1FB                       	smpsAlterNote       $FB
00091460 01                         	dc.b	$01
00091461 E1FE                       	smpsAlterNote       $FE
00091463 01                         	dc.b	$01
00091464 E102                       	smpsAlterNote       $02
00091466 01                         	dc.b	$01
00091467 E1FB                       	smpsAlterNote       $FB
00091469 ECF5                       	smpsPSGAlterVol     $F5
0009146B 8D03                       	dc.b	nC1, $03
0009146D E1FC                       	smpsAlterNote       $FC
0009146F 8F0D                       	dc.b	nD1, $0D
00091471 E1FF                       	smpsAlterNote       $FF
00091473 E701                       	dc.b	smpsNoAttack, $01
00091475 E103                       	smpsAlterNote       $03
00091477 E701                       	dc.b	smpsNoAttack, $01
00091479 E1FF                       	smpsAlterNote       $FF
0009147B E701                       	dc.b	smpsNoAttack, $01
0009147D E1FC                       	smpsAlterNote       $FC
0009147F E701                       	dc.b	smpsNoAttack, $01
00091481 E1F8                       	smpsAlterNote       $F8
00091483 E701                       	dc.b	smpsNoAttack, $01
00091485 E1FC                       	smpsAlterNote       $FC
00091487 E701                       	dc.b	smpsNoAttack, $01
00091489 E102                       	smpsAlterNote       $02
0009148B E701                       	dc.b	smpsNoAttack, $01
0009148D E103                       	smpsAlterNote       $03
0009148F E701                       	dc.b	smpsNoAttack, $01
00091491 E1FF                       	smpsAlterNote       $FF
00091493 E701                       	dc.b	smpsNoAttack, $01
00091495 E1F9                       	smpsAlterNote       $F9
00091497 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009149B E1FC                       	smpsAlterNote       $FC
0009149D E701                       	dc.b	smpsNoAttack, $01
0009149F E102                       	smpsAlterNote       $02
000914A1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000914A5 E1FF                       	smpsAlterNote       $FF
000914A7 E701                       	dc.b	smpsNoAttack, $01
000914A9 E1F9                       	smpsAlterNote       $F9
000914AB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000914AF E1FF                       	smpsAlterNote       $FF
000914B1 EC04                       	smpsPSGAlterVol     $04
000914B3 E701                       	dc.b	smpsNoAttack, $01
000914B5 EC07                       	smpsPSGAlterVol     $07
000914B7 E103                       	smpsAlterNote       $03
000914B9 8001                       	dc.b	nRst, $01
000914BB E102                       	smpsAlterNote       $02
000914BD 01                         	dc.b	$01
000914BE E1FB                       	smpsAlterNote       $FB
000914C0 01                         	dc.b	$01
000914C1 E1F7                       	smpsAlterNote       $F7
000914C3 01                         	dc.b	$01
000914C4 E1FB                       	smpsAlterNote       $FB
000914C6 01                         	dc.b	$01
000914C7 E1FF                       	smpsAlterNote       $FF
000914C9 01                         	dc.b	$01
000914CA E103                       	smpsAlterNote       $03
000914CC 01                         	dc.b	$01
000914CD E1FB                       	smpsAlterNote       $FB
000914CF ECF5                       	smpsPSGAlterVol     $F5
000914D1 8E06                       	dc.b	nCs1, $06
000914D3 EC04                       	smpsPSGAlterVol     $04
000914D5 E701                       	dc.b	smpsNoAttack, $01
000914D7 EC07                       	smpsPSGAlterVol     $07
000914D9 8003                       	dc.b	nRst, $03
000914DB ECF5                       	smpsPSGAlterVol     $F5
000914DD 8E06                       	dc.b	nCs1, $06
000914DF EC04                       	smpsPSGAlterVol     $04
000914E1 E701                       	dc.b	smpsNoAttack, $01
000914E3 EC07                       	smpsPSGAlterVol     $07
000914E5 8006                       	dc.b	nRst, $06
000914E7 E1FE                       	smpsAlterNote       $FE
000914E9 01                         	dc.b	$01
000914EA E102                       	smpsAlterNote       $02
000914EC 01                         	dc.b	$01
000914ED E1FE                       	smpsAlterNote       $FE
000914EF 01                         	dc.b	$01
000914F0 E1FC                       	smpsAlterNote       $FC
000914F2 01                         	dc.b	$01
000914F3 ECF5                       	smpsPSGAlterVol     $F5
000914F5 8F06                       	dc.b	nD1, $06
000914F7 EC04                       	smpsPSGAlterVol     $04
000914F9 E701                       	dc.b	smpsNoAttack, $01
000914FB EC07                       	smpsPSGAlterVol     $07
000914FD 8003                       	dc.b	nRst, $03
000914FF ECF5                       	smpsPSGAlterVol     $F5
00091501 8F07                       	dc.b	nD1, $07
00091503 EC0B                       	smpsPSGAlterVol     $0B
00091505 8007                       	dc.b	nRst, $07
00091507 E102                       	smpsAlterNote       $02
00091509 0101                       	dc.b	$01, $01
0009150B E1FB                       	smpsAlterNote       $FB
0009150D 01                         	dc.b	$01
0009150E E1F8                       	smpsAlterNote       $F8
00091510 01                         	dc.b	$01
00091511 E1FB                       	smpsAlterNote       $FB
00091513 ECF5                       	smpsPSGAlterVol     $F5
00091515 8E06                       	dc.b	nCs1, $06
00091517 EC0B                       	smpsPSGAlterVol     $0B
00091519 8004                       	dc.b	nRst, $04
0009151B ECF5                       	smpsPSGAlterVol     $F5
0009151D 8E06                       	dc.b	nCs1, $06
0009151F EC04                       	smpsPSGAlterVol     $04
00091521 E701                       	dc.b	smpsNoAttack, $01
00091523 EC07                       	smpsPSGAlterVol     $07
00091525 8006                       	dc.b	nRst, $06
00091527 E1FE                       	smpsAlterNote       $FE
00091529 01                         	dc.b	$01
0009152A E102                       	smpsAlterNote       $02
0009152C 01                         	dc.b	$01
0009152D E1FE                       	smpsAlterNote       $FE
0009152F 01                         	dc.b	$01
00091530 E1F9                       	smpsAlterNote       $F9
00091532 01                         	dc.b	$01
00091533 E1FC                       	smpsAlterNote       $FC
00091535 ECF5                       	smpsPSGAlterVol     $F5
00091537 8F06                       	dc.b	nD1, $06
00091539 EC04                       	smpsPSGAlterVol     $04
0009153B E701                       	dc.b	smpsNoAttack, $01
0009153D EC07                       	smpsPSGAlterVol     $07
0009153F 8003                       	dc.b	nRst, $03
00091541 ECF5                       	smpsPSGAlterVol     $F5
00091543 8F06                       	dc.b	nD1, $06
00091545 EC04                       	smpsPSGAlterVol     $04
00091547 E701                       	dc.b	smpsNoAttack, $01
00091549 EC07                       	smpsPSGAlterVol     $07
0009154B 8006                       	dc.b	nRst, $06
0009154D E1FF                       	smpsAlterNote       $FF
0009154F 01                         	dc.b	$01
00091550 E103                       	smpsAlterNote       $03
00091552 01                         	dc.b	$01
00091553 E102                       	smpsAlterNote       $02
00091555 01                         	dc.b	$01
00091556 E1FB                       	smpsAlterNote       $FB
00091558 01                         	dc.b	$01
00091559 ECF5                       	smpsPSGAlterVol     $F5
0009155B 8E07                       	dc.b	nCs1, $07
0009155D EC0B                       	smpsPSGAlterVol     $0B
0009155F 8004                       	dc.b	nRst, $04
00091561 ECF5                       	smpsPSGAlterVol     $F5
00091563 8E06                       	dc.b	nCs1, $06
00091565 EC0B                       	smpsPSGAlterVol     $0B
00091567 8007                       	dc.b	nRst, $07
00091569 E101                       	smpsAlterNote       $01
0009156B 0101                       	dc.b	$01, $01
0009156D E1FE                       	smpsAlterNote       $FE
0009156F 01                         	dc.b	$01
00091570 E1F9                       	smpsAlterNote       $F9
00091572 01                         	dc.b	$01
00091573 E1FC                       	smpsAlterNote       $FC
00091575 ECF5                       	smpsPSGAlterVol     $F5
00091577 8F06                       	dc.b	nD1, $06
00091579 EC04                       	smpsPSGAlterVol     $04
0009157B E701                       	dc.b	smpsNoAttack, $01
0009157D EC07                       	smpsPSGAlterVol     $07
0009157F 8003                       	dc.b	nRst, $03
00091581 ECF5                       	smpsPSGAlterVol     $F5
00091583 8F06                       	dc.b	nD1, $06
00091585 EC04                       	smpsPSGAlterVol     $04
00091587 E701                       	dc.b	smpsNoAttack, $01
00091589 EC07                       	smpsPSGAlterVol     $07
0009158B 8006                       	dc.b	nRst, $06
0009158D E1FF                       	smpsAlterNote       $FF
0009158F 01                         	dc.b	$01
00091590 E103                       	smpsAlterNote       $03
00091592 01                         	dc.b	$01
00091593 E1FF                       	smpsAlterNote       $FF
00091595 01                         	dc.b	$01
00091596 E1FB                       	smpsAlterNote       $FB
00091598 01                         	dc.b	$01
00091599 ECF5                       	smpsPSGAlterVol     $F5
0009159B 8E06                       	dc.b	nCs1, $06
0009159D EC04                       	smpsPSGAlterVol     $04
0009159F E701                       	dc.b	smpsNoAttack, $01
000915A1 EC07                       	smpsPSGAlterVol     $07
000915A3 8003                       	dc.b	nRst, $03
000915A5 ECF5                       	smpsPSGAlterVol     $F5
000915A7 8E07                       	dc.b	nCs1, $07
000915A9 E1FF                       	smpsAlterNote       $FF
000915AB 9B06                       	dc.b	nD2, $06
000915AD EC04                       	smpsPSGAlterVol     $04
000915AF E701                       	dc.b	smpsNoAttack, $01
000915B1 ECFC                       	smpsPSGAlterVol     $FC
000915B3 9B03                       	dc.b	nD2, $03
000915B5 EC04                       	smpsPSGAlterVol     $04
000915B7 E701                       	dc.b	smpsNoAttack, $01
000915B9 ECFC                       	smpsPSGAlterVol     $FC
000915BB 9B02                       	dc.b	nD2, $02
000915BD EC04                       	smpsPSGAlterVol     $04
000915BF E701                       	dc.b	smpsNoAttack, $01
000915C1 ECFC                       	smpsPSGAlterVol     $FC
000915C3 E1FE                       	smpsAlterNote       $FE
000915C5 9A03                       	dc.b	nCs2, $03
000915C7 EC0B                       	smpsPSGAlterVol     $0B
000915C9 800A                       	dc.b	nRst, $0A
000915CB E102                       	smpsAlterNote       $02
000915CD 01                         	dc.b	$01
000915CE E10A                       	smpsAlterNote       $0A
000915D0 01                         	dc.b	$01
000915D1 E102                       	smpsAlterNote       $02
000915D3 01                         	dc.b	$01
000915D4 E1F7                       	smpsAlterNote       $F7
000915D6 01                         	dc.b	$01
000915D7 E10A                       	smpsAlterNote       $0A
000915D9 01                         	dc.b	$01
000915DA E1FC                       	smpsAlterNote       $FC
000915DC 01                         	dc.b	$01
000915DD E108                       	smpsAlterNote       $08
000915DF 0101                       	dc.b	$01, $01
000915E1 E102                       	smpsAlterNote       $02
000915E3 01                         	dc.b	$01
000915E4 E1F7                       	smpsAlterNote       $F7
000915E6 0101                       	dc.b	$01, $01
000915E8 E1FC                       	smpsAlterNote       $FC
000915EA ECF5                       	smpsPSGAlterVol     $F5
000915EC 8F06                       	dc.b	nD1, $06
000915EE EC04                       	smpsPSGAlterVol     $04
000915F0 E701                       	dc.b	smpsNoAttack, $01
000915F2 EC07                       	smpsPSGAlterVol     $07
000915F4 8003                       	dc.b	nRst, $03
000915F6 ECF5                       	smpsPSGAlterVol     $F5
000915F8 8F06                       	dc.b	nD1, $06
000915FA EC04                       	smpsPSGAlterVol     $04
000915FC E701                       	dc.b	smpsNoAttack, $01
000915FE EC07                       	smpsPSGAlterVol     $07
00091600 8006                       	dc.b	nRst, $06
00091602 E1FF                       	smpsAlterNote       $FF
00091604 01                         	dc.b	$01
00091605 E102                       	smpsAlterNote       $02
00091607 01                         	dc.b	$01
00091608 E101                       	smpsAlterNote       $01
0009160A 01                         	dc.b	$01
0009160B E1FC                       	smpsAlterNote       $FC
0009160D 01                         	dc.b	$01
0009160E ECF5                       	smpsPSGAlterVol     $F5
00091610 9007                       	dc.b	nEb1, $07
00091612 EC0B                       	smpsPSGAlterVol     $0B
00091614 8004                       	dc.b	nRst, $04
00091616 ECF5                       	smpsPSGAlterVol     $F5
00091618 9006                       	dc.b	nEb1, $06
0009161A EC0B                       	smpsPSGAlterVol     $0B
0009161C 8007                       	dc.b	nRst, $07
0009161E E103                       	smpsAlterNote       $03
00091620 0101                       	dc.b	$01, $01
00091622 E1FF                       	smpsAlterNote       $FF
00091624 01                         	dc.b	$01
00091625 E1F9                       	smpsAlterNote       $F9
00091627 01                         	dc.b	$01
00091628 E1FC                       	smpsAlterNote       $FC
0009162A ECF5                       	smpsPSGAlterVol     $F5
0009162C 8F06                       	dc.b	nD1, $06
0009162E EC04                       	smpsPSGAlterVol     $04
00091630 E701                       	dc.b	smpsNoAttack, $01
00091632 EC07                       	smpsPSGAlterVol     $07
00091634 8003                       	dc.b	nRst, $03
00091636 ECF5                       	smpsPSGAlterVol     $F5
00091638 8F06                       	dc.b	nD1, $06
0009163A EC04                       	smpsPSGAlterVol     $04
0009163C E701                       	dc.b	smpsNoAttack, $01
0009163E EC07                       	smpsPSGAlterVol     $07
00091640 8006                       	dc.b	nRst, $06
00091642 E1FF                       	smpsAlterNote       $FF
00091644 01                         	dc.b	$01
00091645 E103                       	smpsAlterNote       $03
00091647 01                         	dc.b	$01
00091648 E1FF                       	smpsAlterNote       $FF
0009164A 01                         	dc.b	$01
0009164B E1F9                       	smpsAlterNote       $F9
0009164D 01                         	dc.b	$01
0009164E E1FC                       	smpsAlterNote       $FC
00091650 ECF5                       	smpsPSGAlterVol     $F5
00091652 8F06                       	dc.b	nD1, $06
00091654 EC04                       	smpsPSGAlterVol     $04
00091656 E701                       	dc.b	smpsNoAttack, $01
00091658 EC07                       	smpsPSGAlterVol     $07
0009165A 8003                       	dc.b	nRst, $03
0009165C ECF5                       	smpsPSGAlterVol     $F5
0009165E 8F07                       	dc.b	nD1, $07
00091660 EC0B                       	smpsPSGAlterVol     $0B
00091662 8006                       	dc.b	nRst, $06
00091664 E1FF                       	smpsAlterNote       $FF
00091666 01                         	dc.b	$01
00091667 E102                       	smpsAlterNote       $02
00091669 0101                       	dc.b	$01, $01
0009166B E1FC                       	smpsAlterNote       $FC
0009166D 01                         	dc.b	$01
0009166E ECF5                       	smpsPSGAlterVol     $F5
00091670 8F07                       	dc.b	nD1, $07
00091672 EC0B                       	smpsPSGAlterVol     $0B
00091674 8004                       	dc.b	nRst, $04
00091676 ECF5                       	smpsPSGAlterVol     $F5
00091678 8F06                       	dc.b	nD1, $06
0009167A EC04                       	smpsPSGAlterVol     $04
0009167C E701                       	dc.b	smpsNoAttack, $01
0009167E EC07                       	smpsPSGAlterVol     $07
00091680 8006                       	dc.b	nRst, $06
00091682 E101                       	smpsAlterNote       $01
00091684 01                         	dc.b	$01
00091685 E102                       	smpsAlterNote       $02
00091687 01                         	dc.b	$01
00091688 E1FF                       	smpsAlterNote       $FF
0009168A 01                         	dc.b	$01
0009168B E1F9                       	smpsAlterNote       $F9
0009168D 01                         	dc.b	$01
0009168E E1FC                       	smpsAlterNote       $FC
00091690 ECF5                       	smpsPSGAlterVol     $F5
00091692 9006                       	dc.b	nEb1, $06
00091694 EC04                       	smpsPSGAlterVol     $04
00091696 E701                       	dc.b	smpsNoAttack, $01
00091698 EC07                       	smpsPSGAlterVol     $07
0009169A 8003                       	dc.b	nRst, $03
0009169C ECF5                       	smpsPSGAlterVol     $F5
0009169E 9006                       	dc.b	nEb1, $06
000916A0 EC04                       	smpsPSGAlterVol     $04
000916A2 E701                       	dc.b	smpsNoAttack, $01
000916A4 EC07                       	smpsPSGAlterVol     $07
000916A6 8006                       	dc.b	nRst, $06
000916A8 E100                       	smpsAlterNote       $00
000916AA 01                         	dc.b	$01
000916AB E102                       	smpsAlterNote       $02
000916AD 01                         	dc.b	$01
000916AE E100                       	smpsAlterNote       $00
000916B0 01                         	dc.b	$01
000916B1 E1FF                       	smpsAlterNote       $FF
000916B3 01                         	dc.b	$01
000916B4 ECF5                       	smpsPSGAlterVol     $F5
000916B6 9B06                       	dc.b	nD2, $06
000916B8 EC04                       	smpsPSGAlterVol     $04
000916BA E701                       	dc.b	smpsNoAttack, $01
000916BC EC07                       	smpsPSGAlterVol     $07
000916BE 8003                       	dc.b	nRst, $03
000916C0 ECF5                       	smpsPSGAlterVol     $F5
000916C2 9B07                       	dc.b	nD2, $07
000916C4 EC0B                       	smpsPSGAlterVol     $0B
000916C6 8007                       	dc.b	nRst, $07
000916C8 E105                       	smpsAlterNote       $05
000916CA 0101                       	dc.b	$01, $01
000916CC E1FF                       	smpsAlterNote       $FF
000916CE 01                         	dc.b	$01
000916CF E1FC                       	smpsAlterNote       $FC
000916D1 01                         	dc.b	$01
000916D2 E1FF                       	smpsAlterNote       $FF
000916D4 ECF5                       	smpsPSGAlterVol     $F5
000916D6 9B06                       	dc.b	nD2, $06
000916D8 EC0B                       	smpsPSGAlterVol     $0B
000916DA 8004                       	dc.b	nRst, $04
000916DC ECF5                       	smpsPSGAlterVol     $F5
000916DE 9B06                       	dc.b	nD2, $06
000916E0 EC04                       	smpsPSGAlterVol     $04
000916E2 E701                       	dc.b	smpsNoAttack, $01
000916E4 EC07                       	smpsPSGAlterVol     $07
000916E6 8006                       	dc.b	nRst, $06
000916E8 E102                       	smpsAlterNote       $02
000916EA 01                         	dc.b	$01
000916EB E106                       	smpsAlterNote       $06
000916ED 01                         	dc.b	$01
000916EE E102                       	smpsAlterNote       $02
000916F0 01                         	dc.b	$01
000916F1 E1FC                       	smpsAlterNote       $FC
000916F3 01                         	dc.b	$01
000916F4 E1FF                       	smpsAlterNote       $FF
000916F6 ECF5                       	smpsPSGAlterVol     $F5
000916F8 9B06                       	dc.b	nD2, $06
000916FA EC04                       	smpsPSGAlterVol     $04
000916FC E701                       	dc.b	smpsNoAttack, $01
000916FE EC07                       	smpsPSGAlterVol     $07
00091700 8003                       	dc.b	nRst, $03
00091702 ECF5                       	smpsPSGAlterVol     $F5
00091704 9B07                       	dc.b	nD2, $07
00091706 EC0B                       	smpsPSGAlterVol     $0B
00091708 8006                       	dc.b	nRst, $06
0009170A E102                       	smpsAlterNote       $02
0009170C 01                         	dc.b	$01
0009170D E105                       	smpsAlterNote       $05
0009170F 0101                       	dc.b	$01, $01
00091711 E1FF                       	smpsAlterNote       $FF
00091713 01                         	dc.b	$01
00091714 ECF5                       	smpsPSGAlterVol     $F5
00091716 9B07                       	dc.b	nD2, $07
00091718 EC0B                       	smpsPSGAlterVol     $0B
0009171A 8004                       	dc.b	nRst, $04
0009171C ECF5                       	smpsPSGAlterVol     $F5
0009171E 9B06                       	dc.b	nD2, $06
00091720 EC04                       	smpsPSGAlterVol     $04
00091722 E701                       	dc.b	smpsNoAttack, $01
00091724 EC07                       	smpsPSGAlterVol     $07
00091726 8006                       	dc.b	nRst, $06
00091728 E105                       	smpsAlterNote       $05
0009172A 0101                       	dc.b	$01, $01
0009172C E102                       	smpsAlterNote       $02
0009172E 01                         	dc.b	$01
0009172F E1FC                       	smpsAlterNote       $FC
00091731 01                         	dc.b	$01
00091732 E1FF                       	smpsAlterNote       $FF
00091734 ECF5                       	smpsPSGAlterVol     $F5
00091736 9B06                       	dc.b	nD2, $06
00091738 EC04                       	smpsPSGAlterVol     $04
0009173A E701                       	dc.b	smpsNoAttack, $01
0009173C EC07                       	smpsPSGAlterVol     $07
0009173E 8003                       	dc.b	nRst, $03
00091740 ECF5                       	smpsPSGAlterVol     $F5
00091742 9B06                       	dc.b	nD2, $06
00091744 EC04                       	smpsPSGAlterVol     $04
00091746 E701                       	dc.b	smpsNoAttack, $01
00091748 EC07                       	smpsPSGAlterVol     $07
0009174A 8006                       	dc.b	nRst, $06
0009174C E102                       	smpsAlterNote       $02
0009174E 01                         	dc.b	$01
0009174F E106                       	smpsAlterNote       $06
00091751 01                         	dc.b	$01
00091752 E102                       	smpsAlterNote       $02
00091754 01                         	dc.b	$01
00091755 E1FF                       	smpsAlterNote       $FF
00091757 01                         	dc.b	$01
00091758 ECF5                       	smpsPSGAlterVol     $F5
0009175A 9B06                       	dc.b	nD2, $06
0009175C EC04                       	smpsPSGAlterVol     $04
0009175E E701                       	dc.b	smpsNoAttack, $01
00091760 EC07                       	smpsPSGAlterVol     $07
00091762 8003                       	dc.b	nRst, $03
00091764 ECF5                       	smpsPSGAlterVol     $F5
00091766 9B07                       	dc.b	nD2, $07
00091768 EC0B                       	smpsPSGAlterVol     $0B
0009176A 8007                       	dc.b	nRst, $07
0009176C E107                       	smpsAlterNote       $07
0009176E 0101                       	dc.b	$01, $01
00091770 E1FE                       	smpsAlterNote       $FE
00091772 01                         	dc.b	$01
00091773 E1FA                       	smpsAlterNote       $FA
00091775 0101                       	dc.b	$01, $01
00091777 E103                       	smpsAlterNote       $03
00091779 01                         	dc.b	$01
0009177A E109                       	smpsAlterNote       $09
0009177C 01                         	dc.b	$01
0009177D E107                       	smpsAlterNote       $07
0009177F 01                         	dc.b	$01
00091780 E1FE                       	smpsAlterNote       $FE
00091782 01                         	dc.b	$01
00091783 E108                       	smpsAlterNote       $08
00091785 01                         	dc.b	$01
00091786 E1FD                       	smpsAlterNote       $FD
00091788 ECF5                       	smpsPSGAlterVol     $F5
0009178A 940E                       	dc.b	nG1, $0E
0009178C E103                       	smpsAlterNote       $03
0009178E EC0B                       	smpsPSGAlterVol     $0B
00091790 8001 01                    	dc.b	nRst, $01, $01
00091793 E1FD                       	smpsAlterNote       $FD
00091795 01                         	dc.b	$01
00091796 E1FB                       	smpsAlterNote       $FB
00091798 0101                       	dc.b	$01, $01
0009179A E100                       	smpsAlterNote       $00
0009179C 01                         	dc.b	$01
0009179D E103                       	smpsAlterNote       $03
0009179F 01                         	dc.b	$01
000917A0 E100                       	smpsAlterNote       $00
000917A2 01                         	dc.b	$01
000917A3 E1FD                       	smpsAlterNote       $FD
000917A5 01                         	dc.b	$01
000917A6 E1FA                       	smpsAlterNote       $FA
000917A8 01                         	dc.b	$01
000917A9 E1FD                       	smpsAlterNote       $FD
000917AB 01                         	dc.b	$01
000917AC E103                       	smpsAlterNote       $03
000917AE 0101                       	dc.b	$01, $01
000917B0 E100                       	smpsAlterNote       $00
000917B2 01                         	dc.b	$01
000917B3 E1FE                       	smpsAlterNote       $FE
000917B5 ECF5                       	smpsPSGAlterVol     $F5
000917B7 960D                       	dc.b	nA1, $0D
000917B9 E104                       	smpsAlterNote       $04
000917BB EC0B                       	smpsPSGAlterVol     $0B
000917BD 8001 01                    	dc.b	nRst, $01, $01
000917C0 E101                       	smpsAlterNote       $01
000917C2 01                         	dc.b	$01
000917C3 E1FB                       	smpsAlterNote       $FB
000917C5 0101                       	dc.b	$01, $01
000917C7 E1FE                       	smpsAlterNote       $FE
000917C9 01                         	dc.b	$01
000917CA E104                       	smpsAlterNote       $04
000917CC 0101                       	dc.b	$01, $01
000917CE E1FE                       	smpsAlterNote       $FE
000917D0 01                         	dc.b	$01
000917D1 E1FB                       	smpsAlterNote       $FB
000917D3 0101                       	dc.b	$01, $01
000917D5 E101                       	smpsAlterNote       $01
000917D7 01                         	dc.b	$01
000917D8 E104                       	smpsAlterNote       $04
000917DA 0101                       	dc.b	$01, $01
000917DC E1FE                       	smpsAlterNote       $FE
000917DE ECF5                       	smpsPSGAlterVol     $F5
000917E0 970D                       	dc.b	nBb1, $0D
000917E2 E101                       	smpsAlterNote       $01
000917E4 EC04                       	smpsPSGAlterVol     $04
000917E6 E701                       	dc.b	smpsNoAttack, $01
000917E8 EC07                       	smpsPSGAlterVol     $07
000917EA E104                       	smpsAlterNote       $04
000917EC 8001                       	dc.b	nRst, $01
000917EE E103                       	smpsAlterNote       $03
000917F0 01                         	dc.b	$01
000917F1 E1FE                       	smpsAlterNote       $FE
000917F3 01                         	dc.b	$01
000917F4 E1FA                       	smpsAlterNote       $FA
000917F6 01                         	dc.b	$01
000917F7 E1FE                       	smpsAlterNote       $FE
000917F9 01                         	dc.b	$01
000917FA E101                       	smpsAlterNote       $01
000917FC 01                         	dc.b	$01
000917FD E104                       	smpsAlterNote       $04
000917FF 01                         	dc.b	$01
00091800 E101                       	smpsAlterNote       $01
00091802 01                         	dc.b	$01
00091803 E1FB                       	smpsAlterNote       $FB
00091805 01                         	dc.b	$01
00091806 E1FA                       	smpsAlterNote       $FA
00091808 01                         	dc.b	$01
00091809 E1FE                       	smpsAlterNote       $FE
0009180B 01                         	dc.b	$01
0009180C E103                       	smpsAlterNote       $03
0009180E 0101                       	dc.b	$01, $01
00091810 E101                       	smpsAlterNote       $01
00091812 01                         	dc.b	$01
00091813 E1FE                       	smpsAlterNote       $FE
00091815 ECF5                       	smpsPSGAlterVol     $F5
00091817 990D                       	dc.b	nC2, $0D
00091819 E104                       	smpsAlterNote       $04
0009181B EC0B                       	smpsPSGAlterVol     $0B
0009181D 8001 01                    	dc.b	nRst, $01, $01
00091820 E102                       	smpsAlterNote       $02
00091822 01                         	dc.b	$01
00091823 E1FC                       	smpsAlterNote       $FC
00091825 0101                       	dc.b	$01, $01
00091827 E102                       	smpsAlterNote       $02
00091829 01                         	dc.b	$01
0009182A E104                       	smpsAlterNote       $04
0009182C 01                         	dc.b	$01
0009182D E1FF                       	smpsAlterNote       $FF
0009182F ECF5                       	smpsPSGAlterVol     $F5
00091831 9B06                       	dc.b	nD2, $06
00091833 EC04                       	smpsPSGAlterVol     $04
00091835 E701                       	dc.b	smpsNoAttack, $01
00091837 EC07                       	smpsPSGAlterVol     $07
00091839 8003                       	dc.b	nRst, $03
0009183B ECF5                       	smpsPSGAlterVol     $F5
0009183D 9B07                       	dc.b	nD2, $07
0009183F EC0B                       	smpsPSGAlterVol     $0B
00091841 8006                       	dc.b	nRst, $06
00091843 E101                       	smpsAlterNote       $01
00091845 01                         	dc.b	$01
00091846 E104                       	smpsAlterNote       $04
00091848 0101                       	dc.b	$01, $01
0009184A E1FE                       	smpsAlterNote       $FE
0009184C 01                         	dc.b	$01
0009184D E1FC                       	smpsAlterNote       $FC
0009184F 01                         	dc.b	$01
00091850 E1FE                       	smpsAlterNote       $FE
00091852 ECF5                       	smpsPSGAlterVol     $F5
00091854 9C06                       	dc.b	nEb2, $06
00091856 EC0B                       	smpsPSGAlterVol     $0B
00091858 8004                       	dc.b	nRst, $04
0009185A ECF5                       	smpsPSGAlterVol     $F5
0009185C 9C06                       	dc.b	nEb2, $06
0009185E EC04                       	smpsPSGAlterVol     $04
00091860 E701                       	dc.b	smpsNoAttack, $01
00091862 EC07                       	smpsPSGAlterVol     $07
00091864 8006                       	dc.b	nRst, $06
00091866 E105                       	smpsAlterNote       $05
00091868 01                         	dc.b	$01
00091869 E106                       	smpsAlterNote       $06
0009186B 01                         	dc.b	$01
0009186C E102                       	smpsAlterNote       $02
0009186E 01                         	dc.b	$01
0009186F E1FB                       	smpsAlterNote       $FB
00091871 01                         	dc.b	$01
00091872 E1FF                       	smpsAlterNote       $FF
00091874 ECF5                       	smpsPSGAlterVol     $F5
00091876 9B06                       	dc.b	nD2, $06
00091878 EC04                       	smpsPSGAlterVol     $04
0009187A E701                       	dc.b	smpsNoAttack, $01
0009187C EC07                       	smpsPSGAlterVol     $07
0009187E 8003                       	dc.b	nRst, $03
00091880 ECF5                       	smpsPSGAlterVol     $F5
00091882 9B06                       	dc.b	nD2, $06
00091884 EC04                       	smpsPSGAlterVol     $04
00091886 E701                       	dc.b	smpsNoAttack, $01
00091888 EC07                       	smpsPSGAlterVol     $07
0009188A 8006                       	dc.b	nRst, $06
0009188C E101                       	smpsAlterNote       $01
0009188E 01                         	dc.b	$01
0009188F E105                       	smpsAlterNote       $05
00091891 01                         	dc.b	$01
00091892 E104                       	smpsAlterNote       $04
00091894 01                         	dc.b	$01
00091895 E1FE                       	smpsAlterNote       $FE
00091897 01                         	dc.b	$01
00091898 ECF5                       	smpsPSGAlterVol     $F5
0009189A 9C07                       	dc.b	nEb2, $07
0009189C EC0B                       	smpsPSGAlterVol     $0B
0009189E 8004                       	dc.b	nRst, $04
000918A0 ECF5                       	smpsPSGAlterVol     $F5
000918A2 9C06                       	dc.b	nEb2, $06
000918A4 EC0B                       	smpsPSGAlterVol     $0B
000918A6 8007                       	dc.b	nRst, $07
000918A8 E105                       	smpsAlterNote       $05
000918AA 0101                       	dc.b	$01, $01
000918AC E102                       	smpsAlterNote       $02
000918AE 01                         	dc.b	$01
000918AF E1FB                       	smpsAlterNote       $FB
000918B1 01                         	dc.b	$01
000918B2 E1FF                       	smpsAlterNote       $FF
000918B4 ECF5                       	smpsPSGAlterVol     $F5
000918B6 9B06                       	dc.b	nD2, $06
000918B8 EC04                       	smpsPSGAlterVol     $04
000918BA E701                       	dc.b	smpsNoAttack, $01
000918BC EC07                       	smpsPSGAlterVol     $07
000918BE 8003                       	dc.b	nRst, $03
000918C0 ECF5                       	smpsPSGAlterVol     $F5
000918C2 9B06                       	dc.b	nD2, $06
000918C4 EC04                       	smpsPSGAlterVol     $04
000918C6 E701                       	dc.b	smpsNoAttack, $01
000918C8 EC07                       	smpsPSGAlterVol     $07
000918CA 8006                       	dc.b	nRst, $06
000918CC E101                       	smpsAlterNote       $01
000918CE 01                         	dc.b	$01
000918CF E105                       	smpsAlterNote       $05
000918D1 01                         	dc.b	$01
000918D2 E101                       	smpsAlterNote       $01
000918D4 01                         	dc.b	$01
000918D5 E1FC                       	smpsAlterNote       $FC
000918D7 01                         	dc.b	$01
000918D8 E1FE                       	smpsAlterNote       $FE
000918DA ECF5                       	smpsPSGAlterVol     $F5
000918DC 9C06                       	dc.b	nEb2, $06
000918DE EC04                       	smpsPSGAlterVol     $04
000918E0 E701                       	dc.b	smpsNoAttack, $01
000918E2 EC07                       	smpsPSGAlterVol     $07
000918E4 8003                       	dc.b	nRst, $03
000918E6 ECF5                       	smpsPSGAlterVol     $F5
000918E8 9C07                       	dc.b	nEb2, $07
000918EA EC0B                       	smpsPSGAlterVol     $0B
000918EC 8006                       	dc.b	nRst, $06
000918EE E102                       	smpsAlterNote       $02
000918F0 01                         	dc.b	$01
000918F1 E105                       	smpsAlterNote       $05
000918F3 0101                       	dc.b	$01, $01
000918F5 E1FF                       	smpsAlterNote       $FF
000918F7 01                         	dc.b	$01
000918F8 ECF5                       	smpsPSGAlterVol     $F5
000918FA 9B07                       	dc.b	nD2, $07
000918FC EC0B                       	smpsPSGAlterVol     $0B
000918FE 8004                       	dc.b	nRst, $04
00091900 ECF5                       	smpsPSGAlterVol     $F5
00091902 9B06                       	dc.b	nD2, $06
00091904 EC04                       	smpsPSGAlterVol     $04
00091906 E701                       	dc.b	smpsNoAttack, $01
00091908 EC07                       	smpsPSGAlterVol     $07
0009190A 8002                       	dc.b	nRst, $02
0009190C E1FC                       	smpsAlterNote       $FC
0009190E ECF5                       	smpsPSGAlterVol     $F5
00091910 9006                       	dc.b	nEb1, $06
00091912 EC04                       	smpsPSGAlterVol     $04
00091914 E701                       	dc.b	smpsNoAttack, $01
00091916 ECFC                       	smpsPSGAlterVol     $FC
00091918 8B03 9003                  	dc.b	nBb0, $03, nEb1, $03
0009191C EC04                       	smpsPSGAlterVol     $04
0009191E E701                       	dc.b	smpsNoAttack, $01
00091920 E1FD                       	smpsAlterNote       $FD
00091922 ECFC                       	smpsPSGAlterVol     $FC
00091924 9402                       	dc.b	nG1, $02
00091926 EC04                       	smpsPSGAlterVol     $04
00091928 E701                       	dc.b	smpsNoAttack, $01
0009192A E1FE                       	smpsAlterNote       $FE
0009192C ECFC                       	smpsPSGAlterVol     $FC
0009192E 9703 9703                  	dc.b	nBb1, $03, nBb1, $03
00091932 EC04                       	smpsPSGAlterVol     $04
00091934 E701                       	dc.b	smpsNoAttack, $01
00091936 EC07                       	smpsPSGAlterVol     $07
00091938 8008                       	dc.b	nRst, $08
0009193A F6F4 F3                    	smpsJump            music84_Jump06
0009193D                            
0009193D                            ; PSG3 Data
0009193D                            music84_PSG3:
0009193D F500                       	smpsPSGvoice        $00
0009193F E1FF                       	smpsAlterNote       $FF
00091941 EC0F                       	smpsPSGAlterVol     $0F
00091943 803A                       	dc.b	nRst, $3A
00091945                            
00091945                            music84_Jump05:
00091945 8068 6868 6868 6868 6868+  	dc.b	nRst, $68, $68, $68, $68, $68, $68, $68, $68, $68, $68, $68
00091951 6868 6868 6868 6868 6802   	dc.b	$68, $68, $68, $68, $68, $68, $68, $68, $68, $02
0009195B F6FF E8                    	smpsJump            music84_Jump05
0009195E                            
0009195E                            ; DAC Data
0009195E                            music84_DAC:
0009195E E0C0                       	smpsPan             panCenter, $00
00091960 8001 8203 8102 8101 8103+  	dc.b	nRst, $01, dSnare, $03, dKick, $02, dKick, $01, dKick, $03, dKick, $01
0009196C 8203 8102 8101 8204 8103+  	dc.b	dSnare, $03, dKick, $02, dKick, $01, dSnare, $04, dKick, $03, dSnare, $07
00091978 8104 8103 8104 8103 8104+  	dc.b	dKick, $04, dKick, $03, dKick, $04, dKick, $03, dKick, $04, dKick, $03
00091984 8203 8107 8207 8106 8101+  	dc.b	dSnare, $03, dKick, $07, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03
00091990 8107 8103 8207 8103 8104+  	dc.b	dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04, dSnare, $07
0009199C 8107 8206 8107 8204 8107+  	dc.b	dKick, $07, dSnare, $06, dKick, $07, dSnare, $04, dKick, $07, dKick, $03
000919A8 8207 8103 8104 8207 8106+  	dc.b	dSnare, $07, dKick, $03, dKick, $04, dSnare, $07, dKick, $06, dKick, $01
000919B4 8206 8107 8204 8106 8104+  	dc.b	dSnare, $06, dKick, $07, dSnare, $04, dKick, $06, dKick, $04, dSnare, $07
000919C0 8103 8103 8101 8206 8107+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07, dSnare, $07
000919CC 8107 8203 8107 8104 8206+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $06, dKick, $04
000919D8 8103 8207 8107 8207 8107+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03
000919E4 8107 8103 8101 8206 8104+  	dc.b	dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04, dKick, $03
000919F0 8207 8107 8207 8106 8101+  	dc.b	dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03
000919FC 8107 8103 8207 8103 8104+  	dc.b	dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04, dSnare, $07
00091A08 8106 8101 8206 8107 8204+  	dc.b	dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04, dKick, $06
00091A14 8104 8207 8103 8104 8206+  	dc.b	dKick, $04, dSnare, $07, dKick, $03, dKick, $04, dSnare, $06, dKick, $07
00091A20 8207 8107 8203 8107 8202+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dSnare, $02, dKick, $02
00091A2C 8103 8207 8101 8101 8101+  	dc.b	dKick, $03, dSnare, $07, dKick, $01, dKick, $01, dKick, $01, dKick, $01
00091A38 8206 8107 8207 8107 8203+  	dc.b	dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07
00091A44 8103 8101 8206 8104 8103+  	dc.b	dKick, $03, dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07
00091A50 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
00091A5C 8207 8103 8101 8103 8207+  	dc.b	dSnare, $07, dKick, $03, dKick, $01, dKick, $03, dSnare, $07, dKick, $07
00091A68 8206 8101 8106 8204 8107+  	dc.b	dSnare, $06, dKick, $01, dKick, $06, dSnare, $04, dKick, $07, dKick, $03
00091A74 8207 8103 8104 8207 8106+  	dc.b	dSnare, $07, dKick, $03, dKick, $04, dSnare, $07, dKick, $06, dKick, $01
00091A80 8206 8107 8203 8101 8106+  	dc.b	dSnare, $06, dKick, $07, dSnare, $03, dKick, $01, dKick, $06, dKick, $04
00091A8C 8207 8103 8103 8101 8206+  	dc.b	dSnare, $07, dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07
00091A98 8207 8107 8203 8107 8104+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $06
00091AA4 8104 8103 8207 8107 8207+  	dc.b	dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
00091AB0 8203 8107 8103 8101 8206+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04
00091ABC 8103 8207 8107 8207 8106+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01
00091AC8 8203 8107 8103 8207 8103+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
00091AD4 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04
00091AE0 8106 8104 8207 8104 8103+  	dc.b	dKick, $06, dKick, $04, dSnare, $07, dKick, $04, dKick, $03, dSnare, $07
00091AEC 8106 8207 8107 8203 8107+  	dc.b	dKick, $06, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04
00091AF8 8206 8101 8103 8103 8101+  	dc.b	dSnare, $06, dKick, $01, dKick, $03, dKick, $03, dKick, $01, dSnare, $06
00091B04 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
00091B10 8101 8206 8104 8103 8207+  	dc.b	dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $07
00091B1C 8207 8106 8101 8203 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $03, dKick, $07, dKick, $03
00091B28 8207 8103 8101 8103 8207+  	dc.b	dSnare, $07, dKick, $03, dKick, $01, dKick, $03, dSnare, $07, dKick, $07
00091B34 8206 8107 8204 8107 8103+  	dc.b	dSnare, $06, dKick, $07, dSnare, $04, dKick, $07, dKick, $03, dSnare, $07
00091B40 8103 8104 8207 8214 8204+  	dc.b	dKick, $03, dKick, $04, dSnare, $07, dSnare, $14, dSnare, $04, dSnare, $1B
00091B4C 8203 8101 8214 8203 8207+  	dc.b	dSnare, $03, dKick, $01, dSnare, $14, dSnare, $03, dSnare, $07, dKick, $04
00091B58 8206 8107 8207 8107 8207+  	dc.b	dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
00091B64 8203 8107 8103 8101 8206+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04
00091B70 8103 8207 8107 8207 8106+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01
00091B7C 8203 8107 8103 8207 8103+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
00091B88 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04
00091B94 8106 8104 8207 8103 8104+  	dc.b	dKick, $06, dKick, $04, dSnare, $07, dKick, $03, dKick, $04, dSnare, $06
00091BA0 8107 8207 8107 8204 8207+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $04, dSnare, $07, dKick, $01
00091BAC 8102 8104 8109 8101 8206+  	dc.b	dKick, $02, dKick, $04, dKick, $09, dKick, $01, dSnare, $06, dKick, $07
00091BB8 8207 8107 8203 8107 8103+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dKick, $01
00091BC4 8206 8104 8103 8207 8107+  	dc.b	dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07
00091BD0 8107 8203 8107 8103 8207+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $04
00091BDC 8103 8207 8107 8206 8101+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $06, dKick, $01, dKick, $06
00091BE8 8204 8107 8103 8207 8103+  	dc.b	dSnare, $04, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
00091BF4 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $03
00091C00 8101 8106 8104 8207 8103+  	dc.b	dKick, $01, dKick, $06, dKick, $04, dSnare, $07, dKick, $03, dKick, $03
00091C0C 8101 8206 8107 8207 8107+  	dc.b	dKick, $01, dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03
00091C18 8107 8104 8206 8104 8103+  	dc.b	dKick, $07, dKick, $04, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07
00091C24 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
00091C30 8101 8206 8104 8103 8207+  	dc.b	dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $03
00091C3C 8104 8207 8106 8101 8203+  	dc.b	dKick, $04, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03, dKick, $07
00091C48 8103 8208 8102 8104 8203+  	dc.b	dKick, $03, dSnare, $08, dKick, $02, dKick, $04, dSnare, $03, dKick, $04
00091C54 8103 8103 8101 8203 8103+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $03, dKick, $03, dKick, $01
00091C60 8203 8103 8202 8101 8202+  	dc.b	dSnare, $03, dKick, $03, dSnare, $02, dKick, $01, dSnare, $02, dSnare, $02
00091C6C 8202 8201 8101 8201 8102+  	dc.b	dSnare, $02, dSnare, $01, dKick, $01, dSnare, $01, dKick, $02, dKick, $02
00091C78 8102 8101 8102 8102 8102+  	dc.b	dKick, $02, dKick, $01, dKick, $02, dKick, $02, dKick, $02, dKick, $01
00091C84 8102 8202 8102 8101 8101+  	dc.b	dKick, $02, dSnare, $02, dKick, $02, dKick, $01, dKick, $01, dKick, $07
00091C90 8207 8107 8203 8107 8104+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $07
00091C9C 8103 8103 8101 8206 8107+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07, dSnare, $07
00091CA8 8107 8203 8107 8103 8101+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06
00091CB4 8104 8103 8207 8107 8207+  	dc.b	dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
00091CC0 8203 8107 8103 8207 8104+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $04, dKick, $03
00091CCC 8207 8107 8206 8107 8204+  	dc.b	dSnare, $07, dKick, $07, dSnare, $06, dKick, $07, dSnare, $04, dKick, $07
00091CD8 8103 8207 8203 8204 8107+  	dc.b	dKick, $03, dSnare, $07, dSnare, $03, dSnare, $04, dKick, $07, dKick, $17
00091CE4 E0C0                       	smpsPan             panCenter, $00
00091CE6 F2                         	smpsStop
00091CE7                            
00091CE7                            music84_Voices:
00091CE7                            ;	Voice $00
00091CE7                            ;	$3D
00091CE7                            ;	$41, $31, $41, $51, 	$11, $11, $11, $11, 	$0A, $00, $00, $00
00091CE7                            ;	$0B, $00, $00, $00, 	$F7, $F8, $F8, $F8, 	$1A, $14, $20, $14
00091CE7                            	smpsVcAlgorithm     $05
00091CE7                            	smpsVcFeedback      $07
00091CE7                            	smpsVcUnusedBits    $00
00091CE7                            	smpsVcDetune        $05, $04, $03, $04
00091CE7                            	smpsVcCoarseFreq    $01, $01, $01, $01
00091CE7                            	smpsVcRateScale     $00, $00, $00, $00
00091CE7                            	smpsVcAttackRate    $11, $11, $11, $11
00091CE7                            	smpsVcAmpMod        $00, $00, $00, $00
00091CE7                            	smpsVcDecayRate1    $00, $00, $00, $0A
00091CE7                            	smpsVcDecayRate2    $00, $00, $00, $0B
00091CE7                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
00091CE7                            	smpsVcReleaseRate   $08, $08, $08, $07
00091CE7 3D41 3141 5111 1111 110A+  	smpsVcTotalLevel    $14, $20, $14, $1A
00091D00                            
00091D00                            ;	Voice $01
00091D00                            ;	$04
00091D00                            ;	$5A, $41, $3A, $41, 	$5F, $1F, $5F, $1F, 	$00, $0E, $00, $0E
00091D00                            ;	$00, $05, $00, $05, 	$E6, $86, $E6, $86, 	$19, $10, $19, $10
00091D00                            	smpsVcAlgorithm     $04
00091D00                            	smpsVcFeedback      $00
00091D00                            	smpsVcUnusedBits    $00
00091D00                            	smpsVcDetune        $04, $03, $04, $05
00091D00                            	smpsVcCoarseFreq    $01, $0A, $01, $0A
00091D00                            	smpsVcRateScale     $00, $01, $00, $01
00091D00                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
00091D00                            	smpsVcAmpMod        $00, $00, $00, $00
00091D00                            	smpsVcDecayRate1    $0E, $00, $0E, $00
00091D00                            	smpsVcDecayRate2    $05, $00, $05, $00
00091D00                            	smpsVcDecayLevel    $08, $0E, $08, $0E
00091D00                            	smpsVcReleaseRate   $06, $06, $06, $06
00091D00 045A 413A 415F 1F5F 1F00+  	smpsVcTotalLevel    $10, $19, $10, $19
00091D19                            
00091D19                            ;	Voice $02
00091D19                            ;	$30
00091D19                            ;	$6C, $03, $21, $41, 	$14, $1F, $1F, $1F, 	$0D, $0C, $0E, $01
00091D19                            ;	$01, $01, $01, $01, 	$FF, $C8, $BB, $89, 	$24, $27, $14, $10
00091D19                            	smpsVcAlgorithm     $00
00091D19                            	smpsVcFeedback      $06
00091D19                            	smpsVcUnusedBits    $00
00091D19                            	smpsVcDetune        $04, $02, $00, $06
00091D19                            	smpsVcCoarseFreq    $01, $01, $03, $0C
00091D19                            	smpsVcRateScale     $00, $00, $00, $00
00091D19                            	smpsVcAttackRate    $1F, $1F, $1F, $14
00091D19                            	smpsVcAmpMod        $00, $00, $00, $00
00091D19                            	smpsVcDecayRate1    $01, $0E, $0C, $0D
00091D19                            	smpsVcDecayRate2    $01, $01, $01, $01
00091D19                            	smpsVcDecayLevel    $08, $0B, $0C, $0F
00091D19                            	smpsVcReleaseRate   $09, $0B, $08, $0F
00091D19 306C 0321 4114 1F1F 1F0D+  	smpsVcTotalLevel    $10, $14, $27, $24
00091D32                            
00091D32                            ;	Voice $03
00091D32                            ;	$3A
00091D32                            ;	$01, $21, $61, $41, 	$14, $14, $19, $18, 	$09, $09, $0D, $09
00091D32                            ;	$00, $00, $00, $00, 	$F7, $BF, $FF, $E8, 	$26, $16, $1E, $10
00091D32                            	smpsVcAlgorithm     $02
00091D32                            	smpsVcFeedback      $07
00091D32                            	smpsVcUnusedBits    $00
00091D32                            	smpsVcDetune        $04, $06, $02, $00
00091D32                            	smpsVcCoarseFreq    $01, $01, $01, $01
00091D32                            	smpsVcRateScale     $00, $00, $00, $00
00091D32                            	smpsVcAttackRate    $18, $19, $14, $14
00091D32                            	smpsVcAmpMod        $00, $00, $00, $00
00091D32                            	smpsVcDecayRate1    $09, $0D, $09, $09
00091D32                            	smpsVcDecayRate2    $00, $00, $00, $00
00091D32                            	smpsVcDecayLevel    $0E, $0F, $0B, $0F
00091D32                            	smpsVcReleaseRate   $08, $0F, $0F, $07
00091D32 3A01 2161 4114 1419 1809+  	smpsVcTotalLevel    $10, $1E, $16, $26
00091D4B                            
00091D4B                            ;	Voice $04
00091D4B                            ;	$3C
00091D4B                            ;	$3A, $02, $00, $70, 	$1F, $10, $1F, $10, 	$00, $00, $00, $00
00091D4B                            ;	$00, $00, $00, $00, 	$F2, $FA, $F2, $FA, 	$30, $1F, $24, $18
00091D4B                            	smpsVcAlgorithm     $04
00091D4B                            	smpsVcFeedback      $07
00091D4B                            	smpsVcUnusedBits    $00
00091D4B                            	smpsVcDetune        $07, $00, $00, $03
00091D4B                            	smpsVcCoarseFreq    $00, $00, $02, $0A
00091D4B                            	smpsVcRateScale     $00, $00, $00, $00
00091D4B                            	smpsVcAttackRate    $10, $1F, $10, $1F
00091D4B                            	smpsVcAmpMod        $00, $00, $00, $00
00091D4B                            	smpsVcDecayRate1    $00, $00, $00, $00
00091D4B                            	smpsVcDecayRate2    $00, $00, $00, $00
00091D4B                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
00091D4B                            	smpsVcReleaseRate   $0A, $02, $0A, $02
00091D4B 3C3A 0200 701F 101F 1000+  	smpsVcTotalLevel    $18, $24, $1F, $30
00091D64                            
00091D64                            ;	Voice $05
00091D64                            ;	$38
00091D64                            ;	$00, $21, $61, $41, 	$10, $1F, $1F, $1F, 	$17, $00, $03, $00
00091D64                            ;	$0B, $08, $08, $00, 	$A5, $F5, $F5, $F8, 	$1D, $10, $11, $14
00091D64                            	smpsVcAlgorithm     $00
00091D64                            	smpsVcFeedback      $07
00091D64                            	smpsVcUnusedBits    $00
00091D64                            	smpsVcDetune        $04, $06, $02, $00
00091D64                            	smpsVcCoarseFreq    $01, $01, $01, $00
00091D64                            	smpsVcRateScale     $00, $00, $00, $00
00091D64                            	smpsVcAttackRate    $1F, $1F, $1F, $10
00091D64                            	smpsVcAmpMod        $00, $00, $00, $00
00091D64                            	smpsVcDecayRate1    $00, $03, $00, $17
00091D64                            	smpsVcDecayRate2    $00, $08, $08, $0B
00091D64                            	smpsVcDecayLevel    $0F, $0F, $0F, $0A
00091D64                            	smpsVcReleaseRate   $08, $05, $05, $05
00091D64 3800 2161 4110 1F1F 1F17+  	smpsVcTotalLevel    $14, $11, $10, $1D
00091D7D                            
00091D7D                            
00091D7E 00                         		even
00091D7E                            Music85:	incbin	sound\glass2.bin ; Spring Yard Act 1
00095F8E                            		even
00095F8E                            Music86:	incbin	sound\music86.bin; Scrap Brain Act 1
00099AE6 00                         		even
00099AE6                            Music87:	include	sound\music87.asm; Invincibility
00099AE6                            triple_Header:
00099AE6 =00000001                  smpsHeaderStartSong = 1
00099AE6 0000                       	smpsHeaderVoice     triple_Voices
00099AE8 0501                       	smpsHeaderChan      $05, $01
00099AEA 0200                       	smpsHeaderTempo     $02, $00
00099AEC                            
00099AF0 0000 F40A                  	smpsHeaderFM        triple_FM1,	$F4, $0A
00099AF4 0000 000F                  	smpsHeaderFM        triple_FM2,	$00, $0F
00099AF8 0000 000B                  	smpsHeaderFM        triple_FM3,	$00, $0B
00099AFC 0000 0013                  	smpsHeaderFM        triple_FM4,	$00, $13
00099B00 0000 0C01 0000             	smpsHeaderPSG       triple_PSG1,	$0C, $01, $00, $00
00099B06                            
00099B06                            ; DAC Data
00099B06                            triple_DAC:
00099B06 E0C0                       	smpsPan             panCenter, $00
00099B08 8203 0381 8182             	dc.b	dSnare, $03, $03, dKick, dKick, dSnare
00099B0E                            
00099B0E                            triple_Loop01:
00099B0E 8282 82                    	dc.b	dSnare, dSnare, dSnare
00099B11                            
00099B11                            triple_Loop00:
00099B11 8106 8281 8281 8203 8106+  	dc.b	dKick, $06, dSnare, dKick, dSnare, dKick, dSnare, $03, dKick, $06, $03, dSnare
00099B1D 06                         	dc.b	$06
00099B1E F700 08FF EF               	smpsLoop            $00, $08, triple_Loop00
00099B23 810C 8209 0981 0682 0903+  	dc.b	dKick, $0C, dSnare, $09, $09, dKick, $06, dSnare, $09, $03, dKick, $0C
00099B2F 8209 0981 0682 03          	dc.b	dSnare, $09, $09, dKick, $06, dSnare, $03
00099B36 F701 02FF D4               	smpsLoop            $01, $02, triple_Loop01
00099B3B 0303 1B                    	dc.b	$03, $03, $1B
00099B3E E0C0                       	smpsPan             panCenter, $00
00099B40 F6FF C4                    	smpsJump triple_DAC
00099B43                            
00099B43                            ; FM1 Data
00099B43                            triple_FM1:
00099B43 E0C0                       	smpsPan             panCenter, $00
00099B47 8018                       	dc.b	nRst, $18
00099B49                            
00099B49                            triple_Loop0B:
00099B49 AC06 B8                    	dc.b	nG3, $06, nG4
00099B4C F700 04FF F9               	smpsLoop            $00, $04, triple_Loop0B
00099B51                            
00099B51                            triple_Loop0C:
00099B51 A7B3                       	dc.b	nD3, nD4
00099B53 F700 04FF FA               	smpsLoop            $00, $04, triple_Loop0C
00099B58                            
00099B58                            triple_Loop0D:
00099B58 A9B5                       	dc.b	nE3, nE4
00099B5A F700 04FF FA               	smpsLoop            $00, $04, triple_Loop0D
00099B5F A5B1 A5B1 A7B3 A7B3        	dc.b	nC3, nC4, nC3, nC4, nD3, nD4, nD3, nD4
00099B67 F701 02FF DE               	smpsLoop            $01, $02, triple_Loop0B
00099B6C A4B0 A4B0 A0AC A0AC A203+  	dc.b	nB2, nB3, nB2, nB3, nG2, nG3, nG2, nG3, nA2, $03, nRst, nA3
00099B78 80A6 80B2 80A4 A6A7 A9A6+  	dc.b	nRst, nCs3, nRst, nCs4, nRst, nB2, nCs3, nD3, nE3, nCs3, nEb3, nF3
00099B84 AD                         	dc.b	nAb3
00099B85 F702 02FF C0               	smpsLoop            $02, $02, triple_Loop0B
00099B8A 8018                       	dc.b	nRst, $18
00099B8C E0C0                       	smpsPan             panCenter, $00
00099B90 F6FF B1                    	smpsJump triple_FM1
00099B93                            
00099B93                            ; FM2 Data
00099B93                            triple_FM2:
00099B93 E0C0                       	smpsPan             panCenter, $00
00099B97 8018                       	dc.b	nRst, $18
00099B99                            
00099B99                            triple_Loop07:
00099B99 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
00099BA5 C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
00099BB1 F700 02FF E4               	smpsLoop            $00, $02, triple_Loop07
00099BB6 8003                       	dc.b	nRst, $03
00099BB8                            
00099BB8                            triple_Loop08:
00099BB8 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
00099BBE F700 03FF F6               	smpsLoop            $00, $03, triple_Loop08
00099BC3 B809 BC03 8009             	dc.b	nG4, $09, nB4, $03, nRst, $09
00099BC9                            
00099BC9                            triple_Loop09:
00099BC9 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
00099BD5 C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
00099BE1 F700 02FF E4               	smpsLoop            $00, $02, triple_Loop09
00099BE6 8003                       	dc.b	nRst, $03
00099BE8                            
00099BE8                            triple_Loop0A:
00099BE8 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
00099BEE F700 03FF F6               	smpsLoop            $00, $03, triple_Loop0A
00099BF3 B809 BC03 8021             	dc.b	nG4, $09, nB4, $03, nRst, $21
00099BF9 E0C0                       	smpsPan             panCenter, $00
00099BFD F6FF 94                    	smpsJump triple_FM2
00099C00                            
00099C00                            ; FM3 Data
00099C00                            triple_FM3:
00099C00 E0C0                       	smpsPan             panCenter, $00
00099C04 8018                       	dc.b	nRst, $18
00099C06                            
00099C06                            triple_Loop06:
00099C06 B830 B7B8 36B3 2A          	dc.b	nG4, $30, nFs4, nG4, $36, nD4, $2A
00099C0D F700 02FF F5               	smpsLoop            $00, $02, triple_Loop06
00099C12 8030 B802 BABC BDBF C1BA+  	dc.b	nRst, $30, nG4, $02, nA4, nB4, nC5, nD5, nE5, nA4, nB4, nCs5
00099C1E BFC1 C3BC BEC0 C1C3 C5BE+  	dc.b	nD5, nE5, nFs5, nB4, nCs5, nEb5, nE5, nFs5, nAb5, nCs5, nEb5, nF5
00099C2A C3C5 C7                    	dc.b	nFs5, nAb5, nBb5
00099C2D F701 02FF D5               	smpsLoop            $01, $02, triple_Loop06
00099C32 8018                       	dc.b	nRst, $18
00099C34 E0C0                       	smpsPan             panCenter, $00
00099C38 F6FF C6                    	smpsJump triple_FM3
00099C3B                            
00099C3B                            ; FM4 Data
00099C3B                            triple_FM4:
00099C3B E103                       	smpsAlterNote       $03
00099C3F E0C0                       	smpsPan             panCenter, $00
00099C41 8018                       	dc.b	nRst, $18
00099C43                            
00099C43                            triple_Loop02:
00099C43 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
00099C4F C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
00099C5B F700 02FF E4               	smpsLoop            $00, $02, triple_Loop02
00099C60 8003                       	dc.b	nRst, $03
00099C62                            
00099C62                            triple_Loop03:
00099C62 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
00099C68 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop03
00099C6D B809 BC03 8009             	dc.b	nG4, $09, nB4, $03, nRst, $09
00099C73                            
00099C73                            triple_Loop04:
00099C73 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
00099C7F C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
00099C8B F700 02FF E4               	smpsLoop            $00, $02, triple_Loop04
00099C90 8003                       	dc.b	nRst, $03
00099C92                            
00099C92                            triple_Loop05:
00099C92 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
00099C98 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop05
00099C9D B809 BC03 8021             	dc.b	nG4, $09, nB4, $03, nRst, $21
00099CA3 E0C0                       	smpsPan             panCenter, $00
00099CA5 F6FF 94                    	smpsJump triple_FM4
00099CA8                            
00099CA8                            ; PSG1 Data
00099CA8                            triple_PSG1:
00099CA8 8018                       	dc.b	nRst, $18
00099CAA                            
00099CAA                            triple_Loop0E:
00099CAA A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
00099CB6 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
00099CC2 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
00099CCE 9402 8004                  	dc.b	nG1, $02, nRst, $04
00099CD2 F700 07FF D4               	smpsLoop            $00, $07, triple_Loop0E
00099CD7 A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
00099CE3 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
00099CEF 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
00099CFB 9402 8007                  	dc.b	nG1, $02, nRst, $07
00099CFF                            
00099CFF                            triple_Loop0F:
00099CFF 9109 9403 800C             	dc.b	nE1, $09, nG1, $03, nRst, $0C
00099D05 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop0F
00099D0A 9109 9403 8009             	dc.b	nE1, $09, nG1, $03, nRst, $09
00099D10                            
00099D10                            triple_Loop10:
00099D10 A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
00099D1C 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
00099D28 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
00099D34 9402 8004                  	dc.b	nG1, $02, nRst, $04
00099D38 F700 07FF D4               	smpsLoop            $00, $07, triple_Loop10
00099D3D A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
00099D49 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
00099D55 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
00099D61 9402 8007                  	dc.b	nG1, $02, nRst, $07
00099D65                            
00099D65                            triple_Loop11:
00099D65 9109 9403 800C             	dc.b	nE1, $09, nG1, $03, nRst, $0C
00099D6B F700 03FF F6               	smpsLoop            $00, $03, triple_Loop11
00099D70 9109 9403 8021             	dc.b	nE1, $09, nG1, $03, nRst, $21
00099D76 F500                       	smpsPSGvoice        $00
00099D78 F6FF 2E                    	smpsJump triple_PSG1
00099D7B                            
00099D7B                            triple_Voices:
00099D7B                            ;	Voice $00
00099D7B                            ;	$3A
00099D7B                            ;	$01, $07, $01, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
00099D7B                            ;	$00, $00, $00, $00, 	$1F, $FF, $1F, $0F, 	$18, $28, $27, $80
00099D7B                            	smpsVcAlgorithm     $02
00099D7B                            	smpsVcFeedback      $07
00099D7B                            	smpsVcUnusedBits    $00
00099D7B                            	smpsVcDetune        $00, $00, $00, $00
00099D7B                            	smpsVcCoarseFreq    $01, $01, $07, $01
00099D7B                            	smpsVcRateScale     $01, $02, $02, $02
00099D7B                            	smpsVcAttackRate    $13, $0D, $0E, $0E
00099D7B                            	smpsVcAmpMod        $00, $00, $00, $00
00099D7B                            	smpsVcDecayRate1    $03, $0E, $0E, $0E
00099D7B                            	smpsVcDecayRate2    $00, $00, $00, $00
00099D7B                            	smpsVcDecayLevel    $00, $01, $0F, $01
00099D7B                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00099D7B 3A01 0701 018E 8E8D 530E+  	smpsVcTotalLevel    $00, $27, $28, $18
00099D94                            
00099D94                            ;	Voice $01
00099D94                            ;	$20
00099D94                            ;	$7A, $31, $00, $00, 	$9F, $D8, $DC, $DF, 	$10, $0A, $04, $04
00099D94                            ;	$0F, $08, $08, $08, 	$5F, $5F, $BF, $BF, 	$14, $2B, $17, $80
00099D94                            	smpsVcAlgorithm     $00
00099D94                            	smpsVcFeedback      $04
00099D94                            	smpsVcUnusedBits    $00
00099D94                            	smpsVcDetune        $00, $00, $03, $07
00099D94                            	smpsVcCoarseFreq    $00, $00, $01, $0A
00099D94                            	smpsVcRateScale     $03, $03, $03, $02
00099D94                            	smpsVcAttackRate    $1F, $1C, $18, $1F
00099D94                            	smpsVcAmpMod        $00, $00, $00, $00
00099D94                            	smpsVcDecayRate1    $04, $04, $0A, $10
00099D94                            	smpsVcDecayRate2    $08, $08, $08, $0F
00099D94                            	smpsVcDecayLevel    $0B, $0B, $05, $05
00099D94                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00099D94 207A 3100 009F D8DC DF10+  	smpsVcTotalLevel    $00, $17, $2B, $14
00099D94 207A 3100 009F D8DC DF10+  	smpsVcTotalLevel    $00, $17, $2B, $14
00099DAE 00                         		even
00099DAE                            Music88:	incbin	sound\music88.bin; Extra Life
00099E9C                            		even
00099E9C                            Music89:	incbin	sound\music89.bin; Special Stage
0009DD64 00                         		even
0009DD64                            Music8A:	incbin	sound\music8A.bin; Title Screen
0009DF2E                            		even
0009DF2E                            Music8B:	incbin	sound\music8B.bin; Ending Theme
0009E1C8                            		even
0009E1C8                            Music8C:	incbin	sound\music8C.bin; VS Boss
000A105C 00                         		even
000A105C                            Music8D:	incbin	sound\music8D.bin; Final Zone
000A1278                            		even
000A1278                            Music8E:	incbin	sound\fle.bin ;		Act Clear
000A16E6 00                         		even
000A16E6                            Music8F:	incbin	sound\music8F.bin ; Game Over
000A1D26 00                         		even
000A1D26                            Music90:	incbin	sound\music90.bin ; Continue
000A20C0 00                         		even
000A20C0                            Music91:	incbin	sound\music91.bin ; Credits
000A338E                            		even
000A338E                            Music92:	incbin	sound\music92.bin ; Drowning
000A36D0 00                         		even
000A36D0                            Music93:	incbin	sound\music93.bin ; Chaos Emerald
000A37A0                            		even
000A37A0                            Music94:	incbin	sound\music94.bin ; Green Hill Act 2
000A4476 00                         		even
000A4476                            Music95:	incbin	sound\music95.bin ; Green Hill Act 3
000A44B0 00                         		even
000A44B0                            Music96:	incbin	sound\music96.bin ; Labyrinth Act 2
000A44EA 00                         		even
000A44EA                            Music97:	incbin	sound\music97.bin ; Labyrinth Act 3
000A4524 00                         		even
000A4524                            Music98:	incbin	sound\music98.bin ; Marble Act 2
000A455E 00                         		even
000A455E                            Music99:	incbin	sound\music99.bin ; Marble Act 3
000A4598 00                         		even
000A4598                            Music9A:	incbin	sound\music9A.bin ; Star Light Act 2
000A45D2 00                         		even
000A45D2                            Music9B:	incbin	sound\music9B.bin ; Star Light Act 3
000A460C 00                         		even
000A460C                            Music9C:	incbin	sound\music9C.bin ; Spring Yard Act 2
000A4646 00                         		even
000A4646                            Music9D:	incbin	sound\music9D.bin ; Spring Yard Act 3
000A4680 00                         		even
000A4680                            Music9E:	incbin	sound\music9E.bin ; Scrap Brain Act 2
000A4B70                            		even
000A4B70                            Music9F:	include	sound\music9F.asm ; Scrap Brain Act 3
000A4B70                            GentleBreeze_Header:
000A4B70 =00000001                  smpsHeaderStartSong = 1
000A4B70 0000                       	smpsHeaderVoice     GentleBreeze_Voices
000A4B72 0603                       	smpsHeaderChan      $06, $03
000A4B74 0100                       	smpsHeaderTempo     $01, $00
000A4B76                            
000A4B7A 0000 0000                  	smpsHeaderFM        GentleBreeze_FM1,	$00, $00
000A4B7E 0000 0000                  	smpsHeaderFM        GentleBreeze_FM2,	$00, $00
000A4B82 0000 0000                  	smpsHeaderFM        GentleBreeze_FM3,	$00, $00
000A4B86 0000 0000                  	smpsHeaderFM        GentleBreeze_FM4,	$00, $00
000A4B8A 0000 0000                  	smpsHeaderFM        GentleBreeze_FM5,	$00, $00
000A4B8E 0000 0000 0000             	smpsHeaderPSG       GentleBreeze_PSG1,	$00, $00, $00, $00
000A4B94 0000 0000 0000             	smpsHeaderPSG       GentleBreeze_PSG2,	$00, $00, $00, $00
000A4B9A 0000 0000 0000             	smpsHeaderPSG       GentleBreeze_PSG3,	$00, $00, $00, $00
000A4BA0                            
000A4BA0                            ; PSG3 Data
000A4BA0                            GentleBreeze_PSG3:
000A4BA0 F2                         	smpsStop
000A4BA1                            
000A4BA1                            ; FM1 Data
000A4BA1                            GentleBreeze_FM1:
000A4BA3 E0C0                       	smpsPan             panCenter, $00
000A4BA5 E1FF                       	smpsAlterNote       $FF
000A4BA7 C410                       	dc.b	nG5, $10
000A4BA9 E60F                       	smpsAlterVol        $0F
000A4BAB C4                         	dc.b	nG5
000A4BAC E6F1                       	smpsAlterVol        $F1
000A4BAE E100                       	smpsAlterNote       $00
000A4BB0 C2                         	dc.b	nF5
000A4BB1 E60F                       	smpsAlterVol        $0F
000A4BB3 08                         	dc.b	$08
000A4BB4 E6F1                       	smpsAlterVol        $F1
000A4BB6 C010                       	dc.b	nEb5, $10
000A4BB8 E60F                       	smpsAlterVol        $0F
000A4BBA C0                         	dc.b	nEb5
000A4BBB E6F1                       	smpsAlterVol        $F1
000A4BBD BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000A4BC3 E60F                       	smpsAlterVol        $0F
000A4BC5 C9                         	dc.b	nC6
000A4BC6 E6F1                       	smpsAlterVol        $F1
000A4BC8 C5                         	dc.b	nAb5
000A4BC9 E60F                       	smpsAlterVol        $0F
000A4BCB 08                         	dc.b	$08
000A4BCC E6F1                       	smpsAlterVol        $F1
000A4BCE C010                       	dc.b	nEb5, $10
000A4BD0 E60F                       	smpsAlterVol        $0F
000A4BD2 C0                         	dc.b	nEb5
000A4BD3 E6F1                       	smpsAlterVol        $F1
000A4BD5 C208                       	dc.b	nF5, $08
000A4BD7 E1FF                       	smpsAlterNote       $FF
000A4BD9 C410                       	dc.b	nG5, $10
000A4BDB E100                       	smpsAlterNote       $00
000A4BDD C5C7                       	dc.b	nAb5, nBb5
000A4BDF E60F                       	smpsAlterVol        $0F
000A4BE1 C7                         	dc.b	nBb5
000A4BE2 E6F1                       	smpsAlterVol        $F1
000A4BE4 C5                         	dc.b	nAb5
000A4BE5 E60F                       	smpsAlterVol        $0F
000A4BE7 08                         	dc.b	$08
000A4BE8 E6F1                       	smpsAlterVol        $F1
000A4BEA E1FF                       	smpsAlterNote       $FF
000A4BEC C410                       	dc.b	nG5, $10
000A4BEE E60F                       	smpsAlterVol        $0F
000A4BF0 C4                         	dc.b	nG5
000A4BF1 E6F1                       	smpsAlterVol        $F1
000A4BF3 C4                         	dc.b	nG5
000A4BF4 E100                       	smpsAlterNote       $00
000A4BF6 C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000A4BFB E60F                       	smpsAlterVol        $0F
000A4BFD C2                         	dc.b	nF5
000A4BFE E6F1                       	smpsAlterVol        $F1
000A4C00 E1FF                       	smpsAlterNote       $FF
000A4C02 C4                         	dc.b	nG5
000A4C03 E60F                       	smpsAlterVol        $0F
000A4C05 08                         	dc.b	$08
000A4C06 E6F1                       	smpsAlterVol        $F1
000A4C08 10                         	dc.b	$10
000A4C09 E60F                       	smpsAlterVol        $0F
000A4C0B 38                         	dc.b	$38
000A4C0C E6F1                       	smpsAlterVol        $F1
000A4C0E 10                         	dc.b	$10
000A4C0F E60F                       	smpsAlterVol        $0F
000A4C11 C4                         	dc.b	nG5
000A4C12 E6F1                       	smpsAlterVol        $F1
000A4C14 E100                       	smpsAlterNote       $00
000A4C16 C2                         	dc.b	nF5
000A4C17 E60F                       	smpsAlterVol        $0F
000A4C19 08                         	dc.b	$08
000A4C1A E6F1                       	smpsAlterVol        $F1
000A4C1C C010                       	dc.b	nEb5, $10
000A4C1E E60F                       	smpsAlterVol        $0F
000A4C20 C0                         	dc.b	nEb5
000A4C21 E6F1                       	smpsAlterVol        $F1
000A4C23 BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000A4C29 E60F                       	smpsAlterVol        $0F
000A4C2B C9                         	dc.b	nC6
000A4C2C E6F1                       	smpsAlterVol        $F1
000A4C2E C5                         	dc.b	nAb5
000A4C2F E60F                       	smpsAlterVol        $0F
000A4C31 08                         	dc.b	$08
000A4C32 E6F1                       	smpsAlterVol        $F1
000A4C34 C010                       	dc.b	nEb5, $10
000A4C36 E60F                       	smpsAlterVol        $0F
000A4C38 C0                         	dc.b	nEb5
000A4C39 E6F1                       	smpsAlterVol        $F1
000A4C3B C208                       	dc.b	nF5, $08
000A4C3D E1FF                       	smpsAlterNote       $FF
000A4C3F C410                       	dc.b	nG5, $10
000A4C41 E100                       	smpsAlterNote       $00
000A4C43 C5C7                       	dc.b	nAb5, nBb5
000A4C45 E60F                       	smpsAlterVol        $0F
000A4C47 C7                         	dc.b	nBb5
000A4C48 E6F1                       	smpsAlterVol        $F1
000A4C4A C5                         	dc.b	nAb5
000A4C4B E60F                       	smpsAlterVol        $0F
000A4C4D 08                         	dc.b	$08
000A4C4E E6F1                       	smpsAlterVol        $F1
000A4C50 E1FF                       	smpsAlterNote       $FF
000A4C52 C410                       	dc.b	nG5, $10
000A4C54 E60F                       	smpsAlterVol        $0F
000A4C56 C4                         	dc.b	nG5
000A4C57 E6F1                       	smpsAlterVol        $F1
000A4C59 C4                         	dc.b	nG5
000A4C5A E100                       	smpsAlterNote       $00
000A4C5C C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000A4C61 E60F                       	smpsAlterVol        $0F
000A4C63 28                         	dc.b	$28
000A4C64 E6F1                       	smpsAlterVol        $F1
000A4C66 C008 10                    	dc.b	nEb5, $08, $10
000A4C69 E60F                       	smpsAlterVol        $0F
000A4C6B 21                         	dc.b	$21
000A4C6C                            
000A4C6C                            GentleBreeze_Loop12:
000A4C6C E7C0 7F                    	dc.b	smpsNoAttack, nEb5, $7F
000A4C6F F700 08FF F9               	smpsLoop            $00, $08, GentleBreeze_Loop12
000A4C74 E717                       	dc.b	smpsNoAttack, $17
000A4C76 E6F1                       	smpsAlterVol        $F1
000A4C78 E1FF                       	smpsAlterNote       $FF
000A4C7A C410                       	dc.b	nG5, $10
000A4C7C E60F                       	smpsAlterVol        $0F
000A4C7E C4                         	dc.b	nG5
000A4C7F E6F1                       	smpsAlterVol        $F1
000A4C81 E100                       	smpsAlterNote       $00
000A4C83 C2                         	dc.b	nF5
000A4C84 E60F                       	smpsAlterVol        $0F
000A4C86 08                         	dc.b	$08
000A4C87 E6F1                       	smpsAlterVol        $F1
000A4C89 C010                       	dc.b	nEb5, $10
000A4C8B E60F                       	smpsAlterVol        $0F
000A4C8D C0                         	dc.b	nEb5
000A4C8E E6F1                       	smpsAlterVol        $F1
000A4C90 BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000A4C96 E60F                       	smpsAlterVol        $0F
000A4C98 C9                         	dc.b	nC6
000A4C99 E6F1                       	smpsAlterVol        $F1
000A4C9B C5                         	dc.b	nAb5
000A4C9C E60F                       	smpsAlterVol        $0F
000A4C9E 08                         	dc.b	$08
000A4C9F E6F1                       	smpsAlterVol        $F1
000A4CA1 C010                       	dc.b	nEb5, $10
000A4CA3 E60F                       	smpsAlterVol        $0F
000A4CA5 C0                         	dc.b	nEb5
000A4CA6 E6F1                       	smpsAlterVol        $F1
000A4CA8 C208                       	dc.b	nF5, $08
000A4CAA E1FF                       	smpsAlterNote       $FF
000A4CAC C410                       	dc.b	nG5, $10
000A4CAE E100                       	smpsAlterNote       $00
000A4CB0 C5C7                       	dc.b	nAb5, nBb5
000A4CB2 E60F                       	smpsAlterVol        $0F
000A4CB4 C7                         	dc.b	nBb5
000A4CB5 E6F1                       	smpsAlterVol        $F1
000A4CB7 C5                         	dc.b	nAb5
000A4CB8 E60F                       	smpsAlterVol        $0F
000A4CBA 08                         	dc.b	$08
000A4CBB E6F1                       	smpsAlterVol        $F1
000A4CBD E1FF                       	smpsAlterNote       $FF
000A4CBF C410                       	dc.b	nG5, $10
000A4CC1 E60F                       	smpsAlterVol        $0F
000A4CC3 C4                         	dc.b	nG5
000A4CC4 E6F1                       	smpsAlterVol        $F1
000A4CC6 C4                         	dc.b	nG5
000A4CC7 E100                       	smpsAlterNote       $00
000A4CC9 C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000A4CCE E60F                       	smpsAlterVol        $0F
000A4CD0 C2                         	dc.b	nF5
000A4CD1 E6F1                       	smpsAlterVol        $F1
000A4CD3 E1FF                       	smpsAlterNote       $FF
000A4CD5 C4                         	dc.b	nG5
000A4CD6 E60F                       	smpsAlterVol        $0F
000A4CD8 08                         	dc.b	$08
000A4CD9 E6F1                       	smpsAlterVol        $F1
000A4CDB 10                         	dc.b	$10
000A4CDC E60F                       	smpsAlterVol        $0F
000A4CDE 38                         	dc.b	$38
000A4CDF E6F1                       	smpsAlterVol        $F1
000A4CE1 10                         	dc.b	$10
000A4CE2 E60F                       	smpsAlterVol        $0F
000A4CE4 C4                         	dc.b	nG5
000A4CE5 E6F1                       	smpsAlterVol        $F1
000A4CE7 E100                       	smpsAlterNote       $00
000A4CE9 C2                         	dc.b	nF5
000A4CEA E60F                       	smpsAlterVol        $0F
000A4CEC 08                         	dc.b	$08
000A4CED E6F1                       	smpsAlterVol        $F1
000A4CEF C010                       	dc.b	nEb5, $10
000A4CF1 E60F                       	smpsAlterVol        $0F
000A4CF3 C0                         	dc.b	nEb5
000A4CF4 E6F1                       	smpsAlterVol        $F1
000A4CF6 BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000A4CFC E60F                       	smpsAlterVol        $0F
000A4CFE C9                         	dc.b	nC6
000A4CFF E6F1                       	smpsAlterVol        $F1
000A4D01 C5                         	dc.b	nAb5
000A4D02 E60F                       	smpsAlterVol        $0F
000A4D04 08                         	dc.b	$08
000A4D05 E6F1                       	smpsAlterVol        $F1
000A4D07 C010                       	dc.b	nEb5, $10
000A4D09 E60F                       	smpsAlterVol        $0F
000A4D0B C0                         	dc.b	nEb5
000A4D0C E6F1                       	smpsAlterVol        $F1
000A4D0E C208                       	dc.b	nF5, $08
000A4D10 E1FF                       	smpsAlterNote       $FF
000A4D12 C410                       	dc.b	nG5, $10
000A4D14 E100                       	smpsAlterNote       $00
000A4D16 C5C7                       	dc.b	nAb5, nBb5
000A4D18 E60F                       	smpsAlterVol        $0F
000A4D1A C7                         	dc.b	nBb5
000A4D1B E6F1                       	smpsAlterVol        $F1
000A4D1D C5                         	dc.b	nAb5
000A4D1E E60F                       	smpsAlterVol        $0F
000A4D20 08                         	dc.b	$08
000A4D21 E6F1                       	smpsAlterVol        $F1
000A4D23 E1FF                       	smpsAlterNote       $FF
000A4D25 C410                       	dc.b	nG5, $10
000A4D27 E60F                       	smpsAlterVol        $0F
000A4D29 C4                         	dc.b	nG5
000A4D2A E6F1                       	smpsAlterVol        $F1
000A4D2C C4                         	dc.b	nG5
000A4D2D E100                       	smpsAlterNote       $00
000A4D2F C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000A4D34 E60F                       	smpsAlterVol        $0F
000A4D36 28                         	dc.b	$28
000A4D37 E6F1                       	smpsAlterVol        $F1
000A4D39 C008 10                    	dc.b	nEb5, $08, $10
000A4D3C E60F                       	smpsAlterVol        $0F
000A4D3E 21                         	dc.b	$21
000A4D3F E0C0                       	smpsPan             panCenter, $00
000A4D41 F6FF 29                    	smpsJump            GentleBreeze_Loop12
000A4D44                            
000A4D44                            ; FM2 Data
000A4D44                            GentleBreeze_FM2:
000A4D46 E60C                       	smpsAlterVol        $0C
000A4D48 E0C0                       	smpsPan             panCenter, $00
000A4D4A 9E20 A018 A508 8040 A020+  	dc.b	nF2, $20, nG2, $18, nC3, $08, nRst, $40, nG2, $20, nF2, $18
000A4D56 A508 8020 A010 9E9E 20A0+  	dc.b	nC3, $08, nRst, $20, nG2, $10, nF2, nF2, $20, nG2, $18, nC3
000A4D62 0880 409E 38A0 489E 20A0+  	dc.b	$08, nRst, $40, nF2, $38, nG2, $48, nF2, $20, nG2, $18, nC3
000A4D6E 0880 40A0 209E 18A5 0880+  	dc.b	$08, nRst, $40, nG2, $20, nF2, $18, nC3, $08, nRst, $20, nG2
000A4D7A 109E 9E20 A018 A508 8040+  	dc.b	$10, nF2, nF2, $20, nG2, $18, nC3, $08, nRst, $40, nF2, $38
000A4D86 A039                       	dc.b	nG2, $39
000A4D88                            
000A4D88                            GentleBreeze_Jump04:
000A4D88 E7A0 0F                    	dc.b	smpsNoAttack, nG2, $0F
000A4D8B                            
000A4D8B                            GentleBreeze_Loop11:
000A4D8B A118 0880 10A1 2008 A09E+  	dc.b	nAb2, $18, $08, nRst, $10, nAb2, $20, $08, nG2, nF2, nFs2, nG2
000A4D97 A1A0 1808 8010 A020 0880+  	dc.b	nAb2, nG2, $18, $08, nRst, $10, nG2, $20, $08, nRst, nG2, nC3
000A4DA3 189E A020 A510 A008 A518+  	dc.b	$18, nF2, nG2, $20, nC3, $10, nG2, $08, nC3, $18, nG2, $08
000A4DAF 9FA0 9C18 979C 2008 9EA2+  	dc.b	nFs2, nG2, nEb2, $18, nBb1, nEb2, $20, $08, nF2, nA2, nEb3, nB2
000A4DBB A3                         	dc.b	nBb2
000A4DBC F700 02FF CB               	smpsLoop            $00, $02, GentleBreeze_Loop11
000A4DC1 9E20 A018 A508 8040 A020+  	dc.b	nF2, $20, nG2, $18, nC3, $08, nRst, $40, nG2, $20, nF2, $18
000A4DCD A508 8020 A010 9E9E 20A0+  	dc.b	nC3, $08, nRst, $20, nG2, $10, nF2, nF2, $20, nG2, $18, nC3
000A4DD9 0880 409E 38A0 489E 20A0+  	dc.b	$08, nRst, $40, nF2, $38, nG2, $48, nF2, $20, nG2, $18, nC3
000A4DE5 0880 40A0 209E 18A5 0880+  	dc.b	$08, nRst, $40, nG2, $20, nF2, $18, nC3, $08, nRst, $20, nG2
000A4DF1 109E 9E20 A018 A508 8040+  	dc.b	$10, nF2, nF2, $20, nG2, $18, nC3, $08, nRst, $40, nF2, $38
000A4DFD A039                       	dc.b	nG2, $39
000A4DFF E0C0                       	smpsPan             panCenter, $00
000A4E01 F6FF 85                    	smpsJump            GentleBreeze_Jump04
000A4E04                            
000A4E04                            ; FM3 Data
000A4E04                            GentleBreeze_FM3:
000A4E06 E0C0                       	smpsPan             panCenter, $00
000A4E08 807F 7F7F 7F04             	dc.b	nRst, $7F, $7F, $7F, $7F, $04
000A4E10 E616                       	smpsAlterVol        $16
000A4E12 F000 0207 03               	smpsModSet          $00, $02, $07, $03
000A4E17                            
000A4E17                            GentleBreeze_Loop0F:
000A4E17 C008 BDC9                  	dc.b	nEb5, $08, nC5, nC6
000A4E1B E1FF                       	smpsAlterNote       $FF
000A4E1D C4                         	dc.b	nG5
000A4E1E E100                       	smpsAlterNote       $00
000A4E20 C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000A4E25 E608                       	smpsAlterVol        $08
000A4E27 C080 08                    	dc.b	nEb5, nRst, $08
000A4E2A E6F8                       	smpsAlterVol        $F8
000A4E2C C7                         	dc.b	nBb5
000A4E2D E1FF                       	smpsAlterNote       $FF
000A4E2F C4                         	dc.b	nG5
000A4E30 E100                       	smpsAlterNote       $00
000A4E32 C0BB                       	dc.b	nEb5, nBb4
000A4E34 F700 02FF DF               	smpsLoop            $00, $02, GentleBreeze_Loop0F
000A4E39 C0BD C9                    	dc.b	nEb5, nC5, nC6
000A4E3C E1FF                       	smpsAlterNote       $FF
000A4E3E C4                         	dc.b	nG5
000A4E3F E100                       	smpsAlterNote       $00
000A4E41 C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000A4E46 E608                       	smpsAlterVol        $08
000A4E48 C080 08                    	dc.b	nEb5, nRst, $08
000A4E4B E6F8                       	smpsAlterVol        $F8
000A4E4D E1FF                       	smpsAlterNote       $FF
000A4E4F C4                         	dc.b	nG5
000A4E50 E100                       	smpsAlterNote       $00
000A4E52 C2C0 BBC0 BBC7 C5          	dc.b	nF5, nEb5, nBb4, nEb5, nBb4, nBb5, nAb5
000A4E59 E1FF                       	smpsAlterNote       $FF
000A4E5B C4                         	dc.b	nG5
000A4E5C E100                       	smpsAlterNote       $00
000A4E5E C2C0 BBBB C0               	dc.b	nF5, nEb5, nBb4, nBb4, nEb5
000A4E63 E1FF                       	smpsAlterNote       $FF
000A4E65 C4                         	dc.b	nG5
000A4E66 E100                       	smpsAlterNote       $00
000A4E68 C7                         	dc.b	nBb5
000A4E69 E1FF                       	smpsAlterNote       $FF
000A4E6B C4                         	dc.b	nG5
000A4E6C E100                       	smpsAlterNote       $00
000A4E6E C2C0 01                    	dc.b	nF5, nEb5, $01
000A4E71                            
000A4E71                            GentleBreeze_Jump03:
000A4E71 E7C0 07BB 08               	dc.b	smpsNoAttack, nEb5, $07, nBb4, $08
000A4E78 E6FA                       	smpsAlterVol        $FA
000A4E7A F4                         	smpsModOff
000A4E7B E1FF                       	smpsAlterNote       $FF
000A4E7D B850                       	dc.b	nG4, $50
000A4E7F E100                       	smpsAlterNote       $00
000A4E81 B408 B1B4 B5B6 AF18 B510+  	dc.b	nEb4, $08, nC4, nEb4, nE4, nF4, nBb3, $18, nE4, $10, nF4, $08
000A4E8D E1FF                       	smpsAlterNote       $FF
000A4E8F B810                       	dc.b	nG4, $10
000A4E91 E100                       	smpsAlterNote       $00
000A4E93 BB18 B908 80               	dc.b	nBb4, $18, nAb4, $08, nRst
000A4E98 E1FF                       	smpsAlterNote       $FF
000A4E9A B8                         	dc.b	nG4
000A4E9B E100                       	smpsAlterNote       $00
000A4E9D B610                       	dc.b	nF4, $10
000A4E9F E1FF                       	smpsAlterNote       $FF
000A4EA1 B850                       	dc.b	nG4, $50
000A4EA3 E100                       	smpsAlterNote       $00
000A4EA5 B608 B410 08B6 AF60        	dc.b	nF4, $08, nEb4, $10, $08, nF4, nBb3, $60
000A4EAD E1FF                       	smpsAlterNote       $FF
000A4EAF AC08                       	dc.b	nG3, $08
000A4EB1 E100                       	smpsAlterNote       $00
000A4EB3 AFB3 B4B6 B7               	dc.b	nBb3, nD4, nEb4, nF4, nFs4
000A4EB8 E1FF                       	smpsAlterNote       $FF
000A4EBA B850                       	dc.b	nG4, $50
000A4EBC E100                       	smpsAlterNote       $00
000A4EBE BB08                       	dc.b	nBb4, $08
000A4EC0 E1FF                       	smpsAlterNote       $FF
000A4EC2 B8                         	dc.b	nG4
000A4EC3 E100                       	smpsAlterNote       $00
000A4EC5 BDBB B6                    	dc.b	nC5, nBb4, nF4
000A4EC8 E1FF                       	smpsAlterNote       $FF
000A4ECA B810 08                    	dc.b	nG4, $10, $08
000A4ECD E100                       	smpsAlterNote       $00
000A4ECF B6                         	dc.b	nF4
000A4ED0 E1FF                       	smpsAlterNote       $FF
000A4ED2 B880                       	dc.b	nG4, nRst
000A4ED4 E100                       	smpsAlterNote       $00
000A4ED6 BBB9 BB                    	dc.b	nBb4, nAb4, nBb4
000A4ED9 E1FF                       	smpsAlterNote       $FF
000A4EDB B810                       	dc.b	nG4, $10
000A4EDD E100                       	smpsAlterNote       $00
000A4EDF B308 B4B1 AFB4 B5          	dc.b	nD4, $08, nEb4, nC4, nBb3, nEb4, nE4
000A4EE6 E1FF                       	smpsAlterNote       $FF
000A4EE8 B87F E77F E702 807F 7F7F+  	dc.b	nG4, $7F, smpsNoAttack, $7F, smpsNoAttack, $02, nRst, $7F, $7F, $7F, $7F, $04
000A4EF6 E606                       	smpsAlterVol        $06
000A4EF8 F000 0207 03               	smpsModSet          $00, $02, $07, $03
000A4EFD E100                       	smpsAlterNote       $00
000A4EFF                            
000A4EFF                            GentleBreeze_Loop10:
000A4EFF C008 BDC9                  	dc.b	nEb5, $08, nC5, nC6
000A4F03 E1FF                       	smpsAlterNote       $FF
000A4F05 C4                         	dc.b	nG5
000A4F06 E100                       	smpsAlterNote       $00
000A4F08 C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000A4F0D E608                       	smpsAlterVol        $08
000A4F0F C080 08                    	dc.b	nEb5, nRst, $08
000A4F12 E6F8                       	smpsAlterVol        $F8
000A4F14 C7                         	dc.b	nBb5
000A4F15 E1FF                       	smpsAlterNote       $FF
000A4F17 C4                         	dc.b	nG5
000A4F18 E100                       	smpsAlterNote       $00
000A4F1A C0BB                       	dc.b	nEb5, nBb4
000A4F1C F700 02FF DF               	smpsLoop            $00, $02, GentleBreeze_Loop10
000A4F21 C0BD C9                    	dc.b	nEb5, nC5, nC6
000A4F24 E1FF                       	smpsAlterNote       $FF
000A4F26 C4                         	dc.b	nG5
000A4F27 E100                       	smpsAlterNote       $00
000A4F29 C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000A4F2E E608                       	smpsAlterVol        $08
000A4F30 C080 08                    	dc.b	nEb5, nRst, $08
000A4F33 E6F8                       	smpsAlterVol        $F8
000A4F35 E1FF                       	smpsAlterNote       $FF
000A4F37 C4                         	dc.b	nG5
000A4F38 E100                       	smpsAlterNote       $00
000A4F3A C2C0 BBC0 BBC7 C5          	dc.b	nF5, nEb5, nBb4, nEb5, nBb4, nBb5, nAb5
000A4F41 E1FF                       	smpsAlterNote       $FF
000A4F43 C4                         	dc.b	nG5
000A4F44 E100                       	smpsAlterNote       $00
000A4F46 C2C0 BBBB C0               	dc.b	nF5, nEb5, nBb4, nBb4, nEb5
000A4F4B E1FF                       	smpsAlterNote       $FF
000A4F4D C4                         	dc.b	nG5
000A4F4E E100                       	smpsAlterNote       $00
000A4F50 C7                         	dc.b	nBb5
000A4F51 E1FF                       	smpsAlterNote       $FF
000A4F53 C4                         	dc.b	nG5
000A4F54 E100                       	smpsAlterNote       $00
000A4F56 C2C0 01                    	dc.b	nF5, nEb5, $01
000A4F59 E0C0                       	smpsPan             panCenter, $00
000A4F5B F1                         	smpsModOn
000A4F5C F6FF 13                    	smpsJump            GentleBreeze_Jump03
000A4F5F                            
000A4F5F                            ; FM4 Data
000A4F5F                            GentleBreeze_FM4:
000A4F61 E0C0                       	smpsPan             panCenter, $00
000A4F63 80                         	dc.b	nRst
000A4F64                            
000A4F64                            GentleBreeze_Loop0D:
000A4F64 7F                         	dc.b	$7F
000A4F65 F700 07FF FB               	smpsLoop            $00, $07, GentleBreeze_Loop0D
000A4F6A 77                         	dc.b	$77
000A4F6D E609                       	smpsAlterVol        $09
000A4F6F C001                       	dc.b	nEb5, $01
000A4F71                            
000A4F71                            GentleBreeze_Jump02:
000A4F71 E7C0 07C2 08               	dc.b	smpsNoAttack, nEb5, $07, nF5, $08
000A4F76 E607                       	smpsAlterVol        $07
000A4F78 E1FF                       	smpsAlterNote       $FF
000A4F7A C450                       	dc.b	nG5, $50
000A4F7C E100                       	smpsAlterNote       $00
000A4F7E C008 BDC0 C1C2 BB18 C110+  	dc.b	nEb5, $08, nC5, nEb5, nE5, nF5, nBb4, $18, nE5, $10, nF5, $08
000A4F8A E1FF                       	smpsAlterNote       $FF
000A4F8C C410                       	dc.b	nG5, $10
000A4F8E E100                       	smpsAlterNote       $00
000A4F90 C718 C508 80               	dc.b	nBb5, $18, nAb5, $08, nRst
000A4F95 E1FF                       	smpsAlterNote       $FF
000A4F97 C4                         	dc.b	nG5
000A4F98 E100                       	smpsAlterNote       $00
000A4F9A C210                       	dc.b	nF5, $10
000A4F9C E1FF                       	smpsAlterNote       $FF
000A4F9E C450                       	dc.b	nG5, $50
000A4FA0 E100                       	smpsAlterNote       $00
000A4FA2 C208 C010 08C2 BB60        	dc.b	nF5, $08, nEb5, $10, $08, nF5, nBb4, $60
000A4FAA E1FF                       	smpsAlterNote       $FF
000A4FAC B808                       	dc.b	nG4, $08
000A4FAE E100                       	smpsAlterNote       $00
000A4FB0 BBBF C0C2 C3               	dc.b	nBb4, nD5, nEb5, nF5, nFs5
000A4FB5 E1FF                       	smpsAlterNote       $FF
000A4FB7 C450                       	dc.b	nG5, $50
000A4FB9 E100                       	smpsAlterNote       $00
000A4FBB C708                       	dc.b	nBb5, $08
000A4FBD E1FF                       	smpsAlterNote       $FF
000A4FBF C4                         	dc.b	nG5
000A4FC0 E100                       	smpsAlterNote       $00
000A4FC2 C9C7 C2                    	dc.b	nC6, nBb5, nF5
000A4FC5 E1FF                       	smpsAlterNote       $FF
000A4FC7 C410 08                    	dc.b	nG5, $10, $08
000A4FCA E100                       	smpsAlterNote       $00
000A4FCC C2                         	dc.b	nF5
000A4FCD E1FF                       	smpsAlterNote       $FF
000A4FCF C480                       	dc.b	nG5, nRst
000A4FD1 E100                       	smpsAlterNote       $00
000A4FD3 C7C5 C7                    	dc.b	nBb5, nAb5, nBb5
000A4FD6 E1FF                       	smpsAlterNote       $FF
000A4FD8 C410                       	dc.b	nG5, $10
000A4FDA E100                       	smpsAlterNote       $00
000A4FDC BF08 C0BD BBC0 C1          	dc.b	nD5, $08, nEb5, nC5, nBb4, nEb5, nE5
000A4FE3 E1FF                       	smpsAlterNote       $FF
000A4FE5 C47F E701 7FE7 0180        	dc.b	nG5, $7F, smpsNoAttack, $01, $7F, smpsNoAttack, $01, nRst
000A4FED                            
000A4FED                            GentleBreeze_Loop0E:
000A4FED 7F                         	dc.b	$7F
000A4FEE F700 07FF FB               	smpsLoop            $00, $07, GentleBreeze_Loop0E
000A4FF3 77                         	dc.b	$77
000A4FF4 E100                       	smpsAlterNote       $00
000A4FF6 C001                       	dc.b	nEb5, $01
000A4FF8 E6F9                       	smpsAlterVol        $F9
000A4FFA E0C0                       	smpsPan             panCenter, $00
000A4FFC E100                       	smpsAlterNote       $00
000A4FFE F6FF 71                    	smpsJump            GentleBreeze_Jump02
000A5001                            
000A5001                            ; FM5 Data
000A5001                            GentleBreeze_FM5:
000A5003 E0C0                       	smpsPan             panCenter, $00
000A5005 A5                         	dc.b	nC3
000A5006                            
000A5006                            GentleBreeze_Loop06:
000A5006 10                         	dc.b	$10
000A5007 E607                       	smpsAlterVol        $07
000A5009 A5                         	dc.b	nC3
000A500A E6F9                       	smpsAlterVol        $F9
000A500C 08                         	dc.b	$08
000A500D E607                       	smpsAlterVol        $07
000A500F A5                         	dc.b	nC3
000A5010 E608                       	smpsAlterVol        $08
000A5012 A5                         	dc.b	nC3
000A5013 E6F1                       	smpsAlterVol        $F1
000A5015 18                         	dc.b	$18
000A5016 E607                       	smpsAlterVol        $07
000A5018 10                         	dc.b	$10
000A5019 E608                       	smpsAlterVol        $08
000A501B A5                         	dc.b	nC3
000A501C E6F1                       	smpsAlterVol        $F1
000A501E A5                         	dc.b	nC3
000A501F F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop06
000A5024 A5                         	dc.b	nC3
000A5025                            
000A5025                            GentleBreeze_Loop07:
000A5025 E607                       	smpsAlterVol        $07
000A5027 A5                         	dc.b	nC3
000A5028 E6F9                       	smpsAlterVol        $F9
000A502A 08                         	dc.b	$08
000A502B E607                       	smpsAlterVol        $07
000A502D A5                         	dc.b	nC3
000A502E E608                       	smpsAlterVol        $08
000A5030 A5                         	dc.b	nC3
000A5031 E6F1                       	smpsAlterVol        $F1
000A5033 10                         	dc.b	$10
000A5034 F700 02FF ED               	smpsLoop            $00, $02, GentleBreeze_Loop07
000A5039                            
000A5039                            GentleBreeze_Loop08:
000A5039 A5                         	dc.b	nC3
000A503A E607                       	smpsAlterVol        $07
000A503C A5                         	dc.b	nC3
000A503D E6F9                       	smpsAlterVol        $F9
000A503F 08                         	dc.b	$08
000A5040 E607                       	smpsAlterVol        $07
000A5042 A5                         	dc.b	nC3
000A5043 E608                       	smpsAlterVol        $08
000A5045 A5                         	dc.b	nC3
000A5046 E6F1                       	smpsAlterVol        $F1
000A5048 18                         	dc.b	$18
000A5049 E607                       	smpsAlterVol        $07
000A504B 10                         	dc.b	$10
000A504C E608                       	smpsAlterVol        $08
000A504E A5                         	dc.b	nC3
000A504F E6F1                       	smpsAlterVol        $F1
000A5051 A5                         	dc.b	nC3
000A5052 F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop08
000A5057 A5                         	dc.b	nC3
000A5058 E607                       	smpsAlterVol        $07
000A505A A5                         	dc.b	nC3
000A505B E6F9                       	smpsAlterVol        $F9
000A505D 08                         	dc.b	$08
000A505E E607                       	smpsAlterVol        $07
000A5060 A5                         	dc.b	nC3
000A5061 E608                       	smpsAlterVol        $08
000A5063 A5                         	dc.b	nC3
000A5064 E6F1                       	smpsAlterVol        $F1
000A5066 10                         	dc.b	$10
000A5067 E607                       	smpsAlterVol        $07
000A5069 A5                         	dc.b	nC3
000A506A E6F9                       	smpsAlterVol        $F9
000A506C 08                         	dc.b	$08
000A506D E607                       	smpsAlterVol        $07
000A506F A5                         	dc.b	nC3
000A5070 E608                       	smpsAlterVol        $08
000A5072 A5                         	dc.b	nC3
000A5073 E6F1                       	smpsAlterVol        $F1
000A5075 01                         	dc.b	$01
000A5076                            
000A5076                            GentleBreeze_Jump01:
000A5076 E7A5 0F                    	dc.b	smpsNoAttack, nC3, $0F
000A5079 E607                       	smpsAlterVol        $07
000A507B                            
000A507B                            GentleBreeze_Loop09:
000A507B 10                         	dc.b	$10
000A507C E608                       	smpsAlterVol        $08
000A507E A5                         	dc.b	nC3
000A507F E6F1                       	smpsAlterVol        $F1
000A5081 08                         	dc.b	$08
000A5082 E60F                       	smpsAlterVol        $0F
000A5084 18                         	dc.b	$18
000A5085 E6F8                       	smpsAlterVol        $F8
000A5087 F700 0FFF F0               	smpsLoop            $00, $0F, GentleBreeze_Loop09
000A508C 10                         	dc.b	$10
000A508D E608                       	smpsAlterVol        $08
000A508F A5                         	dc.b	nC3
000A5090 E6F1                       	smpsAlterVol        $F1
000A5092 08                         	dc.b	$08
000A5093 E60F                       	smpsAlterVol        $0F
000A5095 18                         	dc.b	$18
000A5096 E6F1                       	smpsAlterVol        $F1
000A5098                            
000A5098                            GentleBreeze_Loop0A:
000A5098 10                         	dc.b	$10
000A5099 E607                       	smpsAlterVol        $07
000A509B A5                         	dc.b	nC3
000A509C E6F9                       	smpsAlterVol        $F9
000A509E 08                         	dc.b	$08
000A509F E607                       	smpsAlterVol        $07
000A50A1 A5                         	dc.b	nC3
000A50A2 E608                       	smpsAlterVol        $08
000A50A4 A5                         	dc.b	nC3
000A50A5 E6F1                       	smpsAlterVol        $F1
000A50A7 18                         	dc.b	$18
000A50A8 E607                       	smpsAlterVol        $07
000A50AA 10                         	dc.b	$10
000A50AB E608                       	smpsAlterVol        $08
000A50AD A5                         	dc.b	nC3
000A50AE E6F1                       	smpsAlterVol        $F1
000A50B0 A5                         	dc.b	nC3
000A50B1 F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop0A
000A50B6 A5                         	dc.b	nC3
000A50B7                            
000A50B7                            GentleBreeze_Loop0B:
000A50B7 E607                       	smpsAlterVol        $07
000A50B9 A5                         	dc.b	nC3
000A50BA E6F9                       	smpsAlterVol        $F9
000A50BC 08                         	dc.b	$08
000A50BD E607                       	smpsAlterVol        $07
000A50BF A5                         	dc.b	nC3
000A50C0 E608                       	smpsAlterVol        $08
000A50C2 A5                         	dc.b	nC3
000A50C3 E6F1                       	smpsAlterVol        $F1
000A50C5 10                         	dc.b	$10
000A50C6 F700 02FF ED               	smpsLoop            $00, $02, GentleBreeze_Loop0B
000A50CB                            
000A50CB                            GentleBreeze_Loop0C:
000A50CB A5                         	dc.b	nC3
000A50CC E607                       	smpsAlterVol        $07
000A50CE A5                         	dc.b	nC3
000A50CF E6F9                       	smpsAlterVol        $F9
000A50D1 08                         	dc.b	$08
000A50D2 E607                       	smpsAlterVol        $07
000A50D4 A5                         	dc.b	nC3
000A50D5 E608                       	smpsAlterVol        $08
000A50D7 A5                         	dc.b	nC3
000A50D8 E6F1                       	smpsAlterVol        $F1
000A50DA 18                         	dc.b	$18
000A50DB E607                       	smpsAlterVol        $07
000A50DD 10                         	dc.b	$10
000A50DE E608                       	smpsAlterVol        $08
000A50E0 A5                         	dc.b	nC3
000A50E1 E6F1                       	smpsAlterVol        $F1
000A50E3 A5                         	dc.b	nC3
000A50E4 F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop0C
000A50E9 A5                         	dc.b	nC3
000A50EA E607                       	smpsAlterVol        $07
000A50EC A5                         	dc.b	nC3
000A50ED E6F9                       	smpsAlterVol        $F9
000A50EF 08                         	dc.b	$08
000A50F0 E607                       	smpsAlterVol        $07
000A50F2 A5                         	dc.b	nC3
000A50F3 E608                       	smpsAlterVol        $08
000A50F5 A5                         	dc.b	nC3
000A50F6 E6F1                       	smpsAlterVol        $F1
000A50F8 10                         	dc.b	$10
000A50F9 E607                       	smpsAlterVol        $07
000A50FB A5                         	dc.b	nC3
000A50FC E6F9                       	smpsAlterVol        $F9
000A50FE 08                         	dc.b	$08
000A50FF E607                       	smpsAlterVol        $07
000A5101 A5                         	dc.b	nC3
000A5102 E608                       	smpsAlterVol        $08
000A5104 A5                         	dc.b	nC3
000A5105 E6F1                       	smpsAlterVol        $F1
000A5107 01                         	dc.b	$01
000A5108 E0C0                       	smpsPan             panCenter, $00
000A510A F6FF 6A                    	smpsJump            GentleBreeze_Jump01
000A510D                            
000A510D                            ; DAC Data
000A510D                            GentleBreeze_DAC:
000A510D 81                         	dc.b	dKick
000A510E                            
000A510E                            GentleBreeze_Loop00:
000A510E 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000A5114 F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop00
000A5119 2018 7F80 2988 0889 8A8B+  	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, dVLowTimpani, dKick
000A5124                            
000A5124                            GentleBreeze_Loop01:
000A5124 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000A512A F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop01
000A512F 2018 7F80 2988 0889 8A01   	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, $01
000A5139                            
000A5139                            GentleBreeze_Jump00:
000A5139 8007 8B08                  	dc.b	nRst, $07, dVLowTimpani, $08
000A513D                            
000A513D                            GentleBreeze_Loop02:
000A513D 81                         	dc.b	dKick
000A513E                            
000A513E                            GentleBreeze_Loop03:
000A513E 1008 8182 2081 1008 8182+  	dc.b	$10, $08, dKick, dSnare, $20, dKick, $10, $08, dKick, dSnare, $10, dMidTimpani
000A514A 088A                       	dc.b	$08, dLowTimpani
000A514C F700 03FF ED               	smpsLoop            $00, $03, GentleBreeze_Loop02
000A5151 8110 0881 8210 8808 8982+  	dc.b	dKick, $10, $08, dKick, dSnare, $10, dHiTimpani, $08, dMidTimpani, dSnare, dLowTimpani, dVLowTimpani
000A515D 1082 0881 18               	dc.b	$10, dSnare, $08, dKick, $18
000A5162 F701 02FF D8               	smpsLoop            $01, $02, GentleBreeze_Loop03
000A5167                            
000A5167                            GentleBreeze_Loop04:
000A5167 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000A516D F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop04
000A5172 2018 7F80 2988 0889 8A8B+  	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, dVLowTimpani, dKick
000A517D                            
000A517D                            GentleBreeze_Loop05:
000A517D 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000A5183 F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop05
000A5188 2018 7F80 2988 0889 8A01   	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, $01
000A5192 F6FF A5                    	smpsJump            GentleBreeze_Jump00
000A5195                            
000A5195                            ; PSG 1 Data
000A5195                            GentleBreeze_PSG1:
000A5195 80                         	dc.b	nRst
000A5196                            
000A5196                            GentleBreeze_LoopPSG02:
000A5196 7F                         	dc.b	$7F
000A5197 F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG02
000A519C 08                         	dc.b	$08
000A519D EC04                       	smpsPSGAlterVol     $04
000A519F                            
000A519F                            GentleBreeze_JumpPSG01:
000A519F A37F A07F 019E 7F7F 02A3+  	dc.b	nBb2, $7F, nG2, $7F, $01, nF2, $7F, $7F, $02, nBb2, $7F, $01
000A51AB A07F 019E 7F7F 0280        	dc.b	nG2, $7F, $01, nF2, $7F, $7F, $02, nRst
000A51B3                            
000A51B3                            GentleBreeze_LoopPSG03:
000A51B3 7F                         	dc.b	$7F
000A51B4 F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG03
000A51B9 08A3 01                    	dc.b	$08, nBb2, $01
000A51BC F6FF E1                    	smpsJump            GentleBreeze_JumpPSG01
000A51BF                            
000A51BF                            ; PSG2 Data
000A51BF                            GentleBreeze_PSG2:
000A51BF 80                         	dc.b	nRst
000A51C0                            
000A51C0                            GentleBreeze_LoopPSG00:
000A51C0 7F                         	dc.b	$7F
000A51C1 F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG00
000A51C6 08                         	dc.b	$08
000A51C7 EC04                       	smpsPSGAlterVol     $04
000A51C9                            
000A51C9                            GentleBreeze_JumpPSG00:
000A51C9 A87F A77F 01A5 7F7F 02A8+  	dc.b	nEb3, $7F, nD3, $7F, $01, nC3, $7F, $7F, $02, nEb3, $7F, $01
000A51D5 A77F 01A5 7F7F 0280        	dc.b	nD3, $7F, $01, nC3, $7F, $7F, $02, nRst
000A51DD                            
000A51DD                            GentleBreeze_LoopPSG01:
000A51DD 7F                         	dc.b	$7F
000A51DE F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG01
000A51E3 08A8 01                    	dc.b	$08, nEb3, $01
000A51E6 F6FF E1                    	smpsJump            GentleBreeze_JumpPSG00
000A51E9                            
000A51E9                            GentleBreeze_Voices:
000A51E9                            ;	Voice $00
000A51E9                            ;	$0C
000A51E9                            ;	$2A, $70, $2A, $71, 	$1F, $1F, $1F, $1F, 	$0D, $04, $11, $0C
000A51E9                            ;	$00, $00, $00, $01, 	$F3, $F4, $F1, $89, 	$7F, $7F, $18, $00
000A51E9                            	smpsVcAlgorithm     $04
000A51E9                            	smpsVcFeedback      $01
000A51E9                            	smpsVcUnusedBits    $00
000A51E9                            	smpsVcDetune        $07, $02, $07, $02
000A51E9                            	smpsVcCoarseFreq    $01, $0A, $00, $0A
000A51E9                            	smpsVcRateScale     $00, $00, $00, $00
000A51E9                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A51E9                            	smpsVcAmpMod        $00, $00, $00, $00
000A51E9                            	smpsVcDecayRate1    $0C, $11, $04, $0D
000A51E9                            	smpsVcDecayRate2    $01, $00, $00, $00
000A51E9                            	smpsVcDecayLevel    $08, $0F, $0F, $0F
000A51E9                            	smpsVcReleaseRate   $09, $01, $04, $03
000A51E9 0C2A 702A 711F 1F1F 1F0D+  	smpsVcTotalLevel    $00, $18, $7F, $7F
000A5202                            
000A5202                            ;	Voice $01
000A5202                            ;	$38
000A5202                            ;	$54, $17, $70, $30, 	$9F, $1F, $9F, $1F, 	$12, $02, $0A, $0A
000A5202                            ;	$00, $10, $00, $00, 	$05, $05, $05, $08, 	$21, $35, $10, $00
000A5202                            	smpsVcAlgorithm     $00
000A5202                            	smpsVcFeedback      $07
000A5202                            	smpsVcUnusedBits    $00
000A5202                            	smpsVcDetune        $03, $07, $01, $05
000A5202                            	smpsVcCoarseFreq    $00, $00, $07, $04
000A5202                            	smpsVcRateScale     $00, $02, $00, $02
000A5202                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A5202                            	smpsVcAmpMod        $00, $00, $00, $00
000A5202                            	smpsVcDecayRate1    $0A, $0A, $02, $12
000A5202                            	smpsVcDecayRate2    $00, $00, $10, $00
000A5202                            	smpsVcDecayLevel    $00, $00, $00, $00
000A5202                            	smpsVcReleaseRate   $08, $05, $05, $05
000A5202 3854 1770 309F 1F9F 1F12+  	smpsVcTotalLevel    $00, $10, $35, $21
000A521B                            
000A521B                            ;	Voice $02
000A521B                            ;	$00
000A521B                            ;	$00, $00, $00, $00, 	$00, $00, $00, $00, 	$00, $00, $00, $00
000A521B                            ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$00, $00, $00, $00
000A521B                            	smpsVcAlgorithm     $00
000A521B                            	smpsVcFeedback      $00
000A521B                            	smpsVcUnusedBits    $00
000A521B                            	smpsVcDetune        $00, $00, $00, $00
000A521B                            	smpsVcCoarseFreq    $00, $00, $00, $00
000A521B                            	smpsVcRateScale     $00, $00, $00, $00
000A521B                            	smpsVcAttackRate    $00, $00, $00, $00
000A521B                            	smpsVcAmpMod        $00, $00, $00, $00
000A521B                            	smpsVcDecayRate1    $00, $00, $00, $00
000A521B                            	smpsVcDecayRate2    $00, $00, $00, $00
000A521B                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000A521B                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000A521B 0000 0000 0000 0000 0000+  	smpsVcTotalLevel    $00, $00, $00, $00
000A5234                            
000A5234                            ;	Voice $03
000A5234                            ;	$36
000A5234                            ;	$0F, $0F, $08, $09, 	$16, $18, $00, $1F, 	$0F, $16, $0C, $0B
000A5234                            ;	$00, $12, $00, $00, 	$06, $2F, $4F, $4F, 	$00, $00, $65, $53
000A5234                            	smpsVcAlgorithm     $06
000A5234                            	smpsVcFeedback      $06
000A5234                            	smpsVcUnusedBits    $00
000A5234                            	smpsVcDetune        $00, $00, $00, $00
000A5234                            	smpsVcCoarseFreq    $09, $08, $0F, $0F
000A5234                            	smpsVcRateScale     $00, $00, $00, $00
000A5234                            	smpsVcAttackRate    $1F, $00, $18, $16
000A5234                            	smpsVcAmpMod        $00, $00, $00, $00
000A5234                            	smpsVcDecayRate1    $0B, $0C, $16, $0F
000A5234                            	smpsVcDecayRate2    $00, $00, $12, $00
000A5234                            	smpsVcDecayLevel    $04, $04, $02, $00
000A5234                            	smpsVcReleaseRate   $0F, $0F, $0F, $06
000A5234 360F 0F08 0916 1800 1F0F+  	smpsVcTotalLevel    $53, $65, $00, $00
000A524D                            
000A524D                            ;	Voice $04
000A524D                            ;	$07
000A524D                            ;	$05, $53, $64, $75, 	$5C, $5C, $5C, $1C, 	$17, $17, $17, $17
000A524D                            ;	$00, $00, $00, $00, 	$26, $26, $26, $26, 	$00, $00, $00, $00
000A524D                            	smpsVcAlgorithm     $07
000A524D                            	smpsVcFeedback      $00
000A524D                            	smpsVcUnusedBits    $00
000A524D                            	smpsVcDetune        $07, $06, $05, $00
000A524D                            	smpsVcCoarseFreq    $05, $04, $03, $05
000A524D                            	smpsVcRateScale     $00, $01, $01, $01
000A524D                            	smpsVcAttackRate    $1C, $1C, $1C, $1C
000A524D                            	smpsVcAmpMod        $00, $00, $00, $00
000A524D                            	smpsVcDecayRate1    $17, $17, $17, $17
000A524D                            	smpsVcDecayRate2    $00, $00, $00, $00
000A524D                            	smpsVcDecayLevel    $02, $02, $02, $02
000A524D                            	smpsVcReleaseRate   $06, $06, $06, $06
000A524D 0705 5364 755C 5C5C 1C17+  	smpsVcTotalLevel    $00, $00, $00, $00
000A5266                            
000A5266                            ;	Voice $05
000A5266                            ;	$3C
000A5266                            ;	$21, $21, $63, $61, 	$13, $10, $14, $0E, 	$09, $0B, $0B, $10
000A5266                            ;	$04, $04, $04, $04, 	$17, $17, $17, $27, 	$1C, $02, $1B, $00
000A5266                            	smpsVcAlgorithm     $04
000A5266                            	smpsVcFeedback      $07
000A5266                            	smpsVcUnusedBits    $00
000A5266                            	smpsVcDetune        $06, $06, $02, $02
000A5266                            	smpsVcCoarseFreq    $01, $03, $01, $01
000A5266                            	smpsVcRateScale     $00, $00, $00, $00
000A5266                            	smpsVcAttackRate    $0E, $14, $10, $13
000A5266                            	smpsVcAmpMod        $00, $00, $00, $00
000A5266                            	smpsVcDecayRate1    $10, $0B, $0B, $09
000A5266                            	smpsVcDecayRate2    $04, $04, $04, $04
000A5266                            	smpsVcDecayLevel    $02, $01, $01, $01
000A5266                            	smpsVcReleaseRate   $07, $07, $07, $07
000A5266 3C21 2163 6113 1014 0E09+  	smpsVcTotalLevel    $00, $1B, $02, $1C
000A527F                            
000A527F                            
000A5280 00                         		even
000A5280                            ; ---------------------------------------------------------------------------
000A5280                            ; Sound	effect pointers
000A5280                            ; ---------------------------------------------------------------------------
000A5280 0000 0000 0000 0000 0000+  SoundIndex:	dc.l SoundA0, SoundA1, SoundA2
000A528C 0000 0000 0000 0000 0000+  		dc.l SoundA3, SoundA4, SoundA5
000A5298 0000 0000 0000 0000 0000+  		dc.l SoundA6, SoundA7, SoundA8
000A52A4 0000 0000 0000 0000 0000+  		dc.l SoundA9, SoundAA, SoundAB
000A52B0 0000 0000 0000 0000 0000+  		dc.l SoundAC, SoundAD, SoundAE
000A52BC 0000 0000 0000 0000 0000+  		dc.l SoundAF, SoundB0, SoundB1
000A52C8 0000 0000 0000 0000 0000+  		dc.l SoundB2, SoundB3, SoundB4
000A52D4 0000 0000 0000 0000 0000+  		dc.l SoundB5, SoundB6, SoundB7
000A52E0 0000 0000 0000 0000 0000+  		dc.l SoundB8, SoundB9, SoundBA
000A52EC 0000 0000 0000 0000 0000+  		dc.l SoundBB, SoundBC, SoundBD
000A52F8 0000 0000 0000 0000 0000+  		dc.l SoundBE, SoundBF, SoundC0
000A5304 0000 0000 0000 0000 0000+  		dc.l SoundC1, SoundC2, SoundC3
000A5310 0000 0000 0000 0000 0000+  		dc.l SoundC4, SoundC5, SoundC6
000A531C 0000 0000 0000 0000 0000+  		dc.l SoundC7, SoundC8, SoundC9
000A5328 0000 0000 0000 0000 0000+  		dc.l SoundCA, SoundCB, SoundCC
000A5334 0000 0000 0000 0000 0000+  		dc.l SoundCD, SoundCE, SoundCF
000A5340 0000 0000                  SoundD0Index:	dc.l SoundD0
000A5344                            SoundA0:	include	sound\jump.asm
000A5344                            jump_Header:
000A5344 =00000001                  smpsHeaderStartSong = 1
000A5344 0000                       	smpsHeaderVoice     jump_Voices
000A5346 01                         	smpsHeaderTempoSFX  $01
000A5347 01                         	smpsHeaderChanSFX   $01
000A5348                            
000A5354                            
000A5354                            ; FM4 Data
000A5354                            jump_FM4:
000A5356 E000                       	smpsPan             panNone, $00
000A5358 E607                       	smpsAlterVol        $07
000A535A E0C0                       	smpsPan             panCenter, $00
000A535C 9903 B1                    	dc.b	nC2, $03, nC4
000A535F E607                       	smpsAlterVol        $07
000A5361 E040                       	smpsPan             panRight, $00
000A5363 99B1                       	dc.b	nC2, nC4
000A5365 E60A                       	smpsAlterVol        $0A
000A5367 E080                       	smpsPan             panLeft, $00
000A5369 99B1                       	dc.b	nC2, nC4
000A536B E603                       	smpsAlterVol        $03
000A536D E0C0                       	smpsPan             panCenter, $00
000A536F 99B1                       	dc.b	nC2, nC4
000A5371 E000                       	smpsPan             panNone, $00
000A5373 803D                       	dc.b	nRst, $3D
000A5375 F2                         	smpsStop
000A5376                            
000A5376                            ; PSG3 Data
000A5376                            jump_PSG3:
000A5376 F3E7                       	smpsPSGform         $E7
000A5378 8056                       	dc.b	nRst, $56
000A537A F2                         	smpsStop
000A537B                            
000A537B                            jump_Voices:
000A537B                            ;	Voice $00
000A537B                            ;	$3C
000A537B                            ;	$00, $0F, $01, $00, 	$1F, $1F, $1F, $1F, 	$00, $12, $14, $0E
000A537B                            ;	$00, $11, $00, $11, 	$0F, $EF, $FF, $0F, 	$00, $00, $00, $00
000A537B                            	smpsVcAlgorithm     $04
000A537B                            	smpsVcFeedback      $07
000A537B                            	smpsVcUnusedBits    $00
000A537B                            	smpsVcDetune        $00, $00, $00, $00
000A537B                            	smpsVcCoarseFreq    $00, $01, $0F, $00
000A537B                            	smpsVcRateScale     $00, $00, $00, $00
000A537B                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A537B                            	smpsVcAmpMod        $00, $00, $00, $00
000A537B                            	smpsVcDecayRate1    $0E, $14, $12, $00
000A537B                            	smpsVcDecayRate2    $11, $00, $11, $00
000A537B                            	smpsVcDecayLevel    $00, $0F, $0E, $00
000A537B                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000A537B 3C00 0F01 001F 1F1F 1F00+  	smpsVcTotalLevel    $00, $00, $00, $00
000A5394                            
000A5394                            
000A5394                            		even
000A5394                            SoundA1:	incbin	sound\soundA1.bin
000A53BE                            		even
000A53BE                            SoundA2:	incbin	sound\soundA2.bin
000A53DE                            		even
000A53DE                            SoundA3:	incbin	sound\soundA3.bin
000A5410                            		even
000A5410                            SoundA4:	incbin	sound\soundA4.bin
000A5446                            		even
000A5446                            SoundA5:	include	sound\fart.asm
000A5446                            Fart_Header:
000A5446 =00000001                  smpsHeaderStartSong = 1
000A5446 0000                       	smpsHeaderVoice     Fart_Voices
000A5448 01                         	smpsHeaderTempoSFX  $01
000A5449 04                         	smpsHeaderChanSFX   $04
000A544A                            
000A5462                            
000A5462                            Fart_FM3:
000A5464 E607                       	smpsAlterVol        $07
000A5466 E0C0                       	smpsPan             panCenter, $00
000A5468 F000 0210 03               	smpsModSet          $00, $02, $10, $03
000A546D A003 E7                    	dc.b	nG2, $03, smpsNoAttack
000A5470 E1FE                       	smpsAlterNote       $FE
000A5472 A201 E7                    	dc.b	nA2, $01, smpsNoAttack
000A5475 E100                       	smpsAlterNote       $00
000A5477 A211 807F 2C               	dc.b	nA2, $11, nRst, $7F, $2C
000A547C F2                         	smpsStop
000A547D                            
000A547D                            ; FM4 Data
000A547D                            Fart_FM4:
000A547F E0C0                       	smpsPan             panCenter, $00
000A5481 8006                       	dc.b	nRst, $06
000A5485 E616                       	smpsAlterVol        $16
000A5487 E080                       	smpsPan             panLeft, $00
000A5489 F000 0210 03               	smpsModSet          $00, $02, $10, $03
000A548E A212                       	dc.b	nA2, $12
000A5490 E60A                       	smpsAlterVol        $0A
000A5492 E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000A5495 E603                       	smpsAlterVol        $03
000A5497 E7A2                       	dc.b	smpsNoAttack, nA2
000A5499 E603                       	smpsAlterVol        $03
000A549B E7A2                       	dc.b	smpsNoAttack, nA2
000A549D E604                       	smpsAlterVol        $04
000A549F E7A2                       	dc.b	smpsNoAttack, nA2
000A54A1 E606                       	smpsAlterVol        $06
000A54A3 E7A2 18                    	dc.b	smpsNoAttack, nA2, $18
000A54A6 E610                       	smpsAlterVol        $10
000A54A8 E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000A54AB E610                       	smpsAlterVol        $10
000A54AD E7A2 1280 42               	dc.b	smpsNoAttack, nA2, $12, nRst, $42
000A54B2 F2                         	smpsStop
000A54B3                            
000A54B3                            ; FM5 Data
000A54B3                            Fart_FM5:
000A54B5 E0C0                       	smpsPan             panCenter, $00
000A54B7 8009                       	dc.b	nRst, $09
000A54BB E616                       	smpsAlterVol        $16
000A54BD E040                       	smpsPan             panRight, $00
000A54BF F000 0210 03               	smpsModSet          $00, $02, $10, $03
000A54C4 A215                       	dc.b	nA2, $15
000A54C6 E60A                       	smpsAlterVol        $0A
000A54C8 E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000A54CB E603                       	smpsAlterVol        $03
000A54CD E7A2                       	dc.b	smpsNoAttack, nA2
000A54CF E603                       	smpsAlterVol        $03
000A54D1 E7A2                       	dc.b	smpsNoAttack, nA2
000A54D3 E604                       	smpsAlterVol        $04
000A54D5 E7A2                       	dc.b	smpsNoAttack, nA2
000A54D7 E606                       	smpsAlterVol        $06
000A54D9 E7A2 15                    	dc.b	smpsNoAttack, nA2, $15
000A54DC E610                       	smpsAlterVol        $10
000A54DE E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000A54E1 E610                       	smpsAlterVol        $10
000A54E3 E7A2 1280 3F               	dc.b	smpsNoAttack, nA2, $12, nRst, $3F
000A54E8 F2                         	smpsStop
000A54E9                            
000A54E9                            ; PSG3 Data
000A54E9                            Fart_PSG3:
000A54E9 F2                         	smpsStop
000A54EA                            
000A54EA                            ; FM Voices
000A54EA                            Fart_Voices:
000A54EA                            ;	Voice $00
000A54EA                            ;	$39
000A54EA                            ;	$70, $32, $71, $01, 	$DF, $DF, $DF, $1F, 	$04, $00, $00, $00
000A54EA                            ;	$1F, $16, $00, $00, 	$E0, $00, $09, $FA, 	$12, $00, $00, $00
000A54EA                            	smpsVcAlgorithm     $01
000A54EA                            	smpsVcFeedback      $07
000A54EA                            	smpsVcUnusedBits    $00
000A54EA                            	smpsVcDetune        $00, $07, $03, $07
000A54EA                            	smpsVcCoarseFreq    $01, $01, $02, $00
000A54EA                            	smpsVcRateScale     $00, $03, $03, $03
000A54EA                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A54EA                            	smpsVcAmpMod        $00, $00, $00, $00
000A54EA                            	smpsVcDecayRate1    $00, $00, $00, $04
000A54EA                            	smpsVcDecayRate2    $00, $00, $16, $1F
000A54EA                            	smpsVcDecayLevel    $0F, $00, $00, $0E
000A54EA                            	smpsVcReleaseRate   $0A, $09, $00, $00
000A54EA 3970 3271 01DF DFDF 1F04+  	smpsVcTotalLevel    $00, $00, $00, $12
000A5503                            
000A5503                            ;	Voice $01
000A5503                            ;	$00
000A5503                            ;	$00, $00, $00, $00, 	$00, $00, $00, $00, 	$00, $00, $00, $00
000A5503                            ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$00, $00, $00, $00
000A5503                            	smpsVcAlgorithm     $00
000A5503                            	smpsVcFeedback      $00
000A5503                            	smpsVcUnusedBits    $00
000A5503                            	smpsVcDetune        $00, $00, $00, $00
000A5503                            	smpsVcCoarseFreq    $00, $00, $00, $00
000A5503                            	smpsVcRateScale     $00, $00, $00, $00
000A5503                            	smpsVcAttackRate    $00, $00, $00, $00
000A5503                            	smpsVcAmpMod        $00, $00, $00, $00
000A5503                            	smpsVcDecayRate1    $00, $00, $00, $00
000A5503                            	smpsVcDecayRate2    $00, $00, $00, $00
000A5503                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000A5503                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000A5503 0000 0000 0000 0000 0000+  	smpsVcTotalLevel    $00, $00, $00, $00
000A5503 0000 0000 0000 0000 0000+  	smpsVcTotalLevel    $00, $00, $00, $00
000A551C                            		even
000A551C                            SoundA6:	incbin	sound\soundA6.bin
000A554C                            		even
000A554C                            SoundA7:	incbin	sound\soundA7.bin
000A557C                            		even
000A557C                            SoundA8:	incbin	sound\soundA8.bin
000A55B0                            		even
000A55B0                            SoundA9:	incbin	sound\soundA9.bin
000A55C2                            		even
000A55C2                            SoundAA:	incbin	sound\soundAA.bin
000A5604                            		even
000A5604                            SoundAB:	incbin	sound\soundAB.bin
000A5624                            		even
000A5624                            SoundAC:	incbin	sound\soundAC.bin
000A5658                            		even
000A5658                            SoundAD:	incbin	sound\soundAD.bin
000A568E                            		even
000A568E                            SoundAE:	incbin	sound\soundAE.bin
000A56D8                            		even
000A56D8                            SoundAF:	incbin	sound\soundAF.bin
000A5706                            		even
000A5706                            SoundB0:	incbin	sound\soundB0.bin
000A5738                            		even
000A5738                            SoundB1:	incbin	sound\soundB1.bin
000A5764                            		even
000A5764                            SoundB2:	incbin	sound\soundB2.bin
000A57B4                            		even
000A57B4                            SoundB3:	incbin	sound\soundB3.bin
000A57FE                            		even
000A57FE                            SoundB4:	include	sound\soundB4.asm
000A57FE                            SndB4_Bumper_Header:
000A57FE =00000001                  smpsHeaderStartSong = 1
000A57FE 0000                       	smpsHeaderVoice     SndB4_Bumper_Voices
000A5800 01                         	smpsHeaderTempoSFX  $01
000A5801 03                         	smpsHeaderChanSFX   $03
000A5802                            
000A5814                            
000A5814                            ; FM5 Data
000A5814                            SndB4_Bumper_FM5:
000A5816 F600 00                    	smpsJump            SndB4_Bumper_Jump00
000A5819                            
000A5819                            ; FM4 Data
000A5819                            SndB4_Bumper_FM4:
000A5819 F2                         	smpsStop
000A581A                            
000A581A                            SndB4_Bumper_Jump00:
000A581A A020                       	dc.b	nG2, $20
000A581C F2                         	smpsStop
000A581D                            
000A581D                            ; FM3 Data
000A581D                            SndB4_Bumper_FM3:
000A581D F2                         	smpsStop
000A581E                            
000A581E                            SndB4_Bumper_Voices:
000A581E                            ;	Voice $00
000A581E                            ;	$32
000A581E                            ;	$04, $20, $70, $70, 	$1F, $1F, $1F, $1F, 	$09, $00, $00, $08
000A581E                            ;	$09, $00, $00, $0B, 	$00, $00, $00, $0F, 	$0C, $00, $30, $00
000A581E                            	smpsVcAlgorithm     $02
000A581E                            	smpsVcFeedback      $06
000A581E                            	smpsVcUnusedBits    $00
000A581E                            	smpsVcDetune        $07, $07, $02, $00
000A581E                            	smpsVcCoarseFreq    $00, $00, $00, $04
000A581E                            	smpsVcRateScale     $00, $00, $00, $00
000A581E                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A581E                            	smpsVcAmpMod        $00, $00, $00, $00
000A581E                            	smpsVcDecayRate1    $08, $00, $00, $09
000A581E                            	smpsVcDecayRate2    $0B, $00, $00, $09
000A581E                            	smpsVcDecayLevel    $00, $00, $00, $00
000A581E                            	smpsVcReleaseRate   $0F, $00, $00, $00
000A581E 3204 2070 701F 1F1F 1F09+  	smpsVcTotalLevel    $00, $30, $00, $0C
000A581E 3204 2070 701F 1F1F 1F09+  	smpsVcTotalLevel    $00, $30, $00, $0C
000A5838 00                         		even
000A5838                            SoundB5:	incbin	sound\soundB5.bin
000A5856 00                         		even
000A5856                            SoundB6:	incbin	sound\soundB6.bin
000A5874                            		even
000A5874                            SoundB7:	incbin	sound\soundB7.bin
000A58B0                            		even
000A58B0                            SoundB8:	incbin	sound\soundB8.bin
000A58CE                            		even
000A58CE                            SoundB9:	incbin	sound\soundB9.bin
000A5932                            		even
000A5932                            SoundBA:	incbin	sound\soundBA.bin
000A595A                            		even
000A595A                            SoundBB:	incbin	sound\soundBB.bin
000A5986                            		even
000A5986                            SoundBC:	incbin	sound\soundBC.bin
000A59C8                            		even
000A59C8                            SoundBD:	incbin	sound\soundBD.bin
000A5A1C                            		even
000A5A1C                            SoundBE:	incbin	sound\soundBE.bin
000A5A56                            		even
000A5A56                            SoundBF:	incbin	sound\soundBF.bin
000A5AC8                            		even
000A5AC8                            SoundC0:	incbin	sound\soundC0.bin
000A5AF6                            		even
000A5AF6                            SoundC1:	incbin	sound\soundC1.bin
000A5B50                            		even
000A5B50                            SoundC2:	incbin	sound\soundC2.bin
000A5B7A                            		even
000A5B7A                            SoundC3:	incbin	sound\soundC3.bin
000A5BF4                            		even
000A5BF4                            SoundC4:	incbin	sound\soundC4.bin
000A5CF2                            		even
000A5CF2                            SoundC5:	incbin	sound\soundC5.bin
000A5D5A                            		even
000A5D5A                            SoundC6:	incbin	sound\soundC6.bin
000A5D9C                            		even
000A5D9C                            SoundC7:	incbin	sound\soundC7.bin
000A5DCA                            		even
000A5DCA                            SoundC8:	incbin	sound\soundC8.bin
000A5DDC                            		even
000A5DDC                            SoundC9:	incbin	sound\soundC9.bin
000A5E0A                            		even
000A5E0A                            SoundCA:	incbin	sound\soundCA.bin
000A5E38                            		even
000A5E38                            SoundCB:	incbin	sound\soundCB.bin
000A5E84                            		even
000A5E84                            SoundCC:	incbin	sound\C9.ssf
000A5EB2                            		even
000A5EB2                            SoundCD:	incbin	sound\soundCD.bin
000A5EDE                            		even
000A5EDE                            SoundCE:	incbin	sound\soundCE.bin
000A5EFC 00                         		even
000A5EFC                            SoundCF:	incbin	sound\soundCF.bin
000A5F34                            		even
000A5F34                            SoundD0:	incbin	sound\soundD0.bin
000A5F6E                            		even
000A5F6E                            SegaPCM:	incbin	sound\segapcm.bin
000C00C4                            SegaPCM_end:	even
000C00C4                            
000C00C4                            IdiotPCM:	incbin	sound\youare.bin
000CA196 00                         IdiotPCM_end:	even
000CA196                            
000CA196                            Minecraft:	include	minecraft\code\main.asm
000CA196                            ; Minecraft: Very Legacy Console Edition
000CA196                            ; Main file
000CA196                            
000CA196                            	include	minecraft\code\variables.asm
000CA196                            ; Minecraft: Very Legacy Console Edition
000CA196                            ; Variable Definitions
000CA196                            
000CA196 =00000040                  MAP_HEIGHT	equ	64
000CA196 =00000100                  MAP_WIDTH	equ	256
000CA196                            
000CA196                            		rsset	$FF0000
000CA196 =00FF0000                  mapWallBlocks	rs.b	MAP_HEIGHT*MAP_WIDTH	; wall layer layout data
000CA196 =00FF4000                  mapCollBlocks	rs.b	MAP_HEIGHT*MAP_WIDTH	; collision layer layout data
000CA196                            
000CA196                            		rsset	$FFFF8000
000CA196 =FFFF8000                  planeBuffer	rs.w	29*64			; foreground plane buffer
000CA196                            
000CA196 =FFFF8E80                  camXPosFG	rs.w	1			; camera foreground layout x position
000CA196 =FFFF8E82                  camYposFG	rs.w	1			; camera foreground layout y position
000CA196 =FFFF8E84                  camXPosBG	rs.w	1			; camera background layout x position
000CA196 =FFFF8E86                  camYposBG	rs.w	1			; camera background layout y position
000CA196 =FFFF8E86                  camYposBG	rs.w	1			; camera background layout y position
000CA196                            
000CA196                            MC_Init:
000CA196 007C 0700                  		ori	#$700,sr		; disables CPU interrupts
000CA19A 4DF9 00C0 0004             		lea	($C00004).l,a6	;	; load the address of the VDP control port into a6
000CA1A0                            
000CA1A0 3CBC 8134                  		move.w	#$8134,(a6)		; disable display
000CA1A4 6100 0000                  		bsr.w	MC_ClearScreen		; clear VRAM, CRAM, and VSRAM
000CA1A8 6100 0000                  		bsr.w	MC_LoadPalette		; load in the palette
000CA1AC 3CBC 8174                  		move.w	#$8174,(a6)		; enable display
000CA1B0                            
000CA1B0                            
000CA1B0                            
000CA1B0 6000 FFFE                  		bra.w	*			; spin infinitely
000CA1B4                            
000CA1B4                            ; ===========================================================================
000CA1B4                            ; ---------------------------------------------------------------------------
000CA1B4                            ; Clear The Screen
000CA1B4                            ; ---------------------------------------------------------------------------
000CA1B4                            MC_ClearScreen:
000CA1B4 3CBC 8F01                  		move.w	#$8F01,(a6)		; set auto-incremement size to byte
000CA1B8                            
000CA1B8 2CBC 94FF 93FF             		move.l	#$94FF93FF,(a6)		; clear the VRAM
000CA1BE 3CBC 9780                  		move.w	#$9780,(a6)		; ^
000CA1C2 2CBC 4000 0080             		move.l	#$40000080,(a6)		; ^
000CA1C8 3D7C 0000 FFFC             		move.w	#0,-4(a6)		; ^
000CA1CE                            
000CA1CE 44D6                       .waitVRAMClr:	move.w	(a6),ccr		; is a DMA in progress?
000CA1D0 69FC                       		bvs.s	.waitVRAMClr		; if so, loop until DMA is complete
000CA1D2                            
000CA1D2 2CBC 9400 937F             		move.l	#$9400937F,(a6)		; clear the CRAM
000CA1D8 3CBC 9780                  		move.w	#$9780,(a6)		; ^
000CA1DC 2CBC C000 0080             		move.l	#$C0000080,(a6)		; ^
000CA1E2 3D7C 0000 FFFC             		move.w	#0,-4(a6)		; ^
000CA1E8                            
000CA1E8 44D6                       .waitCRAMClr:	move.w	(a6),ccr		; is a DMA in progress?
000CA1EA 69FC                       		bvs.s	.waitCRAMClr		; if so, loop until DMA is complete
000CA1EC                            
000CA1EC 2CBC 9400 935F             		move.l	#$9400935F,(a6)		; clear the VSRAM
000CA1F2 3CBC 9780                  		move.w	#$9780,(a6)		; ^
000CA1F6 2CBC 4000 0090             		move.l	#$40000090,(a6)		; ^
000CA1FC 3D7C 0000 FFFC             		move.w	#0,-4(a6)		; ^
000CA202                            
000CA202 44D6                       .waitVSRAMClr:	move.w	(a6),ccr		; is a DMA in progress?
000CA204 69FC                       		bvs.s	.waitVSRAMClr		; if so, loop until DMA is complete
000CA206                            
000CA206 3CBC 8F02                  		move.w	#$8F02,(a6)		; set auto-incremement size to word
000CA20A 4E75                       		rts				; return
000CA20C                            ; ---------------------------------------------------------------------------
000CA20C                            
000CA20C                            ; ===========================================================================
000CA20C                            ; ---------------------------------------------------------------------------
000CA20C                            ; Load The Palette
000CA20C                            ; ---------------------------------------------------------------------------
000CA20C                            MC_LoadPalette:
000CA20C 44D6                       		move.w	(a6),ccr		; is v-blank active?
000CA20E 6AFC                       		bpl.s	MC_LoadPalette		; if not, wait for it to start
000CA210                            
000CA210                            .updatePalette:
000CA210 2CBC 9400 9340             		move.l	#$94009340,(a6)		; set the DMA transfer size (64 colors)
000CA216                            		
000CA216 4BFA 0000                  		lea	MC_Palette(pc),a5	; load the base address of the palette data (pc relative)
000CA21A 200D                       		move.l	a5,d0			; move the address to a data register so we can modify it
000CA21C E288                       		lsr.l	#1,d0			; divide by two
000CA21E                            
000CA21E 323C 9500                  		move.w	#$9500,d1		; set the low byte of the transfer source address
000CA222 1200                       		move.b	d0,d1			; ^
000CA224 3C81                       		move.w	d1,(a6)			; ^
000CA226                            
000CA226 E088                       		lsr.l	#8,d0			; set the middle byte of the transfer source address
000CA228 323C 9600                  		move.w	#$9600,d1		; ^
000CA22C 1200                       		move.b	d0,d1			; ^
000CA22E 3C81                       		move.w	d1,(a6)			; ^
000CA230                            
000CA230 E088                       		lsr.l	#8,d0			; set the high byte of the transfer source address
000CA232 323C 9700                  		move.w	#$9700,d1		; ^
000CA236 1200                       		move.b	d0,d1			; ^
000CA238 3C81                       		move.w	d1,(a6)			; ^
000CA23A                            
000CA23A 2CBC C000 0080             		move.l	#$C0000080,(a6)		; set the destination palette index and begin the transfer
000CA240                            
000CA240                            .waitForScan:
000CA240                            	;	move.w	(a6),ccr		; is v-blank still active?
000CA240                            	;	bmi.s	.waitForScan		; if so, wait for active scan before returning
000CA240 4E75                       		rts				; return
000CA242                            ; ---------------------------------------------------------------------------
000CA242                            
000CA242                            MC_Palette:
000CA242 0E86 08AE 068E 046C 0246+  	dc.w	$E86, $8AE, $68E, $46C, $246, $024, $CC0, $AA0, $C46, $824, $EEE, $444, $222, $000, $000, $000
000CA262 0000 0CCC 0AAA 0888 0666+  	dc.w	$000, $CCC, $AAA, $888, $666, $444, $222, $4EE, $6AE, $48C, $26A, $048, $026, $4E6, $2C4, $080
000CA282 0EEE 0EEE 0EEE 0EEE 0EEE+  	dc.w	$EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE
000CA2A2 0EEE 0EEE 0EEE 0EEE 0EEE+  	dc.w	$EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE
000CA2A2 0EEE 0EEE 0EEE 0EEE 0EEE+  	dc.w	$EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE
000CA2C2                            ; end of 'ROM'
000CA2C2                            EndOfRom:
000CA2C2                            
000CA2C2                            
