00000000                            ; /=========================================================================\
00000000                            ; ยบ	This file is generated by The Interactive Disassembler (IDA)	    ยบ
00000000                            ; ยบ	Copyright (c) 2003 by DataRescue sa/nv,	<ida@datarescue.com>	    ยบ
00000000                            ; \=========================================================================/
00000000                            ;
00000000                            ; Disassembly created by Hivebrain
00000000                            ; thanks to drx and Stealth
00000000                            
00000000                            ; Processor:	    68000
00000000                            ; Target Assembler: 680x0 Assembler in MRI compatible mode
00000000                            ; This file should be compiled with "as	-M"
00000000                            
00000000                            ; ===========================================================================
00000000                            align macro
00000000                            	cnop 0,\1
00000000                            	endm
00000000                            		include	"sound/smps2asm_inc.asm"
00000000                            ; =============================================================================================
00000000                            ; Created by Flamewing, based on S1SMPS2ASM version 1.1 by Marc Gordon (AKA Cinossu)
00000000                            ; =============================================================================================
00000000 =00000005                  SonicDriverVer:	equ	5
00000000                            align0	macro	val
00000000                            	cnop	0,\val
00000000                                endm
00000000                            	
00000000                            smpsWeirdD1LRR macro
00000000                            		dc.b	$F9
00000000                            	endm
00000000                            nMaxPSG		EQU nA5
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Standard Octave Pitch Equates
00000000 =FFFFFF88                  smpsPitch10lo:	EQU -120	; $88
00000000 =FFFFFF94                  smpsPitch09lo:	EQU -108	; $94
00000000 =FFFFFFA0                  smpsPitch08lo:	EQU  -96	; $A0
00000000 =FFFFFFAC                  smpsPitch07lo:	EQU  -84	; $AC
00000000 =FFFFFFB8                  smpsPitch06lo:	EQU  -72	; $B8
00000000 =FFFFFFC4                  smpsPitch05lo:	EQU  -60	; $C4
00000000 =FFFFFFD0                  smpsPitch04lo:	EQU  -48	; $D0
00000000 =FFFFFFDC                  smpsPitch03lo:	EQU  -36	; $DC
00000000 =FFFFFFE8                  smpsPitch02lo:	EQU  -24	; $E8
00000000 =FFFFFFF4                  smpsPitch01lo:	EQU  -12	; $F4
00000000 =00000000                  smpsPitch00:	EQU    0	; $00
00000000 =0000000C                  smpsPitch01hi:	EQU  +12	; $0C
00000000 =00000018                  smpsPitch02hi:	EQU  +24	; $18
00000000 =00000024                  smpsPitch03hi:	EQU  +36	; $24
00000000 =00000030                  smpsPitch04hi:	EQU  +48	; $30
00000000 =0000003C                  smpsPitch05hi:	EQU  +60	; $3C
00000000 =00000048                  smpsPitch06hi:	EQU  +72	; $48
00000000 =00000054                  smpsPitch07hi:	EQU  +84	; $54
00000000 =00000060                  smpsPitch08hi:	EQU  +96	; $60
00000000 =0000006C                  smpsPitch09hi:	EQU +108	; $6C
00000000 =00000078                  smpsPitch10hi:	EQU +120	; $78
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Note Equates
00000000 =00000080                  nRst:	EQU $80		; $80
00000000 =00000081                  nC0:	EQU $81		; $81
00000000 =00000082                  nCs0:	EQU nC0+1	; $82
00000000 =00000083                  nD0:	EQU nCs0+1	; $83
00000000 =00000084                  nEb0:	EQU nD0+1	; $84
00000000 =00000085                  nE0:	EQU nEb0+1	; $85
00000000 =00000086                  nF0:	EQU nE0+1	; $86
00000000 =00000087                  nFs0:	EQU nF0+1	; $87
00000000 =00000088                  nG0:	EQU nFs0+1	; $88
00000000 =00000089                  nAb0:	EQU nG0+1	; $89
00000000 =0000008A                  nA0:	EQU nAb0+1	; $8A
00000000 =0000008B                  nBb0:	EQU nA0+1	; $8B
00000000 =0000008C                  nB0:	EQU nBb0+1	; $8C
00000000 =0000008D                  nC1:	EQU nB0+1	; $8D
00000000 =0000008E                  nCs1:	EQU nC1+1	; $8E
00000000 =0000008F                  nD1:	EQU nCs1+1	; $8F
00000000 =00000090                  nEb1:	EQU nD1+1	; $90
00000000 =00000091                  nE1:	EQU nEb1+1	; $91
00000000 =00000092                  nF1:	EQU nE1+1	; $92
00000000 =00000093                  nFs1:	EQU nF1+1	; $93
00000000 =00000094                  nG1:	EQU nFs1+1	; $94
00000000 =00000095                  nAb1:	EQU nG1+1	; $95
00000000 =00000096                  nA1:	EQU nAb1+1	; $96
00000000 =00000097                  nBb1:	EQU nA1+1	; $97
00000000 =00000098                  nB1:	EQU nBb1+1	; $98
00000000 =00000099                  nC2:	EQU nB1+1	; $99
00000000 =0000009A                  nCs2:	EQU nC2+1	; $9A
00000000 =0000009B                  nD2:	EQU nCs2+1	; $9B
00000000 =0000009C                  nEb2:	EQU nD2+1	; $9C
00000000 =0000009D                  nE2:	EQU nEb2+1	; $9D
00000000 =0000009E                  nF2:	EQU nE2+1	; $9E
00000000 =0000009F                  nFs2:	EQU nF2+1	; $9F
00000000 =000000A0                  nG2:	EQU nFs2+1	; $A0
00000000 =000000A1                  nAb2:	EQU nG2+1	; $A1
00000000 =000000A2                  nA2:	EQU nAb2+1	; $A2
00000000 =000000A3                  nBb2:	EQU nA2+1	; $A3
00000000 =000000A4                  nB2:	EQU nBb2+1	; $A4
00000000 =000000A5                  nC3:	EQU nB2+1	; $A5
00000000 =000000A6                  nCs3:	EQU nC3+1	; $A6
00000000 =000000A7                  nD3:	EQU nCs3+1	; $A7
00000000 =000000A8                  nEb3:	EQU nD3+1	; $A8
00000000 =000000A9                  nE3:	EQU nEb3+1	; $A9
00000000 =000000AA                  nF3:	EQU nE3+1	; $AA
00000000 =000000AB                  nFs3:	EQU nF3+1	; $AB
00000000 =000000AC                  nG3:	EQU nFs3+1	; $AC
00000000 =000000AD                  nAb3:	EQU nG3+1	; $AD
00000000 =000000AE                  nA3:	EQU nAb3+1	; $AE
00000000 =000000AF                  nBb3:	EQU nA3+1	; $AF
00000000 =000000B0                  nB3:	EQU nBb3+1	; $B0
00000000 =000000B1                  nC4:	EQU nB3+1	; $B1
00000000 =000000B2                  nCs4:	EQU nC4+1	; $B2
00000000 =000000B3                  nD4:	EQU nCs4+1	; $B3
00000000 =000000B4                  nEb4:	EQU nD4+1	; $B4
00000000 =000000B5                  nE4:	EQU nEb4+1	; $B5
00000000 =000000B6                  nF4:	EQU nE4+1	; $B6
00000000 =000000B7                  nFs4:	EQU nF4+1	; $B7
00000000 =000000B8                  nG4:	EQU nFs4+1	; $B8
00000000 =000000B9                  nAb4:	EQU nG4+1	; $B9
00000000 =000000BA                  nA4:	EQU nAb4+1	; $BA
00000000 =000000BB                  nBb4:	EQU nA4+1	; $BB
00000000 =000000BC                  nB4:	EQU nBb4+1	; $BC
00000000 =000000BD                  nC5:	EQU nB4+1	; $BD
00000000 =000000BE                  nCs5:	EQU nC5+1	; $BE
00000000 =000000BF                  nD5:	EQU nCs5+1	; $BF
00000000 =000000C0                  nEb5:	EQU nD5+1	; $C0
00000000 =000000C1                  nE5:	EQU nEb5+1	; $C1
00000000 =000000C2                  nF5:	EQU nE5+1	; $C2
00000000 =000000C3                  nFs5:	EQU nF5+1	; $C3
00000000 =000000C4                  nG5:	EQU nFs5+1	; $C4
00000000 =000000C5                  nAb5:	EQU nG5+1	; $C5
00000000 =000000C6                  nA5:	EQU nAb5+1	; $C6
00000000 =000000C7                  nBb5:	EQU nA5+1	; $C7
00000000 =000000C8                  nB5:	EQU nBb5+1	; $C8
00000000 =000000C9                  nC6:	EQU nB5+1	; $C9
00000000 =000000CA                  nCs6:	EQU nC6+1	; $CA
00000000 =000000CB                  nD6:	EQU nCs6+1	; $CB
00000000 =000000CC                  nEb6:	EQU nD6+1	; $CC
00000000 =000000CD                  nE6:	EQU nEb6+1	; $CD
00000000 =000000CE                  nF6:	EQU nE6+1	; $CE
00000000 =000000CF                  nFs6:	EQU nF6+1	; $CF
00000000 =000000D0                  nG6:	EQU nFs6+1	; $D0
00000000 =000000D1                  nAb6:	EQU nG6+1	; $D1
00000000 =000000D2                  nA6:	EQU nAb6+1	; $D2
00000000 =000000D3                  nBb6:	EQU nA6+1	; $D3
00000000 =000000D4                  nB6:	EQU nBb6+1	; $D4
00000000 =000000D5                  nC7:	EQU nB6+1	; $D5
00000000 =000000D6                  nCs7:	EQU nC7+1	; $D6
00000000 =000000D7                  nD7:	EQU nCs7+1	; $D7
00000000 =000000D8                  nEb7:	EQU nD7+1	; $D8
00000000 =000000D9                  nE7:	EQU nEb7+1	; $D9
00000000 =000000DA                  nF7:	EQU nE7+1	; $DA
00000000 =000000DB                  nFs7:	EQU nF7+1	; $DB
00000000 =000000DC                  nG7:	EQU nFs7+1	; $DC
00000000 =000000DD                  nAb7:	EQU nG7+1	; $DD
00000000 =000000DE                  nA7:	EQU nAb7+1	; $DE
00000000 =000000DF                  nBb7:	EQU nA7+1	; $DF
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG envelope equates
00000000 =00000000                  fTone_00:	EQU $00
00000000 =00000001                  fTone_01:	EQU fTone_00+1
00000000 =00000002                  fTone_02:	EQU fTone_01+1
00000000 =00000003                  fTone_03:	EQU fTone_02+1
00000000 =00000004                  fTone_04:	EQU fTone_03+1
00000000 =00000005                  fTone_05:	EQU fTone_04+1
00000000 =00000006                  fTone_06:	EQU fTone_05+1
00000000 =00000007                  fTone_07:	EQU fTone_06+1
00000000 =00000008                  fTone_08:	EQU fTone_07+1
00000000 =00000009                  fTone_09:	EQU fTone_08+1
00000000 =0000000A                  fTone_0A:	EQU fTone_09+1
00000000 =0000000B                  fTone_0B:	EQU fTone_0A+1
00000000 =0000000C                  fTone_0C:	EQU fTone_0B+1
00000000 =0000000D                  fTone_0D:	EQU fTone_0C+1
00000000 =0000000E                  fTone_0E:	EQU fTone_0D+1
00000000 =0000000F                  fTone_0F:	EQU fTone_0E+1
00000000 =00000010                  fTone_10:	EQU fTone_0F+1
00000000 =00000011                  fTone_11:	EQU fTone_10+1
00000000 =00000012                  fTone_12:	EQU fTone_11+1
00000000 =00000013                  fTone_13:	EQU fTone_12+1
00000000 =00000014                  fTone_14:	EQU fTone_13+1
00000000 =00000015                  fTone_15:	EQU fTone_14+1
00000000 =00000016                  fTone_16:	EQU fTone_15+1
00000000 =00000017                  fTone_17:	EQU fTone_16+1
00000000 =00000018                  fTone_18:	EQU fTone_17+1
00000000 =00000019                  fTone_19:	EQU fTone_18+1
00000000 =0000001A                  fTone_1A:	EQU fTone_19+1
00000000 =0000001B                  fTone_1B:	EQU fTone_1A+1
00000000 =0000001C                  fTone_1C:	EQU fTone_1B+1
00000000 =0000001D                  fTone_1D:	EQU fTone_1C+1
00000000 =0000001E                  fTone_1E:	EQU fTone_1D+1
00000000 =0000001F                  fTone_1F:	EQU fTone_1E+1
00000000 =00000020                  fTone_20:	EQU fTone_1F+1
00000000 =00000021                  fTone_21:	EQU fTone_20+1
00000000 =00000022                  fTone_22:	EQU fTone_21+1
00000000 =00000023                  fTone_23:	EQU fTone_22+1
00000000 =00000024                  fTone_24:	EQU fTone_23+1
00000000 =00000025                  fTone_25:	EQU fTone_24+1
00000000 =00000026                  fTone_26:	EQU fTone_25+1
00000000 =00000027                  fTone_27:	EQU fTone_26+1
00000000 =00000028                  fTone_28:	EQU fTone_27+1
00000000 =00000029                  fTone_29:	EQU fTone_28+1
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; DAC Equates
00000000 =00000081                  dKick			EQU	$81
00000000 =00000082                  dSnare			EQU	$82
00000000 =00000082                  dMuffledSnare			EQU	$82
00000000 =00000083                  dTimpani		EQU	$83
00000000 =00000088                  dHiTimpani		EQU	$88
00000000 =00000089                  dMidTimpani		EQU	$89
00000000 =0000008A                  dLowTimpani		EQU	$8A
00000000 =0000008B                  dVLowTimpani		EQU	$8B
00000000 =00000083                  dCrashCymbal	EQU $83
00000000 =00000081                  dKickS3			EQU	$81
00000000 =00000082                  dSnareS3			EQU	$82
00000000 =0000008A                  delectriclowtom	EQU	$8A
00000000 =0000008B                  delectricfloortom	EQU	$8B
00000000 =00000088                  delectrichightom	EQU	$88
00000000 =00000089                  delectricmidtom	EQU	$89
00000000 =00000082                  dClapS3			EQU	$82
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Channel IDs for SFX
00000000 =00000080                  cPSG1				EQU $80
00000000 =000000A0                  cPSG2				EQU $A0
00000000 =000000C0                  cPSG3				EQU $C0
00000000 =000000E0                  cNoise				EQU $E0	; Not for use in S3/S&K/S3D
00000000 =00000002                  cFM3				EQU $02
00000000 =00000004                  cFM4				EQU $04
00000000 =00000005                  cFM5				EQU $05
00000000 =00000006                  cFM6				EQU $06	; Only in S3/S&K/S3D, overrides DAC
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ;---------------------------------------------
00000000                            ; SMPS F_Tone Equates 
00000000                            ;---------------------------------------------	
00000000 =00000000                  fTone_00:	EQU $00
00000000 =00000001                  fTone_01:	EQU fTone_00+1
00000000 =00000002                  fTone_02:	EQU fTone_01+1
00000000 =00000003                  fTone_03:	EQU fTone_02+1
00000000 =00000004                  fTone_04:	EQU fTone_03+1
00000000 =00000005                  fTone_05:	EQU fTone_04+1
00000000 =00000006                  fTone_06:	EQU fTone_05+1
00000000 =00000007                  fTone_07:	EQU fTone_06+1
00000000 =00000008                  fTone_08:	EQU fTone_07+1
00000000 =00000009                  fTone_09:	EQU fTone_08+1
00000000 =0000000A                  fTone_0A:	EQU fTone_09+1
00000000 =0000000B                  fTone_0B:	EQU fTone_0A+1
00000000 =0000000C                  fTone_0C:	EQU fTone_0B+1
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG conversion to S3/S&K/S3D drivers require a tone shift of 12 semi-tones.
00000000                            conv0To256  macro val 
00000000                            	if val<$01
00000000                            		dc.b (256-val+$FF)&$FF
00000000                            	else	
00000000                            		dc.b (256-val)&$FF	
00000000                            	endc
00000000                            	endm
00000000                            SMPSModFix:	macro steps
00000000                            	dc.b (steps/(speed-1))
00000000                            	endm	
00000000 =0000000C                  psgdelta	EQU $0C
00000000                            PSGPitch macro pitch
00000000                            		dc.b	(pitch+psgdelta)&$FF
00000000                            	endm
00000000                            
00000000                            s1TempotoS2 macro tmod
00000000                            	if tmod<$01
00000000                            		dc.b ((($FF+tmod-1)*256+($FF+tmod/2))/$FF+tmod)&$FF 	
00000000                            	else
00000000                            		dc.b (((tmod-1)*256+(tmod/2))/tmod)&$FF
00000000                            	endc
00000000                            	endm
00000000                            	
00000000                            s3TempotoS2 macro tmod
00000000                            	if tmod<$01
00000000                            		dc.b (256-tmod+$FF)&$FF
00000000                            	else	
00000000                            		dc.b (256-tmod)&$FF	
00000000                            	endc
00000000                            	endm
00000000                            	
00000000                            convertMainTempoMod	macro tmod
00000000                            	if 		smpsHeaderStartSong=2
00000000                            		dc.b tmod
00000000                            	elseif 		smpsHeaderStartSong<2
00000000                            		s1TempotoS2 	\tmod
00000000                            	elseif	smpsHeaderStartSong>2
00000000                            		s3TempotoS2  	\tmod
00000000                            	endc
00000000                            	endm	
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Header Macros
00000000 =00000000                  smpsHeaderStartSong = 0
00000000                            
00000000                            smpsHeaderVoiceNull macro
00000000                            	dc.w	$0000
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoice macro loc
00000000                            songStart set *
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location as S3's Universal Voice Bank
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoiceUVB macro
00000000                            	if songStart<>*
00000000                            		fail "Missing smpsHeaderStartSong or smpsHeaderStartSongConvert"
00000000                            	endc
00000000                            	;dc.w	little_endian(z80_UniVoiceBank)
00000000                            	z80_ptr	z80_UniVoiceBank
00000000                            	endm
00000000                            
00000000                            ; Header macros for music (not for SFX)
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChan macro fm,psg
00000000                            	dc.b	fm,psg
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempo macro tdiv,tmod
00000000                            	dc.b	tdiv,tmod
00000000                            	endm
00000000                            
00000000                            ; Header - Set up DAC Channel
00000000                            smpsHeaderDAC macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	if narg>=2
00000000                            		dc.b	\pitch
00000000                            	else
00000000                            		dc.b	$00
00000000                            	endc
00000000                            	if narg>=3
00000000                            		dc.b	\vol
00000000                            	else
00000000                            		dc.b	$00
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderFM macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol
00000000                            	endm
00000000                            
00000000                            ; Header - Set up PSG Channel
00000000                            smpsHeaderPSG macro loc,pitch,vol,mod,voice
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol,mod,voice
00000000                            	endm
00000000                            
00000000                            ; Header macros for SFX (not for music)
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempoSFX macro div
00000000                            	dc.b	div
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChanSFX macro chan
00000000                            	dc.b	chan
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderSFXChannel macro chanid,loc,pitch,vol
00000000                            	if (chanid=cNoise)
00000000                            		fail "Using channel ID of cNoise ($E0) in Sonic 3 driver is dangerous. Fix the song so that it turns into a noise channel instead."
00000000                            	endc
00000000                            	dc.b	$80,chanid
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch, vol
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Co-ord Flag Macros and Equates
00000000                            ; E0xx - Panning, AMS, FMS
00000000                            smpsPan macro direction,amsfms
00000000                            panNone set $00
00000000                            panRight set $40
00000000                            panLeft set $80
00000000                            panCentre set $C0
00000000                            panCenter set $C0 ; silly Americans :U
00000000                            	dc.b $E0,direction+amsfms
00000000                            	endm
00000000                            
00000000                            ; E1xx - Set channel frequency displacement to xx
00000000                            smpsAlterNote macro val
00000000                            	dc.b	$E1,val
00000000                            	endm
00000000                            
00000000                            ; E2xx - Useless
00000000                            smpsNop macro val
00000000                            	dc.b	$E2,val
00000000                            	endm
00000000                            ; Return (used after smpsCall)
00000000                            smpsReturn macro val
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Fade in previous song (ie. 1-Up)
00000000                            smpsFade macro val
00000000                            	dc.b	$E4
00000000                            	endm
00000000                            
00000000                            ; E5xx - Set channel tempo divider to xx
00000000                            smpsChanTempoDiv macro val
00000000                            	dc.b	$E5,val
00000000                            ;	endc
00000000                            	endm
00000000                            
00000000                            ; E6xx - Alter Volume by xx
00000000                            smpsAlterVol macro val
00000000                            	dc.b	$E6,val
00000000                            	endm
00000000                            
00000000                            sVol  macro val
00000000                            	$E6,val
00000000                            	endm
00000000                            ; E7 - Prevent attack of next note
00000000 =000000E7                  smpsNoAttack	EQU $E7
00000000                            
00000000                            ; E8xx - Set note fill to xx
00000000                            smpsNoteFill macro val
00000000                            		dc.b	$E8,val
00000000                            ;	endc
00000000                            	endm
00000000                            smpsAlterPitch 	macro	value
00000000                            	dc.b $E9,value
00000000                            	endm
00000000                            
00000000                            
00000000                            ; Set music tempo modifier to xx
00000000                            smpsSetTempoMod macro mod
00000000                            	dc.b	$EA,mod
00000000                            	endm
00000000                            
00000000                            ; Set music tempo divider to xx
00000000                            smpsSetTempoDiv macro val
00000000                            	dc.b	$EB,val
00000000                            	endm
00000000                            
00000000                            ; ECxx - Set Volume to xx
00000000                            smpsSetVol macro val
00000000                            	dc.b	$EC,val
00000000                            	endm
00000000                            
00000000                            ; Works on all drivers
00000000                            smpsPSGAlterVol macro vol
00000000                            	dc.b	$EC,vol
00000000                            	endm
00000000                            
00000000                            ; Clears pushing sound flag in S1
00000000                            smpsClearPush macro	
00000000                            	dc.b	$ED
00000000                            	endm
00000000                            
00000000                            ; Stops special SFX (S1 only) and restarts overridden music track
00000000                            smpsStopSpecial macro
00000000                            		dc.b	$EE
00000000                            	endm
00000000                            
00000000                            ; EFxx[yy] - Set Voice of FM channel to xx; xx < 0 means yy present
00000000                            smpsSetvoice macro voice,songID
00000000                            	if narg<=1
00000000                            		dc.b	$EF,voice
00000000                            	else
00000000                            		dc.b	$EF,voice|$80,songID+$81
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; F0wwxxyyzz - Modulation - ww: wait time - xx: modulation speed - yy: change per step - zz: number of steps
00000000                            smpsModSet macro wait,speed,change,step
00000000                            	dc.b	$F0
00000000                            	dc.b	wait,speed,change,step
00000000                            	endm
00000000                            
00000000                            ; Turn on Modulation
00000000                            smpsModOn macro
00000000                            	dc.b	$F1
00000000                            	endm
00000000                            
00000000                            ; F2 - End of channel
00000000                            smpsStop macro
00000000                            	dc.b	$F2
00000000                            	endm
00000000                            
00000000                            ; F3xx - PSG waveform to xx
00000000                            smpsPSGform macro form
00000000                            	dc.b	$F3,form
00000000                            	endm
00000000                            
00000000                            ; Turn off Modulation
00000000                            smpsModOff macro
00000000                            	dc.b	$F4
00000000                            	endm
00000000                            
00000000                            ; F5xx - PSG voice to xx
00000000                            smpsPSGvoice macro voice
00000000                            	dc.b	$F5,voice
00000000                            	endm
00000000                            
00000000                            ; F6xxxx - Jump to xxxx
00000000                            smpsJump macro loc
00000000                            	dc.b	$F6
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F7xxyyzzzz - Loop back to zzzz yy times, xx being the loop index for loop recursion fixing
00000000                            smpsLoop macro index,loops,loc
00000000                            	dc.b	$F7
00000000                            	dc.b	index,loops
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F8xxxx - Call pattern at xxxx, saving return point
00000000                            smpsCall macro loc
00000000                            	dc.b	$F8
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Alter Volume
00000000                            smpsFMAlterVol macro val1,val2
00000000                            	if narg<=1
00000000                            		dc.b	$E6,val1
00000000                            	else
00000000                            		dc.b	$E5,val1,val2
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; S3/S&K/S3D-only coordination flags
00000000                            ; Silences FM channel then stops as per smpsStop
00000000                            smpsStopFM macro
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Spindash Rev
00000000                            smpsSpindashRev macro
00000000                            	dc.b	$E9
00000000                            	endm
00000000                            	
00000000                            smpsPlayDACSample macro sample
00000000                            	dc.b	$EA,sample
00000000                            	endm
00000000                            	
00000000                            smpsConditionalJump macro index,loc
00000000                            	dc.b	$EB
00000000                            	dc.b	index
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Set note values to xx-$40
00000000                            smpsSetNote macro val
00000000                            	dc.b	$ED,val
00000000                            	endm
00000000                            
00000000                            smpsFMICommand macro reg,val
00000000                            	dc.b	$EE,reg,val
00000000                            	endm
00000000                            
00000000                            ; Set Modulation
00000000                            smpsModChange2 macro fmmod,psgmod
00000000                            	dc.b	$F1,fmmod,psgmod
00000000                            	endm
00000000                            
00000000                            ; Set Modulation
00000000                            smpsModChange macro val
00000000                            	dc.b	$F4,val
00000000                            	endm
00000000                            
00000000                            ; FCxxxx - Jump to xxxx
00000000                            smpsContinuousLoop macro loc
00000000                            	dc.b	$FC
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            smpsAlternateSMPS macro flag
00000000                            	dc.b	$FD,flag
00000000                            	endm
00000000                            
00000000                            smpsFM3SpecialMode macro ind1,ind2,ind3,ind4
00000000                            	dc.b	$FE,ind1,ind2,ind3,ind4
00000000                            	endm
00000000                            
00000000                            smpsPlaySound macro index
00000000                            	dc.b	$FF,$01,index
00000000                            	endm
00000000                            
00000000                            smpsHaltMusic macro flag
00000000                            	dc.b	$FF,$02,flag
00000000                            	endm
00000000                            
00000000                            smpsCopyData macro data,len
00000000                            	fail "Coord. Flag to copy data should not be used. Complain to Flamewing if any music uses it."
00000000                            	dc.b	$FF,$03
00000000                            	;dc.w	little_endian(data)
00000000                            	z80_ptr	data
00000000                            	dc.b	len
00000000                            	endm
00000000                            
00000000                            smpsSSGEG macro op1,op2,op3,op4
00000000                            	dc.b	$FF,$05,op1,op2,op3,op4
00000000                            	endm
00000000                            
00000000                            smpsFMFlutter macro tone,mask
00000000                            	dc.b	$FF,$06,tone,mask
00000000                            	endm
00000000                            
00000000                            smpsResetSpindashRev macro val
00000000                            	dc.b	$FF,$07
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Macros for FM instruments
00000000                            ; Voices - Feedback
00000000                            smpsVcFeedback macro val
00000000                            vcFeedback set \val
00000000                            	endm
00000000                            
00000000                            ; Voices - Algorithm
00000000                            smpsVcAlgorithm macro val
00000000                            vcAlgorithm set \val
00000000                            	endm
00000000                            
00000000                            smpsVcUnusedBits macro val
00000000                            vcUnusedBits set \val
00000000                            	endm
00000000                            
00000000                            ; Voices - Detune
00000000                            smpsVcDetune macro op1,op2,op3,op4
00000000                            vcDT1 set \op1
00000000                            vcDT2 set \op2
00000000                            vcDT3 set \op3
00000000                            vcDT4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Coarse-Frequency
00000000                            smpsVcCoarseFreq macro op1,op2,op3,op4
00000000                            vcCF1 set \op1
00000000                            vcCF2 set \op2
00000000                            vcCF3 set \op3
00000000                            vcCF4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Rate Scale
00000000                            smpsVcRateScale macro op1,op2,op3,op4
00000000                            vcRS1 set \op1
00000000                            vcRS2 set \op2
00000000                            vcRS3 set \op3
00000000                            vcRS4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Attack Rate
00000000                            smpsVcAttackRate macro op1,op2,op3,op4
00000000                            vcAR1 set \op1
00000000                            vcAR2 set \op2
00000000                            vcAR3 set \op3
00000000                            vcAR4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Amplitude Modulation
00000000                            smpsVcAmpMod macro op1,op2,op3,op4
00000000                            vcAM1 set \op1
00000000                            vcAM2 set \op2
00000000                            vcAM3 set \op3
00000000                            vcAM4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - First Decay Rate
00000000                            smpsVcDecayRate1 macro op1,op2,op3,op4
00000000                            vcD1R1 set \op1
00000000                            vcD1R2 set \op2
00000000                            vcD1R3 set \op3
00000000                            vcD1R4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Second Decay Rate
00000000                            smpsVcDecayRate2 macro op1,op2,op3,op4
00000000                            vcD2R1 set \op1
00000000                            vcD2R2 set \op2
00000000                            vcD2R3 set \op3
00000000                            vcD2R4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Decay Level
00000000                            smpsVcDecayLevel macro op1,op2,op3,op4
00000000                            vcDL1 set \op1
00000000                            vcDL2 set \op2
00000000                            vcDL3 set \op3
00000000                            vcDL4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Release Rate
00000000                            smpsVcReleaseRate macro op1,op2,op3,op4
00000000                            vcRR1 set \op1
00000000                            vcRR2 set \op2
00000000                            vcRR3 set \op3
00000000                            vcRR4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Total Level
00000000                            smpsVcTotalLevel macro op1,op2,op3,op4
00000000                            vcTL1 set \op1
00000000                            vcTL2 set \op2
00000000                            vcTL3 set \op3
00000000                            vcTL4 set \op4
00000000                            	dc.b	(vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
00000000                            ;   0     1     2     3     4     5     6     7
00000000                            ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
00000000                            vcTLMask4 set ((vcAlgorithm=7)<<7)
00000000                            vcTLMask3 set ((vcAlgorithm>=4)<<7)
00000000                            vcTLMask2 set ((vcAlgorithm>=5)<<7)
00000000                            vcTLMask1 set $80
00000000                            ;	dc.b	(vcDT4<<4)+vcCF4 ,(vcDT3<<4)+vcCF3 ,(vcDT2<<4)+vcCF2 ,(vcDT1<<4)+vcCF1
00000000                            ;	dc.b	(vcRS4<<6)+vcAR4 ,(vcRS3<<6)+vcAR3 ,(vcRS2<<6)+vcAR2 ,(vcRS1<<6)+vcAR1
00000000                            ;	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
00000000                            ;	dc.b	vcD2R4           ,vcD2R3           ,vcD2R2           ,vcD2R1
00000000                            ;	dc.b	(vcDL4<<4)+vcRR4 ,(vcDL3<<4)+vcRR3 ,(vcDL2<<4)+vcRR2 ,(vcDL1<<4)+vcRR1
00000000                            ;	dc.b	vcTL4|vcTLMask4  ,vcTL3|vcTLMask3  ,vcTL2|vcTLMask2  ,vcTL1|vcTLMask1
00000000                            	dc.b	(vcDT4<<4)+vcCF4,(vcDT3<<4)+vcCF3,(vcDT2<<4)+vcCF2,(vcDT1<<4)+vcCF1
00000000                            	dc.b	(vcRS4<<6)+vcAR4,(vcRS3<<6)+vcAR3,(vcRS2<<6)+vcAR2,(vcRS1<<6)+vcAR1
00000000                            	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
00000000                            	dc.b	vcD2R4,vcD2R3,vcD2R2,vcD2R1
00000000                            	dc.b	(vcDL4<<4)+vcRR4,(vcDL3<<4)+vcRR3,(vcDL2<<4)+vcRR2,(vcDL1<<4)+vcRR1
00000000                            	dc.b	vcTL4|vcTLMask4,vcTL3|vcTLMask3,vcTL2|vcTLMask2,vcTL1|vcTLMask1
00000000                            	endm
00000000                            
00000000                            
00000000                            StartOfRom:
00000000 00FF FE00 0000 0000 0000+  Vectors:	dc.l $FFFE00, EntryPoint, BusError, AddressError
00000010 0000 0000 0000 0000 0000+  		dc.l IllegalInstr, ZeroDivide, ChkInstr, TrapvInstr
00000020 0000 0000 0000 0000 0000+  		dc.l PrivilegeViol, Trace, Line1010Emu,	Line1111Emu
00000030 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000040 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000050 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000060 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorTrap, ErrorTrap,	ErrorTrap
00000070 0000 0000 0000 0000 0000+  		dc.l PalToCRAM,	ErrorTrap, loc_B10, ErrorTrap
00000080 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000090 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000A0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000B0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000C0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000D0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000E0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000F0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000100 5345 4741 204D 4547 4120+  Console:	dc.b 'SEGA MEGA DRIVE ' ; Hardware system ID
00000110 2843 2943 4144 4520 4341+  Date:		dc.b '(C)CADE CADE C  ' ; Release date
00000120 686F 7720 746F 2064 6973+  Title_Local:	dc.b 'how to disassemble vhs tapes on a slab of wood  ' ; Domestic name
00000150 686F 7720 746F 2064 6973+  Title_Int:	dc.b 'how to disassemble vhs tapes on a slab of wood  ' ; International name
00000180 474D 2030 3030 3031 3030+  Serial:		dc.b 'GM 00001009-00'   ; Serial/version number
0000018E 0000                       Checksum:	dc.w 0
00000190 4A20 2020 2020 2020 2020+  		dc.b 'J               ' ; I/O support
000001A0 0000 0000                  RomStartLoc:	dc.l StartOfRom		; ROM start
000001A4 0000 0000                  RomEndLoc:	dc.l EndOfRom-1		; ROM end
000001A8 00FF 0000                  RamStartLoc:	dc.l $FF0000		; RAM start
000001AC 00FF FFFF                  RamEndLoc:	dc.l $FFFFFF		; RAM end
000001B0 2020 2020                  SRAMSupport:	dc.l $20202020		; change to $5241E020 to create	SRAM
000001B4 2020 2020                  		dc.l $20202020		; SRAM start
000001B8 2020 2020                  		dc.l $20202020		; SRAM end
000001BC 2020 2020 2020 2020 2020+  Notes:		dc.b '                                                    '
000001F0 4A55 4520 2020 2020 2020+  Region:		dc.b 'JUE             ' ; Region
00000200                            
00000200                            ; ===========================================================================
00000200                            
00000200                            ErrorTrap:
00000200 4E71                       		nop	
00000202 4E71                       		nop	
00000204 60FA                       		bra.s	ErrorTrap
00000206                            ; ===========================================================================
00000206                            
00000206                            EntryPoint:
00000206 4AB9 00A1 0008             		tst.l	($A10008).l	; test port A control
0000020C 6600                       		bne.s	PortA_Ok
0000020E 4A79 00A1 000C             		tst.w	($A1000C).l	; test port C control
00000214                            
00000214                            PortA_Ok:
00000214 6600                       		bne.s	PortC_Ok
00000216 4BFA 0000                  		lea	SetupValues(pc),a5
0000021A 4C9D 00E0                  		movem.w	(a5)+,d5-d7
0000021E 4CDD 1F00                  		movem.l	(a5)+,a0-a4
00000222 1029 EF01                  		move.b	-$10FF(a1),d0	; get hardware version
00000226 0200 000F                  		andi.b	#$F,d0
0000022A 6700                       		beq.s	SkipSecurity
0000022C 237C 5345 4741 2F00        		move.l	#'SEGA',$2F00(a1)
00000234                            
00000234                            SkipSecurity:
00000234 3014                       		move.w	(a4),d0		; check	if VDP works
00000236 7000                       		moveq	#0,d0
00000238 2C40                       		movea.l	d0,a6
0000023A 4E66                       		move.l	a6,usp		; set usp to $0
0000023C 7217                       		moveq	#$17,d1
0000023E                            
0000023E                            VDPInitLoop:
0000023E 1A1D                       		move.b	(a5)+,d5	; add $8000 to value
00000240 3885                       		move.w	d5,(a4)		; move value to	VDP register
00000242 DA47                       		add.w	d7,d5		; next register
00000244 51C9 FFF8                  		dbf	d1,VDPInitLoop
00000248 289D                       		move.l	(a5)+,(a4)
0000024A 3680                       		move.w	d0,(a3)		; clear	the screen
0000024C 3287                       		move.w	d7,(a1)		; stop the Z80
0000024E 3487                       		move.w	d7,(a2)		; reset	the Z80
00000250                            
00000250                            WaitForZ80:
00000250 0111                       		btst	d0,(a1)		; has the Z80 stopped?
00000252 66FC                       		bne.s	WaitForZ80	; if not, branch
00000254 7425                       		moveq	#$25,d2
00000256                            
00000256                            Z80InitLoop:
00000256 10DD                       		move.b	(a5)+,(a0)+
00000258 51CA FFFC                  		dbf	d2,Z80InitLoop
0000025C 3480                       		move.w	d0,(a2)
0000025E 3280                       		move.w	d0,(a1)		; start	the Z80
00000260 3487                       		move.w	d7,(a2)		; reset	the Z80
00000262                            
00000262                            ClrRAMLoop:
00000262 2D00                       		move.l	d0,-(a6)
00000264 51CE FFFC                  		dbf	d6,ClrRAMLoop	; clear	the entire RAM
00000268 289D                       		move.l	(a5)+,(a4)	; set VDP display mode and increment
0000026A 289D                       		move.l	(a5)+,(a4)	; set VDP to CRAM write
0000026C 761F                       		moveq	#$1F,d3
0000026E                            
0000026E                            ClrCRAMLoop:
0000026E 2680                       		move.l	d0,(a3)
00000270 51CB FFFC                  		dbf	d3,ClrCRAMLoop	; clear	the CRAM
00000274 289D                       		move.l	(a5)+,(a4)
00000276 7813                       		moveq	#$13,d4
00000278                            
00000278                            ClrVDPStuff:
00000278 2680                       		move.l	d0,(a3)
0000027A 51CC FFFC                  		dbf	d4,ClrVDPStuff
0000027E 7A03                       		moveq	#3,d5
00000280                            
00000280                            PSGInitLoop:
00000280 175D 0011                  		move.b	(a5)+,$11(a3)	; reset	the PSG
00000284 51CD FFFA                  		dbf	d5,PSGInitLoop
00000288 3480                       		move.w	d0,(a2)
0000028A 4CD6 7FFF                  		movem.l	(a6),d0-a6	; clear	all registers
0000028E 46FC 2700                  		move	#$2700,sr	; set the sr
00000292                            
00000292                            PortC_Ok:
00000292 6000                       		bra.s	GameProgram
00000294                            ; ===========================================================================
00000294 8000                       SetupValues:	dc.w $8000		; XREF: PortA_Ok
00000296 3FFF                       		dc.w $3FFF
00000298 0100                       		dc.w $100
0000029A                            
0000029A 00A0 0000                  		dc.l $A00000		; start	of Z80 RAM
0000029E 00A1 1100                  		dc.l $A11100		; Z80 bus request
000002A2 00A1 1200                  		dc.l $A11200		; Z80 reset
000002A6 00C0 0000                  		dc.l $C00000
000002AA 00C0 0004                  		dc.l $C00004		; address for VDP registers
000002AE                            
000002AE 0414 303C                  		dc.b 4,	$14, $30, $3C	; values for VDP registers
000002B2 076C 0000                  		dc.b 7,	$6C, 0,	0
000002B6 0000 FF00                  		dc.b 0,	0, $FF,	0
000002BA 8137 0001                  		dc.b $81, $37, 0, 1
000002BE 0100 00FF                  		dc.b 1,	0, 0, $FF
000002C2 FF00 0080                  		dc.b $FF, 0, 0,	$80
000002C6                            
000002C6 4000 0080                  		dc.l $40000080
000002CA                            
000002CA AF01 D91F 1127 0021 2600+  		dc.b $AF, 1, $D9, $1F, $11, $27, 0, $21, $26, 0, $F9, $77 ; Z80	instructions
000002D6 EDB0 DDE1 FDE1 ED47 ED4F   		dc.b $ED, $B0, $DD, $E1, $FD, $E1, $ED,	$47, $ED, $4F
000002E0 D1E1 F108 D9C1 D1E1 F1F9+  		dc.b $D1, $E1, $F1, 8, $D9, $C1, $D1, $E1, $F1,	$F9, $F3
000002EB ED56 36E9 E9               		dc.b $ED, $56, $36, $E9, $E9
000002F0                            
000002F0 8104                       		dc.w $8104		; value	for VDP	display	mode
000002F2 8F02                       		dc.w $8F02		; value	for VDP	increment
000002F4 C000 0000                  		dc.l $C0000000		; value	for CRAM write mode
000002F8 4000 0010                  		dc.l $40000010
000002FC                            
000002FC 9FBF DFFF                  		dc.b $9F, $BF, $DF, $FF	; values for PSG channel volumes
00000300                            ; ===========================================================================
00000300                            
00000300                            GameProgram:
00000300 4A79 00C0 0004             		tst.w	($C00004).l
00000306 0839 0006 00A1 000D        		btst	#6,($A1000D).l
0000030E 6700                       		beq.s	CheckSumCheck
00000310 0CB8 696E 6974 FFFC        		cmpi.l	#'init',($FFFFFFFC).w ; has checksum routine already run?
00000318 6700 0000                  		beq.w	GameInit	; if yes, branch
0000031C                            
0000031C                            CheckSumCheck:
0000031C 207C 0000 0200             		movea.l	#ErrorTrap,a0	; start	checking bytes after the header	($200)
00000322 227C 0000 01A4             		movea.l	#RomEndLoc,a1	; stop at end of ROM
00000328 2011                       		move.l	(a1),d0
0000032A 7200                       		moveq	#0,d1
0000032C                            
0000032C                            loc_32C:
0000032C D258                       		add.w	(a0)+,d1
0000032E B088                       		cmp.l	a0,d0
00000330 64FA                       		bcc.s	loc_32C
00000332 227C 0000 018E             		movea.l	#Checksum,a1	; read the checksum
00000338 B251                       		cmp.w	(a1),d1		; compare correct checksum to the one in ROM
0000033A 6600 0000                  		bne.w	CheckSumError	; if they don't match, branch
0000033E 4DF8 FE00                  		lea	($FFFFFE00).w,a6
00000342 7E00                       		moveq	#0,d7
00000344 3C3C 007F                  		move.w	#$7F,d6
00000348                            
00000348                            loc_348:
00000348 2CC7                       		move.l	d7,(a6)+
0000034A 51CE FFFC                  		dbf	d6,loc_348
0000034E 1039 00A1 0001             		move.b	($A10001).l,d0
00000354 0200 00C0                  		andi.b	#$C0,d0
00000358 11C0 FFF8                  		move.b	d0,($FFFFFFF8).w
0000035C 21FC 696E 6974 FFFC        		move.l	#'init',($FFFFFFFC).w ; set flag so checksum won't be run again
00000364                            
00000364                            GameInit:
00000364 4DF9 00FF 0000             		lea	($FF0000).l,a6
0000036A 7E00                       		moveq	#0,d7
0000036C 3C3C 3F7F                  		move.w	#$3F7F,d6
00000370                            
00000370                            GameClrRAM:
00000370 2CC7                       		move.l	d7,(a6)+
00000372 51CE FFFC                  		dbf	d6,GameClrRAM	; fill RAM ($0000-$FDFF) with $0
00000376 6100 0000                  		bsr.w	VDPSetupGame
0000037A 6100 0000                  		bsr.w	SoundDriverLoad
0000037E 6100 0000                  		bsr.w	JoypadInit
00000382 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set Game Mode to Sega Screen
00000388                            
00000388                            MainGameLoop:
00000388 1038 F600                  		move.b	($FFFFF600).w,d0 ; load	Game Mode
0000038C 0240 001C                  		andi.w	#$1C,d0
00000390 4EBB 0000                  		jsr	GameModeArray(pc,d0.w) ; jump to apt location in ROM
00000394 60F2                       		bra.s	MainGameLoop
00000396                            ; ===========================================================================
00000396                            ; ---------------------------------------------------------------------------
00000396                            ; Main game mode array
00000396                            ; ---------------------------------------------------------------------------
00000396                            
00000396                            GameModeArray:
00000396 6000 0000                  		bra.w	SegaScreen	; Sega Screen ($00)
0000039A                            ; ===========================================================================
0000039A 6000 0000                  		bra.w	TitleScreen	; Title	Screen ($04)
0000039E                            ; ===========================================================================
0000039E 6000 0000                  		bra.w	Level		; Demo Mode ($08)
000003A2                            ; ===========================================================================
000003A2 6000 0000                  		bra.w	Level		; Normal Level ($0C)
000003A6                            ; ===========================================================================
000003A6 6000 0000                  		bra.w	SpecialStage	; Special Stage	($10)
000003AA                            ; ===========================================================================
000003AA 6000 0000                  		bra.w	ContinueScreen	; Continue Screen ($14)
000003AE                            ; ===========================================================================
000003AE 6000 0000                  		bra.w	EndingSequence	; End of game sequence ($18)
000003B2                            ; ===========================================================================
000003B2 6000 0000                  		bra.w	Credits		; Credits ($1C)
000003B6                            ; ===========================================================================
000003B6 4E75                       		rts	
000003B8                            ; ===========================================================================
000003B8                            
000003B8                            CheckSumError:
000003B8 6100 0000                  		bsr.w	VDPSetupGame
000003BC 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
000003C6 7E3F                       		moveq	#$3F,d7
000003C8                            
000003C8                            CheckSum_Red:
000003C8 33FC 000E 00C0 0000        		move.w	#$E,($C00000).l	; fill screen with colour red
000003D0 51CF FFF6                  		dbf	d7,CheckSum_Red	; repeat $3F more times
000003D4                            
000003D4                            CheckSum_Loop:
000003D4 60FE                       		bra.s	CheckSum_Loop
000003D6                            ; ===========================================================================
000003D6                            
000003D6                            BusError:
000003D6 11FC 0002 FC44             		move.b	#2,($FFFFFC44).w
000003DC 6000                       		bra.s	loc_43A
000003DE                            ; ===========================================================================
000003DE                            
000003DE                            AddressError:
000003DE 11FC 0004 FC44             		move.b	#4,($FFFFFC44).w
000003E4 6000                       		bra.s	loc_43A
000003E6                            ; ===========================================================================
000003E6                            
000003E6                            IllegalInstr:
000003E6 11FC 0006 FC44             		move.b	#6,($FFFFFC44).w
000003EC 54AF 0002                  		addq.l	#2,2(sp)
000003F0 6000                       		bra.s	loc_462
000003F2                            ; ===========================================================================
000003F2                            
000003F2                            ZeroDivide:
000003F2 11FC 0008 FC44             		move.b	#8,($FFFFFC44).w
000003F8 6000                       		bra.s	loc_462
000003FA                            ; ===========================================================================
000003FA                            
000003FA                            ChkInstr:
000003FA 11FC 000A FC44             		move.b	#$A,($FFFFFC44).w
00000400 6000                       		bra.s	loc_462
00000402                            ; ===========================================================================
00000402                            
00000402                            TrapvInstr:
00000402 11FC 000C FC44             		move.b	#$C,($FFFFFC44).w
00000408 6000                       		bra.s	loc_462
0000040A                            ; ===========================================================================
0000040A                            
0000040A                            PrivilegeViol:
0000040A 11FC 000E FC44             		move.b	#$E,($FFFFFC44).w
00000410 6000                       		bra.s	loc_462
00000412                            ; ===========================================================================
00000412                            
00000412                            Trace:
00000412 11FC 0010 FC44             		move.b	#$10,($FFFFFC44).w
00000418 6000                       		bra.s	loc_462
0000041A                            ; ===========================================================================
0000041A                            
0000041A                            Line1010Emu:
0000041A 11FC 0012 FC44             		move.b	#$12,($FFFFFC44).w
00000420 54AF 0002                  		addq.l	#2,2(sp)
00000424 6000                       		bra.s	loc_462
00000426                            ; ===========================================================================
00000426                            
00000426                            Line1111Emu:
00000426 11FC 0014 FC44             		move.b	#$14,($FFFFFC44).w
0000042C 54AF 0002                  		addq.l	#2,2(sp)
00000430 6000                       		bra.s	loc_462
00000432                            ; ===========================================================================
00000432                            
00000432                            ErrorExcept:
00000432 11FC 0000 FC44             		move.b	#0,($FFFFFC44).w
00000438 6000                       		bra.s	loc_462
0000043A                            ; ===========================================================================
0000043A                            
0000043A                            loc_43A:
0000043A 46FC 2700                  		move	#$2700,sr
0000043E 544F                       		addq.w	#2,sp
00000440 21DF FC40                  		move.l	(sp)+,($FFFFFC40).w
00000444 544F                       		addq.w	#2,sp
00000446 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
0000044C 6100 0000                  		bsr.w	ShowErrorMsg
00000450 202F 0002                  		move.l	2(sp),d0
00000454 6100 0000                  		bsr.w	sub_5BA
00000458 2038 FC40                  		move.l	($FFFFFC40).w,d0
0000045C 6100 0000                  		bsr.w	sub_5BA
00000460 6000                       		bra.s	loc_478
00000462                            ; ===========================================================================
00000462                            
00000462                            loc_462:
00000462 46FC 2700                  		move	#$2700,sr
00000466 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
0000046C 6100 0000                  		bsr.w	ShowErrorMsg
00000470 202F 0002                  		move.l	2(sp),d0
00000474 6100 0000                  		bsr.w	sub_5BA
00000478                            
00000478                            loc_478:
00000478 6100 0000                  		bsr.w	ErrorWaitForC
0000047C 4CF8 FFFF FC00             		movem.l	($FFFFFC00).w,d0-a7
00000482 46FC 2300                  		move	#$2300,sr
00000486 4E73                       		rte	
00000488                            
00000488                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000488                            
00000488                            
00000488                            ShowErrorMsg:				; XREF: loc_43A; loc_462
00000488 4DF9 00C0 0000             		lea	($C00000).l,a6
0000048E 23FC 7800 0003 00C0 0004   		move.l	#$78000003,($C00004).l
00000498 41F9 0000 0000             		lea	(Art_Text).l,a0
0000049E 323C 027F                  		move.w	#$27F,d1
000004A2                            
000004A2                            Error_LoadGfx:
000004A2 3C98                       		move.w	(a0)+,(a6)
000004A4 51C9 FFFC                  		dbf	d1,Error_LoadGfx
000004A8 7000                       		moveq	#0,d0		; clear	d0
000004AA 1038 FC44                  		move.b	($FFFFFC44).w,d0 ; load	error code
000004AE 303B 0000                  		move.w	ErrorText(pc,d0.w),d0
000004B2 41FB 0000                  		lea	ErrorText(pc,d0.w),a0
000004B6 23FC 4604 0003 00C0 0004   		move.l	#$46040003,($C00004).l ; position
000004C0 7212                       		moveq	#$12,d1		; number of characters
000004C2                            
000004C2                            Error_LoopChars:
000004C2 7000                       		moveq	#0,d0
000004C4 1018                       		move.b	(a0)+,d0
000004C6 0640 0790                  		addi.w	#$790,d0
000004CA 3C80                       		move.w	d0,(a6)
000004CC 51C9 FFF4                  		dbf	d1,Error_LoopChars ; repeat for	number of characters
000004D0 4E75                       		rts	
000004D2                            ; End of function ShowErrorMsg
000004D2                            
000004D2                            ; ===========================================================================
000004D2 0000 0000                  ErrorText:	dc.w asc_4E8-ErrorText,	asc_4FB-ErrorText ; XREF: ShowErrorMsg
000004D6 0000 0000                  		dc.w asc_50E-ErrorText,	asc_521-ErrorText
000004DA 0000 0000                  		dc.w asc_534-ErrorText,	asc_547-ErrorText
000004DE 0000 0000                  		dc.w asc_55A-ErrorText,	asc_56D-ErrorText
000004E2 0000 0000                  		dc.w asc_580-ErrorText,	asc_593-ErrorText
000004E6 0000                       		dc.w asc_5A6-ErrorText
000004E8 4552 524F 5220 4558 4345+  asc_4E8:	dc.b 'ERROR EXCEPTION    '
000004FB 4255 5320 4552 524F 5220+  asc_4FB:	dc.b 'BUS ERROR          '
0000050E 4144 4452 4553 5320 4552+  asc_50E:	dc.b 'ADDRESS ERROR      '
00000521 494C 4C45 4741 4C20 494E+  asc_521:	dc.b 'ILLEGAL INSTRUCTION'
00000534 4045 524F 2044 4956 4944+  asc_534:	dc.b '@ERO DIVIDE        '
00000547 4348 4B20 494E 5354 5255+  asc_547:	dc.b 'CHK INSTRUCTION    '
0000055A 5452 4150 5620 494E 5354+  asc_55A:	dc.b 'TRAPV INSTRUCTION  '
0000056D 5052 4956 494C 4547 4520+  asc_56D:	dc.b 'PRIVILEGE VIOLATION'
00000580 5452 4143 4520 2020 2020+  asc_580:	dc.b 'TRACE              '
00000593 4C49 4E45 2031 3031 3020+  asc_593:	dc.b 'LINE 1010 EMULATOR '
000005A6 4C49 4E45 2031 3131 3120+  asc_5A6:	dc.b 'LINE 1111 EMULATOR '
000005BA 00                         		even
000005BA                            
000005BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005BA                            
000005BA                            
000005BA                            sub_5BA:				; XREF: loc_43A; loc_462
000005BA 3CBC 07CA                  		move.w	#$7CA,(a6)
000005BE 7407                       		moveq	#7,d2
000005C0                            
000005C0                            loc_5C0:
000005C0 E998                       		rol.l	#4,d0
000005C2 6100                       		bsr.s	sub_5CA
000005C4 51CA FFFA                  		dbf	d2,loc_5C0
000005C8 4E75                       		rts	
000005CA                            ; End of function sub_5BA
000005CA                            
000005CA                            
000005CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005CA                            
000005CA                            
000005CA                            sub_5CA:				; XREF: sub_5BA
000005CA 3200                       		move.w	d0,d1
000005CC 0241 000F                  		andi.w	#$F,d1
000005D0 0C41 000A                  		cmpi.w	#$A,d1
000005D4 6500                       		bcs.s	loc_5D8
000005D6 5E41                       		addq.w	#7,d1
000005D8                            
000005D8                            loc_5D8:
000005D8 0641 07C0                  		addi.w	#$7C0,d1
000005DC 3C81                       		move.w	d1,(a6)
000005DE 4E75                       		rts	
000005E0                            ; End of function sub_5CA
000005E0                            
000005E0                            
000005E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005E0                            
000005E0                            
000005E0                            ErrorWaitForC:				; XREF: loc_478
000005E0 6100 0000                  		bsr.w	ReadJoypads
000005E4 0C38 0020 F605             		cmpi.b	#$20,($FFFFF605).w ; is	button C pressed?
000005EA 6600 FFF4                  		bne.w	ErrorWaitForC	; if not, branch
000005EE 4E75                       		rts	
000005F0                            ; End of function ErrorWaitForC
000005F0                            
000005F0                            ; ===========================================================================
000005F0                            
000005F0                            Art_Text:	incbin	artunc\menutext.bin	; text used in level select and debug mode
00000D30                            Art_Text_end:		even
00000D30                            
00000D30                            ; ===========================================================================
00000D30                            ;VBlank
00000D30                            loc_B10:				; XREF: Vectors
00000D30 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00000D34 4A38 F62A                  		tst.b	($FFFFF62A).w
00000D38 6700                       		beq.s	loc_B88
00000D3A 3039 00C0 0004             		move.w	($C00004).l,d0
00000D40 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00000D4A 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00000D52 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000D58 6700                       		beq.s	loc_B42
00000D5A 303C 0700                  		move.w	#$700,d0
00000D5E                            
00000D5E                            loc_B3E:
00000D5E 51C8 FFFE                  		dbf	d0,loc_B3E
00000D62                            
00000D62                            loc_B42:
00000D62 1038 F62A                  		move.b	($FFFFF62A).w,d0
00000D66 11FC 0000 F62A             		move.b	#0,($FFFFF62A).w
00000D6C 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000D72 0240 003E                  		andi.w	#$3E,d0
00000D76 303B 0000                  		move.w	off_B6E(pc,d0.w),d0
00000D7A 4EBB 0000                  		jsr	off_B6E(pc,d0.w)
00000D7E                            
00000D7E                            loc_B5E:				; XREF: loc_B88
00000D7E 4EB9 0000 0000             		jsr	sub_71B4C
00000D84                            
00000D84                            loc_B64:				; XREF: loc_D50
00000D84 52B8 FE0C                  		addq.l	#1,($FFFFFE0C).w
00000D88 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00000D8C 4E73                       		rte	
00000D8E                            ; ===========================================================================
00000D8E 0000 0000                  off_B6E:	dc.w loc_B88-off_B6E, loc_C32-off_B6E
00000D92 0000 0000                  		dc.w loc_C44-off_B6E, loc_C5E-off_B6E
00000D96 0000 0000                  		dc.w loc_C6E-off_B6E, loc_DA6-off_B6E
00000D9A 0000 0000                  		dc.w loc_E72-off_B6E, loc_F8A-off_B6E
00000D9E 0000 0000                  		dc.w loc_C64-off_B6E, loc_F9A-off_B6E
00000DA2 0000 0000                  		dc.w loc_C36-off_B6E, loc_FA6-off_B6E
00000DA6 0000                       		dc.w loc_E72-off_B6E
00000DA8                            ; ===========================================================================
00000DA8                            
00000DA8                            loc_B88:				; XREF: loc_B10; off_B6E
00000DA8 0C38 008C F600             		cmpi.b	#$8C,($FFFFF600).w
00000DAE 6700                       		beq.s	loc_B9A
00000DB0 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00000DB6 6600 FFC6                  		bne.w	loc_B5E
00000DBA                            
00000DBA                            loc_B9A:
00000DBA 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ ?
00000DC0 6600 FFBC                  		bne.w	loc_B5E		; if not, branch
00000DC4 3039 00C0 0004             		move.w	($C00004).l,d0
00000DCA 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000DD0 6700                       		beq.s	loc_BBA
00000DD2 303C 0700                  		move.w	#$700,d0
00000DD6                            
00000DD6                            loc_BB6:
00000DD6 51C8 FFFE                  		dbf	d0,loc_BB6
00000DDA                            
00000DDA                            loc_BBA:
00000DDA 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000DE0 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l
00000DE8                            
00000DE8                            loc_BC8:
00000DE8 0839 0000 00A1 1100        		btst	#0,($A11100).l
00000DF0 66F6                       		bne.s	loc_BC8
00000DF2 4A38 F64E                  		tst.b	($FFFFF64E).w
00000DF6 6600                       		bne.s	loc_BFE
00000DF8 4BF9 00C0 0004             		lea	($C00004).l,a5
00000DFE 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000E04 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000E0A 3ABC 977F                  		move.w	#$977F,(a5)
00000E0E 3ABC C000                  		move.w	#$C000,(a5)
00000E12 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000E18 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E1C 6000                       		bra.s	loc_C22
00000E1E                            ; ===========================================================================
00000E1E                            
00000E1E                            loc_BFE:				; XREF: loc_BC8
00000E1E 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E24 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000E2A 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000E30 3ABC 977F                  		move.w	#$977F,(a5)
00000E34 3ABC C000                  		move.w	#$C000,(a5)
00000E38 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000E3E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E42                            
00000E42                            loc_C22:				; XREF: loc_BC8
00000E42 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000E46 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000E4E 6000 FF2E                  		bra.w	loc_B5E
00000E52                            ; ===========================================================================
00000E52                            
00000E52                            loc_C32:				; XREF: off_B6E
00000E52 6100 0000                  		bsr.w	sub_106E
00000E56                            
00000E56                            loc_C36:				; XREF: off_B6E
00000E56 4A78 F614                  		tst.w	($FFFFF614).w
00000E5A 6700 0000                  		beq.w	locret_C42
00000E5E 5378 F614                  		subq.w	#1,($FFFFF614).w
00000E62                            
00000E62                            locret_C42:
00000E62 4E75                       		rts	
00000E64                            ; ===========================================================================
00000E64                            
00000E64                            loc_C44:				; XREF: off_B6E
00000E64 6100 0000                  		bsr.w	sub_106E
00000E68 6100 0000                  		bsr.w	sub_6886
00000E6C 6100 0000                  		bsr.w	sub_1642
00000E70 4A78 F614                  		tst.w	($FFFFF614).w
00000E74 6700 0000                  		beq.w	locret_C5C
00000E78 5378 F614                  		subq.w	#1,($FFFFF614).w
00000E7C                            
00000E7C                            locret_C5C:
00000E7C 4E75                       		rts	
00000E7E                            ; ===========================================================================
00000E7E                            
00000E7E                            loc_C5E:				; XREF: off_B6E
00000E7E 6100 0000                  		bsr.w	sub_106E
00000E82 4E75                       		rts	
00000E84                            ; ===========================================================================
00000E84                            
00000E84                            loc_C64:				; XREF: off_B6E
00000E84 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)	?
00000E8A 6700 0000                  		beq.w	loc_DA6		; if yes, branch
00000E8E                            
00000E8E                            loc_C6E:				; XREF: off_B6E
00000E8E 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000E96                            
00000E96                            loc_C76:
00000E96 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000E9E 66F6                       		bne.s	loc_C76		; if not, branch
00000EA0 6100 0000                  		bsr.w	ReadJoypads
00000EA4 4A38 F64E                  		tst.b	($FFFFF64E).w
00000EA8 6600                       		bne.s	loc_CB0
00000EAA 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EB0 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000EB6 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000EBC 3ABC 977F                  		move.w	#$977F,(a5)
00000EC0 3ABC C000                  		move.w	#$C000,(a5)
00000EC4 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000ECA 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000ECE 6000                       		bra.s	loc_CD4
00000ED0                            ; ===========================================================================
00000ED0                            
00000ED0                            loc_CB0:				; XREF: loc_C76
00000ED0 4BF9 00C0 0004             		lea	($C00004).l,a5
00000ED6 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000EDC 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000EE2 3ABC 977F                  		move.w	#$977F,(a5)
00000EE6 3ABC C000                  		move.w	#$C000,(a5)
00000EEA 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000EF0 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000EF4                            
00000EF4                            loc_CD4:				; XREF: loc_C76
00000EF4 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000EF8 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EFE 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000F04 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000F0A 3ABC 977F                  		move.w	#$977F,(a5)
00000F0E 3ABC 7C00                  		move.w	#$7C00,(a5)
00000F12 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F18 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F1C 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F22 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000F28 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000F2E 3ABC 977F                  		move.w	#$977F,(a5)
00000F32 3ABC 7800                  		move.w	#$7800,(a5)
00000F36 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F3C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F40 4A38 F767                  		tst.b	($FFFFF767).w
00000F44 6700                       		beq.s	loc_D50
00000F46 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F4C 2ABC 9401 9370             		move.l	#$94019370,(a5)
00000F52 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00000F58 3ABC 977F                  		move.w	#$977F,(a5)
00000F5C 3ABC 7000                  		move.w	#$7000,(a5)
00000F60 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F66 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F6A 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00000F70                            
00000F70                            loc_D50:
00000F70 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000F78 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00000F7E 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00000F84 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00000F8A 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00000F90 0C38 0060 F625             		cmpi.b	#$60,($FFFFF625).w
00000F96 6400                       		bcc.s	Demo_Time
00000F98 11FC 0001 F64F             		move.b	#1,($FFFFF64F).w
00000F9E 588F                       		addq.l	#4,sp
00000FA0 6000 FDE2                  		bra.w	loc_B64
00000FA4                            
00000FA4                            ; ---------------------------------------------------------------------------
00000FA4                            ; Subroutine to	run a demo for an amount of time
00000FA4                            ; ---------------------------------------------------------------------------
00000FA4                            
00000FA4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000FA4                            
00000FA4                            
00000FA4                            Demo_Time:				; XREF: loc_D50; PalToCRAM
00000FA4 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000FA8 4EB9 0000 0000             		jsr	AniArt_Load
00000FAE 4EB9 0000 0000             		jsr	HudUpdate
00000FB4 6100 0000                  		bsr.w	sub_165E
00000FB8 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00000FBC 6700 0000                  		beq.w	Demo_TimeEnd	; if not, branch
00000FC0 5378 F614                  		subq.w	#1,($FFFFF614).w ; subtract 1 from time	left
00000FC4                            
00000FC4                            Demo_TimeEnd:
00000FC4 4E75                       		rts	
00000FC6                            ; End of function Demo_Time
00000FC6                            
00000FC6                            ; ===========================================================================
00000FC6                            
00000FC6                            loc_DA6:				; XREF: off_B6E
00000FC6 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000FCE                            
00000FCE                            loc_DAE:
00000FCE 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000FD6 66F6                       		bne.s	loc_DAE		; if not, branch
00000FD8 6100 0000                  		bsr.w	ReadJoypads
00000FDC 4BF9 00C0 0004             		lea	($C00004).l,a5
00000FE2 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000FE8 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000FEE 3ABC 977F                  		move.w	#$977F,(a5)
00000FF2 3ABC C000                  		move.w	#$C000,(a5)
00000FF6 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000FFC 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001000 4BF9 00C0 0004             		lea	($C00004).l,a5
00001006 2ABC 9401 9340             		move.l	#$94019340,(a5)
0000100C 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001012 3ABC 977F                  		move.w	#$977F,(a5)
00001016 3ABC 7800                  		move.w	#$7800,(a5)
0000101A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001020 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001024 4BF9 00C0 0004             		lea	($C00004).l,a5
0000102A 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001030 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00001036 3ABC 977F                  		move.w	#$977F,(a5)
0000103A 3ABC 7C00                  		move.w	#$7C00,(a5)
0000103E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001044 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001048 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00001050 6100 0000                  		bsr.w	PalCycle_SS
00001054 4A38 F767                  		tst.b	($FFFFF767).w
00001058 6700                       		beq.s	loc_E64
0000105A 4BF9 00C0 0004             		lea	($C00004).l,a5
00001060 2ABC 9401 9370             		move.l	#$94019370,(a5)
00001066 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
0000106C 3ABC 977F                  		move.w	#$977F,(a5)
00001070 3ABC 7000                  		move.w	#$7000,(a5)
00001074 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000107A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000107E 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00001084                            
00001084                            loc_E64:
00001084 4A78 F614                  		tst.w	($FFFFF614).w
00001088 6700 0000                  		beq.w	locret_E70
0000108C 5378 F614                  		subq.w	#1,($FFFFF614).w
00001090                            
00001090                            locret_E70:
00001090 4E75                       		rts	
00001092                            ; ===========================================================================
00001092                            
00001092                            loc_E72:				; XREF: off_B6E
00001092 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
0000109A                            
0000109A                            loc_E7A:
0000109A 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
000010A2 66F6                       		bne.s	loc_E7A		; if not, branch
000010A4 6100 0000                  		bsr.w	ReadJoypads
000010A8 4A38 F64E                  		tst.b	($FFFFF64E).w
000010AC 6600                       		bne.s	loc_EB4
000010AE 4BF9 00C0 0004             		lea	($C00004).l,a5
000010B4 2ABC 9400 9340             		move.l	#$94009340,(a5)
000010BA 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
000010C0 3ABC 977F                  		move.w	#$977F,(a5)
000010C4 3ABC C000                  		move.w	#$C000,(a5)
000010C8 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000010CE 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000010D2 6000                       		bra.s	loc_ED8
000010D4                            ; ===========================================================================
000010D4                            
000010D4                            loc_EB4:				; XREF: loc_E7A
000010D4 4BF9 00C0 0004             		lea	($C00004).l,a5
000010DA 2ABC 9400 9340             		move.l	#$94009340,(a5)
000010E0 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
000010E6 3ABC 977F                  		move.w	#$977F,(a5)
000010EA 3ABC C000                  		move.w	#$C000,(a5)
000010EE 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000010F4 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000010F8                            
000010F8                            loc_ED8:				; XREF: loc_E7A
000010F8 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
000010FC 4BF9 00C0 0004             		lea	($C00004).l,a5
00001102 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001108 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
0000110E                            
0000110E                            loc_EEE:
0000110E 3ABC 977F                  		move.w	#$977F,(a5)
00001112 3ABC 7C00                  		move.w	#$7C00,(a5)
00001116 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000111C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001120 4BF9 00C0 0004             		lea	($C00004).l,a5
00001126 2ABC 9401 9340             		move.l	#$94019340,(a5)
0000112C 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001132 3ABC 977F                  		move.w	#$977F,(a5)
00001136 3ABC 7800                  		move.w	#$7800,(a5)
0000113A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001140 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001144 4A38 F767                  		tst.b	($FFFFF767).w
00001148 6700                       		beq.s	loc_F54
0000114A 4BF9 00C0 0004             		lea	($C00004).l,a5
00001150 2ABC 9401 9370             		move.l	#$94019370,(a5)
00001156 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
0000115C 3ABC 977F                  		move.w	#$977F,(a5)
00001160 3ABC 7000                  		move.w	#$7000,(a5)
00001164 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000116A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000116E 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00001174                            
00001174                            loc_F54:
00001174 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
0000117C 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00001182 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00001188 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
0000118E 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00001194 6100 0000                  		bsr.w	LoadTilesAsYouMove
00001198 4EB9 0000 0000             		jsr	AniArt_Load
0000119E 4EB9 0000 0000             		jsr	HudUpdate
000011A4 6100 0000                  		bsr.w	sub_1642
000011A8 4E75                       		rts	
000011AA                            ; ===========================================================================
000011AA                            
000011AA                            loc_F8A:				; XREF: off_B6E
000011AA 6100 0000                  		bsr.w	sub_106E
000011AE 5238 F628                  		addq.b	#1,($FFFFF628).w
000011B2 11FC 000E F62A             		move.b	#$E,($FFFFF62A).w
000011B8 4E75                       		rts	
000011BA                            ; ===========================================================================
000011BA                            
000011BA                            loc_F9A:				; XREF: off_B6E
000011BA 6100 0000                  		bsr.w	sub_106E
000011BE 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
000011C2 6000 0000                  		bra.w	sub_1642
000011C6                            ; ===========================================================================
000011C6                            
000011C6                            loc_FA6:				; XREF: off_B6E
000011C6 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000011CE                            
000011CE                            loc_FAE:
000011CE 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
000011D6 66F6                       		bne.s	loc_FAE		; if not, branch
000011D8 6100 0000                  		bsr.w	ReadJoypads
000011DC 4BF9 00C0 0004             		lea	($C00004).l,a5
000011E2 2ABC 9400 9340             		move.l	#$94009340,(a5)
000011E8 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
000011EE 3ABC 977F                  		move.w	#$977F,(a5)
000011F2 3ABC C000                  		move.w	#$C000,(a5)
000011F6 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000011FC 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001200 4BF9 00C0 0004             		lea	($C00004).l,a5
00001206 2ABC 9401 9340             		move.l	#$94019340,(a5)
0000120C 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001212 3ABC 977F                  		move.w	#$977F,(a5)
00001216 3ABC 7800                  		move.w	#$7800,(a5)
0000121A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001220 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001224 4BF9 00C0 0004             		lea	($C00004).l,a5
0000122A 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001230 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00001236 3ABC 977F                  		move.w	#$977F,(a5)
0000123A 3ABC 7C00                  		move.w	#$7C00,(a5)
0000123E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001244 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001248 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001250 4A38 F767                  		tst.b	($FFFFF767).w
00001254 6700                       		beq.s	loc_1060
00001256 4BF9 00C0 0004             		lea	($C00004).l,a5
0000125C 2ABC 9401 9370             		move.l	#$94019370,(a5)
00001262 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00001268 3ABC 977F                  		move.w	#$977F,(a5)
0000126C 3ABC 7000                  		move.w	#$7000,(a5)
00001270 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001276 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000127A 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00001280                            
00001280                            loc_1060:
00001280 4A78 F614                  		tst.w	($FFFFF614).w
00001284 6700 0000                  		beq.w	locret_106C
00001288 5378 F614                  		subq.w	#1,($FFFFF614).w
0000128C                            
0000128C                            locret_106C:
0000128C 4E75                       		rts	
0000128E                            
0000128E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000128E                            
0000128E                            
0000128E                            sub_106E:				; XREF: loc_C32; et al
0000128E 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00001296                            
00001296                            loc_1076:
00001296 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
0000129E 66F6                       		bne.s	loc_1076	; if not, branch
000012A0 6100 0000                  		bsr.w	ReadJoypads
000012A4 4A38 F64E                  		tst.b	($FFFFF64E).w
000012A8 6600                       		bne.s	loc_10B0
000012AA 4BF9 00C0 0004             		lea	($C00004).l,a5
000012B0 2ABC 9400 9340             		move.l	#$94009340,(a5)
000012B6 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
000012BC 3ABC 977F                  		move.w	#$977F,(a5)
000012C0 3ABC C000                  		move.w	#$C000,(a5)
000012C4 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000012CA 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000012CE 6000                       		bra.s	loc_10D4
000012D0                            ; ===========================================================================
000012D0                            
000012D0                            loc_10B0:				; XREF: sub_106E
000012D0 4BF9 00C0 0004             		lea	($C00004).l,a5
000012D6 2ABC 9400 9340             		move.l	#$94009340,(a5)
000012DC 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
000012E2 3ABC 977F                  		move.w	#$977F,(a5)
000012E6 3ABC C000                  		move.w	#$C000,(a5)
000012EA 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000012F0 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000012F4                            
000012F4                            loc_10D4:				; XREF: sub_106E
000012F4 4BF9 00C0 0004             		lea	($C00004).l,a5
000012FA 2ABC 9401 9340             		move.l	#$94019340,(a5)
00001300 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001306 3ABC 977F                  		move.w	#$977F,(a5)
0000130A 3ABC 7800                  		move.w	#$7800,(a5)
0000130E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001314 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001318 4BF9 00C0 0004             		lea	($C00004).l,a5
0000131E 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001324 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
0000132A 3ABC 977F                  		move.w	#$977F,(a5)
0000132E 3ABC 7C00                  		move.w	#$7C00,(a5)
00001332 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001338 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000133C 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001344 4E75                       		rts	
00001346                            ; End of function sub_106E
00001346                            
00001346                            ; ---------------------------------------------------------------------------
00001346                            ; Subroutine to	move pallets from the RAM to CRAM
00001346                            ; ---------------------------------------------------------------------------
00001346                            
00001346                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001346                            
00001346                            
00001346                            PalToCRAM:
00001346 46FC 2700                  		move	#$2700,sr
0000134A 4A78 F644                  		tst.w	($FFFFF644).w
0000134E 6700                       		beq.s	locret_119C
00001350 31FC 0000 F644             		move.w	#0,($FFFFF644).w
00001356 48E7 00C0                  		movem.l	a0-a1,-(sp)
0000135A 43F9 00C0 0000             		lea	($C00000).l,a1
00001360 41F8 FA80                  		lea	($FFFFFA80).w,a0 ; load	pallet from RAM
00001364 237C C000 0000 0004        		move.l	#$C0000000,4(a1) ; set VDP to CRAM write
0000136C 2298                       		move.l	(a0)+,(a1)	; move pallet to CRAM
0000136E 2298                       		move.l	(a0)+,(a1)
00001370 2298                       		move.l	(a0)+,(a1)
00001372 2298                       		move.l	(a0)+,(a1)
00001374 2298                       		move.l	(a0)+,(a1)
00001376 2298                       		move.l	(a0)+,(a1)
00001378 2298                       		move.l	(a0)+,(a1)
0000137A 2298                       		move.l	(a0)+,(a1)
0000137C 2298                       		move.l	(a0)+,(a1)
0000137E 2298                       		move.l	(a0)+,(a1)
00001380 2298                       		move.l	(a0)+,(a1)
00001382 2298                       		move.l	(a0)+,(a1)
00001384 2298                       		move.l	(a0)+,(a1)
00001386 2298                       		move.l	(a0)+,(a1)
00001388 2298                       		move.l	(a0)+,(a1)
0000138A 2298                       		move.l	(a0)+,(a1)
0000138C 2298                       		move.l	(a0)+,(a1)
0000138E 2298                       		move.l	(a0)+,(a1)
00001390 2298                       		move.l	(a0)+,(a1)
00001392 2298                       		move.l	(a0)+,(a1)
00001394 2298                       		move.l	(a0)+,(a1)
00001396 2298                       		move.l	(a0)+,(a1)
00001398 2298                       		move.l	(a0)+,(a1)
0000139A 2298                       		move.l	(a0)+,(a1)
0000139C 2298                       		move.l	(a0)+,(a1)
0000139E 2298                       		move.l	(a0)+,(a1)
000013A0 2298                       		move.l	(a0)+,(a1)
000013A2 2298                       		move.l	(a0)+,(a1)
000013A4 2298                       		move.l	(a0)+,(a1)
000013A6 2298                       		move.l	(a0)+,(a1)
000013A8 2298                       		move.l	(a0)+,(a1)
000013AA 2298                       		move.l	(a0)+,(a1)
000013AC 337C 8ADF 0004             		move.w	#$8ADF,4(a1)
000013B2 4CDF 0300                  		movem.l	(sp)+,a0-a1
000013B6 4A38 F64F                  		tst.b	($FFFFF64F).w
000013BA 6600                       		bne.s	loc_119E
000013BC                            
000013BC                            locret_119C:
000013BC 4E73                       		rte	
000013BE                            ; ===========================================================================
000013BE                            
000013BE                            loc_119E:				; XREF: PalToCRAM
000013BE 4238 F64F                  		clr.b	($FFFFF64F).w
000013C2 48E7 FFFE                  		movem.l	d0-a6,-(sp)
000013C6 6100 FBDC                  		bsr.w	Demo_Time
000013CA 4EB9 0000 0000             		jsr	sub_71B4C
000013D0 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
000013D4 4E73                       		rte	
000013D6                            ; End of function PalToCRAM
000013D6                            
000013D6                            ; ---------------------------------------------------------------------------
000013D6                            ; Subroutine to	initialise joypads
000013D6                            ; ---------------------------------------------------------------------------
000013D6                            
000013D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000013D6                            
000013D6                            
000013D6                            JoypadInit:				; XREF: GameClrRAM
000013D6 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000013DE                            
000013DE                            Joypad_WaitZ80:
000013DE 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has the Z80 stopped?
000013E6 66F6                       		bne.s	Joypad_WaitZ80	; if not, branch
000013E8 7040                       		moveq	#$40,d0
000013EA 13C0 00A1 0009             		move.b	d0,($A10009).l	; init port 1 (joypad 1)
000013F0 13C0 00A1 000B             		move.b	d0,($A1000B).l	; init port 2 (joypad 2)
000013F6 13C0 00A1 000D             		move.b	d0,($A1000D).l	; init port 3 (extra)
000013FC 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001404 4E75                       		rts	
00001406                            ; End of function JoypadInit
00001406                            
00001406                            ; ---------------------------------------------------------------------------
00001406                            ; Subroutine to	read joypad input, and send it to the RAM
00001406                            ; ---------------------------------------------------------------------------
00001406                            
00001406                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001406                            
00001406                            
00001406                            ReadJoypads:
00001406 41F8 F604                  		lea	($FFFFF604).w,a0 ; address where joypad	states are written
0000140A 43F9 00A1 0003             		lea	($A10003).l,a1	; first	joypad port
00001410 6100                       		bsr.s	Joypad_Read	; do the first joypad
00001412 5449                       		addq.w	#2,a1		; do the second	joypad
00001414                            
00001414                            Joypad_Read:
00001414 12BC 0000                  		move.b	#0,(a1)
00001418 4E71                       		nop	
0000141A 4E71                       		nop	
0000141C 1011                       		move.b	(a1),d0
0000141E E508                       		lsl.b	#2,d0
00001420 0200 00C0                  		andi.b	#$C0,d0
00001424 12BC 0040                  		move.b	#$40,(a1)
00001428 4E71                       		nop	
0000142A 4E71                       		nop	
0000142C 1211                       		move.b	(a1),d1
0000142E 0201 003F                  		andi.b	#$3F,d1
00001432 8001                       		or.b	d1,d0
00001434 4600                       		not.b	d0
00001436 1210                       		move.b	(a0),d1
00001438 B101                       		eor.b	d0,d1
0000143A 10C0                       		move.b	d0,(a0)+
0000143C C200                       		and.b	d0,d1
0000143E 10C1                       		move.b	d1,(a0)+
00001440 4E75                       		rts	
00001442                            ; End of function ReadJoypads
00001442                            
00001442                            
00001442                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001442                            
00001442                            
00001442                            VDPSetupGame:				; XREF: GameClrRAM; ChecksumError
00001442 41F9 00C0 0004             		lea	($C00004).l,a0
00001448 43F9 00C0 0000             		lea	($C00000).l,a1
0000144E 45F9 0000 0000             		lea	(VDPSetupArray).l,a2
00001454 7E12                       		moveq	#$12,d7
00001456                            
00001456                            VDP_Loop:
00001456 309A                       		move.w	(a2)+,(a0)
00001458 51CF FFFC                  		dbf	d7,VDP_Loop	; set the VDP registers
0000145C                            
0000145C 3039 0000 0000             		move.w	(VDPSetupArray+2).l,d0
00001462 31C0 F60C                  		move.w	d0,($FFFFF60C).w
00001466 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
0000146C 7000                       		moveq	#0,d0
0000146E 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
00001478 3E3C 003F                  		move.w	#$3F,d7
0000147C                            
0000147C                            VDP_ClrCRAM:
0000147C 3280                       		move.w	d0,(a1)
0000147E 51CF FFFC                  		dbf	d7,VDP_ClrCRAM	; clear	the CRAM
00001482                            
00001482 42B8 F616                  		clr.l	($FFFFF616).w
00001486 42B8 F61A                  		clr.l	($FFFFF61A).w
0000148A 2F01                       		move.l	d1,-(sp)
0000148C 4BF9 00C0 0004             		lea	($C00004).l,a5
00001492 3ABC 8F01                  		move.w	#$8F01,(a5)
00001496 2ABC 94FF 93FF             		move.l	#$94FF93FF,(a5)
0000149C 3ABC 9780                  		move.w	#$9780,(a5)
000014A0 2ABC 4000 0080             		move.l	#$40000080,(a5)
000014A6 33FC 0000 00C0 0000        		move.w	#0,($C00000).l	; clear	the screen
000014AE                            
000014AE                            loc_128E:
000014AE 3215                       		move.w	(a5),d1
000014B0 0801 0001                  		btst	#1,d1
000014B4 66F8                       		bne.s	loc_128E
000014B6                            
000014B6 3ABC 8F02                  		move.w	#$8F02,(a5)
000014BA 221F                       		move.l	(sp)+,d1
000014BC 4E75                       		rts	
000014BE                            ; End of function VDPSetupGame
000014BE                            
000014BE                            ; ===========================================================================
000014BE 8004 8134 8230 8328        VDPSetupArray:	dc.w $8004, $8134, $8230, $8328	; XREF: VDPSetupGame
000014C6 8407 857C 8600 8700        		dc.w $8407, $857C, $8600, $8700
000014CE 8800 8900 8A00 8B00        		dc.w $8800, $8900, $8A00, $8B00
000014D6 8C81 8D3F 8E00 8F02        		dc.w $8C81, $8D3F, $8E00, $8F02
000014DE 9001 9100 9200             		dc.w $9001, $9100, $9200
000014E4                            
000014E4                            ; ---------------------------------------------------------------------------
000014E4                            ; Subroutine to	clear the screen
000014E4                            ; ---------------------------------------------------------------------------
000014E4                            
000014E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000014E4                            
000014E4                            
000014E4                            ClearScreen:
000014E4 4BF9 00C0 0004             		lea	($C00004).l,a5
000014EA 3ABC 8F01                  		move.w	#$8F01,(a5)
000014EE 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
000014F4 3ABC 9780                  		move.w	#$9780,(a5)
000014F8 2ABC 4000 0083             		move.l	#$40000083,(a5)
000014FE 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00001506                            
00001506                            loc_12E6:
00001506 3215                       		move.w	(a5),d1
00001508 0801 0001                  		btst	#1,d1
0000150C 66F8                       		bne.s	loc_12E6
0000150E                            
0000150E 3ABC 8F02                  		move.w	#$8F02,(a5)
00001512 4BF9 00C0 0004             		lea	($C00004).l,a5
00001518 3ABC 8F01                  		move.w	#$8F01,(a5)
0000151C 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
00001522 3ABC 9780                  		move.w	#$9780,(a5)
00001526 2ABC 6000 0083             		move.l	#$60000083,(a5)
0000152C 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00001534                            
00001534                            loc_1314:
00001534 3215                       		move.w	(a5),d1
00001536 0801 0001                  		btst	#1,d1
0000153A 66F8                       		bne.s	loc_1314
0000153C                            
0000153C 3ABC 8F02                  		move.w	#$8F02,(a5)
00001540 21FC 0000 0000 F616        		move.l	#0,($FFFFF616).w
00001548 21FC 0000 0000 F61A        		move.l	#0,($FFFFF61A).w
00001550 43F8 F800                  		lea	($FFFFF800).w,a1
00001554 7000                       		moveq	#0,d0
00001556 323C 00A0                  		move.w	#$A0,d1
0000155A                            
0000155A                            loc_133A:
0000155A 22C0                       		move.l	d0,(a1)+
0000155C 51C9 FFFC                  		dbf	d1,loc_133A
00001560                            
00001560 43F8 CC00                  		lea	($FFFFCC00).w,a1
00001564 7000                       		moveq	#0,d0
00001566 323C 0100                  		move.w	#$100,d1
0000156A                            
0000156A                            loc_134A:
0000156A 22C0                       		move.l	d0,(a1)+
0000156C 51C9 FFFC                  		dbf	d1,loc_134A
00001570 4E75                       		rts	
00001572                            ; End of function ClearScreen
00001572                            
00001572                            ; ---------------------------------------------------------------------------
00001572                            ; Subroutine to	load the sound driver
00001572                            ; ---------------------------------------------------------------------------
00001572                            
00001572                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001572                            
00001572                            
00001572                            SoundDriverLoad:			; XREF: GameClrRAM; TitleScreen
00001572 4E71                       		nop	
00001574 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
0000157C 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l ; reset the Z80
00001584 41F9 0000 0000             		lea	(Kos_Z80).l,a0	; load sound driver
0000158A 43F9 00A0 0000             		lea	($A00000).l,a1
00001590 6100 0000                  		bsr.w	KosDec		; decompress
00001594 33FC 0000 00A1 1200        		move.w	#0,($A11200).l
0000159C 4E71                       		nop	
0000159E 4E71                       		nop	
000015A0 4E71                       		nop	
000015A2 4E71                       		nop	
000015A4 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l ; reset the Z80
000015AC 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
000015B4 4E75                       		rts	
000015B6                            ; End of function SoundDriverLoad
000015B6                            
000015B6                            ; ---------------------------------------------------------------------------
000015B6                            ; Subroutine to	play a sound or	music track
000015B6                            ; ---------------------------------------------------------------------------
000015B6                            
000015B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015B6                            
000015B6                            
000015B6                            PlaySound:
000015B6 11C0 F00A                  		move.b	d0,($FFFFF00A).w
000015BA 4E75                       		rts	
000015BC                            ; End of function PlaySound
000015BC                            
000015BC                            ; ---------------------------------------------------------------------------
000015BC                            ; Subroutine to	play a special sound/music (E0-E4)
000015BC                            ;
000015BC                            ; E0 - Fade out
000015BC                            ; E1 - Sega
000015BC                            ; E2 - Speed up
000015BC                            ; E3 - Normal speed
000015BC                            ; E4 - Stop
000015BC                            ; ---------------------------------------------------------------------------
000015BC                            
000015BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015BC                            
000015BC                            
000015BC                            PlaySound_Special:
000015BC 11C0 F00B                  		move.b	d0,($FFFFF00B).w
000015C0 4E75                       		rts	
000015C2                            ; End of function PlaySound_Special
000015C2                            
000015C2                            ; ===========================================================================
000015C2                            ; ---------------------------------------------------------------------------
000015C2                            ; Unused sound/music subroutine
000015C2                            ; ---------------------------------------------------------------------------
000015C2                            
000015C2                            PlaySound_Unk:
000015C2 11C0 F00C                  		move.b	d0,($FFFFF00C).w
000015C6 4E75                       		rts	
000015C8                            
000015C8                            ; ---------------------------------------------------------------------------
000015C8                            ; Subroutine to	pause the game
000015C8                            ; ---------------------------------------------------------------------------
000015C8                            
000015C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015C8                            
000015C8                            
000015C8                            PauseGame:				; XREF: Level_MainLoop; et al
000015C8 4E71                       		nop	
000015CA 4A38 FE12                  		tst.b	($FFFFFE12).w	; do you have any lives	left?
000015CE 6700                       		beq.s	Unpause		; if not, branch
000015D0 4A78 F63A                  		tst.w	($FFFFF63A).w	; is game already paused?
000015D4 6600                       		bne.s	loc_13BE	; if yes, branch
000015D6 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
000015DC 6700                       		beq.s	Pause_DoNothing	; if not, branch
000015DE                            
000015DE                            loc_13BE:
000015DE 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w ; freeze time
000015E4 11FC 0001 F003             		move.b	#1,($FFFFF003).w ; pause music
000015EA                            
000015EA                            loc_13CA:
000015EA 11FC 0010 F62A             		move.b	#$10,($FFFFF62A).w
000015F0 6100 0000                  		bsr.w	DelayProgram
000015F4 4A38 FFE1                  		tst.b	($FFFFFFE1).w	; is slow-motion cheat on?
000015F8 6700                       		beq.s	Pause_ChkStart	; if not, branch
000015FA 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
00001600 6700                       		beq.s	Pause_ChkBC	; if not, branch
00001602 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; set game mode to 4 (title screen)
00001608 4E71                       		nop	
0000160A 6000                       		bra.s	loc_1404
0000160C                            ; ===========================================================================
0000160C                            
0000160C                            Pause_ChkBC:				; XREF: PauseGame
0000160C 0838 0004 F604             		btst	#4,($FFFFF604).w ; is button B pressed?
00001612 6600                       		bne.s	Pause_SlowMo	; if yes, branch
00001614 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0000161A 6600                       		bne.s	Pause_SlowMo	; if yes, branch
0000161C                            
0000161C                            Pause_ChkStart:				; XREF: PauseGame
0000161C 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00001622 67C6                       		beq.s	loc_13CA	; if not, branch
00001624                            
00001624                            loc_1404:				; XREF: PauseGame
00001624 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
0000162A                            
0000162A                            Unpause:				; XREF: PauseGame
0000162A 31FC 0000 F63A             		move.w	#0,($FFFFF63A).w ; unpause the game
00001630                            
00001630                            Pause_DoNothing:			; XREF: PauseGame
00001630 4E75                       		rts	
00001632                            ; ===========================================================================
00001632                            
00001632                            Pause_SlowMo:				; XREF: PauseGame
00001632 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w
00001638 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
0000163E 4E75                       		rts	
00001640                            ; End of function PauseGame
00001640                            
00001640                            ; ---------------------------------------------------------------------------
00001640                            ; Subroutine to	display	patterns via the VDP
00001640                            ; ---------------------------------------------------------------------------
00001640                            
00001640                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001640                            
00001640                            
00001640                            ShowVDPGraphics:			; XREF: SegaScreen; TitleScreen; SS_BGLoad
00001640 4DF9 00C0 0000             		lea	($C00000).l,a6
00001646 283C 0080 0000             		move.l	#$800000,d4
0000164C                            
0000164C                            loc_142C:
0000164C 2D40 0004                  		move.l	d0,4(a6)
00001650 3601                       		move.w	d1,d3
00001652                            
00001652                            loc_1432:
00001652 3C99                       		move.w	(a1)+,(a6)
00001654 51CB FFFC                  		dbf	d3,loc_1432
00001658 D084                       		add.l	d4,d0
0000165A 51CA FFF0                  		dbf	d2,loc_142C
0000165E 4E75                       		rts	
00001660                            ; End of function ShowVDPGraphics
00001660                            
00001660                            ; ---------------------------------------------------------------------------
00001660                            ; Nemesis decompression	algorithm
00001660                            ; ---------------------------------------------------------------------------
00001660                            
00001660                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001660                            
00001660                            
00001660                            NemDec:
00001660 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
00001664 47F9 0000 0000             		lea	(loc_1502).l,a3
0000166A 49F9 00C0 0000             		lea	($C00000).l,a4
00001670 6000                       		bra.s	loc_145C
00001672                            ; ===========================================================================
00001672 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
00001676 47F9 0000 0000             		lea	(loc_1518).l,a3
0000167C                            
0000167C                            loc_145C:				; XREF: NemDec
0000167C 43F8 AA00                  		lea	($FFFFAA00).w,a1
00001680 3418                       		move.w	(a0)+,d2
00001682 E34A                       		lsl.w	#1,d2
00001684 6400                       		bcc.s	loc_146A
00001686 D6FC 000A                  		adda.w	#$A,a3
0000168A                            
0000168A                            loc_146A:
0000168A E54A                       		lsl.w	#2,d2
0000168C 3A42                       		movea.w	d2,a5
0000168E 7608                       		moveq	#8,d3
00001690 7400                       		moveq	#0,d2
00001692 7800                       		moveq	#0,d4
00001694 6100 0000                  		bsr.w	NemDec4
00001698 1A18                       		move.b	(a0)+,d5
0000169A E145                       		asl.w	#8,d5
0000169C 1A18                       		move.b	(a0)+,d5
0000169E 3C3C 0010                  		move.w	#$10,d6
000016A2 6100                       		bsr.s	NemDec2
000016A4 4CDF 3BFF                  		movem.l	(sp)+,d0-a1/a3-a5
000016A8 4E75                       		rts	
000016AA                            ; End of function NemDec
000016AA                            
000016AA                            
000016AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000016AA                            
000016AA                            
000016AA                            NemDec2:				; XREF: NemDec
000016AA 3E06                       		move.w	d6,d7
000016AC 5147                       		subq.w	#8,d7
000016AE 3205                       		move.w	d5,d1
000016B0 EE69                       		lsr.w	d7,d1
000016B2 0C01 00FC                  		cmpi.b	#-4,d1
000016B6 6400                       		bcc.s	loc_14D6
000016B8 0241 00FF                  		andi.w	#$FF,d1
000016BC D241                       		add.w	d1,d1
000016BE 1031 1000                  		move.b	(a1,d1.w),d0
000016C2 4880                       		ext.w	d0
000016C4 9C40                       		sub.w	d0,d6
000016C6 0C46 0009                  		cmpi.w	#9,d6
000016CA 6400                       		bcc.s	loc_14B2
000016CC 5046                       		addq.w	#8,d6
000016CE E145                       		asl.w	#8,d5
000016D0 1A18                       		move.b	(a0)+,d5
000016D2                            
000016D2                            loc_14B2:
000016D2 1231 1001                  		move.b	1(a1,d1.w),d1
000016D6 3001                       		move.w	d1,d0
000016D8 0241 000F                  		andi.w	#$F,d1
000016DC 0240 00F0                  		andi.w	#$F0,d0
000016E0                            
000016E0                            loc_14C0:				; XREF: NemDec3
000016E0 E848                       		lsr.w	#4,d0
000016E2                            
000016E2                            loc_14C2:				; XREF: NemDec3
000016E2 E98C                       		lsl.l	#4,d4
000016E4 8801                       		or.b	d1,d4
000016E6 5343                       		subq.w	#1,d3
000016E8 6600                       		bne.s	loc_14D0
000016EA 4ED3                       		jmp	(a3)
000016EC                            ; End of function NemDec2
000016EC                            
000016EC                            
000016EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000016EC                            
000016EC                            
000016EC                            NemDec3:				; XREF: loc_1502
000016EC 7800                       		moveq	#0,d4
000016EE 7608                       		moveq	#8,d3
000016F0                            
000016F0                            loc_14D0:				; XREF: NemDec2
000016F0 51C8 FFF0                  		dbf	d0,loc_14C2
000016F4 60B4                       		bra.s	NemDec2
000016F6                            ; ===========================================================================
000016F6                            
000016F6                            loc_14D6:				; XREF: NemDec2
000016F6 5D46                       		subq.w	#6,d6
000016F8 0C46 0009                  		cmpi.w	#9,d6
000016FC 6400                       		bcc.s	loc_14E4
000016FE 5046                       		addq.w	#8,d6
00001700 E145                       		asl.w	#8,d5
00001702 1A18                       		move.b	(a0)+,d5
00001704                            
00001704                            loc_14E4:				; XREF: NemDec3
00001704 5F46                       		subq.w	#7,d6
00001706 3205                       		move.w	d5,d1
00001708 EC69                       		lsr.w	d6,d1
0000170A 3001                       		move.w	d1,d0
0000170C 0241 000F                  		andi.w	#$F,d1
00001710 0240 0070                  		andi.w	#$70,d0
00001714 0C46 0009                  		cmpi.w	#9,d6
00001718 64C6                       		bcc.s	loc_14C0
0000171A 5046                       		addq.w	#8,d6
0000171C E145                       		asl.w	#8,d5
0000171E 1A18                       		move.b	(a0)+,d5
00001720 60BE                       		bra.s	loc_14C0
00001722                            ; End of function NemDec3
00001722                            
00001722                            ; ===========================================================================
00001722                            
00001722                            loc_1502:				; XREF: NemDec
00001722 2884                       		move.l	d4,(a4)
00001724 534D                       		subq.w	#1,a5
00001726 380D                       		move.w	a5,d4
00001728 66C2                       		bne.s	NemDec3
0000172A 4E75                       		rts	
0000172C                            ; ===========================================================================
0000172C B982                       		eor.l	d4,d2
0000172E 2882                       		move.l	d2,(a4)
00001730 534D                       		subq.w	#1,a5
00001732 380D                       		move.w	a5,d4
00001734 66B6                       		bne.s	NemDec3
00001736 4E75                       		rts	
00001738                            ; ===========================================================================
00001738                            
00001738                            loc_1518:				; XREF: NemDec
00001738 28C4                       		move.l	d4,(a4)+
0000173A 534D                       		subq.w	#1,a5
0000173C 380D                       		move.w	a5,d4
0000173E 66AC                       		bne.s	NemDec3
00001740 4E75                       		rts	
00001742                            ; ===========================================================================
00001742 B982                       		eor.l	d4,d2
00001744 28C2                       		move.l	d2,(a4)+
00001746 534D                       		subq.w	#1,a5
00001748 380D                       		move.w	a5,d4
0000174A 66A0                       		bne.s	NemDec3
0000174C 4E75                       		rts	
0000174E                            
0000174E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000174E                            
0000174E                            
0000174E                            NemDec4:				; XREF: NemDec
0000174E 1018                       		move.b	(a0)+,d0
00001750                            
00001750                            loc_1530:
00001750 0C00 00FF                  		cmpi.b	#-1,d0
00001754 6600                       		bne.s	loc_1538
00001756 4E75                       		rts	
00001758                            ; ===========================================================================
00001758                            
00001758                            loc_1538:				; XREF: NemDec4
00001758 3E00                       		move.w	d0,d7
0000175A                            
0000175A                            loc_153A:
0000175A 1018                       		move.b	(a0)+,d0
0000175C 0C00 0080                  		cmpi.b	#$80,d0
00001760 64EE                       		bcc.s	loc_1530
00001762 1200                       		move.b	d0,d1
00001764 0247 000F                  		andi.w	#$F,d7
00001768 0241 0070                  		andi.w	#$70,d1
0000176C 8E41                       		or.w	d1,d7
0000176E 0240 000F                  		andi.w	#$F,d0
00001772 1200                       		move.b	d0,d1
00001774 E149                       		lsl.w	#8,d1
00001776 8E41                       		or.w	d1,d7
00001778 7208                       		moveq	#8,d1
0000177A 9240                       		sub.w	d0,d1
0000177C 6600                       		bne.s	loc_1568
0000177E 1018                       		move.b	(a0)+,d0
00001780 D040                       		add.w	d0,d0
00001782 3387 0000                  		move.w	d7,(a1,d0.w)
00001786 60D2                       		bra.s	loc_153A
00001788                            ; ===========================================================================
00001788                            
00001788                            loc_1568:				; XREF: NemDec4
00001788 1018                       		move.b	(a0)+,d0
0000178A E368                       		lsl.w	d1,d0
0000178C D040                       		add.w	d0,d0
0000178E 7A01                       		moveq	#1,d5
00001790 E36D                       		lsl.w	d1,d5
00001792 5345                       		subq.w	#1,d5
00001794                            
00001794                            loc_1574:
00001794 3387 0000                  		move.w	d7,(a1,d0.w)
00001798 5440                       		addq.w	#2,d0
0000179A 51CD FFF8                  		dbf	d5,loc_1574
0000179E 60BA                       		bra.s	loc_153A
000017A0                            ; End of function NemDec4
000017A0                            
000017A0                            ; ---------------------------------------------------------------------------
000017A0                            ; Subroutine to	load pattern load cues
000017A0                            ; ---------------------------------------------------------------------------
000017A0                            
000017A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017A0                            
000017A0                            
000017A0                            LoadPLC:
000017A0 48E7 0060                  		movem.l	a1-a2,-(sp)
000017A4 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
000017AA D040                       		add.w	d0,d0
000017AC 3031 0000                  		move.w	(a1,d0.w),d0
000017B0 43F1 0000                  		lea	(a1,d0.w),a1
000017B4 45F8 F680                  		lea	($FFFFF680).w,a2
000017B8                            
000017B8                            loc_1598:
000017B8 4A92                       		tst.l	(a2)
000017BA 6700                       		beq.s	loc_15A0
000017BC 5C4A                       		addq.w	#6,a2
000017BE 60F8                       		bra.s	loc_1598
000017C0                            ; ===========================================================================
000017C0                            
000017C0                            loc_15A0:				; XREF: LoadPLC
000017C0 3019                       		move.w	(a1)+,d0
000017C2 6B00                       		bmi.s	loc_15AC
000017C4                            
000017C4                            loc_15A4:
000017C4 24D9                       		move.l	(a1)+,(a2)+
000017C6 34D9                       		move.w	(a1)+,(a2)+
000017C8 51C8 FFFA                  		dbf	d0,loc_15A4
000017CC                            
000017CC                            loc_15AC:
000017CC 4CDF 0600                  		movem.l	(sp)+,a1-a2
000017D0 4E75                       		rts	
000017D2                            ; End of function LoadPLC
000017D2                            
000017D2                            
000017D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017D2                            
000017D2                            
000017D2                            LoadPLC2:
000017D2 48E7 0060                  		movem.l	a1-a2,-(sp)
000017D6 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
000017DC D040                       		add.w	d0,d0
000017DE 3031 0000                  		move.w	(a1,d0.w),d0
000017E2 43F1 0000                  		lea	(a1,d0.w),a1
000017E6 6100                       		bsr.s	ClearPLC
000017E8 45F8 F680                  		lea	($FFFFF680).w,a2
000017EC 3019                       		move.w	(a1)+,d0
000017EE 6B00                       		bmi.s	loc_15D8
000017F0                            
000017F0                            loc_15D0:
000017F0 24D9                       		move.l	(a1)+,(a2)+
000017F2 34D9                       		move.w	(a1)+,(a2)+
000017F4 51C8 FFFA                  		dbf	d0,loc_15D0
000017F8                            
000017F8                            loc_15D8:
000017F8 4CDF 0600                  		movem.l	(sp)+,a1-a2
000017FC 4E75                       		rts	
000017FE                            ; End of function LoadPLC2
000017FE                            
000017FE                            ; ---------------------------------------------------------------------------
000017FE                            ; Subroutine to	clear the pattern load cues
000017FE                            ; ---------------------------------------------------------------------------
000017FE                            
000017FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017FE                            
000017FE                            
000017FE                            ClearPLC:				; XREF: LoadPLC2
000017FE 45F8 F680                  		lea	($FFFFF680).w,a2
00001802 701F                       		moveq	#$1F,d0
00001804                            
00001804                            ClearPLC_Loop:
00001804 429A                       		clr.l	(a2)+
00001806 51C8 FFFC                  		dbf	d0,ClearPLC_Loop
0000180A 4E75                       		rts	
0000180C                            ; End of function ClearPLC
0000180C                            
0000180C                            ; ---------------------------------------------------------------------------
0000180C                            ; Subroutine to	use graphics listed in a pattern load cue
0000180C                            ; ---------------------------------------------------------------------------
0000180C                            
0000180C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000180C                            
0000180C                            
0000180C                            RunPLC_RAM:				; XREF: Pal_FadeTo
0000180C 4AB8 F680                  		tst.l	($FFFFF680).w
00001810 6700                       		beq.s	locret_1640
00001812 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001816 6600                       		bne.s	locret_1640
00001818 2078 F680                  		movea.l	($FFFFF680).w,a0
0000181C 47F9 0000 1722             		lea	(loc_1502).l,a3
00001822 43F8 AA00                  		lea	($FFFFAA00).w,a1
00001826 3418                       		move.w	(a0)+,d2
00001828 6A00                       		bpl.s	loc_160E
0000182A D6FC 000A                  		adda.w	#$A,a3
0000182E                            
0000182E                            loc_160E:
0000182E 0242 7FFF                  		andi.w	#$7FFF,d2
00001832 31C2 F6F8                  		move.w	d2,($FFFFF6F8).w
00001836 6100 FF16                  		bsr.w	NemDec4
0000183A 1A18                       		move.b	(a0)+,d5
0000183C E145                       		asl.w	#8,d5
0000183E 1A18                       		move.b	(a0)+,d5
00001840 7C10                       		moveq	#$10,d6
00001842 7000                       		moveq	#0,d0
00001844 21C8 F680                  		move.l	a0,($FFFFF680).w
00001848 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
0000184C 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
00001850 21C0 F6E8                  		move.l	d0,($FFFFF6E8).w
00001854 21C0 F6EC                  		move.l	d0,($FFFFF6EC).w
00001858 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
0000185C 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
00001860                            
00001860                            locret_1640:
00001860 4E75                       		rts	
00001862                            ; End of function RunPLC_RAM
00001862                            
00001862                            
00001862                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001862                            
00001862                            
00001862                            sub_1642:				; XREF: loc_C44; loc_F54; loc_F9A
00001862 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001866 6700 0000                  		beq.w	locret_16DA
0000186A 31FC 0009 F6FA             		move.w	#9,($FFFFF6FA).w
00001870 7000                       		moveq	#0,d0
00001872 3038 F684                  		move.w	($FFFFF684).w,d0
00001876 0678 0120 F684             		addi.w	#$120,($FFFFF684).w
0000187C 6000                       		bra.s	loc_1676
0000187E                            ; End of function sub_1642
0000187E                            
0000187E                            
0000187E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000187E                            
0000187E                            
0000187E                            sub_165E:				; XREF: Demo_Time
0000187E 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001882 6700                       		beq.s	locret_16DA
00001884 31FC 0003 F6FA             		move.w	#3,($FFFFF6FA).w
0000188A 7000                       		moveq	#0,d0
0000188C 3038 F684                  		move.w	($FFFFF684).w,d0
00001890 0678 0060 F684             		addi.w	#$60,($FFFFF684).w
00001896                            
00001896                            loc_1676:				; XREF: sub_1642
00001896 49F9 00C0 0004             		lea	($C00004).l,a4
0000189C E588                       		lsl.l	#2,d0
0000189E E448                       		lsr.w	#2,d0
000018A0 0040 4000                  		ori.w	#$4000,d0
000018A4 4840                       		swap	d0
000018A6 2880                       		move.l	d0,(a4)
000018A8 594C                       		subq.w	#4,a4
000018AA 2078 F680                  		movea.l	($FFFFF680).w,a0
000018AE 2678 F6E0                  		movea.l	($FFFFF6E0).w,a3
000018B2 2038 F6E4                  		move.l	($FFFFF6E4).w,d0
000018B6 2238 F6E8                  		move.l	($FFFFF6E8).w,d1
000018BA 2438 F6EC                  		move.l	($FFFFF6EC).w,d2
000018BE 2A38 F6F0                  		move.l	($FFFFF6F0).w,d5
000018C2 2C38 F6F4                  		move.l	($FFFFF6F4).w,d6
000018C6 43F8 AA00                  		lea	($FFFFAA00).w,a1
000018CA                            
000018CA                            loc_16AA:				; XREF: sub_165E
000018CA 3A7C 0008                  		movea.w	#8,a5
000018CE 6100 FE1C                  		bsr.w	NemDec3
000018D2 5378 F6F8                  		subq.w	#1,($FFFFF6F8).w
000018D6 6700                       		beq.s	loc_16DC
000018D8 5378 F6FA                  		subq.w	#1,($FFFFF6FA).w
000018DC 66EC                       		bne.s	loc_16AA
000018DE 21C8 F680                  		move.l	a0,($FFFFF680).w
000018E2 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
000018E6 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
000018EA 21C1 F6E8                  		move.l	d1,($FFFFF6E8).w
000018EE 21C2 F6EC                  		move.l	d2,($FFFFF6EC).w
000018F2 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
000018F6 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
000018FA                            
000018FA                            locret_16DA:				; XREF: sub_1642
000018FA 4E75                       		rts	
000018FC                            ; ===========================================================================
000018FC                            
000018FC                            loc_16DC:				; XREF: sub_165E
000018FC 41F8 F680                  		lea	($FFFFF680).w,a0
00001900 7015                       		moveq	#$15,d0
00001902                            
00001902                            loc_16E2:				; XREF: sub_165E
00001902 20E8 0006                  		move.l	6(a0),(a0)+
00001906 51C8 FFFA                  		dbf	d0,loc_16E2
0000190A 4E75                       		rts	
0000190C                            ; End of function sub_165E
0000190C                            
0000190C                            ; ---------------------------------------------------------------------------
0000190C                            ; Subroutine to	execute	the pattern load cue
0000190C                            ; ---------------------------------------------------------------------------
0000190C                            
0000190C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000190C                            
0000190C                            
0000190C                            RunPLC_ROM:
0000190C 43F9 0000 0000             		lea	(ArtLoadCues).l,a1 ; load the PLC index
00001912 D040                       		add.w	d0,d0
00001914 3031 0000                  		move.w	(a1,d0.w),d0
00001918 43F1 0000                  		lea	(a1,d0.w),a1
0000191C 3219                       		move.w	(a1)+,d1	; load number of entries in the	PLC
0000191E                            
0000191E                            RunPLC_Loop:
0000191E 2059                       		movea.l	(a1)+,a0	; get art pointer
00001920 7000                       		moveq	#0,d0
00001922 3019                       		move.w	(a1)+,d0	; get VRAM address
00001924 E588                       		lsl.l	#2,d0		; divide address by $20
00001926 E448                       		lsr.w	#2,d0
00001928 0040 4000                  		ori.w	#$4000,d0
0000192C 4840                       		swap	d0
0000192E 23C0 00C0 0004             		move.l	d0,($C00004).l	; put the VRAM address into VDP
00001934 6100 FD2A                  		bsr.w	NemDec		; decompress
00001938 51C9 FFE4                  		dbf	d1,RunPLC_Loop	; loop for number of entries
0000193C 4E75                       		rts	
0000193E                            ; End of function RunPLC_ROM
0000193E                            
0000193E                            ; ---------------------------------------------------------------------------
0000193E                            ; Enigma decompression algorithm
0000193E                            ; ---------------------------------------------------------------------------
0000193E                            
0000193E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000193E                            
0000193E                            
0000193E                            EniDec:
0000193E 48E7 FF7C                  		movem.l	d0-d7/a1-a5,-(sp)
00001942 3640                       		movea.w	d0,a3
00001944 1018                       		move.b	(a0)+,d0
00001946 4880                       		ext.w	d0
00001948 3A40                       		movea.w	d0,a5
0000194A 1818                       		move.b	(a0)+,d4
0000194C E70C                       		lsl.b	#3,d4
0000194E 3458                       		movea.w	(a0)+,a2
00001950 D4CB                       		adda.w	a3,a2
00001952 3858                       		movea.w	(a0)+,a4
00001954 D8CB                       		adda.w	a3,a4
00001956 1A18                       		move.b	(a0)+,d5
00001958 E145                       		asl.w	#8,d5
0000195A 1A18                       		move.b	(a0)+,d5
0000195C 7C10                       		moveq	#$10,d6
0000195E                            
0000195E                            loc_173E:				; XREF: loc_1768
0000195E 7007                       		moveq	#7,d0
00001960 3E06                       		move.w	d6,d7
00001962 9E40                       		sub.w	d0,d7
00001964 3205                       		move.w	d5,d1
00001966 EE69                       		lsr.w	d7,d1
00001968 0241 007F                  		andi.w	#$7F,d1
0000196C 3401                       		move.w	d1,d2
0000196E 0C41 0040                  		cmpi.w	#$40,d1
00001972 6400                       		bcc.s	loc_1758
00001974 7006                       		moveq	#6,d0
00001976 E24A                       		lsr.w	#1,d2
00001978                            
00001978                            loc_1758:
00001978 6100 0000                  		bsr.w	sub_188C
0000197C 0242 000F                  		andi.w	#$F,d2
00001980 E849                       		lsr.w	#4,d1
00001982 D241                       		add.w	d1,d1
00001984 4EFB 1000                  		jmp	loc_17B4(pc,d1.w)
00001988                            ; End of function EniDec
00001988                            
00001988                            ; ===========================================================================
00001988                            
00001988                            loc_1768:				; XREF: loc_17B4
00001988 32CA                       		move.w	a2,(a1)+
0000198A 524A                       		addq.w	#1,a2
0000198C 51CA FFFA                  		dbf	d2,loc_1768
00001990 60CC                       		bra.s	loc_173E
00001992                            ; ===========================================================================
00001992                            
00001992                            loc_1772:				; XREF: loc_17B4
00001992 32CC                       		move.w	a4,(a1)+
00001994 51CA FFFC                  		dbf	d2,loc_1772
00001998 60C4                       		bra.s	loc_173E
0000199A                            ; ===========================================================================
0000199A                            
0000199A                            loc_177A:				; XREF: loc_17B4
0000199A 6100 0000                  		bsr.w	loc_17DC
0000199E                            
0000199E                            loc_177E:
0000199E 32C1                       		move.w	d1,(a1)+
000019A0 51CA FFFC                  		dbf	d2,loc_177E
000019A4 60B8                       		bra.s	loc_173E
000019A6                            ; ===========================================================================
000019A6                            
000019A6                            loc_1786:				; XREF: loc_17B4
000019A6 6100 0000                  		bsr.w	loc_17DC
000019AA                            
000019AA                            loc_178A:
000019AA 32C1                       		move.w	d1,(a1)+
000019AC 5241                       		addq.w	#1,d1
000019AE 51CA FFFA                  		dbf	d2,loc_178A
000019B2 60AA                       		bra.s	loc_173E
000019B4                            ; ===========================================================================
000019B4                            
000019B4                            loc_1794:				; XREF: loc_17B4
000019B4 6100 0000                  		bsr.w	loc_17DC
000019B8                            
000019B8                            loc_1798:
000019B8 32C1                       		move.w	d1,(a1)+
000019BA 5341                       		subq.w	#1,d1
000019BC 51CA FFFA                  		dbf	d2,loc_1798
000019C0 609C                       		bra.s	loc_173E
000019C2                            ; ===========================================================================
000019C2                            
000019C2                            loc_17A2:				; XREF: loc_17B4
000019C2 0C42 000F                  		cmpi.w	#$F,d2
000019C6 6700                       		beq.s	loc_17C4
000019C8                            
000019C8                            loc_17A8:
000019C8 6100 0000                  		bsr.w	loc_17DC
000019CC 32C1                       		move.w	d1,(a1)+
000019CE 51CA FFF8                  		dbf	d2,loc_17A8
000019D2 608A                       		bra.s	loc_173E
000019D4                            ; ===========================================================================
000019D4                            
000019D4                            loc_17B4:				; XREF: EniDec
000019D4 60B2                       		bra.s	loc_1768
000019D6                            ; ===========================================================================
000019D6 60B0                       		bra.s	loc_1768
000019D8                            ; ===========================================================================
000019D8 60B8                       		bra.s	loc_1772
000019DA                            ; ===========================================================================
000019DA 60B6                       		bra.s	loc_1772
000019DC                            ; ===========================================================================
000019DC 60BC                       		bra.s	loc_177A
000019DE                            ; ===========================================================================
000019DE 60C6                       		bra.s	loc_1786
000019E0                            ; ===========================================================================
000019E0 60D2                       		bra.s	loc_1794
000019E2                            ; ===========================================================================
000019E2 60DE                       		bra.s	loc_17A2
000019E4                            ; ===========================================================================
000019E4                            
000019E4                            loc_17C4:				; XREF: loc_17A2
000019E4 5348                       		subq.w	#1,a0
000019E6 0C46 0010                  		cmpi.w	#$10,d6
000019EA 6600                       		bne.s	loc_17CE
000019EC 5348                       		subq.w	#1,a0
000019EE                            
000019EE                            loc_17CE:
000019EE 3008                       		move.w	a0,d0
000019F0 E248                       		lsr.w	#1,d0
000019F2 6400                       		bcc.s	loc_17D6
000019F4 5248                       		addq.w	#1,a0
000019F6                            
000019F6                            loc_17D6:
000019F6 4CDF 3EFF                  		movem.l	(sp)+,d0-d7/a1-a5
000019FA 4E75                       		rts	
000019FC                            ; ===========================================================================
000019FC                            
000019FC                            loc_17DC:				; XREF: loc_17A2
000019FC 360B                       		move.w	a3,d3
000019FE 1204                       		move.b	d4,d1
00001A00 D201                       		add.b	d1,d1
00001A02 6400                       		bcc.s	loc_17EE
00001A04 5346                       		subq.w	#1,d6
00001A06 0D05                       		btst	d6,d5
00001A08 6700                       		beq.s	loc_17EE
00001A0A 0043 8000                  		ori.w	#-$8000,d3
00001A0E                            
00001A0E                            loc_17EE:
00001A0E D201                       		add.b	d1,d1
00001A10 6400                       		bcc.s	loc_17FC
00001A12 5346                       		subq.w	#1,d6
00001A14 0D05                       		btst	d6,d5
00001A16 6700                       		beq.s	loc_17FC
00001A18 0643 4000                  		addi.w	#$4000,d3
00001A1C                            
00001A1C                            loc_17FC:
00001A1C D201                       		add.b	d1,d1
00001A1E 6400                       		bcc.s	loc_180A
00001A20 5346                       		subq.w	#1,d6
00001A22 0D05                       		btst	d6,d5
00001A24 6700                       		beq.s	loc_180A
00001A26 0643 2000                  		addi.w	#$2000,d3
00001A2A                            
00001A2A                            loc_180A:
00001A2A D201                       		add.b	d1,d1
00001A2C 6400                       		bcc.s	loc_1818
00001A2E 5346                       		subq.w	#1,d6
00001A30 0D05                       		btst	d6,d5
00001A32 6700                       		beq.s	loc_1818
00001A34 0043 1000                  		ori.w	#$1000,d3
00001A38                            
00001A38                            loc_1818:
00001A38 D201                       		add.b	d1,d1
00001A3A 6400                       		bcc.s	loc_1826
00001A3C 5346                       		subq.w	#1,d6
00001A3E 0D05                       		btst	d6,d5
00001A40 6700                       		beq.s	loc_1826
00001A42 0043 0800                  		ori.w	#$800,d3
00001A46                            
00001A46                            loc_1826:
00001A46 3205                       		move.w	d5,d1
00001A48 3E06                       		move.w	d6,d7
00001A4A 9E4D                       		sub.w	a5,d7
00001A4C 6400                       		bcc.s	loc_1856
00001A4E 3C07                       		move.w	d7,d6
00001A50 0646 0010                  		addi.w	#$10,d6
00001A54 4447                       		neg.w	d7
00001A56 EF69                       		lsl.w	d7,d1
00001A58 1A10                       		move.b	(a0),d5
00001A5A EF3D                       		rol.b	d7,d5
00001A5C DE47                       		add.w	d7,d7
00001A5E CA7B 7000                  		and.w	word_186C-2(pc,d7.w),d5
00001A62 D245                       		add.w	d5,d1
00001A64                            
00001A64                            loc_1844:				; XREF: loc_1868
00001A64 300D                       		move.w	a5,d0
00001A66 D040                       		add.w	d0,d0
00001A68 C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00001A6C D243                       		add.w	d3,d1
00001A6E 1A18                       		move.b	(a0)+,d5
00001A70 E14D                       		lsl.w	#8,d5
00001A72 1A18                       		move.b	(a0)+,d5
00001A74 4E75                       		rts	
00001A76                            ; ===========================================================================
00001A76                            
00001A76                            loc_1856:				; XREF: loc_1826
00001A76 6700                       		beq.s	loc_1868
00001A78 EE69                       		lsr.w	d7,d1
00001A7A 300D                       		move.w	a5,d0
00001A7C D040                       		add.w	d0,d0
00001A7E C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00001A82 D243                       		add.w	d3,d1
00001A84 300D                       		move.w	a5,d0
00001A86 6000                       		bra.s	sub_188C
00001A88                            ; ===========================================================================
00001A88                            
00001A88                            loc_1868:				; XREF: loc_1856
00001A88 7C10                       		moveq	#$10,d6
00001A8A                            
00001A8A                            loc_186A:
00001A8A 60D8                       		bra.s	loc_1844
00001A8C                            ; ===========================================================================
00001A8C 0001 0003 0007 000F 001F+  word_186C:	dc.w 1,	3, 7, $F, $1F, $3F, $7F, $FF, $1FF, $3FF, $7FF
00001AA2 0FFF 1FFF 3FFF 7FFF FFFF   		dc.w $FFF, $1FFF, $3FFF, $7FFF,	$FFFF	; XREF: loc_1856
00001AAC                            
00001AAC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001AAC                            
00001AAC                            
00001AAC                            sub_188C:				; XREF: EniDec
00001AAC 9C40                       		sub.w	d0,d6
00001AAE 0C46 0009                  		cmpi.w	#9,d6
00001AB2 6400                       		bcc.s	locret_189A
00001AB4 5046                       		addq.w	#8,d6
00001AB6 E145                       		asl.w	#8,d5
00001AB8 1A18                       		move.b	(a0)+,d5
00001ABA                            
00001ABA                            locret_189A:
00001ABA 4E75                       		rts	
00001ABC                            ; End of function sub_188C
00001ABC                            
00001ABC                            ; ---------------------------------------------------------------------------
00001ABC                            ; Kosinski decompression algorithm
00001ABC                            ; ---------------------------------------------------------------------------
00001ABC                            
00001ABC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001ABC                            
00001ABC                            
00001ABC                            KosDec:
00001ABC                            
00001ABC =FFFFFFFE                  var_2		= -2
00001ABC =FFFFFFFF                  var_1		= -1
00001ABC                            
00001ABC 558F                       		subq.l	#2,sp
00001ABE 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001AC2 1E98                       		move.b	(a0)+,(sp)
00001AC4 3A17                       		move.w	(sp),d5
00001AC6 780F                       		moveq	#$F,d4
00001AC8                            
00001AC8                            loc_18A8:
00001AC8 E24D                       		lsr.w	#1,d5
00001ACA 40C6                       		move	sr,d6
00001ACC 51CC 0000                  		dbf	d4,loc_18BA
00001AD0 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001AD4 1E98                       		move.b	(a0)+,(sp)
00001AD6 3A17                       		move.w	(sp),d5
00001AD8 780F                       		moveq	#$F,d4
00001ADA                            
00001ADA                            loc_18BA:
00001ADA 44C6                       		move	d6,ccr
00001ADC 6400                       		bcc.s	loc_18C2
00001ADE 12D8                       		move.b	(a0)+,(a1)+
00001AE0 60E6                       		bra.s	loc_18A8
00001AE2                            ; ===========================================================================
00001AE2                            
00001AE2                            loc_18C2:				; XREF: KosDec
00001AE2 7600                       		moveq	#0,d3
00001AE4 E24D                       		lsr.w	#1,d5
00001AE6 40C6                       		move	sr,d6
00001AE8 51CC 0000                  		dbf	d4,loc_18D6
00001AEC 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001AF0 1E98                       		move.b	(a0)+,(sp)
00001AF2 3A17                       		move.w	(sp),d5
00001AF4 780F                       		moveq	#$F,d4
00001AF6                            
00001AF6                            loc_18D6:
00001AF6 44C6                       		move	d6,ccr
00001AF8 6500                       		bcs.s	loc_1906
00001AFA E24D                       		lsr.w	#1,d5
00001AFC 51CC 0000                  		dbf	d4,loc_18EA
00001B00 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001B04 1E98                       		move.b	(a0)+,(sp)
00001B06 3A17                       		move.w	(sp),d5
00001B08 780F                       		moveq	#$F,d4
00001B0A                            
00001B0A                            loc_18EA:
00001B0A E353                       		roxl.w	#1,d3
00001B0C E24D                       		lsr.w	#1,d5
00001B0E 51CC 0000                  		dbf	d4,loc_18FC
00001B12 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001B16 1E98                       		move.b	(a0)+,(sp)
00001B18 3A17                       		move.w	(sp),d5
00001B1A 780F                       		moveq	#$F,d4
00001B1C                            
00001B1C                            loc_18FC:
00001B1C E353                       		roxl.w	#1,d3
00001B1E 5243                       		addq.w	#1,d3
00001B20 74FF                       		moveq	#-1,d2
00001B22 1418                       		move.b	(a0)+,d2
00001B24 6000                       		bra.s	loc_191C
00001B26                            ; ===========================================================================
00001B26                            
00001B26                            loc_1906:				; XREF: loc_18C2
00001B26 1018                       		move.b	(a0)+,d0
00001B28 1218                       		move.b	(a0)+,d1
00001B2A 74FF                       		moveq	#-1,d2
00001B2C 1401                       		move.b	d1,d2
00001B2E EB4A                       		lsl.w	#5,d2
00001B30 1400                       		move.b	d0,d2
00001B32 0241 0007                  		andi.w	#7,d1
00001B36 6700                       		beq.s	loc_1928
00001B38 1601                       		move.b	d1,d3
00001B3A 5243                       		addq.w	#1,d3
00001B3C                            
00001B3C                            loc_191C:
00001B3C 1031 2000                  		move.b	(a1,d2.w),d0
00001B40 12C0                       		move.b	d0,(a1)+
00001B42 51CB FFF8                  		dbf	d3,loc_191C
00001B46 6080                       		bra.s	loc_18A8
00001B48                            ; ===========================================================================
00001B48                            
00001B48                            loc_1928:				; XREF: loc_1906
00001B48 1218                       		move.b	(a0)+,d1
00001B4A 6700                       		beq.s	loc_1938
00001B4C 0C01 0001                  		cmpi.b	#1,d1
00001B50 6700 FF76                  		beq.w	loc_18A8
00001B54 1601                       		move.b	d1,d3
00001B56 60E4                       		bra.s	loc_191C
00001B58                            ; ===========================================================================
00001B58                            
00001B58                            loc_1938:				; XREF: loc_1928
00001B58 548F                       		addq.l	#2,sp
00001B5A 4E75                       		rts	
00001B5C                            ; End of function KosDec
00001B5C                            
00001B5C                            ; ---------------------------------------------------------------------------
00001B5C                            ; Pallet cycling routine loading subroutine
00001B5C                            ; ---------------------------------------------------------------------------
00001B5C                            
00001B5C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001B5C                            
00001B5C                            
00001B5C                            PalCycle_Load:				; XREF: Demo; Level_MainLoop; End_MainLoop
00001B5C 7400                       		moveq	#0,d2
00001B5E 7000                       		moveq	#0,d0
00001B60 1038 FE10                  		move.b	($FFFFFE10).w,d0 ; get level number
00001B64 D040                       		add.w	d0,d0		; multiply by 2
00001B66 303B 0000                  		move.w	PalCycle(pc,d0.w),d0 ; load animated pallets offset index into d0
00001B6A 4EFB 0000                  		jmp	PalCycle(pc,d0.w) ; jump to PalCycle + offset index
00001B6E                            ; End of function PalCycle_Load
00001B6E                            
00001B6E                            ; ===========================================================================
00001B6E                            ; ---------------------------------------------------------------------------
00001B6E                            ; Pallet cycling routines
00001B6E                            ; ---------------------------------------------------------------------------
00001B6E 0000                       PalCycle:	dc.w PalCycle_GHZ-PalCycle
00001B70 0000                       		dc.w PalCycle_LZ-PalCycle
00001B72 0000                       		dc.w PalCycle_MZ-PalCycle
00001B74 0000                       		dc.w PalCycle_SLZ-PalCycle
00001B76 0000                       		dc.w PalCycle_SYZ-PalCycle
00001B78 0000                       		dc.w PalCycle_SBZ-PalCycle
00001B7A 0000                       		dc.w PalCycle_GHZ-PalCycle
00001B7C                            
00001B7C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001B7C                            
00001B7C                            
00001B7C                            PalCycle_Title:				; XREF: TitleScreen
00001B7C 41F9 0000 0000             		lea	(Pal_TitleCyc).l,a0
00001B82 6000                       		bra.s	loc_196A
00001B84                            ; ===========================================================================
00001B84                            
00001B84                            PalCycle_GHZ:				; XREF: PalCycle
00001B84 41F9 0000 0000             		lea	(Pal_GHZCyc).l,a0
00001B8A                            
00001B8A                            loc_196A:				; XREF: PalCycle_Title
00001B8A 5378 F634                  		subq.w	#1,($FFFFF634).w
00001B8E 6A00                       		bpl.s	locret_1990
00001B90 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001B96 3038 F632                  		move.w	($FFFFF632).w,d0
00001B9A 5278 F632                  		addq.w	#1,($FFFFF632).w
00001B9E 0240 0003                  		andi.w	#3,d0
00001BA2 E748                       		lsl.w	#3,d0
00001BA4 43F8 FB50                  		lea	($FFFFFB50).w,a1
00001BA8 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001BAC 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001BB0                            
00001BB0                            locret_1990:
00001BB0 4E75                       		rts	
00001BB2                            ; End of function PalCycle_Title
00001BB2                            
00001BB2                            
00001BB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001BB2                            
00001BB2                            
00001BB2                            PalCycle_LZ:				; XREF: PalCycle
00001BB2 5378 F634                  		subq.w	#1,($FFFFF634).w
00001BB6 6A00                       		bpl.s	loc_19D8
00001BB8 31FC 0002 F634             		move.w	#2,($FFFFF634).w
00001BBE 3038 F632                  		move.w	($FFFFF632).w,d0
00001BC2 5278 F632                  		addq.w	#1,($FFFFF632).w
00001BC6 0240 0003                  		andi.w	#3,d0
00001BCA E748                       		lsl.w	#3,d0
00001BCC 41F9 0000 0000             		lea	(Pal_LZCyc1).l,a0
00001BD2 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; check if level is SBZ3
00001BD8 6600                       		bne.s	loc_19C0
00001BDA 41F9 0000 0000             		lea	(Pal_SBZ3Cyc1).l,a0 ; load SBZ3	pallet instead
00001BE0                            
00001BE0                            loc_19C0:
00001BE0 43F8 FB56                  		lea	($FFFFFB56).w,a1
00001BE4 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001BE8 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001BEC 43F8 FAD6                  		lea	($FFFFFAD6).w,a1
00001BF0 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001BF4 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001BF8                            
00001BF8                            loc_19D8:
00001BF8 3038 FE04                  		move.w	($FFFFFE04).w,d0
00001BFC 0240 0007                  		andi.w	#7,d0
00001C00 103B 0000                  		move.b	byte_1A3C(pc,d0.w),d0
00001C04 6700                       		beq.s	locret_1A3A
00001C06 7201                       		moveq	#1,d1
00001C08 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001C0C 6700                       		beq.s	loc_19F0
00001C0E 4441                       		neg.w	d1
00001C10                            
00001C10                            loc_19F0:
00001C10 3038 F650                  		move.w	($FFFFF650).w,d0
00001C14 0240 0003                  		andi.w	#3,d0
00001C18 D041                       		add.w	d1,d0
00001C1A 0C40 0003                  		cmpi.w	#3,d0
00001C1E 6500                       		bcs.s	loc_1A0A
00001C20 3200                       		move.w	d0,d1
00001C22 7000                       		moveq	#0,d0
00001C24 4A41                       		tst.w	d1
00001C26 6A00                       		bpl.s	loc_1A0A
00001C28 7002                       		moveq	#2,d0
00001C2A                            
00001C2A                            loc_1A0A:
00001C2A 31C0 F650                  		move.w	d0,($FFFFF650).w
00001C2E D040                       		add.w	d0,d0
00001C30 3200                       		move.w	d0,d1
00001C32 D040                       		add.w	d0,d0
00001C34 D041                       		add.w	d1,d0
00001C36 41F9 0000 0000             		lea	(Pal_LZCyc2).l,a0
00001C3C 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001C40 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C44 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001C48 41F9 0000 0000             		lea	(Pal_LZCyc3).l,a0
00001C4E 43F8 FAF6                  		lea	($FFFFFAF6).w,a1
00001C52 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C56 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001C5A                            
00001C5A                            locret_1A3A:
00001C5A 4E75                       		rts	
00001C5C                            ; End of function PalCycle_LZ
00001C5C                            
00001C5C                            ; ===========================================================================
00001C5C 0100 0001 0000 0100        byte_1A3C:	dc.b 1,	0, 0, 1, 0, 0, 1, 0
00001C64                            ; ===========================================================================
00001C64                            
00001C64                            PalCycle_MZ:				; XREF: PalCycle
00001C64 4E75                       		rts	
00001C66                            
00001C66                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001C66                            
00001C66                            
00001C66                            PalCycle_SLZ:				; XREF: PalCycle
00001C66 5378 F634                  		subq.w	#1,($FFFFF634).w
00001C6A 6A00                       		bpl.s	locret_1A80
00001C6C 31FC 0007 F634             		move.w	#7,($FFFFF634).w
00001C72 3038 F632                  		move.w	($FFFFF632).w,d0
00001C76 5240                       		addq.w	#1,d0
00001C78 0C40 0006                  		cmpi.w	#6,d0
00001C7C 6500                       		bcs.s	loc_1A60
00001C7E 7000                       		moveq	#0,d0
00001C80                            
00001C80                            loc_1A60:
00001C80 31C0 F632                  		move.w	d0,($FFFFF632).w
00001C84 3200                       		move.w	d0,d1
00001C86 D241                       		add.w	d1,d1
00001C88 D041                       		add.w	d1,d0
00001C8A D040                       		add.w	d0,d0
00001C8C 41F9 0000 0000             		lea	(Pal_SLZCyc).l,a0
00001C92 43F8 FB56                  		lea	($FFFFFB56).w,a1
00001C96 32B0 0000                  		move.w	(a0,d0.w),(a1)
00001C9A 2370 0002 0004             		move.l	2(a0,d0.w),4(a1)
00001CA0                            
00001CA0                            locret_1A80:
00001CA0 4E75                       		rts	
00001CA2                            ; End of function PalCycle_SLZ
00001CA2                            
00001CA2                            
00001CA2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001CA2                            
00001CA2                            
00001CA2                            PalCycle_SYZ:				; XREF: PalCycle
00001CA2 5378 F634                  		subq.w	#1,($FFFFF634).w
00001CA6 6A00                       		bpl.s	locret_1AC6
00001CA8 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001CAE 3038 F632                  		move.w	($FFFFF632).w,d0
00001CB2 5278 F632                  		addq.w	#1,($FFFFF632).w
00001CB6 0240 0003                  		andi.w	#3,d0
00001CBA E548                       		lsl.w	#2,d0
00001CBC 3200                       		move.w	d0,d1
00001CBE D040                       		add.w	d0,d0
00001CC0 41F9 0000 0000             		lea	(Pal_SYZCyc1).l,a0
00001CC6 43F8 FB6E                  		lea	($FFFFFB6E).w,a1
00001CCA 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001CCE 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001CD2 41F9 0000 0000             		lea	(Pal_SYZCyc2).l,a0
00001CD8 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001CDC 32B0 1000                  		move.w	(a0,d1.w),(a1)
00001CE0 3370 1002 0004             		move.w	2(a0,d1.w),4(a1)
00001CE6                            
00001CE6                            locret_1AC6:
00001CE6 4E75                       		rts	
00001CE8                            ; End of function PalCycle_SYZ
00001CE8                            
00001CE8                            
00001CE8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001CE8                            
00001CE8                            
00001CE8                            PalCycle_SBZ:				; XREF: PalCycle
00001CE8 45F9 0000 0000             		lea	(Pal_SBZCycList).l,a2
00001CEE 4A38 FE11                  		tst.b	($FFFFFE11).w
00001CF2 6700                       		beq.s	loc_1ADA
00001CF4 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001CFA                            
00001CFA                            loc_1ADA:
00001CFA 43F8 F650                  		lea	($FFFFF650).w,a1
00001CFE 321A                       		move.w	(a2)+,d1
00001D00                            
00001D00                            loc_1AE0:
00001D00 5311                       		subq.b	#1,(a1)
00001D02 6B00                       		bmi.s	loc_1AEA
00001D04 5489                       		addq.l	#2,a1
00001D06 5C8A                       		addq.l	#6,a2
00001D08 6000                       		bra.s	loc_1B06
00001D0A                            ; ===========================================================================
00001D0A                            
00001D0A                            loc_1AEA:				; XREF: PalCycle_SBZ
00001D0A 12DA                       		move.b	(a2)+,(a1)+
00001D0C 1011                       		move.b	(a1),d0
00001D0E 5200                       		addq.b	#1,d0
00001D10 B01A                       		cmp.b	(a2)+,d0
00001D12 6500                       		bcs.s	loc_1AF6
00001D14 7000                       		moveq	#0,d0
00001D16                            
00001D16                            loc_1AF6:
00001D16 12C0                       		move.b	d0,(a1)+
00001D18 0240 000F                  		andi.w	#$F,d0
00001D1C D040                       		add.w	d0,d0
00001D1E 305A                       		movea.w	(a2)+,a0
00001D20 365A                       		movea.w	(a2)+,a3
00001D22 36B0 0000                  		move.w	(a0,d0.w),(a3)
00001D26                            
00001D26                            loc_1B06:				; XREF: PalCycle_SBZ
00001D26 51C9 FFD8                  		dbf	d1,loc_1AE0
00001D2A 5378 F634                  		subq.w	#1,($FFFFF634).w
00001D2E 6A00                       		bpl.s	locret_1B64
00001D30 41F9 0000 0000             		lea	(Pal_SBZCyc4).l,a0
00001D36 31FC 0001 F634             		move.w	#1,($FFFFF634).w
00001D3C 4A38 FE11                  		tst.b	($FFFFFE11).w
00001D40 6700                       		beq.s	loc_1B2E
00001D42 41F9 0000 0000             		lea	(Pal_SBZCyc10).l,a0
00001D48 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00001D4E                            
00001D4E                            loc_1B2E:
00001D4E 72FF                       		moveq	#-1,d1
00001D50 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001D54 6700                       		beq.s	loc_1B38
00001D56 4441                       		neg.w	d1
00001D58                            
00001D58                            loc_1B38:
00001D58 3038 F632                  		move.w	($FFFFF632).w,d0
00001D5C 0240 0003                  		andi.w	#3,d0
00001D60 D041                       		add.w	d1,d0
00001D62 0C40 0003                  		cmpi.w	#3,d0
00001D66 6500                       		bcs.s	loc_1B52
00001D68 3200                       		move.w	d0,d1
00001D6A 7000                       		moveq	#0,d0
00001D6C 4A41                       		tst.w	d1
00001D6E 6A00                       		bpl.s	loc_1B52
00001D70 7002                       		moveq	#2,d0
00001D72                            
00001D72                            loc_1B52:
00001D72 31C0 F632                  		move.w	d0,($FFFFF632).w
00001D76 D040                       		add.w	d0,d0
00001D78 43F8 FB58                  		lea	($FFFFFB58).w,a1
00001D7C 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001D80 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001D84                            
00001D84                            locret_1B64:
00001D84 4E75                       		rts	
00001D86                            ; End of function PalCycle_SBZ
00001D86                            
00001D86                            ; ===========================================================================
00001D86                            Pal_TitleCyc:	incbin	pallet\c_title.bin
00001DA6                            Pal_GHZCyc:	incbin	pallet\c_ghz.bin
00001DC6                            Pal_LZCyc1:	incbin	pallet\c_lz_wat.bin	; waterfalls pallet
00001DE6                            Pal_LZCyc2:	incbin	pallet\c_lz_bel.bin	; conveyor belt pallet
00001DF8                            Pal_LZCyc3:	incbin	pallet\c_lz_buw.bin	; conveyor belt (underwater) pallet
00001E0A                            Pal_SBZ3Cyc1:	incbin	pallet\c_sbz3_w.bin	; waterfalls pallet
00001E72                            Pal_SLZCyc:	incbin	pallet\c_slz.bin
00001E96                            Pal_SYZCyc1:	incbin	pallet\c_syz_1.bin
00001EB6                            Pal_SYZCyc2:	incbin	pallet\c_syz_2.bin
00001EC6                            
00001EC6                            Pal_SBZCycList:
00001EC6                            	include "_inc\SBZ pallet script 1.asm"
00001EC6                            ; ---------------------------------------------------------------------------
00001EC6                            ; Scrap Brain Zone 1 pallet cycling script
00001EC6                            ; ---------------------------------------------------------------------------
00001EC6 0008                       	dc.w 8			; number of entries - 1
00001EC8 0708                       	dc.b 7,	8		; duration in frames, number of	colours
00001ECA 0000                       	dc.w Pal_SBZCyc1	; pallet pointer
00001ECC FB50                       	dc.w $FB50		; RAM address
00001ECE 0D08                       	dc.b $D, 8
00001ED0 0000                       	dc.w Pal_SBZCyc2
00001ED2 FB52                       	dc.w $FB52
00001ED4 0E08                       	dc.b $E, 8
00001ED6 0000                       	dc.w Pal_SBZCyc3
00001ED8 FB6E                       	dc.w $FB6E
00001EDA 0B08                       	dc.b $B, 8
00001EDC 0000                       	dc.w Pal_SBZCyc5
00001EDE FB70                       	dc.w $FB70
00001EE0 0708                       	dc.b 7,	8
00001EE2 0000                       	dc.w Pal_SBZCyc6
00001EE4 FB72                       	dc.w $FB72
00001EE6 1C10                       	dc.b $1C, $10
00001EE8 0000                       	dc.w Pal_SBZCyc7
00001EEA FB7E                       	dc.w $FB7E
00001EEC 0303                       	dc.b 3,	3
00001EEE 0000                       	dc.w Pal_SBZCyc8
00001EF0 FB78                       	dc.w $FB78
00001EF2 0303                       	dc.b 3,	3
00001EF4 0000                       	dc.w Pal_SBZCyc8+2
00001EF6 FB7A                       	dc.w $FB7A
00001EF8 0303                       	dc.b 3,	3
00001EFA 0000                       	dc.w Pal_SBZCyc8+4
00001EFC FB7C                       	dc.w $FB7C
00001EFE                            	even
00001EFE                            	even
00001EFE                            
00001EFE                            Pal_SBZCycList2:
00001EFE                            	include "_inc\SBZ pallet script 2.asm"
00001EFE                            ; ---------------------------------------------------------------------------
00001EFE                            ; Scrap Brain Zone 2 pallet cycling script
00001EFE                            ; ---------------------------------------------------------------------------
00001EFE 0006                       	dc.w 6
00001F00 0708                       	dc.b 7,	8
00001F02 0000                       	dc.w Pal_SBZCyc1
00001F04 FB50                       	dc.w $FB50
00001F06 0D08                       	dc.b $D, 8
00001F08 0000                       	dc.w Pal_SBZCyc2
00001F0A FB52                       	dc.w $FB52
00001F0C 0908                       	dc.b 9,	8
00001F0E 0000                       	dc.w Pal_SBZCyc9
00001F10 FB70                       	dc.w $FB70
00001F12 0708                       	dc.b 7,	8
00001F14 0000                       	dc.w Pal_SBZCyc6
00001F16 FB72                       	dc.w $FB72
00001F18 0303                       	dc.b 3,	3
00001F1A 0000                       	dc.w Pal_SBZCyc8
00001F1C FB78                       	dc.w $FB78
00001F1E 0303                       	dc.b 3,	3
00001F20 0000                       	dc.w Pal_SBZCyc8+2
00001F22 FB7A                       	dc.w $FB7A
00001F24 0303                       	dc.b 3,	3
00001F26 0000                       	dc.w Pal_SBZCyc8+4
00001F28 FB7C                       	dc.w $FB7C
00001F2A                            	even
00001F2A                            	even
00001F2A                            
00001F2A                            Pal_SBZCyc1:	incbin	pallet\c_sbz_1.bin
00001F3A                            Pal_SBZCyc2:	incbin	pallet\c_sbz_2.bin
00001F4A                            Pal_SBZCyc3:	incbin	pallet\c_sbz_3.bin
00001F5A                            Pal_SBZCyc4:	incbin	pallet\c_sbz_4.bin
00001F66                            Pal_SBZCyc5:	incbin	pallet\c_sbz_5.bin
00001F76                            Pal_SBZCyc6:	incbin	pallet\c_sbz_6.bin
00001F86                            Pal_SBZCyc7:	incbin	pallet\c_sbz_7.bin
00001FA6                            Pal_SBZCyc8:	incbin	pallet\c_sbz_8.bin
00001FB0                            Pal_SBZCyc9:	incbin	pallet\c_sbz_9.bin
00001FC0                            Pal_SBZCyc10:	incbin	pallet\c_sbz_10.bin
00001FCC                            ; ---------------------------------------------------------------------------
00001FCC                            ; Subroutine to	fade out and fade in
00001FCC                            ; ---------------------------------------------------------------------------
00001FCC                            
00001FCC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001FCC                            
00001FCC                            
00001FCC                            Pal_FadeTo:
00001FCC 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00001FD2                            
00001FD2                            Pal_FadeTo2:
00001FD2 7000                       		moveq	#0,d0
00001FD4 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001FD8 1038 F626                  		move.b	($FFFFF626).w,d0
00001FDC D0C0                       		adda.w	d0,a0
00001FDE 7200                       		moveq	#0,d1
00001FE0 1038 F627                  		move.b	($FFFFF627).w,d0
00001FE4                            
00001FE4                            Pal_ToBlack:
00001FE4 30C1                       		move.w	d1,(a0)+
00001FE6 51C8 FFFC                  		dbf	d0,Pal_ToBlack	; fill pallet with $000	(black)
00001FEA                            
00001FEA 383C 0015                  		move.w	#$15,d4
00001FEE                            
00001FEE                            loc_1DCE:
00001FEE 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001FF4 6100 0000                  		bsr.w	DelayProgram
00001FF8 6100                       		bsr.s	Pal_FadeIn
00001FFA 6100 F810                  		bsr.w	RunPLC_RAM
00001FFE 51CC FFEE                  		dbf	d4,loc_1DCE
00002002 4E75                       		rts	
00002004                            ; End of function Pal_FadeTo
00002004                            
00002004                            ; ---------------------------------------------------------------------------
00002004                            ; Pallet fade-in subroutine
00002004                            ; ---------------------------------------------------------------------------
00002004                            
00002004                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002004                            
00002004                            
00002004                            Pal_FadeIn:				; XREF: Pal_FadeTo
00002004 7000                       		moveq	#0,d0
00002006 41F8 FB00                  		lea	($FFFFFB00).w,a0
0000200A 43F8 FB80                  		lea	($FFFFFB80).w,a1
0000200E 1038 F626                  		move.b	($FFFFF626).w,d0
00002012 D0C0                       		adda.w	d0,a0
00002014 D2C0                       		adda.w	d0,a1
00002016 1038 F627                  		move.b	($FFFFF627).w,d0
0000201A                            
0000201A                            loc_1DFA:
0000201A 6100                       		bsr.s	Pal_AddColor
0000201C 51C8 FFFC                  		dbf	d0,loc_1DFA
00002020 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00002026 6600                       		bne.s	locret_1E24
00002028 7000                       		moveq	#0,d0
0000202A 41F8 FA80                  		lea	($FFFFFA80).w,a0
0000202E 43F8 FA00                  		lea	($FFFFFA00).w,a1
00002032 1038 F626                  		move.b	($FFFFF626).w,d0
00002036 D0C0                       		adda.w	d0,a0
00002038 D2C0                       		adda.w	d0,a1
0000203A 1038 F627                  		move.b	($FFFFF627).w,d0
0000203E                            
0000203E                            loc_1E1E:
0000203E 6100                       		bsr.s	Pal_AddColor
00002040 51C8 FFFC                  		dbf	d0,loc_1E1E
00002044                            
00002044                            locret_1E24:
00002044 4E75                       		rts	
00002046                            ; End of function Pal_FadeIn
00002046                            
00002046                            
00002046                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002046                            
00002046                            
00002046                            Pal_AddColor:				; XREF: Pal_FadeIn
00002046 3419                       		move.w	(a1)+,d2
00002048 3610                       		move.w	(a0),d3
0000204A B642                       		cmp.w	d2,d3
0000204C 6700                       		beq.s	loc_1E4E
0000204E 3203                       		move.w	d3,d1
00002050 0641 0200                  		addi.w	#$200,d1	; increase blue	value
00002054 B242                       		cmp.w	d2,d1		; has blue reached threshold level?
00002056 6200                       		bhi.s	Pal_AddGreen	; if yes, branch
00002058 30C1                       		move.w	d1,(a0)+	; update pallet
0000205A 4E75                       		rts	
0000205C                            ; ===========================================================================
0000205C                            
0000205C                            Pal_AddGreen:				; XREF: Pal_AddColor
0000205C 3203                       		move.w	d3,d1
0000205E 0641 0020                  		addi.w	#$20,d1		; increase green value
00002062 B242                       		cmp.w	d2,d1
00002064 6200                       		bhi.s	Pal_AddRed
00002066 30C1                       		move.w	d1,(a0)+	; update pallet
00002068 4E75                       		rts	
0000206A                            ; ===========================================================================
0000206A                            
0000206A                            Pal_AddRed:				; XREF: Pal_AddGreen
0000206A 5458                       		addq.w	#2,(a0)+	; increase red value
0000206C 4E75                       		rts	
0000206E                            ; ===========================================================================
0000206E                            
0000206E                            loc_1E4E:				; XREF: Pal_AddColor
0000206E 5448                       		addq.w	#2,a0
00002070 4E75                       		rts	
00002072                            ; End of function Pal_AddColor
00002072                            
00002072                            
00002072                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002072                            
00002072                            
00002072                            Pal_FadeFrom:
00002072 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00002078 383C 0015                  		move.w	#$15,d4
0000207C                            
0000207C                            loc_1E5C:
0000207C 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00002082 6100 0000                  		bsr.w	DelayProgram
00002086 6100                       		bsr.s	Pal_FadeOut
00002088 6100 F782                  		bsr.w	RunPLC_RAM
0000208C 51CC FFEE                  		dbf	d4,loc_1E5C
00002090 4E75                       		rts	
00002092                            ; End of function Pal_FadeFrom
00002092                            
00002092                            ; ---------------------------------------------------------------------------
00002092                            ; Pallet fade-out subroutine
00002092                            ; ---------------------------------------------------------------------------
00002092                            
00002092                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002092                            
00002092                            
00002092                            Pal_FadeOut:				; XREF: Pal_FadeFrom
00002092 7000                       		moveq	#0,d0
00002094 41F8 FB00                  		lea	($FFFFFB00).w,a0
00002098 1038 F626                  		move.b	($FFFFF626).w,d0
0000209C D0C0                       		adda.w	d0,a0
0000209E 1038 F627                  		move.b	($FFFFF627).w,d0
000020A2                            
000020A2                            loc_1E82:
000020A2 6100                       		bsr.s	Pal_DecColor
000020A4 51C8 FFFC                  		dbf	d0,loc_1E82
000020A8                            
000020A8 7000                       		moveq	#0,d0
000020AA 41F8 FA80                  		lea	($FFFFFA80).w,a0
000020AE 1038 F626                  		move.b	($FFFFF626).w,d0
000020B2 D0C0                       		adda.w	d0,a0
000020B4 1038 F627                  		move.b	($FFFFF627).w,d0
000020B8                            
000020B8                            loc_1E98:
000020B8 6100                       		bsr.s	Pal_DecColor
000020BA 51C8 FFFC                  		dbf	d0,loc_1E98
000020BE 4E75                       		rts	
000020C0                            ; End of function Pal_FadeOut
000020C0                            
000020C0                            
000020C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020C0                            
000020C0                            
000020C0                            Pal_DecColor:				; XREF: Pal_FadeOut
000020C0 3410                       		move.w	(a0),d2
000020C2 6700                       		beq.s	loc_1ECC
000020C4 3202                       		move.w	d2,d1
000020C6 0241 000E                  		andi.w	#$E,d1
000020CA 6700                       		beq.s	Pal_DecGreen
000020CC 5558                       		subq.w	#2,(a0)+	; decrease red value
000020CE 4E75                       		rts	
000020D0                            ; ===========================================================================
000020D0                            
000020D0                            Pal_DecGreen:				; XREF: Pal_DecColor
000020D0 3202                       		move.w	d2,d1
000020D2 0241 00E0                  		andi.w	#$E0,d1
000020D6 6700                       		beq.s	Pal_DecBlue
000020D8 0458 0020                  		subi.w	#$20,(a0)+	; decrease green value
000020DC 4E75                       		rts	
000020DE                            ; ===========================================================================
000020DE                            
000020DE                            Pal_DecBlue:				; XREF: Pal_DecGreen
000020DE 3202                       		move.w	d2,d1
000020E0 0241 0E00                  		andi.w	#$E00,d1
000020E4 6700                       		beq.s	loc_1ECC
000020E6 0458 0200                  		subi.w	#$200,(a0)+	; decrease blue	value
000020EA 4E75                       		rts	
000020EC                            ; ===========================================================================
000020EC                            
000020EC                            loc_1ECC:				; XREF: Pal_DecColor
000020EC 5448                       		addq.w	#2,a0
000020EE 4E75                       		rts	
000020F0                            ; End of function Pal_DecColor
000020F0                            
000020F0                            ; ---------------------------------------------------------------------------
000020F0                            ; Subroutine to	fill the pallet	with white (special stage)
000020F0                            ; ---------------------------------------------------------------------------
000020F0                            
000020F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020F0                            
000020F0                            
000020F0                            Pal_MakeWhite:				; XREF: SpecialStage
000020F0 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000020F6 7000                       		moveq	#0,d0
000020F8 41F8 FB00                  		lea	($FFFFFB00).w,a0
000020FC 1038 F626                  		move.b	($FFFFF626).w,d0
00002100 D0C0                       		adda.w	d0,a0
00002102 323C 0EEE                  		move.w	#$EEE,d1
00002106 1038 F627                  		move.b	($FFFFF627).w,d0
0000210A                            
0000210A                            PalWhite_Loop:
0000210A 30C1                       		move.w	d1,(a0)+
0000210C 51C8 FFFC                  		dbf	d0,PalWhite_Loop
00002110 383C 0015                  		move.w	#$15,d4
00002114                            
00002114                            loc_1EF4:
00002114 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
0000211A 6100 0000                  		bsr.w	DelayProgram
0000211E 6100                       		bsr.s	Pal_WhiteToBlack
00002120 6100 F6EA                  		bsr.w	RunPLC_RAM
00002124 51CC FFEE                  		dbf	d4,loc_1EF4
00002128 4E75                       		rts	
0000212A                            ; End of function Pal_MakeWhite
0000212A                            
0000212A                            
0000212A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000212A                            
0000212A                            
0000212A                            Pal_WhiteToBlack:			; XREF: Pal_MakeWhite
0000212A 7000                       		moveq	#0,d0
0000212C 41F8 FB00                  		lea	($FFFFFB00).w,a0
00002130 43F8 FB80                  		lea	($FFFFFB80).w,a1
00002134 1038 F626                  		move.b	($FFFFF626).w,d0
00002138 D0C0                       		adda.w	d0,a0
0000213A D2C0                       		adda.w	d0,a1
0000213C 1038 F627                  		move.b	($FFFFF627).w,d0
00002140                            
00002140                            loc_1F20:
00002140 6100                       		bsr.s	Pal_DecColor2
00002142 51C8 FFFC                  		dbf	d0,loc_1F20
00002146                            
00002146 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0000214C 6600                       		bne.s	locret_1F4A
0000214E 7000                       		moveq	#0,d0
00002150 41F8 FA80                  		lea	($FFFFFA80).w,a0
00002154 43F8 FA00                  		lea	($FFFFFA00).w,a1
00002158 1038 F626                  		move.b	($FFFFF626).w,d0
0000215C D0C0                       		adda.w	d0,a0
0000215E D2C0                       		adda.w	d0,a1
00002160 1038 F627                  		move.b	($FFFFF627).w,d0
00002164                            
00002164                            loc_1F44:
00002164 6100                       		bsr.s	Pal_DecColor2
00002166 51C8 FFFC                  		dbf	d0,loc_1F44
0000216A                            
0000216A                            locret_1F4A:
0000216A 4E75                       		rts	
0000216C                            ; End of function Pal_WhiteToBlack
0000216C                            
0000216C                            
0000216C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000216C                            
0000216C                            
0000216C                            Pal_DecColor2:				; XREF: Pal_WhiteToBlack
0000216C 3419                       		move.w	(a1)+,d2
0000216E 3610                       		move.w	(a0),d3
00002170 B642                       		cmp.w	d2,d3
00002172 6700                       		beq.s	loc_1F78
00002174 3203                       		move.w	d3,d1
00002176 0441 0200                  		subi.w	#$200,d1	; decrease blue	value
0000217A 6500                       		bcs.s	loc_1F64
0000217C B242                       		cmp.w	d2,d1
0000217E 6500                       		bcs.s	loc_1F64
00002180 30C1                       		move.w	d1,(a0)+
00002182 4E75                       		rts	
00002184                            ; ===========================================================================
00002184                            
00002184                            loc_1F64:				; XREF: Pal_DecColor2
00002184 3203                       		move.w	d3,d1
00002186 0441 0020                  		subi.w	#$20,d1		; decrease green value
0000218A 6500                       		bcs.s	loc_1F74
0000218C B242                       		cmp.w	d2,d1
0000218E 6500                       		bcs.s	loc_1F74
00002190 30C1                       		move.w	d1,(a0)+
00002192 4E75                       		rts	
00002194                            ; ===========================================================================
00002194                            
00002194                            loc_1F74:				; XREF: loc_1F64
00002194 5558                       		subq.w	#2,(a0)+	; decrease red value
00002196 4E75                       		rts	
00002198                            ; ===========================================================================
00002198                            
00002198                            loc_1F78:				; XREF: Pal_DecColor2
00002198 5448                       		addq.w	#2,a0
0000219A 4E75                       		rts	
0000219C                            ; End of function Pal_DecColor2
0000219C                            
0000219C                            ; ---------------------------------------------------------------------------
0000219C                            ; Subroutine to	make a white flash when	you enter a special stage
0000219C                            ; ---------------------------------------------------------------------------
0000219C                            
0000219C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000219C                            
0000219C                            
0000219C                            Pal_MakeFlash:				; XREF: SpecialStage
0000219C 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000021A2 383C 0015                  		move.w	#$15,d4
000021A6                            
000021A6                            loc_1F86:
000021A6 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
000021AC 6100 0000                  		bsr.w	DelayProgram
000021B0 6100                       		bsr.s	Pal_ToWhite
000021B2 6100 F658                  		bsr.w	RunPLC_RAM
000021B6 51CC FFEE                  		dbf	d4,loc_1F86
000021BA 4E75                       		rts	
000021BC                            ; End of function Pal_MakeFlash
000021BC                            
000021BC                            
000021BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021BC                            
000021BC                            
000021BC                            Pal_ToWhite:				; XREF: Pal_MakeFlash
000021BC 7000                       		moveq	#0,d0
000021BE 41F8 FB00                  		lea	($FFFFFB00).w,a0
000021C2 1038 F626                  		move.b	($FFFFF626).w,d0
000021C6 D0C0                       		adda.w	d0,a0
000021C8 1038 F627                  		move.b	($FFFFF627).w,d0
000021CC                            
000021CC                            loc_1FAC:
000021CC 6100                       		bsr.s	Pal_AddColor2
000021CE 51C8 FFFC                  		dbf	d0,loc_1FAC
000021D2 7000                       		moveq	#0,d0
000021D4 41F8 FA80                  		lea	($FFFFFA80).w,a0
000021D8 1038 F626                  		move.b	($FFFFF626).w,d0
000021DC D0C0                       		adda.w	d0,a0
000021DE 1038 F627                  		move.b	($FFFFF627).w,d0
000021E2                            
000021E2                            loc_1FC2:
000021E2 6100                       		bsr.s	Pal_AddColor2
000021E4 51C8 FFFC                  		dbf	d0,loc_1FC2
000021E8 4E75                       		rts	
000021EA                            ; End of function Pal_ToWhite
000021EA                            
000021EA                            
000021EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021EA                            
000021EA                            
000021EA                            Pal_AddColor2:				; XREF: Pal_ToWhite
000021EA 3410                       		move.w	(a0),d2
000021EC 0C42 0EEE                  		cmpi.w	#$EEE,d2
000021F0 6700                       		beq.s	loc_2006
000021F2 3202                       		move.w	d2,d1
000021F4 0241 000E                  		andi.w	#$E,d1
000021F8 0C41 000E                  		cmpi.w	#$E,d1
000021FC 6700                       		beq.s	loc_1FE2
000021FE 5458                       		addq.w	#2,(a0)+	; increase red value
00002200 4E75                       		rts	
00002202                            ; ===========================================================================
00002202                            
00002202                            loc_1FE2:				; XREF: Pal_AddColor2
00002202 3202                       		move.w	d2,d1
00002204 0241 00E0                  		andi.w	#$E0,d1
00002208 0C41 00E0                  		cmpi.w	#$E0,d1
0000220C 6700                       		beq.s	loc_1FF4
0000220E 0658 0020                  		addi.w	#$20,(a0)+	; increase green value
00002212 4E75                       		rts	
00002214                            ; ===========================================================================
00002214                            
00002214                            loc_1FF4:				; XREF: loc_1FE2
00002214 3202                       		move.w	d2,d1
00002216 0241 0E00                  		andi.w	#$E00,d1
0000221A 0C41 0E00                  		cmpi.w	#$E00,d1
0000221E 6700                       		beq.s	loc_2006
00002220 0658 0200                  		addi.w	#$200,(a0)+	; increase blue	value
00002224 4E75                       		rts	
00002226                            ; ===========================================================================
00002226                            
00002226                            loc_2006:				; XREF: Pal_AddColor2
00002226 5448                       		addq.w	#2,a0
00002228 4E75                       		rts	
0000222A                            ; End of function Pal_AddColor2
0000222A                            
0000222A                            ; ---------------------------------------------------------------------------
0000222A                            ; Pallet cycling routine - Sega	logo
0000222A                            ; ---------------------------------------------------------------------------
0000222A                            
0000222A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000222A                            
0000222A                            
0000222A                            PalCycle_Sega:				; XREF: SegaScreen
0000222A 4A38 F635                  		tst.b	($FFFFF635).w
0000222E 6600                       		bne.s	loc_206A
00002230 43F8 FB20                  		lea	($FFFFFB20).w,a1
00002234 41F9 0000 0000             		lea	(Pal_Sega1).l,a0
0000223A 7205                       		moveq	#5,d1
0000223C 3038 F632                  		move.w	($FFFFF632).w,d0
00002240                            
00002240                            loc_2020:
00002240 6A00                       		bpl.s	loc_202A
00002242 5448                       		addq.w	#2,a0
00002244 5341                       		subq.w	#1,d1
00002246 5440                       		addq.w	#2,d0
00002248 60F6                       		bra.s	loc_2020
0000224A                            ; ===========================================================================
0000224A                            
0000224A                            loc_202A:				; XREF: PalCycle_Sega
0000224A 3400                       		move.w	d0,d2
0000224C 0242 001E                  		andi.w	#$1E,d2
00002250 6600                       		bne.s	loc_2034
00002252 5440                       		addq.w	#2,d0
00002254                            
00002254                            loc_2034:
00002254 0C40 0060                  		cmpi.w	#$60,d0
00002258 6400                       		bcc.s	loc_203E
0000225A 3398 0000                  		move.w	(a0)+,(a1,d0.w)
0000225E                            
0000225E                            loc_203E:
0000225E 5440                       		addq.w	#2,d0
00002260 51C9 FFE8                  		dbf	d1,loc_202A
00002264 3038 F632                  		move.w	($FFFFF632).w,d0
00002268 5440                       		addq.w	#2,d0
0000226A 3400                       		move.w	d0,d2
0000226C 0242 001E                  		andi.w	#$1E,d2
00002270 6600                       		bne.s	loc_2054
00002272 5440                       		addq.w	#2,d0
00002274                            
00002274                            loc_2054:
00002274 0C40 0064                  		cmpi.w	#$64,d0
00002278 6D00                       		blt.s	loc_2062
0000227A 31FC 0401 F634             		move.w	#$401,($FFFFF634).w
00002280 70F4                       		moveq	#-$C,d0
00002282                            
00002282                            loc_2062:
00002282 31C0 F632                  		move.w	d0,($FFFFF632).w
00002286 7001                       		moveq	#1,d0
00002288 4E75                       		rts	
0000228A                            ; ===========================================================================
0000228A                            
0000228A                            loc_206A:				; XREF: loc_202A
0000228A 5338 F634                  		subq.b	#1,($FFFFF634).w
0000228E 6A00                       		bpl.s	loc_20BC
00002290 11FC 0004 F634             		move.b	#4,($FFFFF634).w
00002296 3038 F632                  		move.w	($FFFFF632).w,d0
0000229A 0640 000C                  		addi.w	#$C,d0
0000229E 0C40 0030                  		cmpi.w	#$30,d0
000022A2 6500                       		bcs.s	loc_2088
000022A4 7000                       		moveq	#0,d0
000022A6 4E75                       		rts	
000022A8                            ; ===========================================================================
000022A8                            
000022A8                            loc_2088:				; XREF: loc_206A
000022A8 31C0 F632                  		move.w	d0,($FFFFF632).w
000022AC 41F9 0000 0000             		lea	(Pal_Sega2).l,a0
000022B2 41F0 0000                  		lea	(a0,d0.w),a0
000022B6 43F8 FB04                  		lea	($FFFFFB04).w,a1
000022BA 22D8                       		move.l	(a0)+,(a1)+
000022BC 22D8                       		move.l	(a0)+,(a1)+
000022BE 3298                       		move.w	(a0)+,(a1)
000022C0 43F8 FB20                  		lea	($FFFFFB20).w,a1
000022C4 7000                       		moveq	#0,d0
000022C6 722C                       		moveq	#$2C,d1
000022C8                            
000022C8                            loc_20A8:
000022C8 3400                       		move.w	d0,d2
000022CA 0242 001E                  		andi.w	#$1E,d2
000022CE 6600                       		bne.s	loc_20B2
000022D0 5440                       		addq.w	#2,d0
000022D2                            
000022D2                            loc_20B2:
000022D2 3390 0000                  		move.w	(a0),(a1,d0.w)
000022D6 5440                       		addq.w	#2,d0
000022D8 51C9 FFEE                  		dbf	d1,loc_20A8
000022DC                            
000022DC                            loc_20BC:
000022DC 7001                       		moveq	#1,d0
000022DE 4E75                       		rts	
000022E0                            ; End of function PalCycle_Sega
000022E0                            
000022E0                            ; ===========================================================================
000022E0                            
000022E0                            Pal_Sega1:	incbin	pallet\sega1.bin
000022EC                            Pal_Sega2:	incbin	pallet\sega2.bin
0000231C                            
0000231C                            ; ---------------------------------------------------------------------------
0000231C                            ; Subroutines to load pallets
0000231C                            ; ---------------------------------------------------------------------------
0000231C                            
0000231C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000231C                            
0000231C                            
0000231C                            PalLoad1:
0000231C 43F9 0000 0000             		lea	(PalPointers).l,a1
00002322 E748                       		lsl.w	#3,d0
00002324 D2C0                       		adda.w	d0,a1
00002326 2459                       		movea.l	(a1)+,a2
00002328 3659                       		movea.w	(a1)+,a3
0000232A D6FC 0080                  		adda.w	#$80,a3
0000232E 3E19                       		move.w	(a1)+,d7
00002330                            
00002330                            loc_2110:
00002330 26DA                       		move.l	(a2)+,(a3)+
00002332 51CF FFFC                  		dbf	d7,loc_2110
00002336 4E75                       		rts	
00002338                            ; End of function PalLoad1
00002338                            
00002338                            
00002338                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002338                            
00002338                            
00002338                            PalLoad2:
00002338 43F9 0000 0000             		lea	(PalPointers).l,a1
0000233E E748                       		lsl.w	#3,d0
00002340 D2C0                       		adda.w	d0,a1
00002342 2459                       		movea.l	(a1)+,a2
00002344 3659                       		movea.w	(a1)+,a3
00002346 3E19                       		move.w	(a1)+,d7
00002348                            
00002348                            loc_2128:
00002348 26DA                       		move.l	(a2)+,(a3)+
0000234A 51CF FFFC                  		dbf	d7,loc_2128
0000234E 4E75                       		rts	
00002350                            ; End of function PalLoad2
00002350                            
00002350                            ; ---------------------------------------------------------------------------
00002350                            ; Underwater pallet loading subroutine
00002350                            ; ---------------------------------------------------------------------------
00002350                            
00002350                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002350                            
00002350                            
00002350                            PalLoad3_Water:
00002350 43F9 0000 0000             		lea	(PalPointers).l,a1
00002356 E748                       		lsl.w	#3,d0
00002358 D2C0                       		adda.w	d0,a1
0000235A 2459                       		movea.l	(a1)+,a2
0000235C 3659                       		movea.w	(a1)+,a3
0000235E 96FC 0080                  		suba.w	#$80,a3
00002362 3E19                       		move.w	(a1)+,d7
00002364                            
00002364                            loc_2144:
00002364 26DA                       		move.l	(a2)+,(a3)+
00002366 51CF FFFC                  		dbf	d7,loc_2144
0000236A 4E75                       		rts	
0000236C                            ; End of function PalLoad3_Water
0000236C                            
0000236C                            
0000236C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000236C                            
0000236C                            
0000236C                            PalLoad4_Water:
0000236C 43F9 0000 0000             		lea	(PalPointers).l,a1
00002372 E748                       		lsl.w	#3,d0
00002374 D2C0                       		adda.w	d0,a1
00002376 2459                       		movea.l	(a1)+,a2
00002378 3659                       		movea.w	(a1)+,a3
0000237A 96FC 0100                  		suba.w	#$100,a3
0000237E 3E19                       		move.w	(a1)+,d7
00002380                            
00002380                            loc_2160:
00002380 26DA                       		move.l	(a2)+,(a3)+
00002382 51CF FFFC                  		dbf	d7,loc_2160
00002386 4E75                       		rts	
00002388                            ; End of function PalLoad4_Water
00002388                            
00002388                            ; ===========================================================================
00002388                            ; ---------------------------------------------------------------------------
00002388                            ; Pallet pointers
00002388                            ; ---------------------------------------------------------------------------
00002388                            PalPointers:
00002388                            	include "_inc\Pallet pointers.asm"
00002388                            ; ---------------------------------------------------------------------------
00002388                            ; Pallet pointers
00002388                            ; ---------------------------------------------------------------------------
00002388 0000 0000                  	dc.l Pal_SegaBG		; pallet address
0000238C FB00                       	dc.w $FB00		; RAM address
0000238E 001F                       	dc.w $1F		; (pallet length / 2) - 1
00002390 0000 0000                  	dc.l Pal_Title
00002394 FB00                       	dc.w $FB00
00002396 001F                       	dc.w $1F
00002398 0000 0000                  	dc.l Pal_LevelSel
0000239C FB00                       	dc.w $FB00
0000239E 001F                       	dc.w $1F
000023A0 0000 0000                  	dc.l Pal_Sonic
000023A4 FB00                       	dc.w $FB00
000023A6 0007                       	dc.w 7
000023A8 0000 0000                  	dc.l Pal_GHZ
000023AC FB20                       	dc.w $FB20
000023AE 0017                       	dc.w $17
000023B0 0000 0000                  	dc.l Pal_LZ
000023B4 FB20                       	dc.w $FB20
000023B6 0017                       	dc.w $17
000023B8 0000 0000                  	dc.l Pal_MZ
000023BC FB20                       	dc.w $FB20
000023BE 0017                       	dc.w $17
000023C0 0000 0000                  	dc.l Pal_SLZ
000023C4 FB20                       	dc.w $FB20
000023C6 0017                       	dc.w $17
000023C8 0000 0000                  	dc.l Pal_SYZ
000023CC FB20                       	dc.w $FB20
000023CE 0017                       	dc.w $17
000023D0 0000 0000                  	dc.l Pal_SBZ1
000023D4 FB20                       	dc.w $FB20
000023D6 0017                       	dc.w $17
000023D8 0000 0000                  	dc.l Pal_Special
000023DC FB00                       	dc.w $FB00
000023DE 001F                       	dc.w $1F
000023E0 0000 0000                  	dc.l Pal_LZWater
000023E4 FB00                       	dc.w $FB00
000023E6 001F                       	dc.w $1F
000023E8 0000 0000                  	dc.l Pal_SBZ3
000023EC FB20                       	dc.w $FB20
000023EE 0017                       	dc.w $17
000023F0 0000 0000                  	dc.l Pal_SBZ3Water
000023F4 FB00                       	dc.w $FB00
000023F6 001F                       	dc.w $1F
000023F8 0000 0000                  	dc.l Pal_SBZ2
000023FC FB20                       	dc.w $FB20
000023FE 0017                       	dc.w $17
00002400 0000 0000                  	dc.l Pal_LZSonWater
00002404 FB00                       	dc.w $FB00
00002406 0007                       	dc.w 7
00002408 0000 0000                  	dc.l Pal_SBZ3SonWat
0000240C FB00                       	dc.w $FB00
0000240E 0007                       	dc.w 7
00002410 0000 0000                  	dc.l Pal_SpeResult
00002414 FB00                       	dc.w $FB00
00002416 001F                       	dc.w $1F
00002418 0000 0000                  	dc.l Pal_SpeContinue
0000241C FB00                       	dc.w $FB00
0000241E 000F                       	dc.w $F
00002420 0000 0000                  	dc.l Pal_Ending
00002424 FB00                       	dc.w $FB00
00002426 001F                       	dc.w $1F
00002428 0000 0000                  	dc.l Pal_Idiot
0000242C FB20                       	dc.w $FB20
0000242E 0007                       	dc.w 7
0000242E 0007                       	dc.w 7
00002430                            
00002430                            ; ---------------------------------------------------------------------------
00002430                            ; Pallet data
00002430                            ; ---------------------------------------------------------------------------
00002430                            Pal_SegaBG:	incbin	pallet\sega_bg.bin
000024B0                            Pal_Title:	incbin	pallet\title.bin
00002530                            Pal_LevelSel:	incbin	pallet\levelsel.bin
000025B0                            Pal_Sonic:	incbin	pallet\sonic.bin
000025D0                            Pal_GHZ:	incbin	pallet\ghz.bin
00002630                            Pal_LZ:		incbin	pallet\lz.bin
00002690                            Pal_LZWater:	incbin	pallet\lz_uw.bin	; LZ underwater pallets
00002710                            Pal_MZ:		incbin	pallet\mz.bin
00002770                            Pal_SLZ:	incbin	pallet\slz.bin
000027D0                            Pal_SYZ:	incbin	pallet\syz.bin
00002830                            Pal_SBZ1:	incbin	pallet\sbz_act1.bin	; SBZ act 1 pallets
00002890                            Pal_SBZ2:	incbin	pallet\sbz_act2.bin	; SBZ act 2 & Final Zone pallets
000028F0                            Pal_Special:	incbin	pallet\special.bin	; special stage pallets
00002970                            Pal_SBZ3:	incbin	pallet\sbz_act3.bin	; SBZ act 3 pallets
000029D0                            Pal_SBZ3Water:	incbin	pallet\sbz_a3uw.bin	; SBZ act 3 (underwater) pallets
00002A50                            Pal_LZSonWater:	incbin	pallet\son_lzuw.bin	; Sonic (underwater in LZ) pallet
00002A70                            Pal_SBZ3SonWat:	incbin	pallet\son_sbzu.bin	; Sonic (underwater in SBZ act 3) pallet
00002A90                            Pal_SpeResult:	incbin	pallet\ssresult.bin	; special stage results screen pallets
00002B10                            Pal_SpeContinue:incbin	pallet\sscontin.bin	; special stage results screen continue pallet
00002B50                            Pal_Ending:	incbin	pallet\ending.bin	; ending sequence pallets
00002BD0                            Pal_Idiot:	incbin	pallet\idiot.bin	; idiot pallet
00002BF0                            
00002BF0                            ; ---------------------------------------------------------------------------
00002BF0                            ; Subroutine to	delay the program by ($FFFFF62A) frames
00002BF0                            ; ---------------------------------------------------------------------------
00002BF0                            
00002BF0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002BF0                            
00002BF0                            
00002BF0                            DelayProgram:				; XREF: PauseGame
00002BF0 46FC 2300                  		move	#$2300,sr
00002BF4                            
00002BF4                            loc_29AC:
00002BF4 4A38 F62A                  		tst.b	($FFFFF62A).w
00002BF8 66FA                       		bne.s	loc_29AC
00002BFA 4E75                       		rts	
00002BFC                            ; End of function DelayProgram
00002BFC                            
00002BFC                            ; ---------------------------------------------------------------------------
00002BFC                            ; Subroutine to	generate a pseudo-random number	in d0
00002BFC                            ; ---------------------------------------------------------------------------
00002BFC                            
00002BFC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002BFC                            
00002BFC                            
00002BFC                            RandomNumber:
00002BFC 2238 F636                  		move.l	($FFFFF636).w,d1
00002C00 6600                       		bne.s	loc_29C0
00002C02 223C 2A6D 365A             		move.l	#$2A6D365A,d1
00002C08                            
00002C08                            loc_29C0:
00002C08 2001                       		move.l	d1,d0
00002C0A E581                       		asl.l	#2,d1
00002C0C D280                       		add.l	d0,d1
00002C0E E781                       		asl.l	#3,d1
00002C10 D280                       		add.l	d0,d1
00002C12 3001                       		move.w	d1,d0
00002C14 4841                       		swap	d1
00002C16 D041                       		add.w	d1,d0
00002C18 3200                       		move.w	d0,d1
00002C1A 4841                       		swap	d1
00002C1C 21C1 F636                  		move.l	d1,($FFFFF636).w
00002C20 4E75                       		rts	
00002C22                            ; End of function RandomNumber
00002C22                            
00002C22                            
00002C22                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002C22                            
00002C22                            
00002C22                            CalcSine:				; XREF: SS_BGAnimate; et al
00002C22 0240 00FF                  		andi.w	#$FF,d0
00002C26 D040                       		add.w	d0,d0
00002C28 0640 0080                  		addi.w	#$80,d0
00002C2C 323B 0000                  		move.w	Sine_Data(pc,d0.w),d1
00002C30 0440 0080                  		subi.w	#$80,d0
00002C34 303B 0000                  		move.w	Sine_Data(pc,d0.w),d0
00002C38 4E75                       		rts	
00002C3A                            ; End of function CalcSine
00002C3A                            
00002C3A                            ; ===========================================================================
00002C3A                            
00002C3A                            Sine_Data:	incbin	misc\sinewave.bin	; values for a 360ยบ sine wave
00002EBA                            
00002EBA                            ; ===========================================================================
00002EBA 48E7 6000                  		movem.l	d1-d2,-(sp)
00002EBE 3200                       		move.w	d0,d1
00002EC0 4841                       		swap	d1
00002EC2 7000                       		moveq	#0,d0
00002EC4 3200                       		move.w	d0,d1
00002EC6 7407                       		moveq	#7,d2
00002EC8                            
00002EC8                            loc_2C80:
00002EC8 E599                       		rol.l	#2,d1
00002ECA D040                       		add.w	d0,d0
00002ECC 5240                       		addq.w	#1,d0
00002ECE 9240                       		sub.w	d0,d1
00002ED0 6400                       		bcc.s	loc_2C9A
00002ED2 D240                       		add.w	d0,d1
00002ED4 5340                       		subq.w	#1,d0
00002ED6 51CA FFF0                  		dbf	d2,loc_2C80
00002EDA E248                       		lsr.w	#1,d0
00002EDC 4CDF 0006                  		movem.l	(sp)+,d1-d2
00002EE0 4E75                       		rts	
00002EE2                            ; ===========================================================================
00002EE2                            
00002EE2                            loc_2C9A:
00002EE2 5240                       		addq.w	#1,d0
00002EE4 51CA FFE2                  		dbf	d2,loc_2C80
00002EE8 E248                       		lsr.w	#1,d0
00002EEA 4CDF 0006                  		movem.l	(sp)+,d1-d2
00002EEE 4E75                       		rts	
00002EF0                            
00002EF0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002EF0                            
00002EF0                            
00002EF0                            CalcAngle:
00002EF0 48E7 1800                  		movem.l	d3-d4,-(sp)
00002EF4 7600                       		moveq	#0,d3
00002EF6 7800                       		moveq	#0,d4
00002EF8 3601                       		move.w	d1,d3
00002EFA 3802                       		move.w	d2,d4
00002EFC 8843                       		or.w	d3,d4
00002EFE 6700                       		beq.s	loc_2D04
00002F00 3802                       		move.w	d2,d4
00002F02 4A43                       		tst.w	d3
00002F04 6A00 0000                  		bpl.w	loc_2CC2
00002F08 4443                       		neg.w	d3
00002F0A                            
00002F0A                            loc_2CC2:
00002F0A 4A44                       		tst.w	d4
00002F0C 6A00 0000                  		bpl.w	loc_2CCA
00002F10 4444                       		neg.w	d4
00002F12                            
00002F12                            loc_2CCA:
00002F12 B843                       		cmp.w	d3,d4
00002F14 6400 0000                  		bcc.w	loc_2CDC
00002F18 E18C                       		lsl.l	#8,d4
00002F1A 88C3                       		divu.w	d3,d4
00002F1C 7000                       		moveq	#0,d0
00002F1E 103B 4000                  		move.b	Angle_Data(pc,d4.w),d0
00002F22 6000                       		bra.s	loc_2CE6
00002F24                            ; ===========================================================================
00002F24                            
00002F24                            loc_2CDC:				; XREF: CalcAngle
00002F24 E18B                       		lsl.l	#8,d3
00002F26 86C4                       		divu.w	d4,d3
00002F28 7040                       		moveq	#$40,d0
00002F2A 903B 3000                  		sub.b	Angle_Data(pc,d3.w),d0
00002F2E                            
00002F2E                            loc_2CE6:
00002F2E 4A41                       		tst.w	d1
00002F30 6A00 0000                  		bpl.w	loc_2CF2
00002F34 4440                       		neg.w	d0
00002F36 0640 0080                  		addi.w	#$80,d0
00002F3A                            
00002F3A                            loc_2CF2:
00002F3A 4A42                       		tst.w	d2
00002F3C 6A00 0000                  		bpl.w	loc_2CFE
00002F40 4440                       		neg.w	d0
00002F42 0640 0100                  		addi.w	#$100,d0
00002F46                            
00002F46                            loc_2CFE:
00002F46 4CDF 0018                  		movem.l	(sp)+,d3-d4
00002F4A 4E75                       		rts	
00002F4C                            ; ===========================================================================
00002F4C                            
00002F4C                            loc_2D04:				; XREF: CalcAngle
00002F4C 303C 0040                  		move.w	#$40,d0
00002F50 4CDF 0018                  		movem.l	(sp)+,d3-d4
00002F54 4E75                       		rts	
00002F56                            ; End of function CalcAngle
00002F56                            
00002F56                            ; ===========================================================================
00002F56                            
00002F56                            Angle_Data:	incbin	misc\angles.bin
00003058                            
00003058                            ; ===========================================================================
00003058                            
00003058                            ; ---------------------------------------------------------------------------
00003058                            ; Sega screen
00003058                            ; ---------------------------------------------------------------------------
00003058                            
00003058                            SegaScreen:				; XREF: GameModeArray
00003058 103C 00E4                  		move.b	#$E4,d0
0000305C 6100 E55E                  		bsr.w	PlaySound_Special ; stop music
00003060 6100 E79C                  		bsr.w	ClearPLC
00003064 6100 F00C                  		bsr.w	Pal_FadeFrom
00003068 4DF9 00C0 0004             		lea	($C00004).l,a6
0000306E 3CBC 8004                  		move.w	#$8004,(a6)
00003072 3CBC 8230                  		move.w	#$8230,(a6)
00003076 3CBC 8407                  		move.w	#$8407,(a6)
0000307A 3CBC 8700                  		move.w	#$8700,(a6)
0000307E 3CBC 8B00                  		move.w	#$8B00,(a6)
00003082 4238 F64E                  		clr.b	($FFFFF64E).w
00003086 46FC 2700                  		move	#$2700,sr
0000308A 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000308E 0200 00BF                  		andi.b	#$BF,d0
00003092 33C0 00C0 0004             		move.w	d0,($C00004).l
00003098 6100 E44A                  		bsr.w	ClearScreen
0000309C 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
000030A6 41F9 0000 0000             		lea	(Nem_SegaLogo).l,a0 ; load Sega	logo patterns
000030AC 6100 E5B2                  		bsr.w	NemDec
000030B0 43F9 00FF 0000             		lea	($FF0000).l,a1
000030B6 41F9 0000 0000             		lea	(Eni_SegaLogo).l,a0 ; load Sega	logo mappings
000030BC 303C 0000                  		move.w	#0,d0
000030C0 6100 E87C                  		bsr.w	EniDec
000030C4 43F9 00FF 0000             		lea	($FF0000).l,a1
000030CA 203C 6510 0003             		move.l	#$65100003,d0
000030D0 7217                       		moveq	#$17,d1
000030D2 7407                       		moveq	#7,d2
000030D4 6100 E56A                  		bsr.w	ShowVDPGraphics
000030D8 43F9 00FF 0180             		lea	($FF0180).l,a1
000030DE 203C 4000 0003             		move.l	#$40000003,d0
000030E4 7227                       		moveq	#$27,d1
000030E6 741B                       		moveq	#$1B,d2
000030E8 6100 E556                  		bsr.w	ShowVDPGraphics
000030EC 7000                       		moveq	#0,d0
000030EE 6100 F248                  		bsr.w	PalLoad2	; load Sega logo pallet
000030F2 31FC FFF6 F632             		move.w	#-$A,($FFFFF632).w
000030F8 31FC 0000 F634             		move.w	#0,($FFFFF634).w
000030FE 31FC 0000 F662             		move.w	#0,($FFFFF662).w
00003104 31FC 0000 F660             		move.w	#0,($FFFFF660).w
0000310A 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000310E 0000 0040                  		ori.b	#$40,d0
00003112 33C0 00C0 0004             		move.w	d0,($C00004).l
00003118                            
00003118                            Sega_WaitPallet:
00003118 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
0000311E 6100 FAD0                  		bsr.w	DelayProgram
00003122 6100 F106                  		bsr.w	PalCycle_Sega
00003126 66F0                       		bne.s	Sega_WaitPallet
00003128                            
00003128 103C 00E1                  		move.b	#$E1,d0
0000312C 6100 E48E                  		bsr.w	PlaySound_Special ; play "SEGA"	sound
00003130 11FC 0014 F62A             		move.b	#$14,($FFFFF62A).w
00003136 6100 FAB8                  		bsr.w	DelayProgram
0000313A 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
00003140                            
00003140                            Sega_WaitEnd:
00003140 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
00003146 6100 FAA8                  		bsr.w	DelayProgram
0000314A 4A78 F614                  		tst.w	($FFFFF614).w
0000314E 6700                       		beq.s	Sega_GotoTitle
00003150 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00003156 67E8                       		beq.s	Sega_WaitEnd	; if not, branch
00003158                            
00003158                            Sega_GotoTitle:
00003158 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; go to title screen
0000315E 4E75                       		rts	
00003160                            ; ===========================================================================
00003160                            
00003160                            ; ---------------------------------------------------------------------------
00003160                            ; Title	screen
00003160                            ; ---------------------------------------------------------------------------
00003160                            
00003160                            TitleScreen:				; XREF: GameModeArray
00003160 103C 00E4                  		move.b	#$E4,d0
00003164 6100 E456                  		bsr.w	PlaySound_Special ; stop music
00003168 6100 E694                  		bsr.w	ClearPLC
0000316C 6100 EF04                  		bsr.w	Pal_FadeFrom
00003170 46FC 2700                  		move	#$2700,sr
00003174 6100 E3FC                  		bsr.w	SoundDriverLoad
00003178 4DF9 00C0 0004             		lea	($C00004).l,a6
0000317E 3CBC 8004                  		move.w	#$8004,(a6)
00003182 3CBC 8230                  		move.w	#$8230,(a6)
00003186 3CBC 8407                  		move.w	#$8407,(a6)
0000318A 3CBC 9001                  		move.w	#$9001,(a6)
0000318E 3CBC 9200                  		move.w	#$9200,(a6)
00003192 3CBC 8B03                  		move.w	#$8B03,(a6)
00003196 3CBC 8720                  		move.w	#$8720,(a6)
0000319A 4238 F64E                  		clr.b	($FFFFF64E).w
0000319E 6100 E344                  		bsr.w	ClearScreen
000031A2 43F8 D000                  		lea	($FFFFD000).w,a1
000031A6 7000                       		moveq	#0,d0
000031A8 323C 07FF                  		move.w	#$7FF,d1
000031AC                            
000031AC                            Title_ClrObjRam:
000031AC 22C0                       		move.l	d0,(a1)+
000031AE 51C9 FFFC                  		dbf	d1,Title_ClrObjRam ; fill object RAM ($D000-$EFFF) with	$0
000031B2                            
000031B2 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
000031BC 41F9 0000 0000             		lea	(Nem_JapNames).l,a0 ; load Japanese credits
000031C2 6100 E49C                  		bsr.w	NemDec
000031C6 23FC 54C0 0000 00C0 0004   		move.l	#$54C00000,($C00004).l
000031D0 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load alphabet
000031D6 6100 E488                  		bsr.w	NemDec
000031DA 43F9 00FF 0000             		lea	($FF0000).l,a1
000031E0 41F9 0000 0000             		lea	(Eni_JapNames).l,a0 ; load mappings for	Japanese credits
000031E6 303C 0000                  		move.w	#0,d0
000031EA 6100 E752                  		bsr.w	EniDec
000031EE 43F9 00FF 0000             		lea	($FF0000).l,a1
000031F4 203C 4000 0003             		move.l	#$40000003,d0
000031FA 7227                       		moveq	#$27,d1
000031FC 741B                       		moveq	#$1B,d2
000031FE 6100 E440                  		bsr.w	ShowVDPGraphics
00003202 43F8 FB80                  		lea	($FFFFFB80).w,a1
00003206 7000                       		moveq	#0,d0
00003208 323C 001F                  		move.w	#$1F,d1
0000320C                            
0000320C                            Title_ClrPallet:
0000320C 22C0                       		move.l	d0,(a1)+
0000320E 51C9 FFFC                  		dbf	d1,Title_ClrPallet ; fill pallet with 0	(black)
00003212                            
00003212 7003                       		moveq	#3,d0		; load Sonic's pallet
00003214 6100 F106                  		bsr.w	PalLoad1
00003218 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load "SONIC TEAM PRESENTS"	object
0000321E 4EB9 0000 0000             		jsr	ObjectsLoad
00003224 4EB9 0000 0000             		jsr	BuildSprites
0000322A 6100 EDA0                  		bsr.w	Pal_FadeTo
0000322E 46FC 2700                  		move	#$2700,sr
00003232 23FC 4000 0001 00C0 0004   		move.l	#$40000001,($C00004).l
0000323C 41F9 0000 0000             		lea	(Nem_TitleFg).l,a0 ; load title	screen patterns
00003242 6100 E41C                  		bsr.w	NemDec
00003246 23FC 6000 0001 00C0 0004   		move.l	#$60000001,($C00004).l
00003250 41F9 0000 0000             		lea	(Nem_TitleSonic).l,a0 ;	load Sonic title screen	patterns
00003256 6100 E408                  		bsr.w	NemDec
0000325A 23FC 6200 0002 00C0 0004   		move.l	#$62000002,($C00004).l
00003264 41F9 0000 0000             		lea	(Nem_TitleTM).l,a0 ; load "TM" patterns
0000326A 6100 E3F4                  		bsr.w	NemDec
0000326E 4DF9 00C0 0000             		lea	($C00000).l,a6
00003274 2D7C 5000 0003 0004        		move.l	#$50000003,4(a6)
0000327C 4BF9 0000 05F0             		lea	(Art_Text).l,a5
00003282 323C 0BB3                  		move.w	#(Art_Text_end-Art_Text/4)-1,d1
00003286                            
00003286                            Title_LoadText:
00003286 2C9D                       		move.l	(a5)+,(a6)
00003288 51C9 FFFC                  		dbf	d1,Title_LoadText ; load uncompressed text patterns
0000328C                            
0000328C 11FC 0000 FE30             		move.b	#0,($FFFFFE30).w ; clear lamppost counter
00003292 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w ; disable debug item placement	mode
00003298 31FC 0000 FFF0             		move.w	#0,($FFFFFFF0).w ; disable debug mode
0000329E 31FC 0000 FFEA             		move.w	#0,($FFFFFFEA).w
000032A4 31FC 0000 FE10             		move.w	#0,($FFFFFE10).w ; set level to	GHZ (00)
000032AA 31FC 0000 F634             		move.w	#0,($FFFFF634).w ; disable pallet cycling
000032B0 6100 0000                  		bsr.w	LevelSizeLoad
000032B4 6100 0000                  		bsr.w	DeformBgLayer
000032B8 43F8 B000                  		lea	($FFFFB000).w,a1
000032BC 41F9 0000 0000             		lea	(Blk16_GHZ).l,a0 ; load	GHZ 16x16 mappings
000032C2 303C 0000                  		move.w	#0,d0
000032C6 6100 E676                  		bsr.w	EniDec
000032CA 41F9 0000 0000             		lea	(Blk256_GHZ).l,a0 ; load GHZ 256x256 mappings
000032D0 43F9 00FF 0000             		lea	($FF0000).l,a1
000032D6 6100 E7E4                  		bsr.w	KosDec
000032DA 6100 0000                  		bsr.w	LevelLayoutLoad
000032DE 6100 ED92                  		bsr.w	Pal_FadeFrom
000032E2 46FC 2700                  		move	#$2700,sr
000032E6 6100 E1FC                  		bsr.w	ClearScreen
000032EA 4BF9 00C0 0004             		lea	($C00004).l,a5
000032F0 4DF9 00C0 0000             		lea	($C00000).l,a6
000032F6 47F8 F708                  		lea	($FFFFF708).w,a3
000032FA 49F8 A440                  		lea	($FFFFA440).w,a4
000032FE 343C 6000                  		move.w	#$6000,d2
00003302 6100 0000                  		bsr.w	LoadTilesFromStart2
00003306 43F9 00FF 0000             		lea	($FF0000).l,a1
0000330C 41F9 0000 0000             		lea	(Eni_Title).l,a0 ; load	title screen mappings
00003312 303C 0000                  		move.w	#0,d0
00003316 6100 E626                  		bsr.w	EniDec
0000331A 43F9 00FF 0000             		lea	($FF0000).l,a1
00003320 203C 4206 0003             		move.l	#$42060003,d0
00003326 7221                       		moveq	#$21,d1
00003328 7415                       		moveq	#$15,d2
0000332A 6100 E314                  		bsr.w	ShowVDPGraphics
0000332E 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00003338 41F9 0000 0000             		lea	(Nem_GHZ_1st).l,a0 ; load GHZ patterns
0000333E 6100 E320                  		bsr.w	NemDec
00003342 7001                       		moveq	#1,d0		; load title screen pallet
00003344 6100 EFD6                  		bsr.w	PalLoad1
00003348 103C 008A                  		move.b	#$8A,d0		; play title screen music
0000334C 6100 E26E                  		bsr.w	PlaySound_Special
00003350 11FC 0000 FFFA             		move.b	#0,($FFFFFFFA).w ; disable debug mode
00003356 31FC 0178 F614             		move.w	#$178,($FFFFF614).w ; run title	screen for $178	frames
0000335C 43F8 D080                  		lea	($FFFFD080).w,a1
00003360 7000                       		moveq	#0,d0
00003362 323C 0007                  		move.w	#7,d1
00003366                            
00003366                            Title_ClrObjRam2:
00003366 22C0                       		move.l	d0,(a1)+
00003368 51C9 FFFC                  		dbf	d1,Title_ClrObjRam2
0000336C                            
0000336C 11FC 000E D040             		move.b	#$E,($FFFFD040).w ; load big Sonic object
00003372 11FC 000F D080             		move.b	#$F,($FFFFD080).w ; load "PRESS	START BUTTON" object
00003378 11FC 000F D0C0             		move.b	#$F,($FFFFD0C0).w ; load "TM" object
0000337E 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
00003384 11FC 000F D100             		move.b	#$F,($FFFFD100).w
0000338A 11FC 0002 D11A             		move.b	#2,($FFFFD11A).w
00003390 4EB9 0000 0000             		jsr	ObjectsLoad
00003396 6100 0000                  		bsr.w	DeformBgLayer
0000339A 4EB9 0000 0000             		jsr	BuildSprites
000033A0 7000                       		moveq	#0,d0
000033A2 6100 E42E                  		bsr.w	LoadPLC2
000033A6 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
000033AC 31FC 0000 FFE6             		move.w	#0,($FFFFFFE6).w
000033B2 3038 F60C                  		move.w	($FFFFF60C).w,d0
000033B6 0000 0040                  		ori.b	#$40,d0
000033BA 33C0 00C0 0004             		move.w	d0,($C00004).l
000033C0 6100 EC0A                  		bsr.w	Pal_FadeTo
000033C4                            
000033C4                            loc_317C:
000033C4 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000033CA 6100 F824                  		bsr.w	DelayProgram
000033CE 4EB9 0000 0000             		jsr	ObjectsLoad
000033D4 6100 0000                  		bsr.w	DeformBgLayer
000033D8 4EB9 0000 0000             		jsr	BuildSprites
000033DE 6100 E79C                  		bsr.w	PalCycle_Title
000033E2 6100 E428                  		bsr.w	RunPLC_RAM
000033E6 3038 D008                  		move.w	($FFFFD008).w,d0
000033EA 5440                       		addq.w	#2,d0
000033EC 31C0 D008                  		move.w	d0,($FFFFD008).w ; move	Sonic to the right
000033F0 0C40 1C00                  		cmpi.w	#$1C00,d0	; has Sonic object passed x-position $1C00?
000033F4 6500                       		bcs.s	Title_ChkRegion	; if not, branch
000033F6 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
000033FC 4E75                       		rts	
000033FE                            ; ===========================================================================
000033FE                            
000033FE                            Title_ChkRegion:
000033FE 4A38 FFF8                  		tst.b	($FFFFFFF8).w	; check	if the machine is US or	Japanese
00003402 6A00                       		bpl.s	Title_RegionJ	; if Japanese, branch
00003404 41F9 0000 0000             		lea	(LevelSelectCode_US).l,a0 ; load US code
0000340A 6000                       		bra.s	Title_EnterCheat
0000340C                            ; ===========================================================================
0000340C                            
0000340C                            Title_RegionJ:				; XREF: Title_ChkRegion
0000340C 41F9 0000 0000             		lea	(LevelSelectCode_J).l,a0 ; load	J code
00003412                            
00003412                            Title_EnterCheat:			; XREF: Title_ChkRegion
00003412 3038 FFE4                  		move.w	($FFFFFFE4).w,d0
00003416 D0C0                       		adda.w	d0,a0
00003418 1038 F605                  		move.b	($FFFFF605).w,d0 ; get button press
0000341C 0200 000F                  		andi.b	#$F,d0		; read only up/down/left/right buttons
00003420 B010                       		cmp.b	(a0),d0		; does button press match the cheat code?
00003422 6600                       		bne.s	loc_3210	; if not, branch
00003424 5278 FFE4                  		addq.w	#1,($FFFFFFE4).w ; next	button press
00003428 4A00                       		tst.b	d0
0000342A 6600                       		bne.s	Title_CountC
0000342C 41F8 FFE0                  		lea	($FFFFFFE0).w,a0
00003430 3238 FFE6                  		move.w	($FFFFFFE6).w,d1
00003434 E249                       		lsr.w	#1,d1
00003436 0241 0003                  		andi.w	#3,d1
0000343A 6700                       		beq.s	Title_PlayRing
0000343C 4A38 FFF8                  		tst.b	($FFFFFFF8).w
00003440 6A00                       		bpl.s	Title_PlayRing
00003442 7201                       		moveq	#1,d1
00003444 1181 1001                  		move.b	d1,1(a0,d1.w)
00003448                            
00003448                            Title_PlayRing:
00003448 11BC 0001 1000             		move.b	#1,(a0,d1.w)	; activate cheat
0000344E 103C 00B5                  		move.b	#$B5,d0		; play ring sound when code is entered
00003452 6100 E168                  		bsr.w	PlaySound_Special
00003456 6000                       		bra.s	Title_CountC
00003458                            ; ===========================================================================
00003458                            
00003458                            loc_3210:				; XREF: Title_EnterCheat
00003458 4A00                       		tst.b	d0
0000345A 6700                       		beq.s	Title_CountC
0000345C 0C78 0009 FFE4             		cmpi.w	#9,($FFFFFFE4).w
00003462 6700                       		beq.s	Title_CountC
00003464 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
0000346A                            
0000346A                            Title_CountC:
0000346A 1038 F605                  		move.b	($FFFFF605).w,d0
0000346E 0200 0020                  		andi.b	#$20,d0		; is C button pressed?
00003472 6700                       		beq.s	loc_3230	; if not, branch
00003474 5278 FFE6                  		addq.w	#1,($FFFFFFE6).w ; increment C button counter
00003478                            
00003478                            loc_3230:
00003478 4A78 F614                  		tst.w	($FFFFF614).w
0000347C 6700 0000                  		beq.w	Demo
00003480 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; check if Start is pressed
00003486 6700 FF3C                  		beq.w	loc_317C	; if not, branch
0000348A                            
0000348A                            Title_ChkLevSel:
0000348A 4A38 FFE0                  		tst.b	($FFFFFFE0).w	; check	if level select	code is	on
0000348E 6700 0000                  		beq.w	PlayLevel	; if not, play level
00003492 0838 0006 F604             		btst	#6,($FFFFF604).w ; check if A is pressed
00003498 6700 0000                  		beq.w	PlayLevel	; if not, play level
0000349C 7002                       		moveq	#2,d0
0000349E 6100 EE98                  		bsr.w	PalLoad2	; load level select pallet
000034A2 43F8 CC00                  		lea	($FFFFCC00).w,a1
000034A6 7000                       		moveq	#0,d0
000034A8 323C 00DF                  		move.w	#$DF,d1
000034AC                            
000034AC                            Title_ClrScroll:
000034AC 22C0                       		move.l	d0,(a1)+
000034AE 51C9 FFFC                  		dbf	d1,Title_ClrScroll ; fill scroll data with 0
000034B2                            
000034B2 21C0 F616                  		move.l	d0,($FFFFF616).w
000034B6 46FC 2700                  		move	#$2700,sr
000034BA 4DF9 00C0 0000             		lea	($C00000).l,a6
000034C0 23FC 6000 0003 00C0 0004   		move.l	#$60000003,($C00004).l
000034CA 323C 03FF                  		move.w	#$3FF,d1
000034CE                            
000034CE                            Title_ClrVram:
000034CE 2C80                       		move.l	d0,(a6)
000034D0 51C9 FFFC                  		dbf	d1,Title_ClrVram ; fill	VRAM with 0
000034D4                            
000034D4 6100 0000                  		bsr.w	LevSelTextLoad
000034D8                            		
000034D8                            		; sound test fix
000034D8 3C38 FF82                  		move.w	($FFFFFF82).w,d6
000034DC 31FC 0014 FF82             		move.w	#$14,($FFFFFF82).w
000034E2 363C E65F                  		move.w	#$E680-$21,d3
000034E6 6100 0000                  		bsr.w	LevSelSndTest	; refresh text
000034EA 31C6 FF82                  		move.w	d6,($FFFFFF82).w
000034EE 6000 0000                  		bra.w	LevelSelect
000034F2                            ; ---------------------------------------------------------------------------
000034F2                            ; Level	Select
000034F2                            ; ---------------------------------------------------------------------------
000034F2                            YouAreAnIdiot:
000034F2 6100 DFF0                  		bsr.w	ClearScreen
000034F6                            		
000034F6 4DF9 00C0 0004             		lea	($C00004).l,a6
000034FC 3CBC 8700                  		move.w	#$8700,(a6) ; first colour is bg now
00003500                            		
00003500 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
0000350A 41F9 0000 0000             		lea	(Nem_Idiot).l,a0 ;	load idiot sprites
00003510 6100 E14E                  		bsr.w	NemDec
00003514 43F9 00FF 0000             		lea	($FF0000).l,a1
0000351A 41F9 0000 0000             		lea	(Eni_Idiot).l,a0 ; load mappings for IDIOT
00003520 303C 0000                  		move.w	#0,d0
00003524 6100 E418                  		bsr.w	EniDec
00003528 43F9 00FF 0000             		lea	($FF0000).l,a1
0000352E 203C 4304 0003             		move.l	#$43040003,d0
00003534 7223                       		moveq	#35,d1
00003536 740D                       		moveq	#13,d2
00003538 6100 E106                  		bsr.w	ShowVDPGraphics
0000353C 7014                       		moveq	#20,d0
0000353E 6100 EDF8                  		bsr.w	PalLoad2	; load Sega logo pallet
00003542                            		
00003542 303C 00E5                  		move.w	#$E5,d0		; YOU ARE AN IDIOT BOOM
00003546 11C0 F00B                  		move.b	d0,($FFFFF00B).w ; PlaySound_Special but faster
0000354A                            	@wait:
0000354A 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003550 6100 F69E                  		bsr.w	DelayProgram
00003554 60F4                       		bra.s	@wait
00003556                            LevelSelect:
00003556 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
0000355C 6100 F692                  		bsr.w	DelayProgram
00003560 6100 0000                  		bsr.w	LevSelControls
00003564 6100 E2A6                  		bsr.w	RunPLC_RAM
00003568 4AB8 F680                  		tst.l	($FFFFF680).w
0000356C 66E8                       		bne.s	LevelSelect
0000356E 0238 00F0 F605             		andi.b	#$F0,($FFFFF605).w ; is	A, B, C, or Start pressed?
00003574 67E0                       		beq.s	LevelSelect	; if not, branch
00003576 3038 FF82                  		move.w	($FFFFFF82).w,d0
0000357A 0C40 0000                  		cmpi.w	#lswifi,d0		; have you selected item $15 (free wifi)?
0000357E 6700 FF72                  		beq.w	YouAreAnIdiot	; if not, dont blow this place up
00003582                            		
00003582 0C40 0000                  		cmpi.w	#lssndtest,d0		; have you selected item $14 (sound test)?
00003586 6600                       		bne.s	LevSel_Level_SS	; if not, go to	Level/SS subroutine
00003588                            		
00003588 3038 FF84                  		move.w	($FFFFFF84).w,d0
0000358C 0640 0080                  		addi.w	#$80,d0
00003590 11C0 F00B                  		move.b	d0,($FFFFF00B).w ; PlaySound_Special but faster
00003594                            		
00003594 4EB9 0000 0000             		jsr		ShowNow_Playing
0000359A 60BA                       		bra.s	LevelSelect
0000359C                            ; ===========================================================================
0000359C                            
0000359C                            LevSel_Ending:				; XREF: LevelSelect
0000359C 11FC 0018 F600             		move.b	#$18,($FFFFF600).w ; set screen	mode to	$18 (Ending)
000035A2 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	to 0600	(Ending)
000035A8 4E75                       		rts	
000035AA                            ; ===========================================================================
000035AA                            
000035AA                            LevSel_Credits:				; XREF: LevelSelect
000035AA 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set screen	mode to	$1C (Credits)
000035B0 103C 0091                  		move.b	#$91,d0
000035B4 6100 E006                  		bsr.w	PlaySound_Special ; play credits music
000035B8 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w
000035BE 4E75                       		rts	
000035C0                            ; ===========================================================================
000035C0                            
000035C0                            LevSel_Level_SS:			; XREF: LevelSelect
000035C0 D040                       		add.w	d0,d0
000035C2 303B 0000                  		move.w	LSelectPointers(pc,d0.w),d0 ; load level number
000035C6 6B00 FF8E                  		bmi.w	LevelSelect
000035CA 0C40 0700                  		cmpi.w	#$700,d0	; check	if level is 0700 (Special Stage)
000035CE 6600                       		bne.s	LevSel_Level	; if not, branch
000035D0 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
000035D6 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level
000035DA 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
000035E0 7000                       		moveq	#0,d0
000035E2 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
000035E6 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
000035EA 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
000035EE 4E75                       		rts	
000035F0                            ; ===========================================================================
000035F0                            
000035F0                            LevSel_Level:				; XREF: LevSel_Level_SS
000035F0 0240 3FFF                  		andi.w	#$3FFF,d0
000035F4 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
000035F8                            
000035F8                            PlayLevel:				; XREF: ROM:00003246j ...
000035F8 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
000035FE 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
00003604 7000                       		moveq	#0,d0
00003606 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
0000360A 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
0000360E 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00003612 11C0 FE16                  		move.b	d0,($FFFFFE16).w ; clear special stage number
00003616 11C0 FE57                  		move.b	d0,($FFFFFE57).w ; clear emeralds
0000361A 21C0 FE58                  		move.l	d0,($FFFFFE58).w ; clear emeralds
0000361E 21C0 FE5C                  		move.l	d0,($FFFFFE5C).w ; clear emeralds
00003622 11C0 FE18                  		move.b	d0,($FFFFFE18).w ; clear continues
00003626 103C 00E0                  		move.b	#$E0,d0
0000362A 6100 DF90                  		bsr.w	PlaySound_Special ; fade out music
0000362E 4E75                       		rts	
00003630                            ; ===========================================================================
00003630                            ; ---------------------------------------------------------------------------
00003630                            ; Level	select - level pointers
00003630                            ; ---------------------------------------------------------------------------
00003630                            LSelectPointers:
00003630                            		incbin	misc\ls_point.bin
0000365A                            		even
0000365A                            ; ---------------------------------------------------------------------------
0000365A                            ; Level	select codes
0000365A                            ; ---------------------------------------------------------------------------
0000365A                            LevelSelectCode_J:
0000365A                            		incbin	misc\ls_jcode.bin
00003660                            		even
00003660                            
00003660                            LevelSelectCode_US:
00003660                            		incbin	misc\ls_ucode.bin
00003666                            		even
00003666                            ; ===========================================================================
00003666                            
00003666                            ; ---------------------------------------------------------------------------
00003666                            ; Demo mode
00003666                            ; ---------------------------------------------------------------------------
00003666                            
00003666                            Demo:					; XREF: TitleScreen
00003666 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
0000366C                            
0000366C                            loc_33B6:				; XREF: loc_33E4
0000366C 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003672 6100 F57C                  		bsr.w	DelayProgram
00003676 6100 0000                  		bsr.w	DeformBgLayer
0000367A 6100 E4E0                  		bsr.w	PalCycle_Load
0000367E 6100 E18C                  		bsr.w	RunPLC_RAM
00003682 3038 D008                  		move.w	($FFFFD008).w,d0
00003686 5440                       		addq.w	#2,d0
00003688 31C0 D008                  		move.w	d0,($FFFFD008).w
0000368C 0C40 1C00                  		cmpi.w	#$1C00,d0
00003690 6500                       		bcs.s	loc_33E4
00003692 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (level)
00003698 4E75                       		rts	
0000369A                            ; ===========================================================================
0000369A                            
0000369A                            loc_33E4:				; XREF: Demo
0000369A 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
000036A0 6600 FDE8                  		bne.w	Title_ChkLevSel	; if yes, branch
000036A4 4A78 F614                  		tst.w	($FFFFF614).w
000036A8 6600 FFC2                  		bne.w	loc_33B6
000036AC 103C 00E0                  		move.b	#$E0,d0
000036B0 6100 DF0A                  		bsr.w	PlaySound_Special ; fade out music
000036B4 3038 FFF2                  		move.w	($FFFFFFF2).w,d0 ; load	demo number
000036B8 0240 0007                  		andi.w	#7,d0
000036BC D040                       		add.w	d0,d0
000036BE 303B 0000                  		move.w	Demo_Levels(pc,d0.w),d0	; load level number for	demo
000036C2 31C0 FE10                  		move.w	d0,($FFFFFE10).w
000036C6 5278 FFF2                  		addq.w	#1,($FFFFFFF2).w ; add 1 to demo number
000036CA 0C78 0004 FFF2             		cmpi.w	#4,($FFFFFFF2).w ; is demo number less than 4?
000036D0 6500                       		bcs.s	loc_3422	; if yes, branch
000036D2 31FC 0000 FFF2             		move.w	#0,($FFFFFFF2).w ; reset demo number to	0
000036D8                            
000036D8                            loc_3422:
000036D8 31FC 0001 FFF0             		move.w	#1,($FFFFFFF0).w ; turn	demo mode on
000036DE 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set screen mode to 08 (demo)
000036E4 0C40 0600                  		cmpi.w	#$600,d0	; is level number 0600 (special	stage)?
000036E8 6600                       		bne.s	Demo_Level	; if not, branch
000036EA 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
000036F0 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level number
000036F4 4238 FE16                  		clr.b	($FFFFFE16).w	; clear	special	stage number
000036F8                            
000036F8                            Demo_Level:
000036F8 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
000036FE 7000                       		moveq	#0,d0
00003700 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003704 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003708 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
0000370C 4E75                       		rts	
0000370E                            ; ===========================================================================
0000370E                            ; ---------------------------------------------------------------------------
0000370E                            ; Levels used in demos
0000370E                            ; ---------------------------------------------------------------------------
0000370E                            Demo_Levels:	incbin	misc\dm_ord1.bin
00003716                            		even
00003716                            
00003716                            ; ---------------------------------------------------------------------------
00003716                            ; Subroutine to	change what you're selecting in the level select
00003716                            ; ---------------------------------------------------------------------------
00003716                            
00003716                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003716                            
00003716                            
00003716                            LevSelControls:				; XREF: LevelSelect
00003716 1238 F605                  		move.b	($FFFFF605).w,d1
0000371A 0201 0003                  		andi.b	#3,d1		; is up/down pressed and held?
0000371E 6600                       		bne.s	LevSel_UpDown	; if yes, branch
00003720 5378 FF80                  		subq.w	#1,($FFFFFF80).w ; subtract 1 from time	to next	move
00003724 6A00                       		bpl.s	LevSel_SndTest	; if time remains, branch
00003726                            
00003726                            LevSel_UpDown:
00003726 31FC 000B FF80             		move.w	#$B,($FFFFFF80).w ; reset time delay
0000372C 1238 F604                  		move.b	($FFFFF604).w,d1
00003730 0201 0003                  		andi.b	#3,d1		; is up/down pressed?
00003734 6700                       		beq.s	LevSel_SndTest	; if not, branch
00003736 3C38 FF82                  		move.w	($FFFFFF82).w,d6
0000373A 0801 0000                  		btst	#0,d1		; is up	pressed?
0000373E 6700                       		beq.s	LevSel_Down	; if not, branch
00003740 5346                       		subq.w	#1,d6		; move up 1 selection
00003742 6400                       		bcc.s	LevSel_Down
00003744 7C00                       		moveq	#lsselectable,d6		; if selection moves below 0, jump to last selection
00003746                            
00003746                            LevSel_Down:
00003746 0801 0001                  		btst	#1,d1		; is down pressed?
0000374A 6700                       		beq.s	LevSel_Refresh	; if not, branch
0000374C 5246                       		addq.w	#1,d6		; move down 1 selection
0000374E 0C46 0000                  		cmpi.w	#lsselectable+1,d6
00003752 6500                       		bcs.s	LevSel_Refresh
00003754 7C00                       		moveq	#0,d6		; if selection moves above last selectable,	jump to	selection 0
00003756 6000                       		bra.s	LevSel_Refresh
00003758                            		
00003758                            LevSel_GoLR:
00003758 0801 0002                  		btst	#2,d1		; is left pressed?
0000375C 6700                       		beq.s	LevSel_GoRight	; if not, branch
0000375E 0446 0000                  		sub.w	#lsrow2size,d6
00003762 64E2                       		bcc.s	LevSel_Down
00003764 0646 0000                  		add.w	#lsrow2size,d6	; don't jump
00003768 6000                       		bra.s	LevSel_Refresh
0000376A                            LevSel_GoRight:
0000376A 0646 0000                  		add.w	#lsrow1size,d6
0000376E 0C46 0000                  		cmpi.w	#lsselectable+1,d6
00003772 6500                       		bcs.s	LevSel_Refresh
00003774 0446 0000                  		sub.w	#lsrow1size,d6	; don't jump
00003778                            ; ===========================================================================
00003778                            LevSel_Refresh:
00003778 363C E65F                  		move.w	#$E680-$21,d3	; VRAM setting
0000377C 6100 0000                  		bsr.w	LevSelHighlightCode	; refresh text
00003780 363C C65F                  		move.w	#$C680-$21,d3
00003784 31C6 FF82                  		move.w	d6,($FFFFFF82).w ; set new selection
00003788 6100 0000                  		bsr.w	LevSelHighlightCode	; refresh text
0000378C 4E75                       		rts	
0000378E                            		
0000378E                            LevSel_SndTest:				; XREF: LevSelControls
0000378E 1238 F605                  		move.b	($FFFFF605).w,d1
00003792 0201 000C                  		andi.b	#$C,d1		; is left/right	pressed?
00003796 6700                       		beq.s	LevSel_NoMove	; if not, branch
00003798 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w ; is	item $14 selected?
0000379E 66B8                       		bne.s	LevSel_GoLR	; if not, branch
000037A0                            		
000037A0 3038 FF84                  		move.w	($FFFFFF84).w,d0
000037A4 0801 0002                  		btst	#2,d1		; is left pressed?
000037A8 6700                       		beq.s	LevSel_Right	; if not, branch
000037AA 5340                       		subq.w	#1,d0		; subtract 1 from sound	test
000037AC 6400                       		bcc.s	LevSel_Right
000037AE 704F                       		moveq	#$4F,d0		; if sound test	moves below 0, set to $4F
000037B0                            
000037B0                            LevSel_Right:
000037B0 0801 0003                  		btst	#3,d1		; is right pressed?
000037B4 6700                       		beq.s	LevSel_Refresh2	; if not, branch
000037B6 5240                       		addq.w	#1,d0		; add 1	to sound test
000037B8 0C40 0050                  		cmpi.w	#$50,d0
000037BC 6500                       		bcs.s	LevSel_Refresh2
000037BE 7000                       		moveq	#0,d0		; if sound test	moves above $4F, set to	0
000037C0                            
000037C0                            LevSel_Refresh2:
000037C0 363C C65F                  		move.w	#$C680-$21,d3
000037C4 31C0 FF84                  		move.w	d0,($FFFFFF84).w ; set sound test number
000037C8 6000 0000                  		bra.w	LevSelSndTest	; refresh text
000037CC                            
000037CC                            LevSel_NoMove:
000037CC 4E75                       		rts	
000037CE                            ; End of function LevSelControls
000037CE                            
000037CE                            ; ---------------------------------------------------------------------------
000037CE                            ; Subroutine to load level select text
000037CE                            ; ---------------------------------------------------------------------------
000037CE                            
000037CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000037CE =60860003                  lsscrpos = $60860003
000037CE =00240000                  lsoff = $240000
000037CE =64C00003                  lsstpos = lsscrpos+$43A0000
000037CE                            
000037CE                            LevSelTextLoad_loop:
000037CE 2D44 0004                  		move.l	d4,4(a6)
000037D2 6100 0000                  		bsr.w	LevSel_ChgLine
000037D6 0684 0080 0000             		addi.l	#$800000,d4
000037DC 51C9 FFF0                  		dbf.w	d1,LevSelTextLoad_loop
000037E0 4E75                       		rts
000037E2                            LevSelTextLoad:				; XREF: TitleScreen
000037E2 43F9 0000 0000             		lea	(LevelMenuText).l,a1
000037E8 4DF9 00C0 0000             		lea	($C00000).l,a6
000037EE 363C E65F                  		move.w	#$E680-$21,d3	; VRAM setting
000037F2 283C 6086 0003             		move.l	#lsscrpos,d4	; screen position (text)
000037F8                            		
000037F8 323C 0000                  		move.w	#lsrow1size-1,d1		; number of lines of text (first row)
000037FC 61D0                       		bsr.s	LevSelTextLoad_loop
000037FE                            		
000037FE                            		
000037FE 283C 60AA 0003             		move.l	#lsscrpos+lsoff,d4
00003804 323C 0000                  		move.w	#lsrow2size-1,d1		; number of lines of text (second row)
00003808 61C4                       		bsr.s	LevSelTextLoad_loop
0000380A 363C C65F                  		move.w	#$C680-$21,d3
0000380E                            		
0000380E                            LevSelHighlightCode:
0000380E 4DF9 00C0 0000             		lea	($C00000).l,a6
00003814 7000                       		moveq	#0,d0
00003816 3038 FF82                  		move.w	($FFFFFF82).w,d0
0000381A 3200                       		move.w	d0,d1
0000381C 283C 6086 0003             		move.l	#lsscrpos,d4
00003822                            		
00003822 0C40 0000                  		cmpi.w	#lsrow1size,d0
00003826 6D00                       		blt.s	@notsecond
00003828                            		
00003828 0440 0000                  		sub.w	#lsrow1size,d0
0000382C 0684 0024 0000             		addi.l	#lsoff,d4
00003832                            	@notsecond:
00003832 EF48                       		lsl.w	#7,d0
00003834 4840                       		swap	d0
00003836 D880                       		add.l	d0,d4
00003838 43F9 0000 0000             		lea	(LevelMenuText).l,a1
0000383E E749                       		lsl.w	#3,d1
00003840 D241                       		add.w	d1,d1
00003842 D2C1                       		adda.w	d1,a1
00003844 2D44 0004                  		move.l	d4,4(a6)
00003848 6100 0000                  		bsr.w	LevSel_ChgLine
0000384C 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w
00003852 6700                       		beq.s	LevSelSndTest
00003854 4E75                       		rts
00003856                            
00003856                            LevSelSndTest:
00003856 0643 0030                  		add.w	#$30,d3
0000385A 23FC 64C0 0003 00C0 0004   		move.l	#lsstpos,($C00004).l ; screen	position (sound	test)
00003864 3038 FF84                  		move.w	($FFFFFF84).w,d0
00003868 0640 0080                  		addi.w	#$80,d0
0000386C 1400                       		move.b	d0,d2
0000386E E808                       		lsr.b	#4,d0
00003870 6100 0000                  		bsr.w	LevSel_ChgSnd
00003874 1002                       		move.b	d2,d0
00003876 6100 0000                  		bsr.w	LevSel_ChgSnd
0000387A 4E75                       		rts	
0000387C                            ; End of function LevSelTextLoad
0000387C                            
0000387C                            
0000387C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000387C                            
0000387C                            
0000387C                            LevSel_ChgSnd:				; XREF: LevSelTextLoad
0000387C 0240 000F                  		andi.w	#$F,d0
00003880 0C00 000A                  		cmpi.b	#$A,d0
00003884 6500                       		bcs.s	loc_3580
00003886 5E00                       		addi.b	#7,d0
00003888                            
00003888                            loc_3580:
00003888 D043                       		add.w	d3,d0
0000388A 3C80                       		move.w	d0,(a6)
0000388C 4E75                       		rts	
0000388E                            ; End of function LevSel_ChgSnd
0000388E                            
0000388E                            
0000388E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000388E                            
0000388E                            
0000388E                            LevSel_ChgLine:				; XREF: LevSelTextLoad
0000388E 740F                       		moveq	#$10-1,d2		; number of characters per line
00003890                            
00003890                            @loop:
00003890 7000                       		moveq	#0,d0
00003892 1019                       		move.b	(a1)+,d0
00003894 0C00 0020                  		cmpi.b	#$20,d0
00003898 6E00                       		bgt.s	@draw
0000389A 3CBC 0000                  		move.w	#0,(a6)
0000389E 51CA FFF0                  		dbf	d2,@loop
000038A2 4E75                       		rts	
000038A4                            ; ===========================================================================
000038A4                            
000038A4                            @draw:				; XREF: LevSel_ChgLine
000038A4 D043                       		add.w	d3,d0
000038A6 3C80                       		move.w	d0,(a6)
000038A8 51CA FFE6                  		dbf	d2,@loop
000038AC 4E75                       		rts	
000038AE                            ; End of function LevSel_ChgLine
000038AE                            		
000038AE                            CStringSlop_draw:
000038AE D043                       		add.w	d3,d0
000038B0 3C80                       		move.w	d0,(a6)
000038B2                            CStringSlop:				; XREF: LevSelTextLoad
000038B2 7000                       		moveq	#0,d0
000038B4 1019                       		move.b	(a1)+,d0
000038B6 0C00 0020                  		cmpi.b	#$20,d0
000038BA 6EF2                       		bgt.s	CStringSlop_draw
000038BC 4A00                       		tst.b	d0
000038BE 6700                       		beq.s	@end
000038C0 3CBC 0000                  		move.w	#0,(a6)
000038C4 60EC                       		bra.s	CStringSlop
000038C6                            	@end:
000038C6 4E75                       		rts
000038C8                            ; End of function LevSel_ChgLine
000038C8                            
000038C8                            ; ===========================================================================
000038C8                            ; ---------------------------------------------------------------------------
000038C8                            ; Level	select menu text ( this stupid level select code was brought to you by the meltdown guy )
000038C8                            ; ---------------------------------------------------------------------------
000038C8                            LevelMenuText:	
000038C8 4352 554E 4348 5920 524F+  		dc.b    "CRUNCHY ROLL   1"
000038D8 2020 2020 2020 2020 2020+          dc.b    "               2"
000038E8 2020 2020 2020 2020 2020+          dc.b    "               3"
000038F8 494F 4C42 494B 4520 4649+          dc.b    "IOLBIKE FILE   1"
00003908 2045 4747 5350 4C20 2020+          dc.b    " EGGSPL        2"
00003918 2020 2020 2020 2020 2020+          dc.b    "               3"
00003928 4D41 5242 4C20 2020 2020+          dc.b    "MARBL          1"
00003938 2020 2020 2020 2020 2020+          dc.b    "               2"
00003948 2020 2020 2020 2020 2020+          dc.b    "               3"
00003958 444F 4E54 2047 4554 2052+          dc.b    "DONT GET RID   1"
00003968 204F 4620 5448 4953 2121+          dc.b    " OF THIS!!     2"
00003978 2020 2020 2020 2020 2020+          dc.b    "               3"
00003988                            LMTSecondRow:
00003988 5448 4520 5049 4720 4652+          dc.b    "THE PIG FROM   1"
00003998 2042 4152 4E45 5920 2020+          dc.b    " BARNEY        2"
000039A8 2020 2020 2020 2020 2020+          dc.b    "               3"
000039B8 5A20 5A20 5A20 5A20 2020+          dc.b    "Z Z Z Z        1"
000039C8 2020 2020 2020 2020 2020+          dc.b    "               2"
000039D8 2020 2020 2020 2020 2020+          dc.b    "               3"
000039E8 4649 4E41 4C20 5A4F 4E45+          dc.b    "FINAL ZONE      "
000039F8 5350 4543 4941 4C20 5354+          dc.b    "SPECIAL STAGE   "
00003A08 534F 554E 4420 5445 5354+          dc.b    "SOUND TEST      "
00003A18 4652 4545 2057 4946 4920+  		dc.b	"FREE WIFI       "
00003A28 4F50 5449 4F4E 5320 4C41+  		dc.b	"OPTIONS LATER   "
00003A38                            LMTSelectableEnd:
00003A38 4341 4E54 2054 4F55 4348+  		dc.b	"CANT TOUCH ME XD"
00003A48                            LMTEnd:
00003A48                            
00003A48                            
00003A48 =0000000C                  lsrow1size = (LMTSecondRow-LevelMenuText)/16
00003A48 =0000000C                  lsrow2size = (LMTEnd-LMTSecondRow)/16
00003A48 =00000016                  lsselectable = ((LMTSelectableEnd-LevelMenuText)/16)-1
00003A48                            ; just to not break these
00003A48 =00000014                  lssndtest = lsrow2size+8
00003A48 =00000015                  lswifi = lsrow2size+9
00003A48                            
00003A48 =6C820003                  nppos = $6C820003
00003A48                            Now_Playing:
00003A48 3E3E 3E4E 4F57 2050 4C41+  		dc.b	">>>NOW PLAYING ",0
00003A58                            		even
00003A58                            NP_Track:
00003A58 5452 4143 4B20 2400        		dc.b	"TRACK $",0
00003A60                            		even
00003A60                            NP_SFX:
00003A60 534F 554E 4420 2400        		dc.b	"SOUND $",0
00003A68                            		even
00003A68                            
00003A68                            ShowNow_Playing:
00003A68 1C00                       		move.b	d0,d6
00003A6A 363C C65F                  		move.w	#$C680-$21,d3	; VRAM setting
00003A6E 43FA FFD8                  		lea	Now_Playing(pc),a1
00003A72 4DF9 00C0 0000             		lea		($C00000).l,a6
00003A78 2D7C 6C82 0003 0004        		move.l	#nppos,4(a6)
00003A80 6100 FE30                  		bsr.w	CStringSlop
00003A84                            		
00003A84 43FA FFD2                  		lea	NP_Track(pc),a1
00003A88 0C06 00A0                  		cmpi.b	#$A0,d6
00003A8C 6D00                       		blt.s	@track
00003A8E                            		
00003A8E 43FA FFD0                  		lea	NP_SFX(pc),a1
00003A92                            	@track:
00003A92 6100 FE1E                  		bsr.w	CStringSlop
00003A96                            		
00003A96 0643 0030                  		add.w	#$30,d3
00003A9A 1006                       		move.b	d6,d0
00003A9C 1400                       		move.b	d0,d2
00003A9E E808                       		lsr.b	#4,d0
00003AA0 6100 FDDA                  		bsr.w	LevSel_ChgSnd
00003AA4 1002                       		move.b	d2,d0
00003AA6 6100 FDD4                  		bsr.w	LevSel_ChgSnd
00003AAA 4E75                       		rts	
00003AAC                            ; ---------------------------------------------------------------------------
00003AAC                            ; Music	playlist
00003AAC                            ; ---------------------------------------------------------------------------
00003AAC                            MusicList1:	incbin	misc\muslist1.bin
00003AB4                            		even
00003AB4                            MusicList2:	incbin	misc\muslist2.bin
00003ABA                            		even
00003ABA                            MusicList3:	incbin	misc\muslist3.bin
00003AC0                            		even
00003AC0                            MusicList4:	incbin	misc\muslist4.bin
00003AC6                            		even
00003AC6                            ; ===========================================================================
00003AC6                            
00003AC6                            ; ---------------------------------------------------------------------------
00003AC6                            ; Level
00003AC6                            ; ---------------------------------------------------------------------------
00003AC6                            
00003AC6                            Level:					; XREF: GameModeArray
00003AC6 08F8 0007 F600             		bset	#7,($FFFFF600).w ; add $80 to screen mode (for pre level sequence)
00003ACC 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003AD0 6B00                       		bmi.s	loc_37B6
00003AD2 103C 00E0                  		move.b	#$E0,d0
00003AD6 6100 DAE4                  		bsr.w	PlaySound_Special ; fade out music
00003ADA                            
00003ADA                            loc_37B6:
00003ADA 6100 DD22                  		bsr.w	ClearPLC
00003ADE 6100 E592                  		bsr.w	Pal_FadeFrom
00003AE2 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003AE6 6B00                       		bmi.s	Level_ClrRam
00003AE8 46FC 2700                  		move	#$2700,sr
00003AEC 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00003AF6 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00003AFC 6100 DB62                  		bsr.w	NemDec
00003B00 46FC 2300                  		move	#$2300,sr
00003B04 7000                       		moveq	#0,d0
00003B06 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003B0A E948                       		lsl.w	#4,d0
00003B0C 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
00003B12 45F2 0000                  		lea	(a2,d0.w),a2
00003B16 7000                       		moveq	#0,d0
00003B18 1012                       		move.b	(a2),d0
00003B1A 6700                       		beq.s	loc_37FC
00003B1C 6100 DC82                  		bsr.w	LoadPLC		; load level patterns
00003B20                            
00003B20                            loc_37FC:
00003B20 7001                       		moveq	#1,d0
00003B22 6100 DC7C                  		bsr.w	LoadPLC		; load standard	patterns
00003B26                            
00003B26                            Level_ClrRam:
00003B26 43F8 D000                  		lea	($FFFFD000).w,a1
00003B2A 7000                       		moveq	#0,d0
00003B2C 323C 07FF                  		move.w	#$7FF,d1
00003B30                            
00003B30                            Level_ClrObjRam:
00003B30 22C0                       		move.l	d0,(a1)+
00003B32 51C9 FFFC                  		dbf	d1,Level_ClrObjRam ; clear object RAM
00003B36                            
00003B36 43F8 F628                  		lea	($FFFFF628).w,a1
00003B3A 7000                       		moveq	#0,d0
00003B3C 323C 0015                  		move.w	#$15,d1
00003B40                            
00003B40                            Level_ClrVars:
00003B40 22C0                       		move.l	d0,(a1)+
00003B42 51C9 FFFC                  		dbf	d1,Level_ClrVars ; clear misc variables
00003B46                            
00003B46 43F8 F700                  		lea	($FFFFF700).w,a1
00003B4A 7000                       		moveq	#0,d0
00003B4C 323C 003F                  		move.w	#$3F,d1
00003B50                            
00003B50                            Level_ClrVars2:
00003B50 22C0                       		move.l	d0,(a1)+
00003B52 51C9 FFFC                  		dbf	d1,Level_ClrVars2 ; clear misc variables
00003B56                            
00003B56 43F8 FE60                  		lea	($FFFFFE60).w,a1
00003B5A 7000                       		moveq	#0,d0
00003B5C 323C 0047                  		move.w	#$47,d1
00003B60                            
00003B60                            Level_ClrVars3:
00003B60 22C0                       		move.l	d0,(a1)+
00003B62 51C9 FFFC                  		dbf	d1,Level_ClrVars3 ; clear object variables
00003B66                            
00003B66 46FC 2700                  		move	#$2700,sr
00003B6A 6100 D978                  		bsr.w	ClearScreen
00003B6E 4DF9 00C0 0004             		lea	($C00004).l,a6
00003B74 3CBC 8B03                  		move.w	#$8B03,(a6)
00003B78 3CBC 8230                  		move.w	#$8230,(a6)
00003B7C 3CBC 8407                  		move.w	#$8407,(a6)
00003B80 3CBC 857C                  		move.w	#$857C,(a6)
00003B84 3CBC 9001                  		move.w	#$9001,(a6)
00003B88 3CBC 8004                  		move.w	#$8004,(a6)
00003B8C 3CBC 8720                  		move.w	#$8720,(a6)
00003B90 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00003B96 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
00003B9A 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003BA0 6600                       		bne.s	Level_LoadPal	; if not, branch
00003BA2 3CBC 8014                  		move.w	#$8014,(a6)
00003BA6 7000                       		moveq	#0,d0
00003BA8 1038 FE11                  		move.b	($FFFFFE11).w,d0
00003BAC D040                       		add.w	d0,d0
00003BAE 43F9 0000 0000             		lea	(WaterHeight).l,a1 ; load water	height array
00003BB4 3031 0000                  		move.w	(a1,d0.w),d0
00003BB8 31C0 F646                  		move.w	d0,($FFFFF646).w ; set water heights
00003BBC 31C0 F648                  		move.w	d0,($FFFFF648).w
00003BC0 31C0 F64A                  		move.w	d0,($FFFFF64A).w
00003BC4 4238 F64D                  		clr.b	($FFFFF64D).w	; clear	water routine counter
00003BC8 4238 F64E                  		clr.b	($FFFFF64E).w	; clear	water movement
00003BCC 11FC 0001 F64C             		move.b	#1,($FFFFF64C).w ; enable water
00003BD2                            
00003BD2                            Level_LoadPal:
00003BD2 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00003BD8 46FC 2300                  		move	#$2300,sr
00003BDC 7003                       		moveq	#3,d0
00003BDE 6100 E758                  		bsr.w	PalLoad2	; load Sonic's pallet line
00003BE2 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003BE8 6600                       		bne.s	Level_GetBgm	; if not, branch
00003BEA 700F                       		moveq	#$F,d0		; pallet number	$0F (LZ)
00003BEC 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is act number 3?
00003BF2 6600                       		bne.s	Level_WaterPal	; if not, branch
00003BF4 7010                       		moveq	#$10,d0		; pallet number	$10 (SBZ3)
00003BF6                            
00003BF6                            Level_WaterPal:
00003BF6 6100 E758                  		bsr.w	PalLoad3_Water	; load underwater pallet (see d0)
00003BFA 4A38 FE30                  		tst.b	($FFFFFE30).w
00003BFE 6700                       		beq.s	Level_GetBgm
00003C00 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
00003C06                            
00003C06                            ; NineKode begins here - How to play different songs on different acts
00003C06                             
00003C06                            Level_GetBgm:
00003C06 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003C0A 6B00 0000                  		bmi.w	loc_3946	; change from bmi.s to bmi.w or you'll get an error
00003C0E 7000                       		moveq	#0,d0
00003C10 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003C14                             
00003C14 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
00003C1A 6600                       		bne.s	Level_GetBgm2	; if not, branch
00003C1C 43F9 0000 3AAC             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
00003C22 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003C24                             
00003C24                            Level_GetBgm2:
00003C24 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
00003C2A 6600                       		bne.s	Level_GetBgm3	; if not, branch
00003C2C 43F9 0000 3AB4             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
00003C32 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003C34                             
00003C34                            Level_GetBgm3:
00003C34 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
00003C3A 6600                       		bne.s	Level_GetBgm4	; if not, branch
00003C3C 43F9 0000 3ABA             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 3
00003C42 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003C44                             
00003C44                            Level_GetBgm4:
00003C44 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
00003C4A 6600                       		bne.s	Level_PlayBgm	; if not, branch
00003C4C 43F9 0000 3AC0             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
00003C52                             
00003C52                            Level_PlayBgm:
00003C52 1031 0000                  		move.b	(a1,d0.w),d0	; get d0-th entry from the playlist
00003C56 6100 D95E                  		bsr.w	PlaySound	; play music
00003C5A 11FC 0034 D080             		move.b	#$34,($FFFFD080).w ; load title	card object
00003C60                             
00003C60                            ; NineKode ends here
00003C60                            
00003C60                            Level_TtlCard:
00003C60 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00003C66 6100 EF88                  		bsr.w	DelayProgram
00003C6A 4EB9 0000 0000             		jsr	ObjectsLoad
00003C70 4EB9 0000 0000             		jsr	BuildSprites
00003C76 6100 DB94                  		bsr.w	RunPLC_RAM
00003C7A 3038 D108                  		move.w	($FFFFD108).w,d0
00003C7E B078 D130                  		cmp.w	($FFFFD130).w,d0 ; has title card sequence finished?
00003C82 66DC                       		bne.s	Level_TtlCard	; if not, branch
00003C84 4AB8 F680                  		tst.l	($FFFFF680).w	; are there any	items in the pattern load cue?
00003C88 66D6                       		bne.s	Level_TtlCard	; if yes, branch
00003C8A 4EB9 0000 0000             		jsr	Hud_Base
00003C90                            
00003C90                            loc_3946:
00003C90 7003                       		moveq	#3,d0
00003C92 6100 E688                  		bsr.w	PalLoad1	; load Sonic's pallet line
00003C96 6100 0000                  		bsr.w	LevelSizeLoad
00003C9A 6100 0000                  		bsr.w	DeformBgLayer
00003C9E 08F8 0002 F754             		bset	#2,($FFFFF754).w
00003CA4 6100 0000                  		bsr.w	MainLoadBlockLoad ; load block mappings	and pallets
00003CA8 6100 0000                  		bsr.w	LoadTilesFromStart
00003CAC 4EB9 0000 0000             		jsr	FloorLog_Unk
00003CB2 6100 0000                  		bsr.w	ColIndexLoad
00003CB6 6100 0000                  		bsr.w	LZWaterEffects
00003CBA 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00003CC0 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003CC4 6B00                       		bmi.s	Level_ChkDebug
00003CC6 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
00003CCC                            
00003CCC                            Level_ChkDebug:
00003CCC 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00003CD0 6700                       		beq.s	Level_ChkWater	; if not, branch
00003CD2 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
00003CD8 6700                       		beq.s	Level_ChkWater	; if not, branch
00003CDA 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00003CE0                            
00003CE0                            Level_ChkWater:
00003CE0 31FC 0000 F602             		move.w	#0,($FFFFF602).w
00003CE6 31FC 0000 F604             		move.w	#0,($FFFFF604).w
00003CEC 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003CF2 6600                       		bne.s	Level_LoadObj	; if not, branch
00003CF4 11FC 001B D780             		move.b	#$1B,($FFFFD780).w ; load water	surface	object
00003CFA 31FC 0060 D788             		move.w	#$60,($FFFFD788).w
00003D00 11FC 001B D7C0             		move.b	#$1B,($FFFFD7C0).w
00003D06 31FC 0120 D7C8             		move.w	#$120,($FFFFD7C8).w
00003D0C                            
00003D0C                            Level_LoadObj:
00003D0C 4EB9 0000 0000             		jsr	ObjPosLoad
00003D12 4EB9 0000 0000             		jsr	ObjectsLoad
00003D18 4EB9 0000 0000             		jsr	BuildSprites
00003D1E 7000                       		moveq	#0,d0
00003D20 4A38 FE30                  		tst.b	($FFFFFE30).w	; are you starting from	a lamppost?
00003D24 6600                       		bne.s	loc_39E8	; if yes, branch
00003D26 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003D2A 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003D2E 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w ; clear lives counter
00003D32                            
00003D32                            loc_39E8:
00003D32 11C0 FE1A                  		move.b	d0,($FFFFFE1A).w
00003D36 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w ; clear shield
00003D3A 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w ; clear invincibility
00003D3E 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w ; clear speed shoes
00003D42                            		; move.b	d0,($FFFFFE2F).w
00003D42 0238 0001 FE2F             		andi.b	#%00000001,($FFFFFE2F).w	; GMZ: Clear every flag in FE2F aside from reversed controls
00003D48 31C0 FE08                  		move.w	d0,($FFFFFE08).w
00003D4C 31C0 FE02                  		move.w	d0,($FFFFFE02).w
00003D50 31C0 FE04                  		move.w	d0,($FFFFFE04).w
00003D54 6100 0000                  		bsr.w	OscillateNumInit
00003D58 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00003D5E 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w ; update rings	counter
00003D64 11FC 0001 FE1E             		move.b	#1,($FFFFFE1E).w ; update time counter
00003D6A 31FC 0000 F790             		move.w	#0,($FFFFF790).w
00003D70 43F9 0000 0000             		lea	(Demo_Index).l,a1 ; load demo data
00003D76 7000                       		moveq	#0,d0
00003D78 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003D7C E548                       		lsl.w	#2,d0
00003D7E 2271 0000                  		movea.l	(a1,d0.w),a1
00003D82 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00003D86 6A00                       		bpl.s	Level_Demo	; if yes, branch
00003D88 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1 ; load ending demo	data
00003D8E 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00003D92 5340                       		subq.w	#1,d0
00003D94 E548                       		lsl.w	#2,d0
00003D96 2271 0000                  		movea.l	(a1,d0.w),a1
00003D9A                            
00003D9A                            Level_Demo:
00003D9A 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w ; load key press duration
00003DA0 5338 F792                  		subq.b	#1,($FFFFF792).w ; subtract 1 from duration
00003DA4 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00003DAA 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003DAE 6A00                       		bpl.s	Level_ChkWaterPal
00003DB0 31FC 021C F614             		move.w	#540,($FFFFF614).w
00003DB6 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w
00003DBC 6600                       		bne.s	Level_ChkWaterPal
00003DBE 31FC 01FE F614             		move.w	#510,($FFFFF614).w
00003DC4                            
00003DC4                            Level_ChkWaterPal:
00003DC4 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ/SBZ3?
00003DCA 6600                       		bne.s	Level_Delay	; if not, branch
00003DCC 700B                       		moveq	#$B,d0		; pallet $0B (LZ underwater)
00003DCE 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is level SBZ3?
00003DD4 6600                       		bne.s	Level_WaterPal2	; if not, branch
00003DD6 700D                       		moveq	#$D,d0		; pallet $0D (SBZ3 underwater)
00003DD8                            
00003DD8                            Level_WaterPal2:
00003DD8 6100 E592                  		bsr.w	PalLoad4_Water
00003DDC                            
00003DDC                            Level_Delay:
00003DDC 323C 0003                  		move.w	#3,d1
00003DE0                            
00003DE0                            Level_DelayLoop:
00003DE0 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003DE6 6100 EE08                  		bsr.w	DelayProgram
00003DEA 51C9 FFF4                  		dbf	d1,Level_DelayLoop
00003DEE                            
00003DEE 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00003DF4 6100 E1DC                  		bsr.w	Pal_FadeTo2
00003DF8 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003DFC 6B00                       		bmi.s	Level_ClrCardArt
00003DFE 5438 D0A4                  		addq.b	#2,($FFFFD0A4).w ; make	title card move
00003E02 5838 D0E4                  		addq.b	#4,($FFFFD0E4).w
00003E06 5838 D124                  		addq.b	#4,($FFFFD124).w
00003E0A 5838 D164                  		addq.b	#4,($FFFFD164).w
00003E0E 6000                       		bra.s	Level_StartGame
00003E10                            ; ===========================================================================
00003E10                            
00003E10                            Level_ClrCardArt:
00003E10 7002                       		moveq	#2,d0
00003E12 4EB9 0000 17A0             		jsr	(LoadPLC).l	; load explosion patterns
00003E18 7000                       		moveq	#0,d0
00003E1A 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003E1E 0640 0015                  		addi.w	#$15,d0
00003E22 4EB9 0000 17A0             		jsr	(LoadPLC).l	; load animal patterns (level no. + $15)
00003E28                            
00003E28                            Level_StartGame:
00003E28 08B8 0007 F600             		bclr	#7,($FFFFF600).w ; subtract 80 from screen mode
00003E2E                            
00003E2E                            ; ---------------------------------------------------------------------------
00003E2E                            ; Main level loop (when	all title card and loading sequences are finished)
00003E2E                            ; ---------------------------------------------------------------------------
00003E2E                            
00003E2E                            Level_MainLoop:
00003E2E 6100 D798                  		bsr.w	PauseGame
00003E32 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003E38 6100 EDB6                  		bsr.w	DelayProgram
00003E3C 5278 FE04                  		addq.w	#1,($FFFFFE04).w ; add 1 to level timer
00003E40 6100 0000                  		bsr.w	MoveSonicInDemo
00003E44 6100 0000                  		bsr.w	LZWaterEffects
00003E48 4EB9 0000 0000             		jsr	ObjectsLoad
00003E4E 4A78 FE08                  		tst.w	($FFFFFE08).w
00003E52 6600                       		bne.s	loc_3B10
00003E54 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00003E5A 6400                       		bcc.s	loc_3B14
00003E5C                            
00003E5C                            loc_3B10:
00003E5C 6100 0000                  		bsr.w	DeformBgLayer
00003E60                            
00003E60                            loc_3B14:
00003E60 4EB9 0000 0000             		jsr	BuildSprites
00003E66 4EB9 0000 0000             		jsr	ObjPosLoad
00003E6C 6100 DCEE                  		bsr.w	PalCycle_Load
00003E70 6100 D99A                  		bsr.w	RunPLC_RAM
00003E74 6100 0000                  		bsr.w	OscillateNumDo
00003E78 6100 0000                  		bsr.w	ChangeRingFrame
00003E7C 6100 0000                  		bsr.w	SignpostArtLoad
00003E80 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
00003E86 6700                       		beq.s	Level_ChkDemo	; if screen mode is 08 (demo), branch
00003E88 4A78 FE02                  		tst.w	($FFFFFE02).w	; is the level set to restart?
00003E8C 6600 FC38                  		bne.w	Level		; if yes, branch
00003E90 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00003E96 6700 FF96                  		beq.w	Level_MainLoop	; if screen mode is $0C	(level), branch
00003E9A 4E75                       		rts	
00003E9C                            ; ===========================================================================
00003E9C                            
00003E9C                            Level_ChkDemo:				; XREF: Level_MainLoop
00003E9C 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
00003EA0 6600                       		bne.s	Level_EndDemo	; if yes, branch
00003EA2 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00003EA6 6700                       		beq.s	Level_EndDemo	; if not, branch
00003EA8 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
00003EAE 6700 FF7E                  		beq.w	Level_MainLoop	; if screen mode is 08 (demo), branch
00003EB2 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00003EB8 4E75                       		rts	
00003EBA                            ; ===========================================================================
00003EBA                            
00003EBA                            Level_EndDemo:				; XREF: Level_ChkDemo
00003EBA 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w ; is screen mode 08 (demo)?
00003EC0 6600                       		bne.s	loc_3B88	; if not, branch
00003EC2 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00003EC8 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00003ECC 6A00                       		bpl.s	loc_3B88	; if yes, branch
00003ECE 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; go	to credits
00003ED4                            
00003ED4                            loc_3B88:
00003ED4 31FC 003C F614             		move.w	#$3C,($FFFFF614).w
00003EDA 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00003EE0 4278 F794                  		clr.w	($FFFFF794).w
00003EE4                            
00003EE4                            loc_3B98:
00003EE4 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003EEA 6100 ED04                  		bsr.w	DelayProgram
00003EEE 6100 0000                  		bsr.w	MoveSonicInDemo
00003EF2 4EB9 0000 0000             		jsr	ObjectsLoad
00003EF8 4EB9 0000 0000             		jsr	BuildSprites
00003EFE 4EB9 0000 0000             		jsr	ObjPosLoad
00003F04 5378 F794                  		subq.w	#1,($FFFFF794).w
00003F08 6A00                       		bpl.s	loc_3BC8
00003F0A 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00003F10 6100 E180                  		bsr.w	Pal_FadeOut
00003F14                            
00003F14                            loc_3BC8:
00003F14 4A78 F614                  		tst.w	($FFFFF614).w
00003F18 66CA                       		bne.s	loc_3B98
00003F1A 4E75                       		rts	
00003F1C                            ; ===========================================================================
00003F1C                            ; ---------------------------------------------------------------------------
00003F1C                            ; Subroutine to	do special water effects in Labyrinth Zone
00003F1C                            ; ---------------------------------------------------------------------------
00003F1C                            
00003F1C                            LZWaterEffects:				; XREF: Level
00003F1C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00003F22 6600                       		bne.s	locret_3C28	; if not, branch
00003F24 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00003F2A 6400                       		bcc.s	LZMoveWater
00003F2C 6100 0000                  		bsr.w	LZWindTunnels
00003F30 6100 0000                  		bsr.w	LZWaterSlides
00003F34 6100 0000                  		bsr.w	LZDynamicWater
00003F38                            
00003F38                            LZMoveWater:
00003F38 4238 F64E                  		clr.b	($FFFFF64E).w
00003F3C 7000                       		moveq	#0,d0
00003F3E 1038 FE60                  		move.b	($FFFFFE60).w,d0
00003F42 E248                       		lsr.w	#1,d0
00003F44 D078 F648                  		add.w	($FFFFF648).w,d0
00003F48 31C0 F646                  		move.w	d0,($FFFFF646).w
00003F4C 3038 F646                  		move.w	($FFFFF646).w,d0
00003F50 9078 F704                  		sub.w	($FFFFF704).w,d0
00003F54 6400                       		bcc.s	loc_3C1A
00003F56 4A40                       		tst.w	d0
00003F58 6A00                       		bpl.s	loc_3C1A
00003F5A 11FC 00DF F625             		move.b	#-$21,($FFFFF625).w
00003F60 11FC 0001 F64E             		move.b	#1,($FFFFF64E).w
00003F66                            
00003F66                            loc_3C1A:
00003F66 0C40 00DF                  		cmpi.w	#$DF,d0
00003F6A 6500                       		bcs.s	loc_3C24
00003F6C 303C 00DF                  		move.w	#$DF,d0
00003F70                            
00003F70                            loc_3C24:
00003F70 11C0 F625                  		move.b	d0,($FFFFF625).w
00003F74                            
00003F74                            locret_3C28:
00003F74 4E75                       		rts	
00003F76                            ; ===========================================================================
00003F76                            ; ---------------------------------------------------------------------------
00003F76                            ; Labyrinth default water heights
00003F76                            ; ---------------------------------------------------------------------------
00003F76                            WaterHeight:	incbin	misc\lz_heigh.bin
00003F7E                            		even
00003F7E                            ; ===========================================================================
00003F7E                            
00003F7E                            ; ---------------------------------------------------------------------------
00003F7E                            ; Labyrinth dynamic water routines
00003F7E                            ; ---------------------------------------------------------------------------
00003F7E                            
00003F7E                            LZDynamicWater:				; XREF: LZWaterEffects
00003F7E 7000                       		moveq	#0,d0
00003F80 1038 FE11                  		move.b	($FFFFFE11).w,d0
00003F84 D040                       		add.w	d0,d0
00003F86 303B 0000                  		move.w	DynWater_Index(pc,d0.w),d0
00003F8A 4EBB 0000                  		jsr	DynWater_Index(pc,d0.w)
00003F8E 7200                       		moveq	#0,d1
00003F90 1238 F64C                  		move.b	($FFFFF64C).w,d1
00003F94 3038 F64A                  		move.w	($FFFFF64A).w,d0
00003F98 9078 F648                  		sub.w	($FFFFF648).w,d0
00003F9C 6700                       		beq.s	locret_3C5A
00003F9E 6400                       		bcc.s	loc_3C56
00003FA0 4441                       		neg.w	d1
00003FA2                            
00003FA2                            loc_3C56:
00003FA2 D378 F648                  		add.w	d1,($FFFFF648).w
00003FA6                            
00003FA6                            locret_3C5A:
00003FA6 4E75                       		rts	
00003FA8                            ; ===========================================================================
00003FA8 0000                       DynWater_Index:	dc.w DynWater_LZ1-DynWater_Index
00003FAA 0000                       		dc.w DynWater_LZ2-DynWater_Index
00003FAC 0000                       		dc.w DynWater_LZ3-DynWater_Index
00003FAE 0000                       		dc.w DynWater_SBZ3-DynWater_Index
00003FB0                            ; ===========================================================================
00003FB0                            
00003FB0                            DynWater_LZ1:				; XREF: DynWater_Index
00003FB0 3038 F700                  		move.w	($FFFFF700).w,d0
00003FB4 1438 F64D                  		move.b	($FFFFF64D).w,d2
00003FB8 6600                       		bne.s	loc_3CD0
00003FBA 323C 00B8                  		move.w	#$B8,d1
00003FBE 0C40 0600                  		cmpi.w	#$600,d0
00003FC2 6500                       		bcs.s	loc_3CB4
00003FC4 323C 0108                  		move.w	#$108,d1
00003FC8 0C78 0200 D00C             		cmpi.w	#$200,($FFFFD00C).w
00003FCE 6500                       		bcs.s	loc_3CBA
00003FD0 0C40 0C00                  		cmpi.w	#$C00,d0
00003FD4 6500                       		bcs.s	loc_3CB4
00003FD6 323C 0318                  		move.w	#$318,d1
00003FDA 0C40 1080                  		cmpi.w	#$1080,d0
00003FDE 6500                       		bcs.s	loc_3CB4
00003FE0 11FC 0080 F7E5             		move.b	#-$80,($FFFFF7E5).w
00003FE6 323C 05C8                  		move.w	#$5C8,d1
00003FEA 0C40 1380                  		cmpi.w	#$1380,d0
00003FEE 6500                       		bcs.s	loc_3CB4
00003FF0 323C 03A8                  		move.w	#$3A8,d1
00003FF4 B278 F648                  		cmp.w	($FFFFF648).w,d1
00003FF8 6600                       		bne.s	loc_3CB4
00003FFA 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
00004000                            
00004000                            loc_3CB4:
00004000 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004004 4E75                       		rts	
00004006                            ; ===========================================================================
00004006                            
00004006                            loc_3CBA:				; XREF: DynWater_LZ1
00004006 0C40 0C80                  		cmpi.w	#$C80,d0
0000400A 65F4                       		bcs.s	loc_3CB4
0000400C 323C 00E8                  		move.w	#$E8,d1
00004010 0C40 1500                  		cmpi.w	#$1500,d0
00004014 65EA                       		bcs.s	loc_3CB4
00004016 323C 0108                  		move.w	#$108,d1
0000401A 60E4                       		bra.s	loc_3CB4
0000401C                            ; ===========================================================================
0000401C                            
0000401C                            loc_3CD0:				; XREF: DynWater_LZ1
0000401C 5302                       		subq.b	#1,d2
0000401E 6600                       		bne.s	locret_3CF4
00004020 0C78 02E0 D00C             		cmpi.w	#$2E0,($FFFFD00C).w
00004026 6400                       		bcc.s	locret_3CF4
00004028 323C 03A8                  		move.w	#$3A8,d1
0000402C 0C40 1300                  		cmpi.w	#$1300,d0
00004030 6500                       		bcs.s	loc_3CF0
00004032 323C 0108                  		move.w	#$108,d1
00004036 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
0000403C                            
0000403C                            loc_3CF0:
0000403C 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004040                            
00004040                            locret_3CF4:
00004040 4E75                       		rts	
00004042                            ; ===========================================================================
00004042                            
00004042                            DynWater_LZ2:				; XREF: DynWater_Index
00004042 3038 F700                  		move.w	($FFFFF700).w,d0
00004046 323C 0328                  		move.w	#$328,d1
0000404A 0C40 0500                  		cmpi.w	#$500,d0
0000404E 6500                       		bcs.s	loc_3D12
00004050 323C 03C8                  		move.w	#$3C8,d1
00004054 0C40 0B00                  		cmpi.w	#$B00,d0
00004058 6500                       		bcs.s	loc_3D12
0000405A 323C 0428                  		move.w	#$428,d1
0000405E                            
0000405E                            loc_3D12:
0000405E 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004062 4E75                       		rts	
00004064                            ; ===========================================================================
00004064                            
00004064                            DynWater_LZ3:				; XREF: DynWater_Index
00004064 3038 F700                  		move.w	($FFFFF700).w,d0
00004068 1438 F64D                  		move.b	($FFFFF64D).w,d2
0000406C 6600                       		bne.s	loc_3D5E
0000406E 323C 0900                  		move.w	#$900,d1
00004072 0C40 0600                  		cmpi.w	#$600,d0
00004076 6500                       		bcs.s	loc_3D54
00004078 0C78 03C0 D00C             		cmpi.w	#$3C0,($FFFFD00C).w
0000407E 6500                       		bcs.s	loc_3D54
00004080 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
00004086 6400                       		bcc.s	loc_3D54
00004088 323C 04C8                  		move.w	#$4C8,d1
0000408C 11FC 004B A506             		move.b	#$4B,($FFFFA506).w ; change level layout
00004092 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
00004098 303C 00B7                  		move.w	#$B7,d0
0000409C 6100 D51E                  		bsr.w	PlaySound_Special ; play sound $B7 (rumbling)
000040A0                            
000040A0                            loc_3D54:
000040A0 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000040A4 31C1 F648                  		move.w	d1,($FFFFF648).w
000040A8 4E75                       		rts	
000040AA                            ; ===========================================================================
000040AA                            
000040AA                            loc_3D5E:				; XREF: DynWater_LZ3
000040AA 5302                       		subq.b	#1,d2
000040AC 6600                       		bne.s	loc_3DA8
000040AE 323C 04C8                  		move.w	#$4C8,d1
000040B2 0C40 0770                  		cmpi.w	#$770,d0
000040B6 6500                       		bcs.s	loc_3DA2
000040B8 323C 0308                  		move.w	#$308,d1
000040BC 0C40 1400                  		cmpi.w	#$1400,d0
000040C0 6500                       		bcs.s	loc_3DA2
000040C2 0C78 0508 F64A             		cmpi.w	#$508,($FFFFF64A).w
000040C8 6700                       		beq.s	loc_3D8E
000040CA 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
000040D0 6400                       		bcc.s	loc_3D8E
000040D2 0C78 0280 D00C             		cmpi.w	#$280,($FFFFD00C).w
000040D8 6400                       		bcc.s	loc_3DA2
000040DA                            
000040DA                            loc_3D8E:
000040DA 323C 0508                  		move.w	#$508,d1
000040DE 31C1 F648                  		move.w	d1,($FFFFF648).w
000040E2 0C40 1770                  		cmpi.w	#$1770,d0
000040E6 6500                       		bcs.s	loc_3DA2
000040E8 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
000040EE                            
000040EE                            loc_3DA2:
000040EE 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000040F2 4E75                       		rts	
000040F4                            ; ===========================================================================
000040F4                            
000040F4                            loc_3DA8:
000040F4 5302                       		subq.b	#1,d2
000040F6 6600                       		bne.s	loc_3DD2
000040F8 323C 0508                  		move.w	#$508,d1
000040FC 0C40 1860                  		cmpi.w	#$1860,d0
00004100 6500                       		bcs.s	loc_3DCC
00004102 323C 0188                  		move.w	#$188,d1
00004106 0C40 1AF0                  		cmpi.w	#$1AF0,d0
0000410A 6400                       		bcc.s	loc_3DC6
0000410C B278 F648                  		cmp.w	($FFFFF648).w,d1
00004110 6600                       		bne.s	loc_3DCC
00004112                            
00004112                            loc_3DC6:
00004112 11FC 0003 F64D             		move.b	#3,($FFFFF64D).w
00004118                            
00004118                            loc_3DCC:
00004118 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000411C 4E75                       		rts	
0000411E                            ; ===========================================================================
0000411E                            
0000411E                            loc_3DD2:
0000411E 5302                       		subq.b	#1,d2
00004120 6600                       		bne.s	loc_3E0E
00004122 323C 0188                  		move.w	#$188,d1
00004126 0C40 1AF0                  		cmpi.w	#$1AF0,d0
0000412A 6500                       		bcs.s	loc_3E04
0000412C 323C 0900                  		move.w	#$900,d1
00004130 0C40 1BC0                  		cmpi.w	#$1BC0,d0
00004134 6500                       		bcs.s	loc_3E04
00004136 11FC 0004 F64D             		move.b	#4,($FFFFF64D).w
0000413C 31FC 0608 F64A             		move.w	#$608,($FFFFF64A).w
00004142 31FC 07C0 F648             		move.w	#$7C0,($FFFFF648).w
00004148 11FC 0001 F7E8             		move.b	#1,($FFFFF7E8).w
0000414E 4E75                       		rts	
00004150                            ; ===========================================================================
00004150                            
00004150                            loc_3E04:
00004150 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004154 31C1 F648                  		move.w	d1,($FFFFF648).w
00004158 4E75                       		rts	
0000415A                            ; ===========================================================================
0000415A                            
0000415A                            loc_3E0E:
0000415A 0C40 1E00                  		cmpi.w	#$1E00,d0
0000415E 6500                       		bcs.s	locret_3E1A
00004160 31FC 0128 F64A             		move.w	#$128,($FFFFF64A).w
00004166                            
00004166                            locret_3E1A:
00004166 4E75                       		rts	
00004168                            ; ===========================================================================
00004168                            
00004168                            DynWater_SBZ3:				; XREF: DynWater_Index
00004168 323C 0228                  		move.w	#$228,d1
0000416C 0C78 0F00 F700             		cmpi.w	#$F00,($FFFFF700).w
00004172 6500                       		bcs.s	loc_3E2C
00004174 323C 04C8                  		move.w	#$4C8,d1
00004178                            
00004178                            loc_3E2C:
00004178 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000417C 4E75                       		rts
0000417E                            
0000417E                            ; ---------------------------------------------------------------------------
0000417E                            ; Labyrinth Zone "wind tunnels"	subroutine
0000417E                            ; ---------------------------------------------------------------------------
0000417E                            
0000417E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000417E                            
0000417E                            
0000417E                            LZWindTunnels:				; XREF: LZWaterEffects
0000417E 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00004182 6600 0000                  		bne.w	locret_3F0A	; if yes, branch
00004186 45F9 0000 0000             		lea	(LZWind_Data).l,a2
0000418C 7000                       		moveq	#0,d0
0000418E 1038 FE11                  		move.b	($FFFFFE11).w,d0
00004192 E748                       		lsl.w	#3,d0
00004194 D4C0                       		adda.w	d0,a2
00004196 7200                       		moveq	#0,d1
00004198 4A38 FE11                  		tst.b	($FFFFFE11).w
0000419C 6600                       		bne.s	loc_3E56
0000419E 7201                       		moveq	#1,d1
000041A0 514A                       		subq.w	#8,a2
000041A2                            
000041A2                            loc_3E56:
000041A2 43F8 D000                  		lea	($FFFFD000).w,a1
000041A6                            
000041A6                            LZWind_Loop:
000041A6 3029 0008                  		move.w	8(a1),d0
000041AA B052                       		cmp.w	(a2),d0
000041AC 6500 0000                  		bcs.w	loc_3EF4
000041B0 B06A 0004                  		cmp.w	4(a2),d0
000041B4 6400 0000                  		bcc.w	loc_3EF4
000041B8 3429 000C                  		move.w	$C(a1),d2
000041BC B46A 0002                  		cmp.w	2(a2),d2
000041C0 6500                       		bcs.s	loc_3EF4
000041C2 B46A 0006                  		cmp.w	6(a2),d2
000041C6 6400                       		bcc.s	loc_3EF4
000041C8 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000041CC 0200 003F                  		andi.b	#$3F,d0
000041D0 6600                       		bne.s	loc_3E90
000041D2 303C 00D0                  		move.w	#$D0,d0
000041D6 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play rushing water sound
000041DC                            
000041DC                            loc_3E90:
000041DC 4A38 F7C9                  		tst.b	($FFFFF7C9).w
000041E0 6600 0000                  		bne.w	locret_3F0A
000041E4 0C29 0004 0024             		cmpi.b	#4,$24(a1)
000041EA 6400                       		bcc.s	loc_3F06
000041EC 11FC 0001 F7C7             		move.b	#1,($FFFFF7C7).w
000041F2 0440 0080                  		subi.w	#$80,d0
000041F6 B052                       		cmp.w	(a2),d0
000041F8 6400                       		bcc.s	LZWind_Move
000041FA 7002                       		moveq	#2,d0
000041FC 0C38 0001 FE11             		cmpi.b	#1,($FFFFFE11).w
00004202 6600                       		bne.s	loc_3EBA
00004204 4440                       		neg.w	d0
00004206                            
00004206                            loc_3EBA:
00004206 D169 000C                  		add.w	d0,$C(a1)
0000420A                            
0000420A                            LZWind_Move:
0000420A 5869 0008                  		addq.w	#4,8(a1)
0000420E 337C 0400 0010             		move.w	#$400,$10(a1)	; move Sonic horizontally
00004214 337C 0000 0012             		move.w	#0,$12(a1)
0000421A 137C 000F 001C             		move.b	#$F,$1C(a1)	; use floating animation
00004220 08E9 0001 0022             		bset	#1,$22(a1)
00004226 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up pressed?
0000422C 6700                       		beq.s	LZWind_MoveDown	; if not, branch
0000422E 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
00004232                            
00004232                            LZWind_MoveDown:
00004232 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00004238 6700                       		beq.s	locret_3EF2	; if not, branch
0000423A 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
0000423E                            
0000423E                            locret_3EF2:
0000423E 4E75                       		rts	
00004240                            ; ===========================================================================
00004240                            
00004240                            loc_3EF4:				; XREF: LZWindTunnels
00004240 504A                       		addq.w	#8,a2
00004242 51C9 FF62                  		dbf	d1,LZWind_Loop
00004246 4A38 F7C7                  		tst.b	($FFFFF7C7).w
0000424A 6700                       		beq.s	locret_3F0A
0000424C 137C 0000 001C             		move.b	#0,$1C(a1)
00004252                            
00004252                            loc_3F06:
00004252 4238 F7C7                  		clr.b	($FFFFF7C7).w
00004256                            
00004256                            locret_3F0A:
00004256 4E75                       		rts	
00004258                            ; End of function LZWindTunnels
00004258                            
00004258                            ; ===========================================================================
00004258 0A80 0300 0C10 0380        		dc.w $A80, $300, $C10, $380
00004260 0F80 0100 1410 0180 0460+  LZWind_Data:	dc.w $F80, $100, $1410,	$180, $460, $400, $710,	$480, $A20
00004272 0600 1610 06E0 0C80 0600+  		dc.w $600, $1610, $6E0,	$C80, $600, $13D0, $680
00004280                            					; XREF: LZWindTunnels
00004280                            		even
00004280                            
00004280                            ; ---------------------------------------------------------------------------
00004280                            ; Labyrinth Zone water slide subroutine
00004280                            ; ---------------------------------------------------------------------------
00004280                            
00004280                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004280                            
00004280                            
00004280                            LZWaterSlides:				; XREF: LZWaterEffects
00004280 43F8 D000                  		lea	($FFFFD000).w,a1
00004284 0829 0001 0022             		btst	#1,$22(a1)
0000428A 6600                       		bne.s	loc_3F6A
0000428C 3029 000C                  		move.w	$C(a1),d0
00004290 E248                       		lsr.w	#1,d0
00004292 0240 0380                  		andi.w	#$380,d0
00004296 1229 0008                  		move.b	8(a1),d1
0000429A 0241 007F                  		andi.w	#$7F,d1
0000429E D041                       		add.w	d1,d0
000042A0 45F8 A400                  		lea	($FFFFA400).w,a2
000042A4 1032 0000                  		move.b	(a2,d0.w),d0
000042A8 45FA 0000                  		lea	byte_3FCF(pc),a2
000042AC 7206                       		moveq	#6,d1
000042AE                            
000042AE                            loc_3F62:
000042AE B022                       		cmp.b	-(a2),d0
000042B0 57C9 FFFC                  		dbeq	d1,loc_3F62
000042B4 6700                       		beq.s	LZSlide_Move
000042B6                            
000042B6                            loc_3F6A:
000042B6 4A38 F7CA                  		tst.b	($FFFFF7CA).w
000042BA 6700                       		beq.s	locret_3F7A
000042BC 337C 0005 003E             		move.w	#5,$3E(a1)
000042C2 4238 F7CA                  		clr.b	($FFFFF7CA).w
000042C6                            
000042C6                            locret_3F7A:
000042C6 4E75                       		rts	
000042C8                            ; ===========================================================================
000042C8                            
000042C8                            LZSlide_Move:				; XREF: LZWaterSlides
000042C8 0C41 0003                  		cmpi.w	#3,d1
000042CC 6400                       		bcc.s	loc_3F84
000042CE 4E71                       		nop	
000042D0                            
000042D0                            loc_3F84:
000042D0 08A9 0000 0022             		bclr	#0,$22(a1)
000042D6 103B 1000                  		move.b	byte_3FC0(pc,d1.w),d0
000042DA 1340 0014                  		move.b	d0,$14(a1)
000042DE 6A00                       		bpl.s	loc_3F9A
000042E0 08E9 0000 0022             		bset	#0,$22(a1)
000042E6                            
000042E6                            loc_3F9A:
000042E6 4229 0015                  		clr.b	$15(a1)
000042EA 137C 001B 001C             		move.b	#$1B,$1C(a1)	; use Sonic's "sliding" animation
000042F0 11FC 0001 F7CA             		move.b	#1,($FFFFF7CA).w ; lock	controls (except jumping)
000042F6 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000042FA 0200 001F                  		andi.b	#$1F,d0
000042FE 6600                       		bne.s	locret_3FBE
00004300 303C 00D0                  		move.w	#$D0,d0
00004304 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play water sound
0000430A                            
0000430A                            locret_3FBE:
0000430A 4E75                       		rts	
0000430C                            ; End of function LZWaterSlides
0000430C                            
0000430C                            ; ===========================================================================
0000430C 0AF5 0AF6 F5F4 0B00 0207+  byte_3FC0:	dc.b $A, $F5, $A, $F6, $F5, $F4, $B, 0,	2, 7, 3, $4C, $4B, 8, 4
0000431B 00                         byte_3FCF:	dc.b 0			; XREF: LZWaterSlides
0000431C                            		even
0000431C                            
0000431C                            ; ---------------------------------------------------------------------------
0000431C                            ; Subroutine to	move Sonic in demo mode
0000431C                            ; ---------------------------------------------------------------------------
0000431C                            
0000431C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000431C                            
0000431C                            
0000431C                            MoveSonicInDemo:			; XREF: Level_MainLoop; et al
0000431C 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004320 6600                       		bne.s	MoveDemo_On	; if yes, branch
00004322 4E75                       		rts	
00004324                            ; ===========================================================================
00004324                            
00004324                            ; This is an unused subroutine for recording a demo
00004324                            
00004324                            MoveDemo_Record:
00004324 43F9 0008 0000             		lea	($80000).l,a1
0000432A 3038 F790                  		move.w	($FFFFF790).w,d0
0000432E D2C0                       		adda.w	d0,a1
00004330 1038 F604                  		move.b	($FFFFF604).w,d0
00004334 B011                       		cmp.b	(a1),d0
00004336 6600                       		bne.s	loc_3FFA
00004338 5229 0001                  		addq.b	#1,1(a1)
0000433C 0C29 00FF 0001             		cmpi.b	#$FF,1(a1)
00004342 6700                       		beq.s	loc_3FFA
00004344 4E75                       		rts	
00004346                            ; ===========================================================================
00004346                            
00004346                            loc_3FFA:				; XREF: MoveDemo_Record
00004346 1340 0002                  		move.b	d0,2(a1)
0000434A 137C 0000 0003             		move.b	#0,3(a1)
00004350 5478 F790                  		addq.w	#2,($FFFFF790).w
00004354 0278 03FF F790             		andi.w	#$3FF,($FFFFF790).w
0000435A 4E75                       		rts	
0000435C                            ; ===========================================================================
0000435C                            
0000435C                            MoveDemo_On:				; XREF: MoveSonicInDemo
0000435C 4A38 F604                  		tst.b	($FFFFF604).w
00004360 6A00                       		bpl.s	loc_4022
00004362 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00004366 6B00                       		bmi.s	loc_4022
00004368 11FC 0004 F600             		move.b	#4,($FFFFF600).w
0000436E                            
0000436E                            loc_4022:
0000436E 43F9 0000 0000             		lea	(Demo_Index).l,a1
00004374 7000                       		moveq	#0,d0
00004376 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000437A 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
00004380 6600                       		bne.s	loc_4038
00004382 7006                       		moveq	#6,d0
00004384                            
00004384                            loc_4038:
00004384 E548                       		lsl.w	#2,d0
00004386 2271 0000                  		movea.l	(a1,d0.w),a1
0000438A 4A78 FFF0                  		tst.w	($FFFFFFF0).w
0000438E 6A00                       		bpl.s	loc_4056
00004390 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1
00004396 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
0000439A 5340                       		subq.w	#1,d0
0000439C E548                       		lsl.w	#2,d0
0000439E 2271 0000                  		movea.l	(a1,d0.w),a1
000043A2                            
000043A2                            loc_4056:
000043A2 3038 F790                  		move.w	($FFFFF790).w,d0
000043A6 D2C0                       		adda.w	d0,a1
000043A8 1011                       		move.b	(a1),d0
000043AA 41F8 F604                  		lea	($FFFFF604).w,a0
000043AE 1200                       		move.b	d0,d1
000043B0 1410                       		move.b	(a0),d2
000043B2 B500                       		eor.b	d2,d0
000043B4 10C1                       		move.b	d1,(a0)+
000043B6 C001                       		and.b	d1,d0
000043B8 10C0                       		move.b	d0,(a0)+
000043BA 5338 F792                  		subq.b	#1,($FFFFF792).w
000043BE 6400                       		bcc.s	locret_407E
000043C0 11E9 0003 F792             		move.b	3(a1),($FFFFF792).w
000043C6 5478 F790                  		addq.w	#2,($FFFFF790).w
000043CA                            
000043CA                            locret_407E:
000043CA 4E75                       		rts	
000043CC                            ; End of function MoveSonicInDemo
000043CC                            
000043CC                            ; ===========================================================================
000043CC                            ; ---------------------------------------------------------------------------
000043CC                            ; Demo sequence	pointers
000043CC                            ; ---------------------------------------------------------------------------
000043CC                            Demo_Index:
000043CC                            	include "_inc\Demo pointers for intro.asm"
000043CC                            ; ---------------------------------------------------------------------------
000043CC                            ; Demo sequence	pointers
000043CC                            ; ---------------------------------------------------------------------------
000043CC 0000 0000                  	dc.l Demo_GHZ
000043D0 0000 0000                  	dc.l Demo_GHZ
000043D4 0000 0000                  	dc.l Demo_MZ
000043D8 0000 0000                  	dc.l Demo_MZ
000043DC 0000 0000                  	dc.l Demo_SYZ
000043E0 0000 0000                  	dc.l Demo_SYZ
000043E4 0000 0000                  	dc.l Demo_SS
000043E8 0000 0000                  	dc.l Demo_SS
000043E8 0000 0000                  	dc.l Demo_SS
000043EC                            
000043EC                            Demo_EndIndex:
000043EC                            	include "_inc\Demo pointers for ending.asm"
000043EC                            ; ---------------------------------------------------------------------------
000043EC                            ; Demo (ending) sequence pointers
000043EC                            ; ---------------------------------------------------------------------------
000043EC 0000 0000                  	dc.l Demo_EndGHZ1
000043F0 0000 0000                  	dc.l Demo_EndMZ
000043F4 0000 0000                  	dc.l Demo_EndSYZ
000043F8 0000 0000                  	dc.l Demo_EndLZ
000043FC 0000 0000                  	dc.l Demo_EndSLZ
00004400 0000 0000                  	dc.l Demo_EndSBZ1
00004404 0000 0000                  	dc.l Demo_EndSBZ2
00004408 0000 0000                  	dc.l Demo_EndGHZ2
00004408 0000 0000                  	dc.l Demo_EndGHZ2
0000440C                            
0000440C 008B 0837 0042 085C 006A+  		dc.b 0,	$8B, 8,	$37, 0,	$42, 8,	$5C, 0,	$6A, 8,	$5F, 0,	$2F, 8,	$2C
0000441C 0021 0803 2830 0808 002E+  		dc.b 0,	$21, 8,	3, $28,	$30, 8,	8, 0, $2E, 8, $15, 0, $F, 8, $46
0000442C 001A 08FF 08CA 0000 0000+  		dc.b 0,	$1A, 8,	$FF, 8,	$CA, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0
0000443C                            		even
0000443C                            
0000443C                            ; ---------------------------------------------------------------------------
0000443C                            ; Collision index loading subroutine
0000443C                            ; ---------------------------------------------------------------------------
0000443C                            
0000443C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000443C                            
0000443C                            
0000443C                            ColIndexLoad:				; XREF: Level
0000443C 7000                       		moveq	#0,d0
0000443E 1038 FE10                  		move.b	($FFFFFE10).w,d0
00004442 E548                       		lsl.w	#2,d0
00004444 21FB 0000 F796             		move.l	ColPointers(pc,d0.w),($FFFFF796).w
0000444A 4E75                       		rts	
0000444C                            ; End of function ColIndexLoad
0000444C                            
0000444C                            ; ===========================================================================
0000444C                            ; ---------------------------------------------------------------------------
0000444C                            ; Collision index pointers
0000444C                            ; ---------------------------------------------------------------------------
0000444C                            ColPointers:
0000444C                            	include "_inc\Collision index pointers.asm"
0000444C                            ; ---------------------------------------------------------------------------
0000444C                            ; Collision index pointers
0000444C                            ; ---------------------------------------------------------------------------
0000444C 0000 0000                  	dc.l Col_GHZ
00004450 0000 0000                  	dc.l Col_LZ
00004454 0000 0000                  	dc.l Col_MZ
00004458 0000 0000                  	dc.l Col_SLZ
0000445C 0000 0000                  	dc.l Col_SYZ
00004460 0000 0000                  	dc.l Col_SBZ
00004460 0000 0000                  	dc.l Col_SBZ
00004464                            
00004464                            ; ---------------------------------------------------------------------------
00004464                            ; Oscillating number subroutine
00004464                            ; ---------------------------------------------------------------------------
00004464                            
00004464                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004464                            
00004464                            
00004464                            OscillateNumInit:			; XREF: Level
00004464 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
00004468 45F9 0000 0000             		lea	(Osc_Data).l,a2
0000446E 7220                       		moveq	#$20,d1
00004470                            
00004470                            Osc_Loop:
00004470 32DA                       		move.w	(a2)+,(a1)+
00004472 51C9 FFFC                  		dbf	d1,Osc_Loop
00004476 4E75                       		rts	
00004478                            ; End of function OscillateNumInit
00004478                            
00004478                            ; ===========================================================================
00004478 007C 0080                  Osc_Data:	dc.w $7C, $80		; baseline values
0000447C 0000 0080                  		dc.w 0,	$80
00004480 0000 0080                  		dc.w 0,	$80
00004484 0000 0080                  		dc.w 0,	$80
00004488 0000 0080                  		dc.w 0,	$80
0000448C 0000 0080                  		dc.w 0,	$80
00004490 0000 0080                  		dc.w 0,	$80
00004494 0000 0080                  		dc.w 0,	$80
00004498 0000 0080                  		dc.w 0,	$80
0000449C 0000 50F0                  		dc.w 0,	$50F0
000044A0 011E 2080                  		dc.w $11E, $2080
000044A4 00B4 3080                  		dc.w $B4, $3080
000044A8 010E 5080                  		dc.w $10E, $5080
000044AC 01C2 7080                  		dc.w $1C2, $7080
000044B0 0276 0080                  		dc.w $276, $80
000044B4 0000 0080                  		dc.w 0,	$80
000044B8 0000                       		dc.w 0
000044BA                            		even
000044BA                            
000044BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000044BA                            
000044BA                            
000044BA                            OscillateNumDo:				; XREF: Level
000044BA 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000044C0 6400                       		bcc.s	locret_41C4
000044C2 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
000044C6 45F9 0000 0000             		lea	(Osc_Data2).l,a2
000044CC 3619                       		move.w	(a1)+,d3
000044CE 720F                       		moveq	#$F,d1
000044D0                            
000044D0                            loc_4184:
000044D0 341A                       		move.w	(a2)+,d2
000044D2 381A                       		move.w	(a2)+,d4
000044D4 0303                       		btst	d1,d3
000044D6 6600                       		bne.s	loc_41A4
000044D8 3029 0002                  		move.w	2(a1),d0
000044DC D042                       		add.w	d2,d0
000044DE 3340 0002                  		move.w	d0,2(a1)
000044E2 D151                       		add.w	d0,0(a1)
000044E4 B811                       		cmp.b	0(a1),d4
000044E6 6200                       		bhi.s	loc_41BA
000044E8 03C3                       		bset	d1,d3
000044EA 6000                       		bra.s	loc_41BA
000044EC                            ; ===========================================================================
000044EC                            
000044EC                            loc_41A4:				; XREF: OscillateNumDo
000044EC 3029 0002                  		move.w	2(a1),d0
000044F0 9042                       		sub.w	d2,d0
000044F2 3340 0002                  		move.w	d0,2(a1)
000044F6 D151                       		add.w	d0,0(a1)
000044F8 B811                       		cmp.b	0(a1),d4
000044FA 6300                       		bls.s	loc_41BA
000044FC 0383                       		bclr	d1,d3
000044FE                            
000044FE                            loc_41BA:
000044FE 5849                       		addq.w	#4,a1
00004500 51C9 FFCE                  		dbf	d1,loc_4184
00004504 31C3 FE5E                  		move.w	d3,($FFFFFE5E).w
00004508                            
00004508                            locret_41C4:
00004508 4E75                       		rts	
0000450A                            ; End of function OscillateNumDo
0000450A                            
0000450A                            ; ===========================================================================
0000450A 0002 0010                  Osc_Data2:	dc.w 2,	$10		; XREF: OscillateNumDo
0000450E 0002 0018                  		dc.w 2,	$18
00004512 0002 0020                  		dc.w 2,	$20
00004516 0002 0030                  		dc.w 2,	$30
0000451A 0004 0020                  		dc.w 4,	$20
0000451E 0008 0008                  		dc.w 8,	8
00004522 0008 0040                  		dc.w 8,	$40
00004526 0004 0040                  		dc.w 4,	$40
0000452A 0002 0050                  		dc.w 2,	$50
0000452E 0002 0050                  		dc.w 2,	$50
00004532 0002 0020                  		dc.w 2,	$20
00004536 0003 0030                  		dc.w 3,	$30
0000453A 0005 0050                  		dc.w 5,	$50
0000453E 0007 0070                  		dc.w 7,	$70
00004542 0002 0010                  		dc.w 2,	$10
00004546 0002 0010                  		dc.w 2,	$10
0000454A                            		even
0000454A                            
0000454A                            ; ---------------------------------------------------------------------------
0000454A                            ; Subroutine to	change object animation	variables (rings, giant	rings)
0000454A                            ; ---------------------------------------------------------------------------
0000454A                            
0000454A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000454A                            
0000454A                            
0000454A                            ChangeRingFrame:			; XREF: Level
0000454A 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
0000454E 6A00                       		bpl.s	loc_421C
00004550 11FC 000B FEC0             		move.b	#$B,($FFFFFEC0).w
00004556 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
0000455A 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
00004560                            
00004560                            loc_421C:
00004560 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
00004564 6A00                       		bpl.s	loc_4232
00004566 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
0000456C 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
00004570 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
00004576                            
00004576                            loc_4232:
00004576 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
0000457A 6A00                       		bpl.s	loc_4250
0000457C 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
00004582 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
00004586 0C38 0006 FEC5             		cmpi.b	#6,($FFFFFEC5).w
0000458C 6500                       		bcs.s	loc_4250
0000458E 11FC 0000 FEC5             		move.b	#0,($FFFFFEC5).w
00004594                            
00004594                            loc_4250:
00004594 4A38 FEC6                  		tst.b	($FFFFFEC6).w
00004598 6700                       		beq.s	locret_4272
0000459A 7000                       		moveq	#0,d0
0000459C 1038 FEC6                  		move.b	($FFFFFEC6).w,d0
000045A0 D078 FEC8                  		add.w	($FFFFFEC8).w,d0
000045A4 31C0 FEC8                  		move.w	d0,($FFFFFEC8).w
000045A8 EF58                       		rol.w	#7,d0
000045AA 0240 0003                  		andi.w	#3,d0
000045AE 11C0 FEC7                  		move.b	d0,($FFFFFEC7).w
000045B2 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
000045B6                            
000045B6                            locret_4272:
000045B6 4E75                       		rts	
000045B8                            ; End of function ChangeRingFrame
000045B8                            
000045B8                            ; ---------------------------------------------------------------------------
000045B8                            ; End-of-act signpost pattern loading subroutine
000045B8                            ; ---------------------------------------------------------------------------
000045B8                            
000045B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000045B8                            
000045B8                            
000045B8                            SignpostArtLoad:			; XREF: Level
000045B8 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
000045BC 6600 0000                  		bne.w	Signpost_Exit	; if yes, branch
000045C0 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; is act number 02 (act 3)?
000045C6 6700                       		beq.s	Signpost_Exit	; if yes, branch
000045C8 3038 F700                  		move.w	($FFFFF700).w,d0
000045CC 3238 F72A                  		move.w	($FFFFF72A).w,d1
000045D0 0441 0100                  		subi.w	#$100,d1
000045D4 B041                       		cmp.w	d1,d0		; has Sonic reached the	edge of	the level?
000045D6 6D00                       		blt.s	Signpost_Exit	; if not, branch
000045D8 4A38 FE1E                  		tst.b	($FFFFFE1E).w
000045DC 6700                       		beq.s	Signpost_Exit
000045DE B278 F728                  		cmp.w	($FFFFF728).w,d1
000045E2 6700                       		beq.s	Signpost_Exit
000045E4 31C1 F728                  		move.w	d1,($FFFFF728).w ; move	left boundary to current screen	position
000045E8 7012                       		moveq	#$12,d0
000045EA 6000 D1E6                  		bra.w	LoadPLC2	; load signpost	patterns
000045EE                            ; ===========================================================================
000045EE                            
000045EE                            Signpost_Exit:
000045EE 4E75                       		rts	
000045F0                            ; End of function SignpostArtLoad
000045F0                            
000045F0                            ; ===========================================================================
000045F0                            Demo_GHZ:	incbin	demodata\i_ghz.bin
00004670                            Demo_MZ:	incbin	demodata\i_mz.bin
000047A0                            Demo_SYZ:	incbin	demodata\i_syz.bin
00004820                            Demo_SS:	incbin	demodata\i_ss.bin
00004920                            ; ===========================================================================
00004920                            
00004920                            ; ---------------------------------------------------------------------------
00004920                            ; Special Stage
00004920                            ; ---------------------------------------------------------------------------
00004920                            
00004920                            SpecialStage:				; XREF: GameModeArray
00004920 303C 00CA                  		move.w	#$CA,d0
00004924 6100 CC96                  		bsr.w	PlaySound_Special ; play special stage entry sound
00004928 6100 D872                  		bsr.w	Pal_MakeFlash
0000492C 46FC 2700                  		move	#$2700,sr
00004930 4DF9 00C0 0004             		lea	($C00004).l,a6
00004936 3CBC 8B03                  		move.w	#$8B03,(a6)
0000493A 3CBC 8004                  		move.w	#$8004,(a6)
0000493E 31FC 8AAF F624             		move.w	#$8AAF,($FFFFF624).w
00004944 3CBC 9011                  		move.w	#$9011,(a6)
00004948 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000494C 0200 00BF                  		andi.b	#$BF,d0
00004950 33C0 00C0 0004             		move.w	d0,($C00004).l
00004956 6100 CB8C                  		bsr.w	ClearScreen
0000495A 46FC 2300                  		move	#$2300,sr
0000495E 4BF9 00C0 0004             		lea	($C00004).l,a5
00004964 3ABC 8F01                  		move.w	#$8F01,(a5)
00004968 2ABC 946F 93FF             		move.l	#$946F93FF,(a5)
0000496E 3ABC 9780                  		move.w	#$9780,(a5)
00004972 2ABC 5000 0081             		move.l	#$50000081,(a5)
00004978 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00004980                            
00004980                            loc_463C:
00004980 3215                       		move.w	(a5),d1
00004982 0801 0001                  		btst	#1,d1
00004986 66F8                       		bne.s	loc_463C
00004988 3ABC 8F02                  		move.w	#$8F02,(a5)
0000498C 6100 0000                  		bsr.w	SS_BGLoad
00004990 7014                       		moveq	#$14,d0
00004992 6100 CF78                  		bsr.w	RunPLC_ROM	; load special stage patterns
00004996 43F8 D000                  		lea	($FFFFD000).w,a1
0000499A 7000                       		moveq	#0,d0
0000499C 323C 07FF                  		move.w	#$7FF,d1
000049A0                            
000049A0                            SS_ClrObjRam:
000049A0 22C0                       		move.l	d0,(a1)+
000049A2 51C9 FFFC                  		dbf	d1,SS_ClrObjRam	; clear	the object RAM
000049A6                            
000049A6 43F8 F700                  		lea	($FFFFF700).w,a1
000049AA 7000                       		moveq	#0,d0
000049AC 323C 003F                  		move.w	#$3F,d1
000049B0                            
000049B0                            SS_ClrRam:
000049B0 22C0                       		move.l	d0,(a1)+
000049B2 51C9 FFFC                  		dbf	d1,SS_ClrRam	; clear	variables
000049B6                            
000049B6 43F8 FE60                  		lea	($FFFFFE60).w,a1
000049BA 7000                       		moveq	#0,d0
000049BC 323C 0027                  		move.w	#$27,d1
000049C0                            
000049C0                            SS_ClrRam2:
000049C0 22C0                       		move.l	d0,(a1)+
000049C2 51C9 FFFC                  		dbf	d1,SS_ClrRam2	; clear	variables
000049C6                            
000049C6 43F8 AA00                  		lea	($FFFFAA00).w,a1
000049CA 7000                       		moveq	#0,d0
000049CC 323C 007F                  		move.w	#$7F,d1
000049D0                            
000049D0                            SS_ClrNemRam:
000049D0 22C0                       		move.l	d0,(a1)+
000049D2 51C9 FFFC                  		dbf	d1,SS_ClrNemRam	; clear	Nemesis	buffer
000049D6                            
000049D6 4238 F64E                  		clr.b	($FFFFF64E).w
000049DA 4278 FE02                  		clr.w	($FFFFFE02).w
000049DE 700A                       		moveq	#$A,d0
000049E0 6100 D93A                  		bsr.w	PalLoad1	; load special stage pallet
000049E4 4EB9 0000 0000             		jsr	SS_Load
000049EA 21FC 0000 0000 F700        		move.l	#0,($FFFFF700).w
000049F2 21FC 0000 0000 F704        		move.l	#0,($FFFFF704).w
000049FA 11FC 0009 D000             		move.b	#9,($FFFFD000).w ; load	special	stage Sonic object
00004A00 6100 0000                  		bsr.w	PalCycle_SS
00004A04 4278 F780                  		clr.w	($FFFFF780).w	; set stage angle to "upright"
00004A08 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set stage rotation	speed
00004A0E 303C 0089                  		move.w	#$89,d0
00004A12 6100 CBA2                  		bsr.w	PlaySound	; play special stage BG	music
00004A16 31FC 0000 F790             		move.w	#0,($FFFFF790).w
00004A1C 43F9 0000 43CC             		lea	(Demo_Index).l,a1
00004A22 7006                       		moveq	#6,d0
00004A24 E548                       		lsl.w	#2,d0
00004A26 2271 0000                  		movea.l	(a1,d0.w),a1
00004A2A 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w
00004A30 5338 F792                  		subq.b	#1,($FFFFF792).w
00004A34 4278 FE20                  		clr.w	($FFFFFE20).w
00004A38 4238 FE1B                  		clr.b	($FFFFFE1B).w
00004A3C 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w
00004A42 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00004A48 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00004A4C 6700                       		beq.s	SS_NoDebug	; if not, branch
00004A4E 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
00004A54 6700                       		beq.s	SS_NoDebug	; if not, branch
00004A56 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00004A5C                            
00004A5C                            SS_NoDebug:
00004A5C 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004A60 0000 0040                  		ori.b	#$40,d0
00004A64 33C0 00C0 0004             		move.w	d0,($C00004).l
00004A6A 6100 D684                  		bsr.w	Pal_MakeWhite
00004A6E                            
00004A6E                            ; ---------------------------------------------------------------------------
00004A6E                            ; Main Special Stage loop
00004A6E                            ; ---------------------------------------------------------------------------
00004A6E                            
00004A6E                            SS_MainLoop:
00004A6E 6100 CB58                  		bsr.w	PauseGame
00004A72 11FC 000A F62A             		move.b	#$A,($FFFFF62A).w
00004A78 6100 E176                  		bsr.w	DelayProgram
00004A7C 6100 F89E                  		bsr.w	MoveSonicInDemo
00004A80 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
00004A86 4EB9 0000 0000             		jsr	ObjectsLoad
00004A8C 4EB9 0000 0000             		jsr	BuildSprites
00004A92 4EB9 0000 0000             		jsr	SS_ShowLayout
00004A98 6100 0000                  		bsr.w	SS_BGAnimate
00004A9C 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004AA0 6700                       		beq.s	SS_ChkEnd	; if not, branch
00004AA2 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00004AA6 6700 0000                  		beq.w	SS_ToSegaScreen	; if not, branch
00004AAA                            
00004AAA                            SS_ChkEnd:
00004AAA 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode $10 (special stage)?
00004AB0 6700 FFBC                  		beq.w	SS_MainLoop	; if yes, branch
00004AB4                            
00004AB4 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004AB8 6600 0000                  		bne.w	SS_ToSegaScreen	; if yes, branch
00004ABC 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00004AC2 0C78 0503 FE10             		cmpi.w	#$503,($FFFFFE10).w ; is level number higher than FZ?
00004AC8 6500                       		bcs.s	SS_End		; if not, branch
00004ACA 4278 FE10                  		clr.w	($FFFFFE10).w	; set to GHZ1
00004ACE                            
00004ACE                            SS_End:
00004ACE 31FC 003C F614             		move.w	#60,($FFFFF614).w ; set	delay time to 1	second
00004AD4 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00004ADA 4278 F794                  		clr.w	($FFFFF794).w
00004ADE                            
00004ADE                            SS_EndLoop:
00004ADE 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
00004AE4 6100 E10A                  		bsr.w	DelayProgram
00004AE8 6100 F832                  		bsr.w	MoveSonicInDemo
00004AEC 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
00004AF2 4EB9 0000 0000             		jsr	ObjectsLoad
00004AF8 4EB9 0000 0000             		jsr	BuildSprites
00004AFE 4EB9 0000 0000             		jsr	SS_ShowLayout
00004B04 6100 0000                  		bsr.w	SS_BGAnimate
00004B08 5378 F794                  		subq.w	#1,($FFFFF794).w
00004B0C 6A00                       		bpl.s	loc_47D4
00004B0E 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00004B14 6100 D6A6                  		bsr.w	Pal_ToWhite
00004B18                            
00004B18                            loc_47D4:
00004B18 4A78 F614                  		tst.w	($FFFFF614).w
00004B1C 66C0                       		bne.s	SS_EndLoop
00004B1E                            
00004B1E 46FC 2700                  		move	#$2700,sr
00004B22 4DF9 00C0 0004             		lea	($C00004).l,a6
00004B28 3CBC 8230                  		move.w	#$8230,(a6)
00004B2C 3CBC 8407                  		move.w	#$8407,(a6)
00004B30 3CBC 9001                  		move.w	#$9001,(a6)
00004B34 6100 C9AE                  		bsr.w	ClearScreen
00004B38 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00004B42 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00004B48 6100 CB16                  		bsr.w	NemDec
00004B4C 4EB9 0000 0000             		jsr	Hud_Base
00004B52 46FC 2300                  		move	#$2300,sr
00004B56 7011                       		moveq	#$11,d0
00004B58 6100 D7DE                  		bsr.w	PalLoad2	; load results screen pallet
00004B5C 7000                       		moveq	#0,d0
00004B5E 6100 CC72                  		bsr.w	LoadPLC2
00004B62 701B                       		moveq	#$1B,d0
00004B64 6100 CC3A                  		bsr.w	LoadPLC		; load results screen patterns
00004B68 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00004B6E 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; update ring bonus counter
00004B74 3038 FE20                  		move.w	($FFFFFE20).w,d0
00004B78 C0FC 000A                  		mulu.w	#10,d0		; multiply rings by 10
00004B7C 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set rings bonus
00004B80 303C 008E                  		move.w	#$8E,d0
00004B84 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play end-of-level music
00004B8A 43F8 D000                  		lea	($FFFFD000).w,a1
00004B8E 7000                       		moveq	#0,d0
00004B90 323C 07FF                  		move.w	#$7FF,d1
00004B94                            
00004B94                            SS_EndClrObjRam:
00004B94 22C0                       		move.l	d0,(a1)+
00004B96 51C9 FFFC                  		dbf	d1,SS_EndClrObjRam ; clear object RAM
00004B9A                            
00004B9A 11FC 007E D5C0             		move.b	#$7E,($FFFFD5C0).w ; load results screen object
00004BA0                            
00004BA0                            SS_NormalExit:
00004BA0 6100 CA26                  		bsr.w	PauseGame
00004BA4 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00004BAA 6100 E044                  		bsr.w	DelayProgram
00004BAE 4EB9 0000 0000             		jsr	ObjectsLoad
00004BB4 4EB9 0000 0000             		jsr	BuildSprites
00004BBA 6100 CC50                  		bsr.w	RunPLC_RAM
00004BBE 4A78 FE02                  		tst.w	($FFFFFE02).w
00004BC2 67DC                       		beq.s	SS_NormalExit
00004BC4 4AB8 F680                  		tst.l	($FFFFF680).w
00004BC8 66D6                       		bne.s	SS_NormalExit
00004BCA 303C 00CA                  		move.w	#$CA,d0
00004BCE 6100 C9EC                  		bsr.w	PlaySound_Special ; play special stage exit sound
00004BD2 6100 D5C8                  		bsr.w	Pal_MakeFlash
00004BD6 4E75                       		rts	
00004BD8                            ; ===========================================================================
00004BD8                            
00004BD8                            SS_ToSegaScreen:
00004BD8 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (Sega screen)
00004BDE 4E75                       		rts
00004BE0                            
00004BE0                            ; ---------------------------------------------------------------------------
00004BE0                            ; Special stage	background loading subroutine
00004BE0                            ; ---------------------------------------------------------------------------
00004BE0                            
00004BE0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004BE0                            
00004BE0                            
00004BE0                            SS_BGLoad:				; XREF: SpecialStage
00004BE0 43F9 00FF 0000             		lea	($FF0000).l,a1
00004BE6 41F9 0000 0000             		lea	(Eni_SSBg1).l,a0 ; load	mappings for the birds and fish
00004BEC 303C 4051                  		move.w	#$4051,d0
00004BF0 6100 CD4C                  		bsr.w	EniDec
00004BF4 263C 5000 0001             		move.l	#$50000001,d3
00004BFA 45F9 00FF 0080             		lea	($FF0080).l,a2
00004C00 7E06                       		moveq	#6,d7
00004C02                            
00004C02                            loc_48BE:
00004C02 2003                       		move.l	d3,d0
00004C04 7C03                       		moveq	#3,d6
00004C06 7800                       		moveq	#0,d4
00004C08 0C47 0003                  		cmpi.w	#3,d7
00004C0C 6400                       		bcc.s	loc_48CC
00004C0E 7801                       		moveq	#1,d4
00004C10                            
00004C10                            loc_48CC:
00004C10 7A07                       		moveq	#7,d5
00004C12                            
00004C12                            loc_48CE:
00004C12 224A                       		movea.l	a2,a1
00004C14 0A04 0001                  		eori.b	#1,d4
00004C18 6600                       		bne.s	loc_48E2
00004C1A 0C47 0006                  		cmpi.w	#6,d7
00004C1E 6600                       		bne.s	loc_48F2
00004C20 43F9 00FF 0000             		lea	($FF0000).l,a1
00004C26                            
00004C26                            loc_48E2:
00004C26 48E7 F800                  		movem.l	d0-d4,-(sp)
00004C2A 7207                       		moveq	#7,d1
00004C2C 7407                       		moveq	#7,d2
00004C2E 6100 CA10                  		bsr.w	ShowVDPGraphics
00004C32 4CDF 001F                  		movem.l	(sp)+,d0-d4
00004C36                            
00004C36                            loc_48F2:
00004C36 0680 0010 0000             		addi.l	#$100000,d0
00004C3C 51CD FFD4                  		dbf	d5,loc_48CE
00004C40 0680 0380 0000             		addi.l	#$3800000,d0
00004C46 0A04 0001                  		eori.b	#1,d4
00004C4A 51CE FFC4                  		dbf	d6,loc_48CC
00004C4E 0683 1000 0000             		addi.l	#$10000000,d3
00004C54 6A00                       		bpl.s	loc_491C
00004C56 4843                       		swap	d3
00004C58 0683 0000 C000             		addi.l	#$C000,d3
00004C5E 4843                       		swap	d3
00004C60                            
00004C60                            loc_491C:
00004C60 D4FC 0080                  		adda.w	#$80,a2
00004C64 51CF FF9C                  		dbf	d7,loc_48BE
00004C68 43F9 00FF 0000             		lea	($FF0000).l,a1
00004C6E 41F9 0000 0000             		lea	(Eni_SSBg2).l,a0 ; load	mappings for the clouds
00004C74 303C 4000                  		move.w	#$4000,d0
00004C78 6100 CCC4                  		bsr.w	EniDec
00004C7C 43F9 00FF 0000             		lea	($FF0000).l,a1
00004C82 203C 4000 0003             		move.l	#$40000003,d0
00004C88 723F                       		moveq	#$3F,d1
00004C8A 741F                       		moveq	#$1F,d2
00004C8C 6100 C9B2                  		bsr.w	ShowVDPGraphics
00004C90 43F9 00FF 0000             		lea	($FF0000).l,a1
00004C96 203C 5000 0003             		move.l	#$50000003,d0
00004C9C 723F                       		moveq	#$3F,d1
00004C9E 743F                       		moveq	#$3F,d2
00004CA0 6100 C99E                  		bsr.w	ShowVDPGraphics
00004CA4 4E75                       		rts	
00004CA6                            ; End of function SS_BGLoad
00004CA6                            
00004CA6                            ; ---------------------------------------------------------------------------
00004CA6                            ; Pallet cycling routine - special stage
00004CA6                            ; ---------------------------------------------------------------------------
00004CA6                            
00004CA6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004CA6                            
00004CA6                            
00004CA6                            PalCycle_SS:				; XREF: loc_DA6; SpecialStage
00004CA6 4A78 F63A                  		tst.w	($FFFFF63A).w
00004CAA 6600                       		bne.s	locret_49E6
00004CAC 5378 F79C                  		subq.w	#1,($FFFFF79C).w
00004CB0 6A00                       		bpl.s	locret_49E6
00004CB2 4DF9 00C0 0004             		lea	($C00004).l,a6
00004CB8 3038 F79A                  		move.w	($FFFFF79A).w,d0
00004CBC 5278 F79A                  		addq.w	#1,($FFFFF79A).w
00004CC0 0240 001F                  		andi.w	#$1F,d0
00004CC4 E548                       		lsl.w	#2,d0
00004CC6 41F9 0000 0000             		lea	(byte_4A3C).l,a0
00004CCC D0C0                       		adda.w	d0,a0
00004CCE 1018                       		move.b	(a0)+,d0
00004CD0 6A00                       		bpl.s	loc_4992
00004CD2 303C 01FF                  		move.w	#$1FF,d0
00004CD6                            
00004CD6                            loc_4992:
00004CD6 31C0 F79C                  		move.w	d0,($FFFFF79C).w
00004CDA 7000                       		moveq	#0,d0
00004CDC 1018                       		move.b	(a0)+,d0
00004CDE 31C0 F7A0                  		move.w	d0,($FFFFF7A0).w
00004CE2 43F9 0000 0000             		lea	(byte_4ABC).l,a1
00004CE8 43F1 0000                  		lea	(a1,d0.w),a1
00004CEC 303C 8200                  		move.w	#-$7E00,d0
00004CF0 1019                       		move.b	(a1)+,d0
00004CF2 3C80                       		move.w	d0,(a6)
00004CF4 11D1 F616                  		move.b	(a1),($FFFFF616).w
00004CF8 303C 8400                  		move.w	#-$7C00,d0
00004CFC 1018                       		move.b	(a0)+,d0
00004CFE 3C80                       		move.w	d0,(a6)
00004D00 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00004D0A 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00004D12 7000                       		moveq	#0,d0
00004D14 1018                       		move.b	(a0)+,d0
00004D16 6B00                       		bmi.s	loc_49E8
00004D18 43F9 0000 0000             		lea	(Pal_SSCyc1).l,a1
00004D1E D2C0                       		adda.w	d0,a1
00004D20 45F8 FB4E                  		lea	($FFFFFB4E).w,a2
00004D24 24D9                       		move.l	(a1)+,(a2)+
00004D26 24D9                       		move.l	(a1)+,(a2)+
00004D28 24D9                       		move.l	(a1)+,(a2)+
00004D2A                            
00004D2A                            locret_49E6:
00004D2A 4E75                       		rts	
00004D2C                            ; ===========================================================================
00004D2C                            
00004D2C                            loc_49E8:				; XREF: PalCycle_SS
00004D2C 3238 F79E                  		move.w	($FFFFF79E).w,d1
00004D30 0C40 008A                  		cmpi.w	#$8A,d0
00004D34 6500                       		bcs.s	loc_49F4
00004D36 5241                       		addq.w	#1,d1
00004D38                            
00004D38                            loc_49F4:
00004D38 C2FC 002A                  		mulu.w	#$2A,d1
00004D3C 43F9 0000 0000             		lea	(Pal_SSCyc2).l,a1
00004D42 D2C1                       		adda.w	d1,a1
00004D44 0240 007F                  		andi.w	#$7F,d0
00004D48 0880 0000                  		bclr	#0,d0
00004D4C 6700                       		beq.s	loc_4A18
00004D4E 45F8 FB6E                  		lea	($FFFFFB6E).w,a2
00004D52 24D1                       		move.l	(a1),(a2)+
00004D54 24E9 0004                  		move.l	4(a1),(a2)+
00004D58 24E9 0008                  		move.l	8(a1),(a2)+
00004D5C                            
00004D5C                            loc_4A18:
00004D5C D2FC 000C                  		adda.w	#$C,a1
00004D60 45F8 FB5A                  		lea	($FFFFFB5A).w,a2
00004D64 0C40 000A                  		cmpi.w	#$A,d0
00004D68 6500                       		bcs.s	loc_4A2E
00004D6A 0440 000A                  		subi.w	#$A,d0
00004D6E 45F8 FB7A                  		lea	($FFFFFB7A).w,a2
00004D72                            
00004D72                            loc_4A2E:
00004D72 3200                       		move.w	d0,d1
00004D74 D040                       		add.w	d0,d0
00004D76 D041                       		add.w	d1,d0
00004D78 D2C0                       		adda.w	d0,a1
00004D7A 24D9                       		move.l	(a1)+,(a2)+
00004D7C 34D9                       		move.w	(a1)+,(a2)+
00004D7E 4E75                       		rts	
00004D80                            ; End of function PalCycle_SS
00004D80                            
00004D80                            ; ===========================================================================
00004D80 0300 0792 0300 0790 0300+  byte_4A3C:	dc.b 3,	0, 7, $92, 3, 0, 7, $90, 3, 0, 7, $8E, 3, 0, 7,	$8C
00004D90                            					; XREF: PalCycle_SS
00004D90 0300 078B 0300 0780 0300+  		dc.b 3,	0, 7, $8B, 3, 0, 7, $80, 3, 0, 7, $82, 3, 0, 7,	$84
00004DA0 0300 0786 0300 0788 0708+  		dc.b 3,	0, 7, $86, 3, 0, 7, $88, 7, 8, 7, 0, 7,	$A, 7, $C
00004DB0 FF0C 0718 FF0C 0718 070A+  		dc.b $FF, $C, 7, $18, $FF, $C, 7, $18, 7, $A, 7, $C, 7,	8, 7, 0
00004DC0 0300 0688 0300 0686 0300+  		dc.b 3,	0, 6, $88, 3, 0, 6, $86, 3, 0, 6, $84, 3, 0, 6,	$82
00004DD0 0300 0681 0300 068A 0300+  		dc.b 3,	0, 6, $81, 3, 0, 6, $8A, 3, 0, 6, $8C, 3, 0, 6,	$8E
00004DE0 0300 0690 0300 0692 0702+  		dc.b 3,	0, 6, $90, 3, 0, 6, $92, 7, 2, 6, $24, 7, 4, 6,	$30
00004DF0 FF06 063C FF06 063C 0704+  		dc.b $FF, 6, 6,	$3C, $FF, 6, 6,	$3C, 7,	4, 6, $30, 7, 2, 6, $24
00004E00                            		even
00004E00 1001 1800 1801 2000 2001+  byte_4ABC:	dc.b $10, 1, $18, 0, $18, 1, $20, 0, $20, 1, $28, 0, $28, 1
00004E0E                            					; XREF: PalCycle_SS
00004E0E                            		even
00004E0E                            
00004E0E                            Pal_SSCyc1:	incbin	pallet\c_ss_1.bin
00004E56                            		even
00004E56                            Pal_SSCyc2:	incbin	pallet\c_ss_2.bin
00004F28                            		even
00004F28                            
00004F28                            ; ---------------------------------------------------------------------------
00004F28                            ; Subroutine to	make the special stage background animated
00004F28                            ; ---------------------------------------------------------------------------
00004F28                            
00004F28                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004F28                            
00004F28                            
00004F28                            SS_BGAnimate:				; XREF: SpecialStage
00004F28 3038 F7A0                  		move.w	($FFFFF7A0).w,d0
00004F2C 6600                       		bne.s	loc_4BF6
00004F2E 31FC 0000 F70C             		move.w	#0,($FFFFF70C).w
00004F34 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00004F3A                            
00004F3A                            loc_4BF6:
00004F3A 0C40 0008                  		cmpi.w	#8,d0
00004F3E 6400                       		bcc.s	loc_4C4E
00004F40 0C40 0006                  		cmpi.w	#6,d0
00004F44 6600                       		bne.s	loc_4C10
00004F46 5278 F718                  		addq.w	#1,($FFFFF718).w
00004F4A 5278 F70C                  		addq.w	#1,($FFFFF70C).w
00004F4E 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00004F54                            
00004F54                            loc_4C10:
00004F54 7000                       		moveq	#0,d0
00004F56 3038 F708                  		move.w	($FFFFF708).w,d0
00004F5A 4440                       		neg.w	d0
00004F5C 4840                       		swap	d0
00004F5E 43F9 0000 0000             		lea	(byte_4CCC).l,a1
00004F64 47F8 AA00                  		lea	($FFFFAA00).w,a3
00004F68 7609                       		moveq	#9,d3
00004F6A                            
00004F6A                            loc_4C26:
00004F6A 302B 0002                  		move.w	2(a3),d0
00004F6E 6100 DCB2                  		bsr.w	CalcSine
00004F72 7400                       		moveq	#0,d2
00004F74 1419                       		move.b	(a1)+,d2
00004F76 C1C2                       		muls.w	d2,d0
00004F78 E080                       		asr.l	#8,d0
00004F7A 36C0                       		move.w	d0,(a3)+
00004F7C 1419                       		move.b	(a1)+,d2
00004F7E 4882                       		ext.w	d2
00004F80 D55B                       		add.w	d2,(a3)+
00004F82 51CB FFE6                  		dbf	d3,loc_4C26
00004F86 47F8 AA00                  		lea	($FFFFAA00).w,a3
00004F8A 45F9 0000 0000             		lea	(byte_4CB8).l,a2
00004F90 6000                       		bra.s	loc_4C7E
00004F92                            ; ===========================================================================
00004F92                            
00004F92                            loc_4C4E:				; XREF: SS_BGAnimate
00004F92 0C40 000C                  		cmpi.w	#$C,d0
00004F96 6600                       		bne.s	loc_4C74
00004F98 5378 F718                  		subq.w	#1,($FFFFF718).w
00004F9C 47F8 AB00                  		lea	($FFFFAB00).w,a3
00004FA0 243C 0001 8000             		move.l	#$18000,d2
00004FA6 7206                       		moveq	#6,d1
00004FA8                            
00004FA8                            loc_4C64:
00004FA8 2013                       		move.l	(a3),d0
00004FAA 9082                       		sub.l	d2,d0
00004FAC 26C0                       		move.l	d0,(a3)+
00004FAE 0482 0000 2000             		subi.l	#$2000,d2
00004FB4 51C9 FFF2                  		dbf	d1,loc_4C64
00004FB8                            
00004FB8                            loc_4C74:
00004FB8 47F8 AB00                  		lea	($FFFFAB00).w,a3
00004FBC 45F9 0000 0000             		lea	(byte_4CC4).l,a2
00004FC2                            
00004FC2                            loc_4C7E:
00004FC2 43F8 CC00                  		lea	($FFFFCC00).w,a1
00004FC6 3038 F718                  		move.w	($FFFFF718).w,d0
00004FCA 4440                       		neg.w	d0
00004FCC 4840                       		swap	d0
00004FCE 7600                       		moveq	#0,d3
00004FD0 161A                       		move.b	(a2)+,d3
00004FD2 3438 F70C                  		move.w	($FFFFF70C).w,d2
00004FD6 4442                       		neg.w	d2
00004FD8 0242 00FF                  		andi.w	#$FF,d2
00004FDC E54A                       		lsl.w	#2,d2
00004FDE                            
00004FDE                            loc_4C9A:
00004FDE 301B                       		move.w	(a3)+,d0
00004FE0 544B                       		addq.w	#2,a3
00004FE2 7200                       		moveq	#0,d1
00004FE4 121A                       		move.b	(a2)+,d1
00004FE6 5341                       		subq.w	#1,d1
00004FE8                            
00004FE8                            loc_4CA4:
00004FE8 2380 2000                  		move.l	d0,(a1,d2.w)
00004FEC 5842                       		addq.w	#4,d2
00004FEE 0242 03FC                  		andi.w	#$3FC,d2
00004FF2 51C9 FFF4                  		dbf	d1,loc_4CA4
00004FF6 51CB FFE6                  		dbf	d3,loc_4C9A
00004FFA 4E75                       		rts	
00004FFC                            ; End of function SS_BGAnimate
00004FFC                            
00004FFC                            ; ===========================================================================
00004FFC 0928 1810 2818 1030 1808+  byte_4CB8:	dc.b 9,	$28, $18, $10, $28, $18, $10, $30, $18,	8, $10,	0
00005008                            		even
00005008 0630 3030 2818 1818        byte_4CC4:	dc.b 6,	$30, $30, $30, $28, $18, $18, $18
00005010                            		even
00005010 0802 04FF 0203 08FF 0402+  byte_4CCC:	dc.b 8,	2, 4, $FF, 2, 3, 8, $FF, 4, 2, 2, 3, 8,	$FD, 4,	2, 2, 3, 2, $FF
00005024                            		even
00005024                            					; XREF: SS_BGAnimate
00005024                            ; ===========================================================================
00005024                            
00005024                            ; ---------------------------------------------------------------------------
00005024                            ; Continue screen
00005024                            ; ---------------------------------------------------------------------------
00005024                            
00005024                            ContinueScreen:				; XREF: GameModeArray
00005024 6100 D04C                  		bsr.w	Pal_FadeFrom
00005028 46FC 2700                  		move	#$2700,sr
0000502C 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005030 0200 00BF                  		andi.b	#$BF,d0
00005034 33C0 00C0 0004             		move.w	d0,($C00004).l
0000503A 4DF9 00C0 0004             		lea	($C00004).l,a6
00005040 3CBC 8004                  		move.w	#$8004,(a6)
00005044 3CBC 8700                  		move.w	#$8700,(a6)
00005048 6100 C49A                  		bsr.w	ClearScreen
0000504C 43F8 D000                  		lea	($FFFFD000).w,a1
00005050 7000                       		moveq	#0,d0
00005052 323C 07FF                  		move.w	#$7FF,d1
00005056                            
00005056                            Cont_ClrObjRam:
00005056 22C0                       		move.l	d0,(a1)+
00005058 51C9 FFFC                  		dbf	d1,Cont_ClrObjRam ; clear object RAM
0000505C                            
0000505C 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00005066 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
0000506C 6100 C5F2                  		bsr.w	NemDec
00005070 23FC 6000 0002 00C0 0004   		move.l	#$60000002,($C00004).l
0000507A 41F9 0000 0000             		lea	(Nem_ContSonic).l,a0 ; load Sonic patterns
00005080 6100 C5DE                  		bsr.w	NemDec
00005084 23FC 6A20 0002 00C0 0004   		move.l	#$6A200002,($C00004).l
0000508E 41F9 0000 0000             		lea	(Nem_MiniSonic).l,a0 ; load continue screen patterns
00005094 6100 C5CA                  		bsr.w	NemDec
00005098 720A                       		moveq	#10,d1
0000509A 4EB9 0000 0000             		jsr	ContScrCounter	; run countdown	(start from 10)
000050A0 7012                       		moveq	#$12,d0
000050A2 6100 D278                  		bsr.w	PalLoad1	; load continue	screen pallet
000050A6 103C 0090                  		move.b	#$90,d0
000050AA 6100 C50A                  		bsr.w	PlaySound	; play continue	music
000050AE 31FC 0293 F614             		move.w	#659,($FFFFF614).w ; set time delay to 11 seconds
000050B4 42B8 F700                  		clr.l	($FFFFF700).w
000050B8 21FC 0100 0000 F704        		move.l	#$1000000,($FFFFF704).w
000050C0 11FC 0081 D000             		move.b	#$81,($FFFFD000).w ; load Sonic	object
000050C6 11FC 0080 D040             		move.b	#$80,($FFFFD040).w ; load continue screen objects
000050CC 11FC 0080 D080             		move.b	#$80,($FFFFD080).w
000050D2 11FC 0003 D098             		move.b	#3,($FFFFD098).w
000050D8 11FC 0004 D09A             		move.b	#4,($FFFFD09A).w
000050DE 11FC 0080 D0C0             		move.b	#$80,($FFFFD0C0).w
000050E4 11FC 0004 D0E4             		move.b	#4,($FFFFD0E4).w
000050EA 4EB9 0000 0000             		jsr	ObjectsLoad
000050F0 4EB9 0000 0000             		jsr	BuildSprites
000050F6 3038 F60C                  		move.w	($FFFFF60C).w,d0
000050FA 0000 0040                  		ori.b	#$40,d0
000050FE 33C0 00C0 0004             		move.w	d0,($C00004).l
00005104 6100 CEC6                  		bsr.w	Pal_FadeTo
00005108                            
00005108                            ; ---------------------------------------------------------------------------
00005108                            ; Continue screen main loop
00005108                            ; ---------------------------------------------------------------------------
00005108                            
00005108                            Cont_MainLoop:
00005108 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
0000510E 6100 DAE0                  		bsr.w	DelayProgram
00005112 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00005118 6400                       		bcc.s	loc_4DF2
0000511A 46FC 2700                  		move	#$2700,sr
0000511E 3238 F614                  		move.w	($FFFFF614).w,d1
00005122 82FC 003C                  		divu.w	#$3C,d1
00005126 0281 0000 000F             		andi.l	#$F,d1
0000512C 4EB9 0000 0000             		jsr	ContScrCounter
00005132 46FC 2300                  		move	#$2300,sr
00005136                            
00005136                            loc_4DF2:
00005136 4EB9 0000 0000             		jsr	ObjectsLoad
0000513C 4EB9 0000 0000             		jsr	BuildSprites
00005142 0C78 0180 D008             		cmpi.w	#$180,($FFFFD008).w ; has Sonic	run off	screen?
00005148 6400                       		bcc.s	Cont_GotoLevel	; if yes, branch
0000514A 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00005150 64B6                       		bcc.s	Cont_MainLoop
00005152 4A78 F614                  		tst.w	($FFFFF614).w
00005156 6600 FFB0                  		bne.w	Cont_MainLoop
0000515A 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00005160 4E75                       		rts	
00005162                            ; ===========================================================================
00005162                            
00005162                            Cont_GotoLevel:				; XREF: Cont_MainLoop
00005162 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00005168 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
0000516E 7000                       		moveq	#0,d0
00005170 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00005174 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00005178 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
0000517C 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost count
00005180 5338 FE18                  		subq.b	#1,($FFFFFE18).w ; subtract 1 from continues
00005184 4E75                       		rts	
00005186                            ; ===========================================================================
00005186                            
00005186                            ; ---------------------------------------------------------------------------
00005186                            ; Object 80 - Continue screen elements
00005186                            ; ---------------------------------------------------------------------------
00005186                            
00005186                            Obj80:					; XREF: Obj_Index
00005186 7000                       		moveq	#0,d0
00005188 1028 0024                  		move.b	$24(a0),d0
0000518C 323B 0000                  		move.w	Obj80_Index(pc,d0.w),d1
00005190 4EFB 1000                  		jmp	Obj80_Index(pc,d1.w)
00005194                            ; ===========================================================================
00005194 0000                       Obj80_Index:	dc.w Obj80_Main-Obj80_Index
00005196 0000                       		dc.w Obj80_Display-Obj80_Index
00005198 0000                       		dc.w Obj80_MakeMiniSonic-Obj80_Index
0000519A 0000                       		dc.w Obj80_ChkType-Obj80_Index
0000519C                            ; ===========================================================================
0000519C                            
0000519C                            Obj80_Main:				; XREF: Obj80_Index
0000519C 5428 0024                  		addq.b	#2,$24(a0)
000051A0 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
000051A8 317C 8500 0002             		move.w	#$8500,2(a0)
000051AE 117C 0000 0001             		move.b	#0,1(a0)
000051B4 117C 003C 0019             		move.b	#$3C,$19(a0)
000051BA 317C 0120 0008             		move.w	#$120,8(a0)
000051C0 317C 00C0 000A             		move.w	#$C0,$A(a0)
000051C6 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; clear rings
000051CC                            
000051CC                            Obj80_Display:				; XREF: Obj80_Index
000051CC 4EF9 0000 0000             		jmp	DisplaySprite
000051D2                            ; ===========================================================================
000051D2                            Obj80_MiniSonicPos:
000051D2 0116 012A 0102 013E 00EE+  		dc.w $116, $12A, $102, $13E, $EE, $152, $DA, $166, $C6
000051E4 017A 00B2 018E 009E 01A2+  		dc.w $17A, $B2,	$18E, $9E, $1A2, $8A
000051F0                            ; ===========================================================================
000051F0                            
000051F0                            Obj80_MakeMiniSonic:			; XREF: Obj80_Index
000051F0 2248                       		movea.l	a0,a1
000051F2 45F9 0000 51D2             		lea	(Obj80_MiniSonicPos).l,a2
000051F8 7200                       		moveq	#0,d1
000051FA 1238 FE18                  		move.b	($FFFFFE18).w,d1
000051FE 5501                       		subq.b	#2,d1
00005200 6400                       		bcc.s	loc_4EC4
00005202 4EF9 0000 0000             		jmp	DeleteObject
00005208                            ; ===========================================================================
00005208                            
00005208                            loc_4EC4:				; XREF: Obj80_MakeMiniSonic
00005208 7601                       		moveq	#1,d3
0000520A 0C01 000E                  		cmpi.b	#$E,d1
0000520E 6500                       		bcs.s	loc_4ED0
00005210 7600                       		moveq	#0,d3
00005212 720E                       		moveq	#$E,d1
00005214                            
00005214                            loc_4ED0:
00005214 1401                       		move.b	d1,d2
00005216 0202 0001                  		andi.b	#1,d2
0000521A                            
0000521A                            Obj80_MiniSonLoop:
0000521A 12BC 0080                  		move.b	#$80,0(a1)	; load mini Sonic object
0000521E 335A 0008                  		move.w	(a2)+,8(a1)
00005222 4A02                       		tst.b	d2
00005224 6700                       		beq.s	loc_4EEA
00005226 0469 000A 0008             		subi.w	#$A,8(a1)
0000522C                            
0000522C                            loc_4EEA:
0000522C 337C 00D0 000A             		move.w	#$D0,$A(a1)
00005232 137C 0006 001A             		move.b	#6,$1A(a1)
00005238 137C 0006 0024             		move.b	#6,$24(a1)
0000523E 237C 0000 0000 0004        		move.l	#Map_obj80,4(a1)
00005246 337C 8551 0002             		move.w	#$8551,2(a1)
0000524C 137C 0000 0001             		move.b	#0,1(a1)
00005252 43E9 0040                  		lea	$40(a1),a1
00005256 51C9 FFC2                  		dbf	d1,Obj80_MiniSonLoop ; repeat for number of continues
0000525A 43E9 FFC0                  		lea	-$40(a1),a1
0000525E 1343 0028                  		move.b	d3,$28(a1)
00005262                            
00005262                            Obj80_ChkType:				; XREF: Obj80_Index
00005262 4A28 0028                  		tst.b	$28(a0)
00005266 6700                       		beq.s	loc_4F40
00005268 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000526E 6500                       		bcs.s	loc_4F40
00005270 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00005274 0200 0001                  		andi.b	#1,d0
00005278 6600                       		bne.s	loc_4F40
0000527A 4A78 D010                  		tst.w	($FFFFD010).w
0000527E 6600                       		bne.s	Obj80_Delete
00005280 4E75                       		rts	
00005282                            ; ===========================================================================
00005282                            
00005282                            loc_4F40:				; XREF: Obj80_ChkType
00005282 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00005286 0200 000F                  		andi.b	#$F,d0
0000528A 6600                       		bne.s	Obj80_Display2
0000528C 0868 0000 001A             		bchg	#0,$1A(a0)
00005292                            
00005292                            Obj80_Display2:
00005292 4EF9 0000 0000             		jmp	DisplaySprite
00005298                            ; ===========================================================================
00005298                            
00005298                            Obj80_Delete:				; XREF: Obj80_ChkType
00005298 4EF9 0000 0000             		jmp	DeleteObject
0000529E                            ; ===========================================================================
0000529E                            
0000529E                            ; ---------------------------------------------------------------------------
0000529E                            ; Object 81 - Sonic on the continue screen
0000529E                            ; ---------------------------------------------------------------------------
0000529E                            
0000529E                            Obj81:					; XREF: Obj_Index
0000529E 7000                       		moveq	#0,d0
000052A0 1028 0024                  		move.b	$24(a0),d0
000052A4 323B 0000                  		move.w	Obj81_Index(pc,d0.w),d1
000052A8 4EBB 1000                  		jsr	Obj81_Index(pc,d1.w)
000052AC 4EF9 0000 0000             		jmp	DisplaySprite
000052B2                            ; ===========================================================================
000052B2 0000                       Obj81_Index:	dc.w Obj81_Main-Obj81_Index
000052B4 0000                       		dc.w Obj81_ChkLand-Obj81_Index
000052B6 0000                       		dc.w Obj81_Animate-Obj81_Index
000052B8 0000                       		dc.w Obj81_Run-Obj81_Index
000052BA                            ; ===========================================================================
000052BA                            
000052BA                            Obj81_Main:				; XREF: Obj81_Index
000052BA 5428 0024                  		addq.b	#2,$24(a0)
000052BE 317C 00A0 0008             		move.w	#$A0,8(a0)
000052C4 317C 00C0 000C             		move.w	#$C0,$C(a0)
000052CA 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
000052D2 317C 0780 0002             		move.w	#$780,2(a0)
000052D8 117C 0004 0001             		move.b	#4,1(a0)
000052DE 117C 0002 0018             		move.b	#2,$18(a0)
000052E4 117C 001D 001C             		move.b	#$1D,$1C(a0)	; use "floating" animation
000052EA 317C 0400 0012             		move.w	#$400,$12(a0)	; make Sonic fall from above
000052F0                            
000052F0                            Obj81_ChkLand:				; XREF: Obj81_Index
000052F0 0C68 01A0 000C             		cmpi.w	#$1A0,$C(a0)	; has Sonic landed yet?
000052F6 6600                       		bne.s	Obj81_ShowFall	; if not, branch
000052F8 5428 0024                  		addq.b	#2,$24(a0)
000052FC 4268 0012                  		clr.w	$12(a0)		; stop Sonic falling
00005300 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
00005308 317C 8500 0002             		move.w	#$8500,2(a0)
0000530E 117C 0000 001C             		move.b	#0,$1C(a0)
00005314 6000                       		bra.s	Obj81_Animate
00005316                            ; ===========================================================================
00005316                            
00005316                            Obj81_ShowFall:				; XREF: Obj81_ChkLand
00005316 4EB9 0000 0000             		jsr	SpeedToPos
0000531C 4EB9 0000 0000             		jsr	Sonic_Animate
00005322 4EF9 0000 0000             		jmp	LoadSonicDynPLC
00005328                            ; ===========================================================================
00005328                            
00005328                            Obj81_Animate:				; XREF: Obj81_Index
00005328 4A38 F605                  		tst.b	($FFFFF605).w	; is any button	pressed?
0000532C 6B00                       		bmi.s	Obj81_GetUp	; if yes, branch
0000532E 43F9 0000 0000             		lea	(Ani_obj81).l,a1
00005334 4EF9 0000 0000             		jmp	AnimateSprite
0000533A                            ; ===========================================================================
0000533A                            
0000533A                            Obj81_GetUp:				; XREF: Obj81_Animate
0000533A 5428 0024                  		addq.b	#2,$24(a0)
0000533E 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
00005346 317C 0780 0002             		move.w	#$780,2(a0)
0000534C 117C 001E 001C             		move.b	#$1E,$1C(a0)	; use "getting up" animation
00005352 4268 0014                  		clr.w	$14(a0)
00005356 5168 000C                  		subq.w	#8,$C(a0)
0000535A 103C 00E0                  		move.b	#$E0,d0
0000535E 6100 C25C                  		bsr.w	PlaySound_Special ; fade out music
00005362                            
00005362                            Obj81_Run:				; XREF: Obj81_Index
00005362 0C68 0800 0014             		cmpi.w	#$800,$14(a0)	; check	Sonic's "run speed" (not moving)
00005368 6600                       		bne.s	Obj81_AddSpeed	; if too low, branch
0000536A 317C 1000 0010             		move.w	#$1000,$10(a0)	; move Sonic to	the right
00005370 6000                       		bra.s	Obj81_ShowRun
00005372                            ; ===========================================================================
00005372                            
00005372                            Obj81_AddSpeed:				; XREF: Obj81_Run
00005372 0668 0020 0014             		addi.w	#$20,$14(a0)	; increase "run	speed"
00005378                            
00005378                            Obj81_ShowRun:				; XREF: Obj81_Run
00005378 4EB9 0000 0000             		jsr	SpeedToPos
0000537E 4EB9 0000 0000             		jsr	Sonic_Animate
00005384 4EF9 0000 0000             		jmp	LoadSonicDynPLC
0000538A                            ; ===========================================================================
0000538A                            Ani_obj81:
0000538A                            	include "_anim\obj81.asm"
0000538A                            ; ---------------------------------------------------------------------------
0000538A                            ; Animation script - Sonic on the continue screen
0000538A                            ; ---------------------------------------------------------------------------
0000538A 0000                       		dc.w byte_504A-Ani_obj81
0000538C 0401 0101 0102 0202 0303+  byte_504A:	dc.b 4,	1, 1, 1, 1, 2, 2, 2, 3,	3, $FF
00005398 00                         		even
00005398 00                         		even
00005398                            
00005398                            ; ---------------------------------------------------------------------------
00005398                            ; Sprite mappings - Continue screen
00005398                            ; ---------------------------------------------------------------------------
00005398                            Map_obj80:
00005398                            	include "_maps\obj80.asm"
00005398                            ; ---------------------------------------------------------------------------
00005398                            ; Sprite mappings - Continue screen
00005398                            ; ---------------------------------------------------------------------------
00005398 0000 0000                  		dc.w byte_5066-Map_obj80, byte_509E-Map_obj80
0000539C 0000 0000                  		dc.w byte_50AE-Map_obj80, byte_50BE-Map_obj80
000053A0 0000 0000                  		dc.w byte_50CE-Map_obj80, byte_50D9-Map_obj80
000053A4 0000 0000                  		dc.w byte_50D9-Map_obj80, byte_50DF-Map_obj80
000053A8 0B                         byte_5066:	dc.b $B
000053A9 F805 0088 C4               		dc.b $F8, 5, 0,	$88, $C4 ; "CONTINUE", stars and countdown
000053AE F805 00B2 D4               		dc.b $F8, 5, 0,	$B2, $D4
000053B3 F805 00AE E4               		dc.b $F8, 5, 0,	$AE, $E4
000053B8 F805 00C2 F4               		dc.b $F8, 5, 0,	$C2, $F4
000053BD F801 00A0 04               		dc.b $F8, 1, 0,	$A0, 4
000053C2 F805 00AE 0C               		dc.b $F8, 5, 0,	$AE, $C
000053C7 F805 00C6 1C               		dc.b $F8, 5, 0,	$C6, $1C
000053CC F805 0090 2C               		dc.b $F8, 5, 0,	$90, $2C
000053D1 3805 2021 E8               		dc.b $38, 5, $20, $21, $E8
000053D6 3805 2021 08               		dc.b $38, 5, $20, $21, 8
000053DB 3605 01FC F8               		dc.b $36, 5, 1,	$FC, $F8
000053E0 03                         byte_509E:	dc.b 3
000053E1 0405 0015 FC               		dc.b 4,	5, 0, $15, $FC	; Sonic	on floor
000053E6 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
000053EB F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
000053F0 03                         byte_50AE:	dc.b 3
000053F1 0405 0019 FC               		dc.b 4,	5, 0, $19, $FC	; Sonic	on floor #2
000053F6 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
000053FB F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00005400 03                         byte_50BE:	dc.b 3
00005401 0405 001D FC               		dc.b 4,	5, 0, $1D, $FC	; Sonic	on floor #3
00005406 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
0000540B F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00005410 02                         byte_50CE:	dc.b 2
00005411 6009 2000 E8               		dc.b $60, 9, $20, 0, $E8 ; circle on the floor
00005416 6009 2800 00               		dc.b $60, 9, $28, 0, 0
0000541B 01                         byte_50D9:	dc.b 1
0000541C 0006 0012 00               		dc.b 0,	6, 0, $12, 0	; mini Sonic
00005421 01                         byte_50DF:	dc.b 1
00005422 0006 0018 00               		dc.b 0,	6, 0, $18, 0	; mini Sonic #2
00005428 00                         		even
00005428 00                         		even
00005428                            
00005428                            ; ===========================================================================
00005428                            ; ---------------------------------------------------------------------------
00005428                            ; Ending sequence in Green Hill	Zone
00005428                            ; ---------------------------------------------------------------------------
00005428                            
00005428                            EndingSequence:				; XREF: GameModeArray
00005428 103C 00E4                  		move.b	#$E4,d0
0000542C 6100 C18E                  		bsr.w	PlaySound_Special ; stop music
00005430 6100 CC40                  		bsr.w	Pal_FadeFrom
00005434 43F8 D000                  		lea	($FFFFD000).w,a1
00005438 7000                       		moveq	#0,d0
0000543A 323C 07FF                  		move.w	#$7FF,d1
0000543E                            
0000543E                            End_ClrObjRam:
0000543E 22C0                       		move.l	d0,(a1)+
00005440 51C9 FFFC                  		dbf	d1,End_ClrObjRam ; clear object	RAM
00005444                            
00005444 43F8 F628                  		lea	($FFFFF628).w,a1
00005448 7000                       		moveq	#0,d0
0000544A 323C 0015                  		move.w	#$15,d1
0000544E                            
0000544E                            End_ClrRam:
0000544E 22C0                       		move.l	d0,(a1)+
00005450 51C9 FFFC                  		dbf	d1,End_ClrRam	; clear	variables
00005454                            
00005454 43F8 F700                  		lea	($FFFFF700).w,a1
00005458 7000                       		moveq	#0,d0
0000545A 323C 003F                  		move.w	#$3F,d1
0000545E                            
0000545E                            End_ClrRam2:
0000545E 22C0                       		move.l	d0,(a1)+
00005460 51C9 FFFC                  		dbf	d1,End_ClrRam2	; clear	variables
00005464                            
00005464 43F8 FE60                  		lea	($FFFFFE60).w,a1
00005468 7000                       		moveq	#0,d0
0000546A 323C 0047                  		move.w	#$47,d1
0000546E                            
0000546E                            End_ClrRam3:
0000546E 22C0                       		move.l	d0,(a1)+
00005470 51C9 FFFC                  		dbf	d1,End_ClrRam3	; clear	variables
00005474                            
00005474 46FC 2700                  		move	#$2700,sr
00005478 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000547C 0200 00BF                  		andi.b	#$BF,d0
00005480 33C0 00C0 0004             		move.w	d0,($C00004).l
00005486 6100 C05C                  		bsr.w	ClearScreen
0000548A 4DF9 00C0 0004             		lea	($C00004).l,a6
00005490 3CBC 8B03                  		move.w	#$8B03,(a6)
00005494 3CBC 8230                  		move.w	#$8230,(a6)
00005498 3CBC 8407                  		move.w	#$8407,(a6)
0000549C 3CBC 857C                  		move.w	#$857C,(a6)
000054A0 3CBC 9001                  		move.w	#$9001,(a6)
000054A4 3CBC 8004                  		move.w	#$8004,(a6)
000054A8 3CBC 8720                  		move.w	#$8720,(a6)
000054AC 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
000054B2 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
000054B6 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
000054BC 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	number to 0600 (extra flowers)
000054C2 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
000054C8 6700                       		beq.s	End_LoadData	; if yes, branch
000054CA 31FC 0601 FE10             		move.w	#$601,($FFFFFE10).w ; set level	number to 0601 (no flowers)
000054D0                            
000054D0                            End_LoadData:
000054D0 701C                       		moveq	#$1C,d0
000054D2 6100 C438                  		bsr.w	RunPLC_ROM	; load ending sequence patterns
000054D6 4EB9 0000 0000             		jsr	Hud_Base
000054DC 6100 0000                  		bsr.w	LevelSizeLoad
000054E0 6100 0000                  		bsr.w	DeformBgLayer
000054E4 08F8 0002 F754             		bset	#2,($FFFFF754).w
000054EA 6100 0000                  		bsr.w	MainLoadBlockLoad
000054EE 6100 0000                  		bsr.w	LoadTilesFromStart
000054F2 21FC 0000 0000 F796        		move.l	#Col_GHZ,($FFFFF796).w ; load collision	index
000054FA 46FC 2300                  		move	#$2300,sr
000054FE 41F9 0000 0000             		lea	(Kos_EndFlowers).l,a0 ;	load extra flower patterns
00005504 43F8 9400                  		lea	($FFFF9400).w,a1 ; RAM address to buffer the patterns
00005508 6100 C5B2                  		bsr.w	KosDec
0000550C 7003                       		moveq	#3,d0
0000550E 6100 CE0C                  		bsr.w	PalLoad1	; load Sonic's pallet
00005512 303C 008B                  		move.w	#$8B,d0
00005516 6100 C09E                  		bsr.w	PlaySound	; play ending sequence music
0000551A 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
00005520 6700                       		beq.s	End_LoadSonic	; if not, branch
00005522 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00005528                            
00005528                            End_LoadSonic:
00005528 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
0000552E 08F8 0000 D022             		bset	#0,($FFFFD022).w ; make	Sonic face left
00005534 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0000553A 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; move Sonic to the	left
00005540 31FC F800 D014             		move.w	#$F800,($FFFFD014).w ; set Sonic's speed
00005546 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
0000554C 4EB9 0000 0000             		jsr	ObjPosLoad
00005552 4EB9 0000 0000             		jsr	ObjectsLoad
00005558 4EB9 0000 0000             		jsr	BuildSprites
0000555E 7000                       		moveq	#0,d0
00005560 31C0 FE20                  		move.w	d0,($FFFFFE20).w
00005564 21C0 FE22                  		move.l	d0,($FFFFFE22).w
00005568 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w
0000556C 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w
00005570 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w
00005574 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w
00005578 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
0000557C 31C0 FE08                  		move.w	d0,($FFFFFE08).w
00005580 31C0 FE02                  		move.w	d0,($FFFFFE02).w
00005584 31C0 FE04                  		move.w	d0,($FFFFFE04).w
00005588 6100 EEDA                  		bsr.w	OscillateNumInit
0000558C 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w
00005592 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w
00005598 11FC 0000 FE1E             		move.b	#0,($FFFFFE1E).w
0000559E 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
000055A4 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
000055AA 6100 D644                  		bsr.w	DelayProgram
000055AE 3038 F60C                  		move.w	($FFFFF60C).w,d0
000055B2 0000 0040                  		ori.b	#$40,d0
000055B6 33C0 00C0 0004             		move.w	d0,($C00004).l
000055BC 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000055C2 6100 CA08                  		bsr.w	Pal_FadeTo
000055C6                            
000055C6                            ; ---------------------------------------------------------------------------
000055C6                            ; Main ending sequence loop
000055C6                            ; ---------------------------------------------------------------------------
000055C6                            
000055C6                            End_MainLoop:
000055C6 6100 C000                  		bsr.w	PauseGame
000055CA 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
000055D0 6100 D61E                  		bsr.w	DelayProgram
000055D4 5278 FE04                  		addq.w	#1,($FFFFFE04).w
000055D8 6100 0000                  		bsr.w	End_MoveSonic
000055DC 4EB9 0000 0000             		jsr	ObjectsLoad
000055E2 6100 0000                  		bsr.w	DeformBgLayer
000055E6 4EB9 0000 0000             		jsr	BuildSprites
000055EC 4EB9 0000 0000             		jsr	ObjPosLoad
000055F2 6100 C568                  		bsr.w	PalCycle_Load
000055F6 6100 EEC2                  		bsr.w	OscillateNumDo
000055FA 6100 EF4E                  		bsr.w	ChangeRingFrame
000055FE 0C38 0018 F600             		cmpi.b	#$18,($FFFFF600).w ; is	scene number $18 (ending)?
00005604 6700                       		beq.s	loc_52DA	; if yes, branch
00005606 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set scene to $1C (credits)
0000560C 103C 0091                  		move.b	#$91,d0
00005610 6100 BFAA                  		bsr.w	PlaySound_Special ; play credits music
00005614 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w ; set credits index number to 0
0000561A 4E75                       		rts	
0000561C                            ; ===========================================================================
0000561C                            
0000561C                            loc_52DA:
0000561C 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
00005620 6700 FFA4                  		beq.w	End_MainLoop	; if not, branch
00005624                            
00005624 4278 FE02                  		clr.w	($FFFFFE02).w
00005628 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
0000562E 4278 F794                  		clr.w	($FFFFF794).w
00005632                            
00005632                            End_AllEmlds:				; XREF: loc_5334
00005632 6100 BF94                  		bsr.w	PauseGame
00005636 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
0000563C 6100 D5B2                  		bsr.w	DelayProgram
00005640 5278 FE04                  		addq.w	#1,($FFFFFE04).w
00005644 6100 0000                  		bsr.w	End_MoveSonic
00005648 4EB9 0000 0000             		jsr	ObjectsLoad
0000564E 6100 0000                  		bsr.w	DeformBgLayer
00005652 4EB9 0000 0000             		jsr	BuildSprites
00005658 4EB9 0000 0000             		jsr	ObjPosLoad
0000565E 6100 EE5A                  		bsr.w	OscillateNumDo
00005662 6100 EEE6                  		bsr.w	ChangeRingFrame
00005666 5378 F794                  		subq.w	#1,($FFFFF794).w
0000566A 6A00                       		bpl.s	loc_5334
0000566C 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00005672 6100 CB48                  		bsr.w	Pal_ToWhite
00005676                            
00005676                            loc_5334:
00005676 4A78 FE02                  		tst.w	($FFFFFE02).w
0000567A 6700 FFB6                  		beq.w	End_AllEmlds
0000567E 4278 FE02                  		clr.w	($FFFFFE02).w
00005682 31FC 2E2F A480             		move.w	#$2E2F,($FFFFA480).w ; modify level layout
00005688 4BF9 00C0 0004             		lea	($C00004).l,a5
0000568E 4DF9 00C0 0000             		lea	($C00000).l,a6
00005694 47F8 F700                  		lea	($FFFFF700).w,a3
00005698 49F8 A400                  		lea	($FFFFA400).w,a4
0000569C 343C 4000                  		move.w	#$4000,d2
000056A0 6100 0000                  		bsr.w	LoadTilesFromStart2
000056A4 7013                       		moveq	#$13,d0
000056A6 6100 CC74                  		bsr.w	PalLoad1	; load ending pallet
000056AA 6100 CA44                  		bsr.w	Pal_MakeWhite
000056AE 6000 FF16                  		bra.w	End_MainLoop
000056B2                            
000056B2                            ; ---------------------------------------------------------------------------
000056B2                            ; Subroutine controlling Sonic on the ending sequence
000056B2                            ; ---------------------------------------------------------------------------
000056B2                            
000056B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000056B2                            
000056B2                            
000056B2                            End_MoveSonic:				; XREF: End_MainLoop
000056B2 1038 F7D7                  		move.b	($FFFFF7D7).w,d0
000056B6 6600                       		bne.s	End_MoveSonic2
000056B8 0C78 0090 D008             		cmpi.w	#$90,($FFFFD008).w ; has Sonic passed $90 on y-axis?
000056BE 6400                       		bcc.s	End_MoveSonExit	; if not, branch
000056C0 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
000056C4 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	player's controls
000056CA 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; move Sonic to the	right
000056D0 4E75                       		rts	
000056D2                            ; ===========================================================================
000056D2                            
000056D2                            End_MoveSonic2:				; XREF: End_MoveSonic
000056D2 5500                       		subq.b	#2,d0
000056D4 6600                       		bne.s	End_MoveSonic3
000056D6 0C78 00A0 D008             		cmpi.w	#$A0,($FFFFD008).w ; has Sonic passed $A0 on y-axis?
000056DC 6500                       		bcs.s	End_MoveSonExit	; if not, branch
000056DE 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
000056E2 7000                       		moveq	#0,d0
000056E4 11C0 F7CC                  		move.b	d0,($FFFFF7CC).w
000056E8 31C0 F602                  		move.w	d0,($FFFFF602).w ; stop	Sonic moving
000056EC 31C0 D014                  		move.w	d0,($FFFFD014).w
000056F0 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w
000056F6 11FC 0003 D01A             		move.b	#3,($FFFFD01A).w
000056FC 31FC 0505 D01C             		move.w	#$505,($FFFFD01C).w ; use "standing" animation
00005702 11FC 0003 D01E             		move.b	#3,($FFFFD01E).w
00005708 4E75                       		rts	
0000570A                            ; ===========================================================================
0000570A                            
0000570A                            End_MoveSonic3:				; XREF: End_MoveSonic
0000570A 5500                       		subq.b	#2,d0
0000570C 6600                       		bne.s	End_MoveSonExit
0000570E 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
00005712 31FC 00A0 D008             		move.w	#$A0,($FFFFD008).w
00005718 11FC 0087 D000             		move.b	#$87,($FFFFD000).w ; load Sonic	ending sequence	object
0000571E 4278 D024                  		clr.w	($FFFFD024).w
00005722                            
00005722                            End_MoveSonExit:
00005722 4E75                       		rts	
00005724                            ; End of function End_MoveSonic
00005724                            
00005724                            ; ===========================================================================
00005724                            ; ---------------------------------------------------------------------------
00005724                            ; Object 87 - Sonic on ending sequence
00005724                            ; ---------------------------------------------------------------------------
00005724                            
00005724                            Obj87:					; XREF: Obj_Index
00005724 7000                       		moveq	#0,d0
00005726 1028 0025                  		move.b	$25(a0),d0
0000572A 323B 0000                  		move.w	Obj87_Index(pc,d0.w),d1
0000572E 4EBB 1000                  		jsr	Obj87_Index(pc,d1.w)
00005732 4EF9 0000 0000             		jmp	DisplaySprite
00005738                            ; ===========================================================================
00005738 0000 0000                  Obj87_Index:	dc.w Obj87_Main-Obj87_Index, Obj87_MakeEmlds-Obj87_Index
0000573C 0000 0000                  		dc.w Obj87_Animate-Obj87_Index,	Obj87_LookUp-Obj87_Index
00005740 0000 0000                  		dc.w Obj87_ClrObjRam-Obj87_Index, Obj87_Animate-Obj87_Index
00005744 0000 0000                  		dc.w Obj87_MakeLogo-Obj87_Index, Obj87_Animate-Obj87_Index
00005748 0000 0000                  		dc.w Obj87_Leap-Obj87_Index, Obj87_Animate-Obj87_Index
0000574C                            ; ===========================================================================
0000574C                            
0000574C                            Obj87_Main:				; XREF: Obj87_Index
0000574C 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005752 6700                       		beq.s	Obj87_Main2	; if yes, branch
00005754 0628 0010 0025             		addi.b	#$10,$25(a0)	; else,	skip emerald sequence
0000575A 317C 00D8 0030             		move.w	#$D8,$30(a0)
00005760 4E75                       		rts	
00005762                            ; ===========================================================================
00005762                            
00005762                            Obj87_Main2:				; XREF: Obj87_Main
00005762 5428 0025                  		addq.b	#2,$25(a0)
00005766 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
0000576E 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005774 117C 0004 0001             		move.b	#4,1(a0)
0000577A 4228 0022                  		clr.b	$22(a0)
0000577E 117C 0002 0018             		move.b	#2,$18(a0)
00005784 117C 0000 001A             		move.b	#0,$1A(a0)
0000578A 317C 0050 0030             		move.w	#$50,$30(a0)	; set duration for Sonic to pause
00005790                            
00005790                            Obj87_MakeEmlds:			; XREF: Obj87_Index
00005790 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
00005794 6600                       		bne.s	Obj87_Wait
00005796 5428 0025                  		addq.b	#2,$25(a0)
0000579A 317C 0001 001C             		move.w	#1,$1C(a0)
000057A0 11FC 0088 D400             		move.b	#$88,($FFFFD400).w ; load chaos	emeralds objects
000057A6                            
000057A6                            Obj87_Wait:
000057A6 4E75                       		rts	
000057A8                            ; ===========================================================================
000057A8                            
000057A8                            Obj87_LookUp:				; XREF: Obj87_Index
000057A8 0C79 2000 00FF D43C        		cmpi.w	#$2000,($FFD43C).l
000057B0 6600                       		bne.s	locret_5480
000057B2 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; set level to	restart	(causes	flash)
000057B8 317C 005A 0030             		move.w	#$5A,$30(a0)
000057BE 5428 0025                  		addq.b	#2,$25(a0)
000057C2                            
000057C2                            locret_5480:
000057C2 4E75                       		rts	
000057C4                            ; ===========================================================================
000057C4                            
000057C4                            Obj87_ClrObjRam:			; XREF: Obj87_Index
000057C4 5368 0030                  		subq.w	#1,$30(a0)
000057C8 6600                       		bne.s	Obj87_Wait2
000057CA 43F8 D400                  		lea	($FFFFD400).w,a1
000057CE 323C 00FF                  		move.w	#$FF,d1
000057D2                            
000057D2                            Obj87_ClrLoop:
000057D2 4299                       		clr.l	(a1)+
000057D4 51C9 FFFC                  		dbf	d1,Obj87_ClrLoop ; clear the object RAM
000057D8 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w
000057DE 5428 0025                  		addq.b	#2,$25(a0)
000057E2 117C 0001 001C             		move.b	#1,$1C(a0)
000057E8 317C 003C 0030             		move.w	#$3C,$30(a0)
000057EE                            
000057EE                            Obj87_Wait2:
000057EE 4E75                       		rts	
000057F0                            ; ===========================================================================
000057F0                            
000057F0                            Obj87_MakeLogo:				; XREF: Obj87_Index
000057F0 5368 0030                  		subq.w	#1,$30(a0)
000057F4 6600                       		bne.s	Obj87_Wait3
000057F6 5428 0025                  		addq.b	#2,$25(a0)
000057FA 317C 00B4 0030             		move.w	#$B4,$30(a0)
00005800 117C 0002 001C             		move.b	#2,$1C(a0)
00005806 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
0000580C                            
0000580C                            Obj87_Wait3:
0000580C 4E75                       		rts	
0000580E                            ; ===========================================================================
0000580E                            
0000580E                            Obj87_Animate:				; XREF: Obj87_Index
0000580E 43F9 0000 0000             		lea	(Ani_obj87).l,a1
00005814 4EF9 0000 0000             		jmp	AnimateSprite
0000581A                            ; ===========================================================================
0000581A                            
0000581A                            Obj87_Leap:				; XREF: Obj87_Index
0000581A 5368 0030                  		subq.w	#1,$30(a0)
0000581E 6600                       		bne.s	Obj87_Wait4
00005820 5428 0025                  		addq.b	#2,$25(a0)
00005824 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
0000582C 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005832 117C 0004 0001             		move.b	#4,1(a0)
00005838 4228 0022                  		clr.b	$22(a0)
0000583C 117C 0002 0018             		move.b	#2,$18(a0)
00005842 117C 0005 001A             		move.b	#5,$1A(a0)
00005848 117C 0002 001C             		move.b	#2,$1C(a0)	; use "leaping"	animation
0000584E 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
00005854 60B8                       		bra.s	Obj87_Animate
00005856                            ; ===========================================================================
00005856                            
00005856                            Obj87_Wait4:				; XREF: Obj87_Leap
00005856 4E75                       		rts	
00005858                            ; ===========================================================================
00005858                            Ani_obj87:
00005858                            	include "_anim\obj87.asm"
00005858                            ; ---------------------------------------------------------------------------
00005858                            ; Animation script - Sonic on the ending sequence
00005858                            ; ---------------------------------------------------------------------------
00005858 0000                       		dc.w byte_551C-Ani_obj87
0000585A 0000                       		dc.w byte_552A-Ani_obj87
0000585C 0000                       		dc.w byte_5534-Ani_obj87
0000585E 0301 0001 0001 0001 0001+  byte_551C:	dc.b 3,	1, 0, 1, 0, 1, 0, 1, 0,	1, 0, 1, 2, $FA
0000586C 0503 0403 0403 0403 FA00   byte_552A:	dc.b 5,	3, 4, 3, 4, 3, 4, 3, $FA, 0
00005876 0305 0505 0607 FE01        byte_5534:	dc.b 3,	5, 5, 5, 6, 7, $FE, 1
0000587E                            		even
0000587E                            		even
0000587E                            
0000587E                            ; ===========================================================================
0000587E                            ; ---------------------------------------------------------------------------
0000587E                            ; Object 88 - chaos emeralds on	the ending sequence
0000587E                            ; ---------------------------------------------------------------------------
0000587E                            
0000587E                            Obj88:					; XREF: Obj_Index
0000587E 7000                       		moveq	#0,d0
00005880 1028 0024                  		move.b	$24(a0),d0
00005884 323B 0000                  		move.w	Obj88_Index(pc,d0.w),d1
00005888 4EBB 1000                  		jsr	Obj88_Index(pc,d1.w)
0000588C 4EF9 0000 0000             		jmp	DisplaySprite
00005892                            ; ===========================================================================
00005892 0000                       Obj88_Index:	dc.w Obj88_Main-Obj88_Index
00005894 0000                       		dc.w Obj88_Move-Obj88_Index
00005896                            ; ===========================================================================
00005896                            
00005896                            Obj88_Main:				; XREF: Obj88_Index
00005896 0C38 0002 D01A             		cmpi.b	#2,($FFFFD01A).w
0000589C 6700                       		beq.s	Obj88_Main2
0000589E 588F                       		addq.l	#4,sp
000058A0 4E75                       		rts	
000058A2                            ; ===========================================================================
000058A2                            
000058A2                            Obj88_Main2:				; XREF: Obj88_Main
000058A2 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; match X position with Sonic
000058A8 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0) ; match Y position	with Sonic
000058AE 2248                       		movea.l	a0,a1
000058B0 7600                       		moveq	#0,d3
000058B2 7401                       		moveq	#1,d2
000058B4 7205                       		moveq	#5,d1
000058B6                            
000058B6                            Obj88_MainLoop:
000058B6 12BC 0088                  		move.b	#$88,(a1)	; load chaos emerald object
000058BA 5429 0024                  		addq.b	#2,$24(a1)
000058BE 237C 0000 0000 0004        		move.l	#Map_obj88,4(a1)
000058C6 337C 03C5 0002             		move.w	#$3C5,2(a1)
000058CC 137C 0004 0001             		move.b	#4,1(a1)
000058D2 137C 0001 0018             		move.b	#1,$18(a1)
000058D8 3368 0008 0038             		move.w	8(a0),$38(a1)
000058DE 3368 000C 003A             		move.w	$C(a0),$3A(a1)
000058E4 1342 001C                  		move.b	d2,$1C(a1)
000058E8 1342 001A                  		move.b	d2,$1A(a1)
000058EC 5202                       		addq.b	#1,d2
000058EE 1343 0026                  		move.b	d3,$26(a1)
000058F2 0603 002A                  		addi.b	#$2A,d3
000058F6 43E9 0040                  		lea	$40(a1),a1
000058FA 51C9 FFBA                  		dbf	d1,Obj88_MainLoop ; repeat 5 more times
000058FE                            
000058FE                            Obj88_Move:				; XREF: Obj88_Index
000058FE 3028 003E                  		move.w	$3E(a0),d0
00005902 D168 0026                  		add.w	d0,$26(a0)
00005906 1028 0026                  		move.b	$26(a0),d0
0000590A 4EB9 0000 2C22             		jsr	(CalcSine).l
00005910 7800                       		moveq	#0,d4
00005912 1828 003C                  		move.b	$3C(a0),d4
00005916 C3C4                       		muls.w	d4,d1
00005918 E081                       		asr.l	#8,d1
0000591A C1C4                       		muls.w	d4,d0
0000591C E080                       		asr.l	#8,d0
0000591E D268 0038                  		add.w	$38(a0),d1
00005922 D068 003A                  		add.w	$3A(a0),d0
00005926 3141 0008                  		move.w	d1,8(a0)
0000592A 3140 000C                  		move.w	d0,$C(a0)
0000592E 0C68 2000 003C             		cmpi.w	#$2000,$3C(a0)
00005934 6700                       		beq.s	loc_55FA
00005936 0668 0020 003C             		addi.w	#$20,$3C(a0)
0000593C                            
0000593C                            loc_55FA:
0000593C 0C68 2000 003E             		cmpi.w	#$2000,$3E(a0)
00005942 6700                       		beq.s	loc_5608
00005944 0668 0020 003E             		addi.w	#$20,$3E(a0)
0000594A                            
0000594A                            loc_5608:
0000594A 0C68 0140 003A             		cmpi.w	#$140,$3A(a0)
00005950 6700                       		beq.s	locret_5614
00005952 5368 003A                  		subq.w	#1,$3A(a0)
00005956                            
00005956                            locret_5614:
00005956 4E75                       		rts	
00005958                            ; ===========================================================================
00005958                            ; ---------------------------------------------------------------------------
00005958                            ; Object 89 - "SONIC THE HEDGEHOG" text	on the ending sequence
00005958                            ; ---------------------------------------------------------------------------
00005958                            
00005958                            Obj89:					; XREF: Obj_Index
00005958 7000                       		moveq	#0,d0
0000595A 1028 0024                  		move.b	$24(a0),d0
0000595E 323B 0000                  		move.w	Obj89_Index(pc,d0.w),d1
00005962 4EFB 1000                  		jmp	Obj89_Index(pc,d1.w)
00005966                            ; ===========================================================================
00005966 0000                       Obj89_Index:	dc.w Obj89_Main-Obj89_Index
00005968 0000                       		dc.w Obj89_Move-Obj89_Index
0000596A 0000                       		dc.w Obj89_GotoCredits-Obj89_Index
0000596C                            ; ===========================================================================
0000596C                            
0000596C                            Obj89_Main:				; XREF: Obj89_Index
0000596C 5428 0024                  		addq.b	#2,$24(a0)
00005970 317C FFE0 0008             		move.w	#-$20,8(a0)	; object starts	outside	the level boundary
00005976 317C 00D8 000A             		move.w	#$D8,$A(a0)
0000597C 217C 0000 0000 0004        		move.l	#Map_obj89,4(a0)
00005984 317C 05C5 0002             		move.w	#$5C5,2(a0)
0000598A 117C 0000 0001             		move.b	#0,1(a0)
00005990 117C 0000 0018             		move.b	#0,$18(a0)
00005996                            
00005996                            Obj89_Move:				; XREF: Obj89_Index
00005996 0C68 00C0 0008             		cmpi.w	#$C0,8(a0)	; has object reached $C0?
0000599C 6700                       		beq.s	Obj89_Delay	; if yes, branch
0000599E 0668 0010 0008             		addi.w	#$10,8(a0)	; move object to the right
000059A4 4EB9 0000 0000             		jsr	DisplaySprite
000059AA                            ; ===========================================================================
000059AA                            
000059AA                            Obj89_Delay:				; XREF: Obj89_Move
000059AA 5428 0024                  		addq.b	#2,$24(a0)
000059AE 317C 0078 0030             		move.w	#120,$30(a0)	; set duration for delay (2 seconds)
000059B4                            
000059B4                            Obj89_GotoCredits:			; XREF: Obj89_Index
000059B4 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
000059B8 6A00                       		bpl.s	Obj89_Display
000059BA 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; exit to credits
000059C0                            
000059C0                            Obj89_Display:
000059C0 4EB9 0000 0000             		jsr	DisplaySprite
000059C6                            ; ===========================================================================
000059C6                            ; ---------------------------------------------------------------------------
000059C6                            ; Sprite mappings - Sonic on the ending	sequence
000059C6                            ; ---------------------------------------------------------------------------
000059C6                            Map_obj87:
000059C6                            	include "_maps\obj87.asm"
000059C6                            ; ---------------------------------------------------------------------------
000059C6                            ; Sprite mappings - Sonic on the ending	sequence
000059C6                            ; ---------------------------------------------------------------------------
000059C6 0000 0000                  		dc.w byte_5690-Map_obj87, byte_569B-Map_obj87
000059CA 0000 0000                  		dc.w byte_56AB-Map_obj87, byte_56B6-Map_obj87
000059CE 0000 0000                  		dc.w byte_56C1-Map_obj87, byte_56CC-Map_obj87
000059D2 0000 0000                  		dc.w byte_56DC-Map_obj87, byte_5700-Map_obj87
000059D6 02                         byte_5690:	dc.b 2
000059D7 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8	; holding emeralds
000059DC 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
000059E1 03                         byte_569B:	dc.b 3
000059E2 FC0D 0010 F0               		dc.b $FC, $D, 0, $10, $F0 ; holding emeralds (glowing)
000059E7 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8
000059EC 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
000059F1 02                         byte_56AB:	dc.b 2
000059F2 EC09 0018 F8               		dc.b $EC, 9, 0,	$18, $F8 ; looking up
000059F7 FC0E 001E F0               		dc.b $FC, $E, 0, $1E, $F0
000059FC 02                         byte_56B6:	dc.b 2
000059FD EC09 002A F8               		dc.b $EC, 9, 0,	$2A, $F8 ; confused
00005A02 FC0E 0030 F0               		dc.b $FC, $E, 0, $30, $F0
00005A07 02                         byte_56C1:	dc.b 2
00005A08 EC09 082A F0               		dc.b $EC, 9, 8,	$2A, $F0 ; confused #2
00005A0D FC0E 0830 F0               		dc.b $FC, $E, 8, $30, $F0
00005A12 03                         byte_56CC:	dc.b 3
00005A13 EC06 003C F0               		dc.b $EC, 6, 0,	$3C, $F0 ; leaping
00005A18 EC06 083C 00               		dc.b $EC, 6, 8,	$3C, 0
00005A1D 040D 0042 F0               		dc.b 4,	$D, 0, $42, $F0
00005A22 07                         byte_56DC:	dc.b 7
00005A23 B20C 004A F8               		dc.b $B2, $C, 0, $4A, $F8 ; leaping #2
00005A28 BA0F 004E F0               		dc.b $BA, $F, 0, $4E, $F0
00005A2D BA05 005E 10               		dc.b $BA, 5, 0,	$5E, $10
00005A32 CA02 0062 10               		dc.b $CA, 2, 0,	$62, $10
00005A37 DA0C 0065 F0               		dc.b $DA, $C, 0, $65, $F0
00005A3C E208 0069 F8               		dc.b $E2, 8, 0,	$69, $F8
00005A41 EA05 006C F8               		dc.b $EA, 5, 0,	$6C, $F8
00005A46 18                         byte_5700:	dc.b $18
00005A47 800F 0070 F8               		dc.b $80, $F, 0, $70, $F8 ; leaping #3
00005A4C 900B 0080 E0               		dc.b $90, $B, 0, $80, $E0
00005A51 900B 008C 18               		dc.b $90, $B, 0, $8C, $18
00005A56 980B 0098 30               		dc.b $98, $B, 0, $98, $30
00005A5B A00F 00A4 58               		dc.b $A0, $F, 0, $A4, $58
00005A60 8800 00B4 F0               		dc.b $88, 0, 0,	$B4, $F0
00005A65 8005 00B5 18               		dc.b $80, 5, 0,	$B5, $18
00005A6A A00F 00B9 F8               		dc.b $A0, $F, 0, $B9, $F8
00005A6F B00B 00C9 E0               		dc.b $B0, $B, 0, $C9, $E0
00005A74 B80F 00D5 38               		dc.b $B8, $F, 0, $D5, $38
00005A79 A805 00E5 48               		dc.b $A8, 5, 0,	$E5, $48
00005A7E C002 00E9 58               		dc.b $C0, 2, 0,	$E9, $58
00005A83 C00F 00EC F8               		dc.b $C0, $F, 0, $EC, $F8
00005A88 B80F 00FC 18               		dc.b $B8, $F, 0, $FC, $18
00005A8D B008 010C 18               		dc.b $B0, 8, 1,	$C, $18
00005A92 D80D 010F 30               		dc.b $D8, $D, 1, $F, $30
00005A97 D808 0117 18               		dc.b $D8, 8, 1,	$17, $18
00005A9C D80F 011A D8               		dc.b $D8, $F, 1, $1A, $D8
00005AA1 E00D 012A F8               		dc.b $E0, $D, 1, $2A, $F8
00005AA6 E000 0132 28               		dc.b $E0, 0, 1,	$32, $28
00005AAB D004 0133 E0               		dc.b $D0, 4, 1,	$33, $E0
00005AB0 E805 0135 C8               		dc.b $E8, 5, 1,	$35, $C8
00005AB5 F80C 0139 C8               		dc.b $F8, $C, 1, $39, $C8
00005ABA F006 013D F8               		dc.b $F0, 6, 1,	$3D, $F8
00005AC0 00                         		even
00005AC0 00                         		even
00005AC0                            
00005AC0                            ; ---------------------------------------------------------------------------
00005AC0                            ; Sprite mappings - chaos emeralds on the ending sequence
00005AC0                            ; ---------------------------------------------------------------------------
00005AC0                            Map_obj88:
00005AC0                            	include "_maps\obj88.asm"
00005AC0                            ; ---------------------------------------------------------------------------
00005AC0                            ; Sprite mappings - chaos emeralds on the ending sequence
00005AC0                            ; ---------------------------------------------------------------------------
00005AC0 0000 0000                  		dc.w byte_5788-Map_obj88, byte_578E-Map_obj88
00005AC4 0000 0000                  		dc.w byte_5794-Map_obj88, byte_579A-Map_obj88
00005AC8 0000 0000                  		dc.w byte_57A0-Map_obj88, byte_57A6-Map_obj88
00005ACC 0000                       		dc.w byte_57AC-Map_obj88
00005ACE 01                         byte_5788:	dc.b 1
00005ACF F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00005AD4 01                         byte_578E:	dc.b 1
00005AD5 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
00005ADA 01                         byte_5794:	dc.b 1
00005ADB F805 4010 F8               		dc.b $F8, 5, $40, $10, $F8
00005AE0 01                         byte_579A:	dc.b 1
00005AE1 F805 2018 F8               		dc.b $F8, 5, $20, $18, $F8
00005AE6 01                         byte_57A0:	dc.b 1
00005AE7 F805 4014 F8               		dc.b $F8, 5, $40, $14, $F8
00005AEC 01                         byte_57A6:	dc.b 1
00005AED F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
00005AF2 01                         byte_57AC:	dc.b 1
00005AF3 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
00005AF8                            		even
00005AF8                            		even
00005AF8                            
00005AF8                            ; ---------------------------------------------------------------------------
00005AF8                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
00005AF8                            ; ---------------------------------------------------------------------------
00005AF8                            Map_obj89:
00005AF8                            	include "_maps\obj89.asm"
00005AF8                            ; ---------------------------------------------------------------------------
00005AF8                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
00005AF8                            ; ---------------------------------------------------------------------------
00005AF8 0000                       		dc.w byte_57B4-Map_obj89
00005AFA 03                         byte_57B4:	dc.b 3
00005AFB F00F 0000 D0               		dc.b $F0, $F, 0, 0, $D0
00005B00 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00005B05 F00F 0020 10               		dc.b $F0, $F, 0, $20, $10
00005B0A                            		even
00005B0A                            		even
00005B0A                            
00005B0A                            ; ===========================================================================
00005B0A                            ; ---------------------------------------------------------------------------
00005B0A                            ; Credits ending sequence
00005B0A                            ; ---------------------------------------------------------------------------
00005B0A                            
00005B0A                            Credits:				; XREF: GameModeArray
00005B0A 6100 BCF2                  		bsr.w	ClearPLC
00005B0E 6100 C562                  		bsr.w	Pal_FadeFrom
00005B12 4DF9 00C0 0004             		lea	($C00004).l,a6
00005B18 3CBC 8004                  		move.w	#$8004,(a6)
00005B1C 3CBC 8230                  		move.w	#$8230,(a6)
00005B20 3CBC 8407                  		move.w	#$8407,(a6)
00005B24 3CBC 9001                  		move.w	#$9001,(a6)
00005B28 3CBC 9200                  		move.w	#$9200,(a6)
00005B2C 3CBC 8B03                  		move.w	#$8B03,(a6)
00005B30 3CBC 8720                  		move.w	#$8720,(a6)
00005B34 4238 F64E                  		clr.b	($FFFFF64E).w
00005B38 6100 B9AA                  		bsr.w	ClearScreen
00005B3C 43F8 D000                  		lea	($FFFFD000).w,a1
00005B40 7000                       		moveq	#0,d0
00005B42 323C 07FF                  		move.w	#$7FF,d1
00005B46                            
00005B46                            Cred_ClrObjRam:
00005B46 22C0                       		move.l	d0,(a1)+
00005B48 51C9 FFFC                  		dbf	d1,Cred_ClrObjRam ; clear object RAM
00005B4C                            
00005B4C 23FC 7400 0002 00C0 0004   		move.l	#$74000002,($C00004).l
00005B56 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load credits alphabet patterns
00005B5C 6100 BB02                  		bsr.w	NemDec
00005B60 43F8 FB80                  		lea	($FFFFFB80).w,a1
00005B64 7000                       		moveq	#0,d0
00005B66 323C 001F                  		move.w	#$1F,d1
00005B6A                            
00005B6A                            Cred_ClrPallet:
00005B6A 22C0                       		move.l	d0,(a1)+
00005B6C 51C9 FFFC                  		dbf	d1,Cred_ClrPallet ; fill pallet	with black ($0000)
00005B70                            
00005B70 7003                       		moveq	#3,d0
00005B72 6100 C7A8                  		bsr.w	PalLoad1	; load Sonic's pallet
00005B76 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load credits object
00005B7C 4EB9 0000 0000             		jsr	ObjectsLoad
00005B82 4EB9 0000 0000             		jsr	BuildSprites
00005B88 6100 0000                  		bsr.w	EndingDemoLoad
00005B8C 7000                       		moveq	#0,d0
00005B8E 1038 FE10                  		move.b	($FFFFFE10).w,d0
00005B92 E948                       		lsl.w	#4,d0
00005B94 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2 ;	load block mappings etc
00005B9A 45F2 0000                  		lea	(a2,d0.w),a2
00005B9E 7000                       		moveq	#0,d0
00005BA0 1012                       		move.b	(a2),d0
00005BA2 6700                       		beq.s	loc_5862
00005BA4 6100 BBFA                  		bsr.w	LoadPLC		; load level patterns
00005BA8                            
00005BA8                            loc_5862:
00005BA8 7001                       		moveq	#1,d0
00005BAA 6100 BBF4                  		bsr.w	LoadPLC		; load standard	level patterns
00005BAE 31FC 0078 F614             		move.w	#120,($FFFFF614).w ; display a credit for 2 seconds
00005BB4 6100 C416                  		bsr.w	Pal_FadeTo
00005BB8                            
00005BB8                            Cred_WaitLoop:
00005BB8 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00005BBE 6100 D030                  		bsr.w	DelayProgram
00005BC2 6100 BC48                  		bsr.w	RunPLC_RAM
00005BC6 4A78 F614                  		tst.w	($FFFFF614).w	; have 2 seconds elapsed?
00005BCA 66EC                       		bne.s	Cred_WaitLoop	; if not, branch
00005BCC 4AB8 F680                  		tst.l	($FFFFF680).w	; have level gfx finished decompressing?
00005BD0 66E6                       		bne.s	Cred_WaitLoop	; if not, branch
00005BD2 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	the credits finished?
00005BD8 6700 0000                  		beq.w	TryAgainEnd	; if yes, branch
00005BDC 4E75                       		rts	
00005BDE                            
00005BDE                            ; ---------------------------------------------------------------------------
00005BDE                            ; Ending sequence demo loading subroutine
00005BDE                            ; ---------------------------------------------------------------------------
00005BDE                            
00005BDE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005BDE                            
00005BDE                            
00005BDE                            EndingDemoLoad:				; XREF: Credits
00005BDE 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00005BE2 0240 000F                  		andi.w	#$F,d0
00005BE6 D040                       		add.w	d0,d0
00005BE8 303B 0000                  		move.w	EndDemo_Levels(pc,d0.w),d0 ; load level	array
00005BEC 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level from level	array
00005BF0 5278 FFF4                  		addq.w	#1,($FFFFFFF4).w
00005BF4 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	credits	finished?
00005BFA 6400                       		bcc.s	EndDemo_Exit	; if yes, branch
00005BFC 31FC 8001 FFF0             		move.w	#$8001,($FFFFFFF0).w ; force demo mode
00005C02 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set game mode to 08 (demo)
00005C08 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
00005C0E 7000                       		moveq	#0,d0
00005C10 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00005C14 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00005C18 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00005C1C 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost counter
00005C20 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w ; is SLZ demo running?
00005C26 6600                       		bne.s	EndDemo_Exit	; if not, branch
00005C28 43F9 0000 0000             		lea	(EndDemo_LampVar).l,a1 ; load lamppost variables
00005C2E 45F8 FE30                  		lea	($FFFFFE30).w,a2
00005C32 303C 0008                  		move.w	#8,d0
00005C36                            
00005C36                            EndDemo_LampLoad:
00005C36 24D9                       		move.l	(a1)+,(a2)+
00005C38 51C8 FFFC                  		dbf	d0,EndDemo_LampLoad
00005C3C                            
00005C3C                            EndDemo_Exit:
00005C3C 4E75                       		rts	
00005C3E                            ; End of function EndingDemoLoad
00005C3E                            
00005C3E                            ; ===========================================================================
00005C3E                            ; ---------------------------------------------------------------------------
00005C3E                            ; Levels used in the end sequence demos
00005C3E                            ; ---------------------------------------------------------------------------
00005C3E                            EndDemo_Levels:	incbin	misc\dm_ord2.bin
00005C4E                            
00005C4E                            ; ---------------------------------------------------------------------------
00005C4E                            ; Lamppost variables in the end sequence demo (Star Light Zone)
00005C4E                            ; ---------------------------------------------------------------------------
00005C4E                            EndDemo_LampVar:
00005C4E 0101                       		dc.b 1,	1		; XREF: EndingDemoLoad
00005C50 0A00 062C 000D             		dc.w $A00, $62C, $D
00005C56 0000 0000                  		dc.l 0
00005C5A 0000                       		dc.b 0,	0
00005C5C 0800 0957 05CC 04AB 03A6+  		dc.w $800, $957, $5CC, $4AB, $3A6, 0, $28C, 0, 0, $308
00005C70 0101                       		dc.b 1,	1
00005C72                            ; ===========================================================================
00005C72                            ; ---------------------------------------------------------------------------
00005C72                            ; "TRY AGAIN" and "END"	screens
00005C72                            ; ---------------------------------------------------------------------------
00005C72                            
00005C72                            TryAgainEnd:				; XREF: Credits
00005C72 6100 BB8A                  		bsr.w	ClearPLC
00005C76 6100 C3FA                  		bsr.w	Pal_FadeFrom
00005C7A 4DF9 00C0 0004             		lea	($C00004).l,a6
00005C80 3CBC 8004                  		move.w	#$8004,(a6)
00005C84 3CBC 8230                  		move.w	#$8230,(a6)
00005C88 3CBC 8407                  		move.w	#$8407,(a6)
00005C8C 3CBC 9001                  		move.w	#$9001,(a6)
00005C90 3CBC 9200                  		move.w	#$9200,(a6)
00005C94 3CBC 8B03                  		move.w	#$8B03,(a6)
00005C98 3CBC 8720                  		move.w	#$8720,(a6)
00005C9C 4238 F64E                  		clr.b	($FFFFF64E).w
00005CA0 6100 B842                  		bsr.w	ClearScreen
00005CA4 43F8 D000                  		lea	($FFFFD000).w,a1
00005CA8 7000                       		moveq	#0,d0
00005CAA 323C 07FF                  		move.w	#$7FF,d1
00005CAE                            
00005CAE                            TryAg_ClrObjRam:
00005CAE 22C0                       		move.l	d0,(a1)+
00005CB0 51C9 FFFC                  		dbf	d1,TryAg_ClrObjRam ; clear object RAM
00005CB4                            
00005CB4 701D                       		moveq	#$1D,d0
00005CB6 6100 BC54                  		bsr.w	RunPLC_ROM	; load "TRY AGAIN" or "END" patterns
00005CBA 43F8 FB80                  		lea	($FFFFFB80).w,a1
00005CBE 7000                       		moveq	#0,d0
00005CC0 323C 001F                  		move.w	#$1F,d1
00005CC4                            
00005CC4                            TryAg_ClrPallet:
00005CC4 22C0                       		move.l	d0,(a1)+
00005CC6 51C9 FFFC                  		dbf	d1,TryAg_ClrPallet ; fill pallet with black ($0000)
00005CCA                            
00005CCA 7013                       		moveq	#$13,d0
00005CCC 6100 C64E                  		bsr.w	PalLoad1	; load ending pallet
00005CD0 4278 FBC0                  		clr.w	($FFFFFBC0).w
00005CD4 11FC 008B D080             		move.b	#$8B,($FFFFD080).w ; load Eggman object
00005CDA 4EB9 0000 0000             		jsr	ObjectsLoad
00005CE0 4EB9 0000 0000             		jsr	BuildSprites
00005CE6 31FC 0708 F614             		move.w	#1800,($FFFFF614).w ; show screen for 30 seconds
00005CEC 6100 C2DE                  		bsr.w	Pal_FadeTo
00005CF0                            
00005CF0                            ; ---------------------------------------------------------------------------
00005CF0                            ; "TRY AGAIN" and "END"	screen main loop
00005CF0                            ; ---------------------------------------------------------------------------
00005CF0                            TryAg_MainLoop:
00005CF0 6100 B8D6                  		bsr.w	PauseGame
00005CF4 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00005CFA 6100 CEF4                  		bsr.w	DelayProgram
00005CFE 4EB9 0000 0000             		jsr	ObjectsLoad
00005D04 4EB9 0000 0000             		jsr	BuildSprites
00005D0A 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00005D10 6600                       		bne.s	TryAg_Exit	; if yes, branch
00005D12 4A78 F614                  		tst.w	($FFFFF614).w	; has 30 seconds elapsed?
00005D16 6700                       		beq.s	TryAg_Exit	; if yes, branch
00005D18 0C38 001C F600             		cmpi.b	#$1C,($FFFFF600).w
00005D1E 67D0                       		beq.s	TryAg_MainLoop
00005D20                            
00005D20                            TryAg_Exit:
00005D20 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00005D26 4E75                       		rts	
00005D28                            
00005D28                            ; ===========================================================================
00005D28                            ; ---------------------------------------------------------------------------
00005D28                            ; Object 8B - Eggman on "TRY AGAIN" and "END"	screens
00005D28                            ; ---------------------------------------------------------------------------
00005D28                            
00005D28                            Obj8B:					; XREF: Obj_Index
00005D28 7000                       		moveq	#0,d0
00005D2A 1028 0024                  		move.b	$24(a0),d0
00005D2E 323B 0000                  		move.w	Obj8B_Index(pc,d0.w),d1
00005D32 4EBB 1000                  		jsr	Obj8B_Index(pc,d1.w)
00005D36 4EF9 0000 0000             		jmp	DisplaySprite
00005D3C                            ; ===========================================================================
00005D3C 0000                       Obj8B_Index:	dc.w Obj8B_Main-Obj8B_Index
00005D3E 0000                       		dc.w Obj8B_Animate-Obj8B_Index
00005D40 0000                       		dc.w Obj8B_Juggle-Obj8B_Index
00005D42 0000                       		dc.w loc_5A8E-Obj8B_Index
00005D44                            ; ===========================================================================
00005D44                            
00005D44                            Obj8B_Main:				; XREF: Obj8B_Index
00005D44 5428 0024                  		addq.b	#2,$24(a0)
00005D48 317C 0120 0008             		move.w	#$120,8(a0)
00005D4E 317C 00F4 000A             		move.w	#$F4,$A(a0)
00005D54 217C 0000 0000 0004        		move.l	#Map_obj8B,4(a0)
00005D5C 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005D62 117C 0000 0001             		move.b	#0,1(a0)
00005D68 117C 0002 0018             		move.b	#2,$18(a0)
00005D6E 117C 0002 001C             		move.b	#2,$1C(a0)	; use "END" animation
00005D74 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005D7A 6700                       		beq.s	Obj8B_Animate	; if yes, branch
00005D7C 11FC 008A D0C0             		move.b	#$8A,($FFFFD0C0).w ; load credits object
00005D82 31FC 0009 FFF4             		move.w	#9,($FFFFFFF4).w ; use "TRY AGAIN" text
00005D88 11FC 008C D800             		move.b	#$8C,($FFFFD800).w ; load emeralds object on "TRY AGAIN" screen
00005D8E 117C 0000 001C             		move.b	#0,$1C(a0)	; use "TRY AGAIN" animation
00005D94                            
00005D94                            Obj8B_Animate:				; XREF: Obj8B_Index
00005D94 43F9 0000 0000             		lea	(Ani_obj8B).l,a1
00005D9A 4EF9 0000 0000             		jmp	AnimateSprite
00005DA0                            ; ===========================================================================
00005DA0                            
00005DA0                            Obj8B_Juggle:				; XREF: Obj8B_Index
00005DA0 5428 0024                  		addq.b	#2,$24(a0)
00005DA4 7002                       		moveq	#2,d0
00005DA6 0828 0000 001C             		btst	#0,$1C(a0)
00005DAC 6700                       		beq.s	loc_5A6A
00005DAE 4440                       		neg.w	d0
00005DB0                            
00005DB0                            loc_5A6A:
00005DB0 43F8 D800                  		lea	($FFFFD800).w,a1
00005DB4 7205                       		moveq	#5,d1
00005DB6                            
00005DB6                            loc_5A70:
00005DB6 1340 003E                  		move.b	d0,$3E(a1)
00005DBA 3400                       		move.w	d0,d2
00005DBC E742                       		asl.w	#3,d2
00005DBE D529 0026                  		add.b	d2,$26(a1)
00005DC2 43E9 0040                  		lea	$40(a1),a1
00005DC6 51C9 FFEE                  		dbf	d1,loc_5A70
00005DCA 5228 001A                  		addq.b	#1,$1A(a0)
00005DCE 317C 0070 0030             		move.w	#112,$30(a0)
00005DD4                            
00005DD4                            loc_5A8E:				; XREF: Obj8B_Index
00005DD4 5368 0030                  		subq.w	#1,$30(a0)
00005DD8 6A00                       		bpl.s	locret_5AA0
00005DDA 0868 0000 001C             		bchg	#0,$1C(a0)
00005DE0 117C 0002 0024             		move.b	#2,$24(a0)
00005DE6                            
00005DE6                            locret_5AA0:
00005DE6 4E75                       		rts	
00005DE8                            ; ===========================================================================
00005DE8                            Ani_obj8B:
00005DE8                            	include "_anim\obj8B.asm"
00005DE8                            ; ---------------------------------------------------------------------------
00005DE8                            ; Animation script - Eggman on the "TRY AGAIN" and "END" screens
00005DE8                            ; ---------------------------------------------------------------------------
00005DE8 0000                       		dc.w byte_5AA8-Ani_obj8B
00005DEA 0000                       		dc.w byte_5AAC-Ani_obj8B
00005DEC 0000                       		dc.w byte_5AB0-Ani_obj8B
00005DEE 0500 FC01                  byte_5AA8:	dc.b 5,	0, $FC,	1
00005DF2 0502 FC03                  byte_5AAC:	dc.b 5,	2, $FC,	3
00005DF6 0704 0506 0504 0506 0504+  byte_5AB0:	dc.b 7,	4, 5, 6, 5, 4, 5, 6, 5,	4, 5, 6, 5, 7, 5, 6, 5,	$FF
00005E08                            		even
00005E08                            		even
00005E08                            
00005E08                            ; ===========================================================================
00005E08                            ; ---------------------------------------------------------------------------
00005E08                            ; Object 8C - chaos emeralds on	the "TRY AGAIN"	screen
00005E08                            ; ---------------------------------------------------------------------------
00005E08                            
00005E08                            Obj8C:					; XREF: Obj_Index
00005E08 7000                       		moveq	#0,d0
00005E0A 1028 0024                  		move.b	$24(a0),d0
00005E0E 323B 0000                  		move.w	Obj8C_Index(pc,d0.w),d1
00005E12 4EBB 1000                  		jsr	Obj8C_Index(pc,d1.w)
00005E16 4EF9 0000 0000             		jmp	DisplaySprite
00005E1C                            ; ===========================================================================
00005E1C 0000                       Obj8C_Index:	dc.w Obj8C_Main-Obj8C_Index
00005E1E 0000                       		dc.w Obj8C_Move-Obj8C_Index
00005E20                            ; ===========================================================================
00005E20                            
00005E20                            Obj8C_Main:				; XREF: Obj8C_Index
00005E20 2248                       		movea.l	a0,a1
00005E22 7400                       		moveq	#0,d2
00005E24 7600                       		moveq	#0,d3
00005E26 7205                       		moveq	#5,d1
00005E28 9238 FE57                  		sub.b	($FFFFFE57).w,d1
00005E2C                            
00005E2C                            Obj8C_MakeEms:				; XREF: loc_5B42
00005E2C 12BC 008C                  		move.b	#$8C,(a1)	; load emerald object
00005E30 5429 0024                  		addq.b	#2,$24(a1)
00005E34 237C 0000 5AC0 0004        		move.l	#Map_obj88,4(a1)
00005E3C 337C 03C5 0002             		move.w	#$3C5,2(a1)
00005E42 137C 0000 0001             		move.b	#0,1(a1)
00005E48 137C 0001 0018             		move.b	#1,$18(a1)
00005E4E 337C 0104 0008             		move.w	#$104,8(a1)
00005E54 337C 0120 0038             		move.w	#$120,$38(a1)
00005E5A 337C 00EC 000A             		move.w	#$EC,$A(a1)
00005E60 3369 000A 003A             		move.w	$A(a1),$3A(a1)
00005E66 137C 001C 003C             		move.b	#$1C,$3C(a1)
00005E6C 47F8 FE58                  		lea	($FFFFFE58).w,a3
00005E70                            
00005E70                            Obj8C_ChkEms:
00005E70 7000                       		moveq	#0,d0
00005E72 1038 FE57                  		move.b	($FFFFFE57).w,d0
00005E76 5340                       		subq.w	#1,d0
00005E78 6500                       		bcs.s	loc_5B42
00005E7A                            
00005E7A                            Obj8C_ChkEmLoop:
00005E7A B433 0000                  		cmp.b	(a3,d0.w),d2
00005E7E 6600                       		bne.s	loc_5B3E
00005E80 5202                       		addq.b	#1,d2
00005E82 60EC                       		bra.s	Obj8C_ChkEms
00005E84                            ; ===========================================================================
00005E84                            
00005E84                            loc_5B3E:
00005E84 51C8 FFF4                  		dbf	d0,Obj8C_ChkEmLoop ; checks which emeralds you have
00005E88                            
00005E88                            loc_5B42:
00005E88 1342 001A                  		move.b	d2,$1A(a1)
00005E8C 5229 001A                  		addq.b	#1,$1A(a1)
00005E90 5202                       		addq.b	#1,d2
00005E92 137C 0080 0026             		move.b	#$80,$26(a1)
00005E98 1343 001E                  		move.b	d3,$1E(a1)
00005E9C 1343 001F                  		move.b	d3,$1F(a1)
00005EA0 0643 000A                  		addi.w	#$A,d3
00005EA4 43E9 0040                  		lea	$40(a1),a1
00005EA8 51C9 FF82                  		dbf	d1,Obj8C_MakeEms
00005EAC                            
00005EAC                            Obj8C_Move:				; XREF: Obj8C_Index
00005EAC 4A68 003E                  		tst.w	$3E(a0)
00005EB0 6700                       		beq.s	locret_5BBA
00005EB2 4A28 001E                  		tst.b	$1E(a0)
00005EB6 6700                       		beq.s	loc_5B78
00005EB8 5328 001E                  		subq.b	#1,$1E(a0)
00005EBC 6600                       		bne.s	loc_5B80
00005EBE                            
00005EBE                            loc_5B78:
00005EBE 3028 003E                  		move.w	$3E(a0),d0
00005EC2 D168 0026                  		add.w	d0,$26(a0)
00005EC6                            
00005EC6                            loc_5B80:
00005EC6 1028 0026                  		move.b	$26(a0),d0
00005ECA 6700                       		beq.s	loc_5B8C
00005ECC 0C00 0080                  		cmpi.b	#$80,d0
00005ED0 6600                       		bne.s	loc_5B96
00005ED2                            
00005ED2                            loc_5B8C:
00005ED2 4268 003E                  		clr.w	$3E(a0)
00005ED6 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00005EDC                            
00005EDC                            loc_5B96:
00005EDC 4EB9 0000 2C22             		jsr	(CalcSine).l
00005EE2 7800                       		moveq	#0,d4
00005EE4 1828 003C                  		move.b	$3C(a0),d4
00005EE8 C3C4                       		muls.w	d4,d1
00005EEA E081                       		asr.l	#8,d1
00005EEC C1C4                       		muls.w	d4,d0
00005EEE E080                       		asr.l	#8,d0
00005EF0 D268 0038                  		add.w	$38(a0),d1
00005EF4 D068 003A                  		add.w	$3A(a0),d0
00005EF8 3141 0008                  		move.w	d1,8(a0)
00005EFC 3140 000A                  		move.w	d0,$A(a0)
00005F00                            
00005F00                            locret_5BBA:
00005F00 4E75                       		rts	
00005F02                            ; ===========================================================================
00005F02                            ; ---------------------------------------------------------------------------
00005F02                            ; Sprite mappings - Eggman on	the "TRY AGAIN"	and "END" screens
00005F02                            ; ---------------------------------------------------------------------------
00005F02                            Map_obj8B:
00005F02                            	include "_maps\obj8B.asm"
00005F02                            ; ---------------------------------------------------------------------------
00005F02                            ; Sprite mappings - Robotnik on	the "TRY AGAIN"	and "END" screens
00005F02                            ; ---------------------------------------------------------------------------
00005F02 0000 0000                  		dc.w byte_5BCC-Map_obj8B, byte_5BF5-Map_obj8B
00005F06 0000 0000                  		dc.w byte_5C1E-Map_obj8B, byte_5C47-Map_obj8B
00005F0A 0000 0000                  		dc.w byte_5C70-Map_obj8B, byte_5CAD-Map_obj8B
00005F0E 0000 0000                  		dc.w byte_5CE0-Map_obj8B, byte_5D13-Map_obj8B
00005F12 08                         byte_5BCC:	dc.b 8
00005F13 E905 0000 F0               		dc.b $E9, 5, 0,	0, $F0
00005F18 F90C 0004 E0               		dc.b $F9, $C, 0, 4, $E0
00005F1D E904 0008 00               		dc.b $E9, 4, 0,	8, 0
00005F22 F10D 000A 00               		dc.b $F1, $D, 0, $A, 0
00005F27 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00005F2C 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00005F31 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005F36 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005F3B 08                         byte_5BF5:	dc.b 8
00005F3C E80D 0012 E0               		dc.b $E8, $D, 0, $12, $E0
00005F41 F808 001A E8               		dc.b $F8, 8, 0,	$1A, $E8
00005F46 E805 0800 00               		dc.b $E8, 5, 8,	0, 0
00005F4B F80C 0804 00               		dc.b $F8, $C, 8, 4, 0
00005F50 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00005F55 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00005F5A 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005F5F 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005F64 08                         byte_5C1E:	dc.b 8
00005F65 E904 0808 F0               		dc.b $E9, 4, 8,	8, $F0
00005F6A F10D 080A E0               		dc.b $F1, $D, 8, $A, $E0
00005F6F E905 0800 00               		dc.b $E9, 5, 8,	0, 0
00005F74 F90C 0804 00               		dc.b $F9, $C, 8, 4, 0
00005F79 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00005F7E 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00005F83 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005F88 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005F8D 08                         byte_5C47:	dc.b 8
00005F8E E805 0000 F0               		dc.b $E8, 5, 0,	0, $F0
00005F93 F80C 0004 E0               		dc.b $F8, $C, 0, 4, $E0
00005F98 E80D 0812 00               		dc.b $E8, $D, 8, $12, 0
00005F9D F808 081A 00               		dc.b $F8, 8, 8,	$1A, 0
00005FA2 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00005FA7 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00005FAC 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005FB1 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005FB6 0C                         byte_5C70:	dc.b $C
00005FB7 ED0A 002B E8               		dc.b $ED, $A, 0, $2B, $E8
00005FBC F500 0034 E0               		dc.b $F5, 0, 0,	$34, $E0
00005FC1 0504 0035 F0               		dc.b 5,	4, 0, $35, $F0
00005FC6 0D08 0037 E8               		dc.b $D, 8, 0, $37, $E8
00005FCB ED0A 082B 00               		dc.b $ED, $A, 8, $2B, 0
00005FD0 F500 0834 18               		dc.b $F5, 0, 8,	$34, $18
00005FD5 0504 0835 00               		dc.b 5,	4, 8, $35, 0
00005FDA 0D08 0837 00               		dc.b $D, 8, 8, $37, 0
00005FDF 100D 0073 E0               		dc.b $10, $D, 0, $73, $E0
00005FE4 100D 007B 00               		dc.b $10, $D, 0, $7B, 0
00005FE9 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00005FEE 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00005FF3 0A                         byte_5CAD:	dc.b $A
00005FF4 D207 003A F0               		dc.b $D2, 7, 0,	$3A, $F0
00005FF9 DA00 0042 E8               		dc.b $DA, 0, 0,	$42, $E8
00005FFE F207 0043 F0               		dc.b $F2, 7, 0,	$43, $F0
00006003 D207 083A 00               		dc.b $D2, 7, 8,	$3A, 0
00006008 DA00 0842 10               		dc.b $DA, 0, 8,	$42, $10
0000600D F207 0843 00               		dc.b $F2, 7, 8,	$43, 0
00006012 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00006017 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
0000601C 1C0C 005F E0               		dc.b $1C, $C, 0, $5F, $E0
00006021 1C0C 085F 00               		dc.b $1C, $C, 8, $5F, 0
00006026 0A                         byte_5CE0:	dc.b $A
00006027 C40B 004B E8               		dc.b $C4, $B, 0, $4B, $E8
0000602C E408 0057 E8               		dc.b $E4, 8, 0,	$57, $E8
00006031 EC00 005A F0               		dc.b $EC, 0, 0,	$5A, $F0
00006036 C40B 084B 00               		dc.b $C4, $B, 8, $4B, 0
0000603B E408 0857 00               		dc.b $E4, 8, 8,	$57, 0
00006040 EC00 085A 08               		dc.b $EC, 0, 8,	$5A, 8
00006045 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
0000604A 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
0000604F 1C0C 0063 E0               		dc.b $1C, $C, 0, $63, $E0
00006054 1C0C 0863 00               		dc.b $1C, $C, 8, $63, 0
00006059 0C                         byte_5D13:	dc.b $C
0000605A F40A 002B E8               		dc.b $F4, $A, 0, $2B, $E8
0000605F FC00 0034 E0               		dc.b $FC, 0, 0,	$34, $E0
00006064 0C04 0035 F0               		dc.b $C, 4, 0, $35, $F0
00006069 1408 0037 E8               		dc.b $14, 8, 0,	$37, $E8
0000606E F40A 082B 00               		dc.b $F4, $A, 8, $2B, 0
00006073 FC00 0834 18               		dc.b $FC, 0, 8,	$34, $18
00006078 0C04 0835 00               		dc.b $C, 4, 8, $35, 0
0000607D 1408 0837 00               		dc.b $14, 8, 8,	$37, 0
00006082 180C 0083 E0               		dc.b $18, $C, 0, $83, $E0
00006087 180C 0087 00               		dc.b $18, $C, 0, $87, 0
0000608C 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00006091 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00006096                            		even
00006096                            		even
00006096                            
00006096                            ; ---------------------------------------------------------------------------
00006096                            ; Ending sequence demos
00006096                            ; ---------------------------------------------------------------------------
00006096                            Demo_EndGHZ1:	incbin	demodata\e_ghz1.bin
000060C4                            		even
000060C4                            Demo_EndMZ:	incbin	demodata\e_mz.bin
00006104                            		even
00006104                            Demo_EndSYZ:	incbin	demodata\e_syz.bin
00006134                            		even
00006134                            Demo_EndLZ:	incbin	demodata\e_lz.bin
00006164                            		even
00006164                            Demo_EndSLZ:	incbin	demodata\e_slz.bin
00006184                            		even
00006184                            Demo_EndSBZ1:	incbin	demodata\e_sbz1.bin
000061A4                            		even
000061A4                            Demo_EndSBZ2:	incbin	demodata\e_sbz2.bin
000061D4                            		even
000061D4                            Demo_EndGHZ2:	incbin	demodata\e_ghz2.bin
00006204                            		even
00006204                            
00006204                            ; ---------------------------------------------------------------------------
00006204                            ; Subroutine to	load level boundaries and start	locations
00006204                            ; ---------------------------------------------------------------------------
00006204                            
00006204                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006204                            
00006204                            
00006204                            LevelSizeLoad:				; XREF: TitleScreen; Level; EndingSequence
00006204 7000                       		moveq	#0,d0
00006206 11C0 F740                  		move.b	d0,($FFFFF740).w
0000620A 11C0 F741                  		move.b	d0,($FFFFF741).w
0000620E 11C0 F746                  		move.b	d0,($FFFFF746).w
00006212 11C0 F748                  		move.b	d0,($FFFFF748).w
00006216 11C0 F742                  		move.b	d0,($FFFFF742).w
0000621A 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000621E ED08                       		lsl.b	#6,d0
00006220 E848                       		lsr.w	#4,d0
00006222 3200                       		move.w	d0,d1
00006224 D040                       		add.w	d0,d0
00006226 D041                       		add.w	d1,d0
00006228 41FB 0000                  		lea	LevelSizeArray(pc,d0.w),a0 ; load level	boundaries
0000622C 3018                       		move.w	(a0)+,d0
0000622E 31C0 F730                  		move.w	d0,($FFFFF730).w
00006232 2018                       		move.l	(a0)+,d0
00006234 21C0 F728                  		move.l	d0,($FFFFF728).w
00006238 21C0 F720                  		move.l	d0,($FFFFF720).w
0000623C 2018                       		move.l	(a0)+,d0
0000623E 21C0 F72C                  		move.l	d0,($FFFFF72C).w
00006242 21C0 F724                  		move.l	d0,($FFFFF724).w
00006246 3038 F728                  		move.w	($FFFFF728).w,d0
0000624A 0640 0240                  		addi.w	#$240,d0
0000624E 31C0 F732                  		move.w	d0,($FFFFF732).w
00006252 31FC 1010 F74A             		move.w	#$1010,($FFFFF74A).w
00006258 3018                       		move.w	(a0)+,d0
0000625A 31C0 F73E                  		move.w	d0,($FFFFF73E).w
0000625E 6000 0000                  		bra.w	LevSz_ChkLamp
00006262                            ; ===========================================================================
00006262                            ; ---------------------------------------------------------------------------
00006262                            ; Level size array and ending start location array
00006262                            ; ---------------------------------------------------------------------------
00006262                            LevelSizeArray:	incbin	misc\lvl_size.bin
000063B2                            		even
000063B2                            
000063B2                            EndingStLocArray:
000063B2                            		incbin	misc\sloc_end.bin
000063D2                            		even
000063D2                            
000063D2                            ; ===========================================================================
000063D2                            
000063D2                            LevSz_ChkLamp:				; XREF: LevelSizeLoad
000063D2 4A38 FE30                  		tst.b	($FFFFFE30).w	; have any lampposts been hit?
000063D6 6700                       		beq.s	LevSz_StartLoc	; if not, branch
000063D8 4EB9 0000 0000             		jsr	Obj79_LoadInfo
000063DE 3238 D008                  		move.w	($FFFFD008).w,d1
000063E2 3038 D00C                  		move.w	($FFFFD00C).w,d0
000063E6 6000                       		bra.s	loc_60D0
000063E8                            ; ===========================================================================
000063E8                            
000063E8                            LevSz_StartLoc:				; XREF: LevelSizeLoad
000063E8 3038 FE10                  		move.w	($FFFFFE10).w,d0
000063EC ED08                       		lsl.b	#6,d0
000063EE E848                       		lsr.w	#4,d0
000063F0 43FB 0000                  		lea	StartLocArray(pc,d0.w),a1 ; load Sonic's start location
000063F4 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000063F8 6A00                       		bpl.s	LevSz_SonicPos	; if not, branch
000063FA 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
000063FE 5340                       		subq.w	#1,d0
00006400 E548                       		lsl.w	#2,d0
00006402 43FB 00AE                  		lea	EndingStLocArray(pc,d0.w),a1 ; load Sonic's start location
00006406                            
00006406                            LevSz_SonicPos:
00006406 7200                       		moveq	#0,d1
00006408 3219                       		move.w	(a1)+,d1
0000640A 31C1 D008                  		move.w	d1,($FFFFD008).w ; set Sonic's position on x-axis
0000640E 7000                       		moveq	#0,d0
00006410 3011                       		move.w	(a1),d0
00006412 31C0 D00C                  		move.w	d0,($FFFFD00C).w ; set Sonic's position on y-axis
00006416                            
00006416                            loc_60D0:				; XREF: LevSz_ChkLamp
00006416 0441 00A0                  		subi.w	#$A0,d1
0000641A 6400                       		bcc.s	loc_60D8
0000641C 7200                       		moveq	#0,d1
0000641E                            
0000641E                            loc_60D8:
0000641E 3438 F72A                  		move.w	($FFFFF72A).w,d2
00006422 B242                       		cmp.w	d2,d1
00006424 6500                       		bcs.s	loc_60E2
00006426 3202                       		move.w	d2,d1
00006428                            
00006428                            loc_60E2:
00006428 31C1 F700                  		move.w	d1,($FFFFF700).w
0000642C 0440 0060                  		subi.w	#$60,d0
00006430 6400                       		bcc.s	loc_60EE
00006432 7000                       		moveq	#0,d0
00006434                            
00006434                            loc_60EE:
00006434 B078 F72E                  		cmp.w	($FFFFF72E).w,d0
00006438 6D00                       		blt.s	loc_60F8
0000643A 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000643E                            
0000643E                            loc_60F8:
0000643E 31C0 F704                  		move.w	d0,($FFFFF704).w
00006442 6100 0000                  		bsr.w	BgScrollSpeed
00006446 7000                       		moveq	#0,d0
00006448 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000644C E508                       		lsl.b	#2,d0
0000644E 21FB 0000 F7AC             		move.l	LoopTileNums(pc,d0.w),($FFFFF7AC).w
00006454 6000 0000                  		bra.w	LevSz_Unk
00006458                            ; ===========================================================================
00006458                            ; ---------------------------------------------------------------------------
00006458                            ; Sonic	start location array
00006458                            ; ---------------------------------------------------------------------------
00006458                            StartLocArray:	incbin	misc\sloc_lev.bin
000064C8                            		even
000064C8                            
000064C8                            ; ---------------------------------------------------------------------------
000064C8                            ; Which	256x256	tiles contain loops or roll-tunnels
000064C8                            ; ---------------------------------------------------------------------------
000064C8                            ; Format - 4 bytes per zone, referring to which 256x256 evoke special events:
000064C8                            ; loop,	loop, tunnel, tunnel
000064C8                            ; ---------------------------------------------------------------------------
000064C8                            LoopTileNums:	incbin	misc\loopnums.bin
000064E4                            		even
000064E4                            
000064E4                            ; ===========================================================================
000064E4                            
000064E4                            LevSz_Unk:				; XREF: LevelSizeLoad
000064E4 7000                       		moveq	#0,d0
000064E6 1038 FE10                  		move.b	($FFFFFE10).w,d0
000064EA E748                       		lsl.w	#3,d0
000064EC 43FB 0000                  		lea	dword_61B4(pc,d0.w),a1
000064F0 45F8 F7F0                  		lea	($FFFFF7F0).w,a2
000064F4 24D9                       		move.l	(a1)+,(a2)+
000064F6 24D9                       		move.l	(a1)+,(a2)+
000064F8 4E75                       		rts	
000064FA                            ; End of function LevelSizeLoad
000064FA                            
000064FA                            ; ===========================================================================
000064FA 0070 0100 0100 0100        dword_61B4:	dc.l $700100, $1000100
00006502 0800 0100 0100 0000        		dc.l $8000100, $1000000
0000650A 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006512 0800 0100 0100 0000        		dc.l $8000100, $1000000
0000651A 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006522 0800 0100 0100 0000        		dc.l $8000100, $1000000
0000652A 0070 0100 0100 0100        		dc.l $700100, $1000100
00006532                            
00006532                            ; ---------------------------------------------------------------------------
00006532                            ; Subroutine to	set scroll speed of some backgrounds
00006532                            ; ---------------------------------------------------------------------------
00006532                            
00006532                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006532                            
00006532                            
00006532                            BgScrollSpeed:				; XREF: LevelSizeLoad
00006532 4A38 FE30                  		tst.b	($FFFFFE30).w
00006536 6600                       		bne.s	loc_6206
00006538 31C0 F70C                  		move.w	d0,($FFFFF70C).w
0000653C 31C0 F714                  		move.w	d0,($FFFFF714).w
00006540 31C1 F708                  		move.w	d1,($FFFFF708).w
00006544 31C1 F710                  		move.w	d1,($FFFFF710).w
00006548 31C1 F718                  		move.w	d1,($FFFFF718).w
0000654C                            
0000654C                            loc_6206:
0000654C 7400                       		moveq	#0,d2
0000654E 1438 FE10                  		move.b	($FFFFFE10).w,d2
00006552 D442                       		add.w	d2,d2
00006554 343B 2000                  		move.w	BgScroll_Index(pc,d2.w),d2
00006558 4EFB 2000                  		jmp	BgScroll_Index(pc,d2.w)
0000655C                            ; End of function BgScrollSpeed
0000655C                            
0000655C                            ; ===========================================================================
0000655C 0000 0000                  BgScroll_Index:	dc.w BgScroll_GHZ-BgScroll_Index, BgScroll_LZ-BgScroll_Index
00006560 0000 0000                  		dc.w BgScroll_MZ-BgScroll_Index, BgScroll_SLZ-BgScroll_Index
00006564 0000 0000                  		dc.w BgScroll_SYZ-BgScroll_Index, BgScroll_SBZ-BgScroll_Index
00006568 0000                       		dc.w BgScroll_End-BgScroll_Index
0000656A                            ; ===========================================================================
0000656A                            
0000656A                            BgScroll_GHZ:				; XREF: BgScroll_Index
0000656A 6000 0000                  		bra.w	Deform_GHZ
0000656E                            ; ===========================================================================
0000656E                            
0000656E                            BgScroll_LZ:				; XREF: BgScroll_Index
0000656E E280                       		asr.l	#1,d0
00006570 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006574 4E75                       		rts	
00006576                            ; ===========================================================================
00006576                            
00006576                            BgScroll_MZ:				; XREF: BgScroll_Index
00006576 4E75                       		rts	
00006578                            ; ===========================================================================
00006578                            
00006578                            BgScroll_SLZ:				; XREF: BgScroll_Index
00006578 E280                       		asr.l	#1,d0
0000657A 0640 00C0                  		addi.w	#$C0,d0
0000657E 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006582 4E75                       		rts	
00006584                            ; ===========================================================================
00006584                            
00006584                            BgScroll_SYZ:				; XREF: BgScroll_Index
00006584 E980                       		asl.l	#4,d0
00006586 2400                       		move.l	d0,d2
00006588 E380                       		asl.l	#1,d0
0000658A D082                       		add.l	d2,d0
0000658C E080                       		asr.l	#8,d0
0000658E 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006592 31C0 F714                  		move.w	d0,($FFFFF714).w
00006596 4E75                       		rts	
00006598                            ; ===========================================================================
00006598                            
00006598                            BgScroll_SBZ:				; XREF: BgScroll_Index
00006598 E980                       		asl.l	#4,d0
0000659A E380                       		asl.l	#1,d0
0000659C E080                       		asr.l	#8,d0
0000659E 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000065A2 4E75                       		rts	
000065A4                            ; ===========================================================================
000065A4                            
000065A4                            BgScroll_End:				; XREF: BgScroll_Index
000065A4 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
000065AA 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
000065B0 4E75                       		rts	
000065B2                            ; ===========================================================================
000065B2 31FC 00A8 F708             		move.w	#$A8,($FFFFF708).w
000065B8 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
000065BE 31FC FFC0 F710             		move.w	#-$40,($FFFFF710).w
000065C4 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
000065CA 4E75                       		rts
000065CC                            
000065CC                            ; ---------------------------------------------------------------------------
000065CC                            ; Background layer deformation subroutines
000065CC                            ; ---------------------------------------------------------------------------
000065CC                            
000065CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000065CC                            
000065CC                            
000065CC                            DeformBgLayer:				; XREF: TitleScreen; Level; EndingSequence
000065CC 4A38 F744                  		tst.b	($FFFFF744).w
000065D0 6700                       		beq.s	loc_628E
000065D2 4E75                       		rts	
000065D4                            ; ===========================================================================
000065D4                            
000065D4                            loc_628E:
000065D4 4278 F754                  		clr.w	($FFFFF754).w
000065D8 4278 F756                  		clr.w	($FFFFF756).w
000065DC 4278 F758                  		clr.w	($FFFFF758).w
000065E0 4278 F75A                  		clr.w	($FFFFF75A).w
000065E4 6100 0000                  		bsr.w	ScrollHoriz
000065E8 6100 0000                  		bsr.w	ScrollVertical
000065EC 6100 0000                  		bsr.w	DynScrResizeLoad
000065F0 31F8 F700 F61A             		move.w	($FFFFF700).w,($FFFFF61A).w
000065F6 31F8 F704 F616             		move.w	($FFFFF704).w,($FFFFF616).w
000065FC 31F8 F708 F61C             		move.w	($FFFFF708).w,($FFFFF61C).w
00006602 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006608 31F8 F718 F620             		move.w	($FFFFF718).w,($FFFFF620).w
0000660E 31F8 F71C F61E             		move.w	($FFFFF71C).w,($FFFFF61E).w
00006614 7000                       		moveq	#0,d0
00006616 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000661A D040                       		add.w	d0,d0
0000661C 303B 0000                  		move.w	Deform_Index(pc,d0.w),d0
00006620 4EFB 0000                  		jmp	Deform_Index(pc,d0.w)
00006624                            ; End of function DeformBgLayer
00006624                            
00006624                            ; ===========================================================================
00006624                            ; ---------------------------------------------------------------------------
00006624                            ; Offset index for background layer deformation	code
00006624                            ; ---------------------------------------------------------------------------
00006624 0000 0000                  Deform_Index:	dc.w Deform_GHZ-Deform_Index, Deform_LZ-Deform_Index
00006628 0000 0000                  		dc.w Deform_MZ-Deform_Index, Deform_SLZ-Deform_Index
0000662C 0000 0000                  		dc.w Deform_SYZ-Deform_Index, Deform_SBZ-Deform_Index
00006630 0000                       		dc.w Deform_GHZ-Deform_Index
00006632                            ; ---------------------------------------------------------------------------
00006632                            ; Green	Hill Zone background layer deformation code
00006632                            ; ---------------------------------------------------------------------------
00006632                            
00006632                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006632                            
00006632                            
00006632                            Deform_GHZ:				; XREF: Deform_Index
00006632 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006636 48C4                       		ext.l	d4
00006638 EB84                       		asl.l	#5,d4
0000663A 2204                       		move.l	d4,d1
0000663C E384                       		asl.l	#1,d4
0000663E D881                       		add.l	d1,d4
00006640 7A00                       		moveq	#0,d5
00006642 6100 0000                  		bsr.w	ScrollBlock1
00006646 6100 0000                  		bsr.w	ScrollBlock4
0000664A 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000664E 3038 F704                  		move.w	($FFFFF704).w,d0
00006652 0240 07FF                  		andi.w	#$7FF,d0
00006656 EA48                       		lsr.w	#5,d0
00006658 4440                       		neg.w	d0
0000665A 0640 0026                  		addi.w	#$26,d0
0000665E 31C0 F714                  		move.w	d0,($FFFFF714).w
00006662 3800                       		move.w	d0,d4
00006664 6100 0000                  		bsr.w	ScrollBlock3
00006668 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
0000666E 323C 006F                  		move.w	#$6F,d1
00006672 9244                       		sub.w	d4,d1
00006674 3038 F700                  		move.w	($FFFFF700).w,d0
00006678 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w
0000667E 6600                       		bne.s	loc_633C
00006680 7000                       		moveq	#0,d0
00006682                            
00006682                            loc_633C:
00006682 4440                       		neg.w	d0
00006684 4840                       		swap	d0
00006686 3038 F708                  		move.w	($FFFFF708).w,d0
0000668A 4440                       		neg.w	d0
0000668C                            
0000668C                            loc_6346:
0000668C 22C0                       		move.l	d0,(a1)+
0000668E 51C9 FFFC                  		dbf	d1,loc_6346
00006692 323C 0027                  		move.w	#$27,d1
00006696 3038 F710                  		move.w	($FFFFF710).w,d0
0000669A 4440                       		neg.w	d0
0000669C                            
0000669C                            loc_6356:
0000669C 22C0                       		move.l	d0,(a1)+
0000669E 51C9 FFFC                  		dbf	d1,loc_6356
000066A2 3038 F710                  		move.w	($FFFFF710).w,d0
000066A6 0640 0000                  		addi.w	#0,d0
000066AA 3438 F700                  		move.w	($FFFFF700).w,d2
000066AE 0642 FE00                  		addi.w	#-$200,d2
000066B2 9440                       		sub.w	d0,d2
000066B4 48C2                       		ext.l	d2
000066B6 E182                       		asl.l	#8,d2
000066B8 85FC 0068                  		divs.w	#$68,d2
000066BC 48C2                       		ext.l	d2
000066BE E182                       		asl.l	#8,d2
000066C0 7600                       		moveq	#0,d3
000066C2 3600                       		move.w	d0,d3
000066C4 323C 0047                  		move.w	#$47,d1
000066C8 D244                       		add.w	d4,d1
000066CA                            
000066CA                            loc_6384:
000066CA 3003                       		move.w	d3,d0
000066CC 4440                       		neg.w	d0
000066CE 22C0                       		move.l	d0,(a1)+
000066D0 4843                       		swap	d3
000066D2 D682                       		add.l	d2,d3
000066D4 4843                       		swap	d3
000066D6 51C9 FFF2                  		dbf	d1,loc_6384
000066DA 4E75                       		rts	
000066DC                            ; End of function Deform_GHZ
000066DC                            
000066DC                            ; ---------------------------------------------------------------------------
000066DC                            ; Labyrinth Zone background layer deformation code
000066DC                            ; ---------------------------------------------------------------------------
000066DC                            
000066DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000066DC                            
000066DC                            
000066DC                            Deform_LZ:				; XREF: Deform_Index
000066DC 3838 F73A                  		move.w	($FFFFF73A).w,d4
000066E0 48C4                       		ext.l	d4
000066E2 EF84                       		asl.l	#7,d4
000066E4 3A38 F73C                  		move.w	($FFFFF73C).w,d5
000066E8 48C5                       		ext.l	d5
000066EA EF85                       		asl.l	#7,d5
000066EC 6100 0000                  		bsr.w	ScrollBlock1
000066F0 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000066F6 43F8 CC00                  		lea	($FFFFCC00).w,a1
000066FA 323C 00DF                  		move.w	#$DF,d1
000066FE 3038 F700                  		move.w	($FFFFF700).w,d0
00006702 4440                       		neg.w	d0
00006704 4840                       		swap	d0
00006706 3038 F708                  		move.w	($FFFFF708).w,d0
0000670A 4440                       		neg.w	d0
0000670C                            
0000670C                            loc_63C6:
0000670C 22C0                       		move.l	d0,(a1)+
0000670E 51C9 FFFC                  		dbf	d1,loc_63C6
00006712 3038 F646                  		move.w	($FFFFF646).w,d0
00006716 9078 F704                  		sub.w	($FFFFF704).w,d0
0000671A 4E75                       		rts	
0000671C                            ; End of function Deform_LZ
0000671C                            
0000671C                            ; ---------------------------------------------------------------------------
0000671C                            ; Marble Zone background layer deformation code
0000671C                            ; ---------------------------------------------------------------------------
0000671C                            
0000671C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000671C                            
0000671C                            
0000671C                            Deform_MZ:				; XREF: Deform_Index
0000671C 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006720 48C4                       		ext.l	d4
00006722 ED84                       		asl.l	#6,d4
00006724 2204                       		move.l	d4,d1
00006726 E384                       		asl.l	#1,d4
00006728 D881                       		add.l	d1,d4
0000672A 7A00                       		moveq	#0,d5
0000672C 6100 0000                  		bsr.w	ScrollBlock1
00006730 303C 0200                  		move.w	#$200,d0
00006734 3238 F704                  		move.w	($FFFFF704).w,d1
00006738 0441 01C8                  		subi.w	#$1C8,d1
0000673C 6500                       		bcs.s	loc_6402
0000673E 3401                       		move.w	d1,d2
00006740 D241                       		add.w	d1,d1
00006742 D242                       		add.w	d2,d1
00006744 E441                       		asr.w	#2,d1
00006746 D041                       		add.w	d1,d0
00006748                            
00006748                            loc_6402:
00006748 31C0 F714                  		move.w	d0,($FFFFF714).w
0000674C 6100 0000                  		bsr.w	ScrollBlock3
00006750 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006756 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000675A 323C 00DF                  		move.w	#$DF,d1
0000675E 3038 F700                  		move.w	($FFFFF700).w,d0
00006762 4440                       		neg.w	d0
00006764 4840                       		swap	d0
00006766 3038 F708                  		move.w	($FFFFF708).w,d0
0000676A 4440                       		neg.w	d0
0000676C                            
0000676C                            loc_6426:
0000676C 22C0                       		move.l	d0,(a1)+
0000676E 51C9 FFFC                  		dbf	d1,loc_6426
00006772 4E75                       		rts	
00006774                            ; End of function Deform_MZ
00006774                            
00006774                            ; ---------------------------------------------------------------------------
00006774                            ; Star Light Zone background layer deformation code
00006774                            ; ---------------------------------------------------------------------------
00006774                            
00006774                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006774                            
00006774                            
00006774                            Deform_SLZ:				; XREF: Deform_Index
00006774 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006778 48C4                       		ext.l	d4
0000677A EB84                       		asl.l	#5,d4
0000677C 2204                       		move.l	d4,d1
0000677E E384                       		asl.l	#1,d4
00006780 D881                       		add.l	d1,d4
00006782 7A00                       		moveq	#0,d5
00006784 6100 0000                  		bsr.w	ScrollBlock1
00006788 6100 0000                  		bsr.w	ScrollBlock3
0000678C 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006790                            	;	move.w	($FFFFF704).w,d0
00006790                            	;	andi.w	#$7FF,d0
00006790 EA48                       		lsr.w	#5,d0
00006792 4440                       		neg.w	d0
00006794 0640 0026                  		addi.w	#$26,d0
00006798 31C0 F714                  		move.w	d0,($FFFFF714).w
0000679C 3800                       		move.w	d0,d4
0000679E                            	;	bsr.w	ScrollBlock3
0000679E 31FC FFFA F70C                     move.w #-$6,($FFFFF70C).w ; lock the background vertically in place
000067A4 43F8 CC00                  		lea	($FFFFCC00).w,a1	; load beginning address of horizontal scroll buffer to a1
000067A8                            
000067A8 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000067AC 4440                       		neg.w	d0			; negate (positive to negative)
000067AE 4840                       		swap	d0			; send to the left side of d0
000067B0 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000067B4 45F8 A800                  		lea	($FFFFA800).w,a2
000067B8 069A 0000 5000             		addi.l	#$5000,(a2)+
000067BE 069A 0000 C000             		addi.l	#$C000,(a2)+
000067C4 3038 A800                  		move.w	($FFFFA800).w,d0
000067C8 4440                       		neg.w	d0			; negate (positive to negative)
000067CA E240                       		asr.w	#1,d0			; divide by 2 (Slow down the scroll position)
000067CC 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000067D0                            slz_DeformLoop_1:
000067D0 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000067D2 51C9 FFFC                  		dbf	d1,slz_DeformLoop_1	; repeat d1 number of scanlines
000067D6                            
000067D6 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000067DA 4440                       		neg.w	d0			; negate (positive to negative)
000067DC 4840                       		swap	d0			; send to the left side of d0
000067DE 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000067E2 45F8 A800                  		lea	($FFFFA800).w,a2
000067E6 069A 0000 5000             		addi.l	#$5000,(a2)+
000067EC 069A 0000 C000             		addi.l	#$C000,(a2)+
000067F2 3038 A800                  		move.w	($FFFFA800).w,d0
000067F6 4440                       		neg.w	d0			; negate (positive to negative)
000067F8 E440                       		asr.w	#2,d0			; divide by 4 (Slow down the scroll position)
000067FA 323C 001A                  		move.w	#27-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000067FE                            slz_DeformLoop_2:
000067FE 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006800 51C9 FFFC                  		dbf	d1,slz_DeformLoop_2	; repeat d1 number of scanlines
00006804                            
00006804 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006808 4440                       		neg.w	d0			; negate (positive to negative)
0000680A 4840                       		swap	d0			; send to the left side of d0
0000680C 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006810 45F8 A800                  		lea	($FFFFA800).w,a2
00006814 069A 0000 5000             		addi.l	#$5000,(a2)+
0000681A 069A 0000 C000             		addi.l	#$C000,(a2)+
00006820 3038 A800                  		move.w	($FFFFA800).w,d0
00006824 4440                       		neg.w	d0			; negate (positive to negative)
00006826 E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
00006828 323C 0011                  		move.w	#18-1,d1		; set number of scan lines to dump (minus 1 for dbf)
0000682C                            slz_DeformLoop_3:
0000682C 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
0000682E 51C9 FFFC                  		dbf	d1,slz_DeformLoop_3	; repeat d1 number of scanlines
00006832                            
00006832 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006836 4440                       		neg.w	d0			; negate (positive to negative)
00006838 4840                       		swap	d0			; send to the left side of d0
0000683A 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
0000683E 45F8 A800                  		lea	($FFFFA800).w,a2
00006842 069A 0000 5000             		addi.l	#$5000,(a2)+
00006848 069A 0000 C000             		addi.l	#$C000,(a2)+
0000684E 3038 A800                  		move.w	($FFFFA800).w,d0
00006852 4440                       		neg.w	d0			; negate (positive to negative)
00006854 E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
00006856 323C 0009                  		move.w	#10-1,d1		; set number of scan lines to dump (minus 1 for dbf)
0000685A                            slz_DeformLoop_4:
0000685A 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
0000685C 51C9 FFFC                  		dbf	d1,slz_DeformLoop_4	; repeat d1 number of scanlines
00006860                            
00006860 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006864 4440                       		neg.w	d0			; negate (positive to negative)
00006866 4840                       		swap	d0			; send to the left side of d0
00006868 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
0000686C 45F8 A800                  		lea	($FFFFA800).w,a2
00006870 069A 0000 5000             		addi.l	#$5000,(a2)+
00006876 069A 0000 C000             		addi.l	#$C000,(a2)+
0000687C 3038 A800                  		move.w	($FFFFA800).w,d0
00006880 4440                       		neg.w	d0			; negate (positive to negative)
00006882 E840                       		asr.w	#4,d0			; divide by 16 (Slow down the scroll position)
00006884 323C 000F                  		move.w	#16-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006888                            slz_DeformLoop_5:
00006888 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
0000688A 51C9 FFFC                  		dbf	d1,slz_DeformLoop_5	; repeat d1 number of scanlines
0000688E                            
0000688E 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006892 4440                       		neg.w	d0			; negate (positive to negative)
00006894 4840                       		swap	d0			; send to the left side of d0
00006896 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
0000689A 4440                       		neg.w	d0			; negate (positive to negative)
0000689C EA40                       		asr.w	#5,d0			; divide by 32 (Slow down the scroll position)
0000689E 323C 001C                  		move.w	#29-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000068A2                            slz_DeformLoop_6:
000068A2 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000068A4 51C9 FFFC                  		dbf	d1,slz_DeformLoop_6	; repeat d1 number of scanlines
000068A8                            
000068A8 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000068AC 4440                       		neg.w	d0			; negate (positive to negative)
000068AE 4840                       		swap	d0			; send to the left side of d0
000068B0 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000068B4 4440                       		neg.w	d0			; negate (positive to negative)
000068B6 EE40                       		asr.w	#7,d0			; divide by 128 (Slow down the scroll position)
000068B8 323C 0005                  		move.w	#6-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000068BC                            slz_DeformLoop_7:
000068BC 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000068BE 51C9 FFFC                  		dbf	d1,slz_DeformLoop_7	; repeat d1 number of scanlines
000068C2                            
000068C2 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000068C6 4440                       		neg.w	d0			; negate (positive to negative)
000068C8 4840                       		swap	d0			; send to the left side of d0
000068CA 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000068CE 4440                       		neg.w	d0			; negate (positive to negative)
000068D0 EC40                       		asr.w	#6,d0			; divide by 64 (Slow down the scroll position)
000068D2 323C 0004                  		move.w	#5-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000068D6                            slz_DeformLoop_8:
000068D6 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000068D8 51C9 FFFC                  		dbf	d1,slz_DeformLoop_8	; repeat d1 number of scanlines
000068DC                            
000068DC 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000068E0 4440                       		neg.w	d0			; negate (positive to negative)
000068E2 4840                       		swap	d0			; send to the left side of d0
000068E4 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000068E8 4440                       		neg.w	d0			; negate (positive to negative)
000068EA EA40                       		asr.w	#5,d0			; divide by 32 (Slow down the scroll position)
000068EC 323C 0007                  		move.w	#8-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000068F0                            slz_DeformLoop_9:
000068F0 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000068F2 51C9 FFFC                  		dbf	d1,slz_DeformLoop_9	; repeat d1 number of scanlines
000068F6                            
000068F6 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000068FA 4440                       		neg.w	d0			; negate (positive to negative)
000068FC 4840                       		swap	d0			; send to the left side of d0
000068FE 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006902 4440                       		neg.w	d0			; negate (positive to negative)
00006904 E840                       		asr.w	#4,d0			; divide by 16 (Slow down the scroll position)
00006906 323C 0006                  		move.w	#7-1,d1		; set number of scan lines to dump (minus 1 for dbf)
0000690A                            slz_DeformLoop_10:
0000690A 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
0000690C 51C9 FFFC                  		dbf	d1,slz_DeformLoop_10	; repeat d1 number of scanlines
00006910                            
00006910 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006914 4440                       		neg.w	d0			; negate (positive to negative)
00006916 4840                       		swap	d0			; send to the left side of d0
00006918 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
0000691C 4440                       		neg.w	d0			; negate (positive to negative)
0000691E E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
00006920 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006924                            slz_DeformLoop_11:
00006924 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006926 51C9 FFFC                  		dbf	d1,slz_DeformLoop_11	; repeat d1 number of scanlines
0000692A                            
0000692A 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
0000692E 4440                       		neg.w	d0			; negate (positive to negative)
00006930 4840                       		swap	d0			; send to the left side of d0
00006932 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006936 4440                       		neg.w	d0			; negate (positive to negative)
00006938 E440                       		asr.w	#2,d0			; divide by 4 (Slow down the scroll position)
0000693A 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
0000693E                            slz_DeformLoop_12:
0000693E 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006940 51C9 FFFC                  		dbf	d1,slz_DeformLoop_12	; repeat d1 number of scanlines
00006944                            
00006944 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006948 4440                       		neg.w	d0			; negate (positive to negative)
0000694A 4840                       		swap	d0			; send to the left side of d0
0000694C 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006950 4440                       		neg.w	d0			; negate (positive to negative)
00006952 E240                       		asr.w	#1,d0			; divide by 2 (Slow down the scroll position)
00006954 323C 0031                  		move.w	#50-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006958                            slz_DeformLoop_13:
00006958 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
0000695A 51C9 FFFC                  		dbf	d1,slz_DeformLoop_13	; repeat d1 number of scanlines
0000695E 4E75                       		rts	
00006960                            ; End of function Deform_SLZ
00006960 4E75                       		rts	
00006962                            ; End of function Deform_SLZ_2
00006962                            
00006962                            ; ---------------------------------------------------------------------------
00006962                            ; Spring Yard Zone background layer deformation	code
00006962                            ; ---------------------------------------------------------------------------
00006962                            
00006962                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006962                            
00006962                            
00006962                            Deform_SYZ:				; XREF: Deform_Index
00006962 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006966 48C4                       		ext.l	d4
00006968 ED84                       		asl.l	#6,d4
0000696A 3A38 F73C                  		move.w	($FFFFF73C).w,d5
0000696E 48C5                       		ext.l	d5
00006970 E985                       		asl.l	#4,d5
00006972 2205                       		move.l	d5,d1
00006974 E385                       		asl.l	#1,d5
00006976 DA81                       		add.l	d1,d5
00006978 6100 0000                  		bsr.w	ScrollBlock1
0000697C 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006982 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006986 323C 00DF                  		move.w	#$DF,d1
0000698A 3038 F700                  		move.w	($FFFFF700).w,d0
0000698E 4440                       		neg.w	d0
00006990 4840                       		swap	d0
00006992 3038 F708                  		move.w	($FFFFF708).w,d0
00006996 4440                       		neg.w	d0
00006998                            
00006998                            loc_653C:
00006998 22C0                       		move.l	d0,(a1)+
0000699A 51C9 FFFC                  		dbf	d1,loc_653C
0000699E 4E75                       		rts	
000069A0                            ; End of function Deform_SYZ
000069A0                            
000069A0                            ; ---------------------------------------------------------------------------
000069A0                            ; Scrap	Brain Zone background layer deformation	code
000069A0                            ; ---------------------------------------------------------------------------
000069A0                            
000069A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000069A0                            
000069A0                            
000069A0                            Deform_SBZ:				; XREF: Deform_Index
000069A0 3838 F73A                  		move.w	($FFFFF73A).w,d4
000069A4 48C4                       		ext.l	d4
000069A6 ED84                       		asl.l	#6,d4
000069A8 3A38 F73C                  		move.w	($FFFFF73C).w,d5
000069AC 48C5                       		ext.l	d5
000069AE E985                       		asl.l	#4,d5
000069B0 E385                       		asl.l	#1,d5
000069B2 6100 0000                  		bsr.w	ScrollBlock1
000069B6 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000069BC 43F8 CC00                  		lea	($FFFFCC00).w,a1
000069C0 323C 00DF                  		move.w	#$DF,d1
000069C4 3038 F700                  		move.w	($FFFFF700).w,d0
000069C8 4440                       		neg.w	d0
000069CA 4840                       		swap	d0
000069CC 3038 F708                  		move.w	($FFFFF708).w,d0
000069D0 4440                       		neg.w	d0
000069D2                            
000069D2                            loc_6576:
000069D2 22C0                       		move.l	d0,(a1)+
000069D4 51C9 FFFC                  		dbf	d1,loc_6576
000069D8 4E75                       		rts	
000069DA                            ; End of function Deform_SBZ
000069DA                            
000069DA                            ; ---------------------------------------------------------------------------
000069DA                            ; Subroutine to	scroll the level horizontally as Sonic moves
000069DA                            ; ---------------------------------------------------------------------------
000069DA                            
000069DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000069DA                            
000069DA                            
000069DA                            ScrollHoriz:				; XREF: DeformBgLayer
000069DA 3838 F700                  		move.w	($FFFFF700).w,d4
000069DE 6100                       		bsr.s	ScrollHoriz2
000069E0 3038 F700                  		move.w	($FFFFF700).w,d0
000069E4 0240 0010                  		andi.w	#$10,d0
000069E8 1238 F74A                  		move.b	($FFFFF74A).w,d1
000069EC B300                       		eor.b	d1,d0
000069EE 6600                       		bne.s	locret_65B0
000069F0 0A38 0010 F74A             		eori.b	#$10,($FFFFF74A).w
000069F6 3038 F700                  		move.w	($FFFFF700).w,d0
000069FA 9044                       		sub.w	d4,d0
000069FC 6A00                       		bpl.s	loc_65AA
000069FE 08F8 0002 F754             		bset	#2,($FFFFF754).w
00006A04 4E75                       		rts	
00006A06                            ; ===========================================================================
00006A06                            
00006A06                            loc_65AA:
00006A06 08F8 0003 F754             		bset	#3,($FFFFF754).w
00006A0C                            
00006A0C                            locret_65B0:
00006A0C 4E75                       		rts	
00006A0E                            ; End of function ScrollHoriz
00006A0E                            
00006A0E                            
00006A0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006A0E                            
00006A0E                            
00006A0E                            ScrollHoriz2:				; XREF: ScrollHoriz
00006A0E 3038 D008                  		move.w	($FFFFD008).w,d0
00006A12 9078 F700                  		sub.w	($FFFFF700).w,d0
00006A16 0440 0090                  		subi.w	#$90,d0
00006A1A 6500                       		bcs.s	loc_65F6
00006A1C 0440 0010                  		subi.w	#$10,d0
00006A20 6400                       		bcc.s	loc_65CC
00006A22 4278 F73A                  		clr.w	($FFFFF73A).w
00006A26 4E75                       		rts	
00006A28                            ; ===========================================================================
00006A28                            
00006A28                            loc_65CC:
00006A28 0C40 0010                  		cmpi.w	#$10,d0
00006A2C 6500                       		bcs.s	loc_65D6
00006A2E 303C 0010                  		move.w	#$10,d0
00006A32                            
00006A32                            loc_65D6:
00006A32 D078 F700                  		add.w	($FFFFF700).w,d0
00006A36 B078 F72A                  		cmp.w	($FFFFF72A).w,d0
00006A3A 6D00                       		blt.s	loc_65E4
00006A3C 3038 F72A                  		move.w	($FFFFF72A).w,d0
00006A40                            
00006A40                            loc_65E4:
00006A40 3200                       		move.w	d0,d1
00006A42 9278 F700                  		sub.w	($FFFFF700).w,d1
00006A46 E141                       		asl.w	#8,d1
00006A48 31C0 F700                  		move.w	d0,($FFFFF700).w
00006A4C 31C1 F73A                  		move.w	d1,($FFFFF73A).w
00006A50 4E75                       		rts	
00006A52                            ; ===========================================================================
00006A52                            
00006A52                            loc_65F6:				; XREF: ScrollHoriz2
00006A52 D078 F700                  		add.w	($FFFFF700).w,d0
00006A56 B078 F728                  		cmp.w	($FFFFF728).w,d0
00006A5A 6EE4                       		bgt.s	loc_65E4
00006A5C 3038 F728                  		move.w	($FFFFF728).w,d0
00006A60 60DE                       		bra.s	loc_65E4
00006A62                            ; End of function ScrollHoriz2
00006A62                            
00006A62                            ; ===========================================================================
00006A62 4A40                       		tst.w	d0
00006A64 6A00                       		bpl.s	loc_6610
00006A66 303C FFFE                  		move.w	#-2,d0
00006A6A 60E6                       		bra.s	loc_65F6
00006A6C                            ; ===========================================================================
00006A6C                            
00006A6C                            loc_6610:
00006A6C 303C 0002                  		move.w	#2,d0
00006A70 60B6                       		bra.s	loc_65CC
00006A72                            
00006A72                            ; ---------------------------------------------------------------------------
00006A72                            ; Subroutine to	scroll the level vertically as Sonic moves
00006A72                            ; ---------------------------------------------------------------------------
00006A72                            
00006A72                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006A72                            
00006A72                            
00006A72                            ScrollVertical:				; XREF: DeformBgLayer
00006A72 7200                       		moveq	#0,d1
00006A74 3038 D00C                  		move.w	($FFFFD00C).w,d0
00006A78 9078 F704                  		sub.w	($FFFFF704).w,d0
00006A7C 0838 0002 D022             		btst	#2,($FFFFD022).w
00006A82 6700                       		beq.s	loc_662A
00006A84 5B40                       		subq.w	#5,d0
00006A86                            
00006A86                            loc_662A:
00006A86 0838 0001 D022             		btst	#1,($FFFFD022).w
00006A8C 6700                       		beq.s	loc_664A
00006A8E 0640 0020                  		addi.w	#$20,d0
00006A92 9078 F73E                  		sub.w	($FFFFF73E).w,d0
00006A96 6500                       		bcs.s	loc_6696
00006A98 0440 0040                  		subi.w	#$40,d0
00006A9C 6400                       		bcc.s	loc_6696
00006A9E 4A38 F75C                  		tst.b	($FFFFF75C).w
00006AA2 6600                       		bne.s	loc_66A8
00006AA4 6000                       		bra.s	loc_6656
00006AA6                            ; ===========================================================================
00006AA6                            
00006AA6                            loc_664A:
00006AA6 9078 F73E                  		sub.w	($FFFFF73E).w,d0
00006AAA 6600                       		bne.s	loc_665C
00006AAC 4A38 F75C                  		tst.b	($FFFFF75C).w
00006AB0 6600                       		bne.s	loc_66A8
00006AB2                            
00006AB2                            loc_6656:
00006AB2 4278 F73C                  		clr.w	($FFFFF73C).w
00006AB6 4E75                       		rts	
00006AB8                            ; ===========================================================================
00006AB8                            
00006AB8                            loc_665C:
00006AB8 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
00006ABE 6600                       		bne.s	loc_6684
00006AC0 3238 D014                  		move.w	($FFFFD014).w,d1
00006AC4 6A00                       		bpl.s	loc_666C
00006AC6 4441                       		neg.w	d1
00006AC8                            
00006AC8                            loc_666C:
00006AC8 0C41 0800                  		cmpi.w	#$800,d1
00006ACC 6400                       		bcc.s	loc_6696
00006ACE 323C 0600                  		move.w	#$600,d1
00006AD2 0C40 0006                  		cmpi.w	#6,d0
00006AD6 6E00                       		bgt.s	loc_66F6
00006AD8 0C40 FFFA                  		cmpi.w	#-6,d0
00006ADC 6D00                       		blt.s	loc_66C0
00006ADE 6000                       		bra.s	loc_66AE
00006AE0                            ; ===========================================================================
00006AE0                            
00006AE0                            loc_6684:
00006AE0 323C 0200                  		move.w	#$200,d1
00006AE4 0C40 0002                  		cmpi.w	#2,d0
00006AE8 6E00                       		bgt.s	loc_66F6
00006AEA 0C40 FFFE                  		cmpi.w	#-2,d0
00006AEE 6D00                       		blt.s	loc_66C0
00006AF0 6000                       		bra.s	loc_66AE
00006AF2                            ; ===========================================================================
00006AF2                            
00006AF2                            loc_6696:
00006AF2 323C 1000                  		move.w	#$1000,d1
00006AF6 0C40 0010                  		cmpi.w	#$10,d0
00006AFA 6E00                       		bgt.s	loc_66F6
00006AFC 0C40 FFF0                  		cmpi.w	#-$10,d0
00006B00 6D00                       		blt.s	loc_66C0
00006B02 6000                       		bra.s	loc_66AE
00006B04                            ; ===========================================================================
00006B04                            
00006B04                            loc_66A8:
00006B04 7000                       		moveq	#0,d0
00006B06 11C0 F75C                  		move.b	d0,($FFFFF75C).w
00006B0A                            
00006B0A                            loc_66AE:
00006B0A 7200                       		moveq	#0,d1
00006B0C 3200                       		move.w	d0,d1
00006B0E D278 F704                  		add.w	($FFFFF704).w,d1
00006B12 4A40                       		tst.w	d0
00006B14 6A00 0000                  		bpl.w	loc_6700
00006B18 6000 0000                  		bra.w	loc_66CC
00006B1C                            ; ===========================================================================
00006B1C                            
00006B1C                            loc_66C0:
00006B1C 4441                       		neg.w	d1
00006B1E 48C1                       		ext.l	d1
00006B20 E181                       		asl.l	#8,d1
00006B22 D2B8 F704                  		add.l	($FFFFF704).w,d1
00006B26 4841                       		swap	d1
00006B28                            
00006B28                            loc_66CC:
00006B28 B278 F72C                  		cmp.w	($FFFFF72C).w,d1
00006B2C 6E00                       		bgt.s	loc_6724
00006B2E 0C41 FF00                  		cmpi.w	#-$100,d1
00006B32 6E00                       		bgt.s	loc_66F0
00006B34 0241 07FF                  		andi.w	#$7FF,d1
00006B38 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00006B3E 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
00006B44 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
00006B4A 6000                       		bra.s	loc_6724
00006B4C                            ; ===========================================================================
00006B4C                            
00006B4C                            loc_66F0:
00006B4C 3238 F72C                  		move.w	($FFFFF72C).w,d1
00006B50 6000                       		bra.s	loc_6724
00006B52                            ; ===========================================================================
00006B52                            
00006B52                            loc_66F6:
00006B52 48C1                       		ext.l	d1
00006B54 E181                       		asl.l	#8,d1
00006B56 D2B8 F704                  		add.l	($FFFFF704).w,d1
00006B5A 4841                       		swap	d1
00006B5C                            
00006B5C                            loc_6700:
00006B5C B278 F72E                  		cmp.w	($FFFFF72E).w,d1
00006B60 6D00                       		blt.s	loc_6724
00006B62 0441 0800                  		subi.w	#$800,d1
00006B66 6500                       		bcs.s	loc_6720
00006B68 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00006B6E 0478 0800 F704             		subi.w	#$800,($FFFFF704).w
00006B74 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
00006B7A 6000                       		bra.s	loc_6724
00006B7C                            ; ===========================================================================
00006B7C                            
00006B7C                            loc_6720:
00006B7C 3238 F72E                  		move.w	($FFFFF72E).w,d1
00006B80                            
00006B80                            loc_6724:
00006B80 3838 F704                  		move.w	($FFFFF704).w,d4
00006B84 4841                       		swap	d1
00006B86 2601                       		move.l	d1,d3
00006B88 96B8 F704                  		sub.l	($FFFFF704).w,d3
00006B8C E09B                       		ror.l	#8,d3
00006B8E 31C3 F73C                  		move.w	d3,($FFFFF73C).w
00006B92 21C1 F704                  		move.l	d1,($FFFFF704).w
00006B96 3038 F704                  		move.w	($FFFFF704).w,d0
00006B9A 0240 0010                  		andi.w	#$10,d0
00006B9E 1238 F74B                  		move.b	($FFFFF74B).w,d1
00006BA2 B300                       		eor.b	d1,d0
00006BA4 6600                       		bne.s	locret_6766
00006BA6 0A38 0010 F74B             		eori.b	#$10,($FFFFF74B).w
00006BAC 3038 F704                  		move.w	($FFFFF704).w,d0
00006BB0 9044                       		sub.w	d4,d0
00006BB2 6A00                       		bpl.s	loc_6760
00006BB4 08F8 0000 F754             		bset	#0,($FFFFF754).w
00006BBA 4E75                       		rts	
00006BBC                            ; ===========================================================================
00006BBC                            
00006BBC                            loc_6760:
00006BBC 08F8 0001 F754             		bset	#1,($FFFFF754).w
00006BC2                            
00006BC2                            locret_6766:
00006BC2 4E75                       		rts	
00006BC4                            ; End of function ScrollVertical
00006BC4                            
00006BC4                            
00006BC4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006BC4                            
00006BC4                            
00006BC4                            ScrollBlock1:				; XREF: Deform_GHZ; et al
00006BC4 2438 F708                  		move.l	($FFFFF708).w,d2
00006BC8 2002                       		move.l	d2,d0
00006BCA D084                       		add.l	d4,d0
00006BCC 21C0 F708                  		move.l	d0,($FFFFF708).w
00006BD0 2200                       		move.l	d0,d1
00006BD2 4841                       		swap	d1
00006BD4 0241 0010                  		andi.w	#$10,d1
00006BD8 1638 F74C                  		move.b	($FFFFF74C).w,d3
00006BDC B701                       		eor.b	d3,d1
00006BDE 6600                       		bne.s	loc_679C
00006BE0 0A38 0010 F74C             		eori.b	#$10,($FFFFF74C).w
00006BE6 9082                       		sub.l	d2,d0
00006BE8 6A00                       		bpl.s	loc_6796
00006BEA 08F8 0002 F756             		bset	#2,($FFFFF756).w
00006BF0 6000                       		bra.s	loc_679C
00006BF2                            ; ===========================================================================
00006BF2                            
00006BF2                            loc_6796:
00006BF2 08F8 0003 F756             		bset	#3,($FFFFF756).w
00006BF8                            
00006BF8                            loc_679C:
00006BF8 2638 F70C                  		move.l	($FFFFF70C).w,d3
00006BFC 2003                       		move.l	d3,d0
00006BFE D085                       		add.l	d5,d0
00006C00 21C0 F70C                  		move.l	d0,($FFFFF70C).w
00006C04 2200                       		move.l	d0,d1
00006C06 4841                       		swap	d1
00006C08 0241 0010                  		andi.w	#$10,d1
00006C0C 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006C10 B501                       		eor.b	d2,d1
00006C12 6600                       		bne.s	locret_67D0
00006C14 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006C1A 9083                       		sub.l	d3,d0
00006C1C 6A00                       		bpl.s	loc_67CA
00006C1E 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006C24 4E75                       		rts	
00006C26                            ; ===========================================================================
00006C26                            
00006C26                            loc_67CA:
00006C26 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006C2C                            
00006C2C                            locret_67D0:
00006C2C 4E75                       		rts	
00006C2E                            ; End of function ScrollBlock1
00006C2E                            
00006C2E                            
00006C2E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006C2E                            
00006C2E                            
00006C2E                            ScrollBlock2:				; XREF: Deform_SLZ
00006C2E 2438 F708                  		move.l	($FFFFF708).w,d2
00006C32 2002                       		move.l	d2,d0
00006C34 D084                       		add.l	d4,d0
00006C36 21C0 F708                  		move.l	d0,($FFFFF708).w
00006C3A 2638 F70C                  		move.l	($FFFFF70C).w,d3
00006C3E 2003                       		move.l	d3,d0
00006C40 D085                       		add.l	d5,d0
00006C42 21C0 F70C                  		move.l	d0,($FFFFF70C).w
00006C46 2200                       		move.l	d0,d1
00006C48 4841                       		swap	d1
00006C4A 0241 0010                  		andi.w	#$10,d1
00006C4E 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006C52 B501                       		eor.b	d2,d1
00006C54 6600                       		bne.s	locret_6812
00006C56 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006C5C 9083                       		sub.l	d3,d0
00006C5E 6A00                       		bpl.s	loc_680C
00006C60 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006C66 4E75                       		rts	
00006C68                            ; ===========================================================================
00006C68                            
00006C68                            loc_680C:
00006C68 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006C6E                            
00006C6E                            locret_6812:
00006C6E 4E75                       		rts	
00006C70                            ; End of function ScrollBlock2
00006C70                            
00006C70                            
00006C70                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006C70                            
00006C70                            
00006C70                            ScrollBlock3:				; XREF: Deform_GHZ; et al
00006C70 3638 F70C                  		move.w	($FFFFF70C).w,d3
00006C74 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006C78 3200                       		move.w	d0,d1
00006C7A 0241 0010                  		andi.w	#$10,d1
00006C7E 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006C82 B501                       		eor.b	d2,d1
00006C84 6600                       		bne.s	locret_6842
00006C86 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006C8C 9043                       		sub.w	d3,d0
00006C8E 6A00                       		bpl.s	loc_683C
00006C90 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006C96 4E75                       		rts	
00006C98                            ; ===========================================================================
00006C98                            
00006C98                            loc_683C:
00006C98 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006C9E                            
00006C9E                            locret_6842:
00006C9E 4E75                       		rts	
00006CA0                            ; End of function ScrollBlock3
00006CA0                            
00006CA0                            
00006CA0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006CA0                            
00006CA0                            
00006CA0                            ScrollBlock4:				; XREF: Deform_GHZ
00006CA0 3438 F710                  		move.w	($FFFFF710).w,d2
00006CA4 3638 F714                  		move.w	($FFFFF714).w,d3
00006CA8 3038 F73A                  		move.w	($FFFFF73A).w,d0
00006CAC 48C0                       		ext.l	d0
00006CAE EF80                       		asl.l	#7,d0
00006CB0 D1B8 F710                  		add.l	d0,($FFFFF710).w
00006CB4 3038 F710                  		move.w	($FFFFF710).w,d0
00006CB8 0240 0010                  		andi.w	#$10,d0
00006CBC 1238 F74E                  		move.b	($FFFFF74E).w,d1
00006CC0 B300                       		eor.b	d1,d0
00006CC2 6600                       		bne.s	locret_6884
00006CC4 0A38 0010 F74E             		eori.b	#$10,($FFFFF74E).w
00006CCA 3038 F710                  		move.w	($FFFFF710).w,d0
00006CCE 9042                       		sub.w	d2,d0
00006CD0 6A00                       		bpl.s	loc_687E
00006CD2 08F8 0002 F758             		bset	#2,($FFFFF758).w
00006CD8 6000                       		bra.s	locret_6884
00006CDA                            ; ===========================================================================
00006CDA                            
00006CDA                            loc_687E:
00006CDA 08F8 0003 F758             		bset	#3,($FFFFF758).w
00006CE0                            
00006CE0                            locret_6884:
00006CE0 4E75                       		rts	
00006CE2                            ; End of function ScrollBlock4
00006CE2                            
00006CE2                            
00006CE2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006CE2                            
00006CE2                            
00006CE2                            sub_6886:				; XREF: loc_C44
00006CE2 4BF9 00C0 0004             		lea	($C00004).l,a5
00006CE8 4DF9 00C0 0000             		lea	($C00000).l,a6
00006CEE 45F8 F756                  		lea	($FFFFF756).w,a2
00006CF2 47F8 F708                  		lea	($FFFFF708).w,a3
00006CF6 49F8 A440                  		lea	($FFFFA440).w,a4
00006CFA 343C 6000                  		move.w	#$6000,d2
00006CFE 6100 0000                  		bsr.w	sub_6954
00006D02 45F8 F758                  		lea	($FFFFF758).w,a2
00006D06 47F8 F710                  		lea	($FFFFF710).w,a3
00006D0A 6000 0000                  		bra.w	sub_69F4
00006D0E                            ; End of function sub_6886
00006D0E                            
00006D0E                            ; ---------------------------------------------------------------------------
00006D0E                            ; Subroutine to	display	correct	tiles as you move
00006D0E                            ; ---------------------------------------------------------------------------
00006D0E                            
00006D0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006D0E                            
00006D0E                            
00006D0E                            LoadTilesAsYouMove:			; XREF: Demo_Time
00006D0E 4BF9 00C0 0004             		lea	($C00004).l,a5
00006D14 4DF9 00C0 0000             		lea	($C00000).l,a6
00006D1A 45F8 FF32                  		lea	($FFFFFF32).w,a2
00006D1E 47F8 FF18                  		lea	($FFFFFF18).w,a3
00006D22 49F8 A440                  		lea	($FFFFA440).w,a4
00006D26 343C 6000                  		move.w	#$6000,d2
00006D2A 6100 0000                  		bsr.w	sub_6954
00006D2E 45F8 FF34                  		lea	($FFFFFF34).w,a2
00006D32 47F8 FF20                  		lea	($FFFFFF20).w,a3
00006D36 6100 0000                  		bsr.w	sub_69F4
00006D3A 45F8 FF30                  		lea	($FFFFFF30).w,a2
00006D3E 47F8 FF10                  		lea	($FFFFFF10).w,a3
00006D42 49F8 A400                  		lea	($FFFFA400).w,a4
00006D46 343C 4000                  		move.w	#$4000,d2
00006D4A 4A12                       		tst.b	(a2)
00006D4C 6700                       		beq.s	locret_6952
00006D4E 0892 0000                  		bclr	#0,(a2)
00006D52 6700                       		beq.s	loc_6908
00006D54 78F0                       		moveq	#-$10,d4
00006D56 7AF0                       		moveq	#-$10,d5
00006D58 6100 0000                  		bsr.w	sub_6C20
00006D5C 78F0                       		moveq	#-$10,d4
00006D5E 7AF0                       		moveq	#-$10,d5
00006D60 6100 0000                  		bsr.w	sub_6AD8
00006D64                            
00006D64                            loc_6908:
00006D64 0892 0001                  		bclr	#1,(a2)
00006D68 6700                       		beq.s	loc_6922
00006D6A 383C 00E0                  		move.w	#$E0,d4
00006D6E 7AF0                       		moveq	#-$10,d5
00006D70 6100 0000                  		bsr.w	sub_6C20
00006D74 383C 00E0                  		move.w	#$E0,d4
00006D78 7AF0                       		moveq	#-$10,d5
00006D7A 6100 0000                  		bsr.w	sub_6AD8
00006D7E                            
00006D7E                            loc_6922:
00006D7E 0892 0002                  		bclr	#2,(a2)
00006D82 6700                       		beq.s	loc_6938
00006D84 78F0                       		moveq	#-$10,d4
00006D86 7AF0                       		moveq	#-$10,d5
00006D88 6100 0000                  		bsr.w	sub_6C20
00006D8C 78F0                       		moveq	#-$10,d4
00006D8E 7AF0                       		moveq	#-$10,d5
00006D90 6100 0000                  		bsr.w	sub_6B04
00006D94                            
00006D94                            loc_6938:
00006D94 0892 0003                  		bclr	#3,(a2)
00006D98 6700                       		beq.s	locret_6952
00006D9A 78F0                       		moveq	#-$10,d4
00006D9C 3A3C 0140                  		move.w	#$140,d5
00006DA0 6100 0000                  		bsr.w	sub_6C20
00006DA4 78F0                       		moveq	#-$10,d4
00006DA6 3A3C 0140                  		move.w	#$140,d5
00006DAA 6100 0000                  		bsr.w	sub_6B04
00006DAE                            
00006DAE                            locret_6952:
00006DAE 4E75                       		rts	
00006DB0                            ; End of function LoadTilesAsYouMove
00006DB0                            
00006DB0                            
00006DB0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006DB0                            
00006DB0                            
00006DB0                            sub_6954:				; XREF: sub_6886; LoadTilesAsYouMove
00006DB0 4A12                       		tst.b	(a2)
00006DB2 6700 0000                  		beq.w	locret_69F2
00006DB6 0892 0000                  		bclr	#0,(a2)
00006DBA 6700                       		beq.s	loc_6972
00006DBC 78F0                       		moveq	#-$10,d4
00006DBE 7AF0                       		moveq	#-$10,d5
00006DC0 6100 0000                  		bsr.w	sub_6C20
00006DC4 78F0                       		moveq	#-$10,d4
00006DC6 7AF0                       		moveq	#-$10,d5
00006DC8 7C1F                       		moveq	#$1F,d6
00006DCA 6100 0000                  		bsr.w	sub_6ADA
00006DCE                            
00006DCE                            loc_6972:
00006DCE 0892 0001                  		bclr	#1,(a2)
00006DD2 6700                       		beq.s	loc_698E
00006DD4 383C 00E0                  		move.w	#$E0,d4
00006DD8 7AF0                       		moveq	#-$10,d5
00006DDA 6100 0000                  		bsr.w	sub_6C20
00006DDE 383C 00E0                  		move.w	#$E0,d4
00006DE2 7AF0                       		moveq	#-$10,d5
00006DE4 7C1F                       		moveq	#$1F,d6
00006DE6 6100 0000                  		bsr.w	sub_6ADA
00006DEA                            
00006DEA                            loc_698E:
00006DEA 0892 0002                  		bclr	#2,(a2)
00006DEE 6700                       		beq.s	loc_69BE
00006DF0 78F0                       		moveq	#-$10,d4
00006DF2 7AF0                       		moveq	#-$10,d5
00006DF4 6100 0000                  		bsr.w	sub_6C20
00006DF8 78F0                       		moveq	#-$10,d4
00006DFA 7AF0                       		moveq	#-$10,d5
00006DFC 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006E00 322B 0004                  		move.w	4(a3),d1
00006E04 0241 FFF0                  		andi.w	#-$10,d1
00006E08 9C41                       		sub.w	d1,d6
00006E0A 6D00                       		blt.s	loc_69BE
00006E0C E84E                       		lsr.w	#4,d6
00006E0E 0C46 000F                  		cmpi.w	#$F,d6
00006E12 6500                       		bcs.s	loc_69BA
00006E14 7C0F                       		moveq	#$F,d6
00006E16                            
00006E16                            loc_69BA:
00006E16 6100 0000                  		bsr.w	sub_6B06
00006E1A                            
00006E1A                            loc_69BE:
00006E1A 0892 0003                  		bclr	#3,(a2)
00006E1E 6700                       		beq.s	locret_69F2
00006E20 78F0                       		moveq	#-$10,d4
00006E22 3A3C 0140                  		move.w	#$140,d5
00006E26 6100 0000                  		bsr.w	sub_6C20
00006E2A 78F0                       		moveq	#-$10,d4
00006E2C 3A3C 0140                  		move.w	#$140,d5
00006E30 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006E34 322B 0004                  		move.w	4(a3),d1
00006E38 0241 FFF0                  		andi.w	#-$10,d1
00006E3C 9C41                       		sub.w	d1,d6
00006E3E 6D00                       		blt.s	locret_69F2
00006E40 E84E                       		lsr.w	#4,d6
00006E42 0C46 000F                  		cmpi.w	#$F,d6
00006E46 6500                       		bcs.s	loc_69EE
00006E48 7C0F                       		moveq	#$F,d6
00006E4A                            
00006E4A                            loc_69EE:
00006E4A 6100 0000                  		bsr.w	sub_6B06
00006E4E                            
00006E4E                            locret_69F2:
00006E4E 4E75                       		rts	
00006E50                            ; End of function sub_6954
00006E50                            
00006E50                            
00006E50                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006E50                            
00006E50                            
00006E50                            sub_69F4:				; XREF: sub_6886; LoadTilesAsYouMove
00006E50 4A12                       		tst.b	(a2)
00006E52 6700 0000                  		beq.w	locret_6A80
00006E56 0892 0002                  		bclr	#2,(a2)
00006E5A 6700                       		beq.s	loc_6A3E
00006E5C 0C53 0010                  		cmpi.w	#$10,(a3)
00006E60 6500                       		bcs.s	loc_6A3E
00006E62 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
00006E66 322B 0004                  		move.w	4(a3),d1
00006E6A 0241 FFF0                  		andi.w	#-$10,d1
00006E6E 9841                       		sub.w	d1,d4
00006E70 3F04                       		move.w	d4,-(sp)
00006E72 7AF0                       		moveq	#-$10,d5
00006E74 6100 0000                  		bsr.w	sub_6C20
00006E78 381F                       		move.w	(sp)+,d4
00006E7A 7AF0                       		moveq	#-$10,d5
00006E7C 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006E80 322B 0004                  		move.w	4(a3),d1
00006E84 0241 FFF0                  		andi.w	#-$10,d1
00006E88 9C41                       		sub.w	d1,d6
00006E8A 6D00                       		blt.s	loc_6A3E
00006E8C E84E                       		lsr.w	#4,d6
00006E8E 0446 000E                  		subi.w	#$E,d6
00006E92 6400                       		bcc.s	loc_6A3E
00006E94 4446                       		neg.w	d6
00006E96 6100 0000                  		bsr.w	sub_6B06
00006E9A                            
00006E9A                            loc_6A3E:
00006E9A 0892 0003                  		bclr	#3,(a2)
00006E9E 6700                       		beq.s	locret_6A80
00006EA0 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
00006EA4 322B 0004                  		move.w	4(a3),d1
00006EA8 0241 FFF0                  		andi.w	#-$10,d1
00006EAC 9841                       		sub.w	d1,d4
00006EAE 3F04                       		move.w	d4,-(sp)
00006EB0 3A3C 0140                  		move.w	#$140,d5
00006EB4 6100 0000                  		bsr.w	sub_6C20
00006EB8 381F                       		move.w	(sp)+,d4
00006EBA 3A3C 0140                  		move.w	#$140,d5
00006EBE 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006EC2 322B 0004                  		move.w	4(a3),d1
00006EC6 0241 FFF0                  		andi.w	#-$10,d1
00006ECA 9C41                       		sub.w	d1,d6
00006ECC 6D00                       		blt.s	locret_6A80
00006ECE E84E                       		lsr.w	#4,d6
00006ED0 0446 000E                  		subi.w	#$E,d6
00006ED4 6400                       		bcc.s	locret_6A80
00006ED6 4446                       		neg.w	d6
00006ED8 6100 0000                  		bsr.w	sub_6B06
00006EDC                            
00006EDC                            locret_6A80:
00006EDC 4E75                       		rts	
00006EDE                            ; End of function sub_69F4
00006EDE                            
00006EDE                            ; ===========================================================================
00006EDE 4A12                       		tst.b	(a2)
00006EE0 6700                       		beq.s	locret_6AD6
00006EE2 0892 0002                  		bclr	#2,(a2)
00006EE6 6700                       		beq.s	loc_6AAC
00006EE8 383C 00D0                  		move.w	#$D0,d4
00006EEC 322B 0004                  		move.w	4(a3),d1
00006EF0 0241 FFF0                  		andi.w	#-$10,d1
00006EF4 9841                       		sub.w	d1,d4
00006EF6 3F04                       		move.w	d4,-(sp)
00006EF8 7AF0                       		moveq	#-$10,d5
00006EFA 6100 0000                  		bsr.w	sub_6C3C
00006EFE 381F                       		move.w	(sp)+,d4
00006F00 7AF0                       		moveq	#-$10,d5
00006F02 7C02                       		moveq	#2,d6
00006F04 6100 0000                  		bsr.w	sub_6B06
00006F08                            
00006F08                            loc_6AAC:
00006F08 0892 0003                  		bclr	#3,(a2)
00006F0C 6700                       		beq.s	locret_6AD6
00006F0E 383C 00D0                  		move.w	#$D0,d4
00006F12 322B 0004                  		move.w	4(a3),d1
00006F16 0241 FFF0                  		andi.w	#-$10,d1
00006F1A 9841                       		sub.w	d1,d4
00006F1C 3F04                       		move.w	d4,-(sp)
00006F1E 3A3C 0140                  		move.w	#$140,d5
00006F22 6100 0000                  		bsr.w	sub_6C3C
00006F26 381F                       		move.w	(sp)+,d4
00006F28 3A3C 0140                  		move.w	#$140,d5
00006F2C 7C02                       		moveq	#2,d6
00006F2E 6100 0000                  		bsr.w	sub_6B06
00006F32                            
00006F32                            locret_6AD6:
00006F32 4E75                       		rts	
00006F34                            
00006F34                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006F34                            
00006F34                            
00006F34                            sub_6AD8:				; XREF: LoadTilesAsYouMove
00006F34 7C15                       		moveq	#$15,d6
00006F36                            ; End of function sub_6AD8
00006F36                            
00006F36                            
00006F36                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006F36                            
00006F36                            
00006F36                            sub_6ADA:				; XREF: sub_6954; LoadTilesFromStart2
00006F36 2E3C 0080 0000             		move.l	#$800000,d7
00006F3C 2200                       		move.l	d0,d1
00006F3E                            
00006F3E                            loc_6AE2:
00006F3E 48E7 0C00                  		movem.l	d4-d5,-(sp)
00006F42 6100 0000                  		bsr.w	sub_6BD6
00006F46 2001                       		move.l	d1,d0
00006F48 6100 0000                  		bsr.w	sub_6B32
00006F4C 5801                       		addq.b	#4,d1
00006F4E 0201 007F                  		andi.b	#$7F,d1
00006F52 4CDF 0030                  		movem.l	(sp)+,d4-d5
00006F56 0645 0010                  		addi.w	#$10,d5
00006F5A 51CE FFE2                  		dbf	d6,loc_6AE2
00006F5E 4E75                       		rts	
00006F60                            ; End of function sub_6ADA
00006F60                            
00006F60                            
00006F60                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006F60                            
00006F60                            
00006F60                            sub_6B04:				; XREF: LoadTilesAsYouMove
00006F60 7C0F                       		moveq	#$F,d6
00006F62                            ; End of function sub_6B04
00006F62                            
00006F62                            
00006F62                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006F62                            
00006F62                            
00006F62                            sub_6B06:				; XREF: sub_6954
00006F62 2E3C 0080 0000             		move.l	#$800000,d7
00006F68 2200                       		move.l	d0,d1
00006F6A                            
00006F6A                            loc_6B0E:
00006F6A 48E7 0C00                  		movem.l	d4-d5,-(sp)
00006F6E 6100 0000                  		bsr.w	sub_6BD6
00006F72 2001                       		move.l	d1,d0
00006F74 6100 0000                  		bsr.w	sub_6B32
00006F78 0641 0100                  		addi.w	#$100,d1
00006F7C 0241 0FFF                  		andi.w	#$FFF,d1
00006F80 4CDF 0030                  		movem.l	(sp)+,d4-d5
00006F84 0644 0010                  		addi.w	#$10,d4
00006F88 51CE FFE0                  		dbf	d6,loc_6B0E
00006F8C 4E75                       		rts	
00006F8E                            ; End of function sub_6B06
00006F8E                            
00006F8E                            
00006F8E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006F8E                            
00006F8E                            
00006F8E                            sub_6B32:				; XREF: sub_6ADA; sub_6B06
00006F8E 8042                       		or.w	d2,d0
00006F90 4840                       		swap	d0
00006F92 0810 0004                  		btst	#4,(a0)
00006F96 6600                       		bne.s	loc_6B6E
00006F98 0810 0003                  		btst	#3,(a0)
00006F9C 6600                       		bne.s	loc_6B4E
00006F9E 2A80                       		move.l	d0,(a5)
00006FA0 2C99                       		move.l	(a1)+,(a6)
00006FA2 D087                       		add.l	d7,d0
00006FA4 2A80                       		move.l	d0,(a5)
00006FA6 2C99                       		move.l	(a1)+,(a6)
00006FA8 4E75                       		rts	
00006FAA                            ; ===========================================================================
00006FAA                            
00006FAA                            loc_6B4E:
00006FAA 2A80                       		move.l	d0,(a5)
00006FAC 2819                       		move.l	(a1)+,d4
00006FAE 0A84 0800 0800             		eori.l	#$8000800,d4
00006FB4 4844                       		swap	d4
00006FB6 2C84                       		move.l	d4,(a6)
00006FB8 D087                       		add.l	d7,d0
00006FBA 2A80                       		move.l	d0,(a5)
00006FBC 2819                       		move.l	(a1)+,d4
00006FBE 0A84 0800 0800             		eori.l	#$8000800,d4
00006FC4 4844                       		swap	d4
00006FC6 2C84                       		move.l	d4,(a6)
00006FC8 4E75                       		rts	
00006FCA                            ; ===========================================================================
00006FCA                            
00006FCA                            loc_6B6E:
00006FCA 0810 0003                  		btst	#3,(a0)
00006FCE 6600                       		bne.s	loc_6B90
00006FD0 2A80                       		move.l	d0,(a5)
00006FD2 2A19                       		move.l	(a1)+,d5
00006FD4 2819                       		move.l	(a1)+,d4
00006FD6 0A84 1000 1000             		eori.l	#$10001000,d4
00006FDC 2C84                       		move.l	d4,(a6)
00006FDE D087                       		add.l	d7,d0
00006FE0 2A80                       		move.l	d0,(a5)
00006FE2 0A85 1000 1000             		eori.l	#$10001000,d5
00006FE8 2C85                       		move.l	d5,(a6)
00006FEA 4E75                       		rts	
00006FEC                            ; ===========================================================================
00006FEC                            
00006FEC                            loc_6B90:
00006FEC 2A80                       		move.l	d0,(a5)
00006FEE 2A19                       		move.l	(a1)+,d5
00006FF0 2819                       		move.l	(a1)+,d4
00006FF2 0A84 1800 1800             		eori.l	#$18001800,d4
00006FF8 4844                       		swap	d4
00006FFA 2C84                       		move.l	d4,(a6)
00006FFC D087                       		add.l	d7,d0
00006FFE 2A80                       		move.l	d0,(a5)
00007000 0A85 1800 1800             		eori.l	#$18001800,d5
00007006 4845                       		swap	d5
00007008 2C85                       		move.l	d5,(a6)
0000700A 4E75                       		rts	
0000700C                            ; End of function sub_6B32
0000700C                            
0000700C                            ; ===========================================================================
0000700C 4E75                       		rts	
0000700E                            ; ===========================================================================
0000700E 2A80                       		move.l	d0,(a5)
00007010 3A3C 2000                  		move.w	#$2000,d5
00007014 3819                       		move.w	(a1)+,d4
00007016 D845                       		add.w	d5,d4
00007018 3C84                       		move.w	d4,(a6)
0000701A 3819                       		move.w	(a1)+,d4
0000701C D845                       		add.w	d5,d4
0000701E 3C84                       		move.w	d4,(a6)
00007020 D087                       		add.l	d7,d0
00007022 2A80                       		move.l	d0,(a5)
00007024 3819                       		move.w	(a1)+,d4
00007026 D845                       		add.w	d5,d4
00007028 3C84                       		move.w	d4,(a6)
0000702A 3819                       		move.w	(a1)+,d4
0000702C D845                       		add.w	d5,d4
0000702E 3C84                       		move.w	d4,(a6)
00007030 4E75                       		rts	
00007032                            
00007032                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007032                            
00007032                            
00007032                            sub_6BD6:				; XREF: sub_6ADA; sub_6B06
00007032 43F8 B000                  		lea	($FFFFB000).w,a1
00007036 D86B 0004                  		add.w	4(a3),d4
0000703A DA53                       		add.w	(a3),d5
0000703C 3604                       		move.w	d4,d3
0000703E E24B                       		lsr.w	#1,d3
00007040 0243 0380                  		andi.w	#$380,d3
00007044 E64D                       		lsr.w	#3,d5
00007046 3005                       		move.w	d5,d0
00007048 EA48                       		lsr.w	#5,d0
0000704A 0240 007F                  		andi.w	#$7F,d0
0000704E D043                       		add.w	d3,d0
00007050 76FF                       		moveq	#-1,d3
00007052 1634 0000                  		move.b	(a4,d0.w),d3
00007056 6700                       		beq.s	locret_6C1E
00007058 5303                       		subq.b	#1,d3
0000705A 0243 007F                  		andi.w	#$7F,d3
0000705E EE5B                       		ror.w	#7,d3
00007060 D844                       		add.w	d4,d4
00007062 0244 01E0                  		andi.w	#$1E0,d4
00007066 0245 001E                  		andi.w	#$1E,d5
0000706A D644                       		add.w	d4,d3
0000706C D645                       		add.w	d5,d3
0000706E 2043                       		movea.l	d3,a0
00007070 3610                       		move.w	(a0),d3
00007072 0243 03FF                  		andi.w	#$3FF,d3
00007076 E74B                       		lsl.w	#3,d3
00007078 D2C3                       		adda.w	d3,a1
0000707A                            
0000707A                            locret_6C1E:
0000707A 4E75                       		rts	
0000707C                            ; End of function sub_6BD6
0000707C                            
0000707C                            
0000707C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000707C                            
0000707C                            
0000707C                            sub_6C20:				; XREF: LoadTilesAsYouMove; et al
0000707C D86B 0004                  		add.w	4(a3),d4
00007080 DA53                       		add.w	(a3),d5
00007082 0244 00F0                  		andi.w	#$F0,d4
00007086 0245 01F0                  		andi.w	#$1F0,d5
0000708A E94C                       		lsl.w	#4,d4
0000708C E44D                       		lsr.w	#2,d5
0000708E D845                       		add.w	d5,d4
00007090 7003                       		moveq	#3,d0
00007092 4840                       		swap	d0
00007094 3004                       		move.w	d4,d0
00007096 4E75                       		rts	
00007098                            ; End of function sub_6C20
00007098                            
00007098                            
00007098                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007098                            ; not used
00007098                            
00007098                            
00007098                            sub_6C3C:
00007098 D86B 0004                  		add.w	4(a3),d4
0000709C DA53                       		add.w	(a3),d5
0000709E 0244 00F0                  		andi.w	#$F0,d4
000070A2 0245 01F0                  		andi.w	#$1F0,d5
000070A6 E94C                       		lsl.w	#4,d4
000070A8 E44D                       		lsr.w	#2,d5
000070AA D845                       		add.w	d5,d4
000070AC 7002                       		moveq	#2,d0
000070AE 4840                       		swap	d0
000070B0 3004                       		move.w	d4,d0
000070B2 4E75                       		rts	
000070B4                            ; End of function sub_6C3C
000070B4                            
000070B4                            ; ---------------------------------------------------------------------------
000070B4                            ; Subroutine to	load tiles as soon as the level	appears
000070B4                            ; ---------------------------------------------------------------------------
000070B4                            
000070B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000070B4                            
000070B4                            
000070B4                            LoadTilesFromStart:			; XREF: Level; EndingSequence
000070B4 4BF9 00C0 0004             		lea	($C00004).l,a5
000070BA 4DF9 00C0 0000             		lea	($C00000).l,a6
000070C0 47F8 F700                  		lea	($FFFFF700).w,a3
000070C4 49F8 A400                  		lea	($FFFFA400).w,a4
000070C8 343C 4000                  		move.w	#$4000,d2
000070CC 6100                       		bsr.s	LoadTilesFromStart2
000070CE 47F8 F708                  		lea	($FFFFF708).w,a3
000070D2 49F8 A440                  		lea	($FFFFA440).w,a4
000070D6 343C 6000                  		move.w	#$6000,d2
000070DA                            ; End of function LoadTilesFromStart
000070DA                            
000070DA                            
000070DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000070DA                            
000070DA                            
000070DA                            LoadTilesFromStart2:			; XREF: LoadTilesFromStart
000070DA 78F0                       		moveq	#-$10,d4
000070DC 7C0F                       		moveq	#$F,d6
000070DE                            
000070DE                            loc_6C82:
000070DE 48E7 0E00                  		movem.l	d4-d6,-(sp)
000070E2 7A00                       		moveq	#0,d5
000070E4 3204                       		move.w	d4,d1
000070E6 6100 FF94                  		bsr.w	sub_6C20
000070EA 3801                       		move.w	d1,d4
000070EC 7A00                       		moveq	#0,d5
000070EE 7C1F                       		moveq	#$1F,d6
000070F0 6100 FE44                  		bsr.w	sub_6ADA
000070F4 4CDF 0070                  		movem.l	(sp)+,d4-d6
000070F8 0644 0010                  		addi.w	#$10,d4
000070FC 51CE FFE0                  		dbf	d6,loc_6C82
00007100 4E75                       		rts	
00007102                            ; End of function LoadTilesFromStart2
00007102                            
00007102                            ; ---------------------------------------------------------------------------
00007102                            ; Main Load Block loading subroutine
00007102                            ; ---------------------------------------------------------------------------
00007102                            
00007102                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007102                            
00007102                            
00007102                            MainLoadBlockLoad:			; XREF: Level; EndingSequence
00007102 7000                       		moveq	#0,d0
00007104 1038 FE10                  		move.b	($FFFFFE10).w,d0
00007108 E948                       		lsl.w	#4,d0
0000710A 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
00007110 45F2 0000                  		lea	(a2,d0.w),a2
00007114 2F0A                       		move.l	a2,-(sp)
00007116 588A                       		addq.l	#4,a2
00007118 205A                       		movea.l	(a2)+,a0
0000711A 43F8 B000                  		lea	($FFFFB000).w,a1 ; RAM address for 16x16 mappings
0000711E 303C 0000                  		move.w	#0,d0
00007122 6100 A81A                  		bsr.w	EniDec
00007126 205A                       		movea.l	(a2)+,a0
00007128 43F9 00FF 0000             		lea	($FF0000).l,a1	; RAM address for 256x256 mappings
0000712E 6100 A98C                  		bsr.w	KosDec
00007132 6100 0000                  		bsr.w	LevelLayoutLoad
00007136 301A                       		move.w	(a2)+,d0
00007138 3012                       		move.w	(a2),d0
0000713A 0240 00FF                  		andi.w	#$FF,d0
0000713E 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; is level SBZ3 (LZ4) ?
00007144 6600                       		bne.s	MLB_ChkSBZPal	; if not, branch
00007146 700C                       		moveq	#$C,d0		; use SB3 pallet
00007148                            
00007148                            MLB_ChkSBZPal:
00007148 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2?
0000714E 6700                       		beq.s	MLB_UsePal0E	; if yes, branch
00007150 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; is level FZ?
00007156 6600                       		bne.s	MLB_NormalPal	; if not, branch
00007158                            
00007158                            MLB_UsePal0E:
00007158 700E                       		moveq	#$E,d0		; use SBZ2/FZ pallet
0000715A                            
0000715A                            MLB_NormalPal:
0000715A 6100 B1C0                  		bsr.w	PalLoad1	; load pallet (based on	d0)
0000715E 245F                       		movea.l	(sp)+,a2
00007160 584A                       		addq.w	#4,a2
00007162 7000                       		moveq	#0,d0
00007164 1012                       		move.b	(a2),d0
00007166 6700                       		beq.s	locret_6D10
00007168 6100 A636                  		bsr.w	LoadPLC		; load pattern load cues
0000716C                            
0000716C                            locret_6D10:
0000716C 4E75                       		rts	
0000716E                            ; End of function MainLoadBlockLoad
0000716E                            
0000716E                            ; ---------------------------------------------------------------------------
0000716E                            ; Level	layout loading subroutine
0000716E                            ; ---------------------------------------------------------------------------
0000716E                            
0000716E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000716E                            
0000716E                            
0000716E                            LevelLayoutLoad:			; XREF: TitleScreen; MainLoadBlockLoad
0000716E 47F8 A400                  		lea	($FFFFA400).w,a3
00007172 323C 01FF                  		move.w	#$1FF,d1
00007176 7000                       		moveq	#0,d0
00007178                            
00007178                            LevLoad_ClrRam:
00007178 26C0                       		move.l	d0,(a3)+
0000717A 51C9 FFFC                  		dbf	d1,LevLoad_ClrRam ; clear the RAM ($FFFFA400-A7FF)
0000717E                            
0000717E 47F8 A400                  		lea	($FFFFA400).w,a3 ; RAM address for level layout
00007182 7200                       		moveq	#0,d1
00007184 6100 0000                  		bsr.w	LevelLayoutLoad2 ; load	level layout into RAM
00007188 47F8 A440                  		lea	($FFFFA440).w,a3 ; RAM address for background layout
0000718C 7202                       		moveq	#2,d1
0000718E                            ; End of function LevelLayoutLoad
0000718E                            
0000718E                            ; "LevelLayoutLoad2" is	run twice - for	the level and the background
0000718E                            
0000718E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000718E                            
0000718E                            
0000718E                            LevelLayoutLoad2:			; XREF: LevelLayoutLoad
0000718E 3038 FE10                  		move.w	($FFFFFE10).w,d0
00007192 ED08                       		lsl.b	#6,d0
00007194 EA48                       		lsr.w	#5,d0
00007196 3400                       		move.w	d0,d2
00007198 D040                       		add.w	d0,d0
0000719A D042                       		add.w	d2,d0
0000719C D041                       		add.w	d1,d0
0000719E 43F9 0000 0000             		lea	(Level_Index).l,a1
000071A4 3031 0000                  		move.w	(a1,d0.w),d0
000071A8 43F1 0000                  		lea	(a1,d0.w),a1
000071AC 7200                       		moveq	#0,d1
000071AE 3401                       		move.w	d1,d2
000071B0 1219                       		move.b	(a1)+,d1	; load level width (in tiles)
000071B2 1419                       		move.b	(a1)+,d2	; load level height (in	tiles)
000071B4                            
000071B4                            LevLoad_NumRows:
000071B4 3001                       		move.w	d1,d0
000071B6 204B                       		movea.l	a3,a0
000071B8                            
000071B8                            LevLoad_Row:
000071B8 10D9                       		move.b	(a1)+,(a0)+
000071BA 51C8 FFFC                  		dbf	d0,LevLoad_Row	; load 1 row
000071BE 47EB 0080                  		lea	$80(a3),a3	; do next row
000071C2 51CA FFF0                  		dbf	d2,LevLoad_NumRows ; repeat for	number of rows
000071C6 4E75                       		rts	
000071C8                            ; End of function LevelLayoutLoad2
000071C8                            
000071C8                            ; ---------------------------------------------------------------------------
000071C8                            ; Dynamic screen resize	loading	subroutine
000071C8                            ; ---------------------------------------------------------------------------
000071C8                            
000071C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000071C8                            
000071C8                            
000071C8                            DynScrResizeLoad:			; XREF: DeformBgLayer
000071C8 7000                       		moveq	#0,d0
000071CA 1038 FE10                  		move.b	($FFFFFE10).w,d0
000071CE D040                       		add.w	d0,d0
000071D0 303B 0000                  		move.w	Resize_Index(pc,d0.w),d0
000071D4 4EBB 0000                  		jsr	Resize_Index(pc,d0.w)
000071D8 7202                       		moveq	#2,d1
000071DA 3038 F726                  		move.w	($FFFFF726).w,d0
000071DE 9078 F72E                  		sub.w	($FFFFF72E).w,d0
000071E2 6700                       		beq.s	locret_6DAA
000071E4 6400                       		bcc.s	loc_6DAC
000071E6 4441                       		neg.w	d1
000071E8 3038 F704                  		move.w	($FFFFF704).w,d0
000071EC B078 F726                  		cmp.w	($FFFFF726).w,d0
000071F0 6300                       		bls.s	loc_6DA0
000071F2 31C0 F72E                  		move.w	d0,($FFFFF72E).w
000071F6 0278 FFFE F72E             		andi.w	#-2,($FFFFF72E).w
000071FC                            
000071FC                            loc_6DA0:
000071FC D378 F72E                  		add.w	d1,($FFFFF72E).w
00007200 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
00007206                            
00007206                            locret_6DAA:
00007206 4E75                       		rts	
00007208                            ; ===========================================================================
00007208                            
00007208                            loc_6DAC:				; XREF: DynScrResizeLoad
00007208 3038 F704                  		move.w	($FFFFF704).w,d0
0000720C 5040                       		addq.w	#8,d0
0000720E B078 F72E                  		cmp.w	($FFFFF72E).w,d0
00007212 6500                       		bcs.s	loc_6DC4
00007214 0838 0001 D022             		btst	#1,($FFFFD022).w
0000721A 6700                       		beq.s	loc_6DC4
0000721C D241                       		add.w	d1,d1
0000721E D241                       		add.w	d1,d1
00007220                            
00007220                            loc_6DC4:
00007220 D378 F72E                  		add.w	d1,($FFFFF72E).w
00007224 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
0000722A 4E75                       		rts	
0000722C                            ; End of function DynScrResizeLoad
0000722C                            
0000722C                            ; ===========================================================================
0000722C                            ; ---------------------------------------------------------------------------
0000722C                            ; Offset index for dynamic screen resizing
0000722C                            ; ---------------------------------------------------------------------------
0000722C 0000 0000                  Resize_Index:	dc.w Resize_GHZ-Resize_Index, Resize_LZ-Resize_Index
00007230 0000 0000                  		dc.w Resize_MZ-Resize_Index, Resize_SLZ-Resize_Index
00007234 0000 0000                  		dc.w Resize_SYZ-Resize_Index, Resize_SBZ-Resize_Index
00007238 0000                       		dc.w Resize_Ending-Resize_Index
0000723A                            ; ===========================================================================
0000723A                            ; ---------------------------------------------------------------------------
0000723A                            ; Green	Hill Zone dynamic screen resizing
0000723A                            ; ---------------------------------------------------------------------------
0000723A                            
0000723A                            Resize_GHZ:				; XREF: Resize_Index
0000723A 7000                       		moveq	#0,d0
0000723C 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007240 D040                       		add.w	d0,d0
00007242 303B 0000                  		move.w	Resize_GHZx(pc,d0.w),d0
00007246 4EFB 0000                  		jmp	Resize_GHZx(pc,d0.w)
0000724A                            ; ===========================================================================
0000724A 0000                       Resize_GHZx:	dc.w Resize_GHZ1-Resize_GHZx
0000724C 0000                       		dc.w Resize_GHZ2-Resize_GHZx
0000724E 0000                       		dc.w Resize_GHZ3-Resize_GHZx
00007250                            ; ===========================================================================
00007250                            
00007250                            Resize_GHZ1:
00007250 31FC 0300 F726             		move.w	#$300,($FFFFF726).w ; set lower	y-boundary
00007256 0C78 1780 F700             		cmpi.w	#$1780,($FFFFF700).w ; has the camera reached $1780 on x-axis?
0000725C 6500                       		bcs.s	locret_6E08	; if not, branch
0000725E 31FC 0400 F726             		move.w	#$400,($FFFFF726).w ; set lower	y-boundary
00007264                            
00007264                            locret_6E08:
00007264 4E75                       		rts	
00007266                            ; ===========================================================================
00007266                            
00007266                            Resize_GHZ2:
00007266 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
0000726C 0C78 0ED0 F700             		cmpi.w	#$ED0,($FFFFF700).w
00007272 6500                       		bcs.s	locret_6E3A
00007274 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
0000727A 0C78 1600 F700             		cmpi.w	#$1600,($FFFFF700).w
00007280 6500                       		bcs.s	locret_6E3A
00007282 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
00007288 0C78 1D60 F700             		cmpi.w	#$1D60,($FFFFF700).w
0000728E 6500                       		bcs.s	locret_6E3A
00007290 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00007296                            
00007296                            locret_6E3A:
00007296 4E75                       		rts	
00007298                            ; ===========================================================================
00007298                            
00007298                            Resize_GHZ3:
00007298 7000                       		moveq	#0,d0
0000729A 1038 F742                  		move.b	($FFFFF742).w,d0
0000729E 303B 0000                  		move.w	off_6E4A(pc,d0.w),d0
000072A2 4EFB 0000                  		jmp	off_6E4A(pc,d0.w)
000072A6                            ; ===========================================================================
000072A6 0000                       off_6E4A:	dc.w Resize_GHZ3main-off_6E4A
000072A8 0000                       		dc.w Resize_GHZ3boss-off_6E4A
000072AA 0000                       		dc.w Resize_GHZ3end-off_6E4A
000072AC                            ; ===========================================================================
000072AC                            
000072AC                            Resize_GHZ3main:
000072AC 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
000072B2 0C78 0380 F700             		cmpi.w	#$380,($FFFFF700).w
000072B8 6500                       		bcs.s	locret_6E96
000072BA 31FC 0310 F726             		move.w	#$310,($FFFFF726).w
000072C0 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
000072C6 6500                       		bcs.s	locret_6E96
000072C8 0C78 0280 F704             		cmpi.w	#$280,($FFFFF704).w
000072CE 6500                       		bcs.s	loc_6E98
000072D0 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
000072D6 0C78 1380 F700             		cmpi.w	#$1380,($FFFFF700).w
000072DC 6400                       		bcc.s	loc_6E8E
000072DE 31FC 04C0 F726             		move.w	#$4C0,($FFFFF726).w
000072E4 31FC 04C0 F72E             		move.w	#$4C0,($FFFFF72E).w
000072EA                            
000072EA                            loc_6E8E:
000072EA 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
000072F0 6400                       		bcc.s	loc_6E98
000072F2                            
000072F2                            locret_6E96:
000072F2 4E75                       		rts	
000072F4                            ; ===========================================================================
000072F4                            
000072F4                            loc_6E98:
000072F4 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
000072FA 5438 F742                  		addq.b	#2,($FFFFF742).w
000072FE 4E75                       		rts	
00007300                            ; ===========================================================================
00007300                            
00007300                            Resize_GHZ3boss:
00007300 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
00007306 6400                       		bcc.s	loc_6EB0
00007308 5538 F742                  		subq.b	#2,($FFFFF742).w
0000730C                            
0000730C                            loc_6EB0:
0000730C 0C78 2960 F700             		cmpi.w	#$2960,($FFFFF700).w
00007312 6500                       		bcs.s	locret_6EE8
00007314 6100 0000                  		bsr.w	SingleObjLoad
00007318 6600                       		bne.s	loc_6ED0
0000731A 12BC 003D                  		move.b	#$3D,0(a1)	; load GHZ boss	object
0000731E 337C 2A60 0008             		move.w	#$2A60,8(a1)
00007324 337C 0280 000C             		move.w	#$280,$C(a1)
0000732A                            
0000732A                            loc_6ED0:
0000732A 303C 008C                  		move.w	#$8C,d0
0000732E 6100 A286                  		bsr.w	PlaySound	; play boss music
00007332 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007338 5438 F742                  		addq.b	#2,($FFFFF742).w
0000733C 7011                       		moveq	#$11,d0
0000733E 6000 A460                  		bra.w	LoadPLC		; load boss patterns
00007342                            ; ===========================================================================
00007342                            
00007342                            locret_6EE8:
00007342 4E75                       		rts	
00007344                            ; ===========================================================================
00007344                            
00007344                            Resize_GHZ3end:
00007344 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
0000734A 4E75                       		rts	
0000734C                            ; ===========================================================================
0000734C                            ; ---------------------------------------------------------------------------
0000734C                            ; Labyrinth Zone dynamic screen	resizing
0000734C                            ; ---------------------------------------------------------------------------
0000734C                            
0000734C                            Resize_LZ:				; XREF: Resize_Index
0000734C 7000                       		moveq	#0,d0
0000734E 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007352 D040                       		add.w	d0,d0
00007354 303B 0000                  		move.w	Resize_LZx(pc,d0.w),d0
00007358 4EFB 0000                  		jmp	Resize_LZx(pc,d0.w)
0000735C                            ; ===========================================================================
0000735C 0000                       Resize_LZx:	dc.w Resize_LZ12-Resize_LZx
0000735E 0000                       		dc.w Resize_LZ12-Resize_LZx
00007360 0000                       		dc.w Resize_LZ3-Resize_LZx
00007362 0000                       		dc.w Resize_SBZ3-Resize_LZx
00007364                            ; ===========================================================================
00007364                            
00007364                            Resize_LZ12:
00007364 4E75                       		rts	
00007366                            ; ===========================================================================
00007366                            
00007366                            Resize_LZ3:
00007366 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch $F	been pressed?
0000736A 6700                       		beq.s	loc_6F28	; if not, branch
0000736C 43F8 A506                  		lea	($FFFFA506).w,a1
00007370 0C11 0007                  		cmpi.b	#7,(a1)
00007374 6700                       		beq.s	loc_6F28
00007376 12BC 0007                  		move.b	#7,(a1)		; modify level layout
0000737A 303C 00B7                  		move.w	#$B7,d0
0000737E 6100 A23C                  		bsr.w	PlaySound_Special ; play rumbling sound
00007382                            
00007382                            loc_6F28:
00007382 4A38 F742                  		tst.b	($FFFFF742).w
00007386 6600                       		bne.s	locret_6F64
00007388 0C78 1CA0 F700             		cmpi.w	#$1CA0,($FFFFF700).w
0000738E 6500                       		bcs.s	locret_6F62
00007390 0C78 0600 F704             		cmpi.w	#$600,($FFFFF704).w
00007396 6400                       		bcc.s	locret_6F62
00007398 6100 0000                  		bsr.w	SingleObjLoad
0000739C 6600                       		bne.s	loc_6F4A
0000739E 12BC 0077                  		move.b	#$77,0(a1)	; load LZ boss object
000073A2                            
000073A2                            loc_6F4A:
000073A2 303C 008C                  		move.w	#$8C,d0
000073A6 6100 A20E                  		bsr.w	PlaySound	; play boss music
000073AA 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000073B0 5438 F742                  		addq.b	#2,($FFFFF742).w
000073B4 7011                       		moveq	#$11,d0
000073B6 6000 A3E8                  		bra.w	LoadPLC		; load boss patterns
000073BA                            ; ===========================================================================
000073BA                            
000073BA                            locret_6F62:
000073BA 4E75                       		rts	
000073BC                            ; ===========================================================================
000073BC                            
000073BC                            locret_6F64:
000073BC 4E75                       		rts	
000073BE                            ; ===========================================================================
000073BE                            
000073BE                            Resize_SBZ3:
000073BE 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
000073C4 6500                       		bcs.s	locret_6F8C
000073C6 0C78 0018 D00C             		cmpi.w	#$18,($FFFFD00C).w ; has Sonic reached the top of the level?
000073CC 6400                       		bcc.s	locret_6F8C	; if not, branch
000073CE 4238 FE30                  		clr.b	($FFFFFE30).w
000073D2 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
000073D8 31FC 0502 FE10             		move.w	#$502,($FFFFFE10).w ; set level	number to 0502 (FZ)
000073DE 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; freeze Sonic
000073E4                            
000073E4                            locret_6F8C:
000073E4 4E75                       		rts	
000073E6                            ; ===========================================================================
000073E6                            ; ---------------------------------------------------------------------------
000073E6                            ; Marble Zone dynamic screen resizing
000073E6                            ; ---------------------------------------------------------------------------
000073E6                            
000073E6                            Resize_MZ:				; XREF: Resize_Index
000073E6 7000                       		moveq	#0,d0
000073E8 1038 FE11                  		move.b	($FFFFFE11).w,d0
000073EC D040                       		add.w	d0,d0
000073EE 303B 0000                  		move.w	Resize_MZx(pc,d0.w),d0
000073F2 4EFB 0000                  		jmp	Resize_MZx(pc,d0.w)
000073F6                            ; ===========================================================================
000073F6 0000                       Resize_MZx:	dc.w Resize_MZ1-Resize_MZx
000073F8 0000                       		dc.w Resize_MZ2-Resize_MZx
000073FA 0000                       		dc.w Resize_MZ3-Resize_MZx
000073FC                            ; ===========================================================================
000073FC                            
000073FC                            Resize_MZ1:
000073FC 7000                       		moveq	#0,d0
000073FE 1038 F742                  		move.b	($FFFFF742).w,d0
00007402 303B 0000                  		move.w	off_6FB2(pc,d0.w),d0
00007406 4EFB 0000                  		jmp	off_6FB2(pc,d0.w)
0000740A                            ; ===========================================================================
0000740A 0000                       off_6FB2:	dc.w loc_6FBA-off_6FB2
0000740C 0000                       		dc.w loc_6FEA-off_6FB2
0000740E 0000                       		dc.w loc_702E-off_6FB2
00007410 0000                       		dc.w loc_7050-off_6FB2
00007412                            ; ===========================================================================
00007412                            
00007412                            loc_6FBA:
00007412 31FC 01D0 F726             		move.w	#$1D0,($FFFFF726).w
00007418 0C78 0700 F700             		cmpi.w	#$700,($FFFFF700).w
0000741E 6500                       		bcs.s	locret_6FE8
00007420 31FC 0220 F726             		move.w	#$220,($FFFFF726).w
00007426 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
0000742C 6500                       		bcs.s	locret_6FE8
0000742E 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
00007434 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
0000743A 6500                       		bcs.s	locret_6FE8
0000743C 5438 F742                  		addq.b	#2,($FFFFF742).w
00007440                            
00007440                            locret_6FE8:
00007440 4E75                       		rts	
00007442                            ; ===========================================================================
00007442                            
00007442                            loc_6FEA:
00007442 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
00007448 6400                       		bcc.s	loc_6FF8
0000744A 5538 F742                  		subq.b	#2,($FFFFF742).w
0000744E 4E75                       		rts	
00007450                            ; ===========================================================================
00007450                            
00007450                            loc_6FF8:
00007450 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
00007456 0C78 0E00 F700             		cmpi.w	#$E00,($FFFFF700).w
0000745C 6400                       		bcc.s	locret_702C
0000745E 31FC 0340 F72C             		move.w	#$340,($FFFFF72C).w
00007464 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
0000746A 0C78 0A90 F700             		cmpi.w	#$A90,($FFFFF700).w
00007470 6400                       		bcc.s	locret_702C
00007472 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
00007478 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
0000747E 6500                       		bcs.s	locret_702C
00007480 5438 F742                  		addq.b	#2,($FFFFF742).w
00007484                            
00007484                            locret_702C:
00007484 4E75                       		rts	
00007486                            ; ===========================================================================
00007486                            
00007486                            loc_702E:
00007486 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
0000748C 6400                       		bcc.s	loc_703C
0000748E 5538 F742                  		subq.b	#2,($FFFFF742).w
00007492 4E75                       		rts	
00007494                            ; ===========================================================================
00007494                            
00007494                            loc_703C:
00007494 0C78 0500 F704             		cmpi.w	#$500,($FFFFF704).w
0000749A 6500                       		bcs.s	locret_704E
0000749C 31FC 0500 F72C             		move.w	#$500,($FFFFF72C).w
000074A2 5438 F742                  		addq.b	#2,($FFFFF742).w
000074A6                            
000074A6                            locret_704E:
000074A6 4E75                       		rts	
000074A8                            ; ===========================================================================
000074A8                            
000074A8                            loc_7050:
000074A8 0C78 0E70 F700             		cmpi.w	#$E70,($FFFFF700).w
000074AE 6500                       		bcs.s	locret_7072
000074B0 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
000074B6 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
000074BC 0C78 1430 F700             		cmpi.w	#$1430,($FFFFF700).w
000074C2 6500                       		bcs.s	locret_7072
000074C4 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
000074CA                            
000074CA                            locret_7072:
000074CA 4E75                       		rts	
000074CC                            ; ===========================================================================
000074CC                            
000074CC                            Resize_MZ2:
000074CC 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
000074D2 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
000074D8 6500                       		bcs.s	locret_7088
000074DA 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
000074E0                            
000074E0                            locret_7088:
000074E0 4E75                       		rts	
000074E2                            ; ===========================================================================
000074E2                            
000074E2                            Resize_MZ3:
000074E2 7000                       		moveq	#0,d0
000074E4 1038 F742                  		move.b	($FFFFF742).w,d0
000074E8 303B 0000                  		move.w	off_7098(pc,d0.w),d0
000074EC 4EFB 0000                  		jmp	off_7098(pc,d0.w)
000074F0                            ; ===========================================================================
000074F0 0000                       off_7098:	dc.w Resize_MZ3boss-off_7098
000074F2 0000                       		dc.w Resize_MZ3end-off_7098
000074F4                            ; ===========================================================================
000074F4                            
000074F4                            Resize_MZ3boss:
000074F4 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
000074FA 0C78 1560 F700             		cmpi.w	#$1560,($FFFFF700).w
00007500 6500                       		bcs.s	locret_70E8
00007502 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00007508 0C78 17F0 F700             		cmpi.w	#$17F0,($FFFFF700).w
0000750E 6500                       		bcs.s	locret_70E8
00007510 6100 0000                  		bsr.w	SingleObjLoad
00007514 6600                       		bne.s	loc_70D0
00007516 12BC 0073                  		move.b	#$73,0(a1)	; load MZ boss object
0000751A 337C 19F0 0008             		move.w	#$19F0,8(a1)
00007520 337C 022C 000C             		move.w	#$22C,$C(a1)
00007526                            
00007526                            loc_70D0:
00007526 303C 008C                  		move.w	#$8C,d0
0000752A 6100 A08A                  		bsr.w	PlaySound	; play boss music
0000752E 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007534 5438 F742                  		addq.b	#2,($FFFFF742).w
00007538 7011                       		moveq	#$11,d0
0000753A 6000 A264                  		bra.w	LoadPLC		; load boss patterns
0000753E                            ; ===========================================================================
0000753E                            
0000753E                            locret_70E8:
0000753E 4E75                       		rts	
00007540                            ; ===========================================================================
00007540                            
00007540                            Resize_MZ3end:
00007540 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007546 4E75                       		rts	
00007548                            ; ===========================================================================
00007548                            ; ---------------------------------------------------------------------------
00007548                            ; Star Light Zone dynamic screen resizing
00007548                            ; ---------------------------------------------------------------------------
00007548                            
00007548                            Resize_SLZ:				; XREF: Resize_Index
00007548 7000                       		moveq	#0,d0
0000754A 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000754E D040                       		add.w	d0,d0
00007550 303B 0000                  		move.w	Resize_SLZx(pc,d0.w),d0
00007554 4EFB 0000                  		jmp	Resize_SLZx(pc,d0.w)
00007558                            ; ===========================================================================
00007558 0000                       Resize_SLZx:	dc.w Resize_SLZ12-Resize_SLZx
0000755A 0000                       		dc.w Resize_SLZ12-Resize_SLZx
0000755C 0000                       		dc.w Resize_SLZ3-Resize_SLZx
0000755E                            ; ===========================================================================
0000755E                            
0000755E                            Resize_SLZ12:
0000755E 4E75                       		rts	
00007560                            ; ===========================================================================
00007560                            
00007560                            Resize_SLZ3:
00007560 7000                       		moveq	#0,d0
00007562 1038 F742                  		move.b	($FFFFF742).w,d0
00007566 303B 0000                  		move.w	off_7118(pc,d0.w),d0
0000756A 4EFB 0000                  		jmp	off_7118(pc,d0.w)
0000756E                            ; ===========================================================================
0000756E 0000                       off_7118:	dc.w Resize_SLZ3main-off_7118
00007570 0000                       		dc.w Resize_SLZ3boss-off_7118
00007572 0000                       		dc.w Resize_SLZ3end-off_7118
00007574                            ; ===========================================================================
00007574                            
00007574                            Resize_SLZ3main:
00007574 0C78 1E70 F700             		cmpi.w	#$1E70,($FFFFF700).w
0000757A 6500                       		bcs.s	locret_7130
0000757C 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00007582 5438 F742                  		addq.b	#2,($FFFFF742).w
00007586                            
00007586                            locret_7130:
00007586 4E75                       		rts	
00007588                            ; ===========================================================================
00007588                            
00007588                            Resize_SLZ3boss:
00007588 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
0000758E 6500                       		bcs.s	locret_715C
00007590 6100 0000                  		bsr.w	SingleObjLoad
00007594 6600                       		bne.s	loc_7144
00007596 12BC 007A                  		move.b	#$7A,(a1)	; load SLZ boss	object
0000759A                            
0000759A                            loc_7144:
0000759A 303C 008C                  		move.w	#$8C,d0
0000759E 6100 A016                  		bsr.w	PlaySound	; play boss music
000075A2 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000075A8 5438 F742                  		addq.b	#2,($FFFFF742).w
000075AC 7011                       		moveq	#$11,d0
000075AE 6000 A1F0                  		bra.w	LoadPLC		; load boss patterns
000075B2                            ; ===========================================================================
000075B2                            
000075B2                            locret_715C:
000075B2 4E75                       		rts	
000075B4                            ; ===========================================================================
000075B4                            
000075B4                            Resize_SLZ3end:
000075B4 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000075BA 4E75                       		rts
000075BC 4E75                       		rts
000075BE                            ; ===========================================================================
000075BE                            ; ---------------------------------------------------------------------------
000075BE                            ; Spring Yard Zone dynamic screen resizing
000075BE                            ; ---------------------------------------------------------------------------
000075BE                            
000075BE                            Resize_SYZ:				; XREF: Resize_Index
000075BE 7000                       		moveq	#0,d0
000075C0 1038 FE11                  		move.b	($FFFFFE11).w,d0
000075C4 D040                       		add.w	d0,d0
000075C6 303B 0000                  		move.w	Resize_SYZx(pc,d0.w),d0
000075CA 4EFB 0000                  		jmp	Resize_SYZx(pc,d0.w)
000075CE                            ; ===========================================================================
000075CE 0000                       Resize_SYZx:	dc.w Resize_SYZ1-Resize_SYZx
000075D0 0000                       		dc.w Resize_SYZ2-Resize_SYZx
000075D2 0000                       		dc.w Resize_SYZ3-Resize_SYZx
000075D4                            ; ===========================================================================
000075D4                            
000075D4                            Resize_SYZ1:
000075D4 4E75                       		rts	
000075D6                            ; ===========================================================================
000075D6                            
000075D6                            Resize_SYZ2:
000075D6 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
000075DC 0C78 25A0 F700             		cmpi.w	#$25A0,($FFFFF700).w
000075E2 6500                       		bcs.s	locret_71A2
000075E4 31FC 0420 F726             		move.w	#$420,($FFFFF726).w
000075EA 0C78 04D0 D00C             		cmpi.w	#$4D0,($FFFFD00C).w
000075F0 6500                       		bcs.s	locret_71A2
000075F2 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
000075F8                            
000075F8                            locret_71A2:
000075F8 4E75                       		rts	
000075FA                            ; ===========================================================================
000075FA                            
000075FA                            Resize_SYZ3:
000075FA 7000                       		moveq	#0,d0
000075FC 1038 F742                  		move.b	($FFFFF742).w,d0
00007600 303B 0000                  		move.w	off_71B2(pc,d0.w),d0
00007604 4EFB 0000                  		jmp	off_71B2(pc,d0.w)
00007608                            ; ===========================================================================
00007608 0000                       off_71B2:	dc.w Resize_SYZ3main-off_71B2
0000760A 0000                       		dc.w Resize_SYZ3boss-off_71B2
0000760C 0000                       		dc.w Resize_SYZ3end-off_71B2
0000760E                            ; ===========================================================================
0000760E                            
0000760E                            Resize_SYZ3main:
0000760E 0C78 2AC0 F700             		cmpi.w	#$2AC0,($FFFFF700).w
00007614 6500                       		bcs.s	locret_71CE
00007616 6100 0000                  		bsr.w	SingleObjLoad
0000761A 6600                       		bne.s	locret_71CE
0000761C 12BC 0076                  		move.b	#$76,(a1)	; load blocks that boss	picks up
00007620 5438 F742                  		addq.b	#2,($FFFFF742).w
00007624                            
00007624                            locret_71CE:
00007624 4E75                       		rts	
00007626                            ; ===========================================================================
00007626                            
00007626                            Resize_SYZ3boss:
00007626 0C78 2C00 F700             		cmpi.w	#$2C00,($FFFFF700).w
0000762C 6500                       		bcs.s	locret_7200
0000762E 31FC 04CC F726             		move.w	#$4CC,($FFFFF726).w
00007634 6100 0000                  		bsr.w	SingleObjLoad
00007638 6600                       		bne.s	loc_71EC
0000763A 12BC 0075                  		move.b	#$75,(a1)	; load SYZ boss	object
0000763E 5438 F742                  		addq.b	#2,($FFFFF742).w
00007642                            
00007642                            loc_71EC:
00007642 303C 008C                  		move.w	#$8C,d0
00007646 6100 9F6E                  		bsr.w	PlaySound	; play boss music
0000764A 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007650 7011                       		moveq	#$11,d0
00007652 6000 A14C                  		bra.w	LoadPLC		; load boss patterns
00007656                            ; ===========================================================================
00007656                            
00007656                            locret_7200:
00007656 4E75                       		rts	
00007658                            ; ===========================================================================
00007658                            
00007658                            Resize_SYZ3end:
00007658 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
0000765E 4E75                       		rts	
00007660                            ; ===========================================================================
00007660                            ; ---------------------------------------------------------------------------
00007660                            ; Scrap	Brain Zone dynamic screen resizing
00007660                            ; ---------------------------------------------------------------------------
00007660                            
00007660                            Resize_SBZ:				; XREF: Resize_Index
00007660 7000                       		moveq	#0,d0
00007662 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007666 D040                       		add.w	d0,d0
00007668 303B 0000                  		move.w	Resize_SBZx(pc,d0.w),d0
0000766C 4EFB 0000                  		jmp	Resize_SBZx(pc,d0.w)
00007670                            ; ===========================================================================
00007670 0000                       Resize_SBZx:	dc.w Resize_SBZ1-Resize_SBZx
00007672 0000                       		dc.w Resize_SBZ2-Resize_SBZx
00007674 0000                       		dc.w Resize_FZ-Resize_SBZx
00007676                            ; ===========================================================================
00007676                            
00007676                            Resize_SBZ1:
00007676 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
0000767C 0C78 1880 F700             		cmpi.w	#$1880,($FFFFF700).w
00007682 6500                       		bcs.s	locret_7242
00007684 31FC 0620 F726             		move.w	#$620,($FFFFF726).w
0000768A 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
00007690 6500                       		bcs.s	locret_7242
00007692 31FC 02A0 F726             		move.w	#$2A0,($FFFFF726).w
00007698                            
00007698                            locret_7242:
00007698 4E75                       		rts	
0000769A                            ; ===========================================================================
0000769A                            
0000769A                            Resize_SBZ2:
0000769A 7000                       		moveq	#0,d0
0000769C 1038 F742                  		move.b	($FFFFF742).w,d0
000076A0 303B 0000                  		move.w	off_7252(pc,d0.w),d0
000076A4 4EFB 0000                  		jmp	off_7252(pc,d0.w)
000076A8                            ; ===========================================================================
000076A8 0000                       off_7252:	dc.w Resize_SBZ2main-off_7252
000076AA 0000                       		dc.w Resize_SBZ2boss-off_7252
000076AC 0000                       		dc.w Resize_SBZ2boss2-off_7252
000076AE 0000                       		dc.w Resize_SBZ2end-off_7252
000076B0                            ; ===========================================================================
000076B0                            
000076B0                            Resize_SBZ2main:
000076B0 31FC 0800 F726             		move.w	#$800,($FFFFF726).w
000076B6 0C78 1800 F700             		cmpi.w	#$1800,($FFFFF700).w
000076BC 6500                       		bcs.s	locret_727A
000076BE 31FC 0510 F726             		move.w	#$510,($FFFFF726).w
000076C4 0C78 1E00 F700             		cmpi.w	#$1E00,($FFFFF700).w
000076CA 6500                       		bcs.s	locret_727A
000076CC 5438 F742                  		addq.b	#2,($FFFFF742).w
000076D0                            
000076D0                            locret_727A:
000076D0 4E75                       		rts	
000076D2                            ; ===========================================================================
000076D2                            
000076D2                            Resize_SBZ2boss:
000076D2 0C78 1EB0 F700             		cmpi.w	#$1EB0,($FFFFF700).w
000076D8 6500                       		bcs.s	locret_7298
000076DA 6100 0000                  		bsr.w	SingleObjLoad
000076DE 6600                       		bne.s	locret_7298
000076E0 12BC 0083                  		move.b	#$83,(a1)	; load collapsing block	object
000076E4 5438 F742                  		addq.b	#2,($FFFFF742).w
000076E8 701E                       		moveq	#$1E,d0
000076EA 6000 A0B4                  		bra.w	LoadPLC		; load SBZ2 Eggman patterns
000076EE                            ; ===========================================================================
000076EE                            
000076EE                            locret_7298:
000076EE 4E75                       		rts	
000076F0                            ; ===========================================================================
000076F0                            
000076F0                            Resize_SBZ2boss2:
000076F0 0C78 1F60 F700             		cmpi.w	#$1F60,($FFFFF700).w
000076F6 6500                       		bcs.s	loc_72B6
000076F8 6100 0000                  		bsr.w	SingleObjLoad
000076FC 6600                       		bne.s	loc_72B0
000076FE 12BC 0082                  		move.b	#$82,(a1)	; load SBZ2 Eggman object
00007702 5438 F742                  		addq.b	#2,($FFFFF742).w
00007706                            
00007706                            loc_72B0:
00007706 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000770C                            
0000770C                            loc_72B6:
0000770C 6000                       		bra.s	loc_72C2
0000770E                            ; ===========================================================================
0000770E                            
0000770E                            Resize_SBZ2end:
0000770E 0C78 2050 F700             		cmpi.w	#$2050,($FFFFF700).w
00007714 6500                       		bcs.s	loc_72C2
00007716 4E75                       		rts	
00007718                            ; ===========================================================================
00007718                            
00007718                            loc_72C2:
00007718 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
0000771E 4E75                       		rts	
00007720                            ; ===========================================================================
00007720                            
00007720                            Resize_FZ:
00007720 7000                       		moveq	#0,d0
00007722 1038 F742                  		move.b	($FFFFF742).w,d0
00007726 303B 0000                  		move.w	off_72D8(pc,d0.w),d0
0000772A 4EFB 0000                  		jmp	off_72D8(pc,d0.w)
0000772E                            ; ===========================================================================
0000772E 0000 0000                  off_72D8:	dc.w Resize_FZmain-off_72D8, Resize_FZboss-off_72D8
00007732 0000 0000                  		dc.w Resize_FZend-off_72D8, locret_7322-off_72D8
00007736 0000                       		dc.w Resize_FZend2-off_72D8
00007738                            ; ===========================================================================
00007738                            
00007738                            Resize_FZmain:
00007738 0C78 2148 F700             		cmpi.w	#$2148,($FFFFF700).w
0000773E 6500                       		bcs.s	loc_72F4
00007740 5438 F742                  		addq.b	#2,($FFFFF742).w
00007744 701F                       		moveq	#$1F,d0
00007746 6100 A058                  		bsr.w	LoadPLC		; load FZ boss patterns
0000774A                            
0000774A                            loc_72F4:
0000774A 60CC                       		bra.s	loc_72C2
0000774C                            ; ===========================================================================
0000774C                            
0000774C                            Resize_FZboss:
0000774C 0C78 2300 F700             		cmpi.w	#$2300,($FFFFF700).w
00007752 6500                       		bcs.s	loc_7312
00007754 6100 0000                  		bsr.w	SingleObjLoad
00007758 6600                       		bne.s	loc_7312
0000775A 12BC 0085                  		move.b	#$85,(a1)	; load FZ boss object
0000775E 5438 F742                  		addq.b	#2,($FFFFF742).w
00007762 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007768                            
00007768                            loc_7312:
00007768 60AE                       		bra.s	loc_72C2
0000776A                            ; ===========================================================================
0000776A                            
0000776A                            Resize_FZend:
0000776A 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
00007770 6500                       		bcs.s	loc_7320
00007772 5438 F742                  		addq.b	#2,($FFFFF742).w
00007776                            
00007776                            loc_7320:
00007776 60A0                       		bra.s	loc_72C2
00007778                            ; ===========================================================================
00007778                            
00007778                            locret_7322:
00007778 4E75                       		rts	
0000777A                            ; ===========================================================================
0000777A                            
0000777A                            Resize_FZend2:
0000777A 609C                       		bra.s	loc_72C2
0000777C                            ; ===========================================================================
0000777C                            ; ---------------------------------------------------------------------------
0000777C                            ; Ending sequence dynamic screen resizing (empty)
0000777C                            ; ---------------------------------------------------------------------------
0000777C                            
0000777C                            Resize_Ending:				; XREF: Resize_Index
0000777C 4E75                       		rts	
0000777E                            ; ===========================================================================
0000777E                            ; ---------------------------------------------------------------------------
0000777E                            ; Object 11 - GHZ bridge
0000777E                            ; ---------------------------------------------------------------------------
0000777E                            
0000777E                            Obj11:					; XREF: Obj_Index
0000777E 7000                       		moveq	#0,d0
00007780 1028 0024                  		move.b	$24(a0),d0
00007784 323B 0000                  		move.w	Obj11_Index(pc,d0.w),d1
00007788 4EFB 1000                  		jmp	Obj11_Index(pc,d1.w)
0000778C                            ; ===========================================================================
0000778C 0000 0000                  Obj11_Index:	dc.w Obj11_Main-Obj11_Index, Obj11_Action-Obj11_Index
00007790 0000 0000                  		dc.w Obj11_Action2-Obj11_Index,	Obj11_Delete2-Obj11_Index
00007794 0000 0000                  		dc.w Obj11_Delete2-Obj11_Index,	Obj11_Display2-Obj11_Index
00007798                            ; ===========================================================================
00007798                            
00007798                            Obj11_Main:				; XREF: Obj11_Index
00007798 5428 0024                  		addq.b	#2,$24(a0)
0000779C 217C 0000 0000 0004        		move.l	#Map_obj11,4(a0)
000077A4 317C 438E 0002             		move.w	#$438E,2(a0)
000077AA 117C 0004 0001             		move.b	#4,1(a0)
000077B0 117C 0003 0018             		move.b	#3,$18(a0)
000077B6 117C 0080 0019             		move.b	#$80,$19(a0)
000077BC 3428 000C                  		move.w	$C(a0),d2
000077C0 3628 0008                  		move.w	8(a0),d3
000077C4 1810                       		move.b	0(a0),d4	; copy object number ($11) to d4
000077C6 45E8 0028                  		lea	$28(a0),a2	; copy bridge subtype to a2
000077CA 7200                       		moveq	#0,d1
000077CC 1212                       		move.b	(a2),d1		; copy a2 to d1
000077CE 14FC 0000                  		move.b	#0,(a2)+
000077D2 3001                       		move.w	d1,d0
000077D4 E248                       		lsr.w	#1,d0
000077D6 E948                       		lsl.w	#4,d0
000077D8 9640                       		sub.w	d0,d3
000077DA 5501                       		subq.b	#2,d1
000077DC 6500                       		bcs.s	Obj11_Action
000077DE                            
000077DE                            Obj11_MakeBdg:
000077DE 6100 0000                  		bsr.w	SingleObjLoad
000077E2 6600                       		bne.s	Obj11_Action
000077E4 5228 0028                  		addq.b	#1,$28(a0)
000077E8 B668 0008                  		cmp.w	8(a0),d3
000077EC 6600                       		bne.s	loc_73B8
000077EE 0643 0010                  		addi.w	#$10,d3
000077F2 3142 000C                  		move.w	d2,$C(a0)
000077F6 3142 003C                  		move.w	d2,$3C(a0)
000077FA 3A08                       		move.w	a0,d5
000077FC 0445 D000                  		subi.w	#-$3000,d5
00007800 EC4D                       		lsr.w	#6,d5
00007802 0245 007F                  		andi.w	#$7F,d5
00007806 14C5                       		move.b	d5,(a2)+
00007808 5228 0028                  		addq.b	#1,$28(a0)
0000780C                            
0000780C                            loc_73B8:				; XREF: ROM:00007398j
0000780C 3A09                       		move.w	a1,d5
0000780E 0445 D000                  		subi.w	#-$3000,d5
00007812 EC4D                       		lsr.w	#6,d5
00007814 0245 007F                  		andi.w	#$7F,d5
00007818 14C5                       		move.b	d5,(a2)+
0000781A 137C 000A 0024             		move.b	#$A,$24(a1)
00007820 1284                       		move.b	d4,0(a1)	; load bridge object (d4 = $11)
00007822 3342 000C                  		move.w	d2,$C(a1)
00007826 3342 003C                  		move.w	d2,$3C(a1)
0000782A 3343 0008                  		move.w	d3,8(a1)
0000782E 237C 0000 0000 0004        		move.l	#Map_obj11,4(a1)
00007836 337C 438E 0002             		move.w	#$438E,2(a1)
0000783C 137C 0004 0001             		move.b	#4,1(a1)
00007842 137C 0003 0018             		move.b	#3,$18(a1)
00007848 137C 0008 0019             		move.b	#8,$19(a1)
0000784E 0643 0010                  		addi.w	#$10,d3
00007852 51C9 FF8A                  		dbf	d1,Obj11_MakeBdg ; repeat d1 times (length of bridge)
00007856                            
00007856                            Obj11_Action:				; XREF: Obj11_Index
00007856 6100                       		bsr.s	Obj11_Solid
00007858 4A28 003E                  		tst.b	$3E(a0)
0000785C 6700                       		beq.s	Obj11_Display
0000785E 5928 003E                  		subq.b	#4,$3E(a0)
00007862 6100 0000                  		bsr.w	Obj11_Bend
00007866                            
00007866                            Obj11_Display:
00007866 6100 0000                  		bsr.w	DisplaySprite
0000786A 6000 0000                  		bra.w	Obj11_ChkDel
0000786E                            
0000786E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000786E                            
0000786E                            
0000786E                            Obj11_Solid:				; XREF: Obj11_Action
0000786E 7200                       		moveq	#0,d1
00007870 1228 0028                  		move.b	$28(a0),d1
00007874 E749                       		lsl.w	#3,d1
00007876 3401                       		move.w	d1,d2
00007878 5041                       		addq.w	#8,d1
0000787A D442                       		add.w	d2,d2
0000787C 43F8 D000                  		lea	($FFFFD000).w,a1
00007880 4A69 0012                  		tst.w	$12(a1)
00007884 6B00 0000                  		bmi.w	locret_751E
00007888 3029 0008                  		move.w	8(a1),d0
0000788C 9068 0008                  		sub.w	8(a0),d0
00007890 D041                       		add.w	d1,d0
00007892 6B00 0000                  		bmi.w	locret_751E
00007896 B042                       		cmp.w	d2,d0
00007898 6400 0000                  		bcc.w	locret_751E
0000789C 6000                       		bra.s	Platform2
0000789E                            ; End of function Obj11_Solid
0000789E                            
0000789E                            ; ---------------------------------------------------------------------------
0000789E                            ; Platform subroutine
0000789E                            ; ---------------------------------------------------------------------------
0000789E                            
0000789E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000789E                            
0000789E                            
0000789E                            PlatformObject:
0000789E 43F8 D000                  		lea	($FFFFD000).w,a1
000078A2 4A69 0012                  		tst.w	$12(a1)
000078A6 6B00 0000                  		bmi.w	locret_751E
000078AA 3029 0008                  		move.w	8(a1),d0
000078AE 9068 0008                  		sub.w	8(a0),d0
000078B2 D041                       		add.w	d1,d0
000078B4 6B00 0000                  		bmi.w	locret_751E
000078B8 D241                       		add.w	d1,d1
000078BA B041                       		cmp.w	d1,d0
000078BC 6400 0000                  		bcc.w	locret_751E
000078C0                            
000078C0                            Platform2:
000078C0 3028 000C                  		move.w	$C(a0),d0
000078C4 5140                       		subq.w	#8,d0
000078C6                            
000078C6                            Platform3:
000078C6 3429 000C                  		move.w	$C(a1),d2
000078CA 1229 0016                  		move.b	$16(a1),d1
000078CE 4881                       		ext.w	d1
000078D0 D242                       		add.w	d2,d1
000078D2 5841                       		addq.w	#4,d1
000078D4 9041                       		sub.w	d1,d0
000078D6 6200 0000                  		bhi.w	locret_751E
000078DA 0C40 FFF0                  		cmpi.w	#-$10,d0
000078DE 6500 0000                  		bcs.w	locret_751E
000078E2 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000078E6 6B00 0000                  		bmi.w	locret_751E
000078EA 0C29 0006 0024             		cmpi.b	#6,$24(a1)
000078F0 6400 0000                  		bcc.w	locret_751E
000078F4 D440                       		add.w	d0,d2
000078F6 5642                       		addq.w	#3,d2
000078F8 3342 000C                  		move.w	d2,$C(a1)
000078FC 5428 0024                  		addq.b	#2,$24(a0)
00007900                            
00007900                            loc_74AE:
00007900 0829 0003 0022             		btst	#3,$22(a1)
00007906 6700                       		beq.s	loc_74DC
00007908 7000                       		moveq	#0,d0
0000790A 1029 003D                  		move.b	$3D(a1),d0
0000790E ED48                       		lsl.w	#6,d0
00007910 0680 00FF D000             		addi.l	#$FFD000,d0
00007916 2440                       		movea.l	d0,a2
00007918 08AA 0003 0022             		bclr	#3,$22(a2)
0000791E 422A 0025                  		clr.b	$25(a2)
00007922 0C2A 0004 0024             		cmpi.b	#4,$24(a2)
00007928 6600                       		bne.s	loc_74DC
0000792A 552A 0024                  		subq.b	#2,$24(a2)
0000792E                            
0000792E                            loc_74DC:
0000792E 3008                       		move.w	a0,d0
00007930 0440 D000                  		subi.w	#-$3000,d0
00007934 EC48                       		lsr.w	#6,d0
00007936 0240 007F                  		andi.w	#$7F,d0
0000793A 1340 003D                  		move.b	d0,$3D(a1)
0000793E 137C 0000 0026             		move.b	#0,$26(a1)
00007944 337C 0000 0012             		move.w	#0,$12(a1)
0000794A 3369 0010 0014             		move.w	$10(a1),$14(a1)
00007950 0829 0001 0022             		btst	#1,$22(a1)
00007956 6700                       		beq.s	loc_7512
00007958 2F08                       		move.l	a0,-(sp)
0000795A 2049                       		movea.l	a1,a0
0000795C 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
00007962 205F                       		movea.l	(sp)+,a0
00007964                            
00007964                            loc_7512:
00007964 08E9 0003 0022             		bset	#3,$22(a1)
0000796A 08E8 0003 0022             		bset	#3,$22(a0)
00007970                            
00007970                            locret_751E:
00007970 4E75                       		rts	
00007972                            ; End of function PlatformObject
00007972                            
00007972                            ; ---------------------------------------------------------------------------
00007972                            ; Sloped platform subroutine (GHZ collapsing ledges and	SLZ seesaws)
00007972                            ; ---------------------------------------------------------------------------
00007972                            
00007972                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007972                            
00007972                            
00007972                            SlopeObject:				; XREF: Obj1A_Slope; Obj5E_Slope
00007972 43F8 D000                  		lea	($FFFFD000).w,a1
00007976 4A69 0012                  		tst.w	$12(a1)
0000797A 6B00 FFF4                  		bmi.w	locret_751E
0000797E 3029 0008                  		move.w	8(a1),d0
00007982 9068 0008                  		sub.w	8(a0),d0
00007986 D041                       		add.w	d1,d0
00007988 6BE6                       		bmi.s	locret_751E
0000798A D241                       		add.w	d1,d1
0000798C B041                       		cmp.w	d1,d0
0000798E 64E0                       		bcc.s	locret_751E
00007990 0828 0000 0001             		btst	#0,1(a0)
00007996 6700                       		beq.s	loc_754A
00007998 4640                       		not.w	d0
0000799A D041                       		add.w	d1,d0
0000799C                            
0000799C                            loc_754A:
0000799C E248                       		lsr.w	#1,d0
0000799E 7600                       		moveq	#0,d3
000079A0 1632 0000                  		move.b	(a2,d0.w),d3
000079A4 3028 000C                  		move.w	$C(a0),d0
000079A8 9043                       		sub.w	d3,d0
000079AA 6000 FF1A                  		bra.w	Platform3
000079AE                            ; End of function SlopeObject
000079AE                            
000079AE                            
000079AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000079AE                            
000079AE                            
000079AE                            Obj15_Solid:				; XREF: Obj15_SetSolid
000079AE 43F8 D000                  		lea	($FFFFD000).w,a1
000079B2 4A69 0012                  		tst.w	$12(a1)
000079B6 6B00 FFB8                  		bmi.w	locret_751E
000079BA 3029 0008                  		move.w	8(a1),d0
000079BE 9068 0008                  		sub.w	8(a0),d0
000079C2 D041                       		add.w	d1,d0
000079C4 6B00 FFAA                  		bmi.w	locret_751E
000079C8 D241                       		add.w	d1,d1
000079CA B041                       		cmp.w	d1,d0
000079CC 6400 FFA2                  		bcc.w	locret_751E
000079D0 3028 000C                  		move.w	$C(a0),d0
000079D4 9043                       		sub.w	d3,d0
000079D6 6000 FEEE                  		bra.w	Platform3
000079DA                            ; End of function Obj15_Solid
000079DA                            
000079DA                            ; ===========================================================================
000079DA                            
000079DA                            Obj11_Action2:				; XREF: Obj11_Index
000079DA 6100                       		bsr.s	Obj11_WalkOff
000079DC 6100 0000                  		bsr.w	DisplaySprite
000079E0 6000 0000                  		bra.w	Obj11_ChkDel
000079E4                            
000079E4                            ; ---------------------------------------------------------------------------
000079E4                            ; Subroutine allowing Sonic to walk off a bridge
000079E4                            ; ---------------------------------------------------------------------------
000079E4                            
000079E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000079E4                            
000079E4                            
000079E4                            Obj11_WalkOff:				; XREF: Obj11_Action2
000079E4 7200                       		moveq	#0,d1
000079E6 1228 0028                  		move.b	$28(a0),d1
000079EA E749                       		lsl.w	#3,d1
000079EC 3401                       		move.w	d1,d2
000079EE 5041                       		addq.w	#8,d1
000079F0 6100                       		bsr.s	ExitPlatform2
000079F2 6400                       		bcc.s	locret_75BE
000079F4 E848                       		lsr.w	#4,d0
000079F6 1140 003F                  		move.b	d0,$3F(a0)
000079FA 1028 003E                  		move.b	$3E(a0),d0
000079FE 0C00 0040                  		cmpi.b	#$40,d0
00007A02 6700                       		beq.s	loc_75B6
00007A04 5828 003E                  		addq.b	#4,$3E(a0)
00007A08                            
00007A08                            loc_75B6:
00007A08 6100 0000                  		bsr.w	Obj11_Bend
00007A0C 6100 0000                  		bsr.w	Obj11_MoveSonic
00007A10                            
00007A10                            locret_75BE:
00007A10 4E75                       		rts	
00007A12                            ; End of function Obj11_WalkOff
00007A12                            
00007A12                            ; ---------------------------------------------------------------------------
00007A12                            ; Subroutine allowing Sonic to walk or jump off	a platform
00007A12                            ; ---------------------------------------------------------------------------
00007A12                            
00007A12                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007A12                            
00007A12                            
00007A12                            ExitPlatform:
00007A12 3401                       		move.w	d1,d2
00007A14                            
00007A14                            ExitPlatform2:
00007A14 D442                       		add.w	d2,d2
00007A16 43F8 D000                  		lea	($FFFFD000).w,a1
00007A1A 0829 0001 0022             		btst	#1,$22(a1)
00007A20 6600                       		bne.s	loc_75E0
00007A22 3029 0008                  		move.w	8(a1),d0
00007A26 9068 0008                  		sub.w	8(a0),d0
00007A2A D041                       		add.w	d1,d0
00007A2C 6B00                       		bmi.s	loc_75E0
00007A2E B042                       		cmp.w	d2,d0
00007A30 6500                       		bcs.s	locret_75F2
00007A32                            
00007A32                            loc_75E0:
00007A32 08A9 0003 0022             		bclr	#3,$22(a1)
00007A38 117C 0002 0024             		move.b	#2,$24(a0)
00007A3E 08A8 0003 0022             		bclr	#3,$22(a0)
00007A44                            
00007A44                            locret_75F2:
00007A44 4E75                       		rts	
00007A46                            ; End of function ExitPlatform
00007A46                            
00007A46                            
00007A46                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007A46                            
00007A46                            
00007A46                            Obj11_MoveSonic:			; XREF: Obj11_WalkOff
00007A46 7000                       		moveq	#0,d0
00007A48 1028 003F                  		move.b	$3F(a0),d0
00007A4C 1030 0029                  		move.b	$29(a0,d0.w),d0
00007A50 ED48                       		lsl.w	#6,d0
00007A52 0680 00FF D000             		addi.l	#$FFD000,d0
00007A58 2440                       		movea.l	d0,a2
00007A5A 43F8 D000                  		lea	($FFFFD000).w,a1
00007A5E 302A 000C                  		move.w	$C(a2),d0
00007A62 5140                       		subq.w	#8,d0
00007A64 7200                       		moveq	#0,d1
00007A66 1229 0016                  		move.b	$16(a1),d1
00007A6A 9041                       		sub.w	d1,d0
00007A6C 3340 000C                  		move.w	d0,$C(a1)	; change Sonic's position on y-axis
00007A70 4E75                       		rts	
00007A72                            ; End of function Obj11_MoveSonic
00007A72                            
00007A72                            
00007A72                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007A72                            
00007A72                            
00007A72                            Obj11_Bend:				; XREF: Obj11_Action; Obj11_WalkOff
00007A72 1028 003E                  		move.b	$3E(a0),d0
00007A76 6100 B1AA                  		bsr.w	CalcSine
00007A7A 3800                       		move.w	d0,d4
00007A7C 49F9 0000 0000             		lea	(Obj11_BendData2).l,a4
00007A82 7000                       		moveq	#0,d0
00007A84 1028 0028                  		move.b	$28(a0),d0
00007A88 E948                       		lsl.w	#4,d0
00007A8A 7600                       		moveq	#0,d3
00007A8C 1628 003F                  		move.b	$3F(a0),d3
00007A90 3403                       		move.w	d3,d2
00007A92 D640                       		add.w	d0,d3
00007A94 7A00                       		moveq	#0,d5
00007A96 4BF9 0000 0000             		lea	(Obj11_BendData).l,a5
00007A9C 1A35 3000                  		move.b	(a5,d3.w),d5
00007AA0 0243 000F                  		andi.w	#$F,d3
00007AA4 E94B                       		lsl.w	#4,d3
00007AA6 47F4 3000                  		lea	(a4,d3.w),a3
00007AAA 45E8 0029                  		lea	$29(a0),a2
00007AAE                            
00007AAE                            loc_765C:
00007AAE 7000                       		moveq	#0,d0
00007AB0 101A                       		move.b	(a2)+,d0
00007AB2 ED48                       		lsl.w	#6,d0
00007AB4 0680 00FF D000             		addi.l	#$FFD000,d0
00007ABA 2240                       		movea.l	d0,a1
00007ABC 7000                       		moveq	#0,d0
00007ABE 101B                       		move.b	(a3)+,d0
00007AC0 5240                       		addq.w	#1,d0
00007AC2 C0C5                       		mulu.w	d5,d0
00007AC4 C0C4                       		mulu.w	d4,d0
00007AC6 4840                       		swap	d0
00007AC8 D069 003C                  		add.w	$3C(a1),d0
00007ACC 3340 000C                  		move.w	d0,$C(a1)
00007AD0 51CA FFDC                  		dbf	d2,loc_765C
00007AD4 7000                       		moveq	#0,d0
00007AD6 1028 0028                  		move.b	$28(a0),d0
00007ADA 7600                       		moveq	#0,d3
00007ADC 1628 003F                  		move.b	$3F(a0),d3
00007AE0 5203                       		addq.b	#1,d3
00007AE2 9600                       		sub.b	d0,d3
00007AE4 4403                       		neg.b	d3
00007AE6 6B00                       		bmi.s	locret_76CA
00007AE8 3403                       		move.w	d3,d2
00007AEA E94B                       		lsl.w	#4,d3
00007AEC 47F4 3000                  		lea	(a4,d3.w),a3
00007AF0 D6C2                       		adda.w	d2,a3
00007AF2 5342                       		subq.w	#1,d2
00007AF4 6500                       		bcs.s	locret_76CA
00007AF6                            
00007AF6                            loc_76A4:
00007AF6 7000                       		moveq	#0,d0
00007AF8 101A                       		move.b	(a2)+,d0
00007AFA ED48                       		lsl.w	#6,d0
00007AFC 0680 00FF D000             		addi.l	#$FFD000,d0
00007B02 2240                       		movea.l	d0,a1
00007B04 7000                       		moveq	#0,d0
00007B06 1023                       		move.b	-(a3),d0
00007B08 5240                       		addq.w	#1,d0
00007B0A C0C5                       		mulu.w	d5,d0
00007B0C C0C4                       		mulu.w	d4,d0
00007B0E 4840                       		swap	d0
00007B10 D069 003C                  		add.w	$3C(a1),d0
00007B14 3340 000C                  		move.w	d0,$C(a1)
00007B18 51CA FFDC                  		dbf	d2,loc_76A4
00007B1C                            
00007B1C                            locret_76CA:
00007B1C 4E75                       		rts	
00007B1E                            ; End of function Obj11_Bend
00007B1E                            
00007B1E                            ; ===========================================================================
00007B1E                            ; ---------------------------------------------------------------------------
00007B1E                            ; GHZ bridge-bending data
00007B1E                            ; (Defines how the bridge bends	when Sonic walks across	it)
00007B1E                            ; ---------------------------------------------------------------------------
00007B1E                            Obj11_BendData:	incbin	misc\ghzbend1.bin
00007C2E                            		even
00007C2E                            Obj11_BendData2:incbin	misc\ghzbend2.bin
00007D2E                            		even
00007D2E                            
00007D2E                            ; ===========================================================================
00007D2E                            
00007D2E                            Obj11_ChkDel:				; XREF: Obj11_Display; Obj11_Action2
00007D2E 3028 0008                  		move.w	8(a0),d0
00007D32 0240 FF80                  		andi.w	#$FF80,d0
00007D36 3238 F700                  		move.w	($FFFFF700).w,d1
00007D3A 0441 0080                  		subi.w	#$80,d1
00007D3E 0241 FF80                  		andi.w	#$FF80,d1
00007D42 9041                       		sub.w	d1,d0
00007D44 0C40 0280                  		cmpi.w	#$280,d0
00007D48 6200 0000                  		bhi.w	Obj11_DelAll
00007D4C 4E75                       		rts	
00007D4E                            ; ===========================================================================
00007D4E                            
00007D4E                            Obj11_DelAll:				; XREF: Obj11_ChkDel
00007D4E 7400                       		moveq	#0,d2
00007D50 45E8 0028                  		lea	$28(a0),a2	; load bridge length
00007D54 141A                       		move.b	(a2)+,d2	; move bridge length to	d2
00007D56 5302                       		subq.b	#1,d2		; subtract 1
00007D58 6500                       		bcs.s	Obj11_Delete
00007D5A                            
00007D5A                            Obj11_DelLoop:
00007D5A 7000                       		moveq	#0,d0
00007D5C 101A                       		move.b	(a2)+,d0
00007D5E ED48                       		lsl.w	#6,d0
00007D60 0680 00FF D000             		addi.l	#$FFD000,d0
00007D66 2240                       		movea.l	d0,a1
00007D68 B048                       		cmp.w	a0,d0
00007D6A 6700                       		beq.s	loc_791E
00007D6C 6100 0000                  		bsr.w	DeleteObject2
00007D70                            
00007D70                            loc_791E:
00007D70 51CA FFE8                  		dbf	d2,Obj11_DelLoop ; repeat d2 times (bridge length)
00007D74                            
00007D74                            Obj11_Delete:
00007D74 6100 0000                  		bsr.w	DeleteObject
00007D78 4E75                       		rts	
00007D7A                            ; ===========================================================================
00007D7A                            
00007D7A                            Obj11_Delete2:				; XREF: Obj11_Index
00007D7A 6100 0000                  		bsr.w	DeleteObject
00007D7E 4E75                       		rts	
00007D80                            ; ===========================================================================
00007D80                            
00007D80                            Obj11_Display2:				; XREF: Obj11_Index
00007D80 6100 0000                  		bsr.w	DisplaySprite
00007D84 4E75                       		rts	
00007D86                            ; ===========================================================================
00007D86                            ; ---------------------------------------------------------------------------
00007D86                            ; Sprite mappings - GHZ	bridge
00007D86                            ; ---------------------------------------------------------------------------
00007D86                            Map_obj11:
00007D86                            	include "_maps\obj11.asm"
00007D86                            ; ---------------------------------------------------------------------------
00007D86                            ; Sprite mappings - GHZ	bridge
00007D86                            ; ---------------------------------------------------------------------------
00007D86 0000 0000                  		dc.w byte_793A-Map_obj11, byte_7940-Map_obj11
00007D8A 0000                       		dc.w byte_794B-Map_obj11
00007D8C 01                         byte_793A:	dc.b 1
00007D8D F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00007D92 02                         byte_7940:	dc.b 2
00007D93 F804 0004 F0               		dc.b $F8, 4, 0,	4, $F0
00007D98 000C 0006 F0               		dc.b 0,	$C, 0, 6, $F0
00007D9D 01                         byte_794B:	dc.b 1
00007D9E FC04 0008 F8               		dc.b $FC, 4, 0,	8, $F8
00007DA4 00                         		even
00007DA4 00                         		even
00007DA4                            
00007DA4                            ; ===========================================================================
00007DA4                            ; ---------------------------------------------------------------------------
00007DA4                            ; Object 15 - swinging platforms (GHZ, MZ, SLZ)
00007DA4                            ;	    - spiked ball on a chain (SBZ)
00007DA4                            ; ---------------------------------------------------------------------------
00007DA4                            
00007DA4                            Obj15:					; XREF: Obj_Index
00007DA4 7000                       		moveq	#0,d0
00007DA6 1028 0024                  		move.b	$24(a0),d0
00007DAA 323B 0000                  		move.w	Obj15_Index(pc,d0.w),d1
00007DAE 4EFB 1000                  		jmp	Obj15_Index(pc,d1.w)
00007DB2                            ; ===========================================================================
00007DB2 0000 0000                  Obj15_Index:	dc.w Obj15_Main-Obj15_Index, Obj15_SetSolid-Obj15_Index
00007DB6 0000 0000                  		dc.w Obj15_Action2-Obj15_Index,	Obj15_Delete-Obj15_Index
00007DBA 0000 0000                  		dc.w Obj15_Delete-Obj15_Index, Obj15_Display-Obj15_Index
00007DBE 0000                       		dc.w Obj15_Action-Obj15_Index
00007DC0                            ; ===========================================================================
00007DC0                            
00007DC0                            Obj15_Main:				; XREF: Obj15_Index
00007DC0 5428 0024                  		addq.b	#2,$24(a0)
00007DC4 217C 0000 0000 0004        		move.l	#Map_obj15,4(a0) ; GHZ and MZ specific code
00007DCC 317C 4380 0002             		move.w	#$4380,2(a0)
00007DD2 117C 0004 0001             		move.b	#4,1(a0)
00007DD8 117C 0003 0018             		move.b	#3,$18(a0)
00007DDE 117C 0018 0019             		move.b	#$18,$19(a0)
00007DE4 117C 0008 0016             		move.b	#8,$16(a0)
00007DEA 3168 000C 0038             		move.w	$C(a0),$38(a0)
00007DF0 3168 0008 003A             		move.w	8(a0),$3A(a0)
00007DF6 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00007DFC 6600                       		bne.s	Obj15_NotSLZ
00007DFE 217C 0000 0000 0004        		move.l	#Map_obj15a,4(a0) ; SLZ	specific code
00007E06 317C 43DC 0002             		move.w	#$43DC,2(a0)
00007E0C 117C 0020 0019             		move.b	#$20,$19(a0)
00007E12 117C 0010 0016             		move.b	#$10,$16(a0)
00007E18 117C 0099 0020             		move.b	#$99,$20(a0)
00007E1E                            
00007E1E                            Obj15_NotSLZ:
00007E1E 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00007E24 6600                       		bne.s	Obj15_SetLength
00007E26 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0) ; SBZ	specific code
00007E2E 317C 0391 0002             		move.w	#$391,2(a0)
00007E34 117C 0018 0019             		move.b	#$18,$19(a0)
00007E3A 117C 0018 0016             		move.b	#$18,$16(a0)
00007E40 117C 0086 0020             		move.b	#$86,$20(a0)
00007E46 117C 000C 0024             		move.b	#$C,$24(a0)
00007E4C                            
00007E4C                            Obj15_SetLength:
00007E4C 1810                       		move.b	0(a0),d4
00007E4E 7200                       		moveq	#0,d1
00007E50 45E8 0028                  		lea	$28(a0),a2	; move chain length to a2
00007E54 1212                       		move.b	(a2),d1		; move a2 to d1
00007E56 3F01                       		move.w	d1,-(sp)
00007E58 0241 000F                  		andi.w	#$F,d1
00007E5C 14FC 0000                  		move.b	#0,(a2)+
00007E60 3601                       		move.w	d1,d3
00007E62 E94B                       		lsl.w	#4,d3
00007E64 5003                       		addq.b	#8,d3
00007E66 1143 003C                  		move.b	d3,$3C(a0)
00007E6A 5103                       		subq.b	#8,d3
00007E6C 4A28 001A                  		tst.b	$1A(a0)
00007E70 6700                       		beq.s	Obj15_MakeChain
00007E72 5003                       		addq.b	#8,d3
00007E74 5341                       		subq.w	#1,d1
00007E76                            
00007E76                            Obj15_MakeChain:
00007E76 6100 0000                  		bsr.w	SingleObjLoad
00007E7A 6600                       		bne.s	loc_7A92
00007E7C 5228 0028                  		addq.b	#1,$28(a0)
00007E80 3A09                       		move.w	a1,d5
00007E82 0445 D000                  		subi.w	#-$3000,d5
00007E86 EC4D                       		lsr.w	#6,d5
00007E88 0245 007F                  		andi.w	#$7F,d5
00007E8C 14C5                       		move.b	d5,(a2)+
00007E8E 137C 000A 0024             		move.b	#$A,$24(a1)
00007E94 1284                       		move.b	d4,0(a1)	; load swinging	object
00007E96 2368 0004 0004             		move.l	4(a0),4(a1)
00007E9C 3368 0002 0002             		move.w	2(a0),2(a1)
00007EA2 08A9 0006 0002             		bclr	#6,2(a1)
00007EA8 137C 0004 0001             		move.b	#4,1(a1)
00007EAE 137C 0004 0018             		move.b	#4,$18(a1)
00007EB4 137C 0008 0019             		move.b	#8,$19(a1)
00007EBA 137C 0001 001A             		move.b	#1,$1A(a1)
00007EC0 1343 003C                  		move.b	d3,$3C(a1)
00007EC4 0403 0010                  		subi.b	#$10,d3
00007EC8 6400                       		bcc.s	loc_7A8E
00007ECA 137C 0002 001A             		move.b	#2,$1A(a1)
00007ED0 137C 0003 0018             		move.b	#3,$18(a1)
00007ED6 08E9 0006 0002             		bset	#6,2(a1)
00007EDC                            
00007EDC                            loc_7A8E:
00007EDC 51C9 FF98                  		dbf	d1,Obj15_MakeChain ; repeat d1 times (chain length)
00007EE0                            
00007EE0                            loc_7A92:
00007EE0 3A08                       		move.w	a0,d5
00007EE2 0445 D000                  		subi.w	#-$3000,d5
00007EE6 EC4D                       		lsr.w	#6,d5
00007EE8 0245 007F                  		andi.w	#$7F,d5
00007EEC 14C5                       		move.b	d5,(a2)+
00007EEE 317C 4080 0026             		move.w	#$4080,$26(a0)
00007EF4 317C FE00 003E             		move.w	#-$200,$3E(a0)
00007EFA 321F                       		move.w	(sp)+,d1
00007EFC 0801 0004                  		btst	#4,d1		; is object type $8X ?
00007F00 6700                       		beq.s	loc_7AD4	; if not, branch
00007F02 217C 0000 0000 0004        		move.l	#Map_obj48,4(a0) ; use GHZ ball	mappings
00007F0A 317C 43AA 0002             		move.w	#$43AA,2(a0)
00007F10 117C 0001 001A             		move.b	#1,$1A(a0)
00007F16 117C 0002 0018             		move.b	#2,$18(a0)
00007F1C 117C 0081 0020             		move.b	#$81,$20(a0)	; make object hurt when	touched
00007F22                            
00007F22                            loc_7AD4:
00007F22 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; is zone SBZ?
00007F28 6700                       		beq.s	Obj15_Action	; if yes, branch
00007F2A                            
00007F2A                            Obj15_SetSolid:				; XREF: Obj15_Index
00007F2A 7200                       		moveq	#0,d1
00007F2C 1228 0019                  		move.b	$19(a0),d1
00007F30 7600                       		moveq	#0,d3
00007F32 1628 0016                  		move.b	$16(a0),d3
00007F36 6100 FA76                  		bsr.w	Obj15_Solid
00007F3A                            
00007F3A                            Obj15_Action:				; XREF: Obj15_Index
00007F3A 6100 0000                  		bsr.w	Obj15_Move
00007F3E 6100 0000                  		bsr.w	DisplaySprite
00007F42 6000 0000                  		bra.w	Obj15_ChkDel
00007F46                            ; ===========================================================================
00007F46                            
00007F46                            Obj15_Action2:				; XREF: Obj15_Index
00007F46 7200                       		moveq	#0,d1
00007F48 1228 0019                  		move.b	$19(a0),d1
00007F4C 6100 FAC4                  		bsr.w	ExitPlatform
00007F50 3F28 0008                  		move.w	8(a0),-(sp)
00007F54 6100 0000                  		bsr.w	Obj15_Move
00007F58 341F                       		move.w	(sp)+,d2
00007F5A 7600                       		moveq	#0,d3
00007F5C 1628 0016                  		move.b	$16(a0),d3
00007F60 5203                       		addq.b	#1,d3
00007F62 6100 0000                  		bsr.w	MvSonicOnPtfm
00007F66 6100 0000                  		bsr.w	DisplaySprite
00007F6A 6000 0000                  		bra.w	Obj15_ChkDel
00007F6E                            
00007F6E 4E75                       		rts
00007F70                            
00007F70                            ; ---------------------------------------------------------------------------
00007F70                            ; Subroutine to	change Sonic's position with a platform
00007F70                            ; ---------------------------------------------------------------------------
00007F70                            
00007F70                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007F70                            
00007F70                            
00007F70                            MvSonicOnPtfm:
00007F70 43F8 D000                  		lea	($FFFFD000).w,a1
00007F74 3028 000C                  		move.w	$C(a0),d0
00007F78 9043                       		sub.w	d3,d0
00007F7A 6000                       		bra.s	MvSonic2
00007F7C                            ; End of function MvSonicOnPtfm
00007F7C                            
00007F7C                            ; ---------------------------------------------------------------------------
00007F7C                            ; Subroutine to	change Sonic's position with a platform
00007F7C                            ; ---------------------------------------------------------------------------
00007F7C                            
00007F7C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007F7C                            
00007F7C                            
00007F7C                            MvSonicOnPtfm2:
00007F7C 43F8 D000                  		lea	($FFFFD000).w,a1
00007F80 3028 000C                  		move.w	$C(a0),d0
00007F84 0440 0009                  		subi.w	#9,d0
00007F88                            
00007F88                            MvSonic2:
00007F88 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00007F8C 6B00                       		bmi.s	locret_7B62
00007F8E 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00007F94 6400                       		bcc.s	locret_7B62
00007F96 4A78 FE08                  		tst.w	($FFFFFE08).w
00007F9A 6600                       		bne.s	locret_7B62
00007F9C 7200                       		moveq	#0,d1
00007F9E 1229 0016                  		move.b	$16(a1),d1
00007FA2 9041                       		sub.w	d1,d0
00007FA4 3340 000C                  		move.w	d0,$C(a1)
00007FA8 9468 0008                  		sub.w	8(a0),d2
00007FAC 9569 0008                  		sub.w	d2,8(a1)
00007FB0                            
00007FB0                            locret_7B62:
00007FB0 4E75                       		rts	
00007FB2                            ; End of function MvSonicOnPtfm2
00007FB2                            
00007FB2                            
00007FB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007FB2                            
00007FB2                            
00007FB2                            Obj15_Move:				; XREF: Obj15_Action; Obj15_Action2
00007FB2 1038 FE78                  		move.b	($FFFFFE78).w,d0
00007FB6 323C 0080                  		move.w	#$80,d1
00007FBA 0828 0000 0022             		btst	#0,$22(a0)
00007FC0 6700                       		beq.s	loc_7B78
00007FC2 4440                       		neg.w	d0
00007FC4 D041                       		add.w	d1,d0
00007FC6                            
00007FC6                            loc_7B78:
00007FC6 6000                       		bra.s	Obj15_Move2
00007FC8                            ; End of function Obj15_Move
00007FC8                            
00007FC8                            
00007FC8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007FC8                            
00007FC8                            
00007FC8                            Obj48_Move:				; XREF: Obj48_Display2
00007FC8 4A28 003D                  		tst.b	$3D(a0)
00007FCC 6600                       		bne.s	loc_7B9C
00007FCE 3028 003E                  		move.w	$3E(a0),d0
00007FD2 5040                       		addq.w	#8,d0
00007FD4 3140 003E                  		move.w	d0,$3E(a0)
00007FD8 D168 0026                  		add.w	d0,$26(a0)
00007FDC 0C40 0200                  		cmpi.w	#$200,d0
00007FE0 6600                       		bne.s	loc_7BB6
00007FE2 117C 0001 003D             		move.b	#1,$3D(a0)
00007FE8 6000                       		bra.s	loc_7BB6
00007FEA                            ; ===========================================================================
00007FEA                            
00007FEA                            loc_7B9C:
00007FEA 3028 003E                  		move.w	$3E(a0),d0
00007FEE 5140                       		subq.w	#8,d0
00007FF0 3140 003E                  		move.w	d0,$3E(a0)
00007FF4 D168 0026                  		add.w	d0,$26(a0)
00007FF8 0C40 FE00                  		cmpi.w	#-$200,d0
00007FFC 6600                       		bne.s	loc_7BB6
00007FFE 117C 0000 003D             		move.b	#0,$3D(a0)
00008004                            
00008004                            loc_7BB6:
00008004 1028 0026                  		move.b	$26(a0),d0
00008008                            ; End of function Obj48_Move
00008008                            
00008008                            
00008008                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008008                            
00008008                            
00008008                            Obj15_Move2:				; XREF: Obj15_Move; Obj48_Display
00008008 6100 AC18                  		bsr.w	CalcSine
0000800C 3428 0038                  		move.w	$38(a0),d2
00008010 3628 003A                  		move.w	$3A(a0),d3
00008014 45E8 0028                  		lea	$28(a0),a2
00008018 7C00                       		moveq	#0,d6
0000801A 1C1A                       		move.b	(a2)+,d6
0000801C                            
0000801C                            loc_7BCE:
0000801C 7800                       		moveq	#0,d4
0000801E 181A                       		move.b	(a2)+,d4
00008020 ED4C                       		lsl.w	#6,d4
00008022 0684 00FF D000             		addi.l	#$FFD000,d4
00008028 2244                       		movea.l	d4,a1
0000802A 7800                       		moveq	#0,d4
0000802C 1829 003C                  		move.b	$3C(a1),d4
00008030 2A04                       		move.l	d4,d5
00008032 C9C0                       		muls.w	d0,d4
00008034 E084                       		asr.l	#8,d4
00008036 CBC1                       		muls.w	d1,d5
00008038 E085                       		asr.l	#8,d5
0000803A D842                       		add.w	d2,d4
0000803C DA43                       		add.w	d3,d5
0000803E 3344 000C                  		move.w	d4,$C(a1)
00008042 3345 0008                  		move.w	d5,8(a1)
00008046 51CE FFD4                  		dbf	d6,loc_7BCE
0000804A 4E75                       		rts	
0000804C                            ; End of function Obj15_Move2
0000804C                            
0000804C                            ; ===========================================================================
0000804C                            
0000804C                            Obj15_ChkDel:				; XREF: Obj15_Action; Obj15_Action2
0000804C 3028 003A                  		move.w	$3A(a0),d0
00008050 0240 FF80                  		andi.w	#$FF80,d0
00008054 3238 F700                  		move.w	($FFFFF700).w,d1
00008058 0441 0080                  		subi.w	#$80,d1
0000805C 0241 FF80                  		andi.w	#$FF80,d1
00008060 9041                       		sub.w	d1,d0
00008062 0C40 0280                  		cmpi.w	#$280,d0
00008066 6200 0000                  		bhi.w	Obj15_DelAll
0000806A 4E75                       		rts	
0000806C                            ; ===========================================================================
0000806C                            
0000806C                            Obj15_DelAll:				; XREF: Obj15_ChkDel
0000806C 7400                       		moveq	#0,d2
0000806E 45E8 0028                  		lea	$28(a0),a2
00008072 141A                       		move.b	(a2)+,d2
00008074                            
00008074                            Obj15_DelLoop:
00008074 7000                       		moveq	#0,d0
00008076 101A                       		move.b	(a2)+,d0
00008078 ED48                       		lsl.w	#6,d0
0000807A 0680 00FF D000             		addi.l	#$FFD000,d0
00008080 2240                       		movea.l	d0,a1
00008082 6100 0000                  		bsr.w	DeleteObject2
00008086 51CA FFEC                  		dbf	d2,Obj15_DelLoop ; repeat for length of	chain
0000808A 4E75                       		rts	
0000808C                            ; ===========================================================================
0000808C                            
0000808C                            Obj15_Delete:				; XREF: Obj15_Index
0000808C 6100 0000                  		bsr.w	DeleteObject
00008090 4E75                       		rts	
00008092                            ; ===========================================================================
00008092                            
00008092                            Obj15_Display:				; XREF: Obj15_Index
00008092 6000 0000                  		bra.w	DisplaySprite
00008096                            ; ===========================================================================
00008096                            ; ---------------------------------------------------------------------------
00008096                            ; Sprite mappings - GHZ	and MZ swinging	platforms
00008096                            ; ---------------------------------------------------------------------------
00008096                            Map_obj15:
00008096                            	include "_maps\obj15ghz.asm"
00008096                            ; ---------------------------------------------------------------------------
00008096                            ; Sprite mappings - GHZ	and MZ swinging	platforms
00008096                            ; ---------------------------------------------------------------------------
00008096 0000                       		dc.w byte_7C4E-Map_obj15
00008098 0000                       		dc.w byte_7C59-Map_obj15
0000809A 0000                       		dc.w byte_7C5F-Map_obj15
0000809C 02                         byte_7C4E:	dc.b 2
0000809D F809 0004 E8               		dc.b $F8, 9, 0,	4, $E8
000080A2 F809 0004 00               		dc.b $F8, 9, 0,	4, 0
000080A7 01                         byte_7C59:	dc.b 1
000080A8 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000080AD 01                         byte_7C5F:	dc.b 1
000080AE F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
000080B4 00                         		even
000080B4 00                         		even
000080B4                            
000080B4                            ; ---------------------------------------------------------------------------
000080B4                            ; Sprite mappings - SLZ	swinging platforms
000080B4                            ; ---------------------------------------------------------------------------
000080B4                            Map_obj15a:
000080B4                            	include "_maps\obj15slz.asm"
000080B4                            ; ---------------------------------------------------------------------------
000080B4                            ; Sprite mappings - SLZ	swinging platforms
000080B4                            ; ---------------------------------------------------------------------------
000080B4 0000                       		dc.w byte_7C6C-Map_obj15a
000080B6 0000                       		dc.w byte_7C95-Map_obj15a
000080B8 0000                       		dc.w byte_7C9B-Map_obj15a
000080BA 08                         byte_7C6C:	dc.b 8
000080BB F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
000080C0 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
000080C5 F005 0014 D0               		dc.b $F0, 5, 0,	$14, $D0
000080CA F005 0814 20               		dc.b $F0, 5, 8,	$14, $20
000080CF 1004 0018 E0               		dc.b $10, 4, 0,	$18, $E0
000080D4 1004 0818 10               		dc.b $10, 4, 8,	$18, $10
000080D9 1001 001A F8               		dc.b $10, 1, 0,	$1A, $F8
000080DE 1001 081A 00               		dc.b $10, 1, 8,	$1A, 0
000080E3 01                         byte_7C95:	dc.b 1
000080E4 F805 4000 F8               		dc.b $F8, 5, $40, 0, $F8
000080E9 01                         byte_7C9B:	dc.b 1
000080EA F805 001C F8               		dc.b $F8, 5, 0,	$1C, $F8
000080F0 00                         		even
000080F0 00                         		even
000080F0                            
000080F0                            ; ===========================================================================
000080F0                            ; ---------------------------------------------------------------------------
000080F0                            ; Object 17 - helix of spikes on a pole	(GHZ)
000080F0                            ; ---------------------------------------------------------------------------
000080F0                            
000080F0                            Obj17:					; XREF: Obj_Index
000080F0 7000                       		moveq	#0,d0
000080F2 1028 0024                  		move.b	$24(a0),d0
000080F6 323B 0000                  		move.w	Obj17_Index(pc,d0.w),d1
000080FA 4EFB 1000                  		jmp	Obj17_Index(pc,d1.w)
000080FE                            ; ===========================================================================
000080FE 0000                       Obj17_Index:	dc.w Obj17_Main-Obj17_Index
00008100 0000                       		dc.w Obj17_Action-Obj17_Index
00008102 0000                       		dc.w Obj17_Action-Obj17_Index
00008104 0000                       		dc.w Obj17_Delete-Obj17_Index
00008106 0000                       		dc.w Obj17_Display-Obj17_Index
00008108                            ; ===========================================================================
00008108                            
00008108                            Obj17_Main:				; XREF: Obj17_Index
00008108 5428 0024                  		addq.b	#2,$24(a0)
0000810C 217C 0000 0000 0004        		move.l	#Map_obj17,4(a0)
00008114 317C 4398 0002             		move.w	#$4398,2(a0)
0000811A 117C 0007 0022             		move.b	#7,$22(a0)
00008120 117C 0004 0001             		move.b	#4,1(a0)
00008126 117C 0003 0018             		move.b	#3,$18(a0)
0000812C 117C 0008 0019             		move.b	#8,$19(a0)
00008132 3428 000C                  		move.w	$C(a0),d2
00008136 3628 0008                  		move.w	8(a0),d3
0000813A 1810                       		move.b	0(a0),d4
0000813C 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
00008140 7200                       		moveq	#0,d1
00008142 1212                       		move.b	(a2),d1		; move a2 to d1
00008144 14FC 0000                  		move.b	#0,(a2)+
00008148 3001                       		move.w	d1,d0
0000814A E248                       		lsr.w	#1,d0
0000814C E948                       		lsl.w	#4,d0
0000814E 9640                       		sub.w	d0,d3
00008150 5501                       		subq.b	#2,d1
00008152 6500                       		bcs.s	Obj17_Action
00008154 7C00                       		moveq	#0,d6
00008156                            
00008156                            Obj17_MakeHelix:
00008156 6100 0000                  		bsr.w	SingleObjLoad
0000815A 6600                       		bne.s	Obj17_Action
0000815C 5228 0028                  		addq.b	#1,$28(a0)
00008160 3A09                       		move.w	a1,d5
00008162 0445 D000                  		subi.w	#$D000,d5
00008166 EC4D                       		lsr.w	#6,d5
00008168 0245 007F                  		andi.w	#$7F,d5
0000816C 14C5                       		move.b	d5,(a2)+
0000816E 137C 0008 0024             		move.b	#8,$24(a1)
00008174 1284                       		move.b	d4,0(a1)
00008176 3342 000C                  		move.w	d2,$C(a1)
0000817A 3343 0008                  		move.w	d3,8(a1)
0000817E 2368 0004 0004             		move.l	4(a0),4(a1)
00008184 337C 4398 0002             		move.w	#$4398,2(a1)
0000818A 137C 0004 0001             		move.b	#4,1(a1)
00008190 137C 0003 0018             		move.b	#3,$18(a1)
00008196 137C 0008 0019             		move.b	#8,$19(a1)
0000819C 1346 003E                  		move.b	d6,$3E(a1)
000081A0 5206                       		addq.b	#1,d6
000081A2 0206 0007                  		andi.b	#7,d6
000081A6 0643 0010                  		addi.w	#$10,d3
000081AA B668 0008                  		cmp.w	8(a0),d3
000081AE 6600                       		bne.s	loc_7D78
000081B0 1146 003E                  		move.b	d6,$3E(a0)
000081B4 5206                       		addq.b	#1,d6
000081B6 0206 0007                  		andi.b	#7,d6
000081BA 0643 0010                  		addi.w	#$10,d3
000081BE 5228 0028                  		addq.b	#1,$28(a0)
000081C2                            
000081C2                            loc_7D78:
000081C2 51C9 FF92                  		dbf	d1,Obj17_MakeHelix ; repeat d1 times (helix length)
000081C6                            
000081C6                            Obj17_Action:				; XREF: Obj17_Index
000081C6 6100 0000                  		bsr.w	Obj17_RotateSpikes
000081CA 6100 0000                  		bsr.w	DisplaySprite
000081CE 6000 0000                  		bra.w	Obj17_ChkDel
000081D2                            
000081D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000081D2                            
000081D2                            
000081D2                            Obj17_RotateSpikes:			; XREF: Obj17_Action; Obj17_Display
000081D2 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
000081D6 117C 0000 0020             		move.b	#0,$20(a0)	; make object harmless
000081DC D028 003E                  		add.b	$3E(a0),d0
000081E0 0200 0007                  		andi.b	#7,d0
000081E4 1140 001A                  		move.b	d0,$1A(a0)	; change current frame
000081E8 6600                       		bne.s	locret_7DA6
000081EA 117C 0084 0020             		move.b	#$84,$20(a0)	; make object harmful
000081F0                            
000081F0                            locret_7DA6:
000081F0 4E75                       		rts	
000081F2                            ; End of function Obj17_RotateSpikes
000081F2                            
000081F2                            ; ===========================================================================
000081F2                            
000081F2                            Obj17_ChkDel:				; XREF: Obj17_Action
000081F2 3028 0008                  		move.w	8(a0),d0
000081F6 0240 FF80                  		andi.w	#$FF80,d0
000081FA 3238 F700                  		move.w	($FFFFF700).w,d1
000081FE 0441 0080                  		subi.w	#$80,d1
00008202 0241 FF80                  		andi.w	#$FF80,d1
00008206 9041                       		sub.w	d1,d0
00008208 0C40 0280                  		cmpi.w	#$280,d0
0000820C 6200 0000                  		bhi.w	Obj17_DelAll
00008210 4E75                       		rts	
00008212                            ; ===========================================================================
00008212                            
00008212                            Obj17_DelAll:				; XREF: Obj17_ChkDel
00008212 7400                       		moveq	#0,d2
00008214 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
00008218 141A                       		move.b	(a2)+,d2	; move a2 to d2
0000821A 5502                       		subq.b	#2,d2
0000821C 6500                       		bcs.s	Obj17_Delete
0000821E                            
0000821E                            Obj17_DelLoop:
0000821E 7000                       		moveq	#0,d0
00008220 101A                       		move.b	(a2)+,d0
00008222 ED48                       		lsl.w	#6,d0
00008224 0680 00FF D000             		addi.l	#$FFD000,d0
0000822A 2240                       		movea.l	d0,a1
0000822C 6100 0000                  		bsr.w	DeleteObject2	; delete object
00008230 51CA FFEC                  		dbf	d2,Obj17_DelLoop ; repeat d2 times (helix length)
00008234                            
00008234                            Obj17_Delete:				; XREF: Obj17_Index
00008234 6100 0000                  		bsr.w	DeleteObject
00008238 4E75                       		rts	
0000823A                            ; ===========================================================================
0000823A                            
0000823A                            Obj17_Display:				; XREF: Obj17_Index
0000823A 6100 FF96                  		bsr.w	Obj17_RotateSpikes
0000823E 6000 0000                  		bra.w	DisplaySprite
00008242                            ; ===========================================================================
00008242                            ; ---------------------------------------------------------------------------
00008242                            ; Sprite mappings - helix of spikes on a pole (GHZ)
00008242                            ; ---------------------------------------------------------------------------
00008242                            Map_obj17:
00008242                            	include "_maps\obj17.asm"
00008242                            ; ---------------------------------------------------------------------------
00008242                            ; Sprite mappings - helix of spikes on a pole (GHZ)
00008242                            ; ---------------------------------------------------------------------------
00008242 0000 0000                  		dc.w byte_7E08-Map_obj17, byte_7E0E-Map_obj17
00008246 0000 0000                  		dc.w byte_7E14-Map_obj17, byte_7E1A-Map_obj17
0000824A 0000 0000                  		dc.w byte_7E20-Map_obj17, byte_7E26-Map_obj17
0000824E 0000 0000                  		dc.w byte_7E2D+1-Map_obj17, byte_7E2C-Map_obj17
00008252 01                         byte_7E08:	dc.b 1
00008253 F001 0000 FC               		dc.b $F0, 1, 0,	0, $FC
00008258 01                         byte_7E0E:	dc.b 1
00008259 F505 0002 F8               		dc.b $F5, 5, 0,	2, $F8
0000825E 01                         byte_7E14:	dc.b 1
0000825F F805 0006 F8               		dc.b $F8, 5, 0,	6, $F8
00008264 01                         byte_7E1A:	dc.b 1
00008265 FB05 000A F8               		dc.b $FB, 5, 0,	$A, $F8
0000826A 01                         byte_7E20:	dc.b 1
0000826B 0001 000E FC               		dc.b 0,	1, 0, $E, $FC
00008270 01                         byte_7E26:	dc.b 1
00008271 0400 0010 FD               		dc.b 4,	0, 0, $10, $FD
00008276 01                         byte_7E2C:	dc.b 1
00008277 F400 0011 FD               byte_7E2D:	dc.b $F4, 0, 0,	$11, $FD
0000827C                            		even
0000827C                            		even
0000827C                            
0000827C                            ; ===========================================================================
0000827C                            ; ---------------------------------------------------------------------------
0000827C                            ; Object 18 - platforms	(GHZ, SYZ, SLZ)
0000827C                            ; ---------------------------------------------------------------------------
0000827C                            
0000827C                            Obj18:					; XREF: Obj_Index
0000827C 7000                       		moveq	#0,d0
0000827E 1028 0024                  		move.b	$24(a0),d0
00008282 323B 0000                  		move.w	Obj18_Index(pc,d0.w),d1
00008286 4EFB 1000                  		jmp	Obj18_Index(pc,d1.w)
0000828A                            ; ===========================================================================
0000828A 0000                       Obj18_Index:	dc.w Obj18_Main-Obj18_Index
0000828C 0000                       		dc.w Obj18_Solid-Obj18_Index
0000828E 0000                       		dc.w Obj18_Action2-Obj18_Index
00008290 0000                       		dc.w Obj18_Delete-Obj18_Index
00008292 0000                       		dc.w Obj18_Action-Obj18_Index
00008294                            ; ===========================================================================
00008294                            
00008294                            Obj18_Main:				; XREF: Obj18_Index
00008294 5428 0024                  		addq.b	#2,$24(a0)
00008298 317C 4000 0002             		move.w	#$4000,2(a0)
0000829E 217C 0000 0000 0004        		move.l	#Map_obj18,4(a0)
000082A6 117C 0020 0019             		move.b	#$20,$19(a0)
000082AC 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w ; check if level is SYZ
000082B2 6600                       		bne.s	Obj18_NotSYZ
000082B4 217C 0000 0000 0004        		move.l	#Map_obj18a,4(a0) ; SYZ	specific code
000082BC 117C 0020 0019             		move.b	#$20,$19(a0)
000082C2                            
000082C2                            Obj18_NotSYZ:
000082C2 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
000082C8 6600                       		bne.s	Obj18_NotSLZ
000082CA 217C 0000 0000 0004        		move.l	#Map_obj18b,4(a0) ; SLZ	specific code
000082D2 117C 0020 0019             		move.b	#$20,$19(a0)
000082D8 317C 4000 0002             		move.w	#$4000,2(a0)
000082DE 117C 0003 0028             		move.b	#3,$28(a0)
000082E4                            
000082E4                            Obj18_NotSLZ:
000082E4 117C 0004 0001             		move.b	#4,1(a0)
000082EA 117C 0004 0018             		move.b	#4,$18(a0)
000082F0 3168 000C 002C             		move.w	$C(a0),$2C(a0)
000082F6 3168 000C 0034             		move.w	$C(a0),$34(a0)
000082FC 3168 0008 0032             		move.w	8(a0),$32(a0)
00008302 317C 0080 0026             		move.w	#$80,$26(a0)
00008308 7200                       		moveq	#0,d1
0000830A 1028 0028                  		move.b	$28(a0),d0
0000830E 0C00 000A                  		cmpi.b	#$A,d0		; is object type $A (large platform)?
00008312 6600                       		bne.s	Obj18_SetFrame	; if not, branch
00008314 5201                       		addq.b	#1,d1		; use frame #1
00008316 117C 0020 0019             		move.b	#$20,$19(a0)	; set width
0000831C                            
0000831C                            Obj18_SetFrame:
0000831C 1141 001A                  		move.b	d1,$1A(a0)	; set frame to d1
00008320                            
00008320                            Obj18_Solid:				; XREF: Obj18_Index
00008320 4A28 0038                  		tst.b	$38(a0)
00008324 6700                       		beq.s	loc_7EE0
00008326 5928 0038                  		subq.b	#4,$38(a0)
0000832A                            
0000832A                            loc_7EE0:
0000832A 7200                       		moveq	#0,d1
0000832C 1228 0019                  		move.b	$19(a0),d1
00008330 6100 F56C                  		bsr.w	PlatformObject
00008334                            
00008334                            Obj18_Action:				; XREF: Obj18_Index
00008334 6100 0000                  		bsr.w	Obj18_Move
00008338 6100 0000                  		bsr.w	Obj18_Nudge
0000833C 6100 0000                  		bsr.w	DisplaySprite
00008340 6000 0000                  		bra.w	Obj18_ChkDel
00008344                            ; ===========================================================================
00008344                            
00008344                            Obj18_Action2:				; XREF: Obj18_Index
00008344 0C28 0040 0038             		cmpi.b	#$40,$38(a0)
0000834A 6700                       		beq.s	loc_7F06
0000834C 5828 0038                  		addq.b	#4,$38(a0)
00008350                            
00008350                            loc_7F06:
00008350 7200                       		moveq	#0,d1
00008352 1228 0019                  		move.b	$19(a0),d1
00008356 6100 F6BA                  		bsr.w	ExitPlatform
0000835A 3F28 0008                  		move.w	8(a0),-(sp)
0000835E 6100 0000                  		bsr.w	Obj18_Move
00008362 6100 0000                  		bsr.w	Obj18_Nudge
00008366 341F                       		move.w	(sp)+,d2
00008368 6100 FC12                  		bsr.w	MvSonicOnPtfm2
0000836C 6100 0000                  		bsr.w	DisplaySprite
00008370 6000 0000                  		bra.w	Obj18_ChkDel
00008374                            
00008374 4E75                       		rts
00008376                            
00008376                            ; ---------------------------------------------------------------------------
00008376                            ; Subroutine to	move platform slightly when you	stand on it
00008376                            ; ---------------------------------------------------------------------------
00008376                            
00008376                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008376                            
00008376                            
00008376                            Obj18_Nudge:				; XREF: Obj18_Action; Obj18_Action2
00008376 1028 0038                  		move.b	$38(a0),d0
0000837A 6100 A8A6                  		bsr.w	CalcSine
0000837E 323C 0400                  		move.w	#$400,d1
00008382 C1C1                       		muls.w	d1,d0
00008384 4840                       		swap	d0
00008386 D068 002C                  		add.w	$2C(a0),d0
0000838A 3140 000C                  		move.w	d0,$C(a0)
0000838E 4E75                       		rts	
00008390                            ; End of function Obj18_Nudge
00008390                            
00008390                            ; ---------------------------------------------------------------------------
00008390                            ; Subroutine to	move platforms
00008390                            ; ---------------------------------------------------------------------------
00008390                            
00008390                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008390                            
00008390                            
00008390                            Obj18_Move:				; XREF: Obj18_Action; Obj18_Action2
00008390 7000                       		moveq	#0,d0
00008392 1028 0028                  		move.b	$28(a0),d0
00008396 0240 000F                  		andi.w	#$F,d0
0000839A D040                       		add.w	d0,d0
0000839C 323B 0000                  		move.w	Obj18_TypeIndex(pc,d0.w),d1
000083A0 4EFB 1000                  		jmp	Obj18_TypeIndex(pc,d1.w)
000083A4                            ; End of function Obj18_Move
000083A4                            
000083A4                            ; ===========================================================================
000083A4 0000 0000                  Obj18_TypeIndex:dc.w Obj18_Type00-Obj18_TypeIndex, Obj18_Type01-Obj18_TypeIndex
000083A8 0000 0000                  		dc.w Obj18_Type02-Obj18_TypeIndex, Obj18_Type03-Obj18_TypeIndex
000083AC 0000 0000                  		dc.w Obj18_Type04-Obj18_TypeIndex, Obj18_Type05-Obj18_TypeIndex
000083B0 0000 0000                  		dc.w Obj18_Type06-Obj18_TypeIndex, Obj18_Type07-Obj18_TypeIndex
000083B4 0000 0000                  		dc.w Obj18_Type08-Obj18_TypeIndex, Obj18_Type00-Obj18_TypeIndex
000083B8 0000 0000                  		dc.w Obj18_Type0A-Obj18_TypeIndex, Obj18_Type0B-Obj18_TypeIndex
000083BC 0000                       		dc.w Obj18_Type0C-Obj18_TypeIndex
000083BE                            ; ===========================================================================
000083BE                            
000083BE                            Obj18_Type00:
000083BE 4E75                       		rts			; platform 00 doesn't move
000083C0                            ; ===========================================================================
000083C0                            
000083C0                            Obj18_Type05:
000083C0 3028 0032                  		move.w	$32(a0),d0
000083C4 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000083C8 4401                       		neg.b	d1		; reverse platform-motion
000083CA 0601 0040                  		addi.b	#$40,d1
000083CE 6000                       		bra.s	Obj18_01_Move
000083D0                            ; ===========================================================================
000083D0                            
000083D0                            Obj18_Type01:
000083D0 3028 0032                  		move.w	$32(a0),d0
000083D4 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000083D8 0401 0040                  		subi.b	#$40,d1
000083DC                            
000083DC                            Obj18_01_Move:
000083DC 4881                       		ext.w	d1
000083DE D041                       		add.w	d1,d0
000083E0 3140 0008                  		move.w	d0,8(a0)	; change position on x-axis
000083E4 6000 0000                  		bra.w	Obj18_ChgMotion
000083E8                            ; ===========================================================================
000083E8                            
000083E8                            Obj18_Type0C:
000083E8 3028 0034                  		move.w	$34(a0),d0
000083EC 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
000083F0 4401                       		neg.b	d1		; reverse platform-motion
000083F2 0601 0030                  		addi.b	#$30,d1
000083F6 6000                       		bra.s	Obj18_02_Move
000083F8                            ; ===========================================================================
000083F8                            
000083F8                            Obj18_Type0B:
000083F8 3028 0034                  		move.w	$34(a0),d0
000083FC 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
00008400 0401 0030                  		subi.b	#$30,d1
00008404 6000                       		bra.s	Obj18_02_Move
00008406                            ; ===========================================================================
00008406                            
00008406                            Obj18_Type06:
00008406 3028 0034                  		move.w	$34(a0),d0
0000840A 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000840E 4401                       		neg.b	d1		; reverse platform-motion
00008410 0601 0040                  		addi.b	#$40,d1
00008414 6000                       		bra.s	Obj18_02_Move
00008416                            ; ===========================================================================
00008416                            
00008416                            Obj18_Type02:
00008416 3028 0034                  		move.w	$34(a0),d0
0000841A 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000841E 0401 0040                  		subi.b	#$40,d1
00008422                            
00008422                            Obj18_02_Move:
00008422 4881                       		ext.w	d1
00008424 D041                       		add.w	d1,d0
00008426 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
0000842A 6000 0000                  		bra.w	Obj18_ChgMotion
0000842E                            ; ===========================================================================
0000842E                            
0000842E                            Obj18_Type03:
0000842E 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
00008432 6600                       		bne.s	Obj18_03_Wait	; if yes, branch
00008434 0828 0003 0022             		btst	#3,$22(a0)	; is Sonic standing on the platform?
0000843A 6700                       		beq.s	Obj18_03_NoMove	; if not, branch
0000843C 317C 001E 003A             		move.w	#30,$3A(a0)	; set time delay to 0.5	seconds
00008442                            
00008442                            Obj18_03_NoMove:
00008442 4E75                       		rts	
00008444                            ; ===========================================================================
00008444                            
00008444                            Obj18_03_Wait:
00008444 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time
00008448 66F8                       		bne.s	Obj18_03_NoMove	; if time is > 0, branch
0000844A 317C 0020 003A             		move.w	#32,$3A(a0)
00008450 5228 0028                  		addq.b	#1,$28(a0)	; change to type 04 (falling)
00008454 4E75                       		rts	
00008456                            ; ===========================================================================
00008456                            
00008456                            Obj18_Type04:
00008456 4A68 003A                  		tst.w	$3A(a0)
0000845A 6700                       		beq.s	loc_8048
0000845C 5368 003A                  		subq.w	#1,$3A(a0)
00008460 6600                       		bne.s	loc_8048
00008462 0828 0003 0022             		btst	#3,$22(a0)
00008468 6700                       		beq.s	loc_8042
0000846A 08E9 0001 0022             		bset	#1,$22(a1)
00008470 08A9 0003 0022             		bclr	#3,$22(a1)
00008476 137C 0002 0024             		move.b	#2,$24(a1)
0000847C 08A8 0003 0022             		bclr	#3,$22(a0)
00008482 4228 0025                  		clr.b	$25(a0)
00008486 3368 0012 0012             		move.w	$12(a0),$12(a1)
0000848C                            
0000848C                            loc_8042:
0000848C 117C 0008 0024             		move.b	#8,$24(a0)
00008492                            
00008492                            loc_8048:
00008492 2628 002C                  		move.l	$2C(a0),d3
00008496 3028 0012                  		move.w	$12(a0),d0
0000849A 48C0                       		ext.l	d0
0000849C E180                       		asl.l	#8,d0
0000849E D680                       		add.l	d0,d3
000084A0 2143 002C                  		move.l	d3,$2C(a0)
000084A4 0668 0038 0012             		addi.w	#$38,$12(a0)
000084AA 3038 F72E                  		move.w	($FFFFF72E).w,d0
000084AE 0640 00E0                  		addi.w	#$E0,d0
000084B2 B068 002C                  		cmp.w	$2C(a0),d0
000084B6 6400                       		bcc.s	locret_8074
000084B8 117C 0006 0024             		move.b	#6,$24(a0)
000084BE                            
000084BE                            locret_8074:
000084BE 4E75                       		rts	
000084C0                            ; ===========================================================================
000084C0                            
000084C0                            Obj18_Type07:
000084C0 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
000084C4 6600                       		bne.s	Obj18_07_Wait	; if yes, branch
000084C6 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
000084CA 7000                       		moveq	#0,d0
000084CC 1028 0028                  		move.b	$28(a0),d0	; move object type ($x7) to d0
000084D0 E848                       		lsr.w	#4,d0		; divide d0 by 8, round	down
000084D2 4A32 0000                  		tst.b	(a2,d0.w)	; has switch no. d0 been pressed?
000084D6 6700                       		beq.s	Obj18_07_NoMove	; if not, branch
000084D8 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
000084DE                            
000084DE                            Obj18_07_NoMove:
000084DE 4E75                       		rts	
000084E0                            ; ===========================================================================
000084E0                            
000084E0                            Obj18_07_Wait:
000084E0 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
000084E4 66F8                       		bne.s	Obj18_07_NoMove	; if time is > 0, branch
000084E6 5228 0028                  		addq.b	#1,$28(a0)	; change to type 08
000084EA 4E75                       		rts	
000084EC                            ; ===========================================================================
000084EC                            
000084EC                            Obj18_Type08:
000084EC 5568 002C                  		subq.w	#2,$2C(a0)	; move platform	up
000084F0 3028 0034                  		move.w	$34(a0),d0
000084F4 0440 0200                  		subi.w	#$200,d0
000084F8 B068 002C                  		cmp.w	$2C(a0),d0	; has platform moved $200 pixels?
000084FC 6600                       		bne.s	Obj18_08_NoStop	; if not, branch
000084FE 4228 0028                  		clr.b	$28(a0)		; change to type 00 (stop moving)
00008502                            
00008502                            Obj18_08_NoStop:
00008502 4E75                       		rts	
00008504                            ; ===========================================================================
00008504                            
00008504                            Obj18_Type0A:
00008504 3028 0034                  		move.w	$34(a0),d0
00008508 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000850C 0401 0040                  		subi.b	#$40,d1
00008510 4881                       		ext.w	d1
00008512 E241                       		asr.w	#1,d1
00008514 D041                       		add.w	d1,d0
00008516 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
0000851A                            
0000851A                            Obj18_ChgMotion:
0000851A 1178 FE78 0026             		move.b	($FFFFFE78).w,$26(a0) ;	update platform-movement variable
00008520 4E75                       		rts	
00008522                            ; ===========================================================================
00008522                            
00008522                            Obj18_ChkDel:				; XREF: Obj18_Action; Obj18_Action2
00008522 3028 0032                  		move.w	$32(a0),d0
00008526 0240 FF80                  		andi.w	#$FF80,d0
0000852A 3238 F700                  		move.w	($FFFFF700).w,d1
0000852E 0441 0080                  		subi.w	#$80,d1
00008532 0241 FF80                  		andi.w	#$FF80,d1
00008536 9041                       		sub.w	d1,d0
00008538 0C40 0280                  		cmpi.w	#$280,d0
0000853C 6200                       		bhi.s	Obj18_Delete
0000853E 4E75                       		rts	
00008540                            ; ===========================================================================
00008540                            
00008540                            Obj18_Delete:				; XREF: Obj18_Index
00008540 6000 0000                  		bra.w	DeleteObject
00008544                            ; ===========================================================================
00008544                            ; ---------------------------------------------------------------------------
00008544                            ; Sprite mappings - unused
00008544                            ; ---------------------------------------------------------------------------
00008544                            Map_obj18x:
00008544                            	include "_maps\obj18x.asm"
00008544                            ; ---------------------------------------------------------------------------
00008544                            ; Sprite mappings - unused
00008544                            ; ---------------------------------------------------------------------------
00008544 0000                       		dc.w byte_80FE-Map_obj18x
00008546 0000                       		dc.w byte_8109-Map_obj18x
00008548 02                         byte_80FE:	dc.b 2
00008549 F40B 003C E8               		dc.b $F4, $B, 0, $3C, $E8
0000854E F40B 0048 00               		dc.b $F4, $B, 0, $48, 0
00008553 0A                         byte_8109:	dc.b $A
00008554 F40F 00CA E0               		dc.b $F4, $F, 0, $CA, $E0
00008559 040F 00DA E0               		dc.b 4,	$F, 0, $DA, $E0
0000855E 240F 00DA E0               		dc.b $24, $F, 0, $DA, $E0
00008563 440F 00DA E0               		dc.b $44, $F, 0, $DA, $E0
00008568 640F 00DA E0               		dc.b $64, $F, 0, $DA, $E0
0000856D F40F 08CA 00               		dc.b $F4, $F, 8, $CA, 0
00008572 040F 08DA 00               		dc.b 4,	$F, 8, $DA, 0
00008577 240F 08DA 00               		dc.b $24, $F, 8, $DA, 0
0000857C 440F 08DA 00               		dc.b $44, $F, 8, $DA, 0
00008581 640F 08DA 00               		dc.b $64, $F, 8, $DA, 0
00008586                            		even
00008586                            		even
00008586                            
00008586                            ; ---------------------------------------------------------------------------
00008586                            ; Sprite mappings - GHZ	platforms
00008586                            ; ---------------------------------------------------------------------------
00008586                            Map_obj18:
00008586                            	include "_maps\obj18ghz.asm"
00008586                            ; ---------------------------------------------------------------------------
00008586                            ; Sprite mappings - GHZ	platforms
00008586                            ; ---------------------------------------------------------------------------
00008586 0000                       		dc.w byte_8140-Map_obj18
00008588 0000                       		dc.w byte_8155-Map_obj18
0000858A 04                         byte_8140:	dc.b 4
0000858B F40B 003B E0               		dc.b $F4, $B, 0, $3B, $E0 ; small platform
00008590 F407 003F F8               		dc.b $F4, 7, 0,	$3F, $F8
00008595 F407 003F 08               		dc.b $F4, 7, 0,	$3F, 8
0000859A F403 0047 18               		dc.b $F4, 3, 0,	$47, $18
0000859F 0A                         byte_8155:	dc.b $A
000085A0 F40F 00C5 E0               		dc.b $F4, $F, 0, $C5, $E0 ; large column platform
000085A5 040F 00D5 E0               		dc.b 4,	$F, 0, $D5, $E0
000085AA 240F 00D5 E0               		dc.b $24, $F, 0, $D5, $E0
000085AF 440F 00D5 E0               		dc.b $44, $F, 0, $D5, $E0
000085B4 640F 00D5 E0               		dc.b $64, $F, 0, $D5, $E0
000085B9 F40F 08C5 00               		dc.b $F4, $F, 8, $C5, 0
000085BE 040F 08D5 00               		dc.b 4,	$F, 8, $D5, 0
000085C3 240F 08D5 00               		dc.b $24, $F, 8, $D5, 0
000085C8 440F 08D5 00               		dc.b $44, $F, 8, $D5, 0
000085CD 640F 08D5 00               		dc.b $64, $F, 8, $D5, 0
000085D2                            		even
000085D2                            		even
000085D2                            
000085D2                            ; ---------------------------------------------------------------------------
000085D2                            ; Sprite mappings - SYZ	platforms
000085D2                            ; ---------------------------------------------------------------------------
000085D2                            Map_obj18a:
000085D2                            	include "_maps\obj18syz.asm"
000085D2                            ; ---------------------------------------------------------------------------
000085D2                            ; Sprite mappings - SYZ	platforms
000085D2                            ; ---------------------------------------------------------------------------
000085D2 0000                       		dc.w byte_818A-Map_obj18a
000085D4 03                         byte_818A:	dc.b 3
000085D5 F60B 0049 E0               		dc.b $F6, $B, 0, $49, $E0
000085DA F607 0051 F8               		dc.b $F6, 7, 0,	$51, $F8
000085DF F60B 0055 08               		dc.b $F6, $B, 0, $55, 8
000085E4                            		even
000085E4                            		even
000085E4                            
000085E4                            ; ---------------------------------------------------------------------------
000085E4                            ; Sprite mappings - SLZ	platforms
000085E4                            ; ---------------------------------------------------------------------------
000085E4                            Map_obj18b:
000085E4                            	include "_maps\obj18slz.asm"
000085E4                            ; ---------------------------------------------------------------------------
000085E4                            ; Sprite mappings - SLZ	platforms
000085E4                            ; ---------------------------------------------------------------------------
000085E4 0000                       		dc.w byte_819C-Map_obj18b
000085E6 02                         byte_819C:	dc.b 2
000085E7 F80F 0021 E0               		dc.b $F8, $F, 0, $21, $E0
000085EC F80F 0021 00               		dc.b $F8, $F, 0, $21, 0
000085F2 00                         		even
000085F2 00                         		even
000085F2                            
000085F2                            ; ===========================================================================
000085F2                            ; ---------------------------------------------------------------------------
000085F2                            ; Object 19 - blank
000085F2                            ; ---------------------------------------------------------------------------
000085F2                            
000085F2                            Obj19:					; XREF: Obj_Index
000085F2 4E75                       		rts	
000085F4                            ; ===========================================================================
000085F4                            ; ---------------------------------------------------------------------------
000085F4                            ; Sprite mappings - swinging ball on a chain from GHZ boss
000085F4                            ; ---------------------------------------------------------------------------
000085F4                            Map_obj48:
000085F4                            	include "_maps\obj48.asm"
000085F4                            ; ---------------------------------------------------------------------------
000085F4                            ; Sprite mappings - swinging ball on a chain from GHZ boss
000085F4                            ; ---------------------------------------------------------------------------
000085F4 0000 0000                  		dc.w byte_81B2-Map_obj48, byte_81D1-Map_obj48
000085F8 0000 0000                  		dc.w byte_81E6-Map_obj48, byte_81FB-Map_obj48
000085FC 06                         byte_81B2:	dc.b 6
000085FD F004 0024 F0               		dc.b $F0, 4, 0,	$24, $F0
00008602 F804 1024 F0               		dc.b $F8, 4, $10, $24, $F0
00008607 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
0000860C E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00008611 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00008616 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
0000861B 04                         byte_81D1:	dc.b 4
0000861C E80A 0009 E8               		dc.b $E8, $A, 0, 9, $E8
00008621 E80A 0809 00               		dc.b $E8, $A, 8, 9, 0
00008626 000A 1009 E8               		dc.b 0,	$A, $10, 9, $E8
0000862B 000A 1809 00               		dc.b 0,	$A, $18, 9, 0
00008630 04                         byte_81E6:	dc.b 4
00008631 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00008636 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
0000863B 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00008640 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
00008645 04                         byte_81FB:	dc.b 4
00008646 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
0000864B E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00008650 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00008655 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
0000865A                            		even
0000865A                            		even
0000865A                            
0000865A                            ; ===========================================================================
0000865A                            ; ---------------------------------------------------------------------------
0000865A                            ; Object 1A - GHZ collapsing ledge
0000865A                            ; ---------------------------------------------------------------------------
0000865A                            
0000865A                            Obj1A:					; XREF: Obj_Index
0000865A 7000                       		moveq	#0,d0
0000865C 1028 0024                  		move.b	$24(a0),d0
00008660 323B 0000                  		move.w	Obj1A_Index(pc,d0.w),d1
00008664 4EFB 1000                  		jmp	Obj1A_Index(pc,d1.w)
00008668                            ; ===========================================================================
00008668 0000 0000                  Obj1A_Index:	dc.w Obj1A_Main-Obj1A_Index, Obj1A_ChkTouch-Obj1A_Index
0000866C 0000 0000                  		dc.w Obj1A_Touch-Obj1A_Index, Obj1A_Display-Obj1A_Index
00008670 0000 0000                  		dc.w Obj1A_Delete-Obj1A_Index, Obj1A_WalkOff-Obj1A_Index
00008674                            ; ===========================================================================
00008674                            
00008674                            Obj1A_Main:				; XREF: Obj1A_Index
00008674 5428 0024                  		addq.b	#2,$24(a0)
00008678 217C 0000 0000 0004        		move.l	#Map_obj1A,4(a0)
00008680 317C 4000 0002             		move.w	#$4000,2(a0)
00008686 0028 0004 0001             		ori.b	#4,1(a0)
0000868C 117C 0004 0018             		move.b	#4,$18(a0)
00008692 117C 0007 0038             		move.b	#7,$38(a0)	; set time delay for collapse
00008698 117C 0064 0019             		move.b	#$64,$19(a0)
0000869E 1168 0028 001A             		move.b	$28(a0),$1A(a0)
000086A4 117C 0038 0016             		move.b	#$38,$16(a0)
000086AA 08E8 0004 0001             		bset	#4,1(a0)
000086B0                            
000086B0                            Obj1A_ChkTouch:				; XREF: Obj1A_Index
000086B0 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	platform?
000086B4 6700                       		beq.s	Obj1A_Slope	; if not, branch
000086B6 4A28 0038                  		tst.b	$38(a0)		; has time reached zero?
000086BA 6700 0000                  		beq.w	Obj1A_Collapse	; if yes, branch
000086BE 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
000086C2                            
000086C2                            Obj1A_Slope:
000086C2 323C 0030                  		move.w	#$30,d1
000086C6 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
000086CC 6100 F2A4                  		bsr.w	SlopeObject
000086D0 6000 0000                  		bra.w	MarkObjGone
000086D4                            ; ===========================================================================
000086D4                            
000086D4                            Obj1A_Touch:				; XREF: Obj1A_Index
000086D4 4A28 0038                  		tst.b	$38(a0)
000086D8 6700 0000                  		beq.w	loc_847A
000086DC 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
000086E2 5328 0038                  		subq.b	#1,$38(a0)
000086E6                            
000086E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000086E6                            
000086E6                            
000086E6                            Obj1A_WalkOff:				; XREF: Obj1A_Index
000086E6 323C 0030                  		move.w	#$30,d1
000086EA 6100 F326                  		bsr.w	ExitPlatform
000086EE 323C 0030                  		move.w	#$30,d1
000086F2 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
000086F8 3428 0008                  		move.w	8(a0),d2
000086FC 6100 0000                  		bsr.w	SlopeObject2
00008700 6000 0000                  		bra.w	MarkObjGone
00008704                            ; End of function Obj1A_WalkOff
00008704                            
00008704                            ; ===========================================================================
00008704                            
00008704                            Obj1A_Display:				; XREF: Obj1A_Index
00008704 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00008708 6700                       		beq.s	Obj1A_TimeZero	; if yes, branch
0000870A 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
0000870E 6600 0000                  		bne.w	loc_82D0	; if yes, branch
00008712 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008716 6000 0000                  		bra.w	DisplaySprite
0000871A                            ; ===========================================================================
0000871A                            
0000871A                            loc_82D0:				; XREF: Obj1A_Display
0000871A 5328 0038                  		subq.b	#1,$38(a0)
0000871E 6100 FFC6                  		bsr.w	Obj1A_WalkOff
00008722 43F8 D000                  		lea	($FFFFD000).w,a1
00008726 0829 0003 0022             		btst	#3,$22(a1)
0000872C 6700                       		beq.s	loc_82FC
0000872E 4A28 0038                  		tst.b	$38(a0)
00008732 6600                       		bne.s	locret_8308
00008734 08A9 0003 0022             		bclr	#3,$22(a1)
0000873A 08A9 0005 0022             		bclr	#5,$22(a1)
00008740 137C 0001 001D             		move.b	#1,$1D(a1)
00008746                            
00008746                            loc_82FC:
00008746 117C 0000 003A             		move.b	#0,$3A(a0)
0000874C 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj1A_Display" routine
00008752                            
00008752                            locret_8308:
00008752 4E75                       		rts	
00008754                            ; ===========================================================================
00008754                            
00008754                            Obj1A_TimeZero:				; XREF: Obj1A_Display
00008754 6100 0000                  		bsr.w	ObjectFall
00008758 6100 0000                  		bsr.w	DisplaySprite
0000875C 4A28 0001                  		tst.b	1(a0)
00008760 6A00                       		bpl.s	Obj1A_Delete
00008762 4E75                       		rts	
00008764                            ; ===========================================================================
00008764                            
00008764                            Obj1A_Delete:				; XREF: Obj1A_Index
00008764 6100 0000                  		bsr.w	DeleteObject
00008768 4E75                       		rts	
0000876A                            ; ===========================================================================
0000876A                            ; ---------------------------------------------------------------------------
0000876A                            ; Object 53 - collapsing floors	(MZ, SLZ, SBZ)
0000876A                            ; ---------------------------------------------------------------------------
0000876A                            
0000876A                            Obj53:					; XREF: Obj_Index
0000876A 7000                       		moveq	#0,d0
0000876C 1028 0024                  		move.b	$24(a0),d0
00008770 323B 0000                  		move.w	Obj53_Index(pc,d0.w),d1
00008774 4EFB 1000                  		jmp	Obj53_Index(pc,d1.w)
00008778                            ; ===========================================================================
00008778 0000 0000                  Obj53_Index:	dc.w Obj53_Main-Obj53_Index, Obj53_ChkTouch-Obj53_Index
0000877C 0000 0000                  		dc.w Obj53_Touch-Obj53_Index, Obj53_Display-Obj53_Index
00008780 0000 0000                  		dc.w Obj53_Delete-Obj53_Index, Obj53_WalkOff-Obj53_Index
00008784                            ; ===========================================================================
00008784                            
00008784                            Obj53_Main:				; XREF: Obj53_Index
00008784 5428 0024                  		addq.b	#2,$24(a0)
00008788 217C 0000 0000 0004        		move.l	#Map_obj53,4(a0)
00008790 317C 42B8 0002             		move.w	#$42B8,2(a0)
00008796 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000879C 6600                       		bne.s	Obj53_NotSLZ
0000879E 317C 44E0 0002             		move.w	#$44E0,2(a0)	; SLZ specific code
000087A4 5428 001A                  		addq.b	#2,$1A(a0)
000087A8                            
000087A8                            Obj53_NotSLZ:
000087A8 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
000087AE 6600                       		bne.s	Obj53_NotSBZ
000087B0 317C 43F5 0002             		move.w	#$43F5,2(a0)	; SBZ specific code
000087B6                            
000087B6                            Obj53_NotSBZ:
000087B6 0028 0004 0001             		ori.b	#4,1(a0)
000087BC 117C 0004 0018             		move.b	#4,$18(a0)
000087C2 117C 0007 0038             		move.b	#7,$38(a0)
000087C8 117C 0044 0019             		move.b	#$44,$19(a0)
000087CE                            
000087CE                            Obj53_ChkTouch:				; XREF: Obj53_Index
000087CE 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
000087D2 6700                       		beq.s	Obj53_Solid	; if not, branch
000087D4 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
000087D8 6700 0000                  		beq.w	Obj53_Collapse	; if yes, branch
000087DC 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
000087E0                            
000087E0                            Obj53_Solid:
000087E0 323C 0020                  		move.w	#$20,d1
000087E4 6100 F0B8                  		bsr.w	PlatformObject
000087E8 4A28 0028                  		tst.b	$28(a0)
000087EC 6A00                       		bpl.s	Obj53_MarkAsGone
000087EE 0829 0003 0022             		btst	#3,$22(a1)
000087F4 6700                       		beq.s	Obj53_MarkAsGone
000087F6 08A8 0000 0001             		bclr	#0,1(a0)
000087FC 3029 0008                  		move.w	8(a1),d0
00008800 9068 0008                  		sub.w	8(a0),d0
00008804 6400                       		bcc.s	Obj53_MarkAsGone
00008806 08E8 0000 0001             		bset	#0,1(a0)
0000880C                            
0000880C                            Obj53_MarkAsGone:
0000880C 6000 0000                  		bra.w	MarkObjGone
00008810                            ; ===========================================================================
00008810                            
00008810                            Obj53_Touch:				; XREF: Obj53_Index
00008810 4A28 0038                  		tst.b	$38(a0)
00008814 6700 0000                  		beq.w	loc_8458
00008818 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
0000881E 5328 0038                  		subq.b	#1,$38(a0)
00008822                            
00008822                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008822                            
00008822                            
00008822                            Obj53_WalkOff:				; XREF: Obj53_Index
00008822 323C 0020                  		move.w	#$20,d1
00008826 6100 F1EA                  		bsr.w	ExitPlatform
0000882A 3428 0008                  		move.w	8(a0),d2
0000882E 6100 F74C                  		bsr.w	MvSonicOnPtfm2
00008832 6000 0000                  		bra.w	MarkObjGone
00008836                            ; End of function Obj53_WalkOff
00008836                            
00008836                            ; ===========================================================================
00008836                            
00008836                            Obj53_Display:				; XREF: Obj53_Index
00008836 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
0000883A 6700                       		beq.s	Obj53_TimeZero	; if yes, branch
0000883C 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00008840 6600 0000                  		bne.w	loc_8402	; if yes, branch
00008844 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008848 6000 0000                  		bra.w	DisplaySprite
0000884C                            ; ===========================================================================
0000884C                            
0000884C                            loc_8402:
0000884C 5328 0038                  		subq.b	#1,$38(a0)
00008850 6100 FFD0                  		bsr.w	Obj53_WalkOff
00008854 43F8 D000                  		lea	($FFFFD000).w,a1
00008858 0829 0003 0022             		btst	#3,$22(a1)
0000885E 6700                       		beq.s	loc_842E
00008860 4A28 0038                  		tst.b	$38(a0)
00008864 6600                       		bne.s	locret_843A
00008866 08A9 0003 0022             		bclr	#3,$22(a1)
0000886C 08A9 0005 0022             		bclr	#5,$22(a1)
00008872 137C 0001 001D             		move.b	#1,$1D(a1)
00008878                            
00008878                            loc_842E:
00008878 117C 0000 003A             		move.b	#0,$3A(a0)
0000887E 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj53_Display" routine
00008884                            
00008884                            locret_843A:
00008884 4E75                       		rts	
00008886                            ; ===========================================================================
00008886                            
00008886                            Obj53_TimeZero:				; XREF: Obj53_Display
00008886 6100 0000                  		bsr.w	ObjectFall
0000888A 6100 0000                  		bsr.w	DisplaySprite
0000888E 4A28 0001                  		tst.b	1(a0)
00008892 6A00                       		bpl.s	Obj53_Delete
00008894 4E75                       		rts	
00008896                            ; ===========================================================================
00008896                            
00008896                            Obj53_Delete:				; XREF: Obj53_Index
00008896 6100 0000                  		bsr.w	DeleteObject
0000889A 4E75                       		rts	
0000889C                            ; ===========================================================================
0000889C                            
0000889C                            Obj53_Collapse:				; XREF: Obj53_ChkTouch
0000889C 117C 0000 003A             		move.b	#0,$3A(a0)
000088A2                            
000088A2                            loc_8458:				; XREF: Obj53_Touch
000088A2 49F9 0000 0000             		lea	(Obj53_Data2).l,a4
000088A8 0828 0000 0028             		btst	#0,$28(a0)
000088AE 6700                       		beq.s	loc_846C
000088B0 49F9 0000 0000             		lea	(Obj53_Data3).l,a4
000088B6                            
000088B6                            loc_846C:
000088B6 7207                       		moveq	#7,d1
000088B8 5228 001A                  		addq.b	#1,$1A(a0)
000088BC 6000                       		bra.s	loc_8486
000088BE                            ; ===========================================================================
000088BE                            
000088BE                            Obj1A_Collapse:				; XREF: Obj1A_ChkTouch
000088BE 117C 0000 003A             		move.b	#0,$3A(a0)
000088C4                            
000088C4                            loc_847A:				; XREF: Obj1A_Touch
000088C4 49F9 0000 0000             		lea	(Obj53_Data1).l,a4
000088CA 7218                       		moveq	#$18,d1
000088CC 5428 001A                  		addq.b	#2,$1A(a0)
000088D0                            
000088D0                            loc_8486:				; XREF: Obj53_Collapse
000088D0 7000                       		moveq	#0,d0
000088D2 1028 001A                  		move.b	$1A(a0),d0
000088D6 D040                       		add.w	d0,d0
000088D8 2668 0004                  		movea.l	4(a0),a3
000088DC D6F3 0000                  		adda.w	(a3,d0.w),a3
000088E0 524B                       		addq.w	#1,a3
000088E2 08E8 0005 0001             		bset	#5,1(a0)
000088E8 1810                       		move.b	0(a0),d4
000088EA 1A28 0001                  		move.b	1(a0),d5
000088EE 2248                       		movea.l	a0,a1
000088F0 6000                       		bra.s	loc_84B2
000088F2                            ; ===========================================================================
000088F2                            
000088F2                            loc_84AA:
000088F2 6100 0000                  		bsr.w	SingleObjLoad
000088F6 6600                       		bne.s	loc_84F2
000088F8 5A4B                       		addq.w	#5,a3
000088FA                            
000088FA                            loc_84B2:
000088FA 137C 0006 0024             		move.b	#6,$24(a1)
00008900 1284                       		move.b	d4,0(a1)
00008902 234B 0004                  		move.l	a3,4(a1)
00008906 1345 0001                  		move.b	d5,1(a1)
0000890A 3368 0008 0008             		move.w	8(a0),8(a1)
00008910 3368 000C 000C             		move.w	$C(a0),$C(a1)
00008916 3368 0002 0002             		move.w	2(a0),2(a1)
0000891C 1368 0018 0018             		move.b	$18(a0),$18(a1)
00008922 1368 0019 0019             		move.b	$19(a0),$19(a1)
00008928 135C 0038                  		move.b	(a4)+,$38(a1)
0000892C B3C8                       		cmpa.l	a0,a1
0000892E 6400                       		bcc.s	loc_84EE
00008930 6100 0000                  		bsr.w	DisplaySprite2
00008934                            
00008934                            loc_84EE:
00008934 51C9 FFBC                  		dbf	d1,loc_84AA
00008938                            
00008938                            loc_84F2:
00008938 6100 0000                  		bsr.w	DisplaySprite
0000893C 303C 00B9                  		move.w	#$B9,d0
00008940 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play collapsing	sound
00008946                            ; ===========================================================================
00008946                            ; ---------------------------------------------------------------------------
00008946                            ; Disintegration data for collapsing ledges (MZ, SLZ, SBZ)
00008946                            ; ---------------------------------------------------------------------------
00008946 1C18 1410 1A16 120E 0A06+  Obj53_Data1:	dc.b $1C, $18, $14, $10, $1A, $16, $12,	$E, $A,	6, $18,	$14, $10, $C, 8, 4
00008956 1612 0E0A 0602 1410 0C00   		dc.b $16, $12, $E, $A, 6, 2, $14, $10, $C, 0
00008960 1E16 0E06 1A12 0A02        Obj53_Data2:	dc.b $1E, $16, $E, 6, $1A, $12,	$A, 2
00008968 161E 1A12 060E 0A02        Obj53_Data3:	dc.b $16, $1E, $1A, $12, 6, $E,	$A, 2
00008970                            
00008970                            ; ---------------------------------------------------------------------------
00008970                            ; Sloped platform subroutine (GHZ collapsing ledges and	MZ platforms)
00008970                            ; ---------------------------------------------------------------------------
00008970                            
00008970                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008970                            
00008970                            
00008970                            SlopeObject2:				; XREF: Obj1A_WalkOff; et al
00008970 43F8 D000                  		lea	($FFFFD000).w,a1
00008974 0829 0003 0022             		btst	#3,$22(a1)
0000897A 6700                       		beq.s	locret_856E
0000897C 3029 0008                  		move.w	8(a1),d0
00008980 9068 0008                  		sub.w	8(a0),d0
00008984 D041                       		add.w	d1,d0
00008986 E248                       		lsr.w	#1,d0
00008988 0828 0000 0001             		btst	#0,1(a0)
0000898E 6700                       		beq.s	loc_854E
00008990 4640                       		not.w	d0
00008992 D041                       		add.w	d1,d0
00008994                            
00008994                            loc_854E:
00008994 7200                       		moveq	#0,d1
00008996 1232 0000                  		move.b	(a2,d0.w),d1
0000899A 3028 000C                  		move.w	$C(a0),d0
0000899E 9041                       		sub.w	d1,d0
000089A0 7200                       		moveq	#0,d1
000089A2 1229 0016                  		move.b	$16(a1),d1
000089A6 9041                       		sub.w	d1,d0
000089A8 3340 000C                  		move.w	d0,$C(a1)
000089AC 9468 0008                  		sub.w	8(a0),d2
000089B0 9569 0008                  		sub.w	d2,8(a1)
000089B4                            
000089B4                            locret_856E:
000089B4 4E75                       		rts	
000089B6                            ; End of function SlopeObject2
000089B6                            
000089B6                            ; ===========================================================================
000089B6                            ; ---------------------------------------------------------------------------
000089B6                            ; Collision data for GHZ collapsing ledge
000089B6                            ; ---------------------------------------------------------------------------
000089B6                            Obj1A_SlopeData:
000089B6                            		incbin	misc\ghzledge.bin
000089E6                            		even
000089E6                            
000089E6                            ; ---------------------------------------------------------------------------
000089E6                            ; Sprite mappings - GHZ	collapsing ledge
000089E6                            ; ---------------------------------------------------------------------------
000089E6                            Map_obj1A:
000089E6                            	include "_maps\obj1A.asm"
000089E6                            ; ---------------------------------------------------------------------------
000089E6                            ; Sprite mappings - GHZ	collapsing ledge
000089E6                            ; ---------------------------------------------------------------------------
000089E6 0000 0000                  		dc.w byte_85A8-Map_obj1A, byte_85F9-Map_obj1A
000089EA 0000 0000                  		dc.w byte_864A-Map_obj1A, byte_86C8-Map_obj1A
000089EE 10                         byte_85A8:	dc.b $10
000089EF C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing left
000089F4 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
000089F9 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
000089FE E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00008A03 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008A08 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00008A0D F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00008A12 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00008A17 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008A1C F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00008A21 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00008A26 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008A2B 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00008A30 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00008A35 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00008A3A 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008A3F 10                         byte_85F9:	dc.b $10
00008A40 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing right
00008A45 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00008A4A E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00008A4F E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00008A54 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008A59 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00008A5E F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00008A63 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00008A68 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008A6D F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00008A72 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00008A77 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008A7C 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00008A81 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00008A86 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00008A8B 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008A90 19                         byte_864A:	dc.b $19
00008A91 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	left in	pieces
00008A96 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00008A9B D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00008AA0 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00008AA5 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00008AAA E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00008AAF E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00008AB4 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00008AB9 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008ABE D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00008AC3 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00008AC8 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00008ACD F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00008AD2 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00008AD7 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008ADC F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00008AE1 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00008AE6 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00008AEB 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008AF0 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00008AF5 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00008AFA 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00008AFF 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00008B04 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00008B09 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008B0E 19                         byte_86C8:	dc.b $19
00008B0F C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	right in pieces
00008B14 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00008B19 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00008B1E D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00008B23 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00008B28 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00008B2D E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00008B32 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00008B37 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008B3C D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00008B41 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00008B46 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00008B4B F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00008B50 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00008B55 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008B5A F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00008B5F 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00008B64 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00008B69 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008B6E 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00008B73 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00008B78 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00008B7D 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00008B82 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00008B87 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008B8C                            		even
00008B8C                            		even
00008B8C                            
00008B8C                            ; ---------------------------------------------------------------------------
00008B8C                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
00008B8C                            ; ---------------------------------------------------------------------------
00008B8C                            Map_obj53:
00008B8C                            	include "_maps\obj53.asm"
00008B8C                            ; ---------------------------------------------------------------------------
00008B8C                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
00008B8C                            ; ---------------------------------------------------------------------------
00008B8C 0000 0000                  		dc.w byte_874E-Map_obj53, byte_8763-Map_obj53
00008B90 0000 0000                  		dc.w byte_878C-Map_obj53, byte_87A1-Map_obj53
00008B94 04                         byte_874E:	dc.b 4
00008B95 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; MZ and SBZ blocks
00008B9A 080D 0000 E0               		dc.b 8,	$D, 0, 0, $E0
00008B9F F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
00008BA4 080D 0000 00               		dc.b 8,	$D, 0, 0, 0
00008BA9 08                         byte_8763:	dc.b 8
00008BAA F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
00008BAF F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00008BB4 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
00008BB9 F805 0000 10               		dc.b $F8, 5, 0,	0, $10
00008BBE 0805 0000 E0               		dc.b 8,	5, 0, 0, $E0
00008BC3 0805 0000 F0               		dc.b 8,	5, 0, 0, $F0
00008BC8 0805 0000 00               		dc.b 8,	5, 0, 0, 0
00008BCD 0805 0000 10               		dc.b 8,	5, 0, 0, $10
00008BD2 04                         byte_878C:	dc.b 4
00008BD3 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; SLZ blocks
00008BD8 080D 0008 E0               		dc.b 8,	$D, 0, 8, $E0
00008BDD F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
00008BE2 080D 0008 00               		dc.b 8,	$D, 0, 8, 0
00008BE7 08                         byte_87A1:	dc.b 8
00008BE8 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
00008BED F805 0004 F0               		dc.b $F8, 5, 0,	4, $F0
00008BF2 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
00008BF7 F805 0004 10               		dc.b $F8, 5, 0,	4, $10
00008BFC 0805 0008 E0               		dc.b 8,	5, 0, 8, $E0
00008C01 0805 000C F0               		dc.b 8,	5, 0, $C, $F0
00008C06 0805 0008 00               		dc.b 8,	5, 0, 8, 0
00008C0B 0805 000C 10               		dc.b 8,	5, 0, $C, $10
00008C10                            		even
00008C10                            		even
00008C10                            
00008C10                            ; ===========================================================================
00008C10                            ; ---------------------------------------------------------------------------
00008C10                            ; Object 1C - scenery (GHZ bridge stump, SLZ lava thrower)
00008C10                            ; ---------------------------------------------------------------------------
00008C10                            
00008C10                            Obj1C:					; XREF: Obj_Index
00008C10 7000                       		moveq	#0,d0
00008C12 1028 0024                  		move.b	$24(a0),d0
00008C16 323B 0000                  		move.w	Obj1C_Index(pc,d0.w),d1
00008C1A 4EFB 1000                  		jmp	Obj1C_Index(pc,d1.w)
00008C1E                            ; ===========================================================================
00008C1E 0000                       Obj1C_Index:	dc.w Obj1C_Main-Obj1C_Index
00008C20 0000                       		dc.w Obj1C_ChkDel-Obj1C_Index
00008C22                            ; ===========================================================================
00008C22                            
00008C22                            Obj1C_Main:				; XREF: Obj1C_Index
00008C22 5428 0024                  		addq.b	#2,$24(a0)
00008C26 7000                       		moveq	#0,d0
00008C28 1028 0028                  		move.b	$28(a0),d0	; copy object type to d0
00008C2C C0FC 000A                  		mulu.w	#$A,d0		; multiply by $A
00008C30 43FB 0000                  		lea	Obj1C_Var(pc,d0.w),a1
00008C34 2159 0004                  		move.l	(a1)+,4(a0)
00008C38 3159 0002                  		move.w	(a1)+,2(a0)
00008C3C 0028 0004 0001             		ori.b	#4,1(a0)
00008C42 1159 001A                  		move.b	(a1)+,$1A(a0)
00008C46 1159 0019                  		move.b	(a1)+,$19(a0)
00008C4A 1159 0018                  		move.b	(a1)+,$18(a0)
00008C4E 1159 0020                  		move.b	(a1)+,$20(a0)
00008C52                            
00008C52                            Obj1C_ChkDel:				; XREF: Obj1C_Index
00008C52 3028 0008                  		move.w	8(a0),d0
00008C56 0240 FF80                  		andi.w	#$FF80,d0
00008C5A 3238 F700                  		move.w	($FFFFF700).w,d1
00008C5E 0441 0080                  		subi.w	#$80,d1
00008C62 0241 FF80                  		andi.w	#$FF80,d1
00008C66 9041                       		sub.w	d1,d0
00008C68 0C40 0280                  		cmpi.w	#$280,d0
00008C6C 6200 0000                  		bhi.w	DeleteObject
00008C70 6000 0000                  		bra.w	DisplaySprite
00008C74                            ; ===========================================================================
00008C74                            ; ---------------------------------------------------------------------------
00008C74                            ; Variables for	object $1C are stored in an array
00008C74                            ; ---------------------------------------------------------------------------
00008C74 0000 0000                  Obj1C_Var:	dc.l Map_obj1C		; mappings address
00008C78 44D8                       		dc.w $44D8		; VRAM setting
00008C7A 0008 0200                  		dc.b 0,	8, 2, 0		; frame, width,	priority, collision response
00008C7E 0000 0000                  		dc.l Map_obj1C
00008C82 44D8                       		dc.w $44D8
00008C84 0008 0200                  		dc.b 0,	8, 2, 0
00008C88 0000 0000                  		dc.l Map_obj1C
00008C8C 44D8                       		dc.w $44D8
00008C8E 0008 0200                  		dc.b 0,	8, 2, 0
00008C92 0000 7D86                  		dc.l Map_obj11
00008C96 438E                       		dc.w $438E
00008C98 0110 0100                  		dc.b 1,	$10, 1,	0
00008C9C                            ; ---------------------------------------------------------------------------
00008C9C                            ; Sprite mappings - SLZ	lava thrower
00008C9C                            ; ---------------------------------------------------------------------------
00008C9C                            Map_obj1C:
00008C9C                            	include "_maps\obj1C.asm"
00008C9C                            ; ---------------------------------------------------------------------------
00008C9C                            ; Sprite mappings - SLZ	lava thrower
00008C9C                            ; ---------------------------------------------------------------------------
00008C9C 0000                       		dc.w byte_8858-Map_obj1C
00008C9E 01                         byte_8858:	dc.b 1
00008C9F F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00008CA4                            		even
00008CA4                            		even
00008CA4                            
00008CA4                            ; ===========================================================================
00008CA4                            ; ---------------------------------------------------------------------------
00008CA4                            ; Object 1D - switch that activates when Sonic touches it
00008CA4                            ; (this	is not used anywhere in	the game)
00008CA4                            ; ---------------------------------------------------------------------------
00008CA4                            
00008CA4                            Obj1D:					; XREF: Obj_Index
00008CA4 7000                       		moveq	#0,d0
00008CA6 1028 0024                  		move.b	$24(a0),d0
00008CAA 323B 0000                  		move.w	Obj1D_Index(pc,d0.w),d1
00008CAE 4EFB 1000                  		jmp	Obj1D_Index(pc,d1.w)
00008CB2                            ; ===========================================================================
00008CB2 0000                       Obj1D_Index:	dc.w Obj1D_Main-Obj1D_Index
00008CB4 0000                       		dc.w Obj1D_Action-Obj1D_Index
00008CB6 0000                       		dc.w Obj1D_Delete-Obj1D_Index
00008CB8                            ; ===========================================================================
00008CB8                            
00008CB8                            Obj1D_Main:				; XREF: Obj1D_Index
00008CB8 5428 0024                  		addq.b	#2,$24(a0)
00008CBC 217C 0000 0000 0004        		move.l	#Map_obj1D,4(a0)
00008CC4 317C 4000 0002             		move.w	#$4000,2(a0)
00008CCA 117C 0004 0001             		move.b	#4,1(a0)
00008CD0 3168 000C 0030             		move.w	$C(a0),$30(a0)	; save position	on y-axis
00008CD6 117C 0010 0019             		move.b	#$10,$19(a0)
00008CDC 117C 0005 0018             		move.b	#5,$18(a0)
00008CE2                            
00008CE2                            Obj1D_Action:				; XREF: Obj1D_Index
00008CE2 3168 0030 000C             		move.w	$30(a0),$C(a0)	; restore position on y-axis
00008CE8 323C 0010                  		move.w	#$10,d1
00008CEC 6100 0000                  		bsr.w	Obj1D_ChkTouch
00008CF0 6700                       		beq.s	Obj1D_ChkDel
00008CF2 5468 000C                  		addq.w	#2,$C(a0)	; move object 2	pixels
00008CF6 7001                       		moveq	#1,d0
00008CF8 31C0 F7E0                  		move.w	d0,($FFFFF7E0).w ; set switch 0	as "pressed"
00008CFC                            
00008CFC                            Obj1D_ChkDel:
00008CFC 6100 0000                  		bsr.w	DisplaySprite
00008D00 3028 0008                  		move.w	8(a0),d0
00008D04 0240 FF80                  		andi.w	#$FF80,d0
00008D08 3238 F700                  		move.w	($FFFFF700).w,d1
00008D0C 0441 0080                  		subi.w	#$80,d1
00008D10 0241 FF80                  		andi.w	#$FF80,d1
00008D14 9041                       		sub.w	d1,d0
00008D16 0C40 0280                  		cmpi.w	#$280,d0
00008D1A 6200 0000                  		bhi.w	Obj1D_Delete
00008D1E 4E75                       		rts	
00008D20                            ; ===========================================================================
00008D20                            
00008D20                            Obj1D_Delete:				; XREF: Obj1D_Index
00008D20 6100 0000                  		bsr.w	DeleteObject
00008D24 4E75                       		rts	
00008D26                            ; ---------------------------------------------------------------------------
00008D26                            ; Subroutine to	check if Sonic touches the object
00008D26                            ; ---------------------------------------------------------------------------
00008D26                            
00008D26                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008D26                            
00008D26                            
00008D26                            Obj1D_ChkTouch:				; XREF: Obj1D_Action
00008D26 43F8 D000                  		lea	($FFFFD000).w,a1
00008D2A 3029 0008                  		move.w	8(a1),d0
00008D2E 9068 0008                  		sub.w	8(a0),d0
00008D32 D041                       		add.w	d1,d0
00008D34 6B00                       		bmi.s	loc_8918
00008D36 D241                       		add.w	d1,d1
00008D38 B041                       		cmp.w	d1,d0
00008D3A 6400                       		bcc.s	loc_8918
00008D3C 3429 000C                  		move.w	$C(a1),d2
00008D40 1229 0016                  		move.b	$16(a1),d1
00008D44 4881                       		ext.w	d1
00008D46 D242                       		add.w	d2,d1
00008D48 3028 000C                  		move.w	$C(a0),d0
00008D4C 0440 0010                  		subi.w	#$10,d0
00008D50 9041                       		sub.w	d1,d0
00008D52 6200                       		bhi.s	loc_8918
00008D54 0C40 FFF0                  		cmpi.w	#-$10,d0
00008D58 6500                       		bcs.s	loc_8918
00008D5A 70FF                       		moveq	#-1,d0
00008D5C 4E75                       		rts	
00008D5E                            ; ===========================================================================
00008D5E                            
00008D5E                            loc_8918:
00008D5E 7000                       		moveq	#0,d0
00008D60 4E75                       		rts	
00008D62                            ; End of function Obj1D_ChkTouch
00008D62                            
00008D62                            ; ===========================================================================
00008D62                            ; ---------------------------------------------------------------------------
00008D62                            ; Sprite mappings - object 1D
00008D62                            ; ---------------------------------------------------------------------------
00008D62                            Map_obj1D:
00008D62                            	include "_maps\obj1D.asm"
00008D62                            ; ---------------------------------------------------------------------------
00008D62                            ; Sprite mappings - object 1D
00008D62                            ; ---------------------------------------------------------------------------
00008D62 0000                       		dc.w byte_891E-Map_obj1D
00008D64 04                         byte_891E:	dc.b 4
00008D65 E807 0054 F0               		dc.b $E8, 7, 0,	$54, $F0
00008D6A 0805 005C F0               		dc.b 8,	5, 0, $5C, $F0
00008D6F E807 0054 00               		dc.b $E8, 7, 0,	$54, 0
00008D74 0805 005C 00               		dc.b 8,	5, 0, $5C, 0
00008D7A 00                         		even
00008D7A 00                         		even
00008D7A                            
00008D7A                            ; ===========================================================================
00008D7A                            ; ---------------------------------------------------------------------------
00008D7A                            ; Object 2A - doors (SBZ)
00008D7A                            ; ---------------------------------------------------------------------------
00008D7A                            
00008D7A                            Obj2A:					; XREF: Obj_Index
00008D7A 7000                       		moveq	#0,d0
00008D7C 1028 0024                  		move.b	$24(a0),d0
00008D80 323B 0000                  		move.w	Obj2A_Index(pc,d0.w),d1
00008D84 4EFB 1000                  		jmp	Obj2A_Index(pc,d1.w)
00008D88                            ; ===========================================================================
00008D88 0000                       Obj2A_Index:	dc.w Obj2A_Main-Obj2A_Index
00008D8A 0000                       		dc.w Obj2A_OpenShut-Obj2A_Index
00008D8C                            ; ===========================================================================
00008D8C                            
00008D8C                            Obj2A_Main:				; XREF: Obj2A_Index
00008D8C 5428 0024                  		addq.b	#2,$24(a0)
00008D90 217C 0000 0000 0004        		move.l	#Map_obj2A,4(a0)
00008D98 317C 42E8 0002             		move.w	#$42E8,2(a0)
00008D9E 0028 0004 0001             		ori.b	#4,1(a0)
00008DA4 117C 0008 0019             		move.b	#8,$19(a0)
00008DAA 117C 0004 0018             		move.b	#4,$18(a0)
00008DB0                            
00008DB0                            Obj2A_OpenShut:				; XREF: Obj2A_Index
00008DB0 323C 0040                  		move.w	#$40,d1
00008DB4 4228 001C                  		clr.b	$1C(a0)		; use "closing"	animation
00008DB8 3038 D008                  		move.w	($FFFFD008).w,d0
00008DBC D041                       		add.w	d1,d0
00008DBE B068 0008                  		cmp.w	8(a0),d0
00008DC2 6500                       		bcs.s	Obj2A_Animate
00008DC4 9041                       		sub.w	d1,d0
00008DC6 9041                       		sub.w	d1,d0
00008DC8 B068 0008                  		cmp.w	8(a0),d0
00008DCC 6400                       		bcc.s	Obj2A_Animate
00008DCE D041                       		add.w	d1,d0
00008DD0 B068 0008                  		cmp.w	8(a0),d0
00008DD4 6400                       		bcc.s	loc_899A
00008DD6 0828 0000 0022             		btst	#0,$22(a0)
00008DDC 6600                       		bne.s	Obj2A_Animate
00008DDE 6000                       		bra.s	Obj2A_Open
00008DE0                            ; ===========================================================================
00008DE0                            
00008DE0                            loc_899A:				; XREF: Obj2A_OpenShut
00008DE0 0828 0000 0022             		btst	#0,$22(a0)
00008DE6 6700                       		beq.s	Obj2A_Animate
00008DE8                            
00008DE8                            Obj2A_Open:				; XREF: Obj2A_OpenShut
00008DE8 117C 0001 001C             		move.b	#1,$1C(a0)	; use "opening"	animation
00008DEE                            
00008DEE                            Obj2A_Animate:				; XREF: Obj2A_OpenShut; loc_899A
00008DEE 43F9 0000 0000             		lea	(Ani_obj2A).l,a1
00008DF4 6100 0000                  		bsr.w	AnimateSprite
00008DF8 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
00008DFC 6600                       		bne.s	Obj2A_MarkAsUsed ; if yes, branch
00008DFE 323C 0011                  		move.w	#$11,d1
00008E02 343C 0020                  		move.w	#$20,d2
00008E06 3602                       		move.w	d2,d3
00008E08 5243                       		addq.w	#1,d3
00008E0A 3828 0008                  		move.w	8(a0),d4
00008E0E 6100 0000                  		bsr.w	SolidObject
00008E12                            
00008E12                            Obj2A_MarkAsUsed:
00008E12 6000 0000                  		bra.w	MarkObjGone
00008E16                            ; ===========================================================================
00008E16                            Ani_obj2A:
00008E16                            	include "_anim\obj2A.asm"
00008E16                            ; ---------------------------------------------------------------------------
00008E16                            ; Animation script - doors (SBZ)
00008E16                            ; ---------------------------------------------------------------------------
00008E16 0000                       		dc.w Ani_obj2A_Shut-Ani_obj2A
00008E18 0000                       		dc.w Ani_obj2A_Open-Ani_obj2A
00008E1A 0008 0706 0504 0302 0100+  Ani_obj2A_Shut:	dc.b 0,	8, 7, 6, 5, 4, 3, 2, 1,	0, $FE,	1
00008E26 0000 0102 0304 0506 0708+  Ani_obj2A_Open:	dc.b 0,	0, 1, 2, 3, 4, 5, 6, 7,	8, $FE,	1
00008E32                            		even
00008E32                            		even
00008E32                            
00008E32                            ; ---------------------------------------------------------------------------
00008E32                            ; Sprite mappings - doors (SBZ)
00008E32                            ; ---------------------------------------------------------------------------
00008E32                            Map_obj2A:
00008E32                            	include "_maps\obj2A.asm"
00008E32                            ; ---------------------------------------------------------------------------
00008E32                            ; Sprite mappings - doors (SBZ)
00008E32                            ; ---------------------------------------------------------------------------
00008E32 0000 0000                  		dc.w byte_89FE-Map_obj2A, byte_8A09-Map_obj2A
00008E36 0000 0000                  		dc.w byte_8A14-Map_obj2A, byte_8A1F-Map_obj2A
00008E3A 0000 0000                  		dc.w byte_8A2A-Map_obj2A, byte_8A35-Map_obj2A
00008E3E 0000 0000                  		dc.w byte_8A40-Map_obj2A, byte_8A4B-Map_obj2A
00008E42 0000                       		dc.w byte_8A56-Map_obj2A
00008E44 02                         byte_89FE:	dc.b 2
00008E45 E007 0800 F8               		dc.b $E0, 7, 8,	0, $F8	; door closed
00008E4A 0007 0800 F8               		dc.b 0,	7, 8, 0, $F8
00008E4F 02                         byte_8A09:	dc.b 2
00008E50 DC07 0800 F8               		dc.b $DC, 7, 8,	0, $F8
00008E55 0407 0800 F8               		dc.b 4,	7, 8, 0, $F8
00008E5A 02                         byte_8A14:	dc.b 2
00008E5B D807 0800 F8               		dc.b $D8, 7, 8,	0, $F8
00008E60 0807 0800 F8               		dc.b 8,	7, 8, 0, $F8
00008E65 02                         byte_8A1F:	dc.b 2
00008E66 D407 0800 F8               		dc.b $D4, 7, 8,	0, $F8
00008E6B 0C07 0800 F8               		dc.b $C, 7, 8, 0, $F8
00008E70 02                         byte_8A2A:	dc.b 2
00008E71 D007 0800 F8               		dc.b $D0, 7, 8,	0, $F8
00008E76 1007 0800 F8               		dc.b $10, 7, 8,	0, $F8
00008E7B 02                         byte_8A35:	dc.b 2
00008E7C CC07 0800 F8               		dc.b $CC, 7, 8,	0, $F8
00008E81 1407 0800 F8               		dc.b $14, 7, 8,	0, $F8
00008E86 02                         byte_8A40:	dc.b 2
00008E87 C807 0800 F8               		dc.b $C8, 7, 8,	0, $F8
00008E8C 1807 0800 F8               		dc.b $18, 7, 8,	0, $F8
00008E91 02                         byte_8A4B:	dc.b 2
00008E92 C407 0800 F8               		dc.b $C4, 7, 8,	0, $F8
00008E97 1C07 0800 F8               		dc.b $1C, 7, 8,	0, $F8
00008E9C 02                         byte_8A56:	dc.b 2
00008E9D C007 0800 F8               		dc.b $C0, 7, 8,	0, $F8	; door fully open
00008EA2 2007 0800 F8               		dc.b $20, 7, 8,	0, $F8
00008EA8 00                         		even
00008EA8 00                         		even
00008EA8                            
00008EA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008EA8                            
00008EA8                            
00008EA8                            Obj44_SolidWall:			; XREF: Obj44_Solid
00008EA8 6100 0000                  		bsr.w	Obj44_SolidWall2
00008EAC 6700                       		beq.s	loc_8AA8
00008EAE 6B00 0000                  		bmi.w	loc_8AC4
00008EB2 4A40                       		tst.w	d0
00008EB4 6700 0000                  		beq.w	loc_8A92
00008EB8 6B00                       		bmi.s	loc_8A7C
00008EBA 4A69 0010                  		tst.w	$10(a1)
00008EBE 6B00                       		bmi.s	loc_8A92
00008EC0 6000                       		bra.s	loc_8A82
00008EC2                            ; ===========================================================================
00008EC2                            
00008EC2                            loc_8A7C:
00008EC2 4A69 0010                  		tst.w	$10(a1)
00008EC6 6A00                       		bpl.s	loc_8A92
00008EC8                            
00008EC8                            loc_8A82:
00008EC8 9169 0008                  		sub.w	d0,8(a1)
00008ECC 337C 0000 0014             		move.w	#0,$14(a1)
00008ED2 337C 0000 0010             		move.w	#0,$10(a1)
00008ED8                            
00008ED8                            loc_8A92:
00008ED8 0829 0001 0022             		btst	#1,$22(a1)
00008EDE 6600                       		bne.s	loc_8AB6
00008EE0 08E9 0005 0022             		bset	#5,$22(a1)
00008EE6 08E8 0005 0022             		bset	#5,$22(a0)
00008EEC 4E75                       		rts	
00008EEE                            ; ===========================================================================
00008EEE                            
00008EEE                            loc_8AA8:
00008EEE 0828 0005 0022             		btst	#5,$22(a0)
00008EF4 6700                       		beq.s	locret_8AC2
00008EF6 337C 0001 001C             		move.w	#1,$1C(a1)
00008EFC                            
00008EFC                            loc_8AB6:
00008EFC 08A8 0005 0022             		bclr	#5,$22(a0)
00008F02 08A9 0005 0022             		bclr	#5,$22(a1)
00008F08                            
00008F08                            locret_8AC2:
00008F08 4E75                       		rts	
00008F0A                            ; ===========================================================================
00008F0A                            
00008F0A                            loc_8AC4:
00008F0A 4A69 0012                  		tst.w	$12(a1)
00008F0E 6A00                       		bpl.s	locret_8AD8
00008F10 4A43                       		tst.w	d3
00008F12 6A00                       		bpl.s	locret_8AD8
00008F14 9769 000C                  		sub.w	d3,$C(a1)
00008F18 337C 0000 0012             		move.w	#0,$12(a1)
00008F1E                            
00008F1E                            locret_8AD8:
00008F1E 4E75                       		rts	
00008F20                            ; End of function Obj44_SolidWall
00008F20                            
00008F20                            
00008F20                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008F20                            
00008F20                            
00008F20                            Obj44_SolidWall2:			; XREF: Obj44_SolidWall
00008F20 43F8 D000                  		lea	($FFFFD000).w,a1
00008F24 3029 0008                  		move.w	8(a1),d0
00008F28 9068 0008                  		sub.w	8(a0),d0
00008F2C D041                       		add.w	d1,d0
00008F2E 6B00                       		bmi.s	loc_8B48
00008F30 3601                       		move.w	d1,d3
00008F32 D643                       		add.w	d3,d3
00008F34 B043                       		cmp.w	d3,d0
00008F36 6200                       		bhi.s	loc_8B48
00008F38 1629 0016                  		move.b	$16(a1),d3
00008F3C 4883                       		ext.w	d3
00008F3E D443                       		add.w	d3,d2
00008F40 3629 000C                  		move.w	$C(a1),d3
00008F44 9668 000C                  		sub.w	$C(a0),d3
00008F48 D642                       		add.w	d2,d3
00008F4A 6B00                       		bmi.s	loc_8B48
00008F4C 3802                       		move.w	d2,d4
00008F4E D844                       		add.w	d4,d4
00008F50 B644                       		cmp.w	d4,d3
00008F52 6400                       		bcc.s	loc_8B48
00008F54 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00008F58 6B00                       		bmi.s	loc_8B48
00008F5A 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00008F60 6400                       		bcc.s	loc_8B48
00008F62 4A78 FE08                  		tst.w	($FFFFFE08).w
00008F66 6600                       		bne.s	loc_8B48
00008F68 3A00                       		move.w	d0,d5
00008F6A B240                       		cmp.w	d0,d1
00008F6C 6400                       		bcc.s	loc_8B30
00008F6E D241                       		add.w	d1,d1
00008F70 9041                       		sub.w	d1,d0
00008F72 3A00                       		move.w	d0,d5
00008F74 4445                       		neg.w	d5
00008F76                            
00008F76                            loc_8B30:
00008F76 3203                       		move.w	d3,d1
00008F78 B443                       		cmp.w	d3,d2
00008F7A 6400                       		bcc.s	loc_8B3C
00008F7C 9644                       		sub.w	d4,d3
00008F7E 3203                       		move.w	d3,d1
00008F80 4441                       		neg.w	d1
00008F82                            
00008F82                            loc_8B3C:
00008F82 BA41                       		cmp.w	d1,d5
00008F84 6200                       		bhi.s	loc_8B44
00008F86 7801                       		moveq	#1,d4
00008F88 4E75                       		rts	
00008F8A                            ; ===========================================================================
00008F8A                            
00008F8A                            loc_8B44:
00008F8A 78FF                       		moveq	#-1,d4
00008F8C 4E75                       		rts	
00008F8E                            ; ===========================================================================
00008F8E                            
00008F8E                            loc_8B48:
00008F8E 7800                       		moveq	#0,d4
00008F90 4E75                       		rts	
00008F92                            ; End of function Obj44_SolidWall2
00008F92                            
00008F92                            ; ===========================================================================
00008F92                            ; ---------------------------------------------------------------------------
00008F92                            ; Object 1E - Ball Hog enemy (SBZ)
00008F92                            ; ---------------------------------------------------------------------------
00008F92                            
00008F92                            Obj1E:					; XREF: Obj_Index
00008F92 7000                       		moveq	#0,d0
00008F94 1028 0024                  		move.b	$24(a0),d0
00008F98 323B 0000                  		move.w	Obj1E_Index(pc,d0.w),d1
00008F9C 4EFB 1000                  		jmp	Obj1E_Index(pc,d1.w)
00008FA0                            ; ===========================================================================
00008FA0 0000                       Obj1E_Index:	dc.w Obj1E_Main-Obj1E_Index
00008FA2 0000                       		dc.w Obj1E_Action-Obj1E_Index
00008FA4                            ; ===========================================================================
00008FA4                            
00008FA4                            Obj1E_Main:				; XREF: Obj1E_Index
00008FA4 117C 0013 0016             		move.b	#$13,$16(a0)
00008FAA 117C 0008 0017             		move.b	#8,$17(a0)
00008FB0 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
00008FB8 317C 2302 0002             		move.w	#$2302,2(a0)
00008FBE 117C 0004 0001             		move.b	#4,1(a0)
00008FC4 117C 0004 0018             		move.b	#4,$18(a0)
00008FCA 117C 0005 0020             		move.b	#5,$20(a0)
00008FD0 117C 000C 0019             		move.b	#$C,$19(a0)
00008FD6 6100 0000                  		bsr.w	ObjectFall
00008FDA 4EB9 0000 0000             		jsr	ObjHitFloor
00008FE0 4A41                       		tst.w	d1
00008FE2 6A00                       		bpl.s	locret_8BAC
00008FE4 D368 000C                  		add.w	d1,$C(a0)
00008FE8 317C 0000 0012             		move.w	#0,$12(a0)
00008FEE 5428 0024                  		addq.b	#2,$24(a0)
00008FF2                            
00008FF2                            locret_8BAC:
00008FF2 4E75                       		rts	
00008FF4                            ; ===========================================================================
00008FF4                            
00008FF4                            Obj1E_Action:				; XREF: Obj1E_Index
00008FF4 43F9 0000 0000             		lea	(Ani_obj1E).l,a1
00008FFA 6100 0000                  		bsr.w	AnimateSprite
00008FFE 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is final frame (01) displayed?
00009004 6600                       		bne.s	Obj1E_SetBall	; if not, branch
00009006 4A28 0032                  		tst.b	$32(a0)		; is it	set to launch cannonball?
0000900A 6700                       		beq.s	Obj1E_MakeBall	; if yes, branch
0000900C 6000                       		bra.s	Obj1E_MarkAsGone
0000900E                            ; ===========================================================================
0000900E                            
0000900E                            Obj1E_SetBall:				; XREF: Obj1E_Action
0000900E 4228 0032                  		clr.b	$32(a0)		; set to launch	cannonball
00009012                            
00009012                            Obj1E_MarkAsGone:			; XREF: Obj1E_Action
00009012 6000 0000                  		bra.w	MarkObjGone
00009016                            ; ===========================================================================
00009016                            
00009016                            Obj1E_MakeBall:				; XREF: Obj1E_Action
00009016 117C 0001 0032             		move.b	#1,$32(a0)
0000901C 6100 0000                  		bsr.w	SingleObjLoad
00009020 6600                       		bne.s	loc_8C1A
00009022 12BC 0020                  		move.b	#$20,0(a1)	; load cannonball object ($20)
00009026 3368 0008 0008             		move.w	8(a0),8(a1)
0000902C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009032 337C FF00 0010             		move.w	#-$100,$10(a1)	; cannonball bounces to	the left
00009038 337C 0000 0012             		move.w	#0,$12(a1)
0000903E 70FC                       		moveq	#-4,d0
00009040 0828 0000 0022             		btst	#0,$22(a0)	; is Ball Hog facing right?
00009046 6700                       		beq.s	loc_8C0A	; if not, branch
00009048 4440                       		neg.w	d0
0000904A 4469 0010                  		neg.w	$10(a1)		; cannonball bounces to	the right
0000904E                            
0000904E                            loc_8C0A:
0000904E D169 0008                  		add.w	d0,8(a1)
00009052 0669 000C 000C             		addi.w	#$C,$C(a1)
00009058 1368 0028 0028             		move.b	$28(a0),$28(a1)	; copy object type from	Ball Hog
0000905E                            
0000905E                            loc_8C1A:
0000905E 60B2                       		bra.s	Obj1E_MarkAsGone
00009060                            ; ===========================================================================
00009060                            ; ---------------------------------------------------------------------------
00009060                            ; Object 20 - cannonball that Ball Hog throws (SBZ)
00009060                            ; ---------------------------------------------------------------------------
00009060                            
00009060                            Obj20:					; XREF: Obj_Index
00009060 7000                       		moveq	#0,d0
00009062 1028 0024                  		move.b	$24(a0),d0
00009066 323B 0000                  		move.w	Obj20_Index(pc,d0.w),d1
0000906A 4EFB 1000                  		jmp	Obj20_Index(pc,d1.w)
0000906E                            ; ===========================================================================
0000906E 0000                       Obj20_Index:	dc.w Obj20_Main-Obj20_Index
00009070 0000                       		dc.w Obj20_Bounce-Obj20_Index
00009072                            ; ===========================================================================
00009072                            
00009072                            Obj20_Main:				; XREF: Obj20_Index
00009072 5428 0024                  		addq.b	#2,$24(a0)
00009076 117C 0007 0016             		move.b	#7,$16(a0)
0000907C 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
00009084 317C 2302 0002             		move.w	#$2302,2(a0)
0000908A 117C 0004 0001             		move.b	#4,1(a0)
00009090 117C 0003 0018             		move.b	#3,$18(a0)
00009096 117C 0087 0020             		move.b	#$87,$20(a0)
0000909C 117C 0008 0019             		move.b	#8,$19(a0)
000090A2 7000                       		moveq	#0,d0
000090A4 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
000090A8 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 frames	(1 second)
000090AC 3140 0030                  		move.w	d0,$30(a0)	; set explosion	time
000090B0 117C 0004 001A             		move.b	#4,$1A(a0)
000090B6                            
000090B6                            Obj20_Bounce:				; XREF: Obj20_Index
000090B6 4EB9 0000 0000             		jsr	ObjectFall
000090BC 4A68 0012                  		tst.w	$12(a0)
000090C0 6B00                       		bmi.s	Obj20_ChkExplode
000090C2 4EB9 0000 0000             		jsr	ObjHitFloor
000090C8 4A41                       		tst.w	d1
000090CA 6A00                       		bpl.s	Obj20_ChkExplode
000090CC D368 000C                  		add.w	d1,$C(a0)
000090D0 317C FD00 0012             		move.w	#-$300,$12(a0)
000090D6 4A03                       		tst.b	d3
000090D8 6700                       		beq.s	Obj20_ChkExplode
000090DA 6B00                       		bmi.s	loc_8CA4
000090DC 4A68 0010                  		tst.w	$10(a0)
000090E0 6A00                       		bpl.s	Obj20_ChkExplode
000090E2 4468 0010                  		neg.w	$10(a0)
000090E6 6000                       		bra.s	Obj20_ChkExplode
000090E8                            ; ===========================================================================
000090E8                            
000090E8                            loc_8CA4:				; XREF: Obj20_Bounce
000090E8 4A68 0010                  		tst.w	$10(a0)
000090EC 6B00                       		bmi.s	Obj20_ChkExplode
000090EE 4468 0010                  		neg.w	$10(a0)
000090F2                            
000090F2                            Obj20_ChkExplode:			; XREF: Obj20_Bounce
000090F2 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from explosion time
000090F6 6A00                       		bpl.s	Obj20_Animate	; if time is > 0, branch
000090F8 10BC 0024                  		move.b	#$24,0(a0)
000090FC 10BC 003F                  		move.b	#$3F,0(a0)	; change object	to an explosion	($3F)
00009100 117C 0000 0024             		move.b	#0,$24(a0)	; reset	routine	counter
00009106 6000 0000                  		bra.w	Obj3F		; jump to explosion code
0000910A                            ; ===========================================================================
0000910A                            
0000910A                            Obj20_Animate:				; XREF: Obj20_ChkExplode
0000910A 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000910E 6A00                       		bpl.s	Obj20_Display
00009110 117C 0005 001E             		move.b	#5,$1E(a0)	; set frame duration to	5 frames
00009116 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
0000911C                            
0000911C                            Obj20_Display:
0000911C 6100 0000                  		bsr.w	DisplaySprite
00009120 3038 F72E                  		move.w	($FFFFF72E).w,d0
00009124 0640 00E0                  		addi.w	#$E0,d0
00009128 B068 000C                  		cmp.w	$C(a0),d0	; has object fallen off	the level?
0000912C 6500 0000                  		bcs.w	DeleteObject	; if yes, branch
00009130 4E75                       		rts	
00009132                            ; ===========================================================================
00009132                            ; ---------------------------------------------------------------------------
00009132                            ; Object 24 - explosion	from a destroyed monitor
00009132                            ; ---------------------------------------------------------------------------
00009132                            
00009132                            Obj24:					; XREF: Obj_Index
00009132 7000                       		moveq	#0,d0
00009134 1028 0024                  		move.b	$24(a0),d0
00009138 323B 0000                  		move.w	Obj24_Index(pc,d0.w),d1
0000913C 4EFB 1000                  		jmp	Obj24_Index(pc,d1.w)
00009140                            ; ===========================================================================
00009140 0000                       Obj24_Index:	dc.w Obj24_Main-Obj24_Index
00009142 0000                       		dc.w Obj24_Animate-Obj24_Index
00009144                            ; ===========================================================================
00009144                            
00009144                            Obj24_Main:				; XREF: Obj24_Index
00009144 5428 0024                  		addq.b	#2,$24(a0)
00009148 217C 0000 0000 0004        		move.l	#Map_obj24,4(a0)
00009150 317C 041C 0002             		move.w	#$41C,2(a0)
00009156 117C 0004 0001             		move.b	#4,1(a0)
0000915C 117C 0001 0018             		move.b	#1,$18(a0)
00009162 117C 0000 0020             		move.b	#0,$20(a0)
00009168 117C 000C 0019             		move.b	#$C,$19(a0)
0000916E 117C 0009 001E             		move.b	#9,$1E(a0)
00009174 117C 0000 001A             		move.b	#0,$1A(a0)
0000917A 303C 00A5                  		move.w	#$A5,d0
0000917E 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play explosion sound
00009184                            
00009184                            Obj24_Animate:				; XREF: Obj24_Index
00009184 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00009188 6A00                       		bpl.s	Obj24_Display
0000918A 117C 0009 001E             		move.b	#9,$1E(a0)	; set frame duration to	9 frames
00009190 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
00009194 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is the final frame (04) displayed?
0000919A 6700 0000                  		beq.w	DeleteObject	; if yes, branch
0000919E                            
0000919E                            Obj24_Display:
0000919E 6000 0000                  		bra.w	DisplaySprite
000091A2                            ; ===========================================================================
000091A2                            ; ---------------------------------------------------------------------------
000091A2                            ; Object 27 - explosion	from a destroyed enemy
000091A2                            ; ---------------------------------------------------------------------------
000091A2                            
000091A2                            Obj27:					; XREF: Obj_Index
000091A2 7000                       		moveq	#0,d0
000091A4 1028 0024                  		move.b	$24(a0),d0
000091A8 323B 0000                  		move.w	Obj27_Index(pc,d0.w),d1
000091AC 4EFB 1000                  		jmp	Obj27_Index(pc,d1.w)
000091B0                            ; ===========================================================================
000091B0 0000                       Obj27_Index:	dc.w Obj27_LoadAnimal-Obj27_Index
000091B2 0000                       		dc.w Obj27_Main-Obj27_Index
000091B4 0000                       		dc.w Obj27_Animate-Obj27_Index
000091B6                            ; ===========================================================================
000091B6                            
000091B6                            Obj27_LoadAnimal:			; XREF: Obj27_Index
000091B6 5428 0024                  		addq.b	#2,$24(a0)
000091BA 6100 0000                  		bsr.w	SingleObjLoad
000091BE 6600                       		bne.s	Obj27_Main
000091C0 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
000091C4 3368 0008 0008             		move.w	8(a0),8(a1)
000091CA 3368 000C 000C             		move.w	$C(a0),$C(a1)
000091D0 3368 003E 003E             		move.w	$3E(a0),$3E(a1)
000091D6                            
000091D6                            Obj27_Main:				; XREF: Obj27_Index
000091D6 5428 0024                  		addq.b	#2,$24(a0)
000091DA 217C 0000 0000 0004        		move.l	#Map_obj27,4(a0)
000091E2 317C 05A0 0002             		move.w	#$5A0,2(a0)
000091E8 117C 0004 0001             		move.b	#4,1(a0)
000091EE 117C 0001 0018             		move.b	#1,$18(a0)
000091F4 117C 0000 0020             		move.b	#0,$20(a0)
000091FA 117C 000C 0019             		move.b	#$C,$19(a0)
00009200                            		; move.b	#7,$1E(a0)	; set frame duration to	7 frames
00009200 117C 000E 001E             		move.b	#$E,$1E(a0)	; GMZ
00009206 117C 0000 001A             		move.b	#0,$1A(a0)
0000920C 303C 00C1                  		move.w	#$C1,d0
00009210 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play breaking enemy sound
00009216                            
00009216 45F9 0000 0000             		lea	(Obj27_ExplosionXYSpd).l,a2	; GMZ: Get Explosion X/Y Speeds according to subtype
0000921C 1028 0028                  		move.b	$28(a0),d0
00009220 3172 0000 0010             		move.w	(a2,d0.w),$10(a0)
00009226 3172 0002 0012             		move.w	2(a2,d0.w),$12(a0)
0000922C                            
0000922C                            Obj27_Animate:				; XREF: Obj27_Index
0000922C 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00009230 6A00                       		bpl.s	Obj27_Display
00009232                            		; move.b	#7,$1E(a0)	; set frame duration to	7 frames
00009232 117C 000E 001E             		move.b	#$E,$1E(a0)	; GMZ
00009238 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
0000923C 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is the final frame (05) displayed?
00009242 6700 0000                  		beq.w	DeleteObject	; if yes, branch
00009246                            
00009246                            Obj27_Display:
00009246 4EB9 0000 0000             		jsr	SpeedToPos	; GMZ
0000924C 0668 0038 0012             		addi.w	#$38,$12(a0)	; GMZ: Explosion Gravity
00009252 6000 0000                  		bra.w	DisplaySprite
00009256                            ; ===========================================================================
00009256                            ; ---------------------------------------------------------------------------
00009256                            Obj27_ExplosionXYSpd:
00009256                            		; dc.w	-$350, -$300	; Left
00009256                            		; dc.w	-$200, -$450	; Near middle (left)
00009256                            		; dc.w	0, -$500	; Middle
00009256                            		; dc.w	$200, -$450	; Near middle (right)
00009256                            		; dc.w	$350, -$300	; Right
00009256                            
00009256 FEB0 FC00                  		dc.w	-$150, -$400	; Left
0000925A FF00 FAB0                  		dc.w	-$100, -$550	; Near middle (left)
0000925E 0000 FA00                  		dc.w	0, -$600	; Middle
00009262 0100 FAB0                  		dc.w	$100, -$550	; Near middle (right)
00009266 0150 FC00                  		dc.w	$150, -$400	; Right
0000926A                            
0000926A 6869 2068 656C 6C6F 2068+  		dc.b	"hi hello hru -garblemarden"
00009284                            ; ---------------------------------------------------------------------------
00009284                            ; Object 3F - explosion	from a destroyed boss, bomb or cannonball
00009284                            ; ---------------------------------------------------------------------------
00009284                            
00009284                            Obj3F:					; XREF: Obj_Index
00009284 7000                       		moveq	#0,d0
00009286 1028 0024                  		move.b	$24(a0),d0
0000928A 323B 0000                  		move.w	Obj3F_Index(pc,d0.w),d1
0000928E 4EFB 1000                  		jmp	Obj3F_Index(pc,d1.w)
00009292                            ; ===========================================================================
00009292 0000                       Obj3F_Index:	dc.w Obj3F_Main-Obj3F_Index
00009294 FF9A                       		dc.w Obj27_Animate-Obj3F_Index
00009296                            ; ===========================================================================
00009296                            
00009296                            Obj3F_Main:				; XREF: Obj3F_Index
00009296 5428 0024                  		addq.b	#2,$24(a0)
0000929A 217C 0000 0000 0004        		move.l	#Map_obj3F,4(a0)
000092A2 317C 05A0 0002             		move.w	#$5A0,2(a0)
000092A8 117C 0004 0001             		move.b	#4,1(a0)
000092AE 117C 0001 0018             		move.b	#1,$18(a0)
000092B4 117C 0000 0020             		move.b	#0,$20(a0)
000092BA 117C 000C 0019             		move.b	#$C,$19(a0)
000092C0 117C 0007 001E             		move.b	#7,$1E(a0)
000092C6 117C 0000 001A             		move.b	#0,$1A(a0)
000092CC 303C 00C4                  		move.w	#$C4,d0
000092D0 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play exploding bomb sound
000092D6                            ; ===========================================================================
000092D6                            Ani_obj1E:
000092D6                            	include "_anim\obj1E.asm"
000092D6                            ; ---------------------------------------------------------------------------
000092D6                            ; Animation script - doors (SBZ)
000092D6                            ; ---------------------------------------------------------------------------
000092D6 0000                       		dc.w byte_8E4A-Ani_obj1E
000092D8 0900 0002 0203 0200 0002+  byte_8E4A:	dc.b 9,	0, 0, 2, 2, 3, 2, 0, 0,	2, 2, 3, 2, 0, 0, 2, 2, 3, 2, 0, 0, 1, $FF
000092F0 00                         		even
000092F0 00                         		even
000092F0                            
000092F0                            ; ---------------------------------------------------------------------------
000092F0                            ; Sprite mappings - Ball Hog enemy (SBZ)
000092F0                            ; ---------------------------------------------------------------------------
000092F0                            Map_obj1E:
000092F0                            	include "_maps\obj1E.asm"
000092F0                            ; ---------------------------------------------------------------------------
000092F0                            ; Sprite mappings - Ball Hog enemy (SBZ)
000092F0                            ; ---------------------------------------------------------------------------
000092F0 0000 0000                  		dc.w byte_8E6E-Map_obj1E, byte_8E79-Map_obj1E
000092F4 0000 0000                  		dc.w byte_8E84-Map_obj1E, byte_8E8F-Map_obj1E
000092F8 0000 0000                  		dc.w byte_8E9A-Map_obj1E, byte_8EA0-Map_obj1E
000092FC 02                         byte_8E6E:	dc.b 2
000092FD EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
00009302 FF0A 0006 F4               		dc.b $FF, $A, 0, 6, $F4
00009307 02                         byte_8E79:	dc.b 2
00009308 EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
0000930D FF0A 000F F4               		dc.b $FF, $A, 0, $F, $F4
00009312 02                         byte_8E84:	dc.b 2
00009313 F409 0000 F4               		dc.b $F4, 9, 0,	0, $F4
00009318 0409 0018 F4               		dc.b 4,	9, 0, $18, $F4
0000931D 02                         byte_8E8F:	dc.b 2
0000931E E409 0000 F4               		dc.b $E4, 9, 0,	0, $F4
00009323 F40A 001E F4               		dc.b $F4, $A, 0, $1E, $F4
00009328 01                         byte_8E9A:	dc.b 1
00009329 F805 0027 F8               		dc.b $F8, 5, 0,	$27, $F8
0000932E 01                         byte_8EA0:	dc.b 1
0000932F F805 002B F8               		dc.b $F8, 5, 0,	$2B, $F8
00009334                            		even
00009334                            		even
00009334                            
00009334                            ; ---------------------------------------------------------------------------
00009334                            ; Sprite mappings - explosion
00009334                            ; ---------------------------------------------------------------------------
00009334                            Map_obj24:
00009334                            	include "_maps\obj24.asm"
00009334                            ; ---------------------------------------------------------------------------
00009334                            ; Sprite mappings - explosion
00009334                            ; ---------------------------------------------------------------------------
00009334 0000 0000                  		dc.w byte_8EAE-Map_obj24, byte_8EB4-Map_obj24
00009338 0000 0000                  		dc.w byte_8EBA-Map_obj24, byte_8EC0-Map_obj24
0000933C 01                         byte_8EAE:	dc.b 1
0000933D F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00009342 01                         byte_8EB4:	dc.b 1
00009343 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
00009348 01                         byte_8EBA:	dc.b 1
00009349 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0000934E 01                         byte_8EC0:	dc.b 1
0000934F F40A 001B F4               		dc.b $F4, $A, 0, $1B, $F4
00009354                            		even
00009354                            		even
00009354                            
00009354                            ; ---------------------------------------------------------------------------
00009354                            ; Sprite mappings - explosion
00009354                            ; ---------------------------------------------------------------------------
00009354 0000 0000                  Map_obj27:	dc.w byte_8ED0-Map_obj27, byte_8ED6-Map_obj27
00009358 0000 0000                  		dc.w byte_8EDC-Map_obj27, byte_8EE2-Map_obj27
0000935C 0000                       		dc.w byte_8EF7-Map_obj27
0000935E 01                         byte_8ED0:	dc.b 1
0000935F F809 0000 F4               		dc.b $F8, 9, 0,	0, $F4
00009364 01                         byte_8ED6:	dc.b 1
00009365 F00F 0006 F0               		dc.b $F0, $F, 0, 6, $F0
0000936A 01                         byte_8EDC:	dc.b 1
0000936B F00F 0016 F0               		dc.b $F0, $F, 0, $16, $F0
00009370 04                         byte_8EE2:	dc.b 4
00009371 EC0A 0026 EC               		dc.b $EC, $A, 0, $26, $EC
00009376 EC05 002F 04               		dc.b $EC, 5, 0,	$2F, 4
0000937B 0405 182F EC               		dc.b 4,	5, $18,	$2F, $EC
00009380 FC0A 1826 FC               		dc.b $FC, $A, $18, $26,	$FC
00009385 04                         byte_8EF7:	dc.b 4
00009386 EC0A 0033 EC               		dc.b $EC, $A, 0, $33, $EC
0000938B EC05 003C 04               		dc.b $EC, 5, 0,	$3C, 4
00009390 0405 183C EC               		dc.b 4,	5, $18,	$3C, $EC
00009395 FC0A 1833 FC               		dc.b $FC, $A, $18, $33,	$FC
0000939A                            		even
0000939A                            ; ---------------------------------------------------------------------------
0000939A                            ; Sprite mappings - explosion from when	a boss is destroyed
0000939A                            ; ---------------------------------------------------------------------------
0000939A FFC4                       Map_obj3F:	dc.w byte_8ED0-Map_obj3F
0000939C 0000                       		dc.w byte_8F16-Map_obj3F
0000939E 0000                       		dc.w byte_8F1C-Map_obj3F
000093A0 FFD6                       		dc.w byte_8EE2-Map_obj3F
000093A2 FFEB                       		dc.w byte_8EF7-Map_obj3F
000093A4 01                         byte_8F16:	dc.b 1
000093A5 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
000093AA 01                         byte_8F1C:	dc.b 1
000093AB F00F 0050 F0               		dc.b $F0, $F, 0, $50, $F0
000093B0                            		even
000093B0                            ; ===========================================================================
000093B0                            ; ---------------------------------------------------------------------------
000093B0                            ; Object 28 - animals
000093B0                            ; ---------------------------------------------------------------------------
000093B0                            
000093B0                            Obj28:					; XREF: Obj_Index
000093B0 7000                       		moveq	#0,d0
000093B2 1028 0024                  		move.b	$24(a0),d0
000093B6 323B 0000                  		move.w	Obj28_Index(pc,d0.w),d1
000093BA 4EFB 1000                  		jmp	Obj28_Index(pc,d1.w)
000093BE                            ; ===========================================================================
000093BE 0000 0000                  Obj28_Index:	dc.w Obj28_Ending-Obj28_Index, loc_912A-Obj28_Index
000093C2 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
000093C6 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9184-Obj28_Index
000093CA 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
000093CE 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9240-Obj28_Index
000093D2 0000 0000                  		dc.w loc_9260-Obj28_Index, loc_9260-Obj28_Index
000093D6 0000 0000                  		dc.w loc_9280-Obj28_Index, loc_92BA-Obj28_Index
000093DA 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
000093DE 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
000093E2 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9370-Obj28_Index
000093E6 0000                       		dc.w loc_92D6-Obj28_Index
000093E8                            
000093E8 0005 0203 0603 0405 0401+  Obj28_VarIndex:	dc.b 0,	5, 2, 3, 6, 3, 4, 5, 4,	1, 0, 1
000093F4                            
000093F4 FE00 FC00                  Obj28_Variables:dc.w $FE00, $FC00
000093F8 0000 0000                  		dc.l Map_obj28
000093FC FE00 FD00                  		dc.w $FE00, $FD00	; horizontal speed, vertical speed
00009400 0000 0000                  		dc.l Map_obj28a		; mappings address
00009404 FE80 FD00                  		dc.w $FE80, $FD00
00009408 0000 0000                  		dc.l Map_obj28
0000940C FEC0 FE80                  		dc.w $FEC0, $FE80
00009410 0000 0000                  		dc.l Map_obj28a
00009414 FE40 FD00                  		dc.w $FE40, $FD00
00009418 0000 0000                  		dc.l Map_obj28b
0000941C FD00 FC00                  		dc.w $FD00, $FC00
00009420 0000 0000                  		dc.l Map_obj28a
00009424 FD80 FC80                  		dc.w $FD80, $FC80
00009428 0000 0000                  		dc.l Map_obj28b
0000942C                            
0000942C FBC0 FC00 FBC0 FC00 FBC0+  Obj28_EndSpeed:	dc.w $FBC0, $FC00, $FBC0, $FC00, $FBC0,	$FC00, $FD00, $FC00
0000943C FD00 FC00 FE80 FD00 FE80+  		dc.w $FD00, $FC00, $FE80, $FD00, $FE80,	$FD00, $FEC0, $FE80
0000944C FE40 FD00 FE00 FD00 FD80+  		dc.w $FE40, $FD00, $FE00, $FD00, $FD80,	$FC80
00009458                            
00009458 0000 0000 0000 0000 0000+  Obj28_EndMap:	dc.l Map_obj28a, Map_obj28a, Map_obj28a, Map_obj28, Map_obj28
0000946C 0000 0000 0000 0000 0000+  		dc.l Map_obj28,	Map_obj28, Map_obj28a, Map_obj28b, Map_obj28a
00009480 0000 0000                  		dc.l Map_obj28b
00009484                            
00009484 05A5 05A5 05A5 0553 0553+  Obj28_EndVram:	dc.w $5A5, $5A5, $5A5, $553, $553, $573, $573, $585, $593
00009496 0565 05B3                  		dc.w $565, $5B3
0000949A                            ; ===========================================================================
0000949A                            
0000949A                            Obj28_Ending:				; XREF: Obj28_Index
0000949A 4A28 0028                  		tst.b	$28(a0)		; did animal come from a destroyed enemy?
0000949E 6700 0000                  		beq.w	Obj28_FromEnemy	; if yes, branch
000094A2 7000                       		moveq	#0,d0
000094A4 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
000094A8 D040                       		add.w	d0,d0		; multiply d0 by 2
000094AA 1140 0024                  		move.b	d0,$24(a0)	; move d0 to routine counter
000094AE 0440 0014                  		subi.w	#$14,d0
000094B2 317B 00D0 0002             		move.w	Obj28_EndVram(pc,d0.w),2(a0)
000094B8 D040                       		add.w	d0,d0
000094BA 217B 009C 0004             		move.l	Obj28_EndMap(pc,d0.w),4(a0)
000094C0 43FA FF6A                  		lea	Obj28_EndSpeed(pc),a1
000094C4 3171 0000 0032             		move.w	(a1,d0.w),$32(a0) ; load horizontal speed
000094CA 3171 0000 0010             		move.w	(a1,d0.w),$10(a0)
000094D0 3171 0002 0034             		move.w	2(a1,d0.w),$34(a0) ; load vertical speed
000094D6 3171 0002 0012             		move.w	2(a1,d0.w),$12(a0)
000094DC 117C 000C 0016             		move.b	#$C,$16(a0)
000094E2 117C 0004 0001             		move.b	#4,1(a0)
000094E8 08E8 0000 0001             		bset	#0,1(a0)
000094EE 117C 0006 0018             		move.b	#6,$18(a0)
000094F4 117C 0008 0019             		move.b	#8,$19(a0)
000094FA 117C 0007 001E             		move.b	#7,$1E(a0)
00009500 6000 0000                  		bra.w	DisplaySprite
00009504                            ; ===========================================================================
00009504                            
00009504                            Obj28_FromEnemy:			; XREF: Obj28_Ending
00009504 5428 0024                  		addq.b	#2,$24(a0)
00009508 6100 96F2                  		bsr.w	RandomNumber
0000950C 0240 0001                  		andi.w	#1,d0
00009510 7200                       		moveq	#0,d1
00009512 1238 FE10                  		move.b	($FFFFFE10).w,d1
00009516 D241                       		add.w	d1,d1
00009518 D240                       		add.w	d0,d1
0000951A 43FA FECC                  		lea	Obj28_VarIndex(pc),a1
0000951E 1031 1000                  		move.b	(a1,d1.w),d0
00009522 1140 0030                  		move.b	d0,$30(a0)
00009526 E748                       		lsl.w	#3,d0
00009528 43FA FECA                  		lea	Obj28_Variables(pc),a1
0000952C D2C0                       		adda.w	d0,a1
0000952E 3159 0032                  		move.w	(a1)+,$32(a0)	; load horizontal speed
00009532 3159 0034                  		move.w	(a1)+,$34(a0)	; load vertical	speed
00009536 2159 0004                  		move.l	(a1)+,4(a0)	; load mappings
0000953A 317C 0580 0002             		move.w	#$580,2(a0)	; VRAM setting for 1st animal
00009540 0828 0000 0030             		btst	#0,$30(a0)	; is 1st animal	used?
00009546 6700                       		beq.s	loc_90C0	; if yes, branch
00009548 317C 0592 0002             		move.w	#$592,2(a0)	; VRAM setting for 2nd animal
0000954E                            
0000954E                            loc_90C0:
0000954E 117C 000C 0016             		move.b	#$C,$16(a0)
00009554 117C 0004 0001             		move.b	#4,1(a0)
0000955A 08E8 0000 0001             		bset	#0,1(a0)
00009560 117C 0006 0018             		move.b	#6,$18(a0)
00009566 117C 0008 0019             		move.b	#8,$19(a0)
0000956C 117C 0007 001E             		move.b	#7,$1E(a0)
00009572 117C 0002 001A             		move.b	#2,$1A(a0)
00009578 317C FC00 0012             		move.w	#-$400,$12(a0)
0000957E 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00009582 6600                       		bne.s	loc_911C
00009584 6100 0000                  		bsr.w	SingleObjLoad
00009588 6600                       		bne.s	Obj28_Display
0000958A 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0000958E 3368 0008 0008             		move.w	8(a0),8(a1)
00009594 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000959A 3028 003E                  		move.w	$3E(a0),d0
0000959E E248                       		lsr.w	#1,d0
000095A0 1340 001A                  		move.b	d0,$1A(a1)
000095A4                            
000095A4                            Obj28_Display:
000095A4 6000 0000                  		bra.w	DisplaySprite
000095A8                            ; ===========================================================================
000095A8                            
000095A8                            loc_911C:
000095A8 117C 0012 0024             		move.b	#$12,$24(a0)
000095AE 4268 0010                  		clr.w	$10(a0)
000095B2 6000 0000                  		bra.w	DisplaySprite
000095B6                            ; ===========================================================================
000095B6                            
000095B6                            loc_912A:				; XREF: Obj28_Index
000095B6 4A28 0001                  		tst.b	1(a0)
000095BA 6A00 0000                  		bpl.w	DeleteObject
000095BE 6100 0000                  		bsr.w	ObjectFall
000095C2 4A68 0012                  		tst.w	$12(a0)
000095C6 6B00                       		bmi.s	loc_9180
000095C8 4EB9 0000 0000             		jsr	ObjHitFloor
000095CE 4A41                       		tst.w	d1
000095D0 6A00                       		bpl.s	loc_9180
000095D2 D368 000C                  		add.w	d1,$C(a0)
000095D6 3168 0032 0010             		move.w	$32(a0),$10(a0)
000095DC 3168 0034 0012             		move.w	$34(a0),$12(a0)
000095E2 117C 0001 001A             		move.b	#1,$1A(a0)
000095E8 1028 0030                  		move.b	$30(a0),d0
000095EC D000                       		add.b	d0,d0
000095EE 5800                       		addq.b	#4,d0
000095F0 1140 0024                  		move.b	d0,$24(a0)
000095F4 4A38 F7A7                  		tst.b	($FFFFF7A7).w
000095F8 6700                       		beq.s	loc_9180
000095FA 0838 0004 FE0F             		btst	#4,($FFFFFE0F).w
00009600 6700                       		beq.s	loc_9180
00009602 4468 0010                  		neg.w	$10(a0)
00009606 0868 0000 0001             		bchg	#0,1(a0)
0000960C                            
0000960C                            loc_9180:
0000960C 6000 0000                  		bra.w	DisplaySprite
00009610                            ; ===========================================================================
00009610                            
00009610                            loc_9184:				; XREF: Obj28_Index
00009610 6100 0000                  		bsr.w	ObjectFall
00009614 117C 0001 001A             		move.b	#1,$1A(a0)
0000961A 4A68 0012                  		tst.w	$12(a0)
0000961E 6B00                       		bmi.s	loc_91AE
00009620 117C 0000 001A             		move.b	#0,$1A(a0)
00009626 4EB9 0000 0000             		jsr	ObjHitFloor
0000962C 4A41                       		tst.w	d1
0000962E 6A00                       		bpl.s	loc_91AE
00009630 D368 000C                  		add.w	d1,$C(a0)
00009634 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000963A                            
0000963A                            loc_91AE:
0000963A 4A28 0028                  		tst.b	$28(a0)
0000963E 6600                       		bne.s	loc_9224
00009640 4A28 0001                  		tst.b	1(a0)
00009644 6A00 0000                  		bpl.w	DeleteObject
00009648 6000 0000                  		bra.w	DisplaySprite
0000964C                            ; ===========================================================================
0000964C                            
0000964C                            loc_91C0:				; XREF: Obj28_Index
0000964C 6100 0000                  		bsr.w	SpeedToPos
00009650 0668 0018 0012             		addi.w	#$18,$12(a0)
00009656 4A68 0012                  		tst.w	$12(a0)
0000965A 6B00                       		bmi.s	loc_91FC
0000965C 4EB9 0000 0000             		jsr	ObjHitFloor
00009662 4A41                       		tst.w	d1
00009664 6A00                       		bpl.s	loc_91FC
00009666 D368 000C                  		add.w	d1,$C(a0)
0000966A 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009670 4A28 0028                  		tst.b	$28(a0)
00009674 6700                       		beq.s	loc_91FC
00009676 0C28 000A 0028             		cmpi.b	#$A,$28(a0)
0000967C 6700                       		beq.s	loc_91FC
0000967E 4468 0010                  		neg.w	$10(a0)
00009682 0868 0000 0001             		bchg	#0,1(a0)
00009688                            
00009688                            loc_91FC:
00009688 5328 001E                  		subq.b	#1,$1E(a0)
0000968C 6A00                       		bpl.s	loc_9212
0000968E 117C 0001 001E             		move.b	#1,$1E(a0)
00009694 5228 001A                  		addq.b	#1,$1A(a0)
00009698 0228 0001 001A             		andi.b	#1,$1A(a0)
0000969E                            
0000969E                            loc_9212:
0000969E 4A28 0028                  		tst.b	$28(a0)
000096A2 6600                       		bne.s	loc_9224
000096A4 4A28 0001                  		tst.b	1(a0)
000096A8 6A00 0000                  		bpl.w	DeleteObject
000096AC 6000 0000                  		bra.w	DisplaySprite
000096B0                            ; ===========================================================================
000096B0                            
000096B0                            loc_9224:				; XREF: Obj28_Index
000096B0 3028 0008                  		move.w	8(a0),d0
000096B4 9078 D008                  		sub.w	($FFFFD008).w,d0
000096B8 6500                       		bcs.s	loc_923C
000096BA 0440 0180                  		subi.w	#$180,d0
000096BE 6A00                       		bpl.s	loc_923C
000096C0 4A28 0001                  		tst.b	1(a0)
000096C4 6A00 0000                  		bpl.w	DeleteObject
000096C8                            
000096C8                            loc_923C:
000096C8 6000 0000                  		bra.w	DisplaySprite
000096CC                            ; ===========================================================================
000096CC                            
000096CC                            loc_9240:				; XREF: Obj28_Index
000096CC 4A28 0001                  		tst.b	1(a0)
000096D0 6A00 0000                  		bpl.w	DeleteObject
000096D4 5368 0036                  		subq.w	#1,$36(a0)
000096D8 6600 0000                  		bne.w	loc_925C
000096DC 117C 0002 0024             		move.b	#2,$24(a0)
000096E2 117C 0003 0018             		move.b	#3,$18(a0)
000096E8                            
000096E8                            loc_925C:
000096E8 6000 0000                  		bra.w	DisplaySprite
000096EC                            ; ===========================================================================
000096EC                            
000096EC                            loc_9260:				; XREF: Obj28_Index
000096EC 6100 0000                  		bsr.w	sub_9404
000096F0 6400                       		bcc.s	loc_927C
000096F2 3168 0032 0010             		move.w	$32(a0),$10(a0)
000096F8 3168 0034 0012             		move.w	$34(a0),$12(a0)
000096FE 117C 000E 0024             		move.b	#$E,$24(a0)
00009704 6000 FF46                  		bra.w	loc_91C0
00009708                            ; ===========================================================================
00009708                            
00009708                            loc_927C:
00009708 6000 FFA6                  		bra.w	loc_9224
0000970C                            ; ===========================================================================
0000970C                            
0000970C                            loc_9280:				; XREF: Obj28_Index
0000970C 6100 0000                  		bsr.w	sub_9404
00009710 6A00                       		bpl.s	loc_92B6
00009712 4268 0010                  		clr.w	$10(a0)
00009716 4268 0032                  		clr.w	$32(a0)
0000971A 6100 0000                  		bsr.w	SpeedToPos
0000971E 0668 0018 0012             		addi.w	#$18,$12(a0)
00009724 6100 0000                  		bsr.w	loc_93C4
00009728 6100 0000                  		bsr.w	loc_93EC
0000972C 5328 001E                  		subq.b	#1,$1E(a0)
00009730 6A00                       		bpl.s	loc_92B6
00009732 117C 0001 001E             		move.b	#1,$1E(a0)
00009738 5228 001A                  		addq.b	#1,$1A(a0)
0000973C 0228 0001 001A             		andi.b	#1,$1A(a0)
00009742                            
00009742                            loc_92B6:
00009742 6000 FF6C                  		bra.w	loc_9224
00009746                            ; ===========================================================================
00009746                            
00009746                            loc_92BA:				; XREF: Obj28_Index
00009746 6100 0000                  		bsr.w	sub_9404
0000974A 6A00                       		bpl.s	loc_9310
0000974C 3168 0032 0010             		move.w	$32(a0),$10(a0)
00009752 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009758 117C 0004 0024             		move.b	#4,$24(a0)
0000975E 6000 FEB0                  		bra.w	loc_9184
00009762                            ; ===========================================================================
00009762                            
00009762                            loc_92D6:				; XREF: Obj28_Index
00009762 6100 0000                  		bsr.w	ObjectFall
00009766 117C 0001 001A             		move.b	#1,$1A(a0)
0000976C 4A68 0012                  		tst.w	$12(a0)
00009770 6B00                       		bmi.s	loc_9310
00009772 117C 0000 001A             		move.b	#0,$1A(a0)
00009778 4EB9 0000 0000             		jsr	ObjHitFloor
0000977E 4A41                       		tst.w	d1
00009780 6A00                       		bpl.s	loc_9310
00009782 4628 0029                  		not.b	$29(a0)
00009786 6600                       		bne.s	loc_9306
00009788 4468 0010                  		neg.w	$10(a0)
0000978C 0868 0000 0001             		bchg	#0,1(a0)
00009792                            
00009792                            loc_9306:
00009792 D368 000C                  		add.w	d1,$C(a0)
00009796 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000979C                            
0000979C                            loc_9310:
0000979C 6000 FF12                  		bra.w	loc_9224
000097A0                            ; ===========================================================================
000097A0                            
000097A0                            loc_9314:				; XREF: Obj28_Index
000097A0 6100 0000                  		bsr.w	sub_9404
000097A4 6A00                       		bpl.s	loc_932E
000097A6 4268 0010                  		clr.w	$10(a0)
000097AA 4268 0032                  		clr.w	$32(a0)
000097AE 6100 0000                  		bsr.w	ObjectFall
000097B2 6100 0000                  		bsr.w	loc_93C4
000097B6 6100 0000                  		bsr.w	loc_93EC
000097BA                            
000097BA                            loc_932E:
000097BA 6000 FEF4                  		bra.w	loc_9224
000097BE                            ; ===========================================================================
000097BE                            
000097BE                            loc_9332:				; XREF: Obj28_Index
000097BE 6100 0000                  		bsr.w	sub_9404
000097C2 6A00                       		bpl.s	loc_936C
000097C4 6100 0000                  		bsr.w	ObjectFall
000097C8 117C 0001 001A             		move.b	#1,$1A(a0)
000097CE 4A68 0012                  		tst.w	$12(a0)
000097D2 6B00                       		bmi.s	loc_936C
000097D4 117C 0000 001A             		move.b	#0,$1A(a0)
000097DA 4EB9 0000 0000             		jsr	ObjHitFloor
000097E0 4A41                       		tst.w	d1
000097E2 6A00                       		bpl.s	loc_936C
000097E4 4468 0010                  		neg.w	$10(a0)
000097E8 0868 0000 0001             		bchg	#0,1(a0)
000097EE D368 000C                  		add.w	d1,$C(a0)
000097F2 3168 0034 0012             		move.w	$34(a0),$12(a0)
000097F8                            
000097F8                            loc_936C:
000097F8 6000 FEB6                  		bra.w	loc_9224
000097FC                            ; ===========================================================================
000097FC                            
000097FC                            loc_9370:				; XREF: Obj28_Index
000097FC 6100 0000                  		bsr.w	sub_9404
00009800 6A00                       		bpl.s	loc_93C0
00009802 6100 0000                  		bsr.w	SpeedToPos
00009806 0668 0018 0012             		addi.w	#$18,$12(a0)
0000980C 4A68 0012                  		tst.w	$12(a0)
00009810 6B00                       		bmi.s	loc_93AA
00009812 4EB9 0000 0000             		jsr	ObjHitFloor
00009818 4A41                       		tst.w	d1
0000981A 6A00                       		bpl.s	loc_93AA
0000981C 4628 0029                  		not.b	$29(a0)
00009820 6600                       		bne.s	loc_93A0
00009822 4468 0010                  		neg.w	$10(a0)
00009826 0868 0000 0001             		bchg	#0,1(a0)
0000982C                            
0000982C                            loc_93A0:
0000982C D368 000C                  		add.w	d1,$C(a0)
00009830 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009836                            
00009836                            loc_93AA:
00009836 5328 001E                  		subq.b	#1,$1E(a0)
0000983A 6A00                       		bpl.s	loc_93C0
0000983C 117C 0001 001E             		move.b	#1,$1E(a0)
00009842 5228 001A                  		addq.b	#1,$1A(a0)
00009846 0228 0001 001A             		andi.b	#1,$1A(a0)
0000984C                            
0000984C                            loc_93C0:
0000984C 6000 FE62                  		bra.w	loc_9224
00009850                            ; ===========================================================================
00009850                            
00009850                            loc_93C4:
00009850 117C 0001 001A             		move.b	#1,$1A(a0)
00009856 4A68 0012                  		tst.w	$12(a0)
0000985A 6B00                       		bmi.s	locret_93EA
0000985C 117C 0000 001A             		move.b	#0,$1A(a0)
00009862 4EB9 0000 0000             		jsr	ObjHitFloor
00009868 4A41                       		tst.w	d1
0000986A 6A00                       		bpl.s	locret_93EA
0000986C D368 000C                  		add.w	d1,$C(a0)
00009870 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009876                            
00009876                            locret_93EA:
00009876 4E75                       		rts	
00009878                            ; ===========================================================================
00009878                            
00009878                            loc_93EC:
00009878 08E8 0000 0001             		bset	#0,1(a0)
0000987E 3028 0008                  		move.w	8(a0),d0
00009882 9078 D008                  		sub.w	($FFFFD008).w,d0
00009886 6400                       		bcc.s	locret_9402
00009888 08A8 0000 0001             		bclr	#0,1(a0)
0000988E                            
0000988E                            locret_9402:
0000988E 4E75                       		rts	
00009890                            
00009890                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009890                            
00009890                            
00009890                            sub_9404:
00009890 3038 D008                  		move.w	($FFFFD008).w,d0
00009894 9068 0008                  		sub.w	8(a0),d0
00009898 0440 00B8                  		subi.w	#$B8,d0
0000989C 4E75                       		rts	
0000989E                            ; End of function sub_9404
0000989E                            
0000989E                            ; ===========================================================================
0000989E                            ; ---------------------------------------------------------------------------
0000989E                            ; Object 29 - points that appear when you destroy something
0000989E                            ; ---------------------------------------------------------------------------
0000989E                            
0000989E                            Obj29:					; XREF: Obj_Index
0000989E 7000                       		moveq	#0,d0
000098A0 1028 0024                  		move.b	$24(a0),d0
000098A4 323B 0000                  		move.w	Obj29_Index(pc,d0.w),d1
000098A8 4EBB 1000                  		jsr	Obj29_Index(pc,d1.w)
000098AC 6000 0000                  		bra.w	DisplaySprite
000098B0                            ; ===========================================================================
000098B0 0000                       Obj29_Index:	dc.w Obj29_Main-Obj29_Index
000098B2 0000                       		dc.w Obj29_Slower-Obj29_Index
000098B4                            ; ===========================================================================
000098B4                            
000098B4                            Obj29_Main:				; XREF: Obj29_Index
000098B4 5428 0024                  		addq.b	#2,$24(a0)
000098B8 217C 0000 0000 0004        		move.l	#Map_obj29,4(a0)
000098C0 317C 2797 0002             		move.w	#$2797,2(a0)
000098C6 117C 0004 0001             		move.b	#4,1(a0)
000098CC 117C 0001 0018             		move.b	#1,$18(a0)
000098D2 117C 0008 0019             		move.b	#8,$19(a0)
000098D8 317C FD00 0012             		move.w	#-$300,$12(a0)	; move object upwards
000098DE                            
000098DE                            Obj29_Slower:				; XREF: Obj29_Index
000098DE 4A68 0012                  		tst.w	$12(a0)		; is object moving?
000098E2 6A00 0000                  		bpl.w	DeleteObject	; if not, branch
000098E6 6100 0000                  		bsr.w	SpeedToPos
000098EA 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
000098F0 4E75                       		rts	
000098F2                            ; ===========================================================================
000098F2                            ; ---------------------------------------------------------------------------
000098F2                            ; Sprite mappings - animals
000098F2                            ; ---------------------------------------------------------------------------
000098F2                            Map_obj28:
000098F2                            	include "_maps\obj28.asm"
000098F2                            ; ---------------------------------------------------------------------------
000098F2                            ; Sprite mappings - animals
000098F2                            ; ---------------------------------------------------------------------------
000098F2 0000                       		dc.w byte_9472-Map_obj28
000098F4 0000                       		dc.w byte_9478-Map_obj28
000098F6 0000                       		dc.w byte_946C-Map_obj28
000098F8 01                         byte_946C:	dc.b 1
000098F9 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
000098FE 01                         byte_9472:	dc.b 1
000098FF F406 0006 F8               		dc.b $F4, 6, 0,	6, $F8
00009904 01                         byte_9478:	dc.b 1
00009905 F406 000C F8               		dc.b $F4, 6, 0,	$C, $F8
0000990A                            		even
0000990A                            		even
0000990A                            
0000990A                            Map_obj28a:
0000990A                            	include "_maps\obj28a.asm"
0000990A                            ; ---------------------------------------------------------------------------
0000990A                            ; Sprite mappings - animals
0000990A                            ; ---------------------------------------------------------------------------
0000990A 0000                       		dc.w byte_948A-Map_obj28a
0000990C 0000                       		dc.w byte_9490-Map_obj28a
0000990E 0000                       		dc.w byte_9484-Map_obj28a
00009910 01                         byte_9484:	dc.b 1
00009911 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009916 01                         byte_948A:	dc.b 1
00009917 FC05 0006 F8               		dc.b $FC, 5, 0,	6, $F8
0000991C 01                         byte_9490:	dc.b 1
0000991D FC05 000A F8               		dc.b $FC, 5, 0,	$A, $F8
00009922                            		even
00009922                            		even
00009922                            
00009922                            Map_obj28b:
00009922                            	include "_maps\obj28b.asm"
00009922                            ; ---------------------------------------------------------------------------
00009922                            ; Sprite mappings - animals
00009922                            ; ---------------------------------------------------------------------------
00009922 0000                       		dc.w byte_94A2-Map_obj28b
00009924 0000                       		dc.w byte_94A8-Map_obj28b
00009926 0000                       		dc.w byte_949C-Map_obj28b
00009928 01                         byte_949C:	dc.b 1
00009929 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000992E 01                         byte_94A2:	dc.b 1
0000992F FC09 0006 F4               		dc.b $FC, 9, 0,	6, $F4
00009934 01                         byte_94A8:	dc.b 1
00009935 FC09 000C F4               		dc.b $FC, 9, 0,	$C, $F4
0000993A                            		even
0000993A                            		even
0000993A                            
0000993A                            ; ---------------------------------------------------------------------------
0000993A                            ; Sprite mappings - points that	appear when you	destroy	something
0000993A                            ; ---------------------------------------------------------------------------
0000993A                            Map_obj29:
0000993A                            	include "_maps\obj29.asm"
0000993A                            ; ---------------------------------------------------------------------------
0000993A                            ; Sprite mappings - points that	appear when you	destroy	something
0000993A                            ; ---------------------------------------------------------------------------
0000993A 0000 0000                  		dc.w byte_94BC-Map_obj29, byte_94C2-Map_obj29
0000993E 0000 0000                  		dc.w byte_94C8-Map_obj29, byte_94CE-Map_obj29
00009942 0000 0000                  		dc.w byte_94D4-Map_obj29, byte_94DA-Map_obj29
00009946 0000                       		dc.w byte_94E5-Map_obj29
00009948 01                         byte_94BC:	dc.b 1
00009949 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8	; 100 points
0000994E 01                         byte_94C2:	dc.b 1
0000994F FC04 0002 F8               		dc.b $FC, 4, 0,	2, $F8	; 200 points
00009954 01                         byte_94C8:	dc.b 1
00009955 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8	; 500 points
0000995A 01                         byte_94CE:	dc.b 1
0000995B FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8	; 1000 points
00009960 01                         byte_94D4:	dc.b 1
00009961 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC	; 10 points
00009966 02                         byte_94DA:	dc.b 2
00009967 FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 10,000 points
0000996C FC04 0007 01               		dc.b $FC, 4, 0,	7, 1
00009971 02                         byte_94E5:	dc.b 2
00009972 FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 100,000 points
00009977 FC04 0007 06               		dc.b $FC, 4, 0,	7, 6
0000997C                            		even
0000997C                            		even
0000997C                            
0000997C                            ; ===========================================================================
0000997C                            ; ---------------------------------------------------------------------------
0000997C                            ; Object 1F - Crabmeat enemy (GHZ, SYZ)
0000997C                            ; ---------------------------------------------------------------------------
0000997C                            
0000997C                            Obj1F:					; XREF: Obj_Index
0000997C 7000                       		moveq	#0,d0
0000997E 1028 0024                  		move.b	$24(a0),d0
00009982 323B 0000                  		move.w	Obj1F_Index(pc,d0.w),d1
00009986 4EFB 1000                  		jmp	Obj1F_Index(pc,d1.w)
0000998A                            ; ===========================================================================
0000998A 0000                       Obj1F_Index:	dc.w Obj1F_Main-Obj1F_Index
0000998C 0000                       		dc.w Obj1F_Action-Obj1F_Index
0000998E 0000                       		dc.w Obj1F_Delete-Obj1F_Index
00009990 0000                       		dc.w Obj1F_BallMain-Obj1F_Index
00009992 0000                       		dc.w Obj1F_BallMove-Obj1F_Index
00009994                            ; ===========================================================================
00009994                            
00009994                            Obj1F_Main:				; XREF: Obj1F_Index
00009994 117C 0010 0016             		move.b	#$10,$16(a0)
0000999A 117C 0008 0017             		move.b	#8,$17(a0)
000099A0 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
000099A8 317C 0400 0002             		move.w	#$400,2(a0)
000099AE 117C 0004 0001             		move.b	#4,1(a0)
000099B4 117C 0003 0018             		move.b	#3,$18(a0)
000099BA 117C 0006 0020             		move.b	#6,$20(a0)
000099C0 117C 0015 0019             		move.b	#$15,$19(a0)
000099C6 6100 0000                  		bsr.w	ObjectFall
000099CA 4EB9 0000 0000             		jsr	ObjHitFloor
000099D0 4A41                       		tst.w	d1
000099D2 6A00                       		bpl.s	locret_955A
000099D4 D368 000C                  		add.w	d1,$C(a0)
000099D8 1143 0026                  		move.b	d3,$26(a0)
000099DC 317C 0000 0012             		move.w	#0,$12(a0)
000099E2 5428 0024                  		addq.b	#2,$24(a0)
000099E6                            
000099E6                            locret_955A:
000099E6 4E75                       		rts	
000099E8                            ; ===========================================================================
000099E8                            
000099E8                            Obj1F_Action:				; XREF: Obj1F_Index
000099E8 7000                       		moveq	#0,d0
000099EA 1028 0025                  		move.b	$25(a0),d0
000099EE 323B 0000                  		move.w	Obj1F_Index2(pc,d0.w),d1
000099F2 4EBB 1000                  		jsr	Obj1F_Index2(pc,d1.w)
000099F6 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
000099FC 6100 0000                  		bsr.w	AnimateSprite
00009A00 6000 0000                  		bra.w	MarkObjGone
00009A04                            ; ===========================================================================
00009A04 0000                       Obj1F_Index2:	dc.w Obj1F_WaitFire-Obj1F_Index2
00009A06 0000                       		dc.w Obj1F_WalkOnFloor-Obj1F_Index2
00009A08                            ; ===========================================================================
00009A08                            
00009A08                            Obj1F_WaitFire:				; XREF: Obj1F_Index2
00009A08 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00009A0C 6A00                       		bpl.s	locret_95B6
00009A0E 4A28 0001                  		tst.b	1(a0)
00009A12 6A00                       		bpl.s	Obj1F_Move
00009A14 0868 0001 0032             		bchg	#1,$32(a0)
00009A1A 6600                       		bne.s	Obj1F_MakeFire
00009A1C                            
00009A1C                            Obj1F_Move:
00009A1C 5428 0025                  		addq.b	#2,$25(a0)
00009A20 317C 007F 0030             		move.w	#127,$30(a0)	; set time delay to approx 2 seconds
00009A26 317C 0080 0010             		move.w	#$80,$10(a0)	; move Crabmeat	to the right
00009A2C 6100 0000                  		bsr.w	Obj1F_SetAni
00009A30 5600                       		addq.b	#3,d0
00009A32 1140 001C                  		move.b	d0,$1C(a0)
00009A36 0868 0000 0022             		bchg	#0,$22(a0)
00009A3C 6600                       		bne.s	locret_95B6
00009A3E 4468 0010                  		neg.w	$10(a0)		; change direction
00009A42                            
00009A42                            locret_95B6:
00009A42 4E75                       		rts	
00009A44                            ; ===========================================================================
00009A44                            
00009A44                            Obj1F_MakeFire:				; XREF: Obj1F_WaitFire
00009A44 317C 003B 0030             		move.w	#$3B,$30(a0)
00009A4A 117C 0006 001C             		move.b	#6,$1C(a0)	; use firing animation
00009A50 6100 0000                  		bsr.w	SingleObjLoad
00009A54 6600                       		bne.s	Obj1F_MakeFire2
00009A56 12BC 001F                  		move.b	#$1F,0(a1)	; load left fireball
00009A5A 137C 0006 0024             		move.b	#6,$24(a1)
00009A60 3368 0008 0008             		move.w	8(a0),8(a1)
00009A66 0469 0010 0008             		subi.w	#$10,8(a1)
00009A6C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009A72 337C FF00 0010             		move.w	#-$100,$10(a1)
00009A78                            
00009A78                            Obj1F_MakeFire2:
00009A78 6100 0000                  		bsr.w	SingleObjLoad
00009A7C 6600                       		bne.s	locret_9618
00009A7E 12BC 001F                  		move.b	#$1F,0(a1)	; load right fireball
00009A82 137C 0006 0024             		move.b	#6,$24(a1)
00009A88 3368 0008 0008             		move.w	8(a0),8(a1)
00009A8E 0669 0010 0008             		addi.w	#$10,8(a1)
00009A94 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009A9A 337C 0100 0010             		move.w	#$100,$10(a1)
00009AA0                            
00009AA0                            locret_9618:
00009AA0 4E75                       		rts	
00009AA2                            ; ===========================================================================
00009AA2                            
00009AA2                            Obj1F_WalkOnFloor:			; XREF: Obj1F_Index2
00009AA2 5368 0030                  		subq.w	#1,$30(a0)
00009AA6 6B00                       		bmi.s	loc_966E
00009AA8 6100 0000                  		bsr.w	SpeedToPos
00009AAC 0868 0000 0032             		bchg	#0,$32(a0)
00009AB2 6600                       		bne.s	loc_9654
00009AB4 3628 0008                  		move.w	8(a0),d3
00009AB8 0643 0010                  		addi.w	#$10,d3
00009ABC 0828 0000 0022             		btst	#0,$22(a0)
00009AC2 6700                       		beq.s	loc_9640
00009AC4 0443 0020                  		subi.w	#$20,d3
00009AC8                            
00009AC8                            loc_9640:
00009AC8 4EB9 0000 0000             		jsr	ObjHitFloor2
00009ACE 0C41 FFF8                  		cmpi.w	#-8,d1
00009AD2 6D00                       		blt.s	loc_966E
00009AD4 0C41 000C                  		cmpi.w	#$C,d1
00009AD8 6C00                       		bge.s	loc_966E
00009ADA 4E75                       		rts	
00009ADC                            ; ===========================================================================
00009ADC                            
00009ADC                            loc_9654:				; XREF: Obj1F_WalkOnFloor
00009ADC 4EB9 0000 0000             		jsr	ObjHitFloor
00009AE2 D368 000C                  		add.w	d1,$C(a0)
00009AE6 1143 0026                  		move.b	d3,$26(a0)
00009AEA 6100 0000                  		bsr.w	Obj1F_SetAni
00009AEE 5600                       		addq.b	#3,d0
00009AF0 1140 001C                  		move.b	d0,$1C(a0)
00009AF4 4E75                       		rts	
00009AF6                            ; ===========================================================================
00009AF6                            
00009AF6                            loc_966E:				; XREF: Obj1F_WalkOnFloor
00009AF6 5528 0025                  		subq.b	#2,$25(a0)
00009AFA 317C 003B 0030             		move.w	#59,$30(a0)
00009B00 317C 0000 0010             		move.w	#0,$10(a0)
00009B06 6100 0000                  		bsr.w	Obj1F_SetAni
00009B0A 1140 001C                  		move.b	d0,$1C(a0)
00009B0E 4E75                       		rts	
00009B10                            ; ---------------------------------------------------------------------------
00009B10                            ; Subroutine to	set the	correct	animation for a	Crabmeat
00009B10                            ; ---------------------------------------------------------------------------
00009B10                            
00009B10                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009B10                            
00009B10                            
00009B10                            Obj1F_SetAni:				; XREF: loc_966E
00009B10 7000                       		moveq	#0,d0
00009B12 1628 0026                  		move.b	$26(a0),d3
00009B16 6B00                       		bmi.s	loc_96A4
00009B18 0C03 0006                  		cmpi.b	#6,d3
00009B1C 6500                       		bcs.s	locret_96A2
00009B1E 7001                       		moveq	#1,d0
00009B20 0828 0000 0022             		btst	#0,$22(a0)
00009B26 6600                       		bne.s	locret_96A2
00009B28 7002                       		moveq	#2,d0
00009B2A                            
00009B2A                            locret_96A2:
00009B2A 4E75                       		rts	
00009B2C                            ; ===========================================================================
00009B2C                            
00009B2C                            loc_96A4:				; XREF: Obj1F_SetAni
00009B2C 0C03 00FA                  		cmpi.b	#-6,d3
00009B30 6200                       		bhi.s	locret_96B6
00009B32 7002                       		moveq	#2,d0
00009B34 0828 0000 0022             		btst	#0,$22(a0)
00009B3A 6600                       		bne.s	locret_96B6
00009B3C 7001                       		moveq	#1,d0
00009B3E                            
00009B3E                            locret_96B6:
00009B3E 4E75                       		rts	
00009B40                            ; End of function Obj1F_SetAni
00009B40                            
00009B40                            ; ===========================================================================
00009B40                            
00009B40                            Obj1F_Delete:				; XREF: Obj1F_Index
00009B40 6100 0000                  		bsr.w	DeleteObject
00009B44 4E75                       		rts	
00009B46                            ; ===========================================================================
00009B46                            ; ---------------------------------------------------------------------------
00009B46                            ; Sub-object - missile that the	Crabmeat throws
00009B46                            ; ---------------------------------------------------------------------------
00009B46                            
00009B46                            Obj1F_BallMain:				; XREF: Obj1F_Index
00009B46 5428 0024                  		addq.b	#2,$24(a0)
00009B4A 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
00009B52 317C 0400 0002             		move.w	#$400,2(a0)
00009B58 117C 0004 0001             		move.b	#4,1(a0)
00009B5E 117C 0003 0018             		move.b	#3,$18(a0)
00009B64 117C 0087 0020             		move.b	#$87,$20(a0)
00009B6A 117C 0008 0019             		move.b	#8,$19(a0)
00009B70 317C FC00 0012             		move.w	#-$400,$12(a0)
00009B76 117C 0007 001C             		move.b	#7,$1C(a0)
00009B7C                            
00009B7C                            Obj1F_BallMove:				; XREF: Obj1F_Index
00009B7C 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
00009B82 6100 0000                  		bsr.w	AnimateSprite
00009B86 6100 0000                  		bsr.w	ObjectFall
00009B8A 6100 0000                  		bsr.w	DisplaySprite
00009B8E 3038 F72E                  		move.w	($FFFFF72E).w,d0
00009B92 0640 00E0                  		addi.w	#$E0,d0
00009B96 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
00009B9A 6500                       		bcs.s	Obj1F_Delete2	; if yes, branch
00009B9C 4E75                       		rts	
00009B9E                            ; ===========================================================================
00009B9E                            
00009B9E                            Obj1F_Delete2:
00009B9E 6000 0000                  		bra.w	DeleteObject
00009BA2                            ; ===========================================================================
00009BA2                            Ani_obj1F:
00009BA2                            	include "_anim\obj1F.asm"
00009BA2                            ; ---------------------------------------------------------------------------
00009BA2                            ; Animation script - Crabmeat enemy
00009BA2                            ; ---------------------------------------------------------------------------
00009BA2 0000 0000 0000             		dc.w byte_972A-Ani_obj1F, byte_972E-Ani_obj1F, byte_9732-Ani_obj1F
00009BA8 0000 0000 0000             		dc.w byte_9736-Ani_obj1F, byte_973C-Ani_obj1F, byte_9742-Ani_obj1F
00009BAE 0000 0000                  		dc.w byte_9748-Ani_obj1F, byte_974C-Ani_obj1F
00009BB2 0F00 FF00                  byte_972A:	dc.b $F, 0, $FF, 0
00009BB6 0F02 FF00                  byte_972E:	dc.b $F, 2, $FF, 0
00009BBA 0F22 FF00                  byte_9732:	dc.b $F, $22, $FF, 0
00009BBE 0F01 2100 FF00             byte_9736:	dc.b $F, 1, $21, 0, $FF, 0
00009BC4 0F21 0302 FF00             byte_973C:	dc.b $F, $21, 3, 2, $FF, 0
00009BCA 0F01 2322 FF00             byte_9742:	dc.b $F, 1, $23, $22, $FF, 0
00009BD0 0F04 FF00                  byte_9748:	dc.b $F, 4, $FF, 0
00009BD4 0105 06FF                  byte_974C:	dc.b 1,	5, 6, $FF
00009BD8                            		even
00009BD8                            		even
00009BD8                            
00009BD8                            ; ---------------------------------------------------------------------------
00009BD8                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
00009BD8                            ; ---------------------------------------------------------------------------
00009BD8                            Map_obj1F:
00009BD8                            	include "_maps\obj1F.asm"
00009BD8                            Map_1514:
00009BD8 0000                       Map_1514_0: 	dc.w Map_1514_E-Map_1514
00009BDA 0000                       Map_1514_2: 	dc.w Map_1514_1E-Map_1514
00009BDC 0000                       Map_1514_4: 	dc.w Map_1514_2E-Map_1514
00009BDE 0000                       Map_1514_6: 	dc.w Map_1514_3E-Map_1514
00009BE0 0000                       Map_1514_8: 	dc.w Map_1514_4E-Map_1514
00009BE2 0000                       Map_1514_A: 	dc.w Map_1514_5E-Map_1514
00009BE4 0000                       Map_1514_C: 	dc.w Map_1514_64-Map_1514
00009BE6 03                         Map_1514_E: 	dc.b $3
00009BE7 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009BEC F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009BF1 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009BF6 03                         Map_1514_1E: 	dc.b $3
00009BF7 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009BFC F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009C01 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009C06 03                         Map_1514_2E: 	dc.b $3
00009C07 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009C0C F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009C11 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009C16 03                         Map_1514_3E: 	dc.b $3
00009C17 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009C1C F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009C21 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009C26 03                         Map_1514_4E: 	dc.b $3
00009C27 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009C2C F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009C31 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009C36 01                         Map_1514_5E: 	dc.b $1
00009C37 F805 0017 F8               	dc.b $F8, $5, $0, $17, $F8
00009C3C 01                         Map_1514_64: 	dc.b $1
00009C3D F805 2017 F8               	dc.b $F8, $5, $20, $17, $F8
00009C42                            	even
00009C42                            	even
00009C42                            
00009C42                            ; ===========================================================================
00009C42                            ; ---------------------------------------------------------------------------
00009C42                            ; Object 22 - Buzz Bomber enemy	(GHZ, MZ, SYZ)
00009C42                            ; ---------------------------------------------------------------------------
00009C42                            
00009C42                            Obj22:					; XREF: Obj_Index
00009C42 7000                       		moveq	#0,d0
00009C44 1028 0024                  		move.b	$24(a0),d0
00009C48 323B 0000                  		move.w	Obj22_Index(pc,d0.w),d1
00009C4C 4EFB 1000                  		jmp	Obj22_Index(pc,d1.w)
00009C50                            ; ===========================================================================
00009C50 0000                       Obj22_Index:	dc.w Obj22_Main-Obj22_Index
00009C52 0000                       		dc.w Obj22_Action-Obj22_Index
00009C54 0000                       		dc.w Obj22_Delete-Obj22_Index
00009C56                            ; ===========================================================================
00009C56                            
00009C56                            Obj22_Main:				; XREF: Obj22_Index
00009C56 5428 0024                  		addq.b	#2,$24(a0)
00009C5A 217C 0000 0000 0004        		move.l	#Map_obj22,4(a0)
00009C62 317C 0444 0002             		move.w	#$444,2(a0)
00009C68 117C 0004 0001             		move.b	#4,1(a0)
00009C6E 117C 0003 0018             		move.b	#3,$18(a0)
00009C74 117C 0008 0020             		move.b	#8,$20(a0)
00009C7A 117C 0018 0019             		move.b	#$18,$19(a0)
00009C80                            
00009C80                            Obj22_Action:				; XREF: Obj22_Index
00009C80 7000                       		moveq	#0,d0
00009C82 1028 0025                  		move.b	$25(a0),d0
00009C86 323B 0000                  		move.w	Obj22_Index2(pc,d0.w),d1
00009C8A 4EBB 1000                  		jsr	Obj22_Index2(pc,d1.w)
00009C8E 43F9 0000 0000             		lea	(Ani_obj22).l,a1
00009C94 6100 0000                  		bsr.w	AnimateSprite
00009C98 6000 0000                  		bra.w	MarkObjGone
00009C9C                            ; ===========================================================================
00009C9C 0000                       Obj22_Index2:	dc.w Obj22_Move-Obj22_Index2
00009C9E 0000                       		dc.w Obj22_ChkNrSonic-Obj22_Index2
00009CA0                            ; ===========================================================================
00009CA0                            
00009CA0                            Obj22_Move:				; XREF: Obj22_Index2
00009CA0 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
00009CA4 6A00                       		bpl.s	locret_986C	; if time remains, branch
00009CA6 0828 0001 0034             		btst	#1,$34(a0)	; is Buzz Bomber near Sonic?
00009CAC 6600                       		bne.s	Obj22_Fire	; if yes, branch
00009CAE 5428 0025                  		addq.b	#2,$25(a0)
00009CB2 317C 007F 0032             		move.w	#127,$32(a0)	; set time delay to just over 2	seconds
00009CB8 317C 0400 0010             		move.w	#$400,$10(a0)	; move Buzz Bomber to the right
00009CBE 117C 0001 001C             		move.b	#1,$1C(a0)	; use "flying" animation
00009CC4 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
00009CCA 6600                       		bne.s	locret_986C	; if not, branch
00009CCC 4468 0010                  		neg.w	$10(a0)		; move Buzz Bomber to the left
00009CD0                            
00009CD0                            locret_986C:
00009CD0 4E75                       		rts	
00009CD2                            ; ===========================================================================
00009CD2                            
00009CD2                            Obj22_Fire:				; XREF: Obj22_Move
00009CD2 6100 0000                  		bsr.w	SingleObjLoad
00009CD6 6600                       		bne.s	locret_98D0
00009CD8 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
00009CDC 3368 0008 0008             		move.w	8(a0),8(a1)
00009CE2 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009CE8 0669 001C 000C             		addi.w	#$1C,$C(a1)
00009CEE 337C 0200 0012             		move.w	#$200,$12(a1)	; move missile downwards
00009CF4 337C 0200 0010             		move.w	#$200,$10(a1)	; move missile to the right
00009CFA 303C 0018                  		move.w	#$18,d0
00009CFE 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
00009D04 6600                       		bne.s	loc_98AA	; if not, branch
00009D06 4440                       		neg.w	d0
00009D08 4469 0010                  		neg.w	$10(a1)		; move missile to the left
00009D0C                            
00009D0C                            loc_98AA:
00009D0C D169 0008                  		add.w	d0,8(a1)
00009D10 1368 0022 0022             		move.b	$22(a0),$22(a1)
00009D16 337C 000E 0032             		move.w	#$E,$32(a1)
00009D1C 2348 003C                  		move.l	a0,$3C(a1)
00009D20 117C 0001 0034             		move.b	#1,$34(a0)	; set to "already fired" to prevent refiring
00009D26 317C 003B 0032             		move.w	#$3B,$32(a0)
00009D2C 117C 0002 001C             		move.b	#2,$1C(a0)	; use "firing" animation
00009D32                            
00009D32                            locret_98D0:
00009D32 4E75                       		rts	
00009D34                            ; ===========================================================================
00009D34                            
00009D34                            Obj22_ChkNrSonic:			; XREF: Obj22_Index2
00009D34 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
00009D38 6B00                       		bmi.s	Obj22_ChgDir
00009D3A 6100 0000                  		bsr.w	SpeedToPos
00009D3E 4A28 0034                  		tst.b	$34(a0)
00009D42 6600                       		bne.s	locret_992A
00009D44 3038 D008                  		move.w	($FFFFD008).w,d0
00009D48 9068 0008                  		sub.w	8(a0),d0
00009D4C 6A00                       		bpl.s	Obj22_SetNrSonic
00009D4E 4440                       		neg.w	d0
00009D50                            
00009D50                            Obj22_SetNrSonic:
00009D50 0C40 0060                  		cmpi.w	#$60,d0		; is Buzz Bomber within	$60 pixels of Sonic?
00009D54 6400                       		bcc.s	locret_992A	; if not, branch
00009D56 4A28 0001                  		tst.b	1(a0)
00009D5A 6A00                       		bpl.s	locret_992A
00009D5C 117C 0002 0034             		move.b	#2,$34(a0)	; set Buzz Bomber to "near Sonic"
00009D62 317C 001D 0032             		move.w	#29,$32(a0)	; set time delay to half a second
00009D68 6000                       		bra.s	Obj22_Stop
00009D6A                            ; ===========================================================================
00009D6A                            
00009D6A                            Obj22_ChgDir:				; XREF: Obj22_ChkNrSonic
00009D6A 117C 0000 0034             		move.b	#0,$34(a0)	; set Buzz Bomber to "normal"
00009D70 0868 0000 0022             		bchg	#0,$22(a0)	; change direction
00009D76 317C 003B 0032             		move.w	#59,$32(a0)
00009D7C                            
00009D7C                            Obj22_Stop:				; XREF: Obj22_SetNrSonic
00009D7C 5528 0025                  		subq.b	#2,$25(a0)	; run "Obj22_Fire" routine
00009D80 317C 0000 0010             		move.w	#0,$10(a0)	; stop Buzz Bomber moving
00009D86 117C 0000 001C             		move.b	#0,$1C(a0)	; use "hovering" animation
00009D8C                            
00009D8C                            locret_992A:
00009D8C 4E75                       		rts	
00009D8E                            ; ===========================================================================
00009D8E                            
00009D8E                            Obj22_Delete:				; XREF: Obj22_Index
00009D8E 6100 0000                  		bsr.w	DeleteObject
00009D92 4E75                       		rts	
00009D94                            ; ===========================================================================
00009D94                            ; ---------------------------------------------------------------------------
00009D94                            ; Object 23 - missile that Buzz	Bomber throws
00009D94                            ; ---------------------------------------------------------------------------
00009D94                            
00009D94                            Obj23:					; XREF: Obj_Index
00009D94 7000                       		moveq	#0,d0
00009D96 1028 0024                  		move.b	$24(a0),d0
00009D9A 323B 0000                  		move.w	Obj23_Index(pc,d0.w),d1
00009D9E 4EFB 1000                  		jmp	Obj23_Index(pc,d1.w)
00009DA2                            ; ===========================================================================
00009DA2 0000                       Obj23_Index:	dc.w Obj23_Main-Obj23_Index
00009DA4 0000                       		dc.w Obj23_Animate-Obj23_Index
00009DA6 0000                       		dc.w Obj23_FromBuzz-Obj23_Index
00009DA8 0000                       		dc.w Obj23_Delete-Obj23_Index
00009DAA 0000                       		dc.w Obj23_FromNewt-Obj23_Index
00009DAC                            ; ===========================================================================
00009DAC                            
00009DAC                            Obj23_Main:				; XREF: Obj23_Index
00009DAC 5368 0032                  		subq.w	#1,$32(a0)
00009DB0 6A00                       		bpl.s	Obj23_ChkCancel
00009DB2 5428 0024                  		addq.b	#2,$24(a0)
00009DB6 217C 0000 0000 0004        		move.l	#Map_obj23,4(a0)
00009DBE 317C 2444 0002             		move.w	#$2444,2(a0)
00009DC4 117C 0004 0001             		move.b	#4,1(a0)
00009DCA 117C 0003 0018             		move.b	#3,$18(a0)
00009DD0 117C 0008 0019             		move.b	#8,$19(a0)
00009DD6 0228 0003 0022             		andi.b	#3,$22(a0)
00009DDC 4A28 0028                  		tst.b	$28(a0)		; was object created by	a Newtron?
00009DE0 6700                       		beq.s	Obj23_Animate	; if not, branch
00009DE2 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj23_FromNewt" routine
00009DE8 117C 0087 0020             		move.b	#$87,$20(a0)
00009DEE 117C 0001 001C             		move.b	#1,$1C(a0)
00009DF4 6000                       		bra.s	Obj23_Animate2
00009DF6                            ; ===========================================================================
00009DF6                            
00009DF6                            Obj23_Animate:				; XREF: Obj23_Index
00009DF6 6100                       		bsr.s	Obj23_ChkCancel
00009DF8 43F9 0000 0000             		lea	(Ani_obj23).l,a1
00009DFE 6100 0000                  		bsr.w	AnimateSprite
00009E02 6000 0000                  		bra.w	DisplaySprite
00009E06                            ; ---------------------------------------------------------------------------
00009E06                            ; Subroutine to	check if the Buzz Bomber which fired the missile has been
00009E06                            ; destroyed, and if it has, then cancel	the missile
00009E06                            ; ---------------------------------------------------------------------------
00009E06                            
00009E06                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009E06                            
00009E06                            
00009E06                            Obj23_ChkCancel:			; XREF: Obj23_Main
00009E06 2268 003C                  		movea.l	$3C(a0),a1
00009E0A 0C11 0027                  		cmpi.b	#$27,0(a1)	; has Buzz Bomber been destroyed?
00009E0E 6700                       		beq.s	Obj23_Delete	; if yes, branch
00009E10 4E75                       		rts	
00009E12                            ; End of function Obj23_ChkCancel
00009E12                            
00009E12                            ; ===========================================================================
00009E12                            
00009E12                            Obj23_FromBuzz:				; XREF: Obj23_Index
00009E12 0828 0007 0022             		btst	#7,$22(a0)
00009E18 6600                       		bne.s	Obj23_Explode
00009E1A 117C 0087 0020             		move.b	#$87,$20(a0)
00009E20 117C 0001 001C             		move.b	#1,$1C(a0)
00009E26 6100 0000                  		bsr.w	SpeedToPos
00009E2A 43F9 0000 0000             		lea	(Ani_obj23).l,a1
00009E30 6100 0000                  		bsr.w	AnimateSprite
00009E34 6100 0000                  		bsr.w	DisplaySprite
00009E38 3038 F72E                  		move.w	($FFFFF72E).w,d0
00009E3C 0640 00E0                  		addi.w	#$E0,d0
00009E40 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
00009E44 6500                       		bcs.s	Obj23_Delete	; if yes, branch
00009E46 4E75                       		rts	
00009E48                            ; ===========================================================================
00009E48                            
00009E48                            Obj23_Explode:				; XREF: Obj23_FromBuzz
00009E48 10BC 0024                  		move.b	#$24,0(a0)	; change object	to an explosion	(Obj24)
00009E4C 117C 0000 0024             		move.b	#0,$24(a0)
00009E52 6000 F2DE                  		bra.w	Obj24
00009E56                            ; ===========================================================================
00009E56                            
00009E56                            Obj23_Delete:				; XREF: Obj23_Index
00009E56 6100 0000                  		bsr.w	DeleteObject
00009E5A 4E75                       		rts	
00009E5C                            ; ===========================================================================
00009E5C                            
00009E5C                            Obj23_FromNewt:				; XREF: Obj23_Index
00009E5C 4A28 0001                  		tst.b	1(a0)
00009E60 6AF4                       		bpl.s	Obj23_Delete
00009E62 6100 0000                  		bsr.w	SpeedToPos
00009E66                            
00009E66                            Obj23_Animate2:				; XREF: Obj23_Main
00009E66 43F9 0000 0000             		lea	(Ani_obj23).l,a1
00009E6C 6100 0000                  		bsr.w	AnimateSprite
00009E70 6100 0000                  		bsr.w	DisplaySprite
00009E74 4E75                       		rts	
00009E76                            ; ===========================================================================
00009E76                            Ani_obj22:
00009E76                            	include "_anim\obj22.asm"
00009E76                            ; ---------------------------------------------------------------------------
00009E76                            ; Animation script - Buzz Bomber enemy
00009E76                            ; ---------------------------------------------------------------------------
00009E76 0000                       		dc.w byte_9A1E-Ani_obj22
00009E78 0000                       		dc.w byte_9A22-Ani_obj22
00009E7A 0000                       		dc.w byte_9A26-Ani_obj22
00009E7C 0100 01FF                  byte_9A1E:	dc.b 1,	0, 1, $FF
00009E80 0102 03FF                  byte_9A22:	dc.b 1,	2, 3, $FF
00009E84 0104 05FF                  byte_9A26:	dc.b 1,	4, 5, $FF
00009E88                            		even
00009E88                            		even
00009E88                            
00009E88                            Ani_obj23:
00009E88                            	include "_anim\obj23.asm"
00009E88                            ; ---------------------------------------------------------------------------
00009E88                            ; Animation script - missile that Buzz Bomber throws
00009E88                            ; ---------------------------------------------------------------------------
00009E88 0000                       		dc.w byte_9A2E-Ani_obj23
00009E8A 0000                       		dc.w byte_9A32-Ani_obj23
00009E8C 0700 01FC                  byte_9A2E:	dc.b 7,	0, 1, $FC
00009E90 0102 03FF                  byte_9A32:	dc.b 1,	2, 3, $FF
00009E94                            		even
00009E94                            		even
00009E94                            
00009E94                            ; ---------------------------------------------------------------------------
00009E94                            ; Sprite mappings - Buzz Bomber	enemy
00009E94                            ; ---------------------------------------------------------------------------
00009E94                            Map_obj22:
00009E94                            	include "_maps\obj22.asm"
00009E94                            Map_e97a:
00009E94 0000                       Map_e97a_0: 	dc.w Map_e97a_C-Map_e97a
00009E96 0000                       Map_e97a_2: 	dc.w Map_e97a_2B-Map_e97a
00009E98 0000                       Map_e97a_4: 	dc.w Map_e97a_4A-Map_e97a
00009E9A 0000                       Map_e97a_6: 	dc.w Map_e97a_6E-Map_e97a
00009E9C 0000                       Map_e97a_8: 	dc.w Map_e97a_92-Map_e97a
00009E9E 0000                       Map_e97a_A: 	dc.w Map_e97a_B1-Map_e97a
00009EA0 06                         Map_e97a_C: 	dc.b $6
00009EA1 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
00009EA6 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
00009EAB 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
00009EB0 0404 0018 00               	dc.b $4, $4, $0, $18, $0
00009EB5 F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
00009EBA F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
00009EBF 06                         Map_e97a_2B: 	dc.b $6
00009EC0 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
00009EC5 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
00009ECA 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
00009ECF 0404 0018 00               	dc.b $4, $4, $0, $18, $0
00009ED4 F408 001F EC               	dc.b $F4, $8, $0, $1F, $EC
00009ED9 F404 0022 04               	dc.b $F4, $4, $0, $22, $4
00009EDE 07                         Map_e97a_4A: 	dc.b $7
00009EDF 0400 0030 0C               	dc.b $4, $0, $0, $30, $C
00009EE4 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
00009EE9 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
00009EEE 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
00009EF3 0404 0018 00               	dc.b $4, $4, $0, $18, $0
00009EF8 F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
00009EFD F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
00009F02 07                         Map_e97a_6E: 	dc.b $7
00009F03 0404 0031 0C               	dc.b $4, $4, $0, $31, $C
00009F08 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
00009F0D F409 000F 00               	dc.b $F4, $9, $0, $F, $0
00009F12 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
00009F17 0404 0018 00               	dc.b $4, $4, $0, $18, $0
00009F1C F408 001F EC               	dc.b $F4, $8, $0, $1F, $EC
00009F21 F404 0022 04               	dc.b $F4, $4, $0, $22, $4
00009F26 06                         Map_e97a_92: 	dc.b $6
00009F27 F40D 0000 EC               	dc.b $F4, $D, $0, $0, $EC
00009F2C 040C 0008 EC               	dc.b $4, $C, $0, $8, $EC
00009F31 0400 000C 0C               	dc.b $4, $0, $0, $C, $C
00009F36 0C04 000D F4               	dc.b $C, $4, $0, $D, $F4
00009F3B F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
00009F40 F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
00009F45 04                         Map_e97a_B1: 	dc.b $4
00009F46 F40D 0000 EC               	dc.b $F4, $D, $0, $0, $EC
00009F4B 040C 0008 EC               	dc.b $4, $C, $0, $8, $EC
00009F50 0400 000C 0C               	dc.b $4, $0, $0, $C, $C
00009F55 0C04 000D F4               	dc.b $C, $4, $0, $D, $F4
00009F5A                            	even
00009F5A                            	even
00009F5A                            
00009F5A                            ; ---------------------------------------------------------------------------
00009F5A                            ; Sprite mappings - missile that Buzz Bomber throws
00009F5A                            ; ---------------------------------------------------------------------------
00009F5A                            Map_obj23:
00009F5A                            	include "_maps\obj23.asm"
00009F5A                            ; ---------------------------------------------------------------------------
00009F5A                            ; Sprite mappings - missile that Buzz Bomber throws
00009F5A                            ; ---------------------------------------------------------------------------
00009F5A 0000 0000                  		dc.w byte_9B0E-Map_obj23, byte_9B14-Map_obj23
00009F5E 0000 0000                  		dc.w byte_9B1A-Map_obj23, byte_9B20-Map_obj23
00009F62 01                         byte_9B0E:	dc.b 1
00009F63 F805 0024 F8               		dc.b $F8, 5, 0,	$24, $F8
00009F68 01                         byte_9B14:	dc.b 1
00009F69 F805 0028 F8               		dc.b $F8, 5, 0,	$28, $F8
00009F6E 01                         byte_9B1A:	dc.b 1
00009F6F F805 002C F8               		dc.b $F8, 5, 0,	$2C, $F8
00009F74 01                         byte_9B20:	dc.b 1
00009F75 F805 0033 F8               		dc.b $F8, 5, 0,	$33, $F8
00009F7A                            		even
00009F7A                            		even
00009F7A                            
00009F7A                            ; ===========================================================================
00009F7A                            ; ---------------------------------------------------------------------------
00009F7A                            ; Object 25 - rings
00009F7A                            ; ---------------------------------------------------------------------------
00009F7A                            
00009F7A                            Obj25:					; XREF: Obj_Index
00009F7A 7000                       		moveq	#0,d0
00009F7C 1028 0024                  		move.b	$24(a0),d0
00009F80 323B 0000                  		move.w	Obj25_Index(pc,d0.w),d1
00009F84 4EFB 1000                  		jmp	Obj25_Index(pc,d1.w)
00009F88                            ; ===========================================================================
00009F88 0000                       Obj25_Index:	dc.w Obj25_Main-Obj25_Index
00009F8A 0000                       		dc.w Obj25_Animate-Obj25_Index
00009F8C 0000                       		dc.w Obj25_Collect-Obj25_Index
00009F8E 0000                       		dc.w Obj25_Sparkle-Obj25_Index
00009F90 0000                       		dc.w Obj25_Delete-Obj25_Index
00009F92                            ; ---------------------------------------------------------------------------
00009F92                            ; Distances between rings (format: horizontal, vertical)
00009F92                            ; ---------------------------------------------------------------------------
00009F92 1000                       Obj25_PosData:	dc.b $10, 0		; horizontal tight
00009F94 1800                       		dc.b $18, 0		; horizontal normal
00009F96 2000                       		dc.b $20, 0		; horizontal wide
00009F98 0010                       		dc.b 0,	$10		; vertical tight
00009F9A 0018                       		dc.b 0,	$18		; vertical normal
00009F9C 0020                       		dc.b 0,	$20		; vertical wide
00009F9E 1010                       		dc.b $10, $10		; diagonal
00009FA0 1818                       		dc.b $18, $18
00009FA2 2020                       		dc.b $20, $20
00009FA4 F010                       		dc.b $F0, $10
00009FA6 E818                       		dc.b $E8, $18
00009FA8 E020                       		dc.b $E0, $20
00009FAA 1008                       		dc.b $10, 8
00009FAC 1810                       		dc.b $18, $10
00009FAE F008                       		dc.b $F0, 8
00009FB0 E810                       		dc.b $E8, $10
00009FB2                            ; ===========================================================================
00009FB2                            
00009FB2                            Obj25_Main:				; XREF: Obj25_Index
00009FB2 45F8 FC00                  		lea	($FFFFFC00).w,a2
00009FB6 7000                       		moveq	#0,d0
00009FB8 1028 0023                  		move.b	$23(a0),d0
00009FBC 45F2 0002                  		lea	2(a2,d0.w),a2
00009FC0 1812                       		move.b	(a2),d4
00009FC2 1228 0028                  		move.b	$28(a0),d1
00009FC6 1001                       		move.b	d1,d0
00009FC8 0241 0007                  		andi.w	#7,d1
00009FCC 0C41 0007                  		cmpi.w	#7,d1
00009FD0 6600                       		bne.s	loc_9B80
00009FD2 7206                       		moveq	#6,d1
00009FD4                            
00009FD4                            loc_9B80:
00009FD4 4841                       		swap	d1
00009FD6 323C 0000                  		move.w	#0,d1
00009FDA E808                       		lsr.b	#4,d0
00009FDC D040                       		add.w	d0,d0
00009FDE 1A3B 00B2                  		move.b	Obj25_PosData(pc,d0.w),d5 ; load ring spacing data
00009FE2 4885                       		ext.w	d5
00009FE4 1C3B 00AD                  		move.b	Obj25_PosData+1(pc,d0.w),d6
00009FE8 4886                       		ext.w	d6
00009FEA 2248                       		movea.l	a0,a1
00009FEC 3428 0008                  		move.w	8(a0),d2
00009FF0 3628 000C                  		move.w	$C(a0),d3
00009FF4 E20C                       		lsr.b	#1,d4
00009FF6 6500                       		bcs.s	loc_9C02
00009FF8 0892 0007                  		bclr	#7,(a2)
00009FFC 6000                       		bra.s	loc_9BBA
00009FFE                            ; ===========================================================================
00009FFE                            
00009FFE                            Obj25_MakeRings:
00009FFE 4841                       		swap	d1
0000A000 E20C                       		lsr.b	#1,d4
0000A002 6500                       		bcs.s	loc_9C02
0000A004 0892 0007                  		bclr	#7,(a2)
0000A008 6100 0000                  		bsr.w	SingleObjLoad
0000A00C 6600                       		bne.s	loc_9C0E
0000A00E                            
0000A00E                            loc_9BBA:				; XREF: Obj25_Main
0000A00E 12BC 0025                  		move.b	#$25,0(a1)	; load ring object
0000A012 5429 0024                  		addq.b	#2,$24(a1)
0000A016 3342 0008                  		move.w	d2,8(a1)	; set x-axis position based on d2
0000A01A 3368 0008 0032             		move.w	8(a0),$32(a1)
0000A020 3343 000C                  		move.w	d3,$C(a1)	; set y-axis position based on d3
0000A024 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000A02C 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000A032 137C 0004 0001             		move.b	#4,1(a1)
0000A038 137C 0002 0018             		move.b	#2,$18(a1)
0000A03E 137C 0047 0020             		move.b	#$47,$20(a1)
0000A044 137C 0008 0019             		move.b	#8,$19(a1)
0000A04A 1368 0023 0023             		move.b	$23(a0),$23(a1)
0000A050 1341 0034                  		move.b	d1,$34(a1)
0000A054                            
0000A054                            loc_9C02:
0000A054 5241                       		addq.w	#1,d1
0000A056 D445                       		add.w	d5,d2		; add ring spacing value to d2
0000A058 D646                       		add.w	d6,d3		; add ring spacing value to d3
0000A05A 4841                       		swap	d1
0000A05C 51C9 FFA0                  		dbf	d1,Obj25_MakeRings ; repeat for	number of rings
0000A060                            
0000A060                            loc_9C0E:
0000A060 0812 0000                  		btst	#0,(a2)
0000A064 6600 0000                  		bne.w	DeleteObject
0000A068                            
0000A068                            Obj25_Animate:				; XREF: Obj25_Index
0000A068 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0) ;	set frame
0000A06E 6100 0000                  		bsr.w	DisplaySprite
0000A072 3028 0032                  		move.w	$32(a0),d0
0000A076 0240 FF80                  		andi.w	#$FF80,d0
0000A07A 3238 F700                  		move.w	($FFFFF700).w,d1
0000A07E 0441 0080                  		subi.w	#$80,d1
0000A082 0241 FF80                  		andi.w	#$FF80,d1
0000A086 9041                       		sub.w	d1,d0
0000A088 0C40 0280                  		cmpi.w	#$280,d0
0000A08C 6200                       		bhi.s	Obj25_Delete
0000A08E 4E75                       		rts	
0000A090                            ; ===========================================================================
0000A090                            
0000A090                            Obj25_Collect:				; XREF: Obj25_Index
0000A090 5428 0024                  		addq.b	#2,$24(a0)
0000A094 117C 0000 0020             		move.b	#0,$20(a0)
0000A09A 117C 0001 0018             		move.b	#1,$18(a0)
0000A0A0 6100 0000                  		bsr.w	CollectRing
0000A0A4 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A0A8 7000                       		moveq	#0,d0
0000A0AA 1028 0023                  		move.b	$23(a0),d0
0000A0AE 1228 0034                  		move.b	$34(a0),d1
0000A0B2 03F2 0002                  		bset	d1,2(a2,d0.w)
0000A0B6                            
0000A0B6                            Obj25_Sparkle:				; XREF: Obj25_Index
0000A0B6 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000A0BC 6100 0000                  		bsr.w	AnimateSprite
0000A0C0 6000 0000                  		bra.w	DisplaySprite
0000A0C4                            ; ===========================================================================
0000A0C4                            
0000A0C4                            Obj25_Delete:				; XREF: Obj25_Index
0000A0C4 6000 0000                  		bra.w	DeleteObject
0000A0C8                            
0000A0C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A0C8                            
0000A0C8                            
0000A0C8                            CollectRing:				; XREF: Obj25_Collect
0000A0C8 5278 FE20                  		addq.w	#1,($FFFFFE20).w ; add 1 to rings
0000A0CC 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the rings counter
0000A0D2 303C 00B5                  		move.w	#$B5,d0		; play ring sound
0000A0D6 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; do	you have < 100 rings?
0000A0DC 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000A0DE 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w ; update lives	counter
0000A0E4 6700                       		beq.s	loc_9CA4
0000A0E6 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; do	you have < 200 rings?
0000A0EC 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000A0EE 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w ; update lives	counter
0000A0F4 6600                       		bne.s	Obj25_PlaySnd
0000A0F6                            
0000A0F6                            loc_9CA4:
0000A0F6 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000A0FA 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000A0FE 303C 0088                  		move.w	#$88,d0		; play extra life music
0000A102                            
0000A102                            Obj25_PlaySnd:
0000A102 4EF9 0000 15BC             		jmp	(PlaySound_Special).l
0000A108                            ; End of function CollectRing
0000A108                            
0000A108                            ; ===========================================================================
0000A108                            ; ---------------------------------------------------------------------------
0000A108                            ; Object 37 - rings flying out of Sonic	when he's hit
0000A108                            ; ---------------------------------------------------------------------------
0000A108                            
0000A108                            Obj37:					; XREF: Obj_Index
0000A108 7000                       		moveq	#0,d0
0000A10A 1028 0024                  		move.b	$24(a0),d0
0000A10E 323B 0000                  		move.w	Obj37_Index(pc,d0.w),d1
0000A112 4EFB 1000                  		jmp	Obj37_Index(pc,d1.w)
0000A116                            ; ===========================================================================
0000A116 0000                       Obj37_Index:	dc.w Obj37_CountRings-Obj37_Index
0000A118 0000                       		dc.w Obj37_Bounce-Obj37_Index
0000A11A 0000                       		dc.w Obj37_Collect-Obj37_Index
0000A11C 0000                       		dc.w Obj37_Sparkle-Obj37_Index
0000A11E 0000                       		dc.w Obj37_Delete-Obj37_Index
0000A120                            ; ===========================================================================
0000A120                            
0000A120                            Obj37_CountRings:			; XREF: Obj37_Index
0000A120 2248                       		movea.l	a0,a1
0000A122 7A00                       		moveq	#0,d5
0000A124 3A38 FE20                  		move.w	($FFFFFE20).w,d5 ; check number	of rings you have
0000A128 7020                       		moveq	#32,d0
0000A12A BA40                       		cmp.w	d0,d5		; do you have 32 or more?
0000A12C 6500                       		bcs.s	loc_9CDE	; if not, branch
0000A12E 3A00                       		move.w	d0,d5		; if yes, set d5 to 32
0000A130                            
0000A130                            loc_9CDE:
0000A130 5345                       		subq.w	#1,d5
0000A132 383C 0288                  		move.w	#$288,d4
0000A136 6000                       		bra.s	Obj37_MakeRings
0000A138                            ; ===========================================================================
0000A138                            
0000A138                            Obj37_Loop:
0000A138 6100 0000                  		bsr.w	SingleObjLoad
0000A13C 6600 0000                  		bne.w	Obj37_ResetCounter
0000A140                            
0000A140                            Obj37_MakeRings:			; XREF: Obj37_CountRings
0000A140 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	ring object
0000A144 5429 0024                  		addq.b	#2,$24(a1)
0000A148 137C 0008 0016             		move.b	#8,$16(a1)
0000A14E 137C 0008 0017             		move.b	#8,$17(a1)
0000A154 3368 0008 0008             		move.w	8(a0),8(a1)
0000A15A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A160 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000A168 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000A16E 137C 0004 0001             		move.b	#4,1(a1)
0000A174 137C 0003 0018             		move.b	#3,$18(a1)
0000A17A 137C 0047 0020             		move.b	#$47,$20(a1)
0000A180 137C 0008 0019             		move.b	#8,$19(a1)
0000A186 11FC 00FF FEC6             		move.b	#-1,($FFFFFEC6).w
0000A18C 4A44                       		tst.w	d4
0000A18E 6B00                       		bmi.s	loc_9D62
0000A190 3004                       		move.w	d4,d0
0000A192 6100 8A8E                  		bsr.w	CalcSine
0000A196 3404                       		move.w	d4,d2
0000A198 E04A                       		lsr.w	#8,d2
0000A19A E560                       		asl.w	d2,d0
0000A19C E561                       		asl.w	d2,d1
0000A19E 3400                       		move.w	d0,d2
0000A1A0 3601                       		move.w	d1,d3
0000A1A2 0604 0010                  		addi.b	#$10,d4
0000A1A6 6400                       		bcc.s	loc_9D62
0000A1A8 0444 0080                  		subi.w	#$80,d4
0000A1AC 6400                       		bcc.s	loc_9D62
0000A1AE 383C 0288                  		move.w	#$288,d4
0000A1B2                            
0000A1B2                            loc_9D62:
0000A1B2 3342 0010                  		move.w	d2,$10(a1)
0000A1B6 3343 0012                  		move.w	d3,$12(a1)
0000A1BA 4442                       		neg.w	d2
0000A1BC 4444                       		neg.w	d4
0000A1BE 51CD FF78                  		dbf	d5,Obj37_Loop	; repeat for number of rings (max 31)
0000A1C2                            
0000A1C2                            Obj37_ResetCounter:			; XREF: Obj37_Loop
0000A1C2 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; reset number	of rings to zero
0000A1C8 11FC 0080 FE1D             		move.b	#$80,($FFFFFE1D).w ; update ring counter
0000A1CE 11FC 0000 FE1B             		move.b	#0,($FFFFFE1B).w
0000A1D4 303C 00C6                  		move.w	#$C6,d0
0000A1D8 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play ring loss sound
0000A1DE                            
0000A1DE                            Obj37_Bounce:				; XREF: Obj37_Index
0000A1DE 1178 FEC7 001A             		move.b	($FFFFFEC7).w,$1A(a0)
0000A1E4 6100 0000                  		bsr.w	SpeedToPos
0000A1E8 0668 0018 0012             		addi.w	#$18,$12(a0)
0000A1EE 6B00                       		bmi.s	Obj37_ChkDel
0000A1F0 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000A1F4 D007                       		add.b	d7,d0
0000A1F6 0200 0003                  		andi.b	#3,d0
0000A1FA 6600                       		bne.s	Obj37_ChkDel
0000A1FC 4EB9 0000 0000             		jsr	ObjHitFloor
0000A202 4A41                       		tst.w	d1
0000A204 6A00                       		bpl.s	Obj37_ChkDel
0000A206 D368 000C                  		add.w	d1,$C(a0)
0000A20A 3028 0012                  		move.w	$12(a0),d0
0000A20E E440                       		asr.w	#2,d0
0000A210 9168 0012                  		sub.w	d0,$12(a0)
0000A214 4468 0012                  		neg.w	$12(a0)
0000A218                            
0000A218                            Obj37_ChkDel:				; XREF: Obj37_Bounce
0000A218 4A38 FEC6                  		tst.b	($FFFFFEC6).w
0000A21C 6700                       		beq.s	Obj37_Delete
0000A21E 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000A222 0640 00E0                  		addi.w	#$E0,d0
0000A226 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below level boundary?
0000A22A 6500                       		bcs.s	Obj37_Delete	; if yes, branch
0000A22C 6000 0000                  		bra.w	DisplaySprite
0000A230                            ; ===========================================================================
0000A230                            
0000A230                            Obj37_Collect:				; XREF: Obj37_Index
0000A230 5428 0024                  		addq.b	#2,$24(a0)
0000A234 117C 0000 0020             		move.b	#0,$20(a0)
0000A23A 117C 0001 0018             		move.b	#1,$18(a0)
0000A240 6100 FE86                  		bsr.w	CollectRing
0000A244                            
0000A244                            Obj37_Sparkle:				; XREF: Obj37_Index
0000A244 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000A24A 6100 0000                  		bsr.w	AnimateSprite
0000A24E 6000 0000                  		bra.w	DisplaySprite
0000A252                            ; ===========================================================================
0000A252                            
0000A252                            Obj37_Delete:				; XREF: Obj37_Index
0000A252 6000 0000                  		bra.w	DeleteObject
0000A256                            ; ===========================================================================
0000A256                            ; ---------------------------------------------------------------------------
0000A256                            ; Object 4B - giant ring for entry to special stage
0000A256                            ; ---------------------------------------------------------------------------
0000A256                            
0000A256                            Obj4B:					; XREF: Obj_Index
0000A256 7000                       		moveq	#0,d0
0000A258 1028 0024                  		move.b	$24(a0),d0
0000A25C 323B 0000                  		move.w	Obj4B_Index(pc,d0.w),d1
0000A260 4EFB 1000                  		jmp	Obj4B_Index(pc,d1.w)
0000A264                            ; ===========================================================================
0000A264 0000                       Obj4B_Index:	dc.w Obj4B_Main-Obj4B_Index
0000A266 0000                       		dc.w Obj4B_Animate-Obj4B_Index
0000A268 0000                       		dc.w Obj4B_Collect-Obj4B_Index
0000A26A 0000                       		dc.w Obj4B_Delete-Obj4B_Index
0000A26C                            ; ===========================================================================
0000A26C                            
0000A26C                            Obj4B_Main:				; XREF: Obj4B_Index
0000A26C 217C 0000 0000 0004        		move.l	#Map_obj4B,4(a0)
0000A274 317C 2400 0002             		move.w	#$2400,2(a0)
0000A27A 0028 0004 0001             		ori.b	#4,1(a0)
0000A280 117C 0040 0019             		move.b	#$40,$19(a0)
0000A286 4A28 0001                  		tst.b	1(a0)
0000A28A 6A00                       		bpl.s	Obj4B_Animate
0000A28C 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have 6 emeralds?
0000A292 6700 0000                  		beq.w	Obj4B_Delete	; if yes, branch
0000A296 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000A29C 6400                       		bcc.s	Obj4B_Okay	; if yes, branch
0000A29E 4E75                       		rts	
0000A2A0                            ; ===========================================================================
0000A2A0                            
0000A2A0                            Obj4B_Okay:				; XREF: Obj4B_Main
0000A2A0 5428 0024                  		addq.b	#2,$24(a0)
0000A2A4 117C 0002 0018             		move.b	#2,$18(a0)
0000A2AA 117C 0052 0020             		move.b	#$52,$20(a0)
0000A2B0 31FC 0C40 F7BE             		move.w	#$C40,($FFFFF7BE).w
0000A2B6                            
0000A2B6                            Obj4B_Animate:				; XREF: Obj4B_Index
0000A2B6 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0)
0000A2BC 3028 0008                  		move.w	8(a0),d0
0000A2C0 0240 FF80                  		andi.w	#$FF80,d0
0000A2C4 3238 F700                  		move.w	($FFFFF700).w,d1
0000A2C8 0441 0080                  		subi.w	#$80,d1
0000A2CC 0241 FF80                  		andi.w	#$FF80,d1
0000A2D0 9041                       		sub.w	d1,d0
0000A2D2 0C40 0280                  		cmpi.w	#$280,d0
0000A2D6 6200 0000                  		bhi.w	DeleteObject
0000A2DA 6000 0000                  		bra.w	DisplaySprite
0000A2DE                            ; ===========================================================================
0000A2DE                            
0000A2DE                            Obj4B_Collect:				; XREF: Obj4B_Index
0000A2DE 5528 0024                  		subq.b	#2,$24(a0)
0000A2E2 117C 0000 0020             		move.b	#0,$20(a0)
0000A2E8 6100 0000                  		bsr.w	SingleObjLoad
0000A2EC 6600 0000                  		bne.w	Obj4B_PlaySnd
0000A2F0 12BC 007C                  		move.b	#$7C,0(a1)	; load giant ring flash	object
0000A2F4 3368 0008 0008             		move.w	8(a0),8(a1)
0000A2FA 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A300 2348 003C                  		move.l	a0,$3C(a1)
0000A304 3038 D008                  		move.w	($FFFFD008).w,d0
0000A308 B068 0008                  		cmp.w	8(a0),d0	; has Sonic come from the left?
0000A30C 6500                       		bcs.s	Obj4B_PlaySnd	; if yes, branch
0000A30E 08E9 0000 0001             		bset	#0,1(a1)	; reverse flash	object
0000A314                            
0000A314                            Obj4B_PlaySnd:
0000A314 303C 00C3                  		move.w	#$C3,d0
0000A318 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play giant ring	sound
0000A31E 6096                       		bra.s	Obj4B_Animate
0000A320                            ; ===========================================================================
0000A320                            
0000A320                            Obj4B_Delete:				; XREF: Obj4B_Index
0000A320 6000 0000                  		bra.w	DeleteObject
0000A324                            ; ===========================================================================
0000A324                            ; ---------------------------------------------------------------------------
0000A324                            ; Object 7C - flash effect when	you collect the	giant ring
0000A324                            ; ---------------------------------------------------------------------------
0000A324                            
0000A324                            Obj7C:					; XREF: Obj_Index
0000A324 7000                       		moveq	#0,d0
0000A326 1028 0024                  		move.b	$24(a0),d0
0000A32A 323B 0000                  		move.w	Obj7C_Index(pc,d0.w),d1
0000A32E 4EFB 1000                  		jmp	Obj7C_Index(pc,d1.w)
0000A332                            ; ===========================================================================
0000A332 0000                       Obj7C_Index:	dc.w Obj7C_Main-Obj7C_Index
0000A334 0000                       		dc.w Obj7C_ChkDel-Obj7C_Index
0000A336 0000                       		dc.w Obj7C_Delete-Obj7C_Index
0000A338                            ; ===========================================================================
0000A338                            
0000A338                            Obj7C_Main:				; XREF: Obj7C_Index
0000A338 5428 0024                  		addq.b	#2,$24(a0)
0000A33C 217C 0000 0000 0004        		move.l	#Map_obj7C,4(a0)
0000A344 317C 2462 0002             		move.w	#$2462,2(a0)
0000A34A 0028 0004 0001             		ori.b	#4,1(a0)
0000A350 117C 0000 0018             		move.b	#0,$18(a0)
0000A356 117C 0020 0019             		move.b	#$20,$19(a0)
0000A35C 117C 00FF 001A             		move.b	#$FF,$1A(a0)
0000A362                            
0000A362                            Obj7C_ChkDel:				; XREF: Obj7C_Index
0000A362 6100                       		bsr.s	Obj7C_Collect
0000A364 3028 0008                  		move.w	8(a0),d0
0000A368 0240 FF80                  		andi.w	#$FF80,d0
0000A36C 3238 F700                  		move.w	($FFFFF700).w,d1
0000A370 0441 0080                  		subi.w	#$80,d1
0000A374 0241 FF80                  		andi.w	#$FF80,d1
0000A378 9041                       		sub.w	d1,d0
0000A37A 0C40 0280                  		cmpi.w	#$280,d0
0000A37E 6200 0000                  		bhi.w	DeleteObject
0000A382 6000 0000                  		bra.w	DisplaySprite
0000A386                            
0000A386                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A386                            
0000A386                            
0000A386                            Obj7C_Collect:				; XREF: Obj7C_ChkDel
0000A386 5328 001E                  		subq.b	#1,$1E(a0)
0000A38A 6A00                       		bpl.s	locret_9F76
0000A38C 117C 0001 001E             		move.b	#1,$1E(a0)
0000A392 5228 001A                  		addq.b	#1,$1A(a0)
0000A396 0C28 0008 001A             		cmpi.b	#8,$1A(a0)	; has animation	finished?
0000A39C 6400                       		bcc.s	Obj7C_End	; if yes, branch
0000A39E 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is 3rd frame displayed?
0000A3A4 6600                       		bne.s	locret_9F76	; if not, branch
0000A3A6 2268 003C                  		movea.l	$3C(a0),a1
0000A3AA 137C 0006 0024             		move.b	#6,$24(a1)	; delete giant ring object (Obj4B)
0000A3B0 11FC 001C D01C             		move.b	#$1C,($FFFFD01C).w ; make Sonic	invisible
0000A3B6 11FC 0001 F7CD             		move.b	#1,($FFFFF7CD).w ; stop	Sonic getting bonuses
0000A3BC 4238 FE2D                  		clr.b	($FFFFFE2D).w	; remove invincibility
0000A3C0 4238 FE2C                  		clr.b	($FFFFFE2C).w	; remove shield
0000A3C4                            
0000A3C4                            locret_9F76:
0000A3C4 4E75                       		rts	
0000A3C6                            ; ===========================================================================
0000A3C6                            
0000A3C6                            Obj7C_End:				; XREF: Obj7C_Collect
0000A3C6 5428 0024                  		addq.b	#2,$24(a0)
0000A3CA 31FC 0000 D000             		move.w	#0,($FFFFD000).w ; remove Sonic	object
0000A3D0 588F                       		addq.l	#4,sp
0000A3D2 4E75                       		rts	
0000A3D4                            ; End of function Obj7C_Collect
0000A3D4                            
0000A3D4                            ; ===========================================================================
0000A3D4                            
0000A3D4                            Obj7C_Delete:				; XREF: Obj7C_Index
0000A3D4 6000 0000                  		bra.w	DeleteObject
0000A3D8                            ; ===========================================================================
0000A3D8                            Ani_obj25:
0000A3D8                            	include "_anim\obj25.asm"
0000A3D8                            ; ---------------------------------------------------------------------------
0000A3D8                            ; Animation script - ring
0000A3D8                            ; ---------------------------------------------------------------------------
0000A3D8 0000                       		dc.w byte_9F8C-Ani_obj25
0000A3DA 0504 0506 07FC             byte_9F8C:	dc.b 5,	4, 5, 6, 7, $FC
0000A3E0                            		even
0000A3E0                            		even
0000A3E0                            
0000A3E0                            ; ---------------------------------------------------------------------------
0000A3E0                            ; Sprite mappings - rings
0000A3E0                            ; ---------------------------------------------------------------------------
0000A3E0                            Map_obj25:
0000A3E0                            	include "_maps\obj25.asm"
0000A3E0                            ; ---------------------------------------------------------------------------
0000A3E0                            ; Sprite mappings - rings
0000A3E0                            ; ---------------------------------------------------------------------------
0000A3E0 0000 0000                  		dc.w byte_9FA2-Map_obj25, byte_9FA8-Map_obj25
0000A3E4 0000 0000                  		dc.w byte_9FAE-Map_obj25, byte_9FB4-Map_obj25
0000A3E8 0000 0000                  		dc.w byte_9FBA-Map_obj25, byte_9FC0-Map_obj25
0000A3EC 0000 0000                  		dc.w byte_9FC6-Map_obj25, byte_9FCC-Map_obj25
0000A3F0 01                         byte_9FA2:	dc.b 1
0000A3F1 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000A3F6 01                         byte_9FA8:	dc.b 1
0000A3F7 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0000A3FC 01                         byte_9FAE:	dc.b 1
0000A3FD F801 0008 FC               		dc.b $F8, 1, 0,	8, $FC
0000A402 01                         byte_9FB4:	dc.b 1
0000A403 F805 0804 F8               		dc.b $F8, 5, 8,	4, $F8
0000A408 01                         byte_9FBA:	dc.b 1
0000A409 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
0000A40E 01                         byte_9FC0:	dc.b 1
0000A40F F805 180A F8               		dc.b $F8, 5, $18, $A, $F8
0000A414 01                         byte_9FC6:	dc.b 1
0000A415 F805 080A F8               		dc.b $F8, 5, 8,	$A, $F8
0000A41A 01                         byte_9FCC:	dc.b 1
0000A41B F805 100A F8               		dc.b $F8, 5, $10, $A, $F8
0000A420                            		even
0000A420                            		even
0000A420                            
0000A420                            ; ---------------------------------------------------------------------------
0000A420                            ; Sprite mappings - giant ring
0000A420                            ; ---------------------------------------------------------------------------
0000A420                            Map_obj4B:
0000A420                            	include "_maps\obj4B.asm"
0000A420                            ; ---------------------------------------------------------------------------
0000A420                            ; Sprite mappings - giant ring
0000A420                            ; ---------------------------------------------------------------------------
0000A420 0000 0000                  		dc.w byte_9FDA-Map_obj4B, byte_A00D-Map_obj4B
0000A424 0000 0000                  		dc.w byte_A036-Map_obj4B, byte_A04B-Map_obj4B
0000A428 0A                         byte_9FDA:	dc.b $A
0000A429 E008 0000 E8               		dc.b $E0, 8, 0,	0, $E8
0000A42E E008 0003 00               		dc.b $E0, 8, 0,	3, 0
0000A433 E80C 0006 E0               		dc.b $E8, $C, 0, 6, $E0
0000A438 E80C 000A 00               		dc.b $E8, $C, 0, $A, 0
0000A43D F007 000E E0               		dc.b $F0, 7, 0,	$E, $E0
0000A442 F007 0016 10               		dc.b $F0, 7, 0,	$16, $10
0000A447 100C 001E E0               		dc.b $10, $C, 0, $1E, $E0
0000A44C 100C 0022 00               		dc.b $10, $C, 0, $22, 0
0000A451 1808 0026 E8               		dc.b $18, 8, 0,	$26, $E8
0000A456 1808 0029 00               		dc.b $18, 8, 0,	$29, 0
0000A45B 08                         byte_A00D:	dc.b 8
0000A45C E00C 002C F0               		dc.b $E0, $C, 0, $2C, $F0
0000A461 E808 0030 E8               		dc.b $E8, 8, 0,	$30, $E8
0000A466 E809 0033 00               		dc.b $E8, 9, 0,	$33, 0
0000A46B F007 0039 E8               		dc.b $F0, 7, 0,	$39, $E8
0000A470 F805 0041 08               		dc.b $F8, 5, 0,	$41, 8
0000A475 0809 0045 00               		dc.b 8,	9, 0, $45, 0
0000A47A 1008 004B E8               		dc.b $10, 8, 0,	$4B, $E8
0000A47F 180C 004E F0               		dc.b $18, $C, 0, $4E, $F0
0000A484 04                         byte_A036:	dc.b 4
0000A485 E007 0052 F4               		dc.b $E0, 7, 0,	$52, $F4
0000A48A E003 0852 04               		dc.b $E0, 3, 8,	$52, 4
0000A48F 0007 005A F4               		dc.b 0,	7, 0, $5A, $F4
0000A494 0003 085A 04               		dc.b 0,	3, 8, $5A, 4
0000A499 08                         byte_A04B:	dc.b 8
0000A49A E00C 082C F0               		dc.b $E0, $C, 8, $2C, $F0
0000A49F E808 0830 00               		dc.b $E8, 8, 8,	$30, 0
0000A4A4 E809 0833 E8               		dc.b $E8, 9, 8,	$33, $E8
0000A4A9 F007 0839 08               		dc.b $F0, 7, 8,	$39, 8
0000A4AE F805 0841 E8               		dc.b $F8, 5, 8,	$41, $E8
0000A4B3 0809 0845 E8               		dc.b 8,	9, 8, $45, $E8
0000A4B8 1008 084B 00               		dc.b $10, 8, 8,	$4B, 0
0000A4BD 180C 084E F0               		dc.b $18, $C, 8, $4E, $F0
0000A4C2                            		even
0000A4C2                            		even
0000A4C2                            
0000A4C2                            ; ---------------------------------------------------------------------------
0000A4C2                            ; Sprite mappings - flash effect when you collect the giant ring
0000A4C2                            ; ---------------------------------------------------------------------------
0000A4C2                            Map_obj7C:
0000A4C2                            	include "_maps\obj7C.asm"
0000A4C2                            ; ---------------------------------------------------------------------------
0000A4C2                            ; Sprite mappings - flash effect when you collect the giant ring
0000A4C2                            ; ---------------------------------------------------------------------------
0000A4C2 0000 0000                  		dc.w byte_A084-Map_obj7C, byte_A08F-Map_obj7C
0000A4C6 0000 0000                  		dc.w byte_A0A4-Map_obj7C, byte_A0B9-Map_obj7C
0000A4CA 0000 0000                  		dc.w byte_A0CE-Map_obj7C, byte_A0E3-Map_obj7C
0000A4CE 0000 0000                  		dc.w byte_A0F8-Map_obj7C, byte_A103-Map_obj7C
0000A4D2 02                         byte_A084:	dc.b 2
0000A4D3 E00F 0000 00               		dc.b $E0, $F, 0, 0, 0
0000A4D8 000F 1000 00               		dc.b 0,	$F, $10, 0, 0
0000A4DD 04                         byte_A08F:	dc.b 4
0000A4DE E00F 0010 F0               		dc.b $E0, $F, 0, $10, $F0
0000A4E3 E007 0020 10               		dc.b $E0, 7, 0,	$20, $10
0000A4E8 000F 1010 F0               		dc.b 0,	$F, $10, $10, $F0
0000A4ED 0007 1020 10               		dc.b 0,	7, $10,	$20, $10
0000A4F2 04                         byte_A0A4:	dc.b 4
0000A4F3 E00F 0028 E8               		dc.b $E0, $F, 0, $28, $E8
0000A4F8 E00B 0038 08               		dc.b $E0, $B, 0, $38, 8
0000A4FD 000F 1028 E8               		dc.b 0,	$F, $10, $28, $E8
0000A502 000B 1038 08               		dc.b 0,	$B, $10, $38, 8
0000A507 04                         byte_A0B9:	dc.b 4
0000A508 E00F 0834 E0               		dc.b $E0, $F, 8, $34, $E0
0000A50D E00F 0034 00               		dc.b $E0, $F, 0, $34, 0
0000A512 000F 1834 E0               		dc.b 0,	$F, $18, $34, $E0
0000A517 000F 1034 00               		dc.b 0,	$F, $10, $34, 0
0000A51C 04                         byte_A0CE:	dc.b 4
0000A51D E00B 0838 E0               		dc.b $E0, $B, 8, $38, $E0
0000A522 E00F 0828 F8               		dc.b $E0, $F, 8, $28, $F8
0000A527 000B 1838 E0               		dc.b 0,	$B, $18, $38, $E0
0000A52C 000F 1828 F8               		dc.b 0,	$F, $18, $28, $F8
0000A531 04                         byte_A0E3:	dc.b 4
0000A532 E007 0820 E0               		dc.b $E0, 7, 8,	$20, $E0
0000A537 E00F 0810 F0               		dc.b $E0, $F, 8, $10, $F0
0000A53C 0007 1820 E0               		dc.b 0,	7, $18,	$20, $E0
0000A541 000F 1810 F0               		dc.b 0,	$F, $18, $10, $F0
0000A546 02                         byte_A0F8:	dc.b 2
0000A547 E00F 0800 E0               		dc.b $E0, $F, 8, 0, $E0
0000A54C 000F 1800 E0               		dc.b 0,	$F, $18, 0, $E0
0000A551 04                         byte_A103:	dc.b 4
0000A552 E00F 0044 E0               		dc.b $E0, $F, 0, $44, $E0
0000A557 E00F 0844 00               		dc.b $E0, $F, 8, $44, 0
0000A55C 000F 1044 E0               		dc.b 0,	$F, $10, $44, $E0
0000A561 000F 1844 00               		dc.b 0,	$F, $18, $44, 0
0000A566                            		even
0000A566                            		even
0000A566                            
0000A566                            ; ===========================================================================
0000A566                            ; ---------------------------------------------------------------------------
0000A566                            ; Object 26 - monitors
0000A566                            ; ---------------------------------------------------------------------------
0000A566                            
0000A566                            Obj26:					; XREF: Obj_Index
0000A566 7000                       		moveq	#0,d0
0000A568 1028 0024                  		move.b	$24(a0),d0
0000A56C 323B 0000                  		move.w	Obj26_Index(pc,d0.w),d1
0000A570 4EFB 1000                  		jmp	Obj26_Index(pc,d1.w)
0000A574                            ; ===========================================================================
0000A574 0000                       Obj26_Index:	dc.w Obj26_Main-Obj26_Index
0000A576 0000                       		dc.w Obj26_Solid-Obj26_Index
0000A578 0000                       		dc.w Obj26_BreakOpen-Obj26_Index
0000A57A 0000                       		dc.w Obj26_Animate-Obj26_Index
0000A57C 0000                       		dc.w Obj26_Display-Obj26_Index
0000A57E                            ; ===========================================================================
0000A57E                            
0000A57E                            Obj26_Main:				; XREF: Obj26_Index
0000A57E 5428 0024                  		addq.b	#2,$24(a0)
0000A582 117C 000E 0016             		move.b	#$E,$16(a0)
0000A588 117C 000E 0017             		move.b	#$E,$17(a0)
0000A58E 217C 0000 0000 0004        		move.l	#Map_obj26,4(a0)
0000A596 317C 0680 0002             		move.w	#$680,2(a0)
0000A59C 117C 0004 0001             		move.b	#4,1(a0)
0000A5A2 117C 0003 0018             		move.b	#3,$18(a0)
0000A5A8 117C 000F 0019             		move.b	#$F,$19(a0)
0000A5AE 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A5B2 7000                       		moveq	#0,d0
0000A5B4 1028 0023                  		move.b	$23(a0),d0
0000A5B8 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000A5BE 0832 0000 0002             		btst	#0,2(a2,d0.w)	; has monitor been broken?
0000A5C4 6700                       		beq.s	Obj26_NotBroken	; if not, branch
0000A5C6 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj26_Display" routine
0000A5CC 117C 000B 001A             		move.b	#$B,$1A(a0)	; use broken monitor frame
0000A5D2 4E75                       		rts	
0000A5D4                            ; ===========================================================================
0000A5D4                            
0000A5D4                            Obj26_NotBroken:			; XREF: Obj26_Main
0000A5D4 117C 0046 0020             		move.b	#$46,$20(a0)
0000A5DA 1168 0028 001C             		move.b	$28(a0),$1C(a0)
0000A5E0                            
0000A5E0                            Obj26_Solid:				; XREF: Obj26_Index
0000A5E0 1028 0025                  		move.b	$25(a0),d0	; is monitor set to fall?
0000A5E4 6700                       		beq.s	loc_A1EC	; if not, branch
0000A5E6 5500                       		subq.b	#2,d0
0000A5E8 6600                       		bne.s	Obj26_Fall
0000A5EA 7200                       		moveq	#0,d1
0000A5EC 1228 0019                  		move.b	$19(a0),d1
0000A5F0 0641 000B                  		addi.w	#$B,d1
0000A5F4 6100 D41C                  		bsr.w	ExitPlatform
0000A5F8 0829 0003 0022             		btst	#3,$22(a1)
0000A5FE 6600 0000                  		bne.w	loc_A1BC
0000A602 4228 0025                  		clr.b	$25(a0)
0000A606 6000 0000                  		bra.w	Obj26_Animate
0000A60A                            ; ===========================================================================
0000A60A                            
0000A60A                            loc_A1BC:				; XREF: Obj26_Solid
0000A60A 363C 0010                  		move.w	#$10,d3
0000A60E 3428 0008                  		move.w	8(a0),d2
0000A612 6100 D95C                  		bsr.w	MvSonicOnPtfm
0000A616 6000 0000                  		bra.w	Obj26_Animate
0000A61A                            ; ===========================================================================
0000A61A                            
0000A61A                            Obj26_Fall:				; XREF: Obj26_Solid
0000A61A 6100 0000                  		bsr.w	ObjectFall
0000A61E 4EB9 0000 0000             		jsr	ObjHitFloor
0000A624 4A41                       		tst.w	d1
0000A626 6A00 0000                  		bpl.w	Obj26_Animate
0000A62A D368 000C                  		add.w	d1,$C(a0)
0000A62E 4268 0012                  		clr.w	$12(a0)
0000A632 4228 0025                  		clr.b	$25(a0)
0000A636 6000 0000                  		bra.w	Obj26_Animate
0000A63A                            ; ===========================================================================
0000A63A                            
0000A63A                            loc_A1EC:				; XREF: Obj26_Solid
0000A63A 323C 001A                  		move.w	#$1A,d1
0000A63E 343C 000F                  		move.w	#$F,d2
0000A642 6100 0000                  		bsr.w	Obj26_SolidSides
0000A646 6700 0000                  		beq.w	loc_A25C
0000A64A 4A69 0012                  		tst.w	$12(a1)
0000A64E 6B00                       		bmi.s	loc_A20A
0000A650 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000A656 6700                       		beq.s	loc_A25C	; if yes, branch
0000A658                            
0000A658                            loc_A20A:
0000A658 4A41                       		tst.w	d1
0000A65A 6A00                       		bpl.s	loc_A220
0000A65C 9769 000C                  		sub.w	d3,$C(a1)
0000A660 6100 D29E                  		bsr.w	loc_74AE
0000A664 117C 0002 0025             		move.b	#2,$25(a0)
0000A66A 6000 0000                  		bra.w	Obj26_Animate
0000A66E                            ; ===========================================================================
0000A66E                            
0000A66E                            loc_A220:
0000A66E 4A40                       		tst.w	d0
0000A670 6700 0000                  		beq.w	loc_A246
0000A674 6B00                       		bmi.s	loc_A230
0000A676 4A69 0010                  		tst.w	$10(a1)
0000A67A 6B00                       		bmi.s	loc_A246
0000A67C 6000                       		bra.s	loc_A236
0000A67E                            ; ===========================================================================
0000A67E                            
0000A67E                            loc_A230:
0000A67E 4A69 0010                  		tst.w	$10(a1)
0000A682 6A00                       		bpl.s	loc_A246
0000A684                            
0000A684                            loc_A236:
0000A684 9169 0008                  		sub.w	d0,8(a1)
0000A688 337C 0000 0014             		move.w	#0,$14(a1)
0000A68E 337C 0000 0010             		move.w	#0,$10(a1)
0000A694                            
0000A694                            loc_A246:
0000A694 0829 0001 0022             		btst	#1,$22(a1)
0000A69A 6600                       		bne.s	loc_A26A
0000A69C 08E9 0005 0022             		bset	#5,$22(a1)
0000A6A2 08E8 0005 0022             		bset	#5,$22(a0)
0000A6A8 6000                       		bra.s	Obj26_Animate
0000A6AA                            ; ===========================================================================
0000A6AA                            
0000A6AA                            loc_A25C:
0000A6AA 0828 0005 0022             		btst	#5,$22(a0)
0000A6B0 6700                       		beq.s	Obj26_Animate
0000A6B2 337C 0001 001C             		move.w	#1,$1C(a1)
0000A6B8                            
0000A6B8                            loc_A26A:
0000A6B8 08A8 0005 0022             		bclr	#5,$22(a0)
0000A6BE 08A9 0005 0022             		bclr	#5,$22(a1)
0000A6C4                            
0000A6C4                            Obj26_Animate:				; XREF: Obj26_Index
0000A6C4 43F9 0000 0000             		lea	(Ani_obj26).l,a1
0000A6CA 6100 0000                  		bsr.w	AnimateSprite
0000A6CE                            
0000A6CE                            Obj26_Display:				; XREF: Obj26_Index
0000A6CE 6100 0000                  		bsr.w	DisplaySprite
0000A6D2 3028 0008                  		move.w	8(a0),d0
0000A6D6 0240 FF80                  		andi.w	#$FF80,d0
0000A6DA 3238 F700                  		move.w	($FFFFF700).w,d1
0000A6DE 0441 0080                  		subi.w	#$80,d1
0000A6E2 0241 FF80                  		andi.w	#$FF80,d1
0000A6E6 9041                       		sub.w	d1,d0
0000A6E8 0C40 0280                  		cmpi.w	#$280,d0
0000A6EC 6200 0000                  		bhi.w	DeleteObject
0000A6F0 4E75                       		rts	
0000A6F2                            ; ===========================================================================
0000A6F2                            
0000A6F2                            Obj26_BreakOpen:			; XREF: Obj26_Index
0000A6F2 5428 0024                  		addq.b	#2,$24(a0)
0000A6F6 117C 0000 0020             		move.b	#0,$20(a0)
0000A6FC 6100 0000                  		bsr.w	SingleObjLoad
0000A700 6600                       		bne.s	Obj26_Explode
0000A702 12BC 002E                  		move.b	#$2E,0(a1)	; load monitor contents	object
0000A706 3368 0008 0008             		move.w	8(a0),8(a1)
0000A70C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A712 1368 001C 001C             		move.b	$1C(a0),$1C(a1)
0000A718 7400                       		moveq	#0,d2	; GMZ
0000A71A 7205                       		moveq	#5,d1	; GMZ: Amount of explosion objects
0000A71C                            
0000A71C                            Obj26_Explode:
0000A71C 6100 0000                  		bsr.w	SingleObjLoad
0000A720 6600                       		bne.s	Obj26_SetBroken
0000A722 12BC 0027                  		move.b	#$27,0(a1)	; GMZ: Load explosion object
0000A726 5429 0024                  		addq.b	#2,$24(a1)
0000A72A 1342 0028                  		move.b	d2,$28(a1)	; GMZ: Set subtype
0000A72E 3368 0008 0008             		move.w	8(a0),8(a1)
0000A734 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A73A                            
0000A73A                            Obj26_NextExplosion:
0000A73A 5802                       		addq.b	#4,d2
0000A73C 51C9 FFDE                  		dbf	d1,Obj26_Explode
0000A740                            
0000A740                            Obj26_SetBroken:
0000A740 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A744 7000                       		moveq	#0,d0
0000A746 1028 0023                  		move.b	$23(a0),d0
0000A74A 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000A750 117C 0009 001C             		move.b	#9,$1C(a0)	; set monitor type to broken
0000A756 6000 0000                  		bra.w	DisplaySprite
0000A75A                            ; ===========================================================================
0000A75A                            ; ---------------------------------------------------------------------------
0000A75A                            ; Object 2E - contents of monitors
0000A75A                            ; ---------------------------------------------------------------------------
0000A75A                            
0000A75A                            Obj2E:					; XREF: Obj_Index
0000A75A 7000                       		moveq	#0,d0
0000A75C 1028 0024                  		move.b	$24(a0),d0
0000A760 323B 0000                  		move.w	Obj2E_Index(pc,d0.w),d1
0000A764 4EBB 1000                  		jsr	Obj2E_Index(pc,d1.w)
0000A768 6000 0000                  		bra.w	DisplaySprite
0000A76C                            ; ===========================================================================
0000A76C 0000                       Obj2E_Index:	dc.w Obj2E_Main-Obj2E_Index
0000A76E 0000                       		dc.w Obj2E_Move-Obj2E_Index
0000A770 0000                       		dc.w Obj2E_Delete-Obj2E_Index
0000A772                            ; ===========================================================================
0000A772                            
0000A772                            Obj2E_Main:				; XREF: Obj2E_Index
0000A772 5428 0024                  		addq.b	#2,$24(a0)
0000A776 317C 0680 0002             		move.w	#$680,2(a0)
0000A77C 117C 0024 0001             		move.b	#$24,1(a0)
0000A782 117C 0003 0018             		move.b	#3,$18(a0)
0000A788 117C 0008 0019             		move.b	#8,$19(a0)
0000A78E 317C FD00 0012             		move.w	#-$300,$12(a0)
0000A794 7000                       		moveq	#0,d0
0000A796 1028 001C                  		move.b	$1C(a0),d0
0000A79A 5400                       		addq.b	#2,d0
0000A79C 1140 001A                  		move.b	d0,$1A(a0)
0000A7A0 227C 0000 0000             		movea.l	#Map_obj26,a1
0000A7A6 D000                       		add.b	d0,d0
0000A7A8 D2F1 0000                  		adda.w	(a1,d0.w),a1
0000A7AC 5249                       		addq.w	#1,a1
0000A7AE 2149 0004                  		move.l	a1,4(a0)
0000A7B2                            
0000A7B2                            Obj2E_Move:				; XREF: Obj2E_Index
0000A7B2 4A68 0012                  		tst.w	$12(a0)		; is object moving?
0000A7B6 6A00 0000                  		bpl.w	Obj2E_ChkEggman	; if not, branch
0000A7BA 6100 0000                  		bsr.w	SpeedToPos
0000A7BE 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
0000A7C4 4E75                       		rts	
0000A7C6                            ; ===========================================================================
0000A7C6                            
0000A7C6                            Obj2E_ChkEggman:			; XREF: Obj2E_Move
0000A7C6 5428 0024                  		addq.b	#2,$24(a0)
0000A7CA 317C 001D 001E             		move.w	#29,$1E(a0)
0000A7D0 1028 001C                  		move.b	$1C(a0),d0
0000A7D4 0C00 0001                  		cmpi.b	#1,d0		; does monitor contain Eggman?
0000A7D8 6600                       		bne.s	Obj2E_ChkSonic
0000A7DA 4E75                       		rts			; Eggman monitor does nothing
0000A7DC                            ; ===========================================================================
0000A7DC                            
0000A7DC                            Obj2E_ChkSonic:
0000A7DC 0C00 0002                  		cmpi.b	#2,d0		; does monitor contain Sonic?
0000A7E0 6600                       		bne.s	Obj2E_ChkShoes
0000A7E2                            
0000A7E2                            ExtraLife:
0000A7E2 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000A7E6 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000A7EA 303C 0088                  		move.w	#$88,d0
0000A7EE 4EF9 0000 15B6             		jmp	(PlaySound).l	; play extra life music
0000A7F4                            ; ===========================================================================
0000A7F4                            
0000A7F4                            Obj2E_ChkShoes:
0000A7F4 0C00 0003                  		cmpi.b	#3,d0		; does monitor contain speed shoes?
0000A7F8 6600                       		bne.s	Obj2E_ChkShield
0000A7FA 11FC 0001 FE2E             		move.b	#1,($FFFFFE2E).w ; speed up the	BG music
0000A800 31FC 04B0 D034             		move.w	#$4B0,($FFFFD034).w ; time limit for the power-up
0000A806 31FC 0C00 F760             		move.w	#$C00,($FFFFF760).w ; change Sonic's top speed
0000A80C 31FC 0018 F762             		move.w	#$18,($FFFFF762).w
0000A812 31FC 0080 F764             		move.w	#$80,($FFFFF764).w
0000A818 303C 00E2                  		move.w	#$E2,d0
0000A81C 4EF9 0000 15B6             		jmp	(PlaySound).l	; Speed	up the music
0000A822                            ; ===========================================================================
0000A822                            
0000A822                            Obj2E_ChkShield:
0000A822 0C00 0004                  		cmpi.b	#4,d0		; does monitor contain a shield?
0000A826 6600                       		bne.s	Obj2E_ChkInvinc
0000A828 11FC 0001 FE2C             		move.b	#1,($FFFFFE2C).w ; give	Sonic a	shield
0000A82E 11FC 0038 D180             		move.b	#$38,($FFFFD180).w ; load shield object	($38)
0000A834 303C 00AF                  		move.w	#$AF,d0
0000A838 4EF9 0000 15B6             		jmp	(PlaySound).l	; play shield sound
0000A83E                            ; ===========================================================================
0000A83E                            
0000A83E                            Obj2E_ChkInvinc:
0000A83E 0C00 0005                  		cmpi.b	#5,d0		; does monitor contain invincibility?
0000A842 6600                       		bne.s	Obj2E_ChkRings
0000A844 11FC 0001 FE2D             		move.b	#1,($FFFFFE2D).w ; make	Sonic invincible
0000A84A 31FC 04B0 D032             		move.w	#$4B0,($FFFFD032).w ; time limit for the power-up
0000A850 11FC 0038 D200             		move.b	#$38,($FFFFD200).w ; load stars	object ($3801)
0000A856 11FC 0001 D21C             		move.b	#1,($FFFFD21C).w
0000A85C 11FC 0038 D240             		move.b	#$38,($FFFFD240).w ; load stars	object ($3802)
0000A862 11FC 0002 D25C             		move.b	#2,($FFFFD25C).w
0000A868 11FC 0038 D280             		move.b	#$38,($FFFFD280).w ; load stars	object ($3803)
0000A86E 11FC 0003 D29C             		move.b	#3,($FFFFD29C).w
0000A874 11FC 0038 D2C0             		move.b	#$38,($FFFFD2C0).w ; load stars	object ($3804)
0000A87A 11FC 0004 D2DC             		move.b	#4,($FFFFD2DC).w
0000A880 4A38 F7AA                  		tst.b	($FFFFF7AA).w	; is boss mode on?
0000A884 6600                       		bne.s	Obj2E_NoMusic	; if yes, branch
0000A886 303C 0087                  		move.w	#$87,d0
0000A88A 4EF9 0000 15B6             		jmp	(PlaySound).l	; play invincibility music
0000A890                            ; ===========================================================================
0000A890                            
0000A890                            Obj2E_NoMusic:
0000A890 4E75                       		rts	
0000A892                            ; ===========================================================================
0000A892                            
0000A892                            Obj2E_ChkRings:
0000A892 0C00 0006                  		cmpi.b	#6,d0		; does monitor contain 10 rings?
0000A896 6600                       		bne.s	Obj2E_ChkS
0000A898 0678 000A FE20             		addi.w	#$A,($FFFFFE20).w ; add	10 rings to the	number of rings	you have
0000A89E 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the ring counter
0000A8A4 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; check if you have 100 rings
0000A8AA 6500                       		bcs.s	Obj2E_RingSound
0000A8AC 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w
0000A8B2 6700 FF2E                  		beq.w	ExtraLife
0000A8B6 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; check if you have 200 rings
0000A8BC 6500                       		bcs.s	Obj2E_RingSound
0000A8BE 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w
0000A8C4 6700 FF1C                  		beq.w	ExtraLife
0000A8C8                            
0000A8C8                            Obj2E_RingSound:
0000A8C8 303C 00B5                  		move.w	#$B5,d0
0000A8CC 4EF9 0000 15B6             		jmp	(PlaySound).l	; play ring sound
0000A8D2                            ; ===========================================================================
0000A8D2                            
0000A8D2                            Obj2E_ChkS:
0000A8D2 0C00 0007                  		cmpi.b	#7,d0		; does monitor contain 'S'
0000A8D6 6600                       		bne.s	Obj2E_ChkEnd
0000A8D8                            		; nop	
0000A8D8 7201                       		moveq	#1,d1
0000A8DA B338 FE2F                  		eor.b	d1,($FFFFFE2F).w	; GMZ: Set reverse controls flag when broken, revert when another monitor of same type is broken again
0000A8DE                            
0000A8DE                            Obj2E_ChkEnd:
0000A8DE 4E75                       		rts			; 'S' and goggles monitors do nothing
0000A8E0                            ; ===========================================================================
0000A8E0                            
0000A8E0                            Obj2E_Delete:				; XREF: Obj2E_Index
0000A8E0 5368 001E                  		subq.w	#1,$1E(a0)
0000A8E4 6B00 0000                  		bmi.w	DeleteObject
0000A8E8 4E75                       		rts	
0000A8EA                            ; ---------------------------------------------------------------------------
0000A8EA                            ; Subroutine to	make the sides of a monitor solid
0000A8EA                            ; ---------------------------------------------------------------------------
0000A8EA                            
0000A8EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A8EA                            
0000A8EA                            
0000A8EA                            Obj26_SolidSides:			; XREF: loc_A1EC
0000A8EA 43F8 D000                  		lea	($FFFFD000).w,a1
0000A8EE 3029 0008                  		move.w	8(a1),d0
0000A8F2 9068 0008                  		sub.w	8(a0),d0
0000A8F6 D041                       		add.w	d1,d0
0000A8F8 6B00                       		bmi.s	loc_A4E6
0000A8FA 3601                       		move.w	d1,d3
0000A8FC D643                       		add.w	d3,d3
0000A8FE B043                       		cmp.w	d3,d0
0000A900 6200                       		bhi.s	loc_A4E6
0000A902 1629 0016                  		move.b	$16(a1),d3
0000A906 4883                       		ext.w	d3
0000A908 D443                       		add.w	d3,d2
0000A90A 3629 000C                  		move.w	$C(a1),d3
0000A90E 9668 000C                  		sub.w	$C(a0),d3
0000A912 D642                       		add.w	d2,d3
0000A914 6B00                       		bmi.s	loc_A4E6
0000A916 D442                       		add.w	d2,d2
0000A918 B642                       		cmp.w	d2,d3
0000A91A 6400                       		bcc.s	loc_A4E6
0000A91C 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000A920 6B00                       		bmi.s	loc_A4E6
0000A922 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000A928 6400                       		bcc.s	loc_A4E6
0000A92A 4A78 FE08                  		tst.w	($FFFFFE08).w
0000A92E 6600                       		bne.s	loc_A4E6
0000A930 B240                       		cmp.w	d0,d1
0000A932 6400                       		bcc.s	loc_A4DC
0000A934 D241                       		add.w	d1,d1
0000A936 9041                       		sub.w	d1,d0
0000A938                            
0000A938                            loc_A4DC:
0000A938 0C43 0010                  		cmpi.w	#$10,d3
0000A93C 6500                       		bcs.s	loc_A4EA
0000A93E                            
0000A93E                            loc_A4E2:
0000A93E 7201                       		moveq	#1,d1
0000A940 4E75                       		rts	
0000A942                            ; ===========================================================================
0000A942                            
0000A942                            loc_A4E6:
0000A942 7200                       		moveq	#0,d1
0000A944 4E75                       		rts	
0000A946                            ; ===========================================================================
0000A946                            
0000A946                            loc_A4EA:
0000A946 7200                       		moveq	#0,d1
0000A948 1228 0019                  		move.b	$19(a0),d1
0000A94C 5841                       		addq.w	#4,d1
0000A94E 3401                       		move.w	d1,d2
0000A950 D442                       		add.w	d2,d2
0000A952 D269 0008                  		add.w	8(a1),d1
0000A956 9268 0008                  		sub.w	8(a0),d1
0000A95A 6BE2                       		bmi.s	loc_A4E2
0000A95C B242                       		cmp.w	d2,d1
0000A95E 64DE                       		bcc.s	loc_A4E2
0000A960 72FF                       		moveq	#-1,d1
0000A962 4E75                       		rts	
0000A964                            ; End of function Obj26_SolidSides
0000A964                            
0000A964                            ; ===========================================================================
0000A964                            Ani_obj26:
0000A964                            	include "_anim\obj26.asm"
0000A964                            ; ---------------------------------------------------------------------------
0000A964                            ; Animation script - monitors
0000A964                            ; ---------------------------------------------------------------------------
0000A964 0000 0000 0000             		dc.w byte_A51C-Ani_obj26, byte_A522-Ani_obj26, byte_A52E-Ani_obj26
0000A96A 0000 0000 0000             		dc.w byte_A53A-Ani_obj26, byte_A546-Ani_obj26, byte_A552-Ani_obj26
0000A970 0000 0000 0000             		dc.w byte_A55E-Ani_obj26, byte_A56A-Ani_obj26, byte_A576-Ani_obj26
0000A976 0000                       		dc.w byte_A582-Ani_obj26
0000A978 0100 0102 FF00             byte_A51C:	dc.b 1,	0, 1, 2, $FF, 0
0000A97E 0100 0303 0103 0302 0303+  byte_A522:	dc.b 1,	0, 3, 3, 1, 3, 3, 2, 3,	3, $FF,	0
0000A98A 0100 0404 0104 0402 0404+  byte_A52E:	dc.b 1,	0, 4, 4, 1, 4, 4, 2, 4,	4, $FF,	0
0000A996 0100 0505 0105 0502 0505+  byte_A53A:	dc.b 1,	0, 5, 5, 1, 5, 5, 2, 5,	5, $FF,	0
0000A9A2 0100 0606 0106 0602 0606+  byte_A546:	dc.b 1,	0, 6, 6, 1, 6, 6, 2, 6,	6, $FF,	0
0000A9AE 0100 0707 0107 0702 0707+  byte_A552:	dc.b 1,	0, 7, 7, 1, 7, 7, 2, 7,	7, $FF,	0
0000A9BA 0100 0808 0108 0802 0808+  byte_A55E:	dc.b 1,	0, 8, 8, 1, 8, 8, 2, 8,	8, $FF,	0
0000A9C6 0100 0909 0109 0902 0909+  byte_A56A:	dc.b 1,	0, 9, 9, 1, 9, 9, 2, 9,	9, $FF,	0
0000A9D2 0100 0A0A 010A 0A02 0A0A+  byte_A576:	dc.b 1,	0, $A, $A, 1, $A, $A, 2, $A, $A, $FF, 0
0000A9DE 0200 0102 0BFE 0100        byte_A582:	dc.b 2,	0, 1, 2, $B, $FE, 1, 0
0000A9E6                            		even
0000A9E6                            		even
0000A9E6                            
0000A9E6                            ; ---------------------------------------------------------------------------
0000A9E6                            ; Sprite mappings - monitors
0000A9E6                            ; ---------------------------------------------------------------------------
0000A9E6                            Map_obj26:
0000A9E6                            	include "_maps\obj26.asm"
0000A9E6                            ; ================================================================================
0000A9E6                            ; Sprite Mappings - generated by Flex 2 Sat Mar 22 2025 11:29:00 GMT-0500 (Central Daylight Time)
0000A9E6                            ; ================================================================================
0000A9E6                            
0000A9E6                            DATAY1U343IF3L:
0000A9E6 0000 0000                  	dc.w DATAY1U343IF3L_0-DATAY1U343IF3L, DATAY1U343IF3L_1-DATAY1U343IF3L
0000A9EA 0000 0000                  	dc.w DATAY1U343IF3L_2-DATAY1U343IF3L, DATAY1U343IF3L_3-DATAY1U343IF3L
0000A9EE 0000 0000                  	dc.w DATAY1U343IF3L_4-DATAY1U343IF3L, DATAY1U343IF3L_5-DATAY1U343IF3L
0000A9F2 0000 0000                  	dc.w DATAY1U343IF3L_6-DATAY1U343IF3L, DATAY1U343IF3L_7-DATAY1U343IF3L
0000A9F6 0000 0000                  	dc.w DATAY1U343IF3L_8-DATAY1U343IF3L, DATAY1U343IF3L_9-DATAY1U343IF3L
0000A9FA 0000 0000                  	dc.w DATAY1U343IF3L_A-DATAY1U343IF3L, DATAY1U343IF3L_B-DATAY1U343IF3L
0000A9FE 05                         DATAY1U343IF3L_0: dc.b $5
0000A9FF E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AA04 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AA09 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AA0E 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AA13 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AA18 06                         DATAY1U343IF3L_1: dc.b $6
0000AA19 F205 0023 F8               	dc.b $F2, $5, $0, $23, $F8
0000AA1E E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AA23 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AA28 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AA2D 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AA32 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AA37 05                         DATAY1U343IF3L_2: dc.b $5
0000AA38 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AA3D 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AA42 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AA47 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AA4C 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AA51 05                         DATAY1U343IF3L_3: dc.b $5
0000AA52 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AA57 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AA5C E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AA61 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AA66 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AA6B 06                         DATAY1U343IF3L_4: dc.b $6
0000AA6C F205 0027 F8               	dc.b $F2, $5, $0, $27, $F8
0000AA71 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AA76 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AA7B E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AA80 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AA85 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AA8A 06                         DATAY1U343IF3L_5: dc.b $6
0000AA8B F205 002B F8               	dc.b $F2, $5, $0, $2B, $F8
0000AA90 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AA95 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AA9A E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AA9F 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AAA4 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AAA9 06                         DATAY1U343IF3L_6: dc.b $6
0000AAAA F205 002F F8               	dc.b $F2, $5, $0, $2F, $F8
0000AAAF E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AAB4 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AAB9 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AABE 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AAC3 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AAC8 06                         DATAY1U343IF3L_7: dc.b $6
0000AAC9 F205 0033 F8               	dc.b $F2, $5, $0, $33, $F8
0000AACE E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AAD3 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AAD8 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AADD 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AAE2 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AAE7 06                         DATAY1U343IF3L_8: dc.b $6
0000AAE8 F205 0037 F8               	dc.b $F2, $5, $0, $37, $F8
0000AAED E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AAF2 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AAF7 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AAFC 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AB01 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AB06 06                         DATAY1U343IF3L_9: dc.b $6
0000AB07 F205 003B F8               	dc.b $F2, $5, $0, $3B, $F8
0000AB0C E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AB11 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AB16 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AB1B 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AB20 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AB25 05                         DATAY1U343IF3L_A: dc.b $5
0000AB26 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AB2B 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AB30 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AB35 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AB3A 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AB3F 01                         DATAY1U343IF3L_B: dc.b $1
0000AB40 FF0D 003F F0               	dc.b $FF, $D, $0, $3F, $F0
0000AB46 00                         	even
0000AB46 00                         	even
0000AB46                            
0000AB46                            ; ===========================================================================
0000AB46                            ; ---------------------------------------------------------------------------
0000AB46                            ; Object 0E - Sonic on the title screen
0000AB46                            ; ---------------------------------------------------------------------------
0000AB46                            
0000AB46                            Obj0E:					; XREF: Obj_Index
0000AB46 7000                       		moveq	#0,d0
0000AB48 1028 0024                  		move.b	$24(a0),d0
0000AB4C 323B 0000                  		move.w	Obj0E_Index(pc,d0.w),d1
0000AB50 4EFB 1000                  		jmp	Obj0E_Index(pc,d1.w)
0000AB54                            ; ===========================================================================
0000AB54 0000                       Obj0E_Index:	dc.w Obj0E_Main-Obj0E_Index
0000AB56 0000                       		dc.w Obj0E_Delay-Obj0E_Index
0000AB58 0000                       		dc.w Obj0E_Move-Obj0E_Index
0000AB5A 0000                       		dc.w Obj0E_Animate-Obj0E_Index
0000AB5C                            ; ===========================================================================
0000AB5C                            
0000AB5C                            Obj0E_Main:				; XREF: Obj0E_Index
0000AB5C 5428 0024                  		addq.b	#2,$24(a0)
0000AB60 317C 00F0 0008             		move.w	#$F0,8(a0)
0000AB66 317C 00DE 000A             		move.w	#$DE,$A(a0)
0000AB6C 217C 0000 0000 0004        		move.l	#Map_obj0E,4(a0)
0000AB74 317C 2300 0002             		move.w	#$2300,2(a0)
0000AB7A 117C 0001 0018             		move.b	#1,$18(a0)
0000AB80 117C 001D 001F             		move.b	#29,$1F(a0)	; set time delay to 0.5	seconds
0000AB86 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000AB8C 6100 0000                  		bsr.w	AnimateSprite
0000AB90                            
0000AB90                            Obj0E_Delay:				; XREF: Obj0E_Index
0000AB90 5328 001F                  		subq.b	#1,$1F(a0)	; subtract 1 from time delay
0000AB94 6A00                       		bpl.s	Obj0E_Wait	; if time remains, branch
0000AB96 5428 0024                  		addq.b	#2,$24(a0)	; go to	next routine
0000AB9A 6000 0000                  		bra.w	DisplaySprite
0000AB9E                            ; ===========================================================================
0000AB9E                            
0000AB9E                            Obj0E_Wait:				; XREF: Obj0E_Delay
0000AB9E 4E75                       		rts	
0000ABA0                            ; ===========================================================================
0000ABA0                            
0000ABA0                            Obj0E_Move:				; XREF: Obj0E_Index
0000ABA0 5168 000A                  		subq.w	#8,$A(a0)
0000ABA4 0C68 0096 000A             		cmpi.w	#$96,$A(a0)
0000ABAA 6600                       		bne.s	Obj0E_Display
0000ABAC 5428 0024                  		addq.b	#2,$24(a0)
0000ABB0                            
0000ABB0                            Obj0E_Display:
0000ABB0 6000 0000                  		bra.w	DisplaySprite
0000ABB4                            ; ===========================================================================
0000ABB4 4E75                       		rts	
0000ABB6                            ; ===========================================================================
0000ABB6                            
0000ABB6                            Obj0E_Animate:				; XREF: Obj0E_Index
0000ABB6 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000ABBC 6100 0000                  		bsr.w	AnimateSprite
0000ABC0 6000 0000                  		bra.w	DisplaySprite
0000ABC4                            ; ===========================================================================
0000ABC4 4E75                       		rts	
0000ABC6                            ; ===========================================================================
0000ABC6                            ; ---------------------------------------------------------------------------
0000ABC6                            ; Object 0F - "PRESS START BUTTON" and "TM" from title screen
0000ABC6                            ; ---------------------------------------------------------------------------
0000ABC6                            
0000ABC6                            Obj0F:					; XREF: Obj_Index
0000ABC6 7000                       		moveq	#0,d0
0000ABC8 1028 0024                  		move.b	$24(a0),d0
0000ABCC 323B 0000                  		move.w	Obj0F_Index(pc,d0.w),d1
0000ABD0 4EBB 1000                  		jsr	Obj0F_Index(pc,d1.w)
0000ABD4 6000 0000                  		bra.w	DisplaySprite
0000ABD8                            ; ===========================================================================
0000ABD8 0000                       Obj0F_Index:	dc.w Obj0F_Main-Obj0F_Index
0000ABDA 0000                       		dc.w Obj0F_PrsStart-Obj0F_Index
0000ABDC 0000                       		dc.w locret_A6F8-Obj0F_Index
0000ABDE                            ; ===========================================================================
0000ABDE                            
0000ABDE                            Obj0F_Main:				; XREF: Obj0F_Index
0000ABDE 5428 0024                  		addq.b	#2,$24(a0)
0000ABE2 317C 00D0 0008             		move.w	#$D0,8(a0)
0000ABE8 317C 0130 000A             		move.w	#$130,$A(a0)
0000ABEE 217C 0000 0000 0004        		move.l	#Map_obj0F,4(a0)
0000ABF6 317C 0200 0002             		move.w	#$200,2(a0)
0000ABFC 0C28 0002 001A             		cmpi.b	#2,$1A(a0)	; is object "PRESS START"?
0000AC02 6500                       		bcs.s	Obj0F_PrsStart	; if yes, branch
0000AC04 5428 0024                  		addq.b	#2,$24(a0)
0000AC08 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is the object	"TM"?
0000AC0E 6600                       		bne.s	locret_A6F8	; if not, branch
0000AC10 317C 2510 0002             		move.w	#$2510,2(a0)	; "TM" specific	code
0000AC16 317C 0170 0008             		move.w	#$170,8(a0)
0000AC1C 317C 00F8 000A             		move.w	#$F8,$A(a0)
0000AC22                            
0000AC22                            locret_A6F8:				; XREF: Obj0F_Index
0000AC22 4E75                       		rts	
0000AC24                            ; ===========================================================================
0000AC24                            
0000AC24                            Obj0F_PrsStart:				; XREF: Obj0F_Index
0000AC24 43F9 0000 0000             		lea	(Ani_obj0F).l,a1
0000AC2A 6000 0000                  		bra.w	AnimateSprite
0000AC2E                            ; ===========================================================================
0000AC2E                            Ani_obj0E:
0000AC2E                            	include "_anim\obj0E.asm"
0000AC2E                            ; ---------------------------------------------------------------------------
0000AC2E                            ; Animation script - Sonic on the title screen
0000AC2E                            ; ---------------------------------------------------------------------------
0000AC2E 0000                       		dc.w byte_A706-Ani_obj0E
0000AC30 0700 0102 0304 0506 07FE+  byte_A706:	dc.b 7,	0, 1, 2, 3, 4, 5, 6, 7,	$FE, 2,	0
0000AC3C                            		even
0000AC3C                            		even
0000AC3C                            
0000AC3C                            Ani_obj0F:
0000AC3C                            	include "_anim\obj0F.asm"
0000AC3C                            ; ---------------------------------------------------------------------------
0000AC3C                            ; Animation script - "TM" and "PRESS START BUTTON" on the title screen
0000AC3C                            ; ---------------------------------------------------------------------------
0000AC3C 0000                       		dc.w byte_A714-Ani_obj0F
0000AC3E 1F00 01FF                  byte_A714:	dc.b $1F, 0, 1,	$FF
0000AC42                            		even
0000AC42                            		even
0000AC42                            
0000AC42                            ; ---------------------------------------------------------------------------
0000AC42                            ; Subroutine to	animate	a sprite using an animation script
0000AC42                            ; ---------------------------------------------------------------------------
0000AC42                            
0000AC42                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AC42                            
0000AC42                            
0000AC42                            AnimateSprite:
0000AC42 7000                       		moveq	#0,d0
0000AC44 1028 001C                  		move.b	$1C(a0),d0	; move animation number	to d0
0000AC48 B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
0000AC4C 6700                       		beq.s	Anim_Run	; if not, branch
0000AC4E 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
0000AC52 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000AC58 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
0000AC5E                            
0000AC5E                            Anim_Run:
0000AC5E 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000AC62 6A00                       		bpl.s	Anim_Wait	; if time remains, branch
0000AC64 D040                       		add.w	d0,d0
0000AC66 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0000AC6A 1151 001E                  		move.b	(a1),$1E(a0)	; load frame duration
0000AC6E 7200                       		moveq	#0,d1
0000AC70 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
0000AC74 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0000AC78 6B00                       		bmi.s	Anim_End_FF	; if animation is complete, branch
0000AC7A                            
0000AC7A                            Anim_Next:
0000AC7A 1200                       		move.b	d0,d1
0000AC7C 0200 001F                  		andi.b	#$1F,d0
0000AC80 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
0000AC84 1028 0022                  		move.b	$22(a0),d0
0000AC88 E719                       		rol.b	#3,d1
0000AC8A B101                       		eor.b	d0,d1
0000AC8C 0201 0003                  		andi.b	#3,d1
0000AC90 0228 00FC 0001             		andi.b	#$FC,1(a0)
0000AC96 8328 0001                  		or.b	d1,1(a0)
0000AC9A 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
0000AC9E                            
0000AC9E                            Anim_Wait:
0000AC9E 4E75                       		rts	
0000ACA0                            ; ===========================================================================
0000ACA0                            
0000ACA0                            Anim_End_FF:
0000ACA0 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0000ACA2 6600                       		bne.s	Anim_End_FE	; if not, branch
0000ACA4 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
0000ACAA 1029 0001                  		move.b	1(a1),d0	; read sprite number
0000ACAE 60CA                       		bra.s	Anim_Next
0000ACB0                            ; ===========================================================================
0000ACB0                            
0000ACB0                            Anim_End_FE:
0000ACB0 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0000ACB2 6600                       		bne.s	Anim_End_FD	; if not, branch
0000ACB4 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0000ACB8 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
0000ACBC 9200                       		sub.b	d0,d1
0000ACBE 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0000ACC2 60B6                       		bra.s	Anim_Next
0000ACC4                            ; ===========================================================================
0000ACC4                            
0000ACC4                            Anim_End_FD:
0000ACC4 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0000ACC6 6600                       		bne.s	Anim_End_FC	; if not, branch
0000ACC8 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
0000ACCE                            
0000ACCE                            Anim_End_FC:
0000ACCE 5200                       		addq.b	#1,d0		; is the end flag = $FC	?
0000ACD0 6600                       		bne.s	Anim_End_FB	; if not, branch
0000ACD2 5428 0024                  		addq.b	#2,$24(a0)	; jump to next routine
0000ACD6                            
0000ACD6                            Anim_End_FB:
0000ACD6 5200                       		addq.b	#1,d0		; is the end flag = $FB	?
0000ACD8 6600                       		bne.s	Anim_End_FA	; if not, branch
0000ACDA 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000ACE0 4228 0025                  		clr.b	$25(a0)		; reset	2nd routine counter
0000ACE4                            
0000ACE4                            Anim_End_FA:
0000ACE4 5200                       		addq.b	#1,d0		; is the end flag = $FA	?
0000ACE6 6600                       		bne.s	Anim_End	; if not, branch
0000ACE8 5428 0025                  		addq.b	#2,$25(a0)	; jump to next routine
0000ACEC                            
0000ACEC                            Anim_End:
0000ACEC 4E75                       		rts	
0000ACEE                            ; End of function AnimateSprite
0000ACEE                            
0000ACEE                            ; ===========================================================================
0000ACEE                            ; ---------------------------------------------------------------------------
0000ACEE                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000ACEE                            ; ---------------------------------------------------------------------------
0000ACEE                            Map_obj0F:
0000ACEE                            	include "_maps\obj0F.asm"
0000ACEE                            ; ---------------------------------------------------------------------------
0000ACEE                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000ACEE                            ; ---------------------------------------------------------------------------
0000ACEE 0000                       		dc.w byte_A7CD-Map_obj0F
0000ACF0 0000                       		dc.w byte_A7CC-Map_obj0F
0000ACF2 0000                       		dc.w byte_A7EB-Map_obj0F
0000ACF4 0000                       		dc.w byte_A882-Map_obj0F
0000ACF6 06                         byte_A7CC:	dc.b 6			; "PRESS START BUTTON"
0000ACF7 000C 00F0 00               byte_A7CD:	dc.b 0,	$C, 0, $F0, 0
0000ACFC 0000 00F3 20               		dc.b 0,	0, 0, $F3, $20
0000AD01 0000 00F3 30               		dc.b 0,	0, 0, $F3, $30
0000AD06 000C 00F4 38               		dc.b 0,	$C, 0, $F4, $38
0000AD0B 0008 00F8 60               		dc.b 0,	8, 0, $F8, $60
0000AD10 0008 00FB 78               		dc.b 0,	8, 0, $FB, $78
0000AD15 1E                         byte_A7EB:	dc.b $1E		; sprite list filler
0000AD16 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AD1B B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AD20 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AD25 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AD2A B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AD2F B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AD34 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AD39 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AD3E B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AD43 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AD48 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AD4D D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AD52 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AD57 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AD5C D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AD61 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AD66 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AD6B D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AD70 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AD75 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AD7A F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AD7F F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AD84 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AD89 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AD8E F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AD93 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AD98 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AD9D F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000ADA2 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000ADA7 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000ADAC 01                         byte_A882:	dc.b 1			; "TM"
0000ADAD FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0000ADB2                            		even
0000ADB2                            		even
0000ADB2                            
0000ADB2                            ; ---------------------------------------------------------------------------
0000ADB2                            ; Sprite mappings - Sonic on the title screen
0000ADB2                            ; ---------------------------------------------------------------------------
0000ADB2                            Map_obj0E:
0000ADB2                            	include "_maps\obj0E.asm"
0000ADB2                            ; ================================================================================
0000ADB2                            ; Sprite Mappings - generated by Flex 2 Sat Mar 22 2025 12:11:33 GMT-0500 (Central Daylight Time)
0000ADB2                            ; ================================================================================
0000ADB2                            
0000ADB2                            DATAV21JFHJ5PUP:
0000ADB2 0000 0000                  	dc.w DATAV21JFHJ5PUP_0-DATAV21JFHJ5PUP, DATAV21JFHJ5PUP_1-DATAV21JFHJ5PUP
0000ADB6 0000 0000                  	dc.w DATAV21JFHJ5PUP_2-DATAV21JFHJ5PUP, DATAV21JFHJ5PUP_3-DATAV21JFHJ5PUP
0000ADBA 0000 0000                  	dc.w DATAV21JFHJ5PUP_4-DATAV21JFHJ5PUP, DATAV21JFHJ5PUP_5-DATAV21JFHJ5PUP
0000ADBE 0000 0000                  	dc.w DATAV21JFHJ5PUP_6-DATAV21JFHJ5PUP, DATAV21JFHJ5PUP_7-DATAV21JFHJ5PUP
0000ADC2 08                         DATAV21JFHJ5PUP_0: dc.b $8
0000ADC3 0C0F 019F 08               	dc.b $C, $F, $1, $9F, $8
0000ADC8 2C0F 01AF 08               	dc.b $2C, $F, $1, $AF, $8
0000ADCD 4C0D 01BF 08               	dc.b $4C, $D, $1, $BF, $8
0000ADD2 0408 01C7 20               	dc.b $4, $8, $1, $C7, $20
0000ADD7 0C0B 01CA 28               	dc.b $C, $B, $1, $CA, $28
0000ADDC 2C0B 01D6 28               	dc.b $2C, $B, $1, $D6, $28
0000ADE1 4C05 01E2 28               	dc.b $4C, $5, $1, $E2, $28
0000ADE6 1407 01E6 40               	dc.b $14, $7, $1, $E6, $40
0000ADEB 0B                         DATAV21JFHJ5PUP_1: dc.b $B
0000ADEC 060F 01EE 01               	dc.b $6, $F, $1, $EE, $1
0000ADF1 060F 01FE 21               	dc.b $6, $F, $1, $FE, $21
0000ADF6 0607 020E 41               	dc.b $6, $7, $2, $E, $41
0000ADFB 260F 0216 01               	dc.b $26, $F, $2, $16, $1
0000AE00 260F 0226 21               	dc.b $26, $F, $2, $26, $21
0000AE05 2607 0236 41               	dc.b $26, $7, $2, $36, $41
0000AE0A 460C 023E 01               	dc.b $46, $C, $2, $3E, $1
0000AE0F 460E 0242 21               	dc.b $46, $E, $2, $42, $21
0000AE14 4606 024E 41               	dc.b $46, $6, $2, $4E, $41
0000AE19 4E08 0254 09               	dc.b $4E, $8, $2, $54, $9
0000AE1E 5604 0257 11               	dc.b $56, $4, $2, $57, $11
0000AE23 0B                         DATAV21JFHJ5PUP_2: dc.b $B
0000AE24 F20F 01EE 01               	dc.b $F2, $F, $1, $EE, $1
0000AE29 F20F 01FE 21               	dc.b $F2, $F, $1, $FE, $21
0000AE2E F207 020E 41               	dc.b $F2, $7, $2, $E, $41
0000AE33 120F 0216 01               	dc.b $12, $F, $2, $16, $1
0000AE38 120F 0226 21               	dc.b $12, $F, $2, $26, $21
0000AE3D 1207 0236 41               	dc.b $12, $7, $2, $36, $41
0000AE42 320C 023E 01               	dc.b $32, $C, $2, $3E, $1
0000AE47 320E 0242 21               	dc.b $32, $E, $2, $42, $21
0000AE4C 3206 024E 41               	dc.b $32, $6, $2, $4E, $41
0000AE51 3A08 0254 09               	dc.b $3A, $8, $2, $54, $9
0000AE56 4204 0257 11               	dc.b $42, $4, $2, $57, $11
0000AE5B 0D                         DATAV21JFHJ5PUP_3: dc.b $D
0000AE5C FC0F 0000 08               	dc.b $FC, $F, $0, $0, $8
0000AE61 F408 0010 28               	dc.b $F4, $8, $0, $10, $28
0000AE66 FC0F 0013 28               	dc.b $FC, $F, $0, $13, $28
0000AE6B 0400 0023 48               	dc.b $4, $0, $0, $23, $48
0000AE70 0C06 0024 48               	dc.b $C, $6, $0, $24, $48
0000AE75 2400 002A 48               	dc.b $24, $0, $0, $2A, $48
0000AE7A 1C0D 002B 08               	dc.b $1C, $D, $0, $2B, $8
0000AE7F 1C0E 0033 28               	dc.b $1C, $E, $0, $33, $28
0000AE84 2C0B 003F 10               	dc.b $2C, $B, $0, $3F, $10
0000AE89 3408 004B 28               	dc.b $34, $8, $0, $4B, $28
0000AE8E 3C01 004E 08               	dc.b $3C, $1, $0, $4E, $8
0000AE93 3C04 0050 28               	dc.b $3C, $4, $0, $50, $28
0000AE98 4400 0052 28               	dc.b $44, $0, $0, $52, $28
0000AE9D 10                         DATAV21JFHJ5PUP_4: dc.b $10
0000AE9E F80F 0259 09               	dc.b $F8, $F, $2, $59, $9
0000AEA3 F807 0269 29               	dc.b $F8, $7, $2, $69, $29
0000AEA8 0003 0271 01               	dc.b $0, $3, $2, $71, $1
0000AEAD 0003 0275 39               	dc.b $0, $3, $2, $75, $39
0000AEB2 1001 0279 F9               	dc.b $10, $1, $2, $79, $F9
0000AEB7 180D 027B 09               	dc.b $18, $D, $2, $7B, $9
0000AEBC 1807 0283 29               	dc.b $18, $7, $2, $83, $29
0000AEC1 1803 028B 41               	dc.b $18, $3, $2, $8B, $41
0000AEC6 2001 028F 01               	dc.b $20, $1, $2, $8F, $1
0000AECB 2003 0291 39               	dc.b $20, $3, $2, $91, $39
0000AED0 2808 0295 11               	dc.b $28, $8, $2, $95, $11
0000AED5 3007 0298 19               	dc.b $30, $7, $2, $98, $19
0000AEDA 3801 02A0 11               	dc.b $38, $1, $2, $A0, $11
0000AEDF 3806 02A2 29               	dc.b $38, $6, $2, $A2, $29
0000AEE4 3801 02A8 41               	dc.b $38, $1, $2, $A8, $41
0000AEE9 4001 02AA 39               	dc.b $40, $1, $2, $AA, $39
0000AEEE 13                         DATAV21JFHJ5PUP_5: dc.b $13
0000AEEF 280E 00B2 38               	dc.b $28, $E, $0, $B2, $38
0000AEF4 1805 00BE 48               	dc.b $18, $5, $0, $BE, $48
0000AEF9 4008 00C2 38               	dc.b $40, $8, $0, $C2, $38
0000AEFE 4804 00C5 38               	dc.b $48, $4, $0, $C5, $38
0000AF03 100F 0053 10               	dc.b $10, $F, $0, $53, $10
0000AF08 0804 0063 20               	dc.b $8, $4, $0, $63, $20
0000AF0D 000B 0065 30               	dc.b $0, $B, $0, $65, $30
0000AF12 0800 0071 48               	dc.b $8, $0, $0, $71, $48
0000AF17 1800 0072 48               	dc.b $18, $0, $0, $72, $48
0000AF1C 1805 0073 00               	dc.b $18, $5, $0, $73, $0
0000AF21 2802 0077 08               	dc.b $28, $2, $0, $77, $8
0000AF26 300F 007A 10               	dc.b $30, $F, $0, $7A, $10
0000AF2B 200D 008A 30               	dc.b $20, $D, $0, $8A, $30
0000AF30 2001 0092 50               	dc.b $20, $1, $0, $92, $50
0000AF35 3008 0094 30               	dc.b $30, $8, $0, $94, $30
0000AF3A 380E 0097 30               	dc.b $38, $E, $0, $97, $30
0000AF3F 500D 00A3 08               	dc.b $50, $D, $0, $A3, $8
0000AF44 500C 00AB 28               	dc.b $50, $C, $0, $AB, $28
0000AF49 5808 00AF 28               	dc.b $58, $8, $0, $AF, $28
0000AF4E 0F                         DATAV21JFHJ5PUP_6: dc.b $F
0000AF4F EC0F 00C7 E2               	dc.b $EC, $F, $0, $C7, $E2
0000AF54 0C0F 00D7 E2               	dc.b $C, $F, $0, $D7, $E2
0000AF59 2C0F 00E7 E2               	dc.b $2C, $F, $0, $E7, $E2
0000AF5E EC0F 00F7 02               	dc.b $EC, $F, $0, $F7, $2
0000AF63 0C0F 0107 02               	dc.b $C, $F, $1, $7, $2
0000AF68 2C0F 0117 02               	dc.b $2C, $F, $1, $17, $2
0000AF6D EC0F 0127 22               	dc.b $EC, $F, $1, $27, $22
0000AF72 0C0F 0137 22               	dc.b $C, $F, $1, $37, $22
0000AF77 2C0F 0147 22               	dc.b $2C, $F, $1, $47, $22
0000AF7C EC0F 0157 42               	dc.b $EC, $F, $1, $57, $42
0000AF81 0C0F 0167 42               	dc.b $C, $F, $1, $67, $42
0000AF86 2C0F 0177 42               	dc.b $2C, $F, $1, $77, $42
0000AF8B EC07 0187 62               	dc.b $EC, $7, $1, $87, $62
0000AF90 0C07 018F 62               	dc.b $C, $7, $1, $8F, $62
0000AF95 2C07 0197 62               	dc.b $2C, $7, $1, $97, $62
0000AF9A 0F                         DATAV21JFHJ5PUP_7: dc.b $F
0000AF9B EC0F 00C7 E2               	dc.b $EC, $F, $0, $C7, $E2
0000AFA0 0C0F 00D7 E2               	dc.b $C, $F, $0, $D7, $E2
0000AFA5 2C0F 00E7 E2               	dc.b $2C, $F, $0, $E7, $E2
0000AFAA EC0F 00F7 02               	dc.b $EC, $F, $0, $F7, $2
0000AFAF 0C0F 0107 02               	dc.b $C, $F, $1, $7, $2
0000AFB4 2C0F 0117 02               	dc.b $2C, $F, $1, $17, $2
0000AFB9 EC0F 0127 22               	dc.b $EC, $F, $1, $27, $22
0000AFBE 0C0F 0137 22               	dc.b $C, $F, $1, $37, $22
0000AFC3 2C0F 0147 22               	dc.b $2C, $F, $1, $47, $22
0000AFC8 EC0F 0157 42               	dc.b $EC, $F, $1, $57, $42
0000AFCD 0C0F 0167 42               	dc.b $C, $F, $1, $67, $42
0000AFD2 2C0F 0177 42               	dc.b $2C, $F, $1, $77, $42
0000AFD7 EC07 0187 62               	dc.b $EC, $7, $1, $87, $62
0000AFDC 0C07 018F 62               	dc.b $C, $7, $1, $8F, $62
0000AFE1 2C07 0197 62               	dc.b $2C, $7, $1, $97, $62
0000AFE6                            	even
0000AFE6                            	even
0000AFE6                            
0000AFE6                            ; ===========================================================================
0000AFE6                            ; ---------------------------------------------------------------------------
0000AFE6                            ; Object 2B - Chopper enemy (GHZ)
0000AFE6                            ; ---------------------------------------------------------------------------
0000AFE6                            
0000AFE6                            Obj2B:					; XREF: Obj_Index
0000AFE6 7000                       		moveq	#0,d0
0000AFE8 1028 0024                  		move.b	$24(a0),d0
0000AFEC 323B 0000                  		move.w	Obj2B_Index(pc,d0.w),d1
0000AFF0 4EBB 1000                  		jsr	Obj2B_Index(pc,d1.w)
0000AFF4 6000 0000                  		bra.w	MarkObjGone
0000AFF8                            ; ===========================================================================
0000AFF8 0000                       Obj2B_Index:	dc.w Obj2B_Main-Obj2B_Index
0000AFFA 0000                       		dc.w Obj2B_ChgSpeed-Obj2B_Index
0000AFFC                            ; ===========================================================================
0000AFFC                            
0000AFFC                            Obj2B_Main:				; XREF: Obj2B_Index
0000AFFC 5428 0024                  		addq.b	#2,$24(a0)
0000B000 217C 0000 0000 0004        		move.l	#Map_obj2B,4(a0)
0000B008 317C 047B 0002             		move.w	#$47B,2(a0)
0000B00E 117C 0004 0001             		move.b	#4,1(a0)
0000B014 117C 0004 0018             		move.b	#4,$18(a0)
0000B01A 117C 0009 0020             		move.b	#9,$20(a0)
0000B020 117C 0010 0019             		move.b	#$10,$19(a0)
0000B026 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000B02C 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000B032                            
0000B032                            Obj2B_ChgSpeed:				; XREF: Obj2B_Index
0000B032 43F9 0000 0000             		lea	(Ani_obj2B).l,a1
0000B038 6100 FC08                  		bsr.w	AnimateSprite
0000B03C 6100 0000                  		bsr.w	SpeedToPos
0000B040 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce speed
0000B046 3028 0030                  		move.w	$30(a0),d0
0000B04A B068 000C                  		cmp.w	$C(a0),d0
0000B04E 6400                       		bcc.s	Obj2B_ChgAni
0000B050 3140 000C                  		move.w	d0,$C(a0)
0000B054 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000B05A                            
0000B05A                            Obj2B_ChgAni:
0000B05A 117C 0001 001C             		move.b	#1,$1C(a0)	; use fast animation
0000B060 0440 00C0                  		subi.w	#$C0,d0
0000B064 B068 000C                  		cmp.w	$C(a0),d0
0000B068 6400                       		bcc.s	locret_ABB6
0000B06A 117C 0000 001C             		move.b	#0,$1C(a0)	; use slow animation
0000B070 4A68 0012                  		tst.w	$12(a0)		; is Chopper at	its highest point?
0000B074 6B00                       		bmi.s	locret_ABB6	; if not, branch
0000B076 117C 0002 001C             		move.b	#2,$1C(a0)	; use stationary animation
0000B07C                            
0000B07C                            locret_ABB6:
0000B07C 4E75                       		rts	
0000B07E                            ; ===========================================================================
0000B07E                            Ani_obj2B:
0000B07E                            	include "_anim\obj2B.asm"
0000B07E                            ; ---------------------------------------------------------------------------
0000B07E                            ; Animation script - Chopper enemy
0000B07E                            ; ---------------------------------------------------------------------------
0000B07E 0000                       		dc.w byte_ABBE-Ani_obj2B
0000B080 0000                       		dc.w byte_ABC2-Ani_obj2B
0000B082 0000                       		dc.w byte_ABC6-Ani_obj2B
0000B084 0700 01FF                  byte_ABBE:	dc.b 7,	0, 1, $FF
0000B088 0300 01FF                  byte_ABC2:	dc.b 3,	0, 1, $FF
0000B08C 0700 FF                    byte_ABC6:	dc.b 7,	0, $FF
0000B090 00                         		even
0000B090 00                         		even
0000B090                            
0000B090                            ; ---------------------------------------------------------------------------
0000B090                            ; Sprite mappings - Chopper enemy (GHZ)
0000B090                            ; ---------------------------------------------------------------------------
0000B090                            Map_obj2B:
0000B090                            	include "_maps\obj2B.asm"
0000B090                            ; ---------------------------------------------------------------------------
0000B090                            ; Sprite mappings - Chopper enemy (GHZ)
0000B090                            ; ---------------------------------------------------------------------------
0000B090 0000                       		dc.w byte_ABCE-Map_obj2B
0000B092 0000                       		dc.w byte_ABD4-Map_obj2B
0000B094 01                         byte_ABCE:	dc.b 1
0000B095 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0000B09A 01                         byte_ABD4:	dc.b 1
0000B09B F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
0000B0A0                            		even
0000B0A0                            		even
0000B0A0                            
0000B0A0                            ; ===========================================================================
0000B0A0                            ; ---------------------------------------------------------------------------
0000B0A0                            ; Object 2C - Jaws enemy (LZ)
0000B0A0                            ; ---------------------------------------------------------------------------
0000B0A0                            
0000B0A0                            Obj2C:					; XREF: Obj_Index
0000B0A0 7000                       		moveq	#0,d0
0000B0A2 1028 0024                  		move.b	$24(a0),d0
0000B0A6 323B 0000                  		move.w	Obj2C_Index(pc,d0.w),d1
0000B0AA 4EFB 1000                  		jmp	Obj2C_Index(pc,d1.w)
0000B0AE                            ; ===========================================================================
0000B0AE 0000                       Obj2C_Index:	dc.w Obj2C_Main-Obj2C_Index
0000B0B0 0000                       		dc.w Obj2C_Turn-Obj2C_Index
0000B0B2                            ; ===========================================================================
0000B0B2                            
0000B0B2                            Obj2C_Main:				; XREF: Obj2C_Index
0000B0B2 5428 0024                  		addq.b	#2,$24(a0)
0000B0B6 217C 0000 0000 0004        		move.l	#Map_obj2C,4(a0)
0000B0BE 317C 2486 0002             		move.w	#$2486,2(a0)
0000B0C4 0028 0004 0001             		ori.b	#4,1(a0)
0000B0CA 117C 000A 0020             		move.b	#$A,$20(a0)
0000B0D0 117C 0004 0018             		move.b	#4,$18(a0)
0000B0D6 117C 0010 0019             		move.b	#$10,$19(a0)
0000B0DC 7000                       		moveq	#0,d0
0000B0DE 1028 0028                  		move.b	$28(a0),d0	; load object subtype number
0000B0E2 ED48                       		lsl.w	#6,d0		; multiply d0 by 64
0000B0E4 5340                       		subq.w	#1,d0
0000B0E6 3140 0030                  		move.w	d0,$30(a0)	; set turn delay time
0000B0EA 3140 0032                  		move.w	d0,$32(a0)
0000B0EE 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move Jaws to the left
0000B0F4 0828 0000 0022             		btst	#0,$22(a0)	; is Jaws facing left?
0000B0FA 6700                       		beq.s	Obj2C_Turn	; if yes, branch
0000B0FC 4468 0010                  		neg.w	$10(a0)		; move Jaws to the right
0000B100                            
0000B100                            Obj2C_Turn:				; XREF: Obj2C_Index
0000B100 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from turn delay time
0000B104 6A00                       		bpl.s	Obj2C_Animate	; if time remains, branch
0000B106 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	turn delay time
0000B10C 4468 0010                  		neg.w	$10(a0)		; change speed direction
0000B110 0868 0000 0022             		bchg	#0,$22(a0)	; change Jaws facing direction
0000B116 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000B11C                            
0000B11C                            Obj2C_Animate:
0000B11C 43F9 0000 0000             		lea	(Ani_obj2C).l,a1
0000B122 6100 FB1E                  		bsr.w	AnimateSprite
0000B126 6100 0000                  		bsr.w	SpeedToPos
0000B12A 6000 0000                  		bra.w	MarkObjGone
0000B12E                            ; ===========================================================================
0000B12E                            Ani_obj2C:
0000B12E                            	include "_anim\obj2C.asm"
0000B12E                            ; ---------------------------------------------------------------------------
0000B12E                            ; Animation script - Jaws enemy
0000B12E                            ; ---------------------------------------------------------------------------
0000B12E 0000                       		dc.w byte_AC6A-Ani_obj2C
0000B130 0700 0102 03FF             byte_AC6A:	dc.b 7,	0, 1, 2, 3, $FF
0000B136                            		even
0000B136                            		even
0000B136                            
0000B136                            ; ---------------------------------------------------------------------------
0000B136                            ; Sprite mappings - Jaws enemy (LZ)
0000B136                            ; ---------------------------------------------------------------------------
0000B136                            Map_obj2C:
0000B136                            	include "_maps\obj2C.asm"
0000B136                            ; ---------------------------------------------------------------------------
0000B136                            ; Sprite mappings - Jaws enemy (LZ)
0000B136                            ; ---------------------------------------------------------------------------
0000B136 0000                       		dc.w byte_AC78-Map_obj2C
0000B138 0000                       		dc.w byte_AC83-Map_obj2C
0000B13A 0000                       		dc.w byte_AC8E-Map_obj2C
0000B13C 0000                       		dc.w byte_AC99-Map_obj2C
0000B13E 02                         byte_AC78:	dc.b 2
0000B13F F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000B144 F505 0018 10               		dc.b $F5, 5, 0,	$18, $10
0000B149 02                         byte_AC83:	dc.b 2
0000B14A F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000B14F F505 001C 10               		dc.b $F5, 5, 0,	$1C, $10
0000B154 02                         byte_AC8E:	dc.b 2
0000B155 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000B15A F505 1018 10               		dc.b $F5, 5, $10, $18, $10
0000B15F 02                         byte_AC99:	dc.b 2
0000B160 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000B165 F505 101C 10               		dc.b $F5, 5, $10, $1C, $10
0000B16A                            		even
0000B16A                            		even
0000B16A                            
0000B16A                            ; ===========================================================================
0000B16A                            ; ---------------------------------------------------------------------------
0000B16A                            ; Object 2D - Burrobot enemy (LZ)
0000B16A                            ; ---------------------------------------------------------------------------
0000B16A                            
0000B16A                            Obj2D:					; XREF: Obj_Index
0000B16A 7000                       		moveq	#0,d0
0000B16C 1028 0024                  		move.b	$24(a0),d0
0000B170 323B 0000                  		move.w	Obj2D_Index(pc,d0.w),d1
0000B174 4EFB 1000                  		jmp	Obj2D_Index(pc,d1.w)
0000B178                            ; ===========================================================================
0000B178 0000                       Obj2D_Index:	dc.w Obj2D_Main-Obj2D_Index
0000B17A 0000                       		dc.w Obj2D_Action-Obj2D_Index
0000B17C                            ; ===========================================================================
0000B17C                            
0000B17C                            Obj2D_Main:				; XREF: Obj2D_Index
0000B17C 5428 0024                  		addq.b	#2,$24(a0)
0000B180 117C 0013 0016             		move.b	#$13,$16(a0)
0000B186 117C 0008 0017             		move.b	#8,$17(a0)
0000B18C 217C 0000 0000 0004        		move.l	#Map_obj2D,4(a0)
0000B194 317C 04A6 0002             		move.w	#$4A6,2(a0)
0000B19A 0028 0004 0001             		ori.b	#4,1(a0)
0000B1A0 117C 0004 0018             		move.b	#4,$18(a0)
0000B1A6 117C 0005 0020             		move.b	#5,$20(a0)
0000B1AC 117C 000C 0019             		move.b	#$C,$19(a0)
0000B1B2 5C28 0025                  		addq.b	#6,$25(a0)	; run "Obj2D_ChkSonic" routine
0000B1B6 117C 0002 001C             		move.b	#2,$1C(a0)
0000B1BC                            
0000B1BC                            Obj2D_Action:				; XREF: Obj2D_Index
0000B1BC 7000                       		moveq	#0,d0
0000B1BE 1028 0025                  		move.b	$25(a0),d0
0000B1C2 323B 0000                  		move.w	Obj2D_Index2(pc,d0.w),d1
0000B1C6 4EBB 1000                  		jsr	Obj2D_Index2(pc,d1.w)
0000B1CA 43F9 0000 0000             		lea	(Ani_obj2D).l,a1
0000B1D0 6100 FA70                  		bsr.w	AnimateSprite
0000B1D4 6000 0000                  		bra.w	MarkObjGone
0000B1D8                            ; ===========================================================================
0000B1D8 0000                       Obj2D_Index2:	dc.w Obj2D_ChgDir-Obj2D_Index2
0000B1DA 0000                       		dc.w Obj2D_Move-Obj2D_Index2
0000B1DC 0000                       		dc.w Obj2D_Jump-Obj2D_Index2
0000B1DE 0000                       		dc.w Obj2D_ChkSonic-Obj2D_Index2
0000B1E0                            ; ===========================================================================
0000B1E0                            
0000B1E0                            Obj2D_ChgDir:				; XREF: Obj2D_Index2
0000B1E0 5368 0030                  		subq.w	#1,$30(a0)
0000B1E4 6A00                       		bpl.s	locret_AD42
0000B1E6 5428 0025                  		addq.b	#2,$25(a0)
0000B1EA 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000B1F0 317C 0080 0010             		move.w	#$80,$10(a0)
0000B1F6 117C 0001 001C             		move.b	#1,$1C(a0)
0000B1FC 0868 0000 0022             		bchg	#0,$22(a0)	; change direction the Burrobot	is facing
0000B202 6700                       		beq.s	locret_AD42
0000B204 4468 0010                  		neg.w	$10(a0)		; change direction the Burrobot	is moving
0000B208                            
0000B208                            locret_AD42:
0000B208 4E75                       		rts	
0000B20A                            ; ===========================================================================
0000B20A                            
0000B20A                            Obj2D_Move:				; XREF: Obj2D_Index2
0000B20A 5368 0030                  		subq.w	#1,$30(a0)
0000B20E 6B00                       		bmi.s	loc_AD84
0000B210 6100 0000                  		bsr.w	SpeedToPos
0000B214 0868 0000 0032             		bchg	#0,$32(a0)
0000B21A 6600                       		bne.s	loc_AD78
0000B21C 3628 0008                  		move.w	8(a0),d3
0000B220 0643 000C                  		addi.w	#$C,d3
0000B224 0828 0000 0022             		btst	#0,$22(a0)
0000B22A 6600                       		bne.s	loc_AD6A
0000B22C 0443 0018                  		subi.w	#$18,d3
0000B230                            
0000B230                            loc_AD6A:
0000B230 4EB9 0000 0000             		jsr	ObjHitFloor2
0000B236 0C41 000C                  		cmpi.w	#$C,d1
0000B23A 6C00                       		bge.s	loc_AD84
0000B23C 4E75                       		rts	
0000B23E                            ; ===========================================================================
0000B23E                            
0000B23E                            loc_AD78:				; XREF: Obj2D_Move
0000B23E 4EB9 0000 0000             		jsr	ObjHitFloor
0000B244 D368 000C                  		add.w	d1,$C(a0)
0000B248 4E75                       		rts	
0000B24A                            ; ===========================================================================
0000B24A                            
0000B24A                            loc_AD84:				; XREF: Obj2D_Move
0000B24A 0838 0002 FE0F             		btst	#2,($FFFFFE0F).w
0000B250 6700                       		beq.s	loc_ADA4
0000B252 5528 0025                  		subq.b	#2,$25(a0)
0000B256 317C 003B 0030             		move.w	#$3B,$30(a0)
0000B25C 317C 0000 0010             		move.w	#0,$10(a0)
0000B262 117C 0000 001C             		move.b	#0,$1C(a0)
0000B268 4E75                       		rts	
0000B26A                            ; ===========================================================================
0000B26A                            
0000B26A                            loc_ADA4:
0000B26A 5428 0025                  		addq.b	#2,$25(a0)
0000B26E 317C FC00 0012             		move.w	#-$400,$12(a0)
0000B274 117C 0002 001C             		move.b	#2,$1C(a0)
0000B27A 4E75                       		rts	
0000B27C                            ; ===========================================================================
0000B27C                            
0000B27C                            Obj2D_Jump:				; XREF: Obj2D_Index2
0000B27C 6100 0000                  		bsr.w	SpeedToPos
0000B280 0668 0018 0012             		addi.w	#$18,$12(a0)
0000B286 6B00                       		bmi.s	locret_ADF0
0000B288 117C 0003 001C             		move.b	#3,$1C(a0)
0000B28E 4EB9 0000 0000             		jsr	ObjHitFloor
0000B294 4A41                       		tst.w	d1
0000B296 6A00                       		bpl.s	locret_ADF0
0000B298 D368 000C                  		add.w	d1,$C(a0)
0000B29C 317C 0000 0012             		move.w	#0,$12(a0)
0000B2A2 117C 0001 001C             		move.b	#1,$1C(a0)
0000B2A8 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000B2AE 5528 0025                  		subq.b	#2,$25(a0)
0000B2B2 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000B2B6                            
0000B2B6                            locret_ADF0:
0000B2B6 4E75                       		rts	
0000B2B8                            ; ===========================================================================
0000B2B8                            
0000B2B8                            Obj2D_ChkSonic:				; XREF: Obj2D_Index2
0000B2B8 343C 0060                  		move.w	#$60,d2
0000B2BC 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000B2C0 6400                       		bcc.s	locret_AE20
0000B2C2 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000B2C6 9068 000C                  		sub.w	$C(a0),d0
0000B2CA 6400                       		bcc.s	locret_AE20
0000B2CC 0C40 FF80                  		cmpi.w	#-$80,d0
0000B2D0 6500                       		bcs.s	locret_AE20
0000B2D2 4A78 FE08                  		tst.w	($FFFFFE08).w
0000B2D6 6600                       		bne.s	locret_AE20
0000B2D8 5528 0025                  		subq.b	#2,$25(a0)
0000B2DC 3141 0010                  		move.w	d1,$10(a0)
0000B2E0 317C FC00 0012             		move.w	#-$400,$12(a0)
0000B2E6                            
0000B2E6                            locret_AE20:
0000B2E6 4E75                       		rts	
0000B2E8                            
0000B2E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B2E8                            
0000B2E8                            
0000B2E8                            Obj2D_ChkSonic2:			; XREF: Obj2D_ChkSonic
0000B2E8 323C 0080                  		move.w	#$80,d1
0000B2EC 08E8 0000 0022             		bset	#0,$22(a0)
0000B2F2 3038 D008                  		move.w	($FFFFD008).w,d0
0000B2F6 9068 0008                  		sub.w	8(a0),d0
0000B2FA 6400                       		bcc.s	loc_AE40
0000B2FC 4440                       		neg.w	d0
0000B2FE 4441                       		neg.w	d1
0000B300 08A8 0000 0022             		bclr	#0,$22(a0)
0000B306                            
0000B306                            loc_AE40:
0000B306 B042                       		cmp.w	d2,d0
0000B308 4E75                       		rts	
0000B30A                            ; End of function Obj2D_ChkSonic2
0000B30A                            
0000B30A                            ; ===========================================================================
0000B30A                            Ani_obj2D:
0000B30A                            	include "_anim\obj2D.asm"
0000B30A                            ; ---------------------------------------------------------------------------
0000B30A                            ; Animation script - Burrobot enemy but craig
0000B30A                            ; ---------------------------------------------------------------------------
0000B30A 0000                       		dc.w byte_AE4C-Ani_obj2D
0000B30C 0000                       		dc.w byte_AE50-Ani_obj2D
0000B30E 0000                       		dc.w byte_AE54-Ani_obj2D
0000B310 0000                       		dc.w byte_AE58-Ani_obj2D
0000B312 0300 FF                    byte_AE4C:	dc.b 3,	0, $FF ; wait
0000B315 0300 01FF                  byte_AE50:	dc.b 3,	0, 1, $FF ; waddle
0000B319 0100 0102 0304 0506 0708+  byte_AE54:	dc.b 1,	0, 1, 2, 3, 4, 5, 6, 7, 8, 3, 9, $A, $FF ; speen
0000B327 0304 FF                    byte_AE58:	dc.b 3,	4, $FF
0000B32A                            		even
0000B32A                            		even
0000B32A                            
0000B32A                            ; ---------------------------------------------------------------------------
0000B32A                            ; Sprite mappings - Burrobot enemy (LZ)
0000B32A                            ; ---------------------------------------------------------------------------
0000B32A                            Map_obj2D:
0000B32A                            	include "_maps\obj2D.asm"
0000B32A                            Map_e3a3:
0000B32A 0000                       Map_e3a3_0: 	dc.w Map_e3a3_16-Map_e3a3
0000B32C 0000                       Map_e3a3_2: 	dc.w Map_e3a3_21-Map_e3a3
0000B32E 0000                       Map_e3a3_4: 	dc.w Map_e3a3_2C-Map_e3a3
0000B330 0000                       Map_e3a3_6: 	dc.w Map_e3a3_37-Map_e3a3
0000B332 0000                       Map_e3a3_8: 	dc.w Map_e3a3_42-Map_e3a3
0000B334 0000                       Map_e3a3_A: 	dc.w Map_e3a3_4D-Map_e3a3
0000B336 0000                       Map_e3a3_C: 	dc.w Map_e3a3_58-Map_e3a3
0000B338 0000                       Map_e3a3_E: 	dc.w Map_e3a3_63-Map_e3a3
0000B33A 0000                       Map_e3a3_10: 	dc.w Map_e3a3_6E-Map_e3a3
0000B33C 0000                       Map_e3a3_12: 	dc.w Map_e3a3_79-Map_e3a3
0000B33E 0000                       Map_e3a3_14: 	dc.w Map_e3a3_84-Map_e3a3
0000B340 02                         Map_e3a3_16: 	dc.b $2
0000B341 EC0B 0800 F4               	dc.b $EC, $B, $8, $0, $F4
0000B346 0C08 080C F4               	dc.b $C, $8, $8, $C, $F4
0000B34B 02                         Map_e3a3_21: 	dc.b $2
0000B34C EC07 080F F8               	dc.b $EC, $7, $8, $F, $F8
0000B351 0C04 0817 F8               	dc.b $C, $4, $8, $17, $F8
0000B356 02                         Map_e3a3_2C: 	dc.b $2
0000B357 EC07 0819 F8               	dc.b $EC, $7, $8, $19, $F8
0000B35C 0C04 0821 F8               	dc.b $C, $4, $8, $21, $F8
0000B361 02                         Map_e3a3_37: 	dc.b $2
0000B362 EC02 0823 FC               	dc.b $EC, $2, $8, $23, $FC
0000B367 FC02 1823 FC               	dc.b $FC, $2, $18, $23, $FC
0000B36C 02                         Map_e3a3_42: 	dc.b $2
0000B36D EC06 0826 F8               	dc.b $EC, $6, $8, $26, $F8
0000B372 FC06 1826 F8               	dc.b $FC, $6, $18, $26, $F8
0000B377 02                         Map_e3a3_4D: 	dc.b $2
0000B378 EC06 082C F8               	dc.b $EC, $6, $8, $2C, $F8
0000B37D FC06 182C F8               	dc.b $FC, $6, $18, $2C, $F8
0000B382 02                         Map_e3a3_58: 	dc.b $2
0000B383 EC0A 0832 F4               	dc.b $EC, $A, $8, $32, $F4
0000B388 FC0A 1832 F4               	dc.b $FC, $A, $18, $32, $F4
0000B38D 02                         Map_e3a3_63: 	dc.b $2
0000B38E EC06 002C F8               	dc.b $EC, $6, $0, $2C, $F8
0000B393 FC06 102C F8               	dc.b $FC, $6, $10, $2C, $F8
0000B398 02                         Map_e3a3_6E: 	dc.b $2
0000B399 EC06 0026 F8               	dc.b $EC, $6, $0, $26, $F8
0000B39E FC06 1026 F8               	dc.b $FC, $6, $10, $26, $F8
0000B3A3 02                         Map_e3a3_79: 	dc.b $2
0000B3A4 EC07 0019 F8               	dc.b $EC, $7, $0, $19, $F8
0000B3A9 0C04 0021 F8               	dc.b $C, $4, $0, $21, $F8
0000B3AE 02                         Map_e3a3_84: 	dc.b $2
0000B3AF EC07 000F F8               	dc.b $EC, $7, $0, $F, $F8
0000B3B4 0C04 0017 F8               	dc.b $C, $4, $0, $17, $F8
0000B3BA 00                         	even
0000B3BA 00                         	even
0000B3BA                            
0000B3BA                            ; ===========================================================================
0000B3BA                            ; ---------------------------------------------------------------------------
0000B3BA                            ; Object 2F - large moving platforms (MZ)
0000B3BA                            ; ---------------------------------------------------------------------------
0000B3BA                            
0000B3BA                            Obj2F:					; XREF: Obj_Index
0000B3BA 7000                       		moveq	#0,d0
0000B3BC 1028 0024                  		move.b	$24(a0),d0
0000B3C0 323B 0000                  		move.w	Obj2F_Index(pc,d0.w),d1
0000B3C4 4EFB 1000                  		jmp	Obj2F_Index(pc,d1.w)
0000B3C8                            ; ===========================================================================
0000B3C8 0000                       Obj2F_Index:	dc.w Obj2F_Main-Obj2F_Index
0000B3CA 0000                       		dc.w Obj2F_Action-Obj2F_Index
0000B3CC                            
0000B3CC 0000                       Obj2F_Data:	dc.w Obj2F_Data1-Obj2F_Data 	; collision angle data
0000B3CE 0040                       		dc.b 0,	$40			; frame	number,	platform width
0000B3D0 0000                       		dc.w Obj2F_Data3-Obj2F_Data
0000B3D2 0140                       		dc.b 1,	$40
0000B3D4 0000                       		dc.w Obj2F_Data2-Obj2F_Data
0000B3D6 0220                       		dc.b 2,	$20
0000B3D8                            ; ===========================================================================
0000B3D8                            
0000B3D8                            Obj2F_Main:				; XREF: Obj2F_Index
0000B3D8 5428 0024                  		addq.b	#2,$24(a0)
0000B3DC 217C 0000 0000 0004        		move.l	#Map_obj2F,4(a0)
0000B3E4 317C C000 0002             		move.w	#$C000,2(a0)
0000B3EA 117C 0004 0001             		move.b	#4,1(a0)
0000B3F0 117C 0005 0018             		move.b	#5,$18(a0)
0000B3F6 3168 000C 002C             		move.w	$C(a0),$2C(a0)
0000B3FC 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000B402 7000                       		moveq	#0,d0
0000B404 1028 0028                  		move.b	$28(a0),d0
0000B408 E448                       		lsr.w	#2,d0
0000B40A 0240 001C                  		andi.w	#$1C,d0
0000B40E 43FB 00BC                  		lea	Obj2F_Data(pc,d0.w),a1
0000B412 3019                       		move.w	(a1)+,d0
0000B414 45FB 00B6                  		lea	Obj2F_Data(pc,d0.w),a2
0000B418 214A 0030                  		move.l	a2,$30(a0)
0000B41C 1159 001A                  		move.b	(a1)+,$1A(a0)
0000B420 1151 0019                  		move.b	(a1),$19(a0)
0000B424 0228 000F 0028             		andi.b	#$F,$28(a0)
0000B42A 117C 0040 0016             		move.b	#$40,$16(a0)
0000B430 08E8 0004 0001             		bset	#4,1(a0)
0000B436                            
0000B436                            Obj2F_Action:				; XREF: Obj2F_Index
0000B436 6100 0000                  		bsr.w	Obj2F_Types
0000B43A 4A28 0025                  		tst.b	$25(a0)
0000B43E 6700                       		beq.s	Obj2F_Solid
0000B440 7200                       		moveq	#0,d1
0000B442 1228 0019                  		move.b	$19(a0),d1
0000B446 0641 000B                  		addi.w	#$B,d1
0000B44A 6100 C5C6                  		bsr.w	ExitPlatform
0000B44E 0829 0003 0022             		btst	#3,$22(a1)
0000B454 6600 0000                  		bne.w	Obj2F_Slope
0000B458 4228 0025                  		clr.b	$25(a0)
0000B45C 6000                       		bra.s	Obj2F_Display
0000B45E                            ; ===========================================================================
0000B45E                            
0000B45E                            Obj2F_Slope:				; XREF: Obj2F_Action
0000B45E 7200                       		moveq	#0,d1
0000B460 1228 0019                  		move.b	$19(a0),d1
0000B464 0641 000B                  		addi.w	#$B,d1
0000B468 2468 0030                  		movea.l	$30(a0),a2
0000B46C 3428 0008                  		move.w	8(a0),d2
0000B470 6100 D4FE                  		bsr.w	SlopeObject2
0000B474 6000                       		bra.s	Obj2F_Display
0000B476                            ; ===========================================================================
0000B476                            
0000B476                            Obj2F_Solid:				; XREF: Obj2F_Action
0000B476 7200                       		moveq	#0,d1
0000B478 1228 0019                  		move.b	$19(a0),d1
0000B47C 0641 000B                  		addi.w	#$B,d1
0000B480 343C 0020                  		move.w	#$20,d2
0000B484 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000B48A 6600                       		bne.s	loc_AF8E
0000B48C 343C 0030                  		move.w	#$30,d2
0000B490                            
0000B490                            loc_AF8E:
0000B490 2468 0030                  		movea.l	$30(a0),a2
0000B494 6100 0000                  		bsr.w	SolidObject2F
0000B498                            
0000B498                            Obj2F_Display:				; XREF: Obj2F_Action
0000B498 6100 0000                  		bsr.w	DisplaySprite
0000B49C 6000 0000                  		bra.w	Obj2F_ChkDel
0000B4A0                            
0000B4A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B4A0                            
0000B4A0                            
0000B4A0                            Obj2F_Types:				; XREF: Obj2F_Action
0000B4A0 7000                       		moveq	#0,d0
0000B4A2 1028 0028                  		move.b	$28(a0),d0
0000B4A6 0240 0007                  		andi.w	#7,d0
0000B4AA D040                       		add.w	d0,d0
0000B4AC 323B 0000                  		move.w	Obj2F_TypeIndex(pc,d0.w),d1
0000B4B0 4EFB 1000                  		jmp	Obj2F_TypeIndex(pc,d1.w)
0000B4B4                            ; End of function Obj2F_Types
0000B4B4                            
0000B4B4                            ; ===========================================================================
0000B4B4 0000                       Obj2F_TypeIndex:dc.w Obj2F_Type00-Obj2F_TypeIndex
0000B4B6 0000                       		dc.w Obj2F_Type01-Obj2F_TypeIndex
0000B4B8 0000                       		dc.w Obj2F_Type02-Obj2F_TypeIndex
0000B4BA 0000                       		dc.w Obj2F_Type03-Obj2F_TypeIndex
0000B4BC 0000                       		dc.w Obj2F_Type04-Obj2F_TypeIndex
0000B4BE 0000                       		dc.w Obj2F_Type05-Obj2F_TypeIndex
0000B4C0                            ; ===========================================================================
0000B4C0                            
0000B4C0                            Obj2F_Type00:				; XREF: Obj2F_TypeIndex
0000B4C0 4E75                       		rts			; type 00 platform doesn't move
0000B4C2                            ; ===========================================================================
0000B4C2                            
0000B4C2                            Obj2F_Type01:				; XREF: Obj2F_TypeIndex
0000B4C2 1038 FE60                  		move.b	($FFFFFE60).w,d0
0000B4C6 323C 0020                  		move.w	#$20,d1
0000B4CA 6000                       		bra.s	Obj2F_Move
0000B4CC                            ; ===========================================================================
0000B4CC                            
0000B4CC                            Obj2F_Type02:				; XREF: Obj2F_TypeIndex
0000B4CC 1038 FE64                  		move.b	($FFFFFE64).w,d0
0000B4D0 323C 0030                  		move.w	#$30,d1
0000B4D4 6000                       		bra.s	Obj2F_Move
0000B4D6                            ; ===========================================================================
0000B4D6                            
0000B4D6                            Obj2F_Type03:				; XREF: Obj2F_TypeIndex
0000B4D6 1038 FE68                  		move.b	($FFFFFE68).w,d0
0000B4DA 323C 0040                  		move.w	#$40,d1
0000B4DE 6000                       		bra.s	Obj2F_Move
0000B4E0                            ; ===========================================================================
0000B4E0                            
0000B4E0                            Obj2F_Type04:				; XREF: Obj2F_TypeIndex
0000B4E0 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0000B4E4 323C 0060                  		move.w	#$60,d1
0000B4E8                            
0000B4E8                            Obj2F_Move:
0000B4E8 0828 0003 0028             		btst	#3,$28(a0)
0000B4EE 6700                       		beq.s	loc_AFF2
0000B4F0 4440                       		neg.w	d0
0000B4F2 D041                       		add.w	d1,d0
0000B4F4                            
0000B4F4                            loc_AFF2:
0000B4F4 3228 002C                  		move.w	$2C(a0),d1
0000B4F8 9240                       		sub.w	d0,d1
0000B4FA 3141 000C                  		move.w	d1,$C(a0)	; update position on y-axis
0000B4FE 4E75                       		rts	
0000B500                            ; ===========================================================================
0000B500                            
0000B500                            Obj2F_Type05:				; XREF: Obj2F_TypeIndex
0000B500 1028 0034                  		move.b	$34(a0),d0
0000B504 4A28 0025                  		tst.b	$25(a0)
0000B508 6600                       		bne.s	loc_B010
0000B50A 5500                       		subq.b	#2,d0
0000B50C 6400                       		bcc.s	loc_B01C
0000B50E 7000                       		moveq	#0,d0
0000B510 6000                       		bra.s	loc_B01C
0000B512                            ; ===========================================================================
0000B512                            
0000B512                            loc_B010:
0000B512 5800                       		addq.b	#4,d0
0000B514 0C00 0040                  		cmpi.b	#$40,d0
0000B518 6500                       		bcs.s	loc_B01C
0000B51A 103C 0040                  		move.b	#$40,d0
0000B51E                            
0000B51E                            loc_B01C:
0000B51E 1140 0034                  		move.b	d0,$34(a0)
0000B522 4EB9 0000 2C22             		jsr	(CalcSine).l
0000B528 E848                       		lsr.w	#4,d0
0000B52A 3200                       		move.w	d0,d1
0000B52C D068 002C                  		add.w	$2C(a0),d0
0000B530 3140 000C                  		move.w	d0,$C(a0)
0000B534 0C28 0020 0034             		cmpi.b	#$20,$34(a0)
0000B53A 6600                       		bne.s	loc_B07A
0000B53C 4A28 0035                  		tst.b	$35(a0)
0000B540 6600                       		bne.s	loc_B07A
0000B542 117C 0001 0035             		move.b	#1,$35(a0)
0000B548 6100 0000                  		bsr.w	SingleObjLoad2
0000B54C 6600                       		bne.s	loc_B07A
0000B54E 12BC 0035                  		move.b	#$35,0(a1)	; load sitting flame object
0000B552 3368 0008 0008             		move.w	8(a0),8(a1)
0000B558 3368 002C 002C             		move.w	$2C(a0),$2C(a1)
0000B55E 5069 002C                  		addq.w	#8,$2C(a1)
0000B562 5769 002C                  		subq.w	#3,$2C(a1)
0000B566 0469 0040 0008             		subi.w	#$40,8(a1)
0000B56C 2368 0030 0030             		move.l	$30(a0),$30(a1)
0000B572 2348 0038                  		move.l	a0,$38(a1)
0000B576 2448                       		movea.l	a0,a2
0000B578 6100                       		bsr.s	sub_B09C
0000B57A                            
0000B57A                            loc_B07A:
0000B57A 7400                       		moveq	#0,d2
0000B57C 45E8 0036                  		lea	$36(a0),a2
0000B580 141A                       		move.b	(a2)+,d2
0000B582 5302                       		subq.b	#1,d2
0000B584 6500                       		bcs.s	locret_B09A
0000B586                            
0000B586                            loc_B086:
0000B586 7000                       		moveq	#0,d0
0000B588 101A                       		move.b	(a2)+,d0
0000B58A ED48                       		lsl.w	#6,d0
0000B58C 0640 D000                  		addi.w	#-$3000,d0
0000B590 3240                       		movea.w	d0,a1
0000B592 3341 003C                  		move.w	d1,$3C(a1)
0000B596 51CA FFEE                  		dbf	d2,loc_B086
0000B59A                            
0000B59A                            locret_B09A:
0000B59A 4E75                       		rts	
0000B59C                            
0000B59C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B59C                            
0000B59C                            
0000B59C                            sub_B09C:
0000B59C 45EA 0036                  		lea	$36(a2),a2
0000B5A0 7000                       		moveq	#0,d0
0000B5A2 1012                       		move.b	(a2),d0
0000B5A4 5212                       		addq.b	#1,(a2)
0000B5A6 45F2 0001                  		lea	1(a2,d0.w),a2
0000B5AA 3009                       		move.w	a1,d0
0000B5AC 0440 D000                  		subi.w	#-$3000,d0
0000B5B0 EC48                       		lsr.w	#6,d0
0000B5B2 0240 007F                  		andi.w	#$7F,d0
0000B5B6 1480                       		move.b	d0,(a2)
0000B5B8 4E75                       		rts	
0000B5BA                            ; End of function sub_B09C
0000B5BA                            
0000B5BA                            ; ===========================================================================
0000B5BA                            
0000B5BA                            Obj2F_ChkDel:				; XREF: Obj2F_Display
0000B5BA 4A28 0035                  		tst.b	$35(a0)
0000B5BE 6700                       		beq.s	loc_B0C6
0000B5C0 4A28 0001                  		tst.b	1(a0)
0000B5C4 6A00                       		bpl.s	Obj2F_DelFlames
0000B5C6                            
0000B5C6                            loc_B0C6:
0000B5C6 3028 002A                  		move.w	$2A(a0),d0
0000B5CA 0240 FF80                  		andi.w	#$FF80,d0
0000B5CE 3238 F700                  		move.w	($FFFFF700).w,d1
0000B5D2 0441 0080                  		subi.w	#$80,d1
0000B5D6 0241 FF80                  		andi.w	#$FF80,d1
0000B5DA 9041                       		sub.w	d1,d0
0000B5DC 0C40 0280                  		cmpi.w	#$280,d0
0000B5E0 6200 0000                  		bhi.w	DeleteObject
0000B5E4 4E75                       		rts	
0000B5E6                            ; ===========================================================================
0000B5E6                            
0000B5E6                            Obj2F_DelFlames:			; XREF: Obj2F_ChkDel
0000B5E6 7400                       		moveq	#0,d2
0000B5E8                            
0000B5E8                            loc_B0E8:
0000B5E8 45E8 0036                  		lea	$36(a0),a2
0000B5EC 1412                       		move.b	(a2),d2
0000B5EE 421A                       		clr.b	(a2)+
0000B5F0 5302                       		subq.b	#1,d2
0000B5F2 6500                       		bcs.s	locret_B116
0000B5F4                            
0000B5F4                            loc_B0F4:
0000B5F4 7000                       		moveq	#0,d0
0000B5F6 1012                       		move.b	(a2),d0
0000B5F8 421A                       		clr.b	(a2)+
0000B5FA ED48                       		lsl.w	#6,d0
0000B5FC 0640 D000                  		addi.w	#-$3000,d0
0000B600 3240                       		movea.w	d0,a1
0000B602 6100 0000                  		bsr.w	DeleteObject2
0000B606 51CA FFEC                  		dbf	d2,loc_B0F4
0000B60A 117C 0000 0035             		move.b	#0,$35(a0)
0000B610 117C 0000 0034             		move.b	#0,$34(a0)
0000B616                            
0000B616                            locret_B116:
0000B616 4E75                       		rts	
0000B618                            ; ===========================================================================
0000B618                            ; ---------------------------------------------------------------------------
0000B618                            ; Collision data for large moving platforms (MZ)
0000B618                            ; ---------------------------------------------------------------------------
0000B618                            Obj2F_Data1:	incbin	misc\mz_pfm1.bin
0000B664                            		even
0000B664                            Obj2F_Data2:	incbin	misc\mz_pfm2.bin
0000B690                            		even
0000B690                            Obj2F_Data3:	incbin	misc\mz_pfm3.bin
0000B6DC                            		even
0000B6DC                            ; ===========================================================================
0000B6DC                            ; ---------------------------------------------------------------------------
0000B6DC                            ; Object 35 - fireball that sits on the	floor (MZ)
0000B6DC                            ; (appears when	you walk on sinking platforms)
0000B6DC                            ; ---------------------------------------------------------------------------
0000B6DC                            
0000B6DC                            Obj35:					; XREF: Obj_Index
0000B6DC 7000                       		moveq	#0,d0
0000B6DE 1028 0024                  		move.b	$24(a0),d0
0000B6E2 323B 0000                  		move.w	Obj35_Index(pc,d0.w),d1
0000B6E6 4EFB 1000                  		jmp	Obj35_Index(pc,d1.w)
0000B6EA                            ; ===========================================================================
0000B6EA 0000                       Obj35_Index:	dc.w Obj35_Main-Obj35_Index
0000B6EC 0000                       		dc.w loc_B238-Obj35_Index
0000B6EE 0000                       		dc.w Obj35_Move-Obj35_Index
0000B6F0                            ; ===========================================================================
0000B6F0                            
0000B6F0                            Obj35_Main:				; XREF: Obj35_Index
0000B6F0 5428 0024                  		addq.b	#2,$24(a0)
0000B6F4 217C 0000 0000 0004        		move.l	#Map_obj14,4(a0)
0000B6FC 317C 0345 0002             		move.w	#$345,2(a0)
0000B702 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000B708 117C 0004 0001             		move.b	#4,1(a0)
0000B70E 117C 0001 0018             		move.b	#1,$18(a0)
0000B714 117C 008B 0020             		move.b	#$8B,$20(a0)
0000B71A 117C 0008 0019             		move.b	#8,$19(a0)
0000B720 303C 00C8                  		move.w	#$C8,d0
0000B724 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play flame sound
0000B72A 4A28 0028                  		tst.b	$28(a0)
0000B72E 6700                       		beq.s	loc_B238
0000B730 5428 0024                  		addq.b	#2,$24(a0)
0000B734 6000 0000                  		bra.w	Obj35_Move
0000B738                            ; ===========================================================================
0000B738                            
0000B738                            loc_B238:				; XREF: Obj35_Index
0000B738 2268 0030                  		movea.l	$30(a0),a1
0000B73C 3228 0008                  		move.w	8(a0),d1
0000B740 9268 002A                  		sub.w	$2A(a0),d1
0000B744 0641 000C                  		addi.w	#$C,d1
0000B748 3001                       		move.w	d1,d0
0000B74A E248                       		lsr.w	#1,d0
0000B74C 1031 0000                  		move.b	(a1,d0.w),d0
0000B750 4440                       		neg.w	d0
0000B752 D068 002C                  		add.w	$2C(a0),d0
0000B756 3400                       		move.w	d0,d2
0000B758 D068 003C                  		add.w	$3C(a0),d0
0000B75C 3140 000C                  		move.w	d0,$C(a0)
0000B760 0C41 0084                  		cmpi.w	#$84,d1
0000B764 6400                       		bcc.s	loc_B2B0
0000B766 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000B76E 0C41 0080                  		cmpi.w	#$80,d1
0000B772 6400                       		bcc.s	loc_B2B0
0000B774 2028 0008                  		move.l	8(a0),d0
0000B778 0680 0008 0000             		addi.l	#$80000,d0
0000B77E 0280 000F FFFF             		andi.l	#$FFFFF,d0
0000B784 6600                       		bne.s	loc_B2B0
0000B786 6100 0000                  		bsr.w	SingleObjLoad2
0000B78A 6600                       		bne.s	loc_B2B0
0000B78C 12BC 0035                  		move.b	#$35,0(a1)
0000B790 3368 0008 0008             		move.w	8(a0),8(a1)
0000B796 3342 002C                  		move.w	d2,$2C(a1)
0000B79A 3368 003C 003C             		move.w	$3C(a0),$3C(a1)
0000B7A0 137C 0001 0028             		move.b	#1,$28(a1)
0000B7A6 2468 0038                  		movea.l	$38(a0),a2
0000B7AA 6100 FDF0                  		bsr.w	sub_B09C
0000B7AE                            
0000B7AE                            loc_B2B0:
0000B7AE 6000                       		bra.s	Obj35_Animate
0000B7B0                            ; ===========================================================================
0000B7B0                            
0000B7B0                            Obj35_Move:				; XREF: Obj35_Index
0000B7B0 3028 002C                  		move.w	$2C(a0),d0
0000B7B4 D068 003C                  		add.w	$3C(a0),d0
0000B7B8 3140 000C                  		move.w	d0,$C(a0)
0000B7BC                            
0000B7BC                            Obj35_Animate:				; XREF: loc_B238
0000B7BC 43F9 0000 0000             		lea	(Ani_obj35).l,a1
0000B7C2 6100 F47E                  		bsr.w	AnimateSprite
0000B7C6 6000 0000                  		bra.w	DisplaySprite
0000B7CA                            ; ===========================================================================
0000B7CA                            Ani_obj35:
0000B7CA                            	include "_anim\obj35.asm"
0000B7CA                            ; ---------------------------------------------------------------------------
0000B7CA                            ; Animation script - fireball that sits on the	floor (MZ)
0000B7CA                            ; ---------------------------------------------------------------------------
0000B7CA 0000                       		dc.w byte_B2CE-Ani_obj35
0000B7CC 0500 2001 21FF             byte_B2CE:	dc.b 5,	0, $20,	1, $21,	$FF
0000B7D2                            		even
0000B7D2                            		even
0000B7D2                            
0000B7D2                            ; ---------------------------------------------------------------------------
0000B7D2                            ; Sprite mappings - large moving platforms (MZ)
0000B7D2                            ; ---------------------------------------------------------------------------
0000B7D2                            Map_obj2F:
0000B7D2                            	include "_maps\obj2F.asm"
0000B7D2                            ; ---------------------------------------------------------------------------
0000B7D2                            ; Sprite mappings - large moving platforms (MZ)
0000B7D2                            ; ---------------------------------------------------------------------------
0000B7D2 0000                       		dc.w byte_B2DA-Map_obj2F
0000B7D4 0000                       		dc.w byte_B31C-Map_obj2F
0000B7D6 0000                       		dc.w byte_B34F-Map_obj2F
0000B7D8 0D                         byte_B2DA:	dc.b $D
0000B7D9 D806 0057 C0               		dc.b $D8, 6, 0,	$57, $C0
0000B7DE F005 0053 C0               		dc.b $F0, 5, 0,	$53, $C0
0000B7E3 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000B7E8 D00F 0027 D0               		dc.b $D0, $F, 0, $27, $D0
0000B7ED F00D 0037 D0               		dc.b $F0, $D, 0, $37, $D0
0000B7F2 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000B7F7 D00F 0011 F0               		dc.b $D0, $F, 0, $11, $F0
0000B7FC D00F 003F 10               		dc.b $D0, $F, 0, $3F, $10
0000B801 F00D 004F 10               		dc.b $F0, $D, 0, $4F, $10
0000B806 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000B80B 000F 0001 20               		dc.b 0,	$F, 0, 1, $20
0000B810 D806 0057 30               		dc.b $D8, 6, 0,	$57, $30
0000B815 F005 0053 30               		dc.b $F0, 5, 0,	$53, $30
0000B81A 0A                         byte_B31C:	dc.b $A
0000B81B D00F 0027 C0               		dc.b $D0, $F, 0, $27, $C0
0000B820 F00D 0037 C0               		dc.b $F0, $D, 0, $37, $C0
0000B825 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000B82A C00F 0027 E0               		dc.b $C0, $F, 0, $27, $E0
0000B82F E00D 0037 E0               		dc.b $E0, $D, 0, $37, $E0
0000B834 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000B839 C00F 0011 00               		dc.b $C0, $F, 0, $11, 0
0000B83E E00F 0001 00               		dc.b $E0, $F, 0, 1, 0
0000B843 C00F 003F 20               		dc.b $C0, $F, 0, $3F, $20
0000B848 E00D 004F 20               		dc.b $E0, $D, 0, $4F, $20
0000B84D 06                         byte_B34F:	dc.b 6
0000B84E D00F 0011 E0               		dc.b $D0, $F, 0, $11, $E0
0000B853 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000B858 100F 0001 E0               		dc.b $10, $F, 0, 1, $E0
0000B85D D00F 0011 00               		dc.b $D0, $F, 0, $11, 0
0000B862 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000B867 100F 0001 00               		dc.b $10, $F, 0, 1, 0
0000B86C                            		even
0000B86C                            		even
0000B86C                            
0000B86C                            ; ---------------------------------------------------------------------------
0000B86C                            ; Sprite mappings - lava balls (MZ, SLZ)
0000B86C                            ; ---------------------------------------------------------------------------
0000B86C                            Map_obj14:
0000B86C                            	include "_maps\obj14.asm"
0000B86C                            ; ---------------------------------------------------------------------------
0000B86C                            ; Sprite mappings - lava balls (MZ, SLZ)
0000B86C                            ; ---------------------------------------------------------------------------
0000B86C 0000                       		dc.w byte_B37A-Map_obj14
0000B86E 0000                       		dc.w byte_B380-Map_obj14
0000B870 0000                       		dc.w byte_B386-Map_obj14
0000B872 0000                       		dc.w byte_B38C-Map_obj14
0000B874 0000                       		dc.w byte_B392-Map_obj14
0000B876 0000                       		dc.w byte_B398-Map_obj14
0000B878 01                         byte_B37A:	dc.b 1
0000B879 E807 0000 F8               		dc.b $E8, 7, 0,	0, $F8
0000B87E 01                         byte_B380:	dc.b 1
0000B87F E807 0008 F8               		dc.b $E8, 7, 0,	8, $F8
0000B884 01                         byte_B386:	dc.b 1
0000B885 F006 0010 F8               		dc.b $F0, 6, 0,	$10, $F8
0000B88A 01                         byte_B38C:	dc.b 1
0000B88B F80D 0016 E8               		dc.b $F8, $D, 0, $16, $E8
0000B890 01                         byte_B392:	dc.b 1
0000B891 F80D 001E E8               		dc.b $F8, $D, 0, $1E, $E8
0000B896 01                         byte_B398:	dc.b 1
0000B897 F809 0026 F0               		dc.b $F8, 9, 0,	$26, $F0
0000B89C                            		even
0000B89C                            		even
0000B89C                            
0000B89C                            ; ===========================================================================
0000B89C                            ; ---------------------------------------------------------------------------
0000B89C                            ; Object 30 - large green glassy blocks	(MZ)
0000B89C                            ; ---------------------------------------------------------------------------
0000B89C                            
0000B89C                            Obj30:					; XREF: Obj_Index
0000B89C 7000                       		moveq	#0,d0
0000B89E 1028 0024                  		move.b	$24(a0),d0
0000B8A2 323B 0000                  		move.w	Obj30_Index(pc,d0.w),d1
0000B8A6 4EBB 1000                  		jsr	Obj30_Index(pc,d1.w)
0000B8AA 3028 0008                  		move.w	8(a0),d0
0000B8AE 0240 FF80                  		andi.w	#$FF80,d0
0000B8B2 3238 F700                  		move.w	($FFFFF700).w,d1
0000B8B6 0441 0080                  		subi.w	#$80,d1
0000B8BA 0241 FF80                  		andi.w	#$FF80,d1
0000B8BE 9041                       		sub.w	d1,d0
0000B8C0 0C40 0280                  		cmpi.w	#$280,d0
0000B8C4 6200 0000                  		bhi.w	Obj30_Delete
0000B8C8 6000 0000                  		bra.w	DisplaySprite
0000B8CC                            ; ===========================================================================
0000B8CC                            
0000B8CC                            Obj30_Delete:
0000B8CC 6000 0000                  		bra.w	DeleteObject
0000B8D0                            ; ===========================================================================
0000B8D0 0000                       Obj30_Index:	dc.w Obj30_Main-Obj30_Index
0000B8D2 0000                       		dc.w Obj30_Block012-Obj30_Index
0000B8D4 0000                       		dc.w Obj30_Reflect012-Obj30_Index
0000B8D6 0000                       		dc.w Obj30_Block34-Obj30_Index
0000B8D8 0000                       		dc.w Obj30_Reflect34-Obj30_Index
0000B8DA                            
0000B8DA 0200 00                    Obj30_Vars1:	dc.b 2,	0, 0	; routine num, y-axis dist from	origin,	frame num
0000B8DD 0400 01                    		dc.b 4,	0, 1
0000B8E0 0600 02                    Obj30_Vars2:	dc.b 6,	0, 2
0000B8E3 0800 01                    		dc.b 8,	0, 1
0000B8E6                            ; ===========================================================================
0000B8E6                            
0000B8E6                            Obj30_Main:				; XREF: Obj30_Index
0000B8E6 45F9 0000 B8DA             		lea	(Obj30_Vars1).l,a2
0000B8EC 7201                       		moveq	#1,d1
0000B8EE 117C 0048 0016             		move.b	#$48,$16(a0)
0000B8F4 0C28 0003 0028             		cmpi.b	#3,$28(a0)	; is object type 0/1/2 ?
0000B8FA 6500                       		bcs.s	loc_B40C	; if yes, branch
0000B8FC 45F9 0000 B8E0             		lea	(Obj30_Vars2).l,a2
0000B902 7201                       		moveq	#1,d1
0000B904 117C 0038 0016             		move.b	#$38,$16(a0)
0000B90A                            
0000B90A                            loc_B40C:
0000B90A 2248                       		movea.l	a0,a1
0000B90C 6000                       		bra.s	Obj30_Load	; load main object
0000B90E                            ; ===========================================================================
0000B90E                            
0000B90E                            Obj30_Loop:
0000B90E 6100 0000                  		bsr.w	SingleObjLoad2
0000B912 6600                       		bne.s	loc_B480
0000B914                            
0000B914                            Obj30_Load:				; XREF: Obj30_Main
0000B914 135A 0024                  		move.b	(a2)+,$24(a1)
0000B918 12BC 0030                  		move.b	#$30,0(a1)
0000B91C 3368 0008 0008             		move.w	8(a0),8(a1)
0000B922 101A                       		move.b	(a2)+,d0
0000B924 4880                       		ext.w	d0
0000B926 D068 000C                  		add.w	$C(a0),d0
0000B92A 3340 000C                  		move.w	d0,$C(a1)
0000B92E 237C 0000 0000 0004        		move.l	#Map_obj30,4(a1)
0000B936 337C C38E 0002             		move.w	#$C38E,2(a1)
0000B93C 137C 0004 0001             		move.b	#4,1(a1)
0000B942 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000B948 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000B94E 137C 0020 0019             		move.b	#$20,$19(a1)
0000B954 137C 0004 0018             		move.b	#4,$18(a1)
0000B95A 135A 001A                  		move.b	(a2)+,$1A(a1)
0000B95E 2348 003C                  		move.l	a0,$3C(a1)
0000B962 51C9 FFAA                  		dbf	d1,Obj30_Loop	; repeat once to load "reflection object"
0000B966                            
0000B966 137C 0010 0019             		move.b	#$10,$19(a1)
0000B96C 137C 0003 0018             		move.b	#3,$18(a1)
0000B972 5029 0028                  		addq.b	#8,$28(a1)
0000B976 0229 000F 0028             		andi.b	#$F,$28(a1)
0000B97C                            
0000B97C                            loc_B480:
0000B97C 317C 0090 0032             		move.w	#$90,$32(a0)
0000B982 08E8 0004 0001             		bset	#4,1(a0)
0000B988                            
0000B988                            Obj30_Block012:				; XREF: Obj30_Index
0000B988 6100 0000                  		bsr.w	Obj30_Types
0000B98C 323C 002B                  		move.w	#$2B,d1
0000B990 343C 0048                  		move.w	#$48,d2
0000B994 363C 0049                  		move.w	#$49,d3
0000B998 3828 0008                  		move.w	8(a0),d4
0000B99C 6000 0000                  		bra.w	SolidObject
0000B9A0                            ; ===========================================================================
0000B9A0                            
0000B9A0                            Obj30_Reflect012:			; XREF: Obj30_Index
0000B9A0 2268 003C                  		movea.l	$3C(a0),a1
0000B9A4 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000B9AA 6000 0000                  		bra.w	Obj30_Types
0000B9AE                            ; ===========================================================================
0000B9AE                            
0000B9AE                            Obj30_Block34:				; XREF: Obj30_Index
0000B9AE 6100 0000                  		bsr.w	Obj30_Types
0000B9B2 323C 002B                  		move.w	#$2B,d1
0000B9B6 343C 0038                  		move.w	#$38,d2
0000B9BA 363C 0039                  		move.w	#$39,d3
0000B9BE 3828 0008                  		move.w	8(a0),d4
0000B9C2 6000 0000                  		bra.w	SolidObject
0000B9C6                            ; ===========================================================================
0000B9C6                            
0000B9C6                            Obj30_Reflect34:			; XREF: Obj30_Index
0000B9C6 2268 003C                  		movea.l	$3C(a0),a1
0000B9CA 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000B9D0 3169 000C 0030             		move.w	$C(a1),$30(a0)
0000B9D6 6000 0002                  		bra.w	*+4
0000B9DA                            
0000B9DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B9DA                            
0000B9DA                            
0000B9DA                            Obj30_Types:				; XREF: Obj30_Block012; et al
0000B9DA 7000                       		moveq	#0,d0
0000B9DC 1028 0028                  		move.b	$28(a0),d0
0000B9E0 0240 0007                  		andi.w	#7,d0
0000B9E4 D040                       		add.w	d0,d0
0000B9E6 323B 0000                  		move.w	Obj30_TypeIndex(pc,d0.w),d1
0000B9EA 4EFB 1000                  		jmp	Obj30_TypeIndex(pc,d1.w)
0000B9EE                            ; End of function Obj30_Types
0000B9EE                            
0000B9EE                            ; ===========================================================================
0000B9EE 0000                       Obj30_TypeIndex:dc.w Obj30_Type00-Obj30_TypeIndex
0000B9F0 0000                       		dc.w Obj30_Type01-Obj30_TypeIndex
0000B9F2 0000                       		dc.w Obj30_Type02-Obj30_TypeIndex
0000B9F4 0000                       		dc.w Obj30_Type03-Obj30_TypeIndex
0000B9F6 0000                       		dc.w Obj30_Type04-Obj30_TypeIndex
0000B9F8                            ; ===========================================================================
0000B9F8                            
0000B9F8                            Obj30_Type00:				; XREF: Obj30_TypeIndex
0000B9F8 4E75                       		rts	
0000B9FA                            ; ===========================================================================
0000B9FA                            
0000B9FA                            Obj30_Type01:				; XREF: Obj30_TypeIndex
0000B9FA 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000B9FE 323C 0040                  		move.w	#$40,d1
0000BA02 6000                       		bra.s	loc_B514
0000BA04                            ; ===========================================================================
0000BA04                            
0000BA04                            Obj30_Type02:				; XREF: Obj30_TypeIndex
0000BA04 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BA08 323C 0040                  		move.w	#$40,d1
0000BA0C 4440                       		neg.w	d0
0000BA0E D041                       		add.w	d1,d0
0000BA10                            
0000BA10                            loc_B514:				; XREF: Obj30_Type01
0000BA10 0828 0003 0028             		btst	#3,$28(a0)
0000BA16 6700                       		beq.s	loc_B526
0000BA18 4440                       		neg.w	d0
0000BA1A D041                       		add.w	d1,d0
0000BA1C E208                       		lsr.b	#1,d0
0000BA1E 0640 0020                  		addi.w	#$20,d0
0000BA22                            
0000BA22                            loc_B526:
0000BA22 6000 0000                  		bra.w	loc_B5EE
0000BA26                            ; ===========================================================================
0000BA26                            
0000BA26                            Obj30_Type03:				; XREF: Obj30_TypeIndex
0000BA26 0828 0003 0028             		btst	#3,$28(a0)
0000BA2C 6700                       		beq.s	loc_B53E
0000BA2E 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BA32 0440 0010                  		subi.w	#$10,d0
0000BA36 6000 0000                  		bra.w	loc_B5EE
0000BA3A                            ; ===========================================================================
0000BA3A                            
0000BA3A                            loc_B53E:
0000BA3A 0828 0003 0022             		btst	#3,$22(a0)
0000BA40 6600                       		bne.s	loc_B54E
0000BA42 08A8 0000 0034             		bclr	#0,$34(a0)
0000BA48 6000                       		bra.s	loc_B582
0000BA4A                            ; ===========================================================================
0000BA4A                            
0000BA4A                            loc_B54E:
0000BA4A 4A28 0034                  		tst.b	$34(a0)
0000BA4E 6600                       		bne.s	loc_B582
0000BA50 117C 0001 0034             		move.b	#1,$34(a0)
0000BA56 08E8 0000 0035             		bset	#0,$35(a0)
0000BA5C 6700                       		beq.s	loc_B582
0000BA5E 08E8 0007 0034             		bset	#7,$34(a0)
0000BA64 317C 0010 0036             		move.w	#$10,$36(a0)
0000BA6A 117C 000A 0038             		move.b	#$A,$38(a0)
0000BA70 0C68 0040 0032             		cmpi.w	#$40,$32(a0)
0000BA76 6600                       		bne.s	loc_B582
0000BA78 317C 0040 0036             		move.w	#$40,$36(a0)
0000BA7E                            
0000BA7E                            loc_B582:
0000BA7E 4A28 0034                  		tst.b	$34(a0)
0000BA82 6A00                       		bpl.s	loc_B5AA
0000BA84 4A28 0038                  		tst.b	$38(a0)
0000BA88 6700                       		beq.s	loc_B594
0000BA8A 5328 0038                  		subq.b	#1,$38(a0)
0000BA8E 6600                       		bne.s	loc_B5AA
0000BA90                            
0000BA90                            loc_B594:
0000BA90 4A68 0032                  		tst.w	$32(a0)
0000BA94 6700                       		beq.s	loc_B5A4
0000BA96 5368 0032                  		subq.w	#1,$32(a0)
0000BA9A 5368 0036                  		subq.w	#1,$36(a0)
0000BA9E 6600                       		bne.s	loc_B5AA
0000BAA0                            
0000BAA0                            loc_B5A4:
0000BAA0 08A8 0007 0034             		bclr	#7,$34(a0)
0000BAA6                            
0000BAA6                            loc_B5AA:
0000BAA6 3028 0032                  		move.w	$32(a0),d0
0000BAAA 6000                       		bra.s	loc_B5EE
0000BAAC                            ; ===========================================================================
0000BAAC                            
0000BAAC                            Obj30_Type04:				; XREF: Obj30_TypeIndex
0000BAAC 0828 0003 0028             		btst	#3,$28(a0)
0000BAB2 6700                       		beq.s	Obj30_ChkSwitch
0000BAB4 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BAB8 0440 0010                  		subi.w	#$10,d0
0000BABC 6000                       		bra.s	loc_B5EE
0000BABE                            ; ===========================================================================
0000BABE                            
0000BABE                            Obj30_ChkSwitch:			; XREF: Obj30_Type04
0000BABE 4A28 0034                  		tst.b	$34(a0)
0000BAC2 6600                       		bne.s	loc_B5E0
0000BAC4 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0000BAC8 7000                       		moveq	#0,d0
0000BACA 1028 0028                  		move.b	$28(a0),d0	; load object type number
0000BACE E848                       		lsr.w	#4,d0		; read only the	first nybble
0000BAD0 4A32 0000                  		tst.b	(a2,d0.w)	; has switch number d0 been pressed?
0000BAD4 6700                       		beq.s	loc_B5EA	; if not, branch
0000BAD6 117C 0001 0034             		move.b	#1,$34(a0)
0000BADC                            
0000BADC                            loc_B5E0:
0000BADC 4A68 0032                  		tst.w	$32(a0)
0000BAE0 6700                       		beq.s	loc_B5EA
0000BAE2 5568 0032                  		subq.w	#2,$32(a0)
0000BAE6                            
0000BAE6                            loc_B5EA:
0000BAE6 3028 0032                  		move.w	$32(a0),d0
0000BAEA                            
0000BAEA                            loc_B5EE:
0000BAEA 3228 0030                  		move.w	$30(a0),d1
0000BAEE 9240                       		sub.w	d0,d1
0000BAF0 3141 000C                  		move.w	d1,$C(a0)
0000BAF4 4E75                       		rts	
0000BAF6                            ; ===========================================================================
0000BAF6                            ; ---------------------------------------------------------------------------
0000BAF6                            ; Sprite mappings - large green	glassy blocks (MZ)
0000BAF6                            ; ---------------------------------------------------------------------------
0000BAF6                            Map_obj30:
0000BAF6                            	include "_maps\obj30.asm"
0000BAF6                            ; ---------------------------------------------------------------------------
0000BAF6                            ; Sprite mappings - large green	glassy blocks (MZ)
0000BAF6                            ; ---------------------------------------------------------------------------
0000BAF6 0000                       		dc.w byte_B600-Map_obj30
0000BAF8 0000                       		dc.w byte_B63D-Map_obj30
0000BAFA 0000                       		dc.w byte_B648-Map_obj30
0000BAFC 0C                         byte_B600:	dc.b $C
0000BAFD B80C 0000 E0               		dc.b $B8, $C, 0, 0, $E0
0000BB02 B80C 0800 00               		dc.b $B8, $C, 8, 0, 0
0000BB07 C00F 0004 E0               		dc.b $C0, $F, 0, 4, $E0
0000BB0C C00F 0804 00               		dc.b $C0, $F, 8, 4, 0
0000BB11 E00F 0004 E0               		dc.b $E0, $F, 0, 4, $E0
0000BB16 E00F 0804 00               		dc.b $E0, $F, 8, 4, 0
0000BB1B 000F 0004 E0               		dc.b 0,	$F, 0, 4, $E0
0000BB20 000F 0804 00               		dc.b 0,	$F, 8, 4, 0
0000BB25 200F 0004 E0               		dc.b $20, $F, 0, 4, $E0
0000BB2A 200F 0804 00               		dc.b $20, $F, 8, 4, 0
0000BB2F 400C 1000 E0               		dc.b $40, $C, $10, 0, $E0
0000BB34 400C 1800 00               		dc.b $40, $C, $18, 0, 0
0000BB39 02                         byte_B63D:	dc.b 2
0000BB3A 0806 0014 F0               		dc.b 8,	6, 0, $14, $F0
0000BB3F 0006 0014 00               		dc.b 0,	6, 0, $14, 0
0000BB44 0A                         byte_B648:	dc.b $A
0000BB45 C80C 0000 E0               		dc.b $C8, $C, 0, 0, $E0
0000BB4A C80C 0800 00               		dc.b $C8, $C, 8, 0, 0
0000BB4F D00F 0004 E0               		dc.b $D0, $F, 0, 4, $E0
0000BB54 D00F 0804 00               		dc.b $D0, $F, 8, 4, 0
0000BB59 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
0000BB5E F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
0000BB63 100F 0004 E0               		dc.b $10, $F, 0, 4, $E0
0000BB68 100F 0804 00               		dc.b $10, $F, 8, 4, 0
0000BB6D 300C 1000 E0               		dc.b $30, $C, $10, 0, $E0
0000BB72 300C 1800 00               		dc.b $30, $C, $18, 0, 0
0000BB78 00                         		even
0000BB78 00                         		even
0000BB78                            
0000BB78                            ; ===========================================================================
0000BB78                            ; ---------------------------------------------------------------------------
0000BB78                            ; Object 31 - stomping metal blocks on chains (MZ)
0000BB78                            ; ---------------------------------------------------------------------------
0000BB78                            
0000BB78                            Obj31:					; XREF: Obj_Index
0000BB78 7000                       		moveq	#0,d0
0000BB7A 1028 0024                  		move.b	$24(a0),d0
0000BB7E 323B 0000                  		move.w	Obj31_Index(pc,d0.w),d1
0000BB82 4EFB 1000                  		jmp	Obj31_Index(pc,d1.w)
0000BB86                            ; ===========================================================================
0000BB86 0000                       Obj31_Index:	dc.w Obj31_Main-Obj31_Index
0000BB88 0000                       		dc.w loc_B798-Obj31_Index
0000BB8A 0000                       		dc.w loc_B7FE-Obj31_Index
0000BB8C 0000                       		dc.w Obj31_Display2-Obj31_Index
0000BB8E 0000                       		dc.w loc_B7E2-Obj31_Index
0000BB90                            
0000BB90 0000                       Obj31_SwchNums:	dc.b 0,	0		; switch number, obj number
0000BB92 0100                       		dc.b 1,	0
0000BB94                            
0000BB94 0200 00                    Obj31_Var:	dc.b 2,	0, 0		; XREF: ROM:0000B6E0o
0000BB97 041C 01                    		dc.b 4,	$1C, 1		; routine number, y-position, frame number
0000BB9A 08CC 03                    		dc.b 8,	$CC, 3
0000BB9D 06F0 02                    		dc.b 6,	$F0, 2
0000BBA0                            
0000BBA0 7000 A000                  word_B6A4:	dc.w $7000, $A000
0000BBA4 5000 7800                  		dc.w $5000, $7800
0000BBA8 3800 5800                  		dc.w $3800, $5800
0000BBAC B800                       		dc.w $B800
0000BBAE                            ; ===========================================================================
0000BBAE                            
0000BBAE                            Obj31_Main:				; XREF: Obj31_Index
0000BBAE 7000                       		moveq	#0,d0
0000BBB0 1028 0028                  		move.b	$28(a0),d0
0000BBB4 6A00                       		bpl.s	loc_B6CE
0000BBB6 0240 007F                  		andi.w	#$7F,d0
0000BBBA D040                       		add.w	d0,d0
0000BBBC 45FB 00D2                  		lea	Obj31_SwchNums(pc,d0.w),a2
0000BBC0 115A 003A                  		move.b	(a2)+,$3A(a0)
0000BBC4 101A                       		move.b	(a2)+,d0
0000BBC6 1140 0028                  		move.b	d0,$28(a0)
0000BBCA                            
0000BBCA                            loc_B6CE:
0000BBCA 0200 000F                  		andi.b	#$F,d0
0000BBCE D040                       		add.w	d0,d0
0000BBD0 343B 00CE                  		move.w	word_B6A4(pc,d0.w),d2
0000BBD4 4A40                       		tst.w	d0
0000BBD6 6600                       		bne.s	loc_B6E0
0000BBD8 3142 0032                  		move.w	d2,$32(a0)
0000BBDC                            
0000BBDC                            loc_B6E0:
0000BBDC 45F9 0000 BB94             		lea	(Obj31_Var).l,a2
0000BBE2 2248                       		movea.l	a0,a1
0000BBE4 7203                       		moveq	#3,d1
0000BBE6 6000                       		bra.s	Obj31_MakeStomper
0000BBE8                            ; ===========================================================================
0000BBE8                            
0000BBE8                            Obj31_Loop:
0000BBE8 6100 0000                  		bsr.w	SingleObjLoad2
0000BBEC 6600 0000                  		bne.w	Obj31_SetSize
0000BBF0                            
0000BBF0                            Obj31_MakeStomper:			; XREF: Obj31_Main
0000BBF0 135A 0024                  		move.b	(a2)+,$24(a1)
0000BBF4 12BC 0031                  		move.b	#$31,0(a1)
0000BBF8 3368 0008 0008             		move.w	8(a0),8(a1)
0000BBFE 101A                       		move.b	(a2)+,d0
0000BC00 4880                       		ext.w	d0
0000BC02 D068 000C                  		add.w	$C(a0),d0
0000BC06 3340 000C                  		move.w	d0,$C(a1)
0000BC0A 237C 0000 0000 0004        		move.l	#Map_obj31,4(a1)
0000BC12 337C 0300 0002             		move.w	#$300,2(a1)
0000BC18 137C 0004 0001             		move.b	#4,1(a1)
0000BC1E 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000BC24 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000BC2A 137C 0010 0019             		move.b	#$10,$19(a1)
0000BC30 3342 0034                  		move.w	d2,$34(a1)
0000BC34 137C 0004 0018             		move.b	#4,$18(a1)
0000BC3A 135A 001A                  		move.b	(a2)+,$1A(a1)
0000BC3E 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
0000BC44 6600                       		bne.s	loc_B76A
0000BC46 5341                       		subq.w	#1,d1
0000BC48 1028 0028                  		move.b	$28(a0),d0
0000BC4C 0240 00F0                  		andi.w	#$F0,d0
0000BC50 0C40 0020                  		cmpi.w	#$20,d0
0000BC54 679A                       		beq.s	Obj31_MakeStomper
0000BC56 137C 0038 0019             		move.b	#$38,$19(a1)
0000BC5C 137C 0090 0020             		move.b	#$90,$20(a1)
0000BC62 5241                       		addq.w	#1,d1
0000BC64                            
0000BC64                            loc_B76A:
0000BC64 2348 003C                  		move.l	a0,$3C(a1)
0000BC68 51C9 FF7E                  		dbf	d1,Obj31_Loop
0000BC6C                            
0000BC6C 137C 0003 0018             		move.b	#3,$18(a1)
0000BC72                            
0000BC72                            Obj31_SetSize:
0000BC72 7000                       		moveq	#0,d0
0000BC74 1028 0028                  		move.b	$28(a0),d0
0000BC78 E648                       		lsr.w	#3,d0
0000BC7A 0200 000E                  		andi.b	#$E,d0
0000BC7E 45FB 0000                  		lea	Obj31_Var2(pc,d0.w),a2
0000BC82 115A 0019                  		move.b	(a2)+,$19(a0)
0000BC86 115A 001A                  		move.b	(a2)+,$1A(a0)
0000BC8A 6000                       		bra.s	loc_B798
0000BC8C                            ; ===========================================================================
0000BC8C 3800                       Obj31_Var2:	dc.b $38, 0		; width, frame number
0000BC8E 3009                       		dc.b $30, 9
0000BC90 100A                       		dc.b $10, $A
0000BC92                            ; ===========================================================================
0000BC92                            
0000BC92                            loc_B798:				; XREF: Obj31_Index
0000BC92 6100 0000                  		bsr.w	Obj31_Types
0000BC96 31E8 000C F7A4             		move.w	$C(a0),($FFFFF7A4).w
0000BC9C 7200                       		moveq	#0,d1
0000BC9E 1228 0019                  		move.b	$19(a0),d1
0000BCA2 0641 000B                  		addi.w	#$B,d1
0000BCA6 343C 000C                  		move.w	#$C,d2
0000BCAA 363C 000D                  		move.w	#$D,d3
0000BCAE 3828 0008                  		move.w	8(a0),d4
0000BCB2 6100 0000                  		bsr.w	SolidObject
0000BCB6 0828 0003 0022             		btst	#3,$22(a0)
0000BCBC 6700                       		beq.s	Obj31_Display
0000BCBE 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000BCC4 6400                       		bcc.s	Obj31_Display
0000BCC6 2448                       		movea.l	a0,a2
0000BCC8 41F8 D000                  		lea	($FFFFD000).w,a0
0000BCCC 4EB9 0000 0000             		jsr	KillSonic
0000BCD2 204A                       		movea.l	a2,a0
0000BCD4                            
0000BCD4                            Obj31_Display:
0000BCD4 6100 0000                  		bsr.w	DisplaySprite
0000BCD8 6000 0000                  		bra.w	Obj31_ChkDel
0000BCDC                            ; ===========================================================================
0000BCDC                            
0000BCDC                            loc_B7E2:				; XREF: Obj31_Index
0000BCDC 117C 0080 0016             		move.b	#$80,$16(a0)
0000BCE2 08E8 0004 0001             		bset	#4,1(a0)
0000BCE8 2268 003C                  		movea.l	$3C(a0),a1
0000BCEC 1029 0032                  		move.b	$32(a1),d0
0000BCF0 EA08                       		lsr.b	#5,d0
0000BCF2 5600                       		addq.b	#3,d0
0000BCF4 1140 001A                  		move.b	d0,$1A(a0)
0000BCF8                            
0000BCF8                            loc_B7FE:				; XREF: Obj31_Index
0000BCF8 2268 003C                  		movea.l	$3C(a0),a1
0000BCFC 7000                       		moveq	#0,d0
0000BCFE 1029 0032                  		move.b	$32(a1),d0
0000BD02 D068 0030                  		add.w	$30(a0),d0
0000BD06 3140 000C                  		move.w	d0,$C(a0)
0000BD0A                            
0000BD0A                            Obj31_Display2:				; XREF: Obj31_Index
0000BD0A 6100 0000                  		bsr.w	DisplaySprite
0000BD0E                            
0000BD0E                            Obj31_ChkDel:				; XREF: Obj31_Display
0000BD0E 3028 0008                  		move.w	8(a0),d0
0000BD12 0240 FF80                  		andi.w	#$FF80,d0
0000BD16 3238 F700                  		move.w	($FFFFF700).w,d1
0000BD1A 0441 0080                  		subi.w	#$80,d1
0000BD1E 0241 FF80                  		andi.w	#$FF80,d1
0000BD22 9041                       		sub.w	d1,d0
0000BD24 0C40 0280                  		cmpi.w	#$280,d0
0000BD28 6200 0000                  		bhi.w	DeleteObject
0000BD2C 4E75                       		rts	
0000BD2E                            ; ===========================================================================
0000BD2E                            
0000BD2E                            Obj31_Types:				; XREF: loc_B798
0000BD2E 1028 0028                  		move.b	$28(a0),d0
0000BD32 0240 000F                  		andi.w	#$F,d0
0000BD36 D040                       		add.w	d0,d0
0000BD38 323B 0000                  		move.w	Obj31_TypeIndex(pc,d0.w),d1
0000BD3C 4EFB 1000                  		jmp	Obj31_TypeIndex(pc,d1.w)
0000BD40                            ; ===========================================================================
0000BD40 0000                       Obj31_TypeIndex:dc.w Obj31_Type00-Obj31_TypeIndex
0000BD42 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BD44 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BD46 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000BD48 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BD4A 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000BD4C 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BD4E                            ; ===========================================================================
0000BD4E                            
0000BD4E                            Obj31_Type00:				; XREF: Obj31_TypeIndex
0000BD4E 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
0000BD52 7000                       		moveq	#0,d0
0000BD54 1028 003A                  		move.b	$3A(a0),d0	; move number 0	or 1 to	d0
0000BD58 4A32 0000                  		tst.b	(a2,d0.w)	; has switch (d0) been pressed?
0000BD5C 6700                       		beq.s	loc_B8A8	; if not, branch
0000BD5E 4A78 F7A4                  		tst.w	($FFFFF7A4).w
0000BD62 6A00                       		bpl.s	loc_B872
0000BD64 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000BD6A 6700                       		beq.s	loc_B8A0
0000BD6C                            
0000BD6C                            loc_B872:
0000BD6C 4A68 0032                  		tst.w	$32(a0)
0000BD70 6700                       		beq.s	loc_B8A0
0000BD72 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000BD76 0200 000F                  		andi.b	#$F,d0
0000BD7A 6600                       		bne.s	loc_B892
0000BD7C 4A28 0001                  		tst.b	1(a0)
0000BD80 6A00                       		bpl.s	loc_B892
0000BD82 303C 00C7                  		move.w	#$C7,d0
0000BD86 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000BD8C                            
0000BD8C                            loc_B892:
0000BD8C 0468 0080 0032             		subi.w	#$80,$32(a0)
0000BD92 6400                       		bcc.s	Obj31_Restart
0000BD94 317C 0000 0032             		move.w	#0,$32(a0)
0000BD9A                            
0000BD9A                            loc_B8A0:
0000BD9A 317C 0000 0012             		move.w	#0,$12(a0)
0000BDA0 6000                       		bra.s	Obj31_Restart
0000BDA2                            ; ===========================================================================
0000BDA2                            
0000BDA2                            loc_B8A8:				; XREF: Obj31_Type00
0000BDA2 3228 0034                  		move.w	$34(a0),d1
0000BDA6 B268 0032                  		cmp.w	$32(a0),d1
0000BDAA 6700                       		beq.s	Obj31_Restart
0000BDAC 3028 0012                  		move.w	$12(a0),d0
0000BDB0 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000BDB6 D168 0032                  		add.w	d0,$32(a0)
0000BDBA B268 0032                  		cmp.w	$32(a0),d1
0000BDBE 6200                       		bhi.s	Obj31_Restart
0000BDC0 3141 0032                  		move.w	d1,$32(a0)
0000BDC4 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000BDCA 4A28 0001                  		tst.b	1(a0)
0000BDCE 6A00                       		bpl.s	Obj31_Restart
0000BDD0 303C 00BD                  		move.w	#$BD,d0
0000BDD4 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play stomping sound
0000BDDA                            
0000BDDA                            Obj31_Restart:
0000BDDA 7000                       		moveq	#0,d0
0000BDDC 1028 0032                  		move.b	$32(a0),d0
0000BDE0 D068 0030                  		add.w	$30(a0),d0
0000BDE4 3140 000C                  		move.w	d0,$C(a0)
0000BDE8 4E75                       		rts	
0000BDEA                            ; ===========================================================================
0000BDEA                            
0000BDEA                            Obj31_Type01:				; XREF: Obj31_TypeIndex
0000BDEA 4A68 0036                  		tst.w	$36(a0)
0000BDEE 6700                       		beq.s	loc_B938
0000BDF0 4A68 0038                  		tst.w	$38(a0)
0000BDF4 6700                       		beq.s	loc_B902
0000BDF6 5368 0038                  		subq.w	#1,$38(a0)
0000BDFA 6000                       		bra.s	loc_B97C
0000BDFC                            ; ===========================================================================
0000BDFC                            
0000BDFC                            loc_B902:
0000BDFC 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000BE00 0200 000F                  		andi.b	#$F,d0
0000BE04 6600                       		bne.s	loc_B91C
0000BE06 4A28 0001                  		tst.b	1(a0)
0000BE0A 6A00                       		bpl.s	loc_B91C
0000BE0C 303C 00C7                  		move.w	#$C7,d0
0000BE10 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000BE16                            
0000BE16                            loc_B91C:
0000BE16 0468 0080 0032             		subi.w	#$80,$32(a0)
0000BE1C 6400                       		bcc.s	loc_B97C
0000BE1E 317C 0000 0032             		move.w	#0,$32(a0)
0000BE24 317C 0000 0012             		move.w	#0,$12(a0)
0000BE2A 317C 0000 0036             		move.w	#0,$36(a0)
0000BE30 6000                       		bra.s	loc_B97C
0000BE32                            ; ===========================================================================
0000BE32                            
0000BE32                            loc_B938:				; XREF: Obj31_Type01
0000BE32 3228 0034                  		move.w	$34(a0),d1
0000BE36 B268 0032                  		cmp.w	$32(a0),d1
0000BE3A 6700                       		beq.s	loc_B97C
0000BE3C 3028 0012                  		move.w	$12(a0),d0
0000BE40 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000BE46 D168 0032                  		add.w	d0,$32(a0)
0000BE4A B268 0032                  		cmp.w	$32(a0),d1
0000BE4E 6200                       		bhi.s	loc_B97C
0000BE50 3141 0032                  		move.w	d1,$32(a0)
0000BE54 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000BE5A 317C 0001 0036             		move.w	#1,$36(a0)
0000BE60 317C 003C 0038             		move.w	#$3C,$38(a0)
0000BE66 4A28 0001                  		tst.b	1(a0)
0000BE6A 6A00                       		bpl.s	loc_B97C
0000BE6C 303C 00BD                  		move.w	#$BD,d0
0000BE70 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play stomping sound
0000BE76                            
0000BE76                            loc_B97C:
0000BE76 6000 FF62                  		bra.w	Obj31_Restart
0000BE7A                            ; ===========================================================================
0000BE7A                            
0000BE7A                            Obj31_Type03:				; XREF: Obj31_TypeIndex
0000BE7A 3038 D008                  		move.w	($FFFFD008).w,d0
0000BE7E 9068 0008                  		sub.w	8(a0),d0
0000BE82 6400                       		bcc.s	loc_B98C
0000BE84 4440                       		neg.w	d0
0000BE86                            
0000BE86                            loc_B98C:
0000BE86 0C40 0090                  		cmpi.w	#$90,d0
0000BE8A 6400                       		bcc.s	loc_B996
0000BE8C 5228 0028                  		addq.b	#1,$28(a0)
0000BE90                            
0000BE90                            loc_B996:
0000BE90 6000 FF48                  		bra.w	Obj31_Restart
0000BE94                            ; ===========================================================================
0000BE94                            ; ---------------------------------------------------------------------------
0000BE94                            ; Object 45 - spiked metal block from beta version (MZ)
0000BE94                            ; ---------------------------------------------------------------------------
0000BE94                            
0000BE94                            Obj45:					; XREF: Obj_Index
0000BE94 7000                       		moveq	#0,d0
0000BE96 1028 0024                  		move.b	$24(a0),d0
0000BE9A 323B 0000                  		move.w	Obj45_Index(pc,d0.w),d1
0000BE9E 4EFB 1000                  		jmp	Obj45_Index(pc,d1.w)
0000BEA2                            ; ===========================================================================
0000BEA2 0000                       Obj45_Index:	dc.w Obj45_Main-Obj45_Index
0000BEA4 0000                       		dc.w Obj45_Solid-Obj45_Index
0000BEA6 0000                       		dc.w loc_BA8E-Obj45_Index
0000BEA8 0000                       		dc.w Obj45_Display-Obj45_Index
0000BEAA 0000                       		dc.w loc_BA7A-Obj45_Index
0000BEAC                            
0000BEAC 0204 00                    Obj45_Var:	dc.b	2,   4,	  0	; routine number, x-position, frame number
0000BEAF 04E4 01                    		dc.b	4, $E4,	  1
0000BEB2 0834 03                    		dc.b	8, $34,	  3
0000BEB5 0628 02                    		dc.b	6, $28,	  2
0000BEB8                            
0000BEB8 3800                       word_B9BE:	dc.w $3800
0000BEBA A000                       		dc.w -$6000
0000BEBC 5000                       		dc.w $5000
0000BEBE                            ; ===========================================================================
0000BEBE                            
0000BEBE                            Obj45_Main:				; XREF: Obj45_Index
0000BEBE 7000                       		moveq	#0,d0
0000BEC0 1028 0028                  		move.b	$28(a0),d0
0000BEC4 D040                       		add.w	d0,d0
0000BEC6 343B 00F0                  		move.w	word_B9BE(pc,d0.w),d2
0000BECA 45F9 0000 BEAC             		lea	(Obj45_Var).l,a2
0000BED0 2248                       		movea.l	a0,a1
0000BED2 7203                       		moveq	#3,d1
0000BED4 6000                       		bra.s	Obj45_Load
0000BED6                            ; ===========================================================================
0000BED6                            
0000BED6                            Obj45_Loop:
0000BED6 6100 0000                  		bsr.w	SingleObjLoad2
0000BEDA 6600                       		bne.s	loc_BA52
0000BEDC                            
0000BEDC                            Obj45_Load:				; XREF: Obj45_Main
0000BEDC 135A 0024                  		move.b	(a2)+,$24(a1)
0000BEE0 12BC 0045                  		move.b	#$45,0(a1)
0000BEE4 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000BEEA 101A                       		move.b	(a2)+,d0
0000BEEC 4880                       		ext.w	d0
0000BEEE D068 0008                  		add.w	8(a0),d0
0000BEF2 3340 0008                  		move.w	d0,8(a1)
0000BEF6 237C 0000 0000 0004        		move.l	#Map_obj45,4(a1)
0000BEFE 337C 0300 0002             		move.w	#$300,2(a1)
0000BF04 137C 0004 0001             		move.b	#4,1(a1)
0000BF0A 3369 0008 0030             		move.w	8(a1),$30(a1)
0000BF10 3368 0008 003A             		move.w	8(a0),$3A(a1)
0000BF16 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000BF1C 137C 0020 0019             		move.b	#$20,$19(a1)
0000BF22 3342 0034                  		move.w	d2,$34(a1)
0000BF26 137C 0004 0018             		move.b	#4,$18(a1)
0000BF2C 0C12 0001                  		cmpi.b	#1,(a2)
0000BF30 6600                       		bne.s	loc_BA40
0000BF32 137C 0091 0020             		move.b	#$91,$20(a1)
0000BF38                            
0000BF38                            loc_BA40:
0000BF38 135A 001A                  		move.b	(a2)+,$1A(a1)
0000BF3C 2348 003C                  		move.l	a0,$3C(a1)
0000BF40 51C9 FF94                  		dbf	d1,Obj45_Loop	; repeat 3 times
0000BF44                            
0000BF44 137C 0003 0018             		move.b	#3,$18(a1)
0000BF4A                            
0000BF4A                            loc_BA52:
0000BF4A 117C 0010 0019             		move.b	#$10,$19(a0)
0000BF50                            
0000BF50                            Obj45_Solid:				; XREF: Obj45_Index
0000BF50 3F28 0008                  		move.w	8(a0),-(sp)
0000BF54 6100 0000                  		bsr.w	Obj45_Move
0000BF58 323C 0017                  		move.w	#$17,d1
0000BF5C 343C 0020                  		move.w	#$20,d2
0000BF60 363C 0020                  		move.w	#$20,d3
0000BF64 381F                       		move.w	(sp)+,d4
0000BF66 6100 0000                  		bsr.w	SolidObject
0000BF6A 6100 0000                  		bsr.w	DisplaySprite
0000BF6E 6000 0000                  		bra.w	Obj45_ChkDel
0000BF72                            ; ===========================================================================
0000BF72                            
0000BF72                            loc_BA7A:				; XREF: Obj45_Index
0000BF72 2268 003C                  		movea.l	$3C(a0),a1
0000BF76 1029 0032                  		move.b	$32(a1),d0
0000BF7A 0600 0010                  		addi.b	#$10,d0
0000BF7E EA08                       		lsr.b	#5,d0
0000BF80 5600                       		addq.b	#3,d0
0000BF82 1140 001A                  		move.b	d0,$1A(a0)
0000BF86                            
0000BF86                            loc_BA8E:				; XREF: Obj45_Index
0000BF86 2268 003C                  		movea.l	$3C(a0),a1
0000BF8A 7000                       		moveq	#0,d0
0000BF8C 1029 0032                  		move.b	$32(a1),d0
0000BF90 4440                       		neg.w	d0
0000BF92 D068 0030                  		add.w	$30(a0),d0
0000BF96 3140 0008                  		move.w	d0,8(a0)
0000BF9A                            
0000BF9A                            Obj45_Display:				; XREF: Obj45_Index
0000BF9A 6100 0000                  		bsr.w	DisplaySprite
0000BF9E                            
0000BF9E                            Obj45_ChkDel:				; XREF: Obj45_Solid
0000BF9E 3028 003A                  		move.w	$3A(a0),d0
0000BFA2 0240 FF80                  		andi.w	#$FF80,d0
0000BFA6 3238 F700                  		move.w	($FFFFF700).w,d1
0000BFAA 0441 0080                  		subi.w	#$80,d1
0000BFAE 0241 FF80                  		andi.w	#$FF80,d1
0000BFB2 9041                       		sub.w	d1,d0
0000BFB4 0C40 0280                  		cmpi.w	#$280,d0
0000BFB8 6200 0000                  		bhi.w	DeleteObject
0000BFBC 4E75                       		rts	
0000BFBE                            
0000BFBE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BFBE                            
0000BFBE                            
0000BFBE                            Obj45_Move:				; XREF: Obj45_Solid
0000BFBE 7000                       		moveq	#0,d0
0000BFC0 1028 0028                  		move.b	$28(a0),d0
0000BFC4 D040                       		add.w	d0,d0
0000BFC6 323B 0000                  		move.w	off_BAD6(pc,d0.w),d1
0000BFCA 4EFB 1000                  		jmp	off_BAD6(pc,d1.w)
0000BFCE                            ; End of function Obj45_Move
0000BFCE                            
0000BFCE                            ; ===========================================================================
0000BFCE 0000                       off_BAD6:	dc.w loc_BADA-off_BAD6
0000BFD0 0000                       		dc.w loc_BADA-off_BAD6
0000BFD2                            ; ===========================================================================
0000BFD2                            
0000BFD2                            loc_BADA:				; XREF: off_BAD6
0000BFD2 4A68 0036                  		tst.w	$36(a0)
0000BFD6 6700                       		beq.s	loc_BB08
0000BFD8 4A68 0038                  		tst.w	$38(a0)
0000BFDC 6700                       		beq.s	loc_BAEC
0000BFDE 5368 0038                  		subq.w	#1,$38(a0)
0000BFE2 6000                       		bra.s	loc_BB3C
0000BFE4                            ; ===========================================================================
0000BFE4                            
0000BFE4                            loc_BAEC:
0000BFE4 0468 0080 0032             		subi.w	#$80,$32(a0)
0000BFEA 6400                       		bcc.s	loc_BB3C
0000BFEC 317C 0000 0032             		move.w	#0,$32(a0)
0000BFF2 317C 0000 0010             		move.w	#0,$10(a0)
0000BFF8 317C 0000 0036             		move.w	#0,$36(a0)
0000BFFE 6000                       		bra.s	loc_BB3C
0000C000                            ; ===========================================================================
0000C000                            
0000C000                            loc_BB08:				; XREF: loc_BADA
0000C000 3228 0034                  		move.w	$34(a0),d1
0000C004 B268 0032                  		cmp.w	$32(a0),d1
0000C008 6700                       		beq.s	loc_BB3C
0000C00A 3028 0010                  		move.w	$10(a0),d0
0000C00E 0668 0070 0010             		addi.w	#$70,$10(a0)
0000C014 D168 0032                  		add.w	d0,$32(a0)
0000C018 B268 0032                  		cmp.w	$32(a0),d1
0000C01C 6200                       		bhi.s	loc_BB3C
0000C01E 3141 0032                  		move.w	d1,$32(a0)
0000C022 317C 0000 0010             		move.w	#0,$10(a0)
0000C028 317C 0001 0036             		move.w	#1,$36(a0)
0000C02E 317C 003C 0038             		move.w	#$3C,$38(a0)
0000C034                            
0000C034                            loc_BB3C:
0000C034 7000                       		moveq	#0,d0
0000C036 1028 0032                  		move.b	$32(a0),d0
0000C03A 4440                       		neg.w	d0
0000C03C D068 0030                  		add.w	$30(a0),d0
0000C040 3140 0008                  		move.w	d0,8(a0)
0000C044 4E75                       		rts	
0000C046                            ; ===========================================================================
0000C046                            ; ---------------------------------------------------------------------------
0000C046                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000C046                            ; ---------------------------------------------------------------------------
0000C046                            Map_obj31:
0000C046                            	include "_maps\obj31.asm"
0000C046                            ; ---------------------------------------------------------------------------
0000C046                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000C046                            ; ---------------------------------------------------------------------------
0000C046 0000                       		dc.w byte_BB64-Map_obj31
0000C048 0000                       		dc.w byte_BB7E-Map_obj31
0000C04A 0000                       		dc.w byte_BB98-Map_obj31
0000C04C 0000                       		dc.w byte_BB9E-Map_obj31
0000C04E 0000                       		dc.w byte_BBA9-Map_obj31
0000C050 0000                       		dc.w byte_BBBE-Map_obj31
0000C052 0000                       		dc.w byte_BBDD-Map_obj31
0000C054 0000                       		dc.w byte_BC06-Map_obj31
0000C056 0000                       		dc.w byte_BC06-Map_obj31
0000C058 0000                       		dc.w byte_BC39-Map_obj31
0000C05A 0000                       		dc.w byte_BC53-Map_obj31
0000C05C 05                         byte_BB64:	dc.b 5
0000C05D F406 0000 C8               		dc.b $F4, 6, 0,	0, $C8
0000C062 F40A 0006 D8               		dc.b $F4, $A, 0, 6, $D8
0000C067 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000C06C F40A 0806 10               		dc.b $F4, $A, 8, 6, $10
0000C071 F406 0800 28               		dc.b $F4, 6, 8,	0, $28
0000C076 05                         byte_BB7E:	dc.b 5
0000C077 F003 121F D4               		dc.b $F0, 3, $12, $1F, $D4
0000C07C F003 121F E8               		dc.b $F0, 3, $12, $1F, $E8
0000C081 F003 121F FC               		dc.b $F0, 3, $12, $1F, $FC
0000C086 F003 121F 10               		dc.b $F0, 3, $12, $1F, $10
0000C08B F003 121F 24               		dc.b $F0, 3, $12, $1F, $24
0000C090 01                         byte_BB98:	dc.b 1
0000C091 DC0F 100F F0               		dc.b $DC, $F, $10, $F, $F0
0000C096 02                         byte_BB9E:	dc.b 2
0000C097 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C09C 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C0A1 04                         byte_BBA9:	dc.b 4
0000C0A2 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C0A7 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C0AC 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C0B1 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C0B6 06                         byte_BBBE:	dc.b 6
0000C0B7 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C0BC D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C0C1 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C0C6 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C0CB 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C0D0 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C0D5 08                         byte_BBDD:	dc.b 8
0000C0D6 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000C0DB B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000C0E0 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C0E5 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C0EA E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C0EF F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C0F4 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C0F9 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C0FE 0A                         byte_BC06:	dc.b $A
0000C0FF 8001 003F FC               		dc.b $80, 1, 0,	$3F, $FC
0000C104 9001 003F FC               		dc.b $90, 1, 0,	$3F, $FC
0000C109 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000C10E B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000C113 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C118 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C11D E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C122 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C127 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C12C 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C131 05                         byte_BC39:	dc.b 5
0000C132 F406 0000 D0               		dc.b $F4, 6, 0,	0, $D0
0000C137 F40A 0006 E0               		dc.b $F4, $A, 0, 6, $E0
0000C13C F40A 0806 08               		dc.b $F4, $A, 8, 6, 8
0000C141 F406 0800 20               		dc.b $F4, 6, 8,	0, $20
0000C146 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000C14B 01                         byte_BC53:	dc.b 1
0000C14C EC0F 002F F0               		dc.b $EC, $F, 0, $2F, $F0
0000C152 00                         		even
0000C152 00                         		even
0000C152                            
0000C152                            ; ---------------------------------------------------------------------------
0000C152                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000C152                            ; ---------------------------------------------------------------------------
0000C152                            Map_obj45:
0000C152                            	include "_maps\obj45.asm"
0000C152                            ; ---------------------------------------------------------------------------
0000C152                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000C152                            ; ---------------------------------------------------------------------------
0000C152 0000                       		dc.w byte_BC6C-Map_obj45
0000C154 0000                       		dc.w byte_BC7C-Map_obj45
0000C156 0000                       		dc.w byte_BC8C-Map_obj45
0000C158 0000                       		dc.w byte_BC92-Map_obj45
0000C15A 0000                       		dc.w byte_BC9D-Map_obj45
0000C15C 0000                       		dc.w byte_BCB2-Map_obj45
0000C15E 0000                       		dc.w byte_BCD1-Map_obj45
0000C160 0000                       		dc.w byte_BCFA-Map_obj45
0000C162 0000                       		dc.w byte_BCFA-Map_obj45
0000C164 03                         byte_BC6C:	dc.b 3
0000C165 E00B 001F F4               		dc.b $E0, $B, 0, $1F, $F4
0000C16A 000B 101F F4               		dc.b 0,	$B, $10, $1F, $F4
0000C16F F003 002B 0C               		dc.b $F0, 3, 0,	$2B, $C
0000C174 03                         byte_BC7C:	dc.b 3
0000C175 E80C 121B F0               		dc.b $E8, $C, $12, $1B,	$F0
0000C17A FC0C 121B F0               		dc.b $FC, $C, $12, $1B,	$F0
0000C17F 100C 121B F0               		dc.b $10, $C, $12, $1B,	$F0
0000C184 01                         byte_BC8C:	dc.b 1
0000C185 F003 082B FC               		dc.b $F0, 3, 8,	$2B, $FC
0000C18A 02                         byte_BC92:	dc.b 2
0000C18B F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C190 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C195 04                         byte_BC9D:	dc.b 4
0000C196 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C19B F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C1A0 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C1A5 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C1AA 06                         byte_BCB2:	dc.b 6
0000C1AB F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C1B0 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C1B5 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C1BA F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C1BF F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C1C4 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C1C9 08                         byte_BCD1:	dc.b 8
0000C1CA F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C1CF F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C1D4 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C1D9 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C1DE F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C1E3 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C1E8 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000C1ED F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000C1F2 08                         byte_BCFA:	dc.b 8
0000C1F3 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C1F8 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C1FD F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C202 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C207 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C20C F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C211 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000C216 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000C21B F805 0041 60               		dc.b $F8, 5, 0,	$41, $60
0000C220 F805 0041 70               		dc.b $F8, 5, 0,	$41, $70
0000C226 00                         		even
0000C226 00                         		even
0000C226                            
0000C226                            ; ===========================================================================
0000C226                            ; ---------------------------------------------------------------------------
0000C226                            ; Object 32 - switches (MZ, SYZ, LZ, SBZ)
0000C226                            ; ---------------------------------------------------------------------------
0000C226                            
0000C226                            Obj32:					; XREF: Obj_Index
0000C226 7000                       		moveq	#0,d0
0000C228 1028 0024                  		move.b	$24(a0),d0
0000C22C 323B 0000                  		move.w	Obj32_Index(pc,d0.w),d1
0000C230 4EFB 1000                  		jmp	Obj32_Index(pc,d1.w)
0000C234                            ; ===========================================================================
0000C234 0000                       Obj32_Index:	dc.w Obj32_Main-Obj32_Index
0000C236 0000                       		dc.w Obj32_Pressed-Obj32_Index
0000C238                            ; ===========================================================================
0000C238                            
0000C238                            Obj32_Main:				; XREF: Obj32_Index
0000C238 5428 0024                  		addq.b	#2,$24(a0)
0000C23C 217C 0000 0000 0004        		move.l	#Map_obj32,4(a0)
0000C244 317C 4513 0002             		move.w	#$4513,2(a0)	; MZ specific code
0000C24A 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w
0000C250 6700                       		beq.s	loc_BD60
0000C252 317C 0513 0002             		move.w	#$513,2(a0)	; SYZ, LZ and SBZ specific code
0000C258                            
0000C258                            loc_BD60:
0000C258 117C 0004 0001             		move.b	#4,1(a0)
0000C25E 117C 0010 0019             		move.b	#$10,$19(a0)
0000C264 117C 0004 0018             		move.b	#4,$18(a0)
0000C26A 5668 000C                  		addq.w	#3,$C(a0)
0000C26E                            
0000C26E                            Obj32_Pressed:				; XREF: Obj32_Index
0000C26E 4A28 0001                  		tst.b	1(a0)
0000C272 6A00                       		bpl.s	Obj32_Display
0000C274 323C 001B                  		move.w	#$1B,d1
0000C278 343C 0005                  		move.w	#5,d2
0000C27C 363C 0005                  		move.w	#5,d3
0000C280 3828 0008                  		move.w	8(a0),d4
0000C284 6100 0000                  		bsr.w	SolidObject
0000C288 08A8 0000 001A             		bclr	#0,$1A(a0)	; use "unpressed" frame
0000C28E 1028 0028                  		move.b	$28(a0),d0
0000C292 0240 000F                  		andi.w	#$F,d0
0000C296 47F8 F7E0                  		lea	($FFFFF7E0).w,a3
0000C29A 47F3 0000                  		lea	(a3,d0.w),a3
0000C29E 7600                       		moveq	#0,d3
0000C2A0 0828 0006 0028             		btst	#6,$28(a0)
0000C2A6 6700                       		beq.s	loc_BDB2
0000C2A8 7607                       		moveq	#7,d3
0000C2AA                            
0000C2AA                            loc_BDB2:
0000C2AA 4A28 0028                  		tst.b	$28(a0)
0000C2AE 6A00                       		bpl.s	loc_BDBE
0000C2B0 6100 0000                  		bsr.w	Obj32_MZBlock
0000C2B4 6600                       		bne.s	loc_BDC8
0000C2B6                            
0000C2B6                            loc_BDBE:
0000C2B6 4A28 0025                  		tst.b	$25(a0)
0000C2BA 6600                       		bne.s	loc_BDC8
0000C2BC 0793                       		bclr	d3,(a3)
0000C2BE 6000                       		bra.s	loc_BDDE
0000C2C0                            ; ===========================================================================
0000C2C0                            
0000C2C0                            loc_BDC8:
0000C2C0 4A13                       		tst.b	(a3)
0000C2C2 6600                       		bne.s	loc_BDD6
0000C2C4 303C 00CD                  		move.w	#$CD,d0
0000C2C8 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play switch sound
0000C2CE                            
0000C2CE                            loc_BDD6:
0000C2CE 07D3                       		bset	d3,(a3)
0000C2D0 08E8 0000 001A             		bset	#0,$1A(a0)	; use "pressed"	frame
0000C2D6                            
0000C2D6                            loc_BDDE:
0000C2D6 0828 0005 0028             		btst	#5,$28(a0)
0000C2DC 6700                       		beq.s	Obj32_Display
0000C2DE 5328 001E                  		subq.b	#1,$1E(a0)
0000C2E2 6A00                       		bpl.s	Obj32_Display
0000C2E4 117C 0007 001E             		move.b	#7,$1E(a0)
0000C2EA 0868 0001 001A             		bchg	#1,$1A(a0)
0000C2F0                            
0000C2F0                            Obj32_Display:
0000C2F0 6100 0000                  		bsr.w	DisplaySprite
0000C2F4 3028 0008                  		move.w	8(a0),d0
0000C2F8 0240 FF80                  		andi.w	#$FF80,d0
0000C2FC 3238 F700                  		move.w	($FFFFF700).w,d1
0000C300 0441 0080                  		subi.w	#$80,d1
0000C304 0241 FF80                  		andi.w	#$FF80,d1
0000C308 9041                       		sub.w	d1,d0
0000C30A 0C40 0280                  		cmpi.w	#$280,d0
0000C30E 6200 0000                  		bhi.w	Obj32_Delete
0000C312 4E75                       		rts	
0000C314                            ; ===========================================================================
0000C314                            
0000C314                            Obj32_Delete:
0000C314 6100 0000                  		bsr.w	DeleteObject
0000C318 4E75                       		rts	
0000C31A                            
0000C31A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C31A                            
0000C31A                            
0000C31A                            Obj32_MZBlock:				; XREF: Obj32_Pressed
0000C31A 3F03                       		move.w	d3,-(sp)
0000C31C 3428 0008                  		move.w	8(a0),d2
0000C320 3628 000C                  		move.w	$C(a0),d3
0000C324 0442 0010                  		subi.w	#$10,d2
0000C328 5143                       		subq.w	#8,d3
0000C32A 383C 0020                  		move.w	#$20,d4
0000C32E 3A3C 0010                  		move.w	#$10,d5
0000C332 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking object RAM
0000C336 3C3C 005F                  		move.w	#$5F,d6
0000C33A                            
0000C33A                            Obj32_MZLoop:
0000C33A 4A29 0001                  		tst.b	1(a1)
0000C33E 6A00                       		bpl.s	loc_BE4E
0000C340 0C11 0033                  		cmpi.b	#$33,(a1)	; is the object	a green	MZ block?
0000C344 6700                       		beq.s	loc_BE5E	; if yes, branch
0000C346                            
0000C346                            loc_BE4E:
0000C346 43E9 0040                  		lea	$40(a1),a1	; check	next object
0000C34A 51CE FFEE                  		dbf	d6,Obj32_MZLoop	; repeat $5F times
0000C34E                            
0000C34E 361F                       		move.w	(sp)+,d3
0000C350 7000                       		moveq	#0,d0
0000C352                            
0000C352                            locret_BE5A:
0000C352 4E75                       		rts	
0000C354                            ; ===========================================================================
0000C354 1010                       Obj32_MZData:	dc.b $10, $10
0000C356                            ; ===========================================================================
0000C356                            
0000C356                            loc_BE5E:				; XREF: Obj32_MZBlock
0000C356 7001                       		moveq	#1,d0
0000C358 0240 003F                  		andi.w	#$3F,d0
0000C35C D040                       		add.w	d0,d0
0000C35E 45FB 00F2                  		lea	Obj32_MZData-2(pc,d0.w),a2
0000C362 121A                       		move.b	(a2)+,d1
0000C364 4881                       		ext.w	d1
0000C366 3029 0008                  		move.w	8(a1),d0
0000C36A 9041                       		sub.w	d1,d0
0000C36C 9042                       		sub.w	d2,d0
0000C36E 6400                       		bcc.s	loc_BE80
0000C370 D241                       		add.w	d1,d1
0000C372 D041                       		add.w	d1,d0
0000C374 6500                       		bcs.s	loc_BE84
0000C376 60CE                       		bra.s	loc_BE4E
0000C378                            ; ===========================================================================
0000C378                            
0000C378                            loc_BE80:
0000C378 B044                       		cmp.w	d4,d0
0000C37A 62CA                       		bhi.s	loc_BE4E
0000C37C                            
0000C37C                            loc_BE84:
0000C37C 121A                       		move.b	(a2)+,d1
0000C37E 4881                       		ext.w	d1
0000C380 3029 000C                  		move.w	$C(a1),d0
0000C384 9041                       		sub.w	d1,d0
0000C386 9043                       		sub.w	d3,d0
0000C388 6400                       		bcc.s	loc_BE9A
0000C38A D241                       		add.w	d1,d1
0000C38C D041                       		add.w	d1,d0
0000C38E 6500                       		bcs.s	loc_BE9E
0000C390 60B4                       		bra.s	loc_BE4E
0000C392                            ; ===========================================================================
0000C392                            
0000C392                            loc_BE9A:
0000C392 B045                       		cmp.w	d5,d0
0000C394 62B0                       		bhi.s	loc_BE4E
0000C396                            
0000C396                            loc_BE9E:
0000C396 361F                       		move.w	(sp)+,d3
0000C398 7001                       		moveq	#1,d0
0000C39A 4E75                       		rts	
0000C39C                            ; End of function Obj32_MZBlock
0000C39C                            
0000C39C                            ; ===========================================================================
0000C39C                            ; ---------------------------------------------------------------------------
0000C39C                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000C39C                            ; ---------------------------------------------------------------------------
0000C39C                            Map_obj32:
0000C39C                            	include "_maps\obj32.asm"
0000C39C                            ; ---------------------------------------------------------------------------
0000C39C                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000C39C                            ; ---------------------------------------------------------------------------
0000C39C 0000                       		dc.w byte_BEAC-Map_obj32
0000C39E 0000                       		dc.w byte_BEB7-Map_obj32
0000C3A0 0000                       		dc.w byte_BEC2-Map_obj32
0000C3A2 0000                       		dc.w byte_BEB7-Map_obj32
0000C3A4 02                         byte_BEAC:	dc.b 2
0000C3A5 F505 0000 F0               		dc.b $F5, 5, 0,	0, $F0
0000C3AA F505 0800 00               		dc.b $F5, 5, 8,	0, 0
0000C3AF 02                         byte_BEB7:	dc.b 2
0000C3B0 F505 0004 F0               		dc.b $F5, 5, 0,	4, $F0
0000C3B5 F505 0804 00               		dc.b $F5, 5, 8,	4, 0
0000C3BA 02                         byte_BEC2:	dc.b 2
0000C3BB F505 FFFC F0               		dc.b $F5, 5, $FF, $FC, $F0
0000C3C0 F505 07FC 00               		dc.b $F5, 5, 7,	$FC, 0
0000C3C5 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000C3CA                            		even
0000C3CA                            		even
0000C3CA                            
0000C3CA                            ; ===========================================================================
0000C3CA                            ; ---------------------------------------------------------------------------
0000C3CA                            ; Object 33 - pushable blocks (MZ, LZ)
0000C3CA                            ; ---------------------------------------------------------------------------
0000C3CA                            
0000C3CA                            Obj33:					; XREF: Obj_Index
0000C3CA 7000                       		moveq	#0,d0
0000C3CC 1028 0024                  		move.b	$24(a0),d0
0000C3D0 323B 0000                  		move.w	Obj33_Index(pc,d0.w),d1
0000C3D4 4EFB 1000                  		jmp	Obj33_Index(pc,d1.w)
0000C3D8                            ; ===========================================================================
0000C3D8 0000                       Obj33_Index:	dc.w Obj33_Main-Obj33_Index
0000C3DA 0000                       		dc.w loc_BF6E-Obj33_Index
0000C3DC 0000                       		dc.w loc_C02C-Obj33_Index
0000C3DE                            
0000C3DE 1000                       Obj33_Var:	dc.b $10, 0	; object width,	frame number
0000C3E0 4001                       		dc.b $40, 1
0000C3E2                            ; ===========================================================================
0000C3E2                            
0000C3E2                            Obj33_Main:				; XREF: Obj33_Index
0000C3E2 5428 0024                  		addq.b	#2,$24(a0)
0000C3E6 117C 000F 0016             		move.b	#$F,$16(a0)
0000C3EC 117C 000F 0017             		move.b	#$F,$17(a0)
0000C3F2 217C 0000 0000 0004        		move.l	#Map_obj33,4(a0)
0000C3FA 317C 42B8 0002             		move.w	#$42B8,2(a0)	; MZ specific code
0000C400 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0000C406 6600                       		bne.s	loc_BF16
0000C408 317C 43DE 0002             		move.w	#$43DE,2(a0)	; LZ specific code
0000C40E                            
0000C40E                            loc_BF16:
0000C40E 117C 0004 0001             		move.b	#4,1(a0)
0000C414 117C 0003 0018             		move.b	#3,$18(a0)
0000C41A 3168 0008 0034             		move.w	8(a0),$34(a0)
0000C420 3168 000C 0036             		move.w	$C(a0),$36(a0)
0000C426 7000                       		moveq	#0,d0
0000C428 1028 0028                  		move.b	$28(a0),d0
0000C42C D040                       		add.w	d0,d0
0000C42E 0240 000E                  		andi.w	#$E,d0
0000C432 45FB 00AA                  		lea	Obj33_Var(pc,d0.w),a2
0000C436 115A 0019                  		move.b	(a2)+,$19(a0)
0000C43A 115A 001A                  		move.b	(a2)+,$1A(a0)
0000C43E 4A28 0028                  		tst.b	$28(a0)
0000C442 6700                       		beq.s	Obj33_ChkGone
0000C444 317C C2B8 0002             		move.w	#$C2B8,2(a0)
0000C44A                            
0000C44A                            Obj33_ChkGone:
0000C44A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000C44E 7000                       		moveq	#0,d0
0000C450 1028 0023                  		move.b	$23(a0),d0
0000C454 6700                       		beq.s	loc_BF6E
0000C456 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000C45C 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000C462 6600 0000                  		bne.w	DeleteObject
0000C466                            
0000C466                            loc_BF6E:				; XREF: Obj33_Index
0000C466 4A28 0032                  		tst.b	$32(a0)
0000C46A 6600 0000                  		bne.w	loc_C046
0000C46E 7200                       		moveq	#0,d1
0000C470 1228 0019                  		move.b	$19(a0),d1
0000C474 0641 000B                  		addi.w	#$B,d1
0000C478 343C 0010                  		move.w	#$10,d2
0000C47C 363C 0011                  		move.w	#$11,d3
0000C480 3828 0008                  		move.w	8(a0),d4
0000C484 6100 0000                  		bsr.w	loc_C186
0000C488 0C78 0200 FE10             		cmpi.w	#$200,($FFFFFE10).w ; is the level MZ act 1?
0000C48E 6600                       		bne.s	loc_BFC6	; if not, branch
0000C490 08A8 0007 0028             		bclr	#7,$28(a0)
0000C496 3028 0008                  		move.w	8(a0),d0
0000C49A 0C40 0A20                  		cmpi.w	#$A20,d0
0000C49E 6500                       		bcs.s	loc_BFC6
0000C4A0 0C40 0AA1                  		cmpi.w	#$AA1,d0
0000C4A4 6400                       		bcc.s	loc_BFC6
0000C4A6 3038 F7A4                  		move.w	($FFFFF7A4).w,d0
0000C4AA 0440 001C                  		subi.w	#$1C,d0
0000C4AE 3140 000C                  		move.w	d0,$C(a0)
0000C4B2 08F8 0007 F7A4             		bset	#7,($FFFFF7A4).w
0000C4B8 08E8 0007 0028             		bset	#7,$28(a0)
0000C4BE                            
0000C4BE                            loc_BFC6:
0000C4BE 3028 0008                  		move.w	8(a0),d0
0000C4C2 0240 FF80                  		andi.w	#$FF80,d0
0000C4C6 3238 F700                  		move.w	($FFFFF700).w,d1
0000C4CA 0441 0080                  		subi.w	#$80,d1
0000C4CE 0241 FF80                  		andi.w	#$FF80,d1
0000C4D2 9041                       		sub.w	d1,d0
0000C4D4 0C40 0280                  		cmpi.w	#$280,d0
0000C4D8 6200                       		bhi.s	loc_BFE6
0000C4DA 6000 0000                  		bra.w	DisplaySprite
0000C4DE                            ; ===========================================================================
0000C4DE                            
0000C4DE                            loc_BFE6:
0000C4DE 3028 0034                  		move.w	$34(a0),d0
0000C4E2 0240 FF80                  		andi.w	#$FF80,d0
0000C4E6 3238 F700                  		move.w	($FFFFF700).w,d1
0000C4EA 0441 0080                  		subi.w	#$80,d1
0000C4EE 0241 FF80                  		andi.w	#$FF80,d1
0000C4F2 9041                       		sub.w	d1,d0
0000C4F4 0C40 0280                  		cmpi.w	#$280,d0
0000C4F8 6200                       		bhi.s	loc_C016
0000C4FA 3168 0034 0008             		move.w	$34(a0),8(a0)
0000C500 3168 0036 000C             		move.w	$36(a0),$C(a0)
0000C506 117C 0004 0024             		move.b	#4,$24(a0)
0000C50C 6000                       		bra.s	loc_C02C
0000C50E                            ; ===========================================================================
0000C50E                            
0000C50E                            loc_C016:
0000C50E 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000C512 7000                       		moveq	#0,d0
0000C514 1028 0023                  		move.b	$23(a0),d0
0000C518 6700                       		beq.s	loc_C028
0000C51A 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0000C520                            
0000C520                            loc_C028:
0000C520 6000 0000                  		bra.w	DeleteObject
0000C524                            ; ===========================================================================
0000C524                            
0000C524                            loc_C02C:				; XREF: Obj33_Index
0000C524 6100 0000                  		bsr.w	ChkObjOnScreen2
0000C528 6700                       		beq.s	locret_C044
0000C52A 117C 0002 0024             		move.b	#2,$24(a0)
0000C530 4228 0032                  		clr.b	$32(a0)
0000C534 4268 0010                  		clr.w	$10(a0)
0000C538 4268 0012                  		clr.w	$12(a0)
0000C53C                            
0000C53C                            locret_C044:
0000C53C 4E75                       		rts	
0000C53E                            ; ===========================================================================
0000C53E                            
0000C53E                            loc_C046:				; XREF: loc_BF6E
0000C53E 3F28 0008                  		move.w	8(a0),-(sp)
0000C542 0C28 0004 0025             		cmpi.b	#4,$25(a0)
0000C548 6400                       		bcc.s	loc_C056
0000C54A 6100 0000                  		bsr.w	SpeedToPos
0000C54E                            
0000C54E                            loc_C056:
0000C54E 0828 0001 0022             		btst	#1,$22(a0)
0000C554 6700                       		beq.s	loc_C0A0
0000C556 0668 0018 0012             		addi.w	#$18,$12(a0)
0000C55C 4EB9 0000 0000             		jsr	ObjHitFloor
0000C562 4A41                       		tst.w	d1
0000C564 6A00 0000                  		bpl.w	loc_C09E
0000C568 D368 000C                  		add.w	d1,$C(a0)
0000C56C 4268 0012                  		clr.w	$12(a0)
0000C570 08A8 0001 0022             		bclr	#1,$22(a0)
0000C576 3011                       		move.w	(a1),d0
0000C578 0240 03FF                  		andi.w	#$3FF,d0
0000C57C 0C40 016A                  		cmpi.w	#$16A,d0
0000C580 6500                       		bcs.s	loc_C09E
0000C582 3028 0030                  		move.w	$30(a0),d0
0000C586 E640                       		asr.w	#3,d0
0000C588 3140 0010                  		move.w	d0,$10(a0)
0000C58C 117C 0001 0032             		move.b	#1,$32(a0)
0000C592 4268 000E                  		clr.w	$E(a0)
0000C596                            
0000C596                            loc_C09E:
0000C596 6000                       		bra.s	loc_C0E6
0000C598                            ; ===========================================================================
0000C598                            
0000C598                            loc_C0A0:
0000C598 4A68 0010                  		tst.w	$10(a0)
0000C59C 6700 0000                  		beq.w	loc_C0D6
0000C5A0 6B00                       		bmi.s	loc_C0BC
0000C5A2 7600                       		moveq	#0,d3
0000C5A4 1628 0019                  		move.b	$19(a0),d3
0000C5A8 4EB9 0000 0000             		jsr	ObjHitWallRight
0000C5AE 4A41                       		tst.w	d1		; has block touched a wall?
0000C5B0 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000C5B2 6000                       		bra.s	loc_C0E6
0000C5B4                            ; ===========================================================================
0000C5B4                            
0000C5B4                            loc_C0BC:
0000C5B4 7600                       		moveq	#0,d3
0000C5B6 1628 0019                  		move.b	$19(a0),d3
0000C5BA 4643                       		not.w	d3
0000C5BC 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000C5C2 4A41                       		tst.w	d1		; has block touched a wall?
0000C5C4 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000C5C6 6000                       		bra.s	loc_C0E6
0000C5C8                            ; ===========================================================================
0000C5C8                            
0000C5C8                            Obj33_StopPush:
0000C5C8 4268 0010                  		clr.w	$10(a0)		; stop block moving
0000C5CC 6000                       		bra.s	loc_C0E6
0000C5CE                            ; ===========================================================================
0000C5CE                            
0000C5CE                            loc_C0D6:
0000C5CE 06A8 0000 2001 000C        		addi.l	#$2001,$C(a0)
0000C5D6 0C28 00A0 000F             		cmpi.b	#-$60,$F(a0)
0000C5DC 6400                       		bcc.s	loc_C104
0000C5DE                            
0000C5DE                            loc_C0E6:
0000C5DE 7200                       		moveq	#0,d1
0000C5E0 1228 0019                  		move.b	$19(a0),d1
0000C5E4 0641 000B                  		addi.w	#$B,d1
0000C5E8 343C 0010                  		move.w	#$10,d2
0000C5EC 363C 0011                  		move.w	#$11,d3
0000C5F0 381F                       		move.w	(sp)+,d4
0000C5F2 6100 0000                  		bsr.w	loc_C186
0000C5F6 6100                       		bsr.s	Obj33_ChkLava
0000C5F8 6000 FEC4                  		bra.w	loc_BFC6
0000C5FC                            ; ===========================================================================
0000C5FC                            
0000C5FC                            loc_C104:
0000C5FC 381F                       		move.w	(sp)+,d4
0000C5FE 43F8 D000                  		lea	($FFFFD000).w,a1
0000C602 08A9 0003 0022             		bclr	#3,$22(a1)
0000C608 08A8 0003 0022             		bclr	#3,$22(a0)
0000C60E 6000 FECE                  		bra.w	loc_BFE6
0000C612                            ; ===========================================================================
0000C612                            
0000C612                            Obj33_ChkLava:
0000C612 0C78 0201 FE10             		cmpi.w	#$201,($FFFFFE10).w ; is the level MZ act 2?
0000C618 6600                       		bne.s	Obj33_ChkLava2	; if not, branch
0000C61A 343C FFE0                  		move.w	#-$20,d2
0000C61E 0C68 0DD0 0008             		cmpi.w	#$DD0,8(a0)
0000C624 6700                       		beq.s	Obj33_LoadLava
0000C626 0C68 0CC0 0008             		cmpi.w	#$CC0,8(a0)
0000C62C 6700                       		beq.s	Obj33_LoadLava
0000C62E 0C68 0BA0 0008             		cmpi.w	#$BA0,8(a0)
0000C634 6700                       		beq.s	Obj33_LoadLava
0000C636 4E75                       		rts	
0000C638                            ; ===========================================================================
0000C638                            
0000C638                            Obj33_ChkLava2:
0000C638 0C78 0202 FE10             		cmpi.w	#$202,($FFFFFE10).w ; is the level MZ act 3?
0000C63E 6600                       		bne.s	Obj33_NoLava	; if not, branch
0000C640 343C 0020                  		move.w	#$20,d2
0000C644 0C68 0560 0008             		cmpi.w	#$560,8(a0)
0000C64A 6700                       		beq.s	Obj33_LoadLava
0000C64C 0C68 05C0 0008             		cmpi.w	#$5C0,8(a0)
0000C652 6700                       		beq.s	Obj33_LoadLava
0000C654                            
0000C654                            Obj33_NoLava:
0000C654 4E75                       		rts	
0000C656                            ; ===========================================================================
0000C656                            
0000C656                            Obj33_LoadLava:
0000C656 6100 0000                  		bsr.w	SingleObjLoad
0000C65A 6600                       		bne.s	locret_C184
0000C65C 12BC 004C                  		move.b	#$4C,0(a1)	; load lava geyser object
0000C660 3368 0008 0008             		move.w	8(a0),8(a1)
0000C666 D569 0008                  		add.w	d2,8(a1)
0000C66A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000C670 0669 0010 000C             		addi.w	#$10,$C(a1)
0000C676 2348 003C                  		move.l	a0,$3C(a1)
0000C67A                            
0000C67A                            locret_C184:
0000C67A 4E75                       		rts	
0000C67C                            ; ===========================================================================
0000C67C                            
0000C67C                            loc_C186:				; XREF: loc_BF6E
0000C67C 1028 0025                  		move.b	$25(a0),d0
0000C680 6700 0000                  		beq.w	loc_C218
0000C684 5500                       		subq.b	#2,d0
0000C686 6600                       		bne.s	loc_C1AA
0000C688 6100 B388                  		bsr.w	ExitPlatform
0000C68C 0829 0003 0022             		btst	#3,$22(a1)
0000C692 6600                       		bne.s	loc_C1A4
0000C694 4228 0025                  		clr.b	$25(a0)
0000C698 4E75                       		rts	
0000C69A                            ; ===========================================================================
0000C69A                            
0000C69A                            loc_C1A4:
0000C69A 3404                       		move.w	d4,d2
0000C69C 6000 B8D2                  		bra.w	MvSonicOnPtfm
0000C6A0                            ; ===========================================================================
0000C6A0                            
0000C6A0                            loc_C1AA:
0000C6A0 5500                       		subq.b	#2,d0
0000C6A2 6600                       		bne.s	loc_C1F2
0000C6A4 6100 0000                  		bsr.w	SpeedToPos
0000C6A8 0668 0018 0012             		addi.w	#$18,$12(a0)
0000C6AE 4EB9 0000 0000             		jsr	ObjHitFloor
0000C6B4 4A41                       		tst.w	d1
0000C6B6 6A00 0000                  		bpl.w	locret_C1F0
0000C6BA D368 000C                  		add.w	d1,$C(a0)
0000C6BE 4268 0012                  		clr.w	$12(a0)
0000C6C2 4228 0025                  		clr.b	$25(a0)
0000C6C6 3011                       		move.w	(a1),d0
0000C6C8 0240 03FF                  		andi.w	#$3FF,d0
0000C6CC 0C40 016A                  		cmpi.w	#$16A,d0
0000C6D0 6500                       		bcs.s	locret_C1F0
0000C6D2 3028 0030                  		move.w	$30(a0),d0
0000C6D6 E640                       		asr.w	#3,d0
0000C6D8 3140 0010                  		move.w	d0,$10(a0)
0000C6DC 117C 0001 0032             		move.b	#1,$32(a0)
0000C6E2 4268 000E                  		clr.w	$E(a0)
0000C6E6                            
0000C6E6                            locret_C1F0:
0000C6E6 4E75                       		rts	
0000C6E8                            ; ===========================================================================
0000C6E8                            
0000C6E8                            loc_C1F2:
0000C6E8 6100 0000                  		bsr.w	SpeedToPos
0000C6EC 3028 0008                  		move.w	8(a0),d0
0000C6F0 0240 000C                  		andi.w	#$C,d0
0000C6F4 6600 0000                  		bne.w	locret_C2E4
0000C6F8 0268 FFF0 0008             		andi.w	#-$10,8(a0)
0000C6FE 3168 0010 0030             		move.w	$10(a0),$30(a0)
0000C704 4268 0010                  		clr.w	$10(a0)
0000C708 5528 0025                  		subq.b	#2,$25(a0)
0000C70C 4E75                       		rts	
0000C70E                            ; ===========================================================================
0000C70E                            
0000C70E                            loc_C218:
0000C70E 6100 0000                  		bsr.w	loc_FAC8
0000C712 4A44                       		tst.w	d4
0000C714 6700 0000                  		beq.w	locret_C2E4
0000C718 6B00 0000                  		bmi.w	locret_C2E4
0000C71C 4A28 0032                  		tst.b	$32(a0)
0000C720 6700                       		beq.s	loc_C230
0000C722 6000 0000                  		bra.w	locret_C2E4
0000C726                            ; ===========================================================================
0000C726                            
0000C726                            loc_C230:
0000C726 4A40                       		tst.w	d0
0000C728 6700 0000                  		beq.w	locret_C2E4
0000C72C 6B00                       		bmi.s	loc_C268
0000C72E 0829 0000 0022             		btst	#0,$22(a1)
0000C734 6600 0000                  		bne.w	locret_C2E4
0000C738 3F00                       		move.w	d0,-(sp)
0000C73A 7600                       		moveq	#0,d3
0000C73C 1628 0019                  		move.b	$19(a0),d3
0000C740 4EB9 0000 0000             		jsr	ObjHitWallRight
0000C746 301F                       		move.w	(sp)+,d0
0000C748 4A41                       		tst.w	d1
0000C74A 6B00 0000                  		bmi.w	locret_C2E4
0000C74E 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000C756 7001                       		moveq	#1,d0
0000C758 323C 0040                  		move.w	#$40,d1
0000C75C 6000                       		bra.s	loc_C294
0000C75E                            ; ===========================================================================
0000C75E                            
0000C75E                            loc_C268:
0000C75E 0829 0000 0022             		btst	#0,$22(a1)
0000C764 6700                       		beq.s	locret_C2E4
0000C766 3F00                       		move.w	d0,-(sp)
0000C768 7600                       		moveq	#0,d3
0000C76A 1628 0019                  		move.b	$19(a0),d3
0000C76E 4643                       		not.w	d3
0000C770 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000C776 301F                       		move.w	(sp)+,d0
0000C778 4A41                       		tst.w	d1
0000C77A 6B00                       		bmi.s	locret_C2E4
0000C77C 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
0000C784 70FF                       		moveq	#-1,d0
0000C786 323C FFC0                  		move.w	#-$40,d1
0000C78A                            
0000C78A                            loc_C294:
0000C78A 43F8 D000                  		lea	($FFFFD000).w,a1
0000C78E D169 0008                  		add.w	d0,8(a1)
0000C792 3341 0014                  		move.w	d1,$14(a1)
0000C796 337C 0000 0010             		move.w	#0,$10(a1)
0000C79C 3F00                       		move.w	d0,-(sp)
0000C79E 303C 00A7                  		move.w	#$A7,d0
0000C7A2 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play pushing sound
0000C7A8 301F                       		move.w	(sp)+,d0
0000C7AA 4A28 0028                  		tst.b	$28(a0)
0000C7AE 6B00                       		bmi.s	locret_C2E4
0000C7B0 3F00                       		move.w	d0,-(sp)
0000C7B2 4EB9 0000 0000             		jsr	ObjHitFloor
0000C7B8 301F                       		move.w	(sp)+,d0
0000C7BA 0C41 0004                  		cmpi.w	#4,d1
0000C7BE 6F00                       		ble.s	loc_C2E0
0000C7C0 317C 0400 0010             		move.w	#$400,$10(a0)
0000C7C6 4A40                       		tst.w	d0
0000C7C8 6A00                       		bpl.s	loc_C2D8
0000C7CA 4468 0010                  		neg.w	$10(a0)
0000C7CE                            
0000C7CE                            loc_C2D8:
0000C7CE 117C 0006 0025             		move.b	#6,$25(a0)
0000C7D4 6000                       		bra.s	locret_C2E4
0000C7D6                            ; ===========================================================================
0000C7D6                            
0000C7D6                            loc_C2E0:
0000C7D6 D368 000C                  		add.w	d1,$C(a0)
0000C7DA                            
0000C7DA                            locret_C2E4:
0000C7DA 4E75                       		rts	
0000C7DC                            ; ===========================================================================
0000C7DC                            ; ---------------------------------------------------------------------------
0000C7DC                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000C7DC                            ; ---------------------------------------------------------------------------
0000C7DC                            Map_obj33:
0000C7DC                            	include "_maps\obj33.asm"
0000C7DC                            ; ---------------------------------------------------------------------------
0000C7DC                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000C7DC                            ; ---------------------------------------------------------------------------
0000C7DC 0000                       		dc.w byte_C2EA-Map_obj33
0000C7DE 0000                       		dc.w byte_C2F0-Map_obj33
0000C7E0 01                         byte_C2EA:	dc.b 1
0000C7E1 F00F 0008 F0               		dc.b $F0, $F, 0, 8, $F0	; single block
0000C7E6 04                         byte_C2F0:	dc.b 4
0000C7E7 F00F 0008 C0               		dc.b $F0, $F, 0, 8, $C0	; row of 4 blocks
0000C7EC F00F 0008 E0               		dc.b $F0, $F, 0, 8, $E0
0000C7F1 F00F 0008 00               		dc.b $F0, $F, 0, 8, 0
0000C7F6 F00F 0008 20               		dc.b $F0, $F, 0, 8, $20
0000C7FC 00                         		even
0000C7FC 00                         		even
0000C7FC                            
0000C7FC                            ; ===========================================================================
0000C7FC                            ; ---------------------------------------------------------------------------
0000C7FC                            ; Object 34 - zone title cards
0000C7FC                            ; ---------------------------------------------------------------------------
0000C7FC                            
0000C7FC                            Obj34:					; XREF: Obj_Index
0000C7FC 7000                       		moveq	#0,d0
0000C7FE 1028 0024                  		move.b	$24(a0),d0
0000C802 323B 0000                  		move.w	Obj34_Index(pc,d0.w),d1
0000C806 4EFB 1000                  		jmp	Obj34_Index(pc,d1.w)
0000C80A                            ; ===========================================================================
0000C80A 0000                       Obj34_Index:	dc.w Obj34_CheckSBZ3-Obj34_Index
0000C80C 0000                       		dc.w Obj34_ChkPos-Obj34_Index
0000C80E 0000                       		dc.w Obj34_Wait-Obj34_Index
0000C810 0000                       		dc.w Obj34_Wait-Obj34_Index
0000C812                            ; ===========================================================================
0000C812                            
0000C812                            Obj34_CheckSBZ3:			; XREF: Obj34_Index
0000C812 2248                       		movea.l	a0,a1
0000C814 7000                       		moveq	#0,d0
0000C816 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000C81A 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	SBZ 3
0000C820 6600                       		bne.s	Obj34_CheckFZ
0000C822 7005                       		moveq	#5,d0		; load title card number 5 (SBZ)
0000C824                            
0000C824                            Obj34_CheckFZ:
0000C824 3400                       		move.w	d0,d2
0000C826 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; check if level is	FZ
0000C82C 6600                       		bne.s	Obj34_LoadConfig
0000C82E 7006                       		moveq	#6,d0		; load title card number 6 (FZ)
0000C830 740B                       		moveq	#$B,d2		; use "FINAL" mappings
0000C832                            
0000C832                            Obj34_LoadConfig:
0000C832 47F9 0000 0000             		lea	(Obj34_ConData).l,a3
0000C838 E948                       		lsl.w	#4,d0
0000C83A D6C0                       		adda.w	d0,a3
0000C83C 45F9 0000 0000             		lea	(Obj34_ItemData).l,a2
0000C842 7203                       		moveq	#3,d1
0000C844                            
0000C844                            Obj34_Loop:
0000C844 12BC 0034                  		move.b	#$34,0(a1)
0000C848 3353 0008                  		move.w	(a3),8(a1)	; load start x-position
0000C84C 335B 0032                  		move.w	(a3)+,$32(a1)	; load finish x-position (same as start)
0000C850 335B 0030                  		move.w	(a3)+,$30(a1)	; load main x-position
0000C854 335A 000A                  		move.w	(a2)+,$A(a1)
0000C858 135A 0024                  		move.b	(a2)+,$24(a1)
0000C85C 101A                       		move.b	(a2)+,d0
0000C85E 6600                       		bne.s	Obj34_ActNumber
0000C860 1002                       		move.b	d2,d0
0000C862                            
0000C862                            Obj34_ActNumber:
0000C862 0C00 0007                  		cmpi.b	#7,d0
0000C866 6600                       		bne.s	Obj34_MakeSprite
0000C868 D038 FE11                  		add.b	($FFFFFE11).w,d0
0000C86C 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w
0000C872 6600                       		bne.s	Obj34_MakeSprite
0000C874 5300                       		subq.b	#1,d0
0000C876                            
0000C876                            Obj34_MakeSprite:
0000C876 1340 001A                  		move.b	d0,$1A(a1)	; display frame	number d0
0000C87A 237C 0000 0000 0004        		move.l	#Map_obj34,4(a1)
0000C882 337C 8580 0002             		move.w	#$8580,2(a1)
0000C888 137C 0078 0019             		move.b	#$78,$19(a1)
0000C88E 137C 0000 0001             		move.b	#0,1(a1)
0000C894 137C 0000 0018             		move.b	#0,$18(a1)
0000C89A 337C 003C 001E             		move.w	#60,$1E(a1)	; set time delay to 1 second
0000C8A0 43E9 0040                  		lea	$40(a1),a1	; next object
0000C8A4 51C9 FF9E                  		dbf	d1,Obj34_Loop	; repeat sequence another 3 times
0000C8A8                            
0000C8A8                            Obj34_ChkPos:				; XREF: Obj34_Index
0000C8A8 7210                       		moveq	#$10,d1		; set horizontal speed
0000C8AA 3028 0030                  		move.w	$30(a0),d0
0000C8AE B068 0008                  		cmp.w	8(a0),d0	; has item reached the target position?
0000C8B2 6700                       		beq.s	loc_C3C8	; if yes, branch
0000C8B4 6C00                       		bge.s	Obj34_Move
0000C8B6 4441                       		neg.w	d1
0000C8B8                            
0000C8B8                            Obj34_Move:
0000C8B8 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000C8BC                            
0000C8BC                            loc_C3C8:
0000C8BC 3028 0008                  		move.w	8(a0),d0
0000C8C0 6B00                       		bmi.s	locret_C3D8
0000C8C2 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000C8C6 6400                       		bcc.s	locret_C3D8	; if yes, branch
0000C8C8 6000 0000                  		bra.w	DisplaySprite
0000C8CC                            ; ===========================================================================
0000C8CC                            
0000C8CC                            locret_C3D8:
0000C8CC 4E75                       		rts	
0000C8CE                            ; ===========================================================================
0000C8CE                            
0000C8CE                            Obj34_Wait:				; XREF: Obj34_Index
0000C8CE 4A68 001E                  		tst.w	$1E(a0)		; is time remaining zero?
0000C8D2 6700                       		beq.s	Obj34_ChkPos2	; if yes, branch
0000C8D4 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time
0000C8D8 6000 0000                  		bra.w	DisplaySprite
0000C8DC                            ; ===========================================================================
0000C8DC                            
0000C8DC                            Obj34_ChkPos2:				; XREF: Obj34_Wait
0000C8DC 4A28 0001                  		tst.b	1(a0)
0000C8E0 6A00                       		bpl.s	Obj34_ChangeArt
0000C8E2 7220                       		moveq	#$20,d1
0000C8E4 3028 0032                  		move.w	$32(a0),d0
0000C8E8 B068 0008                  		cmp.w	8(a0),d0	; has item reached the finish position?
0000C8EC 6700                       		beq.s	Obj34_ChangeArt	; if yes, branch
0000C8EE 6C00                       		bge.s	Obj34_Move2
0000C8F0 4441                       		neg.w	d1
0000C8F2                            
0000C8F2                            Obj34_Move2:
0000C8F2 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000C8F6 3028 0008                  		move.w	8(a0),d0
0000C8FA 6B00                       		bmi.s	locret_C412
0000C8FC 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000C900 6400                       		bcc.s	locret_C412	; if yes, branch
0000C902 6000 0000                  		bra.w	DisplaySprite
0000C906                            ; ===========================================================================
0000C906                            
0000C906                            locret_C412:
0000C906 4E75                       		rts	
0000C908                            ; ===========================================================================
0000C908                            
0000C908                            Obj34_ChangeArt:			; XREF: Obj34_ChkPos2
0000C908 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000C90E 6600                       		bne.s	Obj34_Delete
0000C910 7002                       		moveq	#2,d0
0000C912 4EB9 0000 17A0             		jsr	(LoadPLC).l	; load explosion patterns
0000C918 7000                       		moveq	#0,d0
0000C91A 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000C91E 0640 0015                  		addi.w	#$15,d0
0000C922 4EB9 0000 17A0             		jsr	(LoadPLC).l	; load animal patterns
0000C928                            
0000C928                            Obj34_Delete:
0000C928 6000 0000                  		bra.w	DeleteObject
0000C92C                            ; ===========================================================================
0000C92C 00D0                       Obj34_ItemData:	dc.w $D0	; y-axis position
0000C92E 0200                       		dc.b 2,	0	; routine number, frame	number (changes)
0000C930 00E4                       		dc.w $E4
0000C932 0206                       		dc.b 2,	6
0000C934 00EA                       		dc.w $EA
0000C936 0207                       		dc.b 2,	7
0000C938 00E0                       		dc.w $E0
0000C93A 020A                       		dc.b 2,	$A
0000C93C                            ; ---------------------------------------------------------------------------
0000C93C                            ; Title	card configuration data
0000C93C                            ; Format:
0000C93C                            ; 4 bytes per item (YYYY XXXX)
0000C93C                            ; 4 items per level (GREEN HILL, ZONE, ACT X, oval)
0000C93C                            ; ---------------------------------------------------------------------------
0000C93C 0000 0120 FEFC 013C 0414+  Obj34_ConData:	dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000C94C 0000 0120 FEF4 0134 040C+  		dc.w 0,	$120, $FEF4, $134, $40C, $14C, $20C, $14C ; LZ
0000C95C 0000 0120 FEE0 0120 03F8+  		dc.w 0,	$120, $FEE0, $120, $3F8, $138, $1F8, $138 ; MZ
0000C96C 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; SLZ
0000C97C 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SYZ
0000C98C 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SBZ
0000C99C 0000 0120 FEE4 0124 03EC+  		dc.w 0,	$120, $FEE4, $124, $3EC, $3EC, $1EC, $12C ; FZ
0000C9AC                            ; ===========================================================================
0000C9AC                            ; ---------------------------------------------------------------------------
0000C9AC                            ; Object 39 - "GAME OVER" and "TIME OVER"
0000C9AC                            ; ---------------------------------------------------------------------------
0000C9AC                            
0000C9AC                            Obj39:					; XREF: Obj_Index
0000C9AC 7000                       		moveq	#0,d0
0000C9AE 1028 0024                  		move.b	$24(a0),d0
0000C9B2 323B 0000                  		move.w	Obj39_Index(pc,d0.w),d1
0000C9B6 4EFB 1000                  		jmp	Obj39_Index(pc,d1.w)
0000C9BA                            ; ===========================================================================
0000C9BA 0000                       Obj39_Index:	dc.w Obj39_ChkPLC-Obj39_Index
0000C9BC 0000                       		dc.w loc_C50C-Obj39_Index
0000C9BE 0000                       		dc.w Obj39_Wait-Obj39_Index
0000C9C0                            ; ===========================================================================
0000C9C0                            
0000C9C0                            Obj39_ChkPLC:				; XREF: Obj39_Index
0000C9C0 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000C9C4 6700                       		beq.s	Obj39_Main	; if yes, branch
0000C9C6 4E75                       		rts	
0000C9C8                            ; ===========================================================================
0000C9C8                            
0000C9C8                            Obj39_Main:
0000C9C8 5428 0024                  		addq.b	#2,$24(a0)
0000C9CC 317C 0050 0008             		move.w	#$50,8(a0)	; set x-position
0000C9D2 0828 0000 001A             		btst	#0,$1A(a0)	; is the object	"OVER"?
0000C9D8 6700                       		beq.s	loc_C4EC	; if not, branch
0000C9DA 317C 01F0 0008             		move.w	#$1F0,8(a0)	; set x-position for "OVER"
0000C9E0                            
0000C9E0                            loc_C4EC:
0000C9E0 317C 00F0 000A             		move.w	#$F0,$A(a0)
0000C9E6 217C 0000 0000 0004        		move.l	#Map_obj39,4(a0)
0000C9EE 317C 855E 0002             		move.w	#$855E,2(a0)
0000C9F4 117C 0000 0001             		move.b	#0,1(a0)
0000C9FA 117C 0000 0018             		move.b	#0,$18(a0)
0000CA00                            
0000CA00                            loc_C50C:				; XREF: Obj39_Index
0000CA00 7210                       		moveq	#$10,d1		; set horizontal speed
0000CA02 0C68 0120 0008             		cmpi.w	#$120,8(a0)	; has item reached its target position?
0000CA08 6700                       		beq.s	Obj39_SetWait	; if yes, branch
0000CA0A 6500                       		bcs.s	Obj39_Move
0000CA0C 4441                       		neg.w	d1
0000CA0E                            
0000CA0E                            Obj39_Move:
0000CA0E D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CA12 6000 0000                  		bra.w	DisplaySprite
0000CA16                            ; ===========================================================================
0000CA16                            
0000CA16                            Obj39_SetWait:				; XREF: Obj39_Main
0000CA16 317C 02D0 001E             		move.w	#720,$1E(a0)	; set time delay to 12 seconds
0000CA1C 5428 0024                  		addq.b	#2,$24(a0)
0000CA20 4E75                       		rts	
0000CA22                            ; ===========================================================================
0000CA22                            
0000CA22                            Obj39_Wait:				; XREF: Obj39_Index
0000CA22 1038 F605                  		move.b	($FFFFF605).w,d0
0000CA26 0200 0070                  		andi.b	#$70,d0		; is button A, B or C pressed?
0000CA2A 6600                       		bne.s	Obj39_ChgMode	; if yes, branch
0000CA2C 0828 0000 001A             		btst	#0,$1A(a0)
0000CA32 6600                       		bne.s	Obj39_Display
0000CA34 4A68 001E                  		tst.w	$1E(a0)		; has time delay reached zero?
0000CA38 6700                       		beq.s	Obj39_ChgMode	; if yes, branch
0000CA3A 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000CA3E 6000 0000                  		bra.w	DisplaySprite
0000CA42                            ; ===========================================================================
0000CA42                            
0000CA42                            Obj39_ChgMode:				; XREF: Obj39_Wait
0000CA42 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is time over flag set?
0000CA46 6600                       		bne.s	Obj39_ResetLvl	; if yes, branch
0000CA48 11FC 0014 F600             		move.b	#$14,($FFFFF600).w ; set mode to $14 (continue screen)
0000CA4E 4A38 FE18                  		tst.b	($FFFFFE18).w	; do you have any continues?
0000CA52 6600                       		bne.s	Obj39_Display	; if yes, branch
0000CA54 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set mode to 0 (Sega screen)
0000CA5A 6000                       		bra.s	Obj39_Display
0000CA5C                            ; ===========================================================================
0000CA5C                            
0000CA5C                            Obj39_ResetLvl:				; XREF: Obj39_ChgMode
0000CA5C 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000CA62                            
0000CA62                            Obj39_Display:				; XREF: Obj39_ChgMode
0000CA62 6000 0000                  		bra.w	DisplaySprite
0000CA66                            ; ===========================================================================
0000CA66                            ; ---------------------------------------------------------------------------
0000CA66                            ; Object 3A - "SONIC GOT THROUGH" title	card
0000CA66                            ; ---------------------------------------------------------------------------
0000CA66                            
0000CA66                            Obj3A:					; XREF: Obj_Index
0000CA66 7000                       		moveq	#0,d0
0000CA68 1028 0024                  		move.b	$24(a0),d0
0000CA6C 323B 0000                  		move.w	Obj3A_Index(pc,d0.w),d1
0000CA70 4EFB 1000                  		jmp	Obj3A_Index(pc,d1.w)
0000CA74                            ; ===========================================================================
0000CA74 0000                       Obj3A_Index:	dc.w Obj3A_ChkPLC-Obj3A_Index
0000CA76 0000                       		dc.w Obj3A_ChkPos-Obj3A_Index
0000CA78 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000CA7A 0000                       		dc.w Obj3A_TimeBonus-Obj3A_Index
0000CA7C 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000CA7E 0000                       		dc.w Obj3A_NextLevel-Obj3A_Index
0000CA80 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000CA82 0000                       		dc.w Obj3A_ChkPos2-Obj3A_Index
0000CA84 0000                       		dc.w loc_C766-Obj3A_Index
0000CA86                            ; ===========================================================================
0000CA86                            
0000CA86                            Obj3A_ChkPLC:				; XREF: Obj3A_Index
0000CA86 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000CA8A 6700                       		beq.s	Obj3A_Main	; if yes, branch
0000CA8C 4E75                       		rts	
0000CA8E                            ; ===========================================================================
0000CA8E                            
0000CA8E                            Obj3A_Main:
0000CA8E 2248                       		movea.l	a0,a1
0000CA90 45F9 0000 0000             		lea	(Obj3A_Config).l,a2
0000CA96 7206                       		moveq	#6,d1
0000CA98                            
0000CA98                            Obj3A_Loop:
0000CA98 12BC 003A                  		move.b	#$3A,0(a1)
0000CA9C 3352 0008                  		move.w	(a2),8(a1)	; load start x-position
0000CAA0 335A 0032                  		move.w	(a2)+,$32(a1)	; load finish x-position (same as start)
0000CAA4 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000CAA8 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000CAAC 135A 0024                  		move.b	(a2)+,$24(a1)
0000CAB0 101A                       		move.b	(a2)+,d0
0000CAB2 0C00 0006                  		cmpi.b	#6,d0
0000CAB6 6600                       		bne.s	loc_C5CA
0000CAB8 D038 FE11                  		add.b	($FFFFFE11).w,d0 ; add act number to frame number
0000CABC                            
0000CABC                            loc_C5CA:
0000CABC 1340 001A                  		move.b	d0,$1A(a1)
0000CAC0 237C 0000 0000 0004        		move.l	#Map_obj3A,4(a1)
0000CAC8 337C 8580 0002             		move.w	#$8580,2(a1)
0000CACE 137C 0000 0001             		move.b	#0,1(a1)
0000CAD4 43E9 0040                  		lea	$40(a1),a1
0000CAD8 51C9 FFBE                  		dbf	d1,Obj3A_Loop	; repeat 6 times
0000CADC                            
0000CADC                            Obj3A_ChkPos:				; XREF: Obj3A_Index
0000CADC 7210                       		moveq	#$10,d1		; set horizontal speed
0000CADE 3028 0030                  		move.w	$30(a0),d0
0000CAE2 B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000CAE6 6700                       		beq.s	loc_C61A	; if yes, branch
0000CAE8 6C00                       		bge.s	Obj3A_Move
0000CAEA 4441                       		neg.w	d1
0000CAEC                            
0000CAEC                            Obj3A_Move:
0000CAEC D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CAF0                            
0000CAF0                            loc_C5FE:				; XREF: loc_C61A
0000CAF0 3028 0008                  		move.w	8(a0),d0
0000CAF4 6B00                       		bmi.s	locret_C60E
0000CAF6 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CAFA 6400                       		bcc.s	locret_C60E	; if yes, branch
0000CAFC 6000 0000                  		bra.w	DisplaySprite
0000CB00                            ; ===========================================================================
0000CB00                            
0000CB00                            locret_C60E:
0000CB00 4E75                       		rts	
0000CB02                            ; ===========================================================================
0000CB02                            
0000CB02                            loc_C610:				; XREF: loc_C61A
0000CB02 117C 000E 0024             		move.b	#$E,$24(a0)
0000CB08 6000 0000                  		bra.w	Obj3A_ChkPos2
0000CB0C                            ; ===========================================================================
0000CB0C                            
0000CB0C                            loc_C61A:				; XREF: Obj3A_ChkPos
0000CB0C 0C38 000E D724             		cmpi.b	#$E,($FFFFD724).w
0000CB12 67EE                       		beq.s	loc_C610
0000CB14 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000CB1A 66D4                       		bne.s	loc_C5FE
0000CB1C 5428 0024                  		addq.b	#2,$24(a0)
0000CB20 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CB26                            
0000CB26                            Obj3A_Wait:				; XREF: Obj3A_Index
0000CB26 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000CB2A 6600                       		bne.s	Obj3A_Display
0000CB2C 5428 0024                  		addq.b	#2,$24(a0)
0000CB30                            
0000CB30                            Obj3A_Display:
0000CB30 6000 0000                  		bra.w	DisplaySprite
0000CB34                            ; ===========================================================================
0000CB34                            
0000CB34                            Obj3A_TimeBonus:			; XREF: Obj3A_Index
0000CB34 6100 0000                  		bsr.w	DisplaySprite
0000CB38 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set time/ring bonus update flag
0000CB3E 7000                       		moveq	#0,d0
0000CB40 4A78 F7D2                  		tst.w	($FFFFF7D2).w	; is time bonus	= zero?
0000CB44 6700                       		beq.s	Obj3A_RingBonus	; if yes, branch
0000CB46 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000CB4A 0478 000A F7D2             		subi.w	#10,($FFFFF7D2).w ; subtract 10	from time bonus
0000CB50                            
0000CB50                            Obj3A_RingBonus:
0000CB50 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000CB54 6700                       		beq.s	Obj3A_ChkBonus	; if yes, branch
0000CB56 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000CB5A 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000CB60                            
0000CB60                            Obj3A_ChkBonus:
0000CB60 4A40                       		tst.w	d0		; is there any bonus?
0000CB62 6600                       		bne.s	Obj3A_AddBonus	; if yes, branch
0000CB64 303C 00C5                  		move.w	#$C5,d0
0000CB68 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000CB6E 5428 0024                  		addq.b	#2,$24(a0)
0000CB72 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w
0000CB78 6600                       		bne.s	Obj3A_SetDelay
0000CB7A 5828 0024                  		addq.b	#4,$24(a0)
0000CB7E                            
0000CB7E                            Obj3A_SetDelay:
0000CB7E 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CB84                            
0000CB84                            locret_C692:
0000CB84 4E75                       		rts	
0000CB86                            ; ===========================================================================
0000CB86                            
0000CB86                            Obj3A_AddBonus:				; XREF: Obj3A_ChkBonus
0000CB86 4EB9 0000 0000             		jsr	AddPoints
0000CB8C 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000CB90 0200 0003                  		andi.b	#3,d0
0000CB94 66EE                       		bne.s	locret_C692
0000CB96 303C 00CD                  		move.w	#$CD,d0
0000CB9A 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000CBA0                            ; ===========================================================================
0000CBA0                            
0000CBA0                            Obj3A_NextLevel:			; XREF: Obj3A_Index
0000CBA0 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000CBA4 0240 0007                  		andi.w	#7,d0
0000CBA8 E748                       		lsl.w	#3,d0
0000CBAA 1238 FE11                  		move.b	($FFFFFE11).w,d1
0000CBAE 0241 0003                  		andi.w	#3,d1
0000CBB2 D241                       		add.w	d1,d1
0000CBB4 D041                       		add.w	d1,d0
0000CBB6 303B 0000                  		move.w	LevelOrder(pc,d0.w),d0 ; load level from level order array
0000CBBA 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
0000CBBE 4A40                       		tst.w	d0
0000CBC0 6600                       		bne.s	Obj3A_ChkSS
0000CBC2 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set game mode to level (00)
0000CBC8 6000                       		bra.s	Obj3A_Display2
0000CBCA                            ; ===========================================================================
0000CBCA                            
0000CBCA                            Obj3A_ChkSS:				; XREF: Obj3A_NextLevel
0000CBCA 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
0000CBCE 4A38 F7CD                  		tst.b	($FFFFF7CD).w	; has Sonic jumped into	a giant	ring?
0000CBD2 6700                       		beq.s	loc_C6EA	; if not, branch
0000CBD4 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set game mode to Special Stage (10)
0000CBDA 6000                       		bra.s	Obj3A_Display2
0000CBDC                            ; ===========================================================================
0000CBDC                            
0000CBDC                            loc_C6EA:				; XREF: Obj3A_ChkSS
0000CBDC 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000CBE2                            
0000CBE2                            Obj3A_Display2:				; XREF: Obj3A_NextLevel, Obj3A_ChkSS
0000CBE2 6000 0000                  		bra.w	DisplaySprite
0000CBE6                            ; ===========================================================================
0000CBE6                            ; ---------------------------------------------------------------------------
0000CBE6                            ; Level	order array
0000CBE6                            ; ---------------------------------------------------------------------------
0000CBE6                            LevelOrder:	incbin	misc\lvl_ord.bin
0000CC16                            		even
0000CC16                            ; ===========================================================================
0000CC16                            
0000CC16                            Obj3A_ChkPos2:				; XREF: Obj3A_Index
0000CC16 7220                       		moveq	#$20,d1		; set horizontal speed
0000CC18 3028 0032                  		move.w	$32(a0),d0
0000CC1C B068 0008                  		cmp.w	8(a0),d0	; has item reached its finish position?
0000CC20 6700                       		beq.s	Obj3A_SBZ2	; if yes, branch
0000CC22 6C00                       		bge.s	Obj3A_Move2
0000CC24 4441                       		neg.w	d1
0000CC26                            
0000CC26                            Obj3A_Move2:
0000CC26 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CC2A 3028 0008                  		move.w	8(a0),d0
0000CC2E 6B00                       		bmi.s	locret_C748
0000CC30 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CC34 6400                       		bcc.s	locret_C748	; if yes, branch
0000CC36 6000 0000                  		bra.w	DisplaySprite
0000CC3A                            ; ===========================================================================
0000CC3A                            
0000CC3A                            locret_C748:
0000CC3A 4E75                       		rts	
0000CC3C                            ; ===========================================================================
0000CC3C                            
0000CC3C                            Obj3A_SBZ2:				; XREF: Obj3A_ChkPos2
0000CC3C 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000CC42 6600 0000                  		bne.w	DeleteObject
0000CC46 5428 0024                  		addq.b	#2,$24(a0)
0000CC4A 4238 F7CC                  		clr.b	($FFFFF7CC).w	; unlock controls
0000CC4E 303C 008D                  		move.w	#$8D,d0
0000CC52 4EF9 0000 15B6             		jmp	(PlaySound).l	; play FZ music
0000CC58                            ; ===========================================================================
0000CC58                            
0000CC58                            loc_C766:				; XREF: Obj3A_Index
0000CC58 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0000CC5C 0C78 2100 F72A             		cmpi.w	#$2100,($FFFFF72A).w
0000CC62 6700 0000                  		beq.w	DeleteObject
0000CC66 4E75                       		rts	
0000CC68                            ; ===========================================================================
0000CC68 0004 0124 00BC             Obj3A_Config:	dc.w 4,	$124, $BC	; x-start, x-main, y-main
0000CC6E 0200                       		dc.b 2,	0		; routine number, frame	number (changes)
0000CC70 FEE0 0120 00D0             		dc.w $FEE0, $120, $D0
0000CC76 0201                       		dc.b 2,	1
0000CC78 040C 014C 00D6             		dc.w $40C, $14C, $D6
0000CC7E 0206                       		dc.b 2,	6
0000CC80 0520 0120 00EC             		dc.w $520, $120, $EC
0000CC86 0202                       		dc.b 2,	2
0000CC88 0540 0120 00FC             		dc.w $540, $120, $FC
0000CC8E 0203                       		dc.b 2,	3
0000CC90 0560 0120 010C             		dc.w $560, $120, $10C
0000CC96 0204                       		dc.b 2,	4
0000CC98 020C 014C 00CC             		dc.w $20C, $14C, $CC
0000CC9E 0205                       		dc.b 2,	5
0000CCA0                            ; ===========================================================================
0000CCA0                            ; ---------------------------------------------------------------------------
0000CCA0                            ; Object 7E - special stage results screen
0000CCA0                            ; ---------------------------------------------------------------------------
0000CCA0                            
0000CCA0                            Obj7E:					; XREF: Obj_Index
0000CCA0 7000                       		moveq	#0,d0
0000CCA2 1028 0024                  		move.b	$24(a0),d0
0000CCA6 323B 0000                  		move.w	Obj7E_Index(pc,d0.w),d1
0000CCAA 4EFB 1000                  		jmp	Obj7E_Index(pc,d1.w)
0000CCAE                            ; ===========================================================================
0000CCAE 0000                       Obj7E_Index:	dc.w Obj7E_ChkPLC-Obj7E_Index
0000CCB0 0000                       		dc.w Obj7E_ChkPos-Obj7E_Index
0000CCB2 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CCB4 0000                       		dc.w Obj7E_RingBonus-Obj7E_Index
0000CCB6 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CCB8 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000CCBA 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CCBC 0000                       		dc.w Obj7E_Continue-Obj7E_Index
0000CCBE 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CCC0 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000CCC2 0000                       		dc.w loc_C91A-Obj7E_Index
0000CCC4                            ; ===========================================================================
0000CCC4                            
0000CCC4                            Obj7E_ChkPLC:				; XREF: Obj7E_Index
0000CCC4 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000CCC8 6700                       		beq.s	Obj7E_Main	; if yes, branch
0000CCCA 4E75                       		rts	
0000CCCC                            ; ===========================================================================
0000CCCC                            
0000CCCC                            Obj7E_Main:
0000CCCC 2248                       		movea.l	a0,a1
0000CCCE 45F9 0000 0000             		lea	(Obj7E_Config).l,a2
0000CCD4 7203                       		moveq	#3,d1
0000CCD6 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	50 or more rings?
0000CCDC 6500                       		bcs.s	Obj7E_Loop	; if no, branch
0000CCDE 5241                       		addq.w	#1,d1		; if yes, add 1	to d1 (number of sprites)
0000CCE0                            
0000CCE0                            Obj7E_Loop:
0000CCE0 12BC 007E                  		move.b	#$7E,0(a1)
0000CCE4 335A 0008                  		move.w	(a2)+,8(a1)	; load start x-position
0000CCE8 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000CCEC 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000CCF0 135A 0024                  		move.b	(a2)+,$24(a1)
0000CCF4 135A 001A                  		move.b	(a2)+,$1A(a1)
0000CCF8 237C 0000 0000 0004        		move.l	#Map_obj7E,4(a1)
0000CD00 337C 8580 0002             		move.w	#$8580,2(a1)
0000CD06 137C 0000 0001             		move.b	#0,1(a1)
0000CD0C 43E9 0040                  		lea	$40(a1),a1
0000CD10 51C9 FFCE                  		dbf	d1,Obj7E_Loop	; repeat sequence 3 or 4 times
0000CD14                            
0000CD14 7007                       		moveq	#7,d0
0000CD16 1238 FE57                  		move.b	($FFFFFE57).w,d1
0000CD1A 6700                       		beq.s	loc_C842
0000CD1C 7000                       		moveq	#0,d0
0000CD1E 0C01 0006                  		cmpi.b	#6,d1		; do you have all chaos	emeralds?
0000CD22 6600                       		bne.s	loc_C842	; if not, branch
0000CD24 7008                       		moveq	#8,d0		; load "Sonic got them all" text
0000CD26 317C 0018 0008             		move.w	#$18,8(a0)
0000CD2C 317C 0118 0030             		move.w	#$118,$30(a0)	; change position of text
0000CD32                            
0000CD32                            loc_C842:
0000CD32 1140 001A                  		move.b	d0,$1A(a0)
0000CD36                            
0000CD36                            Obj7E_ChkPos:				; XREF: Obj7E_Index
0000CD36 7210                       		moveq	#$10,d1		; set horizontal speed
0000CD38 3028 0030                  		move.w	$30(a0),d0
0000CD3C B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000CD40 6700                       		beq.s	loc_C86C	; if yes, branch
0000CD42 6C00                       		bge.s	Obj7E_Move
0000CD44 4441                       		neg.w	d1
0000CD46                            
0000CD46                            Obj7E_Move:
0000CD46 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CD4A                            
0000CD4A                            loc_C85A:				; XREF: loc_C86C
0000CD4A 3028 0008                  		move.w	8(a0),d0
0000CD4E 6B00                       		bmi.s	locret_C86A
0000CD50 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CD54 6400                       		bcc.s	locret_C86A	; if yes, branch
0000CD56 6000 0000                  		bra.w	DisplaySprite
0000CD5A                            ; ===========================================================================
0000CD5A                            
0000CD5A                            locret_C86A:
0000CD5A 4E75                       		rts	
0000CD5C                            ; ===========================================================================
0000CD5C                            
0000CD5C                            loc_C86C:				; XREF: Obj7E_ChkPos
0000CD5C 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000CD62 66E6                       		bne.s	loc_C85A
0000CD64 5428 0024                  		addq.b	#2,$24(a0)
0000CD68 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CD6E 11FC 007F D800             		move.b	#$7F,($FFFFD800).w ; load chaos	emerald	object
0000CD74                            
0000CD74                            Obj7E_Wait:				; XREF: Obj7E_Index
0000CD74 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000CD78 6600                       		bne.s	Obj7E_Display
0000CD7A 5428 0024                  		addq.b	#2,$24(a0)
0000CD7E                            
0000CD7E                            Obj7E_Display:
0000CD7E 6000 0000                  		bra.w	DisplaySprite
0000CD82                            ; ===========================================================================
0000CD82                            
0000CD82                            Obj7E_RingBonus:			; XREF: Obj7E_Index
0000CD82 6100 0000                  		bsr.w	DisplaySprite
0000CD86 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set ring bonus update flag
0000CD8C 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000CD90 6700                       		beq.s	loc_C8C4	; if yes, branch
0000CD92 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000CD98 700A                       		moveq	#10,d0		; add 10 to score
0000CD9A 4EB9 0000 0000             		jsr	AddPoints
0000CDA0 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000CDA4 0200 0003                  		andi.b	#3,d0
0000CDA8 6600                       		bne.s	locret_C8EA
0000CDAA 303C 00CD                  		move.w	#$CD,d0
0000CDAE 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000CDB4                            ; ===========================================================================
0000CDB4                            
0000CDB4                            loc_C8C4:				; XREF: Obj7E_RingBonus
0000CDB4 303C 00C5                  		move.w	#$C5,d0
0000CDB8 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000CDBE 5428 0024                  		addq.b	#2,$24(a0)
0000CDC2 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CDC8 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000CDCE 6500                       		bcs.s	locret_C8EA	; if not, branch
0000CDD0 317C 003C 001E             		move.w	#60,$1E(a0)	; set time delay to 1 second
0000CDD6 5828 0024                  		addq.b	#4,$24(a0)	; goto "Obj7E_Continue"	routine
0000CDDA                            
0000CDDA                            locret_C8EA:
0000CDDA 4E75                       		rts	
0000CDDC                            ; ===========================================================================
0000CDDC                            
0000CDDC                            Obj7E_Exit:				; XREF: Obj7E_Index
0000CDDC 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000CDE2 6000 0000                  		bra.w	DisplaySprite
0000CDE6                            ; ===========================================================================
0000CDE6                            
0000CDE6                            Obj7E_Continue:				; XREF: Obj7E_Index
0000CDE6 11FC 0004 D6DA             		move.b	#4,($FFFFD6DA).w
0000CDEC 11FC 0014 D6E4             		move.b	#$14,($FFFFD6E4).w
0000CDF2 303C 00BF                  		move.w	#$BF,d0
0000CDF6 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play continues music
0000CDFC 5428 0024                  		addq.b	#2,$24(a0)
0000CE00 317C 0168 001E             		move.w	#360,$1E(a0)	; set time delay to 6 seconds
0000CE06 6000 0000                  		bra.w	DisplaySprite
0000CE0A                            ; ===========================================================================
0000CE0A                            
0000CE0A                            loc_C91A:				; XREF: Obj7E_Index
0000CE0A 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000CE0E 0200 000F                  		andi.b	#$F,d0
0000CE12 6600                       		bne.s	Obj7E_Display2
0000CE14 0868 0000 001A             		bchg	#0,$1A(a0)
0000CE1A                            
0000CE1A                            Obj7E_Display2:
0000CE1A 6000 0000                  		bra.w	DisplaySprite
0000CE1E                            ; ===========================================================================
0000CE1E 0020 0120 00C4             Obj7E_Config:	dc.w $20, $120,	$C4	; start	x-pos, main x-pos, y-pos
0000CE24 0200                       		dc.b 2,	0		; rountine number, frame number
0000CE26 0320 0120 0118             		dc.w $320, $120, $118
0000CE2C 0201                       		dc.b 2,	1
0000CE2E 0360 0120 0128             		dc.w $360, $120, $128
0000CE34 0202                       		dc.b 2,	2
0000CE36 01EC 011C 00C4             		dc.w $1EC, $11C, $C4
0000CE3C 0203                       		dc.b 2,	3
0000CE3E 03A0 0120 0138             		dc.w $3A0, $120, $138
0000CE44 0206                       		dc.b 2,	6
0000CE46                            ; ===========================================================================
0000CE46                            ; ---------------------------------------------------------------------------
0000CE46                            ; Object 7F - chaos emeralds from the special stage results screen
0000CE46                            ; ---------------------------------------------------------------------------
0000CE46                            
0000CE46                            Obj7F:					; XREF: Obj_Index
0000CE46 7000                       		moveq	#0,d0
0000CE48 1028 0024                  		move.b	$24(a0),d0
0000CE4C 323B 0000                  		move.w	Obj7F_Index(pc,d0.w),d1
0000CE50 4EFB 1000                  		jmp	Obj7F_Index(pc,d1.w)
0000CE54                            ; ===========================================================================
0000CE54 0000                       Obj7F_Index:	dc.w Obj7F_Main-Obj7F_Index
0000CE56 0000                       		dc.w Obj7F_Flash-Obj7F_Index
0000CE58                            
0000CE58                            ; ---------------------------------------------------------------------------
0000CE58                            ; X-axis positions for chaos emeralds
0000CE58                            ; ---------------------------------------------------------------------------
0000CE58 0110 0128 00F8 0140 00E0+  Obj7F_PosData:	dc.w $110, $128, $F8, $140, $E0, $158
0000CE64                            ; ===========================================================================
0000CE64                            
0000CE64                            Obj7F_Main:				; XREF: Obj7F_Index
0000CE64 2248                       		movea.l	a0,a1
0000CE66 45F9 0000 CE58             		lea	(Obj7F_PosData).l,a2
0000CE6C 7400                       		moveq	#0,d2
0000CE6E 7200                       		moveq	#0,d1
0000CE70 1238 FE57                  		move.b	($FFFFFE57).w,d1 ; d1 is number	of emeralds
0000CE74 5301                       		subq.b	#1,d1		; subtract 1 from d1
0000CE76 6500 0000                  		bcs.w	DeleteObject	; if you have 0	emeralds, branch
0000CE7A                            
0000CE7A                            Obj7F_Loop:
0000CE7A 12BC 007F                  		move.b	#$7F,0(a1)
0000CE7E 335A 0008                  		move.w	(a2)+,8(a1)	; set x-position
0000CE82 337C 00F0 000A             		move.w	#$F0,$A(a1)	; set y-position
0000CE88 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0000CE8C 1633 2000                  		move.b	(a3,d2.w),d3
0000CE90 1343 001A                  		move.b	d3,$1A(a1)
0000CE94 1343 001C                  		move.b	d3,$1C(a1)
0000CE98 5202                       		addq.b	#1,d2
0000CE9A 5429 0024                  		addq.b	#2,$24(a1)
0000CE9E 237C 0000 0000 0004        		move.l	#Map_obj7F,4(a1)
0000CEA6 337C 8541 0002             		move.w	#$8541,2(a1)
0000CEAC 137C 0000 0001             		move.b	#0,1(a1)
0000CEB2 43E9 0040                  		lea	$40(a1),a1	; next object
0000CEB6 51C9 FFC2                  		dbf	d1,Obj7F_Loop	; loop for d1 number of	emeralds
0000CEBA                            
0000CEBA                            Obj7F_Flash:				; XREF: Obj7F_Index
0000CEBA 1028 001A                  		move.b	$1A(a0),d0
0000CEBE 117C 0006 001A             		move.b	#6,$1A(a0)	; load 6th frame (blank)
0000CEC4 0C00 0006                  		cmpi.b	#6,d0
0000CEC8 6600                       		bne.s	Obj7F_Display
0000CECA 1168 001C 001A             		move.b	$1C(a0),$1A(a0)	; load visible frame
0000CED0                            
0000CED0                            Obj7F_Display:
0000CED0 6000 0000                  		bra.w	DisplaySprite
0000CED4                            ; ===========================================================================
0000CED4                            ; ---------------------------------------------------------------------------
0000CED4                            ; Sprite mappings - zone title cards
0000CED4                            ; ---------------------------------------------------------------------------
0000CED4 0000                       Map_obj34:	dc.w byte_C9FE-Map_obj34
0000CED6 0000                       		dc.w byte_CA2C-Map_obj34
0000CED8 0000                       		dc.w byte_CA5A-Map_obj34
0000CEDA 0000                       		dc.w byte_CA7A-Map_obj34
0000CEDC 0000                       		dc.w byte_CAA8-Map_obj34
0000CEDE 0000                       		dc.w byte_CADC-Map_obj34
0000CEE0 0000                       		dc.w byte_CB10-Map_obj34
0000CEE2 0000                       		dc.w byte_CB26-Map_obj34
0000CEE4 0000                       		dc.w byte_CB31-Map_obj34
0000CEE6 0000                       		dc.w byte_CB3C-Map_obj34
0000CEE8 0000                       		dc.w byte_CB47-Map_obj34
0000CEEA 0000                       		dc.w byte_CB8A-Map_obj34
0000CEEC 0C                         byte_C9FE:	dc.b $C	;  GREEN HILL | CRUNCHY ROLL
0000CEED F805 0008 80               		dc.b $F8, 5, 0, 8, $80		; C
0000CEF2 F805 003A 90               		dc.b $F8, 5, 0, $3A, $90	; R
0000CEF7 F805 0046 A0               		dc.b $F8, 5, 0, $46, $A0	; U
0000CEFC F805 002E B0               		dc.b $F8, 5, 0, $2E, $B0	; N
0000CF01 F805 0008 C0               		dc.b $F8, 5, 0, 8, $C0		; C
0000CF06 F805 001C D0               		dc.b $F8, 5, 0, $1C, $D0	; H
0000CF0B F805 004A E0               		dc.b $F8, 5, 0, $4A, $E0	; Y
0000CF10 F800 0056 F0               		dc.b $F8, 0, 0, $56, $F0	; Space
0000CF15 F805 003A 00               		dc.b $F8, 5, 0, $3A, $0	; R
0000CF1A F805 0032 10               		dc.b $F8, 5, 0, $32, $10	; O
0000CF1F F805 0026 20               		dc.b $F8, 5, 0, $26, $20	; L
0000CF24 F805 0026 30               		dc.b $F8, 5, 0, $26, $30	; L
0000CF29 16                         byte_CA2C:	dc.b $16	;  LABYRINTH | I LIKE FILE EGGSPLORER
0000CF2A F801 0020 80               		dc.b $F8, 1, 0, $20, $80	; I
0000CF2F F800 0056 88               		dc.b $F8, 0, 0, $56, $88	; Space
0000CF34 F805 0026 98               		dc.b $F8, 5, 0, $26, $98	; L
0000CF39 F801 0020 A8               		dc.b $F8, 1, 0, $20, $A8	; I
0000CF3E F805 0022 B0               		dc.b $F8, 5, 0, $22, $B0	; K
0000CF43 F805 0010 C0               		dc.b $F8, 5, 0, $10, $C0	; E
0000CF48 F800 0056 D0               		dc.b $F8, 0, 0, $56, $D0	; Space
0000CF4D F805 0014 E0               		dc.b $F8, 5, 0, $14, $E0	; F
0000CF52 F801 0020 F0               		dc.b $F8, 1, 0, $20, $F0	; I
0000CF57 F805 0026 F8               		dc.b $F8, 5, 0, $26, $F8	; L
0000CF5C F805 0010 08               		dc.b $F8, 5, 0, $10, $8	; E
0000CF61 F800 0056 18               		dc.b $F8, 0, 0, $56, $18	; Space
0000CF66 F805 0010 28               		dc.b $F8, 5, 0, $10, $28	; E
0000CF6B F805 0018 38               		dc.b $F8, 5, 0, $18, $38	; G
0000CF70 F805 0018 48               		dc.b $F8, 5, 0, $18, $48	; G
0000CF75 F805 003E 58               		dc.b $F8, 5, 0, $3E, $58	; S
0000CF7A F805 0036 68               		dc.b $F8, 5, 0, $36, $68	; P
0000CF7F F805 0026 78               		dc.b $F8, 5, 0, $26, $78	; L
0000CF84 F805 0032 88               		dc.b $F8, 5, 0, $32, $88	; O
0000CF89 F805 003A 98               		dc.b $F8, 5, 0, $3A, $98	; R
0000CF8E F805 0010 A8               		dc.b $F8, 5, 0, $10, $A8	; E
0000CF93 F805 003A B8               		dc.b $F8, 5, 0, $3A, $B8	; R
0000CF98 05                         byte_CA5A:	dc.b 5	;  MARBLE | MARBL
0000CF99 F805 002A 80               		dc.b $F8, 5, 0, $2A, $80	; M
0000CF9E F805 0000 90               		dc.b $F8, 5, 0, 0, $90		; A
0000CFA3 F805 003A A0               		dc.b $F8, 5, 0, $3A, $A0	; R
0000CFA8 F805 0004 B0               		dc.b $F8, 5, 0, 4, $B0		; B
0000CFAD F805 0026 C0               		dc.b $F8, 5, 0, $26, $C0	; L
0000CFB2 11                         byte_CA7A:	dc.b $11	;  STAR LIGHT | DONT GET RIDOTHIS
0000CFB3 F805 000C 80               		dc.b $F8, 5, 0, $0C, $80	; D
0000CFB8 F805 0032 90               		dc.b $F8, 5, 0, $32, $90	; O
0000CFBD F805 002E A0               		dc.b $F8, 5, 0, $2E, $A0	; N
0000CFC2 F805 0042 B0               		dc.b $F8, 5, 0, $42, $B0	; T
0000CFC7 F800 0056 C0               		dc.b $F8, 0, 0, $56, $C0	; Space
0000CFCC F805 0018 D0               		dc.b $F8, 5, 0, $18, $D0	; G
0000CFD1 F805 0010 E0               		dc.b $F8, 5, 0, $10, $E0	; E
0000CFD6 F805 0042 F0               		dc.b $F8, 5, 0, $42, $F0	; T
0000CFDB F800 0056 00               		dc.b $F8, 0, 0, $56, $0	; Space
0000CFE0 F805 003A 10               		dc.b $F8, 5, 0, $3A, $10	; R
0000CFE5 F801 0020 20               		dc.b $F8, 1, 0, $20, $20	; I
0000CFEA F805 000C 28               		dc.b $F8, 5, 0, $0C, $28	; D
0000CFEF F805 0032 38               		dc.b $F8, 5, 0, $32, $38	; O
0000CFF4 F805 0042 48               		dc.b $F8, 5, 0, $42, $48	; T
0000CFF9 F805 001C 58               		dc.b $F8, 5, 0, $1C, $58	; H
0000CFFE F801 0020 68               		dc.b $F8, 1, 0, $20, $68	; I
0000D003 F805 003E 70               		dc.b $F8, 5, 0, $3E, $70	; S
0000D008 15                         byte_CAA8:	dc.b $15	;  SPRING YARD | THE PIG FROM BARNYARD
0000D009 F805 0042 80               		dc.b $F8, 5, 0, $42, $80	; T
0000D00E F805 001C 90               		dc.b $F8, 5, 0, $1C, $90	; H
0000D013 F805 0010 A0               		dc.b $F8, 5, 0, $10, $A0	; E
0000D018 F800 0056 B0               		dc.b $F8, 0, 0, $56, $B0	; Space
0000D01D F805 0036 C0               		dc.b $F8, 5, 0, $36, $C0	; P
0000D022 F801 0020 D0               		dc.b $F8, 1, 0, $20, $D0	; I
0000D027 F805 0018 D8               		dc.b $F8, 5, 0, $18, $D8	; G
0000D02C F800 0056 E8               		dc.b $F8, 0, 0, $56, $E8	; Space
0000D031 F805 0014 F8               		dc.b $F8, 5, 0, $14, $F8	; F
0000D036 F805 003A 08               		dc.b $F8, 5, 0, $3A, $8	; R
0000D03B F805 0032 18               		dc.b $F8, 5, 0, $32, $18	; O
0000D040 F805 002A 28               		dc.b $F8, 5, 0, $2A, $28	; M
0000D045 F800 0056 38               		dc.b $F8, 0, 0, $56, $38	; Space
0000D04A F805 0004 48               		dc.b $F8, 5, 0, 4, $48		; B
0000D04F F805 0000 58               		dc.b $F8, 5, 0, 0, $58		; A
0000D054 F805 003A 68               		dc.b $F8, 5, 0, $3A, $68	; R
0000D059 F805 002E 78               		dc.b $F8, 5, 0, $2E, $78	; N
0000D05E F805 004A 88               		dc.b $F8, 5, 0, $4A, $88	; Y
0000D063 F805 0000 98               		dc.b $F8, 5, 0, 0, $98		; A
0000D068 F805 003A A8               		dc.b $F8, 5, 0, $3A, $A8	; R
0000D06D F805 000C B8               		dc.b $F8, 5, 0, $0C, $B8	; D
0000D072 07                         byte_CADC:	dc.b 7	;  SCRAP BRAIN | Z Z Z Z
0000D073 F805 004E 80               		dc.b $F8, 5, 0, $4E, $80	; Z
0000D078 F800 0056 90               		dc.b $F8, 0, 0, $56, $90	; Space
0000D07D F805 004E A0               		dc.b $F8, 5, 0, $4E, $A0	; Z
0000D082 F800 0056 B0               		dc.b $F8, 0, 0, $56, $B0	; Space
0000D087 F805 004E C0               		dc.b $F8, 5, 0, $4E, $C0	; Z
0000D08C F800 0056 D0               		dc.b $F8, 0, 0, $56, $D0	; Space
0000D091 F805 004E E0               		dc.b $F8, 5, 0, $4E, $E0	; Z
0000D096 04                         byte_CB10:	dc.b 4			; ZONE
0000D097 F805 004E E0               		dc.b $F8, 5, 0,	$4E, $E0
0000D09C F805 0032 F0               		dc.b $F8, 5, 0,	$32, $F0
0000D0A1 F805 002E 00               		dc.b $F8, 5, 0,	$2E, 0
0000D0A6 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D0AB 00                         		dc.b 0
0000D0AC 02                         byte_CB26:	dc.b 2			; ACT 1
0000D0AD 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000D0B2 F402 0057 0C               		dc.b $F4, 2, 0,	$57, $C
0000D0B7 02                         byte_CB31:	dc.b 2			; ACT 2
0000D0B8 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000D0BD F406 005A 08               		dc.b $F4, 6, 0,	$5A, 8
0000D0C2 02                         byte_CB3C:	dc.b 2			; ACT 3
0000D0C3 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000D0C8 F406 0060 08               		dc.b $F4, 6, 0,	$60, 8
0000D0CD 0D                         byte_CB47:	dc.b $D			; Oval
0000D0CE E40C 0070 F4               		dc.b $E4, $C, 0, $70, $F4
0000D0D3 E402 0074 14               		dc.b $E4, 2, 0,	$74, $14
0000D0D8 EC04 0077 EC               		dc.b $EC, 4, 0,	$77, $EC
0000D0DD F405 0079 E4               		dc.b $F4, 5, 0,	$79, $E4
0000D0E2 140C 1870 EC               		dc.b $14, $C, $18, $70,	$EC
0000D0E7 0402 1874 E4               		dc.b 4,	2, $18,	$74, $E4
0000D0EC 0C04 1877 04               		dc.b $C, 4, $18, $77, 4
0000D0F1 FC05 1879 0C               		dc.b $FC, 5, $18, $79, $C
0000D0F6 EC08 007D FC               		dc.b $EC, 8, 0,	$7D, $FC
0000D0FB F40C 007C F4               		dc.b $F4, $C, 0, $7C, $F4
0000D100 FC08 007C F4               		dc.b $FC, 8, 0,	$7C, $F4
0000D105 040C 007C EC               		dc.b 4,	$C, 0, $7C, $EC
0000D10A 0C08 007C EC               		dc.b $C, 8, 0, $7C, $EC
0000D10F 00                         		dc.b 0
0000D110 05                         byte_CB8A:	dc.b 5			; FINAL
0000D111 F805 0014 DC               		dc.b $F8, 5, 0,	$14, $DC
0000D116 F801 0020 EC               		dc.b $F8, 1, 0,	$20, $EC
0000D11B F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000D120 F805 0000 04               		dc.b $F8, 5, 0,	0, 4
0000D125 F805 0026 14               		dc.b $F8, 5, 0,	$26, $14
0000D12A                            		even
0000D12A                            ; ---------------------------------------------------------------------------
0000D12A                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000D12A                            ; ---------------------------------------------------------------------------
0000D12A                            Map_obj39:
0000D12A                            	include "_maps\obj39.asm"
0000D12A                            ; ---------------------------------------------------------------------------
0000D12A                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000D12A                            ; ---------------------------------------------------------------------------
0000D12A 0000                       		dc.w byte_CBAC-Map_obj39
0000D12C 0000                       		dc.w byte_CBB7-Map_obj39
0000D12E 0000                       		dc.w byte_CBC2-Map_obj39
0000D130 0000                       		dc.w byte_CBCD-Map_obj39
0000D132 02                         byte_CBAC:	dc.b 2
0000D133 F80D 0000 B8               		dc.b $F8, $D, 0, 0, $B8
0000D138 F80D 0008 D8               		dc.b $F8, $D, 0, 8, $D8
0000D13D 02                         byte_CBB7:	dc.b 2
0000D13E F80D 0014 08               		dc.b $F8, $D, 0, $14, 8
0000D143 F80D 000C 28               		dc.b $F8, $D, 0, $C, $28
0000D148 02                         byte_CBC2:	dc.b 2
0000D149 F809 001C C4               		dc.b $F8, 9, 0,	$1C, $C4
0000D14E F80D 0008 DC               		dc.b $F8, $D, 0, 8, $DC
0000D153 02                         byte_CBCD:	dc.b 2
0000D154 F80D 0014 0C               		dc.b $F8, $D, 0, $14, $C
0000D159 F80D 000C 2C               		dc.b $F8, $D, 0, $C, $2C
0000D15E                            		even
0000D15E                            		even
0000D15E                            
0000D15E                            ; ---------------------------------------------------------------------------
0000D15E                            ; Sprite mappings - "SONIC HAS PASSED" title card
0000D15E                            ; ---------------------------------------------------------------------------
0000D15E 0000                       Map_obj3A:	dc.w byte_CBEA-Map_obj3A
0000D160 0000                       		dc.w byte_CC13-Map_obj3A
0000D162 0000                       		dc.w byte_CC32-Map_obj3A
0000D164 0000                       		dc.w byte_CC51-Map_obj3A
0000D166 0000                       		dc.w byte_CC75-Map_obj3A
0000D168 FF6F                       		dc.w byte_CB47-Map_obj3A
0000D16A FF4E                       		dc.w byte_CB26-Map_obj3A
0000D16C FF59                       		dc.w byte_CB31-Map_obj3A
0000D16E FF64                       		dc.w byte_CB3C-Map_obj3A
0000D170 0F                         byte_CBEA:	dc.b $F	;  SONIC HAS | CADNIUM SULFIDE
0000D171 F805 0008 7C               		dc.b $F8, 5, 0, 8, $7C		; C
0000D176 F805 0000 8C               		dc.b $F8, 5, 0, 0, $8C		; A
0000D17B F805 000C 9C               		dc.b $F8, 5, 0, $0C, $9C	; D
0000D180 F805 002E AC               		dc.b $F8, 5, 0, $2E, $AC	; N
0000D185 F801 0020 BC               		dc.b $F8, 1, 0, $20, $BC	; I
0000D18A F805 0046 C4               		dc.b $F8, 5, 0, $46, $C4	; U
0000D18F F805 002A D4               		dc.b $F8, 5, 0, $2A, $D4	; M
0000D194 F800 0056 E4               		dc.b $F8, 0, 0, $56, $E4	; Space
0000D199 F805 003E F4               		dc.b $F8, 5, 0, $3E, $F4	; S
0000D19E F805 0046 04               		dc.b $F8, 5, 0, $46, $4	; U
0000D1A3 F805 0026 14               		dc.b $F8, 5, 0, $26, $14	; L
0000D1A8 F805 0014 24               		dc.b $F8, 5, 0, $14, $24	; F
0000D1AD F801 0020 34               		dc.b $F8, 1, 0, $20, $34	; I
0000D1B2 F805 000C 3C               		dc.b $F8, 5, 0, $0C, $3C	; D
0000D1B7 F805 0010 4C               		dc.b $F8, 5, 0, $10, $4C	; E
0000D1BC 06                         byte_CC13:	dc.b 6			; PASSED
0000D1BD F805 0036 D0               		dc.b $F8, 5, 0,	$36, $D0
0000D1C2 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000D1C7 F805 003E F0               		dc.b $F8, 5, 0,	$3E, $F0
0000D1CC F805 003E 00               		dc.b $F8, 5, 0,	$3E, 0
0000D1D1 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D1D6 F805 000C 20               		dc.b $F8, 5, 0,	$C, $20
0000D1DB 06                         byte_CC32:	dc.b 6			; SCORE
0000D1DC F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000D1E1 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000D1E6 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000D1EB F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000D1F0 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000D1F5 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000D1FA 07                         byte_CC51:	dc.b 7			; TIME BONUS
0000D1FB F80D 015A B0               		dc.b $F8, $D, 1, $5A, $B0
0000D200 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D205 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D20A F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D20F FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D214 F80D FFF0 28               		dc.b $F8, $D, $FF, $F0,	$28
0000D219 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D21E 07                         byte_CC75:	dc.b 7			; RING BONUS
0000D21F F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000D224 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D229 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D22E F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D233 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D238 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000D23D F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D242                            		even
0000D242                            ; ---------------------------------------------------------------------------
0000D242                            ; Sprite mappings - special stage results screen
0000D242                            ; ---------------------------------------------------------------------------
0000D242 0000                       Map_obj7E:	dc.w byte_CCAC-Map_obj7E
0000D244 0000                       		dc.w byte_CCEE-Map_obj7E
0000D246 0000                       		dc.w byte_CD0D-Map_obj7E
0000D248 FE8B                       		dc.w byte_CB47-Map_obj7E
0000D24A 0000                       		dc.w byte_CD31-Map_obj7E
0000D24C 0000                       		dc.w byte_CD46-Map_obj7E
0000D24E 0000                       		dc.w byte_CD5B-Map_obj7E
0000D250 0000                       		dc.w byte_CD6B-Map_obj7E
0000D252 0000                       		dc.w byte_CDA8-Map_obj7E
0000D254 0D                         byte_CCAC:	dc.b $D			; "CHAOS EMERALDS"
0000D255 F805 0008 90               		dc.b $F8, 5, 0,	8, $90
0000D25A F805 001C A0               		dc.b $F8, 5, 0,	$1C, $A0
0000D25F F805 0000 B0               		dc.b $F8, 5, 0,	0, $B0
0000D264 F805 0032 C0               		dc.b $F8, 5, 0,	$32, $C0
0000D269 F805 003E D0               		dc.b $F8, 5, 0,	$3E, $D0
0000D26E F805 0010 F0               		dc.b $F8, 5, 0,	$10, $F0
0000D273 F805 002A 00               		dc.b $F8, 5, 0,	$2A, 0
0000D278 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D27D F805 003A 20               		dc.b $F8, 5, 0,	$3A, $20
0000D282 F805 0000 30               		dc.b $F8, 5, 0,	0, $30
0000D287 F805 0026 40               		dc.b $F8, 5, 0,	$26, $40
0000D28C F805 000C 50               		dc.b $F8, 5, 0,	$C, $50
0000D291 F805 003E 60               		dc.b $F8, 5, 0,	$3E, $60
0000D296 06                         byte_CCEE:	dc.b 6			; "SCORE"
0000D297 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000D29C F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000D2A1 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000D2A6 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000D2AB F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000D2B0 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000D2B5 07                         byte_CD0D:	dc.b 7
0000D2B6 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000D2BB F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D2C0 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D2C5 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D2CA FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D2CF F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000D2D4 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D2D9 04                         byte_CD31:	dc.b 4
0000D2DA F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D2DF F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D2E4 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D2E9 F806 1FE3 40               		dc.b $F8, 6, $1F, $E3, $40
0000D2EE 04                         byte_CD46:	dc.b 4
0000D2EF F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D2F4 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D2F9 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D2FE F806 1FE9 40               		dc.b $F8, 6, $1F, $E9, $40
0000D303 03                         byte_CD5B:	dc.b 3
0000D304 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D309 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D30E F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D313 0C                         byte_CD6B:	dc.b $C			; "SPECIAL STAGE"
0000D314 F805 003E 9C               		dc.b $F8, 5, 0,	$3E, $9C
0000D319 F805 0036 AC               		dc.b $F8, 5, 0,	$36, $AC
0000D31E F805 0010 BC               		dc.b $F8, 5, 0,	$10, $BC
0000D323 F805 0008 CC               		dc.b $F8, 5, 0,	8, $CC
0000D328 F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000D32D F805 0000 E4               		dc.b $F8, 5, 0,	0, $E4
0000D332 F805 0026 F4               		dc.b $F8, 5, 0,	$26, $F4
0000D337 F805 003E 14               		dc.b $F8, 5, 0,	$3E, $14
0000D33C F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000D341 F805 0000 34               		dc.b $F8, 5, 0,	0, $34
0000D346 F805 0018 44               		dc.b $F8, 5, 0,	$18, $44
0000D34B F805 0010 54               		dc.b $F8, 5, 0,	$10, $54
0000D350 0F                         byte_CDA8:	dc.b $F			; "SONIC GOT THEM ALL"
0000D351 F805 003E 88               		dc.b $F8, 5, 0,	$3E, $88
0000D356 F805 0032 98               		dc.b $F8, 5, 0,	$32, $98
0000D35B F805 002E A8               		dc.b $F8, 5, 0,	$2E, $A8
0000D360 F801 0020 B8               		dc.b $F8, 1, 0,	$20, $B8
0000D365 F805 0008 C0               		dc.b $F8, 5, 0,	8, $C0
0000D36A F805 0018 D8               		dc.b $F8, 5, 0,	$18, $D8
0000D36F F805 0032 E8               		dc.b $F8, 5, 0,	$32, $E8
0000D374 F805 0042 F8               		dc.b $F8, 5, 0,	$42, $F8
0000D379 F805 0042 10               		dc.b $F8, 5, 0,	$42, $10
0000D37E F805 001C 20               		dc.b $F8, 5, 0,	$1C, $20
0000D383 F805 0010 30               		dc.b $F8, 5, 0,	$10, $30
0000D388 F805 002A 40               		dc.b $F8, 5, 0,	$2A, $40
0000D38D F805 0000 58               		dc.b $F8, 5, 0,	0, $58
0000D392 F805 0026 68               		dc.b $F8, 5, 0,	$26, $68
0000D397 F805 0026 78               		dc.b $F8, 5, 0,	$26, $78
0000D39C                            		even
0000D39C                            ; ---------------------------------------------------------------------------
0000D39C                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000D39C                            ; ---------------------------------------------------------------------------
0000D39C                            Map_obj7F:
0000D39C                            	include "_maps\obj7F.asm"
0000D39C                            ; ---------------------------------------------------------------------------
0000D39C                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000D39C                            ; ---------------------------------------------------------------------------
0000D39C 0000                       		dc.w byte_CE02-Map_obj7F
0000D39E 0000                       		dc.w byte_CE08-Map_obj7F
0000D3A0 0000                       		dc.w byte_CE0E-Map_obj7F
0000D3A2 0000                       		dc.w byte_CE14-Map_obj7F
0000D3A4 0000                       		dc.w byte_CE1A-Map_obj7F
0000D3A6 0000                       		dc.w byte_CE20-Map_obj7F
0000D3A8 0000                       		dc.w byte_CE26-Map_obj7F
0000D3AA 01                         byte_CE02:	dc.b 1
0000D3AB F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0000D3B0 01                         byte_CE08:	dc.b 1
0000D3B1 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000D3B6 01                         byte_CE0E:	dc.b 1
0000D3B7 F805 4004 F8               		dc.b $F8, 5, $40, 4, $F8
0000D3BC 01                         byte_CE14:	dc.b 1
0000D3BD F805 6004 F8               		dc.b $F8, 5, $60, 4, $F8
0000D3C2 01                         byte_CE1A:	dc.b 1
0000D3C3 F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8
0000D3C8 01                         byte_CE20:	dc.b 1
0000D3C9 F805 200C F8               		dc.b $F8, 5, $20, $C, $F8
0000D3CE 00                         byte_CE26:	dc.b 0			; Blank frame
0000D3D0 00                         		even
0000D3D0 00                         		even
0000D3D0                            
0000D3D0                            ; ===========================================================================
0000D3D0                            ; ---------------------------------------------------------------------------
0000D3D0                            ; Object 36 - spikes
0000D3D0                            ; ---------------------------------------------------------------------------
0000D3D0                            
0000D3D0                            Obj36:					; XREF: Obj_Index
0000D3D0 7000                       		moveq	#0,d0
0000D3D2 1028 0024                  		move.b	$24(a0),d0
0000D3D6 323B 0000                  		move.w	Obj36_Index(pc,d0.w),d1
0000D3DA 4EFB 1000                  		jmp	Obj36_Index(pc,d1.w)
0000D3DE                            ; ===========================================================================
0000D3DE 0000                       Obj36_Index:	dc.w Obj36_Main-Obj36_Index
0000D3E0 0000                       		dc.w Obj36_Solid-Obj36_Index
0000D3E2                            
0000D3E2 0014                       Obj36_Var:	dc.b 0,	$14		; frame	number,	object width
0000D3E4 0110                       		dc.b 1,	$10
0000D3E6 0204                       		dc.b 2,	4
0000D3E8 031C                       		dc.b 3,	$1C
0000D3EA 0440                       		dc.b 4,	$40
0000D3EC 0510                       		dc.b 5,	$10
0000D3EE                            ; ===========================================================================
0000D3EE                            
0000D3EE                            Obj36_Main:				; XREF: Obj36_Index
0000D3EE 5428 0024                  		addq.b	#2,$24(a0)
0000D3F2 217C 0000 0000 0004        		move.l	#Map_obj36,4(a0)
0000D3FA 317C 051B 0002             		move.w	#$51B,2(a0)
0000D400 0028 0004 0001             		ori.b	#4,1(a0)
0000D406 117C 0004 0018             		move.b	#4,$18(a0)
0000D40C 1028 0028                  		move.b	$28(a0),d0
0000D410 0228 000F 0028             		andi.b	#$F,$28(a0)
0000D416 0240 00F0                  		andi.w	#$F0,d0
0000D41A 43F9 0000 D3E2             		lea	(Obj36_Var).l,a1
0000D420 E648                       		lsr.w	#3,d0
0000D422 D2C0                       		adda.w	d0,a1
0000D424 1159 001A                  		move.b	(a1)+,$1A(a0)
0000D428 1159 0019                  		move.b	(a1)+,$19(a0)
0000D42C 3168 0008 0030             		move.w	8(a0),$30(a0)
0000D432 3168 000C 0032             		move.w	$C(a0),$32(a0)
0000D438                            
0000D438                            Obj36_Solid:				; XREF: Obj36_Index
0000D438 6100 0000                  		bsr.w	Obj36_Type0x	; make the object move
0000D43C 343C 0004                  		move.w	#4,d2
0000D440 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is object type $5x ?
0000D446 6700                       		beq.s	Obj36_SideWays	; if yes, branch
0000D448 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is object type $1x ?
0000D44E 6600                       		bne.s	Obj36_Upright	; if not, branch
0000D450 343C 0014                  		move.w	#$14,d2
0000D454                            
0000D454                            ; Spikes types $1x and $5x face	sideways
0000D454                            
0000D454                            Obj36_SideWays:				; XREF: Obj36_Solid
0000D454 323C 001B                  		move.w	#$1B,d1
0000D458 3602                       		move.w	d2,d3
0000D45A 5243                       		addq.w	#1,d3
0000D45C 3828 0008                  		move.w	8(a0),d4
0000D460 6100 0000                  		bsr.w	SolidObject
0000D464 0828 0003 0022             		btst	#3,$22(a0)
0000D46A 6600                       		bne.s	Obj36_Display
0000D46C 0C44 0001                  		cmpi.w	#1,d4
0000D470 6700                       		beq.s	Obj36_Hurt
0000D472 6000                       		bra.s	Obj36_Display
0000D474                            ; ===========================================================================
0000D474                            
0000D474                            ; Spikes types $0x, $2x, $3x and $4x face up or	down
0000D474                            
0000D474                            Obj36_Upright:				; XREF: Obj36_Solid
0000D474 7200                       		moveq	#0,d1
0000D476 1228 0019                  		move.b	$19(a0),d1
0000D47A 0641 000B                  		addi.w	#$B,d1
0000D47E 343C 0010                  		move.w	#$10,d2
0000D482 363C 0011                  		move.w	#$11,d3
0000D486 3828 0008                  		move.w	8(a0),d4
0000D48A 6100 0000                  		bsr.w	SolidObject
0000D48E 0828 0003 0022             		btst	#3,$22(a0)
0000D494 6600                       		bne.s	Obj36_Hurt
0000D496 4A44                       		tst.w	d4
0000D498 6A00                       		bpl.s	Obj36_Display
0000D49A                            
0000D49A                            Obj36_Hurt:				; XREF: Obj36_SideWays; Obj36_Upright
0000D49A 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0000D49E 6600                       		bne.s	Obj36_Display	; if yes, branch
0000D4A0 2F08                       		move.l	a0,-(sp)
0000D4A2 2448                       		movea.l	a0,a2
0000D4A4 41F8 D000                  		lea	($FFFFD000).w,a0
0000D4A8 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000D4AE 6400                       		bcc.s	loc_CF20
0000D4B0 2628 000C                  		move.l	$C(a0),d3
0000D4B4 3028 0012                  		move.w	$12(a0),d0
0000D4B8 48C0                       		ext.l	d0
0000D4BA E180                       		asl.l	#8,d0
0000D4BC 9680                       		sub.l	d0,d3
0000D4BE 2143 000C                  		move.l	d3,$C(a0)
0000D4C2 4EB9 0000 0000             		jsr	HurtSonic
0000D4C8                            
0000D4C8                            loc_CF20:
0000D4C8 205F                       		movea.l	(sp)+,a0
0000D4CA                            
0000D4CA                            Obj36_Display:
0000D4CA 6100 0000                  		bsr.w	DisplaySprite
0000D4CE 3028 0030                  		move.w	$30(a0),d0
0000D4D2 0240 FF80                  		andi.w	#$FF80,d0
0000D4D6 3238 F700                  		move.w	($FFFFF700).w,d1
0000D4DA 0441 0080                  		subi.w	#$80,d1
0000D4DE 0241 FF80                  		andi.w	#$FF80,d1
0000D4E2 9041                       		sub.w	d1,d0
0000D4E4 0C40 0280                  		cmpi.w	#$280,d0
0000D4E8 6200 0000                  		bhi.w	DeleteObject
0000D4EC 4E75                       		rts	
0000D4EE                            ; ===========================================================================
0000D4EE                            
0000D4EE                            Obj36_Type0x:				; XREF: Obj36_Solid
0000D4EE 7000                       		moveq	#0,d0
0000D4F0 1028 0028                  		move.b	$28(a0),d0
0000D4F4 D040                       		add.w	d0,d0
0000D4F6 323B 0000                  		move.w	Obj36_TypeIndex(pc,d0.w),d1
0000D4FA 4EFB 1000                  		jmp	Obj36_TypeIndex(pc,d1.w)
0000D4FE                            ; ===========================================================================
0000D4FE 0000                       Obj36_TypeIndex:dc.w Obj36_Type00-Obj36_TypeIndex
0000D500 0000                       		dc.w Obj36_Type01-Obj36_TypeIndex
0000D502 0000                       		dc.w Obj36_Type02-Obj36_TypeIndex
0000D504                            ; ===========================================================================
0000D504                            
0000D504                            Obj36_Type00:				; XREF: Obj36_TypeIndex
0000D504 4E75                       		rts			; don't move the object
0000D506                            ; ===========================================================================
0000D506                            
0000D506                            Obj36_Type01:				; XREF: Obj36_TypeIndex
0000D506 6100 0000                  		bsr.w	Obj36_Wait
0000D50A 7000                       		moveq	#0,d0
0000D50C 1028 0034                  		move.b	$34(a0),d0
0000D510 D068 0032                  		add.w	$32(a0),d0
0000D514 3140 000C                  		move.w	d0,$C(a0)	; move the object vertically
0000D518 4E75                       		rts	
0000D51A                            ; ===========================================================================
0000D51A                            
0000D51A                            Obj36_Type02:				; XREF: Obj36_TypeIndex
0000D51A 6100 0000                  		bsr.w	Obj36_Wait
0000D51E 7000                       		moveq	#0,d0
0000D520 1028 0034                  		move.b	$34(a0),d0
0000D524 D068 0030                  		add.w	$30(a0),d0
0000D528 3140 0008                  		move.w	d0,8(a0)	; move the object horizontally
0000D52C 4E75                       		rts	
0000D52E                            ; ===========================================================================
0000D52E                            
0000D52E                            Obj36_Wait:
0000D52E 4A68 0038                  		tst.w	$38(a0)		; is time delay	= zero?
0000D532 6700                       		beq.s	loc_CFA4	; if yes, branch
0000D534 5368 0038                  		subq.w	#1,$38(a0)	; subtract 1 from time delay
0000D538 6600                       		bne.s	locret_CFE6
0000D53A 4A28 0001                  		tst.b	1(a0)
0000D53E 6A00                       		bpl.s	locret_CFE6
0000D540 303C 00B6                  		move.w	#$B6,d0
0000D544 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play "spikes moving" sound
0000D54A 6000                       		bra.s	locret_CFE6
0000D54C                            ; ===========================================================================
0000D54C                            
0000D54C                            loc_CFA4:
0000D54C 4A68 0036                  		tst.w	$36(a0)
0000D550 6700                       		beq.s	loc_CFC6
0000D552 0468 0800 0034             		subi.w	#$800,$34(a0)
0000D558 6400                       		bcc.s	locret_CFE6
0000D55A 317C 0000 0034             		move.w	#0,$34(a0)
0000D560 317C 0000 0036             		move.w	#0,$36(a0)
0000D566 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000D56C 6000                       		bra.s	locret_CFE6
0000D56E                            ; ===========================================================================
0000D56E                            
0000D56E                            loc_CFC6:
0000D56E 0668 0800 0034             		addi.w	#$800,$34(a0)
0000D574 0C68 2000 0034             		cmpi.w	#$2000,$34(a0)
0000D57A 6500                       		bcs.s	locret_CFE6
0000D57C 317C 2000 0034             		move.w	#$2000,$34(a0)
0000D582 317C 0001 0036             		move.w	#1,$36(a0)
0000D588 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000D58E                            
0000D58E                            locret_CFE6:
0000D58E 4E75                       		rts	
0000D590                            ; ===========================================================================
0000D590                            ; ---------------------------------------------------------------------------
0000D590                            ; Sprite mappings - spikes
0000D590                            ; ---------------------------------------------------------------------------
0000D590                            Map_obj36:
0000D590                            	include "_maps\obj36.asm"
0000D590                            ; ---------------------------------------------------------------------------
0000D590                            ; Sprite mappings - spikes
0000D590                            ; ---------------------------------------------------------------------------
0000D590 0000                       		dc.w byte_CFF4-Map_obj36
0000D592 0000                       		dc.w byte_D004-Map_obj36
0000D594 0000                       		dc.w byte_D014-Map_obj36
0000D596 0000                       		dc.w byte_D01A-Map_obj36
0000D598 0000                       		dc.w byte_D02A-Map_obj36
0000D59A 0000                       		dc.w byte_D049-Map_obj36
0000D59C 03                         byte_CFF4:	dc.b 3			; 3 spikes
0000D59D F003 0004 EC               		dc.b $F0, 3, 0,	4, $EC
0000D5A2 F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000D5A7 F003 0004 0C               		dc.b $F0, 3, 0,	4, $C
0000D5AC 03                         byte_D004:	dc.b 3			; 3 spikes facing sideways
0000D5AD EC0C 0000 F0               		dc.b $EC, $C, 0, 0, $F0
0000D5B2 FC0C 0000 F0               		dc.b $FC, $C, 0, 0, $F0
0000D5B7 0C0C 0000 F0               		dc.b $C, $C, 0,	0, $F0
0000D5BC 01                         byte_D014:	dc.b 1			; 1 spike
0000D5BD F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000D5C2 03                         byte_D01A:	dc.b 3			; 3 spikes widely spaced
0000D5C3 F003 0004 E4               		dc.b $F0, 3, 0,	4, $E4
0000D5C8 F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000D5CD F003 0004 14               		dc.b $F0, 3, 0,	4, $14
0000D5D2 06                         byte_D02A:	dc.b 6			; 6 spikes
0000D5D3 F003 0004 C0               		dc.b $F0, 3, 0,	4, $C0
0000D5D8 F003 0004 D8               		dc.b $F0, 3, 0,	4, $D8
0000D5DD F003 0004 F0               		dc.b $F0, 3, 0,	4, $F0
0000D5E2 F003 0004 08               		dc.b $F0, 3, 0,	4, 8
0000D5E7 F003 0004 20               		dc.b $F0, 3, 0,	4, $20
0000D5EC F003 0004 38               		dc.b $F0, 3, 0,	4, $38
0000D5F1 01                         byte_D049:	dc.b 1			; 1 spike facing sideways
0000D5F2 FC0C 0000 F0               		dc.b $FC, $C, 0, 0, $F0
0000D5F8 00                         		even
0000D5F8 00                         		even
0000D5F8                            
0000D5F8                            ; ===========================================================================
0000D5F8                            ; ---------------------------------------------------------------------------
0000D5F8                            ; Object 3B - purple rock (GHZ)
0000D5F8                            ; ---------------------------------------------------------------------------
0000D5F8                            
0000D5F8                            Obj3B:					; XREF: Obj_Index
0000D5F8 7000                       		moveq	#0,d0
0000D5FA 1028 0024                  		move.b	$24(a0),d0
0000D5FE 323B 0000                  		move.w	Obj3B_Index(pc,d0.w),d1
0000D602 4EFB 1000                  		jmp	Obj3B_Index(pc,d1.w)
0000D606                            ; ===========================================================================
0000D606 0000                       Obj3B_Index:	dc.w Obj3B_Main-Obj3B_Index
0000D608 0000                       		dc.w Obj3B_Solid-Obj3B_Index
0000D60A                            ; ===========================================================================
0000D60A                            
0000D60A                            Obj3B_Main:				; XREF: Obj3B_Index
0000D60A 5428 0024                  		addq.b	#2,$24(a0)
0000D60E 217C 0000 0000 0004        		move.l	#Map_obj3B,4(a0)
0000D616 317C 63D0 0002             		move.w	#$63D0,2(a0)
0000D61C 117C 0004 0001             		move.b	#4,1(a0)
0000D622 117C 0013 0019             		move.b	#$13,$19(a0)
0000D628 117C 0004 0018             		move.b	#4,$18(a0)
0000D62E                            
0000D62E                            Obj3B_Solid:				; XREF: Obj3B_Index
0000D62E 323C 001B                  		move.w	#$1B,d1
0000D632 343C 0010                  		move.w	#$10,d2
0000D636 363C 0010                  		move.w	#$10,d3
0000D63A 3828 0008                  		move.w	8(a0),d4
0000D63E 6100 0000                  		bsr.w	SolidObject
0000D642 6100 0000                  		bsr.w	DisplaySprite
0000D646 3028 0008                  		move.w	8(a0),d0
0000D64A 0240 FF80                  		andi.w	#$FF80,d0
0000D64E 3238 F700                  		move.w	($FFFFF700).w,d1
0000D652 0441 0080                  		subi.w	#$80,d1
0000D656 0241 FF80                  		andi.w	#$FF80,d1
0000D65A 9041                       		sub.w	d1,d0
0000D65C 0C40 0280                  		cmpi.w	#$280,d0
0000D660 6200 0000                  		bhi.w	DeleteObject
0000D664 4E75                       		rts	
0000D666                            ; ===========================================================================
0000D666                            ; ---------------------------------------------------------------------------
0000D666                            ; Object 49 - waterfall	sound effect (GHZ)
0000D666                            ; ---------------------------------------------------------------------------
0000D666                            
0000D666                            Obj49:					; XREF: Obj_Index
0000D666 7000                       		moveq	#0,d0
0000D668 1028 0024                  		move.b	$24(a0),d0
0000D66C 323B 0000                  		move.w	Obj49_Index(pc,d0.w),d1
0000D670 4EFB 1000                  		jmp	Obj49_Index(pc,d1.w)
0000D674                            ; ===========================================================================
0000D674 0000                       Obj49_Index:	dc.w Obj49_Main-Obj49_Index
0000D676 0000                       		dc.w Obj49_PlaySnd-Obj49_Index
0000D678                            ; ===========================================================================
0000D678                            
0000D678                            Obj49_Main:				; XREF: Obj49_Index
0000D678 5428 0024                  		addq.b	#2,$24(a0)
0000D67C 117C 0004 0001             		move.b	#4,1(a0)
0000D682                            
0000D682                            Obj49_PlaySnd:				; XREF: Obj49_Index
0000D682 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D686 0200 003F                  		andi.b	#$3F,d0
0000D68A 6600                       		bne.s	Obj49_ChkDel
0000D68C 303C 00D0                  		move.w	#$D0,d0
0000D690 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play waterfall sound
0000D696                            
0000D696                            Obj49_ChkDel:
0000D696 3028 0008                  		move.w	8(a0),d0
0000D69A 0240 FF80                  		andi.w	#$FF80,d0
0000D69E 3238 F700                  		move.w	($FFFFF700).w,d1
0000D6A2 0441 0080                  		subi.w	#$80,d1
0000D6A6 0241 FF80                  		andi.w	#$FF80,d1
0000D6AA 9041                       		sub.w	d1,d0
0000D6AC 0C40 0280                  		cmpi.w	#$280,d0
0000D6B0 6200 0000                  		bhi.w	DeleteObject
0000D6B4 4E75                       		rts	
0000D6B6                            ; ===========================================================================
0000D6B6                            ; ---------------------------------------------------------------------------
0000D6B6                            ; Sprite mappings - purple rock	(GHZ)
0000D6B6                            ; ---------------------------------------------------------------------------
0000D6B6                            Map_obj3B:
0000D6B6                            	include "_maps\obj3B.asm"
0000D6B6                            ; ---------------------------------------------------------------------------
0000D6B6                            ; Sprite mappings - purple rock	(GHZ)
0000D6B6                            ; ---------------------------------------------------------------------------
0000D6B6 0000                       		dc.w byte_D110-Map_obj3B
0000D6B8 02                         byte_D110:	dc.b 2
0000D6B9 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000D6BE F00B 000C 00               		dc.b $F0, $B, 0, $C, 0
0000D6C4 00                         		even
0000D6C4 00                         		even
0000D6C4                            
0000D6C4                            ; ===========================================================================
0000D6C4                            ; ---------------------------------------------------------------------------
0000D6C4                            ; Object 3C - smashable	wall (GHZ, SLZ)
0000D6C4                            ; ---------------------------------------------------------------------------
0000D6C4                            
0000D6C4                            Obj3C:					; XREF: Obj_Index
0000D6C4 7000                       		moveq	#0,d0
0000D6C6 1028 0024                  		move.b	$24(a0),d0
0000D6CA 323B 0000                  		move.w	Obj3C_Index(pc,d0.w),d1
0000D6CE 4EBB 1000                  		jsr	Obj3C_Index(pc,d1.w)
0000D6D2 6000 0000                  		bra.w	MarkObjGone
0000D6D6                            ; ===========================================================================
0000D6D6 0000                       Obj3C_Index:	dc.w Obj3C_Main-Obj3C_Index
0000D6D8 0000                       		dc.w Obj3C_Solid-Obj3C_Index
0000D6DA 0000                       		dc.w Obj3C_FragMove-Obj3C_Index
0000D6DC                            ; ===========================================================================
0000D6DC                            
0000D6DC                            Obj3C_Main:				; XREF: Obj3C_Index
0000D6DC 5428 0024                  		addq.b	#2,$24(a0)
0000D6E0 217C 0000 0000 0004        		move.l	#Map_obj3C,4(a0)
0000D6E8 317C 450F 0002             		move.w	#$450F,2(a0)
0000D6EE 117C 0004 0001             		move.b	#4,1(a0)
0000D6F4 117C 0010 0019             		move.b	#$10,$19(a0)
0000D6FA 117C 0004 0018             		move.b	#4,$18(a0)
0000D700 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0000D706                            
0000D706                            Obj3C_Solid:				; XREF: Obj3C_Index
0000D706 3178 D010 0030             		move.w	($FFFFD010).w,$30(a0) ;	load Sonic's horizontal speed
0000D70C 323C 001B                  		move.w	#$1B,d1
0000D710 343C 0020                  		move.w	#$20,d2
0000D714 363C 0020                  		move.w	#$20,d3
0000D718 3828 0008                  		move.w	8(a0),d4
0000D71C 6100 0000                  		bsr.w	SolidObject
0000D720 0828 0005 0022             		btst	#5,$22(a0)
0000D726 6600                       		bne.s	Obj3C_ChkRoll
0000D728                            
0000D728                            locret_D180:
0000D728 4E75                       		rts	
0000D72A                            ; ===========================================================================
0000D72A                            
0000D72A                            Obj3C_ChkRoll:				; XREF: Obj3C_Solid
0000D72A 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000D730 66F6                       		bne.s	locret_D180	; if not, branch
0000D732 3028 0030                  		move.w	$30(a0),d0
0000D736 6A00                       		bpl.s	Obj3C_ChkSpeed
0000D738 4440                       		neg.w	d0
0000D73A                            
0000D73A                            Obj3C_ChkSpeed:
0000D73A 0C40 0480                  		cmpi.w	#$480,d0	; is Sonic's speed $480 or higher?
0000D73E 65E8                       		bcs.s	locret_D180	; if not, branch
0000D740 3368 0030 0010             		move.w	$30(a0),$10(a1)
0000D746 5869 0008                  		addq.w	#4,8(a1)
0000D74A 49F9 0000 0000             		lea	(Obj3C_FragSpd1).l,a4 ;	use fragments that move	right
0000D750 3028 0008                  		move.w	8(a0),d0
0000D754 B069 0008                  		cmp.w	8(a1),d0	; is Sonic to the right	of the block?
0000D758 6500                       		bcs.s	Obj3C_Smash	; if yes, branch
0000D75A 5169 0008                  		subq.w	#8,8(a1)
0000D75E 49F9 0000 0000             		lea	(Obj3C_FragSpd2).l,a4 ;	use fragments that move	left
0000D764                            
0000D764                            Obj3C_Smash:
0000D764 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000D76A 08A8 0005 0022             		bclr	#5,$22(a0)
0000D770 08A9 0005 0022             		bclr	#5,$22(a1)
0000D776 7207                       		moveq	#7,d1		; load 8 fragments
0000D778 343C 0070                  		move.w	#$70,d2
0000D77C 6100                       		bsr.s	SmashObject
0000D77E                            
0000D77E                            Obj3C_FragMove:				; XREF: Obj3C_Index
0000D77E 6100 0000                  		bsr.w	SpeedToPos
0000D782 0668 0070 0012             		addi.w	#$70,$12(a0)	; make fragment	fall faster
0000D788 6100 0000                  		bsr.w	DisplaySprite
0000D78C 4A28 0001                  		tst.b	1(a0)
0000D790 6A00 0000                  		bpl.w	DeleteObject
0000D794 4E75                       		rts	
0000D796                            
0000D796                            ; ---------------------------------------------------------------------------
0000D796                            ; Subroutine to	smash a	block (GHZ walls and MZ	blocks)
0000D796                            ; ---------------------------------------------------------------------------
0000D796                            
0000D796                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D796                            
0000D796                            
0000D796                            SmashObject:				; XREF: Obj3C_Smash
0000D796 7000                       		moveq	#0,d0
0000D798 1028 001A                  		move.b	$1A(a0),d0
0000D79C D040                       		add.w	d0,d0
0000D79E 2668 0004                  		movea.l	4(a0),a3
0000D7A2 D6F3 0000                  		adda.w	(a3,d0.w),a3
0000D7A6 524B                       		addq.w	#1,a3
0000D7A8 08E8 0005 0001             		bset	#5,1(a0)
0000D7AE 1810                       		move.b	0(a0),d4
0000D7B0 1A28 0001                  		move.b	1(a0),d5
0000D7B4 2248                       		movea.l	a0,a1
0000D7B6 6000                       		bra.s	Smash_LoadFrag
0000D7B8                            ; ===========================================================================
0000D7B8                            
0000D7B8                            Smash_Loop:
0000D7B8 6100 0000                  		bsr.w	SingleObjLoad
0000D7BC 6600                       		bne.s	Smash_PlaySnd
0000D7BE 5A4B                       		addq.w	#5,a3
0000D7C0                            
0000D7C0                            Smash_LoadFrag:				; XREF: SmashObject
0000D7C0 137C 0004 0024             		move.b	#4,$24(a1)
0000D7C6 1284                       		move.b	d4,0(a1)
0000D7C8 234B 0004                  		move.l	a3,4(a1)
0000D7CC 1345 0001                  		move.b	d5,1(a1)
0000D7D0 3368 0008 0008             		move.w	8(a0),8(a1)
0000D7D6 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000D7DC 3368 0002 0002             		move.w	2(a0),2(a1)
0000D7E2 1368 0018 0018             		move.b	$18(a0),$18(a1)
0000D7E8 1368 0019 0019             		move.b	$19(a0),$19(a1)
0000D7EE 335C 0010                  		move.w	(a4)+,$10(a1)
0000D7F2 335C 0012                  		move.w	(a4)+,$12(a1)
0000D7F6 B3C8                       		cmpa.l	a0,a1
0000D7F8 6400                       		bcc.s	loc_D268
0000D7FA 2F08                       		move.l	a0,-(sp)
0000D7FC 2049                       		movea.l	a1,a0
0000D7FE 6100 0000                  		bsr.w	SpeedToPos
0000D802 D568 0012                  		add.w	d2,$12(a0)
0000D806 205F                       		movea.l	(sp)+,a0
0000D808 6100 0000                  		bsr.w	DisplaySprite2
0000D80C                            
0000D80C                            loc_D268:
0000D80C 51C9 FFAA                  		dbf	d1,Smash_Loop
0000D810                            
0000D810                            Smash_PlaySnd:
0000D810 303C 00CB                  		move.w	#$CB,d0
0000D814 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play smashing sound
0000D81A                            ; End of function SmashObject
0000D81A                            
0000D81A                            ; ===========================================================================
0000D81A                            ; Smashed block	fragment speeds
0000D81A                            ;
0000D81A 0400 FB00                  Obj3C_FragSpd1:	dc.w $400, $FB00	; x-move speed,	y-move speed
0000D81E 0600 FF00                  		dc.w $600, $FF00
0000D822 0600 0100                  		dc.w $600, $100
0000D826 0400 0500                  		dc.w $400, $500
0000D82A 0600 FA00                  		dc.w $600, $FA00
0000D82E 0800 FE00                  		dc.w $800, $FE00
0000D832 0800 0200                  		dc.w $800, $200
0000D836 0600 0600                  		dc.w $600, $600
0000D83A                            
0000D83A FA00 FA00                  Obj3C_FragSpd2:	dc.w $FA00, $FA00
0000D83E F800 FE00                  		dc.w $F800, $FE00
0000D842 F800 0200                  		dc.w $F800, $200
0000D846 FA00 0600                  		dc.w $FA00, $600
0000D84A FC00 FB00                  		dc.w $FC00, $FB00
0000D84E FA00 FF00                  		dc.w $FA00, $FF00
0000D852 FA00 0100                  		dc.w $FA00, $100
0000D856 FC00 0500                  		dc.w $FC00, $500
0000D85A                            ; ---------------------------------------------------------------------------
0000D85A                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000D85A                            ; ---------------------------------------------------------------------------
0000D85A                            Map_obj3C:
0000D85A                            	include "_maps\obj3C.asm"
0000D85A                            ; ---------------------------------------------------------------------------
0000D85A                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000D85A                            ; ---------------------------------------------------------------------------
0000D85A 0000                       		dc.w byte_D2BC-Map_obj3C
0000D85C 0000                       		dc.w byte_D2E5-Map_obj3C
0000D85E 0000                       		dc.w byte_D30E-Map_obj3C
0000D860 08                         byte_D2BC:	dc.b 8
0000D861 E005 0000 F0               		dc.b $E0, 5, 0,	0, $F0
0000D866 F005 0000 F0               		dc.b $F0, 5, 0,	0, $F0
0000D86B 0005 0000 F0               		dc.b 0,	5, 0, 0, $F0
0000D870 1005 0000 F0               		dc.b $10, 5, 0,	0, $F0
0000D875 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000D87A F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000D87F 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000D884 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000D889 08                         byte_D2E5:	dc.b 8
0000D88A E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000D88F F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000D894 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000D899 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000D89E E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000D8A3 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000D8A8 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000D8AD 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000D8B2 08                         byte_D30E:	dc.b 8
0000D8B3 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000D8B8 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000D8BD 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000D8C2 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000D8C7 E005 0008 00               		dc.b $E0, 5, 0,	8, 0
0000D8CC F005 0008 00               		dc.b $F0, 5, 0,	8, 0
0000D8D1 0005 0008 00               		dc.b 0,	5, 0, 8, 0
0000D8D6 1005 0008 00               		dc.b $10, 5, 0,	8, 0
0000D8DC 00                         		even
0000D8DC 00                         		even
0000D8DC                            
0000D8DC                            ; ---------------------------------------------------------------------------
0000D8DC                            ; Object code loading subroutine
0000D8DC                            ; ---------------------------------------------------------------------------
0000D8DC                            
0000D8DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D8DC                            
0000D8DC                            
0000D8DC                            ObjectsLoad:				; XREF: TitleScreen; et al
0000D8DC 41F8 D000                  		lea	($FFFFD000).w,a0 ; set address for object RAM
0000D8E0 7E7F                       		moveq	#$7F,d7
0000D8E2 7000                       		moveq	#0,d0
0000D8E4 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000D8EA 6400                       		bcc.s	loc_D362
0000D8EC                            
0000D8EC                            loc_D348:
0000D8EC 1010                       		move.b	(a0),d0		; load object number from RAM
0000D8EE 6700                       		beq.s	loc_D358
0000D8F0 D040                       		add.w	d0,d0
0000D8F2 D040                       		add.w	d0,d0
0000D8F4 227B 0000                  		movea.l	Obj_Index-4(pc,d0.w),a1
0000D8F8 4E91                       		jsr	(a1)		; run the object's code
0000D8FA 7000                       		moveq	#0,d0
0000D8FC                            
0000D8FC                            loc_D358:
0000D8FC 41E8 0040                  		lea	$40(a0),a0	; next object
0000D900 51CF FFEA                  		dbf	d7,loc_D348
0000D904 4E75                       		rts	
0000D906                            ; ===========================================================================
0000D906                            
0000D906                            loc_D362:
0000D906 7E1F                       		moveq	#$1F,d7
0000D908 61E2                       		bsr.s	loc_D348
0000D90A 7E5F                       		moveq	#$5F,d7
0000D90C                            
0000D90C                            loc_D368:
0000D90C 7000                       		moveq	#0,d0
0000D90E 1010                       		move.b	(a0),d0
0000D910 6700                       		beq.s	loc_D378
0000D912 4A28 0001                  		tst.b	1(a0)
0000D916 6A00                       		bpl.s	loc_D378
0000D918 6100 0000                  		bsr.w	DisplaySprite
0000D91C                            
0000D91C                            loc_D378:
0000D91C 41E8 0040                  		lea	$40(a0),a0
0000D920                            
0000D920                            loc_D37C:
0000D920 51CF FFEA                  		dbf	d7,loc_D368
0000D924 4E75                       		rts	
0000D926                            ; End of function ObjectsLoad
0000D926                            
0000D926                            ; ===========================================================================
0000D926                            ; ---------------------------------------------------------------------------
0000D926                            ; Object pointers
0000D926                            ; ---------------------------------------------------------------------------
0000D926                            Obj_Index:
0000D926                            	include "_inc\Object pointers.asm"
0000D926                            ; ---------------------------------------------------------------------------
0000D926                            ; Object pointers
0000D926                            ; ---------------------------------------------------------------------------
0000D926 0000 0000 0000 0000 0000+  	dc.l Obj01, ObjectFall,	ObjectFall, ObjectFall
0000D936 0000 0000 0000 0000 0000+  	dc.l ObjectFall, ObjectFall, ObjectFall, Obj08
0000D946 0000 0000 0000 0000 0000+  	dc.l Obj09, Obj0A, Obj0B, Obj0C
0000D956 0000 0000 0000 AB46 0000+  	dc.l Obj0D, Obj0E, Obj0F, Obj10
0000D966 0000 777E 0000 0000 0000+  	dc.l Obj11, Obj12, Obj13, Obj14
0000D976 0000 7DA4 0000 0000 0000+  	dc.l Obj15, Obj16, Obj17, Obj18
0000D986 0000 85F2 0000 865A 0000+  	dc.l Obj19, Obj1A, Obj1B, Obj1C
0000D996 0000 8CA4 0000 8F92 0000+  	dc.l Obj1D, Obj1E, Obj1F, Obj20
0000D9A6 0000 0000 0000 9C42 0000+  	dc.l Obj21, Obj22, Obj23, Obj24
0000D9B6 0000 9F7A 0000 A566 0000+  	dc.l Obj25, Obj26, Obj27, Obj28
0000D9C6 0000 989E 0000 8D7A 0000+  	dc.l Obj29, Obj2A, Obj2B, Obj2C
0000D9D6 0000 B16A 0000 A75A 0000+  	dc.l Obj2D, Obj2E, Obj2F, Obj30
0000D9E6 0000 BB78 0000 C226 0000+  	dc.l Obj31, Obj32, Obj33, Obj34
0000D9F6 0000 B6DC 0000 D3D0 0000+  	dc.l Obj35, Obj36, Obj37, Obj38
0000DA06 0000 C9AC 0000 CA66 0000+  	dc.l Obj39, Obj3A, Obj3B, Obj3C
0000DA16 0000 0000 0000 0000 0000+  	dc.l Obj3D, Obj3E, Obj3F, Obj40
0000DA26 0000 0000 0000 0000 0000+  	dc.l Obj41, Obj42, Obj43, Obj44
0000DA36 0000 BE94 0000 0000 0000+  	dc.l Obj45, Obj46, Obj47, Obj48
0000DA46 0000 D666 0000 0000 0000+  	dc.l Obj49, Obj4A, Obj4B, Obj4C
0000DA56 0000 0000 0000 0000 0000+  	dc.l Obj4D, Obj4E, Obj4F, Obj50
0000DA66 0000 0000 0000 0000 0000+  	dc.l Obj51, Obj52, Obj53, Obj54
0000DA76 0000 0000 0000 0000 0000+  	dc.l Obj55, Obj56, Obj57, Obj58
0000DA86 0000 0000 0000 0000 0000+  	dc.l Obj59, Obj5A, Obj5B, Obj5C
0000DA96 0000 0000 0000 0000 0000+  	dc.l Obj5D, Obj5E, Obj5F, Obj60
0000DAA6 0000 0000 0000 0000 0000+  	dc.l Obj61, Obj62, Obj63, Obj64
0000DAB6 0000 0000 0000 0000 0000+  	dc.l Obj65, Obj66, Obj67, Obj68
0000DAC6 0000 0000 0000 0000 0000+  	dc.l Obj69, Obj6A, Obj6B, Obj6C
0000DAD6 0000 0000 0000 0000 0000+  	dc.l Obj6D, Obj6E, Obj6F, Obj70
0000DAE6 0000 0000 0000 0000 0000+  	dc.l Obj71, Obj72, Obj73, Obj74
0000DAF6 0000 0000 0000 0000 0000+  	dc.l Obj75, Obj76, Obj77, Obj78
0000DB06 0000 0000 0000 0000 0000+  	dc.l Obj79, Obj7A, Obj7B, Obj7C
0000DB16 0000 0000 0000 CCA0 0000+  	dc.l Obj7D, Obj7E, Obj7F, Obj80
0000DB26 0000 529E 0000 0000 0000+  	dc.l Obj81, Obj82, Obj83, Obj84
0000DB36 0000 0000 0000 0000 0000+  	dc.l Obj85, Obj86, Obj87, Obj88
0000DB46 0000 5958 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000DB46 0000 5958 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000DB56                            
0000DB56                            ; ---------------------------------------------------------------------------
0000DB56                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000DB56                            ; ---------------------------------------------------------------------------
0000DB56                            
0000DB56                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DB56                            
0000DB56                            
0000DB56                            ObjectFall:
0000DB56 2428 0008                  		move.l	8(a0),d2
0000DB5A 2628 000C                  		move.l	$C(a0),d3
0000DB5E 3028 0010                  		move.w	$10(a0),d0
0000DB62 48C0                       		ext.l	d0
0000DB64 E180                       		asl.l	#8,d0
0000DB66 D480                       		add.l	d0,d2
0000DB68 3028 0012                  		move.w	$12(a0),d0
0000DB6C 0668 0038 0012             		addi.w	#$38,$12(a0)	; increase vertical speed
0000DB72 48C0                       		ext.l	d0
0000DB74 E180                       		asl.l	#8,d0
0000DB76 D680                       		add.l	d0,d3
0000DB78 2142 0008                  		move.l	d2,8(a0)
0000DB7C 2143 000C                  		move.l	d3,$C(a0)
0000DB80 4E75                       		rts	
0000DB82                            ; End of function ObjectFall
0000DB82                            
0000DB82                            ; ---------------------------------------------------------------------------
0000DB82                            ; Subroutine translating object	speed to update	object position
0000DB82                            ; ---------------------------------------------------------------------------
0000DB82                            
0000DB82                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DB82                            
0000DB82                            
0000DB82                            SpeedToPos:
0000DB82 2428 0008                  		move.l	8(a0),d2
0000DB86 2628 000C                  		move.l	$C(a0),d3
0000DB8A 3028 0010                  		move.w	$10(a0),d0	; load horizontal speed
0000DB8E 48C0                       		ext.l	d0
0000DB90 E180                       		asl.l	#8,d0		; multiply speed by $100
0000DB92 D480                       		add.l	d0,d2		; add to x-axis	position
0000DB94 3028 0012                  		move.w	$12(a0),d0	; load vertical	speed
0000DB98 48C0                       		ext.l	d0
0000DB9A E180                       		asl.l	#8,d0		; multiply by $100
0000DB9C D680                       		add.l	d0,d3		; add to y-axis	position
0000DB9E 2142 0008                  		move.l	d2,8(a0)	; update x-axis	position
0000DBA2 2143 000C                  		move.l	d3,$C(a0)	; update y-axis	position
0000DBA6 4E75                       		rts	
0000DBA8                            ; End of function SpeedToPos
0000DBA8                            
0000DBA8                            ; ---------------------------------------------------------------------------
0000DBA8                            ; Subroutine to	display	a sprite/object, when a0 is the	object RAM
0000DBA8                            ; ---------------------------------------------------------------------------
0000DBA8                            
0000DBA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DBA8                            
0000DBA8                            
0000DBA8                            DisplaySprite:
0000DBA8 43F8 AC00                  		lea	($FFFFAC00).w,a1
0000DBAC 3028 0018                  		move.w	$18(a0),d0
0000DBB0 E248                       		lsr.w	#1,d0
0000DBB2 0240 0380                  		andi.w	#$380,d0
0000DBB6 D2C0                       		adda.w	d0,a1
0000DBB8 0C51 007E                  		cmpi.w	#$7E,(a1)
0000DBBC 6400                       		bcc.s	locret_D620
0000DBBE 5451                       		addq.w	#2,(a1)
0000DBC0 D2D1                       		adda.w	(a1),a1
0000DBC2 3288                       		move.w	a0,(a1)
0000DBC4                            
0000DBC4                            locret_D620:
0000DBC4 4E75                       		rts	
0000DBC6                            ; End of function DisplaySprite
0000DBC6                            
0000DBC6                            ; ---------------------------------------------------------------------------
0000DBC6                            ; Subroutine to	display	a 2nd sprite/object, when a1 is	the object RAM
0000DBC6                            ; ---------------------------------------------------------------------------
0000DBC6                            
0000DBC6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DBC6                            
0000DBC6                            
0000DBC6                            DisplaySprite2:
0000DBC6 45F8 AC00                  		lea	($FFFFAC00).w,a2
0000DBCA 3029 0018                  		move.w	$18(a1),d0
0000DBCE E248                       		lsr.w	#1,d0
0000DBD0 0240 0380                  		andi.w	#$380,d0
0000DBD4 D4C0                       		adda.w	d0,a2
0000DBD6 0C52 007E                  		cmpi.w	#$7E,(a2)
0000DBDA 6400                       		bcc.s	locret_D63E
0000DBDC 5452                       		addq.w	#2,(a2)
0000DBDE D4D2                       		adda.w	(a2),a2
0000DBE0 3489                       		move.w	a1,(a2)
0000DBE2                            
0000DBE2                            locret_D63E:
0000DBE2 4E75                       		rts	
0000DBE4                            ; End of function DisplaySprite2
0000DBE4                            
0000DBE4                            ; ---------------------------------------------------------------------------
0000DBE4                            ; Subroutine to	delete an object
0000DBE4                            ; ---------------------------------------------------------------------------
0000DBE4                            
0000DBE4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DBE4                            
0000DBE4                            
0000DBE4                            DeleteObject:
0000DBE4 2248                       		movea.l	a0,a1
0000DBE6                            
0000DBE6                            DeleteObject2:
0000DBE6 7200                       		moveq	#0,d1
0000DBE8 700F                       		moveq	#$F,d0
0000DBEA                            
0000DBEA                            loc_D646:
0000DBEA 22C1                       		move.l	d1,(a1)+	; clear	the object RAM
0000DBEC 51C8 FFFC                  		dbf	d0,loc_D646	; repeat $F times (length of object RAM)
0000DBF0 4E75                       		rts	
0000DBF2                            ; End of function DeleteObject
0000DBF2                            
0000DBF2                            ; ===========================================================================
0000DBF2 0000 0000                  BldSpr_ScrPos:	dc.l 0			; blank
0000DBF6 00FF F700                  		dc.l $FFF700		; main screen x-position
0000DBFA 00FF F708                  		dc.l $FFF708		; background x-position	1
0000DBFE 00FF F718                  		dc.l $FFF718		; background x-position	2
0000DC02                            ; ---------------------------------------------------------------------------
0000DC02                            ; Subroutine to	convert	mappings (etc) to proper Megadrive sprites
0000DC02                            ; ---------------------------------------------------------------------------
0000DC02                            
0000DC02                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DC02                            
0000DC02                            
0000DC02                            BuildSprites:				; XREF: TitleScreen; et al
0000DC02 45F8 F800                  		lea	($FFFFF800).w,a2 ; set address for sprite table
0000DC06 7A00                       		moveq	#0,d5
0000DC08 49F8 AC00                  		lea	($FFFFAC00).w,a4
0000DC0C 7E07                       		moveq	#7,d7
0000DC0E                            
0000DC0E                            loc_D66A:
0000DC0E 4A54                       		tst.w	(a4)
0000DC10 6700 0000                  		beq.w	loc_D72E
0000DC14 7C02                       		moveq	#2,d6
0000DC16                            
0000DC16                            loc_D672:
0000DC16 3074 6000                  		movea.w	(a4,d6.w),a0
0000DC1A 4A10                       		tst.b	(a0)
0000DC1C 6700 0000                  		beq.w	loc_D726
0000DC20 08A8 0007 0001             		bclr	#7,1(a0)
0000DC26 1028 0001                  		move.b	1(a0),d0
0000DC2A 1800                       		move.b	d0,d4
0000DC2C 0240 000C                  		andi.w	#$C,d0
0000DC30 6700                       		beq.s	loc_D6DE
0000DC32 227B 00BE                  		movea.l	BldSpr_ScrPos(pc,d0.w),a1
0000DC36 7000                       		moveq	#0,d0
0000DC38 1028 0019                  		move.b	$19(a0),d0
0000DC3C 3628 0008                  		move.w	8(a0),d3
0000DC40 9651                       		sub.w	(a1),d3
0000DC42 3203                       		move.w	d3,d1
0000DC44 D240                       		add.w	d0,d1
0000DC46 6B00 0000                  		bmi.w	loc_D726
0000DC4A 3203                       		move.w	d3,d1
0000DC4C 9240                       		sub.w	d0,d1
0000DC4E 0C41 0140                  		cmpi.w	#$140,d1
0000DC52 6C00                       		bge.s	loc_D726
0000DC54 0643 0080                  		addi.w	#$80,d3
0000DC58 0804 0004                  		btst	#4,d4
0000DC5C 6700                       		beq.s	loc_D6E8
0000DC5E 7000                       		moveq	#0,d0
0000DC60 1028 0016                  		move.b	$16(a0),d0
0000DC64 3428 000C                  		move.w	$C(a0),d2
0000DC68 9469 0004                  		sub.w	4(a1),d2
0000DC6C 3202                       		move.w	d2,d1
0000DC6E D240                       		add.w	d0,d1
0000DC70 6B00                       		bmi.s	loc_D726
0000DC72 3202                       		move.w	d2,d1
0000DC74 9240                       		sub.w	d0,d1
0000DC76 0C41 00E0                  		cmpi.w	#$E0,d1
0000DC7A 6C00                       		bge.s	loc_D726
0000DC7C 0642 0080                  		addi.w	#$80,d2
0000DC80 6000                       		bra.s	loc_D700
0000DC82                            ; ===========================================================================
0000DC82                            
0000DC82                            loc_D6DE:
0000DC82 3428 000A                  		move.w	$A(a0),d2
0000DC86 3628 0008                  		move.w	8(a0),d3
0000DC8A 6000                       		bra.s	loc_D700
0000DC8C                            ; ===========================================================================
0000DC8C                            
0000DC8C                            loc_D6E8:
0000DC8C 3428 000C                  		move.w	$C(a0),d2
0000DC90 9469 0004                  		sub.w	4(a1),d2
0000DC94 0642 0080                  		addi.w	#$80,d2
0000DC98 0C42 0060                  		cmpi.w	#$60,d2
0000DC9C 6500                       		bcs.s	loc_D726
0000DC9E 0C42 0180                  		cmpi.w	#$180,d2
0000DCA2 6400                       		bcc.s	loc_D726
0000DCA4                            
0000DCA4                            loc_D700:
0000DCA4 2268 0004                  		movea.l	4(a0),a1
0000DCA8 7200                       		moveq	#0,d1
0000DCAA 0804 0005                  		btst	#5,d4
0000DCAE 6600                       		bne.s	loc_D71C
0000DCB0 1228 001A                  		move.b	$1A(a0),d1
0000DCB4 D201                       		add.b	d1,d1
0000DCB6 D2F1 1000                  		adda.w	(a1,d1.w),a1
0000DCBA 1219                       		move.b	(a1)+,d1
0000DCBC 5301                       		subq.b	#1,d1
0000DCBE 6B00                       		bmi.s	loc_D720
0000DCC0                            
0000DCC0                            loc_D71C:
0000DCC0 6100 0000                  		bsr.w	sub_D750
0000DCC4                            
0000DCC4                            loc_D720:
0000DCC4 08E8 0007 0001             		bset	#7,1(a0)
0000DCCA                            
0000DCCA                            loc_D726:
0000DCCA 5446                       		addq.w	#2,d6
0000DCCC 5554                       		subq.w	#2,(a4)
0000DCCE 6600 FF46                  		bne.w	loc_D672
0000DCD2                            
0000DCD2                            loc_D72E:
0000DCD2 49EC 0080                  		lea	$80(a4),a4
0000DCD6 51CF FF36                  		dbf	d7,loc_D66A
0000DCDA 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0000DCDE 0C05 0050                  		cmpi.b	#$50,d5
0000DCE2 6700                       		beq.s	loc_D748
0000DCE4 24BC 0000 0000             		move.l	#0,(a2)
0000DCEA 4E75                       		rts	
0000DCEC                            ; ===========================================================================
0000DCEC                            
0000DCEC                            loc_D748:
0000DCEC 157C 0000 FFFB             		move.b	#0,-5(a2)
0000DCF2 4E75                       		rts	
0000DCF4                            ; End of function BuildSprites
0000DCF4                            
0000DCF4                            
0000DCF4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DCF4                            
0000DCF4                            
0000DCF4                            sub_D750:				; XREF: BuildSprites
0000DCF4 3668 0002                  		movea.w	2(a0),a3
0000DCF8 0804 0000                  		btst	#0,d4
0000DCFC 6600                       		bne.s	loc_D796
0000DCFE 0804 0001                  		btst	#1,d4
0000DD02 6600 0000                  		bne.w	loc_D7E4
0000DD06                            ; End of function sub_D750
0000DD06                            
0000DD06                            
0000DD06                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DD06                            
0000DD06                            
0000DD06                            sub_D762:				; XREF: sub_D762; SS_ShowLayout
0000DD06 0C05 0050                  		cmpi.b	#$50,d5
0000DD0A 6700                       		beq.s	locret_D794
0000DD0C 1019                       		move.b	(a1)+,d0
0000DD0E 4880                       		ext.w	d0
0000DD10 D042                       		add.w	d2,d0
0000DD12 34C0                       		move.w	d0,(a2)+
0000DD14 14D9                       		move.b	(a1)+,(a2)+
0000DD16 5205                       		addq.b	#1,d5
0000DD18 14C5                       		move.b	d5,(a2)+
0000DD1A 1019                       		move.b	(a1)+,d0
0000DD1C E148                       		lsl.w	#8,d0
0000DD1E 1019                       		move.b	(a1)+,d0
0000DD20 D04B                       		add.w	a3,d0
0000DD22 34C0                       		move.w	d0,(a2)+
0000DD24 1019                       		move.b	(a1)+,d0
0000DD26 4880                       		ext.w	d0
0000DD28 D043                       		add.w	d3,d0
0000DD2A 0240 01FF                  		andi.w	#$1FF,d0
0000DD2E 6600                       		bne.s	loc_D78E
0000DD30 5240                       		addq.w	#1,d0
0000DD32                            
0000DD32                            loc_D78E:
0000DD32 34C0                       		move.w	d0,(a2)+
0000DD34 51C9 FFD0                  		dbf	d1,sub_D762
0000DD38                            
0000DD38                            locret_D794:
0000DD38 4E75                       		rts	
0000DD3A                            ; End of function sub_D762
0000DD3A                            
0000DD3A                            ; ===========================================================================
0000DD3A                            
0000DD3A                            loc_D796:
0000DD3A 0804 0001                  		btst	#1,d4
0000DD3E 6600 0000                  		bne.w	loc_D82A
0000DD42                            
0000DD42                            loc_D79E:
0000DD42 0C05 0050                  		cmpi.b	#$50,d5
0000DD46 6700                       		beq.s	locret_D7E2
0000DD48 1019                       		move.b	(a1)+,d0
0000DD4A 4880                       		ext.w	d0
0000DD4C D042                       		add.w	d2,d0
0000DD4E 34C0                       		move.w	d0,(a2)+
0000DD50 1819                       		move.b	(a1)+,d4
0000DD52 14C4                       		move.b	d4,(a2)+
0000DD54 5205                       		addq.b	#1,d5
0000DD56 14C5                       		move.b	d5,(a2)+
0000DD58 1019                       		move.b	(a1)+,d0
0000DD5A E148                       		lsl.w	#8,d0
0000DD5C 1019                       		move.b	(a1)+,d0
0000DD5E D04B                       		add.w	a3,d0
0000DD60 0A40 0800                  		eori.w	#$800,d0
0000DD64 34C0                       		move.w	d0,(a2)+
0000DD66 1019                       		move.b	(a1)+,d0
0000DD68 4880                       		ext.w	d0
0000DD6A 4440                       		neg.w	d0
0000DD6C D804                       		add.b	d4,d4
0000DD6E 0244 0018                  		andi.w	#$18,d4
0000DD72 5044                       		addq.w	#8,d4
0000DD74 9044                       		sub.w	d4,d0
0000DD76 D043                       		add.w	d3,d0
0000DD78 0240 01FF                  		andi.w	#$1FF,d0
0000DD7C 6600                       		bne.s	loc_D7DC
0000DD7E 5240                       		addq.w	#1,d0
0000DD80                            
0000DD80                            loc_D7DC:
0000DD80 34C0                       		move.w	d0,(a2)+
0000DD82 51C9 FFBE                  		dbf	d1,loc_D79E
0000DD86                            
0000DD86                            locret_D7E2:
0000DD86 4E75                       		rts	
0000DD88                            ; ===========================================================================
0000DD88                            
0000DD88                            loc_D7E4:				; XREF: sub_D750
0000DD88 0C05 0050                  		cmpi.b	#$50,d5
0000DD8C 6700                       		beq.s	locret_D828
0000DD8E 1019                       		move.b	(a1)+,d0
0000DD90 1811                       		move.b	(a1),d4
0000DD92 4880                       		ext.w	d0
0000DD94 4440                       		neg.w	d0
0000DD96 E70C                       		lsl.b	#3,d4
0000DD98 0244 0018                  		andi.w	#$18,d4
0000DD9C 5044                       		addq.w	#8,d4
0000DD9E 9044                       		sub.w	d4,d0
0000DDA0 D042                       		add.w	d2,d0
0000DDA2 34C0                       		move.w	d0,(a2)+
0000DDA4 14D9                       		move.b	(a1)+,(a2)+
0000DDA6 5205                       		addq.b	#1,d5
0000DDA8 14C5                       		move.b	d5,(a2)+
0000DDAA 1019                       		move.b	(a1)+,d0
0000DDAC E148                       		lsl.w	#8,d0
0000DDAE 1019                       		move.b	(a1)+,d0
0000DDB0 D04B                       		add.w	a3,d0
0000DDB2 0A40 1000                  		eori.w	#$1000,d0
0000DDB6 34C0                       		move.w	d0,(a2)+
0000DDB8 1019                       		move.b	(a1)+,d0
0000DDBA 4880                       		ext.w	d0
0000DDBC D043                       		add.w	d3,d0
0000DDBE 0240 01FF                  		andi.w	#$1FF,d0
0000DDC2 6600                       		bne.s	loc_D822
0000DDC4 5240                       		addq.w	#1,d0
0000DDC6                            
0000DDC6                            loc_D822:
0000DDC6 34C0                       		move.w	d0,(a2)+
0000DDC8 51C9 FFBE                  		dbf	d1,loc_D7E4
0000DDCC                            
0000DDCC                            locret_D828:
0000DDCC 4E75                       		rts	
0000DDCE                            ; ===========================================================================
0000DDCE                            
0000DDCE                            loc_D82A:
0000DDCE 0C05 0050                  		cmpi.b	#$50,d5
0000DDD2 6700                       		beq.s	locret_D87C
0000DDD4 1019                       		move.b	(a1)+,d0
0000DDD6 1811                       		move.b	(a1),d4
0000DDD8 4880                       		ext.w	d0
0000DDDA 4440                       		neg.w	d0
0000DDDC E70C                       		lsl.b	#3,d4
0000DDDE 0244 0018                  		andi.w	#$18,d4
0000DDE2 5044                       		addq.w	#8,d4
0000DDE4 9044                       		sub.w	d4,d0
0000DDE6 D042                       		add.w	d2,d0
0000DDE8 34C0                       		move.w	d0,(a2)+
0000DDEA 1819                       		move.b	(a1)+,d4
0000DDEC 14C4                       		move.b	d4,(a2)+
0000DDEE 5205                       		addq.b	#1,d5
0000DDF0 14C5                       		move.b	d5,(a2)+
0000DDF2 1019                       		move.b	(a1)+,d0
0000DDF4 E148                       		lsl.w	#8,d0
0000DDF6 1019                       		move.b	(a1)+,d0
0000DDF8 D04B                       		add.w	a3,d0
0000DDFA 0A40 1800                  		eori.w	#$1800,d0
0000DDFE 34C0                       		move.w	d0,(a2)+
0000DE00 1019                       		move.b	(a1)+,d0
0000DE02 4880                       		ext.w	d0
0000DE04 4440                       		neg.w	d0
0000DE06 D804                       		add.b	d4,d4
0000DE08 0244 0018                  		andi.w	#$18,d4
0000DE0C 5044                       		addq.w	#8,d4
0000DE0E 9044                       		sub.w	d4,d0
0000DE10 D043                       		add.w	d3,d0
0000DE12 0240 01FF                  		andi.w	#$1FF,d0
0000DE16 6600                       		bne.s	loc_D876
0000DE18 5240                       		addq.w	#1,d0
0000DE1A                            
0000DE1A                            loc_D876:
0000DE1A 34C0                       		move.w	d0,(a2)+
0000DE1C 51C9 FFB0                  		dbf	d1,loc_D82A
0000DE20                            
0000DE20                            locret_D87C:
0000DE20 4E75                       		rts	
0000DE22                            ; ---------------------------------------------------------------------------
0000DE22                            ; Subroutine to	check if an object is on the screen
0000DE22                            ; ---------------------------------------------------------------------------
0000DE22                            
0000DE22                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DE22                            
0000DE22                            
0000DE22                            ChkObjOnScreen:
0000DE22 3028 0008                  		move.w	8(a0),d0	; get object x-position
0000DE26 9078 F700                  		sub.w	($FFFFF700).w,d0 ; subtract screen x-position
0000DE2A 6B00                       		bmi.s	NotOnScreen
0000DE2C 0C40 0140                  		cmpi.w	#320,d0		; is object on the screen?
0000DE30 6C00                       		bge.s	NotOnScreen	; if not, branch
0000DE32                            
0000DE32 3228 000C                  		move.w	$C(a0),d1	; get object y-position
0000DE36 9278 F704                  		sub.w	($FFFFF704).w,d1 ; subtract screen y-position
0000DE3A 6B00                       		bmi.s	NotOnScreen
0000DE3C 0C41 00E0                  		cmpi.w	#224,d1		; is object on the screen?
0000DE40 6C00                       		bge.s	NotOnScreen	; if not, branch
0000DE42                            
0000DE42 7000                       		moveq	#0,d0		; set flag to 0
0000DE44 4E75                       		rts	
0000DE46                            ; ===========================================================================
0000DE46                            
0000DE46                            NotOnScreen:				; XREF: ChkObjOnScreen
0000DE46 7001                       		moveq	#1,d0		; set flag to 1
0000DE48 4E75                       		rts	
0000DE4A                            ; End of function ChkObjOnScreen
0000DE4A                            
0000DE4A                            
0000DE4A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DE4A                            
0000DE4A                            
0000DE4A                            ChkObjOnScreen2:
0000DE4A 7200                       		moveq	#0,d1
0000DE4C 1228 0019                  		move.b	$19(a0),d1
0000DE50 3028 0008                  		move.w	8(a0),d0
0000DE54 9078 F700                  		sub.w	($FFFFF700).w,d0
0000DE58 D041                       		add.w	d1,d0
0000DE5A 6B00                       		bmi.s	NotOnScreen2
0000DE5C D241                       		add.w	d1,d1
0000DE5E 9041                       		sub.w	d1,d0
0000DE60 0C40 0140                  		cmpi.w	#320,d0
0000DE64 6C00                       		bge.s	NotOnScreen2
0000DE66                            
0000DE66 3228 000C                  		move.w	$C(a0),d1
0000DE6A 9278 F704                  		sub.w	($FFFFF704).w,d1
0000DE6E 6B00                       		bmi.s	NotOnScreen2
0000DE70 0C41 00E0                  		cmpi.w	#224,d1
0000DE74 6C00                       		bge.s	NotOnScreen2
0000DE76                            
0000DE76 7000                       		moveq	#0,d0
0000DE78 4E75                       		rts	
0000DE7A                            ; ===========================================================================
0000DE7A                            
0000DE7A                            NotOnScreen2:				; XREF: ChkObjOnScreen2
0000DE7A 7001                       		moveq	#1,d0
0000DE7C 4E75                       		rts	
0000DE7E                            ; End of function ChkObjOnScreen2
0000DE7E                            
0000DE7E                            ; ---------------------------------------------------------------------------
0000DE7E                            ; Subroutine to	load a level's objects
0000DE7E                            ; ---------------------------------------------------------------------------
0000DE7E                            
0000DE7E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DE7E                            
0000DE7E                            
0000DE7E                            ObjPosLoad:				; XREF: Level; et al
0000DE7E 7000                       		moveq	#0,d0
0000DE80 1038 F76C                  		move.b	($FFFFF76C).w,d0
0000DE84 303B 0000                  		move.w	OPL_Index(pc,d0.w),d0
0000DE88 4EFB 0000                  		jmp	OPL_Index(pc,d0.w)
0000DE8C                            ; End of function ObjPosLoad
0000DE8C                            
0000DE8C                            ; ===========================================================================
0000DE8C 0000                       OPL_Index:	dc.w OPL_Main-OPL_Index
0000DE8E 0000                       		dc.w OPL_Next-OPL_Index
0000DE90                            ; ===========================================================================
0000DE90                            
0000DE90                            OPL_Main:				; XREF: OPL_Index
0000DE90 5438 F76C                  		addq.b	#2,($FFFFF76C).w
0000DE94 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000DE98 ED08                       		lsl.b	#6,d0
0000DE9A E848                       		lsr.w	#4,d0
0000DE9C 41F9 0000 0000             		lea	(ObjPos_Index).l,a0
0000DEA2 2248                       		movea.l	a0,a1
0000DEA4 D0F0 0000                  		adda.w	(a0,d0.w),a0
0000DEA8 21C8 F770                  		move.l	a0,($FFFFF770).w
0000DEAC 21C8 F774                  		move.l	a0,($FFFFF774).w
0000DEB0 D2F1 0002                  		adda.w	2(a1,d0.w),a1
0000DEB4 21C9 F778                  		move.l	a1,($FFFFF778).w
0000DEB8 21C9 F77C                  		move.l	a1,($FFFFF77C).w
0000DEBC 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000DEC0 34FC 0101                  		move.w	#$101,(a2)+
0000DEC4 303C 005E                  		move.w	#$5E,d0
0000DEC8                            
0000DEC8                            OPL_ClrList:
0000DEC8 429A                       		clr.l	(a2)+
0000DECA 51C8 FFFC                  		dbf	d0,OPL_ClrList	; clear	pre-destroyed object list
0000DECE                            
0000DECE 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000DED2 7400                       		moveq	#0,d2
0000DED4 3C38 F700                  		move.w	($FFFFF700).w,d6
0000DED8 0446 0080                  		subi.w	#$80,d6
0000DEDC 6400                       		bcc.s	loc_D93C
0000DEDE 7C00                       		moveq	#0,d6
0000DEE0                            
0000DEE0                            loc_D93C:
0000DEE0 0246 FF80                  		andi.w	#$FF80,d6
0000DEE4 2078 F770                  		movea.l	($FFFFF770).w,a0
0000DEE8                            
0000DEE8                            loc_D944:
0000DEE8 BC50                       		cmp.w	(a0),d6
0000DEEA 6300                       		bls.s	loc_D956
0000DEEC 4A28 0004                  		tst.b	4(a0)
0000DEF0 6A00                       		bpl.s	loc_D952
0000DEF2 1412                       		move.b	(a2),d2
0000DEF4 5212                       		addq.b	#1,(a2)
0000DEF6                            
0000DEF6                            loc_D952:
0000DEF6 5C48                       		addq.w	#6,a0
0000DEF8 60EE                       		bra.s	loc_D944
0000DEFA                            ; ===========================================================================
0000DEFA                            
0000DEFA                            loc_D956:
0000DEFA 21C8 F770                  		move.l	a0,($FFFFF770).w
0000DEFE 2078 F774                  		movea.l	($FFFFF774).w,a0
0000DF02 0446 0080                  		subi.w	#$80,d6
0000DF06 6500                       		bcs.s	loc_D976
0000DF08                            
0000DF08                            loc_D964:
0000DF08 BC50                       		cmp.w	(a0),d6
0000DF0A 6300                       		bls.s	loc_D976
0000DF0C 4A28 0004                  		tst.b	4(a0)
0000DF10 6A00                       		bpl.s	loc_D972
0000DF12 522A 0001                  		addq.b	#1,1(a2)
0000DF16                            
0000DF16                            loc_D972:
0000DF16 5C48                       		addq.w	#6,a0
0000DF18 60EE                       		bra.s	loc_D964
0000DF1A                            ; ===========================================================================
0000DF1A                            
0000DF1A                            loc_D976:
0000DF1A 21C8 F774                  		move.l	a0,($FFFFF774).w
0000DF1E 31FC FFFF F76E             		move.w	#-1,($FFFFF76E).w
0000DF24                            
0000DF24                            OPL_Next:				; XREF: OPL_Index
0000DF24 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000DF28 7400                       		moveq	#0,d2
0000DF2A 3C38 F700                  		move.w	($FFFFF700).w,d6
0000DF2E 0246 FF80                  		andi.w	#$FF80,d6
0000DF32 BC78 F76E                  		cmp.w	($FFFFF76E).w,d6
0000DF36 6700 0000                  		beq.w	locret_DA3A
0000DF3A 6C00                       		bge.s	loc_D9F6
0000DF3C 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000DF40 2078 F774                  		movea.l	($FFFFF774).w,a0
0000DF44 0446 0080                  		subi.w	#$80,d6
0000DF48 6500                       		bcs.s	loc_D9D2
0000DF4A                            
0000DF4A                            loc_D9A6:
0000DF4A BC68 FFFA                  		cmp.w	-6(a0),d6
0000DF4E 6C00                       		bge.s	loc_D9D2
0000DF50 5D48                       		subq.w	#6,a0
0000DF52 4A28 0004                  		tst.b	4(a0)
0000DF56 6A00                       		bpl.s	loc_D9BC
0000DF58 532A 0001                  		subq.b	#1,1(a2)
0000DF5C 142A 0001                  		move.b	1(a2),d2
0000DF60                            
0000DF60                            loc_D9BC:
0000DF60 6100 0000                  		bsr.w	loc_DA3C
0000DF64 6600                       		bne.s	loc_D9C6
0000DF66 5D48                       		subq.w	#6,a0
0000DF68 60E0                       		bra.s	loc_D9A6
0000DF6A                            ; ===========================================================================
0000DF6A                            
0000DF6A                            loc_D9C6:
0000DF6A 4A28 0004                  		tst.b	4(a0)
0000DF6E 6A00                       		bpl.s	loc_D9D0
0000DF70 522A 0001                  		addq.b	#1,1(a2)
0000DF74                            
0000DF74                            loc_D9D0:
0000DF74 5C48                       		addq.w	#6,a0
0000DF76                            
0000DF76                            loc_D9D2:
0000DF76 21C8 F774                  		move.l	a0,($FFFFF774).w
0000DF7A 2078 F770                  		movea.l	($FFFFF770).w,a0
0000DF7E 0646 0300                  		addi.w	#$300,d6
0000DF82                            
0000DF82                            loc_D9DE:
0000DF82 BC68 FFFA                  		cmp.w	-6(a0),d6
0000DF86 6E00                       		bgt.s	loc_D9F0
0000DF88 4A28 FFFE                  		tst.b	-2(a0)
0000DF8C 6A00                       		bpl.s	loc_D9EC
0000DF8E 5312                       		subq.b	#1,(a2)
0000DF90                            
0000DF90                            loc_D9EC:
0000DF90 5D48                       		subq.w	#6,a0
0000DF92 60EE                       		bra.s	loc_D9DE
0000DF94                            ; ===========================================================================
0000DF94                            
0000DF94                            loc_D9F0:
0000DF94 21C8 F770                  		move.l	a0,($FFFFF770).w
0000DF98 4E75                       		rts	
0000DF9A                            ; ===========================================================================
0000DF9A                            
0000DF9A                            loc_D9F6:
0000DF9A 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000DF9E 2078 F770                  		movea.l	($FFFFF770).w,a0
0000DFA2 0646 0280                  		addi.w	#$280,d6
0000DFA6                            
0000DFA6                            loc_DA02:
0000DFA6 BC50                       		cmp.w	(a0),d6
0000DFA8 6300                       		bls.s	loc_DA16
0000DFAA 4A28 0004                  		tst.b	4(a0)
0000DFAE 6A00                       		bpl.s	loc_DA10
0000DFB0 1412                       		move.b	(a2),d2
0000DFB2 5212                       		addq.b	#1,(a2)
0000DFB4                            
0000DFB4                            loc_DA10:
0000DFB4 6100 0000                  		bsr.w	loc_DA3C
0000DFB8 67EC                       		beq.s	loc_DA02
0000DFBA                            
0000DFBA                            loc_DA16:
0000DFBA 21C8 F770                  		move.l	a0,($FFFFF770).w
0000DFBE 2078 F774                  		movea.l	($FFFFF774).w,a0
0000DFC2 0446 0300                  		subi.w	#$300,d6
0000DFC6 6500                       		bcs.s	loc_DA36
0000DFC8                            
0000DFC8                            loc_DA24:
0000DFC8 BC50                       		cmp.w	(a0),d6
0000DFCA 6300                       		bls.s	loc_DA36
0000DFCC 4A28 0004                  		tst.b	4(a0)
0000DFD0 6A00                       		bpl.s	loc_DA32
0000DFD2 522A 0001                  		addq.b	#1,1(a2)
0000DFD6                            
0000DFD6                            loc_DA32:
0000DFD6 5C48                       		addq.w	#6,a0
0000DFD8 60EE                       		bra.s	loc_DA24
0000DFDA                            ; ===========================================================================
0000DFDA                            
0000DFDA                            loc_DA36:
0000DFDA 21C8 F774                  		move.l	a0,($FFFFF774).w
0000DFDE                            
0000DFDE                            locret_DA3A:
0000DFDE 4E75                       		rts	
0000DFE0                            ; ===========================================================================
0000DFE0                            
0000DFE0                            loc_DA3C:
0000DFE0 4A28 0004                  		tst.b	4(a0)
0000DFE4 6A00                       		bpl.s	OPL_MakeItem
0000DFE6 08F2 0007 2002             		bset	#7,2(a2,d2.w)
0000DFEC 6700                       		beq.s	OPL_MakeItem
0000DFEE 5C48                       		addq.w	#6,a0
0000DFF0 7000                       		moveq	#0,d0
0000DFF2 4E75                       		rts	
0000DFF4                            ; ===========================================================================
0000DFF4                            
0000DFF4                            OPL_MakeItem:
0000DFF4 6100 0000                  		bsr.w	SingleObjLoad
0000DFF8 6600                       		bne.s	locret_DA8A
0000DFFA 3358 0008                  		move.w	(a0)+,8(a1)
0000DFFE 3018                       		move.w	(a0)+,d0
0000E000 3200                       		move.w	d0,d1
0000E002 0240 0FFF                  		andi.w	#$FFF,d0
0000E006 3340 000C                  		move.w	d0,$C(a1)
0000E00A E559                       		rol.w	#2,d1
0000E00C 0201 0003                  		andi.b	#3,d1
0000E010 1341 0001                  		move.b	d1,1(a1)
0000E014 1341 0022                  		move.b	d1,$22(a1)
0000E018 1018                       		move.b	(a0)+,d0
0000E01A 6A00                       		bpl.s	loc_DA80
0000E01C 0200 007F                  		andi.b	#$7F,d0
0000E020 1342 0023                  		move.b	d2,$23(a1)
0000E024                            
0000E024                            loc_DA80:
0000E024 1280                       		move.b	d0,0(a1)
0000E026 1358 0028                  		move.b	(a0)+,$28(a1)
0000E02A 7000                       		moveq	#0,d0
0000E02C                            
0000E02C                            locret_DA8A:
0000E02C 4E75                       		rts	
0000E02E                            ; ---------------------------------------------------------------------------
0000E02E                            ; Single object	loading	subroutine
0000E02E                            ; ---------------------------------------------------------------------------
0000E02E                            
0000E02E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E02E                            
0000E02E                            
0000E02E                            SingleObjLoad:
0000E02E 43F8 D800                  		lea	($FFFFD800).w,a1 ; start address for object RAM
0000E032 303C 005F                  		move.w	#$5F,d0
0000E036                            
0000E036                            loc_DA94:
0000E036 4A11                       		tst.b	(a1)		; is object RAM	slot empty?
0000E038 6700                       		beq.s	locret_DAA0	; if yes, branch
0000E03A 43E9 0040                  		lea	$40(a1),a1	; goto next object RAM slot
0000E03E 51C8 FFF6                  		dbf	d0,loc_DA94	; repeat $5F times
0000E042                            
0000E042                            locret_DAA0:
0000E042 4E75                       		rts	
0000E044                            ; End of function SingleObjLoad
0000E044                            
0000E044                            
0000E044                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E044                            
0000E044                            
0000E044                            SingleObjLoad2:
0000E044 2248                       		movea.l	a0,a1
0000E046 303C F000                  		move.w	#-$1000,d0
0000E04A 9048                       		sub.w	a0,d0
0000E04C EC48                       		lsr.w	#6,d0
0000E04E 5340                       		subq.w	#1,d0
0000E050 6500                       		bcs.s	locret_DABC
0000E052                            
0000E052                            loc_DAB0:
0000E052 4A11                       		tst.b	(a1)
0000E054 6700                       		beq.s	locret_DABC
0000E056 43E9 0040                  		lea	$40(a1),a1
0000E05A 51C8 FFF6                  		dbf	d0,loc_DAB0
0000E05E                            
0000E05E                            locret_DABC:
0000E05E 4E75                       		rts	
0000E060                            ; End of function SingleObjLoad2
0000E060                            
0000E060                            ; ===========================================================================
0000E060                            ; ---------------------------------------------------------------------------
0000E060                            ; Object 41 - springs
0000E060                            ; ---------------------------------------------------------------------------
0000E060                            
0000E060                            Obj41:					; XREF: Obj_Index
0000E060 7000                       		moveq	#0,d0
0000E062 1028 0024                  		move.b	$24(a0),d0
0000E066 323B 0000                  		move.w	Obj41_Index(pc,d0.w),d1
0000E06A 4EBB 1000                  		jsr	Obj41_Index(pc,d1.w)
0000E06E 6100 FB38                  		bsr.w	DisplaySprite
0000E072 3028 0008                  		move.w	8(a0),d0
0000E076 0240 FF80                  		andi.w	#$FF80,d0
0000E07A 3238 F700                  		move.w	($FFFFF700).w,d1
0000E07E 0441 0080                  		subi.w	#$80,d1
0000E082 0241 FF80                  		andi.w	#$FF80,d1
0000E086 9041                       		sub.w	d1,d0
0000E088 0C40 0280                  		cmpi.w	#$280,d0
0000E08C 6200 FB56                  		bhi.w	DeleteObject
0000E090 4E75                       		rts	
0000E092                            ; ===========================================================================
0000E092 0000                       Obj41_Index:	dc.w Obj41_Main-Obj41_Index
0000E094 0000                       		dc.w Obj41_Up-Obj41_Index
0000E096 0000                       		dc.w Obj41_AniUp-Obj41_Index
0000E098 0000                       		dc.w Obj41_ResetUp-Obj41_Index
0000E09A 0000                       		dc.w Obj41_LR-Obj41_Index
0000E09C 0000                       		dc.w Obj41_AniLR-Obj41_Index
0000E09E 0000                       		dc.w Obj41_ResetLR-Obj41_Index
0000E0A0 0000                       		dc.w Obj41_Dwn-Obj41_Index
0000E0A2 0000                       		dc.w Obj41_AniDwn-Obj41_Index
0000E0A4 0000                       		dc.w Obj41_ResetDwn-Obj41_Index
0000E0A6                            
0000E0A6 F000                       Obj41_Powers:	dc.w -$1000		; power	of red spring
0000E0A8 F600                       		dc.w -$A00		; power	of yellow spring
0000E0AA                            ; ===========================================================================
0000E0AA                            
0000E0AA                            Obj41_Main:				; XREF: Obj41_Index
0000E0AA 5428 0024                  		addq.b	#2,$24(a0)
0000E0AE 217C 0000 0000 0004        		move.l	#Map_obj41,4(a0)
0000E0B6 317C 0523 0002             		move.w	#$523,2(a0)
0000E0BC 0028 0004 0001             		ori.b	#4,1(a0)
0000E0C2 117C 0010 0019             		move.b	#$10,$19(a0)
0000E0C8 117C 0004 0018             		move.b	#4,$18(a0)
0000E0CE 1028 0028                  		move.b	$28(a0),d0
0000E0D2 0800 0004                  		btst	#4,d0		; does the spring face left/right?
0000E0D6 6700                       		beq.s	loc_DB54	; if not, branch
0000E0D8 117C 0008 0024             		move.b	#8,$24(a0)	; use "Obj41_LR" routine
0000E0DE 117C 0001 001C             		move.b	#1,$1C(a0)
0000E0E4 117C 0003 001A             		move.b	#3,$1A(a0)
0000E0EA 317C 0533 0002             		move.w	#$533,2(a0)
0000E0F0 117C 0008 0019             		move.b	#8,$19(a0)
0000E0F6                            
0000E0F6                            loc_DB54:
0000E0F6 0800 0005                  		btst	#5,d0		; does the spring face downwards?
0000E0FA 6700                       		beq.s	loc_DB66	; if not, branch
0000E0FC 117C 000E 0024             		move.b	#$E,$24(a0)	; use "Obj41_Dwn" routine
0000E102 08E8 0001 0022             		bset	#1,$22(a0)
0000E108                            
0000E108                            loc_DB66:
0000E108 0800 0001                  		btst	#1,d0
0000E10C 6700                       		beq.s	loc_DB72
0000E10E 08E8 0005 0002             		bset	#5,2(a0)
0000E114                            
0000E114                            loc_DB72:
0000E114 0240 000F                  		andi.w	#$F,d0
0000E118 317B 008C 0030             		move.w	Obj41_Powers(pc,d0.w),$30(a0)
0000E11E 4E75                       		rts	
0000E120                            ; ===========================================================================
0000E120                            
0000E120                            Obj41_Up:				; XREF: Obj41_Index
0000E120 323C 001B                  		move.w	#$1B,d1
0000E124 343C 0008                  		move.w	#8,d2
0000E128 363C 0010                  		move.w	#$10,d3
0000E12C 3828 0008                  		move.w	8(a0),d4
0000E130 6100 0000                  		bsr.w	SolidObject
0000E134 4A28 0025                  		tst.b	$25(a0)		; is Sonic on top of the spring?
0000E138 6600                       		bne.s	Obj41_BounceUp	; if yes, branch
0000E13A 4E75                       		rts	
0000E13C                            ; ===========================================================================
0000E13C                            
0000E13C                            Obj41_BounceUp:				; XREF: Obj41_Up
0000E13C 5428 0024                  		addq.b	#2,$24(a0)
0000E140 5069 000C                  		addq.w	#8,$C(a1)
0000E144 3368 0030 0012             		move.w	$30(a0),$12(a1)	; move Sonic upwards
0000E14A 08E9 0001 0022             		bset	#1,$22(a1)
0000E150 08A9 0003 0022             		bclr	#3,$22(a1)
0000E156 137C 0010 001C             		move.b	#$10,$1C(a1)	; use "bouncing" animation
0000E15C 137C 0002 0024             		move.b	#2,$24(a1)
0000E162 08A8 0003 0022             		bclr	#3,$22(a0)
0000E168 4228 0025                  		clr.b	$25(a0)
0000E16C 303C 00CC                  		move.w	#$CC,d0
0000E170 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play spring sound
0000E176                            
0000E176                            Obj41_AniUp:				; XREF: Obj41_Index
0000E176 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E17C 6000 CAC4                  		bra.w	AnimateSprite
0000E180                            ; ===========================================================================
0000E180                            
0000E180                            Obj41_ResetUp:				; XREF: Obj41_Index
0000E180 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000E186 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Up" routine
0000E18A 4E75                       		rts	
0000E18C                            ; ===========================================================================
0000E18C                            
0000E18C                            Obj41_LR:				; XREF: Obj41_Index
0000E18C 323C 0013                  		move.w	#$13,d1
0000E190 343C 000E                  		move.w	#$E,d2
0000E194 363C 000F                  		move.w	#$F,d3
0000E198 3828 0008                  		move.w	8(a0),d4
0000E19C 6100 0000                  		bsr.w	SolidObject
0000E1A0 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000E1A6 6600                       		bne.s	loc_DC0C
0000E1A8 117C 0008 0024             		move.b	#8,$24(a0)
0000E1AE                            
0000E1AE                            loc_DC0C:
0000E1AE 0828 0005 0022             		btst	#5,$22(a0)
0000E1B4 6600                       		bne.s	Obj41_BounceLR
0000E1B6 4E75                       		rts	
0000E1B8                            ; ===========================================================================
0000E1B8                            
0000E1B8                            Obj41_BounceLR:				; XREF: Obj41_LR
0000E1B8 5428 0024                  		addq.b	#2,$24(a0)
0000E1BC 3368 0030 0010             		move.w	$30(a0),$10(a1)	; move Sonic to	the left
0000E1C2 5069 0008                  		addq.w	#8,8(a1)
0000E1C6 0828 0000 0022             		btst	#0,$22(a0)	; is object flipped?
0000E1CC 6600                       		bne.s	loc_DC36	; if yes, branch
0000E1CE 0469 0010 0008             		subi.w	#$10,8(a1)
0000E1D4 4469 0010                  		neg.w	$10(a1)		; move Sonic to	the right
0000E1D8                            
0000E1D8                            loc_DC36:
0000E1D8 337C 000F 003E             		move.w	#$F,$3E(a1)
0000E1DE 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000E1E4 0869 0000 0022             		bchg	#0,$22(a1)
0000E1EA 0829 0002 0022             		btst	#2,$22(a1)
0000E1F0 6600                       		bne.s	loc_DC56
0000E1F2 137C 0000 001C             		move.b	#0,$1C(a1)	; use running animation
0000E1F8                            
0000E1F8                            loc_DC56:
0000E1F8 08A8 0005 0022             		bclr	#5,$22(a0)
0000E1FE 08A9 0005 0022             		bclr	#5,$22(a1)
0000E204 303C 00CC                  		move.w	#$CC,d0
0000E208 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play spring sound
0000E20E                            
0000E20E                            Obj41_AniLR:				; XREF: Obj41_Index
0000E20E 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E214 6000 CA2C                  		bra.w	AnimateSprite
0000E218                            ; ===========================================================================
0000E218                            
0000E218                            Obj41_ResetLR:				; XREF: Obj41_Index
0000E218 117C 0002 001D             		move.b	#2,$1D(a0)	; reset	animation
0000E21E 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_LR" routine
0000E222 4E75                       		rts	
0000E224                            ; ===========================================================================
0000E224                            
0000E224                            Obj41_Dwn:				; XREF: Obj41_Index
0000E224 323C 001B                  		move.w	#$1B,d1
0000E228 343C 0008                  		move.w	#8,d2
0000E22C 363C 0010                  		move.w	#$10,d3
0000E230 3828 0008                  		move.w	8(a0),d4
0000E234 6100 0000                  		bsr.w	SolidObject
0000E238 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000E23E 6600                       		bne.s	loc_DCA4
0000E240 117C 000E 0024             		move.b	#$E,$24(a0)
0000E246                            
0000E246                            loc_DCA4:
0000E246 4A28 0025                  		tst.b	$25(a0)
0000E24A 6600                       		bne.s	locret_DCAE
0000E24C 4A44                       		tst.w	d4
0000E24E 6B00                       		bmi.s	Obj41_BounceDwn
0000E250                            
0000E250                            locret_DCAE:
0000E250 4E75                       		rts	
0000E252                            ; ===========================================================================
0000E252                            
0000E252                            Obj41_BounceDwn:			; XREF: Obj41_Dwn
0000E252 5428 0024                  		addq.b	#2,$24(a0)
0000E256 5169 000C                  		subq.w	#8,$C(a1)
0000E25A 3368 0030 0012             		move.w	$30(a0),$12(a1)
0000E260 4469 0012                  		neg.w	$12(a1)		; move Sonic downwards
0000E264 08E9 0001 0022             		bset	#1,$22(a1)
0000E26A 08A9 0003 0022             		bclr	#3,$22(a1)
0000E270 137C 0002 0024             		move.b	#2,$24(a1)
0000E276 08A8 0003 0022             		bclr	#3,$22(a0)
0000E27C 4228 0025                  		clr.b	$25(a0)
0000E280 303C 00CC                  		move.w	#$CC,d0
0000E284 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play spring sound
0000E28A                            
0000E28A                            Obj41_AniDwn:				; XREF: Obj41_Index
0000E28A 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E290 6000 C9B0                  		bra.w	AnimateSprite
0000E294                            ; ===========================================================================
0000E294                            
0000E294                            Obj41_ResetDwn:				; XREF: Obj41_Index
0000E294 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000E29A 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Dwn" routine
0000E29E 4E75                       		rts	
0000E2A0                            ; ===========================================================================
0000E2A0                            Ani_obj41:
0000E2A0                            	include "_anim\obj41.asm"
0000E2A0                            ; ---------------------------------------------------------------------------
0000E2A0                            ; Animation script - springs
0000E2A0                            ; ---------------------------------------------------------------------------
0000E2A0 0000                       		dc.w byte_DD02-Ani_obj41
0000E2A2 0000                       		dc.w byte_DD0E-Ani_obj41
0000E2A4 0001 0000 0202 0202 0202+  byte_DD02:	dc.b 0,	1, 0, 0, 2, 2, 2, 2, 2,	2, 0, $FC
0000E2B0 0004 0303 0505 0505 0505+  byte_DD0E:	dc.b 0,	4, 3, 3, 5, 5, 5, 5, 5,	5, 3, $FC
0000E2BC                            		even
0000E2BC                            		even
0000E2BC                            
0000E2BC                            ; ---------------------------------------------------------------------------
0000E2BC                            ; Sprite mappings - springs
0000E2BC                            ; ---------------------------------------------------------------------------
0000E2BC                            Map_obj41:
0000E2BC                            	include "_maps\obj41.asm"
0000E2BC                            ; ---------------------------------------------------------------------------
0000E2BC                            ; Sprite mappings - springs
0000E2BC                            ; ---------------------------------------------------------------------------
0000E2BC 0000                       		dc.w byte_DD26-Map_obj41
0000E2BE 0000                       		dc.w byte_DD31-Map_obj41
0000E2C0 0000                       		dc.w byte_DD37-Map_obj41
0000E2C2 0000                       		dc.w byte_DD47-Map_obj41
0000E2C4 0000                       		dc.w byte_DD4D-Map_obj41
0000E2C6 0000                       		dc.w byte_DD53-Map_obj41
0000E2C8 02                         byte_DD26:	dc.b 2
0000E2C9 F80C 0000 F0               		dc.b $F8, $C, 0, 0, $F0
0000E2CE 000C 0004 F0               		dc.b 0,	$C, 0, 4, $F0
0000E2D3 01                         byte_DD31:	dc.b 1
0000E2D4 000C 0000 F0               		dc.b 0,	$C, 0, 0, $F0
0000E2D9 03                         byte_DD37:	dc.b 3
0000E2DA E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0
0000E2DF F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000E2E4 000C 000C F0               		dc.b 0,	$C, 0, $C, $F0
0000E2E9 01                         byte_DD47:	dc.b 1
0000E2EA F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000E2EF 01                         byte_DD4D:	dc.b 1
0000E2F0 F003 0004 F8               		dc.b $F0, 3, 0,	4, $F8
0000E2F5 04                         byte_DD53:	dc.b 4
0000E2F6 F003 0004 10               		dc.b $F0, 3, 0,	4, $10
0000E2FB F809 0008 F8               		dc.b $F8, 9, 0,	8, $F8
0000E300 F000 0000 F8               		dc.b $F0, 0, 0,	0, $F8
0000E305 0800 0003 F8               		dc.b 8,	0, 0, 3, $F8
0000E30A                            		even
0000E30A                            		even
0000E30A                            
0000E30A                            ; ===========================================================================
0000E30A                            ; ---------------------------------------------------------------------------
0000E30A                            ; Object 42 - Newtron enemy (GHZ)
0000E30A                            ; ---------------------------------------------------------------------------
0000E30A                            
0000E30A                            Obj42:					; XREF: Obj_Index
0000E30A 7000                       		moveq	#0,d0
0000E30C 1028 0024                  		move.b	$24(a0),d0
0000E310 323B 0000                  		move.w	Obj42_Index(pc,d0.w),d1
0000E314 4EFB 1000                  		jmp	Obj42_Index(pc,d1.w)
0000E318                            ; ===========================================================================
0000E318 0000                       Obj42_Index:	dc.w Obj42_Main-Obj42_Index
0000E31A 0000                       		dc.w Obj42_Action-Obj42_Index
0000E31C 0000                       		dc.w Obj42_Delete-Obj42_Index
0000E31E                            ; ===========================================================================
0000E31E                            
0000E31E                            Obj42_Main:				; XREF: Obj42_Index
0000E31E 5428 0024                  		addq.b	#2,$24(a0)
0000E322 217C 0000 0000 0004        		move.l	#Map_obj42,4(a0)
0000E32A 317C 049B 0002             		move.w	#$49B,2(a0)
0000E330 117C 0004 0001             		move.b	#4,1(a0)
0000E336 117C 0004 0018             		move.b	#4,$18(a0)
0000E33C 117C 0014 0019             		move.b	#$14,$19(a0)
0000E342 117C 0010 0016             		move.b	#$10,$16(a0)
0000E348 117C 0008 0017             		move.b	#8,$17(a0)
0000E34E                            
0000E34E                            Obj42_Action:				; XREF: Obj42_Index
0000E34E 7000                       		moveq	#0,d0
0000E350 1028 0025                  		move.b	$25(a0),d0
0000E354 323B 0000                  		move.w	Obj42_Index2(pc,d0.w),d1
0000E358 4EBB 1000                  		jsr	Obj42_Index2(pc,d1.w)
0000E35C 43F9 0000 0000             		lea	(Ani_obj42).l,a1
0000E362 6100 C8DE                  		bsr.w	AnimateSprite
0000E366 6000 0000                  		bra.w	MarkObjGone
0000E36A                            ; ===========================================================================
0000E36A 0000                       Obj42_Index2:	dc.w Obj42_ChkDist-Obj42_Index2
0000E36C 0000                       		dc.w Obj42_Type00-Obj42_Index2
0000E36E 0000                       		dc.w Obj42_MatchFloor-Obj42_Index2
0000E370 0000                       		dc.w Obj42_Speed-Obj42_Index2
0000E372 0000                       		dc.w Obj42_Type01-Obj42_Index2
0000E374                            ; ===========================================================================
0000E374                            
0000E374                            Obj42_ChkDist:				; XREF: Obj42_Index2
0000E374 08E8 0000 0022             		bset	#0,$22(a0)
0000E37A 3038 D008                  		move.w	($FFFFD008).w,d0
0000E37E 9068 0008                  		sub.w	8(a0),d0
0000E382 6400                       		bcc.s	loc_DDEA
0000E384 4440                       		neg.w	d0
0000E386 08A8 0000 0022             		bclr	#0,$22(a0)
0000E38C                            
0000E38C                            loc_DDEA:
0000E38C 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	the newtron?
0000E390 6400                       		bcc.s	locret_DE12	; if not, branch
0000E392 5428 0025                  		addq.b	#2,$25(a0)
0000E396 117C 0001 001C             		move.b	#1,$1C(a0)
0000E39C 4A28 0028                  		tst.b	$28(a0)		; check	object type
0000E3A0 6700                       		beq.s	locret_DE12	; if type is 00, branch
0000E3A2 317C 249B 0002             		move.w	#$249B,2(a0)
0000E3A8 117C 0008 0025             		move.b	#8,$25(a0)	; run type 01 newtron subroutine
0000E3AE 117C 0004 001C             		move.b	#4,$1C(a0)	; use different	animation
0000E3B4                            
0000E3B4                            locret_DE12:
0000E3B4 4E75                       		rts	
0000E3B6                            ; ===========================================================================
0000E3B6                            
0000E3B6                            Obj42_Type00:				; XREF: Obj42_Index2
0000E3B6 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; has "appearing" animation finished?
0000E3BC 6400                       		bcc.s	Obj42_Fall	; is yes, branch
0000E3BE 08E8 0000 0022             		bset	#0,$22(a0)
0000E3C4 3038 D008                  		move.w	($FFFFD008).w,d0
0000E3C8 9068 0008                  		sub.w	8(a0),d0
0000E3CC 6400                       		bcc.s	locret_DE32
0000E3CE 08A8 0000 0022             		bclr	#0,$22(a0)
0000E3D4                            
0000E3D4                            locret_DE32:
0000E3D4 4E75                       		rts	
0000E3D6                            ; ===========================================================================
0000E3D6                            
0000E3D6                            Obj42_Fall:				; XREF: Obj42_Type00
0000E3D6 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000E3DC 6600                       		bne.s	loc_DE42
0000E3DE 117C 000C 0020             		move.b	#$C,$20(a0)
0000E3E4                            
0000E3E4                            loc_DE42:
0000E3E4 6100 F770                  		bsr.w	ObjectFall
0000E3E8 6100 0000                  		bsr.w	ObjHitFloor
0000E3EC 4A41                       		tst.w	d1		; has newtron hit the floor?
0000E3EE 6A00                       		bpl.s	locret_DE86	; if not, branch
0000E3F0 D368 000C                  		add.w	d1,$C(a0)
0000E3F4 317C 0000 0012             		move.w	#0,$12(a0)	; stop newtron falling
0000E3FA 5428 0025                  		addq.b	#2,$25(a0)
0000E3FE 117C 0002 001C             		move.b	#2,$1C(a0)
0000E404 0828 0005 0002             		btst	#5,2(a0)
0000E40A 6700                       		beq.s	Obj42_Move
0000E40C 5228 001C                  		addq.b	#1,$1C(a0)
0000E410                            
0000E410                            Obj42_Move:
0000E410 117C 000D 0020             		move.b	#$D,$20(a0)
0000E416 317C 0200 0010             		move.w	#$200,$10(a0)	; move newtron horizontally
0000E41C 0828 0000 0022             		btst	#0,$22(a0)
0000E422 6600                       		bne.s	locret_DE86
0000E424 4468 0010                  		neg.w	$10(a0)
0000E428                            
0000E428                            locret_DE86:
0000E428 4E75                       		rts	
0000E42A                            ; ===========================================================================
0000E42A                            
0000E42A                            Obj42_MatchFloor:			; XREF: Obj42_Index2
0000E42A 6100 F756                  		bsr.w	SpeedToPos
0000E42E 6100 0000                  		bsr.w	ObjHitFloor
0000E432 0C41 FFF8                  		cmpi.w	#-8,d1
0000E436 6D00                       		blt.s	loc_DEA2
0000E438 0C41 000C                  		cmpi.w	#$C,d1
0000E43C 6C00                       		bge.s	loc_DEA2
0000E43E D368 000C                  		add.w	d1,$C(a0)	; match	newtron's position with floor
0000E442 4E75                       		rts	
0000E444                            ; ===========================================================================
0000E444                            
0000E444                            loc_DEA2:
0000E444 5428 0025                  		addq.b	#2,$25(a0)
0000E448 4E75                       		rts	
0000E44A                            ; ===========================================================================
0000E44A                            
0000E44A                            Obj42_Speed:				; XREF: Obj42_Index2
0000E44A 6100 F736                  		bsr.w	SpeedToPos
0000E44E 4E75                       		rts	
0000E450                            ; ===========================================================================
0000E450                            
0000E450                            Obj42_Type01:				; XREF: Obj42_Index2
0000E450 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000E456 6600                       		bne.s	Obj42_FireMissile
0000E458 117C 000C 0020             		move.b	#$C,$20(a0)
0000E45E                            
0000E45E                            Obj42_FireMissile:
0000E45E 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000E464 6600                       		bne.s	locret_DF14
0000E466 4A28 0032                  		tst.b	$32(a0)
0000E46A 6600                       		bne.s	locret_DF14
0000E46C 117C 0001 0032             		move.b	#1,$32(a0)
0000E472 6100 FBBA                  		bsr.w	SingleObjLoad
0000E476 6600                       		bne.s	locret_DF14
0000E478 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
0000E47C 3368 0008 0008             		move.w	8(a0),8(a1)
0000E482 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000E488 5169 000C                  		subq.w	#8,$C(a1)
0000E48C 337C 0200 0010             		move.w	#$200,$10(a1)
0000E492 303C 0014                  		move.w	#$14,d0
0000E496 0828 0000 0022             		btst	#0,$22(a0)
0000E49C 6600                       		bne.s	loc_DF04
0000E49E 4440                       		neg.w	d0
0000E4A0 4469 0010                  		neg.w	$10(a1)
0000E4A4                            
0000E4A4                            loc_DF04:
0000E4A4 D169 0008                  		add.w	d0,8(a1)
0000E4A8 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000E4AE 137C 0001 0028             		move.b	#1,$28(a1)
0000E4B4                            
0000E4B4                            locret_DF14:
0000E4B4 4E75                       		rts	
0000E4B6                            ; ===========================================================================
0000E4B6                            
0000E4B6                            Obj42_Delete:				; XREF: Obj42_Index
0000E4B6 6000 F72C                  		bra.w	DeleteObject
0000E4BA                            ; ===========================================================================
0000E4BA                            Ani_obj42:
0000E4BA                            	include "_anim\obj42.asm"
0000E4BA                            ; ---------------------------------------------------------------------------
0000E4BA                            ; Animation script - Newtron enemy
0000E4BA                            ; ---------------------------------------------------------------------------
0000E4BA 0000                       		dc.w byte_DF24-Ani_obj42
0000E4BC 0000                       		dc.w byte_DF28-Ani_obj42
0000E4BE 0000                       		dc.w byte_DF30-Ani_obj42
0000E4C0 0000                       		dc.w byte_DF34-Ani_obj42
0000E4C2 0000                       		dc.w byte_DF38-Ani_obj42
0000E4C4 0F0A FF00                  byte_DF24:	dc.b $F, $A, $FF, 0
0000E4C8 1300 0103 0405 FE01        byte_DF28:	dc.b $13, 0, 1,	3, 4, 5, $FE, 1
0000E4D0 0206 07FF                  byte_DF30:	dc.b 2,	6, 7, $FF
0000E4D4 0208 09FF                  byte_DF34:	dc.b 2,	8, 9, $FF
0000E4D8 1300 0101 0201 0100 FC00   byte_DF38:	dc.b $13, 0, 1,	1, 2, 1, 1, 0, $FC, 0
0000E4E2                            		even
0000E4E2                            		even
0000E4E2                            
0000E4E2                            ; ---------------------------------------------------------------------------
0000E4E2                            ; Sprite mappings - Newtron enemy (GHZ)
0000E4E2                            ; ---------------------------------------------------------------------------
0000E4E2                            Map_obj42:
0000E4E2                            	include "_maps\obj42.asm"
0000E4E2                            ; ---------------------------------------------------------------------------
0000E4E2                            ; Sprite mappings - Newtron enemy (GHZ)
0000E4E2                            ; ---------------------------------------------------------------------------
0000E4E2 0000 0000                  		dc.w byte_DF58-Map_obj42, byte_DF68-Map_obj42
0000E4E6 0000 0000                  		dc.w byte_DF78-Map_obj42, byte_DF88-Map_obj42
0000E4EA 0000 0000                  		dc.w byte_DF9D-Map_obj42, byte_DFAD-Map_obj42
0000E4EE 0000 0000                  		dc.w byte_DFB8-Map_obj42, byte_DFC8-Map_obj42
0000E4F2 0000 0000                  		dc.w byte_DFD8-Map_obj42, byte_DFE8-Map_obj42
0000E4F6 0000                       		dc.w byte_DFF8-Map_obj42
0000E4F8 03                         byte_DF58:	dc.b 3
0000E4F9 EC0D 0000 EC               		dc.b $EC, $D, 0, 0, $EC
0000E4FE F400 0008 0C               		dc.b $F4, 0, 0,	8, $C
0000E503 FC0E 0009 F4               		dc.b $FC, $E, 0, 9, $F4
0000E508 03                         byte_DF68:	dc.b 3
0000E509 EC06 0015 EC               		dc.b $EC, 6, 0,	$15, $EC
0000E50E EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E513 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000E518 03                         byte_DF78:	dc.b 3
0000E519 EC06 002A EC               		dc.b $EC, 6, 0,	$2A, $EC
0000E51E EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E523 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000E528 04                         byte_DF88:	dc.b 4
0000E529 EC06 0030 EC               		dc.b $EC, 6, 0,	$30, $EC
0000E52E EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E533 FC09 0036 FC               		dc.b $FC, 9, 0,	$36, $FC
0000E538 0C00 003C 0C               		dc.b $C, 0, 0, $3C, $C
0000E53D 03                         byte_DF9D:	dc.b 3
0000E53E F40D 003D EC               		dc.b $F4, $D, 0, $3D, $EC
0000E543 FC00 0020 0C               		dc.b $FC, 0, 0,	$20, $C
0000E548 0408 0045 FC               		dc.b 4,	8, 0, $45, $FC
0000E54D 02                         byte_DFAD:	dc.b 2
0000E54E F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E553 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E558 03                         byte_DFB8:	dc.b 3
0000E559 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E55E F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E563 FE00 0052 14               		dc.b $FE, 0, 0,	$52, $14
0000E568 03                         byte_DFC8:	dc.b 3
0000E569 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E56E F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E573 FE04 0053 14               		dc.b $FE, 4, 0,	$53, $14
0000E578 03                         byte_DFD8:	dc.b 3
0000E579 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E57E F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E583 FE00 E052 14               		dc.b $FE, 0, $E0, $52, $14
0000E588 03                         byte_DFE8:	dc.b 3
0000E589 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E58E F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E593 FE04 E053 14               		dc.b $FE, 4, $E0, $53, $14
0000E598 00                         byte_DFF8:	dc.b 0
0000E59A 00                         		even
0000E59A 00                         		even
0000E59A                            
0000E59A                            ; ===========================================================================
0000E59A                            ; ---------------------------------------------------------------------------
0000E59A                            ; Object 43 - Roller enemy (SYZ)
0000E59A                            ; ---------------------------------------------------------------------------
0000E59A                            
0000E59A                            Obj43:					; XREF: Obj_Index
0000E59A 7000                       		moveq	#0,d0
0000E59C 1028 0024                  		move.b	$24(a0),d0
0000E5A0 323B 0000                  		move.w	Obj43_Index(pc,d0.w),d1
0000E5A4 4EFB 1000                  		jmp	Obj43_Index(pc,d1.w)
0000E5A8                            ; ===========================================================================
0000E5A8 0000                       Obj43_Index:	dc.w Obj43_Main-Obj43_Index
0000E5AA 0000                       		dc.w Obj43_Action-Obj43_Index
0000E5AC                            ; ===========================================================================
0000E5AC                            
0000E5AC                            Obj43_Main:				; XREF: Obj43_Index
0000E5AC 117C 000E 0016             		move.b	#$E,$16(a0)
0000E5B2 117C 0008 0017             		move.b	#8,$17(a0)
0000E5B8 6100 F59C                  		bsr.w	ObjectFall
0000E5BC 6100 0000                  		bsr.w	ObjHitFloor
0000E5C0 4A41                       		tst.w	d1
0000E5C2 6A00                       		bpl.s	locret_E052
0000E5C4 D368 000C                  		add.w	d1,$C(a0)	; match	roller's position with the floor
0000E5C8 317C 0000 0012             		move.w	#0,$12(a0)
0000E5CE 5428 0024                  		addq.b	#2,$24(a0)
0000E5D2 217C 0000 0000 0004        		move.l	#Map_obj43,4(a0)
0000E5DA 317C 04B8 0002             		move.w	#$4B8,2(a0)
0000E5E0 117C 0004 0001             		move.b	#4,1(a0)
0000E5E6 117C 0004 0018             		move.b	#4,$18(a0)
0000E5EC 117C 0010 0019             		move.b	#$10,$19(a0)
0000E5F2                            
0000E5F2                            locret_E052:
0000E5F2 4E75                       		rts	
0000E5F4                            ; ===========================================================================
0000E5F4                            
0000E5F4                            Obj43_Action:				; XREF: Obj43_Index
0000E5F4 7000                       		moveq	#0,d0
0000E5F6 1028 0025                  		move.b	$25(a0),d0
0000E5FA 323B 0000                  		move.w	Obj43_Index2(pc,d0.w),d1
0000E5FE 4EBB 1000                  		jsr	Obj43_Index2(pc,d1.w)
0000E602 43F9 0000 0000             		lea	(Ani_obj43).l,a1
0000E608 6100 C638                  		bsr.w	AnimateSprite
0000E60C 3028 0008                  		move.w	8(a0),d0
0000E610 0240 FF80                  		andi.w	#$FF80,d0
0000E614 3238 F700                  		move.w	($FFFFF700).w,d1
0000E618 0441 0080                  		subi.w	#$80,d1
0000E61C 0241 FF80                  		andi.w	#$FF80,d1
0000E620 9041                       		sub.w	d1,d0
0000E622 0C40 0280                  		cmpi.w	#$280,d0
0000E626 6E00 0000                  		bgt.w	Obj43_ChkGone
0000E62A 6000 F57C                  		bra.w	DisplaySprite
0000E62E                            ; ===========================================================================
0000E62E                            
0000E62E                            Obj43_ChkGone:				; XREF: Obj43_Action
0000E62E 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E632 7000                       		moveq	#0,d0
0000E634 1028 0023                  		move.b	$23(a0),d0
0000E638 6700                       		beq.s	Obj43_Delete
0000E63A 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000E640                            
0000E640                            Obj43_Delete:
0000E640 6000 F5A2                  		bra.w	DeleteObject
0000E644                            ; ===========================================================================
0000E644 0000                       Obj43_Index2:	dc.w Obj43_RollChk-Obj43_Index2
0000E646 0000                       		dc.w Obj43_RollNoChk-Obj43_Index2
0000E648 0000                       		dc.w Obj43_ChkJump-Obj43_Index2
0000E64A 0000                       		dc.w Obj43_MatchFloor-Obj43_Index2
0000E64C                            ; ===========================================================================
0000E64C                            
0000E64C                            Obj43_RollChk:				; XREF: Obj43_Index2
0000E64C 3038 D008                  		move.w	($FFFFD008).w,d0
0000E650 0440 0100                  		subi.w	#$100,d0
0000E654 6500                       		bcs.s	loc_E0D2
0000E656 9068 0008                  		sub.w	8(a0),d0	; check	distance between Roller	and Sonic
0000E65A 6500                       		bcs.s	loc_E0D2
0000E65C 5828 0025                  		addq.b	#4,$25(a0)
0000E660 117C 0002 001C             		move.b	#2,$1C(a0)
0000E666 317C 0700 0010             		move.w	#$700,$10(a0)	; move Roller horizontally
0000E66C 117C 008E 0020             		move.b	#$8E,$20(a0)	; make Roller invincible
0000E672                            
0000E672                            loc_E0D2:
0000E672 588F                       		addq.l	#4,sp
0000E674 4E75                       		rts	
0000E676                            ; ===========================================================================
0000E676                            
0000E676                            Obj43_RollNoChk:			; XREF: Obj43_Index2
0000E676 0C28 0002 001C             		cmpi.b	#2,$1C(a0)
0000E67C 6700                       		beq.s	loc_E0F8
0000E67E 5368 0030                  		subq.w	#1,$30(a0)
0000E682 6A00                       		bpl.s	locret_E0F6
0000E684 117C 0001 001C             		move.b	#1,$1C(a0)
0000E68A 317C 0700 0010             		move.w	#$700,$10(a0)
0000E690 117C 008E 0020             		move.b	#$8E,$20(a0)
0000E696                            
0000E696                            locret_E0F6:
0000E696 4E75                       		rts	
0000E698                            ; ===========================================================================
0000E698                            
0000E698                            loc_E0F8:
0000E698 5428 0025                  		addq.b	#2,$25(a0)
0000E69C 4E75                       		rts	
0000E69E                            ; ===========================================================================
0000E69E                            
0000E69E                            Obj43_ChkJump:				; XREF: Obj43_Index2
0000E69E 6100 0000                  		bsr.w	Obj43_Stop
0000E6A2 6100 F4DE                  		bsr.w	SpeedToPos
0000E6A6 6100 0000                  		bsr.w	ObjHitFloor
0000E6AA 0C41 FFF8                  		cmpi.w	#-8,d1
0000E6AE 6D00                       		blt.s	Obj43_Jump
0000E6B0 0C41 000C                  		cmpi.w	#$C,d1
0000E6B4 6C00                       		bge.s	Obj43_Jump
0000E6B6 D368 000C                  		add.w	d1,$C(a0)
0000E6BA 4E75                       		rts	
0000E6BC                            ; ===========================================================================
0000E6BC                            
0000E6BC                            Obj43_Jump:
0000E6BC 5428 0025                  		addq.b	#2,$25(a0)
0000E6C0 08E8 0000 0032             		bset	#0,$32(a0)
0000E6C6 6700                       		beq.s	locret_E12E
0000E6C8 317C FA00 0012             		move.w	#-$600,$12(a0)	; move Roller vertically
0000E6CE                            
0000E6CE                            locret_E12E:
0000E6CE 4E75                       		rts	
0000E6D0                            ; ===========================================================================
0000E6D0                            
0000E6D0                            Obj43_MatchFloor:			; XREF: Obj43_Index2
0000E6D0 6100 F484                  		bsr.w	ObjectFall
0000E6D4 4A68 0012                  		tst.w	$12(a0)
0000E6D8 6B00                       		bmi.s	locret_E150
0000E6DA 6100 0000                  		bsr.w	ObjHitFloor
0000E6DE 4A41                       		tst.w	d1
0000E6E0 6A00                       		bpl.s	locret_E150
0000E6E2 D368 000C                  		add.w	d1,$C(a0)	; match	Roller's position with the floor
0000E6E6 5528 0025                  		subq.b	#2,$25(a0)
0000E6EA 317C 0000 0012             		move.w	#0,$12(a0)
0000E6F0                            
0000E6F0                            locret_E150:
0000E6F0 4E75                       		rts	
0000E6F2                            
0000E6F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E6F2                            
0000E6F2                            
0000E6F2                            Obj43_Stop:				; XREF: Obj43_ChkJump
0000E6F2 4A28 0032                  		tst.b	$32(a0)
0000E6F6 6B00                       		bmi.s	locret_E188
0000E6F8 3038 D008                  		move.w	($FFFFD008).w,d0
0000E6FC 0440 0030                  		subi.w	#$30,d0
0000E700 9068 0008                  		sub.w	8(a0),d0
0000E704 6400                       		bcc.s	locret_E188
0000E706 117C 0000 001C             		move.b	#0,$1C(a0)
0000E70C 117C 000E 0020             		move.b	#$E,$20(a0)
0000E712 4268 0010                  		clr.w	$10(a0)
0000E716 317C 0078 0030             		move.w	#120,$30(a0)	; set waiting time to 2	seconds
0000E71C 117C 0002 0025             		move.b	#2,$25(a0)
0000E722 08E8 0007 0032             		bset	#7,$32(a0)
0000E728                            
0000E728                            locret_E188:
0000E728 4E75                       		rts	
0000E72A                            ; End of function Obj43_Stop
0000E72A                            
0000E72A                            ; ===========================================================================
0000E72A                            Ani_obj43:
0000E72A                            	include "_anim\obj43.asm"
0000E72A                            ; ---------------------------------------------------------------------------
0000E72A                            ; Animation script - Roller enemy
0000E72A                            ; ---------------------------------------------------------------------------
0000E72A 0000                       		dc.w byte_E190-Ani_obj43
0000E72C 0000                       		dc.w byte_E196-Ani_obj43
0000E72E 0000                       		dc.w byte_E19C-Ani_obj43
0000E730 0F02 0100 FE01             byte_E190:	dc.b $F, 2, 1, 0, $FE, 1
0000E736 0F01 02FD 0200             byte_E196:	dc.b $F, 1, 2, $FD, 2, 0
0000E73C 0303 0402 FF               byte_E19C:	dc.b 3,	3, 4, 2, $FF
0000E742 00                         		even
0000E742 00                         		even
0000E742                            
0000E742                            ; ---------------------------------------------------------------------------
0000E742                            ; Sprite mappings - Roller enemy (SYZ)
0000E742                            ; ---------------------------------------------------------------------------
0000E742                            Map_obj43:
0000E742                            	include "_maps\obj43.asm"
0000E742                            Map_61da:
0000E742 0000                       Map_61da_0: 	dc.w Map_61da_A-Map_61da
0000E744 0000                       Map_61da_2: 	dc.w Map_61da_15-Map_61da
0000E746 0000                       Map_61da_4: 	dc.w Map_61da_20-Map_61da
0000E748 0000                       Map_61da_6: 	dc.w Map_61da_26-Map_61da
0000E74A 0000                       Map_61da_8: 	dc.w Map_61da_2C-Map_61da
0000E74C 02                         Map_61da_A: 	dc.b $2
0000E74D DE0E 0000 F0               	dc.b $DE, $E, $0, $0, $F0
0000E752 F60E 000C F0               	dc.b $F6, $E, $0, $C, $F0
0000E757 02                         Map_61da_15: 	dc.b $2
0000E758 E60E 0000 F0               	dc.b $E6, $E, $0, $0, $F0
0000E75D FE0D 0018 F0               	dc.b $FE, $D, $0, $18, $F0
0000E762 01                         Map_61da_20: 	dc.b $1
0000E763 F00F 0020 F0               	dc.b $F0, $F, $0, $20, $F0
0000E768 01                         Map_61da_26: 	dc.b $1
0000E769 F00F 0030 F0               	dc.b $F0, $F, $0, $30, $F0
0000E76E 01                         Map_61da_2C: 	dc.b $1
0000E76F F00F 0040 F0               	dc.b $F0, $F, $0, $40, $F0
0000E774                            	even
0000E774                            	even
0000E774                            
0000E774                            ; ===========================================================================
0000E774                            ; ---------------------------------------------------------------------------
0000E774                            ; Object 44 - walls (GHZ)
0000E774                            ; ---------------------------------------------------------------------------
0000E774                            
0000E774                            Obj44:					; XREF: Obj_Index
0000E774 7000                       		moveq	#0,d0
0000E776 1028 0024                  		move.b	$24(a0),d0
0000E77A 323B 0000                  		move.w	Obj44_Index(pc,d0.w),d1
0000E77E 4EFB 1000                  		jmp	Obj44_Index(pc,d1.w)
0000E782                            ; ===========================================================================
0000E782 0000                       Obj44_Index:	dc.w Obj44_Main-Obj44_Index
0000E784 0000                       		dc.w Obj44_Solid-Obj44_Index
0000E786 0000                       		dc.w Obj44_Display-Obj44_Index
0000E788                            ; ===========================================================================
0000E788                            
0000E788                            Obj44_Main:				; XREF: Obj44_Index
0000E788 5428 0024                  		addq.b	#2,$24(a0)
0000E78C 217C 0000 0000 0004        		move.l	#Map_obj44,4(a0)
0000E794 317C 434C 0002             		move.w	#$434C,2(a0)
0000E79A 0028 0004 0001             		ori.b	#4,1(a0)
0000E7A0 117C 0008 0019             		move.b	#8,$19(a0)
0000E7A6 117C 0006 0018             		move.b	#6,$18(a0)
0000E7AC 1168 0028 001A             		move.b	$28(a0),$1A(a0)	; copy object type number to frame number
0000E7B2 08A8 0004 001A             		bclr	#4,$1A(a0)	; clear	4th bit	(deduct	$10)
0000E7B8 6700                       		beq.s	Obj44_Solid	; make object solid if 4th bit = 0
0000E7BA 5428 0024                  		addq.b	#2,$24(a0)
0000E7BE 6000                       		bra.s	Obj44_Display	; don't make it solid if 4th bit = 1
0000E7C0                            ; ===========================================================================
0000E7C0                            
0000E7C0                            Obj44_Solid:				; XREF: Obj44_Index
0000E7C0 323C 0013                  		move.w	#$13,d1
0000E7C4 343C 0028                  		move.w	#$28,d2
0000E7C8 6100 A6DE                  		bsr.w	Obj44_SolidWall
0000E7CC                            
0000E7CC                            Obj44_Display:				; XREF: Obj44_Index
0000E7CC 6100 F3DA                  		bsr.w	DisplaySprite
0000E7D0 3028 0008                  		move.w	8(a0),d0
0000E7D4 0240 FF80                  		andi.w	#$FF80,d0
0000E7D8 3238 F700                  		move.w	($FFFFF700).w,d1
0000E7DC 0441 0080                  		subi.w	#$80,d1
0000E7E0 0241 FF80                  		andi.w	#$FF80,d1
0000E7E4 9041                       		sub.w	d1,d0
0000E7E6 0C40 0280                  		cmpi.w	#$280,d0
0000E7EA 6200 F3F8                  		bhi.w	DeleteObject
0000E7EE 4E75                       		rts	
0000E7F0                            ; ===========================================================================
0000E7F0                            ; ---------------------------------------------------------------------------
0000E7F0                            ; Sprite mappings - walls (GHZ)
0000E7F0                            ; ---------------------------------------------------------------------------
0000E7F0                            Map_obj44:
0000E7F0                            	include "_maps\obj44.asm"
0000E7F0                            ; ---------------------------------------------------------------------------
0000E7F0                            ; Sprite mappings - walls (GHZ)
0000E7F0                            ; ---------------------------------------------------------------------------
0000E7F0 0000                       		dc.w byte_E256-Map_obj44
0000E7F2 0000                       		dc.w byte_E26B-Map_obj44
0000E7F4 0000                       		dc.w byte_E280-Map_obj44
0000E7F6 04                         byte_E256:	dc.b 4
0000E7F7 E005 0004 F8               		dc.b $E0, 5, 0,	4, $F8
0000E7FC F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000E801 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000E806 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000E80B 04                         byte_E26B:	dc.b 4
0000E80C E005 0008 F8               		dc.b $E0, 5, 0,	8, $F8
0000E811 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000E816 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000E81B 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000E820 04                         byte_E280:	dc.b 4
0000E821 E005 0000 F8               		dc.b $E0, 5, 0,	0, $F8
0000E826 F005 0000 F8               		dc.b $F0, 5, 0,	0, $F8
0000E82B 0005 0000 F8               		dc.b 0,	5, 0, 0, $F8
0000E830 1005 0000 F8               		dc.b $10, 5, 0,	0, $F8
0000E836 00                         		even
0000E836 00                         		even
0000E836                            
0000E836                            ; ===========================================================================
0000E836                            ; ---------------------------------------------------------------------------
0000E836                            ; Object 13 - lava ball	producer (MZ, SLZ)
0000E836                            ; ---------------------------------------------------------------------------
0000E836                            
0000E836                            Obj13:					; XREF: Obj_Index
0000E836 7000                       		moveq	#0,d0
0000E838 1028 0024                  		move.b	$24(a0),d0
0000E83C 323B 0000                  		move.w	Obj13_Index(pc,d0.w),d1
0000E840 4EBB 1000                  		jsr	Obj13_Index(pc,d1.w)
0000E844 6000 0000                  		bra.w	Obj14_ChkDel
0000E848                            ; ===========================================================================
0000E848 0000                       Obj13_Index:	dc.w Obj13_Main-Obj13_Index
0000E84A 0000                       		dc.w Obj13_MakeLava-Obj13_Index
0000E84C                            ; ---------------------------------------------------------------------------
0000E84C                            ;
0000E84C                            ; Lava ball production rates
0000E84C                            ;
0000E84C 1E3C 5A78 96B4             Obj13_Rates:	dc.b 30, 60, 90, 120, 150, 180
0000E852                            ; ===========================================================================
0000E852                            
0000E852                            Obj13_Main:				; XREF: Obj13_Index
0000E852 5428 0024                  		addq.b	#2,$24(a0)
0000E856 1028 0028                  		move.b	$28(a0),d0
0000E85A E848                       		lsr.w	#4,d0
0000E85C 0240 000F                  		andi.w	#$F,d0
0000E860 117B 00EA 001F             		move.b	Obj13_Rates(pc,d0.w),$1F(a0)
0000E866 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; set time delay for lava balls
0000E86C 0228 000F 0028             		andi.b	#$F,$28(a0)
0000E872                            
0000E872                            Obj13_MakeLava:				; XREF: Obj13_Index
0000E872 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from time delay
0000E876 6600                       		bne.s	locret_E302	; if time still	remains, branch
0000E878 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; reset	time delay
0000E87E 6100 F5A2                  		bsr.w	ChkObjOnScreen
0000E882 6600                       		bne.s	locret_E302
0000E884 6100 F7A8                  		bsr.w	SingleObjLoad
0000E888 6600                       		bne.s	locret_E302
0000E88A 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
0000E88E 3368 0008 0008             		move.w	8(a0),8(a1)
0000E894 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000E89A 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000E8A0                            
0000E8A0                            locret_E302:
0000E8A0 4E75                       		rts	
0000E8A2                            ; ===========================================================================
0000E8A2                            ; ---------------------------------------------------------------------------
0000E8A2                            ; Object 14 - lava balls (MZ, SLZ)
0000E8A2                            ; ---------------------------------------------------------------------------
0000E8A2                            
0000E8A2                            Obj14:					; XREF: Obj_Index
0000E8A2 7000                       		moveq	#0,d0
0000E8A4 1028 0024                  		move.b	$24(a0),d0
0000E8A8 323B 0000                  		move.w	Obj14_Index(pc,d0.w),d1
0000E8AC 4EBB 1000                  		jsr	Obj14_Index(pc,d1.w)
0000E8B0 6000 F2F6                  		bra.w	DisplaySprite
0000E8B4                            ; ===========================================================================
0000E8B4 0000                       Obj14_Index:	dc.w Obj14_Main-Obj14_Index
0000E8B6 0000                       		dc.w Obj14_Action-Obj14_Index
0000E8B8 0000                       		dc.w Obj14_Delete-Obj14_Index
0000E8BA                            
0000E8BA FC00 FB00 FA00 F900 FE00   Obj14_Speeds:	dc.w $FC00, $FB00, $FA00, $F900, $FE00
0000E8C4 0200 FE00 0200 0000        		dc.w $200, $FE00, $200,	0
0000E8CC                            ; ===========================================================================
0000E8CC                            
0000E8CC                            Obj14_Main:				; XREF: Obj14_Index
0000E8CC 5428 0024                  		addq.b	#2,$24(a0)
0000E8D0 117C 0008 0016             		move.b	#8,$16(a0)
0000E8D6 117C 0008 0017             		move.b	#8,$17(a0)
0000E8DC 217C 0000 B86C 0004        		move.l	#Map_obj14,4(a0)
0000E8E4 317C 0345 0002             		move.w	#$345,2(a0)
0000E8EA 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000E8F0 6600                       		bne.s	loc_E35A
0000E8F2 317C 0480 0002             		move.w	#$480,2(a0)	; SLZ specific code
0000E8F8                            
0000E8F8                            loc_E35A:
0000E8F8 117C 0004 0001             		move.b	#4,1(a0)
0000E8FE 117C 0003 0018             		move.b	#3,$18(a0)
0000E904 117C 008B 0020             		move.b	#$8B,$20(a0)
0000E90A 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000E910 4A28 0029                  		tst.b	$29(a0)
0000E914 6700                       		beq.s	Obj14_SetSpeed
0000E916 5428 0018                  		addq.b	#2,$18(a0)
0000E91A                            
0000E91A                            Obj14_SetSpeed:
0000E91A 7000                       		moveq	#0,d0
0000E91C 1028 0028                  		move.b	$28(a0),d0
0000E920 D040                       		add.w	d0,d0
0000E922 317B 0096 0012             		move.w	Obj14_Speeds(pc,d0.w),$12(a0) ;	load object speed (vertical)
0000E928 117C 0008 0019             		move.b	#8,$19(a0)
0000E92E 0C28 0006 0028             		cmpi.b	#6,$28(a0)	; is object type below $6 ?
0000E934 6500                       		bcs.s	Obj14_PlaySnd	; if yes, branch
0000E936 117C 0010 0019             		move.b	#$10,$19(a0)
0000E93C 117C 0002 001C             		move.b	#2,$1C(a0)	; use horizontal animation
0000E942 3168 0012 0010             		move.w	$12(a0),$10(a0)	; set horizontal speed
0000E948 317C 0000 0012             		move.w	#0,$12(a0)	; delete vertical speed
0000E94E                            
0000E94E                            Obj14_PlaySnd:
0000E94E 303C 00AE                  		move.w	#$AE,d0
0000E952 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play lava ball sound
0000E958                            
0000E958                            Obj14_Action:				; XREF: Obj14_Index
0000E958 7000                       		moveq	#0,d0
0000E95A 1028 0028                  		move.b	$28(a0),d0
0000E95E D040                       		add.w	d0,d0
0000E960 323B 0000                  		move.w	Obj14_TypeIndex(pc,d0.w),d1
0000E964 4EBB 1000                  		jsr	Obj14_TypeIndex(pc,d1.w)
0000E968 6100 F218                  		bsr.w	SpeedToPos
0000E96C 43F9 0000 0000             		lea	(Ani_obj14).l,a1
0000E972 6100 C2CE                  		bsr.w	AnimateSprite
0000E976                            
0000E976                            Obj14_ChkDel:				; XREF: Obj13
0000E976 3028 0008                  		move.w	8(a0),d0
0000E97A 0240 FF80                  		andi.w	#$FF80,d0
0000E97E 3238 F700                  		move.w	($FFFFF700).w,d1
0000E982 0441 0080                  		subi.w	#$80,d1
0000E986 0241 FF80                  		andi.w	#$FF80,d1
0000E98A 9041                       		sub.w	d1,d0
0000E98C 0C40 0280                  		cmpi.w	#$280,d0
0000E990 6200 F252                  		bhi.w	DeleteObject
0000E994 4E75                       		rts	
0000E996                            ; ===========================================================================
0000E996 0000 0000                  Obj14_TypeIndex:dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000E99A 0000 0000                  		dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000E99E 0000 0000                  		dc.w Obj14_Type04-Obj14_TypeIndex, Obj14_Type05-Obj14_TypeIndex
0000E9A2 0000 0000                  		dc.w Obj14_Type06-Obj14_TypeIndex, Obj14_Type07-Obj14_TypeIndex
0000E9A6 0000                       		dc.w Obj14_Type08-Obj14_TypeIndex
0000E9A8                            ; ===========================================================================
0000E9A8                            ; lavaball types 00-03 fly up and fall back down
0000E9A8                            
0000E9A8                            Obj14_Type00:				; XREF: Obj14_TypeIndex
0000E9A8 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's downward speed
0000E9AE 3028 0030                  		move.w	$30(a0),d0
0000E9B2 B068 000C                  		cmp.w	$C(a0),d0	; has object fallen back to its	original position?
0000E9B6 6400                       		bcc.s	loc_E41E	; if not, branch
0000E9B8 5428 0024                  		addq.b	#2,$24(a0)	; goto "Obj14_Delete" routine
0000E9BC                            
0000E9BC                            loc_E41E:
0000E9BC 08A8 0001 0022             		bclr	#1,$22(a0)
0000E9C2 4A68 0012                  		tst.w	$12(a0)
0000E9C6 6A00                       		bpl.s	locret_E430
0000E9C8 08E8 0001 0022             		bset	#1,$22(a0)
0000E9CE                            
0000E9CE                            locret_E430:
0000E9CE 4E75                       		rts	
0000E9D0                            ; ===========================================================================
0000E9D0                            ; lavaball type	04 flies up until it hits the ceiling
0000E9D0                            
0000E9D0                            Obj14_Type04:				; XREF: Obj14_TypeIndex
0000E9D0 08E8 0001 0022             		bset	#1,$22(a0)
0000E9D6 6100 0000                  		bsr.w	ObjHitCeiling
0000E9DA 4A41                       		tst.w	d1
0000E9DC 6A00                       		bpl.s	locret_E452
0000E9DE 117C 0008 0028             		move.b	#8,$28(a0)
0000E9E4 117C 0001 001C             		move.b	#1,$1C(a0)
0000E9EA 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the ceiling
0000E9F0                            
0000E9F0                            locret_E452:
0000E9F0 4E75                       		rts	
0000E9F2                            ; ===========================================================================
0000E9F2                            ; lavaball type	05 falls down until it hits the	floor
0000E9F2                            
0000E9F2                            Obj14_Type05:				; XREF: Obj14_TypeIndex
0000E9F2 08A8 0001 0022             		bclr	#1,$22(a0)
0000E9F8 6100 0000                  		bsr.w	ObjHitFloor
0000E9FC 4A41                       		tst.w	d1
0000E9FE 6A00                       		bpl.s	locret_E474
0000EA00 117C 0008 0028             		move.b	#8,$28(a0)
0000EA06 117C 0001 001C             		move.b	#1,$1C(a0)
0000EA0C 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the floor
0000EA12                            
0000EA12                            locret_E474:
0000EA12 4E75                       		rts	
0000EA14                            ; ===========================================================================
0000EA14                            ; lavaball types 06-07 move sideways
0000EA14                            
0000EA14                            Obj14_Type06:				; XREF: Obj14_TypeIndex
0000EA14 08E8 0000 0022             		bset	#0,$22(a0)
0000EA1A 76F8                       		moveq	#-8,d3
0000EA1C 6100 0000                  		bsr.w	ObjHitWallLeft
0000EA20 4A41                       		tst.w	d1
0000EA22 6A00                       		bpl.s	locret_E498
0000EA24 117C 0008 0028             		move.b	#8,$28(a0)
0000EA2A 117C 0003 001C             		move.b	#3,$1C(a0)
0000EA30 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000EA36                            
0000EA36                            locret_E498:
0000EA36 4E75                       		rts	
0000EA38                            ; ===========================================================================
0000EA38                            
0000EA38                            Obj14_Type07:				; XREF: Obj14_TypeIndex
0000EA38 08A8 0000 0022             		bclr	#0,$22(a0)
0000EA3E 7608                       		moveq	#8,d3
0000EA40 6100 0000                  		bsr.w	ObjHitWallRight
0000EA44 4A41                       		tst.w	d1
0000EA46 6A00                       		bpl.s	locret_E4BC
0000EA48 117C 0008 0028             		move.b	#8,$28(a0)
0000EA4E 117C 0003 001C             		move.b	#3,$1C(a0)
0000EA54 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000EA5A                            
0000EA5A                            locret_E4BC:
0000EA5A 4E75                       		rts	
0000EA5C                            ; ===========================================================================
0000EA5C                            
0000EA5C                            Obj14_Type08:				; XREF: Obj14_TypeIndex
0000EA5C 4E75                       		rts	
0000EA5E                            ; ===========================================================================
0000EA5E                            
0000EA5E                            Obj14_Delete:				; XREF: Obj14_Index
0000EA5E 6000 F184                  		bra.w	DeleteObject
0000EA62                            ; ===========================================================================
0000EA62                            Ani_obj14:
0000EA62                            	include "_anim\obj14.asm"
0000EA62                            ; ---------------------------------------------------------------------------
0000EA62                            ; Animation script - lava balls
0000EA62                            ; ---------------------------------------------------------------------------
0000EA62 0000                       		dc.w byte_E4CC-Ani_obj14
0000EA64 0000                       		dc.w byte_E4D2-Ani_obj14
0000EA66 0000                       		dc.w byte_E4D6-Ani_obj14
0000EA68 0000                       		dc.w byte_E4DC-Ani_obj14
0000EA6A 0500 2001 21FF             byte_E4CC:	dc.b 5,	0, $20,	1, $21,	$FF
0000EA70 0502 FC00                  byte_E4D2:	dc.b 5,	2, $FC,	0
0000EA74 0503 4304 44FF             byte_E4D6:	dc.b 5,	3, $43,	4, $44,	$FF
0000EA7A 0505 FC00                  byte_E4DC:	dc.b 5,	5, $FC,	0
0000EA7E                            		even
0000EA7E                            		even
0000EA7E                            
0000EA7E                            ; ===========================================================================
0000EA7E                            ; ---------------------------------------------------------------------------
0000EA7E                            ; Object 6D - flame thrower (SBZ)
0000EA7E                            ; ---------------------------------------------------------------------------
0000EA7E                            
0000EA7E                            Obj6D:					; XREF: Obj_Index
0000EA7E 7000                       		moveq	#0,d0
0000EA80 1028 0024                  		move.b	$24(a0),d0
0000EA84 323B 0000                  		move.w	Obj6D_Index(pc,d0.w),d1
0000EA88 4EFB 1000                  		jmp	Obj6D_Index(pc,d1.w)
0000EA8C                            ; ===========================================================================
0000EA8C 0000                       Obj6D_Index:	dc.w Obj6D_Main-Obj6D_Index
0000EA8E 0000                       		dc.w Obj6D_Action-Obj6D_Index
0000EA90                            ; ===========================================================================
0000EA90                            
0000EA90                            Obj6D_Main:				; XREF: Obj6D_Index
0000EA90 5428 0024                  		addq.b	#2,$24(a0)
0000EA94 217C 0000 0000 0004        		move.l	#Map_obj6D,4(a0)
0000EA9C 317C 83D9 0002             		move.w	#$83D9,2(a0)
0000EAA2 0028 0004 0001             		ori.b	#4,1(a0)
0000EAA8 117C 0001 0018             		move.b	#1,$18(a0)
0000EAAE 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000EAB4 117C 000C 0019             		move.b	#$C,$19(a0)
0000EABA 1028 0028                  		move.b	$28(a0),d0
0000EABE 0240 00F0                  		andi.w	#$F0,d0		; read 1st digit of object type
0000EAC2 D040                       		add.w	d0,d0		; multiply by 2
0000EAC4 3140 0030                  		move.w	d0,$30(a0)
0000EAC8 3140 0032                  		move.w	d0,$32(a0)	; set flaming time
0000EACC 1028 0028                  		move.b	$28(a0),d0
0000EAD0 0240 000F                  		andi.w	#$F,d0		; read 2nd digit of object type
0000EAD4 EB48                       		lsl.w	#5,d0		; multiply by $20
0000EAD6 3140 0034                  		move.w	d0,$34(a0)	; set pause time
0000EADA 117C 000A 0036             		move.b	#$A,$36(a0)
0000EAE0 0828 0001 0022             		btst	#1,$22(a0)
0000EAE6 6700                       		beq.s	Obj6D_Action
0000EAE8 117C 0002 001C             		move.b	#2,$1C(a0)
0000EAEE 117C 0015 0036             		move.b	#$15,$36(a0)
0000EAF4                            
0000EAF4                            Obj6D_Action:				; XREF: Obj6D_Index
0000EAF4 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
0000EAF8 6A00                       		bpl.s	loc_E57A	; if time remains, branch
0000EAFA 3168 0034 0030             		move.w	$34(a0),$30(a0)	; begin	pause time
0000EB00 0868 0000 001C             		bchg	#0,$1C(a0)
0000EB06 6700                       		beq.s	loc_E57A
0000EB08 3168 0032 0030             		move.w	$32(a0),$30(a0)	; begin	flaming	time
0000EB0E 303C 00B3                  		move.w	#$B3,d0
0000EB12 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play flame sound
0000EB18                            
0000EB18                            loc_E57A:
0000EB18 43F9 0000 0000             		lea	(Ani_obj6D).l,a1
0000EB1E 6100 C122                  		bsr.w	AnimateSprite
0000EB22 117C 0000 0020             		move.b	#0,$20(a0)
0000EB28 1028 0036                  		move.b	$36(a0),d0
0000EB2C B028 001A                  		cmp.b	$1A(a0),d0
0000EB30 6600                       		bne.s	Obj6D_ChkDel
0000EB32 117C 00A3 0020             		move.b	#$A3,$20(a0)
0000EB38                            
0000EB38                            Obj6D_ChkDel:
0000EB38 3028 0008                  		move.w	8(a0),d0
0000EB3C 0240 FF80                  		andi.w	#$FF80,d0
0000EB40 3238 F700                  		move.w	($FFFFF700).w,d1
0000EB44 0441 0080                  		subi.w	#$80,d1
0000EB48 0241 FF80                  		andi.w	#$FF80,d1
0000EB4C 9041                       		sub.w	d1,d0
0000EB4E 0C40 0280                  		cmpi.w	#$280,d0
0000EB52 6200 F090                  		bhi.w	DeleteObject
0000EB56 6000 F050                  		bra.w	DisplaySprite
0000EB5A                            ; ===========================================================================
0000EB5A                            Ani_obj6D:
0000EB5A                            	include "_anim\obj6D.asm"
0000EB5A                            ; ---------------------------------------------------------------------------
0000EB5A                            ; Animation script - flamethrower (SBZ)
0000EB5A                            ; ---------------------------------------------------------------------------
0000EB5A 0000                       		dc.w byte_E5C4-Ani_obj6D
0000EB5C 0000                       		dc.w byte_E5D2-Ani_obj6D
0000EB5E 0000                       		dc.w byte_E5DC-Ani_obj6D
0000EB60 0000                       		dc.w byte_E5EA-Ani_obj6D
0000EB62 0300 0102 0304 0506 0708+  byte_E5C4:	dc.b 3,	0, 1, 2, 3, 4, 5, 6, 7,	8, 9, $A, $FE, 2
0000EB70 0009 0705 0301 00FE 0100   byte_E5D2:	dc.b 0,	9, 7, 5, 3, 1, 0, $FE, 1, 0
0000EB7A 030B 0C0D 0E0F 1011 1213+  byte_E5DC:	dc.b 3,	$B, $C,	$D, $E,	$F, $10, $11, $12, $13,	$14, $15, $FE, 2
0000EB88 0014 1211 0F0D 0BFE 0100   byte_E5EA:	dc.b 0,	$14, $12, $11, $F, $D, $B, $FE,	1, 0
0000EB92                            		even
0000EB92                            		even
0000EB92                            
0000EB92                            ; ---------------------------------------------------------------------------
0000EB92                            ; Sprite mappings - flame thrower (SBZ)
0000EB92                            ; ---------------------------------------------------------------------------
0000EB92                            Map_obj6D:
0000EB92                            	include "_maps\obj6D.asm"
0000EB92                            ; ---------------------------------------------------------------------------
0000EB92                            ; Sprite mappings - flame thrower (SBZ)
0000EB92                            ; ---------------------------------------------------------------------------
0000EB92 0000 0000                  		dc.w byte_E620-Map_obj6D, byte_E626-Map_obj6D
0000EB96 0000 0000                  		dc.w byte_E631-Map_obj6D, byte_E63C-Map_obj6D
0000EB9A 0000 0000                  		dc.w byte_E64C-Map_obj6D, byte_E65C-Map_obj6D
0000EB9E 0000 0000                  		dc.w byte_E671-Map_obj6D, byte_E686-Map_obj6D
0000EBA2 0000 0000                  		dc.w byte_E6A0-Map_obj6D, byte_E6BA-Map_obj6D
0000EBA6 0000 0000                  		dc.w byte_E6D9-Map_obj6D, byte_E6F8-Map_obj6D
0000EBAA 0000 0000                  		dc.w byte_E6FE-Map_obj6D, byte_E709-Map_obj6D
0000EBAE 0000 0000                  		dc.w byte_E714-Map_obj6D, byte_E724-Map_obj6D
0000EBB2 0000 0000                  		dc.w byte_E734-Map_obj6D, byte_E749-Map_obj6D
0000EBB6 0000 0000                  		dc.w byte_E75E-Map_obj6D, byte_E778-Map_obj6D
0000EBBA 0000 0000                  		dc.w byte_E792-Map_obj6D, byte_E7B1-Map_obj6D
0000EBBE 01                         byte_E620:	dc.b 1
0000EBBF 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EBC4 02                         byte_E626:	dc.b 2
0000EBC5 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EBCA 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EBCF 02                         byte_E631:	dc.b 2
0000EBD0 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EBD5 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EBDA 03                         byte_E63C:	dc.b 3
0000EBDB 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EBE0 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EBE5 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EBEA 03                         byte_E64C:	dc.b 3
0000EBEB 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EBF0 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EBF5 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EBFA 04                         byte_E65C:	dc.b 4
0000EBFB 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EC00 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EC05 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EC0A 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EC0F 04                         byte_E671:	dc.b 4
0000EC10 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000EC15 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EC1A 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EC1F 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EC24 05                         byte_E686:	dc.b 5
0000EC25 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000EC2A 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EC2F 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EC34 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EC39 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EC3E 05                         byte_E6A0:	dc.b 5
0000EC3F F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000EC44 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000EC49 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EC4E 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EC53 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EC58 06                         byte_E6BA:	dc.b 6
0000EC59 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000EC5E F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000EC63 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EC68 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000EC6D 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EC72 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EC77 06                         byte_E6D9:	dc.b 6
0000EC78 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000EC7D F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000EC82 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000EC87 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EC8C 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EC91 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EC96 01                         byte_E6F8:	dc.b 1
0000EC97 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EC9C 02                         byte_E6FE:	dc.b 2
0000EC9D 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000ECA2 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000ECA7 02                         byte_E709:	dc.b 2
0000ECA8 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000ECAD 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000ECB2 03                         byte_E714:	dc.b 3
0000ECB3 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000ECB8 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000ECBD 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000ECC2 03                         byte_E724:	dc.b 3
0000ECC3 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000ECC8 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000ECCD 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000ECD2 04                         byte_E734:	dc.b 4
0000ECD3 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000ECD8 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000ECDD 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000ECE2 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000ECE7 04                         byte_E749:	dc.b 4
0000ECE8 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000ECED 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000ECF2 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000ECF7 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000ECFC 05                         byte_E75E:	dc.b 5
0000ECFD F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000ED02 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000ED07 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000ED0C 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000ED11 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000ED16 05                         byte_E778:	dc.b 5
0000ED17 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000ED1C 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000ED21 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000ED26 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000ED2B 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000ED30 06                         byte_E792:	dc.b 6
0000ED31 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000ED36 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000ED3B 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000ED40 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000ED45 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000ED4A 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000ED4F 06                         byte_E7B1:	dc.b 6
0000ED50 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000ED55 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000ED5A 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000ED5F 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000ED64 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000ED69 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000ED6E                            		even
0000ED6E                            		even
0000ED6E                            
0000ED6E                            ; ===========================================================================
0000ED6E                            ; ---------------------------------------------------------------------------
0000ED6E                            ; Object 46 - solid blocks and blocks that fall	from the ceiling (MZ)
0000ED6E                            ; ---------------------------------------------------------------------------
0000ED6E                            
0000ED6E                            Obj46:					; XREF: Obj_Index
0000ED6E 7000                       		moveq	#0,d0
0000ED70 1028 0024                  		move.b	$24(a0),d0
0000ED74 323B 0000                  		move.w	Obj46_Index(pc,d0.w),d1
0000ED78 4EFB 1000                  		jmp	Obj46_Index(pc,d1.w)
0000ED7C                            ; ===========================================================================
0000ED7C 0000                       Obj46_Index:	dc.w Obj46_Main-Obj46_Index
0000ED7E 0000                       		dc.w Obj46_Action-Obj46_Index
0000ED80                            ; ===========================================================================
0000ED80                            
0000ED80                            Obj46_Main:				; XREF: Obj46_Index
0000ED80 5428 0024                  		addq.b	#2,$24(a0)
0000ED84 117C 000F 0016             		move.b	#$F,$16(a0)
0000ED8A 117C 000F 0017             		move.b	#$F,$17(a0)
0000ED90 217C 0000 0000 0004        		move.l	#Map_obj46,4(a0)
0000ED98 317C 4000 0002             		move.w	#$4000,2(a0)
0000ED9E 117C 0004 0001             		move.b	#4,1(a0)
0000EDA4 117C 0003 0018             		move.b	#3,$18(a0)
0000EDAA 117C 0010 0019             		move.b	#$10,$19(a0)
0000EDB0 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000EDB6 317C 05C0 0032             		move.w	#$5C0,$32(a0)
0000EDBC                            
0000EDBC                            Obj46_Action:				; XREF: Obj46_Index
0000EDBC 4A28 0001                  		tst.b	1(a0)
0000EDC0 6A00                       		bpl.s	Obj46_ChkDel
0000EDC2 7000                       		moveq	#0,d0
0000EDC4 1028 0028                  		move.b	$28(a0),d0	; get object type
0000EDC8 0240 0007                  		andi.w	#7,d0		; read only the	1st digit
0000EDCC D040                       		add.w	d0,d0
0000EDCE 323B 0000                  		move.w	Obj46_TypeIndex(pc,d0.w),d1
0000EDD2 4EBB 1000                  		jsr	Obj46_TypeIndex(pc,d1.w)
0000EDD6 323C 001B                  		move.w	#$1B,d1
0000EDDA 343C 0010                  		move.w	#$10,d2
0000EDDE 363C 0011                  		move.w	#$11,d3
0000EDE2 3828 0008                  		move.w	8(a0),d4
0000EDE6 6100 0000                  		bsr.w	SolidObject
0000EDEA                            
0000EDEA                            Obj46_ChkDel:
0000EDEA 6100 EDBC                  		bsr.w	DisplaySprite
0000EDEE 3028 0008                  		move.w	8(a0),d0
0000EDF2 0240 FF80                  		andi.w	#$FF80,d0
0000EDF6 3238 F700                  		move.w	($FFFFF700).w,d1
0000EDFA 0441 0080                  		subi.w	#$80,d1
0000EDFE 0241 FF80                  		andi.w	#$FF80,d1
0000EE02 9041                       		sub.w	d1,d0
0000EE04 0C40 0280                  		cmpi.w	#$280,d0
0000EE08 6200 EDDA                  		bhi.w	DeleteObject
0000EE0C 4E75                       		rts	
0000EE0E                            ; ===========================================================================
0000EE0E 0000                       Obj46_TypeIndex:dc.w Obj46_Type00-Obj46_TypeIndex
0000EE10 0000                       		dc.w Obj46_Type01-Obj46_TypeIndex
0000EE12 0000                       		dc.w Obj46_Type02-Obj46_TypeIndex
0000EE14 0000                       		dc.w Obj46_Type03-Obj46_TypeIndex
0000EE16 0000                       		dc.w Obj46_Type04-Obj46_TypeIndex
0000EE18                            ; ===========================================================================
0000EE18                            
0000EE18                            Obj46_Type00:				; XREF: Obj46_TypeIndex
0000EE18 4E75                       		rts	
0000EE1A                            ; ===========================================================================
0000EE1A                            
0000EE1A                            Obj46_Type02:				; XREF: Obj46_TypeIndex
0000EE1A 3038 D008                  		move.w	($FFFFD008).w,d0
0000EE1E 9068 0008                  		sub.w	8(a0),d0
0000EE22 6400                       		bcc.s	loc_E888
0000EE24 4440                       		neg.w	d0
0000EE26                            
0000EE26                            loc_E888:
0000EE26 0C40 0090                  		cmpi.w	#$90,d0		; is Sonic within $90 pixels of	the block?
0000EE2A 6400                       		bcc.s	Obj46_Type01	; if not, resume wobbling
0000EE2C 117C 0003 0028             		move.b	#3,$28(a0)	; if yes, make the block fall
0000EE32                            
0000EE32                            Obj46_Type01:				; XREF: Obj46_TypeIndex
0000EE32 7000                       		moveq	#0,d0
0000EE34 1038 FE74                  		move.b	($FFFFFE74).w,d0
0000EE38 0828 0003 0028             		btst	#3,$28(a0)
0000EE3E 6700                       		beq.s	loc_E8A8
0000EE40 4440                       		neg.w	d0
0000EE42 0640 0010                  		addi.w	#$10,d0
0000EE46                            
0000EE46                            loc_E8A8:
0000EE46 3228 0030                  		move.w	$30(a0),d1
0000EE4A 9240                       		sub.w	d0,d1
0000EE4C 3141 000C                  		move.w	d1,$C(a0)	; update the block's position to make it wobble
0000EE50 4E75                       		rts	
0000EE52                            ; ===========================================================================
0000EE52                            
0000EE52                            Obj46_Type03:				; XREF: Obj46_TypeIndex
0000EE52 6100 ED2E                  		bsr.w	SpeedToPos
0000EE56 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase falling speed
0000EE5C 6100 0000                  		bsr.w	ObjHitFloor
0000EE60 4A41                       		tst.w	d1		; has the block	hit the	floor?
0000EE62 6A00 0000                  		bpl.w	locret_E8EE	; if not, branch
0000EE66 D368 000C                  		add.w	d1,$C(a0)
0000EE6A 4268 0012                  		clr.w	$12(a0)		; stop the block falling
0000EE6E 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000EE74 117C 0004 0028             		move.b	#4,$28(a0)
0000EE7A 3011                       		move.w	(a1),d0
0000EE7C 0240 03FF                  		andi.w	#$3FF,d0
0000EE80 0C40 02E8                  		cmpi.w	#$2E8,d0
0000EE84 6400                       		bcc.s	locret_E8EE
0000EE86 117C 0000 0028             		move.b	#0,$28(a0)
0000EE8C                            
0000EE8C                            locret_E8EE:
0000EE8C 4E75                       		rts	
0000EE8E                            ; ===========================================================================
0000EE8E                            
0000EE8E                            Obj46_Type04:				; XREF: Obj46_TypeIndex
0000EE8E 7000                       		moveq	#0,d0
0000EE90 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000EE94 E648                       		lsr.w	#3,d0
0000EE96 3228 0030                  		move.w	$30(a0),d1
0000EE9A 9240                       		sub.w	d0,d1
0000EE9C 3141 000C                  		move.w	d1,$C(a0)	; make the block wobble
0000EEA0 4E75                       		rts	
0000EEA2                            ; ===========================================================================
0000EEA2                            ; ---------------------------------------------------------------------------
0000EEA2                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000EEA2                            ; ---------------------------------------------------------------------------
0000EEA2                            Map_obj46:
0000EEA2                            	include "_maps\obj46.asm"
0000EEA2                            ; ---------------------------------------------------------------------------
0000EEA2                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000EEA2                            ; ---------------------------------------------------------------------------
0000EEA2 0000                       		dc.w byte_E906-Map_obj46
0000EEA4 01                         byte_E906:	dc.b 1
0000EEA5 F00F 0001 F0               		dc.b $F0, $F, 0, 1, $F0
0000EEAA                            		even
0000EEAA                            		even
0000EEAA                            
0000EEAA                            ; ===========================================================================
0000EEAA                            ; ---------------------------------------------------------------------------
0000EEAA                            ; Object 12 - lamp (SYZ)
0000EEAA                            ; ---------------------------------------------------------------------------
0000EEAA                            
0000EEAA                            Obj12:					; XREF: Obj_Index
0000EEAA 7000                       		moveq	#0,d0
0000EEAC 1028 0024                  		move.b	$24(a0),d0
0000EEB0 323B 0000                  		move.w	Obj12_Index(pc,d0.w),d1
0000EEB4 4EFB 1000                  		jmp	Obj12_Index(pc,d1.w)
0000EEB8                            ; ===========================================================================
0000EEB8 0000                       Obj12_Index:	dc.w Obj12_Main-Obj12_Index
0000EEBA 0000                       		dc.w Obj12_Animate-Obj12_Index
0000EEBC                            ; ===========================================================================
0000EEBC                            
0000EEBC                            Obj12_Main:				; XREF: Obj12_Index
0000EEBC 5428 0024                  		addq.b	#2,$24(a0)
0000EEC0 217C 0000 0000 0004        		move.l	#Map_obj12,4(a0)
0000EEC8 317C 0000 0002             		move.w	#0,2(a0)
0000EECE 117C 0004 0001             		move.b	#4,1(a0)
0000EED4 117C 0010 0019             		move.b	#$10,$19(a0)
0000EEDA 117C 0006 0018             		move.b	#6,$18(a0)
0000EEE0                            
0000EEE0                            Obj12_Animate:				; XREF: Obj12_Index
0000EEE0 5328 001E                  		subq.b	#1,$1E(a0)
0000EEE4 6A00                       		bpl.s	Obj12_ChkDel
0000EEE6 117C 0007 001E             		move.b	#7,$1E(a0)
0000EEEC 5228 001A                  		addq.b	#1,$1A(a0)
0000EEF0 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
0000EEF6 6500                       		bcs.s	Obj12_ChkDel
0000EEF8 117C 0000 001A             		move.b	#0,$1A(a0)
0000EEFE                            
0000EEFE                            Obj12_ChkDel:
0000EEFE 3028 0008                  		move.w	8(a0),d0
0000EF02 0240 FF80                  		andi.w	#$FF80,d0
0000EF06 3238 F700                  		move.w	($FFFFF700).w,d1
0000EF0A 0441 0080                  		subi.w	#$80,d1
0000EF0E 0241 FF80                  		andi.w	#$FF80,d1
0000EF12 9041                       		sub.w	d1,d0
0000EF14 0C40 0280                  		cmpi.w	#$280,d0
0000EF18 6200 ECCA                  		bhi.w	DeleteObject
0000EF1C 6000 EC8A                  		bra.w	DisplaySprite
0000EF20                            ; ===========================================================================
0000EF20                            ; ---------------------------------------------------------------------------
0000EF20                            ; Sprite mappings - lamp (SYZ)
0000EF20                            ; ---------------------------------------------------------------------------
0000EF20                            Map_obj12:
0000EF20                            	include "_maps\obj12.asm"
0000EF20                            ; ---------------------------------------------------------------------------
0000EF20                            ; Sprite mappings - lamp (SYZ)
0000EF20                            ; ---------------------------------------------------------------------------
0000EF20 0000 0000                  		dc.w byte_E98E-Map_obj12, byte_E999-Map_obj12
0000EF24 0000 0000                  		dc.w byte_E9A4-Map_obj12, byte_E9AF-Map_obj12
0000EF28 0000 0000                  		dc.w byte_E9BA-Map_obj12, byte_E9C5-Map_obj12
0000EF2C 02                         byte_E98E:	dc.b 2
0000EF2D F80C 0031 F0               		dc.b $F8, $C, 0, $31, $F0
0000EF32 000C 1031 F0               		dc.b 0,	$C, $10, $31, $F0
0000EF37 02                         byte_E999:	dc.b 2
0000EF38 F80C 0035 F0               		dc.b $F8, $C, 0, $35, $F0
0000EF3D 000C 1035 F0               		dc.b 0,	$C, $10, $35, $F0
0000EF42 02                         byte_E9A4:	dc.b 2
0000EF43 F80C 0039 F0               		dc.b $F8, $C, 0, $39, $F0
0000EF48 000C 1039 F0               		dc.b 0,	$C, $10, $39, $F0
0000EF4D 02                         byte_E9AF:	dc.b 2
0000EF4E F80C 003D F0               		dc.b $F8, $C, 0, $3D, $F0
0000EF53 000C 103D F0               		dc.b 0,	$C, $10, $3D, $F0
0000EF58 02                         byte_E9BA:	dc.b 2
0000EF59 F80C 0041 F0               		dc.b $F8, $C, 0, $41, $F0
0000EF5E 000C 1041 F0               		dc.b 0,	$C, $10, $41, $F0
0000EF63 02                         byte_E9C5:	dc.b 2
0000EF64 F80C 0045 F0               		dc.b $F8, $C, 0, $45, $F0
0000EF69 000C 1045 F0               		dc.b 0,	$C, $10, $45, $F0
0000EF6E                            		even
0000EF6E                            		even
0000EF6E                            
0000EF6E                            ; ===========================================================================
0000EF6E                            ; ---------------------------------------------------------------------------
0000EF6E                            ; Object 47 - pinball bumper (SYZ)
0000EF6E                            ; ---------------------------------------------------------------------------
0000EF6E                            
0000EF6E                            Obj47:					; XREF: Obj_Index
0000EF6E 7000                       		moveq	#0,d0
0000EF70 1028 0024                  		move.b	$24(a0),d0
0000EF74 323B 0000                  		move.w	Obj47_Index(pc,d0.w),d1
0000EF78 4EFB 1000                  		jmp	Obj47_Index(pc,d1.w)
0000EF7C                            ; ===========================================================================
0000EF7C 0000                       Obj47_Index:	dc.w Obj47_Main-Obj47_Index
0000EF7E 0000                       		dc.w Obj47_Hit-Obj47_Index
0000EF80                            ; ===========================================================================
0000EF80                            
0000EF80                            Obj47_Main:				; XREF: Obj47_Index
0000EF80 5428 0024                  		addq.b	#2,$24(a0)
0000EF84 217C 0000 0000 0004        		move.l	#Map_obj47,4(a0)
0000EF8C 317C 0380 0002             		move.w	#$380,2(a0)
0000EF92 117C 0004 0001             		move.b	#4,1(a0)
0000EF98 117C 0010 0019             		move.b	#$10,$19(a0)
0000EF9E 117C 0001 0018             		move.b	#1,$18(a0)
0000EFA4 117C 00D7 0020             		move.b	#$D7,$20(a0)
0000EFAA                            
0000EFAA                            Obj47_Hit:				; XREF: Obj47_Index
0000EFAA 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	bumper?
0000EFAE 6700 0000                  		beq.w	Obj47_Display	; if not, branch
0000EFB2 4228 0021                  		clr.b	$21(a0)
0000EFB6 43F8 D000                  		lea	($FFFFD000).w,a1
0000EFBA 3228 0008                  		move.w	8(a0),d1
0000EFBE 3428 000C                  		move.w	$C(a0),d2
0000EFC2 9269 0008                  		sub.w	8(a1),d1
0000EFC6 9469 000C                  		sub.w	$C(a1),d2
0000EFCA 4EB9 0000 2EF0             		jsr	(CalcAngle).l
0000EFD0 4EB9 0000 2C22             		jsr	(CalcSine).l
0000EFD6 C3FC F900                  		muls.w	#-$700,d1
0000EFDA E081                       		asr.l	#8,d1
0000EFDC 3341 0010                  		move.w	d1,$10(a1)	; bounce Sonic away
0000EFE0 C1FC F900                  		muls.w	#-$700,d0
0000EFE4 E080                       		asr.l	#8,d0
0000EFE6 3340 0012                  		move.w	d0,$12(a1)	; bounce Sonic away
0000EFEA 08E9 0001 0022             		bset	#1,$22(a1)
0000EFF0 08A9 0004 0022             		bclr	#4,$22(a1)
0000EFF6 08A9 0005 0022             		bclr	#5,$22(a1)
0000EFFC 4229 003C                  		clr.b	$3C(a1)
0000F000 117C 0001 001C             		move.b	#1,$1C(a0)
0000F006 303C 00B4                  		move.w	#$B4,d0
0000F00A 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play bumper sound
0000F010 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F014 7000                       		moveq	#0,d0
0000F016 1028 0023                  		move.b	$23(a0),d0
0000F01A 6700                       		beq.s	Obj47_Score
0000F01C 0C32 008A 0002             		cmpi.b	#$8A,2(a2,d0.w)	; has bumper been hit $8A times?
0000F022 6400                       		bcc.s	Obj47_Display	; if yes, Sonic	gets no	points
0000F024 5232 0002                  		addq.b	#1,2(a2,d0.w)
0000F028                            
0000F028                            Obj47_Score:
0000F028 7001                       		moveq	#1,d0
0000F02A 4EB9 0000 0000             		jsr	AddPoints	; add 10 to score
0000F030 6100 EFFC                  		bsr.w	SingleObjLoad
0000F034 6600                       		bne.s	Obj47_Display
0000F036 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0000F03A 3368 0008 0008             		move.w	8(a0),8(a1)
0000F040 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F046 137C 0004 001A             		move.b	#4,$1A(a1)
0000F04C                            
0000F04C                            Obj47_Display:
0000F04C 43F9 0000 0000             		lea	(Ani_obj47).l,a1
0000F052 6100 BBEE                  		bsr.w	AnimateSprite
0000F056 3028 0008                  		move.w	8(a0),d0
0000F05A 0240 FF80                  		andi.w	#$FF80,d0
0000F05E 3238 F700                  		move.w	($FFFFF700).w,d1
0000F062 0441 0080                  		subi.w	#$80,d1
0000F066 0241 FF80                  		andi.w	#$FF80,d1
0000F06A 9041                       		sub.w	d1,d0
0000F06C 0C40 0280                  		cmpi.w	#$280,d0
0000F070 6200                       		bhi.s	Obj47_ChkHit
0000F072 6000 EB34                  		bra.w	DisplaySprite
0000F076                            ; ===========================================================================
0000F076                            
0000F076                            Obj47_ChkHit:				; XREF: Obj47_Display
0000F076 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F07A 7000                       		moveq	#0,d0
0000F07C 1028 0023                  		move.b	$23(a0),d0
0000F080 6700                       		beq.s	Obj47_Delete
0000F082 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000F088                            
0000F088                            Obj47_Delete:
0000F088 6000 EB5A                  		bra.w	DeleteObject
0000F08C                            ; ===========================================================================
0000F08C                            Ani_obj47:
0000F08C                            	include "_anim\obj47.asm"
0000F08C                            ; ---------------------------------------------------------------------------
0000F08C                            ; Animation script - flamethrower (SBZ)
0000F08C                            ; ---------------------------------------------------------------------------
0000F08C 0000                       		dc.w byte_EAF4-Ani_obj47
0000F08E 0000                       		dc.w byte_EAF8-Ani_obj47
0000F090 0F00 FF00                  byte_EAF4:	dc.b $F, 0, $FF, 0
0000F094 0301 0201 02FD 0000        byte_EAF8:	dc.b 3,	1, 2, 1, 2, $FD, 0, 0
0000F09C                            		even
0000F09C                            		even
0000F09C                            
0000F09C                            ; ---------------------------------------------------------------------------
0000F09C                            ; Sprite mappings - pinball bumper (SYZ)
0000F09C                            ; ---------------------------------------------------------------------------
0000F09C                            Map_obj47:
0000F09C                            	include "_maps\obj47.asm"
0000F09C                            ; ---------------------------------------------------------------------------
0000F09C                            ; Sprite mappings - pinball bumper (SYZ)
0000F09C                            ; ---------------------------------------------------------------------------
0000F09C 0000                       		dc.w byte_EB06-Map_obj47
0000F09E 0000                       		dc.w byte_EB11-Map_obj47
0000F0A0 0000                       		dc.w byte_EB1C-Map_obj47
0000F0A2 02                         byte_EB06:	dc.b 2
0000F0A3 F007 0000 F0               		dc.b $F0, 7, 0,	0, $F0
0000F0A8 F007 0800 00               		dc.b $F0, 7, 8,	0, 0
0000F0AD 02                         byte_EB11:	dc.b 2
0000F0AE F406 0008 F4               		dc.b $F4, 6, 0,	8, $F4
0000F0B3 F402 0808 04               		dc.b $F4, 2, 8,	8, 4
0000F0B8 02                         byte_EB1C:	dc.b 2
0000F0B9 F007 000E F0               		dc.b $F0, 7, 0,	$E, $F0
0000F0BE F007 080E 00               		dc.b $F0, 7, 8,	$E, 0
0000F0C4 00                         		even
0000F0C4 00                         		even
0000F0C4                            
0000F0C4                            ; ===========================================================================
0000F0C4                            ; ---------------------------------------------------------------------------
0000F0C4                            ; Object 0D - signpost at the end of a level
0000F0C4                            ; ---------------------------------------------------------------------------
0000F0C4                            
0000F0C4                            Obj0D:					; XREF: Obj_Index
0000F0C4 7000                       		moveq	#0,d0
0000F0C6 1028 0024                  		move.b	$24(a0),d0
0000F0CA 323B 0000                  		move.w	Obj0D_Index(pc,d0.w),d1
0000F0CE 4EBB 1000                  		jsr	Obj0D_Index(pc,d1.w)
0000F0D2 43F9 0000 0000             		lea	(Ani_obj0D).l,a1
0000F0D8 6100 BB68                  		bsr.w	AnimateSprite
0000F0DC 6100 EACA                  		bsr.w	DisplaySprite
0000F0E0 3028 0008                  		move.w	8(a0),d0
0000F0E4 0240 FF80                  		andi.w	#$FF80,d0
0000F0E8 3238 F700                  		move.w	($FFFFF700).w,d1
0000F0EC 0441 0080                  		subi.w	#$80,d1
0000F0F0 0241 FF80                  		andi.w	#$FF80,d1
0000F0F4 9041                       		sub.w	d1,d0
0000F0F6 0C40 0280                  		cmpi.w	#$280,d0
0000F0FA 6200 EAE8                  		bhi.w	DeleteObject
0000F0FE 4E75                       		rts	
0000F100                            ; ===========================================================================
0000F100 0000                       Obj0D_Index:	dc.w Obj0D_Main-Obj0D_Index
0000F102 0000                       		dc.w Obj0D_Touch-Obj0D_Index
0000F104 0000                       		dc.w Obj0D_Spin-Obj0D_Index
0000F106 0000                       		dc.w Obj0D_SonicRun-Obj0D_Index
0000F108 0000                       		dc.w locret_ED1A-Obj0D_Index
0000F10A                            ; ===========================================================================
0000F10A                            
0000F10A                            Obj0D_Main:				; XREF: Obj0D_Index
0000F10A 5428 0024                  		addq.b	#2,$24(a0)
0000F10E 217C 0000 0000 0004        		move.l	#Map_obj0D,4(a0)
0000F116 317C 0680 0002             		move.w	#$680,2(a0)
0000F11C 117C 0004 0001             		move.b	#4,1(a0)
0000F122 117C 0018 0019             		move.b	#$18,$19(a0)
0000F128 117C 0004 0018             		move.b	#4,$18(a0)
0000F12E                            
0000F12E                            Obj0D_Touch:				; XREF: Obj0D_Index
0000F12E 3038 D008                  		move.w	($FFFFD008).w,d0
0000F132 9068 0008                  		sub.w	8(a0),d0
0000F136 6500                       		bcs.s	locret_EBBA
0000F138 0C40 0020                  		cmpi.w	#$20,d0		; is Sonic within $20 pixels of	the signpost?
0000F13C 6400                       		bcc.s	locret_EBBA	; if not, branch
0000F13E 303C 00CF                  		move.w	#$CF,d0
0000F142 4EB9 0000 15B6             		jsr	(PlaySound).l	; play signpost	sound
0000F148 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000F14C 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w ; lock screen position
0000F152 5428 0024                  		addq.b	#2,$24(a0)
0000F156                            
0000F156                            locret_EBBA:
0000F156 4E75                       		rts	
0000F158                            ; ===========================================================================
0000F158                            
0000F158                            Obj0D_Spin:				; XREF: Obj0D_Index
0000F158 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from spin time
0000F15C 6A00                       		bpl.s	Obj0D_Sparkle	; if time remains, branch
0000F15E 317C 003C 0030             		move.w	#60,$30(a0)	; set spin cycle time to 1 second
0000F164 5228 001C                  		addq.b	#1,$1C(a0)	; next spin cycle
0000F168 0C28 0003 001C             		cmpi.b	#3,$1C(a0)	; have 3 spin cycles completed?
0000F16E 6600                       		bne.s	Obj0D_Sparkle	; if not, branch
0000F170 5428 0024                  		addq.b	#2,$24(a0)
0000F174                            
0000F174                            Obj0D_Sparkle:
0000F174 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000F178 6A00                       		bpl.s	locret_EC42	; if time remains, branch
0000F17A 317C 000B 0032             		move.w	#$B,$32(a0)	; set time between sparkles to $B frames
0000F180 7000                       		moveq	#0,d0
0000F182 1028 0034                  		move.b	$34(a0),d0
0000F186 5428 0034                  		addq.b	#2,$34(a0)
0000F18A 0228 000E 0034             		andi.b	#$E,$34(a0)
0000F190 45FB 0000                  		lea	Obj0D_SparkPos(pc,d0.w),a2 ; load sparkle position data
0000F194 6100 EE98                  		bsr.w	SingleObjLoad
0000F198 6600                       		bne.s	locret_EC42
0000F19A 12BC 0025                  		move.b	#$25,0(a1)	; load rings object
0000F19E 137C 0006 0024             		move.b	#6,$24(a1)	; jump to ring sparkle subroutine
0000F1A4 101A                       		move.b	(a2)+,d0
0000F1A6 4880                       		ext.w	d0
0000F1A8 D068 0008                  		add.w	8(a0),d0
0000F1AC 3340 0008                  		move.w	d0,8(a1)
0000F1B0 101A                       		move.b	(a2)+,d0
0000F1B2 4880                       		ext.w	d0
0000F1B4 D068 000C                  		add.w	$C(a0),d0
0000F1B8 3340 000C                  		move.w	d0,$C(a1)
0000F1BC 237C 0000 A3E0 0004        		move.l	#Map_obj25,4(a1)
0000F1C4 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000F1CA 137C 0004 0001             		move.b	#4,1(a1)
0000F1D0 137C 0002 0018             		move.b	#2,$18(a1)
0000F1D6 137C 0008 0019             		move.b	#8,$19(a1)
0000F1DC                            
0000F1DC                            locret_EC42:
0000F1DC 4E75                       		rts	
0000F1DE                            ; ===========================================================================
0000F1DE E8F0                       Obj0D_SparkPos:	dc.b -$18,-$10		; x-position, y-position
0000F1E0 0808                       		dc.b	8,   8
0000F1E2 F000                       		dc.b -$10,   0
0000F1E4 18F8                       		dc.b  $18,  -8
0000F1E6 00F8                       		dc.b	0,  -8
0000F1E8 1000                       		dc.b  $10,   0
0000F1EA E808                       		dc.b -$18,   8
0000F1EC 1810                       		dc.b  $18, $10
0000F1EE                            ; ===========================================================================
0000F1EE                            
0000F1EE                            Obj0D_SonicRun:				; XREF: Obj0D_Index
0000F1EE 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
0000F1F2 6600 0000                  		bne.w	locret_ECEE	; if yes, branch
0000F1F6 0838 0001 D022             		btst	#1,($FFFFD022).w
0000F1FC 6600                       		bne.s	loc_EC70
0000F1FE 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0000F204 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0000F20A 6700                       		beq.s	Obj0D_MoveLeft	; GMZ: If not, branch
0000F20C 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; make Sonic run to	the right
0000F212 6000                       		bra.s	loc_EC70
0000F214                            
0000F214                            Obj0D_MoveLeft:
0000F214 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0000F21A                            
0000F21A                            loc_EC70:
0000F21A 4A38 D000                  		tst.b	($FFFFD000).w
0000F21E 6700                       		beq.s	loc_EC86
0000F220 3038 D008                  		move.w	($FFFFD008).w,d0
0000F224 3238 F72A                  		move.w	($FFFFF72A).w,d1
0000F228 0641 0128                  		addi.w	#$128,d1
0000F22C B041                       		cmp.w	d1,d0
0000F22E 6500                       		bcs.s	locret_ECEE
0000F230                            
0000F230                            loc_EC86:
0000F230 5428 0024                  		addq.b	#2,$24(a0)
0000F234                            
0000F234                            ; ---------------------------------------------------------------------------
0000F234                            ; Subroutine to	set up bonuses at the end of an	act
0000F234                            ; ---------------------------------------------------------------------------
0000F234                            
0000F234                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F234                            
0000F234                            
0000F234                            GotThroughAct:				; XREF: Obj3E_EndAct
0000F234 4A38 D5C0                  		tst.b	($FFFFD5C0).w
0000F238 6600                       		bne.s	locret_ECEE
0000F23A 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w
0000F240 4238 FE2D                  		clr.b	($FFFFFE2D).w	; disable invincibility
0000F244 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000F248 11FC 003A D5C0             		move.b	#$3A,($FFFFD5C0).w
0000F24E 7010                       		moveq	#$10,d0
0000F250 4EB9 0000 17D2             		jsr	(LoadPLC2).l	; load title card patterns
0000F256 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w
0000F25C 7000                       		moveq	#0,d0
0000F25E 1038 FE23                  		move.b	($FFFFFE23).w,d0
0000F262 C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
0000F266 7200                       		moveq	#0,d1
0000F268 1238 FE24                  		move.b	($FFFFFE24).w,d1
0000F26C D041                       		add.w	d1,d0		; add up your time
0000F26E 80FC 000F                  		divu.w	#15,d0		; divide by 15
0000F272 7214                       		moveq	#$14,d1
0000F274 B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
0000F276 6500                       		bcs.s	loc_ECD0	; if not, branch
0000F278 3001                       		move.w	d1,d0		; use minimum time bonus (0)
0000F27A                            
0000F27A                            loc_ECD0:
0000F27A D040                       		add.w	d0,d0
0000F27C 31FB 0000 F7D2             		move.w	TimeBonuses(pc,d0.w),($FFFFF7D2).w ; set time bonus
0000F282 3038 FE20                  		move.w	($FFFFFE20).w,d0 ; load	number of rings
0000F286 C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
0000F28A 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set ring bonus
0000F28E 303C 008E                  		move.w	#$8E,d0
0000F292 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play "Sonic got	through" music
0000F298                            
0000F298                            locret_ECEE:
0000F298 4E75                       		rts	
0000F29A                            ; End of function GotThroughAct
0000F29A                            
0000F29A                            ; ===========================================================================
0000F29A 1388 1388 03E8 01F4 0190+  TimeBonuses:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
0000F2AE 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
0000F2C4                            ; ===========================================================================
0000F2C4                            
0000F2C4                            locret_ED1A:				; XREF: Obj0D_Index
0000F2C4 4E75                       		rts	
0000F2C6                            ; ===========================================================================
0000F2C6                            Ani_obj0D:
0000F2C6                            	include "_anim\obj0D.asm"
0000F2C6                            ; ---------------------------------------------------------------------------
0000F2C6                            ; Animation script - signpost
0000F2C6                            ; ---------------------------------------------------------------------------
0000F2C6 0000                       		dc.w byte_ED24-Ani_obj0D
0000F2C8 0000                       		dc.w byte_ED28-Ani_obj0D
0000F2CA 0000                       		dc.w byte_ED2E-Ani_obj0D
0000F2CC 0000                       		dc.w byte_ED34-Ani_obj0D
0000F2CE 0F00 FF00                  byte_ED24:	dc.b $F, 0, $FF, 0
0000F2D2 0100 0102 03FF             byte_ED28:	dc.b 1,	0, 1, 2, 3, $FF
0000F2D8 0104 0102 03FF             byte_ED2E:	dc.b 1,	4, 1, 2, 3, $FF
0000F2DE 0F04 FF                    byte_ED34:	dc.b $F, 4, $FF
0000F2E2 00                         		even
0000F2E2 00                         		even
0000F2E2                            
0000F2E2                            ; ---------------------------------------------------------------------------
0000F2E2                            ; Sprite mappings - signpost
0000F2E2                            ; ---------------------------------------------------------------------------
0000F2E2                            Map_obj0D:
0000F2E2                            	include "_maps\obj0D.asm"
0000F2E2                            ; ---------------------------------------------------------------------------
0000F2E2                            ; Sprite mappings - signpost
0000F2E2                            ; ---------------------------------------------------------------------------
0000F2E2 0000 0000                  		dc.w byte_ED42-Map_obj0D, byte_ED52-Map_obj0D
0000F2E6 0000 0000                  		dc.w byte_ED5D-Map_obj0D, byte_ED68-Map_obj0D
0000F2EA 0000                       		dc.w byte_ED73-Map_obj0D
0000F2EC 03                         byte_ED42:	dc.b 3
0000F2ED F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000F2F2 F00B 0800 00               		dc.b $F0, $B, 8, 0, 0
0000F2F7 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F2FC 02                         byte_ED52:	dc.b 2
0000F2FD F00F 000C F0               		dc.b $F0, $F, 0, $C, $F0
0000F302 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F307 02                         byte_ED5D:	dc.b 2
0000F308 F003 001C FC               		dc.b $F0, 3, 0,	$1C, $FC
0000F30D 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000F312 02                         byte_ED68:	dc.b 2
0000F313 F00F 080C F0               		dc.b $F0, $F, 8, $C, $F0
0000F318 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000F31D 03                         byte_ED73:	dc.b 3
0000F31E F00B 0020 E8               		dc.b $F0, $B, 0, $20, $E8
0000F323 F00B 002C 00               		dc.b $F0, $B, 0, $2C, 0
0000F328 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F32E 00                         		even
0000F32E 00                         		even
0000F32E                            
0000F32E                            ; ===========================================================================
0000F32E                            ; ---------------------------------------------------------------------------
0000F32E                            ; Object 4C - lava geyser / lavafall producer (MZ)
0000F32E                            ; ---------------------------------------------------------------------------
0000F32E                            
0000F32E                            Obj4C:					; XREF: Obj_Index
0000F32E 7000                       		moveq	#0,d0
0000F330 1028 0024                  		move.b	$24(a0),d0
0000F334 323B 0000                  		move.w	Obj4C_Index(pc,d0.w),d1
0000F338 4EBB 1000                  		jsr	Obj4C_Index(pc,d1.w)
0000F33C 6000 0000                  		bra.w	Obj4D_ChkDel
0000F340                            ; ===========================================================================
0000F340 0000                       Obj4C_Index:	dc.w Obj4C_Main-Obj4C_Index
0000F342 0000                       		dc.w loc_EDCC-Obj4C_Index
0000F344 0000                       		dc.w loc_EE3E-Obj4C_Index
0000F346 0000                       		dc.w Obj4C_MakeLava-Obj4C_Index
0000F348 0000                       		dc.w Obj4C_Display-Obj4C_Index
0000F34A 0000                       		dc.w Obj4C_Delete-Obj4C_Index
0000F34C                            ; ===========================================================================
0000F34C                            
0000F34C                            Obj4C_Main:				; XREF: Obj4C_Index
0000F34C 5428 0024                  		addq.b	#2,$24(a0)
0000F350 217C 0000 0000 0004        		move.l	#Map_obj4C,4(a0)
0000F358 317C E3A8 0002             		move.w	#$E3A8,2(a0)
0000F35E 117C 0004 0001             		move.b	#4,1(a0)
0000F364 117C 0001 0018             		move.b	#1,$18(a0)
0000F36A 117C 0038 0019             		move.b	#$38,$19(a0)
0000F370 317C 0078 0034             		move.w	#120,$34(a0)	; set time delay to 2 seconds
0000F376                            
0000F376                            loc_EDCC:				; XREF: Obj4C_Index
0000F376 5368 0032                  		subq.w	#1,$32(a0)
0000F37A 6A00                       		bpl.s	locret_EDF0
0000F37C 3168 0034 0032             		move.w	$34(a0),$32(a0)
0000F382 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000F386 3228 000C                  		move.w	$C(a0),d1
0000F38A B041                       		cmp.w	d1,d0
0000F38C 6400                       		bcc.s	locret_EDF0
0000F38E 0441 0170                  		subi.w	#$170,d1
0000F392 B041                       		cmp.w	d1,d0
0000F394 6500                       		bcs.s	locret_EDF0
0000F396 5428 0024                  		addq.b	#2,$24(a0)
0000F39A                            
0000F39A                            locret_EDF0:
0000F39A 4E75                       		rts	
0000F39C                            ; ===========================================================================
0000F39C                            
0000F39C                            Obj4C_MakeLava:				; XREF: Obj4C_Index
0000F39C 5428 0024                  		addq.b	#2,$24(a0)
0000F3A0 6100 ECA2                  		bsr.w	SingleObjLoad2
0000F3A4 6600                       		bne.s	loc_EE18
0000F3A6 12BC 004D                  		move.b	#$4D,0(a1)	; load lavafall	object
0000F3AA 3368 0008 0008             		move.w	8(a0),8(a1)
0000F3B0 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F3B6 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000F3BC 2348 003C                  		move.l	a0,$3C(a1)
0000F3C0                            
0000F3C0                            loc_EE18:
0000F3C0 117C 0001 001C             		move.b	#1,$1C(a0)
0000F3C6 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000F3CA 6700                       		beq.s	Obj4C_Type00	; if yes, branch
0000F3CC 117C 0004 001C             		move.b	#4,$1C(a0)
0000F3D2 6000                       		bra.s	Obj4C_Display
0000F3D4                            ; ===========================================================================
0000F3D4                            
0000F3D4                            Obj4C_Type00:				; XREF: Obj4C_MakeLava
0000F3D4 2268 003C                  		movea.l	$3C(a0),a1	; load geyser object
0000F3D8 08E9 0001 0022             		bset	#1,$22(a1)
0000F3DE 337C FA80 0012             		move.w	#-$580,$12(a1)
0000F3E4 6000                       		bra.s	Obj4C_Display
0000F3E6                            ; ===========================================================================
0000F3E6                            
0000F3E6                            loc_EE3E:				; XREF: Obj4C_Index
0000F3E6 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000F3EA 6700                       		beq.s	Obj4C_Display	; if yes, branch
0000F3EC 5428 0024                  		addq.b	#2,$24(a0)
0000F3F0 4E75                       		rts	
0000F3F2                            ; ===========================================================================
0000F3F2                            
0000F3F2                            Obj4C_Display:				; XREF: Obj4C_Index
0000F3F2 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000F3F8 6100 B848                  		bsr.w	AnimateSprite
0000F3FC 6100 E7AA                  		bsr.w	DisplaySprite
0000F400 4E75                       		rts	
0000F402                            ; ===========================================================================
0000F402                            
0000F402                            Obj4C_Delete:				; XREF: Obj4C_Index
0000F402 117C 0000 001C             		move.b	#0,$1C(a0)
0000F408 117C 0002 0024             		move.b	#2,$24(a0)
0000F40E 4A28 0028                  		tst.b	$28(a0)
0000F412 6700 E7D0                  		beq.w	DeleteObject
0000F416 4E75                       		rts	
0000F418                            ; ===========================================================================
0000F418                            ; ---------------------------------------------------------------------------
0000F418                            ; Object 4D - lava geyser / lavafall (MZ)
0000F418                            ; ---------------------------------------------------------------------------
0000F418                            
0000F418                            Obj4D:					; XREF: Obj_Index
0000F418 7000                       		moveq	#0,d0
0000F41A 1028 0024                  		move.b	$24(a0),d0
0000F41E 323B 0000                  		move.w	Obj4D_Index(pc,d0.w),d1
0000F422 4EBB 1000                  		jsr	Obj4D_Index(pc,d1.w)
0000F426 6000 E780                  		bra.w	DisplaySprite
0000F42A                            ; ===========================================================================
0000F42A 0000                       Obj4D_Index:	dc.w Obj4D_Main-Obj4D_Index
0000F42C 0000                       		dc.w Obj4D_Action-Obj4D_Index
0000F42E 0000                       		dc.w loc_EFFC-Obj4D_Index
0000F430 0000                       		dc.w Obj4D_Delete-Obj4D_Index
0000F432                            
0000F432 FB00 0000                  Obj4D_Speeds:	dc.w $FB00, 0
0000F436                            ; ===========================================================================
0000F436                            
0000F436                            Obj4D_Main:				; XREF: Obj4D_Index
0000F436 5428 0024                  		addq.b	#2,$24(a0)
0000F43A 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F440 4A28 0028                  		tst.b	$28(a0)
0000F444 6700                       		beq.s	loc_EEA4
0000F446 0468 0250 000C             		subi.w	#$250,$C(a0)
0000F44C                            
0000F44C                            loc_EEA4:
0000F44C 7000                       		moveq	#0,d0
0000F44E 1028 0028                  		move.b	$28(a0),d0
0000F452 D040                       		add.w	d0,d0
0000F454 317B 00DC 0012             		move.w	Obj4D_Speeds(pc,d0.w),$12(a0)
0000F45A 2248                       		movea.l	a0,a1
0000F45C 7201                       		moveq	#1,d1
0000F45E 6100                       		bsr.s	Obj4D_MakeLava
0000F460 6000                       		bra.s	loc_EF10
0000F462                            ; ===========================================================================
0000F462                            
0000F462                            Obj4D_Loop:
0000F462 6100 EBE0                  		bsr.w	SingleObjLoad2
0000F466 6600                       		bne.s	loc_EF0A
0000F468                            
0000F468                            Obj4D_MakeLava:				; XREF: Obj4D_Main
0000F468 12BC 004D                  		move.b	#$4D,0(a1)
0000F46C 237C 0000 0000 0004        		move.l	#Map_obj4C,4(a1)
0000F474 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000F47A 137C 0004 0001             		move.b	#4,1(a1)
0000F480 137C 0020 0019             		move.b	#$20,$19(a1)
0000F486 3368 0008 0008             		move.w	8(a0),8(a1)
0000F48C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F492 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000F498 137C 0001 0018             		move.b	#1,$18(a1)
0000F49E 137C 0005 001C             		move.b	#5,$1C(a1)
0000F4A4 4A28 0028                  		tst.b	$28(a0)
0000F4A8 6700                       		beq.s	loc_EF0A
0000F4AA 137C 0002 001C             		move.b	#2,$1C(a1)
0000F4B0                            
0000F4B0                            loc_EF0A:
0000F4B0 51C9 FFB0                  		dbf	d1,Obj4D_Loop
0000F4B4 4E75                       		rts	
0000F4B6                            ; ===========================================================================
0000F4B6                            
0000F4B6                            loc_EF10:				; XREF: Obj4D_Main
0000F4B6 0669 0060 000C             		addi.w	#$60,$C(a1)
0000F4BC 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000F4C2 0669 0060 0030             		addi.w	#$60,$30(a1)
0000F4C8 137C 0093 0020             		move.b	#$93,$20(a1)
0000F4CE 137C 0080 0016             		move.b	#$80,$16(a1)
0000F4D4 08E9 0004 0001             		bset	#4,1(a1)
0000F4DA 5829 0024                  		addq.b	#4,$24(a1)
0000F4DE 2348 003C                  		move.l	a0,$3C(a1)
0000F4E2 4A28 0028                  		tst.b	$28(a0)
0000F4E6 6700                       		beq.s	Obj4D_PlaySnd
0000F4E8 7200                       		moveq	#0,d1
0000F4EA 6100 FF76                  		bsr.w	Obj4D_Loop
0000F4EE 5429 0024                  		addq.b	#2,$24(a1)
0000F4F2 08E9 0004 0002             		bset	#4,2(a1)
0000F4F8 0669 0100 000C             		addi.w	#$100,$C(a1)
0000F4FE 137C 0000 0018             		move.b	#0,$18(a1)
0000F504 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000F50A 2368 003C 003C             		move.l	$3C(a0),$3C(a1)
0000F510 117C 0000 0028             		move.b	#0,$28(a0)
0000F516                            
0000F516                            Obj4D_PlaySnd:
0000F516 303C 00C8                  		move.w	#$C8,d0
0000F51A 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play flame sound
0000F520                            
0000F520                            Obj4D_Action:				; XREF: Obj4D_Index
0000F520 7000                       		moveq	#0,d0
0000F522 1028 0028                  		move.b	$28(a0),d0
0000F526 D040                       		add.w	d0,d0
0000F528 323B 0000                  		move.w	Obj4D_TypeIndex(pc,d0.w),d1
0000F52C 4EBB 1000                  		jsr	Obj4D_TypeIndex(pc,d1.w)
0000F530 6100 E650                  		bsr.w	SpeedToPos
0000F534 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000F53A 6100 B706                  		bsr.w	AnimateSprite
0000F53E                            
0000F53E                            Obj4D_ChkDel:				; XREF: Obj4C
0000F53E 3028 0008                  		move.w	8(a0),d0
0000F542 0240 FF80                  		andi.w	#$FF80,d0
0000F546 3238 F700                  		move.w	($FFFFF700).w,d1
0000F54A 0441 0080                  		subi.w	#$80,d1
0000F54E 0241 FF80                  		andi.w	#$FF80,d1
0000F552 9041                       		sub.w	d1,d0
0000F554 0C40 0280                  		cmpi.w	#$280,d0
0000F558 6200 E68A                  		bhi.w	DeleteObject
0000F55C 4E75                       		rts	
0000F55E                            ; ===========================================================================
0000F55E 0000                       Obj4D_TypeIndex:dc.w Obj4D_Type00-Obj4D_TypeIndex
0000F560 0000                       		dc.w Obj4D_Type01-Obj4D_TypeIndex
0000F562                            ; ===========================================================================
0000F562                            
0000F562                            Obj4D_Type00:				; XREF: Obj4D_TypeIndex
0000F562 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000F568 3028 0030                  		move.w	$30(a0),d0
0000F56C B068 000C                  		cmp.w	$C(a0),d0
0000F570 6400                       		bcc.s	locret_EFDA
0000F572 5828 0024                  		addq.b	#4,$24(a0)
0000F576 2268 003C                  		movea.l	$3C(a0),a1
0000F57A 137C 0003 001C             		move.b	#3,$1C(a1)
0000F580                            
0000F580                            locret_EFDA:
0000F580 4E75                       		rts	
0000F582                            ; ===========================================================================
0000F582                            
0000F582                            Obj4D_Type01:				; XREF: Obj4D_TypeIndex
0000F582 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000F588 3028 0030                  		move.w	$30(a0),d0
0000F58C B068 000C                  		cmp.w	$C(a0),d0
0000F590 6400                       		bcc.s	locret_EFFA
0000F592 5828 0024                  		addq.b	#4,$24(a0)
0000F596 2268 003C                  		movea.l	$3C(a0),a1
0000F59A 137C 0001 001C             		move.b	#1,$1C(a1)
0000F5A0                            
0000F5A0                            locret_EFFA:
0000F5A0 4E75                       		rts	
0000F5A2                            ; ===========================================================================
0000F5A2                            
0000F5A2                            loc_EFFC:				; XREF: Obj4D_Index
0000F5A2 2268 003C                  		movea.l	$3C(a0),a1
0000F5A6 0C29 0006 0024             		cmpi.b	#6,$24(a1)
0000F5AC 6700 0000                  		beq.w	Obj4D_Delete
0000F5B0 3029 000C                  		move.w	$C(a1),d0
0000F5B4 0640 0060                  		addi.w	#$60,d0
0000F5B8 3140 000C                  		move.w	d0,$C(a0)
0000F5BC 9068 0030                  		sub.w	$30(a0),d0
0000F5C0 4440                       		neg.w	d0
0000F5C2 7208                       		moveq	#8,d1
0000F5C4 0C40 0040                  		cmpi.w	#$40,d0
0000F5C8 6C00                       		bge.s	loc_F026
0000F5CA 720B                       		moveq	#$B,d1
0000F5CC                            
0000F5CC                            loc_F026:
0000F5CC 0C40 0080                  		cmpi.w	#$80,d0
0000F5D0 6F00                       		ble.s	loc_F02E
0000F5D2 720E                       		moveq	#$E,d1
0000F5D4                            
0000F5D4                            loc_F02E:
0000F5D4 5328 001E                  		subq.b	#1,$1E(a0)
0000F5D8 6A00                       		bpl.s	loc_F04C
0000F5DA 117C 0007 001E             		move.b	#7,$1E(a0)
0000F5E0 5228 001B                  		addq.b	#1,$1B(a0)
0000F5E4 0C28 0002 001B             		cmpi.b	#2,$1B(a0)
0000F5EA 6500                       		bcs.s	loc_F04C
0000F5EC 117C 0000 001B             		move.b	#0,$1B(a0)
0000F5F2                            
0000F5F2                            loc_F04C:
0000F5F2 1028 001B                  		move.b	$1B(a0),d0
0000F5F6 D001                       		add.b	d1,d0
0000F5F8 1140 001A                  		move.b	d0,$1A(a0)
0000F5FC 6000 FF40                  		bra.w	Obj4D_ChkDel
0000F600                            ; ===========================================================================
0000F600                            
0000F600                            Obj4D_Delete:				; XREF: Obj4D_Index
0000F600 6000 E5E2                  		bra.w	DeleteObject
0000F604                            ; ===========================================================================
0000F604                            ; ---------------------------------------------------------------------------
0000F604                            ; Object 4E - advancing	wall of	lava (MZ)
0000F604                            ; ---------------------------------------------------------------------------
0000F604                            
0000F604                            Obj4E:					; XREF: Obj_Index
0000F604 7000                       		moveq	#0,d0
0000F606 1028 0024                  		move.b	$24(a0),d0
0000F60A 323B 0000                  		move.w	Obj4E_Index(pc,d0.w),d1
0000F60E 4EFB 1000                  		jmp	Obj4E_Index(pc,d1.w)
0000F612                            ; ===========================================================================
0000F612 0000                       Obj4E_Index:	dc.w Obj4E_Main-Obj4E_Index
0000F614 0000                       		dc.w Obj4E_Solid-Obj4E_Index
0000F616 0000                       		dc.w Obj4E_Action-Obj4E_Index
0000F618 0000                       		dc.w Obj4E_Move2-Obj4E_Index
0000F61A 0000                       		dc.w Obj4E_Delete-Obj4E_Index
0000F61C                            ; ===========================================================================
0000F61C                            
0000F61C                            Obj4E_Main:				; XREF: Obj4E_Index
0000F61C 5828 0024                  		addq.b	#4,$24(a0)
0000F620 2248                       		movea.l	a0,a1
0000F622 7201                       		moveq	#1,d1
0000F624 6000                       		bra.s	Obj4E_Main2
0000F626                            ; ===========================================================================
0000F626                            
0000F626                            Obj4E_Loop:
0000F626 6100 EA1C                  		bsr.w	SingleObjLoad2
0000F62A 6600                       		bne.s	loc_F0C8
0000F62C                            
0000F62C                            Obj4E_Main2:				; XREF: Obj4E_Main
0000F62C 12BC 004E                  		move.b	#$4E,0(a1)	; load object
0000F630 237C 0000 0000 0004        		move.l	#Map_obj4E,4(a1)
0000F638 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000F63E 137C 0004 0001             		move.b	#4,1(a1)
0000F644 137C 0050 0019             		move.b	#$50,$19(a1)
0000F64A 3368 0008 0008             		move.w	8(a0),8(a1)
0000F650 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F656 137C 0001 0018             		move.b	#1,$18(a1)
0000F65C 137C 0000 001C             		move.b	#0,$1C(a1)
0000F662 137C 0094 0020             		move.b	#$94,$20(a1)
0000F668 2348 003C                  		move.l	a0,$3C(a1)
0000F66C                            
0000F66C                            loc_F0C8:
0000F66C 51C9 FFB8                  		dbf	d1,Obj4E_Loop	; repeat sequence once
0000F670                            
0000F670 5C29 0024                  		addq.b	#6,$24(a1)
0000F674 137C 0004 001A             		move.b	#4,$1A(a1)
0000F67A                            
0000F67A                            Obj4E_Action:				; XREF: Obj4E_Index
0000F67A 3038 D008                  		move.w	($FFFFD008).w,d0
0000F67E 9068 0008                  		sub.w	8(a0),d0
0000F682 6400                       		bcc.s	Obj4E_ChkSonic
0000F684 4440                       		neg.w	d0
0000F686                            
0000F686                            Obj4E_ChkSonic:
0000F686 0C40 00C0                  		cmpi.w	#$C0,d0		; is Sonic within $C0 pixels (x-axis)?
0000F68A 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000F68C 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000F690 9068 000C                  		sub.w	$C(a0),d0
0000F694 6400                       		bcc.s	loc_F0F4
0000F696 4440                       		neg.w	d0
0000F698                            
0000F698                            loc_F0F4:
0000F698 0C40 0060                  		cmpi.w	#$60,d0		; is Sonic within $60 pixels (y-axis)?
0000F69C 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000F69E 117C 0001 0036             		move.b	#1,$36(a0)	; set object to	move
0000F6A4 6000                       		bra.s	Obj4E_Solid
0000F6A6                            ; ===========================================================================
0000F6A6                            
0000F6A6                            Obj4E_Move:				; XREF: Obj4E_ChkSonic
0000F6A6 4A28 0036                  		tst.b	$36(a0)		; is object set	to move?
0000F6AA 6700                       		beq.s	Obj4E_Solid	; if not, branch
0000F6AC 317C 0180 0010             		move.w	#$180,$10(a0)	; set object speed
0000F6B2 5528 0024                  		subq.b	#2,$24(a0)
0000F6B6                            
0000F6B6                            Obj4E_Solid:				; XREF: Obj4E_Index
0000F6B6 323C 002B                  		move.w	#$2B,d1
0000F6BA 343C 0018                  		move.w	#$18,d2
0000F6BE 3602                       		move.w	d2,d3
0000F6C0 5243                       		addq.w	#1,d3
0000F6C2 3828 0008                  		move.w	8(a0),d4
0000F6C6 1028 0024                  		move.b	$24(a0),d0
0000F6CA 3F00                       		move.w	d0,-(sp)
0000F6CC 6100 0000                  		bsr.w	SolidObject
0000F6D0 301F                       		move.w	(sp)+,d0
0000F6D2 1140 0024                  		move.b	d0,$24(a0)
0000F6D6 0C68 06A0 0008             		cmpi.w	#$6A0,8(a0)	; has object reached $6A0 on the x-axis?
0000F6DC 6600                       		bne.s	Obj4E_Animate	; if not, branch
0000F6DE 4268 0010                  		clr.w	$10(a0)		; stop object moving
0000F6E2 4228 0036                  		clr.b	$36(a0)
0000F6E6                            
0000F6E6                            Obj4E_Animate:
0000F6E6 43F9 0000 0000             		lea	(Ani_obj4E).l,a1
0000F6EC 6100 B554                  		bsr.w	AnimateSprite
0000F6F0 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0000F6F6 6400                       		bcc.s	Obj4E_ChkDel
0000F6F8 6100 E488                  		bsr.w	SpeedToPos
0000F6FC                            
0000F6FC                            Obj4E_ChkDel:
0000F6FC 6100 E4AA                  		bsr.w	DisplaySprite
0000F700 4A28 0036                  		tst.b	$36(a0)
0000F704 6600                       		bne.s	locret_F17E
0000F706 3028 0008                  		move.w	8(a0),d0
0000F70A 0240 FF80                  		andi.w	#$FF80,d0
0000F70E 3238 F700                  		move.w	($FFFFF700).w,d1
0000F712 0441 0080                  		subi.w	#$80,d1
0000F716 0241 FF80                  		andi.w	#$FF80,d1
0000F71A 9041                       		sub.w	d1,d0
0000F71C 0C40 0280                  		cmpi.w	#$280,d0
0000F720 6200                       		bhi.s	Obj4E_ChkGone
0000F722                            
0000F722                            locret_F17E:
0000F722 4E75                       		rts	
0000F724                            ; ===========================================================================
0000F724                            
0000F724                            Obj4E_ChkGone:				; XREF: Obj4E_ChkDel
0000F724 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F728 7000                       		moveq	#0,d0
0000F72A 1028 0023                  		move.b	$23(a0),d0
0000F72E 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000F734 117C 0008 0024             		move.b	#8,$24(a0)
0000F73A 4E75                       		rts	
0000F73C                            ; ===========================================================================
0000F73C                            
0000F73C                            Obj4E_Move2:				; XREF: Obj4E_Index
0000F73C 2268 003C                  		movea.l	$3C(a0),a1
0000F740 0C29 0008 0024             		cmpi.b	#8,$24(a1)
0000F746 6700                       		beq.s	Obj4E_Delete
0000F748 3169 0008 0008             		move.w	8(a1),8(a0)	; move rest of lava wall
0000F74E 0468 0080 0008             		subi.w	#$80,8(a0)
0000F754 6000 E452                  		bra.w	DisplaySprite
0000F758                            ; ===========================================================================
0000F758                            
0000F758                            Obj4E_Delete:				; XREF: Obj4E_Index
0000F758 6000 E48A                  		bra.w	DeleteObject
0000F75C                            ; ===========================================================================
0000F75C                            ; ---------------------------------------------------------------------------
0000F75C                            ; Object 54 - invisible	lava tag (MZ)
0000F75C                            ; ---------------------------------------------------------------------------
0000F75C                            
0000F75C                            Obj54:					; XREF: Obj_Index
0000F75C 7000                       		moveq	#0,d0
0000F75E 1028 0024                  		move.b	$24(a0),d0
0000F762 323B 0000                  		move.w	Obj54_Index(pc,d0.w),d1
0000F766 4EFB 1000                  		jmp	Obj54_Index(pc,d1.w)
0000F76A                            ; ===========================================================================
0000F76A 0000                       Obj54_Index:	dc.w Obj54_Main-Obj54_Index
0000F76C 0000                       		dc.w Obj54_ChkDel-Obj54_Index
0000F76E                            
0000F76E 9694 9500                  Obj54_Sizes:	dc.b $96, $94, $95, 0
0000F772                            ; ===========================================================================
0000F772                            
0000F772                            Obj54_Main:				; XREF: Obj54_Index
0000F772 5428 0024                  		addq.b	#2,$24(a0)
0000F776 7000                       		moveq	#0,d0
0000F778 1028 0028                  		move.b	$28(a0),d0
0000F77C 117B 00F0 0020             		move.b	Obj54_Sizes(pc,d0.w),$20(a0)
0000F782 217C 0000 0000 0004        		move.l	#Map_obj54,4(a0)
0000F78A 117C 0084 0001             		move.b	#$84,1(a0)
0000F790                            
0000F790                            Obj54_ChkDel:				; XREF: Obj54_Index
0000F790 3028 0008                  		move.w	8(a0),d0
0000F794 0240 FF80                  		andi.w	#$FF80,d0
0000F798 3238 F700                  		move.w	($FFFFF700).w,d1
0000F79C 0441 0080                  		subi.w	#$80,d1
0000F7A0 0241 FF80                  		andi.w	#$FF80,d1
0000F7A4 9041                       		sub.w	d1,d0
0000F7A6 6B00 E43C                  		bmi.w	DeleteObject
0000F7AA 0C40 0280                  		cmpi.w	#$280,d0
0000F7AE 6200 E434                  		bhi.w	DeleteObject
0000F7B2 4E75                       		rts	
0000F7B4                            ; ===========================================================================
0000F7B4                            ; ---------------------------------------------------------------------------
0000F7B4                            ; Sprite mappings - invisible lava tag (MZ)
0000F7B4                            ; ---------------------------------------------------------------------------
0000F7B4                            Map_obj54:
0000F7B4                            	include "_maps\obj54.asm"
0000F7B4                            ; ---------------------------------------------------------------------------
0000F7B4                            ; Sprite mappings - invisible lava tag (MZ)
0000F7B4                            ; ---------------------------------------------------------------------------
0000F7B4 0000                       		dc.w byte_F212-Map_obj54
0000F7B6 00                         byte_F212:	dc.b 0			; no sprite, because the tag is invisible!
0000F7B8 00                         		even
0000F7B8 00                         		even
0000F7B8                            
0000F7B8                            Ani_obj4C:
0000F7B8                            	include "_anim\obj4C.asm"
0000F7B8                            ; ---------------------------------------------------------------------------
0000F7B8                            ; Animation script - geyser of lava (MZ)
0000F7B8                            ; ---------------------------------------------------------------------------
0000F7B8 0000                       		dc.w byte_F220-Ani_obj4C
0000F7BA 0000                       		dc.w byte_F22A-Ani_obj4C
0000F7BC 0000                       		dc.w byte_F22E-Ani_obj4C
0000F7BE 0000                       		dc.w byte_F232-Ani_obj4C
0000F7C0 0000                       		dc.w byte_F23A-Ani_obj4C
0000F7C2 0000                       		dc.w byte_F23E-Ani_obj4C
0000F7C4 0200 0100 0104 0504 05FC   byte_F220:	dc.b 2,	0, 1, 0, 1, 4, 5, 4, 5,	$FC
0000F7CE 0202 03FF                  byte_F22A:	dc.b 2,	2, 3, $FF
0000F7D2 0206 07FF                  byte_F22E:	dc.b 2,	6, 7, $FF
0000F7D6 0202 0300 0100 01FC        byte_F232:	dc.b 2,	2, 3, 0, 1, 0, 1, $FC
0000F7DE 0F13 FF00                  byte_F23A:	dc.b $F, $13, $FF, 0
0000F7E2 0211 12FF                  byte_F23E:	dc.b 2,	$11, $12, $FF
0000F7E6                            		even
0000F7E6                            		even
0000F7E6                            
0000F7E6                            Ani_obj4E:
0000F7E6                            	include "_anim\obj4E.asm"
0000F7E6                            ; ---------------------------------------------------------------------------
0000F7E6                            ; Animation script - advancing wall of lava (MZ)
0000F7E6                            ; ---------------------------------------------------------------------------
0000F7E6 0000                       		dc.w byte_F244-Ani_obj4E
0000F7E8 0900 0102 03FF             byte_F244:	dc.b 9,	0, 1, 2, 3, $FF
0000F7EE                            		even
0000F7EE                            		even
0000F7EE                            
0000F7EE                            ; ---------------------------------------------------------------------------
0000F7EE                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000F7EE                            ; ---------------------------------------------------------------------------
0000F7EE                            Map_obj4C:
0000F7EE                            	include "_maps\obj4C.asm"
0000F7EE                            ; ---------------------------------------------------------------------------
0000F7EE                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000F7EE                            ; ---------------------------------------------------------------------------
0000F7EE 0000 0000                  		dc.w byte_F272-Map_obj4C, byte_F27D-Map_obj4C
0000F7F2 0000 0000                  		dc.w byte_F288-Map_obj4C, byte_F29D-Map_obj4C
0000F7F6 0000 0000                  		dc.w byte_F2B2-Map_obj4C, byte_F2D1-Map_obj4C
0000F7FA 0000 0000                  		dc.w byte_F2F0-Map_obj4C, byte_F2FB-Map_obj4C
0000F7FE 0000 0000                  		dc.w byte_F306-Map_obj4C, byte_F339-Map_obj4C
0000F802 0000 0000                  		dc.w byte_F36C-Map_obj4C, byte_F39F-Map_obj4C
0000F806 0000 0000                  		dc.w byte_F3BE-Map_obj4C, byte_F3DD-Map_obj4C
0000F80A 0000 0000                  		dc.w byte_F3FC-Map_obj4C, byte_F44D-Map_obj4C
0000F80E 0000 0000                  		dc.w byte_F49E-Map_obj4C, byte_F4EF-Map_obj4C
0000F812 0000 0000                  		dc.w byte_F50E-Map_obj4C, byte_F52D-Map_obj4C
0000F816 02                         byte_F272:	dc.b 2
0000F817 EC0B 0000 E8               		dc.b $EC, $B, 0, 0, $E8
0000F81C EC0B 0800 00               		dc.b $EC, $B, 8, 0, 0
0000F821 02                         byte_F27D:	dc.b 2
0000F822 EC0B 0018 E8               		dc.b $EC, $B, 0, $18, $E8
0000F827 EC0B 0818 00               		dc.b $EC, $B, 8, $18, 0
0000F82C 04                         byte_F288:	dc.b 4
0000F82D EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000F832 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000F837 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000F83C EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000F841 04                         byte_F29D:	dc.b 4
0000F842 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000F847 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000F84C F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000F851 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000F856 06                         byte_F2B2:	dc.b 6
0000F857 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000F85C F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000F861 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000F866 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000F86B E80E 0090 E0               		dc.b $E8, $E, 0, $90, $E0
0000F870 E80E 0890 00               		dc.b $E8, $E, 8, $90, 0
0000F875 06                         byte_F2D1:	dc.b 6
0000F876 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000F87B F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000F880 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000F885 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000F88A E80E 0890 E0               		dc.b $E8, $E, 8, $90, $E0
0000F88F E80E 0090 00               		dc.b $E8, $E, 0, $90, 0
0000F894 02                         byte_F2F0:	dc.b 2
0000F895 E00F 0030 E0               		dc.b $E0, $F, 0, $30, $E0
0000F89A E00F 0830 00               		dc.b $E0, $F, 8, $30, 0
0000F89F 02                         byte_F2FB:	dc.b 2
0000F8A0 E00F 0830 E0               		dc.b $E0, $F, 8, $30, $E0
0000F8A5 E00F 0030 00               		dc.b $E0, $F, 0, $30, 0
0000F8AA 0A                         byte_F306:	dc.b $A
0000F8AB 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000F8B0 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000F8B5 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000F8BA B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000F8BF D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000F8C4 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000F8C9 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0000F8CE F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0000F8D3 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0000F8D8 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0000F8DD 0A                         byte_F339:	dc.b $A
0000F8DE 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000F8E3 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000F8E8 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000F8ED B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000F8F2 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000F8F7 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000F8FC F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0000F901 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0000F906 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0000F90B 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0000F910 0A                         byte_F36C:	dc.b $A
0000F911 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000F916 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000F91B B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000F920 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000F925 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000F92A D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000F92F F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0000F934 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0000F939 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0000F93E 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0000F943 06                         byte_F39F:	dc.b 6
0000F944 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000F949 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000F94E B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000F953 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000F958 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000F95D D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000F962 06                         byte_F3BE:	dc.b 6
0000F963 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000F968 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000F96D B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000F972 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000F977 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000F97C D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000F981 06                         byte_F3DD:	dc.b 6
0000F982 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000F987 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000F98C B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000F991 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000F996 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000F99B D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000F9A0 10                         byte_F3FC:	dc.b $10
0000F9A1 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000F9A6 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000F9AB B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000F9B0 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000F9B5 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000F9BA D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000F9BF F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0000F9C4 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0000F9C9 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0000F9CE 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0000F9D3 300F 0040 E0               		dc.b $30, $F, 0, $40, $E0
0000F9D8 300F 0840 00               		dc.b $30, $F, 8, $40, 0
0000F9DD 500F 0040 E0               		dc.b $50, $F, 0, $40, $E0
0000F9E2 500F 0840 00               		dc.b $50, $F, 8, $40, 0
0000F9E7 700F 0040 E0               		dc.b $70, $F, 0, $40, $E0
0000F9EC 700F 0840 00               		dc.b $70, $F, 8, $40, 0
0000F9F1 10                         byte_F44D:	dc.b $10
0000F9F2 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000F9F7 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000F9FC B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000FA01 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000FA06 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000FA0B D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000FA10 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0000FA15 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0000FA1A 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0000FA1F 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0000FA24 300F 0050 E0               		dc.b $30, $F, 0, $50, $E0
0000FA29 300F 0850 00               		dc.b $30, $F, 8, $50, 0
0000FA2E 500F 0050 E0               		dc.b $50, $F, 0, $50, $E0
0000FA33 500F 0850 00               		dc.b $50, $F, 8, $50, 0
0000FA38 700F 0050 E0               		dc.b $70, $F, 0, $50, $E0
0000FA3D 700F 0850 00               		dc.b $70, $F, 8, $50, 0
0000FA42 10                         byte_F49E:	dc.b $10
0000FA43 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000FA48 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000FA4D B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000FA52 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000FA57 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000FA5C D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000FA61 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0000FA66 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0000FA6B 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0000FA70 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0000FA75 300F 0060 E0               		dc.b $30, $F, 0, $60, $E0
0000FA7A 300F 0860 00               		dc.b $30, $F, 8, $60, 0
0000FA7F 500F 0060 E0               		dc.b $50, $F, 0, $60, $E0
0000FA84 500F 0860 00               		dc.b $50, $F, 8, $60, 0
0000FA89 700F 0060 E0               		dc.b $70, $F, 0, $60, $E0
0000FA8E 700F 0860 00               		dc.b $70, $F, 8, $60, 0
0000FA93 06                         byte_F4EF:	dc.b 6
0000FA94 E00B 0000 C8               		dc.b $E0, $B, 0, 0, $C8
0000FA99 E80E 000C E0               		dc.b $E8, $E, 0, $C, $E0
0000FA9E E80E 080C 00               		dc.b $E8, $E, 8, $C, 0
0000FAA3 E00B 0800 20               		dc.b $E0, $B, 8, 0, $20
0000FAA8 D80E 0090 E0               		dc.b $D8, $E, 0, $90, $E0
0000FAAD D80E 0890 00               		dc.b $D8, $E, 8, $90, 0
0000FAB2 06                         byte_F50E:	dc.b 6
0000FAB3 E00B 0018 C8               		dc.b $E0, $B, 0, $18, $C8
0000FAB8 E80E 0024 E0               		dc.b $E8, $E, 0, $24, $E0
0000FABD E80E 0824 00               		dc.b $E8, $E, 8, $24, 0
0000FAC2 E00B 0818 20               		dc.b $E0, $B, 8, $18, $20
0000FAC7 D80E 0890 E0               		dc.b $D8, $E, 8, $90, $E0
0000FACC D80E 0090 00               		dc.b $D8, $E, 0, $90, 0
0000FAD1 00                         byte_F52D:	dc.b 0
0000FAD2                            		even
0000FAD2                            		even
0000FAD2                            
0000FAD2                            ; ---------------------------------------------------------------------------
0000FAD2                            ; Sprite mappings - advancing wall of lava (MZ)
0000FAD2                            ; ---------------------------------------------------------------------------
0000FAD2                            Map_obj4E:
0000FAD2                            	include "_maps\obj4E.asm"
0000FAD2                            ; ---------------------------------------------------------------------------
0000FAD2                            ; Sprite mappings - advancing wall of lava (MZ)
0000FAD2                            ; ---------------------------------------------------------------------------
0000FAD2 0000                       		dc.w byte_F538-Map_obj4E
0000FAD4 0000                       		dc.w byte_F566-Map_obj4E
0000FAD6 0000                       		dc.w byte_F594-Map_obj4E
0000FAD8 0000                       		dc.w byte_F5C2-Map_obj4E
0000FADA 0000                       		dc.w byte_F5F0-Map_obj4E
0000FADC 09                         byte_F538:	dc.b 9
0000FADD E00F 0060 20               		dc.b $E0, $F, 0, $60, $20
0000FAE2 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
0000FAE7 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FAEC E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FAF1 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FAF6 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FAFB 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FB00 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FB05 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FB0A 09                         byte_F566:	dc.b 9
0000FB0B E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
0000FB10 000F 0080 3C               		dc.b 0,	$F, 0, $80, $3C
0000FB15 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FB1A E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FB1F 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FB24 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FB29 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FB2E E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FB33 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FB38 09                         byte_F594:	dc.b 9
0000FB39 E00F 0080 20               		dc.b $E0, $F, 0, $80, $20
0000FB3E 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
0000FB43 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FB48 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FB4D 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FB52 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FB57 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FB5C E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FB61 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FB66 09                         byte_F5C2:	dc.b 9
0000FB67 E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
0000FB6C 000F 0060 3C               		dc.b 0,	$F, 0, $60, $3C
0000FB71 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FB76 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FB7B 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FB80 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FB85 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FB8A E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FB8F 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FB94 08                         byte_F5F0:	dc.b 8
0000FB95 E00F FF2A 20               		dc.b $E0, $F, $FF, $2A,	$20
0000FB9A 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FB9F E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FBA4 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FBA9 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FBAE 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FBB3 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FBB8 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FBBE 00                         		even
0000FBBE 00                         		even
0000FBBE                            
0000FBBE                            ; ===========================================================================
0000FBBE                            ; ---------------------------------------------------------------------------
0000FBBE                            ; Object 40 - Moto Bug enemy (GHZ)
0000FBBE                            ; ---------------------------------------------------------------------------
0000FBBE                            
0000FBBE                            Obj40:					; XREF: Obj_Index
0000FBBE 7000                       		moveq	#0,d0
0000FBC0 1028 0024                  		move.b	$24(a0),d0
0000FBC4 323B 0000                  		move.w	Obj40_Index(pc,d0.w),d1
0000FBC8 4EFB 1000                  		jmp	Obj40_Index(pc,d1.w)
0000FBCC                            ; ===========================================================================
0000FBCC 0000                       Obj40_Index:	dc.w Obj40_Main-Obj40_Index
0000FBCE 0000                       		dc.w Obj40_Action-Obj40_Index
0000FBD0 0000                       		dc.w Obj40_Animate-Obj40_Index
0000FBD2 0000                       		dc.w Obj40_Delete-Obj40_Index
0000FBD4                            ; ===========================================================================
0000FBD4                            
0000FBD4                            Obj40_Main:				; XREF: Obj40_Index
0000FBD4 217C 0000 0000 0004        		move.l	#Map_obj40,4(a0)
0000FBDC 317C 04F0 0002             		move.w	#$4F0,2(a0)
0000FBE2 117C 0004 0001             		move.b	#4,1(a0)
0000FBE8 117C 0004 0018             		move.b	#4,$18(a0)
0000FBEE 117C 0014 0019             		move.b	#$14,$19(a0)
0000FBF4 4A28 001C                  		tst.b	$1C(a0)		; is object a smoke trail?
0000FBF8 6600                       		bne.s	Obj40_SetSmoke	; if yes, branch
0000FBFA 117C 000E 0016             		move.b	#$E,$16(a0)
0000FC00 117C 0008 0017             		move.b	#8,$17(a0)
0000FC06 117C 000C 0020             		move.b	#$C,$20(a0)
0000FC0C 6100 DF48                  		bsr.w	ObjectFall
0000FC10 4EB9 0000 0000             		jsr	ObjHitFloor
0000FC16 4A41                       		tst.w	d1
0000FC18 6A00                       		bpl.s	locret_F68A
0000FC1A D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0000FC1E 317C 0000 0012             		move.w	#0,$12(a0)
0000FC24 5428 0024                  		addq.b	#2,$24(a0)
0000FC28 0868 0000 0022             		bchg	#0,$22(a0)
0000FC2E                            
0000FC2E                            locret_F68A:
0000FC2E 4E75                       		rts	
0000FC30                            ; ===========================================================================
0000FC30                            
0000FC30                            Obj40_SetSmoke:				; XREF: Obj40_Main
0000FC30 5828 0024                  		addq.b	#4,$24(a0)
0000FC34 6000 0000                  		bra.w	Obj40_Animate
0000FC38                            ; ===========================================================================
0000FC38                            
0000FC38                            Obj40_Action:				; XREF: Obj40_Index
0000FC38 7000                       		moveq	#0,d0
0000FC3A 1028 0025                  		move.b	$25(a0),d0
0000FC3E 323B 0000                  		move.w	Obj40_Index2(pc,d0.w),d1
0000FC42 4EBB 1000                  		jsr	Obj40_Index2(pc,d1.w)
0000FC46 43F9 0000 0000             		lea	(Ani_obj40).l,a1
0000FC4C 6100 AFF4                  		bsr.w	AnimateSprite
0000FC50                            
0000FC50                            ; ---------------------------------------------------------------------------
0000FC50                            ; Routine to mark an enemy/monitor/ring	as destroyed
0000FC50                            ; ---------------------------------------------------------------------------
0000FC50                            
0000FC50                            MarkObjGone:
0000FC50 3028 0008                  		move.w	8(a0),d0
0000FC54 0240 FF80                  		andi.w	#$FF80,d0
0000FC58 3238 F700                  		move.w	($FFFFF700).w,d1
0000FC5C 0441 0080                  		subi.w	#$80,d1
0000FC60 0241 FF80                  		andi.w	#$FF80,d1
0000FC64 9041                       		sub.w	d1,d0
0000FC66 0C40 0280                  		cmpi.w	#$280,d0
0000FC6A 6200 0000                  		bhi.w	Mark_ChkGone
0000FC6E 6000 DF38                  		bra.w	DisplaySprite
0000FC72                            ; ===========================================================================
0000FC72                            
0000FC72                            Mark_ChkGone:
0000FC72 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000FC76 7000                       		moveq	#0,d0
0000FC78 1028 0023                  		move.b	$23(a0),d0
0000FC7C 6700                       		beq.s	Mark_Delete
0000FC7E 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000FC84                            
0000FC84                            Mark_Delete:
0000FC84 6000 DF5E                  		bra.w	DeleteObject
0000FC88                            
0000FC88                            ; ===========================================================================
0000FC88 0000                       Obj40_Index2:	dc.w Obj40_Move-Obj40_Index2
0000FC8A 0000                       		dc.w Obj40_FixToFloor-Obj40_Index2
0000FC8C                            ; ===========================================================================
0000FC8C                            
0000FC8C                            Obj40_Move:				; XREF: Obj40_Index2
0000FC8C 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
0000FC90 6A00                       		bpl.s	locret_F70A	; if time remains, branch
0000FC92 5428 0025                  		addq.b	#2,$25(a0)
0000FC96 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object to the left
0000FC9C 117C 0001 001C             		move.b	#1,$1C(a0)
0000FCA2 0868 0000 0022             		bchg	#0,$22(a0)
0000FCA8 6600                       		bne.s	locret_F70A
0000FCAA 4468 0010                  		neg.w	$10(a0)		; change direction
0000FCAE                            
0000FCAE                            locret_F70A:
0000FCAE 4E75                       		rts	
0000FCB0                            ; ===========================================================================
0000FCB0                            
0000FCB0                            Obj40_FixToFloor:			; XREF: Obj40_Index2
0000FCB0 6100 DED0                  		bsr.w	SpeedToPos
0000FCB4 4EB9 0000 0000             		jsr	ObjHitFloor
0000FCBA 0C41 FFF8                  		cmpi.w	#-8,d1
0000FCBE 6D00                       		blt.s	Obj40_Pause
0000FCC0 0C41 000C                  		cmpi.w	#$C,d1
0000FCC4 6C00                       		bge.s	Obj40_Pause
0000FCC6 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0000FCCA 5328 0033                  		subq.b	#1,$33(a0)
0000FCCE 6A00                       		bpl.s	locret_F756
0000FCD0 117C 000F 0033             		move.b	#$F,$33(a0)
0000FCD6 6100 E356                  		bsr.w	SingleObjLoad
0000FCDA 6600                       		bne.s	locret_F756
0000FCDC 12BC 0040                  		move.b	#$40,0(a1)	; load exhaust smoke object
0000FCE0 3368 0008 0008             		move.w	8(a0),8(a1)
0000FCE6 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000FCEC 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000FCF2 137C 0002 001C             		move.b	#2,$1C(a1)
0000FCF8                            
0000FCF8                            locret_F756:
0000FCF8 4E75                       		rts	
0000FCFA                            ; ===========================================================================
0000FCFA                            
0000FCFA                            Obj40_Pause:				; XREF: Obj40_FixToFloor
0000FCFA 5528 0025                  		subq.b	#2,$25(a0)
0000FCFE 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
0000FD04 317C 0000 0010             		move.w	#0,$10(a0)	; stop the object moving
0000FD0A 117C 0000 001C             		move.b	#0,$1C(a0)
0000FD10 4E75                       		rts	
0000FD12                            ; ===========================================================================
0000FD12                            
0000FD12                            Obj40_Animate:				; XREF: Obj40_Index
0000FD12 43F9 0000 0000             		lea	(Ani_obj40).l,a1
0000FD18 6100 AF28                  		bsr.w	AnimateSprite
0000FD1C 6000 DE8A                  		bra.w	DisplaySprite
0000FD20                            ; ===========================================================================
0000FD20                            
0000FD20                            Obj40_Delete:				; XREF: Obj40_Index
0000FD20 6000 DEC2                  		bra.w	DeleteObject
0000FD24                            ; ===========================================================================
0000FD24                            Ani_obj40:
0000FD24                            	include "_anim\obj40.asm"
0000FD24                            ; ---------------------------------------------------------------------------
0000FD24                            ; Animation script - Motobug enemy
0000FD24                            ; ---------------------------------------------------------------------------
0000FD24 0000                       		dc.w byte_F788-Ani_obj40
0000FD26 0000                       		dc.w byte_F78C-Ani_obj40
0000FD28 0000                       		dc.w byte_F792-Ani_obj40
0000FD2A 0F02 FF00                  byte_F788:	dc.b $F, 2, $FF, 0
0000FD2E 0700 0100 02FF             byte_F78C:	dc.b 7,	0, 1, 0, 2, $FF
0000FD34 0103 0603 0604 0604 0604+  byte_F792:	dc.b 1,	3, 6, 3, 6, 4, 6, 4, 6,	4, 6, 5, $FC, 0
0000FD42                            		even
0000FD42                            		even
0000FD42                            
0000FD42                            ; ---------------------------------------------------------------------------
0000FD42                            ; Sprite mappings - Moto Bug enemy (GHZ)
0000FD42                            ; ---------------------------------------------------------------------------
0000FD42                            Map_obj40:
0000FD42                            	include "_maps\obj40.asm"
0000FD42                            Map_cedc:
0000FD42 0000                       Map_cedc_0: 	dc.w Map_cedc_E-Map_cedc
0000FD44 0000                       Map_cedc_2: 	dc.w Map_cedc_23-Map_cedc
0000FD46 0000                       Map_cedc_4: 	dc.w Map_cedc_38-Map_cedc
0000FD48 0000                       Map_cedc_6: 	dc.w Map_cedc_52-Map_cedc
0000FD4A 0000                       Map_cedc_8: 	dc.w Map_cedc_58-Map_cedc
0000FD4C 0000                       Map_cedc_A: 	dc.w Map_cedc_5E-Map_cedc
0000FD4E 0000                       Map_cedc_C: 	dc.w Map_cedc_64-Map_cedc
0000FD50 04                         Map_cedc_E: 	dc.b $4
0000FD51 F00D 0000 EC               	dc.b $F0, $D, $0, $0, $EC
0000FD56 000C 0008 EC               	dc.b $0, $C, $0, $8, $EC
0000FD5B F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
0000FD60 0808 000E F4               	dc.b $8, $8, $0, $E, $F4
0000FD65 04                         Map_cedc_23: 	dc.b $4
0000FD66 F10D 0000 EC               	dc.b $F1, $D, $0, $0, $EC
0000FD6B 010C 0008 EC               	dc.b $1, $C, $0, $8, $EC
0000FD70 F901 000C 0C               	dc.b $F9, $1, $0, $C, $C
0000FD75 0908 0011 F4               	dc.b $9, $8, $0, $11, $F4
0000FD7A 05                         Map_cedc_38: 	dc.b $5
0000FD7B F00D 0000 EC               	dc.b $F0, $D, $0, $0, $EC
0000FD80 000C 0014 EC               	dc.b $0, $C, $0, $14, $EC
0000FD85 F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
0000FD8A 0804 0018 EC               	dc.b $8, $4, $0, $18, $EC
0000FD8F 0804 0012 FC               	dc.b $8, $4, $0, $12, $FC
0000FD94 01                         Map_cedc_52: 	dc.b $1
0000FD95 FA00 001A 10               	dc.b $FA, $0, $0, $1A, $10
0000FD9A 01                         Map_cedc_58: 	dc.b $1
0000FD9B FA00 001B 10               	dc.b $FA, $0, $0, $1B, $10
0000FDA0 01                         Map_cedc_5E: 	dc.b $1
0000FDA1 FA00 001C 10               	dc.b $FA, $0, $0, $1C, $10
0000FDA6 00                         Map_cedc_64: 	dc.b $0
0000FDA8 00                         	even
0000FDA8 00                         	even
0000FDA8                            
0000FDA8                            ; ===========================================================================
0000FDA8                            ; ---------------------------------------------------------------------------
0000FDA8                            ; Object 4F - blank
0000FDA8                            ; ---------------------------------------------------------------------------
0000FDA8                            
0000FDA8                            Obj4F:					; XREF: Obj_Index
0000FDA8 4E75                       		rts	
0000FDAA                            
0000FDAA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FDAA                            
0000FDAA                            
0000FDAA                            Obj50_ChkWall:				; XREF: Obj50_FixToFloor
0000FDAA 3038 FE04                  		move.w	($FFFFFE04).w,d0
0000FDAE D047                       		add.w	d7,d0
0000FDB0 0240 0003                  		andi.w	#3,d0
0000FDB4 6600                       		bne.s	loc_F836
0000FDB6 7600                       		moveq	#0,d3
0000FDB8 1628 0019                  		move.b	$19(a0),d3
0000FDBC 4A68 0010                  		tst.w	$10(a0)
0000FDC0 6B00                       		bmi.s	loc_F82C
0000FDC2 6100 0000                  		bsr.w	ObjHitWallRight
0000FDC6 4A41                       		tst.w	d1
0000FDC8 6A00                       		bpl.s	loc_F836
0000FDCA                            
0000FDCA                            loc_F828:
0000FDCA 7001                       		moveq	#1,d0
0000FDCC 4E75                       		rts	
0000FDCE                            ; ===========================================================================
0000FDCE                            
0000FDCE                            loc_F82C:
0000FDCE 4643                       		not.w	d3
0000FDD0 6100 0000                  		bsr.w	ObjHitWallLeft
0000FDD4 4A41                       		tst.w	d1
0000FDD6 6BF2                       		bmi.s	loc_F828
0000FDD8                            
0000FDD8                            loc_F836:
0000FDD8 7000                       		moveq	#0,d0
0000FDDA 4E75                       		rts	
0000FDDC                            ; End of function Obj50_ChkWall
0000FDDC                            
0000FDDC                            ; ===========================================================================
0000FDDC                            ; ---------------------------------------------------------------------------
0000FDDC                            ; Object 50 - Yadrin enemy (SYZ)
0000FDDC                            ; ---------------------------------------------------------------------------
0000FDDC                            
0000FDDC                            Obj50:					; XREF: Obj_Index
0000FDDC 7000                       		moveq	#0,d0
0000FDDE 1028 0024                  		move.b	$24(a0),d0
0000FDE2 323B 0000                  		move.w	Obj50_Index(pc,d0.w),d1
0000FDE6 4EFB 1000                  		jmp	Obj50_Index(pc,d1.w)
0000FDEA                            ; ===========================================================================
0000FDEA 0000                       Obj50_Index:	dc.w Obj50_Main-Obj50_Index
0000FDEC 0000                       		dc.w Obj50_Action-Obj50_Index
0000FDEE                            ; ===========================================================================
0000FDEE                            
0000FDEE                            Obj50_Main:				; XREF: Obj50_Index
0000FDEE 217C 0000 0000 0004        		move.l	#Map_obj50,4(a0)
0000FDF6 317C 247B 0002             		move.w	#$247B,2(a0)
0000FDFC 117C 0004 0001             		move.b	#4,1(a0)
0000FE02 117C 0004 0018             		move.b	#4,$18(a0)
0000FE08 117C 0014 0019             		move.b	#$14,$19(a0)
0000FE0E 117C 0011 0016             		move.b	#$11,$16(a0)
0000FE14 117C 0008 0017             		move.b	#8,$17(a0)
0000FE1A 117C 00CC 0020             		move.b	#$CC,$20(a0)
0000FE20 6100 DD34                  		bsr.w	ObjectFall
0000FE24 6100 0000                  		bsr.w	ObjHitFloor
0000FE28 4A41                       		tst.w	d1
0000FE2A 6A00                       		bpl.s	locret_F89E
0000FE2C D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0000FE30 317C 0000 0012             		move.w	#0,$12(a0)
0000FE36 5428 0024                  		addq.b	#2,$24(a0)
0000FE3A 0868 0000 0022             		bchg	#0,$22(a0)
0000FE40                            
0000FE40                            locret_F89E:
0000FE40 4E75                       		rts	
0000FE42                            ; ===========================================================================
0000FE42                            
0000FE42                            Obj50_Action:				; XREF: Obj50_Index
0000FE42 7000                       		moveq	#0,d0
0000FE44 1028 0025                  		move.b	$25(a0),d0
0000FE48 323B 0000                  		move.w	Obj50_Index2(pc,d0.w),d1
0000FE4C 4EBB 1000                  		jsr	Obj50_Index2(pc,d1.w)
0000FE50 43F9 0000 0000             		lea	(Ani_obj50).l,a1
0000FE56 6100 ADEA                  		bsr.w	AnimateSprite
0000FE5A 6000 FDF4                  		bra.w	MarkObjGone
0000FE5E                            ; ===========================================================================
0000FE5E 0000                       Obj50_Index2:	dc.w Obj50_Move-Obj50_Index2
0000FE60 0000                       		dc.w Obj50_FixToFloor-Obj50_Index2
0000FE62                            ; ===========================================================================
0000FE62                            
0000FE62                            Obj50_Move:				; XREF: Obj50_Index2
0000FE62 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
0000FE66 6A00                       		bpl.s	locret_F8E2	; if time remains, branch
0000FE68 5428 0025                  		addq.b	#2,$25(a0)
0000FE6C 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object
0000FE72 117C 0001 001C             		move.b	#1,$1C(a0)
0000FE78 0868 0000 0022             		bchg	#0,$22(a0)
0000FE7E 6600                       		bne.s	locret_F8E2
0000FE80 4468 0010                  		neg.w	$10(a0)		; change direction
0000FE84                            
0000FE84                            locret_F8E2:
0000FE84 4E75                       		rts	
0000FE86                            ; ===========================================================================
0000FE86                            
0000FE86                            Obj50_FixToFloor:			; XREF: Obj50_Index2
0000FE86 6100 DCFA                  		bsr.w	SpeedToPos
0000FE8A 6100 0000                  		bsr.w	ObjHitFloor
0000FE8E 0C41 FFF8                  		cmpi.w	#-8,d1
0000FE92 6D00                       		blt.s	Obj50_Pause
0000FE94 0C41 000C                  		cmpi.w	#$C,d1
0000FE98 6C00                       		bge.s	Obj50_Pause
0000FE9A D368 000C                  		add.w	d1,$C(a0)	; match	object's position to the floor
0000FE9E 6100 FF0A                  		bsr.w	Obj50_ChkWall
0000FEA2 6600                       		bne.s	Obj50_Pause
0000FEA4 4E75                       		rts	
0000FEA6                            ; ===========================================================================
0000FEA6                            
0000FEA6                            Obj50_Pause:				; XREF: Obj50_FixToFloor
0000FEA6 5528 0025                  		subq.b	#2,$25(a0)
0000FEAA 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
0000FEB0 317C 0000 0010             		move.w	#0,$10(a0)
0000FEB6 117C 0000 001C             		move.b	#0,$1C(a0)
0000FEBC 4E75                       		rts	
0000FEBE                            ; ===========================================================================
0000FEBE                            Ani_obj50:
0000FEBE                            	include "_anim\obj50.asm"
0000FEBE                            ; ---------------------------------------------------------------------------
0000FEBE                            ; Animation script - Yadrin enemy
0000FEBE                            ; ---------------------------------------------------------------------------
0000FEBE 0000                       		dc.w byte_F920-Ani_obj50
0000FEC0 0000                       		dc.w byte_F924-Ani_obj50
0000FEC2 0700 FF00                  byte_F920:	dc.b 7,	0, $FF,	0
0000FEC6 0700 0301 0400 0302 05FF   byte_F924:	dc.b 7,	0, 3, 1, 4, 0, 3, 2, 5,	$FF
0000FED0                            		even
0000FED0                            		even
0000FED0                            
0000FED0                            ; ---------------------------------------------------------------------------
0000FED0                            ; Sprite mappings - Yadrin enemy (SYZ)
0000FED0                            ; ---------------------------------------------------------------------------
0000FED0                            Map_obj50:
0000FED0                            	include "_maps\obj50.asm"
0000FED0                            ; ---------------------------------------------------------------------------
0000FED0                            ; Sprite mappings - Yadrin enemy (SYZ)
0000FED0                            ; ---------------------------------------------------------------------------
0000FED0 0000 0000                  		dc.w byte_F93A-Map_obj50, byte_F954-Map_obj50
0000FED4 0000 0000                  		dc.w byte_F96E-Map_obj50, byte_F988-Map_obj50
0000FED8 0000 0000                  		dc.w byte_F9A2-Map_obj50, byte_F9BC-Map_obj50
0000FEDC 05                         byte_F93A:	dc.b 5
0000FEDD F408 0000 F4               		dc.b $F4, 8, 0,	0, $F4
0000FEE2 FC0E 0003 EC               		dc.b $FC, $E, 0, 3, $EC
0000FEE7 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000FEEC F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000FEF1 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
0000FEF6 05                         byte_F954:	dc.b 5
0000FEF7 F408 0014 F4               		dc.b $F4, 8, 0,	$14, $F4
0000FEFC FC0E 0017 EC               		dc.b $FC, $E, 0, $17, $EC
0000FF01 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000FF06 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000FF0B 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
0000FF10 05                         byte_F96E:	dc.b 5
0000FF11 F409 0023 F4               		dc.b $F4, 9, 0,	$23, $F4
0000FF16 040D 0029 EC               		dc.b 4,	$D, 0, $29, $EC
0000FF1B EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000FF20 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000FF25 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
0000FF2A 05                         byte_F988:	dc.b 5
0000FF2B F408 0000 F4               		dc.b $F4, 8, 0,	0, $F4
0000FF30 FC0E 0003 EC               		dc.b $FC, $E, 0, 3, $EC
0000FF35 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000FF3A F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000FF3F 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
0000FF44 05                         byte_F9A2:	dc.b 5
0000FF45 F408 0014 F4               		dc.b $F4, 8, 0,	$14, $F4
0000FF4A FC0E 0017 EC               		dc.b $FC, $E, 0, $17, $EC
0000FF4F EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000FF54 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000FF59 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
0000FF5E 05                         byte_F9BC:	dc.b 5
0000FF5F F409 0023 F4               		dc.b $F4, 9, 0,	$23, $F4
0000FF64 040D 0029 EC               		dc.b 4,	$D, 0, $29, $EC
0000FF69 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000FF6E F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000FF73 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
0000FF78                            		even
0000FF78                            		even
0000FF78                            
0000FF78                            ; ---------------------------------------------------------------------------
0000FF78                            ; Solid	object subroutine (includes spikes, blocks, rocks etc)
0000FF78                            ;
0000FF78                            ; variables:
0000FF78                            ; d1 = width
0000FF78                            ; d2 = height /	2 (when	jumping)
0000FF78                            ; d3 = height /	2 (when	walking)
0000FF78                            ; d4 = x-axis position
0000FF78                            ; ---------------------------------------------------------------------------
0000FF78                            
0000FF78                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FF78                            
0000FF78                            
0000FF78                            SolidObject:
0000FF78 4A28 0025                  		tst.b	$25(a0)
0000FF7C 6700 0000                  		beq.w	loc_FAC8
0000FF80 3401                       		move.w	d1,d2
0000FF82 D442                       		add.w	d2,d2
0000FF84 43F8 D000                  		lea	($FFFFD000).w,a1
0000FF88 0829 0001 0022             		btst	#1,$22(a1)
0000FF8E 6600                       		bne.s	loc_F9FE
0000FF90 3029 0008                  		move.w	8(a1),d0
0000FF94 9068 0008                  		sub.w	8(a0),d0
0000FF98 D041                       		add.w	d1,d0
0000FF9A 6B00                       		bmi.s	loc_F9FE
0000FF9C B042                       		cmp.w	d2,d0
0000FF9E 6500                       		bcs.s	loc_FA12
0000FFA0                            
0000FFA0                            loc_F9FE:
0000FFA0 08A9 0003 0022             		bclr	#3,$22(a1)
0000FFA6 08A8 0003 0022             		bclr	#3,$22(a0)
0000FFAC 4228 0025                  		clr.b	$25(a0)
0000FFB0 7800                       		moveq	#0,d4
0000FFB2 4E75                       		rts	
0000FFB4                            ; ===========================================================================
0000FFB4                            
0000FFB4                            loc_FA12:
0000FFB4 3404                       		move.w	d4,d2
0000FFB6                            		;bsr.w	MvSonicOnPtfm Causes an error in building (Come back to this)
0000FFB6 7800                       		moveq	#0,d4
0000FFB8 4E75                       		rts	
0000FFBA                            ; ===========================================================================
0000FFBA                            
0000FFBA                            SolidObject71:				; XREF: Obj71_Solid
0000FFBA 4A28 0025                  		tst.b	$25(a0)
0000FFBE 6700 0000                  		beq.w	loc_FAD0
0000FFC2 3401                       		move.w	d1,d2
0000FFC4 D442                       		add.w	d2,d2
0000FFC6 43F8 D000                  		lea	($FFFFD000).w,a1
0000FFCA 0829 0001 0022             		btst	#1,$22(a1)
0000FFD0 6600                       		bne.s	loc_FA44
0000FFD2 3029 0008                  		move.w	8(a1),d0
0000FFD6 9068 0008                  		sub.w	8(a0),d0
0000FFDA D041                       		add.w	d1,d0
0000FFDC 6B00                       		bmi.s	loc_FA44
0000FFDE B042                       		cmp.w	d2,d0
0000FFE0 6500                       		bcs.s	loc_FA58
0000FFE2                            
0000FFE2                            loc_FA44:
0000FFE2 08A9 0003 0022             		bclr	#3,$22(a1)
0000FFE8 08A8 0003 0022             		bclr	#3,$22(a0)
0000FFEE 4228 0025                  		clr.b	$25(a0)
0000FFF2 7800                       		moveq	#0,d4
0000FFF4 4E75                       		rts	
0000FFF6                            ; ===========================================================================
0000FFF6                            
0000FFF6                            loc_FA58:
0000FFF6 3404                       		move.w	d4,d2
0000FFF8                            	;	bsr.w	MvSonicOnPtfm  Causes an error in building (Come back to this)
0000FFF8 7800                       		moveq	#0,d4
0000FFFA 4E75                       		rts	
0000FFFC                            ; ===========================================================================
0000FFFC                            
0000FFFC                            SolidObject2F:				; XREF: Obj2F_Solid
0000FFFC 43F8 D000                  		lea	($FFFFD000).w,a1
00010000 4A28 0001                  		tst.b	1(a0)
00010004 6A00 0000                  		bpl.w	loc_FB92
00010008 3029 0008                  		move.w	8(a1),d0
0001000C 9068 0008                  		sub.w	8(a0),d0
00010010 D041                       		add.w	d1,d0
00010012 6B00 0000                  		bmi.w	loc_FB92
00010016 3601                       		move.w	d1,d3
00010018 D643                       		add.w	d3,d3
0001001A B043                       		cmp.w	d3,d0
0001001C 6200 0000                  		bhi.w	loc_FB92
00010020 3A00                       		move.w	d0,d5
00010022 0828 0000 0001             		btst	#0,1(a0)
00010028 6700                       		beq.s	loc_FA94
0001002A 4645                       		not.w	d5
0001002C DA43                       		add.w	d3,d5
0001002E                            
0001002E                            loc_FA94:
0001002E E24D                       		lsr.w	#1,d5
00010030 7600                       		moveq	#0,d3
00010032 1632 5000                  		move.b	(a2,d5.w),d3
00010036 9612                       		sub.b	(a2),d3
00010038 3A28 000C                  		move.w	$C(a0),d5
0001003C 9A43                       		sub.w	d3,d5
0001003E 1629 0016                  		move.b	$16(a1),d3
00010042 4883                       		ext.w	d3
00010044 D443                       		add.w	d3,d2
00010046 3629 000C                  		move.w	$C(a1),d3
0001004A 9645                       		sub.w	d5,d3
0001004C 5843                       		addq.w	#4,d3
0001004E D642                       		add.w	d2,d3
00010050 6B00 0000                  		bmi.w	loc_FB92
00010054 3802                       		move.w	d2,d4
00010056 D844                       		add.w	d4,d4
00010058 B644                       		cmp.w	d4,d3
0001005A 6400 0000                  		bcc.w	loc_FB92
0001005E 6000 0000                  		bra.w	loc_FB0E
00010062                            ; ===========================================================================
00010062                            
00010062                            loc_FAC8:
00010062 4A28 0001                  		tst.b	1(a0)
00010066 6A00 0000                  		bpl.w	loc_FB92
0001006A                            
0001006A                            loc_FAD0:
0001006A 43F8 D000                  		lea	($FFFFD000).w,a1
0001006E 3029 0008                  		move.w	8(a1),d0
00010072 9068 0008                  		sub.w	8(a0),d0
00010076 D041                       		add.w	d1,d0
00010078 6B00 0000                  		bmi.w	loc_FB92
0001007C 3601                       		move.w	d1,d3
0001007E D643                       		add.w	d3,d3
00010080 B043                       		cmp.w	d3,d0
00010082 6200 0000                  		bhi.w	loc_FB92
00010086 1629 0016                  		move.b	$16(a1),d3
0001008A 4883                       		ext.w	d3
0001008C D443                       		add.w	d3,d2
0001008E 3629 000C                  		move.w	$C(a1),d3
00010092 9668 000C                  		sub.w	$C(a0),d3
00010096 5843                       		addq.w	#4,d3
00010098 D642                       		add.w	d2,d3
0001009A 6B00 0000                  		bmi.w	loc_FB92
0001009E 3802                       		move.w	d2,d4
000100A0 D844                       		add.w	d4,d4
000100A2 B644                       		cmp.w	d4,d3
000100A4 6400 0000                  		bcc.w	loc_FB92
000100A8                            
000100A8                            loc_FB0E:
000100A8 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000100AC 6B00 0000                  		bmi.w	loc_FB92
000100B0 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000100B6 6400 0000                  		bcc.w	loc_FB92
000100BA 4A78 FE08                  		tst.w	($FFFFFE08).w
000100BE 6600 0000                  		bne.w	loc_FBAC
000100C2 3A00                       		move.w	d0,d5
000100C4 B240                       		cmp.w	d0,d1
000100C6 6400                       		bcc.s	loc_FB36
000100C8 D241                       		add.w	d1,d1
000100CA 9041                       		sub.w	d1,d0
000100CC 3A00                       		move.w	d0,d5
000100CE 4445                       		neg.w	d5
000100D0                            
000100D0                            loc_FB36:
000100D0 3203                       		move.w	d3,d1
000100D2 B443                       		cmp.w	d3,d2
000100D4 6400                       		bcc.s	loc_FB44
000100D6 5943                       		subq.w	#4,d3
000100D8 9644                       		sub.w	d4,d3
000100DA 3203                       		move.w	d3,d1
000100DC 4441                       		neg.w	d1
000100DE                            
000100DE                            loc_FB44:
000100DE BA41                       		cmp.w	d1,d5
000100E0 6200 0000                  		bhi.w	loc_FBB0
000100E4 0C41 0004                  		cmpi.w	#4,d1
000100E8 6300                       		bls.s	loc_FB8C
000100EA 4A40                       		tst.w	d0
000100EC 6700                       		beq.s	loc_FB70
000100EE 6B00                       		bmi.s	loc_FB5E
000100F0 4A69 0010                  		tst.w	$10(a1)
000100F4 6B00                       		bmi.s	loc_FB70
000100F6 6000                       		bra.s	loc_FB64
000100F8                            ; ===========================================================================
000100F8                            
000100F8                            loc_FB5E:
000100F8 4A69 0010                  		tst.w	$10(a1)
000100FC 6A00                       		bpl.s	loc_FB70
000100FE                            
000100FE                            loc_FB64:
000100FE 337C 0000 0014             		move.w	#0,$14(a1)	; stop Sonic moving
00010104 337C 0000 0010             		move.w	#0,$10(a1)
0001010A                            
0001010A                            loc_FB70:
0001010A 9169 0008                  		sub.w	d0,8(a1)
0001010E 0829 0001 0022             		btst	#1,$22(a1)
00010114 6600                       		bne.s	loc_FB8C
00010116 08E9 0005 0022             		bset	#5,$22(a1)
0001011C 08E8 0005 0022             		bset	#5,$22(a0)
00010122 7801                       		moveq	#1,d4
00010124 4E75                       		rts	
00010126                            ; ===========================================================================
00010126                            
00010126                            loc_FB8C:
00010126 6100                       		bsr.s	loc_FBA0
00010128 7801                       		moveq	#1,d4
0001012A 4E75                       		rts	
0001012C                            ; ===========================================================================
0001012C                            
0001012C                            loc_FB92:
0001012C 0828 0005 0022             		btst	#5,$22(a0)
00010132 6700                       		beq.s	loc_FBAC
00010134 337C 0001 001C             		move.w	#1,$1C(a1)	; use walking animation
0001013A                            
0001013A                            loc_FBA0:
0001013A 08A8 0005 0022             		bclr	#5,$22(a0)
00010140 08A9 0005 0022             		bclr	#5,$22(a1)
00010146                            
00010146                            loc_FBAC:
00010146 7800                       		moveq	#0,d4
00010148 4E75                       		rts	
0001014A                            ; ===========================================================================
0001014A                            
0001014A                            loc_FBB0:
0001014A 4A43                       		tst.w	d3
0001014C 6B00                       		bmi.s	loc_FBBC
0001014E 0C43 0010                  		cmpi.w	#$10,d3
00010152 6500                       		bcs.s	loc_FBEE
00010154 60D6                       		bra.s	loc_FB92
00010156                            ; ===========================================================================
00010156                            
00010156                            loc_FBBC:
00010156 4A69 0012                  		tst.w	$12(a1)
0001015A 6700                       		beq.s	loc_FBD6
0001015C 6A00                       		bpl.s	loc_FBD2
0001015E 4A43                       		tst.w	d3
00010160 6A00                       		bpl.s	loc_FBD2
00010162 9769 000C                  		sub.w	d3,$C(a1)
00010166 337C 0000 0012             		move.w	#0,$12(a1)	; stop Sonic moving
0001016C                            
0001016C                            loc_FBD2:
0001016C 78FF                       		moveq	#-1,d4
0001016E 4E75                       		rts	
00010170                            ; ===========================================================================
00010170                            
00010170                            loc_FBD6:
00010170 0829 0001 0022             		btst	#1,$22(a1)
00010176 66F4                       		bne.s	loc_FBD2
00010178 2F08                       		move.l	a0,-(sp)
0001017A 2049                       		movea.l	a1,a0
0001017C 4EB9 0000 0000             		jsr	KillSonic
00010182 205F                       		movea.l	(sp)+,a0
00010184 78FF                       		moveq	#-1,d4
00010186 4E75                       		rts	
00010188                            ; ===========================================================================
00010188                            
00010188                            loc_FBEE:
00010188 5943                       		subq.w	#4,d3
0001018A 7200                       		moveq	#0,d1
0001018C 1228 0019                  		move.b	$19(a0),d1
00010190 3401                       		move.w	d1,d2
00010192 D442                       		add.w	d2,d2
00010194 D269 0008                  		add.w	8(a1),d1
00010198 9268 0008                  		sub.w	8(a0),d1
0001019C 6B00                       		bmi.s	loc_FC28
0001019E B242                       		cmp.w	d2,d1
000101A0 6400                       		bcc.s	loc_FC28
000101A2 4A69 0012                  		tst.w	$12(a1)
000101A6 6B00                       		bmi.s	loc_FC28
000101A8 9769 000C                  		sub.w	d3,$C(a1)
000101AC 5369 000C                  		subq.w	#1,$C(a1)
000101B0 6100                       		bsr.s	sub_FC2C
000101B2 117C 0002 0025             		move.b	#2,$25(a0)
000101B8 08E8 0003 0022             		bset	#3,$22(a0)
000101BE 78FF                       		moveq	#-1,d4
000101C0 4E75                       		rts	
000101C2                            ; ===========================================================================
000101C2                            
000101C2                            loc_FC28:
000101C2 7800                       		moveq	#0,d4
000101C4 4E75                       		rts	
000101C6                            ; End of function SolidObject
000101C6                            
000101C6                            
000101C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000101C6                            
000101C6                            
000101C6                            sub_FC2C:				; XREF: SolidObject
000101C6 0829 0003 0022             		btst	#3,$22(a1)
000101CC 6700                       		beq.s	loc_FC4E
000101CE 7000                       		moveq	#0,d0
000101D0 1029 003D                  		move.b	$3D(a1),d0
000101D4 ED48                       		lsl.w	#6,d0
000101D6 0680 00FF D000             		addi.l	#$FFD000,d0
000101DC 2440                       		movea.l	d0,a2
000101DE 08AA 0003 0022             		bclr	#3,$22(a2)
000101E4 422A 0025                  		clr.b	$25(a2)
000101E8                            
000101E8                            loc_FC4E:
000101E8 3008                       		move.w	a0,d0
000101EA 0440 D000                  		subi.w	#-$3000,d0
000101EE EC48                       		lsr.w	#6,d0
000101F0 0240 007F                  		andi.w	#$7F,d0
000101F4 1340 003D                  		move.b	d0,$3D(a1)
000101F8 137C 0000 0026             		move.b	#0,$26(a1)
000101FE 337C 0000 0012             		move.w	#0,$12(a1)
00010204 3369 0010 0014             		move.w	$10(a1),$14(a1)
0001020A 0829 0001 0022             		btst	#1,$22(a1)
00010210 6700                       		beq.s	loc_FC84
00010212 2F08                       		move.l	a0,-(sp)
00010214 2049                       		movea.l	a1,a0
00010216 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
0001021C 205F                       		movea.l	(sp)+,a0
0001021E                            
0001021E                            loc_FC84:
0001021E 08E9 0003 0022             		bset	#3,$22(a1)
00010224 08E8 0003 0022             		bset	#3,$22(a0)
0001022A 4E75                       		rts	
0001022C                            ; End of function sub_FC2C
0001022C                            
0001022C                            ; ===========================================================================
0001022C                            ; ---------------------------------------------------------------------------
0001022C                            ; Object 51 - smashable	green block (MZ)
0001022C                            ; ---------------------------------------------------------------------------
0001022C                            
0001022C                            Obj51:					; XREF: Obj_Index
0001022C 7000                       		moveq	#0,d0
0001022E 1028 0024                  		move.b	$24(a0),d0
00010232 323B 0000                  		move.w	Obj51_Index(pc,d0.w),d1
00010236 4EBB 1000                  		jsr	Obj51_Index(pc,d1.w)
0001023A 6000 FA14                  		bra.w	MarkObjGone
0001023E                            ; ===========================================================================
0001023E 0000                       Obj51_Index:	dc.w Obj51_Main-Obj51_Index
00010240 0000                       		dc.w Obj51_Solid-Obj51_Index
00010242 0000                       		dc.w Obj51_Display-Obj51_Index
00010244                            ; ===========================================================================
00010244                            
00010244                            Obj51_Main:				; XREF: Obj51_Index
00010244 5428 0024                  		addq.b	#2,$24(a0)
00010248 217C 0000 0000 0004        		move.l	#Map_obj51,4(a0)
00010250 317C 42B8 0002             		move.w	#$42B8,2(a0)
00010256 117C 0004 0001             		move.b	#4,1(a0)
0001025C 117C 0010 0019             		move.b	#$10,$19(a0)
00010262 117C 0004 0018             		move.b	#4,$18(a0)
00010268 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0001026E                            
0001026E                            Obj51_Solid:				; XREF: Obj51_Index
0001026E 3178 F7D0 0034             		move.w	($FFFFF7D0).w,$34(a0)
00010274 1178 D01C 0032             		move.b	($FFFFD01C).w,$32(a0) ;	load Sonic's animation number
0001027A 323C 001B                  		move.w	#$1B,d1
0001027E 343C 0010                  		move.w	#$10,d2
00010282 363C 0011                  		move.w	#$11,d3
00010286 3828 0008                  		move.w	8(a0),d4
0001028A 6100 FCEC                  		bsr.w	SolidObject
0001028E 0828 0003 0022             		btst	#3,$22(a0)
00010294 6600                       		bne.s	Obj51_Smash
00010296                            
00010296                            locret_FCFC:
00010296 4E75                       		rts	
00010298                            ; ===========================================================================
00010298                            
00010298                            Obj51_Smash:				; XREF: Obj51_Solid
00010298 0C28 0002 0032             		cmpi.b	#2,$32(a0)	; is Sonic rolling/jumping?
0001029E 66F6                       		bne.s	locret_FCFC	; if not, branch
000102A0 31E8 0034 F7D0             		move.w	$34(a0),($FFFFF7D0).w
000102A6 08E9 0002 0022             		bset	#2,$22(a1)
000102AC 137C 000E 0016             		move.b	#$E,$16(a1)
000102B2 137C 0007 0017             		move.b	#7,$17(a1)
000102B8 137C 0002 001C             		move.b	#2,$1C(a1)
000102BE 337C FD00 0012             		move.w	#-$300,$12(a1)	; bounce Sonic upwards
000102C4 08E9 0001 0022             		bset	#1,$22(a1)
000102CA 08A9 0003 0022             		bclr	#3,$22(a1)
000102D0 137C 0002 0024             		move.b	#2,$24(a1)
000102D6 08A8 0003 0022             		bclr	#3,$22(a0)
000102DC 4228 0025                  		clr.b	$25(a0)
000102E0 117C 0001 001A             		move.b	#1,$1A(a0)
000102E6 49F9 0000 0000             		lea	(Obj51_Speeds).l,a4 ; load broken	fragment speed data
000102EC 7203                       		moveq	#3,d1		; set number of	fragments to 4
000102EE 343C 0038                  		move.w	#$38,d2
000102F2 6100 D4A2                  		bsr.w	SmashObject
000102F6 6100 DD36                  		bsr.w	SingleObjLoad
000102FA 6600                       		bne.s	Obj51_Display
000102FC 12BC 0029                  		move.b	#$29,0(a1)	; load points object
00010300 3368 0008 0008             		move.w	8(a0),8(a1)
00010306 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001030C 3438 F7D0                  		move.w	($FFFFF7D0).w,d2
00010310 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w
00010314 0C42 0006                  		cmpi.w	#6,d2
00010318 6500                       		bcs.s	Obj51_Bonus
0001031A 7406                       		moveq	#6,d2
0001031C                            
0001031C                            Obj51_Bonus:
0001031C 7000                       		moveq	#0,d0
0001031E 303B 2000                  		move.w	Obj51_Points(pc,d2.w),d0
00010322 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 blocks been smashed?
00010328 6500                       		bcs.s	loc_FD98	; if not, branch
0001032A 303C 03E8                  		move.w	#1000,d0	; give higher points for 16th block
0001032E 740A                       		moveq	#10,d2
00010330                            
00010330                            loc_FD98:
00010330 4EB9 0000 0000             		jsr	AddPoints
00010336 E24A                       		lsr.w	#1,d2
00010338 1342 001A                  		move.b	d2,$1A(a1)
0001033C                            
0001033C                            Obj51_Display:				; XREF: Obj51_Index
0001033C 6100 D844                  		bsr.w	SpeedToPos
00010340 0668 0038 0012             		addi.w	#$38,$12(a0)
00010346 6100 D860                  		bsr.w	DisplaySprite
0001034A 4A28 0001                  		tst.b	1(a0)
0001034E 6A00 D894                  		bpl.w	DeleteObject
00010352 4E75                       		rts	
00010354                            ; ===========================================================================
00010354 FE00 FE00                  Obj51_Speeds:	dc.w $FE00, $FE00	; x-speed, y-speed
00010358 FF00 FF00                  		dc.w $FF00, $FF00
0001035C 0200 FE00                  		dc.w $200, $FE00
00010360 0100 FF00                  		dc.w $100, $FF00
00010364                            
00010364 000A 0014 0032 0064        Obj51_Points:	dc.w 10, 20, 50, 100
0001036C                            ; ---------------------------------------------------------------------------
0001036C                            ; Sprite mappings - smashable green block (MZ)
0001036C                            ; ---------------------------------------------------------------------------
0001036C                            Map_obj51:
0001036C                            	include "_maps\obj51.asm"
0001036C                            ; ---------------------------------------------------------------------------
0001036C                            ; Sprite mappings - smashable green block (MZ)
0001036C                            ; ---------------------------------------------------------------------------
0001036C 0000                       		dc.w byte_FDD8-Map_obj51
0001036E 0000                       		dc.w byte_FDE3-Map_obj51
00010370 02                         byte_FDD8:	dc.b 2
00010371 F00D 0000 F0               		dc.b $F0, $D, 0, 0, $F0
00010376 000D 0000 F0               		dc.b 0,	$D, 0, 0, $F0
0001037B 04                         byte_FDE3:	dc.b 4
0001037C F005 8000 F0               		dc.b $F0, 5, $80, 0, $F0
00010381 0005 8000 F0               		dc.b 0,	5, $80,	0, $F0
00010386 F005 8000 00               		dc.b $F0, 5, $80, 0, 0
0001038B 0005 8000 00               		dc.b 0,	5, $80,	0, 0
00010390                            		even
00010390                            		even
00010390                            
00010390                            ; ===========================================================================
00010390                            ; ---------------------------------------------------------------------------
00010390                            ; Object 52 - moving platform blocks (MZ, LZ, SBZ)
00010390                            ; ---------------------------------------------------------------------------
00010390                            
00010390                            Obj52:					; XREF: Obj_Index
00010390 7000                       		moveq	#0,d0
00010392 1028 0024                  		move.b	$24(a0),d0
00010396 323B 0000                  		move.w	Obj52_Index(pc,d0.w),d1
0001039A 4EFB 1000                  		jmp	Obj52_Index(pc,d1.w)
0001039E                            ; ===========================================================================
0001039E 0000                       Obj52_Index:	dc.w Obj52_Main-Obj52_Index
000103A0 0000                       		dc.w Obj52_Platform-Obj52_Index
000103A2 0000                       		dc.w Obj52_StandOn-Obj52_Index
000103A4                            
000103A4 1000                       Obj52_Var:	dc.b $10, 0		; object width,	frame number
000103A6 2001                       		dc.b $20, 1
000103A8 2002                       		dc.b $20, 2
000103AA 4003                       		dc.b $40, 3
000103AC 3004                       		dc.b $30, 4
000103AE                            ; ===========================================================================
000103AE                            
000103AE                            Obj52_Main:				; XREF: Obj52_Index
000103AE 5428 0024                  		addq.b	#2,$24(a0)
000103B2 217C 0000 0000 0004        		move.l	#Map_obj52,4(a0)
000103BA 317C 42B8 0002             		move.w	#$42B8,2(a0)
000103C0 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
000103C6 6600                       		bne.s	loc_FE44
000103C8 217C 0000 0000 0004        		move.l	#Map_obj52a,4(a0) ; LZ specific	code
000103D0 317C 43BC 0002             		move.w	#$43BC,2(a0)
000103D6 117C 0007 0016             		move.b	#7,$16(a0)
000103DC                            
000103DC                            loc_FE44:
000103DC 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
000103E2 6600                       		bne.s	loc_FE60
000103E4 317C 22C0 0002             		move.w	#$22C0,2(a0)	; SBZ specific code (object 5228)
000103EA 0C28 0028 0028             		cmpi.b	#$28,$28(a0)	; is object 5228 ?
000103F0 6700                       		beq.s	loc_FE60	; if yes, branch
000103F2 317C 4460 0002             		move.w	#$4460,2(a0)	; SBZ specific code (object 523x)
000103F8                            
000103F8                            loc_FE60:
000103F8 117C 0004 0001             		move.b	#4,1(a0)
000103FE 7000                       		moveq	#0,d0
00010400 1028 0028                  		move.b	$28(a0),d0
00010404 E648                       		lsr.w	#3,d0
00010406 0240 001E                  		andi.w	#$1E,d0
0001040A 45FB 0098                  		lea	Obj52_Var(pc,d0.w),a2
0001040E 115A 0019                  		move.b	(a2)+,$19(a0)
00010412 115A 001A                  		move.b	(a2)+,$1A(a0)
00010416 117C 0004 0018             		move.b	#4,$18(a0)
0001041C 3168 0008 0030             		move.w	8(a0),$30(a0)
00010422 3168 000C 0032             		move.w	$C(a0),$32(a0)
00010428 0228 000F 0028             		andi.b	#$F,$28(a0)
0001042E                            
0001042E                            Obj52_Platform:				; XREF: Obj52_Index
0001042E 6100 0000                  		bsr.w	Obj52_Move
00010432 7200                       		moveq	#0,d1
00010434 1228 0019                  		move.b	$19(a0),d1
00010438 4EB9 0000 789E             		jsr	(PlatformObject).l
0001043E 6000                       		bra.s	Obj52_ChkDel
00010440                            ; ===========================================================================
00010440                            
00010440                            Obj52_StandOn:				; XREF: Obj52_Index
00010440 7200                       		moveq	#0,d1
00010442 1228 0019                  		move.b	$19(a0),d1
00010446 4EB9 0000 7A12             		jsr	(ExitPlatform).l
0001044C 3F28 0008                  		move.w	8(a0),-(sp)
00010450 6100 0000                  		bsr.w	Obj52_Move
00010454 341F                       		move.w	(sp)+,d2
00010456 4EB9 0000 7F7C             		jsr	(MvSonicOnPtfm2).l
0001045C                            
0001045C                            Obj52_ChkDel:				; XREF: Obj52_Platform
0001045C 3028 0030                  		move.w	$30(a0),d0
00010460 0240 FF80                  		andi.w	#$FF80,d0
00010464 3238 F700                  		move.w	($FFFFF700).w,d1
00010468 0441 0080                  		subi.w	#$80,d1
0001046C 0241 FF80                  		andi.w	#$FF80,d1
00010470 9041                       		sub.w	d1,d0
00010472 0C40 0280                  		cmpi.w	#$280,d0
00010476 6200 D76C                  		bhi.w	DeleteObject
0001047A 6000 D72C                  		bra.w	DisplaySprite
0001047E                            ; ===========================================================================
0001047E                            
0001047E                            Obj52_Move:				; XREF: Obj52_Platform; Obj52_StandOn
0001047E 7000                       		moveq	#0,d0
00010480 1028 0028                  		move.b	$28(a0),d0
00010484 0240 000F                  		andi.w	#$F,d0
00010488 D040                       		add.w	d0,d0
0001048A 323B 0000                  		move.w	Obj52_TypeIndex(pc,d0.w),d1
0001048E 4EFB 1000                  		jmp	Obj52_TypeIndex(pc,d1.w)
00010492                            ; ===========================================================================
00010492 0000 0000                  Obj52_TypeIndex:dc.w Obj52_Type00-Obj52_TypeIndex, Obj52_Type01-Obj52_TypeIndex
00010496 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type03-Obj52_TypeIndex
0001049A 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type05-Obj52_TypeIndex
0001049E 0000 0000                  		dc.w Obj52_Type06-Obj52_TypeIndex, Obj52_Type07-Obj52_TypeIndex
000104A2 0000 0000                  		dc.w Obj52_Type08-Obj52_TypeIndex, Obj52_Type02-Obj52_TypeIndex
000104A6 0000                       		dc.w Obj52_Type0A-Obj52_TypeIndex
000104A8                            ; ===========================================================================
000104A8                            
000104A8                            Obj52_Type00:				; XREF: Obj52_TypeIndex
000104A8 4E75                       		rts	
000104AA                            ; ===========================================================================
000104AA                            
000104AA                            Obj52_Type01:				; XREF: Obj52_TypeIndex
000104AA 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
000104AE 323C 0060                  		move.w	#$60,d1
000104B2 0828 0000 0022             		btst	#0,$22(a0)
000104B8 6700                       		beq.s	loc_FF26
000104BA 4440                       		neg.w	d0
000104BC D041                       		add.w	d1,d0
000104BE                            
000104BE                            loc_FF26:
000104BE 3228 0030                  		move.w	$30(a0),d1
000104C2 9240                       		sub.w	d0,d1
000104C4 3141 0008                  		move.w	d1,8(a0)
000104C8 4E75                       		rts	
000104CA                            ; ===========================================================================
000104CA                            
000104CA                            Obj52_Type02:				; XREF: Obj52_TypeIndex
000104CA 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; is Sonic standing on the platform?
000104D0 6600                       		bne.s	Obj52_02_Wait
000104D2 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
000104D6                            
000104D6                            Obj52_02_Wait:
000104D6 4E75                       		rts	
000104D8                            ; ===========================================================================
000104D8                            
000104D8                            Obj52_Type03:				; XREF: Obj52_TypeIndex
000104D8 7600                       		moveq	#0,d3
000104DA 1628 0019                  		move.b	$19(a0),d3
000104DE 6100 0000                  		bsr.w	ObjHitWallRight
000104E2 4A41                       		tst.w	d1		; has the platform hit a wall?
000104E4 6B00                       		bmi.s	Obj52_03_End	; if yes, branch
000104E6 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
000104EA 3168 0008 0030             		move.w	8(a0),$30(a0)
000104F0 4E75                       		rts	
000104F2                            ; ===========================================================================
000104F2                            
000104F2                            Obj52_03_End:
000104F2 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving	type)
000104F6 4E75                       		rts	
000104F8                            ; ===========================================================================
000104F8                            
000104F8                            Obj52_Type05:				; XREF: Obj52_TypeIndex
000104F8 7600                       		moveq	#0,d3
000104FA 1628 0019                  		move.b	$19(a0),d3
000104FE 6100 0000                  		bsr.w	ObjHitWallRight
00010502 4A41                       		tst.w	d1		; has the platform hit a wall?
00010504 6B00                       		bmi.s	Obj52_05_End	; if yes, branch
00010506 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
0001050A 3168 0008 0030             		move.w	8(a0),$30(a0)
00010510 4E75                       		rts	
00010512                            ; ===========================================================================
00010512                            
00010512                            Obj52_05_End:
00010512 5228 0028                  		addq.b	#1,$28(a0)	; change to type 06 (falling)
00010516 4E75                       		rts	
00010518                            ; ===========================================================================
00010518                            
00010518                            Obj52_Type06:				; XREF: Obj52_TypeIndex
00010518 6100 D668                  		bsr.w	SpeedToPos
0001051C 0668 0018 0012             		addi.w	#$18,$12(a0)	; make the platform fall
00010522 6100 0000                  		bsr.w	ObjHitFloor
00010526 4A41                       		tst.w	d1		; has platform hit the floor?
00010528 6A00 0000                  		bpl.w	locret_FFA0	; if not, branch
0001052C D368 000C                  		add.w	d1,$C(a0)
00010530 4268 0012                  		clr.w	$12(a0)		; stop platform	falling
00010534 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving)
00010538                            
00010538                            locret_FFA0:
00010538 4E75                       		rts	
0001053A                            ; ===========================================================================
0001053A                            
0001053A                            Obj52_Type07:				; XREF: Obj52_TypeIndex
0001053A 4A38 F7E2                  		tst.b	($FFFFF7E2).w	; has switch number 02 been pressed?
0001053E 6700                       		beq.s	Obj52_07_ChkDel
00010540 5728 0028                  		subq.b	#3,$28(a0)	; if yes, change object	type to	04
00010544                            
00010544                            Obj52_07_ChkDel:
00010544 588F                       		addq.l	#4,sp
00010546 3028 0030                  		move.w	$30(a0),d0
0001054A 0240 FF80                  		andi.w	#$FF80,d0
0001054E 3238 F700                  		move.w	($FFFFF700).w,d1
00010552 0441 0080                  		subi.w	#$80,d1
00010556 0241 FF80                  		andi.w	#$FF80,d1
0001055A 9041                       		sub.w	d1,d0
0001055C 0C40 0280                  		cmpi.w	#$280,d0
00010560 6200 D682                  		bhi.w	DeleteObject
00010564 4E75                       		rts	
00010566                            ; ===========================================================================
00010566                            
00010566                            Obj52_Type08:				; XREF: Obj52_TypeIndex
00010566 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
0001056A 323C 0080                  		move.w	#$80,d1
0001056E 0828 0000 0022             		btst	#0,$22(a0)
00010574 6700                       		beq.s	loc_FFE2
00010576 4440                       		neg.w	d0
00010578 D041                       		add.w	d1,d0
0001057A                            
0001057A                            loc_FFE2:
0001057A 3228 0032                  		move.w	$32(a0),d1
0001057E 9240                       		sub.w	d0,d1
00010580 3141 000C                  		move.w	d1,$C(a0)
00010584 4E75                       		rts	
00010586                            ; ===========================================================================
00010586                            
00010586                            Obj52_Type0A:				; XREF: Obj52_TypeIndex
00010586 7600                       		moveq	#0,d3
00010588 1628 0019                  		move.b	$19(a0),d3
0001058C D643                       		add.w	d3,d3
0001058E 7208                       		moveq	#8,d1
00010590 0828 0000 0022             		btst	#0,$22(a0)
00010596 6700                       		beq.s	loc_10004
00010598 4441                       		neg.w	d1
0001059A 4443                       		neg.w	d3
0001059C                            
0001059C                            loc_10004:
0001059C 4A68 0036                  		tst.w	$36(a0)		; is platform set to move back?
000105A0 6600                       		bne.s	Obj52_0A_Back	; if yes, branch
000105A2 3028 0008                  		move.w	8(a0),d0
000105A6 9068 0030                  		sub.w	$30(a0),d0
000105AA B043                       		cmp.w	d3,d0
000105AC 6700                       		beq.s	Obj52_0A_Wait
000105AE D368 0008                  		add.w	d1,8(a0)	; move platform
000105B2 317C 012C 0034             		move.w	#300,$34(a0)	; set time delay to 5 seconds
000105B8 4E75                       		rts	
000105BA                            ; ===========================================================================
000105BA                            
000105BA                            Obj52_0A_Wait:
000105BA 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time delay
000105BE 6600                       		bne.s	locret_1002E	; if time remains, branch
000105C0 317C 0001 0036             		move.w	#1,$36(a0)	; set platform to move back to its original position
000105C6                            
000105C6                            locret_1002E:
000105C6 4E75                       		rts	
000105C8                            ; ===========================================================================
000105C8                            
000105C8                            Obj52_0A_Back:
000105C8 3028 0008                  		move.w	8(a0),d0
000105CC 9068 0030                  		sub.w	$30(a0),d0
000105D0 6700                       		beq.s	Obj52_0A_Reset
000105D2 9368 0008                  		sub.w	d1,8(a0)	; return platform to its original position
000105D6 4E75                       		rts	
000105D8                            ; ===========================================================================
000105D8                            
000105D8                            Obj52_0A_Reset:
000105D8 4268 0036                  		clr.w	$36(a0)
000105DC 5328 0028                  		subq.b	#1,$28(a0)
000105E0 4E75                       		rts	
000105E2                            ; ===========================================================================
000105E2                            ; ---------------------------------------------------------------------------
000105E2                            ; Sprite mappings - moving blocks (MZ, SBZ)
000105E2                            ; ---------------------------------------------------------------------------
000105E2                            Map_obj52:
000105E2                            	include "_maps\obj52mz.asm"
000105E2                            ; ---------------------------------------------------------------------------
000105E2                            ; Sprite mappings - moving blocks (MZ, SBZ)
000105E2                            ; ---------------------------------------------------------------------------
000105E2 0000 0000                  		dc.w byte_10054-Map_obj52, byte_1005A-Map_obj52
000105E6 0000 0000                  		dc.w byte_10065-Map_obj52, byte_1007A-Map_obj52
000105EA 0000                       		dc.w byte_1008F-Map_obj52
000105EC 01                         byte_10054:	dc.b 1
000105ED F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
000105F2 02                         byte_1005A:	dc.b 2
000105F3 F80F 0008 E0               		dc.b $F8, $F, 0, 8, $E0
000105F8 F80F 0008 00               		dc.b $F8, $F, 0, 8, 0
000105FD 04                         byte_10065:	dc.b 4
000105FE F80C 2000 E0               		dc.b $F8, $C, $20, 0, $E0
00010603 000D 0004 E0               		dc.b 0,	$D, 0, 4, $E0
00010608 F80C 2000 00               		dc.b $F8, $C, $20, 0, 0
0001060D 000D 0004 00               		dc.b 0,	$D, 0, 4, 0
00010612 04                         byte_1007A:	dc.b 4
00010613 F80E 0000 C0               		dc.b $F8, $E, 0, 0, $C0
00010618 F80E 0003 E0               		dc.b $F8, $E, 0, 3, $E0
0001061D F80E 0003 00               		dc.b $F8, $E, 0, 3, 0
00010622 F80E 0800 20               		dc.b $F8, $E, 8, 0, $20
00010627 03                         byte_1008F:	dc.b 3
00010628 F80F 0008 D0               		dc.b $F8, $F, 0, 8, $D0
0001062D F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00010632 F80F 0008 10               		dc.b $F8, $F, 0, 8, $10
00010638 00                         		even
00010638 00                         		even
00010638                            
00010638                            ; ---------------------------------------------------------------------------
00010638                            ; Sprite mappings - moving block (LZ)
00010638                            ; ---------------------------------------------------------------------------
00010638                            Map_obj52a:
00010638                            	include "_maps\obj52lz.asm"
00010638                            ; ---------------------------------------------------------------------------
00010638                            ; Sprite mappings - moving block (LZ)
00010638                            ; ---------------------------------------------------------------------------
00010638 0000                       		dc.w byte_100A2-Map_obj52a
0001063A 01                         byte_100A2:	dc.b 1
0001063B F80D 0000 F0               		dc.b $F8, $D, 0, 0, $F0
00010640                            		even
00010640                            		even
00010640                            
00010640                            ; ===========================================================================
00010640                            ; ---------------------------------------------------------------------------
00010640                            ; Object 55 - Basaran enemy (MZ)
00010640                            ; ---------------------------------------------------------------------------
00010640                            
00010640                            Obj55:					; XREF: Obj_Index
00010640 7000                       		moveq	#0,d0
00010642 1028 0024                  		move.b	$24(a0),d0
00010646 323B 0000                  		move.w	Obj55_Index(pc,d0.w),d1
0001064A 4EFB 1000                  		jmp	Obj55_Index(pc,d1.w)
0001064E                            ; ===========================================================================
0001064E 0000                       Obj55_Index:	dc.w Obj55_Main-Obj55_Index
00010650 0000                       		dc.w Obj55_Action-Obj55_Index
00010652                            ; ===========================================================================
00010652                            
00010652                            Obj55_Main:				; XREF: Obj55_Index
00010652 5428 0024                  		addq.b	#2,$24(a0)
00010656 217C 0000 0000 0004        		move.l	#Map_obj55,4(a0)
0001065E 317C 84B8 0002             		move.w	#$84B8,2(a0)
00010664 117C 0004 0001             		move.b	#4,1(a0)
0001066A 117C 000C 0016             		move.b	#$C,$16(a0)
00010670 117C 0002 0018             		move.b	#2,$18(a0)
00010676 117C 000B 0020             		move.b	#$B,$20(a0)
0001067C 117C 0010 0019             		move.b	#$10,$19(a0)
00010682                            
00010682                            Obj55_Action:				; XREF: Obj55_Index
00010682 7000                       		moveq	#0,d0
00010684 1028 0025                  		move.b	$25(a0),d0
00010688 323B 0000                  		move.w	Obj55_Index2(pc,d0.w),d1
0001068C 4EBB 1000                  		jsr	Obj55_Index2(pc,d1.w)
00010690 43F9 0000 0000             		lea	(Ani_obj55).l,a1
00010696 6100 A5AA                  		bsr.w	AnimateSprite
0001069A 6000 F5B4                  		bra.w	MarkObjGone
0001069E                            ; ===========================================================================
0001069E 0000                       Obj55_Index2:	dc.w Obj55_ChkDrop-Obj55_Index2
000106A0 0000                       		dc.w Obj55_DropFly-Obj55_Index2
000106A2 0000                       		dc.w Obj55_PlaySnd-Obj55_Index2
000106A4 0000                       		dc.w Obj55_FlyUp-Obj55_Index2
000106A6                            ; ===========================================================================
000106A6                            
000106A6                            Obj55_ChkDrop:				; XREF: Obj55_Index2
000106A6 343C 0080                  		move.w	#$80,d2
000106AA 6100 0000                  		bsr.w	Obj55_ChkSonic
000106AE 6400                       		bcc.s	Obj55_NoDrop
000106B0 3038 D00C                  		move.w	($FFFFD00C).w,d0
000106B4 3140 0036                  		move.w	d0,$36(a0)
000106B8 9068 000C                  		sub.w	$C(a0),d0
000106BC 6500                       		bcs.s	Obj55_NoDrop
000106BE 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	basaran?
000106C2 6400                       		bcc.s	Obj55_NoDrop	; if not, branch
000106C4 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
000106C8 6600                       		bne.s	Obj55_NoDrop	; if yes, branch
000106CA 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000106CE D007                       		add.b	d7,d0
000106D0 0200 0007                  		andi.b	#7,d0
000106D4 6600                       		bne.s	Obj55_NoDrop
000106D6 117C 0001 001C             		move.b	#1,$1C(a0)
000106DC 5428 0025                  		addq.b	#2,$25(a0)
000106E0                            
000106E0                            Obj55_NoDrop:
000106E0 4E75                       		rts	
000106E2                            ; ===========================================================================
000106E2                            
000106E2                            Obj55_DropFly:				; XREF: Obj55_Index2
000106E2 6100 D49E                  		bsr.w	SpeedToPos
000106E6 0668 0018 0012             		addi.w	#$18,$12(a0)	; make basaran fall
000106EC 343C 0080                  		move.w	#$80,d2
000106F0 6100 0000                  		bsr.w	Obj55_ChkSonic
000106F4 3028 0036                  		move.w	$36(a0),d0
000106F8 9068 000C                  		sub.w	$C(a0),d0
000106FC 6500                       		bcs.s	Obj55_ChkDel
000106FE 0C40 0010                  		cmpi.w	#$10,d0
00010702 6400                       		bcc.s	locret_10180
00010704 3141 0010                  		move.w	d1,$10(a0)	; make basaran fly horizontally
00010708 317C 0000 0012             		move.w	#0,$12(a0)	; stop basaran falling
0001070E 117C 0002 001C             		move.b	#2,$1C(a0)
00010714 5428 0025                  		addq.b	#2,$25(a0)
00010718                            
00010718                            locret_10180:
00010718 4E75                       		rts	
0001071A                            ; ===========================================================================
0001071A                            
0001071A                            Obj55_ChkDel:				; XREF: Obj55_DropFly
0001071A 4A28 0001                  		tst.b	1(a0)
0001071E 6A00 D4C4                  		bpl.w	DeleteObject
00010722 4E75                       		rts	
00010724                            ; ===========================================================================
00010724                            
00010724                            Obj55_PlaySnd:				; XREF: Obj55_Index2
00010724 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00010728 0200 000F                  		andi.b	#$F,d0
0001072C 6600                       		bne.s	loc_101A0
0001072E 303C 00C0                  		move.w	#$C0,d0
00010732 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play flapping sound
00010738                            
00010738                            loc_101A0:
00010738 6100 D448                  		bsr.w	SpeedToPos
0001073C 3038 D008                  		move.w	($FFFFD008).w,d0
00010740 9068 0008                  		sub.w	8(a0),d0
00010744 6400                       		bcc.s	loc_101B0
00010746 4440                       		neg.w	d0
00010748                            
00010748                            loc_101B0:
00010748 0C40 0080                  		cmpi.w	#$80,d0
0001074C 6500                       		bcs.s	locret_101C6
0001074E 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00010752 D007                       		add.b	d7,d0
00010754 0200 0007                  		andi.b	#7,d0
00010758 6600                       		bne.s	locret_101C6
0001075A 5428 0025                  		addq.b	#2,$25(a0)
0001075E                            
0001075E                            locret_101C6:
0001075E 4E75                       		rts	
00010760                            ; ===========================================================================
00010760                            
00010760                            Obj55_FlyUp:				; XREF: Obj55_Index2
00010760 6100 D420                  		bsr.w	SpeedToPos
00010764 0468 0018 0012             		subi.w	#$18,$12(a0)	; make basaran fly upwards
0001076A 6100 0000                  		bsr.w	ObjHitCeiling
0001076E 4A41                       		tst.w	d1		; has basaran hit the ceiling?
00010770 6A00                       		bpl.s	locret_101F4	; if not, branch
00010772 9368 000C                  		sub.w	d1,$C(a0)
00010776 0268 FFF8 0008             		andi.w	#$FFF8,8(a0)
0001077C 4268 0010                  		clr.w	$10(a0)		; stop basaran moving
00010780 4268 0012                  		clr.w	$12(a0)
00010784 4228 001C                  		clr.b	$1C(a0)
00010788 4228 0025                  		clr.b	$25(a0)
0001078C                            
0001078C                            locret_101F4:
0001078C 4E75                       		rts	
0001078E                            ; ===========================================================================
0001078E                            
0001078E                            Obj55_ChkSonic:				; XREF: Obj55_ChkDrop
0001078E 323C 0100                  		move.w	#$100,d1
00010792 08E8 0000 0022             		bset	#0,$22(a0)
00010798 3038 D008                  		move.w	($FFFFD008).w,d0
0001079C 9068 0008                  		sub.w	8(a0),d0
000107A0 6400                       		bcc.s	loc_10214
000107A2 4440                       		neg.w	d0
000107A4 4441                       		neg.w	d1
000107A6 08A8 0000 0022             		bclr	#0,$22(a0)
000107AC                            
000107AC                            loc_10214:
000107AC B042                       		cmp.w	d2,d0
000107AE 4E75                       		rts	
000107B0                            ; ===========================================================================
000107B0 6100 D3D0                  		bsr.w	SpeedToPos
000107B4 6100 D3F2                  		bsr.w	DisplaySprite
000107B8 4A28 0001                  		tst.b	1(a0)
000107BC 6A00 D426                  		bpl.w	DeleteObject
000107C0 4E75                       		rts	
000107C2                            ; ===========================================================================
000107C2                            Ani_obj55:
000107C2                            	include "_anim\obj55.asm"
000107C2                            ; ---------------------------------------------------------------------------
000107C2                            ; Animation script - Basaran enemy
000107C2                            ; ---------------------------------------------------------------------------
000107C2 0000                       		dc.w byte_10230-Ani_obj55
000107C4 0000                       		dc.w byte_10234-Ani_obj55
000107C6 0000                       		dc.w byte_10238-Ani_obj55
000107C8 0F00 FF00                  byte_10230:	dc.b $F, 0, $FF, 0
000107CC 0F01 FF00                  byte_10234:	dc.b $F, 1, $FF, 0
000107D0 0301 0203 02FF             byte_10238:	dc.b 3,	1, 2, 3, 2, $FF
000107D6                            		even
000107D6                            		even
000107D6                            
000107D6                            ; ---------------------------------------------------------------------------
000107D6                            ; Sprite mappings - Basaran enemy (MZ)
000107D6                            ; ---------------------------------------------------------------------------
000107D6                            Map_obj55:
000107D6                            	include "_maps\obj55.asm"
000107D6                            ; ---------------------------------------------------------------------------
000107D6                            ; Sprite mappings - Basaran enemy (MZ)
000107D6                            ; ---------------------------------------------------------------------------
000107D6 0000 0000                  		dc.w byte_10246-Map_obj55, byte_1024C-Map_obj55
000107DA 0000 0000                  		dc.w byte_1025C-Map_obj55, byte_10271-Map_obj55
000107DE 01                         byte_10246:	dc.b 1
000107DF F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
000107E4 03                         byte_1024C:	dc.b 3
000107E5 F20E 0006 F4               		dc.b $F2, $E, 0, 6, $F4
000107EA 0A04 0012 FC               		dc.b $A, 4, 0, $12, $FC
000107EF 0200 0027 0C               		dc.b 2,	0, 0, $27, $C
000107F4 04                         byte_1025C:	dc.b 4
000107F5 F804 0014 F8               		dc.b $F8, 4, 0,	$14, $F8
000107FA 000C 0016 F0               		dc.b 0,	$C, 0, $16, $F0
000107FF 0804 001A 00               		dc.b 8,	4, 0, $1A, 0
00010804 0000 0028 0C               		dc.b 0,	0, 0, $28, $C
00010809 04                         byte_10271:	dc.b 4
0001080A F609 001C F5               		dc.b $F6, 9, 0,	$1C, $F5
0001080F 0608 0022 F4               		dc.b 6,	8, 0, $22, $F4
00010814 0E04 0025 F4               		dc.b $E, 4, 0, $25, $F4
00010819 FE00 0027 0C               		dc.b $FE, 0, 0,	$27, $C
0001081E                            		even
0001081E                            		even
0001081E                            
0001081E                            ; ===========================================================================
0001081E                            ; ---------------------------------------------------------------------------
0001081E                            ; Object 56 - moving blocks (SYZ/SLZ), large doors (LZ)
0001081E                            ; ---------------------------------------------------------------------------
0001081E                            
0001081E                            Obj56:					; XREF: Obj_Index
0001081E 7000                       		moveq	#0,d0
00010820 1028 0024                  		move.b	$24(a0),d0
00010824 323B 0000                  		move.w	Obj56_Index(pc,d0.w),d1
00010828 4EFB 1000                  		jmp	Obj56_Index(pc,d1.w)
0001082C                            ; ===========================================================================
0001082C 0000                       Obj56_Index:	dc.w Obj56_Main-Obj56_Index
0001082E 0000                       		dc.w Obj56_Action-Obj56_Index
00010830                            
00010830 1010                       Obj56_Var:	dc.b  $10, $10		; width, height
00010832 2020                       		dc.b  $20, $20
00010834 1020                       		dc.b  $10, $20
00010836 201A                       		dc.b  $20, $1A
00010838 1027                       		dc.b  $10, $27
0001083A 1010                       		dc.b  $10, $10
0001083C 0820                       		dc.b	8, $20
0001083E 4010                       		dc.b  $40, $10
00010840                            ; ===========================================================================
00010840                            
00010840                            Obj56_Main:				; XREF: Obj56_Index
00010840 5428 0024                  		addq.b	#2,$24(a0)
00010844 217C 0000 0000 0004        		move.l	#Map_obj56,4(a0)
0001084C 317C 4000 0002             		move.w	#$4000,2(a0)
00010852 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010858 6600                       		bne.s	loc_102C8
0001085A 317C 43C4 0002             		move.w	#$43C4,2(a0)	; LZ specific code
00010860                            
00010860                            loc_102C8:
00010860 117C 0004 0001             		move.b	#4,1(a0)
00010866 117C 0003 0018             		move.b	#3,$18(a0)
0001086C 7000                       		moveq	#0,d0
0001086E 1028 0028                  		move.b	$28(a0),d0
00010872 E648                       		lsr.w	#3,d0
00010874 0240 000E                  		andi.w	#$E,d0
00010878 45FB 00B6                  		lea	Obj56_Var(pc,d0.w),a2
0001087C 115A 0019                  		move.b	(a2)+,$19(a0)
00010880 1152 0016                  		move.b	(a2),$16(a0)
00010884 E248                       		lsr.w	#1,d0
00010886 1140 001A                  		move.b	d0,$1A(a0)
0001088A 3168 0008 0034             		move.w	8(a0),$34(a0)
00010890 3168 000C 0030             		move.w	$C(a0),$30(a0)
00010896 7000                       		moveq	#0,d0
00010898 1012                       		move.b	(a2),d0
0001089A D040                       		add.w	d0,d0
0001089C 3140 003A                  		move.w	d0,$3A(a0)
000108A0 7000                       		moveq	#0,d0
000108A2 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
000108A8 6700                       		beq.s	loc_10332
000108AA 1028 0028                  		move.b	$28(a0),d0	; SYZ/SLZ specific code
000108AE 0240 000F                  		andi.w	#$F,d0
000108B2 5140                       		subq.w	#8,d0
000108B4 6500                       		bcs.s	loc_10332
000108B6 E548                       		lsl.w	#2,d0
000108B8 45F8 FE8A                  		lea	($FFFFFE8A).w,a2
000108BC 45F2 0000                  		lea	(a2,d0.w),a2
000108C0 4A52                       		tst.w	(a2)
000108C2 6A00                       		bpl.s	loc_10332
000108C4 0868 0000 0022             		bchg	#0,$22(a0)
000108CA                            
000108CA                            loc_10332:
000108CA 1028 0028                  		move.b	$28(a0),d0
000108CE 6A00                       		bpl.s	Obj56_Action
000108D0 0200 000F                  		andi.b	#$F,d0
000108D4 1140 003C                  		move.b	d0,$3C(a0)
000108D8 117C 0005 0028             		move.b	#5,$28(a0)
000108DE 0C28 0007 001A             		cmpi.b	#7,$1A(a0)
000108E4 6600                       		bne.s	Obj56_ChkGone
000108E6 117C 000C 0028             		move.b	#$C,$28(a0)
000108EC 317C 0080 003A             		move.w	#$80,$3A(a0)
000108F2                            
000108F2                            Obj56_ChkGone:
000108F2 45F8 FC00                  		lea	($FFFFFC00).w,a2
000108F6 7000                       		moveq	#0,d0
000108F8 1028 0023                  		move.b	$23(a0),d0
000108FC 6700                       		beq.s	Obj56_Action
000108FE 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00010904 0832 0000 0002             		btst	#0,2(a2,d0.w)
0001090A 6700                       		beq.s	Obj56_Action
0001090C 5228 0028                  		addq.b	#1,$28(a0)
00010910 4268 003A                  		clr.w	$3A(a0)
00010914                            
00010914                            Obj56_Action:				; XREF: Obj56_Index
00010914 3F28 0008                  		move.w	8(a0),-(sp)
00010918 7000                       		moveq	#0,d0
0001091A 1028 0028                  		move.b	$28(a0),d0	; get object type
0001091E 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00010922 D040                       		add.w	d0,d0
00010924 323B 0000                  		move.w	Obj56_TypeIndex(pc,d0.w),d1
00010928 4EBB 1000                  		jsr	Obj56_TypeIndex(pc,d1.w)
0001092C 381F                       		move.w	(sp)+,d4
0001092E 4A28 0001                  		tst.b	1(a0)
00010932 6A00                       		bpl.s	Obj56_ChkDel
00010934 7200                       		moveq	#0,d1
00010936 1228 0019                  		move.b	$19(a0),d1
0001093A 0641 000B                  		addi.w	#$B,d1
0001093E 7400                       		moveq	#0,d2
00010940 1428 0016                  		move.b	$16(a0),d2
00010944 3602                       		move.w	d2,d3
00010946 5243                       		addq.w	#1,d3
00010948 6100 F62E                  		bsr.w	SolidObject
0001094C                            
0001094C                            Obj56_ChkDel:
0001094C 3028 0034                  		move.w	$34(a0),d0
00010950 0240 FF80                  		andi.w	#$FF80,d0
00010954 3238 F700                  		move.w	($FFFFF700).w,d1
00010958 0441 0080                  		subi.w	#$80,d1
0001095C 0241 FF80                  		andi.w	#$FF80,d1
00010960 9041                       		sub.w	d1,d0
00010962 0C40 0280                  		cmpi.w	#$280,d0
00010966 6200 D27C                  		bhi.w	DeleteObject
0001096A 6000 D23C                  		bra.w	DisplaySprite
0001096E                            ; ===========================================================================
0001096E 0000 0000                  Obj56_TypeIndex:dc.w Obj56_Type00-Obj56_TypeIndex, Obj56_Type01-Obj56_TypeIndex
00010972 0000 0000                  		dc.w Obj56_Type02-Obj56_TypeIndex, Obj56_Type03-Obj56_TypeIndex
00010976 0000 0000                  		dc.w Obj56_Type04-Obj56_TypeIndex, Obj56_Type05-Obj56_TypeIndex
0001097A 0000 0000                  		dc.w Obj56_Type06-Obj56_TypeIndex, Obj56_Type07-Obj56_TypeIndex
0001097E 0000 0000                  		dc.w Obj56_Type08-Obj56_TypeIndex, Obj56_Type09-Obj56_TypeIndex
00010982 0000 0000                  		dc.w Obj56_Type0A-Obj56_TypeIndex, Obj56_Type0B-Obj56_TypeIndex
00010986 0000 0000                  		dc.w Obj56_Type0C-Obj56_TypeIndex, Obj56_Type0D-Obj56_TypeIndex
0001098A                            ; ===========================================================================
0001098A                            
0001098A                            Obj56_Type00:				; XREF: Obj56_TypeIndex
0001098A 4E75                       		rts	
0001098C                            ; ===========================================================================
0001098C                            
0001098C                            Obj56_Type01:				; XREF: Obj56_TypeIndex
0001098C 323C 0040                  		move.w	#$40,d1
00010990 7000                       		moveq	#0,d0
00010992 1038 FE68                  		move.b	($FFFFFE68).w,d0
00010996 6000                       		bra.s	Obj56_Move_LR
00010998                            ; ===========================================================================
00010998                            
00010998                            Obj56_Type02:				; XREF: Obj56_TypeIndex
00010998 323C 0080                  		move.w	#$80,d1
0001099C 7000                       		moveq	#0,d0
0001099E 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
000109A2                            
000109A2                            Obj56_Move_LR:
000109A2 0828 0000 0022             		btst	#0,$22(a0)
000109A8 6700                       		beq.s	loc_10416
000109AA 4440                       		neg.w	d0
000109AC D041                       		add.w	d1,d0
000109AE                            
000109AE                            loc_10416:
000109AE 3228 0034                  		move.w	$34(a0),d1
000109B2 9240                       		sub.w	d0,d1
000109B4 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
000109B8 4E75                       		rts	
000109BA                            ; ===========================================================================
000109BA                            
000109BA                            Obj56_Type03:				; XREF: Obj56_TypeIndex
000109BA 323C 0040                  		move.w	#$40,d1
000109BE 7000                       		moveq	#0,d0
000109C0 1038 FE68                  		move.b	($FFFFFE68).w,d0
000109C4 6000                       		bra.s	Obj56_Move_UD
000109C6                            ; ===========================================================================
000109C6                            
000109C6                            Obj56_Type04:				; XREF: Obj56_TypeIndex
000109C6 323C 0080                  		move.w	#$80,d1
000109CA 7000                       		moveq	#0,d0
000109CC 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
000109D0                            
000109D0                            Obj56_Move_UD:
000109D0 0828 0000 0022             		btst	#0,$22(a0)
000109D6 6700                       		beq.s	loc_10444
000109D8 4440                       		neg.w	d0
000109DA D041                       		add.w	d1,d0
000109DC                            
000109DC                            loc_10444:
000109DC 3228 0030                  		move.w	$30(a0),d1
000109E0 9240                       		sub.w	d0,d1
000109E2 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
000109E6 4E75                       		rts	
000109E8                            ; ===========================================================================
000109E8                            
000109E8                            Obj56_Type05:				; XREF: Obj56_TypeIndex
000109E8 4A28 0038                  		tst.b	$38(a0)
000109EC 6600                       		bne.s	loc_104A4
000109EE 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
000109F4 6600                       		bne.s	loc_1047A	; if not, branch
000109F6 0C28 0003 003C             		cmpi.b	#3,$3C(a0)
000109FC 6600                       		bne.s	loc_1047A
000109FE 4238 F7C9                  		clr.b	($FFFFF7C9).w
00010A02 3038 D008                  		move.w	($FFFFD008).w,d0
00010A06 B068 0008                  		cmp.w	8(a0),d0
00010A0A 6400                       		bcc.s	loc_1047A
00010A0C 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w
00010A12                            
00010A12                            loc_1047A:
00010A12 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010A16 7000                       		moveq	#0,d0
00010A18 1028 003C                  		move.b	$3C(a0),d0
00010A1C 0832 0000 0000             		btst	#0,(a2,d0.w)
00010A22 6700                       		beq.s	loc_104AE
00010A24 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00010A2A 6600                       		bne.s	loc_1049E	; if not, branch
00010A2C 0C00 0003                  		cmpi.b	#3,d0
00010A30 6600                       		bne.s	loc_1049E
00010A32 4238 F7C9                  		clr.b	($FFFFF7C9).w
00010A36                            
00010A36                            loc_1049E:
00010A36 117C 0001 0038             		move.b	#1,$38(a0)
00010A3C                            
00010A3C                            loc_104A4:
00010A3C 4A68 003A                  		tst.w	$3A(a0)
00010A40 6700                       		beq.s	loc_104C8
00010A42 5568 003A                  		subq.w	#2,$3A(a0)
00010A46                            
00010A46                            loc_104AE:
00010A46 3028 003A                  		move.w	$3A(a0),d0
00010A4A 0828 0000 0022             		btst	#0,$22(a0)
00010A50 6700                       		beq.s	loc_104BC
00010A52 4440                       		neg.w	d0
00010A54                            
00010A54                            loc_104BC:
00010A54 3228 0030                  		move.w	$30(a0),d1
00010A58 D240                       		add.w	d0,d1
00010A5A 3141 000C                  		move.w	d1,$C(a0)
00010A5E 4E75                       		rts	
00010A60                            ; ===========================================================================
00010A60                            
00010A60                            loc_104C8:
00010A60 5228 0028                  		addq.b	#1,$28(a0)
00010A64 4228 0038                  		clr.b	$38(a0)
00010A68 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010A6C 7000                       		moveq	#0,d0
00010A6E 1028 0023                  		move.b	$23(a0),d0
00010A72 67D2                       		beq.s	loc_104AE
00010A74 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00010A7A 60CA                       		bra.s	loc_104AE
00010A7C                            ; ===========================================================================
00010A7C                            
00010A7C                            Obj56_Type06:				; XREF: Obj56_TypeIndex
00010A7C 4A28 0038                  		tst.b	$38(a0)
00010A80 6600                       		bne.s	loc_10500
00010A82 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010A86 7000                       		moveq	#0,d0
00010A88 1028 003C                  		move.b	$3C(a0),d0
00010A8C 4A32 0000                  		tst.b	(a2,d0.w)
00010A90 6A00                       		bpl.s	loc_10512
00010A92 117C 0001 0038             		move.b	#1,$38(a0)
00010A98                            
00010A98                            loc_10500:
00010A98 7000                       		moveq	#0,d0
00010A9A 1028 0016                  		move.b	$16(a0),d0
00010A9E D040                       		add.w	d0,d0
00010AA0 B068 003A                  		cmp.w	$3A(a0),d0
00010AA4 6700                       		beq.s	loc_1052C
00010AA6 5468 003A                  		addq.w	#2,$3A(a0)
00010AAA                            
00010AAA                            loc_10512:
00010AAA 3028 003A                  		move.w	$3A(a0),d0
00010AAE 0828 0000 0022             		btst	#0,$22(a0)
00010AB4 6700                       		beq.s	loc_10520
00010AB6 4440                       		neg.w	d0
00010AB8                            
00010AB8                            loc_10520:
00010AB8 3228 0030                  		move.w	$30(a0),d1
00010ABC D240                       		add.w	d0,d1
00010ABE 3141 000C                  		move.w	d1,$C(a0)
00010AC2 4E75                       		rts	
00010AC4                            ; ===========================================================================
00010AC4                            
00010AC4                            loc_1052C:
00010AC4 5328 0028                  		subq.b	#1,$28(a0)
00010AC8 4228 0038                  		clr.b	$38(a0)
00010ACC 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010AD0 7000                       		moveq	#0,d0
00010AD2 1028 0023                  		move.b	$23(a0),d0
00010AD6 67D2                       		beq.s	loc_10512
00010AD8 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00010ADE 60CA                       		bra.s	loc_10512
00010AE0                            ; ===========================================================================
00010AE0                            
00010AE0                            Obj56_Type07:				; XREF: Obj56_TypeIndex
00010AE0 4A28 0038                  		tst.b	$38(a0)
00010AE4 6600                       		bne.s	loc_1055E
00010AE6 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch number $F been pressed?
00010AEA 6700                       		beq.s	locret_10578
00010AEC 117C 0001 0038             		move.b	#1,$38(a0)
00010AF2 4268 003A                  		clr.w	$3A(a0)
00010AF6                            
00010AF6                            loc_1055E:
00010AF6 5268 0008                  		addq.w	#1,8(a0)
00010AFA 3168 0008 0034             		move.w	8(a0),$34(a0)
00010B00 5268 003A                  		addq.w	#1,$3A(a0)
00010B04 0C68 0380 003A             		cmpi.w	#$380,$3A(a0)
00010B0A 6600                       		bne.s	locret_10578
00010B0C 4228 0028                  		clr.b	$28(a0)
00010B10                            
00010B10                            locret_10578:
00010B10 4E75                       		rts	
00010B12                            ; ===========================================================================
00010B12                            
00010B12                            Obj56_Type0C:				; XREF: Obj56_TypeIndex
00010B12 4A28 0038                  		tst.b	$38(a0)
00010B16 6600                       		bne.s	loc_10598
00010B18 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010B1C 7000                       		moveq	#0,d0
00010B1E 1028 003C                  		move.b	$3C(a0),d0
00010B22 0832 0000 0000             		btst	#0,(a2,d0.w)
00010B28 6700                       		beq.s	loc_105A2
00010B2A 117C 0001 0038             		move.b	#1,$38(a0)
00010B30                            
00010B30                            loc_10598:
00010B30 4A68 003A                  		tst.w	$3A(a0)
00010B34 6700                       		beq.s	loc_105C0
00010B36 5568 003A                  		subq.w	#2,$3A(a0)
00010B3A                            
00010B3A                            loc_105A2:
00010B3A 3028 003A                  		move.w	$3A(a0),d0
00010B3E 0828 0000 0022             		btst	#0,$22(a0)
00010B44 6700                       		beq.s	loc_105B4
00010B46 4440                       		neg.w	d0
00010B48 0640 0080                  		addi.w	#$80,d0
00010B4C                            
00010B4C                            loc_105B4:
00010B4C 3228 0034                  		move.w	$34(a0),d1
00010B50 D240                       		add.w	d0,d1
00010B52 3141 0008                  		move.w	d1,8(a0)
00010B56 4E75                       		rts	
00010B58                            ; ===========================================================================
00010B58                            
00010B58                            loc_105C0:
00010B58 5228 0028                  		addq.b	#1,$28(a0)
00010B5C 4228 0038                  		clr.b	$38(a0)
00010B60 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010B64 7000                       		moveq	#0,d0
00010B66 1028 0023                  		move.b	$23(a0),d0
00010B6A 67CE                       		beq.s	loc_105A2
00010B6C 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00010B72 60C6                       		bra.s	loc_105A2
00010B74                            ; ===========================================================================
00010B74                            
00010B74                            Obj56_Type0D:				; XREF: Obj56_TypeIndex
00010B74 4A28 0038                  		tst.b	$38(a0)
00010B78 6600                       		bne.s	loc_105F8
00010B7A 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010B7E 7000                       		moveq	#0,d0
00010B80 1028 003C                  		move.b	$3C(a0),d0
00010B84 4A32 0000                  		tst.b	(a2,d0.w)
00010B88 6A00                       		bpl.s	loc_10606
00010B8A 117C 0001 0038             		move.b	#1,$38(a0)
00010B90                            
00010B90                            loc_105F8:
00010B90 303C 0080                  		move.w	#$80,d0
00010B94 B068 003A                  		cmp.w	$3A(a0),d0
00010B98 6700                       		beq.s	loc_10624
00010B9A 5468 003A                  		addq.w	#2,$3A(a0)
00010B9E                            
00010B9E                            loc_10606:
00010B9E 3028 003A                  		move.w	$3A(a0),d0
00010BA2 0828 0000 0022             		btst	#0,$22(a0)
00010BA8 6700                       		beq.s	loc_10618
00010BAA 4440                       		neg.w	d0
00010BAC 0640 0080                  		addi.w	#$80,d0
00010BB0                            
00010BB0                            loc_10618:
00010BB0 3228 0034                  		move.w	$34(a0),d1
00010BB4 D240                       		add.w	d0,d1
00010BB6 3141 0008                  		move.w	d1,8(a0)
00010BBA 4E75                       		rts	
00010BBC                            ; ===========================================================================
00010BBC                            
00010BBC                            loc_10624:
00010BBC 5328 0028                  		subq.b	#1,$28(a0)
00010BC0 4228 0038                  		clr.b	$38(a0)
00010BC4 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010BC8 7000                       		moveq	#0,d0
00010BCA 1028 0023                  		move.b	$23(a0),d0
00010BCE 67CE                       		beq.s	loc_10606
00010BD0 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00010BD6 60C6                       		bra.s	loc_10606
00010BD8                            ; ===========================================================================
00010BD8                            
00010BD8                            Obj56_Type08:				; XREF: Obj56_TypeIndex
00010BD8 323C 0010                  		move.w	#$10,d1
00010BDC 7000                       		moveq	#0,d0
00010BDE 1038 FE88                  		move.b	($FFFFFE88).w,d0
00010BE2 E248                       		lsr.w	#1,d0
00010BE4 3638 FE8A                  		move.w	($FFFFFE8A).w,d3
00010BE8 6000                       		bra.s	Obj56_Move_Sqr
00010BEA                            ; ===========================================================================
00010BEA                            
00010BEA                            Obj56_Type09:				; XREF: Obj56_TypeIndex
00010BEA 323C 0030                  		move.w	#$30,d1
00010BEE 7000                       		moveq	#0,d0
00010BF0 1038 FE8C                  		move.b	($FFFFFE8C).w,d0
00010BF4 3638 FE8E                  		move.w	($FFFFFE8E).w,d3
00010BF8 6000                       		bra.s	Obj56_Move_Sqr
00010BFA                            ; ===========================================================================
00010BFA                            
00010BFA                            Obj56_Type0A:				; XREF: Obj56_TypeIndex
00010BFA 323C 0050                  		move.w	#$50,d1
00010BFE 7000                       		moveq	#0,d0
00010C00 1038 FE90                  		move.b	($FFFFFE90).w,d0
00010C04 3638 FE92                  		move.w	($FFFFFE92).w,d3
00010C08 6000                       		bra.s	Obj56_Move_Sqr
00010C0A                            ; ===========================================================================
00010C0A                            
00010C0A                            Obj56_Type0B:				; XREF: Obj56_TypeIndex
00010C0A 323C 0070                  		move.w	#$70,d1
00010C0E 7000                       		moveq	#0,d0
00010C10 1038 FE94                  		move.b	($FFFFFE94).w,d0
00010C14 3638 FE96                  		move.w	($FFFFFE96).w,d3
00010C18                            
00010C18                            Obj56_Move_Sqr:
00010C18 4A43                       		tst.w	d3
00010C1A 6600                       		bne.s	loc_1068E
00010C1C 5228 0022                  		addq.b	#1,$22(a0)
00010C20 0228 0003 0022             		andi.b	#3,$22(a0)
00010C26                            
00010C26                            loc_1068E:
00010C26 1428 0022                  		move.b	$22(a0),d2
00010C2A 0202 0003                  		andi.b	#3,d2
00010C2E 6600                       		bne.s	loc_106AE
00010C30 9041                       		sub.w	d1,d0
00010C32 D068 0034                  		add.w	$34(a0),d0
00010C36 3140 0008                  		move.w	d0,8(a0)
00010C3A 4441                       		neg.w	d1
00010C3C D268 0030                  		add.w	$30(a0),d1
00010C40 3141 000C                  		move.w	d1,$C(a0)
00010C44 4E75                       		rts	
00010C46                            ; ===========================================================================
00010C46                            
00010C46                            loc_106AE:
00010C46 5302                       		subq.b	#1,d2
00010C48 6600                       		bne.s	loc_106CC
00010C4A 5341                       		subq.w	#1,d1
00010C4C 9041                       		sub.w	d1,d0
00010C4E 4440                       		neg.w	d0
00010C50 D068 0030                  		add.w	$30(a0),d0
00010C54 3140 000C                  		move.w	d0,$C(a0)
00010C58 5241                       		addq.w	#1,d1
00010C5A D268 0034                  		add.w	$34(a0),d1
00010C5E 3141 0008                  		move.w	d1,8(a0)
00010C62 4E75                       		rts	
00010C64                            ; ===========================================================================
00010C64                            
00010C64                            loc_106CC:
00010C64 5302                       		subq.b	#1,d2
00010C66 6600                       		bne.s	loc_106EA
00010C68 5341                       		subq.w	#1,d1
00010C6A 9041                       		sub.w	d1,d0
00010C6C 4440                       		neg.w	d0
00010C6E D068 0034                  		add.w	$34(a0),d0
00010C72 3140 0008                  		move.w	d0,8(a0)
00010C76 5241                       		addq.w	#1,d1
00010C78 D268 0030                  		add.w	$30(a0),d1
00010C7C 3141 000C                  		move.w	d1,$C(a0)
00010C80 4E75                       		rts	
00010C82                            ; ===========================================================================
00010C82                            
00010C82                            loc_106EA:
00010C82 9041                       		sub.w	d1,d0
00010C84 D068 0030                  		add.w	$30(a0),d0
00010C88 3140 000C                  		move.w	d0,$C(a0)
00010C8C 4441                       		neg.w	d1
00010C8E D268 0034                  		add.w	$34(a0),d1
00010C92 3141 0008                  		move.w	d1,8(a0)
00010C96 4E75                       		rts	
00010C98                            ; ===========================================================================
00010C98                            ; ---------------------------------------------------------------------------
00010C98                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00010C98                            ; ---------------------------------------------------------------------------
00010C98                            Map_obj56:
00010C98                            	include "_maps\obj56.asm"
00010C98                            ; ---------------------------------------------------------------------------
00010C98                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00010C98                            ; ---------------------------------------------------------------------------
00010C98 0000 0000                  		dc.w byte_10710-Map_obj56, byte_10716-Map_obj56
00010C9C 0000 0000                  		dc.w byte_1072B-Map_obj56, byte_10736-Map_obj56
00010CA0 0000 0000                  		dc.w byte_1074B-Map_obj56, byte_1075B-Map_obj56
00010CA4 0000 0000                  		dc.w byte_10761-Map_obj56, byte_1076C-Map_obj56
00010CA8 01                         byte_10710:	dc.b 1
00010CA9 F00F 0061 F0               		dc.b $F0, $F, 0, $61, $F0
00010CAE 04                         byte_10716:	dc.b 4
00010CAF E00F 0061 E0               		dc.b $E0, $F, 0, $61, $E0
00010CB4 E00F 0061 00               		dc.b $E0, $F, 0, $61, 0
00010CB9 000F 0061 E0               		dc.b 0,	$F, 0, $61, $E0
00010CBE 000F 0061 00               		dc.b 0,	$F, 0, $61, 0
00010CC3 02                         byte_1072B:	dc.b 2
00010CC4 E00F 0061 F0               		dc.b $E0, $F, 0, $61, $F0
00010CC9 000F 0061 F0               		dc.b 0,	$F, 0, $61, $F0
00010CCE 04                         byte_10736:	dc.b 4
00010CCF E60F 0081 E0               		dc.b $E6, $F, 0, $81, $E0
00010CD4 E60F 0081 00               		dc.b $E6, $F, 0, $81, 0
00010CD9 000F 0081 E0               		dc.b 0,	$F, 0, $81, $E0
00010CDE 000F 0081 00               		dc.b 0,	$F, 0, $81, 0
00010CE3 03                         byte_1074B:	dc.b 3
00010CE4 D90F 0081 F0               		dc.b $D9, $F, 0, $81, $F0
00010CE9 F30F 0081 F0               		dc.b $F3, $F, 0, $81, $F0
00010CEE 0D0F 0081 F0               		dc.b $D, $F, 0,	$81, $F0
00010CF3 01                         byte_1075B:	dc.b 1
00010CF4 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
00010CF9 02                         byte_10761:	dc.b 2
00010CFA E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00010CFF 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00010D04 04                         byte_1076C:	dc.b 4
00010D05 F00F 0022 C0               		dc.b $F0, $F, 0, $22, $C0
00010D0A F00F 0022 E0               		dc.b $F0, $F, 0, $22, $E0
00010D0F F00F 0022 00               		dc.b $F0, $F, 0, $22, 0
00010D14 F00F 0022 20               		dc.b $F0, $F, 0, $22, $20
00010D1A 00                         		even
00010D1A 00                         		even
00010D1A                            
00010D1A                            ; ===========================================================================
00010D1A                            ; ---------------------------------------------------------------------------
00010D1A                            ; Object 57 - spiked balls (SYZ, LZ)
00010D1A                            ; ---------------------------------------------------------------------------
00010D1A                            
00010D1A                            Obj57:					; XREF: Obj_Index
00010D1A 7000                       		moveq	#0,d0
00010D1C 1028 0024                  		move.b	$24(a0),d0
00010D20 323B 0000                  		move.w	Obj57_Index(pc,d0.w),d1
00010D24 4EFB 1000                  		jmp	Obj57_Index(pc,d1.w)
00010D28                            ; ===========================================================================
00010D28 0000                       Obj57_Index:	dc.w Obj57_Main-Obj57_Index
00010D2A 0000                       		dc.w Obj57_Move-Obj57_Index
00010D2C 0000                       		dc.w Obj57_Display-Obj57_Index
00010D2E                            ; ===========================================================================
00010D2E                            
00010D2E                            Obj57_Main:				; XREF: Obj57_Index
00010D2E 5428 0024                  		addq.b	#2,$24(a0)
00010D32 217C 0000 0000 0004        		move.l	#Map_obj57,4(a0)
00010D3A 317C 03BA 0002             		move.w	#$3BA,2(a0)
00010D40 117C 0004 0001             		move.b	#4,1(a0)
00010D46 117C 0004 0018             		move.b	#4,$18(a0)
00010D4C 117C 0008 0019             		move.b	#8,$19(a0)
00010D52 3168 0008 003A             		move.w	8(a0),$3A(a0)
00010D58 3168 000C 0038             		move.w	$C(a0),$38(a0)
00010D5E 117C 0098 0020             		move.b	#$98,$20(a0)	; SYZ specific code (chain hurts Sonic)
00010D64 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010D6A 6600                       		bne.s	loc_107E8
00010D6C 117C 0000 0020             		move.b	#0,$20(a0)	; LZ specific code (chain doesn't hurt)
00010D72 317C 0310 0002             		move.w	#$310,2(a0)
00010D78 217C 0000 0000 0004        		move.l	#Map_obj57a,4(a0)
00010D80                            
00010D80                            loc_107E8:
00010D80 1228 0028                  		move.b	$28(a0),d1	; get object type
00010D84 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00010D88 4881                       		ext.w	d1
00010D8A E741                       		asl.w	#3,d1		; multiply by 8
00010D8C 3141 003E                  		move.w	d1,$3E(a0)	; set object twirl speed
00010D90 1028 0022                  		move.b	$22(a0),d0
00010D94 E418                       		ror.b	#2,d0
00010D96 0200 00C0                  		andi.b	#-$40,d0
00010D9A 1140 0026                  		move.b	d0,$26(a0)
00010D9E 45E8 0029                  		lea	$29(a0),a2
00010DA2 1228 0028                  		move.b	$28(a0),d1	; get object type
00010DA6 0241 0007                  		andi.w	#7,d1		; read only the	2nd digit
00010DAA 14FC 0000                  		move.b	#0,(a2)+
00010DAE 3601                       		move.w	d1,d3
00010DB0 E94B                       		lsl.w	#4,d3
00010DB2 1143 003C                  		move.b	d3,$3C(a0)
00010DB6 5341                       		subq.w	#1,d1		; set chain length (type-1)
00010DB8 6500                       		bcs.s	loc_10894
00010DBA 0828 0003 0028             		btst	#3,$28(a0)
00010DC0 6700                       		beq.s	Obj57_MakeChain
00010DC2 5341                       		subq.w	#1,d1
00010DC4 6500                       		bcs.s	loc_10894
00010DC6                            
00010DC6                            Obj57_MakeChain:
00010DC6 6100 D266                  		bsr.w	SingleObjLoad
00010DCA 6600                       		bne.s	loc_10894
00010DCC 5228 0029                  		addq.b	#1,$29(a0)
00010DD0 3A09                       		move.w	a1,d5
00010DD2 0445 D000                  		subi.w	#-$3000,d5
00010DD6 EC4D                       		lsr.w	#6,d5
00010DD8 0245 007F                  		andi.w	#$7F,d5
00010DDC 14C5                       		move.b	d5,(a2)+
00010DDE 137C 0004 0024             		move.b	#4,$24(a1)
00010DE4 1290                       		move.b	0(a0),0(a1)
00010DE6 2368 0004 0004             		move.l	4(a0),4(a1)
00010DEC 3368 0002 0002             		move.w	2(a0),2(a1)
00010DF2 1368 0001 0001             		move.b	1(a0),1(a1)
00010DF8 1368 0018 0018             		move.b	$18(a0),$18(a1)
00010DFE 1368 0019 0019             		move.b	$19(a0),$19(a1)
00010E04 1368 0020 0020             		move.b	$20(a0),$20(a1)
00010E0A 0403 0010                  		subi.b	#$10,d3
00010E0E 1343 003C                  		move.b	d3,$3C(a1)
00010E12 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00010E18 6600                       		bne.s	loc_10890
00010E1A 4A03                       		tst.b	d3
00010E1C 6600                       		bne.s	loc_10890
00010E1E 137C 0002 001A             		move.b	#2,$1A(a1)
00010E24                            
00010E24                            loc_10890:
00010E24 51C9 FFA0                  		dbf	d1,Obj57_MakeChain ; repeat for	length of chain
00010E28                            
00010E28                            loc_10894:
00010E28 3A08                       		move.w	a0,d5
00010E2A 0445 D000                  		subi.w	#-$3000,d5
00010E2E EC4D                       		lsr.w	#6,d5
00010E30 0245 007F                  		andi.w	#$7F,d5
00010E34 14C5                       		move.b	d5,(a2)+
00010E36 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010E3C 6600                       		bne.s	Obj57_Move
00010E3E 117C 008B 0020             		move.b	#$8B,$20(a0)	; if yes, make last spikeball larger
00010E44 117C 0001 001A             		move.b	#1,$1A(a0)	; use different	frame
00010E4A                            
00010E4A                            Obj57_Move:				; XREF: Obj57_Index
00010E4A 6100 0000                  		bsr.w	Obj57_MoveSub
00010E4E 6000 0000                  		bra.w	Obj57_ChkDel
00010E52                            ; ===========================================================================
00010E52                            
00010E52                            Obj57_MoveSub:				; XREF: Obj57_Move
00010E52 3028 003E                  		move.w	$3E(a0),d0
00010E56 D168 0026                  		add.w	d0,$26(a0)
00010E5A 1028 0026                  		move.b	$26(a0),d0
00010E5E 4EB9 0000 2C22             		jsr	(CalcSine).l
00010E64 3428 0038                  		move.w	$38(a0),d2
00010E68 3628 003A                  		move.w	$3A(a0),d3
00010E6C 45E8 0029                  		lea	$29(a0),a2
00010E70 7C00                       		moveq	#0,d6
00010E72 1C1A                       		move.b	(a2)+,d6
00010E74                            
00010E74                            Obj57_MoveLoop:
00010E74 7800                       		moveq	#0,d4
00010E76 181A                       		move.b	(a2)+,d4
00010E78 ED4C                       		lsl.w	#6,d4
00010E7A 0684 00FF D000             		addi.l	#$FFD000,d4
00010E80 2244                       		movea.l	d4,a1
00010E82 7800                       		moveq	#0,d4
00010E84 1829 003C                  		move.b	$3C(a1),d4
00010E88 2A04                       		move.l	d4,d5
00010E8A C9C0                       		muls.w	d0,d4
00010E8C E084                       		asr.l	#8,d4
00010E8E CBC1                       		muls.w	d1,d5
00010E90 E085                       		asr.l	#8,d5
00010E92 D842                       		add.w	d2,d4
00010E94 DA43                       		add.w	d3,d5
00010E96 3344 000C                  		move.w	d4,$C(a1)
00010E9A 3345 0008                  		move.w	d5,8(a1)
00010E9E 51CE FFD4                  		dbf	d6,Obj57_MoveLoop
00010EA2 4E75                       		rts	
00010EA4                            ; ===========================================================================
00010EA4                            
00010EA4                            Obj57_ChkDel:				; XREF: Obj57_Move
00010EA4 3028 003A                  		move.w	$3A(a0),d0
00010EA8 0240 FF80                  		andi.w	#$FF80,d0
00010EAC 3238 F700                  		move.w	($FFFFF700).w,d1
00010EB0 0441 0080                  		subi.w	#$80,d1
00010EB4 0241 FF80                  		andi.w	#$FF80,d1
00010EB8 9041                       		sub.w	d1,d0
00010EBA 0C40 0280                  		cmpi.w	#$280,d0
00010EBE 6200 0000                  		bhi.w	Obj57_Delete
00010EC2 6000 CCE4                  		bra.w	DisplaySprite
00010EC6                            ; ===========================================================================
00010EC6                            
00010EC6                            Obj57_Delete:				; XREF: Obj57_ChkDel
00010EC6 7400                       		moveq	#0,d2
00010EC8 45E8 0029                  		lea	$29(a0),a2
00010ECC 141A                       		move.b	(a2)+,d2
00010ECE                            
00010ECE                            Obj57_DelLoop:
00010ECE 7000                       		moveq	#0,d0
00010ED0 101A                       		move.b	(a2)+,d0
00010ED2 ED48                       		lsl.w	#6,d0
00010ED4 0680 00FF D000             		addi.l	#$FFD000,d0
00010EDA 2240                       		movea.l	d0,a1
00010EDC 6100 CD08                  		bsr.w	DeleteObject2
00010EE0 51CA FFEC                  		dbf	d2,Obj57_DelLoop ; delete all pieces of	chain
00010EE4                            
00010EE4 4E75                       		rts	
00010EE6                            ; ===========================================================================
00010EE6                            
00010EE6                            Obj57_Display:				; XREF: Obj57_Index
00010EE6 6000 CCC0                  		bra.w	DisplaySprite
00010EEA                            ; ===========================================================================
00010EEA                            ; ---------------------------------------------------------------------------
00010EEA                            ; Sprite mappings - chain of spiked balls (SYZ)
00010EEA                            ; ---------------------------------------------------------------------------
00010EEA                            Map_obj57:
00010EEA                            	include "_maps\obj57syz.asm"
00010EEA                            ; ---------------------------------------------------------------------------
00010EEA                            ; Sprite mappings - chain of spiked balls (SYZ)
00010EEA                            ; ---------------------------------------------------------------------------
00010EEA 0000                       		dc.w byte_10958-Map_obj57
00010EEC 01                         byte_10958:	dc.b 1
00010EED F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00010EF2                            		even
00010EF2                            		even
00010EF2                            
00010EF2                            ; ---------------------------------------------------------------------------
00010EF2                            ; Sprite mappings - spiked ball	on a chain (LZ)
00010EF2                            ; ---------------------------------------------------------------------------
00010EF2                            Map_obj57a:
00010EF2                            	include "_maps\obj57lz.asm"
00010EF2                            ; ---------------------------------------------------------------------------
00010EF2                            ; Sprite mappings - spiked ball	on a chain (LZ)
00010EF2                            ; ---------------------------------------------------------------------------
00010EF2 0000                       		dc.w byte_10964-Map_obj57a
00010EF4 0000                       		dc.w byte_1096A-Map_obj57a
00010EF6 0000                       		dc.w byte_10970-Map_obj57a
00010EF8 01                         byte_10964:	dc.b 1
00010EF9 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00010EFE 01                         byte_1096A:	dc.b 1
00010EFF F00F 0004 F0               		dc.b $F0, $F, 0, 4, $F0
00010F04 01                         byte_10970:	dc.b 1
00010F05 F805 0014 F8               		dc.b $F8, 5, 0,	$14, $F8
00010F0A                            		even
00010F0A                            		even
00010F0A                            
00010F0A                            ; ===========================================================================
00010F0A                            ; ---------------------------------------------------------------------------
00010F0A                            ; Object 58 - giant spiked balls (SYZ)
00010F0A                            ; ---------------------------------------------------------------------------
00010F0A                            
00010F0A                            Obj58:					; XREF: Obj_Index
00010F0A 7000                       		moveq	#0,d0
00010F0C 1028 0024                  		move.b	$24(a0),d0
00010F10 323B 0000                  		move.w	Obj58_Index(pc,d0.w),d1
00010F14 4EFB 1000                  		jmp	Obj58_Index(pc,d1.w)
00010F18                            ; ===========================================================================
00010F18 0000                       Obj58_Index:	dc.w Obj58_Main-Obj58_Index
00010F1A 0000                       		dc.w Obj58_Move-Obj58_Index
00010F1C                            ; ===========================================================================
00010F1C                            
00010F1C                            Obj58_Main:				; XREF: Obj58_Index
00010F1C 5428 0024                  		addq.b	#2,$24(a0)
00010F20 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0)
00010F28 317C 0396 0002             		move.w	#$396,2(a0)
00010F2E 117C 0004 0001             		move.b	#4,1(a0)
00010F34 117C 0004 0018             		move.b	#4,$18(a0)
00010F3A 117C 0018 0019             		move.b	#$18,$19(a0)
00010F40 3168 0008 003A             		move.w	8(a0),$3A(a0)
00010F46 3168 000C 0038             		move.w	$C(a0),$38(a0)
00010F4C 117C 0086 0020             		move.b	#$86,$20(a0)
00010F52 1228 0028                  		move.b	$28(a0),d1	; get object type
00010F56 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00010F5A 4881                       		ext.w	d1
00010F5C E741                       		asl.w	#3,d1		; multiply by 8
00010F5E 3141 003E                  		move.w	d1,$3E(a0)	; set object speed
00010F62 1028 0022                  		move.b	$22(a0),d0
00010F66 E418                       		ror.b	#2,d0
00010F68 0200 00C0                  		andi.b	#$C0,d0
00010F6C 1140 0026                  		move.b	d0,$26(a0)
00010F70 117C 0050 003C             		move.b	#$50,$3C(a0)	; set diameter of circle of rotation
00010F76                            
00010F76                            Obj58_Move:				; XREF: Obj58_Index
00010F76 7000                       		moveq	#0,d0
00010F78 1028 0028                  		move.b	$28(a0),d0	; get object type
00010F7C 0240 0007                  		andi.w	#7,d0		; read only the	2nd digit
00010F80 D040                       		add.w	d0,d0
00010F82 323B 0000                  		move.w	Obj58_TypeIndex(pc,d0.w),d1
00010F86 4EBB 1000                  		jsr	Obj58_TypeIndex(pc,d1.w)
00010F8A 3028 003A                  		move.w	$3A(a0),d0
00010F8E 0240 FF80                  		andi.w	#$FF80,d0
00010F92 3238 F700                  		move.w	($FFFFF700).w,d1
00010F96 0441 0080                  		subi.w	#$80,d1
00010F9A 0241 FF80                  		andi.w	#$FF80,d1
00010F9E 9041                       		sub.w	d1,d0
00010FA0 0C40 0280                  		cmpi.w	#$280,d0
00010FA4 6200 CC3E                  		bhi.w	DeleteObject
00010FA8 6000 CBFE                  		bra.w	DisplaySprite
00010FAC                            ; ===========================================================================
00010FAC 0000                       Obj58_TypeIndex:dc.w Obj58_Type00-Obj58_TypeIndex
00010FAE 0000                       		dc.w Obj58_Type01-Obj58_TypeIndex
00010FB0 0000                       		dc.w Obj58_Type02-Obj58_TypeIndex
00010FB2 0000                       		dc.w Obj58_Type03-Obj58_TypeIndex
00010FB4                            ; ===========================================================================
00010FB4                            
00010FB4                            Obj58_Type00:				; XREF: Obj58_TypeIndex
00010FB4 4E75                       		rts	
00010FB6                            ; ===========================================================================
00010FB6                            
00010FB6                            Obj58_Type01:				; XREF: Obj58_TypeIndex
00010FB6 323C 0060                  		move.w	#$60,d1
00010FBA 7000                       		moveq	#0,d0
00010FBC 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00010FC0 0828 0000 0022             		btst	#0,$22(a0)
00010FC6 6700                       		beq.s	loc_10A38
00010FC8 4440                       		neg.w	d0
00010FCA D041                       		add.w	d1,d0
00010FCC                            
00010FCC                            loc_10A38:
00010FCC 3228 003A                  		move.w	$3A(a0),d1
00010FD0 9240                       		sub.w	d0,d1
00010FD2 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
00010FD6 4E75                       		rts	
00010FD8                            ; ===========================================================================
00010FD8                            
00010FD8                            Obj58_Type02:				; XREF: Obj58_TypeIndex
00010FD8 323C 0060                  		move.w	#$60,d1
00010FDC 7000                       		moveq	#0,d0
00010FDE 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00010FE2 0828 0000 0022             		btst	#0,$22(a0)
00010FE8 6700                       		beq.s	loc_10A5C
00010FEA 4440                       		neg.w	d0
00010FEC 0640 0080                  		addi.w	#$80,d0
00010FF0                            
00010FF0                            loc_10A5C:
00010FF0 3228 0038                  		move.w	$38(a0),d1
00010FF4 9240                       		sub.w	d0,d1
00010FF6 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
00010FFA 4E75                       		rts	
00010FFC                            ; ===========================================================================
00010FFC                            
00010FFC                            Obj58_Type03:				; XREF: Obj58_TypeIndex
00010FFC 3028 003E                  		move.w	$3E(a0),d0
00011000 D168 0026                  		add.w	d0,$26(a0)
00011004 1028 0026                  		move.b	$26(a0),d0
00011008 4EB9 0000 2C22             		jsr	(CalcSine).l
0001100E 3428 0038                  		move.w	$38(a0),d2
00011012 3628 003A                  		move.w	$3A(a0),d3
00011016 7800                       		moveq	#0,d4
00011018 1828 003C                  		move.b	$3C(a0),d4
0001101C 2A04                       		move.l	d4,d5
0001101E C9C0                       		muls.w	d0,d4
00011020 E084                       		asr.l	#8,d4
00011022 CBC1                       		muls.w	d1,d5
00011024 E085                       		asr.l	#8,d5
00011026 D842                       		add.w	d2,d4
00011028 DA43                       		add.w	d3,d5
0001102A 3144 000C                  		move.w	d4,$C(a0)
0001102E 3145 0008                  		move.w	d5,8(a0)
00011032 4E75                       		rts	
00011034                            ; ===========================================================================
00011034                            ; ---------------------------------------------------------------------------
00011034                            ; Sprite mappings - SBZ	spiked ball on a chain
00011034                            ; ---------------------------------------------------------------------------
00011034                            Map_obj15b:
00011034                            	include "_maps\obj15sbz.asm"
00011034                            ; ---------------------------------------------------------------------------
00011034                            ; Sprite mappings - spiked ball on a chain (SBZ)
00011034                            ; ---------------------------------------------------------------------------
00011034 0000 0000                  		dc.w byte_10AA6-Map_obj15b, byte_10AC0-Map_obj15b
00011038 0000                       		dc.w byte_10AC6-Map_obj15b
0001103A 05                         byte_10AA6:	dc.b 5
0001103B E804 0000 F8               		dc.b $E8, 4, 0,	0, $F8
00011040 F00F 0002 F0               		dc.b $F0, $F, 0, 2, $F0
00011045 F801 0012 E8               		dc.b $F8, 1, 0,	$12, $E8
0001104A F801 0014 10               		dc.b $F8, 1, 0,	$14, $10
0001104F 1004 0016 F8               		dc.b $10, 4, 0,	$16, $F8
00011054 01                         byte_10AC0:	dc.b 1
00011055 F805 0020 F8               		dc.b $F8, 5, 0,	$20, $F8
0001105A 02                         byte_10AC6:	dc.b 2
0001105B F80D 0018 F0               		dc.b $F8, $D, 0, $18, $F0
00011060 E80D 1018 F0               		dc.b $E8, $D, $10, $18,	$F0
00011066 00                         		even
00011066 00                         		even
00011066                            
00011066                            ; ===========================================================================
00011066                            ; ---------------------------------------------------------------------------
00011066                            ; Object 59 - platforms	that move when you stand on them (SLZ)
00011066                            ; ---------------------------------------------------------------------------
00011066                            
00011066                            Obj59:					; XREF: Obj_Index
00011066 7000                       		moveq	#0,d0
00011068 1028 0024                  		move.b	$24(a0),d0
0001106C 323B 0000                  		move.w	Obj59_Index(pc,d0.w),d1
00011070 4EBB 1000                  		jsr	Obj59_Index(pc,d1.w)
00011074 3028 0032                  		move.w	$32(a0),d0
00011078 0240 FF80                  		andi.w	#$FF80,d0
0001107C 3238 F700                  		move.w	($FFFFF700).w,d1
00011080 0441 0080                  		subi.w	#$80,d1
00011084 0241 FF80                  		andi.w	#$FF80,d1
00011088 9041                       		sub.w	d1,d0
0001108A 0C40 0280                  		cmpi.w	#$280,d0
0001108E 6200 CB54                  		bhi.w	DeleteObject
00011092 6000 CB14                  		bra.w	DisplaySprite
00011096                            ; ===========================================================================
00011096 0000                       Obj59_Index:	dc.w Obj59_Main-Obj59_Index
00011098 0000                       		dc.w Obj59_Platform-Obj59_Index
0001109A 0000                       		dc.w Obj59_Action-Obj59_Index
0001109C 0000                       		dc.w Obj59_MakeMulti-Obj59_Index
0001109E                            
0001109E 2800                       Obj59_Var1:	dc.b $28, 0		; width, frame number
000110A0                            
000110A0 1001                       Obj59_Var2:	dc.b $10, 1		; width, action	type
000110A2 2001                       		dc.b $20, 1
000110A4 3401                       		dc.b $34, 1
000110A6 1003                       		dc.b $10, 3
000110A8 2003                       		dc.b $20, 3
000110AA 3403                       		dc.b $34, 3
000110AC 1401                       		dc.b $14, 1
000110AE 2401                       		dc.b $24, 1
000110B0 2C01                       		dc.b $2C, 1
000110B2 1403                       		dc.b $14, 3
000110B4 2403                       		dc.b $24, 3
000110B6 2C03                       		dc.b $2C, 3
000110B8 2005                       		dc.b $20, 5
000110BA 2007                       		dc.b $20, 7
000110BC 3009                       		dc.b $30, 9
000110BE                            ; ===========================================================================
000110BE                            
000110BE                            Obj59_Main:				; XREF: Obj59_Index
000110BE 5428 0024                  		addq.b	#2,$24(a0)
000110C2 7000                       		moveq	#0,d0
000110C4 1028 0028                  		move.b	$28(a0),d0
000110C8 6A00                       		bpl.s	Obj59_Main2
000110CA 5828 0024                  		addq.b	#4,$24(a0)
000110CE 0240 007F                  		andi.w	#$7F,d0
000110D2 C0FC 0006                  		mulu.w	#6,d0
000110D6 3140 003C                  		move.w	d0,$3C(a0)
000110DA 3140 003E                  		move.w	d0,$3E(a0)
000110DE 588F                       		addq.l	#4,sp
000110E0 4E75                       		rts	
000110E2                            ; ===========================================================================
000110E2                            
000110E2                            Obj59_Main2:
000110E2 E648                       		lsr.w	#3,d0
000110E4 0240 001E                  		andi.w	#$1E,d0
000110E8 45FB 00B4                  		lea	Obj59_Var1(pc,d0.w),a2
000110EC 115A 0019                  		move.b	(a2)+,$19(a0)
000110F0 115A 001A                  		move.b	(a2)+,$1A(a0)
000110F4 7000                       		moveq	#0,d0
000110F6 1028 0028                  		move.b	$28(a0),d0
000110FA D040                       		add.w	d0,d0
000110FC 0240 001E                  		andi.w	#$1E,d0
00011100 45FB 009E                  		lea	Obj59_Var2(pc,d0.w),a2
00011104 101A                       		move.b	(a2)+,d0
00011106 E548                       		lsl.w	#2,d0
00011108 3140 003C                  		move.w	d0,$3C(a0)
0001110C 115A 0028                  		move.b	(a2)+,$28(a0)
00011110 217C 0000 0000 0004        		move.l	#Map_obj59,4(a0)
00011118 317C 4000 0002             		move.w	#$4000,2(a0)
0001111E 117C 0004 0001             		move.b	#4,1(a0)
00011124 117C 0004 0018             		move.b	#4,$18(a0)
0001112A 3168 0008 0032             		move.w	8(a0),$32(a0)
00011130 3168 000C 0030             		move.w	$C(a0),$30(a0)
00011136                            
00011136                            Obj59_Platform:				; XREF: Obj59_Index
00011136 7200                       		moveq	#0,d1
00011138 1228 0019                  		move.b	$19(a0),d1
0001113C 4EB9 0000 789E             		jsr	(PlatformObject).l
00011142 6000 0000                  		bra.w	Obj59_Types
00011146                            ; ===========================================================================
00011146                            
00011146                            Obj59_Action:				; XREF: Obj59_Index
00011146 7200                       		moveq	#0,d1
00011148 1228 0019                  		move.b	$19(a0),d1
0001114C 4EB9 0000 7A12             		jsr	(ExitPlatform).l
00011152 3F28 0008                  		move.w	8(a0),-(sp)
00011156 6100 0000                  		bsr.w	Obj59_Types
0001115A 341F                       		move.w	(sp)+,d2
0001115C 4A10                       		tst.b	0(a0)
0001115E 6700                       		beq.s	locret_10BD4
00011160 4EF9 0000 7F7C             		jmp	(MvSonicOnPtfm2).l
00011166                            ; ===========================================================================
00011166                            
00011166                            locret_10BD4:
00011166 4E75                       		rts	
00011168                            ; ===========================================================================
00011168                            
00011168                            Obj59_Types:
00011168 7000                       		moveq	#0,d0
0001116A 1028 0028                  		move.b	$28(a0),d0
0001116E 0240 000F                  		andi.w	#$F,d0
00011172 D040                       		add.w	d0,d0
00011174 323B 0000                  		move.w	Obj59_TypeIndex(pc,d0.w),d1
00011178 4EFB 1000                  		jmp	Obj59_TypeIndex(pc,d1.w)
0001117C                            ; ===========================================================================
0001117C 0000 0000                  Obj59_TypeIndex:dc.w Obj59_Type00-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00011180 0000 0000                  		dc.w Obj59_Type02-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00011184 0000 0000                  		dc.w Obj59_Type04-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00011188 0000 0000                  		dc.w Obj59_Type06-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
0001118C 0000 0000                  		dc.w Obj59_Type08-Obj59_TypeIndex, Obj59_Type09-Obj59_TypeIndex
00011190                            ; ===========================================================================
00011190                            
00011190                            Obj59_Type00:				; XREF: Obj59_TypeIndex
00011190 4E75                       		rts	
00011192                            ; ===========================================================================
00011192                            
00011192                            Obj59_Type01:				; XREF: Obj59_TypeIndex
00011192 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; check	if Sonic is standing on	the object
00011198 6600                       		bne.s	locret_10C0C
0001119A 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
0001119E                            
0001119E                            locret_10C0C:
0001119E 4E75                       		rts	
000111A0                            ; ===========================================================================
000111A0                            
000111A0                            Obj59_Type02:				; XREF: Obj59_TypeIndex
000111A0 6100 0000                  		bsr.w	Obj59_Move
000111A4 3028 0034                  		move.w	$34(a0),d0
000111A8 4440                       		neg.w	d0
000111AA D068 0030                  		add.w	$30(a0),d0
000111AE 3140 000C                  		move.w	d0,$C(a0)
000111B2 4E75                       		rts	
000111B4                            ; ===========================================================================
000111B4                            
000111B4                            Obj59_Type04:				; XREF: Obj59_TypeIndex
000111B4 6100 0000                  		bsr.w	Obj59_Move
000111B8 3028 0034                  		move.w	$34(a0),d0
000111BC D068 0030                  		add.w	$30(a0),d0
000111C0 3140 000C                  		move.w	d0,$C(a0)
000111C4 4E75                       		rts	
000111C6                            ; ===========================================================================
000111C6                            
000111C6                            Obj59_Type06:				; XREF: Obj59_TypeIndex
000111C6 6100 0000                  		bsr.w	Obj59_Move
000111CA 3028 0034                  		move.w	$34(a0),d0
000111CE E240                       		asr.w	#1,d0
000111D0 4440                       		neg.w	d0
000111D2 D068 0030                  		add.w	$30(a0),d0
000111D6 3140 000C                  		move.w	d0,$C(a0)
000111DA 3028 0034                  		move.w	$34(a0),d0
000111DE D068 0032                  		add.w	$32(a0),d0
000111E2 3140 0008                  		move.w	d0,8(a0)
000111E6 4E75                       		rts	
000111E8                            ; ===========================================================================
000111E8                            
000111E8                            Obj59_Type08:				; XREF: Obj59_TypeIndex
000111E8 6100 0000                  		bsr.w	Obj59_Move
000111EC 3028 0034                  		move.w	$34(a0),d0
000111F0 E240                       		asr.w	#1,d0
000111F2 D068 0030                  		add.w	$30(a0),d0
000111F6 3140 000C                  		move.w	d0,$C(a0)
000111FA 3028 0034                  		move.w	$34(a0),d0
000111FE 4440                       		neg.w	d0
00011200 D068 0032                  		add.w	$32(a0),d0
00011204 3140 0008                  		move.w	d0,8(a0)
00011208 4E75                       		rts	
0001120A                            ; ===========================================================================
0001120A                            
0001120A                            Obj59_Type09:				; XREF: Obj59_TypeIndex
0001120A 6100 0000                  		bsr.w	Obj59_Move
0001120E 3028 0034                  		move.w	$34(a0),d0
00011212 4440                       		neg.w	d0
00011214 D068 0030                  		add.w	$30(a0),d0
00011218 3140 000C                  		move.w	d0,$C(a0)
0001121C 4A28 0028                  		tst.b	$28(a0)
00011220 6700 0000                  		beq.w	loc_10C94
00011224 4E75                       		rts	
00011226                            ; ===========================================================================
00011226                            
00011226                            loc_10C94:
00011226 0828 0003 0022             		btst	#3,$22(a0)
0001122C 6700                       		beq.s	Obj59_Delete
0001122E 08E9 0001 0022             		bset	#1,$22(a1)
00011234 08A9 0003 0022             		bclr	#3,$22(a1)
0001123A 137C 0002 0024             		move.b	#2,$24(a1)
00011240                            
00011240                            Obj59_Delete:
00011240 6000 C9A2                  		bra.w	DeleteObject
00011244                            
00011244                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011244                            
00011244                            
00011244                            Obj59_Move:				; XREF: Obj59_Type02; et al
00011244 3028 0038                  		move.w	$38(a0),d0
00011248 4A28 003A                  		tst.b	$3A(a0)
0001124C 6600                       		bne.s	loc_10CC8
0001124E 0C40 0800                  		cmpi.w	#$800,d0
00011252 6400                       		bcc.s	loc_10CD0
00011254 0640 0010                  		addi.w	#$10,d0
00011258 6000                       		bra.s	loc_10CD0
0001125A                            ; ===========================================================================
0001125A                            
0001125A                            loc_10CC8:
0001125A 4A40                       		tst.w	d0
0001125C 6700                       		beq.s	loc_10CD0
0001125E 0440 0010                  		subi.w	#$10,d0
00011262                            
00011262                            loc_10CD0:
00011262 3140 0038                  		move.w	d0,$38(a0)
00011266 48C0                       		ext.l	d0
00011268 E180                       		asl.l	#8,d0
0001126A D0A8 0034                  		add.l	$34(a0),d0
0001126E 2140 0034                  		move.l	d0,$34(a0)
00011272 4840                       		swap	d0
00011274 3428 003C                  		move.w	$3C(a0),d2
00011278 B042                       		cmp.w	d2,d0
0001127A 6300                       		bls.s	loc_10CF0
0001127C 117C 0001 003A             		move.b	#1,$3A(a0)
00011282                            
00011282                            loc_10CF0:
00011282 D442                       		add.w	d2,d2
00011284 B042                       		cmp.w	d2,d0
00011286 6600                       		bne.s	locret_10CFA
00011288 4228 0028                  		clr.b	$28(a0)
0001128C                            
0001128C                            locret_10CFA:
0001128C 4E75                       		rts	
0001128E                            ; End of function Obj59_Move
0001128E                            
0001128E                            ; ===========================================================================
0001128E                            
0001128E                            Obj59_MakeMulti:			; XREF: Obj59_Index
0001128E 5368 003C                  		subq.w	#1,$3C(a0)
00011292 6600                       		bne.s	Obj59_ChkDel
00011294 3168 003E 003C             		move.w	$3E(a0),$3C(a0)
0001129A 6100 CD92                  		bsr.w	SingleObjLoad
0001129E 6600                       		bne.s	Obj59_ChkDel
000112A0 12BC 0059                  		move.b	#$59,0(a1)	; duplicate the	object
000112A4 3368 0008 0008             		move.w	8(a0),8(a1)
000112AA 3368 000C 000C             		move.w	$C(a0),$C(a1)
000112B0 137C 000E 0028             		move.b	#$E,$28(a1)
000112B6                            
000112B6                            Obj59_ChkDel:
000112B6 588F                       		addq.l	#4,sp
000112B8 3028 0008                  		move.w	8(a0),d0
000112BC 0240 FF80                  		andi.w	#$FF80,d0
000112C0 3238 F700                  		move.w	($FFFFF700).w,d1
000112C4 0441 0080                  		subi.w	#$80,d1
000112C8 0241 FF80                  		andi.w	#$FF80,d1
000112CC 9041                       		sub.w	d1,d0
000112CE 0C40 0280                  		cmpi.w	#$280,d0
000112D2 6200 C910                  		bhi.w	DeleteObject
000112D6 4E75                       		rts	
000112D8                            ; ===========================================================================
000112D8                            ; ---------------------------------------------------------------------------
000112D8                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
000112D8                            ; ---------------------------------------------------------------------------
000112D8                            Map_obj59:
000112D8                            	include "_maps\obj59.asm"
000112D8                            ; ---------------------------------------------------------------------------
000112D8                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
000112D8                            ; ---------------------------------------------------------------------------
000112D8 0000                       		dc.w byte_10D4A-Map_obj59
000112DA 03                         byte_10D4A:	dc.b 3
000112DB F80F 0041 D8               		dc.b $F8, $F, 0, $41, $D8
000112E0 F80F 0041 F8               		dc.b $F8, $F, 0, $41, $F8
000112E5 F807 0041 18               		dc.b $F8, 7, 0,	$41, $18
000112EA                            		even
000112EA                            		even
000112EA                            
000112EA                            ; ===========================================================================
000112EA                            ; ---------------------------------------------------------------------------
000112EA                            ; Object 5A - platforms	moving in circles (SLZ)
000112EA                            ; ---------------------------------------------------------------------------
000112EA                            
000112EA                            Obj5A:					; XREF: Obj_Index
000112EA 7000                       		moveq	#0,d0
000112EC 1028 0024                  		move.b	$24(a0),d0
000112F0 323B 0000                  		move.w	Obj5A_Index(pc,d0.w),d1
000112F4 4EBB 1000                  		jsr	Obj5A_Index(pc,d1.w)
000112F8 3028 0032                  		move.w	$32(a0),d0
000112FC 0240 FF80                  		andi.w	#$FF80,d0
00011300 3238 F700                  		move.w	($FFFFF700).w,d1
00011304 0441 0080                  		subi.w	#$80,d1
00011308 0241 FF80                  		andi.w	#$FF80,d1
0001130C 9041                       		sub.w	d1,d0
0001130E 0C40 0280                  		cmpi.w	#$280,d0
00011312 6200 C8D0                  		bhi.w	DeleteObject
00011316 6000 C890                  		bra.w	DisplaySprite
0001131A                            ; ===========================================================================
0001131A 0000                       Obj5A_Index:	dc.w Obj5A_Main-Obj5A_Index
0001131C 0000                       		dc.w Obj5A_Platform-Obj5A_Index
0001131E 0000                       		dc.w Obj5A_Action-Obj5A_Index
00011320                            ; ===========================================================================
00011320                            
00011320                            Obj5A_Main:				; XREF: Obj5A_Index
00011320 5428 0024                  		addq.b	#2,$24(a0)
00011324 217C 0000 0000 0004        		move.l	#Map_obj5A,4(a0)
0001132C 317C 4000 0002             		move.w	#$4000,2(a0)
00011332 117C 0004 0001             		move.b	#4,1(a0)
00011338 117C 0004 0018             		move.b	#4,$18(a0)
0001133E 117C 0018 0019             		move.b	#$18,$19(a0)
00011344 3168 0008 0032             		move.w	8(a0),$32(a0)
0001134A 3168 000C 0030             		move.w	$C(a0),$30(a0)
00011350                            
00011350                            Obj5A_Platform:				; XREF: Obj5A_Index
00011350 7200                       		moveq	#0,d1
00011352 1228 0019                  		move.b	$19(a0),d1
00011356 4EB9 0000 789E             		jsr	(PlatformObject).l
0001135C 6000 0000                  		bra.w	Obj5A_Types
00011360                            ; ===========================================================================
00011360                            
00011360                            Obj5A_Action:				; XREF: Obj5A_Index
00011360 7200                       		moveq	#0,d1
00011362 1228 0019                  		move.b	$19(a0),d1
00011366 4EB9 0000 7A12             		jsr	(ExitPlatform).l
0001136C 3F28 0008                  		move.w	8(a0),-(sp)
00011370 6100 0000                  		bsr.w	Obj5A_Types
00011374 341F                       		move.w	(sp)+,d2
00011376 4EF9 0000 7F7C             		jmp	(MvSonicOnPtfm2).l
0001137C                            ; ===========================================================================
0001137C                            
0001137C                            Obj5A_Types:
0001137C 7000                       		moveq	#0,d0
0001137E 1028 0028                  		move.b	$28(a0),d0
00011382 0240 000C                  		andi.w	#$C,d0
00011386 E248                       		lsr.w	#1,d0
00011388 323B 0000                  		move.w	Obj5A_TypeIndex(pc,d0.w),d1
0001138C 4EFB 1000                  		jmp	Obj5A_TypeIndex(pc,d1.w)
00011390                            ; ===========================================================================
00011390 0000                       Obj5A_TypeIndex:dc.w Obj5A_Type00-Obj5A_TypeIndex
00011392 0000                       		dc.w Obj5A_Type04-Obj5A_TypeIndex
00011394                            ; ===========================================================================
00011394                            
00011394                            Obj5A_Type00:				; XREF: Obj5A_TypeIndex
00011394 1238 FE80                  		move.b	($FFFFFE80).w,d1
00011398 0401 0050                  		subi.b	#$50,d1
0001139C 4881                       		ext.w	d1
0001139E 1438 FE84                  		move.b	($FFFFFE84).w,d2
000113A2 0402 0050                  		subi.b	#$50,d2
000113A6 4882                       		ext.w	d2
000113A8 0828 0000 0028             		btst	#0,$28(a0)
000113AE 6700                       		beq.s	loc_10E24
000113B0 4441                       		neg.w	d1
000113B2 4442                       		neg.w	d2
000113B4                            
000113B4                            loc_10E24:
000113B4 0828 0001 0028             		btst	#1,$28(a0)
000113BA 6700                       		beq.s	loc_10E30
000113BC 4441                       		neg.w	d1
000113BE C342                       		exg	d1,d2
000113C0                            
000113C0                            loc_10E30:
000113C0 D268 0032                  		add.w	$32(a0),d1
000113C4 3141 0008                  		move.w	d1,8(a0)
000113C8 D468 0030                  		add.w	$30(a0),d2
000113CC 3142 000C                  		move.w	d2,$C(a0)
000113D0 4E75                       		rts	
000113D2                            ; ===========================================================================
000113D2                            
000113D2                            Obj5A_Type04:				; XREF: Obj5A_TypeIndex
000113D2 1238 FE80                  		move.b	($FFFFFE80).w,d1
000113D6 0401 0050                  		subi.b	#$50,d1
000113DA 4881                       		ext.w	d1
000113DC 1438 FE84                  		move.b	($FFFFFE84).w,d2
000113E0 0402 0050                  		subi.b	#$50,d2
000113E4 4882                       		ext.w	d2
000113E6 0828 0000 0028             		btst	#0,$28(a0)
000113EC 6700                       		beq.s	loc_10E62
000113EE 4441                       		neg.w	d1
000113F0 4442                       		neg.w	d2
000113F2                            
000113F2                            loc_10E62:
000113F2 0828 0001 0028             		btst	#1,$28(a0)
000113F8 6700                       		beq.s	loc_10E6E
000113FA 4441                       		neg.w	d1
000113FC C342                       		exg	d1,d2
000113FE                            
000113FE                            loc_10E6E:
000113FE 4441                       		neg.w	d1
00011400 D268 0032                  		add.w	$32(a0),d1
00011404 3141 0008                  		move.w	d1,8(a0)
00011408 D468 0030                  		add.w	$30(a0),d2
0001140C 3142 000C                  		move.w	d2,$C(a0)
00011410 4E75                       		rts	
00011412                            ; ===========================================================================
00011412                            ; ---------------------------------------------------------------------------
00011412                            ; Sprite mappings - platforms that move	in circles (SLZ)
00011412                            ; ---------------------------------------------------------------------------
00011412                            Map_obj5A:
00011412                            	include "_maps\obj5A.asm"
00011412                            ; ---------------------------------------------------------------------------
00011412                            ; Sprite mappings - platforms that move	in circles (SLZ)
00011412                            ; ---------------------------------------------------------------------------
00011412 0000                       		dc.w byte_10E84-Map_obj5A
00011414 02                         byte_10E84:	dc.b 2
00011415 F809 0051 E8               		dc.b $F8, 9, 0,	$51, $E8
0001141A F809 0851 00               		dc.b $F8, 9, 8,	$51, 0
00011420 00                         		even
00011420 00                         		even
00011420                            
00011420                            ; ===========================================================================
00011420                            ; ---------------------------------------------------------------------------
00011420                            ; Object 5B - blocks that form a staircase (SLZ)
00011420                            ; ---------------------------------------------------------------------------
00011420                            
00011420                            Obj5B:					; XREF: Obj_Index
00011420 7000                       		moveq	#0,d0
00011422 1028 0024                  		move.b	$24(a0),d0
00011426 323B 0000                  		move.w	Obj5B_Index(pc,d0.w),d1
0001142A 4EBB 1000                  		jsr	Obj5B_Index(pc,d1.w)
0001142E 3028 0030                  		move.w	$30(a0),d0
00011432 0240 FF80                  		andi.w	#$FF80,d0
00011436 3238 F700                  		move.w	($FFFFF700).w,d1
0001143A 0441 0080                  		subi.w	#$80,d1
0001143E 0241 FF80                  		andi.w	#$FF80,d1
00011442 9041                       		sub.w	d1,d0
00011444 0C40 0280                  		cmpi.w	#$280,d0
00011448 6200 C79A                  		bhi.w	DeleteObject
0001144C 6000 C75A                  		bra.w	DisplaySprite
00011450                            ; ===========================================================================
00011450 0000                       Obj5B_Index:	dc.w Obj5B_Main-Obj5B_Index
00011452 0000                       		dc.w Obj5B_Move-Obj5B_Index
00011454 0000                       		dc.w Obj5B_Solid-Obj5B_Index
00011456                            ; ===========================================================================
00011456                            
00011456                            Obj5B_Main:				; XREF: Obj5B_Index
00011456 5428 0024                  		addq.b	#2,$24(a0)
0001145A 7638                       		moveq	#$38,d3
0001145C 7801                       		moveq	#1,d4
0001145E 0828 0000 0022             		btst	#0,$22(a0)
00011464 6700                       		beq.s	loc_10EDA
00011466 763B                       		moveq	#$3B,d3
00011468 78FF                       		moveq	#-1,d4
0001146A                            
0001146A                            loc_10EDA:
0001146A 3428 0008                  		move.w	8(a0),d2
0001146E 2248                       		movea.l	a0,a1
00011470 7203                       		moveq	#3,d1
00011472 6000                       		bra.s	Obj5B_MakeBlocks
00011474                            ; ===========================================================================
00011474                            
00011474                            Obj5B_Loop:
00011474 6100 CBCE                  		bsr.w	SingleObjLoad2
00011478 6600 0000                  		bne.w	Obj5B_Move
0001147C 137C 0004 0024             		move.b	#4,$24(a1)
00011482                            
00011482                            Obj5B_MakeBlocks:			; XREF: Obj5B_Main
00011482 12BC 005B                  		move.b	#$5B,0(a1)	; load another block object
00011486 237C 0000 0000 0004        		move.l	#Map_obj5B,4(a1)
0001148E 337C 4000 0002             		move.w	#$4000,2(a1)
00011494 137C 0004 0001             		move.b	#4,1(a1)
0001149A 137C 0003 0018             		move.b	#3,$18(a1)
000114A0 137C 0010 0019             		move.b	#$10,$19(a1)
000114A6 1368 0028 0028             		move.b	$28(a0),$28(a1)
000114AC 3342 0008                  		move.w	d2,8(a1)
000114B0 3368 000C 000C             		move.w	$C(a0),$C(a1)
000114B6 3368 0008 0030             		move.w	8(a0),$30(a1)
000114BC 3369 000C 0032             		move.w	$C(a1),$32(a1)
000114C2 0642 0020                  		addi.w	#$20,d2
000114C6 1343 0037                  		move.b	d3,$37(a1)
000114CA 2348 003C                  		move.l	a0,$3C(a1)
000114CE D604                       		add.b	d4,d3
000114D0 51C9 FFA2                  		dbf	d1,Obj5B_Loop	; repeat sequence 3 times
000114D4                            
000114D4                            Obj5B_Move:				; XREF: Obj5B_Index
000114D4 7000                       		moveq	#0,d0
000114D6 1028 0028                  		move.b	$28(a0),d0
000114DA 0240 0007                  		andi.w	#7,d0
000114DE D040                       		add.w	d0,d0
000114E0 323B 0000                  		move.w	Obj5B_TypeIndex(pc,d0.w),d1
000114E4 4EBB 1000                  		jsr	Obj5B_TypeIndex(pc,d1.w)
000114E8                            
000114E8                            Obj5B_Solid:				; XREF: Obj5B_Index
000114E8 2468 003C                  		movea.l	$3C(a0),a2
000114EC 7000                       		moveq	#0,d0
000114EE 1028 0037                  		move.b	$37(a0),d0
000114F2 1032 0000                  		move.b	(a2,d0.w),d0
000114F6 D068 0032                  		add.w	$32(a0),d0
000114FA 3140 000C                  		move.w	d0,$C(a0)
000114FE 7200                       		moveq	#0,d1
00011500 1228 0019                  		move.b	$19(a0),d1
00011504 0641 000B                  		addi.w	#$B,d1
00011508 343C 0010                  		move.w	#$10,d2
0001150C 363C 0011                  		move.w	#$11,d3
00011510 3828 0008                  		move.w	8(a0),d4
00011514 6100 EA62                  		bsr.w	SolidObject
00011518 4A04                       		tst.b	d4
0001151A 6A00                       		bpl.s	loc_10F92
0001151C 1544 0036                  		move.b	d4,$36(a2)
00011520                            
00011520                            loc_10F92:
00011520 0828 0003 0022             		btst	#3,$22(a0)
00011526 6700                       		beq.s	locret_10FA0
00011528 157C 0001 0036             		move.b	#1,$36(a2)
0001152E                            
0001152E                            locret_10FA0:
0001152E 4E75                       		rts	
00011530                            ; ===========================================================================
00011530 0000                       Obj5B_TypeIndex:dc.w Obj5B_Type00-Obj5B_TypeIndex
00011532 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
00011534 0000                       		dc.w Obj5B_Type02-Obj5B_TypeIndex
00011536 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
00011538                            ; ===========================================================================
00011538                            
00011538                            Obj5B_Type00:				; XREF: Obj5B_TypeIndex
00011538 4A68 0034                  		tst.w	$34(a0)
0001153C 6600                       		bne.s	loc_10FC0
0001153E 0C28 0001 0036             		cmpi.b	#1,$36(a0)
00011544 6600                       		bne.s	locret_10FBE
00011546 317C 001E 0034             		move.w	#$1E,$34(a0)
0001154C                            
0001154C                            locret_10FBE:
0001154C 4E75                       		rts	
0001154E                            ; ===========================================================================
0001154E                            
0001154E                            loc_10FC0:
0001154E 5368 0034                  		subq.w	#1,$34(a0)
00011552 66F8                       		bne.s	locret_10FBE
00011554 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00011558 4E75                       		rts	
0001155A                            ; ===========================================================================
0001155A                            
0001155A                            Obj5B_Type02:				; XREF: Obj5B_TypeIndex
0001155A 4A68 0034                  		tst.w	$34(a0)
0001155E 6600                       		bne.s	loc_10FE0
00011560 4A28 0036                  		tst.b	$36(a0)
00011564 6A00                       		bpl.s	locret_10FDE
00011566 317C 003C 0034             		move.w	#$3C,$34(a0)
0001156C                            
0001156C                            locret_10FDE:
0001156C 4E75                       		rts	
0001156E                            ; ===========================================================================
0001156E                            
0001156E                            loc_10FE0:
0001156E 5368 0034                  		subq.w	#1,$34(a0)
00011572 6600                       		bne.s	loc_10FEC
00011574 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00011578 4E75                       		rts	
0001157A                            ; ===========================================================================
0001157A                            
0001157A                            loc_10FEC:
0001157A 43E8 0038                  		lea	$38(a0),a1
0001157E 3028 0034                  		move.w	$34(a0),d0
00011582 E408                       		lsr.b	#2,d0
00011584 0200 0001                  		andi.b	#1,d0
00011588 12C0                       		move.b	d0,(a1)+
0001158A 0A00 0001                  		eori.b	#1,d0
0001158E 12C0                       		move.b	d0,(a1)+
00011590 0A00 0001                  		eori.b	#1,d0
00011594 12C0                       		move.b	d0,(a1)+
00011596 0A00 0001                  		eori.b	#1,d0
0001159A 12C0                       		move.b	d0,(a1)+
0001159C 4E75                       		rts	
0001159E                            ; ===========================================================================
0001159E                            
0001159E                            Obj5B_Type01:				; XREF: Obj5B_TypeIndex
0001159E 43E8 0038                  		lea	$38(a0),a1
000115A2 0C11 0080                  		cmpi.b	#$80,(a1)
000115A6 6700                       		beq.s	locret_11038
000115A8 5211                       		addq.b	#1,(a1)
000115AA 7200                       		moveq	#0,d1
000115AC 1219                       		move.b	(a1)+,d1
000115AE 4841                       		swap	d1
000115B0 E289                       		lsr.l	#1,d1
000115B2 2401                       		move.l	d1,d2
000115B4 E289                       		lsr.l	#1,d1
000115B6 2601                       		move.l	d1,d3
000115B8 D682                       		add.l	d2,d3
000115BA 4841                       		swap	d1
000115BC 4842                       		swap	d2
000115BE 4843                       		swap	d3
000115C0 12C3                       		move.b	d3,(a1)+
000115C2 12C2                       		move.b	d2,(a1)+
000115C4 12C1                       		move.b	d1,(a1)+
000115C6                            
000115C6                            locret_11038:
000115C6 4E75                       		rts	
000115C8 4E75                       		rts	
000115CA                            ; ===========================================================================
000115CA                            ; ---------------------------------------------------------------------------
000115CA                            ; Sprite mappings - blocks that	form a staircase (SLZ)
000115CA                            ; ---------------------------------------------------------------------------
000115CA                            Map_obj5B:
000115CA                            	include "_maps\obj5B.asm"
000115CA                            ; ---------------------------------------------------------------------------
000115CA                            ; Sprite mappings - blocks that	form a staircase (SLZ)
000115CA                            ; ---------------------------------------------------------------------------
000115CA 0000                       		dc.w byte_1103E-Map_obj5B
000115CC 01                         byte_1103E:	dc.b 1
000115CD F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
000115D2                            		even
000115D2                            		even
000115D2                            
000115D2                            ; ===========================================================================
000115D2                            ; ---------------------------------------------------------------------------
000115D2                            ; Object 5C - metal girders in foreground (SLZ)
000115D2                            ; ---------------------------------------------------------------------------
000115D2                            
000115D2                            Obj5C:					; XREF: Obj_Index
000115D2 7000                       		moveq	#0,d0
000115D4 1028 0024                  		move.b	$24(a0),d0
000115D8 323B 0000                  		move.w	Obj5C_Index(pc,d0.w),d1
000115DC 4EFB 1000                  		jmp	Obj5C_Index(pc,d1.w)
000115E0                            ; ===========================================================================
000115E0 0000                       Obj5C_Index:	dc.w Obj5C_Main-Obj5C_Index
000115E2 0000                       		dc.w Obj5C_Display-Obj5C_Index
000115E4                            ; ===========================================================================
000115E4                            
000115E4                            Obj5C_Main:				; XREF: Obj5C_Index
000115E4 5428 0024                  		addq.b	#2,$24(a0)
000115E8 217C 0000 0000 0004        		move.l	#Map_obj5C,4(a0)
000115F0 317C 83CC 0002             		move.w	#$83CC,2(a0)
000115F6 117C 0010 0019             		move.b	#$10,$19(a0)
000115FC                            
000115FC                            Obj5C_Display:				; XREF: Obj5C_Index
000115FC 2238 F700                  		move.l	($FFFFF700).w,d1
00011600 D281                       		add.l	d1,d1
00011602 4841                       		swap	d1
00011604 4441                       		neg.w	d1
00011606 3141 0008                  		move.w	d1,8(a0)
0001160A 2238 F704                  		move.l	($FFFFF704).w,d1
0001160E D281                       		add.l	d1,d1
00011610 4841                       		swap	d1
00011612 0241 003F                  		andi.w	#$3F,d1
00011616 4441                       		neg.w	d1
00011618 0641 0100                  		addi.w	#$100,d1
0001161C 3141 000A                  		move.w	d1,$A(a0)
00011620 6000 C586                  		bra.w	DisplaySprite
00011624                            ; ===========================================================================
00011624                            ; ---------------------------------------------------------------------------
00011624                            ; Sprite mappings - metal girders in foreground	(SLZ)
00011624                            ; ---------------------------------------------------------------------------
00011624                            Map_obj5C:
00011624                            	include "_maps\obj5C.asm"
00011624                            ; ---------------------------------------------------------------------------
00011624                            ; Sprite mappings - metal girders in foreground	(SLZ)
00011624                            ; ---------------------------------------------------------------------------
00011624 0000                       		dc.w byte_11098-Map_obj5C
00011626 09                         byte_11098:	dc.b 9
00011627 800F 0000 F0               		dc.b $80, $F, 0, 0, $F0
0001162C A00F 1000 F0               		dc.b $A0, $F, $10, 0, $F0
00011631 C00F 0000 F0               		dc.b $C0, $F, 0, 0, $F0
00011636 E00F 1000 F0               		dc.b $E0, $F, $10, 0, $F0
0001163B 000F 0000 F0               		dc.b 0,	$F, 0, 0, $F0
00011640 200F 1000 F0               		dc.b $20, $F, $10, 0, $F0
00011645 400F 0000 F0               		dc.b $40, $F, 0, 0, $F0
0001164A 600F 1000 F0               		dc.b $60, $F, $10, 0, $F0
0001164F 7F0F 0000 F0               		dc.b $7F, $F, 0, 0, $F0
00011654                            		even
00011654                            		even
00011654                            
00011654                            ; ===========================================================================
00011654                            ; ---------------------------------------------------------------------------
00011654                            ; Object 1B - water surface (LZ)
00011654                            ; ---------------------------------------------------------------------------
00011654                            
00011654                            Obj1B:					; XREF: Obj_Index
00011654 7000                       		moveq	#0,d0
00011656 1028 0024                  		move.b	$24(a0),d0
0001165A 323B 0000                  		move.w	Obj1B_Index(pc,d0.w),d1
0001165E 4EFB 1000                  		jmp	Obj1B_Index(pc,d1.w)
00011662                            ; ===========================================================================
00011662 0000                       Obj1B_Index:	dc.w Obj1B_Main-Obj1B_Index
00011664 0000                       		dc.w Obj1B_Action-Obj1B_Index
00011666                            ; ===========================================================================
00011666                            
00011666                            Obj1B_Main:				; XREF: Obj1B_Index
00011666 5428 0024                  		addq.b	#2,$24(a0)
0001166A 217C 0000 0000 0004        		move.l	#Map_obj1B,4(a0)
00011672 317C C300 0002             		move.w	#$C300,2(a0)
00011678 117C 0004 0001             		move.b	#4,1(a0)
0001167E 117C 0080 0019             		move.b	#$80,$19(a0)
00011684 3168 0008 0030             		move.w	8(a0),$30(a0)
0001168A                            
0001168A                            Obj1B_Action:				; XREF: Obj1B_Index
0001168A 3238 F700                  		move.w	($FFFFF700).w,d1
0001168E 0241 FFE0                  		andi.w	#$FFE0,d1
00011692 D268 0030                  		add.w	$30(a0),d1
00011696 0838 0000 FE05             		btst	#0,($FFFFFE05).w
0001169C 6700                       		beq.s	loc_11114
0001169E 0641 0020                  		addi.w	#$20,d1
000116A2                            
000116A2                            loc_11114:
000116A2 3141 0008                  		move.w	d1,8(a0)	; match	obj x-position to screen position
000116A6 3238 F646                  		move.w	($FFFFF646).w,d1
000116AA 3141 000C                  		move.w	d1,$C(a0)	; match	obj y-position to water	height
000116AE 4A28 0032                  		tst.b	$32(a0)
000116B2 6600                       		bne.s	Obj1B_Animate
000116B4 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
000116BA 6700                       		beq.s	loc_1114A	; if not, branch
000116BC 5628 001A                  		addq.b	#3,$1A(a0)	; use different	frames
000116C0 117C 0001 0032             		move.b	#1,$32(a0)	; stop animation
000116C6 6000                       		bra.s	Obj1B_Display
000116C8                            ; ===========================================================================
000116C8                            
000116C8                            Obj1B_Animate:				; XREF: loc_11114
000116C8 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
000116CC 6600                       		bne.s	Obj1B_Display	; if yes, branch
000116CE 117C 0000 0032             		move.b	#0,$32(a0)	; resume animation
000116D4 5728 001A                  		subq.b	#3,$1A(a0)	; use normal frames
000116D8                            
000116D8                            loc_1114A:				; XREF: loc_11114
000116D8 5328 001E                  		subq.b	#1,$1E(a0)
000116DC 6A00                       		bpl.s	Obj1B_Display
000116DE 117C 0007 001E             		move.b	#7,$1E(a0)
000116E4 5228 001A                  		addq.b	#1,$1A(a0)
000116E8 0C28 0003 001A             		cmpi.b	#3,$1A(a0)
000116EE 6500                       		bcs.s	Obj1B_Display
000116F0 117C 0000 001A             		move.b	#0,$1A(a0)
000116F6                            
000116F6                            Obj1B_Display:
000116F6 6000 C4B0                  		bra.w	DisplaySprite
000116FA                            ; ===========================================================================
000116FA                            ; ---------------------------------------------------------------------------
000116FA                            ; Sprite mappings - water surface (LZ)
000116FA                            ; ---------------------------------------------------------------------------
000116FA                            Map_obj1B:
000116FA                            	include "_maps\obj1B.asm"
000116FA                            ; ---------------------------------------------------------------------------
000116FA                            ; Sprite mappings - water surface (LZ)
000116FA                            ; ---------------------------------------------------------------------------
000116FA 0000 0000                  		dc.w byte_11178-Map_obj1B, byte_11188-Map_obj1B
000116FE 0000 0000                  		dc.w byte_11198-Map_obj1B, byte_111A8-Map_obj1B
00011702 0000 0000                  		dc.w byte_111C7-Map_obj1B, byte_111E6-Map_obj1B
00011706 03                         byte_11178:	dc.b 3
00011707 FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
0001170C FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
00011711 FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
00011716 03                         byte_11188:	dc.b 3
00011717 FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
0001171C FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
00011721 FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
00011726 03                         byte_11198:	dc.b 3
00011727 FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
0001172C FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
00011731 FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
00011736 06                         byte_111A8:	dc.b 6
00011737 FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
0001173C FD0D 0000 C0               		dc.b $FD, $D, 0, 0, $C0
00011741 FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
00011746 FD0D 0000 00               		dc.b $FD, $D, 0, 0, 0
0001174B FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
00011750 FD0D 0000 40               		dc.b $FD, $D, 0, 0, $40
00011755 06                         byte_111C7:	dc.b 6
00011756 FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
0001175B FD0D 0008 C0               		dc.b $FD, $D, 0, 8, $C0
00011760 FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
00011765 FD0D 0008 00               		dc.b $FD, $D, 0, 8, 0
0001176A FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
0001176F FD0D 0008 40               		dc.b $FD, $D, 0, 8, $40
00011774 06                         byte_111E6:	dc.b 6
00011775 FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
0001177A FD0D 0800 C0               		dc.b $FD, $D, 8, 0, $C0
0001177F FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
00011784 FD0D 0800 00               		dc.b $FD, $D, 8, 0, 0
00011789 FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
0001178E FD0D 0800 40               		dc.b $FD, $D, 8, 0, $40
00011794 00                         		even
00011794 00                         		even
00011794                            
00011794                            ; ===========================================================================
00011794                            ; ---------------------------------------------------------------------------
00011794                            ; Object 0B - pole that	breaks (LZ)
00011794                            ; ---------------------------------------------------------------------------
00011794                            
00011794                            Obj0B:					; XREF: Obj_Index
00011794 7000                       		moveq	#0,d0
00011796 1028 0024                  		move.b	$24(a0),d0
0001179A 323B 0000                  		move.w	Obj0B_Index(pc,d0.w),d1
0001179E 4EFB 1000                  		jmp	Obj0B_Index(pc,d1.w)
000117A2                            ; ===========================================================================
000117A2 0000                       Obj0B_Index:	dc.w Obj0B_Main-Obj0B_Index
000117A4 0000                       		dc.w Obj0B_Action-Obj0B_Index
000117A6 0000                       		dc.w Obj0B_Display-Obj0B_Index
000117A8                            ; ===========================================================================
000117A8                            
000117A8                            Obj0B_Main:				; XREF: Obj0B_Index
000117A8 5428 0024                  		addq.b	#2,$24(a0)
000117AC 217C 0000 0000 0004        		move.l	#Map_obj0B,4(a0)
000117B4 317C 43DE 0002             		move.w	#$43DE,2(a0)
000117BA 117C 0004 0001             		move.b	#4,1(a0)
000117C0 117C 0008 0019             		move.b	#8,$19(a0)
000117C6 117C 0004 0018             		move.b	#4,$18(a0)
000117CC 117C 00E1 0020             		move.b	#$E1,$20(a0)
000117D2 7000                       		moveq	#0,d0
000117D4 1028 0028                  		move.b	$28(a0),d0	; get object type
000117D8 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
000117DC 3140 0030                  		move.w	d0,$30(a0)	; set breakage time
000117E0                            
000117E0                            Obj0B_Action:				; XREF: Obj0B_Index
000117E0 4A28 0032                  		tst.b	$32(a0)
000117E4 6700                       		beq.s	Obj0B_Grab
000117E6 4A68 0030                  		tst.w	$30(a0)
000117EA 6700                       		beq.s	Obj0B_MoveUp
000117EC 5368 0030                  		subq.w	#1,$30(a0)
000117F0 6600                       		bne.s	Obj0B_MoveUp
000117F2 117C 0001 001A             		move.b	#1,$1A(a0)	; break	the pole
000117F8 6000                       		bra.s	Obj0B_Release
000117FA                            ; ===========================================================================
000117FA                            
000117FA                            Obj0B_MoveUp:				; XREF: Obj0B_Action
000117FA 43F8 D000                  		lea	($FFFFD000).w,a1
000117FE 3028 000C                  		move.w	$C(a0),d0
00011802 0440 0018                  		subi.w	#$18,d0
00011806 0838 0000 F604             		btst	#0,($FFFFF604).w ; check if "up" is pressed
0001180C 6700                       		beq.s	Obj0B_MoveDown
0001180E 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
00011812 B069 000C                  		cmp.w	$C(a1),d0
00011816 6500                       		bcs.s	Obj0B_MoveDown
00011818 3340 000C                  		move.w	d0,$C(a1)
0001181C                            
0001181C                            Obj0B_MoveDown:
0001181C 0640 0024                  		addi.w	#$24,d0
00011820 0838 0001 F604             		btst	#1,($FFFFF604).w ; check if "down" is pressed
00011826 6700                       		beq.s	Obj0B_LetGo
00011828 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
0001182C B069 000C                  		cmp.w	$C(a1),d0
00011830 6400                       		bcc.s	Obj0B_LetGo
00011832 3340 000C                  		move.w	d0,$C(a1)
00011836                            
00011836                            Obj0B_LetGo:
00011836 1038 F603                  		move.b	($FFFFF603).w,d0
0001183A 0240 0070                  		andi.w	#$70,d0
0001183E 6700                       		beq.s	Obj0B_Display
00011840                            
00011840                            Obj0B_Release:				; XREF: Obj0B_Action
00011840 4228 0020                  		clr.b	$20(a0)
00011844 5428 0024                  		addq.b	#2,$24(a0)
00011848 4238 F7C8                  		clr.b	($FFFFF7C8).w
0001184C 4238 F7C9                  		clr.b	($FFFFF7C9).w
00011850 4228 0032                  		clr.b	$32(a0)
00011854 6000                       		bra.s	Obj0B_Display
00011856                            ; ===========================================================================
00011856                            
00011856                            Obj0B_Grab:				; XREF: Obj0B_Action
00011856 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	pole?
0001185A 6700                       		beq.s	Obj0B_Display	; if not, branch
0001185C 43F8 D000                  		lea	($FFFFD000).w,a1
00011860 3028 0008                  		move.w	8(a0),d0
00011864 0640 0014                  		addi.w	#$14,d0
00011868 B069 0008                  		cmp.w	8(a1),d0
0001186C 6400                       		bcc.s	Obj0B_Display
0001186E 4228 0021                  		clr.b	$21(a0)
00011872 0C29 0004 0024             		cmpi.b	#4,$24(a1)
00011878 6400                       		bcc.s	Obj0B_Display
0001187A 4269 0010                  		clr.w	$10(a1)		; stop Sonic moving
0001187E 4269 0012                  		clr.w	$12(a1)		; stop Sonic moving
00011882 3028 0008                  		move.w	8(a0),d0
00011886 0640 0014                  		addi.w	#$14,d0
0001188A 3340 0008                  		move.w	d0,8(a1)
0001188E 08A9 0000 0022             		bclr	#0,$22(a1)
00011894 137C 0011 001C             		move.b	#$11,$1C(a1)	; set Sonic's animation to "hanging" ($11)
0001189A 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
000118A0 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
000118A6 117C 0001 0032             		move.b	#1,$32(a0)	; begin	countdown to breakage
000118AC                            
000118AC                            Obj0B_Display:				; XREF: Obj0B_Index
000118AC 6000 E3A2                  		bra.w	MarkObjGone
000118B0                            ; ===========================================================================
000118B0                            ; ---------------------------------------------------------------------------
000118B0                            ; Sprite mappings - pole that breaks (LZ)
000118B0                            ; ---------------------------------------------------------------------------
000118B0                            Map_obj0B:
000118B0                            	include "_maps\obj0B.asm"
000118B0                            ; ---------------------------------------------------------------------------
000118B0                            ; Sprite mappings - pole that breaks (LZ)
000118B0                            ; ---------------------------------------------------------------------------
000118B0 0000                       		dc.w byte_11326-Map_obj0B
000118B2 0000                       		dc.w byte_11331-Map_obj0B
000118B4 02                         byte_11326:	dc.b 2			; normal pole
000118B5 E003 0000 FC               		dc.b $E0, 3, 0,	0, $FC
000118BA 0003 1000 FC               		dc.b 0,	3, $10,	0, $FC
000118BF 04                         byte_11331:	dc.b 4			; broken pole
000118C0 E001 0000 FC               		dc.b $E0, 1, 0,	0, $FC
000118C5 F005 0004 FC               		dc.b $F0, 5, 0,	4, $FC
000118CA 0005 1004 FC               		dc.b 0,	5, $10,	4, $FC
000118CF 1001 1000 FC               		dc.b $10, 1, $10, 0, $FC
000118D4                            		even
000118D4                            		even
000118D4                            
000118D4                            ; ===========================================================================
000118D4                            ; ---------------------------------------------------------------------------
000118D4                            ; Object 0C - flapping door (LZ)
000118D4                            ; ---------------------------------------------------------------------------
000118D4                            
000118D4                            Obj0C:					; XREF: Obj_Index
000118D4 7000                       		moveq	#0,d0
000118D6 1028 0024                  		move.b	$24(a0),d0
000118DA 323B 0000                  		move.w	Obj0C_Index(pc,d0.w),d1
000118DE 4EFB 1000                  		jmp	Obj0C_Index(pc,d1.w)
000118E2                            ; ===========================================================================
000118E2 0000                       Obj0C_Index:	dc.w Obj0C_Main-Obj0C_Index
000118E4 0000                       		dc.w Obj0C_OpenClose-Obj0C_Index
000118E6                            ; ===========================================================================
000118E6                            
000118E6                            Obj0C_Main:				; XREF: Obj0C_Index
000118E6 5428 0024                  		addq.b	#2,$24(a0)
000118EA 217C 0000 0000 0004        		move.l	#Map_obj0C,4(a0)
000118F2 317C 4328 0002             		move.w	#$4328,2(a0)
000118F8 0028 0004 0001             		ori.b	#4,1(a0)
000118FE 117C 0028 0019             		move.b	#$28,$19(a0)
00011904 7000                       		moveq	#0,d0
00011906 1028 0028                  		move.b	$28(a0),d0	; get object type
0001190A C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
0001190E 3140 0032                  		move.w	d0,$32(a0)	; set flap delay time
00011912                            
00011912                            Obj0C_OpenClose:			; XREF: Obj0C_Index
00011912 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00011916 6A00                       		bpl.s	Obj0C_Solid	; if time remains, branch
00011918 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	time delay
0001191E 0868 0000 001C             		bchg	#0,$1C(a0)	; open/close door
00011924 4A28 0001                  		tst.b	1(a0)
00011928 6A00                       		bpl.s	Obj0C_Solid
0001192A 303C 00BB                  		move.w	#$BB,d0
0001192E 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play door sound
00011934                            
00011934                            Obj0C_Solid:
00011934 43F9 0000 0000             		lea	(Ani_obj0C).l,a1
0001193A 6100 9306                  		bsr.w	AnimateSprite
0001193E 4238 F7C9                  		clr.b	($FFFFF7C9).w	; enable wind tunnel
00011942 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
00011946 6600                       		bne.s	Obj0C_Display	; if yes, branch
00011948 3038 D008                  		move.w	($FFFFD008).w,d0
0001194C B068 0008                  		cmp.w	8(a0),d0	; is Sonic in front of the door?
00011950 6400                       		bcc.s	Obj0C_Display	; if yes, branch
00011952 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00011958 323C 0013                  		move.w	#$13,d1
0001195C 343C 0020                  		move.w	#$20,d2
00011960 3602                       		move.w	d2,d3
00011962 5243                       		addq.w	#1,d3
00011964 3828 0008                  		move.w	8(a0),d4
00011968 6100 E60E                  		bsr.w	SolidObject	; make the door	solid
0001196C                            
0001196C                            Obj0C_Display:
0001196C 6000 E2E2                  		bra.w	MarkObjGone
00011970                            ; ===========================================================================
00011970                            Ani_obj0C:
00011970                            	include "_anim\obj0C.asm"
00011970                            ; ---------------------------------------------------------------------------
00011970                            ; Animation script - flapping door (LZ)
00011970                            ; ---------------------------------------------------------------------------
00011970 0000                       		dc.w byte_113E6-Ani_obj0C
00011972 0000                       		dc.w byte_113EC-Ani_obj0C
00011974 0300 0102 FE01             byte_113E6:	dc.b 3,	0, 1, 2, $FE, 1
0001197A 0302 0100 FE01             byte_113EC:	dc.b 3,	2, 1, 0, $FE, 1
00011980                            		even
00011980                            		even
00011980                            
00011980                            ; ---------------------------------------------------------------------------
00011980                            ; Sprite mappings - flapping door (LZ)
00011980                            ; ---------------------------------------------------------------------------
00011980                            Map_obj0C:
00011980                            	include "_maps\obj0C.asm"
00011980                            ; ---------------------------------------------------------------------------
00011980                            ; Sprite mappings - flapping door (LZ)
00011980                            ; ---------------------------------------------------------------------------
00011980 0000                       		dc.w byte_113F8-Map_obj0C
00011982 0000                       		dc.w byte_11403-Map_obj0C
00011984 0000                       		dc.w byte_1140E-Map_obj0C
00011986 02                         byte_113F8:	dc.b 2
00011987 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
0001198C 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00011991 02                         byte_11403:	dc.b 2
00011992 DA0F 0008 FB               		dc.b $DA, $F, 0, 8, $FB
00011997 060F 1008 FB               		dc.b 6,	$F, $10, 8, $FB
0001199C 02                         byte_1140E:	dc.b 2
0001199D D80D 0018 00               		dc.b $D8, $D, 0, $18, 0
000119A2 180D 1018 00               		dc.b $18, $D, $10, $18,	0
000119A8 00                         		even
000119A8 00                         		even
000119A8                            
000119A8                            ; ===========================================================================
000119A8                            ; ---------------------------------------------------------------------------
000119A8                            ; Object 71 - invisible	solid blocks
000119A8                            ; ---------------------------------------------------------------------------
000119A8                            
000119A8                            Obj71:					; XREF: Obj_Index
000119A8 7000                       		moveq	#0,d0
000119AA 1028 0024                  		move.b	$24(a0),d0
000119AE 323B 0000                  		move.w	Obj71_Index(pc,d0.w),d1
000119B2 4EFB 1000                  		jmp	Obj71_Index(pc,d1.w)
000119B6                            ; ===========================================================================
000119B6 0000                       Obj71_Index:	dc.w Obj71_Main-Obj71_Index
000119B8 0000                       		dc.w Obj71_Solid-Obj71_Index
000119BA                            ; ===========================================================================
000119BA                            
000119BA                            Obj71_Main:				; XREF: Obj71_Index
000119BA 5428 0024                  		addq.b	#2,$24(a0)
000119BE 217C 0000 0000 0004        		move.l	#Map_obj71,4(a0)
000119C6 317C 8680 0002             		move.w	#$8680,2(a0)
000119CC 0028 0004 0001             		ori.b	#4,1(a0)
000119D2 1028 0028                  		move.b	$28(a0),d0	; get object type
000119D6 1200                       		move.b	d0,d1
000119D8 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st byte
000119DC 0640 0010                  		addi.w	#$10,d0
000119E0 E248                       		lsr.w	#1,d0
000119E2 1140 0019                  		move.b	d0,$19(a0)	; set object width
000119E6 0241 000F                  		andi.w	#$F,d1		; read only the	2nd byte
000119EA 5241                       		addq.w	#1,d1
000119EC E749                       		lsl.w	#3,d1
000119EE 1141 0016                  		move.b	d1,$16(a0)	; set object height
000119F2                            
000119F2                            Obj71_Solid:				; XREF: Obj71_Index
000119F2 6100 C42E                  		bsr.w	ChkObjOnScreen
000119F6 6600                       		bne.s	Obj71_ChkDel
000119F8 7200                       		moveq	#0,d1
000119FA 1228 0019                  		move.b	$19(a0),d1
000119FE 0641 000B                  		addi.w	#$B,d1
00011A02 7400                       		moveq	#0,d2
00011A04 1428 0016                  		move.b	$16(a0),d2
00011A08 3602                       		move.w	d2,d3
00011A0A 5243                       		addq.w	#1,d3
00011A0C 3828 0008                  		move.w	8(a0),d4
00011A10 6100 E5A8                  		bsr.w	SolidObject71
00011A14                            
00011A14                            Obj71_ChkDel:
00011A14 3028 0008                  		move.w	8(a0),d0
00011A18 0240 FF80                  		andi.w	#$FF80,d0
00011A1C 3238 F700                  		move.w	($FFFFF700).w,d1
00011A20 0441 0080                  		subi.w	#$80,d1
00011A24 0241 FF80                  		andi.w	#$FF80,d1
00011A28 9041                       		sub.w	d1,d0
00011A2A 0C40 0280                  		cmpi.w	#$280,d0
00011A2E 6200                       		bhi.s	Obj71_Delete
00011A30 4A78 FE08                  		tst.w	($FFFFFE08).w	; are you using	debug mode?
00011A34 6700                       		beq.s	Obj71_NoDisplay	; if not, branch
00011A36 4EFA C170                  		jmp	DisplaySprite	; if yes, display the object
00011A3A                            ; ===========================================================================
00011A3A                            
00011A3A                            Obj71_NoDisplay:
00011A3A 4E75                       		rts	
00011A3C                            ; ===========================================================================
00011A3C                            
00011A3C                            Obj71_Delete:
00011A3C 4EFA C1A6                  		jmp	DeleteObject
00011A40                            ; ===========================================================================
00011A40                            ; ---------------------------------------------------------------------------
00011A40                            ; Sprite mappings - invisible solid blocks
00011A40                            ; ---------------------------------------------------------------------------
00011A40                            Map_obj71:
00011A40                            	include "_maps\obj71.asm"
00011A40                            ; ---------------------------------------------------------------------------
00011A40                            ; Sprite mappings - invisible solid blocks
00011A40                            ; ---------------------------------------------------------------------------
00011A40 0000                       		dc.w byte_114BC-Map_obj71
00011A42 0000                       		dc.w byte_114D1-Map_obj71
00011A44 0000                       		dc.w byte_114E6-Map_obj71
00011A46 04                         byte_114BC:	dc.b 4
00011A47 F005 0018 F0               		dc.b $F0, 5, 0,	$18, $F0
00011A4C F005 0018 00               		dc.b $F0, 5, 0,	$18, 0
00011A51 0005 0018 F0               		dc.b 0,	5, 0, $18, $F0
00011A56 0005 0018 00               		dc.b 0,	5, 0, $18, 0
00011A5B 04                         byte_114D1:	dc.b 4
00011A5C E005 0018 C0               		dc.b $E0, 5, 0,	$18, $C0
00011A61 E005 0018 30               		dc.b $E0, 5, 0,	$18, $30
00011A66 1005 0018 C0               		dc.b $10, 5, 0,	$18, $C0
00011A6B 1005 0018 30               		dc.b $10, 5, 0,	$18, $30
00011A70 04                         byte_114E6:	dc.b 4
00011A71 E005 0018 80               		dc.b $E0, 5, 0,	$18, $80
00011A76 E005 0018 70               		dc.b $E0, 5, 0,	$18, $70
00011A7B 1005 0018 80               		dc.b $10, 5, 0,	$18, $80
00011A80 1005 0018 70               		dc.b $10, 5, 0,	$18, $70
00011A86 00                         		even
00011A86 00                         		even
00011A86                            
00011A86                            ; ===========================================================================
00011A86                            ; ---------------------------------------------------------------------------
00011A86                            ; Object 5D - fans (SLZ)
00011A86                            ; ---------------------------------------------------------------------------
00011A86                            
00011A86                            Obj5D:					; XREF: Obj_Index
00011A86 7000                       		moveq	#0,d0
00011A88 1028 0024                  		move.b	$24(a0),d0
00011A8C 323B 0000                  		move.w	Obj5D_Index(pc,d0.w),d1
00011A90 4EFB 1000                  		jmp	Obj5D_Index(pc,d1.w)
00011A94                            ; ===========================================================================
00011A94 0000                       Obj5D_Index:	dc.w Obj5D_Main-Obj5D_Index
00011A96 0000                       		dc.w Obj5D_Delay-Obj5D_Index
00011A98                            ; ===========================================================================
00011A98                            
00011A98                            Obj5D_Main:				; XREF: Obj5D_Index
00011A98 5428 0024                  		addq.b	#2,$24(a0)
00011A9C 217C 0000 0000 0004        		move.l	#Map_obj5D,4(a0)
00011AA4 317C 43A0 0002             		move.w	#$43A0,2(a0)
00011AAA 0028 0004 0001             		ori.b	#4,1(a0)
00011AB0 117C 0010 0019             		move.b	#$10,$19(a0)
00011AB6 117C 0004 0018             		move.b	#4,$18(a0)
00011ABC                            
00011ABC                            Obj5D_Delay:				; XREF: Obj5D_Index
00011ABC 0828 0001 0028             		btst	#1,$28(a0)	; is object type 02/03?
00011AC2 6600                       		bne.s	Obj5D_Blow	; if yes, branch
00011AC4 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00011AC8 6A00                       		bpl.s	Obj5D_Blow	; if time remains, branch
00011ACA 317C 0078 0030             		move.w	#120,$30(a0)	; set delay to 2 seconds
00011AD0 0868 0000 0032             		bchg	#0,$32(a0)	; switch fan on/off
00011AD6 6700                       		beq.s	Obj5D_Blow	; if fan is off, branch
00011AD8 317C 00B4 0030             		move.w	#180,$30(a0)	; set delay to 3 seconds
00011ADE                            
00011ADE                            Obj5D_Blow:
00011ADE 4A28 0032                  		tst.b	$32(a0)		; is fan switched on?
00011AE2 6600 0000                  		bne.w	Obj5D_ChkDel	; if not, branch
00011AE6 43F8 D000                  		lea	($FFFFD000).w,a1
00011AEA 3029 0008                  		move.w	8(a1),d0
00011AEE 9068 0008                  		sub.w	8(a0),d0
00011AF2 0828 0000 0022             		btst	#0,$22(a0)
00011AF8 6600                       		bne.s	Obj5D_ChkSonic
00011AFA 4440                       		neg.w	d0
00011AFC                            
00011AFC                            Obj5D_ChkSonic:
00011AFC 0640 0050                  		addi.w	#$50,d0
00011B00 0C40 00F0                  		cmpi.w	#$F0,d0		; is Sonic more	than $A0 pixels	from the fan?
00011B04 6400                       		bcc.s	Obj5D_Animate	; if yes, branch
00011B06 3229 000C                  		move.w	$C(a1),d1
00011B0A 0641 0060                  		addi.w	#$60,d1
00011B0E 9268 000C                  		sub.w	$C(a0),d1
00011B12 6500                       		bcs.s	Obj5D_Animate
00011B14 0C41 0070                  		cmpi.w	#$70,d1
00011B18 6400                       		bcc.s	Obj5D_Animate
00011B1A 0440 0050                  		subi.w	#$50,d0
00011B1E 6400                       		bcc.s	loc_1159A
00011B20 4640                       		not.w	d0
00011B22 D040                       		add.w	d0,d0
00011B24                            
00011B24                            loc_1159A:
00011B24 0640 0060                  		addi.w	#$60,d0
00011B28 0828 0000 0022             		btst	#0,$22(a0)
00011B2E 6600                       		bne.s	loc_115A8
00011B30 4440                       		neg.w	d0
00011B32                            
00011B32                            loc_115A8:
00011B32 4400                       		neg.b	d0
00011B34 E840                       		asr.w	#4,d0
00011B36 0828 0000 0028             		btst	#0,$28(a0)
00011B3C 6700                       		beq.s	Obj5D_MoveSonic
00011B3E 4440                       		neg.w	d0
00011B40                            
00011B40                            Obj5D_MoveSonic:
00011B40 D169 0008                  		add.w	d0,8(a1)	; push Sonic away from the fan
00011B44                            
00011B44                            Obj5D_Animate:				; XREF: Obj5D_ChkSonic
00011B44 5328 001E                  		subq.b	#1,$1E(a0)
00011B48 6A00                       		bpl.s	Obj5D_ChkDel
00011B4A 117C 0000 001E             		move.b	#0,$1E(a0)
00011B50 5228 001B                  		addq.b	#1,$1B(a0)
00011B54 0C28 0003 001B             		cmpi.b	#3,$1B(a0)
00011B5A 6500                       		bcs.s	loc_115D8
00011B5C 117C 0000 001B             		move.b	#0,$1B(a0)
00011B62                            
00011B62                            loc_115D8:
00011B62 7000                       		moveq	#0,d0
00011B64 0828 0000 0028             		btst	#0,$28(a0)
00011B6A 6700                       		beq.s	loc_115E4
00011B6C 7002                       		moveq	#2,d0
00011B6E                            
00011B6E                            loc_115E4:
00011B6E D028 001B                  		add.b	$1B(a0),d0
00011B72 1140 001A                  		move.b	d0,$1A(a0)
00011B76                            
00011B76                            Obj5D_ChkDel:				; XREF: Obj5D_Animate
00011B76 6100 C030                  		bsr.w	DisplaySprite
00011B7A 3028 0008                  		move.w	8(a0),d0
00011B7E 0240 FF80                  		andi.w	#$FF80,d0
00011B82 3238 F700                  		move.w	($FFFFF700).w,d1
00011B86 0441 0080                  		subi.w	#$80,d1
00011B8A 0241 FF80                  		andi.w	#$FF80,d1
00011B8E 9041                       		sub.w	d1,d0
00011B90 0C40 0280                  		cmpi.w	#$280,d0
00011B94 6200 C04E                  		bhi.w	DeleteObject
00011B98 4E75                       		rts	
00011B9A                            ; ===========================================================================
00011B9A                            ; ---------------------------------------------------------------------------
00011B9A                            ; Sprite mappings - fans (SLZ)
00011B9A                            ; ---------------------------------------------------------------------------
00011B9A                            Map_obj5D:
00011B9A                            	include "_maps\obj5D.asm"
00011B9A                            ; ---------------------------------------------------------------------------
00011B9A                            ; Sprite mappings - fans (SLZ)
00011B9A                            ; ---------------------------------------------------------------------------
00011B9A 0000 0000                  		dc.w byte_1161A-Map_obj5D, byte_11625-Map_obj5D
00011B9E 0000 0000                  		dc.w byte_11630-Map_obj5D, byte_11625-Map_obj5D
00011BA2 0000                       		dc.w byte_1161A-Map_obj5D
00011BA4 02                         byte_1161A:	dc.b 2
00011BA5 F009 0000 F8               		dc.b $F0, 9, 0,	0, $F8
00011BAA 000D 0006 F0               		dc.b 0,	$D, 0, 6, $F0
00011BAF 02                         byte_11625:	dc.b 2
00011BB0 F00D 000E F0               		dc.b $F0, $D, 0, $E, $F0
00011BB5 000D 0016 F0               		dc.b 0,	$D, 0, $16, $F0
00011BBA 02                         byte_11630:	dc.b 2
00011BBB F00D 001E F0               		dc.b $F0, $D, 0, $1E, $F0
00011BC0 0009 0026 F8               		dc.b 0,	9, 0, $26, $F8
00011BC6 00                         		even
00011BC6 00                         		even
00011BC6                            
00011BC6                            ; ===========================================================================
00011BC6                            ; ---------------------------------------------------------------------------
00011BC6                            ; Object 5E - seesaws (SLZ)
00011BC6                            ; ---------------------------------------------------------------------------
00011BC6                            
00011BC6                            Obj5E:					; XREF: Obj_Index
00011BC6 7000                       		moveq	#0,d0
00011BC8 1028 0024                  		move.b	$24(a0),d0
00011BCC 323B 0000                  		move.w	Obj5E_Index(pc,d0.w),d1
00011BD0 4EBB 1000                  		jsr	Obj5E_Index(pc,d1.w)
00011BD4 3028 0030                  		move.w	$30(a0),d0
00011BD8 0240 FF80                  		andi.w	#$FF80,d0
00011BDC 3238 F700                  		move.w	($FFFFF700).w,d1
00011BE0 0441 0080                  		subi.w	#$80,d1
00011BE4 0241 FF80                  		andi.w	#$FF80,d1
00011BE8 9041                       		sub.w	d1,d0
00011BEA 6B00 BFF8                  		bmi.w	DeleteObject
00011BEE 0C40 0280                  		cmpi.w	#$280,d0
00011BF2 6200 BFF0                  		bhi.w	DeleteObject
00011BF6 6000 BFB0                  		bra.w	DisplaySprite
00011BFA                            ; ===========================================================================
00011BFA 0000                       Obj5E_Index:	dc.w Obj5E_Main-Obj5E_Index
00011BFC 0000                       		dc.w Obj5E_Slope-Obj5E_Index
00011BFE 0000                       		dc.w Obj5E_Slope2-Obj5E_Index
00011C00 0000                       		dc.w Obj5E_Spikeball-Obj5E_Index
00011C02 0000                       		dc.w Obj5E_MoveSpike-Obj5E_Index
00011C04 0000                       		dc.w Obj5E_SpikeFall-Obj5E_Index
00011C06                            ; ===========================================================================
00011C06                            
00011C06                            Obj5E_Main:				; XREF: Obj5E_Index
00011C06 5428 0024                  		addq.b	#2,$24(a0)
00011C0A 217C 0000 0000 0004        		move.l	#Map_obj5E,4(a0)
00011C12 317C 0374 0002             		move.w	#$374,2(a0)
00011C18 0028 0004 0001             		ori.b	#4,1(a0)
00011C1E 117C 0004 0018             		move.b	#4,$18(a0)
00011C24 117C 0030 0019             		move.b	#$30,$19(a0)
00011C2A 3168 0008 0030             		move.w	8(a0),$30(a0)
00011C30 4A28 0028                  		tst.b	$28(a0)		; is object type 00 ?
00011C34 6600                       		bne.s	loc_116D2	; if not, branch
00011C36 6100 C40C                  		bsr.w	SingleObjLoad2
00011C3A 6600                       		bne.s	loc_116D2
00011C3C 12BC 005E                  		move.b	#$5E,0(a1)	; load spikeball object
00011C40 5C29 0024                  		addq.b	#6,$24(a1)
00011C44 3368 0008 0008             		move.w	8(a0),8(a1)
00011C4A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011C50 1368 0022 0022             		move.b	$22(a0),$22(a1)
00011C56 2348 003C                  		move.l	a0,$3C(a1)
00011C5A                            
00011C5A                            loc_116D2:
00011C5A 0828 0000 0022             		btst	#0,$22(a0)
00011C60 6700                       		beq.s	loc_116E0
00011C62 117C 0002 001A             		move.b	#2,$1A(a0)
00011C68                            
00011C68                            loc_116E0:
00011C68 1168 001A 003A             		move.b	$1A(a0),$3A(a0)
00011C6E                            
00011C6E                            Obj5E_Slope:				; XREF: Obj5E_Index
00011C6E 1228 003A                  		move.b	$3A(a0),d1
00011C72 6100 0000                  		bsr.w	loc_11766
00011C76 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
00011C7C 0828 0000 001A             		btst	#0,$1A(a0)
00011C82 6700                       		beq.s	loc_11702
00011C84 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
00011C8A                            
00011C8A                            loc_11702:
00011C8A 43F8 D000                  		lea	($FFFFD000).w,a1
00011C8E 3169 0012 0038             		move.w	$12(a1),$38(a0)
00011C94 323C 0030                  		move.w	#$30,d1
00011C98 4EB9 0000 7972             		jsr	(SlopeObject).l
00011C9E 4E75                       		rts	
00011CA0                            ; ===========================================================================
00011CA0                            
00011CA0                            Obj5E_Slope2:				; XREF: Obj5E_Index
00011CA0 6100 0000                  		bsr.w	loc_1174A
00011CA4 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
00011CAA 0828 0000 001A             		btst	#0,$1A(a0)
00011CB0 6700                       		beq.s	loc_11730
00011CB2 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
00011CB8                            
00011CB8                            loc_11730:
00011CB8 323C 0030                  		move.w	#$30,d1
00011CBC 4EB9 0000 7A12             		jsr	(ExitPlatform).l
00011CC2 323C 0030                  		move.w	#$30,d1
00011CC6 3428 0008                  		move.w	8(a0),d2
00011CCA 4EB9 0000 8970             		jsr	SlopeObject2
00011CD0 4E75                       		rts	
00011CD2                            ; ===========================================================================
00011CD2                            
00011CD2                            loc_1174A:				; XREF: Obj5E_Slope2
00011CD2 7202                       		moveq	#2,d1
00011CD4 43F8 D000                  		lea	($FFFFD000).w,a1
00011CD8 3028 0008                  		move.w	8(a0),d0
00011CDC 9069 0008                  		sub.w	8(a1),d0
00011CE0 6400                       		bcc.s	loc_1175E
00011CE2 4440                       		neg.w	d0
00011CE4 7200                       		moveq	#0,d1
00011CE6                            
00011CE6                            loc_1175E:
00011CE6 0C40 0008                  		cmpi.w	#8,d0
00011CEA 6400                       		bcc.s	loc_11766
00011CEC 7201                       		moveq	#1,d1
00011CEE                            
00011CEE                            loc_11766:
00011CEE 1028 001A                  		move.b	$1A(a0),d0
00011CF2 B001                       		cmp.b	d1,d0
00011CF4 6700                       		beq.s	locret_11790
00011CF6 6400                       		bcc.s	loc_11772
00011CF8 5400                       		addq.b	#2,d0
00011CFA                            
00011CFA                            loc_11772:
00011CFA 5300                       		subq.b	#1,d0
00011CFC 1140 001A                  		move.b	d0,$1A(a0)
00011D00 1141 003A                  		move.b	d1,$3A(a0)
00011D04 08A8 0000 0001             		bclr	#0,1(a0)
00011D0A 0828 0001 001A             		btst	#1,$1A(a0)
00011D10 6700                       		beq.s	locret_11790
00011D12 08E8 0000 0001             		bset	#0,1(a0)
00011D18                            
00011D18                            locret_11790:
00011D18 4E75                       		rts	
00011D1A                            ; ===========================================================================
00011D1A                            
00011D1A                            Obj5E_Spikeball:			; XREF: Obj5E_Index
00011D1A 5428 0024                  		addq.b	#2,$24(a0)
00011D1E 217C 0000 0000 0004        		move.l	#Map_obj5Ea,4(a0)
00011D26 317C 04F0 0002             		move.w	#$4F0,2(a0)
00011D2C 0028 0004 0001             		ori.b	#4,1(a0)
00011D32 117C 0004 0018             		move.b	#4,$18(a0)
00011D38 117C 008B 0020             		move.b	#$8B,$20(a0)
00011D3E 117C 000C 0019             		move.b	#$C,$19(a0)
00011D44 3168 0008 0030             		move.w	8(a0),$30(a0)
00011D4A 0668 0028 0008             		addi.w	#$28,8(a0)
00011D50 3168 000C 0034             		move.w	$C(a0),$34(a0)
00011D56 117C 0001 001A             		move.b	#1,$1A(a0)
00011D5C 0828 0000 0022             		btst	#0,$22(a0)
00011D62 6700                       		beq.s	Obj5E_MoveSpike
00011D64 0468 0050 0008             		subi.w	#$50,8(a0)
00011D6A 117C 0002 003A             		move.b	#2,$3A(a0)
00011D70                            
00011D70                            Obj5E_MoveSpike:			; XREF: Obj5E_Index
00011D70 2268 003C                  		movea.l	$3C(a0),a1
00011D74 7000                       		moveq	#0,d0
00011D76 1028 003A                  		move.b	$3A(a0),d0
00011D7A 9029 003A                  		sub.b	$3A(a1),d0
00011D7E 6700                       		beq.s	loc_1183E
00011D80 6400                       		bcc.s	loc_117FC
00011D82 4400                       		neg.b	d0
00011D84                            
00011D84                            loc_117FC:
00011D84 323C F7E8                  		move.w	#-$818,d1
00011D88 343C FEEC                  		move.w	#-$114,d2
00011D8C 0C00 0001                  		cmpi.b	#1,d0
00011D90 6700                       		beq.s	loc_11822
00011D92 323C F510                  		move.w	#-$AF0,d1
00011D96 343C FF34                  		move.w	#-$CC,d2
00011D9A 0C69 0A00 0038             		cmpi.w	#$A00,$38(a1)
00011DA0 6D00                       		blt.s	loc_11822
00011DA2 323C F200                  		move.w	#-$E00,d1
00011DA6 343C FF60                  		move.w	#-$A0,d2
00011DAA                            
00011DAA                            loc_11822:
00011DAA 3141 0012                  		move.w	d1,$12(a0)
00011DAE 3142 0010                  		move.w	d2,$10(a0)
00011DB2 3028 0008                  		move.w	8(a0),d0
00011DB6 9068 0030                  		sub.w	$30(a0),d0
00011DBA 6400                       		bcc.s	loc_11838
00011DBC 4468 0010                  		neg.w	$10(a0)
00011DC0                            
00011DC0                            loc_11838:
00011DC0 5428 0024                  		addq.b	#2,$24(a0)
00011DC4 6000                       		bra.s	Obj5E_SpikeFall
00011DC6                            ; ===========================================================================
00011DC6                            
00011DC6                            loc_1183E:				; XREF: Obj5E_MoveSpike
00011DC6 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
00011DCC 7000                       		moveq	#0,d0
00011DCE 1029 001A                  		move.b	$1A(a1),d0
00011DD2 343C 0028                  		move.w	#$28,d2
00011DD6 3228 0008                  		move.w	8(a0),d1
00011DDA 9268 0030                  		sub.w	$30(a0),d1
00011DDE 6400                       		bcc.s	loc_1185C
00011DE0 4442                       		neg.w	d2
00011DE2 5440                       		addq.w	#2,d0
00011DE4                            
00011DE4                            loc_1185C:
00011DE4 D040                       		add.w	d0,d0
00011DE6 3228 0034                  		move.w	$34(a0),d1
00011DEA D272 0000                  		add.w	(a2,d0.w),d1
00011DEE 3141 000C                  		move.w	d1,$C(a0)
00011DF2 D468 0030                  		add.w	$30(a0),d2
00011DF6 3142 0008                  		move.w	d2,8(a0)
00011DFA 4268 000E                  		clr.w	$E(a0)
00011DFE 4268 000A                  		clr.w	$A(a0)
00011E02 4E75                       		rts	
00011E04                            ; ===========================================================================
00011E04                            
00011E04                            Obj5E_SpikeFall:			; XREF: Obj5E_Index
00011E04 4A68 0012                  		tst.w	$12(a0)
00011E08 6A00                       		bpl.s	loc_1189A
00011E0A 6100 BD4A                  		bsr.w	ObjectFall
00011E0E 3028 0034                  		move.w	$34(a0),d0
00011E12 0440 002F                  		subi.w	#$2F,d0
00011E16 B068 000C                  		cmp.w	$C(a0),d0
00011E1A 6E00                       		bgt.s	locret_11898
00011E1C 6100 BD38                  		bsr.w	ObjectFall
00011E20                            
00011E20                            locret_11898:
00011E20 4E75                       		rts	
00011E22                            ; ===========================================================================
00011E22                            
00011E22                            loc_1189A:				; XREF: Obj5E_SpikeFall
00011E22 6100 BD32                  		bsr.w	ObjectFall
00011E26 2268 003C                  		movea.l	$3C(a0),a1
00011E2A 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
00011E30 7000                       		moveq	#0,d0
00011E32 1029 001A                  		move.b	$1A(a1),d0
00011E36 3228 0008                  		move.w	8(a0),d1
00011E3A 9268 0030                  		sub.w	$30(a0),d1
00011E3E 6400                       		bcc.s	loc_118BA
00011E40 5440                       		addq.w	#2,d0
00011E42                            
00011E42                            loc_118BA:
00011E42 D040                       		add.w	d0,d0
00011E44 3228 0034                  		move.w	$34(a0),d1
00011E48 D272 0000                  		add.w	(a2,d0.w),d1
00011E4C B268 000C                  		cmp.w	$C(a0),d1
00011E50 6E00                       		bgt.s	locret_11938
00011E52 2268 003C                  		movea.l	$3C(a0),a1
00011E56 7202                       		moveq	#2,d1
00011E58 4A68 0010                  		tst.w	$10(a0)
00011E5C 6B00                       		bmi.s	Obj5E_Spring
00011E5E 7200                       		moveq	#0,d1
00011E60                            
00011E60                            Obj5E_Spring:
00011E60 1341 003A                  		move.b	d1,$3A(a1)
00011E64 1141 003A                  		move.b	d1,$3A(a0)
00011E68 B229 001A                  		cmp.b	$1A(a1),d1
00011E6C 6700                       		beq.s	loc_1192C
00011E6E 08A9 0003 0022             		bclr	#3,$22(a1)
00011E74 6700                       		beq.s	loc_1192C
00011E76 4229 0025                  		clr.b	$25(a1)
00011E7A 137C 0002 0024             		move.b	#2,$24(a1)
00011E80 45F8 D000                  		lea	($FFFFD000).w,a2
00011E84 3568 0012 0012             		move.w	$12(a0),$12(a2)
00011E8A 446A 0012                  		neg.w	$12(a2)
00011E8E 08EA 0001 0022             		bset	#1,$22(a2)
00011E94 08AA 0003 0022             		bclr	#3,$22(a2)
00011E9A 422A 003C                  		clr.b	$3C(a2)
00011E9E 157C 0010 001C             		move.b	#$10,$1C(a2)	; change Sonic's animation to "spring" ($10)
00011EA4 157C 0002 0024             		move.b	#2,$24(a2)
00011EAA 303C 00CC                  		move.w	#$CC,d0
00011EAE 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play spring sound
00011EB4                            
00011EB4                            loc_1192C:
00011EB4 4268 0010                  		clr.w	$10(a0)
00011EB8 4268 0012                  		clr.w	$12(a0)
00011EBC 5528 0024                  		subq.b	#2,$24(a0)
00011EC0                            
00011EC0                            locret_11938:
00011EC0 4E75                       		rts	
00011EC2                            ; ===========================================================================
00011EC2 FFF8 FFE4 FFD1 FFE4 FFF8   Obj5E_Speeds:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
00011ECC                            
00011ECC                            Obj5E_Data1:	incbin	misc\slzssaw1.bin
00011EFC                            		even
00011EFC                            Obj5E_Data2:	incbin	misc\slzssaw2.bin
00011F2C                            		even
00011F2C                            ; ---------------------------------------------------------------------------
00011F2C                            ; Sprite mappings - seesaws (SLZ)
00011F2C                            ; ---------------------------------------------------------------------------
00011F2C                            Map_obj5E:
00011F2C                            	include "_maps\obj5E.asm"
00011F2C                            ; ---------------------------------------------------------------------------
00011F2C                            ; Sprite mappings - seesaws (SLZ)
00011F2C                            ; ---------------------------------------------------------------------------
00011F2C 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
00011F30 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
00011F34 07                         byte_119AC:	dc.b 7
00011F35 D406 0000 D3               		dc.b $D4, 6, 0,	0, $D3
00011F3A DC06 0006 E3               		dc.b $DC, 6, 0,	6, $E3
00011F3F E404 000C F3               		dc.b $E4, 4, 0,	$C, $F3
00011F44 EC0D 000E F3               		dc.b $EC, $D, 0, $E, $F3
00011F49 FC08 0016 FB               		dc.b $FC, 8, 0,	$16, $FB
00011F4E F406 0006 13               		dc.b $F4, 6, 0,	6, $13
00011F53 FC05 0019 23               		dc.b $FC, 5, 0,	$19, $23
00011F58 04                         byte_119D0:	dc.b 4
00011F59 E60A 001D D0               		dc.b $E6, $A, 0, $1D, $D0
00011F5E E60A 0023 E8               		dc.b $E6, $A, 0, $23, $E8
00011F63 E60A 0823 00               		dc.b $E6, $A, 8, $23, 0
00011F68 E60A 081D 18               		dc.b $E6, $A, 8, $1D, $18
00011F6E 00                         		even
00011F6E 00                         		even
00011F6E                            
00011F6E                            ; ---------------------------------------------------------------------------
00011F6E                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
00011F6E                            ; ---------------------------------------------------------------------------
00011F6E                            Map_obj5Ea:
00011F6E                            	include "_maps\obj5Eballs.asm"
00011F6E                            ; ---------------------------------------------------------------------------
00011F6E                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
00011F6E                            ; ---------------------------------------------------------------------------
00011F6E 0000                       		dc.w byte_119EA-Map_obj5Ea
00011F70 0000                       		dc.w byte_119F0-Map_obj5Ea
00011F72 01                         byte_119EA:	dc.b 1
00011F73 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00011F78 01                         byte_119F0:	dc.b 1
00011F79 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
00011F7E                            		even
00011F7E                            		even
00011F7E                            
00011F7E                            ; ===========================================================================
00011F7E                            ; ---------------------------------------------------------------------------
00011F7E                            ; Object 5F - walking bomb enemy (SLZ, SBZ)
00011F7E                            ; ---------------------------------------------------------------------------
00011F7E                            
00011F7E                            Obj5F:					; XREF: Obj_Index
00011F7E 7000                       		moveq	#0,d0
00011F80 1028 0024                  		move.b	$24(a0),d0
00011F84 323B 0000                  		move.w	Obj5F_Index(pc,d0.w),d1
00011F88 4EFB 1000                  		jmp	Obj5F_Index(pc,d1.w)
00011F8C                            ; ===========================================================================
00011F8C 0000                       Obj5F_Index:	dc.w Obj5F_Main-Obj5F_Index
00011F8E 0000                       		dc.w Obj5F_Action-Obj5F_Index
00011F90 0000                       		dc.w Obj5F_Display-Obj5F_Index
00011F92 0000                       		dc.w Obj5F_End-Obj5F_Index
00011F94                            ; ===========================================================================
00011F94                            
00011F94                            Obj5F_Main:				; XREF: Obj5F_Index
00011F94 5428 0024                  		addq.b	#2,$24(a0)
00011F98 217C 0000 0000 0004        		move.l	#Map_obj5F,4(a0)
00011FA0 317C 0400 0002             		move.w	#$400,2(a0)
00011FA6 0028 0004 0001             		ori.b	#4,1(a0)
00011FAC 117C 0003 0018             		move.b	#3,$18(a0)
00011FB2 117C 000C 0019             		move.b	#$C,$19(a0)
00011FB8 1028 0028                  		move.b	$28(a0),d0
00011FBC 6700                       		beq.s	loc_11A3C
00011FBE 1140 0024                  		move.b	d0,$24(a0)
00011FC2 4E75                       		rts	
00011FC4                            ; ===========================================================================
00011FC4                            
00011FC4                            loc_11A3C:
00011FC4 117C 009A 0020             		move.b	#$9A,$20(a0)
00011FCA 0868 0000 0022             		bchg	#0,$22(a0)
00011FD0                            
00011FD0                            Obj5F_Action:				; XREF: Obj5F_Index
00011FD0 7000                       		moveq	#0,d0
00011FD2 1028 0025                  		move.b	$25(a0),d0
00011FD6 323B 0000                  		move.w	Obj5F_Index2(pc,d0.w),d1
00011FDA 4EBB 1000                  		jsr	Obj5F_Index2(pc,d1.w)
00011FDE 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00011FE4 6100 8C5C                  		bsr.w	AnimateSprite
00011FE8 6000 DC66                  		bra.w	MarkObjGone
00011FEC                            ; ===========================================================================
00011FEC 0000                       Obj5F_Index2:	dc.w Obj5F_Walk-Obj5F_Index2
00011FEE 0000                       		dc.w Obj5F_Wait-Obj5F_Index2
00011FF0 0000                       		dc.w Obj5F_Explode-Obj5F_Index2
00011FF2                            ; ===========================================================================
00011FF2                            
00011FF2                            Obj5F_Walk:				; XREF: Obj5F_Index2
00011FF2 6100 0000                  		bsr.w	Obj5F_ChkSonic
00011FF6 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00011FFA 6A00                       		bpl.s	locret_11A96	; if time remains, branch
00011FFC 5428 0025                  		addq.b	#2,$25(a0)
00012000 317C 05FF 0030             		move.w	#1535,$30(a0)	; set time delay to 25 seconds
00012006 317C 0010 0010             		move.w	#$10,$10(a0)
0001200C 117C 0001 001C             		move.b	#1,$1C(a0)
00012012 0868 0000 0022             		bchg	#0,$22(a0)
00012018 6700                       		beq.s	locret_11A96
0001201A 4468 0010                  		neg.w	$10(a0)		; change direction
0001201E                            
0001201E                            locret_11A96:
0001201E 4E75                       		rts	
00012020                            ; ===========================================================================
00012020                            
00012020                            Obj5F_Wait:				; XREF: Obj5F_Index2
00012020 6100 0000                  		bsr.w	Obj5F_ChkSonic
00012024 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00012028 6B00                       		bmi.s	loc_11AA8
0001202A 6100 BB56                  		bsr.w	SpeedToPos
0001202E 4E75                       		rts	
00012030                            ; ===========================================================================
00012030                            
00012030                            loc_11AA8:
00012030 5528 0025                  		subq.b	#2,$25(a0)
00012034 317C 00B3 0030             		move.w	#179,$30(a0)	; set time delay to 3 seconds
0001203A 4268 0010                  		clr.w	$10(a0)		; stop walking
0001203E 117C 0000 001C             		move.b	#0,$1C(a0)	; stop animation
00012044 4E75                       		rts	
00012046                            ; ===========================================================================
00012046                            
00012046                            Obj5F_Explode:				; XREF: Obj5F_Index2
00012046 5368 0030                  		subq.w	#1,$30(a0)
0001204A 6A00                       		bpl.s	locret_11AD0
0001204C 10BC 003F                  		move.b	#$3F,0(a0)	; change bomb into an explosion
00012050 117C 0000 0024             		move.b	#0,$24(a0)
00012056                            
00012056                            locret_11AD0:
00012056 4E75                       		rts	
00012058                            ; ===========================================================================
00012058                            
00012058                            Obj5F_ChkSonic:				; XREF: Obj5F_Walk; Obj5F_Wait
00012058 3038 D008                  		move.w	($FFFFD008).w,d0
0001205C 9068 0008                  		sub.w	8(a0),d0
00012060 6400                       		bcc.s	loc_11ADE
00012062 4440                       		neg.w	d0
00012064                            
00012064                            loc_11ADE:
00012064 0C40 0060                  		cmpi.w	#$60,d0
00012068 6400                       		bcc.s	locret_11B5E
0001206A 3038 D00C                  		move.w	($FFFFD00C).w,d0
0001206E 9068 000C                  		sub.w	$C(a0),d0
00012072 6400                       		bcc.s	Obj5F_MakeFuse
00012074 4440                       		neg.w	d0
00012076                            
00012076                            Obj5F_MakeFuse:
00012076 0C40 0060                  		cmpi.w	#$60,d0
0001207A 6400                       		bcc.s	locret_11B5E
0001207C 4A78 FE08                  		tst.w	($FFFFFE08).w
00012080 6600                       		bne.s	locret_11B5E
00012082 117C 0004 0025             		move.b	#4,$25(a0)
00012088 317C 008F 0030             		move.w	#143,$30(a0)	; set fuse time
0001208E 4268 0010                  		clr.w	$10(a0)
00012092 117C 0002 001C             		move.b	#2,$1C(a0)
00012098 6100 BFAA                  		bsr.w	SingleObjLoad2
0001209C 6600                       		bne.s	locret_11B5E
0001209E 12BC 005F                  		move.b	#$5F,0(a1)	; load fuse object
000120A2 3368 0008 0008             		move.w	8(a0),8(a1)
000120A8 3368 000C 000C             		move.w	$C(a0),$C(a1)
000120AE 3368 000C 0034             		move.w	$C(a0),$34(a1)
000120B4 1368 0022 0022             		move.b	$22(a0),$22(a1)
000120BA 137C 0004 0028             		move.b	#4,$28(a1)
000120C0 137C 0003 001C             		move.b	#3,$1C(a1)
000120C6 337C 0010 0012             		move.w	#$10,$12(a1)
000120CC 0828 0001 0022             		btst	#1,$22(a0)
000120D2 6700                       		beq.s	loc_11B54
000120D4 4469 0012                  		neg.w	$12(a1)
000120D8                            
000120D8                            loc_11B54:
000120D8 337C 008F 0030             		move.w	#143,$30(a1)	; set fuse time
000120DE 2348 003C                  		move.l	a0,$3C(a1)
000120E2                            
000120E2                            locret_11B5E:
000120E2 4E75                       		rts	
000120E4                            ; ===========================================================================
000120E4                            
000120E4                            Obj5F_Display:				; XREF: Obj5F_Index
000120E4 6100                       		bsr.s	loc_11B70
000120E6 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
000120EC 6100 8B54                  		bsr.w	AnimateSprite
000120F0 6000 DB5E                  		bra.w	MarkObjGone
000120F4                            ; ===========================================================================
000120F4                            
000120F4                            loc_11B70:
000120F4 5368 0030                  		subq.w	#1,$30(a0)
000120F8 6B00                       		bmi.s	loc_11B7C
000120FA 6100 BA86                  		bsr.w	SpeedToPos
000120FE 4E75                       		rts	
00012100                            ; ===========================================================================
00012100                            
00012100                            loc_11B7C:
00012100 4268 0030                  		clr.w	$30(a0)
00012104 4228 0024                  		clr.b	$24(a0)
00012108 3168 0034 000C             		move.w	$34(a0),$C(a0)
0001210E 7203                       		moveq	#3,d1
00012110 2248                       		movea.l	a0,a1
00012112 45F9 0000 0000             		lea	(Obj5F_ShrSpeed).l,a2 ;	load shrapnel speed data
00012118 6000                       		bra.s	Obj5F_MakeShrap
0001211A                            ; ===========================================================================
0001211A                            
0001211A                            Obj5F_Loop:
0001211A 6100 BF28                  		bsr.w	SingleObjLoad2
0001211E 6600                       		bne.s	loc_11BCE
00012120                            
00012120                            Obj5F_MakeShrap:			; XREF: loc_11B7C
00012120 12BC 005F                  		move.b	#$5F,0(a1)	; load shrapnel	object
00012124 3368 0008 0008             		move.w	8(a0),8(a1)
0001212A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012130 137C 0006 0028             		move.b	#6,$28(a1)
00012136 137C 0004 001C             		move.b	#4,$1C(a1)
0001213C 335A 0010                  		move.w	(a2)+,$10(a1)
00012140 335A 0012                  		move.w	(a2)+,$12(a1)
00012144 137C 0098 0020             		move.b	#$98,$20(a1)
0001214A 08E9 0007 0001             		bset	#7,1(a1)
00012150                            
00012150                            loc_11BCE:
00012150 51C9 FFC8                  		dbf	d1,Obj5F_Loop	; repeat 3 more	times
00012154                            
00012154 117C 0006 0024             		move.b	#6,$24(a0)
0001215A                            
0001215A                            Obj5F_End:				; XREF: Obj5F_Index
0001215A 6100 BA26                  		bsr.w	SpeedToPos
0001215E 0668 0018 0012             		addi.w	#$18,$12(a0)
00012164 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
0001216A 6100 8AD6                  		bsr.w	AnimateSprite
0001216E 4A28 0001                  		tst.b	1(a0)
00012172 6A00 BA70                  		bpl.w	DeleteObject
00012176 6000 BA30                  		bra.w	DisplaySprite
0001217A                            ; ===========================================================================
0001217A FE00 FD00 FF00 FE00 0200+  Obj5F_ShrSpeed:	dc.w $FE00, $FD00, $FF00, $FE00, $200, $FD00, $100, $FE00
0001218A                            
0001218A                            Ani_obj5F:
0001218A                            	include "_anim\obj5F.asm"
0001218A                            ; ---------------------------------------------------------------------------
0001218A                            ; Animation script - Bomb enemy
0001218A                            ; ---------------------------------------------------------------------------
0001218A 0000                       		dc.w byte_11C12-Ani_obj5F
0001218C 0000                       		dc.w byte_11C16-Ani_obj5F
0001218E 0000                       		dc.w byte_11C1C-Ani_obj5F
00012190 0000                       		dc.w byte_11C20-Ani_obj5F
00012192 0000                       		dc.w byte_11C24-Ani_obj5F
00012194 1301 00FF                  byte_11C12:	dc.b $13, 1, 0,	$FF
00012198 1305 0403 02FF             byte_11C16:	dc.b $13, 5, 4,	3, 2, $FF
0001219E 1307 06FF                  byte_11C1C:	dc.b $13, 7, 6,	$FF
000121A2 0308 09FF                  byte_11C20:	dc.b 3,	8, 9, $FF
000121A6 030A 0BFF                  byte_11C24:	dc.b 3,	$A, $B,	$FF
000121AA                            		even
000121AA                            		even
000121AA                            
000121AA                            ; ---------------------------------------------------------------------------
000121AA                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
000121AA                            ; ---------------------------------------------------------------------------
000121AA                            Map_obj5F:
000121AA                            	include "_maps\obj5F.asm"
000121AA                            ; ---------------------------------------------------------------------------
000121AA                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
000121AA                            ; ---------------------------------------------------------------------------
000121AA 0000 0000                  		dc.w byte_11C40-Map_obj5F, byte_11C50-Map_obj5F
000121AE 0000 0000                  		dc.w byte_11C60-Map_obj5F, byte_11C70-Map_obj5F
000121B2 0000 0000                  		dc.w byte_11C80-Map_obj5F, byte_11C90-Map_obj5F
000121B6 0000 0000                  		dc.w byte_11CA0-Map_obj5F, byte_11CAB-Map_obj5F
000121BA 0000 0000                  		dc.w byte_11CB6-Map_obj5F, byte_11CBC-Map_obj5F
000121BE 0000 0000                  		dc.w byte_11CC2-Map_obj5F, byte_11CC8-Map_obj5F
000121C2 03                         byte_11C40:	dc.b 3
000121C3 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
000121C8 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
000121CD E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
000121D2 03                         byte_11C50:	dc.b 3
000121D3 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
000121D8 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
000121DD E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
000121E2 03                         byte_11C60:	dc.b 3
000121E3 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
000121E8 0808 0015 F4               		dc.b 8,	8, 0, $15, $F4
000121ED E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
000121F2 03                         byte_11C70:	dc.b 3
000121F3 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
000121F8 0908 0018 F4               		dc.b 9,	8, 0, $18, $F4
000121FD E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00012202 03                         byte_11C80:	dc.b 3
00012203 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
00012208 0808 001B F4               		dc.b 8,	8, 0, $1B, $F4
0001220D E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
00012212 03                         byte_11C90:	dc.b 3
00012213 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00012218 0908 001E F4               		dc.b 9,	8, 0, $1E, $F4
0001221D E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00012222 02                         byte_11CA0:	dc.b 2
00012223 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
00012228 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
0001222D 02                         byte_11CAB:	dc.b 2
0001222E F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00012233 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00012238 01                         byte_11CB6:	dc.b 1			; fuse	(just before it	explodes)
00012239 E701 0023 FC               		dc.b $E7, 1, 0,	$23, $FC
0001223E 01                         byte_11CBC:	dc.b 1			; fuse
0001223F E701 0025 FC               		dc.b $E7, 1, 0,	$25, $FC
00012244 01                         byte_11CC2:	dc.b 1			; fireball (after it exploded)
00012245 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
0001224A 01                         byte_11CC8:	dc.b 1			; fireball
0001224B FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
00012250                            		even
00012250                            		even
00012250                            
00012250                            ; ===========================================================================
00012250                            ; ---------------------------------------------------------------------------
00012250                            ; Object 60 - Orbinaut enemy (LZ, SLZ, SBZ)
00012250                            ; ---------------------------------------------------------------------------
00012250                            
00012250                            Obj60:					; XREF: Obj_Index
00012250 7000                       		moveq	#0,d0
00012252 1028 0024                  		move.b	$24(a0),d0
00012256 323B 0000                  		move.w	Obj60_Index(pc,d0.w),d1
0001225A 4EFB 1000                  		jmp	Obj60_Index(pc,d1.w)
0001225E                            ; ===========================================================================
0001225E 0000                       Obj60_Index:	dc.w Obj60_Main-Obj60_Index
00012260 0000                       		dc.w Obj60_ChkSonic-Obj60_Index
00012262 0000                       		dc.w Obj60_Display-Obj60_Index
00012264 0000                       		dc.w Obj60_MoveOrb-Obj60_Index
00012266 0000                       		dc.w Obj60_ChkDel2-Obj60_Index
00012268                            ; ===========================================================================
00012268                            
00012268                            Obj60_Main:				; XREF: Obj60_Index
00012268 217C 0000 0000 0004        		move.l	#Map_obj60,4(a0)
00012270 317C 0429 0002             		move.w	#$429,2(a0)	; SBZ specific code
00012276 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
0001227C 6700                       		beq.s	loc_11D02
0001227E 317C 2429 0002             		move.w	#$2429,2(a0)	; SLZ specific code
00012284                            
00012284                            loc_11D02:
00012284 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
0001228A 6600                       		bne.s	loc_11D10
0001228C 317C 0467 0002             		move.w	#$467,2(a0)	; LZ specific code
00012292                            
00012292                            loc_11D10:
00012292 0028 0004 0001             		ori.b	#4,1(a0)
00012298 117C 0004 0018             		move.b	#4,$18(a0)
0001229E 117C 000B 0020             		move.b	#$B,$20(a0)
000122A4 117C 000C 0019             		move.b	#$C,$19(a0)
000122AA 7400                       		moveq	#0,d2
000122AC 45E8 0037                  		lea	$37(a0),a2
000122B0 264A                       		movea.l	a2,a3
000122B2 524A                       		addq.w	#1,a2
000122B4 7203                       		moveq	#3,d1
000122B6                            
000122B6                            Obj60_MakeOrbs:
000122B6 6100 BD8C                  		bsr.w	SingleObjLoad2
000122BA 6600                       		bne.s	loc_11D90
000122BC 5213                       		addq.b	#1,(a3)
000122BE 3A09                       		move.w	a1,d5
000122C0 0445 D000                  		subi.w	#-$3000,d5
000122C4 EC4D                       		lsr.w	#6,d5
000122C6 0245 007F                  		andi.w	#$7F,d5
000122CA 14C5                       		move.b	d5,(a2)+
000122CC 1290                       		move.b	0(a0),0(a1)	; load spiked orb object
000122CE 137C 0006 0024             		move.b	#6,$24(a1)
000122D4 2368 0004 0004             		move.l	4(a0),4(a1)
000122DA 3368 0002 0002             		move.w	2(a0),2(a1)
000122E0 0029 0004 0001             		ori.b	#4,1(a1)
000122E6 137C 0004 0018             		move.b	#4,$18(a1)
000122EC 137C 0008 0019             		move.b	#8,$19(a1)
000122F2 137C 0003 001A             		move.b	#3,$1A(a1)
000122F8 137C 0098 0020             		move.b	#$98,$20(a1)
000122FE 1342 0026                  		move.b	d2,$26(a1)
00012302 0602 0040                  		addi.b	#$40,d2
00012306 2348 003C                  		move.l	a0,$3C(a1)
0001230A 51C9 FFAA                  		dbf	d1,Obj60_MakeOrbs ; repeat sequence 3 more times
0001230E                            
0001230E                            loc_11D90:
0001230E 7001                       		moveq	#1,d0
00012310 0828 0000 0022             		btst	#0,$22(a0)
00012316 6700                       		beq.s	Obj60_Move
00012318 4440                       		neg.w	d0
0001231A                            
0001231A                            Obj60_Move:
0001231A 1140 0036                  		move.b	d0,$36(a0)
0001231E 1168 0028 0024             		move.b	$28(a0),$24(a0)	; if type is 02, skip the firing rountine
00012324 5428 0024                  		addq.b	#2,$24(a0)
00012328 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move orbinaut	to the left
0001232E 0828 0000 0022             		btst	#0,$22(a0)	; is orbinaut reversed?
00012334 6700                       		beq.s	locret_11DBC	; if not, branch
00012336 4468 0010                  		neg.w	$10(a0)		; move orbinaut	to the right
0001233A                            
0001233A                            locret_11DBC:
0001233A 4E75                       		rts	
0001233C                            ; ===========================================================================
0001233C                            
0001233C                            Obj60_ChkSonic:				; XREF: Obj60_Index
0001233C 3038 D008                  		move.w	($FFFFD008).w,d0
00012340 9068 0008                  		sub.w	8(a0),d0
00012344 6400                       		bcc.s	loc_11DCA
00012346 4440                       		neg.w	d0
00012348                            
00012348                            loc_11DCA:
00012348 0C40 00A0                  		cmpi.w	#$A0,d0		; is Sonic within $A0 pixels of	orbinaut?
0001234C 6400                       		bcc.s	Obj60_Animate	; if not, branch
0001234E 3038 D00C                  		move.w	($FFFFD00C).w,d0
00012352 9068 000C                  		sub.w	$C(a0),d0
00012356 6400                       		bcc.s	loc_11DDC
00012358 4440                       		neg.w	d0
0001235A                            
0001235A                            loc_11DDC:
0001235A 0C40 0050                  		cmpi.w	#$50,d0		; is Sonic within $50 pixels of	orbinaut?
0001235E 6400                       		bcc.s	Obj60_Animate	; if not, branch
00012360 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
00012364 6600                       		bne.s	Obj60_Animate	; if yes, branch
00012366 117C 0001 001C             		move.b	#1,$1C(a0)	; use "angry" animation
0001236C                            
0001236C                            Obj60_Animate:
0001236C 43F9 0000 0000             		lea	(Ani_obj60).l,a1
00012372 6100 88CE                  		bsr.w	AnimateSprite
00012376 6000 0000                  		bra.w	Obj60_ChkDel
0001237A                            ; ===========================================================================
0001237A                            
0001237A                            Obj60_Display:				; XREF: Obj60_Index
0001237A 6100 B806                  		bsr.w	SpeedToPos
0001237E                            
0001237E                            Obj60_ChkDel:				; XREF: Obj60_Animate
0001237E 3028 0008                  		move.w	8(a0),d0
00012382 0240 FF80                  		andi.w	#$FF80,d0
00012386 3238 F700                  		move.w	($FFFFF700).w,d1
0001238A 0441 0080                  		subi.w	#$80,d1
0001238E 0241 FF80                  		andi.w	#$FF80,d1
00012392 9041                       		sub.w	d1,d0
00012394 0C40 0280                  		cmpi.w	#$280,d0
00012398 6200 0000                  		bhi.w	Obj60_ChkGone
0001239C 6000 B80A                  		bra.w	DisplaySprite
000123A0                            ; ===========================================================================
000123A0                            
000123A0                            Obj60_ChkGone:				; XREF: Obj60_ChkDel
000123A0 45F8 FC00                  		lea	($FFFFFC00).w,a2
000123A4 7000                       		moveq	#0,d0
000123A6 1028 0023                  		move.b	$23(a0),d0
000123AA 6700                       		beq.s	loc_11E34
000123AC 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000123B2                            
000123B2                            loc_11E34:
000123B2 45E8 0037                  		lea	$37(a0),a2
000123B6 7400                       		moveq	#0,d2
000123B8 141A                       		move.b	(a2)+,d2
000123BA 5342                       		subq.w	#1,d2
000123BC 6500                       		bcs.s	Obj60_Delete
000123BE                            
000123BE                            loc_11E40:
000123BE 7000                       		moveq	#0,d0
000123C0 101A                       		move.b	(a2)+,d0
000123C2 ED48                       		lsl.w	#6,d0
000123C4 0680 00FF D000             		addi.l	#$FFD000,d0
000123CA 2240                       		movea.l	d0,a1
000123CC 6100 B818                  		bsr.w	DeleteObject2
000123D0 51CA FFEC                  		dbf	d2,loc_11E40
000123D4                            
000123D4                            Obj60_Delete:
000123D4 6000 B80E                  		bra.w	DeleteObject
000123D8                            ; ===========================================================================
000123D8                            
000123D8                            Obj60_MoveOrb:				; XREF: Obj60_Index
000123D8 2268 003C                  		movea.l	$3C(a0),a1
000123DC 0C11 0060                  		cmpi.b	#$60,0(a1)
000123E0 6600 B802                  		bne.w	DeleteObject
000123E4 0C29 0002 001A             		cmpi.b	#2,$1A(a1)
000123EA 6600                       		bne.s	Obj60_Circle
000123EC 0C28 0040 0026             		cmpi.b	#$40,$26(a0)
000123F2 6600                       		bne.s	Obj60_Circle
000123F4 5428 0024                  		addq.b	#2,$24(a0)
000123F8 5329 0037                  		subq.b	#1,$37(a1)
000123FC 6600                       		bne.s	Obj60_FireOrb
000123FE 5429 0024                  		addq.b	#2,$24(a1)
00012402                            
00012402                            Obj60_FireOrb:
00012402 317C FE00 0010             		move.w	#-$200,$10(a0)	; move orb to the left (quickly)
00012408 0829 0000 0022             		btst	#0,$22(a1)
0001240E 6700                       		beq.s	Obj60_Display2
00012410 4468 0010                  		neg.w	$10(a0)
00012414                            
00012414                            Obj60_Display2:
00012414 6000 B792                  		bra.w	DisplaySprite
00012418                            ; ===========================================================================
00012418                            
00012418                            Obj60_Circle:				; XREF: Obj60_MoveOrb
00012418 1028 0026                  		move.b	$26(a0),d0
0001241C 4EB9 0000 2C22             		jsr	(CalcSine).l
00012422 E841                       		asr.w	#4,d1
00012424 D269 0008                  		add.w	8(a1),d1
00012428 3141 0008                  		move.w	d1,8(a0)
0001242C E840                       		asr.w	#4,d0
0001242E D069 000C                  		add.w	$C(a1),d0
00012432 3140 000C                  		move.w	d0,$C(a0)
00012436 1029 0036                  		move.b	$36(a1),d0
0001243A D128 0026                  		add.b	d0,$26(a0)
0001243E 6000 B768                  		bra.w	DisplaySprite
00012442                            ; ===========================================================================
00012442                            
00012442                            Obj60_ChkDel2:				; XREF: Obj60_Index
00012442 6100 B73E                  		bsr.w	SpeedToPos
00012446 4A28 0001                  		tst.b	1(a0)
0001244A 6A00 B798                  		bpl.w	DeleteObject
0001244E 6000 B758                  		bra.w	DisplaySprite
00012452                            ; ===========================================================================
00012452                            Ani_obj60:
00012452                            	include "_anim\obj60.asm"
00012452                            ; ---------------------------------------------------------------------------
00012452                            ; Animation script - Orbinaut enemy
00012452                            ; ---------------------------------------------------------------------------
00012452 0000                       		dc.w byte_11EDA-Ani_obj60
00012454 0000                       		dc.w byte_11EDE-Ani_obj60
00012456 0F00 FF00                  byte_11EDA:	dc.b $F, 0, $FF, 0
0001245A 0F01 02FE 0100             byte_11EDE:	dc.b $F, 1, 2, $FE, 1, 0
00012460                            		even
00012460                            		even
00012460                            
00012460                            ; ---------------------------------------------------------------------------
00012460                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
00012460                            ; ---------------------------------------------------------------------------
00012460                            Map_obj60:
00012460                            	include "_maps\obj60.asm"
00012460                            ; ---------------------------------------------------------------------------
00012460                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
00012460                            ; ---------------------------------------------------------------------------
00012460 0000 0000                  		dc.w byte_11EEC-Map_obj60, byte_11EF2-Map_obj60
00012464 0000 0000                  		dc.w byte_11EF8-Map_obj60, byte_11EFE-Map_obj60
00012468 01                         byte_11EEC:	dc.b 1
00012469 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001246E 01                         byte_11EF2:	dc.b 1
0001246F F40A 2009 F4               		dc.b $F4, $A, $20, 9, $F4
00012474 01                         byte_11EF8:	dc.b 1
00012475 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001247A 01                         byte_11EFE:	dc.b 1
0001247B F805 001B F8               		dc.b $F8, 5, 0,	$1B, $F8
00012480                            		even
00012480                            		even
00012480                            
00012480                            ; ===========================================================================
00012480                            ; ---------------------------------------------------------------------------
00012480                            ; Object 16 - harpoon (LZ)
00012480                            ; ---------------------------------------------------------------------------
00012480                            
00012480                            Obj16:					; XREF: Obj_Index
00012480 7000                       		moveq	#0,d0
00012482 1028 0024                  		move.b	$24(a0),d0
00012486 323B 0000                  		move.w	Obj16_Index(pc,d0.w),d1
0001248A 4EFB 1000                  		jmp	Obj16_Index(pc,d1.w)
0001248E                            ; ===========================================================================
0001248E 0000                       Obj16_Index:	dc.w Obj16_Main-Obj16_Index
00012490 0000                       		dc.w Obj16_Move-Obj16_Index
00012492 0000                       		dc.w Obj16_Wait-Obj16_Index
00012494                            ; ===========================================================================
00012494                            
00012494                            Obj16_Main:				; XREF: Obj16_Index
00012494 5428 0024                  		addq.b	#2,$24(a0)
00012498 217C 0000 0000 0004        		move.l	#Map_obj16,4(a0)
000124A0 317C 03CC 0002             		move.w	#$3CC,2(a0)
000124A6 0028 0004 0001             		ori.b	#4,1(a0)
000124AC 117C 0004 0018             		move.b	#4,$18(a0)
000124B2 1168 0028 001C             		move.b	$28(a0),$1C(a0)
000124B8 117C 0014 0019             		move.b	#$14,$19(a0)
000124BE 317C 003C 0030             		move.w	#60,$30(a0)
000124C4                            
000124C4                            Obj16_Move:				; XREF: Obj16_Index
000124C4 43F9 0000 0000             		lea	(Ani_obj16).l,a1
000124CA 6100 8776                  		bsr.w	AnimateSprite
000124CE 7000                       		moveq	#0,d0
000124D0 1028 001A                  		move.b	$1A(a0),d0	; move frame number to d0
000124D4 117B 0000 0020             		move.b	Obj16_Data(pc,d0.w),$20(a0) ; load collision response (based on	d0)
000124DA 6000 D774                  		bra.w	MarkObjGone
000124DE                            ; ===========================================================================
000124DE 9B9C 9D9E 9FA0             Obj16_Data:	dc.b $9B, $9C, $9D, $9E, $9F, $A0
000124E4                            ; ===========================================================================
000124E4                            
000124E4                            Obj16_Wait:				; XREF: Obj16_Index
000124E4 5368 0030                  		subq.w	#1,$30(a0)
000124E8 6A00                       		bpl.s	Obj16_ChkDel
000124EA 317C 003C 0030             		move.w	#60,$30(a0)
000124F0 5528 0024                  		subq.b	#2,$24(a0)	; run "Obj16_Move" subroutine
000124F4 0868 0000 001C             		bchg	#0,$1C(a0)	; reverse animation
000124FA                            
000124FA                            Obj16_ChkDel:
000124FA 6000 D754                  		bra.w	MarkObjGone
000124FE                            ; ===========================================================================
000124FE                            Ani_obj16:
000124FE                            	include "_anim\obj16.asm"
000124FE                            ; ---------------------------------------------------------------------------
000124FE                            ; Animation script - harpoon (LZ)
000124FE                            ; ---------------------------------------------------------------------------
000124FE 0000                       		dc.w byte_11F8A-Ani_obj16
00012500 0000                       		dc.w byte_11F8E-Ani_obj16
00012502 0000                       		dc.w byte_11F92-Ani_obj16
00012504 0000                       		dc.w byte_11F96-Ani_obj16
00012506 0301 02FC                  byte_11F8A:	dc.b 3,	1, 2, $FC
0001250A 0301 00FC                  byte_11F8E:	dc.b 3,	1, 0, $FC
0001250E 0304 05FC                  byte_11F92:	dc.b 3,	4, 5, $FC
00012512 0304 03FC                  byte_11F96:	dc.b 3,	4, 3, $FC
00012516                            		even
00012516                            		even
00012516                            
00012516                            ; ---------------------------------------------------------------------------
00012516                            ; Sprite mappings - harpoon (LZ)
00012516                            ; ---------------------------------------------------------------------------
00012516                            Map_obj16:
00012516                            	include "_maps\obj16.asm"
00012516                            ; ---------------------------------------------------------------------------
00012516                            ; Sprite mappings - harpoon (LZ)
00012516                            ; ---------------------------------------------------------------------------
00012516 0000 0000                  		dc.w byte_11FA6-Map_obj16, byte_11FAC-Map_obj16
0001251A 0000 0000                  		dc.w byte_11FB2-Map_obj16, byte_11FBD-Map_obj16
0001251E 0000 0000                  		dc.w byte_11FC3-Map_obj16, byte_11FC9-Map_obj16
00012522 01                         byte_11FA6:	dc.b 1
00012523 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
00012528 01                         byte_11FAC:	dc.b 1
00012529 FC0C 0002 F8               		dc.b $FC, $C, 0, 2, $F8
0001252E 02                         byte_11FB2:	dc.b 2
0001252F FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8
00012534 FC08 0003 10               		dc.b $FC, 8, 0,	3, $10
00012539 01                         byte_11FBD:	dc.b 1
0001253A F801 0009 FC               		dc.b $F8, 1, 0,	9, $FC
0001253F 01                         byte_11FC3:	dc.b 1
00012540 E803 000B FC               		dc.b $E8, 3, 0,	$B, $FC
00012545 02                         byte_11FC9:	dc.b 2
00012546 D802 000B FC               		dc.b $D8, 2, 0,	$B, $FC
0001254B F002 000F FC               		dc.b $F0, 2, 0,	$F, $FC
00012550                            		even
00012550                            		even
00012550                            
00012550                            ; ===========================================================================
00012550                            ; ---------------------------------------------------------------------------
00012550                            ; Object 61 - blocks (LZ)
00012550                            ; ---------------------------------------------------------------------------
00012550                            
00012550                            Obj61:					; XREF: Obj_Index
00012550 7000                       		moveq	#0,d0
00012552 1028 0024                  		move.b	$24(a0),d0
00012556 323B 0000                  		move.w	Obj61_Index(pc,d0.w),d1
0001255A 4EFB 1000                  		jmp	Obj61_Index(pc,d1.w)
0001255E                            ; ===========================================================================
0001255E 0000                       Obj61_Index:	dc.w Obj61_Main-Obj61_Index
00012560 0000                       		dc.w Obj61_Action-Obj61_Index
00012562                            
00012562 1010                       Obj61_Var:	dc.b $10, $10		; width, height
00012564 200C                       		dc.b $20, $C
00012566 1010                       		dc.b $10, $10
00012568 1010                       		dc.b $10, $10
0001256A                            ; ===========================================================================
0001256A                            
0001256A                            Obj61_Main:				; XREF: Obj61_Index
0001256A 5428 0024                  		addq.b	#2,$24(a0)
0001256E 217C 0000 0000 0004        		move.l	#Map_obj61,4(a0)
00012576 317C 43E6 0002             		move.w	#$43E6,2(a0)
0001257C 117C 0004 0001             		move.b	#4,1(a0)
00012582 117C 0003 0018             		move.b	#3,$18(a0)
00012588 7000                       		moveq	#0,d0
0001258A 1028 0028                  		move.b	$28(a0),d0
0001258E E648                       		lsr.w	#3,d0
00012590 0240 000E                  		andi.w	#$E,d0
00012594 45FB 00CC                  		lea	Obj61_Var(pc,d0.w),a2
00012598 115A 0019                  		move.b	(a2)+,$19(a0)
0001259C 1152 0016                  		move.b	(a2),$16(a0)
000125A0 E248                       		lsr.w	#1,d0
000125A2 1140 001A                  		move.b	d0,$1A(a0)
000125A6 3168 0008 0034             		move.w	8(a0),$34(a0)
000125AC 3168 000C 0030             		move.w	$C(a0),$30(a0)
000125B2 1028 0028                  		move.b	$28(a0),d0
000125B6 0200 000F                  		andi.b	#$F,d0
000125BA 6700                       		beq.s	Obj61_Action
000125BC 0C00 0007                  		cmpi.b	#7,d0
000125C0 6700                       		beq.s	Obj61_Action
000125C2 117C 0001 0038             		move.b	#1,$38(a0)
000125C8                            
000125C8                            Obj61_Action:				; XREF: Obj61_Index
000125C8 3F28 0008                  		move.w	8(a0),-(sp)
000125CC 7000                       		moveq	#0,d0
000125CE 1028 0028                  		move.b	$28(a0),d0
000125D2 0240 000F                  		andi.w	#$F,d0
000125D6 D040                       		add.w	d0,d0
000125D8 323B 0000                  		move.w	Obj61_TypeIndex(pc,d0.w),d1
000125DC 4EBB 1000                  		jsr	Obj61_TypeIndex(pc,d1.w)
000125E0 381F                       		move.w	(sp)+,d4
000125E2 4A28 0001                  		tst.b	1(a0)
000125E6 6A00                       		bpl.s	Obj61_ChkDel
000125E8 7200                       		moveq	#0,d1
000125EA 1228 0019                  		move.b	$19(a0),d1
000125EE 0641 000B                  		addi.w	#$B,d1
000125F2 7400                       		moveq	#0,d2
000125F4 1428 0016                  		move.b	$16(a0),d2
000125F8 3602                       		move.w	d2,d3
000125FA 5243                       		addq.w	#1,d3
000125FC 6100 D97A                  		bsr.w	SolidObject
00012600 1144 003F                  		move.b	d4,$3F(a0)
00012604 6100 0000                  		bsr.w	loc_12180
00012608                            
00012608                            Obj61_ChkDel:
00012608 3028 0034                  		move.w	$34(a0),d0
0001260C 0240 FF80                  		andi.w	#$FF80,d0
00012610 3238 F700                  		move.w	($FFFFF700).w,d1
00012614 0441 0080                  		subi.w	#$80,d1
00012618 0241 FF80                  		andi.w	#$FF80,d1
0001261C 9041                       		sub.w	d1,d0
0001261E 0C40 0280                  		cmpi.w	#$280,d0
00012622 6200 B5C0                  		bhi.w	DeleteObject
00012626 6000 B580                  		bra.w	DisplaySprite
0001262A                            ; ===========================================================================
0001262A 0000 0000                  Obj61_TypeIndex:dc.w Obj61_Type00-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
0001262E 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
00012632 0000 0000                  		dc.w Obj61_Type04-Obj61_TypeIndex, Obj61_Type05-Obj61_TypeIndex
00012636 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type07-Obj61_TypeIndex
0001263A                            ; ===========================================================================
0001263A                            
0001263A                            Obj61_Type00:				; XREF: Obj61_TypeIndex
0001263A 4E75                       		rts	
0001263C                            ; ===========================================================================
0001263C                            
0001263C                            Obj61_Type01:				; XREF: Obj61_TypeIndex
0001263C 4A68 0036                  		tst.w	$36(a0)		; is Sonic standing on the object?
00012640 6600                       		bne.s	loc_120D6	; if yes, branch
00012642 0828 0003 0022             		btst	#3,$22(a0)
00012648 6700                       		beq.s	locret_120D4
0001264A 317C 001E 0036             		move.w	#30,$36(a0)	; wait for ยซ second
00012650                            
00012650                            locret_120D4:
00012650 4E75                       		rts	
00012652                            ; ===========================================================================
00012652                            
00012652                            loc_120D6:
00012652 5368 0036                  		subq.w	#1,$36(a0)	; subtract 1 from waiting time
00012656 66F8                       		bne.s	locret_120D4	; if time remains, branch
00012658 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
0001265C 4228 0038                  		clr.b	$38(a0)
00012660 4E75                       		rts	
00012662                            ; ===========================================================================
00012662                            
00012662                            Obj61_Type02:				; XREF: Obj61_TypeIndex
00012662 6100 B51E                  		bsr.w	SpeedToPos
00012666 5068 0012                  		addq.w	#8,$12(a0)	; make object fall
0001266A 6100 0000                  		bsr.w	ObjHitFloor
0001266E 4A41                       		tst.w	d1
00012670 6A00 0000                  		bpl.w	locret_12106
00012674 5241                       		addq.w	#1,d1
00012676 D368 000C                  		add.w	d1,$C(a0)
0001267A 4268 0012                  		clr.w	$12(a0)		; stop when it touches the floor
0001267E 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
00012682                            
00012682                            locret_12106:
00012682 4E75                       		rts	
00012684                            ; ===========================================================================
00012684                            
00012684                            Obj61_Type04:				; XREF: Obj61_TypeIndex
00012684 6100 B4FC                  		bsr.w	SpeedToPos
00012688 5168 0012                  		subq.w	#8,$12(a0)	; make object rise
0001268C 6100 0000                  		bsr.w	ObjHitCeiling
00012690 4A41                       		tst.w	d1
00012692 6A00 0000                  		bpl.w	locret_12126
00012696 9368 000C                  		sub.w	d1,$C(a0)
0001269A 4268 0012                  		clr.w	$12(a0)		; stop when it touches the ceiling
0001269E 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
000126A2                            
000126A2                            locret_12126:
000126A2 4E75                       		rts	
000126A4                            ; ===========================================================================
000126A4                            
000126A4                            Obj61_Type05:				; XREF: Obj61_TypeIndex
000126A4 0C28 0001 003F             		cmpi.b	#1,$3F(a0)	; is Sonic touching the	object?
000126AA 6600                       		bne.s	locret_12138	; if not, branch
000126AC 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
000126B0 4228 0038                  		clr.b	$38(a0)
000126B4                            
000126B4                            locret_12138:
000126B4 4E75                       		rts	
000126B6                            ; ===========================================================================
000126B6                            
000126B6                            Obj61_Type07:				; XREF: Obj61_TypeIndex
000126B6 3038 F646                  		move.w	($FFFFF646).w,d0
000126BA 9068 000C                  		sub.w	$C(a0),d0
000126BE 6700                       		beq.s	locret_1217E
000126C0 6400                       		bcc.s	loc_12162
000126C2 0C40 FFFE                  		cmpi.w	#-2,d0
000126C6 6C00                       		bge.s	loc_1214E
000126C8 70FE                       		moveq	#-2,d0
000126CA                            
000126CA                            loc_1214E:
000126CA D168 000C                  		add.w	d0,$C(a0)	; make the block rise with water level
000126CE 6100 0000                  		bsr.w	ObjHitCeiling
000126D2 4A41                       		tst.w	d1
000126D4 6A00 0000                  		bpl.w	locret_12160
000126D8 9368 000C                  		sub.w	d1,$C(a0)
000126DC                            
000126DC                            locret_12160:
000126DC 4E75                       		rts	
000126DE                            ; ===========================================================================
000126DE                            
000126DE                            loc_12162:				; XREF: Obj61_Type07
000126DE 0C40 0002                  		cmpi.w	#2,d0
000126E2 6F00                       		ble.s	loc_1216A
000126E4 7002                       		moveq	#2,d0
000126E6                            
000126E6                            loc_1216A:
000126E6 D168 000C                  		add.w	d0,$C(a0)	; make the block sink with water level
000126EA 6100 0000                  		bsr.w	ObjHitFloor
000126EE 4A41                       		tst.w	d1
000126F0 6A00 0000                  		bpl.w	locret_1217E
000126F4 5241                       		addq.w	#1,d1
000126F6 D368 000C                  		add.w	d1,$C(a0)
000126FA                            
000126FA                            locret_1217E:
000126FA 4E75                       		rts	
000126FC                            ; ===========================================================================
000126FC                            
000126FC                            loc_12180:				; XREF: Obj61_Action
000126FC 4A28 0038                  		tst.b	$38(a0)
00012700 6700                       		beq.s	locret_121C0
00012702 0828 0003 0022             		btst	#3,$22(a0)
00012708 6600                       		bne.s	loc_1219A
0001270A 4A28 003E                  		tst.b	$3E(a0)
0001270E 6700                       		beq.s	locret_121C0
00012710 5928 003E                  		subq.b	#4,$3E(a0)
00012714 6000                       		bra.s	loc_121A6
00012716                            ; ===========================================================================
00012716                            
00012716                            loc_1219A:
00012716 0C28 0040 003E             		cmpi.b	#$40,$3E(a0)
0001271C 6700                       		beq.s	locret_121C0
0001271E 5828 003E                  		addq.b	#4,$3E(a0)
00012722                            
00012722                            loc_121A6:
00012722 1028 003E                  		move.b	$3E(a0),d0
00012726 4EB9 0000 2C22             		jsr	(CalcSine).l
0001272C 323C 0400                  		move.w	#$400,d1
00012730 C1C1                       		muls.w	d1,d0
00012732 4840                       		swap	d0
00012734 D068 0030                  		add.w	$30(a0),d0
00012738 3140 000C                  		move.w	d0,$C(a0)
0001273C                            
0001273C                            locret_121C0:
0001273C 4E75                       		rts	
0001273E                            ; ===========================================================================
0001273E                            ; ---------------------------------------------------------------------------
0001273E                            ; Sprite mappings - blocks (LZ)
0001273E                            ; ---------------------------------------------------------------------------
0001273E                            Map_obj61:
0001273E                            	include "_maps\obj61.asm"
0001273E                            ; ---------------------------------------------------------------------------
0001273E                            ; Sprite mappings - blocks (LZ)
0001273E                            ; ---------------------------------------------------------------------------
0001273E 0000 0000                  		dc.w byte_121CA-Map_obj61, byte_121D0-Map_obj61
00012742 0000 0000                  		dc.w byte_121DB-Map_obj61, byte_121E1-Map_obj61
00012746 01                         byte_121CA:	dc.b 1
00012747 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001274C 02                         byte_121D0:	dc.b 2
0001274D F40E 0069 E0               		dc.b $F4, $E, 0, $69, $E0
00012752 F40E 0075 00               		dc.b $F4, $E, 0, $75, 0
00012757 01                         byte_121DB:	dc.b 1
00012758 F00F 011A F0               		dc.b $F0, $F, 1, $1A, $F0
0001275D 01                         byte_121E1:	dc.b 1
0001275E F00F FDFA F0               		dc.b $F0, $F, $FD, $FA,	$F0
00012764 00                         		even
00012764 00                         		even
00012764                            
00012764                            ; ===========================================================================
00012764                            ; ---------------------------------------------------------------------------
00012764                            ; Object 62 - gargoyle head (LZ)
00012764                            ; ---------------------------------------------------------------------------
00012764                            
00012764                            Obj62:					; XREF: Obj_Index
00012764 7000                       		moveq	#0,d0
00012766 1028 0024                  		move.b	$24(a0),d0
0001276A 323B 0000                  		move.w	Obj62_Index(pc,d0.w),d1
0001276E 4EBB 1000                  		jsr	Obj62_Index(pc,d1.w)
00012772 6000 D4DC                  		bra.w	MarkObjGone
00012776                            ; ===========================================================================
00012776 0000                       Obj62_Index:	dc.w Obj62_Main-Obj62_Index
00012778 0000                       		dc.w Obj62_MakeFire-Obj62_Index
0001277A 0000                       		dc.w Obj62_FireBall-Obj62_Index
0001277C 0000                       		dc.w Obj62_AniFire-Obj62_Index
0001277E                            
0001277E 1E3C 5A78 96B4 D2F0        Obj62_SpitRate:	dc.b 30, 60, 90, 120, 150, 180,	210, 240
00012786                            ; ===========================================================================
00012786                            
00012786                            Obj62_Main:				; XREF: Obj62_Index
00012786 5428 0024                  		addq.b	#2,$24(a0)
0001278A 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
00012792 317C 42E9 0002             		move.w	#$42E9,2(a0)
00012798 0028 0004 0001             		ori.b	#4,1(a0)
0001279E 117C 0003 0018             		move.b	#3,$18(a0)
000127A4 117C 0010 0019             		move.b	#$10,$19(a0)
000127AA 1028 0028                  		move.b	$28(a0),d0	; get object type
000127AE 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
000127B2 117B 00CA 001F             		move.b	Obj62_SpitRate(pc,d0.w),$1F(a0)	; set fireball spit rate
000127B8 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
000127BE 0228 000F 0028             		andi.b	#$F,$28(a0)
000127C4                            
000127C4                            Obj62_MakeFire:				; XREF: Obj62_Index
000127C4 5328 001E                  		subq.b	#1,$1E(a0)
000127C8 6600                       		bne.s	Obj62_NoFire
000127CA 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
000127D0 6100 B650                  		bsr.w	ChkObjOnScreen
000127D4 6600                       		bne.s	Obj62_NoFire
000127D6 6100 B856                  		bsr.w	SingleObjLoad
000127DA 6600                       		bne.s	Obj62_NoFire
000127DC 12BC 0062                  		move.b	#$62,0(a1)	; load fireball	object
000127E0 5829 0024                  		addq.b	#4,$24(a1)
000127E4 3368 0008 0008             		move.w	8(a0),8(a1)
000127EA 3368 000C 000C             		move.w	$C(a0),$C(a1)
000127F0 1368 0001 0001             		move.b	1(a0),1(a1)
000127F6 1368 0022 0022             		move.b	$22(a0),$22(a1)
000127FC                            
000127FC                            Obj62_NoFire:
000127FC 4E75                       		rts	
000127FE                            ; ===========================================================================
000127FE                            
000127FE                            Obj62_FireBall:				; XREF: Obj62_Index
000127FE 5428 0024                  		addq.b	#2,$24(a0)
00012802 117C 0008 0016             		move.b	#8,$16(a0)
00012808 117C 0008 0017             		move.b	#8,$17(a0)
0001280E 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
00012816 317C 02E9 0002             		move.w	#$2E9,2(a0)
0001281C 0028 0004 0001             		ori.b	#4,1(a0)
00012822 117C 0004 0018             		move.b	#4,$18(a0)
00012828 117C 0098 0020             		move.b	#$98,$20(a0)
0001282E 117C 0008 0019             		move.b	#8,$19(a0)
00012834 117C 0002 001A             		move.b	#2,$1A(a0)
0001283A 5068 000C                  		addq.w	#8,$C(a0)
0001283E 317C 0200 0010             		move.w	#$200,$10(a0)
00012844 0828 0000 0022             		btst	#0,$22(a0)
0001284A 6600                       		bne.s	Obj62_Sound
0001284C 4468 0010                  		neg.w	$10(a0)
00012850                            
00012850                            Obj62_Sound:
00012850 303C 00AE                  		move.w	#$AE,d0
00012854 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play lava ball sound
0001285A                            
0001285A                            Obj62_AniFire:				; XREF: Obj62_Index
0001285A 1038 FE05                  		move.b	($FFFFFE05).w,d0
0001285E 0200 0007                  		andi.b	#7,d0
00012862 6600                       		bne.s	Obj62_StopFire
00012864 0868 0000 001A             		bchg	#0,$1A(a0)	; switch between frame 01 and 02
0001286A                            
0001286A                            Obj62_StopFire:
0001286A 6100 B316                  		bsr.w	SpeedToPos
0001286E 0828 0000 0022             		btst	#0,$22(a0)
00012874 6600                       		bne.s	Obj62_StopFire2
00012876 76F8                       		moveq	#-8,d3
00012878 6100 0000                  		bsr.w	ObjHitWallLeft
0001287C 4A41                       		tst.w	d1
0001287E 6B00 B364                  		bmi.w	DeleteObject	; delete if the	fireball hits a	wall
00012882 4E75                       		rts	
00012884                            ; ===========================================================================
00012884                            
00012884                            Obj62_StopFire2:
00012884 7608                       		moveq	#8,d3
00012886 6100 0000                  		bsr.w	ObjHitWallRight
0001288A 4A41                       		tst.w	d1
0001288C 6B00 B356                  		bmi.w	DeleteObject
00012890 4E75                       		rts	
00012892                            ; ===========================================================================
00012892                            ; ---------------------------------------------------------------------------
00012892                            ; Sprite mappings - gargoyle head (LZ)
00012892                            ; ---------------------------------------------------------------------------
00012892                            Map_obj62:
00012892                            	include "_maps\obj62.asm"
00012892                            ; ---------------------------------------------------------------------------
00012892                            ; Sprite mappings - gargoyle head (LZ)
00012892                            ; ---------------------------------------------------------------------------
00012892 0000 0000                  		dc.w byte_12320-Map_obj62, byte_12320-Map_obj62
00012896 0000 0000                  		dc.w byte_12330-Map_obj62, byte_12336-Map_obj62
0001289A 03                         byte_12320:	dc.b 3
0001289B F004 0000 00               		dc.b $F0, 4, 0,	0, 0
000128A0 F80D 0002 F0               		dc.b $F8, $D, 0, 2, $F0
000128A5 0808 000A F8               		dc.b 8,	8, 0, $A, $F8
000128AA 01                         byte_12330:	dc.b 1
000128AB FC04 000D F8               		dc.b $FC, 4, 0,	$D, $F8
000128B0 01                         byte_12336:	dc.b 1
000128B1 FC04 000F F8               		dc.b $FC, 4, 0,	$F, $F8
000128B6                            		even
000128B6                            		even
000128B6                            
000128B6                            ; ===========================================================================
000128B6                            ; ---------------------------------------------------------------------------
000128B6                            ; Object 63 - platforms	on a conveyor belt (LZ)
000128B6                            ; ---------------------------------------------------------------------------
000128B6                            
000128B6                            Obj63:					; XREF: Obj_Index
000128B6 7000                       		moveq	#0,d0
000128B8 1028 0024                  		move.b	$24(a0),d0
000128BC 323B 0000                  		move.w	Obj63_Index(pc,d0.w),d1
000128C0 4EBB 1000                  		jsr	Obj63_Index(pc,d1.w)
000128C4 3028 0030                  		move.w	$30(a0),d0
000128C8 0240 FF80                  		andi.w	#$FF80,d0
000128CC 3238 F700                  		move.w	($FFFFF700).w,d1
000128D0 0441 0080                  		subi.w	#$80,d1
000128D4 0241 FF80                  		andi.w	#$FF80,d1
000128D8 9041                       		sub.w	d1,d0
000128DA 0C40 0280                  		cmpi.w	#$280,d0
000128DE 6200                       		bhi.s	loc_1236A
000128E0                            
000128E0                            Obj63_Display:				; XREF: loc_1236A
000128E0 6000 B2C6                  		bra.w	DisplaySprite
000128E4                            ; ===========================================================================
000128E4                            
000128E4                            loc_1236A:				; XREF: Obj63
000128E4 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w
000128EA 6600                       		bne.s	loc_12378
000128EC 0C40 FF80                  		cmpi.w	#-$80,d0
000128F0 64EE                       		bcc.s	Obj63_Display
000128F2                            
000128F2                            loc_12378:
000128F2 1028 002F                  		move.b	$2F(a0),d0
000128F6 6A00 B2EC                  		bpl.w	DeleteObject
000128FA 0240 007F                  		andi.w	#$7F,d0
000128FE 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00012902 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00012908 6000 B2DA                  		bra.w	DeleteObject
0001290C                            ; ===========================================================================
0001290C 0000                       Obj63_Index:	dc.w Obj63_Main-Obj63_Index
0001290E 0000                       		dc.w loc_124B2-Obj63_Index
00012910 0000                       		dc.w loc_124C2-Obj63_Index
00012912 0000                       		dc.w loc_124DE-Obj63_Index
00012914                            ; ===========================================================================
00012914                            
00012914                            Obj63_Main:				; XREF: Obj63_Index
00012914 1028 0028                  		move.b	$28(a0),d0
00012918 6B00 0000                  		bmi.w	loc_12460
0001291C 5428 0024                  		addq.b	#2,$24(a0)
00012920 217C 0000 0000 0004        		move.l	#Map_obj63,4(a0)
00012928 317C 43F6 0002             		move.w	#$43F6,2(a0)
0001292E 0028 0004 0001             		ori.b	#4,1(a0)
00012934 117C 0010 0019             		move.b	#$10,$19(a0)
0001293A 117C 0004 0018             		move.b	#4,$18(a0)
00012940 0C28 007F 0028             		cmpi.b	#$7F,$28(a0)
00012946 6600                       		bne.s	loc_123E2
00012948 5828 0024                  		addq.b	#4,$24(a0)
0001294C 317C 03F6 0002             		move.w	#$3F6,2(a0)
00012952 117C 0001 0018             		move.b	#1,$18(a0)
00012958 6000 0000                  		bra.w	loc_124DE
0001295C                            ; ===========================================================================
0001295C                            
0001295C                            loc_123E2:
0001295C 117C 0004 001A             		move.b	#4,$1A(a0)
00012962 7000                       		moveq	#0,d0
00012964 1028 0028                  		move.b	$28(a0),d0
00012968 3200                       		move.w	d0,d1
0001296A E648                       		lsr.w	#3,d0
0001296C 0240 001E                  		andi.w	#$1E,d0
00012970 45FA 0000                  		lea	Obj63_Data(pc),a2
00012974 D4F2 0000                  		adda.w	(a2,d0.w),a2
00012978 315A 0038                  		move.w	(a2)+,$38(a0)
0001297C 315A 0030                  		move.w	(a2)+,$30(a0)
00012980 214A 003C                  		move.l	a2,$3C(a0)
00012984 0241 000F                  		andi.w	#$F,d1
00012988 E549                       		lsl.w	#2,d1
0001298A 1141 0038                  		move.b	d1,$38(a0)
0001298E 117C 0004 003A             		move.b	#4,$3A(a0)
00012994 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00012998 6700                       		beq.s	loc_1244C
0001299A 117C 0001 003B             		move.b	#1,$3B(a0)
000129A0 4428 003A                  		neg.b	$3A(a0)
000129A4 7200                       		moveq	#0,d1
000129A6 1228 0038                  		move.b	$38(a0),d1
000129AA D228 003A                  		add.b	$3A(a0),d1
000129AE B228 0039                  		cmp.b	$39(a0),d1
000129B2 6500                       		bcs.s	loc_12448
000129B4 1001                       		move.b	d1,d0
000129B6 7200                       		moveq	#0,d1
000129B8 4A00                       		tst.b	d0
000129BA 6A00                       		bpl.s	loc_12448
000129BC 1228 0039                  		move.b	$39(a0),d1
000129C0 5901                       		subq.b	#4,d1
000129C2                            
000129C2                            loc_12448:
000129C2 1141 0038                  		move.b	d1,$38(a0)
000129C6                            
000129C6                            loc_1244C:
000129C6 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
000129CC 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
000129D2 6100 0000                  		bsr.w	Obj63_ChangeDir
000129D6 6000 0000                  		bra.w	loc_124B2
000129DA                            ; ===========================================================================
000129DA                            
000129DA                            loc_12460:				; XREF: Obj63_Main
000129DA 1140 002F                  		move.b	d0,$2F(a0)
000129DE 0240 007F                  		andi.w	#$7F,d0
000129E2 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
000129E6 08F2 0000 0000             		bset	#0,(a2,d0.w)
000129EC 6600 B1F6                  		bne.w	DeleteObject
000129F0 D040                       		add.w	d0,d0
000129F2 0240 001E                  		andi.w	#$1E,d0
000129F6 0640 0070                  		addi.w	#$70,d0
000129FA 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00012A00 D4F2 0000                  		adda.w	(a2,d0.w),a2
00012A04 321A                       		move.w	(a2)+,d1
00012A06 2248                       		movea.l	a0,a1
00012A08 6000                       		bra.s	Obj63_MakePtfms
00012A0A                            ; ===========================================================================
00012A0A                            
00012A0A                            Obj63_Loop:
00012A0A 6100 B622                  		bsr.w	SingleObjLoad
00012A0E 6600                       		bne.s	loc_124AA
00012A10                            
00012A10                            Obj63_MakePtfms:			; XREF: loc_12460
00012A10 12BC 0063                  		move.b	#$63,0(a1)
00012A14 335A 0008                  		move.w	(a2)+,8(a1)
00012A18 335A 000C                  		move.w	(a2)+,$C(a1)
00012A1C 301A                       		move.w	(a2)+,d0
00012A1E 1340 0028                  		move.b	d0,$28(a1)
00012A22                            
00012A22                            loc_124AA:
00012A22 51C9 FFE6                  		dbf	d1,Obj63_Loop
00012A26                            
00012A26 588F                       		addq.l	#4,sp
00012A28 4E75                       		rts	
00012A2A                            ; ===========================================================================
00012A2A                            
00012A2A                            loc_124B2:				; XREF: Obj63_Index
00012A2A 7200                       		moveq	#0,d1
00012A2C 1228 0019                  		move.b	$19(a0),d1
00012A30 4EB9 0000 789E             		jsr	(PlatformObject).l
00012A36 6000 0000                  		bra.w	sub_12502
00012A3A                            ; ===========================================================================
00012A3A                            
00012A3A                            loc_124C2:				; XREF: Obj63_Index
00012A3A 7200                       		moveq	#0,d1
00012A3C 1228 0019                  		move.b	$19(a0),d1
00012A40 4EB9 0000 7A12             		jsr	(ExitPlatform).l
00012A46 3F28 0008                  		move.w	8(a0),-(sp)
00012A4A 6100 0000                  		bsr.w	sub_12502
00012A4E 341F                       		move.w	(sp)+,d2
00012A50 4EF9 0000 7F7C             		jmp	(MvSonicOnPtfm2).l
00012A56                            ; ===========================================================================
00012A56                            
00012A56                            loc_124DE:				; XREF: Obj63_Index
00012A56 3038 FE04                  		move.w	($FFFFFE04).w,d0
00012A5A 0240 0003                  		andi.w	#3,d0
00012A5E 6600                       		bne.s	loc_124FC
00012A60 7201                       		moveq	#1,d1
00012A62 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00012A66 6700                       		beq.s	loc_124F2
00012A68 4401                       		neg.b	d1
00012A6A                            
00012A6A                            loc_124F2:
00012A6A D328 001A                  		add.b	d1,$1A(a0)
00012A6E 0228 0003 001A             		andi.b	#3,$1A(a0)
00012A74                            
00012A74                            loc_124FC:
00012A74 588F                       		addq.l	#4,sp
00012A76 6000 D1D8                  		bra.w	MarkObjGone
00012A7A                            
00012A7A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012A7A                            
00012A7A                            
00012A7A                            sub_12502:				; XREF: loc_124B2; loc_124C2
00012A7A 4A38 F7EE                  		tst.b	($FFFFF7EE).w
00012A7E 6700                       		beq.s	loc_12520
00012A80 4A28 003B                  		tst.b	$3B(a0)
00012A84 6600                       		bne.s	loc_12520
00012A86 117C 0001 003B             		move.b	#1,$3B(a0)
00012A8C 11FC 0001 F7C0             		move.b	#1,($FFFFF7C0).w
00012A92 4428 003A                  		neg.b	$3A(a0)
00012A96 6000                       		bra.s	loc_12534
00012A98                            ; ===========================================================================
00012A98                            
00012A98                            loc_12520:
00012A98 3028 0008                  		move.w	8(a0),d0
00012A9C B068 0034                  		cmp.w	$34(a0),d0
00012AA0 6600                       		bne.s	loc_1256A
00012AA2 3028 000C                  		move.w	$C(a0),d0
00012AA6 B068 0036                  		cmp.w	$36(a0),d0
00012AAA 6600                       		bne.s	loc_1256A
00012AAC                            
00012AAC                            loc_12534:
00012AAC 7200                       		moveq	#0,d1
00012AAE 1228 0038                  		move.b	$38(a0),d1
00012AB2 D228 003A                  		add.b	$3A(a0),d1
00012AB6 B228 0039                  		cmp.b	$39(a0),d1
00012ABA 6500                       		bcs.s	loc_12552
00012ABC 1001                       		move.b	d1,d0
00012ABE 7200                       		moveq	#0,d1
00012AC0 4A00                       		tst.b	d0
00012AC2 6A00                       		bpl.s	loc_12552
00012AC4 1228 0039                  		move.b	$39(a0),d1
00012AC8 5901                       		subq.b	#4,d1
00012ACA                            
00012ACA                            loc_12552:
00012ACA 1141 0038                  		move.b	d1,$38(a0)
00012ACE 2268 003C                  		movea.l	$3C(a0),a1
00012AD2 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00012AD8 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00012ADE 6100 0000                  		bsr.w	Obj63_ChangeDir
00012AE2                            
00012AE2                            loc_1256A:
00012AE2 6100 B09E                  		bsr.w	SpeedToPos
00012AE6 4E75                       		rts	
00012AE8                            ; End of function sub_12502
00012AE8                            
00012AE8                            
00012AE8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012AE8                            
00012AE8                            
00012AE8                            Obj63_ChangeDir:			; XREF: loc_123E2; sub_12502
00012AE8 7000                       		moveq	#0,d0
00012AEA 343C FF00                  		move.w	#-$100,d2
00012AEE 3028 0008                  		move.w	8(a0),d0
00012AF2 9068 0034                  		sub.w	$34(a0),d0
00012AF6 6400                       		bcc.s	loc_12584
00012AF8 4440                       		neg.w	d0
00012AFA 4442                       		neg.w	d2
00012AFC                            
00012AFC                            loc_12584:
00012AFC 7200                       		moveq	#0,d1
00012AFE 363C FF00                  		move.w	#-$100,d3
00012B02 3228 000C                  		move.w	$C(a0),d1
00012B06 9268 0036                  		sub.w	$36(a0),d1
00012B0A 6400                       		bcc.s	loc_12598
00012B0C 4441                       		neg.w	d1
00012B0E 4443                       		neg.w	d3
00012B10                            
00012B10                            loc_12598:
00012B10 B240                       		cmp.w	d0,d1
00012B12 6500                       		bcs.s	loc_125C2
00012B14 3028 0008                  		move.w	8(a0),d0
00012B18 9068 0034                  		sub.w	$34(a0),d0
00012B1C 6700                       		beq.s	loc_125AE
00012B1E 48C0                       		ext.l	d0
00012B20 E180                       		asl.l	#8,d0
00012B22 81C1                       		divs.w	d1,d0
00012B24 4440                       		neg.w	d0
00012B26                            
00012B26                            loc_125AE:
00012B26 3140 0010                  		move.w	d0,$10(a0)
00012B2A 3143 0012                  		move.w	d3,$12(a0)
00012B2E 4840                       		swap	d0
00012B30 3140 000A                  		move.w	d0,$A(a0)
00012B34 4268 000E                  		clr.w	$E(a0)
00012B38 4E75                       		rts	
00012B3A                            ; ===========================================================================
00012B3A                            
00012B3A                            loc_125C2:				; XREF: Obj63_ChangeDir
00012B3A 3228 000C                  		move.w	$C(a0),d1
00012B3E 9268 0036                  		sub.w	$36(a0),d1
00012B42 6700                       		beq.s	loc_125D4
00012B44 48C1                       		ext.l	d1
00012B46 E181                       		asl.l	#8,d1
00012B48 83C0                       		divs.w	d0,d1
00012B4A 4441                       		neg.w	d1
00012B4C                            
00012B4C                            loc_125D4:
00012B4C 3141 0012                  		move.w	d1,$12(a0)
00012B50 3142 0010                  		move.w	d2,$10(a0)
00012B54 4841                       		swap	d1
00012B56 3141 000E                  		move.w	d1,$E(a0)
00012B5A 4268 000A                  		clr.w	$A(a0)
00012B5E 4E75                       		rts	
00012B60                            ; End of function Obj63_ChangeDir
00012B60                            
00012B60                            ; ===========================================================================
00012B60 0000                       Obj63_Data:	dc.w word_125F4-Obj63_Data
00012B62 0000                       		dc.w word_12610-Obj63_Data
00012B64 0000                       		dc.w word_12628-Obj63_Data
00012B66 0000                       		dc.w word_1263C-Obj63_Data
00012B68 0000                       		dc.w word_12650-Obj63_Data
00012B6A 0000                       		dc.w word_12668-Obj63_Data
00012B6C 0018 1070 1078 021A 10BE+  word_125F4:	dc.w $18, $1070, $1078,	$21A, $10BE, $260, $10BE, $393
00012B7C 108C 03C5 1022 0390 1022+  		dc.w $108C, $3C5, $1022, $390, $1022, $244
00012B88 0014 1280 127E 0280 12CE+  word_12610:	dc.w $14, $1280, $127E,	$280, $12CE, $2D0, $12CE, $46E
00012B98 1232 0420 1232 02CC        		dc.w $1232, $420, $1232, $2CC
00012BA0 0010 0D68 0D22 0482 0D22+  word_12628:	dc.w $10, $D68,	$D22, $482, $D22, $5DE,	$DAE, $5DE, $DAE, $482
00012BB4 0010 0DA0 0D62 03A2 0DEE+  word_1263C:	dc.w $10, $DA0,	$D62, $3A2, $DEE, $3A2,	$DEE, $4DE, $D62, $4DE
00012BC8 0014 0D00 0CAC 0242 0DDE+  word_12650:	dc.w $14, $D00,	$CAC, $242, $DDE, $242,	$DDE, $3DE, $C52, $3DE,	$C52, $29C
00012BE0 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
00012BF4                            
00012BF4                            ; ---------------------------------------------------------------------------
00012BF4                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00012BF4                            ; ---------------------------------------------------------------------------
00012BF4                            Map_obj63:
00012BF4                            	include "_maps\obj63.asm"
00012BF4                            ; ---------------------------------------------------------------------------
00012BF4                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00012BF4                            ; ---------------------------------------------------------------------------
00012BF4 0000 0000                  		dc.w byte_12686-Map_obj63, byte_1268C-Map_obj63
00012BF8 0000 0000                  		dc.w byte_12692-Map_obj63, byte_12698-Map_obj63
00012BFC 0000                       		dc.w byte_1269E-Map_obj63
00012BFE 01                         byte_12686:	dc.b 1
00012BFF F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00012C04 01                         byte_1268C:	dc.b 1
00012C05 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00012C0A 01                         byte_12692:	dc.b 1
00012C0B F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
00012C10 01                         byte_12698:	dc.b 1
00012C11 F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
00012C16 01                         byte_1269E:	dc.b 1
00012C17 F80D 0040 F0               		dc.b $F8, $D, 0, $40, $F0
00012C1C                            		even
00012C1C                            		even
00012C1C                            
00012C1C                            ; ===========================================================================
00012C1C                            ; ---------------------------------------------------------------------------
00012C1C                            ; Object 64 - bubbles (LZ)
00012C1C                            ; ---------------------------------------------------------------------------
00012C1C                            
00012C1C                            Obj64:					; XREF: Obj_Index
00012C1C 7000                       		moveq	#0,d0
00012C1E 1028 0024                  		move.b	$24(a0),d0
00012C22 323B 0000                  		move.w	Obj64_Index(pc,d0.w),d1
00012C26 4EFB 1000                  		jmp	Obj64_Index(pc,d1.w)
00012C2A                            ; ===========================================================================
00012C2A 0000                       Obj64_Index:	dc.w Obj64_Main-Obj64_Index
00012C2C 0000                       		dc.w Obj64_Animate-Obj64_Index
00012C2E 0000                       		dc.w Obj64_ChkWater-Obj64_Index
00012C30 0000                       		dc.w Obj64_Display2-Obj64_Index
00012C32 0000                       		dc.w Obj64_Delete3-Obj64_Index
00012C34 0000                       		dc.w Obj64_BblMaker-Obj64_Index
00012C36                            ; ===========================================================================
00012C36                            
00012C36                            Obj64_Main:				; XREF: Obj64_Index
00012C36 5428 0024                  		addq.b	#2,$24(a0)
00012C3A 217C 0000 0000 0004        		move.l	#Map_obj64,4(a0)
00012C42 317C 8348 0002             		move.w	#$8348,2(a0)
00012C48 117C 0084 0001             		move.b	#$84,1(a0)
00012C4E 117C 0010 0019             		move.b	#$10,$19(a0)
00012C54 117C 0001 0018             		move.b	#1,$18(a0)
00012C5A 1028 0028                  		move.b	$28(a0),d0	; get object type
00012C5E 6A00                       		bpl.s	Obj64_Bubble	; if type is $0-$7F, branch
00012C60 5028 0024                  		addq.b	#8,$24(a0)
00012C64 0240 007F                  		andi.w	#$7F,d0		; read only last 7 bits	(deduct	$80)
00012C68 1140 0032                  		move.b	d0,$32(a0)
00012C6C 1140 0033                  		move.b	d0,$33(a0)
00012C70 117C 0006 001C             		move.b	#6,$1C(a0)
00012C76 6000 0000                  		bra.w	Obj64_BblMaker
00012C7A                            ; ===========================================================================
00012C7A                            
00012C7A                            Obj64_Bubble:				; XREF: Obj64_Main
00012C7A 1140 001C                  		move.b	d0,$1C(a0)
00012C7E 3168 0008 0030             		move.w	8(a0),$30(a0)
00012C84 317C FF78 0012             		move.w	#-$88,$12(a0)	; float	bubble upwards
00012C8A 4EB9 0000 2BFC             		jsr	(RandomNumber).l
00012C90 1140 0026                  		move.b	d0,$26(a0)
00012C94                            
00012C94                            Obj64_Animate:				; XREF: Obj64_Index
00012C94 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00012C9A 4EB9 0000 AC42             		jsr	AnimateSprite
00012CA0 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
00012CA6 6600                       		bne.s	Obj64_ChkWater
00012CA8 117C 0001 002E             		move.b	#1,$2E(a0)
00012CAE                            
00012CAE                            Obj64_ChkWater:				; XREF: Obj64_Index
00012CAE 3038 F646                  		move.w	($FFFFF646).w,d0
00012CB2 B068 000C                  		cmp.w	$C(a0),d0	; is bubble underwater?
00012CB6 6500                       		bcs.s	Obj64_Wobble	; if yes, branch
00012CB8                            
00012CB8                            Obj64_Burst:				; XREF: Obj64_Wobble
00012CB8 117C 0006 0024             		move.b	#6,$24(a0)
00012CBE 5628 001C                  		addq.b	#3,$1C(a0)	; run "bursting" animation
00012CC2 6000 0000                  		bra.w	Obj64_Display2
00012CC6                            ; ===========================================================================
00012CC6                            
00012CC6                            Obj64_Wobble:				; XREF: Obj64_ChkWater
00012CC6 1028 0026                  		move.b	$26(a0),d0
00012CCA 5228 0026                  		addq.b	#1,$26(a0)
00012CCE 0240 007F                  		andi.w	#$7F,d0
00012CD2 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
00012CD8 1031 0000                  		move.b	(a1,d0.w),d0
00012CDC 4880                       		ext.w	d0
00012CDE D068 0030                  		add.w	$30(a0),d0
00012CE2 3140 0008                  		move.w	d0,8(a0)	; change bubble's horizontal position
00012CE6 4A28 002E                  		tst.b	$2E(a0)
00012CEA 6700                       		beq.s	Obj64_Display
00012CEC 6100 0000                  		bsr.w	Obj64_ChkSonic	; has Sonic touched the	bubble?
00012CF0 6700                       		beq.s	Obj64_Display	; if not, branch
00012CF2                            
00012CF2 6100 0000                  		bsr.w	ResumeMusic	; cancel countdown music
00012CF6 303C 00AD                  		move.w	#$AD,d0
00012CFA 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play collecting	bubble sound
00012D00 43F8 D000                  		lea	($FFFFD000).w,a1
00012D04 4269 0010                  		clr.w	$10(a1)
00012D08 4269 0012                  		clr.w	$12(a1)
00012D0C 4269 0014                  		clr.w	$14(a1)
00012D10 137C 0015 001C             		move.b	#$15,$1C(a1)
00012D16 337C 0023 003E             		move.w	#$23,$3E(a1)
00012D1C 137C 0000 003C             		move.b	#0,$3C(a1)
00012D22 08A9 0005 0022             		bclr	#5,$22(a1)
00012D28 08A9 0004 0022             		bclr	#4,$22(a1)
00012D2E 0829 0002 0022             		btst	#2,$22(a1)
00012D34 6700 FF82                  		beq.w	Obj64_Burst
00012D38 08A9 0002 0022             		bclr	#2,$22(a1)
00012D3E 137C 0013 0016             		move.b	#$13,$16(a1)
00012D44 137C 0009 0017             		move.b	#9,$17(a1)
00012D4A 5B69 000C                  		subq.w	#5,$C(a1)
00012D4E 6000 FF68                  		bra.w	Obj64_Burst
00012D52                            ; ===========================================================================
00012D52                            
00012D52                            Obj64_Display:				; XREF: Obj64_Wobble
00012D52 6100 AE2E                  		bsr.w	SpeedToPos
00012D56 4A28 0001                  		tst.b	1(a0)
00012D5A 6A00                       		bpl.s	Obj64_Delete
00012D5C 4EFA AE4A                  		jmp	DisplaySprite
00012D60                            ; ===========================================================================
00012D60                            
00012D60                            Obj64_Delete:
00012D60 4EFA AE82                  		jmp	DeleteObject
00012D64                            ; ===========================================================================
00012D64                            
00012D64                            Obj64_Display2:				; XREF: Obj64_Index
00012D64 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00012D6A 4EB9 0000 AC42             		jsr	AnimateSprite
00012D70 4A28 0001                  		tst.b	1(a0)
00012D74 6A00                       		bpl.s	Obj64_Delete2
00012D76 4EFA AE30                  		jmp	DisplaySprite
00012D7A                            ; ===========================================================================
00012D7A                            
00012D7A                            Obj64_Delete2:
00012D7A 4EFA AE68                  		jmp	DeleteObject
00012D7E                            ; ===========================================================================
00012D7E                            
00012D7E                            Obj64_Delete3:				; XREF: Obj64_Index
00012D7E 6000 AE64                  		bra.w	DeleteObject
00012D82                            ; ===========================================================================
00012D82                            
00012D82                            Obj64_BblMaker:				; XREF: Obj64_Index
00012D82 4A68 0036                  		tst.w	$36(a0)
00012D86 6600                       		bne.s	loc_12874
00012D88 3038 F646                  		move.w	($FFFFF646).w,d0
00012D8C B068 000C                  		cmp.w	$C(a0),d0	; is bubble maker underwater?
00012D90 6400 0000                  		bcc.w	Obj64_ChkDel	; if not, branch
00012D94 4A28 0001                  		tst.b	1(a0)
00012D98 6A00 0000                  		bpl.w	Obj64_ChkDel
00012D9C 5368 0038                  		subq.w	#1,$38(a0)
00012DA0 6A00 0000                  		bpl.w	loc_12914
00012DA4 317C 0001 0036             		move.w	#1,$36(a0)
00012DAA                            
00012DAA                            loc_1283A:
00012DAA 4EB9 0000 2BFC             		jsr	(RandomNumber).l
00012DB0 3200                       		move.w	d0,d1
00012DB2 0240 0007                  		andi.w	#7,d0
00012DB6 0C40 0006                  		cmpi.w	#6,d0
00012DBA 64EE                       		bcc.s	loc_1283A
00012DBC                            
00012DBC 1140 0034                  		move.b	d0,$34(a0)
00012DC0 0241 000C                  		andi.w	#$C,d1
00012DC4 43F9 0000 0000             		lea	(Obj64_BblTypes).l,a1
00012DCA D2C1                       		adda.w	d1,a1
00012DCC 2149 003C                  		move.l	a1,$3C(a0)
00012DD0 5328 0032                  		subq.b	#1,$32(a0)
00012DD4 6A00                       		bpl.s	loc_12872
00012DD6 1168 0033 0032             		move.b	$33(a0),$32(a0)
00012DDC 08E8 0007 0036             		bset	#7,$36(a0)
00012DE2                            
00012DE2                            loc_12872:
00012DE2 6000                       		bra.s	loc_1287C
00012DE4                            ; ===========================================================================
00012DE4                            
00012DE4                            loc_12874:				; XREF: Obj64_BblMaker
00012DE4 5368 0038                  		subq.w	#1,$38(a0)
00012DE8 6A00 0000                  		bpl.w	loc_12914
00012DEC                            
00012DEC                            loc_1287C:
00012DEC 4EB9 0000 2BFC             		jsr	(RandomNumber).l
00012DF2 0240 001F                  		andi.w	#$1F,d0
00012DF6 3140 0038                  		move.w	d0,$38(a0)
00012DFA 6100 B232                  		bsr.w	SingleObjLoad
00012DFE 6600                       		bne.s	loc_128F8
00012E00 12BC 0064                  		move.b	#$64,0(a1)	; load bubble object
00012E04 3368 0008 0008             		move.w	8(a0),8(a1)
00012E0A 4EB9 0000 2BFC             		jsr	(RandomNumber).l
00012E10 0240 000F                  		andi.w	#$F,d0
00012E14 5140                       		subq.w	#8,d0
00012E16 D169 0008                  		add.w	d0,8(a1)
00012E1A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012E20 7000                       		moveq	#0,d0
00012E22 1028 0034                  		move.b	$34(a0),d0
00012E26 2468 003C                  		movea.l	$3C(a0),a2
00012E2A 1372 0000 0028             		move.b	(a2,d0.w),$28(a1)
00012E30 0828 0007 0036             		btst	#7,$36(a0)
00012E36 6700                       		beq.s	loc_128F8
00012E38 4EB9 0000 2BFC             		jsr	(RandomNumber).l
00012E3E 0240 0003                  		andi.w	#3,d0
00012E42 6600                       		bne.s	loc_128E4
00012E44 08E8 0006 0036             		bset	#6,$36(a0)
00012E4A 6600                       		bne.s	loc_128F8
00012E4C 137C 0002 0028             		move.b	#2,$28(a1)
00012E52                            
00012E52                            loc_128E4:
00012E52 4A28 0034                  		tst.b	$34(a0)
00012E56 6600                       		bne.s	loc_128F8
00012E58 08E8 0006 0036             		bset	#6,$36(a0)
00012E5E 6600                       		bne.s	loc_128F8
00012E60 137C 0002 0028             		move.b	#2,$28(a1)
00012E66                            
00012E66                            loc_128F8:
00012E66 5328 0034                  		subq.b	#1,$34(a0)
00012E6A 6A00                       		bpl.s	loc_12914
00012E6C 4EB9 0000 2BFC             		jsr	(RandomNumber).l
00012E72 0240 007F                  		andi.w	#$7F,d0
00012E76 0640 0080                  		addi.w	#$80,d0
00012E7A D168 0038                  		add.w	d0,$38(a0)
00012E7E 4268 0036                  		clr.w	$36(a0)
00012E82                            
00012E82                            loc_12914:
00012E82 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00012E88 4EB9 0000 AC42             		jsr	AnimateSprite
00012E8E                            
00012E8E                            Obj64_ChkDel:				; XREF: Obj64_BblMaker
00012E8E 3028 0008                  		move.w	8(a0),d0
00012E92 0240 FF80                  		andi.w	#$FF80,d0
00012E96 3238 F700                  		move.w	($FFFFF700).w,d1
00012E9A 0441 0080                  		subi.w	#$80,d1
00012E9E 0241 FF80                  		andi.w	#$FF80,d1
00012EA2 9041                       		sub.w	d1,d0
00012EA4 0C40 0280                  		cmpi.w	#$280,d0
00012EA8 6200 AD3A                  		bhi.w	DeleteObject
00012EAC 3038 F646                  		move.w	($FFFFF646).w,d0
00012EB0 B068 000C                  		cmp.w	$C(a0),d0
00012EB4 6500 ACF2                  		bcs.w	DisplaySprite
00012EB8 4E75                       		rts	
00012EBA                            ; ===========================================================================
00012EBA                            ; bubble production sequence
00012EBA                            
00012EBA                            ; 0 = small bubble, 1 =	large bubble
00012EBA                            
00012EBA 0001 0000 0000 0100 0000+  Obj64_BblTypes:	dc.b 0,	1, 0, 0, 0, 0, 1, 0, 0,	0, 0, 1, 0, 1, 0, 0, 1,	0
00012ECC                            
00012ECC                            ; ===========================================================================
00012ECC                            
00012ECC                            Obj64_ChkSonic:				; XREF: Obj64_Wobble
00012ECC 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00012ED0 6B00                       		bmi.s	loc_12998
00012ED2 43F8 D000                  		lea	($FFFFD000).w,a1
00012ED6 3029 0008                  		move.w	8(a1),d0
00012EDA 3228 0008                  		move.w	8(a0),d1
00012EDE 0441 0010                  		subi.w	#$10,d1
00012EE2 B240                       		cmp.w	d0,d1
00012EE4 6400                       		bcc.s	loc_12998
00012EE6 0641 0020                  		addi.w	#$20,d1
00012EEA B240                       		cmp.w	d0,d1
00012EEC 6500                       		bcs.s	loc_12998
00012EEE 3029 000C                  		move.w	$C(a1),d0
00012EF2 3228 000C                  		move.w	$C(a0),d1
00012EF6 B240                       		cmp.w	d0,d1
00012EF8 6400                       		bcc.s	loc_12998
00012EFA 0641 0010                  		addi.w	#$10,d1
00012EFE B240                       		cmp.w	d0,d1
00012F00 6500                       		bcs.s	loc_12998
00012F02 7001                       		moveq	#1,d0
00012F04 4E75                       		rts	
00012F06                            ; ===========================================================================
00012F06                            
00012F06                            loc_12998:
00012F06 7000                       		moveq	#0,d0
00012F08 4E75                       		rts	
00012F0A                            ; ===========================================================================
00012F0A                            Ani_obj64:
00012F0A                            	include "_anim\obj64.asm"
00012F0A                            ; ---------------------------------------------------------------------------
00012F0A                            ; Animation script - bubbles (LZ)
00012F0A                            ; ---------------------------------------------------------------------------
00012F0A 0000                       		dc.w byte_129AA-Ani_obj64
00012F0C 0000                       		dc.w byte_129B0-Ani_obj64
00012F0E 0000                       		dc.w byte_129B6-Ani_obj64
00012F10 0000                       		dc.w byte_129BE-Ani_obj64
00012F12 0000                       		dc.w byte_129BE-Ani_obj64
00012F14 0000                       		dc.w byte_129C0-Ani_obj64
00012F16 0000                       		dc.w byte_129C6-Ani_obj64
00012F18 0E00 0102 FC00             byte_129AA:	dc.b $E, 0, 1, 2, $FC, 0
00012F1E 0E01 0203 04FC             byte_129B0:	dc.b $E, 1, 2, 3, 4, $FC
00012F24 0E02 0304 0506 FC00        byte_129B6:	dc.b $E, 2, 3, 4, 5, 6,	$FC, 0
00012F2C 04FC                       byte_129BE:	dc.b 4,	$FC
00012F2E 0406 0708 FC00             byte_129C0:	dc.b 4,	6, 7, 8, $FC, 0
00012F34 0F13 1415 FF               byte_129C6:	dc.b $F, $13, $14, $15,	$FF
00012F3A 00                         		even
00012F3A 00                         		even
00012F3A                            
00012F3A                            ; ---------------------------------------------------------------------------
00012F3A                            ; Sprite mappings - bubbles (LZ)
00012F3A                            ; ---------------------------------------------------------------------------
00012F3A                            Map_obj64:
00012F3A                            	include "_maps\obj64.asm"
00012F3A                            ; ---------------------------------------------------------------------------
00012F3A                            ; Sprite mappings - bubbles (LZ)
00012F3A                            ; ---------------------------------------------------------------------------
00012F3A 0000 0000                  		dc.w byte_129FA-Map_obj64, byte_12A00-Map_obj64
00012F3E 0000 0000                  		dc.w byte_12A06-Map_obj64, byte_12A0C-Map_obj64
00012F42 0000 0000                  		dc.w byte_12A12-Map_obj64, byte_12A18-Map_obj64
00012F46 0000 0000                  		dc.w byte_12A1E-Map_obj64, byte_12A24-Map_obj64
00012F4A 0000 0000                  		dc.w byte_12A39-Map_obj64, byte_12A4E-Map_obj64
00012F4E 0000 0000                  		dc.w byte_12A54-Map_obj64, byte_12A5A-Map_obj64
00012F52 0000 0000                  		dc.w byte_12A60-Map_obj64, byte_12A66-Map_obj64
00012F56 0000 0000                  		dc.w byte_12A6C-Map_obj64, byte_12A72-Map_obj64
00012F5A 0000 0000                  		dc.w byte_12A78-Map_obj64, byte_12A7E-Map_obj64
00012F5E 0000 0000                  		dc.w byte_12A84-Map_obj64, byte_12A8A-Map_obj64
00012F62 0000 0000                  		dc.w byte_12A90-Map_obj64, byte_12A96-Map_obj64
00012F66 0000                       		dc.w byte_12A9C-Map_obj64
00012F68 01                         byte_129FA:	dc.b 1
00012F69 FC00 0000 FC               		dc.b $FC, 0, 0,	0, $FC
00012F6E 01                         byte_12A00:	dc.b 1
00012F6F FC00 0001 FC               		dc.b $FC, 0, 0,	1, $FC
00012F74 01                         byte_12A06:	dc.b 1
00012F75 FC00 0002 FC               		dc.b $FC, 0, 0,	2, $FC
00012F7A 01                         byte_12A0C:	dc.b 1
00012F7B F805 0003 F8               		dc.b $F8, 5, 0,	3, $F8
00012F80 01                         byte_12A12:	dc.b 1
00012F81 F805 0007 F8               		dc.b $F8, 5, 0,	7, $F8
00012F86 01                         byte_12A18:	dc.b 1
00012F87 F40A 000B F4               		dc.b $F4, $A, 0, $B, $F4
00012F8C 01                         byte_12A1E:	dc.b 1
00012F8D F00F 0014 F0               		dc.b $F0, $F, 0, $14, $F0
00012F92 04                         byte_12A24:	dc.b 4
00012F93 F005 0024 F0               		dc.b $F0, 5, 0,	$24, $F0
00012F98 F005 0824 00               		dc.b $F0, 5, 8,	$24, 0
00012F9D 0005 1024 F0               		dc.b 0,	5, $10,	$24, $F0
00012FA2 0005 1824 00               		dc.b 0,	5, $18,	$24, 0
00012FA7 04                         byte_12A39:	dc.b 4
00012FA8 F005 0028 F0               		dc.b $F0, 5, 0,	$28, $F0
00012FAD F005 0828 00               		dc.b $F0, 5, 8,	$28, 0
00012FB2 0005 1028 F0               		dc.b 0,	5, $10,	$28, $F0
00012FB7 0005 1828 00               		dc.b 0,	5, $18,	$28, 0
00012FBC 01                         byte_12A4E:	dc.b 1
00012FBD F406 002C F8               		dc.b $F4, 6, 0,	$2C, $F8
00012FC2 01                         byte_12A54:	dc.b 1
00012FC3 F406 0032 F8               		dc.b $F4, 6, 0,	$32, $F8
00012FC8 01                         byte_12A5A:	dc.b 1
00012FC9 F406 0038 F8               		dc.b $F4, 6, 0,	$38, $F8
00012FCE 01                         byte_12A60:	dc.b 1
00012FCF F406 003E F8               		dc.b $F4, 6, 0,	$3E, $F8
00012FD4 01                         byte_12A66:	dc.b 1
00012FD5 F406 2044 F8               		dc.b $F4, 6, $20, $44, $F8
00012FDA 01                         byte_12A6C:	dc.b 1
00012FDB F406 204A F8               		dc.b $F4, 6, $20, $4A, $F8
00012FE0 01                         byte_12A72:	dc.b 1
00012FE1 F406 2050 F8               		dc.b $F4, 6, $20, $50, $F8
00012FE6 01                         byte_12A78:	dc.b 1
00012FE7 F406 2056 F8               		dc.b $F4, 6, $20, $56, $F8
00012FEC 01                         byte_12A7E:	dc.b 1
00012FED F406 205C F8               		dc.b $F4, 6, $20, $5C, $F8
00012FF2 01                         byte_12A84:	dc.b 1
00012FF3 F406 2062 F8               		dc.b $F4, 6, $20, $62, $F8
00012FF8 01                         byte_12A8A:	dc.b 1
00012FF9 F805 0068 F8               		dc.b $F8, 5, 0,	$68, $F8
00012FFE 01                         byte_12A90:	dc.b 1
00012FFF F805 006C F8               		dc.b $F8, 5, 0,	$6C, $F8
00013004 01                         byte_12A96:	dc.b 1
00013005 F805 0070 F8               		dc.b $F8, 5, 0,	$70, $F8
0001300A 00                         byte_12A9C:	dc.b 0
0001300C 00                         		even
0001300C 00                         		even
0001300C                            
0001300C                            ; ===========================================================================
0001300C                            ; ---------------------------------------------------------------------------
0001300C                            ; Object 65 - waterfalls (LZ)
0001300C                            ; ---------------------------------------------------------------------------
0001300C                            
0001300C                            Obj65:					; XREF: Obj_Index
0001300C 7000                       		moveq	#0,d0
0001300E 1028 0024                  		move.b	$24(a0),d0
00013012 323B 0000                  		move.w	Obj65_Index(pc,d0.w),d1
00013016 4EFB 1000                  		jmp	Obj65_Index(pc,d1.w)
0001301A                            ; ===========================================================================
0001301A 0000                       Obj65_Index:	dc.w Obj65_Main-Obj65_Index
0001301C 0000                       		dc.w Obj65_Animate-Obj65_Index
0001301E 0000                       		dc.w Obj65_ChkDel-Obj65_Index
00013020 0000                       		dc.w Obj65_FixHeight-Obj65_Index
00013022 0000                       		dc.w loc_12B36-Obj65_Index
00013024                            ; ===========================================================================
00013024                            
00013024                            Obj65_Main:				; XREF: Obj65_Index
00013024 5828 0024                  		addq.b	#4,$24(a0)
00013028 217C 0000 0000 0004        		move.l	#Map_obj65,4(a0)
00013030 317C 4259 0002             		move.w	#$4259,2(a0)
00013036 0028 0004 0001             		ori.b	#4,1(a0)
0001303C 117C 0018 0019             		move.b	#$18,$19(a0)
00013042 117C 0001 0018             		move.b	#1,$18(a0)
00013048 1028 0028                  		move.b	$28(a0),d0	; get object type
0001304C 6A00                       		bpl.s	loc_12AE6
0001304E 08E8 0007 0002             		bset	#7,2(a0)
00013054                            
00013054                            loc_12AE6:
00013054 0200 000F                  		andi.b	#$F,d0		; read only the	2nd byte
00013058 1140 001A                  		move.b	d0,$1A(a0)	; set frame number
0001305C 0C00 0009                  		cmpi.b	#9,d0		; is object type $x9 ?
00013060 6600                       		bne.s	Obj65_ChkDel	; if not, branch
00013062 4228 0018                  		clr.b	$18(a0)
00013066 5528 0024                  		subq.b	#2,$24(a0)
0001306A 0828 0006 0028             		btst	#6,$28(a0)	; is object type $4x ?
00013070 6700                       		beq.s	loc_12B0A	; if not, branch
00013072 117C 0006 0024             		move.b	#6,$24(a0)
00013078                            
00013078                            loc_12B0A:
00013078 0828 0005 0028             		btst	#5,$28(a0)	; is object type $Ax ?
0001307E 6700                       		beq.s	Obj65_Animate	; if not, branch
00013080 117C 0008 0024             		move.b	#8,$24(a0)
00013086                            
00013086                            Obj65_Animate:				; XREF: Obj65_Index
00013086 43F9 0000 0000             		lea	(Ani_obj65).l,a1
0001308C 4EB9 0000 AC42             		jsr	AnimateSprite
00013092                            
00013092                            Obj65_ChkDel:				; XREF: Obj65_Index
00013092 6000 CBBC                  		bra.w	MarkObjGone
00013096                            ; ===========================================================================
00013096                            
00013096                            Obj65_FixHeight:			; XREF: Obj65_Index
00013096 3038 F646                  		move.w	($FFFFF646).w,d0
0001309A 0440 0010                  		subi.w	#$10,d0
0001309E 3140 000C                  		move.w	d0,$C(a0)	; match	object position	to water height
000130A2 60E2                       		bra.s	Obj65_Animate
000130A4                            ; ===========================================================================
000130A4                            
000130A4                            loc_12B36:				; XREF: Obj65_Index
000130A4 08A8 0007 0002             		bclr	#7,2(a0)
000130AA 0C38 0007 A506             		cmpi.b	#7,($FFFFA506).w
000130B0 6600                       		bne.s	Obj65_Animate2
000130B2 08E8 0007 0002             		bset	#7,2(a0)
000130B8                            
000130B8                            Obj65_Animate2:
000130B8 60CC                       		bra.s	Obj65_Animate
000130BA                            ; ===========================================================================
000130BA                            Ani_obj65:
000130BA                            	include "_anim\obj65.asm"
000130BA                            ; ---------------------------------------------------------------------------
000130BA                            ; Animation script - waterfall (LZ)
000130BA                            ; ---------------------------------------------------------------------------
000130BA 0000                       		dc.w byte_12B4E-Ani_obj65
000130BC 0509 0A0B FF               byte_12B4E:	dc.b 5,	9, $A, $B, $FF
000130C2 00                         		even
000130C2 00                         		even
000130C2                            
000130C2                            ; ---------------------------------------------------------------------------
000130C2                            ; Sprite mappings - waterfalls (LZ)
000130C2                            ; ---------------------------------------------------------------------------
000130C2                            Map_obj65:
000130C2                            	include "_maps\obj65.asm"
000130C2                            ; ---------------------------------------------------------------------------
000130C2                            ; Sprite mappings - waterfalls (LZ)
000130C2                            ; ---------------------------------------------------------------------------
000130C2 0000 0000                  		dc.w byte_12B6C-Map_obj65, byte_12B72-Map_obj65
000130C6 0000 0000                  		dc.w byte_12B7D-Map_obj65, byte_12B88-Map_obj65
000130CA 0000 0000                  		dc.w byte_12B8E-Map_obj65, byte_12B99-Map_obj65
000130CE 0000 0000                  		dc.w byte_12B9F-Map_obj65, byte_12BA5-Map_obj65
000130D2 0000 0000                  		dc.w byte_12BAB-Map_obj65, byte_12BB6-Map_obj65
000130D6 0000 0000                  		dc.w byte_12BC1-Map_obj65, byte_12BCC-Map_obj65
000130DA 01                         byte_12B6C:	dc.b 1
000130DB F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
000130E0 02                         byte_12B72:	dc.b 2
000130E1 F804 0008 FC               		dc.b $F8, 4, 0,	8, $FC
000130E6 0008 000A F4               		dc.b 0,	8, 0, $A, $F4
000130EB 02                         byte_12B7D:	dc.b 2
000130EC F800 0008 00               		dc.b $F8, 0, 0,	8, 0
000130F1 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
000130F6 01                         byte_12B88:	dc.b 1
000130F7 F801 000F 00               		dc.b $F8, 1, 0,	$F, 0
000130FC 02                         byte_12B8E:	dc.b 2
000130FD F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00013102 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00013107 01                         byte_12B99:	dc.b 1
00013108 F801 0011 00               		dc.b $F8, 1, 0,	$11, 0
0001310D 01                         byte_12B9F:	dc.b 1
0001310E F801 0013 00               		dc.b $F8, 1, 0,	$13, 0
00013113 01                         byte_12BA5:	dc.b 1
00013114 F007 0015 F8               		dc.b $F0, 7, 0,	$15, $F8
00013119 02                         byte_12BAB:	dc.b 2
0001311A F80C 001D F6               		dc.b $F8, $C, 0, $1D, $F6
0001311F 000C 0021 E8               		dc.b 0,	$C, 0, $21, $E8
00013124 02                         byte_12BB6:	dc.b 2
00013125 F00B 0025 E8               		dc.b $F0, $B, 0, $25, $E8
0001312A F00B 0031 00               		dc.b $F0, $B, 0, $31, 0
0001312F 02                         byte_12BC1:	dc.b 2
00013130 F00B 003D E8               		dc.b $F0, $B, 0, $3D, $E8
00013135 F00B 0049 00               		dc.b $F0, $B, 0, $49, 0
0001313A 02                         byte_12BCC:	dc.b 2
0001313B F00B 0055 E8               		dc.b $F0, $B, 0, $55, $E8
00013140 F00B 0061 00               		dc.b $F0, $B, 0, $61, 0
00013146 00                         		even
00013146 00                         		even
00013146                            
00013146                            ; ===========================================================================
00013146                            ; ---------------------------------------------------------------------------
00013146                            ; Object 01 - Sonic
00013146                            ; ---------------------------------------------------------------------------
00013146                            
00013146                            Obj01:					; XREF: Obj_Index
00013146 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
0001314A 6700                       		beq.s	Obj01_Normal	; if not, branch
0001314C 4EF9 0000 0000             		jmp	DebugMode
00013152                            ; ===========================================================================
00013152                            
00013152                            Obj01_Normal:
00013152 7000                       		moveq	#0,d0
00013154 1028 0024                  		move.b	$24(a0),d0
00013158 323B 0000                  		move.w	Obj01_Index(pc,d0.w),d1
0001315C 4EFB 1000                  		jmp	Obj01_Index(pc,d1.w)
00013160                            ; ===========================================================================
00013160 0000                       Obj01_Index:	dc.w Obj01_Main-Obj01_Index
00013162 0000                       		dc.w Obj01_Control-Obj01_Index
00013164 0000                       		dc.w Obj01_Hurt-Obj01_Index
00013166 0000                       		dc.w Obj01_Death-Obj01_Index
00013168 0000                       		dc.w Obj01_ResetLevel-Obj01_Index
0001316A                            ; ===========================================================================
0001316A                            
0001316A                            Obj01_Main:				; XREF: Obj01_Index
0001316A 5428 0024                  		addq.b	#2,$24(a0)
0001316E 117C 0013 0016             		move.b	#$13,$16(a0)
00013174 117C 0009 0017             		move.b	#9,$17(a0)
0001317A 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
00013182 317C 0780 0002             		move.w	#$780,2(a0)
00013188 117C 0002 0018             		move.b	#2,$18(a0)
0001318E 117C 0018 0019             		move.b	#$18,$19(a0)
00013194 117C 0004 0001             		move.b	#4,1(a0)
0001319A 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; Sonic's top speed
000131A0 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; Sonic's acceleration
000131A6 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; Sonic's deceleration
000131AC                            
000131AC                            Obj01_Control:				; XREF: Obj01_Index
000131AC 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug cheat enabled?
000131B0 6700                       		beq.s	loc_12C58	; if not, branch
000131B2 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button C pressed?
000131B8 6700                       		beq.s	loc_12C58	; if not, branch
000131BA 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring/item
000131C0 4238 F7CC                  		clr.b	($FFFFF7CC).w
000131C4 4E75                       		rts	
000131C6                            ; ===========================================================================
000131C6                            
000131C6                            loc_12C58:
000131C6 4A38 F7CC                  		tst.b	($FFFFF7CC).w	; are controls locked?
000131CA 6600                       		bne.s	loc_12C64	; if yes, branch
000131CC 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w ; enable joypad control
000131D2                            
000131D2                            loc_12C64:
000131D2 0838 0000 F7C8             		btst	#0,($FFFFF7C8).w ; are controls	locked?
000131D8 6600                       		bne.s	loc_12C7E	; if yes, branch
000131DA 7000                       		moveq	#0,d0
000131DC 1028 0022                  		move.b	$22(a0),d0
000131E0 0240 0006                  		andi.w	#6,d0
000131E4 323B 0000                  		move.w	Obj01_Modes(pc,d0.w),d1
000131E8 4EBB 1000                  		jsr	Obj01_Modes(pc,d1.w)
000131EC                            
000131EC                            loc_12C7E:
000131EC 6100                       		bsr.s	Sonic_Display
000131EE 6100 0000                  		bsr.w	Sonic_RecordPos
000131F2 6100 0000                  		bsr.w	Sonic_Water
000131F6 1178 F768 0036             		move.b	($FFFFF768).w,$36(a0)
000131FC 1178 F76A 0037             		move.b	($FFFFF76A).w,$37(a0)
00013202 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00013206 6700                       		beq.s	loc_12CA6
00013208 4A28 001C                  		tst.b	$1C(a0)
0001320C 6600                       		bne.s	loc_12CA6
0001320E 1168 001D 001C             		move.b	$1D(a0),$1C(a0)
00013214                            
00013214                            loc_12CA6:
00013214 6100 0000                  		bsr.w	Sonic_Animate
00013218 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0001321C 6B00                       		bmi.s	loc_12CB6
0001321E 4EB9 0000 0000             		jsr	TouchResponse
00013224                            
00013224                            loc_12CB6:
00013224 6100 0000                  		bsr.w	Sonic_Loops
00013228 6100 0000                  		bsr.w	LoadSonicDynPLC
0001322C 4E75                       		rts	
0001322E                            ; ===========================================================================
0001322E 0000                       Obj01_Modes:	dc.w Obj01_MdNormal-Obj01_Modes
00013230 0000                       		dc.w Obj01_MdJump-Obj01_Modes
00013232 0000                       		dc.w Obj01_MdRoll-Obj01_Modes
00013234 0000                       		dc.w Obj01_MdJump2-Obj01_Modes
00013236                            ; ---------------------------------------------------------------------------
00013236                            ; Music	to play	after invincibility wears off
00013236                            ; ---------------------------------------------------------------------------
00013236                            ; ===========================================================================
00013236                            
00013236                            Sonic_Display:				; XREF: loc_12C7E
00013236 3028 0030                  		move.w	$30(a0),d0
0001323A 6700                       		beq.s	Obj01_Display
0001323C 5368 0030                  		subq.w	#1,$30(a0)
00013240 E648                       		lsr.w	#3,d0
00013242 6400                       		bcc.s	Obj01_ChkInvin
00013244                            
00013244                            Obj01_Display:
00013244 4EBA A962                  		jsr	DisplaySprite
00013248                            
00013248                            ; Second part of the NineKode. Play different music on different acts - after invincibility wears off
00013248                             
00013248                            Obj01_ChkInvin:
00013248 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
0001324C 6700 0000                  		beq.w	Obj01_ChkShoes	; if not, branch	; change to beq.w
00013250 4A68 0032                  		tst.w	$32(a0)		; check	time remaining for invinciblity
00013254 6700 0000                  		beq.w	Obj01_ChkShoes	; if no	time remains, branch	; change to beq.w
00013258 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time
0001325C 6600 0000                  		bne.w	Obj01_ChkShoes	; change to bne.w
00013260 4A38 F7AA                  		tst.b	($FFFFF7AA).w
00013264 6600 0000                  		bne.w	Obj01_RmvInvin	; change to bne.w
00013268 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
0001326E 6500 0000                  		bcs.w	Obj01_RmvInvin	; change to bcs.w
00013272 7000                       		moveq	#0,d0
00013274 1038 FE10                  		move.b	($FFFFFE10).w,d0
00013278                             
00013278 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
0001327E 6600                       		bne.s	Obj01_GetBgm2	; if not, branch
00013280 43F9 0000 3AAC             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
00013286 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
00013288                             
00013288                            Obj01_GetBgm2:
00013288 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
0001328E 6600                       		bne.s	Obj01_GetBgm3	; if not, branch
00013290 43F9 0000 3AB4             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
00013296 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
00013298                             
00013298                            Obj01_GetBgm3:
00013298 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
0001329E 6600                       		bne.s	Obj01_GetBgm4	; if not, branch
000132A0 43F9 0000 3ABA             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 3
000132A6 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
000132A8                             
000132A8                            Obj01_GetBgm4:
000132A8 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
000132AE 6600                       		bne.s	Obj01_PlayMusic	; if not, branch
000132B0 43F9 0000 3AC0             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
000132B6                             
000132B6                            Obj01_PlayMusic:
000132B6 1031 0000                  		move.b	(a1,d0.w),d0
000132BA 4EB9 0000 15B6             		jsr	(PlaySound).l	; play normal music
000132C0                             
000132C0                            ; NineKode ends here.
000132C0                            
000132C0                            Obj01_RmvInvin:
000132C0 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; cancel invincibility
000132C6                            
000132C6                            Obj01_ChkShoes:
000132C6 4A38 FE2E                  		tst.b	($FFFFFE2E).w	; does Sonic have speed	shoes?
000132CA 6700                       		beq.s	Obj01_ExitChk	; if not, branch
000132CC 4A68 0034                  		tst.w	$34(a0)		; check	time remaining
000132D0 6700                       		beq.s	Obj01_ExitChk
000132D2 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time
000132D6 6600                       		bne.s	Obj01_ExitChk
000132D8 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
000132DE 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
000132E4 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
000132EA 11FC 0000 FE2E             		move.b	#0,($FFFFFE2E).w ; cancel speed	shoes
000132F0 303C 00E3                  		move.w	#$E3,d0
000132F4 4EF9 0000 15B6             		jmp	(PlaySound).l	; run music at normal speed
000132FA                            ; ===========================================================================
000132FA                            
000132FA                            Obj01_ExitChk:
000132FA 4E75                       		rts	
000132FC                            
000132FC                            ; ---------------------------------------------------------------------------
000132FC                            ; Subroutine to	record Sonic's previous positions for invincibility stars
000132FC                            ; ---------------------------------------------------------------------------
000132FC                            
000132FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000132FC                            
000132FC                            
000132FC                            Sonic_RecordPos:			; XREF: loc_12C7E; Obj01_Hurt; Obj01_Death
000132FC 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00013300 43F8 CB00                  		lea	($FFFFCB00).w,a1
00013304 43F1 0000                  		lea	(a1,d0.w),a1
00013308 32E8 0008                  		move.w	8(a0),(a1)+
0001330C 32E8 000C                  		move.w	$C(a0),(a1)+
00013310 5838 F7A9                  		addq.b	#4,($FFFFF7A9).w
00013314 4E75                       		rts	
00013316                            ; End of function Sonic_RecordPos
00013316                            
00013316                            ; ---------------------------------------------------------------------------
00013316                            ; Subroutine for Sonic when he's underwater
00013316                            ; ---------------------------------------------------------------------------
00013316                            
00013316                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013316                            
00013316                            
00013316                            Sonic_Water:				; XREF: loc_12C7E
00013316 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
0001331C 6700                       		beq.s	Obj01_InWater	; if yes, branch
0001331E                            
0001331E                            locret_12D80:
0001331E 4E75                       		rts	
00013320                            ; ===========================================================================
00013320                            
00013320                            Obj01_InWater:
00013320 3038 F646                  		move.w	($FFFFF646).w,d0
00013324 B068 000C                  		cmp.w	$C(a0),d0	; is Sonic above the water?
00013328 6C00                       		bge.s	Obj01_OutWater	; if yes, branch
0001332A 08E8 0006 0022             		bset	#6,$22(a0)
00013330 66EC                       		bne.s	locret_12D80
00013332 6100 0000                  		bsr.w	ResumeMusic
00013336 11FC 000A D340             		move.b	#$A,($FFFFD340).w ; load bubbles object	from Sonic's mouth
0001333C 11FC 0081 D368             		move.b	#$81,($FFFFD368).w
00013342 31FC 0300 F760             		move.w	#$300,($FFFFF760).w ; change Sonic's top speed
00013348 31FC 0006 F762             		move.w	#6,($FFFFF762).w ; change Sonic's acceleration
0001334E 31FC 0040 F764             		move.w	#$40,($FFFFF764).w ; change Sonic's deceleration
00013354 E0E8 0010                  		asr	$10(a0)
00013358 E0E8 0012                  		asr	$12(a0)
0001335C E0E8 0012                  		asr	$12(a0)
00013360 67BC                       		beq.s	locret_12D80
00013362 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
00013368 303C 00AA                  		move.w	#$AA,d0
0001336C 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play splash sound
00013372                            ; ===========================================================================
00013372                            
00013372                            Obj01_OutWater:
00013372 08A8 0006 0022             		bclr	#6,$22(a0)
00013378 67A4                       		beq.s	locret_12D80
0001337A 6100 0000                  		bsr.w	ResumeMusic
0001337E 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
00013384 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
0001338A 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
00013390 E1E8 0012                  		asl	$12(a0)
00013394 6700 FF88                  		beq.w	locret_12D80
00013398 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
0001339E 0C68 F000 0012             		cmpi.w	#-$1000,$12(a0)
000133A4 6E00                       		bgt.s	loc_12E0E
000133A6 317C F000 0012             		move.w	#-$1000,$12(a0)	; set maximum speed on leaving water
000133AC                            
000133AC                            loc_12E0E:
000133AC 303C 00AA                  		move.w	#$AA,d0
000133B0 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play splash sound
000133B6                            ; End of function Sonic_Water
000133B6                            
000133B6                            ; ===========================================================================
000133B6                            ; ---------------------------------------------------------------------------
000133B6                            ; Modes	for controlling	Sonic
000133B6                            ; ---------------------------------------------------------------------------
000133B6                            
000133B6                            Obj01_MdNormal:				; XREF: Obj01_Modes
000133B6 6100 0000                  		bsr.w	Sonic_Jump
000133BA 6100 0000                  		bsr.w	Sonic_SlopeResist
000133BE 6100 0000                  		bsr.w	Sonic_Move
000133C2 6100 0000                  		bsr.w	Sonic_Roll
000133C6 6100 0000                  		bsr.w	Sonic_LevelBound
000133CA 4EBA A7B6                  		jsr	SpeedToPos
000133CE 6100 0000                  		bsr.w	Sonic_AnglePos
000133D2 6100 0000                  		bsr.w	Sonic_SlopeRepel
000133D6 4E75                       		rts	
000133D8                            ; ===========================================================================
000133D8                            
000133D8                            Obj01_MdJump:				; XREF: Obj01_Modes
000133D8 6100 0000                  		bsr.w	Sonic_JumpHeight
000133DC 6100 0000                  		bsr.w	Sonic_ChgJumpDir
000133E0 6100 0000                  		bsr.w	Sonic_LevelBound
000133E4 4EBA A770                  		jsr	ObjectFall
000133E8 0828 0006 0022             		btst	#6,$22(a0)
000133EE 6700                       		beq.s	loc_12E5C
000133F0 0468 0028 0012             		subi.w	#$28,$12(a0)
000133F6                            
000133F6                            loc_12E5C:
000133F6 6100 0000                  		bsr.w	Sonic_JumpAngle
000133FA 6100 0000                  		bsr.w	Sonic_Floor
000133FE 4E75                       		rts	
00013400                            ; ===========================================================================
00013400                            
00013400                            Obj01_MdRoll:				; XREF: Obj01_Modes
00013400 6100 0000                  		bsr.w	Sonic_Jump
00013404 6100 0000                  		bsr.w	Sonic_RollRepel
00013408 6100 0000                  		bsr.w	Sonic_RollSpeed
0001340C 6100 0000                  		bsr.w	Sonic_LevelBound
00013410 4EBA A770                  		jsr	SpeedToPos
00013414 6100 0000                  		bsr.w	Sonic_AnglePos
00013418 6100 0000                  		bsr.w	Sonic_SlopeRepel
0001341C 4E75                       		rts	
0001341E                            ; ===========================================================================
0001341E                            
0001341E                            Obj01_MdJump2:				; XREF: Obj01_Modes
0001341E 6100 0000                  		bsr.w	Sonic_JumpHeight
00013422 6100 0000                  		bsr.w	Sonic_ChgJumpDir
00013426 6100 0000                  		bsr.w	Sonic_LevelBound
0001342A 6100 0000                  		bsr.w	Sonic_AirUnroll
0001342E 4EBA A726                  		jsr	ObjectFall
00013432 0828 0006 0022             		btst	#6,$22(a0)
00013438 6700                       		beq.s	loc_12EA6
0001343A 0468 0028 0012             		subi.w	#$28,$12(a0)
00013440                            
00013440                            loc_12EA6:
00013440 6100 0000                  		bsr.w	Sonic_JumpAngle
00013444 6100 0000                  		bsr.w	Sonic_Floor
00013448 4E75                       		rts	
0001344A                            ; ---------------------------------------------------------------------------
0001344A                            ; Subroutine to	make Sonic walk/run
0001344A                            ; ---------------------------------------------------------------------------
0001344A                            
0001344A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001344A                            
0001344A                            
0001344A                            Sonic_Move:				; XREF: Obj01_MdNormal
0001344A 3C38 F760                  		move.w	($FFFFF760).w,d6
0001344E 3A38 F762                  		move.w	($FFFFF762).w,d5
00013452 3838 F764                  		move.w	($FFFFF764).w,d4
00013456 4A38 F7CA                  		tst.b	($FFFFF7CA).w
0001345A 6600 0000                  		bne.w	loc_12FEE
0001345E 4A68 003E                  		tst.w	$3E(a0)
00013462 6600 0000                  		bne.w	Obj01_ResetScr
00013466 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
0001346C 6700                       		beq.s	Obj01_NotLeft	; if not, branch
0001346E 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013474 6600                       		bne.s	Obj01_MoveRight	; GMZ: If yes, branch
00013476 6100 0000                  		bsr.w	Sonic_MoveLeft
0001347A                            
0001347A                            Obj01_NotLeft:
0001347A 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00013480 6700                       		beq.s	Obj01_NotRight	; if not, branch
00013482 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013488 6700                       		beq.s	Obj01_MoveRight	; GMZ: If not, branch
0001348A 6100 0000                  		bsr.w	Sonic_MoveLeft
0001348E 6000                       		bra.s	Obj01_NotRight
00013490                            
00013490                            Obj01_MoveRight:
00013490 6100 0000                  		bsr.w	Sonic_MoveRight
00013494                            
00013494                            Obj01_NotRight:
00013494 1028 0026                  		move.b	$26(a0),d0
00013498 0600 0020                  		addi.b	#$20,d0
0001349C 0200 00C0                  		andi.b	#$C0,d0		; is Sonic on a	slope?
000134A0 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
000134A4 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
000134A8 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
000134AC 08A8 0005 0022             		bclr	#5,$22(a0)
000134B2 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
000134B8 0828 0003 0022             		btst	#3,$22(a0)
000134BE 6700                       		beq.s	Sonic_Balance
000134C0 7000                       		moveq	#0,d0
000134C2 1028 003D                  		move.b	$3D(a0),d0
000134C6 ED48                       		lsl.w	#6,d0
000134C8 43F8 D000                  		lea	($FFFFD000).w,a1
000134CC 43F1 0000                  		lea	(a1,d0.w),a1
000134D0 4A29 0022                  		tst.b	$22(a1)
000134D4 6B00                       		bmi.s	Sonic_LookUp
000134D6 7200                       		moveq	#0,d1
000134D8 1229 0019                  		move.b	$19(a1),d1
000134DC 3401                       		move.w	d1,d2
000134DE D442                       		add.w	d2,d2
000134E0 5942                       		subq.w	#4,d2
000134E2 D268 0008                  		add.w	8(a0),d1
000134E6 9269 0008                  		sub.w	8(a1),d1
000134EA 0C41 0004                  		cmpi.w	#4,d1
000134EE 6D00                       		blt.s	loc_12F6A
000134F0 B242                       		cmp.w	d2,d1
000134F2 6C00                       		bge.s	loc_12F5A
000134F4 6000                       		bra.s	Sonic_LookUp
000134F6                            ; ===========================================================================
000134F6                            
000134F6                            Sonic_Balance:
000134F6 4EB9 0000 0000             		jsr	ObjHitFloor
000134FC 0C41 000C                  		cmpi.w	#$C,d1
00013500 6D00                       		blt.s	Sonic_LookUp
00013502 0C28 0003 0036             		cmpi.b	#3,$36(a0)
00013508 6600                       		bne.s	loc_12F62
0001350A                            
0001350A                            loc_12F5A:
0001350A 08A8 0000 0022             		bclr	#0,$22(a0)
00013510 6000                       		bra.s	loc_12F70
00013512                            ; ===========================================================================
00013512                            
00013512                            loc_12F62:
00013512 0C28 0003 0037             		cmpi.b	#3,$37(a0)
00013518 6600                       		bne.s	Sonic_LookUp
0001351A                            
0001351A                            loc_12F6A:
0001351A 08E8 0000 0022             		bset	#0,$22(a0)
00013520                            
00013520                            loc_12F70:
00013520 117C 0006 001C             		move.b	#6,$1C(a0)	; use "balancing" animation
00013526 6000                       		bra.s	Obj01_ResetScr
00013528                            ; ===========================================================================
00013528                            
00013528                            Sonic_LookUp:
00013528 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up being pressed?
0001352E 6700                       		beq.s	Sonic_Duck	; if not, branch
00013530 117C 0007 001C             		move.b	#7,$1C(a0)	; use "looking up" animation
00013536 0C78 00C8 F73E             		cmpi.w	#$C8,($FFFFF73E).w
0001353C 6700                       		beq.s	loc_12FC2
0001353E 5478 F73E                  		addq.w	#2,($FFFFF73E).w
00013542 6000                       		bra.s	loc_12FC2
00013544                            ; ===========================================================================
00013544                            
00013544                            Sonic_Duck:
00013544 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
0001354A 6700                       		beq.s	Obj01_ResetScr	; if not, branch
0001354C 117C 0008 001C             		move.b	#8,$1C(a0)	; use "ducking"	animation
00013552 0C78 0008 F73E             		cmpi.w	#8,($FFFFF73E).w
00013558 6700                       		beq.s	loc_12FC2
0001355A 5578 F73E                  		subq.w	#2,($FFFFF73E).w
0001355E 6000                       		bra.s	loc_12FC2
00013560                            ; ===========================================================================
00013560                            
00013560                            Obj01_ResetScr:
00013560 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	screen in its default position?
00013566 6700                       		beq.s	loc_12FC2	; if yes, branch
00013568 6400                       		bcc.s	loc_12FBE
0001356A 5878 F73E                  		addq.w	#4,($FFFFF73E).w ; move	screen back to default
0001356E                            
0001356E                            loc_12FBE:
0001356E 5578 F73E                  		subq.w	#2,($FFFFF73E).w ; move	screen back to default
00013572                            
00013572                            loc_12FC2:
00013572 1038 F602                  		move.b	($FFFFF602).w,d0
00013576 0200 000C                  		andi.b	#$C,d0		; is left/right	pressed?
0001357A 6600                       		bne.s	loc_12FEE	; if yes, branch
0001357C 3028 0014                  		move.w	$14(a0),d0
00013580 6700                       		beq.s	loc_12FEE
00013582 6B00                       		bmi.s	loc_12FE2
00013584 9045                       		sub.w	d5,d0
00013586 6400                       		bcc.s	loc_12FDC
00013588 303C 0000                  		move.w	#0,d0
0001358C                            
0001358C                            loc_12FDC:
0001358C 3140 0014                  		move.w	d0,$14(a0)
00013590 6000                       		bra.s	loc_12FEE
00013592                            ; ===========================================================================
00013592                            
00013592                            loc_12FE2:
00013592 D045                       		add.w	d5,d0
00013594 6400                       		bcc.s	loc_12FEA
00013596 303C 0000                  		move.w	#0,d0
0001359A                            
0001359A                            loc_12FEA:
0001359A 3140 0014                  		move.w	d0,$14(a0)
0001359E                            
0001359E                            loc_12FEE:
0001359E 1028 0026                  		move.b	$26(a0),d0
000135A2 4EB9 0000 2C22             		jsr	(CalcSine).l
000135A8 C3E8 0014                  		muls.w	$14(a0),d1
000135AC E081                       		asr.l	#8,d1
000135AE 3141 0010                  		move.w	d1,$10(a0)
000135B2 C1E8 0014                  		muls.w	$14(a0),d0
000135B6 E080                       		asr.l	#8,d0
000135B8 3140 0012                  		move.w	d0,$12(a0)
000135BC                            
000135BC                            loc_1300C:
000135BC 1028 0026                  		move.b	$26(a0),d0
000135C0 0600 0040                  		addi.b	#$40,d0
000135C4 6B00                       		bmi.s	locret_1307C
000135C6 123C 0040                  		move.b	#$40,d1
000135CA 4A68 0014                  		tst.w	$14(a0)
000135CE 6700                       		beq.s	locret_1307C
000135D0 6B00                       		bmi.s	loc_13024
000135D2 4441                       		neg.w	d1
000135D4                            
000135D4                            loc_13024:
000135D4 1028 0026                  		move.b	$26(a0),d0
000135D8 D001                       		add.b	d1,d0
000135DA 3F00                       		move.w	d0,-(sp)
000135DC 6100 0000                  		bsr.w	Sonic_WalkSpeed
000135E0 301F                       		move.w	(sp)+,d0
000135E2 4A41                       		tst.w	d1
000135E4 6A00                       		bpl.s	locret_1307C
000135E6 E141                       		asl.w	#8,d1
000135E8 0600 0020                  		addi.b	#$20,d0
000135EC 0200 00C0                  		andi.b	#$C0,d0
000135F0 6700                       		beq.s	loc_13078
000135F2 0C00 0040                  		cmpi.b	#$40,d0
000135F6 6700                       		beq.s	loc_13066
000135F8 0C00 0080                  		cmpi.b	#$80,d0
000135FC 6700                       		beq.s	loc_13060
000135FE D368 0010                  		add.w	d1,$10(a0)
00013602 08E8 0005 0022             		bset	#5,$22(a0)
00013608 317C 0000 0014             		move.w	#0,$14(a0)
0001360E 4E75                       		rts	
00013610                            ; ===========================================================================
00013610                            
00013610                            loc_13060:
00013610 9368 0012                  		sub.w	d1,$12(a0)
00013614 4E75                       		rts	
00013616                            ; ===========================================================================
00013616                            
00013616                            loc_13066:
00013616 9368 0010                  		sub.w	d1,$10(a0)
0001361A 08E8 0005 0022             		bset	#5,$22(a0)
00013620 317C 0000 0014             		move.w	#0,$14(a0)
00013626 4E75                       		rts	
00013628                            ; ===========================================================================
00013628                            
00013628                            loc_13078:
00013628 D368 0012                  		add.w	d1,$12(a0)
0001362C                            
0001362C                            locret_1307C:
0001362C 4E75                       		rts	
0001362E                            ; End of function Sonic_Move
0001362E                            
0001362E                            
0001362E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001362E                            
0001362E                            
0001362E                            Sonic_MoveLeft:				; XREF: Sonic_Move
0001362E 3028 0014                  		move.w	$14(a0),d0
00013632 6700                       		beq.s	loc_13086
00013634 6A00                       		bpl.s	loc_130B2
00013636                            
00013636                            loc_13086:
00013636 08E8 0000 0022             		bset	#0,$22(a0)
0001363C 6600                       		bne.s	loc_1309A
0001363E 08A8 0005 0022             		bclr	#5,$22(a0)
00013644 117C 0001 001D             		move.b	#1,$1D(a0)
0001364A                            
0001364A                            loc_1309A:
0001364A 9045                       		sub.w	d5,d0
0001364C 3206                       		move.w	d6,d1
0001364E 4441                       		neg.w	d1
00013650 B041                       		cmp.w	d1,d0
00013652 6E00                       		bgt.s	loc_130A6
00013654 3001                       		move.w	d1,d0
00013656                            
00013656                            loc_130A6:
00013656 3140 0014                  		move.w	d0,$14(a0)
0001365A 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
00013660 4E75                       		rts	
00013662                            ; ===========================================================================
00013662                            
00013662                            loc_130B2:				; XREF: Sonic_MoveLeft
00013662 9044                       		sub.w	d4,d0
00013664 6400                       		bcc.s	loc_130BA
00013666 303C FF80                  		move.w	#-$80,d0
0001366A                            
0001366A                            loc_130BA:
0001366A 3140 0014                  		move.w	d0,$14(a0)
0001366E 1028 0026                  		move.b	$26(a0),d0
00013672 0600 0020                  		addi.b	#$20,d0
00013676 0200 00C0                  		andi.b	#$C0,d0
0001367A 6600                       		bne.s	locret_130E8
0001367C 0C40 0400                  		cmpi.w	#$400,d0
00013680 6D00                       		blt.s	locret_130E8
00013682 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
00013688 08A8 0000 0022             		bclr	#0,$22(a0)
0001368E 303C 00A4                  		move.w	#$A4,d0
00013692 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play stopping sound
00013698                            
00013698                            locret_130E8:
00013698 4E75                       		rts	
0001369A                            ; End of function Sonic_MoveLeft
0001369A                            
0001369A                            
0001369A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001369A                            
0001369A                            
0001369A                            Sonic_MoveRight:			; XREF: Sonic_Move
0001369A 3028 0014                  		move.w	$14(a0),d0
0001369E 6B00                       		bmi.s	loc_13118
000136A0 08A8 0000 0022             		bclr	#0,$22(a0)
000136A6 6700                       		beq.s	loc_13104
000136A8 08A8 0005 0022             		bclr	#5,$22(a0)
000136AE 117C 0001 001D             		move.b	#1,$1D(a0)
000136B4                            
000136B4                            loc_13104:
000136B4 D045                       		add.w	d5,d0
000136B6 B046                       		cmp.w	d6,d0
000136B8 6D00                       		blt.s	loc_1310C
000136BA 3006                       		move.w	d6,d0
000136BC                            
000136BC                            loc_1310C:
000136BC 3140 0014                  		move.w	d0,$14(a0)
000136C0 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
000136C6 4E75                       		rts	
000136C8                            ; ===========================================================================
000136C8                            
000136C8                            loc_13118:				; XREF: Sonic_MoveRight
000136C8 D044                       		add.w	d4,d0
000136CA 6400                       		bcc.s	loc_13120
000136CC 303C 0080                  		move.w	#$80,d0
000136D0                            
000136D0                            loc_13120:
000136D0 3140 0014                  		move.w	d0,$14(a0)
000136D4 1028 0026                  		move.b	$26(a0),d0
000136D8 0600 0020                  		addi.b	#$20,d0
000136DC 0200 00C0                  		andi.b	#$C0,d0
000136E0 6600                       		bne.s	locret_1314E
000136E2 0C40 FC00                  		cmpi.w	#-$400,d0
000136E6 6E00                       		bgt.s	locret_1314E
000136E8 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
000136EE 08E8 0000 0022             		bset	#0,$22(a0)
000136F4 303C 00A4                  		move.w	#$A4,d0
000136F8 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play stopping sound
000136FE                            
000136FE                            locret_1314E:
000136FE 4E75                       		rts	
00013700                            ; End of function Sonic_MoveRight
00013700                            
00013700                            ; ---------------------------------------------------------------------------
00013700                            ; Subroutine to	change Sonic's speed as he rolls
00013700                            ; ---------------------------------------------------------------------------
00013700                            
00013700                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013700                            
00013700                            
00013700                            Sonic_RollSpeed:			; XREF: Obj01_MdRoll
00013700 3C38 F760                  		move.w	($FFFFF760).w,d6
00013704 E346                       		asl.w	#1,d6
00013706 3A38 F762                  		move.w	($FFFFF762).w,d5
0001370A E245                       		asr.w	#1,d5
0001370C 3838 F764                  		move.w	($FFFFF764).w,d4
00013710 E444                       		asr.w	#2,d4
00013712 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00013716 6600 0000                  		bne.w	loc_131CC
0001371A 4A68 003E                  		tst.w	$3E(a0)
0001371E 6600                       		bne.s	loc_13188
00013720 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00013726 6700                       		beq.s	loc_1317C	; if not, branch
00013728 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0001372E 6600                       		bne.s	SonicRS_RollRight	; GMZ: If yes, branch
00013730 6100 0000                  		bsr.w	Sonic_RollLeft
00013734                            
00013734                            loc_1317C:
00013734 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
0001373A 6700                       		beq.s	loc_13188	; if not, branch
0001373C 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013742 6700                       		beq.s	SonicRS_RollRight	; GMZ: If not, branch
00013744 6100 0000                  		bsr.w	Sonic_RollLeft
00013748 6000                       		bra.s	loc_13188
0001374A                            
0001374A                            SonicRS_RollRight:
0001374A 6100 0000                  		bsr.w	Sonic_RollRight
0001374E                            
0001374E                            loc_13188:
0001374E 3028 0014                  		move.w	$14(a0),d0
00013752 6700                       		beq.s	loc_131AA
00013754 6B00                       		bmi.s	loc_1319E
00013756 9045                       		sub.w	d5,d0
00013758 6400                       		bcc.s	loc_13198
0001375A 303C 0000                  		move.w	#0,d0
0001375E                            
0001375E                            loc_13198:
0001375E 3140 0014                  		move.w	d0,$14(a0)
00013762 6000                       		bra.s	loc_131AA
00013764                            ; ===========================================================================
00013764                            
00013764                            loc_1319E:				; XREF: Sonic_RollSpeed
00013764 D045                       		add.w	d5,d0
00013766 6400                       		bcc.s	loc_131A6
00013768 303C 0000                  		move.w	#0,d0
0001376C                            
0001376C                            loc_131A6:
0001376C 3140 0014                  		move.w	d0,$14(a0)
00013770                            
00013770                            loc_131AA:
00013770 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
00013774 6600                       		bne.s	loc_131CC	; if yes, branch
00013776 08A8 0002 0022             		bclr	#2,$22(a0)
0001377C 117C 0013 0016             		move.b	#$13,$16(a0)
00013782 117C 0009 0017             		move.b	#9,$17(a0)
00013788 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
0001378E 5B68 000C                  		subq.w	#5,$C(a0)
00013792                            
00013792                            loc_131CC:
00013792 1028 0026                  		move.b	$26(a0),d0
00013796 4EB9 0000 2C22             		jsr	(CalcSine).l
0001379C C1E8 0014                  		muls.w	$14(a0),d0
000137A0 E080                       		asr.l	#8,d0
000137A2 3140 0012                  		move.w	d0,$12(a0)
000137A6 C3E8 0014                  		muls.w	$14(a0),d1
000137AA E081                       		asr.l	#8,d1
000137AC 0C41 1000                  		cmpi.w	#$1000,d1
000137B0 6F00                       		ble.s	loc_131F0
000137B2 323C 1000                  		move.w	#$1000,d1
000137B6                            
000137B6                            loc_131F0:
000137B6 0C41 F000                  		cmpi.w	#-$1000,d1
000137BA 6C00                       		bge.s	loc_131FA
000137BC 323C F000                  		move.w	#-$1000,d1
000137C0                            
000137C0                            loc_131FA:
000137C0 3141 0010                  		move.w	d1,$10(a0)
000137C4 6000 FDF6                  		bra.w	loc_1300C
000137C8                            ; End of function Sonic_RollSpeed
000137C8                            
000137C8                            
000137C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000137C8                            
000137C8                            
000137C8                            Sonic_RollLeft:				; XREF: Sonic_RollSpeed
000137C8 3028 0014                  		move.w	$14(a0),d0
000137CC 6700                       		beq.s	loc_1320A
000137CE 6A00                       		bpl.s	loc_13218
000137D0                            
000137D0                            loc_1320A:
000137D0 08E8 0000 0022             		bset	#0,$22(a0)
000137D6 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
000137DC 4E75                       		rts	
000137DE                            ; ===========================================================================
000137DE                            
000137DE                            loc_13218:
000137DE 9044                       		sub.w	d4,d0
000137E0 6400                       		bcc.s	loc_13220
000137E2 303C FF80                  		move.w	#-$80,d0
000137E6                            
000137E6                            loc_13220:
000137E6 3140 0014                  		move.w	d0,$14(a0)
000137EA 4E75                       		rts	
000137EC                            ; End of function Sonic_RollLeft
000137EC                            
000137EC                            
000137EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000137EC                            
000137EC                            
000137EC                            Sonic_RollRight:			; XREF: Sonic_RollSpeed
000137EC 3028 0014                  		move.w	$14(a0),d0
000137F0 6B00                       		bmi.s	loc_1323A
000137F2 08A8 0000 0022             		bclr	#0,$22(a0)
000137F8 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
000137FE 4E75                       		rts	
00013800                            ; ===========================================================================
00013800                            
00013800                            loc_1323A:
00013800 D044                       		add.w	d4,d0
00013802 6400                       		bcc.s	loc_13242
00013804 303C 0080                  		move.w	#$80,d0
00013808                            
00013808                            loc_13242:
00013808 3140 0014                  		move.w	d0,$14(a0)
0001380C 4E75                       		rts	
0001380E                            ; End of function Sonic_RollRight
0001380E                            
0001380E                            Sonic_AirUnroll:
0001380E                            		
0001380E 4A28 003A                  		tst.b	$3A(a0) ; check jump height control
00013812 6600                       		bne.s	@timer
00013814 1038 F605                  		move.b	($FFFFF605).w,d0
00013818 0200 0070                  		andi.b	#$70,d0 ; is abc being pressed?
0001381C 6700                       		beq.s	@end	; if not, branch
0001381E 08A8 0002 0022             		bclr	#2,$22(a0)
00013824 117C 0013 0016             		move.b	#$13,$16(a0)
0001382A 117C 0009 0017             		move.b	#9,$17(a0)
00013830 117C 000E 001C             		move.b	#14,$1C(a0)	; use dunk animation
00013836 2028 0010                  		move.l	$10(a0),d0
0001383A D080                       		add.l	d0,d0
0001383C 2140 0010                  		move.l	d0,$10(a0)
00013840 5B68 000C                  		subq.w	#5,$C(a0)
00013844                            	@end:
00013844 4E75                       		rts
00013846                            	@timer:
00013846 5328 003A                  		subq.b	#1,$3A(a0)
0001384A 4E75                       		rts
0001384C                            
0001384C                            ; ---------------------------------------------------------------------------
0001384C                            ; Subroutine to	change Sonic's direction while jumping
0001384C                            ; ---------------------------------------------------------------------------
0001384C                            
0001384C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001384C                            
0001384C                            
0001384C                            Sonic_ChgJumpDir:			; XREF: Obj01_MdJump; Obj01_MdJump2
0001384C 3C38 F760                  		move.w	($FFFFF760).w,d6
00013850 3A38 F762                  		move.w	($FFFFF762).w,d5
00013854 E345                       		asl.w	#1,d5
00013856 0828 0004 0022             		btst	#4,$22(a0)
0001385C 6600                       		bne.s	Obj01_ResetScr2
0001385E 3028 0010                  		move.w	$10(a0),d0
00013862 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00013868 6700                       		beq.s	loc_13278	; if not, branch
0001386A 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013870 6600                       		bne.s	SonicCJD_JumpRight	; GMZ: If yes, branch
00013872 6100 0000                  		bsr.w	SonicCJD_JumpLeft
00013876 6E00                       		bgt.s	loc_13278
00013878 3001                       		move.w	d1,d0
0001387A                            
0001387A                            loc_13278:
0001387A 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00013880 6700                       		beq.s	Obj01_JumpMove	; if not, branch
00013882 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013888 6700                       		beq.s	SonicCJD_JumpRight	; GMZ: If not, branch
0001388A 6100 0000                  		bsr.w	SonicCJD_JumpLeft
0001388E 6E00                       		bgt.s	Obj01_JumpMove
00013890 3001                       		move.w	d1,d0
00013892 6000                       		bra.s	Obj01_JumpMove
00013894                            
00013894                            SonicCJD_JumpLeft:
00013894 08E8 0000 0022             		bset	#0,$22(a0)
0001389A 9045                       		sub.w	d5,d0
0001389C 3206                       		move.w	d6,d1
0001389E 4441                       		neg.w	d1
000138A0 B041                       		cmp.w	d1,d0
000138A2                            		; bgt.s	loc_13278
000138A2                            		; move.w	d1,d0
000138A2 4E75                       		rts
000138A4                            
000138A4                            SonicCJD_JumpRight:
000138A4 08A8 0000 0022             		bclr	#0,$22(a0)
000138AA D045                       		add.w	d5,d0
000138AC B046                       		cmp.w	d6,d0
000138AE 6D00                       		blt.s	Obj01_JumpMove
000138B0 3006                       		move.w	d6,d0
000138B2                            
000138B2                            Obj01_JumpMove:
000138B2 3140 0010                  		move.w	d0,$10(a0)	; change Sonic's horizontal speed
000138B6                            
000138B6                            Obj01_ResetScr2:
000138B6 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	the screen in its default position?
000138BC 6700                       		beq.s	loc_132A4	; if yes, branch
000138BE 6400                       		bcc.s	loc_132A0
000138C0 5878 F73E                  		addq.w	#4,($FFFFF73E).w
000138C4                            
000138C4                            loc_132A0:
000138C4 5578 F73E                  		subq.w	#2,($FFFFF73E).w
000138C8                            
000138C8                            loc_132A4:
000138C8 0C68 FC00 0012             		cmpi.w	#-$400,$12(a0)	; is Sonic moving faster than -$400 upwards?
000138CE 6500                       		bcs.s	locret_132D2	; if yes, branch
000138D0 3028 0010                  		move.w	$10(a0),d0
000138D4 3200                       		move.w	d0,d1
000138D6 EA41                       		asr.w	#5,d1
000138D8 6700                       		beq.s	locret_132D2
000138DA 6B00                       		bmi.s	loc_132C6
000138DC 9041                       		sub.w	d1,d0
000138DE 6400                       		bcc.s	loc_132C0
000138E0 303C 0000                  		move.w	#0,d0
000138E4                            
000138E4                            loc_132C0:
000138E4 3140 0010                  		move.w	d0,$10(a0)
000138E8 4E75                       		rts	
000138EA                            ; ===========================================================================
000138EA                            
000138EA                            loc_132C6:
000138EA 9041                       		sub.w	d1,d0
000138EC 6500                       		bcs.s	loc_132CE
000138EE 303C 0000                  		move.w	#0,d0
000138F2                            
000138F2                            loc_132CE:
000138F2 3140 0010                  		move.w	d0,$10(a0)
000138F6                            
000138F6                            locret_132D2:
000138F6 4E75                       		rts	
000138F8                            ; End of function Sonic_ChgJumpDir
000138F8                            
000138F8                            ; ===========================================================================
000138F8                            ; ---------------------------------------------------------------------------
000138F8                            ; Unused subroutine to squash Sonic
000138F8                            ; ---------------------------------------------------------------------------
000138F8 1028 0026                  		move.b	$26(a0),d0
000138FC 0600 0020                  		addi.b	#$20,d0
00013900 0200 00C0                  		andi.b	#$C0,d0
00013904 6600                       		bne.s	locret_13302
00013906 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
0001390A 4A41                       		tst.w	d1
0001390C 6A00                       		bpl.s	locret_13302
0001390E 317C 0000 0014             		move.w	#0,$14(a0)	; stop Sonic moving
00013914 317C 0000 0010             		move.w	#0,$10(a0)
0001391A 317C 0000 0012             		move.w	#0,$12(a0)
00013920 117C 000B 001C             		move.b	#$B,$1C(a0)	; use "warping"	animation
00013926                            
00013926                            locret_13302:
00013926 4E75                       		rts	
00013928                            ; ---------------------------------------------------------------------------
00013928                            ; Subroutine to	prevent	Sonic leaving the boundaries of	a level
00013928                            ; ---------------------------------------------------------------------------
00013928                            
00013928                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013928                            
00013928                            
00013928                            Sonic_LevelBound:			; XREF: Obj01_MdNormal; et al
00013928 2228 0008                  		move.l	8(a0),d1
0001392C 3028 0010                  		move.w	$10(a0),d0
00013930 48C0                       		ext.l	d0
00013932 E180                       		asl.l	#8,d0
00013934 D280                       		add.l	d0,d1
00013936 4841                       		swap	d1
00013938 3038 F728                  		move.w	($FFFFF728).w,d0
0001393C 0640 0010                  		addi.w	#$10,d0
00013940 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00013942 6200                       		bhi.s	Boundary_Sides	; if yes, branch
00013944 3038 F72A                  		move.w	($FFFFF72A).w,d0
00013948 0640 0128                  		addi.w	#$128,d0
0001394C 4A38 F7AA                  		tst.b	($FFFFF7AA).w
00013950 6600                       		bne.s	loc_13332
00013952 0640 0040                  		addi.w	#$40,d0
00013956                            
00013956                            loc_13332:
00013956 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00013958 6300                       		bls.s	Boundary_Sides	; if yes, branch
0001395A                            
0001395A                            loc_13336:
0001395A 3038 F72E                  		move.w	($FFFFF72E).w,d0
0001395E 0640 00E0                  		addi.w	#$E0,d0
00013962 B068 000C                  		cmp.w	$C(a0),d0	; has Sonic touched the	bottom boundary?
00013966 6D00                       		blt.s	Boundary_Bottom	; if yes, branch
00013968 4E75                       		rts	
0001396A                            ; ===========================================================================
0001396A                            
0001396A                            Boundary_Bottom:
0001396A 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2 ?
00013970 6600 0000                  		bne.w	KillSonic	; if not, kill Sonic
00013974 0C78 2000 D008             		cmpi.w	#$2000,($FFFFD008).w
0001397A 6500 0000                  		bcs.w	KillSonic
0001397E 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
00013982 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
00013988 31FC 0103 FE10             		move.w	#$103,($FFFFFE10).w ; set level	to SBZ3	(LZ4)
0001398E 4E75                       		rts	
00013990                            ; ===========================================================================
00013990                            
00013990                            Boundary_Sides:
00013990 3140 0008                  		move.w	d0,8(a0)
00013994 317C 0000 000A             		move.w	#0,$A(a0)
0001399A 317C 0000 0010             		move.w	#0,$10(a0)	; stop Sonic moving
000139A0 317C 0000 0014             		move.w	#0,$14(a0)
000139A6 60B2                       		bra.s	loc_13336
000139A8                            ; End of function Sonic_LevelBound
000139A8                            
000139A8                            ; ---------------------------------------------------------------------------
000139A8                            ; Subroutine allowing Sonic to roll when he's moving
000139A8                            ; ---------------------------------------------------------------------------
000139A8                            
000139A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000139A8                            
000139A8                            
000139A8                            Sonic_Roll:				; XREF: Obj01_MdNormal
000139A8 4A38 F7CA                  		tst.b	($FFFFF7CA).w
000139AC 6600                       		bne.s	Obj01_NoRoll
000139AE 3028 0014                  		move.w	$14(a0),d0
000139B2 6A00                       		bpl.s	loc_13392
000139B4 4440                       		neg.w	d0
000139B6                            
000139B6                            loc_13392:
000139B6 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic moving at $80 speed or faster?
000139BA 6500                       		bcs.s	Obj01_NoRoll	; if not, branch
000139BC 1038 F602                  		move.b	($FFFFF602).w,d0
000139C0 0200 000C                  		andi.b	#$C,d0		; is left/right	being pressed?
000139C4 6600                       		bne.s	Obj01_NoRoll	; if yes, branch
000139C6 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
000139CC 6600                       		bne.s	Obj01_ChkRoll	; if yes, branch
000139CE                            
000139CE                            Obj01_NoRoll:
000139CE 4E75                       		rts	
000139D0                            ; ===========================================================================
000139D0                            
000139D0                            Obj01_ChkRoll:
000139D0 0828 0002 0022             		btst	#2,$22(a0)	; is Sonic already rolling?
000139D6 6700                       		beq.s	Obj01_DoRoll	; if not, branch
000139D8 4E75                       		rts	
000139DA                            ; ===========================================================================
000139DA                            
000139DA                            Obj01_DoRoll:
000139DA 08E8 0002 0022             		bset	#2,$22(a0)
000139E0 117C 000E 0016             		move.b	#$E,$16(a0)
000139E6 117C 0007 0017             		move.b	#7,$17(a0)
000139EC 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
000139F2 5A68 000C                  		addq.w	#5,$C(a0)
000139F6 303C 00BE                  		move.w	#$BE,d0
000139FA 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play rolling sound
00013A00 4A68 0014                  		tst.w	$14(a0)
00013A04 6600                       		bne.s	locret_133E8
00013A06 317C 0200 0014             		move.w	#$200,$14(a0)
00013A0C                            
00013A0C                            locret_133E8:
00013A0C 4E75                       		rts	
00013A0E                            ; End of function Sonic_Roll
00013A0E                            
00013A0E                            ; ---------------------------------------------------------------------------
00013A0E                            ; Subroutine allowing Sonic to jump
00013A0E                            ; ---------------------------------------------------------------------------
00013A0E                            
00013A0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013A0E                            
00013A0E                            
00013A0E                            Sonic_Jump:				; XREF: Obj01_MdNormal; Obj01_MdRoll
00013A0E 1038 F603                  		move.b	($FFFFF603).w,d0
00013A12 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
00013A16 6700 0000                  		beq.w	locret_1348E	; if not, branch
00013A1A 7000                       		moveq	#0,d0
00013A1C 1028 0026                  		move.b	$26(a0),d0
00013A20 0600 0080                  		addi.b	#$80,d0
00013A24 6100 0000                  		bsr.w	sub_14D48
00013A28 0C41 0006                  		cmpi.w	#6,d1
00013A2C 6D00 0000                  		blt.w	locret_1348E
00013A30 343C 0680                  		move.w	#$680,d2
00013A34 0828 0006 0022             		btst	#6,$22(a0)
00013A3A 6700                       		beq.s	loc_1341C
00013A3C 343C 0380                  		move.w	#$380,d2
00013A40                            
00013A40                            loc_1341C:
00013A40 7000                       		moveq	#0,d0
00013A42 1028 0026                  		move.b	$26(a0),d0
00013A46 0400 0040                  		subi.b	#$40,d0
00013A4A 4EB9 0000 2C22             		jsr	(CalcSine).l
00013A50 C3C2                       		muls.w	d2,d1
00013A52 E081                       		asr.l	#8,d1
00013A54 D368 0010                  		add.w	d1,$10(a0)	; make Sonic jump
00013A58 C1C2                       		muls.w	d2,d0
00013A5A E080                       		asr.l	#8,d0
00013A5C D168 0012                  		add.w	d0,$12(a0)	; make Sonic jump
00013A60 08E8 0001 0022             		bset	#1,$22(a0)
00013A66 08A8 0005 0022             		bclr	#5,$22(a0)
00013A6C 588F                       		addq.l	#4,sp
00013A6E 117C 0001 003C             		move.b	#1,$3C(a0)
00013A74 4228 0038                  		clr.b	$38(a0)
00013A78 303C 00A0                  		move.w	#$A0,d0
00013A7C 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play jumping sound
00013A82 117C 0013 0016             		move.b	#$13,$16(a0)
00013A88 117C 0009 0017             		move.b	#9,$17(a0)
00013A8E 0828 0002 0022             		btst	#2,$22(a0)
00013A94 6600                       		bne.s	loc_13490
00013A96 117C 000E 0016             		move.b	#$E,$16(a0)
00013A9C 117C 0007 0017             		move.b	#7,$17(a0)
00013AA2 117C 0002 001C             		move.b	#2,$1C(a0)	; use "jumping"	animation
00013AA8 08E8 0002 0022             		bset	#2,$22(a0)
00013AAE 5A68 000C                  		addq.w	#5,$C(a0)
00013AB2 117C 000A 003A             		move.b	#10,$3A(a0) ; timer
00013AB8                            
00013AB8                            locret_1348E:
00013AB8 4E75                       		rts	
00013ABA                            ; ===========================================================================
00013ABA                            
00013ABA                            loc_13490:
00013ABA 08E8 0004 0022             		bset	#4,$22(a0)
00013AC0 4E75                       		rts	
00013AC2                            ; End of function Sonic_Jump
00013AC2                            
00013AC2                            
00013AC2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013AC2                            
00013AC2                            
00013AC2                            Sonic_JumpHeight:			; XREF: Obj01_MdJump; Obj01_MdJump2
00013AC2 4A28 003C                  		tst.b	$3C(a0)
00013AC6 6700                       		beq.s	loc_134C4
00013AC8 323C FC00                  		move.w	#-$400,d1
00013ACC 0828 0006 0022             		btst	#6,$22(a0)
00013AD2 6700                       		beq.s	loc_134AE
00013AD4 323C FE00                  		move.w	#-$200,d1
00013AD8                            
00013AD8                            loc_134AE:
00013AD8 B268 0012                  		cmp.w	$12(a0),d1
00013ADC 6F00                       		ble.s	locret_134C2
00013ADE 1038 F602                  		move.b	($FFFFF602).w,d0
00013AE2 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
00013AE6 6600                       		bne.s	locret_134C2	; if yes, branch
00013AE8 3141 0012                  		move.w	d1,$12(a0)
00013AEC                            
00013AEC                            locret_134C2:
00013AEC 4E75                       		rts	
00013AEE                            ; ===========================================================================
00013AEE                            
00013AEE                            loc_134C4:
00013AEE 0C68 F040 0012             		cmpi.w	#-$FC0,$12(a0)
00013AF4 6C00                       		bge.s	locret_134D2
00013AF6 317C F040 0012             		move.w	#-$FC0,$12(a0)
00013AFC                            
00013AFC                            locret_134D2:
00013AFC 4E75                       		rts	
00013AFE                            ; End of function Sonic_JumpHeight
00013AFE                            
00013AFE                            ; ---------------------------------------------------------------------------
00013AFE                            ; Subroutine to	slow Sonic walking up a	slope
00013AFE                            ; ---------------------------------------------------------------------------
00013AFE                            
00013AFE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013AFE                            
00013AFE                            
00013AFE                            Sonic_SlopeResist:			; XREF: Obj01_MdNormal
00013AFE 1028 0026                  		move.b	$26(a0),d0
00013B02 0600 0060                  		addi.b	#$60,d0
00013B06 0C00 00C0                  		cmpi.b	#$C0,d0
00013B0A 6400                       		bcc.s	locret_13508
00013B0C 1028 0026                  		move.b	$26(a0),d0
00013B10 4EB9 0000 2C22             		jsr	(CalcSine).l
00013B16 C1FC 0020                  		muls.w	#$20,d0
00013B1A E080                       		asr.l	#8,d0
00013B1C 4A68 0014                  		tst.w	$14(a0)
00013B20 6700                       		beq.s	locret_13508
00013B22 6B00                       		bmi.s	loc_13504
00013B24 4A40                       		tst.w	d0
00013B26 6700                       		beq.s	locret_13502
00013B28 D168 0014                  		add.w	d0,$14(a0)	; change Sonic's inertia
00013B2C                            
00013B2C                            locret_13502:
00013B2C 4E75                       		rts	
00013B2E                            ; ===========================================================================
00013B2E                            
00013B2E                            loc_13504:
00013B2E D168 0014                  		add.w	d0,$14(a0)
00013B32                            
00013B32                            locret_13508:
00013B32 4E75                       		rts	
00013B34                            ; End of function Sonic_SlopeResist
00013B34                            
00013B34                            ; ---------------------------------------------------------------------------
00013B34                            ; Subroutine to	push Sonic down	a slope	while he's rolling
00013B34                            ; ---------------------------------------------------------------------------
00013B34                            
00013B34                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013B34                            
00013B34                            
00013B34                            Sonic_RollRepel:			; XREF: Obj01_MdRoll
00013B34 1028 0026                  		move.b	$26(a0),d0
00013B38 0600 0060                  		addi.b	#$60,d0
00013B3C 0C00 00C0                  		cmpi.b	#-$40,d0
00013B40 6400                       		bcc.s	locret_13544
00013B42 1028 0026                  		move.b	$26(a0),d0
00013B46 4EB9 0000 2C22             		jsr	(CalcSine).l
00013B4C C1FC 0050                  		muls.w	#$50,d0
00013B50 E080                       		asr.l	#8,d0
00013B52 4A68 0014                  		tst.w	$14(a0)
00013B56 6B00                       		bmi.s	loc_1353A
00013B58 4A40                       		tst.w	d0
00013B5A 6A00                       		bpl.s	loc_13534
00013B5C E480                       		asr.l	#2,d0
00013B5E                            
00013B5E                            loc_13534:
00013B5E D168 0014                  		add.w	d0,$14(a0)
00013B62 4E75                       		rts	
00013B64                            ; ===========================================================================
00013B64                            
00013B64                            loc_1353A:
00013B64 4A40                       		tst.w	d0
00013B66 6B00                       		bmi.s	loc_13540
00013B68 E480                       		asr.l	#2,d0
00013B6A                            
00013B6A                            loc_13540:
00013B6A D168 0014                  		add.w	d0,$14(a0)
00013B6E                            
00013B6E                            locret_13544:
00013B6E 4E75                       		rts	
00013B70                            ; End of function Sonic_RollRepel
00013B70                            
00013B70                            ; ---------------------------------------------------------------------------
00013B70                            ; Subroutine to	push Sonic down	a slope
00013B70                            ; ---------------------------------------------------------------------------
00013B70                            
00013B70                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013B70                            
00013B70                            
00013B70                            Sonic_SlopeRepel:			; XREF: Obj01_MdNormal; Obj01_MdRoll
00013B70 4E71                       		nop	
00013B72 4A28 0038                  		tst.b	$38(a0)
00013B76 6600                       		bne.s	locret_13580
00013B78 4A68 003E                  		tst.w	$3E(a0)
00013B7C 6600                       		bne.s	loc_13582
00013B7E 1028 0026                  		move.b	$26(a0),d0
00013B82 0600 0020                  		addi.b	#$20,d0
00013B86 0200 00C0                  		andi.b	#$C0,d0
00013B8A 6700                       		beq.s	locret_13580
00013B8C 3028 0014                  		move.w	$14(a0),d0
00013B90 6A00                       		bpl.s	loc_1356A
00013B92 4440                       		neg.w	d0
00013B94                            
00013B94                            loc_1356A:
00013B94 0C40 0280                  		cmpi.w	#$280,d0
00013B98 6400                       		bcc.s	locret_13580
00013B9A 4268 0014                  		clr.w	$14(a0)
00013B9E 08E8 0001 0022             		bset	#1,$22(a0)
00013BA4 317C 001E 003E             		move.w	#$1E,$3E(a0)
00013BAA                            
00013BAA                            locret_13580:
00013BAA 4E75                       		rts	
00013BAC                            ; ===========================================================================
00013BAC                            
00013BAC                            loc_13582:
00013BAC 5368 003E                  		subq.w	#1,$3E(a0)
00013BB0 4E75                       		rts	
00013BB2                            ; End of function Sonic_SlopeRepel
00013BB2                            
00013BB2                            ; ---------------------------------------------------------------------------
00013BB2                            ; Subroutine to	return Sonic's angle to 0 as he jumps
00013BB2                            ; ---------------------------------------------------------------------------
00013BB2                            
00013BB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013BB2                            
00013BB2                            
00013BB2                            Sonic_JumpAngle:			; XREF: Obj01_MdJump; Obj01_MdJump2
00013BB2 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
00013BB6 6700                       		beq.s	locret_135A2	; if already 0,	branch
00013BB8 6A00                       		bpl.s	loc_13598	; if higher than 0, branch
00013BBA                            
00013BBA 5400                       		addq.b	#2,d0		; increase angle
00013BBC 6400                       		bcc.s	loc_13596
00013BBE 7000                       		moveq	#0,d0
00013BC0                            
00013BC0                            loc_13596:
00013BC0 6000                       		bra.s	loc_1359E
00013BC2                            ; ===========================================================================
00013BC2                            
00013BC2                            loc_13598:
00013BC2 5500                       		subq.b	#2,d0		; decrease angle
00013BC4 6400                       		bcc.s	loc_1359E
00013BC6 7000                       		moveq	#0,d0
00013BC8                            
00013BC8                            loc_1359E:
00013BC8 1140 0026                  		move.b	d0,$26(a0)
00013BCC                            
00013BCC                            locret_135A2:
00013BCC 4E75                       		rts	
00013BCE                            ; End of function Sonic_JumpAngle
00013BCE                            
00013BCE                            ; ---------------------------------------------------------------------------
00013BCE                            ; Subroutine for Sonic to interact with	the floor after	jumping/falling
00013BCE                            ; ---------------------------------------------------------------------------
00013BCE                            
00013BCE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013BCE                            
00013BCE                            
00013BCE                            Sonic_Floor:				; XREF: Obj01_MdJump; Obj01_MdJump2
00013BCE 3228 0010                  		move.w	$10(a0),d1
00013BD2 3428 0012                  		move.w	$12(a0),d2
00013BD6 4EB9 0000 2EF0             		jsr	(CalcAngle).l
00013BDC 11C0 FFEC                  		move.b	d0,($FFFFFFEC).w
00013BE0 0400 0020                  		subi.b	#$20,d0
00013BE4 11C0 FFED                  		move.b	d0,($FFFFFFED).w
00013BE8 0200 00C0                  		andi.b	#$C0,d0
00013BEC 11C0 FFEE                  		move.b	d0,($FFFFFFEE).w
00013BF0 0C00 0040                  		cmpi.b	#$40,d0
00013BF4 6700 0000                  		beq.w	loc_13680
00013BF8 0C00 0080                  		cmpi.b	#$80,d0
00013BFC 6700 0000                  		beq.w	loc_136E2
00013C00 0C00 00C0                  		cmpi.b	#-$40,d0
00013C04 6700 0000                  		beq.w	loc_1373E
00013C08 6100 0000                  		bsr.w	Sonic_HitWall
00013C0C 4A41                       		tst.w	d1
00013C0E 6A00                       		bpl.s	loc_135F0
00013C10 9368 0008                  		sub.w	d1,8(a0)
00013C14 317C 0000 0010             		move.w	#0,$10(a0)
00013C1A                            
00013C1A                            loc_135F0:
00013C1A 6100 0000                  		bsr.w	sub_14EB4
00013C1E 4A41                       		tst.w	d1
00013C20 6A00                       		bpl.s	loc_13602
00013C22 D368 0008                  		add.w	d1,8(a0)
00013C26 317C 0000 0010             		move.w	#0,$10(a0)
00013C2C                            
00013C2C                            loc_13602:
00013C2C 6100 0000                  		bsr.w	Sonic_HitFloor
00013C30 11C1 FFEF                  		move.b	d1,($FFFFFFEF).w
00013C34 4A41                       		tst.w	d1
00013C36 6A00                       		bpl.s	locret_1367E
00013C38 1428 0012                  		move.b	$12(a0),d2
00013C3C 5002                       		addq.b	#8,d2
00013C3E 4402                       		neg.b	d2
00013C40 B202                       		cmp.b	d2,d1
00013C42 6C00                       		bge.s	loc_1361E
00013C44 B002                       		cmp.b	d2,d0
00013C46 6D00                       		blt.s	locret_1367E
00013C48                            
00013C48                            loc_1361E:
00013C48 D368 000C                  		add.w	d1,$C(a0)
00013C4C 1143 0026                  		move.b	d3,$26(a0)
00013C50 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013C54 117C 0000 001C             		move.b	#0,$1C(a0)
00013C5A 1003                       		move.b	d3,d0
00013C5C 0600 0020                  		addi.b	#$20,d0
00013C60 0200 0040                  		andi.b	#$40,d0
00013C64 6600                       		bne.s	loc_1365C
00013C66 1003                       		move.b	d3,d0
00013C68 0600 0010                  		addi.b	#$10,d0
00013C6C 0200 0020                  		andi.b	#$20,d0
00013C70 6700                       		beq.s	loc_1364E
00013C72 E0E8 0012                  		asr	$12(a0)
00013C76 6000                       		bra.s	loc_13670
00013C78                            ; ===========================================================================
00013C78                            
00013C78                            loc_1364E:
00013C78 317C 0000 0012             		move.w	#0,$12(a0)
00013C7E 3168 0010 0014             		move.w	$10(a0),$14(a0)
00013C84 4E75                       		rts	
00013C86                            ; ===========================================================================
00013C86                            
00013C86                            loc_1365C:
00013C86 317C 0000 0010             		move.w	#0,$10(a0)
00013C8C 0C68 0FC0 0012             		cmpi.w	#$FC0,$12(a0)
00013C92 6F00                       		ble.s	loc_13670
00013C94 317C 0FC0 0012             		move.w	#$FC0,$12(a0)
00013C9A                            
00013C9A                            loc_13670:
00013C9A 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013CA0 4A03                       		tst.b	d3
00013CA2 6A00                       		bpl.s	locret_1367E
00013CA4 4468 0014                  		neg.w	$14(a0)
00013CA8                            
00013CA8                            locret_1367E:
00013CA8 4E75                       		rts	
00013CAA                            ; ===========================================================================
00013CAA                            
00013CAA                            loc_13680:
00013CAA 6100 0000                  		bsr.w	Sonic_HitWall
00013CAE 4A41                       		tst.w	d1
00013CB0 6A00                       		bpl.s	loc_1369A
00013CB2 9368 0008                  		sub.w	d1,8(a0)
00013CB6 317C 0000 0010             		move.w	#0,$10(a0)
00013CBC 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013CC2 4E75                       		rts	
00013CC4                            ; ===========================================================================
00013CC4                            
00013CC4                            loc_1369A:
00013CC4 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013CC8 4A41                       		tst.w	d1
00013CCA 6A00                       		bpl.s	loc_136B4
00013CCC 9368 000C                  		sub.w	d1,$C(a0)
00013CD0 4A68 0012                  		tst.w	$12(a0)
00013CD4 6A00                       		bpl.s	locret_136B2
00013CD6 317C 0000 0012             		move.w	#0,$12(a0)
00013CDC                            
00013CDC                            locret_136B2:
00013CDC 4E75                       		rts	
00013CDE                            ; ===========================================================================
00013CDE                            
00013CDE                            loc_136B4:
00013CDE 4A68 0012                  		tst.w	$12(a0)
00013CE2 6B00                       		bmi.s	locret_136E0
00013CE4 6100 0000                  		bsr.w	Sonic_HitFloor
00013CE8 4A41                       		tst.w	d1
00013CEA 6A00                       		bpl.s	locret_136E0
00013CEC D368 000C                  		add.w	d1,$C(a0)
00013CF0 1143 0026                  		move.b	d3,$26(a0)
00013CF4 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013CF8 117C 0000 001C             		move.b	#0,$1C(a0)
00013CFE 317C 0000 0012             		move.w	#0,$12(a0)
00013D04 3168 0010 0014             		move.w	$10(a0),$14(a0)
00013D0A                            
00013D0A                            locret_136E0:
00013D0A 4E75                       		rts	
00013D0C                            ; ===========================================================================
00013D0C                            
00013D0C                            loc_136E2:
00013D0C 6100 0000                  		bsr.w	Sonic_HitWall
00013D10 4A41                       		tst.w	d1
00013D12 6A00                       		bpl.s	loc_136F4
00013D14 9368 0008                  		sub.w	d1,8(a0)
00013D18 317C 0000 0010             		move.w	#0,$10(a0)
00013D1E                            
00013D1E                            loc_136F4:
00013D1E 6100 0000                  		bsr.w	sub_14EB4
00013D22 4A41                       		tst.w	d1
00013D24 6A00                       		bpl.s	loc_13706
00013D26 D368 0008                  		add.w	d1,8(a0)
00013D2A 317C 0000 0010             		move.w	#0,$10(a0)
00013D30                            
00013D30                            loc_13706:
00013D30 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013D34 4A41                       		tst.w	d1
00013D36 6A00                       		bpl.s	locret_1373C
00013D38 9368 000C                  		sub.w	d1,$C(a0)
00013D3C 1003                       		move.b	d3,d0
00013D3E 0600 0020                  		addi.b	#$20,d0
00013D42 0200 0040                  		andi.b	#$40,d0
00013D46 6600                       		bne.s	loc_13726
00013D48 317C 0000 0012             		move.w	#0,$12(a0)
00013D4E 4E75                       		rts	
00013D50                            ; ===========================================================================
00013D50                            
00013D50                            loc_13726:
00013D50 1143 0026                  		move.b	d3,$26(a0)
00013D54 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013D58 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013D5E 4A03                       		tst.b	d3
00013D60 6A00                       		bpl.s	locret_1373C
00013D62 4468 0014                  		neg.w	$14(a0)
00013D66                            
00013D66                            locret_1373C:
00013D66 4E75                       		rts	
00013D68                            ; ===========================================================================
00013D68                            
00013D68                            loc_1373E:
00013D68 6100 0000                  		bsr.w	sub_14EB4
00013D6C 4A41                       		tst.w	d1
00013D6E 6A00                       		bpl.s	loc_13758
00013D70 D368 0008                  		add.w	d1,8(a0)
00013D74 317C 0000 0010             		move.w	#0,$10(a0)
00013D7A 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013D80 4E75                       		rts	
00013D82                            ; ===========================================================================
00013D82                            
00013D82                            loc_13758:
00013D82 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013D86 4A41                       		tst.w	d1
00013D88 6A00                       		bpl.s	loc_13772
00013D8A 9368 000C                  		sub.w	d1,$C(a0)
00013D8E 4A68 0012                  		tst.w	$12(a0)
00013D92 6A00                       		bpl.s	locret_13770
00013D94 317C 0000 0012             		move.w	#0,$12(a0)
00013D9A                            
00013D9A                            locret_13770:
00013D9A 4E75                       		rts	
00013D9C                            ; ===========================================================================
00013D9C                            
00013D9C                            loc_13772:
00013D9C 4A68 0012                  		tst.w	$12(a0)
00013DA0 6B00                       		bmi.s	locret_1379E
00013DA2 6100 0000                  		bsr.w	Sonic_HitFloor
00013DA6 4A41                       		tst.w	d1
00013DA8 6A00                       		bpl.s	locret_1379E
00013DAA D368 000C                  		add.w	d1,$C(a0)
00013DAE 1143 0026                  		move.b	d3,$26(a0)
00013DB2 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013DB6 117C 0000 001C             		move.b	#0,$1C(a0)
00013DBC 317C 0000 0012             		move.w	#0,$12(a0)
00013DC2 3168 0010 0014             		move.w	$10(a0),$14(a0)
00013DC8                            
00013DC8                            locret_1379E:
00013DC8 4E75                       		rts	
00013DCA                            ; End of function Sonic_Floor
00013DCA                            
00013DCA                            ; ---------------------------------------------------------------------------
00013DCA                            ; Subroutine to	reset Sonic's mode when he lands on the floor
00013DCA                            ; ---------------------------------------------------------------------------
00013DCA                            
00013DCA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013DCA                            
00013DCA                            
00013DCA                            Sonic_ResetOnFloor:			; XREF: PlatformObject; et al
00013DCA 0828 0004 0022             		btst	#4,$22(a0)
00013DD0 6700                       		beq.s	loc_137AE
00013DD2 4E71                       		nop	
00013DD4 4E71                       		nop	
00013DD6 4E71                       		nop	
00013DD8                            
00013DD8                            loc_137AE:
00013DD8 08A8 0005 0022             		bclr	#5,$22(a0)
00013DDE 08A8 0001 0022             		bclr	#1,$22(a0)
00013DE4 08A8 0004 0022             		bclr	#4,$22(a0)
00013DEA 0828 0002 0022             		btst	#2,$22(a0)
00013DF0 6700                       		beq.s	loc_137E4
00013DF2 08A8 0002 0022             		bclr	#2,$22(a0)
00013DF8 117C 0013 0016             		move.b	#$13,$16(a0)
00013DFE 117C 0009 0017             		move.b	#9,$17(a0)
00013E04 117C 0000 001C             		move.b	#0,$1C(a0)	; use running/walking animation
00013E0A 5B68 000C                  		subq.w	#5,$C(a0)
00013E0E                            
00013E0E                            loc_137E4:
00013E0E 117C 0000 003C             		move.b	#0,$3C(a0)
00013E14 31FC 0000 F7D0             		move.w	#0,($FFFFF7D0).w
00013E1A 4E75                       		rts	
00013E1C                            ; End of function Sonic_ResetOnFloor
00013E1C                            
00013E1C                            ; ===========================================================================
00013E1C                            ; ---------------------------------------------------------------------------
00013E1C                            ; Sonic	when he	gets hurt
00013E1C                            ; ---------------------------------------------------------------------------
00013E1C                            
00013E1C                            Obj01_Hurt:				; XREF: Obj01_Index
00013E1C 4EBA 9D64                  		jsr	SpeedToPos
00013E20 0668 0030 0012             		addi.w	#$30,$12(a0)
00013E26 0828 0006 0022             		btst	#6,$22(a0)
00013E2C 6700                       		beq.s	loc_1380C
00013E2E 0468 0020 0012             		subi.w	#$20,$12(a0)
00013E34                            
00013E34                            loc_1380C:
00013E34 6100 0000                  		bsr.w	Sonic_HurtStop
00013E38 6100 FAEE                  		bsr.w	Sonic_LevelBound
00013E3C 6100 F4BE                  		bsr.w	Sonic_RecordPos
00013E40 6100 0000                  		bsr.w	Sonic_Animate
00013E44 6100 0000                  		bsr.w	LoadSonicDynPLC
00013E48 4EFA 9D5E                  		jmp	DisplaySprite
00013E4C                            
00013E4C                            ; ---------------------------------------------------------------------------
00013E4C                            ; Subroutine to	stop Sonic falling after he's been hurt
00013E4C                            ; ---------------------------------------------------------------------------
00013E4C                            
00013E4C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013E4C                            
00013E4C                            
00013E4C                            Sonic_HurtStop:				; XREF: Obj01_Hurt
00013E4C 3038 F72E                  		move.w	($FFFFF72E).w,d0
00013E50 0640 00E0                  		addi.w	#$E0,d0
00013E54 B068 000C                  		cmp.w	$C(a0),d0
00013E58 6500 0000                  		bcs.w	KillSonic
00013E5C 6100 FD70                  		bsr.w	Sonic_Floor
00013E60 0828 0001 0022             		btst	#1,$22(a0)
00013E66 6600                       		bne.s	locret_13860
00013E68 7000                       		moveq	#0,d0
00013E6A 3140 0012                  		move.w	d0,$12(a0)
00013E6E 3140 0010                  		move.w	d0,$10(a0)
00013E72 3140 0014                  		move.w	d0,$14(a0)
00013E76 117C 0000 001C             		move.b	#0,$1C(a0)
00013E7C 5528 0024                  		subq.b	#2,$24(a0)
00013E80 317C 0078 0030             		move.w	#$78,$30(a0)
00013E86                            
00013E86                            locret_13860:
00013E86 4E75                       		rts	
00013E88                            ; End of function Sonic_HurtStop
00013E88                            
00013E88                            ; ===========================================================================
00013E88                            ; ---------------------------------------------------------------------------
00013E88                            ; Sonic	when he	dies
00013E88                            ; ---------------------------------------------------------------------------
00013E88                            
00013E88                            Obj01_Death:				; XREF: Obj01_Index
00013E88 6100 0000                  		bsr.w	GameOver
00013E8C 4EBA 9CC8                  		jsr	ObjectFall
00013E90 6100 F46A                  		bsr.w	Sonic_RecordPos
00013E94 6100 0000                  		bsr.w	Sonic_Animate
00013E98 6100 0000                  		bsr.w	LoadSonicDynPLC
00013E9C 4EFA 9D0A                  		jmp	DisplaySprite
00013EA0                            
00013EA0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013EA0                            
00013EA0                            
00013EA0                            GameOver:				; XREF: Obj01_Death
00013EA0 3038 F72E                  		move.w	($FFFFF72E).w,d0
00013EA4 0640 0100                  		addi.w	#$100,d0
00013EA8 B068 000C                  		cmp.w	$C(a0),d0
00013EAC 6400 0000                  		bcc.w	locret_13900
00013EB0 317C FFC8 0012             		move.w	#-$38,$12(a0)
00013EB6 5428 0024                  		addq.b	#2,$24(a0)
00013EBA 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
00013EBE 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; update lives	counter
00013EC2 5338 FE12                  		subq.b	#1,($FFFFFE12).w ; subtract 1 from number of lives
00013EC6 6600                       		bne.s	loc_138D4
00013EC8 317C 0000 003A             		move.w	#0,$3A(a0)
00013ECE 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load GAME object
00013ED4 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
00013EDA 11FC 0001 D0DA             		move.b	#1,($FFFFD0DA).w ; set OVER object to correct frame
00013EE0 4238 FE1A                  		clr.b	($FFFFFE1A).w
00013EE4                            
00013EE4                            loc_138C2:
00013EE4 303C 008F                  		move.w	#$8F,d0
00013EE8 4EB9 0000 15B6             		jsr	(PlaySound).l	; play game over music
00013EEE 7003                       		moveq	#3,d0
00013EF0 4EF9 0000 17A0             		jmp	(LoadPLC).l	; load game over patterns
00013EF6                            ; ===========================================================================
00013EF6                            
00013EF6                            loc_138D4:
00013EF6 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
00013EFC 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is TIME OVER tag set?
00013F00 6700                       		beq.s	locret_13900	; if not, branch
00013F02 317C 0000 003A             		move.w	#0,$3A(a0)
00013F08 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load TIME object
00013F0E 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
00013F14 11FC 0002 D09A             		move.b	#2,($FFFFD09A).w
00013F1A 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
00013F20 60C2                       		bra.s	loc_138C2
00013F22                            ; ===========================================================================
00013F22                            
00013F22                            locret_13900:
00013F22 4E75                       		rts	
00013F24                            ; End of function GameOver
00013F24                            
00013F24                            ; ===========================================================================
00013F24                            ; ---------------------------------------------------------------------------
00013F24                            ; Sonic	when the level is restarted
00013F24                            ; ---------------------------------------------------------------------------
00013F24                            
00013F24                            Obj01_ResetLevel:			; XREF: Obj01_Index
00013F24 4A68 003A                  		tst.w	$3A(a0)
00013F28 6700                       		beq.s	locret_13914
00013F2A 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00013F2E 6600                       		bne.s	locret_13914
00013F30 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
00013F36                            
00013F36                            locret_13914:
00013F36 4E75                       		rts	
00013F38                            
00013F38                            ; ---------------------------------------------------------------------------
00013F38                            ; Subroutine to	make Sonic run around loops (GHZ/SLZ)
00013F38                            ; ---------------------------------------------------------------------------
00013F38                            
00013F38                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013F38                            
00013F38                            
00013F38                            Sonic_Loops:				; XREF: Obj01_Control
00013F38 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; is level SLZ	?
00013F3E 6700                       		beq.s	loc_13926	; if yes, branch
00013F40 4A38 FE10                  		tst.b	($FFFFFE10).w	; is level GHZ ?
00013F44 6600 0000                  		bne.w	locret_139C2	; if not, branch
00013F48                            
00013F48                            loc_13926:
00013F48 3028 000C                  		move.w	$C(a0),d0
00013F4C E248                       		lsr.w	#1,d0
00013F4E 0240 0380                  		andi.w	#$380,d0
00013F52 1228 0008                  		move.b	8(a0),d1
00013F56 0241 007F                  		andi.w	#$7F,d1
00013F5A D041                       		add.w	d1,d0
00013F5C 43F8 A400                  		lea	($FFFFA400).w,a1
00013F60 1231 0000                  		move.b	(a1,d0.w),d1	; d1 is	the 256x256 tile Sonic is currently on
00013F64 B238 F7AE                  		cmp.b	($FFFFF7AE).w,d1
00013F68 6700 FA66                  		beq.w	Obj01_ChkRoll
00013F6C B238 F7AF                  		cmp.b	($FFFFF7AF).w,d1
00013F70 6700 FA5E                  		beq.w	Obj01_ChkRoll
00013F74 B238 F7AC                  		cmp.b	($FFFFF7AC).w,d1
00013F78 6700                       		beq.s	loc_13976
00013F7A B238 F7AD                  		cmp.b	($FFFFF7AD).w,d1
00013F7E 6700                       		beq.s	loc_13966
00013F80 08A8 0006 0001             		bclr	#6,1(a0)
00013F86 4E75                       		rts	
00013F88                            ; ===========================================================================
00013F88                            
00013F88                            loc_13966:
00013F88 0828 0001 0022             		btst	#1,$22(a0)
00013F8E 6700                       		beq.s	loc_13976
00013F90 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00013F96 4E75                       		rts	
00013F98                            ; ===========================================================================
00013F98                            
00013F98                            loc_13976:
00013F98 3428 0008                  		move.w	8(a0),d2
00013F9C 0C02 002C                  		cmpi.b	#$2C,d2
00013FA0 6400                       		bcc.s	loc_13988
00013FA2 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00013FA8 4E75                       		rts	
00013FAA                            ; ===========================================================================
00013FAA                            
00013FAA                            loc_13988:
00013FAA 0C02 00E0                  		cmpi.b	#-$20,d2
00013FAE 6500                       		bcs.s	loc_13996
00013FB0 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
00013FB6 4E75                       		rts	
00013FB8                            ; ===========================================================================
00013FB8                            
00013FB8                            loc_13996:
00013FB8 0828 0006 0001             		btst	#6,1(a0)
00013FBE 6600                       		bne.s	loc_139B2
00013FC0 1228 0026                  		move.b	$26(a0),d1
00013FC4 6700                       		beq.s	locret_139C2
00013FC6 0C01 0080                  		cmpi.b	#-$80,d1
00013FCA 6200                       		bhi.s	locret_139C2
00013FCC 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
00013FD2 4E75                       		rts	
00013FD4                            ; ===========================================================================
00013FD4                            
00013FD4                            loc_139B2:
00013FD4 1228 0026                  		move.b	$26(a0),d1
00013FD8 0C01 0080                  		cmpi.b	#-$80,d1
00013FDC 6300                       		bls.s	locret_139C2
00013FDE 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00013FE4                            
00013FE4                            locret_139C2:
00013FE4 4E75                       		rts	
00013FE6                            ; End of function Sonic_Loops
00013FE6                            
00013FE6                            ; ---------------------------------------------------------------------------
00013FE6                            ; Subroutine to	animate	Sonic's sprites
00013FE6                            ; ---------------------------------------------------------------------------
00013FE6                            
00013FE6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013FE6                            
00013FE6                            
00013FE6                            Sonic_Animate:				; XREF: Obj01_Control; et al
00013FE6 43F9 0000 0000             		lea	(SonicAniData).l,a1
00013FEC 7000                       		moveq	#0,d0
00013FEE 1028 001C                  		move.b	$1C(a0),d0
00013FF2 B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
00013FF6 6700                       		beq.s	SAnim_Do	; if not, branch
00013FF8 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
00013FFC 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
00014002 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
00014008                            
00014008                            SAnim_Do:
00014008 D040                       		add.w	d0,d0
0001400A D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0001400E 1011                       		move.b	(a1),d0
00014010 6B00                       		bmi.s	SAnim_WalkRun	; if animation is walk/run/roll/jump, branch
00014012 1228 0022                  		move.b	$22(a0),d1
00014016 0201 0001                  		andi.b	#1,d1
0001401A 0228 00FC 0001             		andi.b	#$FC,1(a0)
00014020 8328 0001                  		or.b	d1,1(a0)
00014024 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00014028 6A00                       		bpl.s	SAnim_Delay	; if time remains, branch
0001402A 1140 001E                  		move.b	d0,$1E(a0)	; load frame duration
0001402E                            
0001402E                            SAnim_Do2:
0001402E 7200                       		moveq	#0,d1
00014030 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
00014034 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
00014038 6B00                       		bmi.s	SAnim_End_FF	; if animation is complete, branch
0001403A                            
0001403A                            SAnim_Next:
0001403A 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
0001403E 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
00014042                            
00014042                            SAnim_Delay:
00014042 4E75                       		rts	
00014044                            ; ===========================================================================
00014044                            
00014044                            SAnim_End_FF:
00014044 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
00014046 6600                       		bne.s	SAnim_End_FE	; if not, branch
00014048 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
0001404E 1029 0001                  		move.b	1(a1),d0	; read sprite number
00014052 60E6                       		bra.s	SAnim_Next
00014054                            ; ===========================================================================
00014054                            
00014054                            SAnim_End_FE:
00014054 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
00014056 6600                       		bne.s	SAnim_End_FD	; if not, branch
00014058 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0001405C 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
00014060 9200                       		sub.b	d0,d1
00014062 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
00014066 60D2                       		bra.s	SAnim_Next
00014068                            ; ===========================================================================
00014068                            
00014068                            SAnim_End_FD:
00014068 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0001406A 6600                       		bne.s	SAnim_End	; if not, branch
0001406C 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
00014072                            
00014072                            SAnim_End:
00014072 4E75                       		rts	
00014074                            ; ===========================================================================
00014074                            
00014074                            SAnim_WalkRun:				; XREF: SAnim_Do
00014074 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00014078 6AC8                       		bpl.s	SAnim_Delay	; if time remains, branch
0001407A 5200                       		addq.b	#1,d0		; is animation walking/running?
0001407C 6600 0000                  		bne.w	SAnim_RollJump	; if not, branch
00014080 7200                       		moveq	#0,d1
00014082 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
00014086 1428 0022                  		move.b	$22(a0),d2
0001408A 0202 0001                  		andi.b	#1,d2		; is Sonic mirrored horizontally?
0001408E 6600                       		bne.s	loc_13A70	; if yes, branch
00014090 4600                       		not.b	d0		; reverse angle
00014092                            
00014092                            loc_13A70:
00014092 0600 0010                  		addi.b	#$10,d0		; add $10 to angle
00014096 6A00                       		bpl.s	loc_13A78	; if angle is $0-$7F, branch
00014098 7203                       		moveq	#3,d1
0001409A                            
0001409A                            loc_13A78:
0001409A 0228 00FC 0001             		andi.b	#$FC,1(a0)
000140A0 B302                       		eor.b	d1,d2
000140A2 8528 0001                  		or.b	d2,1(a0)
000140A6 0828 0005 0022             		btst	#5,$22(a0)
000140AC 6600 0000                  		bne.w	SAnim_Push
000140B0 E808                       		lsr.b	#4,d0		; divide angle by $10
000140B2 0200 0006                  		andi.b	#6,d0		; angle	must be	0, 2, 4	or 6
000140B6 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
000140BA 6A00                       		bpl.s	loc_13A9C
000140BC 4442                       		neg.w	d2
000140BE                            
000140BE                            loc_13A9C:
000140BE 43F9 0000 0000             		lea	(SonAni_Run).l,a1 ; use	running	animation
000140C4 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic at running speed?
000140C8 6400                       		bcc.s	loc_13AB4	; if yes, branch
000140CA 43F9 0000 0000             		lea	(SonAni_Walk).l,a1 ; use walking animation
000140D0 1200                       		move.b	d0,d1
000140D2 E209                       		lsr.b	#1,d1
000140D4 D001                       		add.b	d1,d0
000140D6                            
000140D6                            loc_13AB4:
000140D6 D000                       		add.b	d0,d0
000140D8 1600                       		move.b	d0,d3
000140DA 4442                       		neg.w	d2
000140DC 0642 0800                  		addi.w	#$800,d2
000140E0 6A00                       		bpl.s	loc_13AC2
000140E2 7400                       		moveq	#0,d2
000140E4                            
000140E4                            loc_13AC2:
000140E4 E04A                       		lsr.w	#8,d2
000140E6 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
000140EA 6100 FF42                  		bsr.w	SAnim_Do2
000140EE D728 001A                  		add.b	d3,$1A(a0)	; modify frame number
000140F2 4E75                       		rts	
000140F4                            ; ===========================================================================
000140F4                            
000140F4                            SAnim_RollJump:				; XREF: SAnim_WalkRun
000140F4 5200                       		addq.b	#1,d0		; is animation rolling/jumping?
000140F6 6600                       		bne.s	SAnim_Push	; if not, branch
000140F8 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
000140FC 6A00                       		bpl.s	loc_13ADE
000140FE 4442                       		neg.w	d2
00014100                            
00014100                            loc_13ADE:
00014100 43F9 0000 0000             		lea	(SonAni_Roll2).l,a1 ; use fast animation
00014106 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic moving fast?
0001410A 6400                       		bcc.s	loc_13AF0	; if yes, branch
0001410C 43F9 0000 0000             		lea	(SonAni_Roll).l,a1 ; use slower	animation
00014112                            
00014112                            loc_13AF0:
00014112 4442                       		neg.w	d2
00014114 0642 0400                  		addi.w	#$400,d2
00014118 6A00                       		bpl.s	loc_13AFA
0001411A 7400                       		moveq	#0,d2
0001411C                            
0001411C                            loc_13AFA:
0001411C E04A                       		lsr.w	#8,d2
0001411E 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
00014122 1228 0022                  		move.b	$22(a0),d1
00014126 0201 0001                  		andi.b	#1,d1
0001412A 0228 00FC 0001             		andi.b	#$FC,1(a0)
00014130 8328 0001                  		or.b	d1,1(a0)
00014134 6000 FEF8                  		bra.w	SAnim_Do2
00014138                            ; ===========================================================================
00014138                            
00014138                            SAnim_Push:				; XREF: SAnim_RollJump
00014138 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
0001413C 6B00                       		bmi.s	loc_13B1E
0001413E 4442                       		neg.w	d2
00014140                            
00014140                            loc_13B1E:
00014140 0642 0800                  		addi.w	#$800,d2
00014144 6A00                       		bpl.s	loc_13B26
00014146 7400                       		moveq	#0,d2
00014148                            
00014148                            loc_13B26:
00014148 EC4A                       		lsr.w	#6,d2
0001414A 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
0001414E 43F9 0000 0000             		lea	(SonAni_Push).l,a1
00014154 1228 0022                  		move.b	$22(a0),d1
00014158 0201 0001                  		andi.b	#1,d1
0001415C 0228 00FC 0001             		andi.b	#$FC,1(a0)
00014162 8328 0001                  		or.b	d1,1(a0)
00014166 6000 FEC6                  		bra.w	SAnim_Do2
0001416A                            ; End of function Sonic_Animate
0001416A                            
0001416A                            ; ===========================================================================
0001416A                            SonicAniData:
0001416A                            	include "_anim\Sonic.asm"
0001416A                            ; ---------------------------------------------------------------------------
0001416A                            ; Animation script - Sonic
0001416A                            ; ---------------------------------------------------------------------------
0001416A 0000                       		dc.w SonAni_Walk-SonicAniData
0001416C 0000                       		dc.w SonAni_Run-SonicAniData
0001416E 0000                       		dc.w SonAni_Roll-SonicAniData
00014170 0000                       		dc.w SonAni_Roll2-SonicAniData
00014172 0000                       		dc.w SonAni_Push-SonicAniData
00014174 0000                       		dc.w SonAni_Wait-SonicAniData
00014176 0000                       		dc.w SonAni_Balance-SonicAniData
00014178 0000                       		dc.w SonAni_LookUp-SonicAniData
0001417A 0000                       		dc.w SonAni_Duck-SonicAniData
0001417C 0000                       		dc.w SonAni_Warp1-SonicAniData
0001417E 0000                       		dc.w SonAni_Warp2-SonicAniData
00014180 0000                       		dc.w SonAni_Warp3-SonicAniData
00014182 0000                       		dc.w SonAni_Warp4-SonicAniData
00014184 0000                       		dc.w SonAni_Stop-SonicAniData
00014186 0000                       		dc.w SonAni_Float1-SonicAniData
00014188 0000                       		dc.w SonAni_Float2-SonicAniData
0001418A 0000                       		dc.w SonAni_Spring-SonicAniData
0001418C 0000                       		dc.w SonAni_LZHang-SonicAniData
0001418E 0000                       		dc.w SonAni_Leap1-SonicAniData
00014190 0000                       		dc.w SonAni_Leap2-SonicAniData
00014192 0000                       		dc.w SonAni_Surf-SonicAniData
00014194 0000                       		dc.w SonAni_Bubble-SonicAniData
00014196 0000                       		dc.w SonAni_Death1-SonicAniData
00014198 0000                       		dc.w SonAni_Drown-SonicAniData
0001419A 0000                       		dc.w SonAni_Death2-SonicAniData
0001419C 0000                       		dc.w SonAni_Shrink-SonicAniData
0001419E 0000                       		dc.w SonAni_Hurt-SonicAniData
000141A0 0000                       		dc.w SonAni_LZSlide-SonicAniData
000141A2 0000                       		dc.w SonAni_Blank-SonicAniData
000141A4 0000                       		dc.w SonAni_Float3-SonicAniData
000141A6 0000                       		dc.w SonAni_Float4-SonicAniData
000141A8 FF08 095A 0A0B 0659 07FF   SonAni_Walk:	dc.b $FF, 8, 9, $5A, $A, $B, 6, $59, 7, $FF
000141B2 FF1E 1F20 21FF FFFF        SonAni_Run:	dc.b $FF, $1E, $1F, $20, $21, $FF, $FF,	$FF
000141BA FE2E 2F30 3132 FFFF        SonAni_Roll:	dc.b $FE, $2E, $2F, $30, $31, $32, $FF,	$FF
000141C2 FE2E 2F32 3031 32FF        SonAni_Roll2:	dc.b $FE, $2E, $2F, $32, $30, $31, $32,	$FF
000141CA FD45 4647 48FF FFFF        SonAni_Push:	dc.b $FD, $45, $46, $47, $48, $FF, $FF,	$FF
000141D2 1701 0101 0101 0101 0101+  SonAni_Wait:	dc.b $17, 1, 1,	1, 1, 1, 1, 1, 1, 1, 1,	1, 1, 3, 2, 2, 2, 3, 4, $FE, 2, 0
000141E8 1E3A 3BFF                  SonAni_Balance:	dc.b $1E, $3A, $3B, $FF
000141EC 3F05 FF00                  SonAni_LookUp:	dc.b $3F, 5, $FF, 0
000141F0 3F39 FF00                  SonAni_Duck:	dc.b $3F, $39, $FF, 0
000141F4 3F33 FF00                  SonAni_Warp1:	dc.b $3F, $33, $FF, 0
000141F8 3F34 FF00                  SonAni_Warp2:	dc.b $3F, $34, $FF, 0
000141FC 3F35 FF00                  SonAni_Warp3:	dc.b $3F, $35, $FF, 0
00014200 3F36 FF00                  SonAni_Warp4:	dc.b $3F, $36, $FF, 0
00014204 0737 38FF                  SonAni_Stop:	dc.b 7,	$37, $38, $FF
00014208 073C 3FFF                  SonAni_Float1:	dc.b 7,	$3C, $3F, $FF
0001420C 073C 3D53 3E54 FF00        SonAni_Float2:	dc.b 7,	$3C, $3D, $53, $3E, $54, $FF, 0
00014214 2F40 FD00                  SonAni_Spring:	dc.b $2F, $40, $FD, 0
00014218 0441 42FF                  SonAni_LZHang:	dc.b 4,	$41, $42, $FF
0001421C 0F43 4343 FE01             SonAni_Leap1:	dc.b $F, $43, $43, $43,	$FE, 1
00014222 0F43 44FE 0100             SonAni_Leap2:	dc.b $F, $43, $44, $FE,	1, 0
00014228 3F49 FF00                  SonAni_Surf:	dc.b $3F, $49, $FF, 0
0001422C 0B56 560A 0BFD 0000        SonAni_Bubble:	dc.b $B, $56, $56, $A, $B, $FD,	0, 0
00014234 204B FF00                  SonAni_Death1:	dc.b $20, $4B, $FF, 0
00014238 2F4C FF00                  SonAni_Drown:	dc.b $2F, $4C, $FF, 0
0001423C 034D FF00                  SonAni_Death2:	dc.b 3,	$4D, $FF, 0
00014240 034E 4F50 5152 00FE 0100   SonAni_Shrink:	dc.b 3,	$4E, $4F, $50, $51, $52, 0, $FE, 1, 0
0001424A 035B FF00                  SonAni_Hurt:	dc.b 3,	$5B, $FF, 0
0001424E 0755 57FF                  SonAni_LZSlide:	dc.b 7, $55, $57, $FF
00014252 7700 FD00                  SonAni_Blank:	dc.b $77, 0, $FD, 0
00014256 033C 3D53 3E54 FF00        SonAni_Float3:	dc.b 3,	$3C, $3D, $53, $3E, $54, $FF, 0
0001425E 033C FD00                  SonAni_Float4:	dc.b 3,	$3C, $FD, 0
00014262                            		even
00014262                            		even
00014262                            
00014262                            ; ---------------------------------------------------------------------------
00014262                            ; Sonic	pattern	loading	subroutine
00014262                            ; ---------------------------------------------------------------------------
00014262                            
00014262                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014262                            
00014262                            
00014262                            LoadSonicDynPLC:			; XREF: Obj01_Control; et al
00014262 7000                       		moveq	#0,d0
00014264 1028 001A                  		move.b	$1A(a0),d0	; load frame number
00014268 B038 F766                  		cmp.b	($FFFFF766).w,d0
0001426C 6700                       		beq.s	locret_13C96
0001426E 11C0 F766                  		move.b	d0,($FFFFF766).w
00014272 45F9 0000 0000             		lea	(SonicDynPLC).l,a2
00014278 D040                       		add.w	d0,d0
0001427A D4F2 0000                  		adda.w	(a2,d0.w),a2
0001427E 7200                       		moveq	#0,d1
00014280 121A                       		move.b	(a2)+,d1	; read "number of entries" value
00014282 5301                       		subq.b	#1,d1
00014284 6B00                       		bmi.s	locret_13C96
00014286 47F8 C800                  		lea	($FFFFC800).w,a3
0001428A 11FC 0001 F767             		move.b	#1,($FFFFF767).w
00014290                            
00014290                            SPLC_ReadEntry:
00014290 7400                       		moveq	#0,d2
00014292 141A                       		move.b	(a2)+,d2
00014294 3002                       		move.w	d2,d0
00014296 E808                       		lsr.b	#4,d0
00014298 E14A                       		lsl.w	#8,d2
0001429A 141A                       		move.b	(a2)+,d2
0001429C EB4A                       		lsl.w	#5,d2
0001429E 43F9 0000 0000             		lea	(Art_Sonic).l,a1
000142A4 D3C2                       		adda.l	d2,a1
000142A6                            
000142A6                            SPLC_LoadTile:
000142A6 4CD9 707C                  		movem.l	(a1)+,d2-d6/a4-a6
000142AA 48D3 707C                  		movem.l	d2-d6/a4-a6,(a3)
000142AE 47EB 0020                  		lea	$20(a3),a3	; next tile
000142B2 51C8 FFF2                  		dbf	d0,SPLC_LoadTile ; repeat for number of	tiles
000142B6                            
000142B6 51C9 FFD8                  		dbf	d1,SPLC_ReadEntry ; repeat for number of entries
000142BA                            
000142BA                            locret_13C96:
000142BA 4E75                       		rts	
000142BC                            ; End of function LoadSonicDynPLC
000142BC                            
000142BC                            ; ===========================================================================
000142BC                            ; ---------------------------------------------------------------------------
000142BC                            ; Object 0A - drowning countdown numbers and small bubbles (LZ)
000142BC                            ; ---------------------------------------------------------------------------
000142BC                            
000142BC                            Obj0A:					; XREF: Obj_Index
000142BC 7000                       		moveq	#0,d0
000142BE 1028 0024                  		move.b	$24(a0),d0
000142C2 323B 0000                  		move.w	Obj0A_Index(pc,d0.w),d1
000142C6 4EFB 1000                  		jmp	Obj0A_Index(pc,d1.w)
000142CA                            ; ===========================================================================
000142CA 0000 0000                  Obj0A_Index:	dc.w Obj0A_Main-Obj0A_Index, Obj0A_Animate-Obj0A_Index
000142CE 0000 0000                  		dc.w Obj0A_ChkWater-Obj0A_Index, Obj0A_Display-Obj0A_Index
000142D2 0000 0000                  		dc.w Obj0A_Delete2-Obj0A_Index,	Obj0A_Countdown-Obj0A_Index
000142D6 0000 0000                  		dc.w Obj0A_AirLeft-Obj0A_Index,	Obj0A_Display-Obj0A_Index
000142DA 0000                       		dc.w Obj0A_Delete2-Obj0A_Index
000142DC                            ; ===========================================================================
000142DC                            
000142DC                            Obj0A_Main:				; XREF: Obj0A_Index
000142DC 5428 0024                  		addq.b	#2,$24(a0)
000142E0 217C 0001 2F3A 0004        		move.l	#Map_obj64,4(a0)
000142E8 317C 8348 0002             		move.w	#$8348,2(a0)
000142EE 117C 0084 0001             		move.b	#$84,1(a0)
000142F4 117C 0010 0019             		move.b	#$10,$19(a0)
000142FA 117C 0001 0018             		move.b	#1,$18(a0)
00014300 1028 0028                  		move.b	$28(a0),d0
00014304 6A00                       		bpl.s	loc_13D00
00014306 5028 0024                  		addq.b	#8,$24(a0)
0001430A 217C 0000 0000 0004        		move.l	#Map_obj0A,4(a0)
00014312 317C 0440 0002             		move.w	#$440,2(a0)
00014318 0240 007F                  		andi.w	#$7F,d0
0001431C 1140 0033                  		move.b	d0,$33(a0)
00014320 6000 0000                  		bra.w	Obj0A_Countdown
00014324                            ; ===========================================================================
00014324                            
00014324                            loc_13D00:
00014324 1140 001C                  		move.b	d0,$1C(a0)
00014328 3168 0008 0030             		move.w	8(a0),$30(a0)
0001432E 317C FF78 0012             		move.w	#-$88,$12(a0)
00014334                            
00014334                            Obj0A_Animate:				; XREF: Obj0A_Index
00014334 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
0001433A 4EB9 0000 AC42             		jsr	AnimateSprite
00014340                            
00014340                            Obj0A_ChkWater:				; XREF: Obj0A_Index
00014340 3038 F646                  		move.w	($FFFFF646).w,d0
00014344 B068 000C                  		cmp.w	$C(a0),d0	; has bubble reached the water surface?
00014348 6500                       		bcs.s	Obj0A_Wobble	; if not, branch
0001434A 117C 0006 0024             		move.b	#6,$24(a0)
00014350 5E28 001C                  		addq.b	#7,$1C(a0)
00014354 0C28 000D 001C             		cmpi.b	#$D,$1C(a0)
0001435A 6700                       		beq.s	Obj0A_Display
0001435C 6000                       		bra.s	Obj0A_Display
0001435E                            ; ===========================================================================
0001435E                            
0001435E                            Obj0A_Wobble:
0001435E 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00014362 6700                       		beq.s	loc_13D44
00014364 5868 0030                  		addq.w	#4,$30(a0)
00014368                            
00014368                            loc_13D44:
00014368 1028 0026                  		move.b	$26(a0),d0
0001436C 5228 0026                  		addq.b	#1,$26(a0)
00014370 0240 007F                  		andi.w	#$7F,d0
00014374 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
0001437A 1031 0000                  		move.b	(a1,d0.w),d0
0001437E 4880                       		ext.w	d0
00014380 D068 0030                  		add.w	$30(a0),d0
00014384 3140 0008                  		move.w	d0,8(a0)
00014388 6100                       		bsr.s	Obj0A_ShowNumber
0001438A 4EBA 97F6                  		jsr	SpeedToPos
0001438E 4A28 0001                  		tst.b	1(a0)
00014392 6A00                       		bpl.s	Obj0A_Delete
00014394 4EFA 9812                  		jmp	DisplaySprite
00014398                            ; ===========================================================================
00014398                            
00014398                            Obj0A_Delete:
00014398 4EFA 984A                  		jmp	DeleteObject
0001439C                            ; ===========================================================================
0001439C                            
0001439C                            Obj0A_Display:				; XREF: Obj0A_Index
0001439C 6100                       		bsr.s	Obj0A_ShowNumber
0001439E 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
000143A4 4EB9 0000 AC42             		jsr	AnimateSprite
000143AA 4EFA 97FC                  		jmp	DisplaySprite
000143AE                            ; ===========================================================================
000143AE                            
000143AE                            Obj0A_Delete2:				; XREF: Obj0A_Index
000143AE 4EFA 9834                  		jmp	DeleteObject
000143B2                            ; ===========================================================================
000143B2                            
000143B2                            Obj0A_AirLeft:				; XREF: Obj0A_Index
000143B2 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w ; check air remaining
000143B8 6200                       		bhi.s	Obj0A_Delete3	; if higher than $C, branch
000143BA 5368 0038                  		subq.w	#1,$38(a0)
000143BE 6600                       		bne.s	Obj0A_Display2
000143C0 117C 000E 0024             		move.b	#$E,$24(a0)
000143C6 5E28 001C                  		addq.b	#7,$1C(a0)
000143CA 60D0                       		bra.s	Obj0A_Display
000143CC                            ; ===========================================================================
000143CC                            
000143CC                            Obj0A_Display2:
000143CC 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
000143D2 4EB9 0000 AC42             		jsr	AnimateSprite
000143D8 4A28 0001                  		tst.b	1(a0)
000143DC 6A00                       		bpl.s	Obj0A_Delete3
000143DE 4EFA 97C8                  		jmp	DisplaySprite
000143E2                            ; ===========================================================================
000143E2                            
000143E2                            Obj0A_Delete3:
000143E2 4EFA 9800                  		jmp	DeleteObject
000143E6                            ; ===========================================================================
000143E6                            
000143E6                            Obj0A_ShowNumber:			; XREF: Obj0A_Wobble; Obj0A_Display
000143E6 4A68 0038                  		tst.w	$38(a0)
000143EA 6700                       		beq.s	locret_13E1A
000143EC 5368 0038                  		subq.w	#1,$38(a0)
000143F0 6600                       		bne.s	locret_13E1A
000143F2 0C28 0007 001C             		cmpi.b	#7,$1C(a0)
000143F8 6400                       		bcc.s	locret_13E1A
000143FA 317C 000F 0038             		move.w	#$F,$38(a0)
00014400 4268 0012                  		clr.w	$12(a0)
00014404 117C 0080 0001             		move.b	#$80,1(a0)
0001440A 3028 0008                  		move.w	8(a0),d0
0001440E 9078 F700                  		sub.w	($FFFFF700).w,d0
00014412 0640 0080                  		addi.w	#$80,d0
00014416 3140 0008                  		move.w	d0,8(a0)
0001441A 3028 000C                  		move.w	$C(a0),d0
0001441E 9078 F704                  		sub.w	($FFFFF704).w,d0
00014422 0640 0080                  		addi.w	#$80,d0
00014426 3140 000A                  		move.w	d0,$A(a0)
0001442A 117C 000C 0024             		move.b	#$C,$24(a0)
00014430                            
00014430                            locret_13E1A:
00014430 4E75                       		rts	
00014432                            ; ===========================================================================
00014432                            Obj0A_WobbleData:
00014432 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 2
00014443 0203 0303 0303 0303 0303+  		dc.b 2,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 3, 3, 4, 3
00014454 0303 0303 0303 0303 0303+  		dc.b 3,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 2, 2, 2, 2
00014465 0202 0201 0101 0101 0000+  		dc.b 2,	2, 2, 1, 1, 1, 1, 1, 0,	0, 0, 0, 0, 0, -1, -1
00014475 FFFF FFFE FEFE FEFE FDFD+  		dc.b -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
00014482 FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
0001448F FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
0001449C FCFC FCFC FCFD FDFD FDFD+  		dc.b -4, -4, -4, -4, -4, -3, -3, -3, -3, -3, -3, -3, -2
000144A9 FEFE FEFE FFFF FFFF FF     		dc.b -2, -2, -2, -2, -1, -1, -1, -1, -1
000144B2                            ; ===========================================================================
000144B2                            
000144B2                            Obj0A_Countdown:			; XREF: Obj0A_Index
000144B2 4A68 002C                  		tst.w	$2C(a0)
000144B6 6600 0000                  		bne.w	loc_13F86
000144BA 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000144C0 6400 0000                  		bcc.w	locret_1408C
000144C4 0838 0006 D022             		btst	#6,($FFFFD022).w
000144CA 6700 0000                  		beq.w	locret_1408C
000144CE 5368 0038                  		subq.w	#1,$38(a0)
000144D2 6A00 0000                  		bpl.w	loc_13FAC
000144D6 317C 003B 0038             		move.w	#59,$38(a0)
000144DC 317C 0001 0036             		move.w	#1,$36(a0)
000144E2 4EB9 0000 2BFC             		jsr	(RandomNumber).l
000144E8 0240 0001                  		andi.w	#1,d0
000144EC 1140 0034                  		move.b	d0,$34(a0)
000144F0 3038 FE14                  		move.w	($FFFFFE14).w,d0 ; check air remaining
000144F4 0C40 0019                  		cmpi.w	#$19,d0
000144F8 6700                       		beq.s	Obj0A_WarnSound	; play sound if	air is $19
000144FA 0C40 0014                  		cmpi.w	#$14,d0
000144FE 6700                       		beq.s	Obj0A_WarnSound
00014500 0C40 000F                  		cmpi.w	#$F,d0
00014504 6700                       		beq.s	Obj0A_WarnSound
00014506 0C40 000C                  		cmpi.w	#$C,d0
0001450A 6200                       		bhi.s	Obj0A_ReduceAir	; if air is above $C, branch
0001450C 6600                       		bne.s	loc_13F02
0001450E 303C 0092                  		move.w	#$92,d0
00014512 4EB9 0000 15B6             		jsr	(PlaySound).l	; play countdown music
00014518                            
00014518                            loc_13F02:
00014518 5328 0032                  		subq.b	#1,$32(a0)
0001451C 6A00                       		bpl.s	Obj0A_ReduceAir
0001451E 1168 0033 0032             		move.b	$33(a0),$32(a0)
00014524 08E8 0007 0036             		bset	#7,$36(a0)
0001452A 6000                       		bra.s	Obj0A_ReduceAir
0001452C                            ; ===========================================================================
0001452C                            
0001452C                            Obj0A_WarnSound:			; XREF: Obj0A_Countdown
0001452C 303C 00C2                  		move.w	#$C2,d0
00014530 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play "ding-ding" warning sound
00014536                            
00014536                            Obj0A_ReduceAir:
00014536 5378 FE14                  		subq.w	#1,($FFFFFE14).w ; subtract 1 from air remaining
0001453A 6400 0000                  		bcc.w	Obj0A_GoMakeItem ; if air is above 0, branch
0001453E 6100 0000                  		bsr.w	ResumeMusic
00014542 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
00014548 303C 00B2                  		move.w	#$B2,d0
0001454C 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play drowning sound
00014552 117C 000A 0034             		move.b	#$A,$34(a0)
00014558 317C 0001 0036             		move.w	#1,$36(a0)
0001455E 317C 0078 002C             		move.w	#$78,$2C(a0)
00014564 2F08                       		move.l	a0,-(sp)
00014566 41F8 D000                  		lea	($FFFFD000).w,a0
0001456A 6100 F85E                  		bsr.w	Sonic_ResetOnFloor
0001456E 117C 0017 001C             		move.b	#$17,$1C(a0)	; use Sonic's drowning animation
00014574 08E8 0001 0022             		bset	#1,$22(a0)
0001457A 08E8 0007 0002             		bset	#7,2(a0)
00014580 317C 0000 0012             		move.w	#0,$12(a0)
00014586 317C 0000 0010             		move.w	#0,$10(a0)
0001458C 317C 0000 0014             		move.w	#0,$14(a0)
00014592 11FC 0001 F744             		move.b	#1,($FFFFF744).w
00014598 205F                       		movea.l	(sp)+,a0
0001459A 4E75                       		rts	
0001459C                            ; ===========================================================================
0001459C                            
0001459C                            loc_13F86:
0001459C 5368 002C                  		subq.w	#1,$2C(a0)
000145A0 6600                       		bne.s	loc_13F94
000145A2 11FC 0006 D024             		move.b	#6,($FFFFD024).w
000145A8 4E75                       		rts	
000145AA                            ; ===========================================================================
000145AA                            
000145AA                            loc_13F94:
000145AA 2F08                       		move.l	a0,-(sp)
000145AC 41F8 D000                  		lea	($FFFFD000).w,a0
000145B0 4EBA 95D0                  		jsr	SpeedToPos
000145B4 0668 0010 0012             		addi.w	#$10,$12(a0)
000145BA 205F                       		movea.l	(sp)+,a0
000145BC 6000                       		bra.s	loc_13FAC
000145BE                            ; ===========================================================================
000145BE                            
000145BE                            Obj0A_GoMakeItem:			; XREF: Obj0A_ReduceAir
000145BE 6000                       		bra.s	Obj0A_MakeItem
000145C0                            ; ===========================================================================
000145C0                            
000145C0                            loc_13FAC:
000145C0 4A68 0036                  		tst.w	$36(a0)
000145C4 6700 0000                  		beq.w	locret_1408C
000145C8 5368 003A                  		subq.w	#1,$3A(a0)
000145CC 6A00 0000                  		bpl.w	locret_1408C
000145D0                            
000145D0                            Obj0A_MakeItem:
000145D0 4EB9 0000 2BFC             		jsr	(RandomNumber).l
000145D6 0240 000F                  		andi.w	#$F,d0
000145DA 3140 003A                  		move.w	d0,$3A(a0)
000145DE 4EBA 9A4E                  		jsr	SingleObjLoad
000145E2 6600 0000                  		bne.w	locret_1408C
000145E6 12BC 000A                  		move.b	#$A,0(a1)	; load object
000145EA 3378 D008 0008             		move.w	($FFFFD008).w,8(a1) ; match X position to Sonic
000145F0 7006                       		moveq	#6,d0
000145F2 0838 0000 D022             		btst	#0,($FFFFD022).w
000145F8 6700                       		beq.s	loc_13FF2
000145FA 4440                       		neg.w	d0
000145FC 137C 0040 0026             		move.b	#$40,$26(a1)
00014602                            
00014602                            loc_13FF2:
00014602 D169 0008                  		add.w	d0,8(a1)
00014606 3378 D00C 000C             		move.w	($FFFFD00C).w,$C(a1)
0001460C 137C 0006 0028             		move.b	#6,$28(a1)
00014612 4A68 002C                  		tst.w	$2C(a0)
00014616 6700 0000                  		beq.w	loc_1403E
0001461A 0268 0007 003A             		andi.w	#7,$3A(a0)
00014620 0668 0000 003A             		addi.w	#0,$3A(a0)
00014626 3038 D00C                  		move.w	($FFFFD00C).w,d0
0001462A 0440 000C                  		subi.w	#$C,d0
0001462E 3340 000C                  		move.w	d0,$C(a1)
00014632 4EB9 0000 2BFC             		jsr	(RandomNumber).l
00014638 1340 0026                  		move.b	d0,$26(a1)
0001463C 3038 FE04                  		move.w	($FFFFFE04).w,d0
00014640 0200 0003                  		andi.b	#3,d0
00014644 6600                       		bne.s	loc_14082
00014646 137C 000E 0028             		move.b	#$E,$28(a1)
0001464C 6000                       		bra.s	loc_14082
0001464E                            ; ===========================================================================
0001464E                            
0001464E                            loc_1403E:
0001464E 0828 0007 0036             		btst	#7,$36(a0)
00014654 6700                       		beq.s	loc_14082
00014656 3438 FE14                  		move.w	($FFFFFE14).w,d2
0001465A E24A                       		lsr.w	#1,d2
0001465C 4EB9 0000 2BFC             		jsr	(RandomNumber).l
00014662 0240 0003                  		andi.w	#3,d0
00014666 6600                       		bne.s	loc_1406A
00014668 08E8 0006 0036             		bset	#6,$36(a0)
0001466E 6600                       		bne.s	loc_14082
00014670 1342 0028                  		move.b	d2,$28(a1)
00014674 337C 001C 0038             		move.w	#$1C,$38(a1)
0001467A                            
0001467A                            loc_1406A:
0001467A 4A28 0034                  		tst.b	$34(a0)
0001467E 6600                       		bne.s	loc_14082
00014680 08E8 0006 0036             		bset	#6,$36(a0)
00014686 6600                       		bne.s	loc_14082
00014688 1342 0028                  		move.b	d2,$28(a1)
0001468C 337C 001C 0038             		move.w	#$1C,$38(a1)
00014692                            
00014692                            loc_14082:
00014692 5328 0034                  		subq.b	#1,$34(a0)
00014696 6A00                       		bpl.s	locret_1408C
00014698 4268 0036                  		clr.w	$36(a0)
0001469C                            
0001469C                            locret_1408C:
0001469C 4E75                       		rts	
0001469E                            
0001469E                            ; ---------------------------------------------------------------------------
0001469E                            ; Subroutine to	play music for LZ/SBZ3 after a countdown
0001469E                            ; ---------------------------------------------------------------------------
0001469E                            
0001469E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001469E                            
0001469E                            
0001469E                            ResumeMusic:				; XREF: Obj64_Wobble; Sonic_Water; Obj0A_ReduceAir
0001469E 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
000146A4                             
000146A4                            ; Third section of the NineKode - Play correct music after the countdown (if you breathe)
000146A4                             
000146A4 6200 0000                  		bhi.w	loc_140AC	; change to bhi.w!
000146A8                             
000146A8 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
000146AE 6600                       		bne.s	Air_GetBgm2	; if not, branch
000146B0 43F9 0000 3AAC             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
000146B6 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
000146B8                             
000146B8                            Air_GetBgm2:
000146B8 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
000146BE 6600                       		bne.s	Air_GetBgm3	; if not, branch
000146C0 43F9 0000 3AB4             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
000146C6 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
000146C8                             
000146C8                            Air_GetBgm3:
000146C8 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
000146CE 6600                       		bne.s	Air_GetBgm4	; if not, branch
000146D0 43F9 0000 3ABA             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 39
000146D6 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
000146D8                             
000146D8                            Air_GetBgm4:
000146D8 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
000146DE 6600                       		bne.s	Air_PlayMusic	; if not, branch
000146E0 43F9 0000 3AC0             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
000146E6                             
000146E6                            Air_PlayMusic:
000146E6 1029 0001                  		move.b	1(a1),d0	; load entry $1 from the playlist
000146EA                             
000146EA                            loc_140A6:
000146EA 4EB9 0000 15B6             		jsr	(PlaySound).l
000146F0                             
000146F0                            ; NineKode ends here
000146F0                            
000146F0                            loc_140AC:
000146F0 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
000146F6 4238 D372                  		clr.b	($FFFFD372).w
000146FA 4E75                       		rts	
000146FC                            ; End of function ResumeMusic
000146FC                            
000146FC                            ; ===========================================================================
000146FC                            Ani_obj0A:
000146FC                            	include "_anim\obj0A.asm"
000146FC                            ; ---------------------------------------------------------------------------
000146FC                            ; Animation script - countdown numbers and bubbles (LZ)
000146FC                            ; ---------------------------------------------------------------------------
000146FC 0000                       		dc.w byte_140D6-Ani_obj0A
000146FE 0000                       		dc.w byte_140E0-Ani_obj0A
00014700 0000                       		dc.w byte_140EA-Ani_obj0A
00014702 0000                       		dc.w byte_140F4-Ani_obj0A
00014704 0000                       		dc.w byte_140FE-Ani_obj0A
00014706 0000                       		dc.w byte_14108-Ani_obj0A
00014708 0000                       		dc.w byte_14112-Ani_obj0A
0001470A 0000                       		dc.w byte_14118-Ani_obj0A
0001470C 0000                       		dc.w byte_14120-Ani_obj0A
0001470E 0000                       		dc.w byte_14128-Ani_obj0A
00014710 0000                       		dc.w byte_14130-Ani_obj0A
00014712 0000                       		dc.w byte_14138-Ani_obj0A
00014714 0000                       		dc.w byte_14140-Ani_obj0A
00014716 0000                       		dc.w byte_14148-Ani_obj0A
00014718 0000                       		dc.w byte_1414A-Ani_obj0A
0001471A 0500 0102 0304 090D FC00   byte_140D6:	dc.b 5,	0, 1, 2, 3, 4, 9, $D, $FC, 0
00014724 0500 0102 0304 0C12 FC00   byte_140E0:	dc.b 5,	0, 1, 2, 3, 4, $C, $12,	$FC, 0
0001472E 0500 0102 0304 0C11 FC00   byte_140EA:	dc.b 5,	0, 1, 2, 3, 4, $C, $11,	$FC, 0
00014738 0500 0102 0304 0B10 FC00   byte_140F4:	dc.b 5,	0, 1, 2, 3, 4, $B, $10,	$FC, 0
00014742 0500 0102 0304 090F FC00   byte_140FE:	dc.b 5,	0, 1, 2, 3, 4, 9, $F, $FC, 0
0001474C 0500 0102 0304 0A0E FC00   byte_14108:	dc.b 5,	0, 1, 2, 3, 4, $A, $E, $FC, 0
00014756 0E00 0102 FC00             byte_14112:	dc.b $E, 0, 1, 2, $FC, 0
0001475C 0716 0D16 0D16 0DFC        byte_14118:	dc.b 7,	$16, $D, $16, $D, $16, $D, $FC
00014764 0716 1216 1216 12FC        byte_14120:	dc.b 7,	$16, $12, $16, $12, $16, $12, $FC
0001476C 0716 1116 1116 11FC        byte_14128:	dc.b 7,	$16, $11, $16, $11, $16, $11, $FC
00014774 0716 1016 1016 10FC        byte_14130:	dc.b 7,	$16, $10, $16, $10, $16, $10, $FC
0001477C 0716 0F16 0F16 0FFC        byte_14138:	dc.b 7,	$16, $F, $16, $F, $16, $F, $FC
00014784 0716 0E16 0E16 0EFC        byte_14140:	dc.b 7,	$16, $E, $16, $E, $16, $E, $FC
0001478C 0EFC                       byte_14148:	dc.b $E, $FC
0001478E 0E01 0203 04FC             byte_1414A:	dc.b $E, 1, 2, 3, 4, $FC
00014794                            		even
00014794                            		even
00014794                            
00014794                            ; ---------------------------------------------------------------------------
00014794                            ; Sprite mappings - drowning countdown numbers (LZ)
00014794                            ; ---------------------------------------------------------------------------
00014794                            Map_obj0A:
00014794                            	include "_maps\obj0A.asm"
00014794                            ; ---------------------------------------------------------------------------
00014794                            ; Sprite mappings - drowning countdown numbers (LZ)
00014794                            ; ---------------------------------------------------------------------------
00014794 0000                       		dc.w byte_14152-Map_obj0A
00014796 01                         byte_14152:	dc.b 1
00014797 E80E 0000 F2               		dc.b $E8, $E, 0, 0, $F2
0001479C                            		even
0001479C                            		even
0001479C                            
0001479C                            ; ===========================================================================
0001479C                            ; ---------------------------------------------------------------------------
0001479C                            ; Object 38 - shield and invincibility stars
0001479C                            ; ---------------------------------------------------------------------------
0001479C                            
0001479C                            Obj38:					; XREF: Obj_Index
0001479C 7000                       		moveq	#0,d0
0001479E 1028 0024                  		move.b	$24(a0),d0
000147A2 323B 0000                  		move.w	Obj38_Index(pc,d0.w),d1
000147A6 4EFB 1000                  		jmp	Obj38_Index(pc,d1.w)
000147AA                            ; ===========================================================================
000147AA 0000                       Obj38_Index:	dc.w Obj38_Main-Obj38_Index
000147AC 0000                       		dc.w Obj38_Shield-Obj38_Index
000147AE 0000                       		dc.w Obj38_Stars-Obj38_Index
000147B0                            ; ===========================================================================
000147B0                            
000147B0                            Obj38_Main:				; XREF: Obj38_Index
000147B0 5428 0024                  		addq.b	#2,$24(a0)
000147B4 217C 0000 0000 0004        		move.l	#Map_obj38,4(a0)
000147BC 117C 0004 0001             		move.b	#4,1(a0)
000147C2 117C 0001 0018             		move.b	#1,$18(a0)
000147C8 117C 0010 0019             		move.b	#$10,$19(a0)
000147CE 4A28 001C                  		tst.b	$1C(a0)		; is object a shield?
000147D2 6600                       		bne.s	Obj38_DoStars	; if not, branch
000147D4 317C 0541 0002             		move.w	#$541,2(a0)	; shield specific code
000147DA 4E75                       		rts	
000147DC                            ; ===========================================================================
000147DC                            
000147DC                            Obj38_DoStars:
000147DC 5428 0024                  		addq.b	#2,$24(a0)	; stars	specific code
000147E0 317C 055C 0002             		move.w	#$55C,2(a0)
000147E6 4E75                       		rts	
000147E8                            ; ===========================================================================
000147E8                            
000147E8                            Obj38_Shield:				; XREF: Obj38_Index
000147E8 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
000147EC 6600                       		bne.s	Obj38_RmvShield	; if yes, branch
000147EE 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have shield?
000147F2 6700                       		beq.s	Obj38_Delete	; if not, branch
000147F4 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
000147FA 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
00014800 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00014806 43F9 0000 0000             		lea	(Ani_obj38).l,a1
0001480C 4EB9 0000 AC42             		jsr	AnimateSprite
00014812 4EFA 9394                  		jmp	DisplaySprite
00014816                            ; ===========================================================================
00014816                            
00014816                            Obj38_RmvShield:
00014816 4E75                       		rts	
00014818                            ; ===========================================================================
00014818                            
00014818                            Obj38_Delete:
00014818 4EFA 93CA                  		jmp	DeleteObject
0001481C                            ; ===========================================================================
0001481C                            
0001481C                            Obj38_Stars:				; XREF: Obj38_Index
0001481C 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00014820 6700                       		beq.s	Obj38_Delete2	; if not, branch
00014822 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00014826 1228 001C                  		move.b	$1C(a0),d1
0001482A 5301                       		subq.b	#1,d1
0001482C 6000                       		bra.s	Obj38_StarTrail
0001482E                            ; ===========================================================================
0001482E E909                       		lsl.b	#4,d1
00014830 5801                       		addq.b	#4,d1
00014832 9001                       		sub.b	d1,d0
00014834 1228 0030                  		move.b	$30(a0),d1
00014838 9001                       		sub.b	d1,d0
0001483A 5801                       		addq.b	#4,d1
0001483C 0201 000F                  		andi.b	#$F,d1
00014840 1141 0030                  		move.b	d1,$30(a0)
00014844 6000                       		bra.s	Obj38_StarTrail2a
00014846                            ; ===========================================================================
00014846                            
00014846                            Obj38_StarTrail:			; XREF: Obj38_Stars
00014846 E709                       		lsl.b	#3,d1
00014848 1401                       		move.b	d1,d2
0001484A D201                       		add.b	d1,d1
0001484C D202                       		add.b	d2,d1
0001484E 5801                       		addq.b	#4,d1
00014850 9001                       		sub.b	d1,d0
00014852 1228 0030                  		move.b	$30(a0),d1
00014856 9001                       		sub.b	d1,d0
00014858 5801                       		addq.b	#4,d1
0001485A 0C01 0018                  		cmpi.b	#$18,d1
0001485E 6500                       		bcs.s	Obj38_StarTrail2
00014860 7200                       		moveq	#0,d1
00014862                            
00014862                            Obj38_StarTrail2:
00014862 1141 0030                  		move.b	d1,$30(a0)
00014866                            
00014866                            Obj38_StarTrail2a:
00014866 43F8 CB00                  		lea	($FFFFCB00).w,a1
0001486A 43F1 0000                  		lea	(a1,d0.w),a1
0001486E 3159 0008                  		move.w	(a1)+,8(a0)
00014872 3159 000C                  		move.w	(a1)+,$C(a0)
00014876 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
0001487C 43F9 0000 0000             		lea	(Ani_obj38).l,a1
00014882 4EB9 0000 AC42             		jsr	AnimateSprite
00014888 4EFA 931E                  		jmp	DisplaySprite
0001488C                            ; ===========================================================================
0001488C                            
0001488C                            Obj38_Delete2:				; XREF: Obj38_Stars
0001488C 4EFA 9356                  		jmp	DeleteObject
00014890                            ; ===========================================================================
00014890                            ; ---------------------------------------------------------------------------
00014890                            ; Object 4A - special stage entry from beta
00014890                            ; ---------------------------------------------------------------------------
00014890                            
00014890                            Obj4A:					; XREF: Obj_Index
00014890 7000                       		moveq	#0,d0
00014892 1028 0024                  		move.b	$24(a0),d0
00014896 323B 0000                  		move.w	Obj4A_Index(pc,d0.w),d1
0001489A 4EFB 1000                  		jmp	Obj4A_Index(pc,d1.w)
0001489E                            ; ===========================================================================
0001489E 0000                       Obj4A_Index:	dc.w Obj4A_Main-Obj4A_Index
000148A0 0000                       		dc.w Obj4A_RmvSonic-Obj4A_Index
000148A2 0000                       		dc.w Obj4A_LoadSonic-Obj4A_Index
000148A4                            ; ===========================================================================
000148A4                            
000148A4                            Obj4A_Main:				; XREF: Obj4A_Index
000148A4 4AB8 F680                  		tst.l	($FFFFF680).w	; are pattern load cues	empty?
000148A8 6700                       		beq.s	Obj4A_Main2	; if yes, branch
000148AA 4E75                       		rts	
000148AC                            ; ===========================================================================
000148AC                            
000148AC                            Obj4A_Main2:
000148AC 5428 0024                  		addq.b	#2,$24(a0)
000148B0 217C 0000 0000 0004        		move.l	#Map_obj4A,4(a0)
000148B8 117C 0004 0001             		move.b	#4,1(a0)
000148BE 117C 0001 0018             		move.b	#1,$18(a0)
000148C4 117C 0038 0019             		move.b	#$38,$19(a0)
000148CA 317C 0541 0002             		move.w	#$541,2(a0)
000148D0 317C 0078 0030             		move.w	#120,$30(a0)	; set time for Sonic's disappearance to 2 seconds
000148D6                            
000148D6                            Obj4A_RmvSonic:				; XREF: Obj4A_Index
000148D6 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
000148DC 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
000148E2 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
000148E8 43F9 0000 0000             		lea	(Ani_obj4A).l,a1
000148EE 4EB9 0000 AC42             		jsr	AnimateSprite
000148F4 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
000148FA 6600                       		bne.s	Obj4A_Display
000148FC 4A38 D000                  		tst.b	($FFFFD000).w
00014900 6700                       		beq.s	Obj4A_Display
00014902 11FC 0000 D000             		move.b	#0,($FFFFD000).w ; remove Sonic
00014908 303C 00A8                  		move.w	#$A8,d0
0001490C 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play Special Stage "GOAL" sound
00014912                            
00014912                            Obj4A_Display:
00014912 4EFA 9294                  		jmp	DisplaySprite
00014916                            ; ===========================================================================
00014916                            
00014916                            Obj4A_LoadSonic:			; XREF: Obj4A_Index
00014916 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
0001491A 6600                       		bne.s	Obj4A_Wait	; if time remains, branch
0001491C 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00014922 4EFA 92C0                  		jmp	DeleteObject
00014926                            ; ===========================================================================
00014926                            
00014926                            Obj4A_Wait:
00014926 4E75                       		rts	
00014928                            ; ===========================================================================
00014928                            ; ---------------------------------------------------------------------------
00014928                            ; Object 08 - water splash (LZ)
00014928                            ; ---------------------------------------------------------------------------
00014928                            
00014928                            Obj08:					; XREF: Obj_Index
00014928 7000                       		moveq	#0,d0
0001492A 1028 0024                  		move.b	$24(a0),d0
0001492E 323B 0000                  		move.w	Obj08_Index(pc,d0.w),d1
00014932 4EFB 1000                  		jmp	Obj08_Index(pc,d1.w)
00014936                            ; ===========================================================================
00014936 0000                       Obj08_Index:	dc.w Obj08_Main-Obj08_Index
00014938 0000                       		dc.w Obj08_Display-Obj08_Index
0001493A 0000                       		dc.w Obj08_Delete-Obj08_Index
0001493C                            ; ===========================================================================
0001493C                            
0001493C                            Obj08_Main:				; XREF: Obj08_Index
0001493C 5428 0024                  		addq.b	#2,$24(a0)
00014940 217C 0000 0000 0004        		move.l	#Map_obj08,4(a0)
00014948 0028 0004 0001             		ori.b	#4,1(a0)
0001494E 117C 0001 0018             		move.b	#1,$18(a0)
00014954 117C 0010 0019             		move.b	#$10,$19(a0)
0001495A 317C 4259 0002             		move.w	#$4259,2(a0)
00014960 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; copy x-position from Sonic
00014966                            
00014966                            Obj08_Display:				; XREF: Obj08_Index
00014966 3178 F646 000C             		move.w	($FFFFF646).w,$C(a0) ; copy y-position from water height
0001496C 43F9 0000 0000             		lea	(Ani_obj08).l,a1
00014972 4EB9 0000 AC42             		jsr	AnimateSprite
00014978 4EFA 922E                  		jmp	DisplaySprite
0001497C                            ; ===========================================================================
0001497C                            
0001497C                            Obj08_Delete:				; XREF: Obj08_Index
0001497C 4EFA 9266                  		jmp	DeleteObject	; delete when animation	is complete
00014980                            ; ===========================================================================
00014980                            Ani_obj38:
00014980                            	include "_anim\obj38.asm"
00014980                            ; ---------------------------------------------------------------------------
00014980                            ; Animation script - shield and invincibility stars
00014980                            ; ---------------------------------------------------------------------------
00014980 0000                       		dc.w byte_14356-Ani_obj38
00014982 0000                       		dc.w byte_1435E-Ani_obj38
00014984 0000                       		dc.w byte_14364-Ani_obj38
00014986 0000                       		dc.w byte_1437E-Ani_obj38
00014988 0000                       		dc.w byte_14398-Ani_obj38
0001498A 0101 0002 0003 00FF        byte_14356:	dc.b 1,	1, 0, 2, 0, 3, 0, $FF
00014992 0504 0506 07FF             byte_1435E:	dc.b 5,	4, 5, 6, 7, $FF
00014998 0004 0400 0404 0005 0500+  byte_14364:	dc.b 0,	4, 4, 0, 4, 4, 0, 5, 5,	0, 5, 5, 0, 6, 6, 0, 6
000149A9 0600 0707 0007 0700 FF     		dc.b 6,	0, 7, 7, 0, 7, 7, 0, $FF
000149B2 0004 0400 0400 0005 0500+  byte_1437E:	dc.b 0,	4, 4, 0, 4, 0, 0, 5, 5,	0, 5, 0, 0, 6, 6, 0, 6
000149C3 0000 0707 0007 0000 FF     		dc.b 0,	0, 7, 7, 0, 7, 0, 0, $FF
000149CC 0004 0000 0400 0005 0000+  byte_14398:	dc.b 0,	4, 0, 0, 4, 0, 0, 5, 0,	0, 5, 0, 0, 6, 0, 0, 6
000149DD 0000 0700 0007 0000 FF     		dc.b 0,	0, 7, 0, 0, 7, 0, 0, $FF
000149E6                            		even
000149E6                            		even
000149E6                            
000149E6                            ; ---------------------------------------------------------------------------
000149E6                            ; Sprite mappings - shield and invincibility stars
000149E6                            ; ---------------------------------------------------------------------------
000149E6                            Map_obj38:
000149E6                            	include "_maps\obj38.asm"
000149E6                            ; ---------------------------------------------------------------------------
000149E6                            ; Sprite mappings - shield and invincibility stars
000149E6                            ; ---------------------------------------------------------------------------
000149E6 0000 0000                  		dc.w byte_143CD-Map_obj38, byte_143C2-Map_obj38
000149EA 0000 0000                  		dc.w byte_143D7-Map_obj38, byte_143EC-Map_obj38
000149EE 0000 0000                  		dc.w byte_14401-Map_obj38, byte_14416-Map_obj38
000149F2 0000 0000                  		dc.w byte_1442B-Map_obj38, byte_14440-Map_obj38
000149F6 04                         byte_143C2:	dc.b 4
000149F7 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
000149FC E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
00014A01 000A 1000 E8               byte_143CD:	dc.b 0,	$A, $10, 0, $E8
00014A06 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
00014A0B 04                         byte_143D7:	dc.b 4
00014A0C E80A 0812 E9               		dc.b $E8, $A, 8, $12, $E9
00014A11 E80A 0012 00               		dc.b $E8, $A, 0, $12, 0
00014A16 000A 1812 E9               		dc.b 0,	$A, $18, $12, $E9
00014A1B 000A 1012 00               		dc.b 0,	$A, $10, $12, 0
00014A20 04                         byte_143EC:	dc.b 4
00014A21 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
00014A26 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00014A2B 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
00014A30 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00014A35 04                         byte_14401:	dc.b 4
00014A36 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00014A3B E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
00014A40 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
00014A45 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00014A4A 04                         byte_14416:	dc.b 4
00014A4B E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
00014A50 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00014A55 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00014A5A 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
00014A5F 04                         byte_1442B:	dc.b 4
00014A60 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00014A65 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00014A6A 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00014A6F 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
00014A74 04                         byte_14440:	dc.b 4
00014A75 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
00014A7A E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00014A7F 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00014A84 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
00014A8A 00                         		even
00014A8A 00                         		even
00014A8A                            
00014A8A                            Ani_obj4A:
00014A8A                            	include "_anim\obj4A.asm"
00014A8A                            ; ---------------------------------------------------------------------------
00014A8A                            ; Animation script - special stage entry effect from beta
00014A8A                            ; ---------------------------------------------------------------------------
00014A8A 0000                       		dc.w byte_14458-Ani_obj4A
00014A8C 0500 0100 0100 0701 0702+  byte_14458:	dc.b 5,	0, 1, 0, 1, 0, 7, 1, 7,	2, 7, 3, 7, 4, 7, 5, 7, 6, 7, $FC
00014AA0                            		even
00014AA0                            		even
00014AA0                            
00014AA0                            ; ---------------------------------------------------------------------------
00014AA0                            ; Sprite mappings - special stage entry	from beta
00014AA0                            ; ---------------------------------------------------------------------------
00014AA0                            Map_obj4A:
00014AA0                            	include "_maps\obj4A.asm"
00014AA0                            ; ---------------------------------------------------------------------------
00014AA0                            ; Sprite mappings - special stage entry	from beta
00014AA0                            ; ---------------------------------------------------------------------------
00014AA0 0000 0000                  		dc.w byte_1447C-Map_obj4A, byte_1448C-Map_obj4A
00014AA4 0000 0000                  		dc.w byte_1449C-Map_obj4A, byte_144B6-Map_obj4A
00014AA8 0000 0000                  		dc.w byte_144E4-Map_obj4A, byte_1453F-Map_obj4A
00014AAC 0000 0000                  		dc.w byte_14595-Map_obj4A, byte_145BF-Map_obj4A
00014AB0 03                         byte_1447C:	dc.b 3
00014AB1 F800 0000 08               		dc.b $F8, 0, 0,	0, 8
00014AB6 0004 0001 00               		dc.b 0,	4, 0, 1, 0
00014ABB 0800 1000 08               		dc.b 8,	0, $10,	0, 8
00014AC0 03                         byte_1448C:	dc.b 3
00014AC1 F00D 0003 F0               		dc.b $F0, $D, 0, 3, $F0
00014AC6 000C 000B F0               		dc.b 0,	$C, 0, $B, $F0
00014ACB 080D 1003 F0               		dc.b 8,	$D, $10, 3, $F0
00014AD0 05                         byte_1449C:	dc.b 5
00014AD1 E40E 000F F4               		dc.b $E4, $E, 0, $F, $F4
00014AD6 EC02 001B EC               		dc.b $EC, 2, 0,	$1B, $EC
00014ADB FC0C 001E F4               		dc.b $FC, $C, 0, $1E, $F4
00014AE0 040E 100F F4               		dc.b 4,	$E, $10, $F, $F4
00014AE5 0401 101B EC               		dc.b 4,	1, $10,	$1B, $EC
00014AEA 09                         byte_144B6:	dc.b 9
00014AEB F008 0022 F8               		dc.b $F0, 8, 0,	$22, $F8
00014AF0 F80E 0025 F0               		dc.b $F8, $E, 0, $25, $F0
00014AF5 1008 0031 F0               		dc.b $10, 8, 0,	$31, $F0
00014AFA 0005 0034 10               		dc.b 0,	5, 0, $34, $10
00014AFF F800 0825 10               		dc.b $F8, 0, 8,	$25, $10
00014B04 F000 1836 18               		dc.b $F0, 0, $18, $36, $18
00014B09 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00014B0E 0000 0825 28               		dc.b 0,	0, 8, $25, $28
00014B13 F800 0025 30               		dc.b $F8, 0, 0,	$25, $30
00014B18 12                         byte_144E4:	dc.b $12
00014B19 0000 1825 F0               		dc.b 0,	0, $18,	$25, $F0
00014B1E F804 0038 F8               		dc.b $F8, 4, 0,	$38, $F8
00014B23 F000 0026 08               		dc.b $F0, 0, 0,	$26, 8
00014B28 0000 0025 00               		dc.b 0,	0, 0, $25, 0
00014B2D 0800 1825 F8               		dc.b 8,	0, $18,	$25, $F8
00014B32 1000 1026 00               		dc.b $10, 0, $10, $26, 0
00014B37 0800 1038 08               		dc.b 8,	0, $10,	$38, 8
00014B3C F800 0029 10               		dc.b $F8, 0, 0,	$29, $10
00014B41 0000 0026 10               		dc.b 0,	0, 0, $26, $10
00014B46 0000 002D 18               		dc.b 0,	0, 0, $2D, $18
00014B4B 0800 0826 18               		dc.b 8,	0, 8, $26, $18
00014B50 0800 0029 20               		dc.b 8,	0, 0, $29, $20
00014B55 F800 0026 20               		dc.b $F8, 0, 0,	$26, $20
00014B5A F800 002D 28               		dc.b $F8, 0, 0,	$2D, $28
00014B5F 0000 003A 28               		dc.b 0,	0, 0, $3A, $28
00014B64 F800 1826 30               		dc.b $F8, 0, $18, $26, $30
00014B69 0000 1025 38               		dc.b 0,	0, $10,	$25, $38
00014B6E F800 1025 40               		dc.b $F8, 0, $10, $25, $40
00014B73 11                         byte_1453F:	dc.b $11
00014B74 F800 0825 00               		dc.b $F8, 0, 8,	$25, 0
00014B79 F000 0038 10               		dc.b $F0, 0, 0,	$38, $10
00014B7E 1000 0825 00               		dc.b $10, 0, 8,	$25, 0
00014B83 0000 1825 10               		dc.b 0,	0, $18,	$25, $10
00014B88 0800 1025 18               		dc.b 8,	0, $10,	$25, $18
00014B8D F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00014B92 0000 1026 28               		dc.b 0,	0, $10,	$26, $28
00014B97 F800 1025 30               		dc.b $F8, 0, $10, $25, $30
00014B9C 0000 0025 30               		dc.b 0,	0, 0, $25, $30
00014BA1 0800 0825 30               		dc.b 8,	0, 8, $25, $30
00014BA6 0000 0826 38               		dc.b 0,	0, 8, $26, $38
00014BAB 0800 0029 38               		dc.b 8,	0, 0, $29, $38
00014BB0 F800 0826 40               		dc.b $F8, 0, 8,	$26, $40
00014BB5 0000 002D 40               		dc.b 0,	0, 0, $2D, $40
00014BBA F800 0825 48               		dc.b $F8, 0, 8,	$25, $48
00014BBF 0000 0025 48               		dc.b 0,	0, 0, $25, $48
00014BC4 0000 1025 50               		dc.b 0,	0, $10,	$25, $50
00014BC9 09                         byte_14595:	dc.b 9
00014BCA FC00 0826 30               		dc.b $FC, 0, 8,	$26, $30
00014BCF 0400 0825 28               		dc.b 4,	0, 8, $25, $28
00014BD4 0400 1027 38               		dc.b 4,	0, $10,	$27, $38
00014BD9 0400 0826 40               		dc.b 4,	0, 8, $26, $40
00014BDE FC00 1025 40               		dc.b $FC, 0, $10, $25, $40
00014BE3 FC00 1026 48               		dc.b $FC, 0, $10, $26, $48
00014BE8 0C00 0827 48               		dc.b $C, 0, 8, $27, $48
00014BED 0400 1826 50               		dc.b 4,	0, $18,	$26, $50
00014BF2 04                         		dc.b 4
00014BF3 0008 2758 00               byte_145BF:	dc.b 0,	8, $27,	$58, 0
00014BF8                            		even
00014BF8                            		even
00014BF8                            
00014BF8                            Ani_obj08:
00014BF8                            	include "_anim\obj08.asm"
00014BF8                            ; ---------------------------------------------------------------------------
00014BF8                            ; Animation script - water splash (LZ)
00014BF8                            ; ---------------------------------------------------------------------------
00014BF8 0000                       		dc.w byte_145C6-Ani_obj08
00014BFA 0400 0102 FC00             byte_145C6:	dc.b 4,	0, 1, 2, $FC, 0
00014C00                            		even
00014C00                            		even
00014C00                            
00014C00                            ; ---------------------------------------------------------------------------
00014C00                            ; Sprite mappings - water splash (LZ)
00014C00                            ; ---------------------------------------------------------------------------
00014C00                            Map_obj08:
00014C00                            	include "_maps\obj08.asm"
00014C00                            ; ---------------------------------------------------------------------------
00014C00                            ; Sprite mappings - water splash (LZ)
00014C00                            ; ---------------------------------------------------------------------------
00014C00 0000                       		dc.w byte_145D2-Map_obj08
00014C02 0000                       		dc.w byte_145DD-Map_obj08
00014C04 0000                       		dc.w byte_145E8-Map_obj08
00014C06 02                         byte_145D2:	dc.b 2
00014C07 F204 006D F8               		dc.b $F2, 4, 0,	$6D, $F8
00014C0C FA0C 006F F0               		dc.b $FA, $C, 0, $6F, $F0
00014C11 02                         byte_145DD:	dc.b 2
00014C12 E200 0073 F8               		dc.b $E2, 0, 0,	$73, $F8
00014C17 EA0E 0074 F0               		dc.b $EA, $E, 0, $74, $F0
00014C1C 01                         byte_145E8:	dc.b 1
00014C1D E20F 0080 F0               		dc.b $E2, $F, 0, $80, $F0
00014C22                            		even
00014C22                            		even
00014C22                            
00014C22                            ; ---------------------------------------------------------------------------
00014C22                            ; Subroutine to	change Sonic's angle & position as he walks along the floor
00014C22                            ; ---------------------------------------------------------------------------
00014C22                            
00014C22                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014C22                            
00014C22                            
00014C22                            Sonic_AnglePos:				; XREF: Obj01_MdNormal; Obj01_MdRoll
00014C22 0828 0003 0022             		btst	#3,$22(a0)
00014C28 6700                       		beq.s	loc_14602
00014C2A 7000                       		moveq	#0,d0
00014C2C 11C0 F768                  		move.b	d0,($FFFFF768).w
00014C30 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00014C34 4E75                       		rts	
00014C36                            ; ===========================================================================
00014C36                            
00014C36                            loc_14602:
00014C36 7003                       		moveq	#3,d0
00014C38 11C0 F768                  		move.b	d0,($FFFFF768).w
00014C3C 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00014C40 1028 0026                  		move.b	$26(a0),d0
00014C44 0600 0020                  		addi.b	#$20,d0
00014C48 6A00                       		bpl.s	loc_14624
00014C4A 1028 0026                  		move.b	$26(a0),d0
00014C4E 6A00                       		bpl.s	loc_1461E
00014C50 5300                       		subq.b	#1,d0
00014C52                            
00014C52                            loc_1461E:
00014C52 0600 0020                  		addi.b	#$20,d0
00014C56 6000                       		bra.s	loc_14630
00014C58                            ; ===========================================================================
00014C58                            
00014C58                            loc_14624:
00014C58 1028 0026                  		move.b	$26(a0),d0
00014C5C 6A00                       		bpl.s	loc_1462C
00014C5E 5200                       		addq.b	#1,d0
00014C60                            
00014C60                            loc_1462C:
00014C60 0600 001F                  		addi.b	#$1F,d0
00014C64                            
00014C64                            loc_14630:
00014C64 0200 00C0                  		andi.b	#$C0,d0
00014C68 0C00 0040                  		cmpi.b	#$40,d0
00014C6C 6700 0000                  		beq.w	Sonic_WalkVertL
00014C70 0C00 0080                  		cmpi.b	#$80,d0
00014C74 6700 0000                  		beq.w	Sonic_WalkCeiling
00014C78 0C00 00C0                  		cmpi.b	#$C0,d0
00014C7C 6700 0000                  		beq.w	Sonic_WalkVertR
00014C80 3428 000C                  		move.w	$C(a0),d2
00014C84 3628 0008                  		move.w	8(a0),d3
00014C88 7000                       		moveq	#0,d0
00014C8A 1028 0016                  		move.b	$16(a0),d0
00014C8E 4880                       		ext.w	d0
00014C90 D440                       		add.w	d0,d2
00014C92 1028 0017                  		move.b	$17(a0),d0
00014C96 4880                       		ext.w	d0
00014C98 D640                       		add.w	d0,d3
00014C9A 49F8 F768                  		lea	($FFFFF768).w,a4
00014C9E 367C 0010                  		movea.w	#$10,a3
00014CA2 3C3C 0000                  		move.w	#0,d6
00014CA6 7A0D                       		moveq	#$D,d5
00014CA8 6100 0000                  		bsr.w	FindFloor
00014CAC 3F01                       		move.w	d1,-(sp)
00014CAE 3428 000C                  		move.w	$C(a0),d2
00014CB2 3628 0008                  		move.w	8(a0),d3
00014CB6 7000                       		moveq	#0,d0
00014CB8 1028 0016                  		move.b	$16(a0),d0
00014CBC 4880                       		ext.w	d0
00014CBE D440                       		add.w	d0,d2
00014CC0 1028 0017                  		move.b	$17(a0),d0
00014CC4 4880                       		ext.w	d0
00014CC6 4440                       		neg.w	d0
00014CC8 D640                       		add.w	d0,d3
00014CCA 49F8 F76A                  		lea	($FFFFF76A).w,a4
00014CCE 367C 0010                  		movea.w	#$10,a3
00014CD2 3C3C 0000                  		move.w	#0,d6
00014CD6 7A0D                       		moveq	#$D,d5
00014CD8 6100 0000                  		bsr.w	FindFloor
00014CDC 301F                       		move.w	(sp)+,d0
00014CDE 6100 0000                  		bsr.w	Sonic_Angle
00014CE2 4A41                       		tst.w	d1
00014CE4 6700                       		beq.s	locret_146BE
00014CE6 6A00                       		bpl.s	loc_146C0
00014CE8 0C41 FFF2                  		cmpi.w	#-$E,d1
00014CEC 6D00                       		blt.s	locret_146E6
00014CEE D368 000C                  		add.w	d1,$C(a0)
00014CF2                            
00014CF2                            locret_146BE:
00014CF2 4E75                       		rts	
00014CF4                            ; ===========================================================================
00014CF4                            
00014CF4                            loc_146C0:
00014CF4 0C41 000E                  		cmpi.w	#$E,d1
00014CF8 6E00                       		bgt.s	loc_146CC
00014CFA                            
00014CFA                            loc_146C6:
00014CFA D368 000C                  		add.w	d1,$C(a0)
00014CFE 4E75                       		rts	
00014D00                            ; ===========================================================================
00014D00                            
00014D00                            loc_146CC:
00014D00 4A28 0038                  		tst.b	$38(a0)
00014D04 66F4                       		bne.s	loc_146C6
00014D06 08E8 0001 0022             		bset	#1,$22(a0)
00014D0C 08A8 0005 0022             		bclr	#5,$22(a0)
00014D12 117C 0001 001D             		move.b	#1,$1D(a0)
00014D18 4E75                       		rts	
00014D1A                            ; ===========================================================================
00014D1A                            
00014D1A                            locret_146E6:
00014D1A 4E75                       		rts	
00014D1C                            ; End of function Sonic_AnglePos
00014D1C                            
00014D1C                            ; ===========================================================================
00014D1C 2428 0008                  		move.l	8(a0),d2
00014D20 3028 0010                  		move.w	$10(a0),d0
00014D24 48C0                       		ext.l	d0
00014D26 E180                       		asl.l	#8,d0
00014D28 9480                       		sub.l	d0,d2
00014D2A 2142 0008                  		move.l	d2,8(a0)
00014D2E 303C 0038                  		move.w	#$38,d0
00014D32 48C0                       		ext.l	d0
00014D34 E180                       		asl.l	#8,d0
00014D36 9680                       		sub.l	d0,d3
00014D38 2143 000C                  		move.l	d3,$C(a0)
00014D3C 4E75                       		rts	
00014D3E                            ; ===========================================================================
00014D3E                            
00014D3E                            locret_1470A:
00014D3E 4E75                       		rts	
00014D40                            ; ===========================================================================
00014D40 2628 000C                  		move.l	$C(a0),d3
00014D44 3028 0012                  		move.w	$12(a0),d0
00014D48 0440 0038                  		subi.w	#$38,d0
00014D4C 3140 0012                  		move.w	d0,$12(a0)
00014D50 48C0                       		ext.l	d0
00014D52 E180                       		asl.l	#8,d0
00014D54 9680                       		sub.l	d0,d3
00014D56 2143 000C                  		move.l	d3,$C(a0)
00014D5A 4E75                       		rts	
00014D5C 4E75                       		rts	
00014D5E                            ; ===========================================================================
00014D5E 2428 0008                  		move.l	8(a0),d2
00014D62 2628 000C                  		move.l	$C(a0),d3
00014D66 3028 0010                  		move.w	$10(a0),d0
00014D6A 48C0                       		ext.l	d0
00014D6C E180                       		asl.l	#8,d0
00014D6E 9480                       		sub.l	d0,d2
00014D70 3028 0012                  		move.w	$12(a0),d0
00014D74 48C0                       		ext.l	d0
00014D76 E180                       		asl.l	#8,d0
00014D78 9680                       		sub.l	d0,d3
00014D7A 2142 0008                  		move.l	d2,8(a0)
00014D7E 2143 000C                  		move.l	d3,$C(a0)
00014D82 4E75                       		rts	
00014D84                            
00014D84                            ; ---------------------------------------------------------------------------
00014D84                            ; Subroutine to	change Sonic's angle as he walks along the floor
00014D84                            ; ---------------------------------------------------------------------------
00014D84                            
00014D84                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014D84                            
00014D84                            
00014D84                            Sonic_Angle:				; XREF: Sonic_AnglePos; et al
00014D84 1438 F76A                  		move.b	($FFFFF76A).w,d2
00014D88 B240                       		cmp.w	d0,d1
00014D8A 6F00                       		ble.s	loc_1475E
00014D8C 1438 F768                  		move.b	($FFFFF768).w,d2
00014D90 3200                       		move.w	d0,d1
00014D92                            
00014D92                            loc_1475E:
00014D92 0802 0000                  		btst	#0,d2
00014D96 6600                       		bne.s	loc_1476A
00014D98 1142 0026                  		move.b	d2,$26(a0)
00014D9C 4E75                       		rts	
00014D9E                            ; ===========================================================================
00014D9E                            
00014D9E                            loc_1476A:
00014D9E 1428 0026                  		move.b	$26(a0),d2
00014DA2 0602 0020                  		addi.b	#$20,d2
00014DA6 0202 00C0                  		andi.b	#$C0,d2
00014DAA 1142 0026                  		move.b	d2,$26(a0)
00014DAE 4E75                       		rts	
00014DB0                            ; End of function Sonic_Angle
00014DB0                            
00014DB0                            ; ---------------------------------------------------------------------------
00014DB0                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his right
00014DB0                            ; ---------------------------------------------------------------------------
00014DB0                            
00014DB0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014DB0                            
00014DB0                            
00014DB0                            Sonic_WalkVertR:			; XREF: Sonic_AnglePos
00014DB0 3428 000C                  		move.w	$C(a0),d2
00014DB4 3628 0008                  		move.w	8(a0),d3
00014DB8 7000                       		moveq	#0,d0
00014DBA 1028 0017                  		move.b	$17(a0),d0
00014DBE 4880                       		ext.w	d0
00014DC0 4440                       		neg.w	d0
00014DC2 D440                       		add.w	d0,d2
00014DC4 1028 0016                  		move.b	$16(a0),d0
00014DC8 4880                       		ext.w	d0
00014DCA D640                       		add.w	d0,d3
00014DCC 49F8 F768                  		lea	($FFFFF768).w,a4
00014DD0 367C 0010                  		movea.w	#$10,a3
00014DD4 3C3C 0000                  		move.w	#0,d6
00014DD8 7A0D                       		moveq	#$D,d5
00014DDA 6100 0000                  		bsr.w	FindWall
00014DDE 3F01                       		move.w	d1,-(sp)
00014DE0 3428 000C                  		move.w	$C(a0),d2
00014DE4 3628 0008                  		move.w	8(a0),d3
00014DE8 7000                       		moveq	#0,d0
00014DEA 1028 0017                  		move.b	$17(a0),d0
00014DEE 4880                       		ext.w	d0
00014DF0 D440                       		add.w	d0,d2
00014DF2 1028 0016                  		move.b	$16(a0),d0
00014DF6 4880                       		ext.w	d0
00014DF8 D640                       		add.w	d0,d3
00014DFA 49F8 F76A                  		lea	($FFFFF76A).w,a4
00014DFE 367C 0010                  		movea.w	#$10,a3
00014E02 3C3C 0000                  		move.w	#0,d6
00014E06 7A0D                       		moveq	#$D,d5
00014E08 6100 0000                  		bsr.w	FindWall
00014E0C 301F                       		move.w	(sp)+,d0
00014E0E 6100 FF74                  		bsr.w	Sonic_Angle
00014E12 4A41                       		tst.w	d1
00014E14 6700                       		beq.s	locret_147F0
00014E16 6A00                       		bpl.s	loc_147F2
00014E18 0C41 FFF2                  		cmpi.w	#-$E,d1
00014E1C 6D00 FF20                  		blt.w	locret_1470A
00014E20 D368 0008                  		add.w	d1,8(a0)
00014E24                            
00014E24                            locret_147F0:
00014E24 4E75                       		rts	
00014E26                            ; ===========================================================================
00014E26                            
00014E26                            loc_147F2:
00014E26 0C41 000E                  		cmpi.w	#$E,d1
00014E2A 6E00                       		bgt.s	loc_147FE
00014E2C                            
00014E2C                            loc_147F8:
00014E2C D368 0008                  		add.w	d1,8(a0)
00014E30 4E75                       		rts	
00014E32                            ; ===========================================================================
00014E32                            
00014E32                            loc_147FE:
00014E32 4A28 0038                  		tst.b	$38(a0)
00014E36 66F4                       		bne.s	loc_147F8
00014E38 08E8 0001 0022             		bset	#1,$22(a0)
00014E3E 08A8 0005 0022             		bclr	#5,$22(a0)
00014E44 117C 0001 001D             		move.b	#1,$1D(a0)
00014E4A 4E75                       		rts	
00014E4C                            ; End of function Sonic_WalkVertR
00014E4C                            
00014E4C                            ; ---------------------------------------------------------------------------
00014E4C                            ; Subroutine allowing Sonic to walk upside-down
00014E4C                            ; ---------------------------------------------------------------------------
00014E4C                            
00014E4C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014E4C                            
00014E4C                            
00014E4C                            Sonic_WalkCeiling:			; XREF: Sonic_AnglePos
00014E4C 3428 000C                  		move.w	$C(a0),d2
00014E50 3628 0008                  		move.w	8(a0),d3
00014E54 7000                       		moveq	#0,d0
00014E56 1028 0016                  		move.b	$16(a0),d0
00014E5A 4880                       		ext.w	d0
00014E5C 9440                       		sub.w	d0,d2
00014E5E 0A42 000F                  		eori.w	#$F,d2
00014E62 1028 0017                  		move.b	$17(a0),d0
00014E66 4880                       		ext.w	d0
00014E68 D640                       		add.w	d0,d3
00014E6A 49F8 F768                  		lea	($FFFFF768).w,a4
00014E6E 367C FFF0                  		movea.w	#-$10,a3
00014E72 3C3C 1000                  		move.w	#$1000,d6
00014E76 7A0D                       		moveq	#$D,d5
00014E78 6100 0000                  		bsr.w	FindFloor
00014E7C 3F01                       		move.w	d1,-(sp)
00014E7E 3428 000C                  		move.w	$C(a0),d2
00014E82 3628 0008                  		move.w	8(a0),d3
00014E86 7000                       		moveq	#0,d0
00014E88 1028 0016                  		move.b	$16(a0),d0
00014E8C 4880                       		ext.w	d0
00014E8E 9440                       		sub.w	d0,d2
00014E90 0A42 000F                  		eori.w	#$F,d2
00014E94 1028 0017                  		move.b	$17(a0),d0
00014E98 4880                       		ext.w	d0
00014E9A 9640                       		sub.w	d0,d3
00014E9C 49F8 F76A                  		lea	($FFFFF76A).w,a4
00014EA0 367C FFF0                  		movea.w	#-$10,a3
00014EA4 3C3C 1000                  		move.w	#$1000,d6
00014EA8 7A0D                       		moveq	#$D,d5
00014EAA 6100 0000                  		bsr.w	FindFloor
00014EAE 301F                       		move.w	(sp)+,d0
00014EB0 6100 FED2                  		bsr.w	Sonic_Angle
00014EB4 4A41                       		tst.w	d1
00014EB6 6700                       		beq.s	locret_14892
00014EB8 6A00                       		bpl.s	loc_14894
00014EBA 0C41 FFF2                  		cmpi.w	#-$E,d1
00014EBE 6D00 FE5A                  		blt.w	locret_146E6
00014EC2 9368 000C                  		sub.w	d1,$C(a0)
00014EC6                            
00014EC6                            locret_14892:
00014EC6 4E75                       		rts	
00014EC8                            ; ===========================================================================
00014EC8                            
00014EC8                            loc_14894:
00014EC8 0C41 000E                  		cmpi.w	#$E,d1
00014ECC 6E00                       		bgt.s	loc_148A0
00014ECE                            
00014ECE                            loc_1489A:
00014ECE 9368 000C                  		sub.w	d1,$C(a0)
00014ED2 4E75                       		rts	
00014ED4                            ; ===========================================================================
00014ED4                            
00014ED4                            loc_148A0:
00014ED4 4A28 0038                  		tst.b	$38(a0)
00014ED8 66F4                       		bne.s	loc_1489A
00014EDA 08E8 0001 0022             		bset	#1,$22(a0)
00014EE0 08A8 0005 0022             		bclr	#5,$22(a0)
00014EE6 117C 0001 001D             		move.b	#1,$1D(a0)
00014EEC 4E75                       		rts	
00014EEE                            ; End of function Sonic_WalkCeiling
00014EEE                            
00014EEE                            ; ---------------------------------------------------------------------------
00014EEE                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his left
00014EEE                            ; ---------------------------------------------------------------------------
00014EEE                            
00014EEE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014EEE                            
00014EEE                            
00014EEE                            Sonic_WalkVertL:			; XREF: Sonic_AnglePos
00014EEE 3428 000C                  		move.w	$C(a0),d2
00014EF2 3628 0008                  		move.w	8(a0),d3
00014EF6 7000                       		moveq	#0,d0
00014EF8 1028 0017                  		move.b	$17(a0),d0
00014EFC 4880                       		ext.w	d0
00014EFE 9440                       		sub.w	d0,d2
00014F00 1028 0016                  		move.b	$16(a0),d0
00014F04 4880                       		ext.w	d0
00014F06 9640                       		sub.w	d0,d3
00014F08 0A43 000F                  		eori.w	#$F,d3
00014F0C 49F8 F768                  		lea	($FFFFF768).w,a4
00014F10 367C FFF0                  		movea.w	#-$10,a3
00014F14 3C3C 0800                  		move.w	#$800,d6
00014F18 7A0D                       		moveq	#$D,d5
00014F1A 6100 0000                  		bsr.w	FindWall
00014F1E 3F01                       		move.w	d1,-(sp)
00014F20 3428 000C                  		move.w	$C(a0),d2
00014F24 3628 0008                  		move.w	8(a0),d3
00014F28 7000                       		moveq	#0,d0
00014F2A 1028 0017                  		move.b	$17(a0),d0
00014F2E 4880                       		ext.w	d0
00014F30 D440                       		add.w	d0,d2
00014F32 1028 0016                  		move.b	$16(a0),d0
00014F36 4880                       		ext.w	d0
00014F38 9640                       		sub.w	d0,d3
00014F3A 0A43 000F                  		eori.w	#$F,d3
00014F3E 49F8 F76A                  		lea	($FFFFF76A).w,a4
00014F42 367C FFF0                  		movea.w	#-$10,a3
00014F46 3C3C 0800                  		move.w	#$800,d6
00014F4A 7A0D                       		moveq	#$D,d5
00014F4C 6100 0000                  		bsr.w	FindWall
00014F50 301F                       		move.w	(sp)+,d0
00014F52 6100 FE30                  		bsr.w	Sonic_Angle
00014F56 4A41                       		tst.w	d1
00014F58 6700                       		beq.s	locret_14934
00014F5A 6A00                       		bpl.s	loc_14936
00014F5C 0C41 FFF2                  		cmpi.w	#-$E,d1
00014F60 6D00 FDDC                  		blt.w	locret_1470A
00014F64 9368 0008                  		sub.w	d1,8(a0)
00014F68                            
00014F68                            locret_14934:
00014F68 4E75                       		rts	
00014F6A                            ; ===========================================================================
00014F6A                            
00014F6A                            loc_14936:
00014F6A 0C41 000E                  		cmpi.w	#$E,d1
00014F6E 6E00                       		bgt.s	loc_14942
00014F70                            
00014F70                            loc_1493C:
00014F70 9368 0008                  		sub.w	d1,8(a0)
00014F74 4E75                       		rts	
00014F76                            ; ===========================================================================
00014F76                            
00014F76                            loc_14942:
00014F76 4A28 0038                  		tst.b	$38(a0)
00014F7A 66F4                       		bne.s	loc_1493C
00014F7C 08E8 0001 0022             		bset	#1,$22(a0)
00014F82 08A8 0005 0022             		bclr	#5,$22(a0)
00014F88 117C 0001 001D             		move.b	#1,$1D(a0)
00014F8E 4E75                       		rts	
00014F90                            ; End of function Sonic_WalkVertL
00014F90                            
00014F90                            ; ---------------------------------------------------------------------------
00014F90                            ; Subroutine to	find which tile	the object is standing on
00014F90                            ; ---------------------------------------------------------------------------
00014F90                            
00014F90                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014F90                            
00014F90                            
00014F90                            Floor_ChkTile:				; XREF: FindFloor; et al
00014F90 3002                       		move.w	d2,d0
00014F92 E248                       		lsr.w	#1,d0
00014F94 0240 0380                  		andi.w	#$380,d0
00014F98 3203                       		move.w	d3,d1
00014F9A E049                       		lsr.w	#8,d1
00014F9C 0241 007F                  		andi.w	#$7F,d1
00014FA0 D041                       		add.w	d1,d0
00014FA2 72FF                       		moveq	#-1,d1
00014FA4 43F8 A400                  		lea	($FFFFA400).w,a1
00014FA8 1231 0000                  		move.b	(a1,d0.w),d1
00014FAC 6700                       		beq.s	loc_14996
00014FAE 6B00                       		bmi.s	loc_1499A
00014FB0 5301                       		subq.b	#1,d1
00014FB2 4881                       		ext.w	d1
00014FB4 EE59                       		ror.w	#7,d1
00014FB6 3002                       		move.w	d2,d0
00014FB8 D040                       		add.w	d0,d0
00014FBA 0240 01E0                  		andi.w	#$1E0,d0
00014FBE D240                       		add.w	d0,d1
00014FC0 3003                       		move.w	d3,d0
00014FC2 E648                       		lsr.w	#3,d0
00014FC4 0240 001E                  		andi.w	#$1E,d0
00014FC8 D240                       		add.w	d0,d1
00014FCA                            
00014FCA                            loc_14996:
00014FCA 2241                       		movea.l	d1,a1
00014FCC 4E75                       		rts	
00014FCE                            ; ===========================================================================
00014FCE                            
00014FCE                            loc_1499A:
00014FCE 0241 007F                  		andi.w	#$7F,d1
00014FD2 0828 0006 0001             		btst	#6,1(a0)
00014FD8 6700                       		beq.s	loc_149B2
00014FDA 5241                       		addq.w	#1,d1
00014FDC 0C41 0029                  		cmpi.w	#$29,d1
00014FE0 6600                       		bne.s	loc_149B2
00014FE2 323C 0051                  		move.w	#$51,d1
00014FE6                            
00014FE6                            loc_149B2:
00014FE6 5301                       		subq.b	#1,d1
00014FE8 EE59                       		ror.w	#7,d1
00014FEA 3002                       		move.w	d2,d0
00014FEC D040                       		add.w	d0,d0
00014FEE 0240 01E0                  		andi.w	#$1E0,d0
00014FF2 D240                       		add.w	d0,d1
00014FF4 3003                       		move.w	d3,d0
00014FF6 E648                       		lsr.w	#3,d0
00014FF8 0240 001E                  		andi.w	#$1E,d0
00014FFC D240                       		add.w	d0,d1
00014FFE 2241                       		movea.l	d1,a1
00015000 4E75                       		rts	
00015002                            ; End of function Floor_ChkTile
00015002                            
00015002                            
00015002                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015002                            
00015002                            
00015002                            FindFloor:				; XREF: Sonic_AnglePos; et al
00015002 618C                       		bsr.s	Floor_ChkTile
00015004 3011                       		move.w	(a1),d0
00015006 3800                       		move.w	d0,d4
00015008 0240 07FF                  		andi.w	#$7FF,d0
0001500C 6700                       		beq.s	loc_149DE
0001500E 0B04                       		btst	d5,d4
00015010 6600                       		bne.s	loc_149EC
00015012                            
00015012                            loc_149DE:
00015012 D44B                       		add.w	a3,d2
00015014 6100 0000                  		bsr.w	FindFloor2
00015018 944B                       		sub.w	a3,d2
0001501A 0641 0010                  		addi.w	#$10,d1
0001501E 4E75                       		rts	
00015020                            ; ===========================================================================
00015020                            
00015020                            loc_149EC:
00015020 2478 F796                  		movea.l	($FFFFF796).w,a2 ; load	collision index
00015024 1032 0000                  		move.b	(a2,d0.w),d0
00015028 0240 00FF                  		andi.w	#$FF,d0
0001502C 67E4                       		beq.s	loc_149DE
0001502E 45F9 0000 0000             		lea	(AngleMap).l,a2
00015034 18B2 0000                  		move.b	(a2,d0.w),(a4)
00015038 E948                       		lsl.w	#4,d0
0001503A 3203                       		move.w	d3,d1
0001503C 0804 000B                  		btst	#$B,d4
00015040 6700                       		beq.s	loc_14A12
00015042 4641                       		not.w	d1
00015044 4414                       		neg.b	(a4)
00015046                            
00015046                            loc_14A12:
00015046 0804 000C                  		btst	#$C,d4
0001504A 6700                       		beq.s	loc_14A22
0001504C 0614 0040                  		addi.b	#$40,(a4)
00015050 4414                       		neg.b	(a4)
00015052 0414 0040                  		subi.b	#$40,(a4)
00015056                            
00015056                            loc_14A22:
00015056 0241 000F                  		andi.w	#$F,d1
0001505A D240                       		add.w	d0,d1
0001505C 45F9 0000 0000             		lea	(CollArray1).l,a2
00015062 1032 1000                  		move.b	(a2,d1.w),d0
00015066 4880                       		ext.w	d0
00015068 BD44                       		eor.w	d6,d4
0001506A 0804 000C                  		btst	#$C,d4
0001506E 6700                       		beq.s	loc_14A3E
00015070 4440                       		neg.w	d0
00015072                            
00015072                            loc_14A3E:
00015072 4A40                       		tst.w	d0
00015074 679C                       		beq.s	loc_149DE
00015076 6B00                       		bmi.s	loc_14A5A
00015078 0C00 0010                  		cmpi.b	#$10,d0
0001507C 6700                       		beq.s	loc_14A66
0001507E 3202                       		move.w	d2,d1
00015080 0241 000F                  		andi.w	#$F,d1
00015084 D041                       		add.w	d1,d0
00015086 323C 000F                  		move.w	#$F,d1
0001508A 9240                       		sub.w	d0,d1
0001508C 4E75                       		rts	
0001508E                            ; ===========================================================================
0001508E                            
0001508E                            loc_14A5A:
0001508E 3202                       		move.w	d2,d1
00015090 0241 000F                  		andi.w	#$F,d1
00015094 D041                       		add.w	d1,d0
00015096 6A00 FF7A                  		bpl.w	loc_149DE
0001509A                            
0001509A                            loc_14A66:
0001509A 944B                       		sub.w	a3,d2
0001509C 6100 0000                  		bsr.w	FindFloor2
000150A0 D44B                       		add.w	a3,d2
000150A2 0441 0010                  		subi.w	#$10,d1
000150A6 4E75                       		rts	
000150A8                            ; End of function FindFloor
000150A8                            
000150A8                            
000150A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000150A8                            
000150A8                            
000150A8                            FindFloor2:				; XREF: FindFloor
000150A8 6100 FEE6                  		bsr.w	Floor_ChkTile
000150AC 3011                       		move.w	(a1),d0
000150AE 3800                       		move.w	d0,d4
000150B0 0240 07FF                  		andi.w	#$7FF,d0
000150B4 6700                       		beq.s	loc_14A86
000150B6 0B04                       		btst	d5,d4
000150B8 6600                       		bne.s	loc_14A94
000150BA                            
000150BA                            loc_14A86:
000150BA 323C 000F                  		move.w	#$F,d1
000150BE 3002                       		move.w	d2,d0
000150C0 0240 000F                  		andi.w	#$F,d0
000150C4 9240                       		sub.w	d0,d1
000150C6 4E75                       		rts	
000150C8                            ; ===========================================================================
000150C8                            
000150C8                            loc_14A94:
000150C8 2478 F796                  		movea.l	($FFFFF796).w,a2
000150CC 1032 0000                  		move.b	(a2,d0.w),d0
000150D0 0240 00FF                  		andi.w	#$FF,d0
000150D4 67E4                       		beq.s	loc_14A86
000150D6 45F9 0000 0000             		lea	(AngleMap).l,a2
000150DC 18B2 0000                  		move.b	(a2,d0.w),(a4)
000150E0 E948                       		lsl.w	#4,d0
000150E2 3203                       		move.w	d3,d1
000150E4 0804 000B                  		btst	#$B,d4
000150E8 6700                       		beq.s	loc_14ABA
000150EA 4641                       		not.w	d1
000150EC 4414                       		neg.b	(a4)
000150EE                            
000150EE                            loc_14ABA:
000150EE 0804 000C                  		btst	#$C,d4
000150F2 6700                       		beq.s	loc_14ACA
000150F4 0614 0040                  		addi.b	#$40,(a4)
000150F8 4414                       		neg.b	(a4)
000150FA 0414 0040                  		subi.b	#$40,(a4)
000150FE                            
000150FE                            loc_14ACA:
000150FE 0241 000F                  		andi.w	#$F,d1
00015102 D240                       		add.w	d0,d1
00015104 45F9 0000 0000             		lea	(CollArray1).l,a2
0001510A 1032 1000                  		move.b	(a2,d1.w),d0
0001510E 4880                       		ext.w	d0
00015110 BD44                       		eor.w	d6,d4
00015112 0804 000C                  		btst	#$C,d4
00015116 6700                       		beq.s	loc_14AE6
00015118 4440                       		neg.w	d0
0001511A                            
0001511A                            loc_14AE6:
0001511A 4A40                       		tst.w	d0
0001511C 679C                       		beq.s	loc_14A86
0001511E 6B00                       		bmi.s	loc_14AFC
00015120 3202                       		move.w	d2,d1
00015122 0241 000F                  		andi.w	#$F,d1
00015126 D041                       		add.w	d1,d0
00015128 323C 000F                  		move.w	#$F,d1
0001512C 9240                       		sub.w	d0,d1
0001512E 4E75                       		rts	
00015130                            ; ===========================================================================
00015130                            
00015130                            loc_14AFC:
00015130 3202                       		move.w	d2,d1
00015132 0241 000F                  		andi.w	#$F,d1
00015136 D041                       		add.w	d1,d0
00015138 6A00 FF80                  		bpl.w	loc_14A86
0001513C 4641                       		not.w	d1
0001513E 4E75                       		rts	
00015140                            ; End of function FindFloor2
00015140                            
00015140                            
00015140                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015140                            
00015140                            
00015140                            FindWall:				; XREF: Sonic_WalkVertR; et al
00015140 6100 FE4E                  		bsr.w	Floor_ChkTile
00015144 3011                       		move.w	(a1),d0
00015146 3800                       		move.w	d0,d4
00015148 0240 07FF                  		andi.w	#$7FF,d0
0001514C 6700                       		beq.s	loc_14B1E
0001514E 0B04                       		btst	d5,d4
00015150 6600                       		bne.s	loc_14B2C
00015152                            
00015152                            loc_14B1E:
00015152 D64B                       		add.w	a3,d3
00015154 6100 0000                  		bsr.w	FindWall2
00015158 964B                       		sub.w	a3,d3
0001515A 0641 0010                  		addi.w	#$10,d1
0001515E 4E75                       		rts	
00015160                            ; ===========================================================================
00015160                            
00015160                            loc_14B2C:
00015160 2478 F796                  		movea.l	($FFFFF796).w,a2
00015164 1032 0000                  		move.b	(a2,d0.w),d0
00015168 0240 00FF                  		andi.w	#$FF,d0
0001516C 67E4                       		beq.s	loc_14B1E
0001516E 45F9 0000 0000             		lea	(AngleMap).l,a2
00015174 18B2 0000                  		move.b	(a2,d0.w),(a4)
00015178 E948                       		lsl.w	#4,d0
0001517A 3202                       		move.w	d2,d1
0001517C 0804 000C                  		btst	#$C,d4
00015180 6700                       		beq.s	loc_14B5A
00015182 4641                       		not.w	d1
00015184 0614 0040                  		addi.b	#$40,(a4)
00015188 4414                       		neg.b	(a4)
0001518A 0414 0040                  		subi.b	#$40,(a4)
0001518E                            
0001518E                            loc_14B5A:
0001518E 0804 000B                  		btst	#$B,d4
00015192 6700                       		beq.s	loc_14B62
00015194 4414                       		neg.b	(a4)
00015196                            
00015196                            loc_14B62:
00015196 0241 000F                  		andi.w	#$F,d1
0001519A D240                       		add.w	d0,d1
0001519C 45F9 0000 0000             		lea	(CollArray2).l,a2
000151A2 1032 1000                  		move.b	(a2,d1.w),d0
000151A6 4880                       		ext.w	d0
000151A8 BD44                       		eor.w	d6,d4
000151AA 0804 000B                  		btst	#$B,d4
000151AE 6700                       		beq.s	loc_14B7E
000151B0 4440                       		neg.w	d0
000151B2                            
000151B2                            loc_14B7E:
000151B2 4A40                       		tst.w	d0
000151B4 679C                       		beq.s	loc_14B1E
000151B6 6B00                       		bmi.s	loc_14B9A
000151B8 0C00 0010                  		cmpi.b	#$10,d0
000151BC 6700                       		beq.s	loc_14BA6
000151BE 3203                       		move.w	d3,d1
000151C0 0241 000F                  		andi.w	#$F,d1
000151C4 D041                       		add.w	d1,d0
000151C6 323C 000F                  		move.w	#$F,d1
000151CA 9240                       		sub.w	d0,d1
000151CC 4E75                       		rts	
000151CE                            ; ===========================================================================
000151CE                            
000151CE                            loc_14B9A:
000151CE 3203                       		move.w	d3,d1
000151D0 0241 000F                  		andi.w	#$F,d1
000151D4 D041                       		add.w	d1,d0
000151D6 6A00 FF7A                  		bpl.w	loc_14B1E
000151DA                            
000151DA                            loc_14BA6:
000151DA 964B                       		sub.w	a3,d3
000151DC 6100 0000                  		bsr.w	FindWall2
000151E0 D64B                       		add.w	a3,d3
000151E2 0441 0010                  		subi.w	#$10,d1
000151E6 4E75                       		rts	
000151E8                            ; End of function FindWall
000151E8                            
000151E8                            
000151E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000151E8                            
000151E8                            
000151E8                            FindWall2:				; XREF: FindWall
000151E8 6100 FDA6                  		bsr.w	Floor_ChkTile
000151EC 3011                       		move.w	(a1),d0
000151EE 3800                       		move.w	d0,d4
000151F0 0240 07FF                  		andi.w	#$7FF,d0
000151F4 6700                       		beq.s	loc_14BC6
000151F6 0B04                       		btst	d5,d4
000151F8 6600                       		bne.s	loc_14BD4
000151FA                            
000151FA                            loc_14BC6:
000151FA 323C 000F                  		move.w	#$F,d1
000151FE 3003                       		move.w	d3,d0
00015200 0240 000F                  		andi.w	#$F,d0
00015204 9240                       		sub.w	d0,d1
00015206 4E75                       		rts	
00015208                            ; ===========================================================================
00015208                            
00015208                            loc_14BD4:
00015208 2478 F796                  		movea.l	($FFFFF796).w,a2
0001520C 1032 0000                  		move.b	(a2,d0.w),d0
00015210 0240 00FF                  		andi.w	#$FF,d0
00015214 67E4                       		beq.s	loc_14BC6
00015216 45F9 0000 0000             		lea	(AngleMap).l,a2
0001521C 18B2 0000                  		move.b	(a2,d0.w),(a4)
00015220 E948                       		lsl.w	#4,d0
00015222 3202                       		move.w	d2,d1
00015224 0804 000C                  		btst	#$C,d4
00015228 6700                       		beq.s	loc_14C02
0001522A 4641                       		not.w	d1
0001522C 0614 0040                  		addi.b	#$40,(a4)
00015230 4414                       		neg.b	(a4)
00015232 0414 0040                  		subi.b	#$40,(a4)
00015236                            
00015236                            loc_14C02:
00015236 0804 000B                  		btst	#$B,d4
0001523A 6700                       		beq.s	loc_14C0A
0001523C 4414                       		neg.b	(a4)
0001523E                            
0001523E                            loc_14C0A:
0001523E 0241 000F                  		andi.w	#$F,d1
00015242 D240                       		add.w	d0,d1
00015244 45F9 0000 0000             		lea	(CollArray2).l,a2
0001524A 1032 1000                  		move.b	(a2,d1.w),d0
0001524E 4880                       		ext.w	d0
00015250 BD44                       		eor.w	d6,d4
00015252 0804 000B                  		btst	#$B,d4
00015256 6700                       		beq.s	loc_14C26
00015258 4440                       		neg.w	d0
0001525A                            
0001525A                            loc_14C26:
0001525A 4A40                       		tst.w	d0
0001525C 679C                       		beq.s	loc_14BC6
0001525E 6B00                       		bmi.s	loc_14C3C
00015260 3203                       		move.w	d3,d1
00015262 0241 000F                  		andi.w	#$F,d1
00015266 D041                       		add.w	d1,d0
00015268 323C 000F                  		move.w	#$F,d1
0001526C 9240                       		sub.w	d0,d1
0001526E 4E75                       		rts	
00015270                            ; ===========================================================================
00015270                            
00015270                            loc_14C3C:
00015270 3203                       		move.w	d3,d1
00015272 0241 000F                  		andi.w	#$F,d1
00015276 D041                       		add.w	d1,d0
00015278 6A00 FF80                  		bpl.w	loc_14BC6
0001527C 4641                       		not.w	d1
0001527E 4E75                       		rts	
00015280                            ; End of function FindWall2
00015280                            
00015280                            ; ---------------------------------------------------------------------------
00015280                            ; Unused floor/wall subroutine - logs something	to do with collision
00015280                            ; ---------------------------------------------------------------------------
00015280                            
00015280                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015280                            
00015280                            
00015280                            FloorLog_Unk:				; XREF: Level
00015280 4E75                       		rts	
00015282                            
00015282 43F9 0000 0000             		lea	(CollArray1).l,a1
00015288 45F9 0000 0000             		lea	(CollArray1).l,a2
0001528E 363C 00FF                  		move.w	#$FF,d3
00015292                            
00015292                            loc_14C5E:
00015292 7A10                       		moveq	#$10,d5
00015294 343C 000F                  		move.w	#$F,d2
00015298                            
00015298                            loc_14C64:
00015298 7800                       		moveq	#0,d4
0001529A 323C 000F                  		move.w	#$F,d1
0001529E                            
0001529E                            loc_14C6A:
0001529E 3019                       		move.w	(a1)+,d0
000152A0 EAA8                       		lsr.l	d5,d0
000152A2 D944                       		addx.w	d4,d4
000152A4 51C9 FFF8                  		dbf	d1,loc_14C6A
000152A8                            
000152A8 34C4                       		move.w	d4,(a2)+
000152AA 92FC 0020                  		suba.w	#$20,a1
000152AE 5345                       		subq.w	#1,d5
000152B0 51CA FFE6                  		dbf	d2,loc_14C64
000152B4                            
000152B4 D2FC 0020                  		adda.w	#$20,a1
000152B8 51CB FFD8                  		dbf	d3,loc_14C5E
000152BC                            
000152BC 43F9 0000 0000             		lea	(CollArray1).l,a1
000152C2 45F9 0000 0000             		lea	(CollArray2).l,a2
000152C8 6100                       		bsr.s	FloorLog_Unk2
000152CA 43F9 0000 0000             		lea	(CollArray1).l,a1
000152D0 45F9 0000 0000             		lea	(CollArray1).l,a2
000152D6                            
000152D6                            ; End of function FloorLog_Unk
000152D6                            
000152D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000152D6                            
000152D6                            
000152D6                            FloorLog_Unk2:				; XREF: FloorLog_Unk
000152D6 363C 0FFF                  		move.w	#$FFF,d3
000152DA                            
000152DA                            loc_14CA6:
000152DA 7400                       		moveq	#0,d2
000152DC 323C 000F                  		move.w	#$F,d1
000152E0 3019                       		move.w	(a1)+,d0
000152E2 6700                       		beq.s	loc_14CD4
000152E4 6B00                       		bmi.s	loc_14CBE
000152E6                            
000152E6                            loc_14CB2:
000152E6 E248                       		lsr.w	#1,d0
000152E8 6400                       		bcc.s	loc_14CB8
000152EA 5202                       		addq.b	#1,d2
000152EC                            
000152EC                            loc_14CB8:
000152EC 51C9 FFF8                  		dbf	d1,loc_14CB2
000152F0                            
000152F0 6000                       		bra.s	loc_14CD6
000152F2                            ; ===========================================================================
000152F2                            
000152F2                            loc_14CBE:
000152F2 0C40 FFFF                  		cmpi.w	#-1,d0
000152F6 6700                       		beq.s	loc_14CD0
000152F8                            
000152F8                            loc_14CC4:
000152F8 E348                       		lsl.w	#1,d0
000152FA 6400                       		bcc.s	loc_14CCA
000152FC 5302                       		subq.b	#1,d2
000152FE                            
000152FE                            loc_14CCA:
000152FE 51C9 FFF8                  		dbf	d1,loc_14CC4
00015302                            
00015302 6000                       		bra.s	loc_14CD6
00015304                            ; ===========================================================================
00015304                            
00015304                            loc_14CD0:
00015304 303C 0010                  		move.w	#$10,d0
00015308                            
00015308                            loc_14CD4:
00015308 3400                       		move.w	d0,d2
0001530A                            
0001530A                            loc_14CD6:
0001530A 14C2                       		move.b	d2,(a2)+
0001530C 51CB FFCC                  		dbf	d3,loc_14CA6
00015310                            
00015310 4E75                       		rts	
00015312                            
00015312                            ; End of function FloorLog_Unk2
00015312                            
00015312                            
00015312                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015312                            
00015312                            
00015312                            Sonic_WalkSpeed:			; XREF: Sonic_Move
00015312 2628 0008                  		move.l	8(a0),d3
00015316 2428 000C                  		move.l	$C(a0),d2
0001531A 3228 0010                  		move.w	$10(a0),d1
0001531E 48C1                       		ext.l	d1
00015320 E181                       		asl.l	#8,d1
00015322 D681                       		add.l	d1,d3
00015324 3228 0012                  		move.w	$12(a0),d1
00015328 48C1                       		ext.l	d1
0001532A E181                       		asl.l	#8,d1
0001532C D481                       		add.l	d1,d2
0001532E 4842                       		swap	d2
00015330 4843                       		swap	d3
00015332 11C0 F768                  		move.b	d0,($FFFFF768).w
00015336 11C0 F76A                  		move.b	d0,($FFFFF76A).w
0001533A 1200                       		move.b	d0,d1
0001533C 0600 0020                  		addi.b	#$20,d0
00015340 6A00                       		bpl.s	loc_14D1A
00015342 1001                       		move.b	d1,d0
00015344 6A00                       		bpl.s	loc_14D14
00015346 5300                       		subq.b	#1,d0
00015348                            
00015348                            loc_14D14:
00015348 0600 0020                  		addi.b	#$20,d0
0001534C 6000                       		bra.s	loc_14D24
0001534E                            ; ===========================================================================
0001534E                            
0001534E                            loc_14D1A:
0001534E 1001                       		move.b	d1,d0
00015350 6A00                       		bpl.s	loc_14D20
00015352 5200                       		addq.b	#1,d0
00015354                            
00015354                            loc_14D20:
00015354 0600 001F                  		addi.b	#$1F,d0
00015358                            
00015358                            loc_14D24:
00015358 0200 00C0                  		andi.b	#$C0,d0
0001535C 6700 0000                  		beq.w	loc_14DF0
00015360 0C00 0080                  		cmpi.b	#$80,d0
00015364 6700 0000                  		beq.w	loc_14F7C
00015368 0201 0038                  		andi.b	#$38,d1
0001536C 6600                       		bne.s	loc_14D3C
0001536E 5042                       		addq.w	#8,d2
00015370                            
00015370                            loc_14D3C:
00015370 0C00 0040                  		cmpi.b	#$40,d0
00015374 6700 0000                  		beq.w	loc_1504A
00015378 6000 0000                  		bra.w	loc_14EBC
0001537C                            
0001537C                            ; End of function Sonic_WalkSpeed
0001537C                            
0001537C                            
0001537C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001537C                            
0001537C                            
0001537C                            sub_14D48:				; XREF: Sonic_Jump
0001537C 11C0 F768                  		move.b	d0,($FFFFF768).w
00015380 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00015384 0600 0020                  		addi.b	#$20,d0
00015388 0200 00C0                  		andi.b	#$C0,d0
0001538C 0C00 0040                  		cmpi.b	#$40,d0
00015390 6700 0000                  		beq.w	loc_14FD6
00015394 0C00 0080                  		cmpi.b	#$80,d0
00015398 6700 0000                  		beq.w	Sonic_DontRunOnWalls
0001539C 0C00 00C0                  		cmpi.b	#$C0,d0
000153A0 6700 0000                  		beq.w	sub_14E50
000153A4                            
000153A4                            ; End of function sub_14D48
000153A4                            
000153A4                            ; ---------------------------------------------------------------------------
000153A4                            ; Subroutine to	make Sonic land	on the floor after jumping
000153A4                            ; ---------------------------------------------------------------------------
000153A4                            
000153A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000153A4                            
000153A4                            
000153A4                            Sonic_HitFloor:				; XREF: Sonic_Floor
000153A4 3428 000C                  		move.w	$C(a0),d2
000153A8 3628 0008                  		move.w	8(a0),d3
000153AC 7000                       		moveq	#0,d0
000153AE 1028 0016                  		move.b	$16(a0),d0
000153B2 4880                       		ext.w	d0
000153B4 D440                       		add.w	d0,d2
000153B6 1028 0017                  		move.b	$17(a0),d0
000153BA 4880                       		ext.w	d0
000153BC D640                       		add.w	d0,d3
000153BE 49F8 F768                  		lea	($FFFFF768).w,a4
000153C2 367C 0010                  		movea.w	#$10,a3
000153C6 3C3C 0000                  		move.w	#0,d6
000153CA 7A0D                       		moveq	#$D,d5
000153CC 6100 FC34                  		bsr.w	FindFloor
000153D0 3F01                       		move.w	d1,-(sp)
000153D2 3428 000C                  		move.w	$C(a0),d2
000153D6 3628 0008                  		move.w	8(a0),d3
000153DA 7000                       		moveq	#0,d0
000153DC 1028 0016                  		move.b	$16(a0),d0
000153E0 4880                       		ext.w	d0
000153E2 D440                       		add.w	d0,d2
000153E4 1028 0017                  		move.b	$17(a0),d0
000153E8 4880                       		ext.w	d0
000153EA 9640                       		sub.w	d0,d3
000153EC 49F8 F76A                  		lea	($FFFFF76A).w,a4
000153F0 367C 0010                  		movea.w	#$10,a3
000153F4 3C3C 0000                  		move.w	#0,d6
000153F8 7A0D                       		moveq	#$D,d5
000153FA 6100 FC06                  		bsr.w	FindFloor
000153FE 301F                       		move.w	(sp)+,d0
00015400 143C 0000                  		move.b	#0,d2
00015404                            
00015404                            loc_14DD0:
00015404 1638 F76A                  		move.b	($FFFFF76A).w,d3
00015408 B240                       		cmp.w	d0,d1
0001540A 6F00                       		ble.s	loc_14DDE
0001540C 1638 F768                  		move.b	($FFFFF768).w,d3
00015410 C141                       		exg	d0,d1
00015412                            
00015412                            loc_14DDE:
00015412 0803 0000                  		btst	#0,d3
00015416 6700                       		beq.s	locret_14DE6
00015418 1602                       		move.b	d2,d3
0001541A                            
0001541A                            locret_14DE6:
0001541A 4E75                       		rts	
0001541C                            
0001541C                            ; End of function Sonic_HitFloor
0001541C                            
0001541C                            ; ===========================================================================
0001541C 3428 000C                  		move.w	$C(a0),d2
00015420 3628 0008                  		move.w	8(a0),d3
00015424                            
00015424                            loc_14DF0:				; XREF: Sonic_WalkSpeed
00015424 0642 000A                  		addi.w	#$A,d2
00015428 49F8 F768                  		lea	($FFFFF768).w,a4
0001542C 367C 0010                  		movea.w	#$10,a3
00015430 3C3C 0000                  		move.w	#0,d6
00015434 7A0E                       		moveq	#$E,d5
00015436 6100 FBCA                  		bsr.w	FindFloor
0001543A 143C 0000                  		move.b	#0,d2
0001543E                            
0001543E                            loc_14E0A:				; XREF: sub_14EB4
0001543E 1638 F768                  		move.b	($FFFFF768).w,d3
00015442 0803 0000                  		btst	#0,d3
00015446 6700                       		beq.s	locret_14E16
00015448 1602                       		move.b	d2,d3
0001544A                            
0001544A                            locret_14E16:
0001544A 4E75                       		rts	
0001544C                            
0001544C                            ; ---------------------------------------------------------------------------
0001544C                            ; Subroutine allowing objects to interact with the floor
0001544C                            ; ---------------------------------------------------------------------------
0001544C                            
0001544C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001544C                            
0001544C                            
0001544C                            ObjHitFloor:
0001544C 3628 0008                  		move.w	8(a0),d3
00015450                            
00015450                            ; End of function ObjHitFloor
00015450                            
00015450                            
00015450                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015450                            
00015450                            
00015450                            ObjHitFloor2:
00015450 3428 000C                  		move.w	$C(a0),d2
00015454 7000                       		moveq	#0,d0
00015456 1028 0016                  		move.b	$16(a0),d0
0001545A 4880                       		ext.w	d0
0001545C D440                       		add.w	d0,d2
0001545E 49F8 F768                  		lea	($FFFFF768).w,a4
00015462 18BC 0000                  		move.b	#0,(a4)
00015466 367C 0010                  		movea.w	#$10,a3
0001546A 3C3C 0000                  		move.w	#0,d6
0001546E 7A0D                       		moveq	#$D,d5
00015470 6100 FB90                  		bsr.w	FindFloor
00015474 1638 F768                  		move.b	($FFFFF768).w,d3
00015478 0803 0000                  		btst	#0,d3
0001547C 6700                       		beq.s	locret_14E4E
0001547E 163C 0000                  		move.b	#0,d3
00015482                            
00015482                            locret_14E4E:
00015482 4E75                       		rts	
00015484                            ; End of function ObjHitFloor2
00015484                            
00015484                            
00015484                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015484                            
00015484                            
00015484                            sub_14E50:				; XREF: sub_14D48
00015484 3428 000C                  		move.w	$C(a0),d2
00015488 3628 0008                  		move.w	8(a0),d3
0001548C 7000                       		moveq	#0,d0
0001548E 1028 0017                  		move.b	$17(a0),d0
00015492 4880                       		ext.w	d0
00015494 9440                       		sub.w	d0,d2
00015496 1028 0016                  		move.b	$16(a0),d0
0001549A 4880                       		ext.w	d0
0001549C D640                       		add.w	d0,d3
0001549E 49F8 F768                  		lea	($FFFFF768).w,a4
000154A2 367C 0010                  		movea.w	#$10,a3
000154A6 3C3C 0000                  		move.w	#0,d6
000154AA 7A0E                       		moveq	#$E,d5
000154AC 6100 FC92                  		bsr.w	FindWall
000154B0 3F01                       		move.w	d1,-(sp)
000154B2 3428 000C                  		move.w	$C(a0),d2
000154B6 3628 0008                  		move.w	8(a0),d3
000154BA 7000                       		moveq	#0,d0
000154BC 1028 0017                  		move.b	$17(a0),d0
000154C0 4880                       		ext.w	d0
000154C2 D440                       		add.w	d0,d2
000154C4 1028 0016                  		move.b	$16(a0),d0
000154C8 4880                       		ext.w	d0
000154CA D640                       		add.w	d0,d3
000154CC 49F8 F76A                  		lea	($FFFFF76A).w,a4
000154D0 367C 0010                  		movea.w	#$10,a3
000154D4 3C3C 0000                  		move.w	#0,d6
000154D8 7A0E                       		moveq	#$E,d5
000154DA 6100 FC64                  		bsr.w	FindWall
000154DE 301F                       		move.w	(sp)+,d0
000154E0 143C 00C0                  		move.b	#-$40,d2
000154E4 6000 FF1E                  		bra.w	loc_14DD0
000154E8                            
000154E8                            ; End of function sub_14E50
000154E8                            
000154E8                            
000154E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000154E8                            
000154E8                            
000154E8                            sub_14EB4:				; XREF: Sonic_Floor
000154E8 3428 000C                  		move.w	$C(a0),d2
000154EC 3628 0008                  		move.w	8(a0),d3
000154F0                            
000154F0                            loc_14EBC:
000154F0 0643 000A                  		addi.w	#$A,d3
000154F4 49F8 F768                  		lea	($FFFFF768).w,a4
000154F8 367C 0010                  		movea.w	#$10,a3
000154FC 3C3C 0000                  		move.w	#0,d6
00015500 7A0E                       		moveq	#$E,d5
00015502 6100 FC3C                  		bsr.w	FindWall
00015506 143C 00C0                  		move.b	#-$40,d2
0001550A 6000 FF32                  		bra.w	loc_14E0A
0001550E                            
0001550E                            ; End of function sub_14EB4
0001550E                            
0001550E                            ; ---------------------------------------------------------------------------
0001550E                            ; Subroutine to	detect when an object hits a wall to its right
0001550E                            ; ---------------------------------------------------------------------------
0001550E                            
0001550E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001550E                            
0001550E                            
0001550E                            ObjHitWallRight:
0001550E D668 0008                  		add.w	8(a0),d3
00015512 3428 000C                  		move.w	$C(a0),d2
00015516 49F8 F768                  		lea	($FFFFF768).w,a4
0001551A 18BC 0000                  		move.b	#0,(a4)
0001551E 367C 0010                  		movea.w	#$10,a3
00015522 3C3C 0000                  		move.w	#0,d6
00015526 7A0E                       		moveq	#$E,d5
00015528 6100 FC16                  		bsr.w	FindWall
0001552C 1638 F768                  		move.b	($FFFFF768).w,d3
00015530 0803 0000                  		btst	#0,d3
00015534 6700                       		beq.s	locret_14F06
00015536 163C 00C0                  		move.b	#-$40,d3
0001553A                            
0001553A                            locret_14F06:
0001553A 4E75                       		rts	
0001553C                            
0001553C                            ; End of function ObjHitWallRight
0001553C                            
0001553C                            ; ---------------------------------------------------------------------------
0001553C                            ; Subroutine preventing	Sonic from running on walls and	ceilings when he
0001553C                            ; touches them
0001553C                            ; ---------------------------------------------------------------------------
0001553C                            
0001553C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001553C                            
0001553C                            
0001553C                            Sonic_DontRunOnWalls:			; XREF: Sonic_Floor; et al
0001553C 3428 000C                  		move.w	$C(a0),d2
00015540 3628 0008                  		move.w	8(a0),d3
00015544 7000                       		moveq	#0,d0
00015546 1028 0016                  		move.b	$16(a0),d0
0001554A 4880                       		ext.w	d0
0001554C 9440                       		sub.w	d0,d2
0001554E 0A42 000F                  		eori.w	#$F,d2
00015552 1028 0017                  		move.b	$17(a0),d0
00015556 4880                       		ext.w	d0
00015558 D640                       		add.w	d0,d3
0001555A 49F8 F768                  		lea	($FFFFF768).w,a4
0001555E 367C FFF0                  		movea.w	#-$10,a3
00015562 3C3C 1000                  		move.w	#$1000,d6
00015566 7A0E                       		moveq	#$E,d5
00015568 6100 FA98                  		bsr.w	FindFloor
0001556C 3F01                       		move.w	d1,-(sp)
0001556E 3428 000C                  		move.w	$C(a0),d2
00015572 3628 0008                  		move.w	8(a0),d3
00015576 7000                       		moveq	#0,d0
00015578 1028 0016                  		move.b	$16(a0),d0
0001557C 4880                       		ext.w	d0
0001557E 9440                       		sub.w	d0,d2
00015580 0A42 000F                  		eori.w	#$F,d2
00015584 1028 0017                  		move.b	$17(a0),d0
00015588 4880                       		ext.w	d0
0001558A 9640                       		sub.w	d0,d3
0001558C 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015590 367C FFF0                  		movea.w	#-$10,a3
00015594 3C3C 1000                  		move.w	#$1000,d6
00015598 7A0E                       		moveq	#$E,d5
0001559A 6100 FA66                  		bsr.w	FindFloor
0001559E 301F                       		move.w	(sp)+,d0
000155A0 143C 0080                  		move.b	#-$80,d2
000155A4 6000 FE5E                  		bra.w	loc_14DD0
000155A8                            ; End of function Sonic_DontRunOnWalls
000155A8                            
000155A8                            ; ===========================================================================
000155A8 3428 000C                  		move.w	$C(a0),d2
000155AC 3628 0008                  		move.w	8(a0),d3
000155B0                            
000155B0                            loc_14F7C:
000155B0 0442 000A                  		subi.w	#$A,d2
000155B4 0A42 000F                  		eori.w	#$F,d2
000155B8 49F8 F768                  		lea	($FFFFF768).w,a4
000155BC 367C FFF0                  		movea.w	#-$10,a3
000155C0 3C3C 1000                  		move.w	#$1000,d6
000155C4 7A0E                       		moveq	#$E,d5
000155C6 6100 FA3A                  		bsr.w	FindFloor
000155CA 143C 0080                  		move.b	#-$80,d2
000155CE 6000 FE6E                  		bra.w	loc_14E0A
000155D2                            
000155D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000155D2                            
000155D2                            
000155D2                            ObjHitCeiling:
000155D2 3428 000C                  		move.w	$C(a0),d2
000155D6 3628 0008                  		move.w	8(a0),d3
000155DA 7000                       		moveq	#0,d0
000155DC 1028 0016                  		move.b	$16(a0),d0
000155E0 4880                       		ext.w	d0
000155E2 9440                       		sub.w	d0,d2
000155E4 0A42 000F                  		eori.w	#$F,d2
000155E8 49F8 F768                  		lea	($FFFFF768).w,a4
000155EC 367C FFF0                  		movea.w	#-$10,a3
000155F0 3C3C 1000                  		move.w	#$1000,d6
000155F4 7A0E                       		moveq	#$E,d5
000155F6 6100 FA0A                  		bsr.w	FindFloor
000155FA 1638 F768                  		move.b	($FFFFF768).w,d3
000155FE 0803 0000                  		btst	#0,d3
00015602 6700                       		beq.s	locret_14FD4
00015604 163C 0080                  		move.b	#-$80,d3
00015608                            
00015608                            locret_14FD4:
00015608 4E75                       		rts	
0001560A                            ; End of function ObjHitCeiling
0001560A                            
0001560A                            ; ===========================================================================
0001560A                            
0001560A                            loc_14FD6:				; XREF: sub_14D48
0001560A 3428 000C                  		move.w	$C(a0),d2
0001560E 3628 0008                  		move.w	8(a0),d3
00015612 7000                       		moveq	#0,d0
00015614 1028 0017                  		move.b	$17(a0),d0
00015618 4880                       		ext.w	d0
0001561A 9440                       		sub.w	d0,d2
0001561C 1028 0016                  		move.b	$16(a0),d0
00015620 4880                       		ext.w	d0
00015622 9640                       		sub.w	d0,d3
00015624 0A43 000F                  		eori.w	#$F,d3
00015628 49F8 F768                  		lea	($FFFFF768).w,a4
0001562C 367C FFF0                  		movea.w	#-$10,a3
00015630 3C3C 0800                  		move.w	#$800,d6
00015634 7A0E                       		moveq	#$E,d5
00015636 6100 FB08                  		bsr.w	FindWall
0001563A 3F01                       		move.w	d1,-(sp)
0001563C 3428 000C                  		move.w	$C(a0),d2
00015640 3628 0008                  		move.w	8(a0),d3
00015644 7000                       		moveq	#0,d0
00015646 1028 0017                  		move.b	$17(a0),d0
0001564A 4880                       		ext.w	d0
0001564C D440                       		add.w	d0,d2
0001564E 1028 0016                  		move.b	$16(a0),d0
00015652 4880                       		ext.w	d0
00015654 9640                       		sub.w	d0,d3
00015656 0A43 000F                  		eori.w	#$F,d3
0001565A 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001565E 367C FFF0                  		movea.w	#-$10,a3
00015662 3C3C 0800                  		move.w	#$800,d6
00015666 7A0E                       		moveq	#$E,d5
00015668 6100 FAD6                  		bsr.w	FindWall
0001566C 301F                       		move.w	(sp)+,d0
0001566E 143C 0040                  		move.b	#$40,d2
00015672 6000 FD90                  		bra.w	loc_14DD0
00015676                            
00015676                            ; ---------------------------------------------------------------------------
00015676                            ; Subroutine to	stop Sonic when	he jumps at a wall
00015676                            ; ---------------------------------------------------------------------------
00015676                            
00015676                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015676                            
00015676                            
00015676                            Sonic_HitWall:				; XREF: Sonic_Floor
00015676 3428 000C                  		move.w	$C(a0),d2
0001567A 3628 0008                  		move.w	8(a0),d3
0001567E                            
0001567E                            loc_1504A:
0001567E 0443 000A                  		subi.w	#$A,d3
00015682 0A43 000F                  		eori.w	#$F,d3
00015686 49F8 F768                  		lea	($FFFFF768).w,a4
0001568A 367C FFF0                  		movea.w	#-$10,a3
0001568E 3C3C 0800                  		move.w	#$800,d6
00015692 7A0E                       		moveq	#$E,d5
00015694 6100 FAAA                  		bsr.w	FindWall
00015698 143C 0040                  		move.b	#$40,d2
0001569C 6000 FDA0                  		bra.w	loc_14E0A
000156A0                            ; End of function Sonic_HitWall
000156A0                            
000156A0                            ; ---------------------------------------------------------------------------
000156A0                            ; Subroutine to	detect when an object hits a wall to its left
000156A0                            ; ---------------------------------------------------------------------------
000156A0                            
000156A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000156A0                            
000156A0                            
000156A0                            ObjHitWallLeft:
000156A0 D668 0008                  		add.w	8(a0),d3
000156A4 3428 000C                  		move.w	$C(a0),d2
000156A8 49F8 F768                  		lea	($FFFFF768).w,a4
000156AC 18BC 0000                  		move.b	#0,(a4)
000156B0 367C FFF0                  		movea.w	#-$10,a3
000156B4 3C3C 0800                  		move.w	#$800,d6
000156B8 7A0E                       		moveq	#$E,d5
000156BA 6100 FA84                  		bsr.w	FindWall
000156BE 1638 F768                  		move.b	($FFFFF768).w,d3
000156C2 0803 0000                  		btst	#0,d3
000156C6 6700                       		beq.s	locret_15098
000156C8 163C 0040                  		move.b	#$40,d3
000156CC                            
000156CC                            locret_15098:
000156CC 4E75                       		rts	
000156CE                            ; End of function ObjHitWallLeft
000156CE                            
000156CE                            ; ===========================================================================
000156CE                            ; ---------------------------------------------------------------------------
000156CE                            ; Object 66 - rotating disc that grabs Sonic (SBZ)
000156CE                            ; ---------------------------------------------------------------------------
000156CE                            
000156CE                            Obj66:					; XREF: Obj_Index
000156CE 7000                       		moveq	#0,d0
000156D0 1028 0024                  		move.b	$24(a0),d0
000156D4 323B 0000                  		move.w	Obj66_Index(pc,d0.w),d1
000156D8 4EFB 1000                  		jmp	Obj66_Index(pc,d1.w)
000156DC                            ; ===========================================================================
000156DC 0000                       Obj66_Index:	dc.w Obj66_Main-Obj66_Index
000156DE 0000                       		dc.w Obj66_Action-Obj66_Index
000156E0 0000                       		dc.w Obj66_Display-Obj66_Index
000156E2 0000                       		dc.w Obj66_Release-Obj66_Index
000156E4                            ; ===========================================================================
000156E4                            
000156E4                            Obj66_Main:				; XREF: Obj66_Index
000156E4 5428 0024                  		addq.b	#2,$24(a0)
000156E8 323C 0001                  		move.w	#1,d1
000156EC 2248                       		movea.l	a0,a1
000156EE 6000                       		bra.s	Obj66_MakeItem
000156F0                            ; ===========================================================================
000156F0                            
000156F0                            Obj66_Loop:
000156F0 6100 893C                  		bsr.w	SingleObjLoad
000156F4 6600                       		bne.s	loc_150FE
000156F6 12BC 0066                  		move.b	#$66,0(a1)
000156FA 5829 0024                  		addq.b	#4,$24(a1)
000156FE 3368 0008 0008             		move.w	8(a0),8(a1)
00015704 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001570A 137C 0003 0018             		move.b	#3,$18(a1)
00015710 137C 0010 001A             		move.b	#$10,$1A(a1)
00015716                            
00015716                            Obj66_MakeItem:				; XREF: Obj66_Main
00015716 237C 0000 0000 0004        		move.l	#Map_obj66,4(a1)
0001571E 337C 4348 0002             		move.w	#$4348,2(a1)
00015724 0029 0004 0001             		ori.b	#4,1(a1)
0001572A 137C 0038 0019             		move.b	#$38,$19(a1)
00015730                            
00015730                            loc_150FE:
00015730 51C9 FFBE                  		dbf	d1,Obj66_Loop
00015734                            
00015734 117C 0030 0019             		move.b	#$30,$19(a0)
0001573A 117C 0004 0018             		move.b	#4,$18(a0)
00015740 317C 003C 0030             		move.w	#$3C,$30(a0)
00015746 117C 0001 0034             		move.b	#1,$34(a0)
0001574C 1168 0028 0038             		move.b	$28(a0),$38(a0)
00015752                            
00015752                            Obj66_Action:				; XREF: Obj66_Index
00015752 6100 0000                  		bsr.w	Obj66_ChkSwitch
00015756 4A28 0001                  		tst.b	1(a0)
0001575A 6A00 0000                  		bpl.w	Obj66_Display
0001575E 323C 0030                  		move.w	#$30,d1
00015762 3401                       		move.w	d1,d2
00015764 3602                       		move.w	d2,d3
00015766 5243                       		addq.w	#1,d3
00015768 3828 0008                  		move.w	8(a0),d4
0001576C 6100 A80A                  		bsr.w	SolidObject
00015770 0828 0005 0022             		btst	#5,$22(a0)
00015776 6700 0000                  		beq.w	Obj66_Display
0001577A 43F8 D000                  		lea	($FFFFD000).w,a1
0001577E 720E                       		moveq	#$E,d1
00015780 3029 0008                  		move.w	8(a1),d0
00015784 B068 0008                  		cmp.w	8(a0),d0
00015788 6500                       		bcs.s	Obj66_GrabSonic
0001578A 7207                       		moveq	#7,d1
0001578C                            
0001578C                            Obj66_GrabSonic:
0001578C B228 001A                  		cmp.b	$1A(a0),d1
00015790 6600                       		bne.s	Obj66_Display
00015792 1141 0032                  		move.b	d1,$32(a0)
00015796 5828 0024                  		addq.b	#4,$24(a0)
0001579A 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
000157A0 137C 0002 001C             		move.b	#2,$1C(a1)	; make Sonic use "rolling" animation
000157A6 337C 0800 0014             		move.w	#$800,$14(a1)
000157AC 337C 0000 0010             		move.w	#0,$10(a1)
000157B2 337C 0000 0012             		move.w	#0,$12(a1)
000157B8 08A8 0005 0022             		bclr	#5,$22(a0)
000157BE 08A9 0005 0022             		bclr	#5,$22(a1)
000157C4 08E9 0001 0022             		bset	#1,$22(a1)
000157CA 3429 0008                  		move.w	8(a1),d2
000157CE 3629 000C                  		move.w	$C(a1),d3
000157D2 6100 0000                  		bsr.w	Obj66_ChgPos
000157D6 D569 0008                  		add.w	d2,8(a1)
000157DA D769 000C                  		add.w	d3,$C(a1)
000157DE E0E9 0008                  		asr	8(a1)
000157E2 E0E9 000C                  		asr	$C(a1)
000157E6                            
000157E6                            Obj66_Display:				; XREF: Obj66_Index
000157E6 6000 A468                  		bra.w	MarkObjGone
000157EA                            ; ===========================================================================
000157EA                            
000157EA                            Obj66_Release:				; XREF: Obj66_Index
000157EA 1028 001A                  		move.b	$1A(a0),d0
000157EE 0C00 0004                  		cmpi.b	#4,d0
000157F2 6700                       		beq.s	loc_151C8
000157F4 0C00 0007                  		cmpi.b	#7,d0
000157F8 6600                       		bne.s	loc_151F8
000157FA                            
000157FA                            loc_151C8:
000157FA B028 0032                  		cmp.b	$32(a0),d0
000157FE 6700                       		beq.s	loc_151F8
00015800 43F8 D000                  		lea	($FFFFD000).w,a1
00015804 337C 0000 0010             		move.w	#0,$10(a1)
0001580A 337C 0800 0012             		move.w	#$800,$12(a1)
00015810 0C00 0004                  		cmpi.b	#4,d0
00015814 6700                       		beq.s	loc_151F0
00015816 337C 0800 0010             		move.w	#$800,$10(a1)
0001581C 337C 0800 0012             		move.w	#$800,$12(a1)
00015822                            
00015822                            loc_151F0:
00015822 4238 F7C8                  		clr.b	($FFFFF7C8).w	; unlock controls
00015826 5928 0024                  		subq.b	#4,$24(a0)
0001582A                            
0001582A                            loc_151F8:
0001582A 6100                       		bsr.s	Obj66_ChkSwitch
0001582C 6100                       		bsr.s	Obj66_ChgPos
0001582E 6000 A420                  		bra.w	MarkObjGone
00015832                            
00015832                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015832                            
00015832                            
00015832                            Obj66_ChkSwitch:			; XREF: Obj66_Action
00015832 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00015836 7000                       		moveq	#0,d0
00015838 1028 0038                  		move.b	$38(a0),d0
0001583C 0832 0000 0000             		btst	#0,(a2,d0.w)	; is switch pressed?
00015842 6700                       		beq.s	loc_15224	; if not, branch
00015844 4A28 0036                  		tst.b	$36(a0)		; has switch previously	been pressed?
00015848 6600                       		bne.s	Obj66_Animate	; if yes, branch
0001584A 4428 0034                  		neg.b	$34(a0)
0001584E 117C 0001 0036             		move.b	#1,$36(a0)	; set to "previously pressed"
00015854 6000                       		bra.s	Obj66_Animate
00015856                            ; ===========================================================================
00015856                            
00015856                            loc_15224:
00015856 4228 0036                  		clr.b	$36(a0)		; set to "not yet pressed"
0001585A                            
0001585A                            Obj66_Animate:
0001585A 5328 001E                  		subq.b	#1,$1E(a0)
0001585E 6A00                       		bpl.s	locret_15246
00015860 117C 0007 001E             		move.b	#7,$1E(a0)
00015866 1228 0034                  		move.b	$34(a0),d1
0001586A 1028 001A                  		move.b	$1A(a0),d0
0001586E D001                       		add.b	d1,d0
00015870 0200 000F                  		andi.b	#$F,d0
00015874 1140 001A                  		move.b	d0,$1A(a0)
00015878                            
00015878                            locret_15246:
00015878 4E75                       		rts	
0001587A                            ; End of function Obj66_ChkSwitch
0001587A                            
0001587A                            
0001587A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001587A                            
0001587A                            
0001587A                            Obj66_ChgPos:				; XREF: Obj66_GrabSonic
0001587A 43F8 D000                  		lea	($FFFFD000).w,a1
0001587E 7000                       		moveq	#0,d0
00015880 1028 001A                  		move.b	$1A(a0),d0
00015884 D040                       		add.w	d0,d0
00015886 45FB 0000                  		lea	Obj66_PosData(pc,d0.w),a2
0001588A 101A                       		move.b	(a2)+,d0
0001588C 4880                       		ext.w	d0
0001588E D068 0008                  		add.w	8(a0),d0
00015892 3340 0008                  		move.w	d0,8(a1)
00015896 101A                       		move.b	(a2)+,d0
00015898 4880                       		ext.w	d0
0001589A D068 000C                  		add.w	$C(a0),d0
0001589E 3340 000C                  		move.w	d0,$C(a1)
000158A2 4E75                       		rts	
000158A4                            ; End of function Obj66_ChgPos
000158A4                            
000158A4                            ; ===========================================================================
000158A4 E000 E20E                  Obj66_PosData:	dc.b  $E0,   0,	$E2,  $E ; disc	x-pos, Sonic x-pos, disc y-pos,	Sonic y-pos
000158A8 E818 F21E                  		dc.b  $E8, $18,	$F2, $1E
000158AC 0020 0E1E                  		dc.b	0, $20,	 $E, $1E
000158B0 1818 1E0E                  		dc.b  $18, $18,	$1E,  $E
000158B4 2000 1EF2                  		dc.b  $20,   0,	$1E, $F2
000158B8 18E8 0EE2                  		dc.b  $18, $E8,	 $E, $E2
000158BC 00E0 F2E2                  		dc.b	0, $E0,	$F2, $E2
000158C0 E8E8 E2F2                  		dc.b  $E8, $E8,	$E2, $F2
000158C4                            ; ---------------------------------------------------------------------------
000158C4                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
000158C4                            ; ---------------------------------------------------------------------------
000158C4                            Map_obj66:
000158C4                            	include "_maps\obj66.asm"
000158C4                            ; ---------------------------------------------------------------------------
000158C4                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
000158C4                            ; ---------------------------------------------------------------------------
000158C4 0000 0000                  		dc.w byte_152B4-Map_obj66, byte_152D3-Map_obj66
000158C8 0000 0000                  		dc.w byte_152F2-Map_obj66, byte_15311-Map_obj66
000158CC 0000 0000                  		dc.w byte_15330-Map_obj66, byte_1534F-Map_obj66
000158D0 0000 0000                  		dc.w byte_1536E-Map_obj66, byte_1538D-Map_obj66
000158D4 0000 0000                  		dc.w byte_153AC-Map_obj66, byte_153CB-Map_obj66
000158D8 0000 0000                  		dc.w byte_153EA-Map_obj66, byte_15409-Map_obj66
000158DC 0000 0000                  		dc.w byte_15428-Map_obj66, byte_15447-Map_obj66
000158E0 0000 0000                  		dc.w byte_15466-Map_obj66, byte_15485-Map_obj66
000158E4 0000                       		dc.w byte_154A4-Map_obj66
000158E6 06                         byte_152B4:	dc.b 6
000158E7 E805 0022 D0               		dc.b $E8, 5, 0,	$22, $D0
000158EC 0805 1022 D0               		dc.b 8,	5, $10,	$22, $D0
000158F1 E80A 0000 C8               		dc.b $E8, $A, 0, 0, $C8
000158F6 E80A 0800 E0               		dc.b $E8, $A, 8, 0, $E0
000158FB 000A 1000 C8               		dc.b 0,	$A, $10, 0, $C8
00015900 000A 1800 E0               		dc.b 0,	$A, $18, 0, $E0
00015905 06                         byte_152D3:	dc.b 6
00015906 F803 0026 D0               		dc.b $F8, 3, 0,	$26, $D0
0001590B 1805 002A D8               		dc.b $18, 5, 0,	$2A, $D8
00015910 F60A 0000 CA               		dc.b $F6, $A, 0, 0, $CA
00015915 F60A 0800 E2               		dc.b $F6, $A, 8, 0, $E2
0001591A 0E0A 1000 CA               		dc.b $E, $A, $10, 0, $CA
0001591F 0E0A 1800 E2               		dc.b $E, $A, $18, 0, $E2
00015924 06                         byte_152F2:	dc.b 6
00015925 0006 002E D0               		dc.b 0,	6, 0, $2E, $D0
0001592A 2009 0034 E8               		dc.b $20, 9, 0,	$34, $E8
0001592F 000A 0000 D0               		dc.b 0,	$A, 0, 0, $D0
00015934 000A 0800 E8               		dc.b 0,	$A, 8, 0, $E8
00015939 180A 1000 D0               		dc.b $18, $A, $10, 0, $D0
0001593E 180A 1800 E8               		dc.b $18, $A, $18, 0, $E8
00015943 06                         byte_15311:	dc.b 6
00015944 0807 003A D8               		dc.b 8,	7, 0, $3A, $D8
00015949 2808 0042 F0               		dc.b $28, 8, 0,	$42, $F0
0001594E 060A 0000 DA               		dc.b 6,	$A, 0, 0, $DA
00015953 060A 0800 F2               		dc.b 6,	$A, 8, 0, $F2
00015958 1E0A 1000 DA               		dc.b $1E, $A, $10, 0, $DA
0001595D 1E0A 1800 F2               		dc.b $1E, $A, $18, 0, $F2
00015962 06                         byte_15330:	dc.b 6
00015963 2005 0045 E8               		dc.b $20, 5, 0,	$45, $E8
00015968 2005 0845 08               		dc.b $20, 5, 8,	$45, 8
0001596D 080A 0000 E8               		dc.b 8,	$A, 0, 0, $E8
00015972 080A 0800 00               		dc.b 8,	$A, 8, 0, 0
00015977 200A 1000 E8               		dc.b $20, $A, $10, 0, $E8
0001597C 200A 1800 00               		dc.b $20, $A, $18, 0, 0
00015981 06                         byte_1534F:	dc.b 6
00015982 2808 0842 F8               		dc.b $28, 8, 8,	$42, $F8
00015987 0807 083A 18               		dc.b 8,	7, 8, $3A, $18
0001598C 060A 0000 F6               		dc.b 6,	$A, 0, 0, $F6
00015991 060A 0800 0E               		dc.b 6,	$A, 8, 0, $E
00015996 1E0A 1000 F6               		dc.b $1E, $A, $10, 0, $F6
0001599B 1E0A 1800 0E               		dc.b $1E, $A, $18, 0, $E
000159A0 06                         byte_1536E:	dc.b 6
000159A1 2009 0834 00               		dc.b $20, 9, 8,	$34, 0
000159A6 0006 082E 20               		dc.b 0,	6, 8, $2E, $20
000159AB 000A 0000 00               		dc.b 0,	$A, 0, 0, 0
000159B0 000A 0800 18               		dc.b 0,	$A, 8, 0, $18
000159B5 180A 1000 00               		dc.b $18, $A, $10, 0, 0
000159BA 180A 1800 18               		dc.b $18, $A, $18, 0, $18
000159BF 06                         byte_1538D:	dc.b 6
000159C0 1805 082A 18               		dc.b $18, 5, 8,	$2A, $18
000159C5 F803 0826 28               		dc.b $F8, 3, 8,	$26, $28
000159CA F60A 0000 06               		dc.b $F6, $A, 0, 0, 6
000159CF F60A 0800 1E               		dc.b $F6, $A, 8, 0, $1E
000159D4 0E0A 1000 06               		dc.b $E, $A, $10, 0, 6
000159D9 0E0A 1800 1E               		dc.b $E, $A, $18, 0, $1E
000159DE 06                         byte_153AC:	dc.b 6
000159DF E805 0822 20               		dc.b $E8, 5, 8,	$22, $20
000159E4 0805 1822 20               		dc.b 8,	5, $18,	$22, $20
000159E9 E80A 0000 08               		dc.b $E8, $A, 0, 0, 8
000159EE E80A 0800 20               		dc.b $E8, $A, 8, 0, $20
000159F3 000A 1000 08               		dc.b 0,	$A, $10, 0, 8
000159F8 000A 1800 20               		dc.b 0,	$A, $18, 0, $20
000159FD 06                         byte_153CB:	dc.b 6
000159FE D805 182A 18               		dc.b $D8, 5, $18, $2A, $18
00015A03 E803 1826 28               		dc.b $E8, 3, $18, $26, $28
00015A08 DA0A 0000 06               		dc.b $DA, $A, 0, 0, 6
00015A0D DA0A 0800 1E               		dc.b $DA, $A, 8, 0, $1E
00015A12 F20A 1000 06               		dc.b $F2, $A, $10, 0, 6
00015A17 F20A 1800 1E               		dc.b $F2, $A, $18, 0, $1E
00015A1C 06                         byte_153EA:	dc.b 6
00015A1D D009 1834 00               		dc.b $D0, 9, $18, $34, 0
00015A22 E806 182E 20               		dc.b $E8, 6, $18, $2E, $20
00015A27 D00A 0000 00               		dc.b $D0, $A, 0, 0, 0
00015A2C D00A 0800 18               		dc.b $D0, $A, 8, 0, $18
00015A31 E80A 1000 00               		dc.b $E8, $A, $10, 0, 0
00015A36 E80A 1800 18               		dc.b $E8, $A, $18, 0, $18
00015A3B 06                         byte_15409:	dc.b 6
00015A3C D008 1842 F8               		dc.b $D0, 8, $18, $42, $F8
00015A41 D807 183A 18               		dc.b $D8, 7, $18, $3A, $18
00015A46 CA0A 0000 F6               		dc.b $CA, $A, 0, 0, $F6
00015A4B CA0A 0800 0E               		dc.b $CA, $A, 8, 0, $E
00015A50 E20A 1000 F6               		dc.b $E2, $A, $10, 0, $F6
00015A55 E20A 1800 0E               		dc.b $E2, $A, $18, 0, $E
00015A5A 06                         byte_15428:	dc.b 6
00015A5B D005 1045 E8               		dc.b $D0, 5, $10, $45, $E8
00015A60 D005 1845 08               		dc.b $D0, 5, $18, $45, 8
00015A65 C80A 0000 E8               		dc.b $C8, $A, 0, 0, $E8
00015A6A C80A 0800 00               		dc.b $C8, $A, 8, 0, 0
00015A6F E00A 1000 E8               		dc.b $E0, $A, $10, 0, $E8
00015A74 E00A 1800 00               		dc.b $E0, $A, $18, 0, 0
00015A79 06                         byte_15447:	dc.b 6
00015A7A D807 103A D8               		dc.b $D8, 7, $10, $3A, $D8
00015A7F D008 1042 F0               		dc.b $D0, 8, $10, $42, $F0
00015A84 CA0A 0000 DA               		dc.b $CA, $A, 0, 0, $DA
00015A89 CA0A 0800 F2               		dc.b $CA, $A, 8, 0, $F2
00015A8E E20A 1000 DA               		dc.b $E2, $A, $10, 0, $DA
00015A93 E20A 1800 F2               		dc.b $E2, $A, $18, 0, $F2
00015A98 06                         byte_15466:	dc.b 6
00015A99 E806 102E D0               		dc.b $E8, 6, $10, $2E, $D0
00015A9E D009 1034 E8               		dc.b $D0, 9, $10, $34, $E8
00015AA3 D00A 0000 D0               		dc.b $D0, $A, 0, 0, $D0
00015AA8 D00A 0800 E8               		dc.b $D0, $A, 8, 0, $E8
00015AAD E80A 1000 D0               		dc.b $E8, $A, $10, 0, $D0
00015AB2 E80A 1800 E8               		dc.b $E8, $A, $18, 0, $E8
00015AB7 06                         byte_15485:	dc.b 6
00015AB8 E803 1026 D0               		dc.b $E8, 3, $10, $26, $D0
00015ABD D805 102A D8               		dc.b $D8, 5, $10, $2A, $D8
00015AC2 DA0A 0000 CA               		dc.b $DA, $A, 0, 0, $CA
00015AC7 DA0A 0800 E2               		dc.b $DA, $A, 8, 0, $E2
00015ACC F20A 1000 CA               		dc.b $F2, $A, $10, 0, $CA
00015AD1 F20A 1800 E2               		dc.b $F2, $A, $18, 0, $E2
00015AD6 0C                         byte_154A4:	dc.b $C
00015AD7 C80D 0009 E0               		dc.b $C8, $D, 0, 9, $E0
00015ADC D00A 0011 D0               		dc.b $D0, $A, 0, $11, $D0
00015AE1 E007 001A C8               		dc.b $E0, 7, 0,	$1A, $C8
00015AE6 C80D 0809 00               		dc.b $C8, $D, 8, 9, 0
00015AEB D00A 0811 18               		dc.b $D0, $A, 8, $11, $18
00015AF0 E007 081A 28               		dc.b $E0, 7, 8,	$1A, $28
00015AF5 0007 101A C8               		dc.b 0,	7, $10,	$1A, $C8
00015AFA 180A 1011 D0               		dc.b $18, $A, $10, $11,	$D0
00015AFF 280D 1009 E0               		dc.b $28, $D, $10, 9, $E0
00015B04 280D 1809 00               		dc.b $28, $D, $18, 9, 0
00015B09 180A 1811 18               		dc.b $18, $A, $18, $11,	$18
00015B0E 0007 181A 28               		dc.b 0,	7, $18,	$1A, $28
00015B14 00                         		even
00015B14 00                         		even
00015B14                            
00015B14                            ; ===========================================================================
00015B14                            ; ---------------------------------------------------------------------------
00015B14                            ; Object 67 - disc that	you run	around (SBZ)
00015B14                            ; ---------------------------------------------------------------------------
00015B14                            
00015B14                            Obj67:					; XREF: Obj_Index
00015B14 7000                       		moveq	#0,d0
00015B16 1028 0024                  		move.b	$24(a0),d0
00015B1A 323B 0000                  		move.w	Obj67_Index(pc,d0.w),d1
00015B1E 4EFB 1000                  		jmp	Obj67_Index(pc,d1.w)
00015B22                            ; ===========================================================================
00015B22 0000                       Obj67_Index:	dc.w Obj67_Main-Obj67_Index
00015B24 0000                       		dc.w Obj67_Action-Obj67_Index
00015B26                            ; ===========================================================================
00015B26                            
00015B26                            Obj67_Main:				; XREF: Obj67_Index
00015B26 5428 0024                  		addq.b	#2,$24(a0)
00015B2A 217C 0000 0000 0004        		move.l	#Map_obj67,4(a0)
00015B32 317C C344 0002             		move.w	#$C344,2(a0)
00015B38 117C 0004 0001             		move.b	#4,1(a0)
00015B3E 117C 0004 0018             		move.b	#4,$18(a0)
00015B44 117C 0008 0019             		move.b	#8,$19(a0)
00015B4A 3168 0008 0032             		move.w	8(a0),$32(a0)
00015B50 3168 000C 0030             		move.w	$C(a0),$30(a0)
00015B56 117C 0018 0034             		move.b	#$18,$34(a0)
00015B5C 117C 0048 0038             		move.b	#$48,$38(a0)
00015B62 1228 0028                  		move.b	$28(a0),d1	; get object type
00015B66 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00015B6A 6700                       		beq.s	loc_15546
00015B6C 117C 0010 0034             		move.b	#$10,$34(a0)
00015B72 117C 0038 0038             		move.b	#$38,$38(a0)
00015B78                            
00015B78                            loc_15546:
00015B78 1228 0028                  		move.b	$28(a0),d1	; get object type
00015B7C 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00015B80 4881                       		ext.w	d1
00015B82 E741                       		asl.w	#3,d1
00015B84 3141 0036                  		move.w	d1,$36(a0)
00015B88 1028 0022                  		move.b	$22(a0),d0
00015B8C E418                       		ror.b	#2,d0
00015B8E 0200 00C0                  		andi.b	#-$40,d0
00015B92 1140 0026                  		move.b	d0,$26(a0)
00015B96                            
00015B96                            Obj67_Action:				; XREF: Obj67_Index
00015B96 6100 0000                  		bsr.w	Obj67_MoveSonic
00015B9A 6100 0000                  		bsr.w	Obj67_MoveSpot
00015B9E 6000 0000                  		bra.w	Obj67_ChkDel
00015BA2                            ; ===========================================================================
00015BA2                            
00015BA2                            Obj67_MoveSonic:			; XREF: Obj67_Action
00015BA2 7400                       		moveq	#0,d2
00015BA4 1428 0038                  		move.b	$38(a0),d2
00015BA8 3602                       		move.w	d2,d3
00015BAA D643                       		add.w	d3,d3
00015BAC 43F8 D000                  		lea	($FFFFD000).w,a1
00015BB0 3029 0008                  		move.w	8(a1),d0
00015BB4 9068 0032                  		sub.w	$32(a0),d0
00015BB8 D042                       		add.w	d2,d0
00015BBA B043                       		cmp.w	d3,d0
00015BBC 6400                       		bcc.s	loc_155A8
00015BBE 3229 000C                  		move.w	$C(a1),d1
00015BC2 9268 0030                  		sub.w	$30(a0),d1
00015BC6 D242                       		add.w	d2,d1
00015BC8 B243                       		cmp.w	d3,d1
00015BCA 6400                       		bcc.s	loc_155A8
00015BCC 0829 0001 0022             		btst	#1,$22(a1)
00015BD2 6700                       		beq.s	loc_155B8
00015BD4 4228 003A                  		clr.b	$3A(a0)
00015BD8 4E75                       		rts	
00015BDA                            ; ===========================================================================
00015BDA                            
00015BDA                            loc_155A8:
00015BDA 4A28 003A                  		tst.b	$3A(a0)
00015BDE 6700                       		beq.s	locret_155B6
00015BE0 4229 0038                  		clr.b	$38(a1)
00015BE4 4228 003A                  		clr.b	$3A(a0)
00015BE8                            
00015BE8                            locret_155B6:
00015BE8 4E75                       		rts	
00015BEA                            ; ===========================================================================
00015BEA                            
00015BEA                            loc_155B8:
00015BEA 4A28 003A                  		tst.b	$3A(a0)
00015BEE 6600                       		bne.s	loc_155E2
00015BF0 117C 0001 003A             		move.b	#1,$3A(a0)
00015BF6 0829 0002 0022             		btst	#2,$22(a1)
00015BFC 6600                       		bne.s	loc_155D0
00015BFE 4229 001C                  		clr.b	$1C(a1)
00015C02                            
00015C02                            loc_155D0:
00015C02 08A9 0005 0022             		bclr	#5,$22(a1)
00015C08 137C 0001 001D             		move.b	#1,$1D(a1)
00015C0E 137C 0001 0038             		move.b	#1,$38(a1)
00015C14                            
00015C14                            loc_155E2:
00015C14 3029 0014                  		move.w	$14(a1),d0
00015C18 4A68 0036                  		tst.w	$36(a0)
00015C1C 6A00                       		bpl.s	loc_15608
00015C1E 0C40 FC00                  		cmpi.w	#-$400,d0
00015C22 6F00                       		ble.s	loc_155FA
00015C24 337C FC00 0014             		move.w	#-$400,$14(a1)
00015C2A 4E75                       		rts	
00015C2C                            ; ===========================================================================
00015C2C                            
00015C2C                            loc_155FA:
00015C2C 0C40 F100                  		cmpi.w	#-$F00,d0
00015C30 6C00                       		bge.s	locret_15606
00015C32 337C F100 0014             		move.w	#-$F00,$14(a1)
00015C38                            
00015C38                            locret_15606:
00015C38 4E75                       		rts	
00015C3A                            ; ===========================================================================
00015C3A                            
00015C3A                            loc_15608:
00015C3A 0C40 0400                  		cmpi.w	#$400,d0
00015C3E 6C00                       		bge.s	loc_15616
00015C40 337C 0400 0014             		move.w	#$400,$14(a1)
00015C46 4E75                       		rts	
00015C48                            ; ===========================================================================
00015C48                            
00015C48                            loc_15616:
00015C48 0C40 0F00                  		cmpi.w	#$F00,d0
00015C4C 6F00                       		ble.s	locret_15622
00015C4E 337C 0F00 0014             		move.w	#$F00,$14(a1)
00015C54                            
00015C54                            locret_15622:
00015C54 4E75                       		rts	
00015C56                            ; ===========================================================================
00015C56                            
00015C56                            Obj67_MoveSpot:				; XREF: Obj67_Action
00015C56 3028 0036                  		move.w	$36(a0),d0
00015C5A D168 0026                  		add.w	d0,$26(a0)
00015C5E 1028 0026                  		move.b	$26(a0),d0
00015C62 4EB9 0000 2C22             		jsr	(CalcSine).l
00015C68 3428 0030                  		move.w	$30(a0),d2
00015C6C 3628 0032                  		move.w	$32(a0),d3
00015C70 7800                       		moveq	#0,d4
00015C72 1828 0034                  		move.b	$34(a0),d4
00015C76 E14C                       		lsl.w	#8,d4
00015C78 2A04                       		move.l	d4,d5
00015C7A C9C0                       		muls.w	d0,d4
00015C7C 4844                       		swap	d4
00015C7E CBC1                       		muls.w	d1,d5
00015C80 4845                       		swap	d5
00015C82 D842                       		add.w	d2,d4
00015C84 DA43                       		add.w	d3,d5
00015C86 3144 000C                  		move.w	d4,$C(a0)
00015C8A 3145 0008                  		move.w	d5,8(a0)
00015C8E 4E75                       		rts	
00015C90                            ; ===========================================================================
00015C90                            
00015C90                            Obj67_ChkDel:				; XREF: Obj67_Action
00015C90 3028 0032                  		move.w	$32(a0),d0
00015C94 0240 FF80                  		andi.w	#-$80,d0
00015C98 3238 F700                  		move.w	($FFFFF700).w,d1
00015C9C 0441 0080                  		subi.w	#$80,d1
00015CA0 0241 FF80                  		andi.w	#-$80,d1
00015CA4 9041                       		sub.w	d1,d0
00015CA6 0C40 0280                  		cmpi.w	#$280,d0
00015CAA 6200                       		bhi.s	Obj67_Delete
00015CAC 4EF9 0000 DBA8             		jmp	DisplaySprite
00015CB2                            ; ===========================================================================
00015CB2                            
00015CB2                            Obj67_Delete:
00015CB2 4EF9 0000 DBE4             		jmp	DeleteObject
00015CB8                            ; ===========================================================================
00015CB8                            ; ---------------------------------------------------------------------------
00015CB8                            ; Sprite mappings - disc that you run around (SBZ)
00015CB8                            ; (It's just a small blob that moves around in a circle. The disc itself is
00015CB8                            ; part of the level tiles.)
00015CB8                            ; ---------------------------------------------------------------------------
00015CB8                            Map_obj67:
00015CB8                            	include "_maps\obj67.asm"
00015CB8                            ; ---------------------------------------------------------------------------
00015CB8                            ; Sprite mappings - disc that you run around (SBZ)
00015CB8                            ; (It's just a small blob that moves around in a circle. The disc itself is
00015CB8                            ; part of the level tiles.)
00015CB8                            ; ---------------------------------------------------------------------------
00015CB8 0000                       		dc.w byte_15688-Map_obj67
00015CBA 01                         byte_15688:	dc.b 1
00015CBB F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00015CC0                            		even
00015CC0                            		even
00015CC0                            
00015CC0                            ; ===========================================================================
00015CC0                            ; ---------------------------------------------------------------------------
00015CC0                            ; Object 68 - conveyor belts (SBZ)
00015CC0                            ; ---------------------------------------------------------------------------
00015CC0                            
00015CC0                            Obj68:					; XREF: Obj_Index
00015CC0 7000                       		moveq	#0,d0
00015CC2 1028 0024                  		move.b	$24(a0),d0
00015CC6 323B 0000                  		move.w	Obj68_Index(pc,d0.w),d1
00015CCA 4EFB 1000                  		jmp	Obj68_Index(pc,d1.w)
00015CCE                            ; ===========================================================================
00015CCE 0000                       Obj68_Index:	dc.w Obj68_Main-Obj68_Index
00015CD0 0000                       		dc.w Obj68_Action-Obj68_Index
00015CD2                            ; ===========================================================================
00015CD2                            
00015CD2                            Obj68_Main:				; XREF: Obj68_Index
00015CD2 5428 0024                  		addq.b	#2,$24(a0)
00015CD6 117C 0080 0038             		move.b	#128,$38(a0)	; set width to 128 pixels
00015CDC 1228 0028                  		move.b	$28(a0),d1	; get object type
00015CE0 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00015CE4 6700                       		beq.s	loc_156BA	; if zero, branch
00015CE6 117C 0038 0038             		move.b	#56,$38(a0)	; set width to 56 pixels
00015CEC                            
00015CEC                            loc_156BA:
00015CEC 1228 0028                  		move.b	$28(a0),d1	; get object type
00015CF0 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00015CF4 4881                       		ext.w	d1
00015CF6 E841                       		asr.w	#4,d1
00015CF8 3141 0036                  		move.w	d1,$36(a0)	; set belt speed
00015CFC                            
00015CFC                            Obj68_Action:				; XREF: Obj68_Index
00015CFC 6100                       		bsr.s	Obj68_MoveSonic
00015CFE 3028 0008                  		move.w	8(a0),d0
00015D02 0240 FF80                  		andi.w	#$FF80,d0
00015D06 3238 F700                  		move.w	($FFFFF700).w,d1
00015D0A 0441 0080                  		subi.w	#$80,d1
00015D0E 0241 FF80                  		andi.w	#$FF80,d1
00015D12 9041                       		sub.w	d1,d0
00015D14 0C40 0280                  		cmpi.w	#$280,d0
00015D18 6200                       		bhi.s	Obj68_Delete
00015D1A 4E75                       		rts	
00015D1C                            ; ===========================================================================
00015D1C                            
00015D1C                            Obj68_Delete:
00015D1C 4EF9 0000 DBE4             		jmp	DeleteObject
00015D22                            ; ===========================================================================
00015D22                            
00015D22                            Obj68_MoveSonic:			; XREF: Obj68_Action
00015D22 7400                       		moveq	#0,d2
00015D24 1428 0038                  		move.b	$38(a0),d2
00015D28 3602                       		move.w	d2,d3
00015D2A D643                       		add.w	d3,d3
00015D2C 43F8 D000                  		lea	($FFFFD000).w,a1
00015D30 3029 0008                  		move.w	8(a1),d0
00015D34 9068 0008                  		sub.w	8(a0),d0
00015D38 D042                       		add.w	d2,d0
00015D3A B043                       		cmp.w	d3,d0
00015D3C 6400                       		bcc.s	locret_1572E
00015D3E 3229 000C                  		move.w	$C(a1),d1
00015D42 9268 000C                  		sub.w	$C(a0),d1
00015D46 0641 0030                  		addi.w	#$30,d1
00015D4A 0C41 0030                  		cmpi.w	#$30,d1
00015D4E 6400                       		bcc.s	locret_1572E
00015D50 0829 0001 0022             		btst	#1,$22(a1)
00015D56 6600                       		bne.s	locret_1572E
00015D58 3028 0036                  		move.w	$36(a0),d0
00015D5C D169 0008                  		add.w	d0,8(a1)
00015D60                            
00015D60                            locret_1572E:
00015D60 4E75                       		rts	
00015D62                            
00015D62                            ; ===========================================================================
00015D62                            ; ---------------------------------------------------------------------------
00015D62                            ; Object 69 - spinning platforms and trapdoors (SBZ)
00015D62                            ; ---------------------------------------------------------------------------
00015D62                            
00015D62                            Obj69:					; XREF: Obj_Index
00015D62 7000                       		moveq	#0,d0
00015D64 1028 0024                  		move.b	$24(a0),d0
00015D68 323B 0000                  		move.w	Obj69_Index(pc,d0.w),d1
00015D6C 4EFB 1000                  		jmp	Obj69_Index(pc,d1.w)
00015D70                            ; ===========================================================================
00015D70 0000                       Obj69_Index:	dc.w Obj69_Main-Obj69_Index
00015D72 0000                       		dc.w Obj69_Trapdoor-Obj69_Index
00015D74 0000                       		dc.w Obj69_Spinner-Obj69_Index
00015D76                            ; ===========================================================================
00015D76                            
00015D76                            Obj69_Main:				; XREF: Obj69_Index
00015D76 5428 0024                  		addq.b	#2,$24(a0)
00015D7A 217C 0000 0000 0004        		move.l	#Map_obj69,4(a0)
00015D82 317C 4492 0002             		move.w	#$4492,2(a0)
00015D88 0028 0004 0001             		ori.b	#4,1(a0)
00015D8E 117C 0080 0019             		move.b	#$80,$19(a0)
00015D94 7000                       		moveq	#0,d0
00015D96 1028 0028                  		move.b	$28(a0),d0
00015D9A 0240 000F                  		andi.w	#$F,d0
00015D9E C0FC 003C                  		mulu.w	#$3C,d0
00015DA2 3140 0032                  		move.w	d0,$32(a0)
00015DA6 4A28 0028                  		tst.b	$28(a0)
00015DAA 6A00                       		bpl.s	Obj69_Trapdoor
00015DAC 5428 0024                  		addq.b	#2,$24(a0)
00015DB0 217C 0000 0000 0004        		move.l	#Map_obj69a,4(a0)
00015DB8 317C 04DF 0002             		move.w	#$4DF,2(a0)
00015DBE 117C 0010 0019             		move.b	#$10,$19(a0)
00015DC4 117C 0002 001C             		move.b	#2,$1C(a0)
00015DCA 7000                       		moveq	#0,d0
00015DCC 1028 0028                  		move.b	$28(a0),d0	; get object type
00015DD0 3200                       		move.w	d0,d1
00015DD2 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00015DD6 C0FC 0006                  		mulu.w	#6,d0		; multiply by 6
00015DDA 3140 0030                  		move.w	d0,$30(a0)	; set time delay
00015DDE 3140 0032                  		move.w	d0,$32(a0)
00015DE2 0241 0070                  		andi.w	#$70,d1
00015DE6 0641 0010                  		addi.w	#$10,d1
00015DEA E549                       		lsl.w	#2,d1
00015DEC 5341                       		subq.w	#1,d1
00015DEE 3141 0036                  		move.w	d1,$36(a0)
00015DF2 6000                       		bra.s	Obj69_Spinner
00015DF4                            ; ===========================================================================
00015DF4                            
00015DF4                            Obj69_Trapdoor:				; XREF: Obj69_Index
00015DF4 5368 0030                  		subq.w	#1,$30(a0)
00015DF8 6A00                       		bpl.s	Obj69_Animate
00015DFA 3168 0032 0030             		move.w	$32(a0),$30(a0)
00015E00 0868 0000 001C             		bchg	#0,$1C(a0)
00015E06 4A28 0001                  		tst.b	1(a0)
00015E0A 6A00                       		bpl.s	Obj69_Animate
00015E0C 303C 00BB                  		move.w	#$BB,d0
00015E10 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play door sound
00015E16                            
00015E16                            Obj69_Animate:
00015E16 43F9 0000 0000             		lea	(Ani_obj69).l,a1
00015E1C 4EB9 0000 AC42             		jsr	AnimateSprite
00015E22 4A28 001A                  		tst.b	$1A(a0)		; is frame number 0 displayed?
00015E26 6600                       		bne.s	Obj69_NotSolid	; if not, branch
00015E28 323C 004B                  		move.w	#$4B,d1
00015E2C 343C 000C                  		move.w	#$C,d2
00015E30 3602                       		move.w	d2,d3
00015E32 5243                       		addq.w	#1,d3
00015E34 3828 0008                  		move.w	8(a0),d4
00015E38 6100 A13E                  		bsr.w	SolidObject
00015E3C 6000 9E12                  		bra.w	MarkObjGone
00015E40                            ; ===========================================================================
00015E40                            
00015E40                            Obj69_NotSolid:
00015E40 0828 0003 0022             		btst	#3,$22(a0)
00015E46 6700                       		beq.s	Obj69_Display
00015E48 43F8 D000                  		lea	($FFFFD000).w,a1
00015E4C 08A9 0003 0022             		bclr	#3,$22(a1)
00015E52 08A8 0003 0022             		bclr	#3,$22(a0)
00015E58 4228 0025                  		clr.b	$25(a0)
00015E5C                            
00015E5C                            Obj69_Display:
00015E5C 6000 9DF2                  		bra.w	MarkObjGone
00015E60                            ; ===========================================================================
00015E60                            
00015E60                            Obj69_Spinner:				; XREF: Obj69_Index
00015E60 3038 FE04                  		move.w	($FFFFFE04).w,d0
00015E64 C068 0036                  		and.w	$36(a0),d0
00015E68 6600                       		bne.s	Obj69_Delay
00015E6A 117C 0001 0034             		move.b	#1,$34(a0)
00015E70                            
00015E70                            Obj69_Delay:
00015E70 4A28 0034                  		tst.b	$34(a0)
00015E74 6700                       		beq.s	Obj69_Animate2
00015E76 5368 0030                  		subq.w	#1,$30(a0)
00015E7A 6A00                       		bpl.s	Obj69_Animate2
00015E7C 3168 0032 0030             		move.w	$32(a0),$30(a0)
00015E82 4228 0034                  		clr.b	$34(a0)
00015E86 0868 0000 001C             		bchg	#0,$1C(a0)
00015E8C                            
00015E8C                            Obj69_Animate2:
00015E8C 43F9 0000 0000             		lea	(Ani_obj69).l,a1
00015E92 4EB9 0000 AC42             		jsr	AnimateSprite
00015E98 4A28 001A                  		tst.b	$1A(a0)		; check	if frame number	0 is displayed
00015E9C 6600                       		bne.s	Obj69_NotSolid2	; if not, branch
00015E9E 323C 001B                  		move.w	#$1B,d1
00015EA2 343C 0007                  		move.w	#7,d2
00015EA6 3602                       		move.w	d2,d3
00015EA8 5243                       		addq.w	#1,d3
00015EAA 3828 0008                  		move.w	8(a0),d4
00015EAE 6100 A0C8                  		bsr.w	SolidObject
00015EB2 6000 9D9C                  		bra.w	MarkObjGone
00015EB6                            ; ===========================================================================
00015EB6                            
00015EB6                            Obj69_NotSolid2:
00015EB6 0828 0003 0022             		btst	#3,$22(a0)
00015EBC 6700                       		beq.s	Obj69_Display2
00015EBE 43F8 D000                  		lea	($FFFFD000).w,a1
00015EC2 08A9 0003 0022             		bclr	#3,$22(a1)
00015EC8 08A8 0003 0022             		bclr	#3,$22(a0)
00015ECE 4228 0025                  		clr.b	$25(a0)
00015ED2                            
00015ED2                            Obj69_Display2:
00015ED2 6000 9D7C                  		bra.w	MarkObjGone
00015ED6                            ; ===========================================================================
00015ED6                            Ani_obj69:
00015ED6                            	include "_anim\obj69.asm"
00015ED6                            ; ---------------------------------------------------------------------------
00015ED6                            ; Animation script - trapdoor (SBZ)
00015ED6                            ; ---------------------------------------------------------------------------
00015ED6 0000                       		dc.w byte_158AC-Ani_obj69
00015ED8 0000                       		dc.w byte_158B2-Ani_obj69
00015EDA 0000                       		dc.w byte_158B8-Ani_obj69
00015EDC 0000                       		dc.w byte_158CC-Ani_obj69
00015EDE 0300 0102 FE01             byte_158AC:	dc.b 3,	0, 1, 2, $FE, 1
00015EE4 0302 0100 FE01             byte_158B2:	dc.b 3,	2, 1, 0, $FE, 1
00015EEA 0100 0102 0304 4342 4140+  byte_158B8:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00015EF7 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
00015EFE 0100 0102 0304 4342 4140+  byte_158CC:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00015F0B 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
00015F12                            		even
00015F12                            		even
00015F12                            
00015F12                            ; ---------------------------------------------------------------------------
00015F12                            ; Sprite mappings - trapdoor (SBZ)
00015F12                            ; ---------------------------------------------------------------------------
00015F12                            Map_obj69:
00015F12                            	include "_maps\obj69.asm"
00015F12                            ; ---------------------------------------------------------------------------
00015F12                            ; Sprite mappings - trapdoor (SBZ)
00015F12                            ; ---------------------------------------------------------------------------
00015F12 0000                       		dc.w byte_158E6-Map_obj69
00015F14 0000                       		dc.w byte_158FB-Map_obj69
00015F16 0000                       		dc.w byte_15924-Map_obj69
00015F18 04                         byte_158E6:	dc.b 4
00015F19 F40E 0000 C0               		dc.b $F4, $E, 0, 0, $C0
00015F1E F40E 0800 E0               		dc.b $F4, $E, 8, 0, $E0
00015F23 F40E 0000 00               		dc.b $F4, $E, 0, 0, 0
00015F28 F40E 0800 20               		dc.b $F4, $E, 8, 0, $20
00015F2D 08                         byte_158FB:	dc.b 8
00015F2E F20F 000C B6               		dc.b $F2, $F, 0, $C, $B6
00015F33 1A0F 180C D6               		dc.b $1A, $F, $18, $C, $D6
00015F38 020A 001C D6               		dc.b 2,	$A, 0, $1C, $D6
00015F3D 120A 181C BE               		dc.b $12, $A, $18, $1C,	$BE
00015F42 F20F 080C 2A               		dc.b $F2, $F, 8, $C, $2A
00015F47 1A0F 100C 0A               		dc.b $1A, $F, $10, $C, $A
00015F4C 020A 081C 12               		dc.b 2,	$A, 8, $1C, $12
00015F51 120A 101C 2A               		dc.b $12, $A, $10, $1C,	$2A
00015F56 04                         byte_15924:	dc.b 4
00015F57 000B 0025 B4               		dc.b 0,	$B, 0, $25, $B4
00015F5C 200B 1025 B4               		dc.b $20, $B, $10, $25,	$B4
00015F61 000B 0025 34               		dc.b 0,	$B, 0, $25, $34
00015F66 200B 1025 34               		dc.b $20, $B, $10, $25,	$34
00015F6C 00                         		even
00015F6C 00                         		even
00015F6C                            
00015F6C                            ; ---------------------------------------------------------------------------
00015F6C                            ; Sprite mappings - spinning platforms (SBZ)
00015F6C                            ; ---------------------------------------------------------------------------
00015F6C                            Map_obj69a:
00015F6C                            	include "_maps\obj69a.asm"
00015F6C                            ; ---------------------------------------------------------------------------
00015F6C                            ; Sprite mappings - spinning platforms (SBZ)
00015F6C                            ; ---------------------------------------------------------------------------
00015F6C 0000 0000                  		dc.w byte_15944-Map_obj69a, byte_1594F-Map_obj69a
00015F70 0000 0000                  		dc.w byte_1595A-Map_obj69a, byte_15965-Map_obj69a
00015F74 0000                       		dc.w byte_15970-Map_obj69a
00015F76 02                         byte_15944:	dc.b 2
00015F77 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00015F7C F805 0800 00               		dc.b $F8, 5, 8,	0, 0
00015F81 02                         byte_1594F:	dc.b 2
00015F82 F00D 0014 F0               		dc.b $F0, $D, 0, $14, $F0
00015F87 000D 001C F0               		dc.b 0,	$D, 0, $1C, $F0
00015F8C 02                         byte_1595A:	dc.b 2
00015F8D F009 0004 F0               		dc.b $F0, 9, 0,	4, $F0
00015F92 0009 000A F8               		dc.b 0,	9, 0, $A, $F8
00015F97 02                         byte_15965:	dc.b 2
00015F98 F009 0024 F0               		dc.b $F0, 9, 0,	$24, $F0
00015F9D 0009 002A F8               		dc.b 0,	9, 0, $2A, $F8
00015FA2 02                         byte_15970:	dc.b 2
00015FA3 F005 0010 F8               		dc.b $F0, 5, 0,	$10, $F8
00015FA8 0005 1010 F8               		dc.b 0,	5, $10,	$10, $F8
00015FAE 00                         		even
00015FAE 00                         		even
00015FAE                            
00015FAE                            ; ===========================================================================
00015FAE                            ; ---------------------------------------------------------------------------
00015FAE                            ; Object 6A - ground saws and pizza cutters (SBZ)
00015FAE                            ; ---------------------------------------------------------------------------
00015FAE                            
00015FAE                            Obj6A:					; XREF: Obj_Index
00015FAE 7000                       		moveq	#0,d0
00015FB0 1028 0024                  		move.b	$24(a0),d0
00015FB4 323B 0000                  		move.w	Obj6A_Index(pc,d0.w),d1
00015FB8 4EFB 1000                  		jmp	Obj6A_Index(pc,d1.w)
00015FBC                            ; ===========================================================================
00015FBC 0000                       Obj6A_Index:	dc.w Obj6A_Main-Obj6A_Index
00015FBE 0000                       		dc.w Obj6A_Action-Obj6A_Index
00015FC0                            ; ===========================================================================
00015FC0                            
00015FC0                            Obj6A_Main:				; XREF: Obj6A_Index
00015FC0 5428 0024                  		addq.b	#2,$24(a0)
00015FC4 217C 0000 0000 0004        		move.l	#Map_obj6A,4(a0)
00015FCC 317C 43B5 0002             		move.w	#$43B5,2(a0)
00015FD2 117C 0004 0001             		move.b	#4,1(a0)
00015FD8 117C 0004 0018             		move.b	#4,$18(a0)
00015FDE 117C 0020 0019             		move.b	#$20,$19(a0)
00015FE4 3168 0008 003A             		move.w	8(a0),$3A(a0)
00015FEA 3168 000C 0038             		move.w	$C(a0),$38(a0)
00015FF0 0C28 0003 0028             		cmpi.b	#3,$28(a0)
00015FF6 6400                       		bcc.s	Obj6A_Action
00015FF8 117C 00A2 0020             		move.b	#$A2,$20(a0)
00015FFE                            
00015FFE                            Obj6A_Action:				; XREF: Obj6A_Index
00015FFE 7000                       		moveq	#0,d0
00016000 1028 0028                  		move.b	$28(a0),d0
00016004 0240 0007                  		andi.w	#7,d0
00016008 D040                       		add.w	d0,d0
0001600A 323B 0000                  		move.w	Obj6A_TypeIndex(pc,d0.w),d1
0001600E 4EBB 1000                  		jsr	Obj6A_TypeIndex(pc,d1.w)
00016012 3028 003A                  		move.w	$3A(a0),d0
00016016 0240 FF80                  		andi.w	#$FF80,d0
0001601A 3238 F700                  		move.w	($FFFFF700).w,d1
0001601E 0441 0080                  		subi.w	#$80,d1
00016022 0241 FF80                  		andi.w	#$FF80,d1
00016026 9041                       		sub.w	d1,d0
00016028 0C40 0280                  		cmpi.w	#$280,d0
0001602C 6200                       		bhi.s	Obj6A_Delete
0001602E 4EF9 0000 DBA8             		jmp	DisplaySprite
00016034                            ; ===========================================================================
00016034                            
00016034                            Obj6A_Delete:
00016034 4EF9 0000 DBE4             		jmp	DeleteObject
0001603A                            ; ===========================================================================
0001603A 0000 0000                  Obj6A_TypeIndex:dc.w Obj6A_Type00-Obj6A_TypeIndex, Obj6A_Type01-Obj6A_TypeIndex
0001603E 0000 0000                  		dc.w Obj6A_Type02-Obj6A_TypeIndex, Obj6A_Type03-Obj6A_TypeIndex
00016042 0000                       		dc.w Obj6A_Type04-Obj6A_TypeIndex
00016044                            ; ===========================================================================
00016044                            
00016044                            Obj6A_Type00:				; XREF: Obj6A_TypeIndex
00016044 4E75                       		rts	
00016046                            ; ===========================================================================
00016046                            
00016046                            Obj6A_Type01:				; XREF: Obj6A_TypeIndex
00016046 323C 0060                  		move.w	#$60,d1
0001604A 7000                       		moveq	#0,d0
0001604C 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00016050 0828 0000 0022             		btst	#0,$22(a0)
00016056 6700                       		beq.s	Obj6A_Animate01
00016058 4440                       		neg.w	d0
0001605A D041                       		add.w	d1,d0
0001605C                            
0001605C                            Obj6A_Animate01:
0001605C 3228 003A                  		move.w	$3A(a0),d1
00016060 9240                       		sub.w	d0,d1
00016062 3141 0008                  		move.w	d1,8(a0)	; move saw sideways
00016066 5328 001E                  		subq.b	#1,$1E(a0)
0001606A 6A00                       		bpl.s	loc_15A46
0001606C 117C 0002 001E             		move.b	#2,$1E(a0)	; time between frame changes
00016072 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
00016078                            
00016078                            loc_15A46:
00016078 4A28 0001                  		tst.b	1(a0)
0001607C 6A00                       		bpl.s	locret_15A60
0001607E 3038 FE04                  		move.w	($FFFFFE04).w,d0
00016082 0240 000F                  		andi.w	#$F,d0
00016086 6600                       		bne.s	locret_15A60
00016088 303C 00B0                  		move.w	#$B0,d0
0001608C 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play saw sound
00016092                            
00016092                            locret_15A60:
00016092 4E75                       		rts	
00016094                            ; ===========================================================================
00016094                            
00016094                            Obj6A_Type02:				; XREF: Obj6A_TypeIndex
00016094 323C 0030                  		move.w	#$30,d1
00016098 7000                       		moveq	#0,d0
0001609A 1038 FE64                  		move.b	($FFFFFE64).w,d0
0001609E 0828 0000 0022             		btst	#0,$22(a0)
000160A4 6700                       		beq.s	Obj6A_Animate02
000160A6 4440                       		neg.w	d0
000160A8 0640 0080                  		addi.w	#$80,d0
000160AC                            
000160AC                            Obj6A_Animate02:
000160AC 3228 0038                  		move.w	$38(a0),d1
000160B0 9240                       		sub.w	d0,d1
000160B2 3141 000C                  		move.w	d1,$C(a0)	; move saw vertically
000160B6 5328 001E                  		subq.b	#1,$1E(a0)
000160BA 6A00                       		bpl.s	loc_15A96
000160BC 117C 0002 001E             		move.b	#2,$1E(a0)
000160C2 0868 0000 001A             		bchg	#0,$1A(a0)
000160C8                            
000160C8                            loc_15A96:
000160C8 4A28 0001                  		tst.b	1(a0)
000160CC 6A00                       		bpl.s	locret_15AB0
000160CE 1038 FE64                  		move.b	($FFFFFE64).w,d0
000160D2 0C00 0018                  		cmpi.b	#$18,d0
000160D6 6600                       		bne.s	locret_15AB0
000160D8 303C 00B0                  		move.w	#$B0,d0
000160DC 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play saw sound
000160E2                            
000160E2                            locret_15AB0:
000160E2 4E75                       		rts	
000160E4                            ; ===========================================================================
000160E4                            
000160E4                            Obj6A_Type03:				; XREF: Obj6A_TypeIndex
000160E4 4A28 003D                  		tst.b	$3D(a0)
000160E8 6600                       		bne.s	Obj6A_Animate03
000160EA 3038 D008                  		move.w	($FFFFD008).w,d0
000160EE 0440 00C0                  		subi.w	#$C0,d0
000160F2 6500                       		bcs.s	loc_15B02
000160F4 9068 0008                  		sub.w	8(a0),d0
000160F8 6500                       		bcs.s	loc_15B02
000160FA 3038 D00C                  		move.w	($FFFFD00C).w,d0
000160FE 0440 0080                  		subi.w	#$80,d0
00016102 B068 000C                  		cmp.w	$C(a0),d0
00016106 6400                       		bcc.s	locret_15B04
00016108 0640 0100                  		addi.w	#$100,d0
0001610C B068 000C                  		cmp.w	$C(a0),d0
00016110 6500                       		bcs.s	locret_15B04
00016112 117C 0001 003D             		move.b	#1,$3D(a0)
00016118 317C 0600 0010             		move.w	#$600,$10(a0)	; move object to the right
0001611E 117C 00A2 0020             		move.b	#$A2,$20(a0)
00016124 117C 0002 001A             		move.b	#2,$1A(a0)
0001612A 303C 00B0                  		move.w	#$B0,d0
0001612E 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play saw sound
00016134                            
00016134                            loc_15B02:
00016134 588F                       		addq.l	#4,sp
00016136                            
00016136                            locret_15B04:
00016136 4E75                       		rts	
00016138                            ; ===========================================================================
00016138                            
00016138                            Obj6A_Animate03:			; XREF: ROM:00015AB6j
00016138 4EB9 0000 DB82             		jsr	SpeedToPos
0001613E 3168 0008 003A             		move.w	8(a0),$3A(a0)
00016144 5328 001E                  		subq.b	#1,$1E(a0)
00016148 6A00                       		bpl.s	locret_15B24
0001614A 117C 0002 001E             		move.b	#2,$1E(a0)
00016150 0868 0000 001A             		bchg	#0,$1A(a0)
00016156                            
00016156                            locret_15B24:
00016156 4E75                       		rts	
00016158                            ; ===========================================================================
00016158                            
00016158                            Obj6A_Type04:				; XREF: Obj6A_TypeIndex
00016158 4A28 003D                  		tst.b	$3D(a0)
0001615C 6600                       		bne.s	Obj6A_Animate04
0001615E 3038 D008                  		move.w	($FFFFD008).w,d0
00016162 0640 00E0                  		addi.w	#$E0,d0
00016166 9068 0008                  		sub.w	8(a0),d0
0001616A 6400                       		bcc.s	loc_15B74
0001616C 3038 D00C                  		move.w	($FFFFD00C).w,d0
00016170 0440 0080                  		subi.w	#$80,d0
00016174 B068 000C                  		cmp.w	$C(a0),d0
00016178 6400                       		bcc.s	locret_15B76
0001617A 0640 0100                  		addi.w	#$100,d0
0001617E B068 000C                  		cmp.w	$C(a0),d0
00016182 6500                       		bcs.s	locret_15B76
00016184 117C 0001 003D             		move.b	#1,$3D(a0)
0001618A 317C FA00 0010             		move.w	#-$600,$10(a0)	; move object to the left
00016190 117C 00A2 0020             		move.b	#$A2,$20(a0)
00016196 117C 0002 001A             		move.b	#2,$1A(a0)
0001619C 303C 00B0                  		move.w	#$B0,d0
000161A0 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play saw sound
000161A6                            
000161A6                            loc_15B74:
000161A6 588F                       		addq.l	#4,sp
000161A8                            
000161A8                            locret_15B76:
000161A8 4E75                       		rts	
000161AA                            ; ===========================================================================
000161AA                            
000161AA                            Obj6A_Animate04:
000161AA 4EB9 0000 DB82             		jsr	SpeedToPos
000161B0 3168 0008 003A             		move.w	8(a0),$3A(a0)
000161B6 5328 001E                  		subq.b	#1,$1E(a0)
000161BA 6A00                       		bpl.s	locret_15B96
000161BC 117C 0002 001E             		move.b	#2,$1E(a0)
000161C2 0868 0000 001A             		bchg	#0,$1A(a0)
000161C8                            
000161C8                            locret_15B96:
000161C8 4E75                       		rts	
000161CA                            ; ===========================================================================
000161CA                            ; ---------------------------------------------------------------------------
000161CA                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
000161CA                            ; ---------------------------------------------------------------------------
000161CA                            Map_obj6A:
000161CA                            	include "_maps\obj6A.asm"
000161CA                            ; ---------------------------------------------------------------------------
000161CA                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
000161CA                            ; ---------------------------------------------------------------------------
000161CA 0000 0000                  		dc.w byte_15BA0-Map_obj6A, byte_15BC4-Map_obj6A
000161CE 0000 0000                  		dc.w byte_15BE8-Map_obj6A, byte_15BFD-Map_obj6A
000161D2 07                         byte_15BA0:	dc.b 7
000161D3 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
000161D8 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
000161DD E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
000161E2 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
000161E7 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
000161EC 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
000161F1 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
000161F6 07                         byte_15BC4:	dc.b 7
000161F7 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
000161FC D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00016201 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00016206 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
0001620B E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00016210 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00016215 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
0001621A 04                         byte_15BE8:	dc.b 4
0001621B E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00016220 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00016225 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
0001622A 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
0001622F 04                         byte_15BFD:	dc.b 4
00016230 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00016235 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
0001623A 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
0001623F 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00016244                            		even
00016244                            		even
00016244                            
00016244                            ; ===========================================================================
00016244                            ; ---------------------------------------------------------------------------
00016244                            ; Object 6B - stomper (SBZ)
00016244                            ; ---------------------------------------------------------------------------
00016244                            
00016244                            Obj6B:					; XREF: Obj_Index
00016244 7000                       		moveq	#0,d0
00016246 1028 0024                  		move.b	$24(a0),d0
0001624A 323B 0000                  		move.w	Obj6B_Index(pc,d0.w),d1
0001624E 4EFB 1000                  		jmp	Obj6B_Index(pc,d1.w)
00016252                            ; ===========================================================================
00016252 0000                       Obj6B_Index:	dc.w Obj6B_Main-Obj6B_Index
00016254 0000                       		dc.w Obj6B_Action-Obj6B_Index
00016256                            
00016256 400C 8001                  Obj6B_Var:	dc.b  $40,  $C,	$80,   1 ; width, height, ????,	type number
0001625A 1C20 3803                  		dc.b  $1C, $20,	$38,   3
0001625E 1C20 4004                  		dc.b  $1C, $20,	$40,   4
00016262 1C20 6004                  		dc.b  $1C, $20,	$60,   4
00016266 8040 0005                  		dc.b  $80, $40,	  0,   5
0001626A                            ; ===========================================================================
0001626A                            
0001626A                            Obj6B_Main:				; XREF: Obj6B_Index
0001626A 5428 0024                  		addq.b	#2,$24(a0)
0001626E 7000                       		moveq	#0,d0
00016270 1028 0028                  		move.b	$28(a0),d0
00016274 E448                       		lsr.w	#2,d0
00016276 0240 001C                  		andi.w	#$1C,d0
0001627A 47FB 00DA                  		lea	Obj6B_Var(pc,d0.w),a3
0001627E 115B 0019                  		move.b	(a3)+,$19(a0)
00016282 115B 0016                  		move.b	(a3)+,$16(a0)
00016286 E448                       		lsr.w	#2,d0
00016288 1140 001A                  		move.b	d0,$1A(a0)
0001628C 217C 0000 0000 0004        		move.l	#Map_obj6B,4(a0)
00016294 317C 22C0 0002             		move.w	#$22C0,2(a0)
0001629A 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ/SBZ3
000162A0 6600                       		bne.s	Obj6B_SBZ12	; if not, branch
000162A2 08F8 0000 F7CB             		bset	#0,($FFFFF7CB).w
000162A8 6700                       		beq.s	Obj6B_SBZ3
000162AA                            
000162AA                            Obj6B_ChkGone:				; XREF: Obj6B_SBZ3
000162AA 45F8 FC00                  		lea	($FFFFFC00).w,a2
000162AE 7000                       		moveq	#0,d0
000162B0 1028 0023                  		move.b	$23(a0),d0
000162B4 6700                       		beq.s	Obj6B_Delete
000162B6 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000162BC                            
000162BC                            Obj6B_Delete:
000162BC 4EF9 0000 DBE4             		jmp	DeleteObject
000162C2                            ; ===========================================================================
000162C2                            
000162C2                            Obj6B_SBZ3:				; XREF: Obj6B_Main
000162C2 317C 41F0 0002             		move.w	#$41F0,2(a0)
000162C8 0C68 0A80 0008             		cmpi.w	#$A80,8(a0)
000162CE 6600                       		bne.s	Obj6B_SBZ12
000162D0 45F8 FC00                  		lea	($FFFFFC00).w,a2
000162D4 7000                       		moveq	#0,d0
000162D6 1028 0023                  		move.b	$23(a0),d0
000162DA 6700                       		beq.s	Obj6B_SBZ12
000162DC 0832 0000 0002             		btst	#0,2(a2,d0.w)
000162E2 6700                       		beq.s	Obj6B_SBZ12
000162E4 4238 F7CB                  		clr.b	($FFFFF7CB).w
000162E8 60C0                       		bra.s	Obj6B_ChkGone
000162EA                            ; ===========================================================================
000162EA                            
000162EA                            Obj6B_SBZ12:				; XREF: Obj6B_Main
000162EA 0028 0004 0001             		ori.b	#4,1(a0)
000162F0 117C 0004 0018             		move.b	#4,$18(a0)
000162F6 3168 0008 0034             		move.w	8(a0),$34(a0)
000162FC 3168 000C 0030             		move.w	$C(a0),$30(a0)
00016302 7000                       		moveq	#0,d0
00016304 101B                       		move.b	(a3)+,d0
00016306 3140 003C                  		move.w	d0,$3C(a0)
0001630A 7000                       		moveq	#0,d0
0001630C 1028 0028                  		move.b	$28(a0),d0
00016310 6A00                       		bpl.s	Obj6B_Action
00016312 0200 000F                  		andi.b	#$F,d0
00016316 1140 003E                  		move.b	d0,$3E(a0)
0001631A 1153 0028                  		move.b	(a3),$28(a0)
0001631E 0C13 0005                  		cmpi.b	#5,(a3)
00016322 6600                       		bne.s	Obj6B_ChkGone2
00016324 08E8 0004 0001             		bset	#4,1(a0)
0001632A                            
0001632A                            Obj6B_ChkGone2:
0001632A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001632E 7000                       		moveq	#0,d0
00016330 1028 0023                  		move.b	$23(a0),d0
00016334 6700                       		beq.s	Obj6B_Action
00016336 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001633C                            
0001633C                            Obj6B_Action:				; XREF: Obj6B_Index
0001633C 3F28 0008                  		move.w	8(a0),-(sp)
00016340 7000                       		moveq	#0,d0
00016342 1028 0028                  		move.b	$28(a0),d0
00016346 0240 000F                  		andi.w	#$F,d0
0001634A D040                       		add.w	d0,d0
0001634C 323B 0000                  		move.w	Obj6B_TypeIndex(pc,d0.w),d1
00016350 4EBB 1000                  		jsr	Obj6B_TypeIndex(pc,d1.w)
00016354 381F                       		move.w	(sp)+,d4
00016356 4A28 0001                  		tst.b	1(a0)
0001635A 6A00                       		bpl.s	Obj6B_ChkDel
0001635C 7200                       		moveq	#0,d1
0001635E 1228 0019                  		move.b	$19(a0),d1
00016362 0641 000B                  		addi.w	#$B,d1
00016366 7400                       		moveq	#0,d2
00016368 1428 0016                  		move.b	$16(a0),d2
0001636C 3602                       		move.w	d2,d3
0001636E 5243                       		addq.w	#1,d3
00016370 6100 9C06                  		bsr.w	SolidObject
00016374                            
00016374                            Obj6B_ChkDel:
00016374 3028 0034                  		move.w	$34(a0),d0
00016378 0240 FF80                  		andi.w	#$FF80,d0
0001637C 3238 F700                  		move.w	($FFFFF700).w,d1
00016380 0441 0080                  		subi.w	#$80,d1
00016384 0241 FF80                  		andi.w	#$FF80,d1
00016388 9041                       		sub.w	d1,d0
0001638A 0C40 0280                  		cmpi.w	#$280,d0
0001638E 6200                       		bhi.s	loc_15D64
00016390 4EF9 0000 DBA8             		jmp	DisplaySprite
00016396                            ; ===========================================================================
00016396                            
00016396                            loc_15D64:
00016396 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0001639C 6600                       		bne.s	Obj6B_Delete2
0001639E 4238 F7CB                  		clr.b	($FFFFF7CB).w
000163A2 45F8 FC00                  		lea	($FFFFFC00).w,a2
000163A6 7000                       		moveq	#0,d0
000163A8 1028 0023                  		move.b	$23(a0),d0
000163AC 6700                       		beq.s	Obj6B_Delete2
000163AE 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000163B4                            
000163B4                            Obj6B_Delete2:
000163B4 4EF9 0000 DBE4             		jmp	DeleteObject
000163BA                            ; ===========================================================================
000163BA 0000 0000                  Obj6B_TypeIndex:dc.w Obj6B_Type00-Obj6B_TypeIndex, Obj6B_Type01-Obj6B_TypeIndex
000163BE 0000 0000                  		dc.w Obj6B_Type02-Obj6B_TypeIndex, Obj6B_Type03-Obj6B_TypeIndex
000163C2 0000 0000                  		dc.w Obj6B_Type04-Obj6B_TypeIndex, Obj6B_Type05-Obj6B_TypeIndex
000163C6                            ; ===========================================================================
000163C6                            
000163C6                            Obj6B_Type00:				; XREF: Obj6B_TypeIndex
000163C6 4E75                       		rts	
000163C8                            ; ===========================================================================
000163C8                            
000163C8                            Obj6B_Type01:				; XREF: Obj6B_TypeIndex
000163C8 4A28 0038                  		tst.b	$38(a0)
000163CC 6600                       		bne.s	loc_15DB4
000163CE 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
000163D2 7000                       		moveq	#0,d0
000163D4 1028 003E                  		move.b	$3E(a0),d0
000163D8 0832 0000 0000             		btst	#0,(a2,d0.w)
000163DE 6700                       		beq.s	loc_15DC2
000163E0 117C 0001 0038             		move.b	#1,$38(a0)
000163E6                            
000163E6                            loc_15DB4:
000163E6 3028 003C                  		move.w	$3C(a0),d0
000163EA B068 003A                  		cmp.w	$3A(a0),d0
000163EE 6700                       		beq.s	loc_15DE0
000163F0 5468 003A                  		addq.w	#2,$3A(a0)
000163F4                            
000163F4                            loc_15DC2:
000163F4 3028 003A                  		move.w	$3A(a0),d0
000163F8 0828 0000 0022             		btst	#0,$22(a0)
000163FE 6700                       		beq.s	loc_15DD4
00016400 4440                       		neg.w	d0
00016402 0640 0080                  		addi.w	#$80,d0
00016406                            
00016406                            loc_15DD4:
00016406 3228 0034                  		move.w	$34(a0),d1
0001640A 9240                       		sub.w	d0,d1
0001640C 3141 0008                  		move.w	d1,8(a0)
00016410 4E75                       		rts	
00016412                            ; ===========================================================================
00016412                            
00016412                            loc_15DE0:
00016412 5228 0028                  		addq.b	#1,$28(a0)
00016416 317C 00B4 0036             		move.w	#$B4,$36(a0)
0001641C 4228 0038                  		clr.b	$38(a0)
00016420 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016424 7000                       		moveq	#0,d0
00016426 1028 0023                  		move.b	$23(a0),d0
0001642A 67C8                       		beq.s	loc_15DC2
0001642C 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00016432 60C0                       		bra.s	loc_15DC2
00016434                            ; ===========================================================================
00016434                            
00016434                            Obj6B_Type02:				; XREF: Obj6B_TypeIndex
00016434 4A28 0038                  		tst.b	$38(a0)
00016438 6600                       		bne.s	loc_15E14
0001643A 5368 0036                  		subq.w	#1,$36(a0)
0001643E 6600                       		bne.s	loc_15E1E
00016440 117C 0001 0038             		move.b	#1,$38(a0)
00016446                            
00016446                            loc_15E14:
00016446 4A68 003A                  		tst.w	$3A(a0)
0001644A 6700                       		beq.s	loc_15E3C
0001644C 5568 003A                  		subq.w	#2,$3A(a0)
00016450                            
00016450                            loc_15E1E:
00016450 3028 003A                  		move.w	$3A(a0),d0
00016454 0828 0000 0022             		btst	#0,$22(a0)
0001645A 6700                       		beq.s	loc_15E30
0001645C 4440                       		neg.w	d0
0001645E 0640 0080                  		addi.w	#$80,d0
00016462                            
00016462                            loc_15E30:
00016462 3228 0034                  		move.w	$34(a0),d1
00016466 9240                       		sub.w	d0,d1
00016468 3141 0008                  		move.w	d1,8(a0)
0001646C 4E75                       		rts	
0001646E                            ; ===========================================================================
0001646E                            
0001646E                            loc_15E3C:
0001646E 5328 0028                  		subq.b	#1,$28(a0)
00016472 4228 0038                  		clr.b	$38(a0)
00016476 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001647A 7000                       		moveq	#0,d0
0001647C 1028 0023                  		move.b	$23(a0),d0
00016480 67CE                       		beq.s	loc_15E1E
00016482 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00016488 60C6                       		bra.s	loc_15E1E
0001648A                            ; ===========================================================================
0001648A                            
0001648A                            Obj6B_Type03:				; XREF: Obj6B_TypeIndex
0001648A 4A28 0038                  		tst.b	$38(a0)
0001648E 6600                       		bne.s	loc_15E7C
00016490 4A68 003A                  		tst.w	$3A(a0)
00016494 6700                       		beq.s	loc_15E6A
00016496 5368 003A                  		subq.w	#1,$3A(a0)
0001649A 6000                       		bra.s	loc_15E8E
0001649C                            ; ===========================================================================
0001649C                            
0001649C                            loc_15E6A:
0001649C 5368 0036                  		subq.w	#1,$36(a0)
000164A0 6A00                       		bpl.s	loc_15E8E
000164A2 317C 003C 0036             		move.w	#$3C,$36(a0)
000164A8 117C 0001 0038             		move.b	#1,$38(a0)
000164AE                            
000164AE                            loc_15E7C:
000164AE 5068 003A                  		addq.w	#8,$3A(a0)
000164B2 3028 003A                  		move.w	$3A(a0),d0
000164B6 B068 003C                  		cmp.w	$3C(a0),d0
000164BA 6600                       		bne.s	loc_15E8E
000164BC 4228 0038                  		clr.b	$38(a0)
000164C0                            
000164C0                            loc_15E8E:
000164C0 3028 003A                  		move.w	$3A(a0),d0
000164C4 0828 0000 0022             		btst	#0,$22(a0)
000164CA 6700                       		beq.s	loc_15EA0
000164CC 4440                       		neg.w	d0
000164CE 0640 0038                  		addi.w	#$38,d0
000164D2                            
000164D2                            loc_15EA0:
000164D2 3228 0030                  		move.w	$30(a0),d1
000164D6 D240                       		add.w	d0,d1
000164D8 3141 000C                  		move.w	d1,$C(a0)
000164DC 4E75                       		rts	
000164DE                            ; ===========================================================================
000164DE                            
000164DE                            Obj6B_Type04:				; XREF: Obj6B_TypeIndex
000164DE 4A28 0038                  		tst.b	$38(a0)
000164E2 6600                       		bne.s	loc_15ED0
000164E4 4A68 003A                  		tst.w	$3A(a0)
000164E8 6700                       		beq.s	loc_15EBE
000164EA 5168 003A                  		subq.w	#8,$3A(a0)
000164EE 6000                       		bra.s	loc_15EF0
000164F0                            ; ===========================================================================
000164F0                            
000164F0                            loc_15EBE:
000164F0 5368 0036                  		subq.w	#1,$36(a0)
000164F4 6A00                       		bpl.s	loc_15EF0
000164F6 317C 003C 0036             		move.w	#$3C,$36(a0)
000164FC 117C 0001 0038             		move.b	#1,$38(a0)
00016502                            
00016502                            loc_15ED0:
00016502 3028 003A                  		move.w	$3A(a0),d0
00016506 B068 003C                  		cmp.w	$3C(a0),d0
0001650A 6700                       		beq.s	loc_15EE0
0001650C 5068 003A                  		addq.w	#8,$3A(a0)
00016510 6000                       		bra.s	loc_15EF0
00016512                            ; ===========================================================================
00016512                            
00016512                            loc_15EE0:
00016512 5368 0036                  		subq.w	#1,$36(a0)
00016516 6A00                       		bpl.s	loc_15EF0
00016518 317C 003C 0036             		move.w	#$3C,$36(a0)
0001651E 4228 0038                  		clr.b	$38(a0)
00016522                            
00016522                            loc_15EF0:
00016522 3028 003A                  		move.w	$3A(a0),d0
00016526 0828 0000 0022             		btst	#0,$22(a0)
0001652C 6700                       		beq.s	loc_15F02
0001652E 4440                       		neg.w	d0
00016530 0640 0038                  		addi.w	#$38,d0
00016534                            
00016534                            loc_15F02:
00016534 3228 0030                  		move.w	$30(a0),d1
00016538 D240                       		add.w	d0,d1
0001653A 3141 000C                  		move.w	d1,$C(a0)
0001653E 4E75                       		rts	
00016540                            ; ===========================================================================
00016540                            
00016540                            Obj6B_Type05:				; XREF: Obj6B_TypeIndex
00016540 4A28 0038                  		tst.b	$38(a0)
00016544 6600                       		bne.s	loc_15F3E
00016546 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0001654A 7000                       		moveq	#0,d0
0001654C 1028 003E                  		move.b	$3E(a0),d0
00016550 0832 0000 0000             		btst	#0,(a2,d0.w)
00016556 6700                       		beq.s	locret_15F5C
00016558 117C 0001 0038             		move.b	#1,$38(a0)
0001655E 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016562 7000                       		moveq	#0,d0
00016564 1028 0023                  		move.b	$23(a0),d0
00016568 6700                       		beq.s	loc_15F3E
0001656A 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00016570                            
00016570                            loc_15F3E:
00016570 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
00016578 06A8 0000 8000 000C        		addi.l	#$8000,$C(a0)
00016580 3168 0008 0034             		move.w	8(a0),$34(a0)
00016586 0C68 0980 0008             		cmpi.w	#$980,8(a0)
0001658C 6700                       		beq.s	loc_15F5E
0001658E                            
0001658E                            locret_15F5C:
0001658E 4E75                       		rts	
00016590                            ; ===========================================================================
00016590                            
00016590                            loc_15F5E:
00016590 4228 0028                  		clr.b	$28(a0)
00016594 4228 0038                  		clr.b	$38(a0)
00016598 4E75                       		rts	
0001659A                            ; ===========================================================================
0001659A                            ; ---------------------------------------------------------------------------
0001659A                            ; Sprite mappings - stomper and	platforms (SBZ)
0001659A                            ; ---------------------------------------------------------------------------
0001659A                            Map_obj6B:
0001659A                            	include "_maps\obj6B.asm"
0001659A                            ; ---------------------------------------------------------------------------
0001659A                            ; Sprite mappings - stomper and	platforms (SBZ)
0001659A                            ; ---------------------------------------------------------------------------
0001659A 0000 0000                  		dc.w byte_15F72-Map_obj6B, byte_15F87-Map_obj6B
0001659E 0000 0000                  		dc.w byte_15F87-Map_obj6B, byte_15F87-Map_obj6B
000165A2 0000                       		dc.w byte_15FB0-Map_obj6B
000165A4 04                         byte_15F72:	dc.b 4
000165A5 F40E 21AF C0               		dc.b $F4, $E, $21, $AF,	$C0
000165AA F40E 21B2 E0               		dc.b $F4, $E, $21, $B2,	$E0
000165AF F40E 21B2 00               		dc.b $F4, $E, $21, $B2,	0
000165B4 F40E 29AF 20               		dc.b $F4, $E, $29, $AF,	$20
000165B9 08                         byte_15F87:	dc.b 8
000165BA E00C 000C E4               		dc.b $E0, $C, 0, $C, $E4
000165BF E008 0010 04               		dc.b $E0, 8, 0,	$10, 4
000165C4 E80E 2013 E4               		dc.b $E8, $E, $20, $13,	$E4
000165C9 E80A 201F 04               		dc.b $E8, $A, $20, $1F,	4
000165CE 000E 2013 E4               		dc.b 0,	$E, $20, $13, $E4
000165D3 000A 201F 04               		dc.b 0,	$A, $20, $1F, 4
000165D8 180C 000C E4               		dc.b $18, $C, 0, $C, $E4
000165DD 1808 0010 04               		dc.b $18, 8, 0,	$10, 4
000165E2 0E                         byte_15FB0:	dc.b $E
000165E3 C00F 0000 80               		dc.b $C0, $F, 0, 0, $80
000165E8 C00F 0010 A0               		dc.b $C0, $F, 0, $10, $A0
000165ED C00F 0020 C0               		dc.b $C0, $F, 0, $20, $C0
000165F2 C00F 0010 E0               		dc.b $C0, $F, 0, $10, $E0
000165F7 C00F 0020 00               		dc.b $C0, $F, 0, $20, 0
000165FC C00F 0010 20               		dc.b $C0, $F, 0, $10, $20
00016601 C00F 0030 40               		dc.b $C0, $F, 0, $30, $40
00016606 C00D 0040 60               		dc.b $C0, $D, 0, $40, $60
0001660B E00F 0048 80               		dc.b $E0, $F, 0, $48, $80
00016610 E00F 0048 C0               		dc.b $E0, $F, 0, $48, $C0
00016615 E00F 0058 00               		dc.b $E0, $F, 0, $58, 0
0001661A 000F 0048 80               		dc.b 0,	$F, 0, $48, $80
0001661F 000F 0058 C0               		dc.b 0,	$F, 0, $58, $C0
00016624 200F 0058 80               		dc.b $20, $F, 0, $58, $80
0001662A 00                         		even
0001662A 00                         		even
0001662A                            
0001662A                            ; ===========================================================================
0001662A                            ; ---------------------------------------------------------------------------
0001662A                            ; Object 6C - vanishing	platforms (SBZ)
0001662A                            ; ---------------------------------------------------------------------------
0001662A                            
0001662A                            Obj6C:					; XREF: Obj_Index
0001662A 7000                       		moveq	#0,d0
0001662C 1028 0024                  		move.b	$24(a0),d0
00016630 323B 0000                  		move.w	Obj6C_Index(pc,d0.w),d1
00016634 4EFB 1000                  		jmp	Obj6C_Index(pc,d1.w)
00016638                            ; ===========================================================================
00016638 0000                       Obj6C_Index:	dc.w Obj6C_Main-Obj6C_Index
0001663A 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
0001663C 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
0001663E 0000                       		dc.w loc_16068-Obj6C_Index
00016640                            ; ===========================================================================
00016640                            
00016640                            Obj6C_Main:				; XREF: Obj6C_Index
00016640 5C28 0024                  		addq.b	#6,$24(a0)
00016644 217C 0000 0000 0004        		move.l	#Map_obj6C,4(a0)
0001664C 317C 44C3 0002             		move.w	#$44C3,2(a0)
00016652 0028 0004 0001             		ori.b	#4,1(a0)
00016658 117C 0010 0019             		move.b	#$10,$19(a0)
0001665E 117C 0004 0018             		move.b	#4,$18(a0)
00016664 7000                       		moveq	#0,d0
00016666 1028 0028                  		move.b	$28(a0),d0	; get object type
0001666A 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
0001666E 5240                       		addq.w	#1,d0		; add 1
00016670 EF48                       		lsl.w	#7,d0		; multiply by $80
00016672 3200                       		move.w	d0,d1
00016674 5340                       		subq.w	#1,d0
00016676 3140 0030                  		move.w	d0,$30(a0)
0001667A 3140 0032                  		move.w	d0,$32(a0)
0001667E 7000                       		moveq	#0,d0
00016680 1028 0028                  		move.b	$28(a0),d0	; get object type
00016684 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st digit
00016688 0641 0080                  		addi.w	#$80,d1
0001668C C0C1                       		mulu.w	d1,d0
0001668E E088                       		lsr.l	#8,d0
00016690 3140 0036                  		move.w	d0,$36(a0)
00016694 5341                       		subq.w	#1,d1
00016696 3141 0038                  		move.w	d1,$38(a0)
0001669A                            
0001669A                            loc_16068:				; XREF: Obj6C_Index
0001669A 3038 FE04                  		move.w	($FFFFFE04).w,d0
0001669E 9068 0036                  		sub.w	$36(a0),d0
000166A2 C068 0038                  		and.w	$38(a0),d0
000166A6 6600                       		bne.s	Obj6C_Animate
000166A8 5928 0024                  		subq.b	#4,$24(a0)
000166AC 6000                       		bra.s	Obj6C_Vanish
000166AE                            ; ===========================================================================
000166AE                            
000166AE                            Obj6C_Animate:
000166AE 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
000166B4 4EB9 0000 AC42             		jsr	AnimateSprite
000166BA 6000 9594                  		bra.w	MarkObjGone
000166BE                            ; ===========================================================================
000166BE                            
000166BE                            Obj6C_Vanish:				; XREF: Obj6C_Index
000166BE 5368 0030                  		subq.w	#1,$30(a0)
000166C2 6A00                       		bpl.s	loc_160AA
000166C4 317C 007F 0030             		move.w	#127,$30(a0)
000166CA 4A28 001C                  		tst.b	$1C(a0)
000166CE 6700                       		beq.s	loc_160A4
000166D0 3168 0032 0030             		move.w	$32(a0),$30(a0)
000166D6                            
000166D6                            loc_160A4:
000166D6 0868 0000 001C             		bchg	#0,$1C(a0)
000166DC                            
000166DC                            loc_160AA:
000166DC 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
000166E2 4EB9 0000 AC42             		jsr	AnimateSprite
000166E8 0828 0001 001A             		btst	#1,$1A(a0)	; has platform vanished?
000166EE 6600                       		bne.s	Obj6C_NotSolid	; if yes, branch
000166F0 0C28 0002 0024             		cmpi.b	#2,$24(a0)
000166F6 6600                       		bne.s	loc_160D6
000166F8 7200                       		moveq	#0,d1
000166FA 1228 0019                  		move.b	$19(a0),d1
000166FE 4EB9 0000 789E             		jsr	(PlatformObject).l
00016704 6000 954A                  		bra.w	MarkObjGone
00016708                            ; ===========================================================================
00016708                            
00016708                            loc_160D6:
00016708 7200                       		moveq	#0,d1
0001670A 1228 0019                  		move.b	$19(a0),d1
0001670E 4EB9 0000 7A12             		jsr	(ExitPlatform).l
00016714 3428 0008                  		move.w	8(a0),d2
00016718 4EB9 0000 7F7C             		jsr	(MvSonicOnPtfm2).l
0001671E 6000 9530                  		bra.w	MarkObjGone
00016722                            ; ===========================================================================
00016722                            
00016722                            Obj6C_NotSolid:				; XREF: Obj6C_Vanish
00016722 0828 0003 0022             		btst	#3,$22(a0)
00016728 6700                       		beq.s	Obj6C_Display
0001672A 43F8 D000                  		lea	($FFFFD000).w,a1
0001672E 08A9 0003 0022             		bclr	#3,$22(a1)
00016734 08A8 0003 0022             		bclr	#3,$22(a0)
0001673A 117C 0002 0024             		move.b	#2,$24(a0)
00016740 4228 0025                  		clr.b	$25(a0)
00016744                            
00016744                            Obj6C_Display:
00016744 6000 950A                  		bra.w	MarkObjGone
00016748                            ; ===========================================================================
00016748                            Ani_obj6C:
00016748                            	include "_anim\obj6C.asm"
00016748                            ; ---------------------------------------------------------------------------
00016748                            ; Animation script - vanishing platforms (SBZ)
00016748                            ; ---------------------------------------------------------------------------
00016748 0000                       		dc.w byte_1611A-Ani_obj6C
0001674A 0000                       		dc.w byte_16122-Ani_obj6C
0001674C 0700 0102 03FE 0100        byte_1611A:	dc.b 7,	0, 1, 2, 3, $FE, 1, 0
00016754 0703 0201 00FE 0100        byte_16122:	dc.b 7,	3, 2, 1, 0, $FE, 1, 0
0001675C                            		even
0001675C                            		even
0001675C                            
0001675C                            ; ---------------------------------------------------------------------------
0001675C                            ; Sprite mappings - vanishing platforms	(SBZ)
0001675C                            ; ---------------------------------------------------------------------------
0001675C                            Map_obj6C:
0001675C                            	include "_maps\obj6C.asm"
0001675C                            ; ---------------------------------------------------------------------------
0001675C                            ; Sprite mappings - vanishing platforms	(SBZ)
0001675C                            ; ---------------------------------------------------------------------------
0001675C 0000 0000                  		dc.w byte_16132-Map_obj6C, byte_16138-Map_obj6C
00016760 0000 0000                  		dc.w byte_1613E-Map_obj6C, byte_16144-Map_obj6C
00016764 01                         byte_16132:	dc.b 1
00016765 F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0
0001676A 01                         byte_16138:	dc.b 1
0001676B F807 0010 F8               		dc.b $F8, 7, 0,	$10, $F8
00016770 01                         byte_1613E:	dc.b 1
00016771 F803 0018 FC               		dc.b $F8, 3, 0,	$18, $FC
00016776 00                         byte_16144:	dc.b 0
00016778 00                         		even
00016778 00                         		even
00016778                            
00016778                            ; ===========================================================================
00016778                            ; ---------------------------------------------------------------------------
00016778                            ; Object 6E - electrocution orbs (SBZ)
00016778                            ; ---------------------------------------------------------------------------
00016778                            
00016778                            Obj6E:					; XREF: Obj_Index
00016778 7000                       		moveq	#0,d0
0001677A 1028 0024                  		move.b	$24(a0),d0
0001677E 323B 0000                  		move.w	Obj6E_Index(pc,d0.w),d1
00016782 4EFB 1000                  		jmp	Obj6E_Index(pc,d1.w)
00016786                            ; ===========================================================================
00016786 0000                       Obj6E_Index:	dc.w Obj6E_Main-Obj6E_Index
00016788 0000                       		dc.w Obj6E_Shock-Obj6E_Index
0001678A                            ; ===========================================================================
0001678A                            
0001678A                            Obj6E_Main:				; XREF: Obj6E_Index
0001678A 5428 0024                  		addq.b	#2,$24(a0)
0001678E 217C 0000 0000 0004        		move.l	#Map_obj6E,4(a0)
00016796 317C 047E 0002             		move.w	#$47E,2(a0)
0001679C 0028 0004 0001             		ori.b	#4,1(a0)
000167A2 117C 0028 0019             		move.b	#$28,$19(a0)
000167A8 7000                       		moveq	#0,d0
000167AA 1028 0028                  		move.b	$28(a0),d0	; read object type
000167AE E948                       		lsl.w	#4,d0		; multiply by $10
000167B0 5340                       		subq.w	#1,d0
000167B2 3140 0034                  		move.w	d0,$34(a0)
000167B6                            
000167B6                            Obj6E_Shock:				; XREF: Obj6E_Index
000167B6 3038 FE04                  		move.w	($FFFFFE04).w,d0
000167BA C068 0034                  		and.w	$34(a0),d0
000167BE 6600                       		bne.s	Obj6E_Animate
000167C0 117C 0001 001C             		move.b	#1,$1C(a0)	; run "shocking" animation
000167C6 4A28 0001                  		tst.b	1(a0)
000167CA 6A00                       		bpl.s	Obj6E_Animate
000167CC 303C 00B1                  		move.w	#$B1,d0
000167D0 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play electricity sound
000167D6                            
000167D6                            Obj6E_Animate:
000167D6 43F9 0000 0000             		lea	(Ani_obj6E).l,a1
000167DC 4EB9 0000 AC42             		jsr	AnimateSprite
000167E2 117C 0000 0020             		move.b	#0,$20(a0)
000167E8 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is frame number 4 displayed?
000167EE 6600                       		bne.s	Obj6E_Display	; if not, branch
000167F0 117C 00A4 0020             		move.b	#$A4,$20(a0)	; if yes, make object hurt Sonic
000167F6                            
000167F6                            Obj6E_Display:
000167F6 6000 9458                  		bra.w	MarkObjGone
000167FA                            ; ===========================================================================
000167FA                            Ani_obj6E:
000167FA                            	include "_anim\obj6E.asm"
000167FA                            ; ---------------------------------------------------------------------------
000167FA                            ; Animation script - electrocution orbs (SBZ)
000167FA                            ; ---------------------------------------------------------------------------
000167FA 0000                       		dc.w byte_161CC-Ani_obj6E
000167FC 0000                       		dc.w byte_161D0-Ani_obj6E
000167FE 0700 FF00                  byte_161CC:	dc.b 7,	0, $FF,	0
00016802 0001 0101 0203 0304 0404+  byte_161D0:	dc.b 0,	1, 1, 1, 2, 3, 3, 4, 4,	4, 5, 5, 5, 0, $FD, 0
00016812                            		even
00016812                            		even
00016812                            
00016812                            ; ---------------------------------------------------------------------------
00016812                            ; Sprite mappings - electrocution orbs (SBZ)
00016812                            ; ---------------------------------------------------------------------------
00016812                            Map_obj6E:
00016812                            	include "_maps\obj6E.asm"
00016812                            Map_26ed:
00016812 0000                       Map_26ed_0: 	dc.w Map_26ed_C-Map_26ed
00016814 0000                       Map_26ed_2: 	dc.w Map_26ed_12-Map_26ed
00016816 0000                       Map_26ed_4: 	dc.w Map_26ed_1D-Map_26ed
00016818 0000                       Map_26ed_6: 	dc.w Map_26ed_3C-Map_26ed
0001681A 0000                       Map_26ed_8: 	dc.w Map_26ed_65-Map_26ed
0001681C 0000                       Map_26ed_A: 	dc.w Map_26ed_84-Map_26ed
0001681E 01                         Map_26ed_C: 	dc.b $1
0001681F 0805 0000 F8               	dc.b $8, $5, $0, $0, $F8
00016824 02                         Map_26ed_12: 	dc.b $2
00016825 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
0001682A 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
0001682F 06                         Map_26ed_1D: 	dc.b $6
00016830 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016835 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
0001683A F605 0010 0C               	dc.b $F6, $5, $0, $10, $C
0001683F F605 0010 1C               	dc.b $F6, $5, $0, $10, $1C
00016844 F605 0810 D4               	dc.b $F6, $5, $8, $10, $D4
00016849 F605 0810 E4               	dc.b $F6, $5, $8, $10, $E4
0001684E 08                         Map_26ed_3C: 	dc.b $8
0001684F F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016854 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016859 F605 0010 0C               	dc.b $F6, $5, $0, $10, $C
0001685E F605 0010 1C               	dc.b $F6, $5, $0, $10, $1C
00016863 F605 0810 E4               	dc.b $F6, $5, $8, $10, $E4
00016868 F605 0010 2C               	dc.b $F6, $5, $0, $10, $2C
0001686D F605 0810 D4               	dc.b $F6, $5, $8, $10, $D4
00016872 F605 0810 C4               	dc.b $F6, $5, $8, $10, $C4
00016877 06                         Map_26ed_65: 	dc.b $6
00016878 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
0001687D 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016882 F605 0010 1C               	dc.b $F6, $5, $0, $10, $1C
00016887 F605 0010 2C               	dc.b $F6, $5, $0, $10, $2C
0001688C F605 0810 D4               	dc.b $F6, $5, $8, $10, $D4
00016891 F605 0810 C4               	dc.b $F6, $5, $8, $10, $C4
00016896 04                         Map_26ed_84: 	dc.b $4
00016897 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
0001689C 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
000168A1 F605 0010 2C               	dc.b $F6, $5, $0, $10, $2C
000168A6 F605 0810 C4               	dc.b $F6, $5, $8, $10, $C4
000168AC 00                         	even
000168AC 00                         	even
000168AC                            
000168AC                            ; ===========================================================================
000168AC                            ; ---------------------------------------------------------------------------
000168AC                            ; Object 6F - spinning platforms that move around a conveyor belt (SBZ)
000168AC                            ; ---------------------------------------------------------------------------
000168AC                            
000168AC                            Obj6F:					; XREF: Obj_Index
000168AC 7000                       		moveq	#0,d0
000168AE 1028 0024                  		move.b	$24(a0),d0
000168B2 323B 0000                  		move.w	Obj6F_Index(pc,d0.w),d1
000168B6 4EBB 1000                  		jsr	Obj6F_Index(pc,d1.w)
000168BA 3028 0030                  		move.w	$30(a0),d0
000168BE 0240 FF80                  		andi.w	#$FF80,d0
000168C2 3238 F700                  		move.w	($FFFFF700).w,d1
000168C6 0441 0080                  		subi.w	#$80,d1
000168CA 0241 FF80                  		andi.w	#$FF80,d1
000168CE 9041                       		sub.w	d1,d0
000168D0 0C40 0280                  		cmpi.w	#$280,d0
000168D4 6200                       		bhi.s	loc_1629A
000168D6                            
000168D6                            Obj6F_Display:
000168D6 4EF9 0000 DBA8             		jmp	DisplaySprite
000168DC                            ; ===========================================================================
000168DC                            
000168DC                            loc_1629A:
000168DC 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; check if act	is 3
000168E2 6600                       		bne.s	Obj6F_Act1or2	; if not, branch
000168E4 0C40 FF80                  		cmpi.w	#-$80,d0
000168E8 64EC                       		bcc.s	Obj6F_Display
000168EA                            
000168EA                            Obj6F_Act1or2:
000168EA 1028 002F                  		move.b	$2F(a0),d0
000168EE 6A00                       		bpl.s	Obj6F_Delete
000168F0 0240 007F                  		andi.w	#$7F,d0
000168F4 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
000168F8 08B2 0000 0000             		bclr	#0,(a2,d0.w)
000168FE                            
000168FE                            Obj6F_Delete:
000168FE 4EF9 0000 DBE4             		jmp	DeleteObject
00016904                            ; ===========================================================================
00016904 0000                       Obj6F_Index:	dc.w Obj6F_Main-Obj6F_Index
00016906 0000                       		dc.w loc_163D8-Obj6F_Index
00016908                            ; ===========================================================================
00016908                            
00016908                            Obj6F_Main:				; XREF: Obj6F_Index
00016908 1028 0028                  		move.b	$28(a0),d0
0001690C 6B00 0000                  		bmi.w	loc_16380
00016910 5428 0024                  		addq.b	#2,$24(a0)
00016914 217C 0001 5F6C 0004        		move.l	#Map_obj69a,4(a0)
0001691C 317C 04DF 0002             		move.w	#$4DF,2(a0)
00016922 117C 0010 0019             		move.b	#$10,$19(a0)
00016928 0028 0004 0001             		ori.b	#4,1(a0)
0001692E 117C 0004 0018             		move.b	#4,$18(a0)
00016934 7000                       		moveq	#0,d0
00016936 1028 0028                  		move.b	$28(a0),d0
0001693A 3200                       		move.w	d0,d1
0001693C E648                       		lsr.w	#3,d0
0001693E 0240 001E                  		andi.w	#$1E,d0
00016942 45FA 0000                  		lea	off_164A6(pc),a2
00016946 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001694A 315A 0038                  		move.w	(a2)+,$38(a0)
0001694E 315A 0030                  		move.w	(a2)+,$30(a0)
00016952 214A 003C                  		move.l	a2,$3C(a0)
00016956 0241 000F                  		andi.w	#$F,d1
0001695A E549                       		lsl.w	#2,d1
0001695C 1141 0038                  		move.b	d1,$38(a0)
00016960 117C 0004 003A             		move.b	#4,$3A(a0)
00016966 4A38 F7C0                  		tst.b	($FFFFF7C0).w
0001696A 6700                       		beq.s	loc_16356
0001696C 117C 0001 003B             		move.b	#1,$3B(a0)
00016972 4428 003A                  		neg.b	$3A(a0)
00016976 7200                       		moveq	#0,d1
00016978 1228 0038                  		move.b	$38(a0),d1
0001697C D228 003A                  		add.b	$3A(a0),d1
00016980 B228 0039                  		cmp.b	$39(a0),d1
00016984 6500                       		bcs.s	loc_16352
00016986 1001                       		move.b	d1,d0
00016988 7200                       		moveq	#0,d1
0001698A 4A00                       		tst.b	d0
0001698C 6A00                       		bpl.s	loc_16352
0001698E 1228 0039                  		move.b	$39(a0),d1
00016992 5901                       		subq.b	#4,d1
00016994                            
00016994                            loc_16352:
00016994 1141 0038                  		move.b	d1,$38(a0)
00016998                            
00016998                            loc_16356:
00016998 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
0001699E 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
000169A4 4A41                       		tst.w	d1
000169A6 6600                       		bne.s	loc_1636C
000169A8 117C 0001 001C             		move.b	#1,$1C(a0)
000169AE                            
000169AE                            loc_1636C:
000169AE 0C41 0008                  		cmpi.w	#8,d1
000169B2 6600                       		bne.s	loc_16378
000169B4 117C 0000 001C             		move.b	#0,$1C(a0)
000169BA                            
000169BA                            loc_16378:
000169BA 6100 C12C                  		bsr.w	Obj63_ChangeDir
000169BE 6000 0000                  		bra.w	loc_163D8
000169C2                            ; ===========================================================================
000169C2                            
000169C2                            loc_16380:				; XREF: Obj6F_Main
000169C2 1140 002F                  		move.b	d0,$2F(a0)
000169C6 0240 007F                  		andi.w	#$7F,d0
000169CA 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
000169CE 08F2 0000 0000             		bset	#0,(a2,d0.w)
000169D4 6700                       		beq.s	loc_1639A
000169D6 4EF9 0000 DBE4             		jmp	DeleteObject
000169DC                            ; ===========================================================================
000169DC                            
000169DC                            loc_1639A:
000169DC D040                       		add.w	d0,d0
000169DE 0240 001E                  		andi.w	#$1E,d0
000169E2 0640 0080                  		addi.w	#$80,d0
000169E6 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
000169EC D4F2 0000                  		adda.w	(a2,d0.w),a2
000169F0 321A                       		move.w	(a2)+,d1
000169F2 2248                       		movea.l	a0,a1
000169F4 6000                       		bra.s	Obj6F_LoadPform
000169F6                            ; ===========================================================================
000169F6                            
000169F6                            Obj6F_Loop:
000169F6 4EB9 0000 E02E             		jsr	SingleObjLoad
000169FC 6600                       		bne.s	loc_163D0
000169FE                            
000169FE                            Obj6F_LoadPform:			; XREF: loc_1639A
000169FE 12BC 006F                  		move.b	#$6F,0(a1)
00016A02 335A 0008                  		move.w	(a2)+,8(a1)
00016A06 335A 000C                  		move.w	(a2)+,$C(a1)
00016A0A 301A                       		move.w	(a2)+,d0
00016A0C 1340 0028                  		move.b	d0,$28(a1)
00016A10                            
00016A10                            loc_163D0:
00016A10 51C9 FFE4                  		dbf	d1,Obj6F_Loop
00016A14                            
00016A14 588F                       		addq.l	#4,sp
00016A16 4E75                       		rts	
00016A18                            ; ===========================================================================
00016A18                            
00016A18                            loc_163D8:				; XREF: Obj6F_Index
00016A18 43F9 0000 0000             		lea	(Ani_obj6F).l,a1
00016A1E 4EB9 0000 AC42             		jsr	AnimateSprite
00016A24 4A28 001A                  		tst.b	$1A(a0)
00016A28 6600                       		bne.s	loc_16404
00016A2A 3F28 0008                  		move.w	8(a0),-(sp)
00016A2E 6100 0000                  		bsr.w	loc_16424
00016A32 323C 001B                  		move.w	#$1B,d1
00016A36 343C 0007                  		move.w	#7,d2
00016A3A 3602                       		move.w	d2,d3
00016A3C 5243                       		addq.w	#1,d3
00016A3E 381F                       		move.w	(sp)+,d4
00016A40 6000 9536                  		bra.w	SolidObject
00016A44                            ; ===========================================================================
00016A44                            
00016A44                            loc_16404:
00016A44 0828 0003 0022             		btst	#3,$22(a0)
00016A4A 6700                       		beq.s	loc_16420
00016A4C 43F8 D000                  		lea	($FFFFD000).w,a1
00016A50 08A9 0003 0022             		bclr	#3,$22(a1)
00016A56 08A8 0003 0022             		bclr	#3,$22(a0)
00016A5C 4228 0025                  		clr.b	$25(a0)
00016A60                            
00016A60                            loc_16420:
00016A60 6000 0002                  		bra.w	*+4
00016A64                            
00016A64                            loc_16424:
00016A64 3028 0008                  		move.w	8(a0),d0
00016A68 B068 0034                  		cmp.w	$34(a0),d0
00016A6C 6600                       		bne.s	loc_16484
00016A6E 3028 000C                  		move.w	$C(a0),d0
00016A72 B068 0036                  		cmp.w	$36(a0),d0
00016A76 6600                       		bne.s	loc_16484
00016A78 7200                       		moveq	#0,d1
00016A7A 1228 0038                  		move.b	$38(a0),d1
00016A7E D228 003A                  		add.b	$3A(a0),d1
00016A82 B228 0039                  		cmp.b	$39(a0),d1
00016A86 6500                       		bcs.s	loc_16456
00016A88 1001                       		move.b	d1,d0
00016A8A 7200                       		moveq	#0,d1
00016A8C 4A00                       		tst.b	d0
00016A8E 6A00                       		bpl.s	loc_16456
00016A90 1228 0039                  		move.b	$39(a0),d1
00016A94 5901                       		subq.b	#4,d1
00016A96                            
00016A96                            loc_16456:
00016A96 1141 0038                  		move.b	d1,$38(a0)
00016A9A 2268 003C                  		movea.l	$3C(a0),a1
00016A9E 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00016AA4 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00016AAA 4A41                       		tst.w	d1
00016AAC 6600                       		bne.s	loc_16474
00016AAE 117C 0001 001C             		move.b	#1,$1C(a0)
00016AB4                            
00016AB4                            loc_16474:
00016AB4 0C41 0008                  		cmpi.w	#8,d1
00016AB8 6600                       		bne.s	loc_16480
00016ABA 117C 0000 001C             		move.b	#0,$1C(a0)
00016AC0                            
00016AC0                            loc_16480:
00016AC0 6100 C026                  		bsr.w	Obj63_ChangeDir
00016AC4                            
00016AC4                            loc_16484:
00016AC4 4EF9 0000 DB82             		jmp	SpeedToPos
00016ACA                            ; ===========================================================================
00016ACA                            Ani_obj6F:
00016ACA                            	include "_anim\obj6F.asm"
00016ACA                            ; ---------------------------------------------------------------------------
00016ACA                            ; Animation script - platform on conveyor belt (SBZ)
00016ACA                            ; ---------------------------------------------------------------------------
00016ACA 0000                       		dc.w byte_1648E-Ani_obj6F
00016ACC 0000                       		dc.w byte_164A2-Ani_obj6F
00016ACE 0000 0102 0304 4342 4140+  byte_1648E:	dc.b 0,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00016ADB 6423 2221 00FF 00          		dc.b $64, $23, $22, $21, 0, $FF, 0
00016AE2 0F00 FF                    byte_164A2:	dc.b $F, 0, $FF
00016AE6 00                         		even
00016AE6 00                         		even
00016AE6                            
00016AE6 0000 0000 0000             off_164A6:	dc.w word_164B2-off_164A6, word_164C6-off_164A6, word_164DA-off_164A6
00016AEC 0000 0000 0000             		dc.w word_164EE-off_164A6, word_16502-off_164A6, word_16516-off_164A6
00016AF2 0010 0E80 0E14 0370 0EEF+  word_164B2:	dc.w $10, $E80,	$E14, $370, $EEF, $302,	$EEF, $340, $E14, $3AE
00016B06 0010 0F80 0F14 02E0 0FEF+  word_164C6:	dc.w $10, $F80,	$F14, $2E0, $FEF, $272,	$FEF, $2B0, $F14, $31E
00016B1A 0010 1080 1014 0270 10EF+  word_164DA:	dc.w $10, $1080, $1014,	$270, $10EF, $202, $10EF, $240,	$1014, $2AE
00016B2E 0010 0F80 0F14 0570 0FEF+  word_164EE:	dc.w $10, $F80,	$F14, $570, $FEF, $502,	$FEF, $540, $F14, $5AE
00016B42 0010 1B80 1B14 0670 1BEF+  word_16502:	dc.w $10, $1B80, $1B14,	$670, $1BEF, $602, $1BEF, $640,	$1B14, $6AE
00016B56 0010 1C80 1C14 05E0 1CEF+  word_16516:	dc.w $10, $1C80, $1C14,	$5E0, $1CEF, $572, $1CEF, $5B0,	$1C14, $61E
00016B6A                            ; ===========================================================================
00016B6A                            ; ---------------------------------------------------------------------------
00016B6A                            ; Object 70 - large girder block (SBZ)
00016B6A                            ; ---------------------------------------------------------------------------
00016B6A                            
00016B6A                            Obj70:					; XREF: Obj_Index
00016B6A 7000                       		moveq	#0,d0
00016B6C 1028 0024                  		move.b	$24(a0),d0
00016B70 323B 0000                  		move.w	Obj70_Index(pc,d0.w),d1
00016B74 4EFB 1000                  		jmp	Obj70_Index(pc,d1.w)
00016B78                            ; ===========================================================================
00016B78 0000                       Obj70_Index:	dc.w Obj70_Main-Obj70_Index
00016B7A 0000                       		dc.w Obj70_Action-Obj70_Index
00016B7C                            ; ===========================================================================
00016B7C                            
00016B7C                            Obj70_Main:				; XREF: Obj70_Index
00016B7C 5428 0024                  		addq.b	#2,$24(a0)
00016B80 217C 0000 0000 0004        		move.l	#Map_obj70,4(a0)
00016B88 317C 42F0 0002             		move.w	#$42F0,2(a0)
00016B8E 0028 0004 0001             		ori.b	#4,1(a0)
00016B94 117C 0004 0018             		move.b	#4,$18(a0)
00016B9A 117C 0060 0019             		move.b	#$60,$19(a0)
00016BA0 117C 0018 0016             		move.b	#$18,$16(a0)
00016BA6 3168 0008 0032             		move.w	8(a0),$32(a0)
00016BAC 3168 000C 0030             		move.w	$C(a0),$30(a0)
00016BB2 6100 0000                  		bsr.w	Obj70_Move2
00016BB6                            
00016BB6                            Obj70_Action:				; XREF: Obj70_Index
00016BB6 3F28 0008                  		move.w	8(a0),-(sp)
00016BBA 4A68 003A                  		tst.w	$3A(a0)
00016BBE 6700                       		beq.s	Obj70_Move
00016BC0 5368 003A                  		subq.w	#1,$3A(a0)
00016BC4 6600                       		bne.s	Obj70_Solid
00016BC6                            
00016BC6                            Obj70_Move:
00016BC6 4EB9 0000 DB82             		jsr	SpeedToPos
00016BCC 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from movement duration
00016BD0 6600                       		bne.s	Obj70_Solid	; if time remains, branch
00016BD2 6100 0000                  		bsr.w	Obj70_Move2	; if time is zero, branch
00016BD6                            
00016BD6                            Obj70_Solid:
00016BD6 381F                       		move.w	(sp)+,d4
00016BD8 4A28 0001                  		tst.b	1(a0)
00016BDC 6A00                       		bpl.s	Obj70_ChkDel
00016BDE 7200                       		moveq	#0,d1
00016BE0 1228 0019                  		move.b	$19(a0),d1
00016BE4 0641 000B                  		addi.w	#$B,d1
00016BE8 7400                       		moveq	#0,d2
00016BEA 1428 0016                  		move.b	$16(a0),d2
00016BEE 3602                       		move.w	d2,d3
00016BF0 5243                       		addq.w	#1,d3
00016BF2 6100 9384                  		bsr.w	SolidObject
00016BF6                            
00016BF6                            Obj70_ChkDel:
00016BF6 3028 0032                  		move.w	$32(a0),d0
00016BFA 0240 FF80                  		andi.w	#$FF80,d0
00016BFE 3238 F700                  		move.w	($FFFFF700).w,d1
00016C02 0441 0080                  		subi.w	#$80,d1
00016C06 0241 FF80                  		andi.w	#$FF80,d1
00016C0A 9041                       		sub.w	d1,d0
00016C0C 0C40 0280                  		cmpi.w	#$280,d0
00016C10 6200                       		bhi.s	Obj70_Delete
00016C12 4EF9 0000 DBA8             		jmp	DisplaySprite
00016C18                            ; ===========================================================================
00016C18                            
00016C18                            Obj70_Delete:
00016C18 4EF9 0000 DBE4             		jmp	DeleteObject
00016C1E                            ; ===========================================================================
00016C1E                            
00016C1E                            Obj70_Move2:				; XREF: Obj70_Main
00016C1E 1028 0038                  		move.b	$38(a0),d0
00016C22 0240 0018                  		andi.w	#$18,d0
00016C26 43F9 0000 0000             		lea	(Obj70_MoveData).l,a1
00016C2C 43F1 0000                  		lea	(a1,d0.w),a1
00016C30 3159 0010                  		move.w	(a1)+,$10(a0)
00016C34 3159 0012                  		move.w	(a1)+,$12(a0)
00016C38 3159 0034                  		move.w	(a1)+,$34(a0)
00016C3C 5028 0038                  		addq.b	#8,$38(a0)	; use next movedata set
00016C40 317C 0007 003A             		move.w	#7,$3A(a0)
00016C46 4E75                       		rts	
00016C48                            ; ===========================================================================
00016C48 0100 0000 0060 0000        Obj70_MoveData:	dc.w   $100,	 0,   $60,     0 ; x-speed, y-speed, duration, blank
00016C50 0000 0100 0030 0000        		dc.w	  0,  $100,   $30,     0
00016C58 FF00 FFC0 0060 0000        		dc.w  $FF00, $FFC0,   $60,     0
00016C60 0000 FF00 0018 0000        		dc.w	  0, $FF00,   $18,     0
00016C68                            ; ---------------------------------------------------------------------------
00016C68                            ; Sprite mappings - large girder block (SBZ)
00016C68                            ; ---------------------------------------------------------------------------
00016C68                            Map_obj70:
00016C68                            	include "_maps\obj70.asm"
00016C68                            ; ---------------------------------------------------------------------------
00016C68                            ; Sprite mappings - large girder block (SBZ)
00016C68                            ; ---------------------------------------------------------------------------
00016C68 0000                       		dc.w byte_1662A-Map_obj70
00016C6A 0C                         byte_1662A:	dc.b $C
00016C6B E80E 0000 A0               		dc.b $E8, $E, 0, 0, $A0
00016C70 000E 1000 A0               		dc.b 0,	$E, $10, 0, $A0
00016C75 E80E 0006 C0               		dc.b $E8, $E, 0, 6, $C0
00016C7A 000E 1006 C0               		dc.b 0,	$E, $10, 6, $C0
00016C7F E80E 0006 E0               		dc.b $E8, $E, 0, 6, $E0
00016C84 000E 1006 E0               		dc.b 0,	$E, $10, 6, $E0
00016C89 E80E 0006 00               		dc.b $E8, $E, 0, 6, 0
00016C8E 000E 1006 00               		dc.b 0,	$E, $10, 6, 0
00016C93 E80E 0006 20               		dc.b $E8, $E, 0, 6, $20
00016C98 000E 1006 20               		dc.b 0,	$E, $10, 6, $20
00016C9D E80E 0006 40               		dc.b $E8, $E, 0, 6, $40
00016CA2 000E 1006 40               		dc.b 0,	$E, $10, 6, $40
00016CA8 00                         		even
00016CA8 00                         		even
00016CA8                            
00016CA8                            ; ===========================================================================
00016CA8                            ; ---------------------------------------------------------------------------
00016CA8                            ; Object 72 - teleporter (SBZ)
00016CA8                            ; ---------------------------------------------------------------------------
00016CA8                            
00016CA8                            Obj72:					; XREF: Obj_Index
00016CA8 7000                       		moveq	#0,d0
00016CAA 1028 0024                  		move.b	$24(a0),d0
00016CAE 323B 0000                  		move.w	Obj72_Index(pc,d0.w),d1
00016CB2 4EBB 1000                  		jsr	Obj72_Index(pc,d1.w)
00016CB6 3028 0008                  		move.w	8(a0),d0
00016CBA 0240 FF80                  		andi.w	#$FF80,d0
00016CBE 3238 F700                  		move.w	($FFFFF700).w,d1
00016CC2 0441 0080                  		subi.w	#$80,d1
00016CC6 0241 FF80                  		andi.w	#$FF80,d1
00016CCA 9041                       		sub.w	d1,d0
00016CCC 0C40 0280                  		cmpi.w	#$280,d0
00016CD0 6200                       		bhi.s	Obj72_Delete
00016CD2 4E75                       		rts	
00016CD4                            ; ===========================================================================
00016CD4                            
00016CD4                            Obj72_Delete:
00016CD4 4EF9 0000 DBE4             		jmp	DeleteObject
00016CDA                            ; ===========================================================================
00016CDA 0000                       Obj72_Index:	dc.w Obj72_Main-Obj72_Index
00016CDC 0000                       		dc.w loc_166C8-Obj72_Index
00016CDE 0000                       		dc.w loc_1675E-Obj72_Index
00016CE0 0000                       		dc.w loc_16798-Obj72_Index
00016CE2                            ; ===========================================================================
00016CE2                            
00016CE2                            Obj72_Main:				; XREF: Obj72_Index
00016CE2 5428 0024                  		addq.b	#2,$24(a0)
00016CE6 1028 0028                  		move.b	$28(a0),d0
00016CEA D040                       		add.w	d0,d0
00016CEC 0240 001E                  		andi.w	#$1E,d0
00016CF0 45FA 0000                  		lea	Obj72_Data(pc),a2
00016CF4 D4F2 0000                  		adda.w	(a2,d0.w),a2
00016CF8 315A 003A                  		move.w	(a2)+,$3A(a0)
00016CFC 214A 003C                  		move.l	a2,$3C(a0)
00016D00 315A 0036                  		move.w	(a2)+,$36(a0)
00016D04 315A 0038                  		move.w	(a2)+,$38(a0)
00016D08                            
00016D08                            loc_166C8:				; XREF: Obj72_Index
00016D08 43F8 D000                  		lea	($FFFFD000).w,a1
00016D0C 3029 0008                  		move.w	8(a1),d0
00016D10 9068 0008                  		sub.w	8(a0),d0
00016D14 0828 0000 0022             		btst	#0,$22(a0)
00016D1A 6700                       		beq.s	loc_166E0
00016D1C 0640 000F                  		addi.w	#$F,d0
00016D20                            
00016D20                            loc_166E0:
00016D20 0C40 0010                  		cmpi.w	#$10,d0
00016D24 6400                       		bcc.s	locret_1675C
00016D26 3229 000C                  		move.w	$C(a1),d1
00016D2A 9268 000C                  		sub.w	$C(a0),d1
00016D2E 0641 0020                  		addi.w	#$20,d1
00016D32 0C41 0040                  		cmpi.w	#$40,d1
00016D36 6400                       		bcc.s	locret_1675C
00016D38 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00016D3C 6600                       		bne.s	locret_1675C
00016D3E 0C28 0007 0028             		cmpi.b	#7,$28(a0)
00016D44 6600                       		bne.s	loc_1670E
00016D46 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w
00016D4C 6500                       		bcs.s	locret_1675C
00016D4E                            
00016D4E                            loc_1670E:
00016D4E 5428 0024                  		addq.b	#2,$24(a0)
00016D52 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
00016D58 137C 0002 001C             		move.b	#2,$1C(a1)	; use Sonic's rolling animation
00016D5E 337C 0800 0014             		move.w	#$800,$14(a1)
00016D64 337C 0000 0010             		move.w	#0,$10(a1)
00016D6A 337C 0000 0012             		move.w	#0,$12(a1)
00016D70 08A8 0005 0022             		bclr	#5,$22(a0)
00016D76 08A9 0005 0022             		bclr	#5,$22(a1)
00016D7C 08E9 0001 0022             		bset	#1,$22(a1)
00016D82 3368 0008 0008             		move.w	8(a0),8(a1)
00016D88 3368 000C 000C             		move.w	$C(a0),$C(a1)
00016D8E 4228 0032                  		clr.b	$32(a0)
00016D92 303C 00BE                  		move.w	#$BE,d0
00016D96 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play Sonic rolling sound
00016D9C                            
00016D9C                            locret_1675C:
00016D9C 4E75                       		rts	
00016D9E                            ; ===========================================================================
00016D9E                            
00016D9E                            loc_1675E:				; XREF: Obj72_Index
00016D9E 43F8 D000                  		lea	($FFFFD000).w,a1
00016DA2 1028 0032                  		move.b	$32(a0),d0
00016DA6 5428 0032                  		addq.b	#2,$32(a0)
00016DAA 4EB9 0000 2C22             		jsr	(CalcSine).l
00016DB0 EA40                       		asr.w	#5,d0
00016DB2 3428 000C                  		move.w	$C(a0),d2
00016DB6 9440                       		sub.w	d0,d2
00016DB8 3342 000C                  		move.w	d2,$C(a1)
00016DBC 0C28 0080 0032             		cmpi.b	#$80,$32(a0)
00016DC2 6600                       		bne.s	locret_16796
00016DC4 6100 0000                  		bsr.w	sub_1681C
00016DC8 5428 0024                  		addq.b	#2,$24(a0)
00016DCC 303C 00BC                  		move.w	#$BC,d0
00016DD0 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play teleport sound
00016DD6                            
00016DD6                            locret_16796:
00016DD6 4E75                       		rts	
00016DD8                            ; ===========================================================================
00016DD8                            
00016DD8                            loc_16798:				; XREF: Obj72_Index
00016DD8 588F                       		addq.l	#4,sp
00016DDA 43F8 D000                  		lea	($FFFFD000).w,a1
00016DDE 5328 002E                  		subq.b	#1,$2E(a0)
00016DE2 6A00                       		bpl.s	loc_167DA
00016DE4 3368 0036 0008             		move.w	$36(a0),8(a1)
00016DEA 3368 0038 000C             		move.w	$38(a0),$C(a1)
00016DF0 7200                       		moveq	#0,d1
00016DF2 1228 003A                  		move.b	$3A(a0),d1
00016DF6 5801                       		addq.b	#4,d1
00016DF8 B228 003B                  		cmp.b	$3B(a0),d1
00016DFC 6500                       		bcs.s	loc_167C2
00016DFE 7200                       		moveq	#0,d1
00016E00 6000                       		bra.s	loc_16800
00016E02                            ; ===========================================================================
00016E02                            
00016E02                            loc_167C2:
00016E02 1141 003A                  		move.b	d1,$3A(a0)
00016E06 2468 003C                  		movea.l	$3C(a0),a2
00016E0A 3172 1000 0036             		move.w	(a2,d1.w),$36(a0)
00016E10 3172 1002 0038             		move.w	2(a2,d1.w),$38(a0)
00016E16 6000 0000                  		bra.w	sub_1681C
00016E1A                            ; ===========================================================================
00016E1A                            
00016E1A                            loc_167DA:
00016E1A 2429 0008                  		move.l	8(a1),d2
00016E1E 2629 000C                  		move.l	$C(a1),d3
00016E22 3029 0010                  		move.w	$10(a1),d0
00016E26 48C0                       		ext.l	d0
00016E28 E180                       		asl.l	#8,d0
00016E2A D480                       		add.l	d0,d2
00016E2C 3029 0012                  		move.w	$12(a1),d0
00016E30 48C0                       		ext.l	d0
00016E32 E180                       		asl.l	#8,d0
00016E34 D680                       		add.l	d0,d3
00016E36 2342 0008                  		move.l	d2,8(a1)
00016E3A 2343 000C                  		move.l	d3,$C(a1)
00016E3E 4E75                       		rts	
00016E40                            ; ===========================================================================
00016E40                            
00016E40                            loc_16800:
00016E40 0269 07FF 000C             		andi.w	#$7FF,$C(a1)
00016E46 4228 0024                  		clr.b	$24(a0)
00016E4A 4238 F7C8                  		clr.b	($FFFFF7C8).w
00016E4E 337C 0000 0010             		move.w	#0,$10(a1)
00016E54 337C 0200 0012             		move.w	#$200,$12(a1)
00016E5A 4E75                       		rts	
00016E5C                            
00016E5C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016E5C                            
00016E5C                            
00016E5C                            sub_1681C:
00016E5C 7000                       		moveq	#0,d0
00016E5E 343C 1000                  		move.w	#$1000,d2
00016E62 3028 0036                  		move.w	$36(a0),d0
00016E66 9069 0008                  		sub.w	8(a1),d0
00016E6A 6C00                       		bge.s	loc_16830
00016E6C 4440                       		neg.w	d0
00016E6E 4442                       		neg.w	d2
00016E70                            
00016E70                            loc_16830:
00016E70 7200                       		moveq	#0,d1
00016E72 363C 1000                  		move.w	#$1000,d3
00016E76 3228 0038                  		move.w	$38(a0),d1
00016E7A 9269 000C                  		sub.w	$C(a1),d1
00016E7E 6C00                       		bge.s	loc_16844
00016E80 4441                       		neg.w	d1
00016E82 4443                       		neg.w	d3
00016E84                            
00016E84                            loc_16844:
00016E84 B240                       		cmp.w	d0,d1
00016E86 6500                       		bcs.s	loc_1687A
00016E88 7200                       		moveq	#0,d1
00016E8A 3228 0038                  		move.w	$38(a0),d1
00016E8E 9269 000C                  		sub.w	$C(a1),d1
00016E92 4841                       		swap	d1
00016E94 83C3                       		divs.w	d3,d1
00016E96 7000                       		moveq	#0,d0
00016E98 3028 0036                  		move.w	$36(a0),d0
00016E9C 9069 0008                  		sub.w	8(a1),d0
00016EA0 6700                       		beq.s	loc_16866
00016EA2 4840                       		swap	d0
00016EA4 81C1                       		divs.w	d1,d0
00016EA6                            
00016EA6                            loc_16866:
00016EA6 3340 0010                  		move.w	d0,$10(a1)
00016EAA 3343 0012                  		move.w	d3,$12(a1)
00016EAE 4A41                       		tst.w	d1
00016EB0 6A00                       		bpl.s	loc_16874
00016EB2 4441                       		neg.w	d1
00016EB4                            
00016EB4                            loc_16874:
00016EB4 3141 002E                  		move.w	d1,$2E(a0)
00016EB8 4E75                       		rts	
00016EBA                            ; ===========================================================================
00016EBA                            
00016EBA                            loc_1687A:
00016EBA 7000                       		moveq	#0,d0
00016EBC 3028 0036                  		move.w	$36(a0),d0
00016EC0 9069 0008                  		sub.w	8(a1),d0
00016EC4 4840                       		swap	d0
00016EC6 81C2                       		divs.w	d2,d0
00016EC8 7200                       		moveq	#0,d1
00016ECA 3228 0038                  		move.w	$38(a0),d1
00016ECE 9269 000C                  		sub.w	$C(a1),d1
00016ED2 6700                       		beq.s	loc_16898
00016ED4 4841                       		swap	d1
00016ED6 83C0                       		divs.w	d0,d1
00016ED8                            
00016ED8                            loc_16898:
00016ED8 3341 0012                  		move.w	d1,$12(a1)
00016EDC 3342 0010                  		move.w	d2,$10(a1)
00016EE0 4A40                       		tst.w	d0
00016EE2 6A00                       		bpl.s	loc_168A6
00016EE4 4440                       		neg.w	d0
00016EE6                            
00016EE6                            loc_168A6:
00016EE6 3140 002E                  		move.w	d0,$2E(a0)
00016EEA 4E75                       		rts	
00016EEC                            ; End of function sub_1681C
00016EEC                            
00016EEC                            ; ===========================================================================
00016EEC 0000 0000 0000             Obj72_Data:	dc.w word_168BC-Obj72_Data, word_168C2-Obj72_Data, word_168C8-Obj72_Data
00016EF2 0000 0000 0000             		dc.w word_168E6-Obj72_Data, word_168EC-Obj72_Data, word_1690A-Obj72_Data
00016EF8 0000 0000                  		dc.w word_16910-Obj72_Data, word_1692E-Obj72_Data
00016EFC 0004 0794 098C             word_168BC:	dc.w 4,	$794, $98C
00016F02 0004 0094 038C             word_168C2:	dc.w 4,	$94, $38C
00016F08 001C 0794 02E8             word_168C8:	dc.w $1C, $794,	$2E8
00016F0E 07A4 02C0 07D0             		dc.w $7A4, $2C0, $7D0
00016F14 02AC 0858 02AC             		dc.w $2AC, $858, $2AC
00016F1A 0884 0298 0894             		dc.w $884, $298, $894
00016F20 0270 0894 0190             		dc.w $270, $894, $190
00016F26 0004 0894 0690             word_168E6:	dc.w 4,	$894, $690
00016F2C 001C 1194 0470             word_168EC:	dc.w $1C, $1194, $470
00016F32 1184 0498 1158             		dc.w $1184, $498, $1158
00016F38 04AC 0FD0 04AC             		dc.w $4AC, $FD0, $4AC
00016F3E 0FA4 04C0 0F94             		dc.w $FA4, $4C0, $F94
00016F44 04E8 0F94 0590             		dc.w $4E8, $F94, $590
00016F4A 0004 1294 0490             word_1690A:	dc.w 4,	$1294, $490
00016F50 001C 1594 FFE8             word_16910:	dc.w $1C, $1594, $FFE8
00016F56 1584 FFC0 1560             		dc.w $1584, $FFC0, $1560
00016F5C FFAC 14D0 FFAC             		dc.w $FFAC, $14D0, $FFAC
00016F62 14A4 FF98 1494             		dc.w $14A4, $FF98, $1494
00016F68 FF70 1494 FD90             		dc.w $FF70, $1494, $FD90
00016F6E 0004 0894 0090             word_1692E:	dc.w 4,	$894, $90
00016F74                            ; ===========================================================================
00016F74                            ; ---------------------------------------------------------------------------
00016F74                            ; Object 78 - Caterkiller enemy	(MZ, SBZ)
00016F74                            ; ---------------------------------------------------------------------------
00016F74                            
00016F74                            Obj78:					; XREF: Obj_Index
00016F74 7000                       		moveq	#0,d0
00016F76 1028 0024                  		move.b	$24(a0),d0
00016F7A 323B 0000                  		move.w	Obj78_Index(pc,d0.w),d1
00016F7E 4EFB 1000                  		jmp	Obj78_Index(pc,d1.w)
00016F82                            ; ===========================================================================
00016F82 0000                       Obj78_Index:	dc.w Obj78_Main-Obj78_Index
00016F84 0000                       		dc.w Obj78_Action-Obj78_Index
00016F86 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
00016F88 0000                       		dc.w Obj78_BodySeg2-Obj78_Index
00016F8A 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
00016F8C 0000                       		dc.w Obj78_Delete-Obj78_Index
00016F8E 0000                       		dc.w loc_16CC0-Obj78_Index
00016F90                            ; ===========================================================================
00016F90                            
00016F90                            locret_16950:
00016F90 4E75                       		rts	
00016F92                            ; ===========================================================================
00016F92                            
00016F92                            Obj78_Main:				; XREF: Obj78_Index
00016F92 117C 0007 0016             		move.b	#7,$16(a0)
00016F98 117C 0008 0017             		move.b	#8,$17(a0)
00016F9E 4EB9 0000 DB56             		jsr	ObjectFall
00016FA4 4EBA E4A6                  		jsr	ObjHitFloor
00016FA8 4A41                       		tst.w	d1
00016FAA 6AE4                       		bpl.s	locret_16950
00016FAC D368 000C                  		add.w	d1,$C(a0)
00016FB0 4268 0012                  		clr.w	$12(a0)
00016FB4 5428 0024                  		addq.b	#2,$24(a0)
00016FB8 217C 0000 0000 0004        		move.l	#Map_obj78,4(a0)
00016FC0 317C 22B0 0002             		move.w	#$22B0,2(a0)
00016FC6 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; if level is SBZ, branch
00016FCC 6700                       		beq.s	loc_16996
00016FCE 317C 24FF 0002             		move.w	#$24FF,2(a0)	; MZ specific code
00016FD4                            
00016FD4                            loc_16996:
00016FD4 0228 0003 0001             		andi.b	#3,1(a0)
00016FDA 0028 0004 0001             		ori.b	#4,1(a0)
00016FE0 1168 0001 0022             		move.b	1(a0),$22(a0)
00016FE6 117C 0004 0018             		move.b	#4,$18(a0)
00016FEC 117C 0008 0019             		move.b	#8,$19(a0)
00016FF2 117C 000B 0020             		move.b	#$B,$20(a0)
00016FF8 3428 0008                  		move.w	8(a0),d2
00016FFC 7A0C                       		moveq	#$C,d5
00016FFE 0828 0000 0022             		btst	#0,$22(a0)
00017004 6700                       		beq.s	loc_169CA
00017006 4445                       		neg.w	d5
00017008                            
00017008                            loc_169CA:
00017008 1C3C 0004                  		move.b	#4,d6
0001700C 7600                       		moveq	#0,d3
0001700E 7804                       		moveq	#4,d4
00017010 2448                       		movea.l	a0,a2
00017012 7202                       		moveq	#2,d1
00017014                            
00017014                            Obj78_LoadBody:
00017014 4EB9 0000 E044             		jsr	SingleObjLoad2
0001701A 6600                       		bne.s	Obj78_QuitLoad
0001701C 12BC 0078                  		move.b	#$78,0(a1)	; load body segment object
00017020 1346 0024                  		move.b	d6,$24(a1)
00017024 5406                       		addq.b	#2,d6
00017026 2368 0004 0004             		move.l	4(a0),4(a1)
0001702C 3368 0002 0002             		move.w	2(a0),2(a1)
00017032 137C 0005 0018             		move.b	#5,$18(a1)
00017038 137C 0008 0019             		move.b	#8,$19(a1)
0001703E 137C 00CB 0020             		move.b	#$CB,$20(a1)
00017044 D445                       		add.w	d5,d2
00017046 3342 0008                  		move.w	d2,8(a1)
0001704A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00017050 1368 0022 0022             		move.b	$22(a0),$22(a1)
00017056 1368 0022 0001             		move.b	$22(a0),1(a1)
0001705C 137C 0008 001A             		move.b	#8,$1A(a1)
00017062 234A 003C                  		move.l	a2,$3C(a1)
00017066 1344 003C                  		move.b	d4,$3C(a1)
0001706A 5804                       		addq.b	#4,d4
0001706C 2449                       		movea.l	a1,a2
0001706E                            
0001706E                            Obj78_QuitLoad:
0001706E 51C9 FFA4                  		dbf	d1,Obj78_LoadBody ; repeat sequence 2 more times
00017072                            
00017072 117C 0007 002A             		move.b	#7,$2A(a0)
00017078 4228 003C                  		clr.b	$3C(a0)
0001707C                            
0001707C                            Obj78_Action:				; XREF: Obj78_Index
0001707C 4A28 0022                  		tst.b	$22(a0)
00017080 6B00 0000                  		bmi.w	loc_16C96
00017084 7000                       		moveq	#0,d0
00017086 1028 0025                  		move.b	$25(a0),d0
0001708A 323B 0000                  		move.w	Obj78_Index2(pc,d0.w),d1
0001708E 4EBB 1000                  		jsr	Obj78_Index2(pc,d1.w)
00017092 1228 002B                  		move.b	$2B(a0),d1
00017096 6A00                       		bpl.s	Obj78_Display
00017098 43F9 0000 0000             		lea	(Ani_obj78).l,a1
0001709E 1028 0026                  		move.b	$26(a0),d0
000170A2 0240 007F                  		andi.w	#$7F,d0
000170A6 5828 0026                  		addq.b	#4,$26(a0)
000170AA 1031 0000                  		move.b	(a1,d0.w),d0
000170AE 6A00                       		bpl.s	Obj78_AniHead
000170B0 08A8 0007 002B             		bclr	#7,$2B(a0)
000170B6 6000                       		bra.s	Obj78_Display
000170B8                            ; ===========================================================================
000170B8                            
000170B8                            Obj78_AniHead:
000170B8 0201 0010                  		andi.b	#$10,d1
000170BC D001                       		add.b	d1,d0
000170BE 1140 001A                  		move.b	d0,$1A(a0)
000170C2                            
000170C2                            Obj78_Display:
000170C2 3028 0008                  		move.w	8(a0),d0
000170C6 0240 FF80                  		andi.w	#$FF80,d0
000170CA 3238 F700                  		move.w	($FFFFF700).w,d1
000170CE 0441 0080                  		subi.w	#$80,d1
000170D2 0241 FF80                  		andi.w	#$FF80,d1
000170D6 9041                       		sub.w	d1,d0
000170D8 0C40 0280                  		cmpi.w	#$280,d0
000170DC 6200 0000                  		bhi.w	Obj78_ChkGone
000170E0 4EF9 0000 DBA8             		jmp	DisplaySprite
000170E6                            ; ===========================================================================
000170E6                            
000170E6                            Obj78_ChkGone:
000170E6 45F8 FC00                  		lea	($FFFFFC00).w,a2
000170EA 7000                       		moveq	#0,d0
000170EC 1028 0023                  		move.b	$23(a0),d0
000170F0 6700                       		beq.s	loc_16ABC
000170F2 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000170F8                            
000170F8                            loc_16ABC:
000170F8 117C 000A 0024             		move.b	#$A,$24(a0)	; run "Obj78_Delete" routine
000170FE 4E75                       		rts	
00017100                            ; ===========================================================================
00017100                            
00017100                            Obj78_Delete:				; XREF: Obj78_Index
00017100 4EF9 0000 DBE4             		jmp	DeleteObject
00017106                            ; ===========================================================================
00017106 0000                       Obj78_Index2:	dc.w Obj78_Move-Obj78_Index2
00017108 0000                       		dc.w loc_16B02-Obj78_Index2
0001710A                            ; ===========================================================================
0001710A                            
0001710A                            Obj78_Move:				; XREF: Obj78_Index2
0001710A 5328 002A                  		subq.b	#1,$2A(a0)
0001710E 6B00                       		bmi.s	Obj78_Move2
00017110 4E75                       		rts	
00017112                            ; ===========================================================================
00017112                            
00017112                            Obj78_Move2:
00017112 5428 0025                  		addq.b	#2,$25(a0)
00017116 117C 0010 002A             		move.b	#$10,$2A(a0)
0001711C 317C FF40 0010             		move.w	#-$C0,$10(a0)
00017122 317C 0040 0014             		move.w	#$40,$14(a0)
00017128 0868 0004 002B             		bchg	#4,$2B(a0)
0001712E 6600                       		bne.s	loc_16AFC
00017130 4268 0010                  		clr.w	$10(a0)
00017134 4468 0014                  		neg.w	$14(a0)
00017138                            
00017138                            loc_16AFC:
00017138 08E8 0007 002B             		bset	#7,$2B(a0)
0001713E                            
0001713E                            loc_16B02:				; XREF: Obj78_Index2
0001713E 5328 002A                  		subq.b	#1,$2A(a0)
00017142 6B00                       		bmi.s	loc_16B5E
00017144 2F28 0008                  		move.l	8(a0),-(sp)
00017148 2428 0008                  		move.l	8(a0),d2
0001714C 3028 0010                  		move.w	$10(a0),d0
00017150 0828 0000 0022             		btst	#0,$22(a0)
00017156 6700                       		beq.s	loc_16B1E
00017158 4440                       		neg.w	d0
0001715A                            
0001715A                            loc_16B1E:
0001715A 48C0                       		ext.l	d0
0001715C E180                       		asl.l	#8,d0
0001715E D480                       		add.l	d0,d2
00017160 2142 0008                  		move.l	d2,8(a0)
00017164 4EBA E2E6                  		jsr	ObjHitFloor
00017168 241F                       		move.l	(sp)+,d2
0001716A 0C41 FFF8                  		cmpi.w	#-8,d1
0001716E 6D00                       		blt.s	loc_16B70
00017170 0C41 000C                  		cmpi.w	#$C,d1
00017174 6C00                       		bge.s	loc_16B70
00017176 D368 000C                  		add.w	d1,$C(a0)
0001717A 4842                       		swap	d2
0001717C B468 0008                  		cmp.w	8(a0),d2
00017180 6700                       		beq.s	locret_16B5C
00017182 7000                       		moveq	#0,d0
00017184 1028 003C                  		move.b	$3C(a0),d0
00017188 5228 003C                  		addq.b	#1,$3C(a0)
0001718C 0228 000F 003C             		andi.b	#$F,$3C(a0)
00017192 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00017196                            
00017196                            locret_16B5C:
00017196 4E75                       		rts	
00017198                            ; ===========================================================================
00017198                            
00017198                            loc_16B5E:
00017198 5528 0025                  		subq.b	#2,$25(a0)
0001719C 117C 0007 002A             		move.b	#7,$2A(a0)
000171A2 317C 0000 0010             		move.w	#0,$10(a0)
000171A8 4E75                       		rts	
000171AA                            ; ===========================================================================
000171AA                            
000171AA                            loc_16B70:
000171AA 2142 0008                  		move.l	d2,8(a0)
000171AE 0868 0000 0022             		bchg	#0,$22(a0)
000171B4 1168 0022 0001             		move.b	$22(a0),1(a0)
000171BA 7000                       		moveq	#0,d0
000171BC 1028 003C                  		move.b	$3C(a0),d0
000171C0 11BC 0080 002C             		move.b	#$80,$2C(a0,d0.w)
000171C6 5228 003C                  		addq.b	#1,$3C(a0)
000171CA 0228 000F 003C             		andi.b	#$F,$3C(a0)
000171D0 4E75                       		rts	
000171D2                            ; ===========================================================================
000171D2                            
000171D2                            Obj78_BodySeg2:				; XREF: Obj78_Index
000171D2 2268 003C                  		movea.l	$3C(a0),a1
000171D6 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
000171DC 6A00                       		bpl.s	Obj78_BodySeg1
000171DE 43F9 0000 0000             		lea	(Ani_obj78).l,a1
000171E4 1028 0026                  		move.b	$26(a0),d0
000171E8 0240 007F                  		andi.w	#$7F,d0
000171EC 5828 0026                  		addq.b	#4,$26(a0)
000171F0 4A31 0004                  		tst.b	4(a1,d0.w)
000171F4 6A00                       		bpl.s	Obj78_AniBody
000171F6 5828 0026                  		addq.b	#4,$26(a0)
000171FA                            
000171FA                            Obj78_AniBody:
000171FA 1031 0000                  		move.b	(a1,d0.w),d0
000171FE 5000                       		addq.b	#8,d0
00017200 1140 001A                  		move.b	d0,$1A(a0)
00017204                            
00017204                            Obj78_BodySeg1:				; XREF: Obj78_Index
00017204 2268 003C                  		movea.l	$3C(a0),a1
00017208 4A28 0022                  		tst.b	$22(a0)
0001720C 6B00 0000                  		bmi.w	loc_16C90
00017210 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00017216 1169 0025 0025             		move.b	$25(a1),$25(a0)
0001721C 6700 0000                  		beq.w	loc_16C64
00017220 3169 0014 0014             		move.w	$14(a1),$14(a0)
00017226 3029 0010                  		move.w	$10(a1),d0
0001722A D069 0014                  		add.w	$14(a1),d0
0001722E 3140 0010                  		move.w	d0,$10(a0)
00017232 2428 0008                  		move.l	8(a0),d2
00017236 2602                       		move.l	d2,d3
00017238 3028 0010                  		move.w	$10(a0),d0
0001723C 0828 0000 0022             		btst	#0,$22(a0)
00017242 6700                       		beq.s	loc_16C0C
00017244 4440                       		neg.w	d0
00017246                            
00017246                            loc_16C0C:
00017246 48C0                       		ext.l	d0
00017248 E180                       		asl.l	#8,d0
0001724A D480                       		add.l	d0,d2
0001724C 2142 0008                  		move.l	d2,8(a0)
00017250 4843                       		swap	d3
00017252 B668 0008                  		cmp.w	8(a0),d3
00017256 6700                       		beq.s	loc_16C64
00017258 7000                       		moveq	#0,d0
0001725A 1028 003C                  		move.b	$3C(a0),d0
0001725E 1231 002C                  		move.b	$2C(a1,d0.w),d1
00017262 0C01 0080                  		cmpi.b	#-$80,d1
00017266 6600                       		bne.s	loc_16C50
00017268 4843                       		swap	d3
0001726A 2143 0008                  		move.l	d3,8(a0)
0001726E 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00017272 0868 0000 0022             		bchg	#0,$22(a0)
00017278 1168 0022 0001             		move.b	$22(a0),1(a0)
0001727E 5228 003C                  		addq.b	#1,$3C(a0)
00017282 0228 000F 003C             		andi.b	#$F,$3C(a0)
00017288 6000                       		bra.s	loc_16C64
0001728A                            ; ===========================================================================
0001728A                            
0001728A                            loc_16C50:
0001728A 4881                       		ext.w	d1
0001728C D368 000C                  		add.w	d1,$C(a0)
00017290 5228 003C                  		addq.b	#1,$3C(a0)
00017294 0228 000F 003C             		andi.b	#$F,$3C(a0)
0001729A 1181 002C                  		move.b	d1,$2C(a0,d0.w)
0001729E                            
0001729E                            loc_16C64:
0001729E 0C29 000C 0024             		cmpi.b	#$C,$24(a1)
000172A4 6700                       		beq.s	loc_16C90
000172A6 0C11 0027                  		cmpi.b	#$27,0(a1)
000172AA 6700                       		beq.s	loc_16C7C
000172AC 0C29 000A 0024             		cmpi.b	#$A,$24(a1)
000172B2 6600                       		bne.s	loc_16C82
000172B4                            
000172B4                            loc_16C7C:
000172B4 117C 000A 0024             		move.b	#$A,$24(a0)
000172BA                            
000172BA                            loc_16C82:
000172BA 4EF9 0000 DBA8             		jmp	DisplaySprite
000172C0                            
000172C0                            ; ===========================================================================
000172C0 FE00 FE80 0180 0200        Obj78_FragSpeed:dc.w $FE00, $FE80, $180, $200
000172C8                            ; ===========================================================================
000172C8                            
000172C8                            loc_16C90:
000172C8 08E9 0007 0022             		bset	#7,$22(a1)
000172CE                            
000172CE                            loc_16C96:
000172CE 7000                       		moveq	#0,d0
000172D0 1028 0024                  		move.b	$24(a0),d0
000172D4 303B 00E8                  		move.w	Obj78_FragSpeed-2(pc,d0.w),d0
000172D8 0828 0000 0022             		btst	#0,$22(a0)
000172DE 6700                       		beq.s	loc_16CAA
000172E0 4440                       		neg.w	d0
000172E2                            
000172E2                            loc_16CAA:
000172E2 3140 0010                  		move.w	d0,$10(a0)
000172E6 317C FC00 0012             		move.w	#-$400,$12(a0)
000172EC 117C 000C 0024             		move.b	#$C,$24(a0)
000172F2 0228 00F8 001A             		andi.b	#-8,$1A(a0)
000172F8                            
000172F8                            loc_16CC0:				; XREF: Obj78_Index
000172F8 4EB9 0000 DB56             		jsr	ObjectFall
000172FE 4A68 0012                  		tst.w	$12(a0)
00017302 6B00                       		bmi.s	loc_16CE0
00017304 4EBA E146                  		jsr	ObjHitFloor
00017308 4A41                       		tst.w	d1
0001730A 6A00                       		bpl.s	loc_16CE0
0001730C D368 000C                  		add.w	d1,$C(a0)
00017310 317C FC00 0012             		move.w	#-$400,$12(a0)
00017316                            
00017316                            loc_16CE0:
00017316 4A28 0001                  		tst.b	1(a0)
0001731A 6A00 FDCA                  		bpl.w	Obj78_ChkGone
0001731E 4EF9 0000 DBA8             		jmp	DisplaySprite
00017324                            ; ===========================================================================
00017324                            Ani_obj78:
00017324                            	include "_anim\obj78.asm"
00017324                            ; ---------------------------------------------------------------------------
00017324                            ; Animation script - Caterkiller enemy (uses non-standard format)
00017324                            ; ---------------------------------------------------------------------------
00017324 0000 0000 0000 0000 0000+  	dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 1
00017334 0101 0101 0101 0202 0202+  	dc.b 1,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 3, 3, 3, 3, 3
00017344 0404 0404 0404 0505 0505+  	dc.b 4,	4, 4, 4, 4, 4, 5, 5, 5,	5, 5, 6, 6, 6, 6, 6
00017354 0606 0707 0707 0707 0707+  	dc.b 6,	6, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, $FF, 7, 7, $FF
00017364 0707 0707 0707 0707 0707+  	dc.b 7,	7, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, 7, 7, 7, 6
00017374 0606 0606 0606 0505 0505+  	dc.b 6,	6, 6, 6, 6, 6, 5, 5, 5,	5, 5, 4, 4, 4, 4, 4
00017384 0403 0303 0303 0202 0202+  	dc.b 4,	3, 3, 3, 3, 3, 2, 2, 2,	2, 2, 1, 1, 1, 1, 1
00017394 0101 0000 0000 0000 0000+  	dc.b 1,	1, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, $FF, 0, 0, $FF
000173A4                            	even
000173A4                            	even
000173A4                            
000173A4                            ; ---------------------------------------------------------------------------
000173A4                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
000173A4                            ; ---------------------------------------------------------------------------
000173A4                            Map_obj78:
000173A4                            	include "_maps\obj78.asm"
000173A4                            ; ---------------------------------------------------------------------------
000173A4                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
000173A4                            ; ---------------------------------------------------------------------------
000173A4 0000 0000                  		dc.w byte_16D9E-Map_obj78, byte_16DA4-Map_obj78
000173A8 0000 0000                  		dc.w byte_16DAA-Map_obj78, byte_16DB0-Map_obj78
000173AC 0000 0000                  		dc.w byte_16DB6-Map_obj78, byte_16DBC-Map_obj78
000173B0 0000 0000                  		dc.w byte_16DC2-Map_obj78, byte_16DC8-Map_obj78
000173B4 0000 0000                  		dc.w byte_16DCE-Map_obj78, byte_16DD4-Map_obj78
000173B8 0000 0000                  		dc.w byte_16DDA-Map_obj78, byte_16DE0-Map_obj78
000173BC 0000 0000                  		dc.w byte_16DE6-Map_obj78, byte_16DEC-Map_obj78
000173C0 0000 0000                  		dc.w byte_16DF2-Map_obj78, byte_16DF8-Map_obj78
000173C4 0000 0000                  		dc.w byte_16DFE-Map_obj78, byte_16E04-Map_obj78
000173C8 0000 0000                  		dc.w byte_16E0A-Map_obj78, byte_16E10-Map_obj78
000173CC 0000 0000                  		dc.w byte_16E16-Map_obj78, byte_16E1C-Map_obj78
000173D0 0000 0000                  		dc.w byte_16E22-Map_obj78, byte_16E28-Map_obj78
000173D4 01                         byte_16D9E:	dc.b 1
000173D5 F206 0000 F8               		dc.b $F2, 6, 0,	0, $F8
000173DA 01                         byte_16DA4:	dc.b 1
000173DB F106 0000 F8               		dc.b $F1, 6, 0,	0, $F8
000173E0 01                         byte_16DAA:	dc.b 1
000173E1 F006 0000 F8               		dc.b $F0, 6, 0,	0, $F8
000173E6 01                         byte_16DB0:	dc.b 1
000173E7 EF06 0000 F8               		dc.b $EF, 6, 0,	0, $F8
000173EC 01                         byte_16DB6:	dc.b 1
000173ED EE06 0000 F8               		dc.b $EE, 6, 0,	0, $F8
000173F2 01                         byte_16DBC:	dc.b 1
000173F3 ED06 0000 F8               		dc.b $ED, 6, 0,	0, $F8
000173F8 01                         byte_16DC2:	dc.b 1
000173F9 EC06 0000 F8               		dc.b $EC, 6, 0,	0, $F8
000173FE 01                         byte_16DC8:	dc.b 1
000173FF EB06 0000 F8               		dc.b $EB, 6, 0,	0, $F8
00017404 01                         byte_16DCE:	dc.b 1
00017405 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001740A 01                         byte_16DD4:	dc.b 1
0001740B F705 000C F8               		dc.b $F7, 5, 0,	$C, $F8
00017410 01                         byte_16DDA:	dc.b 1
00017411 F605 000C F8               		dc.b $F6, 5, 0,	$C, $F8
00017416 01                         byte_16DE0:	dc.b 1
00017417 F505 000C F8               		dc.b $F5, 5, 0,	$C, $F8
0001741C 01                         byte_16DE6:	dc.b 1
0001741D F405 000C F8               		dc.b $F4, 5, 0,	$C, $F8
00017422 01                         byte_16DEC:	dc.b 1
00017423 F305 000C F8               		dc.b $F3, 5, 0,	$C, $F8
00017428 01                         byte_16DF2:	dc.b 1
00017429 F205 000C F8               		dc.b $F2, 5, 0,	$C, $F8
0001742E 01                         byte_16DF8:	dc.b 1
0001742F F105 000C F8               		dc.b $F1, 5, 0,	$C, $F8
00017434 01                         byte_16DFE:	dc.b 1
00017435 F206 0006 F8               		dc.b $F2, 6, 0,	6, $F8
0001743A 01                         byte_16E04:	dc.b 1
0001743B F106 0006 F8               		dc.b $F1, 6, 0,	6, $F8
00017440 01                         byte_16E0A:	dc.b 1
00017441 F006 0006 F8               		dc.b $F0, 6, 0,	6, $F8
00017446 01                         byte_16E10:	dc.b 1
00017447 EF06 0006 F8               		dc.b $EF, 6, 0,	6, $F8
0001744C 01                         byte_16E16:	dc.b 1
0001744D EE06 0006 F8               		dc.b $EE, 6, 0,	6, $F8
00017452 01                         byte_16E1C:	dc.b 1
00017453 ED06 0006 F8               		dc.b $ED, 6, 0,	6, $F8
00017458 01                         byte_16E22:	dc.b 1
00017459 EC06 0006 F8               		dc.b $EC, 6, 0,	6, $F8
0001745E 01                         byte_16E28:	dc.b 1
0001745F EB06 0006 F8               		dc.b $EB, 6, 0,	6, $F8
00017464                            		even
00017464                            		even
00017464                            
00017464                            ; ===========================================================================
00017464                            ; ---------------------------------------------------------------------------
00017464                            ; Object 79 - lamppost
00017464                            ; ---------------------------------------------------------------------------
00017464                            
00017464                            Obj79:					; XREF: Obj_Index
00017464 7000                       		moveq	#0,d0
00017466 1028 0024                  		move.b	$24(a0),d0
0001746A 323B 0000                  		move.w	Obj79_Index(pc,d0.w),d1
0001746E 4EBB 1000                  		jsr	Obj79_Index(pc,d1.w)
00017472 4EFA 87DC                  		jmp	MarkObjGone
00017476                            ; ===========================================================================
00017476 0000                       Obj79_Index:	dc.w Obj79_Main-Obj79_Index
00017478 0000                       		dc.w Obj79_BlueLamp-Obj79_Index
0001747A 0000                       		dc.w Obj79_AfterHit-Obj79_Index
0001747C 0000                       		dc.w Obj79_Twirl-Obj79_Index
0001747E                            ; ===========================================================================
0001747E                            
0001747E                            Obj79_Main:				; XREF: Obj79_Index
0001747E 5428 0024                  		addq.b	#2,$24(a0)
00017482 217C 0000 0000 0004        		move.l	#Map_obj79,4(a0)
0001748A 317C 07A0 0002             		move.w	#$7A0,2(a0)
00017490 117C 0004 0001             		move.b	#4,1(a0)
00017496 117C 0008 0019             		move.b	#8,$19(a0)
0001749C 117C 0005 0018             		move.b	#5,$18(a0)
000174A2 45F8 FC00                  		lea	($FFFFFC00).w,a2
000174A6 7000                       		moveq	#0,d0
000174A8 1028 0023                  		move.b	$23(a0),d0
000174AC 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000174B2 0832 0000 0002             		btst	#0,2(a2,d0.w)
000174B8 6600                       		bne.s	Obj79_RedLamp
000174BA 1238 FE30                  		move.b	($FFFFFE30).w,d1
000174BE 0201 007F                  		andi.b	#$7F,d1
000174C2 1428 0028                  		move.b	$28(a0),d2	; get lamppost number
000174C6 0202 007F                  		andi.b	#$7F,d2
000174CA B202                       		cmp.b	d2,d1		; is lamppost number higher than the number hit?
000174CC 6500                       		bcs.s	Obj79_BlueLamp	; if yes, branch
000174CE                            
000174CE                            Obj79_RedLamp:
000174CE 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000174D4 117C 0004 0024             		move.b	#4,$24(a0)	; run "Obj79_AfterHit" routine
000174DA 117C 0003 001A             		move.b	#3,$1A(a0)	; use red lamppost frame
000174E0 4E75                       		rts	
000174E2                            ; ===========================================================================
000174E2                            
000174E2                            Obj79_BlueLamp:				; XREF: Obj79_Index
000174E2 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
000174E6 6600 0000                  		bne.w	locret_16F90	; if yes, branch
000174EA 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000174EE 6B00 0000                  		bmi.w	locret_16F90
000174F2 1238 FE30                  		move.b	($FFFFFE30).w,d1
000174F6 0201 007F                  		andi.b	#$7F,d1
000174FA 1428 0028                  		move.b	$28(a0),d2
000174FE 0202 007F                  		andi.b	#$7F,d2
00017502 B202                       		cmp.b	d2,d1
00017504 6500                       		bcs.s	Obj79_HitLamp
00017506 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001750A 7000                       		moveq	#0,d0
0001750C 1028 0023                  		move.b	$23(a0),d0
00017510 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00017516 117C 0004 0024             		move.b	#4,$24(a0)
0001751C 117C 0003 001A             		move.b	#3,$1A(a0)
00017522 6000 0000                  		bra.w	locret_16F90
00017526                            ; ===========================================================================
00017526                            
00017526                            Obj79_HitLamp:
00017526 3038 D008                  		move.w	($FFFFD008).w,d0
0001752A 9068 0008                  		sub.w	8(a0),d0
0001752E 5040                       		addq.w	#8,d0
00017530 0C40 0010                  		cmpi.w	#$10,d0
00017534 6400 0000                  		bcc.w	locret_16F90
00017538 3038 D00C                  		move.w	($FFFFD00C).w,d0
0001753C 9068 000C                  		sub.w	$C(a0),d0
00017540 0640 0040                  		addi.w	#$40,d0
00017544 0C40 0068                  		cmpi.w	#$68,d0
00017548 6400                       		bcc.s	locret_16F90
0001754A 303C 00A1                  		move.w	#$A1,d0
0001754E 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play lamppost sound
00017554 5428 0024                  		addq.b	#2,$24(a0)
00017558 4EB9 0000 E02E             		jsr	SingleObjLoad
0001755E 6600                       		bne.s	loc_16F76
00017560 12BC 0079                  		move.b	#$79,0(a1)	; load twirling	lamp object
00017564 137C 0006 0024             		move.b	#6,$24(a1)	; use "Obj79_Twirl" routine
0001756A 3368 0008 0030             		move.w	8(a0),$30(a1)
00017570 3368 000C 0032             		move.w	$C(a0),$32(a1)
00017576 0469 0018 0032             		subi.w	#$18,$32(a1)
0001757C 237C 0000 0000 0004        		move.l	#Map_obj79,4(a1)
00017584 337C 07A0 0002             		move.w	#$7A0,2(a1)
0001758A 137C 0004 0001             		move.b	#4,1(a1)
00017590 137C 0008 0019             		move.b	#8,$19(a1)
00017596 137C 0004 0018             		move.b	#4,$18(a1)
0001759C 137C 0002 001A             		move.b	#2,$1A(a1)
000175A2 337C 0020 0036             		move.w	#$20,$36(a1)
000175A8                            
000175A8                            loc_16F76:
000175A8 117C 0001 001A             		move.b	#1,$1A(a0)	; use "post only" frame, with no lamp
000175AE 6100 0000                  		bsr.w	Obj79_StoreInfo
000175B2 45F8 FC00                  		lea	($FFFFFC00).w,a2
000175B6 7000                       		moveq	#0,d0
000175B8 1028 0023                  		move.b	$23(a0),d0
000175BC 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000175C2                            
000175C2                            locret_16F90:
000175C2 4E75                       		rts	
000175C4                            ; ===========================================================================
000175C4                            
000175C4                            Obj79_AfterHit:				; XREF: Obj79_Index
000175C4 4E75                       		rts	
000175C6                            ; ===========================================================================
000175C6                            
000175C6                            Obj79_Twirl:				; XREF: Obj79_Index
000175C6 5368 0036                  		subq.w	#1,$36(a0)
000175CA 6A00                       		bpl.s	loc_16FA0
000175CC 117C 0004 0024             		move.b	#4,$24(a0)
000175D2                            
000175D2                            loc_16FA0:
000175D2 1028 0026                  		move.b	$26(a0),d0
000175D6 0428 0010 0026             		subi.b	#$10,$26(a0)
000175DC 0400 0040                  		subi.b	#$40,d0
000175E0 4EB9 0000 2C22             		jsr	(CalcSine).l
000175E6 C3FC 0C00                  		muls.w	#$C00,d1
000175EA 4841                       		swap	d1
000175EC D268 0030                  		add.w	$30(a0),d1
000175F0 3141 0008                  		move.w	d1,8(a0)
000175F4 C1FC 0C00                  		muls.w	#$C00,d0
000175F8 4840                       		swap	d0
000175FA D068 0032                  		add.w	$32(a0),d0
000175FE 3140 000C                  		move.w	d0,$C(a0)
00017602 4E75                       		rts	
00017604                            ; ===========================================================================
00017604                            ; ---------------------------------------------------------------------------
00017604                            ; Subroutine to	store information when you hit a lamppost
00017604                            ; ---------------------------------------------------------------------------
00017604                            
00017604                            Obj79_StoreInfo:			; XREF: Obj79_HitLamp
00017604 11E8 0028 FE30             		move.b	$28(a0),($FFFFFE30).w 		; lamppost number
0001760A 11F8 FE30 FE31             		move.b	($FFFFFE30).w,($FFFFFE31).w
00017610 31E8 0008 FE32             		move.w	8(a0),($FFFFFE32).w		; x-position
00017616 31E8 000C FE34             		move.w	$C(a0),($FFFFFE34).w		; y-position
0001761C 31F8 FE20 FE36             		move.w	($FFFFFE20).w,($FFFFFE36).w 	; rings
00017622 11F8 FE1B FE54             		move.b	($FFFFFE1B).w,($FFFFFE54).w 	; lives
00017628 21F8 FE22 FE38             		move.l	($FFFFFE22).w,($FFFFFE38).w 	; time
0001762E 11F8 F742 FE3C             		move.b	($FFFFF742).w,($FFFFFE3C).w 	; routine counter for dynamic level mod
00017634 31F8 F72E FE3E             		move.w	($FFFFF72E).w,($FFFFFE3E).w 	; lower y-boundary of level
0001763A 31F8 F700 FE40             		move.w	($FFFFF700).w,($FFFFFE40).w 	; screen x-position
00017640 31F8 F704 FE42             		move.w	($FFFFF704).w,($FFFFFE42).w 	; screen y-position
00017646 31F8 F708 FE44             		move.w	($FFFFF708).w,($FFFFFE44).w 	; bg position
0001764C 31F8 F70C FE46             		move.w	($FFFFF70C).w,($FFFFFE46).w 	; bg position
00017652 31F8 F710 FE48             		move.w	($FFFFF710).w,($FFFFFE48).w 	; bg position
00017658 31F8 F714 FE4A             		move.w	($FFFFF714).w,($FFFFFE4A).w 	; bg position
0001765E 31F8 F718 FE4C             		move.w	($FFFFF718).w,($FFFFFE4C).w 	; bg position
00017664 31F8 F71C FE4E             		move.w	($FFFFF71C).w,($FFFFFE4E).w 	; bg position
0001766A 31F8 F648 FE50             		move.w	($FFFFF648).w,($FFFFFE50).w 	; water height
00017670 11F8 F64D FE52             		move.b	($FFFFF64D).w,($FFFFFE52).w 	; rountine counter for water
00017676 11F8 F64E FE53             		move.b	($FFFFF64E).w,($FFFFFE53).w 	; water direction
0001767C 4E75                       		rts	
0001767E                            
0001767E                            ; ---------------------------------------------------------------------------
0001767E                            ; Subroutine to	load stored info when you start	a level	from a lamppost
0001767E                            ; ---------------------------------------------------------------------------
0001767E                            
0001767E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001767E                            
0001767E                            
0001767E                            Obj79_LoadInfo:				; XREF: LevelSizeLoad
0001767E 11F8 FE31 FE30             		move.b	($FFFFFE31).w,($FFFFFE30).w
00017684 31F8 FE32 D008             		move.w	($FFFFFE32).w,($FFFFD008).w
0001768A 31F8 FE34 D00C             		move.w	($FFFFFE34).w,($FFFFD00C).w
00017690 31F8 FE36 FE20             		move.w	($FFFFFE36).w,($FFFFFE20).w
00017696 11F8 FE54 FE1B             		move.b	($FFFFFE54).w,($FFFFFE1B).w
0001769C 4278 FE20                  		clr.w	($FFFFFE20).w
000176A0 4238 FE1B                  		clr.b	($FFFFFE1B).w
000176A4 21F8 FE38 FE22             		move.l	($FFFFFE38).w,($FFFFFE22).w
000176AA 11FC 003B FE25             		move.b	#59,($FFFFFE25).w
000176B0 5338 FE24                  		subq.b	#1,($FFFFFE24).w
000176B4 11F8 FE3C F742             		move.b	($FFFFFE3C).w,($FFFFF742).w
000176BA 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
000176C0 31F8 FE3E F72E             		move.w	($FFFFFE3E).w,($FFFFF72E).w
000176C6 31F8 FE3E F726             		move.w	($FFFFFE3E).w,($FFFFF726).w
000176CC 31F8 FE40 F700             		move.w	($FFFFFE40).w,($FFFFF700).w
000176D2 31F8 FE42 F704             		move.w	($FFFFFE42).w,($FFFFF704).w
000176D8 31F8 FE44 F708             		move.w	($FFFFFE44).w,($FFFFF708).w
000176DE 31F8 FE46 F70C             		move.w	($FFFFFE46).w,($FFFFF70C).w
000176E4 31F8 FE48 F710             		move.w	($FFFFFE48).w,($FFFFF710).w
000176EA 31F8 FE4A F714             		move.w	($FFFFFE4A).w,($FFFFF714).w
000176F0 31F8 FE4C F718             		move.w	($FFFFFE4C).w,($FFFFF718).w
000176F6 31F8 FE4E F71C             		move.w	($FFFFFE4E).w,($FFFFF71C).w
000176FC 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00017702 6600                       		bne.s	loc_170E4
00017704 31F8 FE50 F648             		move.w	($FFFFFE50).w,($FFFFF648).w
0001770A 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
00017710 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
00017716                            
00017716                            loc_170E4:
00017716 4A38 FE30                  		tst.b	($FFFFFE30).w
0001771A 6A00                       		bpl.s	locret_170F6
0001771C 3038 FE32                  		move.w	($FFFFFE32).w,d0
00017720 0440 00A0                  		subi.w	#$A0,d0
00017724 31C0 F728                  		move.w	d0,($FFFFF728).w
00017728                            
00017728                            locret_170F6:
00017728 4E75                       		rts	
0001772A                            ; End of function Obj79_LoadInfo
0001772A                            
0001772A                            ; ===========================================================================
0001772A                            ; ---------------------------------------------------------------------------
0001772A                            ; Sprite mappings - lamppost
0001772A                            ; ---------------------------------------------------------------------------
0001772A                            Map_obj79:
0001772A                            	include "_maps\obj79.asm"
0001772A                            ; ---------------------------------------------------------------------------
0001772A                            ; Sprite mappings - lamppost
0001772A                            ; ---------------------------------------------------------------------------
0001772A 0000 0000                  		dc.w byte_17100-Map_obj79, byte_1711F-Map_obj79
0001772E 0000 0000                  		dc.w byte_17134-Map_obj79, byte_1713F-Map_obj79
00017732 06                         byte_17100:	dc.b 6
00017733 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00017738 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
0001773D F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00017742 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00017747 D401 0006 F8               		dc.b $D4, 1, 0,	6, $F8
0001774C D401 0806 00               		dc.b $D4, 1, 8,	6, 0
00017751 04                         byte_1711F:	dc.b 4
00017752 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00017757 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
0001775C F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00017761 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00017766 02                         byte_17134:	dc.b 2
00017767 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
0001776C F801 0808 00               		dc.b $F8, 1, 8,	8, 0
00017771 06                         byte_1713F:	dc.b 6
00017772 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00017777 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
0001777C F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00017781 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00017786 D401 0008 F8               		dc.b $D4, 1, 0,	8, $F8
0001778B D401 0808 00               		dc.b $D4, 1, 8,	8, 0
00017790                            		even
00017790                            		even
00017790                            
00017790                            ; ===========================================================================
00017790                            ; ---------------------------------------------------------------------------
00017790                            ; Object 7D - hidden points at the end of a level
00017790                            ; ---------------------------------------------------------------------------
00017790                            
00017790                            Obj7D:					; XREF: Obj_Index
00017790 7000                       		moveq	#0,d0
00017792 1028 0024                  		move.b	$24(a0),d0
00017796 323B 0000                  		move.w	Obj7D_Index(pc,d0.w),d1
0001779A 4EFB 1000                  		jmp	Obj7D_Index(pc,d1.w)
0001779E                            ; ===========================================================================
0001779E 0000                       Obj7D_Index:	dc.w Obj7D_Main-Obj7D_Index
000177A0 0000                       		dc.w Obj7D_DelayDel-Obj7D_Index
000177A2                            ; ===========================================================================
000177A2                            
000177A2                            Obj7D_Main:				; XREF: Obj7D_Index
000177A2 7410                       		moveq	#$10,d2
000177A4 3602                       		move.w	d2,d3
000177A6 D643                       		add.w	d3,d3
000177A8 43F8 D000                  		lea	($FFFFD000).w,a1
000177AC 3029 0008                  		move.w	8(a1),d0
000177B0 9068 0008                  		sub.w	8(a0),d0
000177B4 D042                       		add.w	d2,d0
000177B6 B043                       		cmp.w	d3,d0
000177B8 6400                       		bcc.s	Obj7D_ChkDel
000177BA 3229 000C                  		move.w	$C(a1),d1
000177BE 9268 000C                  		sub.w	$C(a0),d1
000177C2 D242                       		add.w	d2,d1
000177C4 B243                       		cmp.w	d3,d1
000177C6 6400                       		bcc.s	Obj7D_ChkDel
000177C8 4A78 FE08                  		tst.w	($FFFFFE08).w
000177CC 6600                       		bne.s	Obj7D_ChkDel
000177CE 4A38 F7CD                  		tst.b	($FFFFF7CD).w
000177D2 6600                       		bne.s	Obj7D_ChkDel
000177D4 5428 0024                  		addq.b	#2,$24(a0)
000177D8 217C 0000 0000 0004        		move.l	#Map_obj7D,4(a0)
000177E0 317C 84B6 0002             		move.w	#$84B6,2(a0)
000177E6 0028 0004 0001             		ori.b	#4,1(a0)
000177EC 117C 0000 0018             		move.b	#0,$18(a0)
000177F2 117C 0010 0019             		move.b	#$10,$19(a0)
000177F8 1168 0028 001A             		move.b	$28(a0),$1A(a0)
000177FE 317C 0077 0030             		move.w	#119,$30(a0)	; set display time to 2	seconds
00017804 303C 00C9                  		move.w	#$C9,d0
00017808 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play bonus sound
0001780E 7000                       		moveq	#0,d0
00017810 1028 0028                  		move.b	$28(a0),d0
00017814 D040                       		add.w	d0,d0
00017816 303B 0000                  		move.w	Obj7D_Points(pc,d0.w),d0 ; load	bonus points array
0001781A 4EB9 0000 0000             		jsr	AddPoints
00017820                            
00017820                            Obj7D_ChkDel:
00017820 3028 0008                  		move.w	8(a0),d0
00017824 0240 FF80                  		andi.w	#$FF80,d0
00017828 3238 F700                  		move.w	($FFFFF700).w,d1
0001782C 0441 0080                  		subi.w	#$80,d1
00017830 0241 FF80                  		andi.w	#$FF80,d1
00017834 9041                       		sub.w	d1,d0
00017836 0C40 0280                  		cmpi.w	#$280,d0
0001783A 6200                       		bhi.s	Obj7D_Delete
0001783C 4E75                       		rts	
0001783E                            ; ===========================================================================
0001783E                            
0001783E                            Obj7D_Delete:
0001783E 4EF9 0000 DBE4             		jmp	DeleteObject
00017844                            ; ===========================================================================
00017844 0000                       Obj7D_Points:	dc.w 0			; Bonus	points array
00017846 03E8                       		dc.w 1000
00017848 0064                       		dc.w 100
0001784A 0001                       		dc.w 1
0001784C                            ; ===========================================================================
0001784C                            
0001784C                            Obj7D_DelayDel:				; XREF: Obj7D_Index
0001784C 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from display time
00017850 6B00                       		bmi.s	Obj7D_Delete2	; if time is zero, branch
00017852 3028 0008                  		move.w	8(a0),d0
00017856 0240 FF80                  		andi.w	#-$80,d0
0001785A 3238 F700                  		move.w	($FFFFF700).w,d1
0001785E 0441 0080                  		subi.w	#$80,d1
00017862 0241 FF80                  		andi.w	#-$80,d1
00017866 9041                       		sub.w	d1,d0
00017868 0C40 0280                  		cmpi.w	#$280,d0
0001786C 6200                       		bhi.s	Obj7D_Delete2
0001786E 4EF9 0000 DBA8             		jmp	DisplaySprite
00017874                            ; ===========================================================================
00017874                            
00017874                            Obj7D_Delete2:
00017874 4EF9 0000 DBE4             		jmp	DeleteObject
0001787A                            ; ===========================================================================
0001787A                            ; ---------------------------------------------------------------------------
0001787A                            ; Sprite mappings - hidden points at the end of	a level
0001787A                            ; ---------------------------------------------------------------------------
0001787A                            Map_obj7D:
0001787A                            	include "_maps\obj7D.asm"
0001787A                            ; ---------------------------------------------------------------------------
0001787A                            ; Sprite mappings - hidden points at the end of	a level
0001787A                            ; ---------------------------------------------------------------------------
0001787A 0000 0000                  		dc.w byte_17250-Map_obj7D, byte_17251-Map_obj7D
0001787E 0000 0000                  		dc.w byte_17257-Map_obj7D, byte_1725D-Map_obj7D
00017882 00                         byte_17250:	dc.b 0
00017883 01                         byte_17251:	dc.b 1
00017884 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
00017889 01                         byte_17257:	dc.b 1
0001788A F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0001788F 01                         byte_1725D:	dc.b 1
00017890 F40E 0018 F0               		dc.b $F4, $E, 0, $18, $F0
00017896 00                         		even
00017896 00                         		even
00017896                            
00017896                            ; ===========================================================================
00017896                            ; ---------------------------------------------------------------------------
00017896                            ; Object 8A - "SONIC TEAM PRESENTS" and	credits
00017896                            ; ---------------------------------------------------------------------------
00017896                            
00017896                            Obj8A:					; XREF: Obj_Index
00017896 7000                       		moveq	#0,d0
00017898 1028 0024                  		move.b	$24(a0),d0
0001789C 323B 0000                  		move.w	Obj8A_Index(pc,d0.w),d1
000178A0 4EFB 1000                  		jmp	Obj8A_Index(pc,d1.w)
000178A4                            ; ===========================================================================
000178A4 0000                       Obj8A_Index:	dc.w Obj8A_Main-Obj8A_Index
000178A6 0000                       		dc.w Obj8A_Display-Obj8A_Index
000178A8                            ; ===========================================================================
000178A8                            
000178A8                            Obj8A_Main:				; XREF: Obj8A_Index
000178A8 5428 0024                  		addq.b	#2,$24(a0)
000178AC 317C 0120 0008             		move.w	#$120,8(a0)
000178B2 317C 00F0 000A             		move.w	#$F0,$A(a0)
000178B8 217C 0000 0000 0004        		move.l	#Map_obj8A,4(a0)
000178C0 317C 05A0 0002             		move.w	#$5A0,2(a0)
000178C6 3038 FFF4                  		move.w	($FFFFFFF4).w,d0 ; load	credits	index number
000178CA 1140 001A                  		move.b	d0,$1A(a0)	; display appropriate sprite
000178CE 117C 0000 0001             		move.b	#0,1(a0)
000178D4 117C 0000 0018             		move.b	#0,$18(a0)
000178DA 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w ; is the scene	number 04 (title screen)?
000178E0 6600                       		bne.s	Obj8A_Display	; if not, branch
000178E2 317C 00A6 0002             		move.w	#$A6,2(a0)
000178E8 117C 000A 001A             		move.b	#$A,$1A(a0)	; display "SONIC TEAM PRESENTS"
000178EE 4A38 FFE3                  		tst.b	($FFFFFFE3).w	; is hidden credits cheat on?
000178F2 6700                       		beq.s	Obj8A_Display	; if not, branch
000178F4 0C38 0072 F604             		cmpi.b	#$72,($FFFFF604).w ; is	Start+A+C+Down being pressed?
000178FA 6600                       		bne.s	Obj8A_Display	; if not, branch
000178FC 31FC 0EEE FBC0             		move.w	#$EEE,($FFFFFBC0).w ; 3rd pallet, 1st entry = white
00017902 31FC 0880 FBC2             		move.w	#$880,($FFFFFBC2).w ; 3rd pallet, 2nd entry = cyan
00017908 4EF9 0000 DBE4             		jmp	DeleteObject
0001790E                            ; ===========================================================================
0001790E                            
0001790E                            Obj8A_Display:				; XREF: Obj8A_Index
0001790E 4EF9 0000 DBA8             		jmp	DisplaySprite
00017914                            ; ===========================================================================
00017914                            ; ---------------------------------------------------------------------------
00017914                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
00017914                            ; ---------------------------------------------------------------------------
00017914                            Map_obj8A:
00017914                            	include "_maps\obj8A.asm"
00017914                            ; --------------------------------------------------------------------------------
00017914                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00017914                            ; --------------------------------------------------------------------------------
00017914                            
00017914                            SME_MD8yg:	
00017914 0000 0000                  		dc.w SME_MD8yg_16-SME_MD8yg, SME_MD8yg_5D-SME_MD8yg	
00017918 0000 0000                  		dc.w SME_MD8yg_AE-SME_MD8yg, SME_MD8yg_E1-SME_MD8yg	
0001791C 0000 0000                  		dc.w SME_MD8yg_15A-SME_MD8yg, SME_MD8yg_1BF-SME_MD8yg	
00017920 0000 0000                  		dc.w SME_MD8yg_242-SME_MD8yg, SME_MD8yg_2B6-SME_MD8yg	
00017924 0000 0000                  		dc.w SME_MD8yg_352-SME_MD8yg, SME_MD8yg_39E-SME_MD8yg	
00017928 0000                       		dc.w SME_MD8yg_3C7-SME_MD8yg	
0001792A 0E                         SME_MD8yg_16:	dc.b $E	
0001792B F805 802E 88               		dc.b $F8, 5, $80, $2E, $88	
00017930 F805 8026 98               		dc.b $F8, 5, $80, $26, $98	
00017935 F805 801A A8               		dc.b $F8, 5, $80, $1A, $A8	
0001793A F801 8046 B8               		dc.b $F8, 1, $80, $46, $B8	
0001793F F805 801E C0               		dc.b $F8, 5, $80, $1E, $C0	
00017944 F805 803E D8               		dc.b $F8, 5, $80, $3E, $D8	
00017949 F805 800E E8               		dc.b $F8, 5, $80, $E, $E8	
0001794E F805 8004 F8               		dc.b $F8, 5, $80, 4, $F8	
00017953 F809 8008 08               		dc.b $F8, 9, $80, 8, 8	
00017958 F805 802E 28               		dc.b $F8, 5, $80, $2E, $28	
0001795D F805 803E 38               		dc.b $F8, 5, $80, $3E, $38	
00017962 F805 8004 48               		dc.b $F8, 5, $80, 4, $48	
00017967 F805 805C 58               		dc.b $F8, 5, $80, $5C, $58	
0001796C F805 805C 68               		dc.b $F8, 5, $80, $5C, $68	
00017971 10                         SME_MD8yg_5D:	dc.b $10	
00017972 D805 0000 80               		dc.b $D8, 5, 0, 0, $80	
00017977 D805 0004 90               		dc.b $D8, 5, 0, 4, $90	
0001797C D809 0008 A0               		dc.b $D8, 9, 0, 8, $A0	
00017981 D805 000E B4               		dc.b $D8, 5, 0, $E, $B4	
00017986 D805 0012 D0               		dc.b $D8, 5, 0, $12, $D0	
0001798B D805 0016 E0               		dc.b $D8, 5, 0, $16, $E0	
00017990 D805 0004 F0               		dc.b $D8, 5, 0, 4, $F0	
00017995 D805 001A 00               		dc.b $D8, 5, 0, $1A, 0	
0001799A 0805 001E C8               		dc.b 8, 5, 0, $1E, $C8	
0001799F 0805 0004 D8               		dc.b 8, 5, 0, 4, $D8	
000179A4 0805 0022 E8               		dc.b 8, 5, 0, $22, $E8	
000179A9 0805 0026 F8               		dc.b 8, 5, 0, $26, $F8	
000179AE 0805 0016 08               		dc.b 8, 5, 0, $16, 8	
000179B3 0805 002A 20               		dc.b 8, 5, 0, $2A, $20	
000179B8 0805 0004 30               		dc.b 8, 5, 0, 4, $30	
000179BD 0805 002E 44               		dc.b 8, 5, 0, $2E, $44	
000179C2 0A                         SME_MD8yg_AE:	dc.b $A	
000179C3 D805 0012 80               		dc.b $D8, 5, 0, $12, $80	
000179C8 D805 0022 90               		dc.b $D8, 5, 0, $22, $90	
000179CD D805 0026 A0               		dc.b $D8, 5, 0, $26, $A0	
000179D2 D805 0000 B0               		dc.b $D8, 5, 0, 0, $B0	
000179D7 D805 0022 C0               		dc.b $D8, 5, 0, $22, $C0	
000179DC D805 0004 D0               		dc.b $D8, 5, 0, 4, $D0	
000179E1 D809 0008 E0               		dc.b $D8, 9, 0, 8, $E0	
000179E6 0805 002A E8               		dc.b 8, 5, 0, $2A, $E8	
000179EB 0805 0032 F8               		dc.b 8, 5, 0, $32, $F8	
000179F0 0805 0036 08               		dc.b 8, 5, 0, $36, 8	
000179F5 18                         SME_MD8yg_E1:	dc.b $18	
000179F6 D805 001E 88               		dc.b $D8, 5, 0, $1E, $88	
000179FB D805 003A 98               		dc.b $D8, 5, 0, $3A, $98	
00017A00 D805 0004 A8               		dc.b $D8, 5, 0, 4, $A8	
00017A05 D805 0022 B8               		dc.b $D8, 5, 0, $22, $B8	
00017A0A D805 0004 C8               		dc.b $D8, 5, 0, 4, $C8	
00017A0F D805 001E D8               		dc.b $D8, 5, 0, $1E, $D8	
00017A14 D805 003E E8               		dc.b $D8, 5, 0, $3E, $E8	
00017A19 D805 000E F8               		dc.b $D8, 5, 0, $E, $F8	
00017A1E D805 0022 08               		dc.b $D8, 5, 0, $22, 8	
00017A23 D805 0042 20               		dc.b $D8, 5, 0, $42, $20	
00017A28 D805 000E 30               		dc.b $D8, 5, 0, $E, $30	
00017A2D D805 002E 40               		dc.b $D8, 5, 0, $2E, $40	
00017A32 D801 0046 50               		dc.b $D8, 1, 0, $46, $50	
00017A37 D805 0000 58               		dc.b $D8, 5, 0, 0, $58	
00017A3C D805 001A 68               		dc.b $D8, 5, 0, $1A, $68	
00017A41 0805 0048 C0               		dc.b 8, 5, 0, $48, $C0	
00017A46 0801 0046 D0               		dc.b 8, 1, 0, $46, $D0	
00017A4B 0805 0000 D8               		dc.b 8, 5, 0, 0, $D8	
00017A50 0801 0046 E8               		dc.b 8, 1, 0, $46, $E8	
00017A55 0805 002E F0               		dc.b 8, 5, 0, $2E, $F0	
00017A5A 0805 0016 00               		dc.b 8, 5, 0, $16, 0	
00017A5F 0805 0004 10               		dc.b 8, 5, 0, 4, $10	
00017A64 0805 001A 20               		dc.b 8, 5, 0, $1A, $20	
00017A69 0805 0042 30               		dc.b 8, 5, 0, $42, $30	
00017A6E 14                         SME_MD8yg_15A:	dc.b $14	
00017A6F D005 0042 A0               		dc.b $D0, 5, 0, $42, $A0	
00017A74 D005 000E B0               		dc.b $D0, 5, 0, $E, $B0	
00017A79 D005 002E C0               		dc.b $D0, 5, 0, $2E, $C0	
00017A7E D001 0046 D0               		dc.b $D0, 1, 0, $46, $D0	
00017A83 D005 0000 D8               		dc.b $D0, 5, 0, 0, $D8	
00017A88 D005 001A E8               		dc.b $D0, 5, 0, $1A, $E8	
00017A8D 0005 004C E8               		dc.b 0, 5, 0, $4C, $E8	
00017A92 0001 0046 F8               		dc.b 0, 1, 0, $46, $F8	
00017A97 0005 001A 04               		dc.b 0, 5, 0, $1A, 4	
00017A9C 0005 002A 14               		dc.b 0, 5, 0, $2A, $14	
00017AA1 0005 0004 24               		dc.b 0, 5, 0, 4, $24	
00017AA6 2005 0012 D0               		dc.b $20, 5, 0, $12, $D0	
00017AAB 2005 003A E0               		dc.b $20, 5, 0, $3A, $E0	
00017AB0 2005 000E F0               		dc.b $20, 5, 0, $E, $F0	
00017AB5 2005 001A 00               		dc.b $20, 5, 0, $1A, 0	
00017ABA 2001 0046 10               		dc.b $20, 1, 0, $46, $10	
00017ABF 2005 0050 18               		dc.b $20, 5, 0, $50, $18	
00017AC4 2005 0022 30               		dc.b $20, 5, 0, $22, $30	
00017AC9 2001 0046 40               		dc.b $20, 1, 0, $46, $40	
00017ACE 2005 000E 48               		dc.b $20, 5, 0, $E, $48	
00017AD3 1A                         SME_MD8yg_1BF:	dc.b $1A	
00017AD4 D805 002E 98               		dc.b $D8, 5, 0, $2E, $98	
00017AD9 D805 0026 A8               		dc.b $D8, 5, 0, $26, $A8	
00017ADE D805 0032 B8               		dc.b $D8, 5, 0, $32, $B8	
00017AE3 D805 001A C8               		dc.b $D8, 5, 0, $1A, $C8	
00017AE8 D805 0054 D8               		dc.b $D8, 5, 0, $54, $D8	
00017AED D805 0012 F8               		dc.b $D8, 5, 0, $12, $F8	
00017AF2 D805 0022 08               		dc.b $D8, 5, 0, $22, 8	
00017AF7 D805 0026 18               		dc.b $D8, 5, 0, $26, $18	
00017AFC D805 0042 28               		dc.b $D8, 5, 0, $42, $28	
00017B01 D805 0032 38               		dc.b $D8, 5, 0, $32, $38	
00017B06 D805 001E 48               		dc.b $D8, 5, 0, $1E, $48	
00017B0B D805 000E 58               		dc.b $D8, 5, 0, $E, $58	
00017B10 0809 0008 88               		dc.b 8, 9, 0, 8, $88	
00017B15 0805 0004 9C               		dc.b 8, 5, 0, 4, $9C	
00017B1A 0805 002E AC               		dc.b 8, 5, 0, $2E, $AC	
00017B1F 0805 0004 BC               		dc.b 8, 5, 0, 4, $BC	
00017B24 0805 003E CC               		dc.b 8, 5, 0, $3E, $CC	
00017B29 0805 0026 DC               		dc.b 8, 5, 0, $26, $DC	
00017B2E 0805 001A F8               		dc.b 8, 5, 0, $1A, $F8	
00017B33 0805 0004 08               		dc.b 8, 5, 0, 4, 8	
00017B38 0805 0058 18               		dc.b 8, 5, 0, $58, $18	
00017B3D 0805 0004 28               		dc.b 8, 5, 0, 4, $28	
00017B42 0809 0008 38               		dc.b 8, 9, 0, 8, $38	
00017B47 0805 0032 4C               		dc.b 8, 5, 0, $32, $4C	
00017B4C 0805 0022 5C               		dc.b 8, 5, 0, $22, $5C	
00017B51 0805 0004 6C               		dc.b 8, 5, 0, 4, $6C	
00017B56 17                         SME_MD8yg_242:	dc.b $17	
00017B57 D005 002E 98               		dc.b $D0, 5, 0, $2E, $98	
00017B5C D005 0026 A8               		dc.b $D0, 5, 0, $26, $A8	
00017B61 D005 0032 B8               		dc.b $D0, 5, 0, $32, $B8	
00017B66 D005 001A C8               		dc.b $D0, 5, 0, $1A, $C8	
00017B6B D005 0054 D8               		dc.b $D0, 5, 0, $54, $D8	
00017B70 D005 0012 F8               		dc.b $D0, 5, 0, $12, $F8	
00017B75 D005 0022 08               		dc.b $D0, 5, 0, $22, 8	
00017B7A D005 0026 18               		dc.b $D0, 5, 0, $26, $18	
00017B7F D005 0000 28               		dc.b $D0, 5, 0, 0, $28	
00017B84 D005 0022 38               		dc.b $D0, 5, 0, $22, $38	
00017B89 D005 0004 48               		dc.b $D0, 5, 0, 4, $48	
00017B8E D009 0008 58               		dc.b $D0, 9, 0, 8, $58	
00017B93 0005 004C D0               		dc.b 0, 5, 0, $4C, $D0	
00017B98 0001 0046 E0               		dc.b 0, 1, 0, $46, $E0	
00017B9D 0009 0008 E8               		dc.b 0, 9, 0, 8, $E8	
00017BA2 0001 0046 FC               		dc.b 0, 1, 0, $46, $FC	
00017BA7 0005 003E 04               		dc.b 0, 5, 0, $3E, 4	
00017BAC 0005 0004 14               		dc.b 0, 5, 0, 4, $14	
00017BB1 2009 0008 D0               		dc.b $20, 9, 0, 8, $D0	
00017BB6 2005 0004 E4               		dc.b $20, 5, 0, 4, $E4	
00017BBB 2005 001E F4               		dc.b $20, 5, 0, $1E, $F4	
00017BC0 2005 0058 04               		dc.b $20, 5, 0, $58, 4	
00017BC5 2005 002A 14               		dc.b $20, 5, 0, $2A, $14	
00017BCA 1F                         SME_MD8yg_2B6:	dc.b $1F	
00017BCB D805 002E 80               		dc.b $D8, 5, 0, $2E, $80	
00017BD0 D805 0012 90               		dc.b $D8, 5, 0, $12, $90	
00017BD5 D805 000E A0               		dc.b $D8, 5, 0, $E, $A0	
00017BDA D805 001E B0               		dc.b $D8, 5, 0, $1E, $B0	
00017BDF D801 0046 C0               		dc.b $D8, 1, 0, $46, $C0	
00017BE4 D805 0004 C8               		dc.b $D8, 5, 0, 4, $C8	
00017BE9 D805 0016 D8               		dc.b $D8, 5, 0, $16, $D8	
00017BEE D805 003E F8               		dc.b $D8, 5, 0, $3E, $F8	
00017BF3 D805 003A 08               		dc.b $D8, 5, 0, $3A, 8	
00017BF8 D805 0004 18               		dc.b $D8, 5, 0, 4, $18	
00017BFD D805 001A 28               		dc.b $D8, 5, 0, $1A, $28	
00017C02 D805 0058 38               		dc.b $D8, 5, 0, $58, $38	
00017C07 D805 002E 48               		dc.b $D8, 5, 0, $2E, $48	
00017C0C 0005 005C B0               		dc.b 0, 5, 0, $5C, $B0	
00017C11 0005 0032 C0               		dc.b 0, 5, 0, $32, $C0	
00017C16 0005 004C D0               		dc.b 0, 5, 0, $4C, $D0	
00017C1B 0001 0046 E0               		dc.b 0, 1, 0, $46, $E0	
00017C20 0005 0026 E8               		dc.b 0, 5, 0, $26, $E8	
00017C25 0009 0008 00               		dc.b 0, 9, 0, 8, 0	
00017C2A 0001 0046 14               		dc.b 0, 1, 0, $46, $14	
00017C2F 0005 001A 1C               		dc.b 0, 5, 0, $1A, $1C	
00017C34 0005 000E 2C               		dc.b 0, 5, 0, $E, $2C	
00017C39 0005 0000 3C               		dc.b 0, 5, 0, 0, $3C	
00017C3E 0001 0046 4C               		dc.b 0, 1, 0, $46, $4C	
00017C43 0005 002E 54               		dc.b 0, 5, 0, $2E, $54	
00017C48 0005 003A 64               		dc.b 0, 5, 0, $3A, $64	
00017C4D 0001 0046 74               		dc.b 0, 1, 0, $46, $74	
00017C52 2005 0012 F8               		dc.b $20, 5, 0, $12, $F8	
00017C57 2005 0004 08               		dc.b $20, 5, 0, 4, 8	
00017C5C 2005 0012 18               		dc.b $20, 5, 0, $12, $18	
00017C61 2005 0004 28               		dc.b $20, 5, 0, 4, $28	
00017C66 0F                         SME_MD8yg_352:	dc.b $F	
00017C67 F805 0012 80               		dc.b $F8, 5, 0, $12, $80	
00017C6C F805 0022 90               		dc.b $F8, 5, 0, $22, $90	
00017C71 F805 000E A0               		dc.b $F8, 5, 0, $E, $A0	
00017C76 F805 002E B0               		dc.b $F8, 5, 0, $2E, $B0	
00017C7B F805 000E C0               		dc.b $F8, 5, 0, $E, $C0	
00017C80 F805 001A D0               		dc.b $F8, 5, 0, $1A, $D0	
00017C85 F805 003E E0               		dc.b $F8, 5, 0, $3E, $E0	
00017C8A F805 000E F0               		dc.b $F8, 5, 0, $E, $F0	
00017C8F F805 0042 00               		dc.b $F8, 5, 0, $42, 0	
00017C94 F805 0048 18               		dc.b $F8, 5, 0, $48, $18	
00017C99 F805 002A 28               		dc.b $F8, 5, 0, $2A, $28	
00017C9E F805 002E 40               		dc.b $F8, 5, 0, $2E, $40	
00017CA3 F805 000E 50               		dc.b $F8, 5, 0, $E, $50	
00017CA8 F805 0000 60               		dc.b $F8, 5, 0, 0, $60	
00017CAD F805 0004 70               		dc.b $F8, 5, 0, 4, $70	
00017CB2 08                         SME_MD8yg_39E:	dc.b 8	
00017CB3 3005 003E C0               		dc.b $30, 5, 0, $3E, $C0	
00017CB8 3005 0022 D0               		dc.b $30, 5, 0, $22, $D0	
00017CBD 3005 002A E0               		dc.b $30, 5, 0, $2A, $E0	
00017CC2 3005 0004 F8               		dc.b $30, 5, 0, 4, $F8	
00017CC7 3005 0000 08               		dc.b $30, 5, 0, 0, 8	
00017CCC 3005 0004 18               		dc.b $30, 5, 0, 4, $18	
00017CD1 3001 0046 28               		dc.b $30, 1, 0, $46, $28	
00017CD6 3005 001A 30               		dc.b $30, 5, 0, $1A, $30	
00017CDB 17                         SME_MD8yg_3C7:	dc.b $17	
00017CDC E805 002E B4               		dc.b $E8, 5, 0, $2E, $B4	
00017CE1 D805 0026 C4               		dc.b $D8, 5, 0, $26, $C4	
00017CE6 E801 0046 44               		dc.b $E8, 1, 0, $46, $44	
00017CEB E805 001E 4C               		dc.b $E8, 5, 0, $1E, $4C	
00017CF0 D805 003E 34               		dc.b $D8, 5, 0, $3E, $34	
00017CF5 D805 000E 1C               		dc.b $D8, 5, 0, $E, $1C	
00017CFA D805 0004 FC               		dc.b $D8, 5, 0, 4, $FC	
00017CFF E809 0008 0C               		dc.b $E8, 9, 0, 8, $C	
00017D04 D805 002A B4               		dc.b $D8, 5, 0, $2A, $B4	
00017D09 D805 0032 D4               		dc.b $D8, 5, 0, $32, $D4	
00017D0E D805 103A EC               		dc.b $D8, 5, $10, $3A, $EC	
00017D13 D805 0032 0C               		dc.b $D8, 5, 0, $32, $C	
00017D18 D805 003A 44               		dc.b $D8, 5, 0, $3A, $44	
00017D1D E805 0004 C4               		dc.b $E8, 5, 0, 4, $C4	
00017D22 E805 0032 24               		dc.b $E8, 5, 0, $32, $24	
00017D27 E809 0008 D4               		dc.b $E8, 9, 0, 8, $D4	
00017D2C E805 000E EC               		dc.b $E8, 5, 0, $E, $EC	
00017D31 E805 002E 34               		dc.b $E8, 5, 0, $2E, $34	
00017D36 F805 001E D4               		dc.b $F8, 5, 0, $1E, $D4	
00017D3B F805 0004 E4               		dc.b $F8, 5, 0, 4, $E4	
00017D40 F805 0042 F4               		dc.b $F8, 5, 0, $42, $F4	
00017D45 D805 000E 54               		dc.b $D8, 5, 0, $E, $54	
00017D4A F805 000E 04               		dc.b $F8, 5, 0, $E, 4	
00017D50 00                         		even
00017D50 00                         		even
00017D50                            
00017D50                            ; ===========================================================================
00017D50                            ; ---------------------------------------------------------------------------
00017D50                            ; Object 3D - Eggman (GHZ)
00017D50                            ; ---------------------------------------------------------------------------
00017D50                            
00017D50                            Obj3D:					; XREF: Obj_Index
00017D50 7000                       		moveq	#0,d0
00017D52 1028 0024                  		move.b	$24(a0),d0
00017D56 323B 0000                  		move.w	Obj3D_Index(pc,d0.w),d1
00017D5A 4EFB 1000                  		jmp	Obj3D_Index(pc,d1.w)
00017D5E                            ; ===========================================================================
00017D5E 0000                       Obj3D_Index:	dc.w Obj3D_Main-Obj3D_Index
00017D60 0000                       		dc.w Obj3D_ShipMain-Obj3D_Index
00017D62 0000                       		dc.w Obj3D_FaceMain-Obj3D_Index
00017D64 0000                       		dc.w Obj3D_FlameMain-Obj3D_Index
00017D66                            
00017D66 0200                       Obj3D_ObjData:	dc.b 2,	0		; routine counter, animation
00017D68 0401                       		dc.b 4,	1
00017D6A 0607                       		dc.b 6,	7
00017D6C                            ; ===========================================================================
00017D6C                            
00017D6C                            Obj3D_Main:				; XREF: Obj3D_Index
00017D6C 45F9 0001 7D66             		lea	(Obj3D_ObjData).l,a2
00017D72 2248                       		movea.l	a0,a1
00017D74 7202                       		moveq	#2,d1
00017D76 6000                       		bra.s	Obj3D_LoadBoss
00017D78                            ; ===========================================================================
00017D78                            
00017D78                            Obj3D_Loop:
00017D78 4EB9 0000 E044             		jsr	SingleObjLoad2
00017D7E 6600                       		bne.s	loc_17772
00017D80                            
00017D80                            Obj3D_LoadBoss:				; XREF: Obj3D_Main
00017D80 135A 0024                  		move.b	(a2)+,$24(a1)
00017D84 12BC 003D                  		move.b	#$3D,0(a1)
00017D88 3368 0008 0008             		move.w	8(a0),8(a1)
00017D8E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00017D94 237C 0000 0000 0004        		move.l	#Map_Eggman,4(a1)
00017D9C 337C 0400 0002             		move.w	#$400,2(a1)
00017DA2 137C 0004 0001             		move.b	#4,1(a1)
00017DA8 137C 0020 0019             		move.b	#$20,$19(a1)
00017DAE 137C 0003 0018             		move.b	#3,$18(a1)
00017DB4 135A 001C                  		move.b	(a2)+,$1C(a1)
00017DB8 2348 0034                  		move.l	a0,$34(a1)
00017DBC 51C9 FFBA                  		dbf	d1,Obj3D_Loop	; repeat sequence 2 more times
00017DC0                            
00017DC0                            loc_17772:
00017DC0 3168 0008 0030             		move.w	8(a0),$30(a0)
00017DC6 3168 000C 0038             		move.w	$C(a0),$38(a0)
00017DCC 117C 000F 0020             		move.b	#$F,$20(a0)
00017DD2 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00017DD8                            
00017DD8                            Obj3D_ShipMain:				; XREF: Obj3D_Index
00017DD8 7000                       		moveq	#0,d0
00017DDA 1028 0025                  		move.b	$25(a0),d0
00017DDE 323B 0000                  		move.w	Obj3D_ShipIndex(pc,d0.w),d1
00017DE2 4EBB 1000                  		jsr	Obj3D_ShipIndex(pc,d1.w)
00017DE6 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
00017DEC 4EB9 0000 AC42             		jsr	AnimateSprite
00017DF2 1028 0022                  		move.b	$22(a0),d0
00017DF6 0200 0003                  		andi.b	#3,d0
00017DFA 0228 00FC 0001             		andi.b	#$FC,1(a0)
00017E00 8128 0001                  		or.b	d0,1(a0)
00017E04 4EF9 0000 DBA8             		jmp	DisplaySprite
00017E0A                            ; ===========================================================================
00017E0A 0000                       Obj3D_ShipIndex:dc.w Obj3D_ShipStart-Obj3D_ShipIndex
00017E0C 0000                       		dc.w Obj3D_MakeBall-Obj3D_ShipIndex
00017E0E 0000                       		dc.w Obj3D_ShipMove-Obj3D_ShipIndex
00017E10 0000                       		dc.w loc_17954-Obj3D_ShipIndex
00017E12 0000                       		dc.w loc_1797A-Obj3D_ShipIndex
00017E14 0000                       		dc.w loc_179AC-Obj3D_ShipIndex
00017E16 0000                       		dc.w loc_179F6-Obj3D_ShipIndex
00017E18                            ; ===========================================================================
00017E18                            
00017E18                            Obj3D_ShipStart:			; XREF: Obj3D_ShipIndex
00017E18 317C 0100 0012             		move.w	#$100,$12(a0)	; move ship down
00017E1E 6100 0000                  		bsr.w	BossMove
00017E22 0C68 0338 0038             		cmpi.w	#$338,$38(a0)
00017E28 6600                       		bne.s	loc_177E6
00017E2A 317C 0000 0012             		move.w	#0,$12(a0)	; stop ship
00017E30 5428 0025                  		addq.b	#2,$25(a0)	; goto next routine
00017E34                            
00017E34                            loc_177E6:
00017E34 1028 003F                  		move.b	$3F(a0),d0
00017E38 4EB9 0000 2C22             		jsr	(CalcSine).l
00017E3E EC40                       		asr.w	#6,d0
00017E40 D068 0038                  		add.w	$38(a0),d0
00017E44 3140 000C                  		move.w	d0,$C(a0)
00017E48 3168 0030 0008             		move.w	$30(a0),8(a0)
00017E4E 5428 003F                  		addq.b	#2,$3F(a0)
00017E52 0C28 0008 0025             		cmpi.b	#8,$25(a0)
00017E58 6400                       		bcc.s	locret_1784A
00017E5A 4A28 0022                  		tst.b	$22(a0)
00017E5E 6B00                       		bmi.s	loc_1784C
00017E60 4A28 0020                  		tst.b	$20(a0)
00017E64 6600                       		bne.s	locret_1784A
00017E66 4A28 003E                  		tst.b	$3E(a0)
00017E6A 6600                       		bne.s	Obj3D_ShipFlash
00017E6C 117C 0020 003E             		move.b	#$20,$3E(a0)	; set number of	times for ship to flash
00017E72 303C 00AC                  		move.w	#$AC,d0
00017E76 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play boss damage sound
00017E7C                            
00017E7C                            Obj3D_ShipFlash:
00017E7C 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd pallet, 2nd	entry
00017E80 7000                       		moveq	#0,d0		; move 0 (black) to d0
00017E82 4A51                       		tst.w	(a1)
00017E84 6600                       		bne.s	loc_1783C
00017E86 303C 0EEE                  		move.w	#$EEE,d0	; move 0EEE (white) to d0
00017E8A                            
00017E8A                            loc_1783C:
00017E8A 3280                       		move.w	d0,(a1)		; load colour stored in	d0
00017E8C 5328 003E                  		subq.b	#1,$3E(a0)
00017E90 6600                       		bne.s	locret_1784A
00017E92 117C 000F 0020             		move.b	#$F,$20(a0)
00017E98                            
00017E98                            locret_1784A:
00017E98 4E75                       		rts	
00017E9A                            ; ===========================================================================
00017E9A                            
00017E9A                            loc_1784C:				; XREF: loc_177E6
00017E9A 7064                       		moveq	#100,d0
00017E9C 6100 0000                  		bsr.w	AddPoints
00017EA0 117C 0008 0025             		move.b	#8,$25(a0)
00017EA6 317C 00B3 003C             		move.w	#$B3,$3C(a0)
00017EAC 4E75                       		rts	
00017EAE                            
00017EAE                            ; ---------------------------------------------------------------------------
00017EAE                            ; Defeated boss	subroutine
00017EAE                            ; ---------------------------------------------------------------------------
00017EAE                            
00017EAE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017EAE                            
00017EAE                            
00017EAE                            BossDefeated:
00017EAE 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00017EB2 0200 0007                  		andi.b	#7,d0
00017EB6 6600                       		bne.s	locret_178A2
00017EB8 4EB9 0000 E02E             		jsr	SingleObjLoad
00017EBE 6600                       		bne.s	locret_178A2
00017EC0 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
00017EC4 3368 0008 0008             		move.w	8(a0),8(a1)
00017ECA 3368 000C 000C             		move.w	$C(a0),$C(a1)
00017ED0 4EB9 0000 2BFC             		jsr	(RandomNumber).l
00017ED6 3200                       		move.w	d0,d1
00017ED8 7200                       		moveq	#0,d1
00017EDA 1200                       		move.b	d0,d1
00017EDC E409                       		lsr.b	#2,d1
00017EDE 0441 0020                  		subi.w	#$20,d1
00017EE2 D369 0008                  		add.w	d1,8(a1)
00017EE6 E048                       		lsr.w	#8,d0
00017EE8 E608                       		lsr.b	#3,d0
00017EEA D169 000C                  		add.w	d0,$C(a1)
00017EEE                            
00017EEE                            locret_178A2:
00017EEE 4E75                       		rts	
00017EF0                            ; End of function BossDefeated
00017EF0                            
00017EF0                            ; ---------------------------------------------------------------------------
00017EF0                            ; Subroutine to	move a boss
00017EF0                            ; ---------------------------------------------------------------------------
00017EF0                            
00017EF0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017EF0                            
00017EF0                            
00017EF0                            BossMove:
00017EF0 2428 0030                  		move.l	$30(a0),d2
00017EF4 2628 0038                  		move.l	$38(a0),d3
00017EF8 3028 0010                  		move.w	$10(a0),d0
00017EFC 48C0                       		ext.l	d0
00017EFE E180                       		asl.l	#8,d0
00017F00 D480                       		add.l	d0,d2
00017F02 3028 0012                  		move.w	$12(a0),d0
00017F06 48C0                       		ext.l	d0
00017F08 E180                       		asl.l	#8,d0
00017F0A D680                       		add.l	d0,d3
00017F0C 2142 0030                  		move.l	d2,$30(a0)
00017F10 2143 0038                  		move.l	d3,$38(a0)
00017F14 4E75                       		rts	
00017F16                            ; End of function BossMove
00017F16                            
00017F16                            ; ===========================================================================
00017F16                            
00017F16                            Obj3D_MakeBall:				; XREF: Obj3D_ShipIndex
00017F16 317C FF00 0010             		move.w	#-$100,$10(a0)
00017F1C 317C FFC0 0012             		move.w	#-$40,$12(a0)
00017F22 6100 FFCC                  		bsr.w	BossMove
00017F26 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
00017F2C 6600                       		bne.s	loc_17916
00017F2E 317C 0000 0010             		move.w	#0,$10(a0)
00017F34 317C 0000 0012             		move.w	#0,$12(a0)
00017F3A 5428 0025                  		addq.b	#2,$25(a0)
00017F3E 4EB9 0000 E044             		jsr	SingleObjLoad2
00017F44 6600                       		bne.s	loc_17910
00017F46 12BC 0048                  		move.b	#$48,0(a1)	; load swinging	ball object
00017F4A 3368 0030 0008             		move.w	$30(a0),8(a1)
00017F50 3368 0038 000C             		move.w	$38(a0),$C(a1)
00017F56 2348 0034                  		move.l	a0,$34(a1)
00017F5A                            
00017F5A                            loc_17910:
00017F5A 317C 0077 003C             		move.w	#$77,$3C(a0)
00017F60                            
00017F60                            loc_17916:
00017F60 6000 FED2                  		bra.w	loc_177E6
00017F64                            ; ===========================================================================
00017F64                            
00017F64                            Obj3D_ShipMove:				; XREF: Obj3D_ShipIndex
00017F64 5368 003C                  		subq.w	#1,$3C(a0)
00017F68 6A00                       		bpl.s	Obj3D_Reverse
00017F6A 5428 0025                  		addq.b	#2,$25(a0)
00017F6E 317C 003F 003C             		move.w	#$3F,$3C(a0)
00017F74 317C 0100 0010             		move.w	#$100,$10(a0)	; move the ship	sideways
00017F7A 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
00017F80 6600                       		bne.s	Obj3D_Reverse
00017F82 317C 007F 003C             		move.w	#$7F,$3C(a0)
00017F88 317C 0040 0010             		move.w	#$40,$10(a0)
00017F8E                            
00017F8E                            Obj3D_Reverse:
00017F8E 0828 0000 0022             		btst	#0,$22(a0)
00017F94 6600                       		bne.s	loc_17950
00017F96 4468 0010                  		neg.w	$10(a0)		; reverse direction of the ship
00017F9A                            
00017F9A                            loc_17950:
00017F9A 6000 FE98                  		bra.w	loc_177E6
00017F9E                            ; ===========================================================================
00017F9E                            
00017F9E                            loc_17954:				; XREF: Obj3D_ShipIndex
00017F9E 5368 003C                  		subq.w	#1,$3C(a0)
00017FA2 6B00                       		bmi.s	loc_17960
00017FA4 6100 FF4A                  		bsr.w	BossMove
00017FA8 6000                       		bra.s	loc_17976
00017FAA                            ; ===========================================================================
00017FAA                            
00017FAA                            loc_17960:
00017FAA 0868 0000 0022             		bchg	#0,$22(a0)
00017FB0 317C 003F 003C             		move.w	#$3F,$3C(a0)
00017FB6 5528 0025                  		subq.b	#2,$25(a0)
00017FBA 317C 0000 0010             		move.w	#0,$10(a0)
00017FC0                            
00017FC0                            loc_17976:
00017FC0 6000 FE72                  		bra.w	loc_177E6
00017FC4                            ; ===========================================================================
00017FC4                            
00017FC4                            loc_1797A:				; XREF: Obj3D_ShipIndex
00017FC4 5368 003C                  		subq.w	#1,$3C(a0)
00017FC8 6B00                       		bmi.s	loc_17984
00017FCA 6000 FEE2                  		bra.w	BossDefeated
00017FCE                            ; ===========================================================================
00017FCE                            
00017FCE                            loc_17984:
00017FCE 08E8 0000 0022             		bset	#0,$22(a0)
00017FD4 08A8 0007 0022             		bclr	#7,$22(a0)
00017FDA 4268 0010                  		clr.w	$10(a0)
00017FDE 5428 0025                  		addq.b	#2,$25(a0)
00017FE2 317C FFDA 003C             		move.w	#-$26,$3C(a0)
00017FE8 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00017FEC 6600                       		bne.s	locret_179AA
00017FEE 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00017FF4                            
00017FF4                            locret_179AA:
00017FF4 4E75                       		rts	
00017FF6                            ; ===========================================================================
00017FF6                            
00017FF6                            loc_179AC:				; XREF: Obj3D_ShipIndex
00017FF6 5268 003C                  		addq.w	#1,$3C(a0)
00017FFA 6700                       		beq.s	loc_179BC
00017FFC 6A00                       		bpl.s	loc_179C2
00017FFE 0668 0018 0012             		addi.w	#$18,$12(a0)
00018004 6000                       		bra.s	loc_179EE
00018006                            ; ===========================================================================
00018006                            
00018006                            loc_179BC:
00018006 4268 0012                  		clr.w	$12(a0)
0001800A 6000                       		bra.s	loc_179EE
0001800C                            ; ===========================================================================
0001800C                            
0001800C                            loc_179C2:
0001800C 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00018012 6500                       		bcs.s	loc_179DA
00018014 6700                       		beq.s	loc_179E0
00018016 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
0001801C 6500                       		bcs.s	loc_179EE
0001801E 5428 0025                  		addq.b	#2,$25(a0)
00018022 6000                       		bra.s	loc_179EE
00018024                            ; ===========================================================================
00018024                            
00018024                            loc_179DA:
00018024 5168 0012                  		subq.w	#8,$12(a0)
00018028 6000                       		bra.s	loc_179EE
0001802A                            ; ===========================================================================
0001802A                            
0001802A                            loc_179E0:
0001802A 4268 0012                  		clr.w	$12(a0)
0001802E 303C 0081                  		move.w	#$81,d0
00018032 4EB9 0000 15B6             		jsr	(PlaySound).l	; play GHZ music
00018038                            
00018038                            loc_179EE:
00018038 6100 FEB6                  		bsr.w	BossMove
0001803C 6000 FDF6                  		bra.w	loc_177E6
00018040                            ; ===========================================================================
00018040                            
00018040                            loc_179F6:				; XREF: Obj3D_ShipIndex
00018040 317C 0400 0010             		move.w	#$400,$10(a0)
00018046 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001804C 0C78 2AC0 F72A             		cmpi.w	#$2AC0,($FFFFF72A).w
00018052 6700                       		beq.s	loc_17A10
00018054 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00018058 6000                       		bra.s	loc_17A16
0001805A                            ; ===========================================================================
0001805A                            
0001805A                            loc_17A10:
0001805A 4A28 0001                  		tst.b	1(a0)
0001805E 6A00                       		bpl.s	Obj3D_ShipDel
00018060                            
00018060                            loc_17A16:
00018060 6100 FE8E                  		bsr.w	BossMove
00018064 6000 FDCE                  		bra.w	loc_177E6
00018068                            ; ===========================================================================
00018068                            
00018068                            Obj3D_ShipDel:
00018068 4EF9 0000 DBE4             		jmp	DeleteObject
0001806E                            ; ===========================================================================
0001806E                            
0001806E                            Obj3D_FaceMain:				; XREF: Obj3D_Index
0001806E 7000                       		moveq	#0,d0
00018070 7201                       		moveq	#1,d1
00018072 2268 0034                  		movea.l	$34(a0),a1
00018076 1029 0025                  		move.b	$25(a1),d0
0001807A 5900                       		subq.b	#4,d0
0001807C 6600                       		bne.s	loc_17A3E
0001807E 0C69 2A00 0030             		cmpi.w	#$2A00,$30(a1)
00018084 6600                       		bne.s	loc_17A46
00018086 7204                       		moveq	#4,d1
00018088                            
00018088                            loc_17A3E:
00018088 5D00                       		subq.b	#6,d0
0001808A 6B00                       		bmi.s	loc_17A46
0001808C 720A                       		moveq	#$A,d1
0001808E 6000                       		bra.s	loc_17A5A
00018090                            ; ===========================================================================
00018090                            
00018090                            loc_17A46:
00018090 4A29 0020                  		tst.b	$20(a1)
00018094 6600                       		bne.s	loc_17A50
00018096 7205                       		moveq	#5,d1
00018098 6000                       		bra.s	loc_17A5A
0001809A                            ; ===========================================================================
0001809A                            
0001809A                            loc_17A50:
0001809A 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
000180A0 6500                       		bcs.s	loc_17A5A
000180A2 7204                       		moveq	#4,d1
000180A4                            
000180A4                            loc_17A5A:
000180A4 1141 001C                  		move.b	d1,$1C(a0)
000180A8 5500                       		subq.b	#2,d0
000180AA 6600                       		bne.s	Obj3D_FaceDisp
000180AC 117C 0006 001C             		move.b	#6,$1C(a0)
000180B2 4A28 0001                  		tst.b	1(a0)
000180B6 6A00                       		bpl.s	Obj3D_FaceDel
000180B8                            
000180B8                            Obj3D_FaceDisp:
000180B8 6000                       		bra.s	Obj3D_Display
000180BA                            ; ===========================================================================
000180BA                            
000180BA                            Obj3D_FaceDel:
000180BA 4EF9 0000 DBE4             		jmp	DeleteObject
000180C0                            ; ===========================================================================
000180C0                            
000180C0                            Obj3D_FlameMain:			; XREF: Obj3D_Index
000180C0 117C 0007 001C             		move.b	#7,$1C(a0)
000180C6 2268 0034                  		movea.l	$34(a0),a1
000180CA 0C29 000C 0025             		cmpi.b	#$C,$25(a1)
000180D0 6600                       		bne.s	loc_17A96
000180D2 117C 000B 001C             		move.b	#$B,$1C(a0)
000180D8 4A28 0001                  		tst.b	1(a0)
000180DC 6A00                       		bpl.s	Obj3D_FlameDel
000180DE 6000                       		bra.s	Obj3D_FlameDisp
000180E0                            ; ===========================================================================
000180E0                            
000180E0                            loc_17A96:
000180E0 3029 0010                  		move.w	$10(a1),d0
000180E4 6700                       		beq.s	Obj3D_FlameDisp
000180E6 117C 0008 001C             		move.b	#8,$1C(a0)
000180EC                            
000180EC                            Obj3D_FlameDisp:
000180EC 6000                       		bra.s	Obj3D_Display
000180EE                            ; ===========================================================================
000180EE                            
000180EE                            Obj3D_FlameDel:
000180EE 4EF9 0000 DBE4             		jmp	DeleteObject
000180F4                            ; ===========================================================================
000180F4                            
000180F4                            Obj3D_Display:				; XREF: Obj3D_FaceDisp; Obj3D_FlameDisp
000180F4 2268 0034                  		movea.l	$34(a0),a1
000180F8 3169 0008 0008             		move.w	8(a1),8(a0)
000180FE 3169 000C 000C             		move.w	$C(a1),$C(a0)
00018104 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001810A 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
00018110 4EB9 0000 AC42             		jsr	AnimateSprite
00018116 1028 0022                  		move.b	$22(a0),d0
0001811A 0200 0003                  		andi.b	#3,d0
0001811E 0228 00FC 0001             		andi.b	#$FC,1(a0)
00018124 8128 0001                  		or.b	d0,1(a0)
00018128 4EF9 0000 DBA8             		jmp	DisplaySprite
0001812E                            ; ===========================================================================
0001812E                            ; ---------------------------------------------------------------------------
0001812E                            ; Object 48 - ball on a	chain that Eggman swings (GHZ)
0001812E                            ; ---------------------------------------------------------------------------
0001812E                            
0001812E                            Obj48:					; XREF: Obj_Index
0001812E 7000                       		moveq	#0,d0
00018130 1028 0024                  		move.b	$24(a0),d0
00018134 323B 0000                  		move.w	Obj48_Index(pc,d0.w),d1
00018138 4EFB 1000                  		jmp	Obj48_Index(pc,d1.w)
0001813C                            ; ===========================================================================
0001813C 0000                       Obj48_Index:	dc.w Obj48_Main-Obj48_Index
0001813E 0000                       		dc.w Obj48_Base-Obj48_Index
00018140 0000                       		dc.w Obj48_Display2-Obj48_Index
00018142 0000                       		dc.w loc_17C68-Obj48_Index
00018144 0000                       		dc.w Obj48_ChkVanish-Obj48_Index
00018146                            ; ===========================================================================
00018146                            
00018146                            Obj48_Main:				; XREF: Obj48_Index
00018146 5428 0024                  		addq.b	#2,$24(a0)
0001814A 317C 4080 0026             		move.w	#$4080,$26(a0)
00018150 317C FE00 003E             		move.w	#-$200,$3E(a0)
00018156 217C 0000 0000 0004        		move.l	#Map_BossItems,4(a0)
0001815E 317C 046C 0002             		move.w	#$46C,2(a0)
00018164 45E8 0028                  		lea	$28(a0),a2
00018168 14FC 0000                  		move.b	#0,(a2)+
0001816C 7205                       		moveq	#5,d1
0001816E 2248                       		movea.l	a0,a1
00018170 6000                       		bra.s	loc_17B60
00018172                            ; ===========================================================================
00018172                            
00018172                            Obj48_MakeLinks:
00018172 4EB9 0000 E044             		jsr	SingleObjLoad2
00018178 6600                       		bne.s	Obj48_MakeBall
0001817A 3368 0008 0008             		move.w	8(a0),8(a1)
00018180 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018186 12BC 0048                  		move.b	#$48,0(a1)	; load chain link object
0001818A 137C 0006 0024             		move.b	#6,$24(a1)
00018190 237C 0000 8096 0004        		move.l	#Map_obj15,4(a1)
00018198 337C 0380 0002             		move.w	#$380,2(a1)
0001819E 137C 0001 001A             		move.b	#1,$1A(a1)
000181A4 5228 0028                  		addq.b	#1,$28(a0)
000181A8                            
000181A8                            loc_17B60:				; XREF: Obj48_Main
000181A8 3A09                       		move.w	a1,d5
000181AA 0445 D000                  		subi.w	#$D000,d5
000181AE EC4D                       		lsr.w	#6,d5
000181B0 0245 007F                  		andi.w	#$7F,d5
000181B4 14C5                       		move.b	d5,(a2)+
000181B6 137C 0004 0001             		move.b	#4,1(a1)
000181BC 137C 0008 0019             		move.b	#8,$19(a1)
000181C2 137C 0006 0018             		move.b	#6,$18(a1)
000181C8 2368 0034 0034             		move.l	$34(a0),$34(a1)
000181CE 51C9 FFA2                  		dbf	d1,Obj48_MakeLinks ; repeat sequence 5 more times
000181D2                            
000181D2                            Obj48_MakeBall:
000181D2 137C 0008 0024             		move.b	#8,$24(a1)
000181D8 237C 0000 85F4 0004        		move.l	#Map_obj48,4(a1) ; load	different mappings for final link
000181E0 337C 43AA 0002             		move.w	#$43AA,2(a1)	; use different	graphics
000181E6 137C 0001 001A             		move.b	#1,$1A(a1)
000181EC 137C 0005 0018             		move.b	#5,$18(a1)
000181F2 137C 0081 0020             		move.b	#$81,$20(a1)	; make object hurt Sonic
000181F8 4E75                       		rts	
000181FA                            ; ===========================================================================
000181FA                            
000181FA 0010 2030 4060             Obj48_PosData:	dc.b 0,	$10, $20, $30, $40, $60	; y-position data for links and	giant ball
00018200                            
00018200                            ; ===========================================================================
00018200                            
00018200                            Obj48_Base:				; XREF: Obj48_Index
00018200 47F9 0001 81FA             		lea	(Obj48_PosData).l,a3
00018206 45E8 0028                  		lea	$28(a0),a2
0001820A 7C00                       		moveq	#0,d6
0001820C 1C1A                       		move.b	(a2)+,d6
0001820E                            
0001820E                            loc_17BC6:
0001820E 7800                       		moveq	#0,d4
00018210 181A                       		move.b	(a2)+,d4
00018212 ED4C                       		lsl.w	#6,d4
00018214 0684 00FF D000             		addi.l	#$FFD000,d4
0001821A 2244                       		movea.l	d4,a1
0001821C 101B                       		move.b	(a3)+,d0
0001821E B029 003C                  		cmp.b	$3C(a1),d0
00018222 6700                       		beq.s	loc_17BE0
00018224 5229 003C                  		addq.b	#1,$3C(a1)
00018228                            
00018228                            loc_17BE0:
00018228 51CE FFE4                  		dbf	d6,loc_17BC6
0001822C                            
0001822C B029 003C                  		cmp.b	$3C(a1),d0
00018230 6600                       		bne.s	loc_17BFA
00018232 2268 0034                  		movea.l	$34(a0),a1
00018236 0C29 0006 0025             		cmpi.b	#6,$25(a1)
0001823C 6600                       		bne.s	loc_17BFA
0001823E 5428 0024                  		addq.b	#2,$24(a0)
00018242                            
00018242                            loc_17BFA:
00018242 0C68 0020 0032             		cmpi.w	#$20,$32(a0)
00018248 6700                       		beq.s	Obj48_Display
0001824A 5268 0032                  		addq.w	#1,$32(a0)
0001824E                            
0001824E                            Obj48_Display:
0001824E 6100 0000                  		bsr.w	sub_17C2A
00018252 1028 0026                  		move.b	$26(a0),d0
00018256 4EB9 0000 8008             		jsr	(Obj15_Move2).l
0001825C 4EF9 0000 DBA8             		jmp	DisplaySprite
00018262                            ; ===========================================================================
00018262                            
00018262                            Obj48_Display2:				; XREF: Obj48_Index
00018262 6100 0000                  		bsr.w	sub_17C2A
00018266 4EB9 0000 7FC8             		jsr	(Obj48_Move).l
0001826C 4EF9 0000 DBA8             		jmp	DisplaySprite
00018272                            
00018272                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018272                            
00018272                            
00018272                            sub_17C2A:				; XREF: Obj48_Display; Obj48_Display2
00018272 2268 0034                  		movea.l	$34(a0),a1
00018276 0628 0020 001B             		addi.b	#$20,$1B(a0)
0001827C 6400                       		bcc.s	loc_17C3C
0001827E 0868 0000 001A             		bchg	#0,$1A(a0)
00018284                            
00018284                            loc_17C3C:
00018284 3169 0008 003A             		move.w	8(a1),$3A(a0)
0001828A 3029 000C                  		move.w	$C(a1),d0
0001828E D068 0032                  		add.w	$32(a0),d0
00018292 3140 0038                  		move.w	d0,$38(a0)
00018296 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001829C 4A29 0022                  		tst.b	$22(a1)
000182A0 6A00                       		bpl.s	locret_17C66
000182A2 10BC 003F                  		move.b	#$3F,0(a0)
000182A6 117C 0000 0024             		move.b	#0,$24(a0)
000182AC                            
000182AC                            locret_17C66:
000182AC 4E75                       		rts	
000182AE                            ; End of function sub_17C2A
000182AE                            
000182AE                            ; ===========================================================================
000182AE                            
000182AE                            loc_17C68:				; XREF: Obj48_Index
000182AE 2268 0034                  		movea.l	$34(a0),a1
000182B2 4A29 0022                  		tst.b	$22(a1)
000182B6 6A00                       		bpl.s	Obj48_Display3
000182B8 10BC 003F                  		move.b	#$3F,0(a0)
000182BC 117C 0000 0024             		move.b	#0,$24(a0)
000182C2                            
000182C2                            Obj48_Display3:
000182C2 4EF9 0000 DBA8             		jmp	DisplaySprite
000182C8                            ; ===========================================================================
000182C8                            
000182C8                            Obj48_ChkVanish:			; XREF: Obj48_Index
000182C8 7000                       		moveq	#0,d0
000182CA 4A28 001A                  		tst.b	$1A(a0)
000182CE 6600                       		bne.s	Obj48_Vanish
000182D0 5200                       		addq.b	#1,d0
000182D2                            
000182D2                            Obj48_Vanish:
000182D2 1140 001A                  		move.b	d0,$1A(a0)
000182D6 2268 0034                  		movea.l	$34(a0),a1
000182DA 4A29 0022                  		tst.b	$22(a1)
000182DE 6A00                       		bpl.s	Obj48_Display4
000182E0 117C 0000 0020             		move.b	#0,$20(a0)
000182E6 6100 FBC6                  		bsr.w	BossDefeated
000182EA 5328 003C                  		subq.b	#1,$3C(a0)
000182EE 6A00                       		bpl.s	Obj48_Display4
000182F0 10BC 003F                  		move.b	#$3F,(a0)
000182F4 117C 0000 0024             		move.b	#0,$24(a0)
000182FA                            
000182FA                            Obj48_Display4:
000182FA 4EF9 0000 DBA8             		jmp	DisplaySprite
00018300                            ; ===========================================================================
00018300                            Ani_Eggman:
00018300                            	include "_anim\Eggman.asm"
00018300                            ; ---------------------------------------------------------------------------
00018300                            ; Animation script - Eggman (bosses)
00018300                            ; ---------------------------------------------------------------------------
00018300 0000                       		dc.w byte_17CD4-Ani_Eggman
00018302 0000                       		dc.w byte_17CD8-Ani_Eggman
00018304 0000                       		dc.w byte_17CDC-Ani_Eggman
00018306 0000                       		dc.w byte_17CE0-Ani_Eggman
00018308 0000                       		dc.w byte_17CE4-Ani_Eggman
0001830A 0000                       		dc.w byte_17CE8-Ani_Eggman
0001830C 0000                       		dc.w byte_17CEC-Ani_Eggman
0001830E 0000                       		dc.w byte_17CF0-Ani_Eggman
00018310 0000                       		dc.w byte_17CF4-Ani_Eggman
00018312 0000                       		dc.w byte_17CF8-Ani_Eggman
00018314 0000                       		dc.w byte_17CFC-Ani_Eggman
00018316 0000                       		dc.w byte_17D00-Ani_Eggman
00018318 0F00 FF00                  byte_17CD4:	dc.b $F, 0, $FF, 0
0001831C 0501 02FF                  byte_17CD8:	dc.b 5,	1, 2, $FF
00018320 0301 02FF                  byte_17CDC:	dc.b 3,	1, 2, $FF
00018324 0101 02FF                  byte_17CE0:	dc.b 1,	1, 2, $FF
00018328 0403 04FF                  byte_17CE4:	dc.b 4,	3, 4, $FF
0001832C 1F05 01FF                  byte_17CE8:	dc.b $1F, 5, 1,	$FF
00018330 0306 01FF                  byte_17CEC:	dc.b 3,	6, 1, $FF
00018334 0F0A FF00                  byte_17CF0:	dc.b $F, $A, $FF, 0
00018338 0308 09FF                  byte_17CF4:	dc.b 3,	8, 9, $FF
0001833C 0108 09FF                  byte_17CF8:	dc.b 1,	8, 9, $FF
00018340 0F07 FF00                  byte_17CFC:	dc.b $F, 7, $FF, 0
00018344 0209 080B 0C0B 0C09 08FE+  byte_17D00:	dc.b 2,	9, 8, $B, $C, $B, $C, 9, 8, $FE, 2, 0
00018350                            		even
00018350                            		even
00018350                            
00018350                            ; ---------------------------------------------------------------------------
00018350                            ; Sprite mappings - Eggman (boss levels)
00018350                            ; ---------------------------------------------------------------------------
00018350                            Map_Eggman:
00018350                            	include "_maps\Eggman.asm"
00018350                            Map_dc7e:
00018350 0000                       Map_dc7e_0: 	dc.w Map_dc7e_1A-Map_dc7e
00018352 0000                       Map_dc7e_2: 	dc.w Map_dc7e_39-Map_dc7e
00018354 0000                       Map_dc7e_4: 	dc.w Map_dc7e_44-Map_dc7e
00018356 0000                       Map_dc7e_6: 	dc.w Map_dc7e_4F-Map_dc7e
00018358 0000                       Map_dc7e_8: 	dc.w Map_dc7e_5F-Map_dc7e
0001835A 0000                       Map_dc7e_A: 	dc.w Map_dc7e_6F-Map_dc7e
0001835C 0000                       Map_dc7e_C: 	dc.w Map_dc7e_7F-Map_dc7e
0001835E 0000                       Map_dc7e_E: 	dc.w Map_dc7e_8F-Map_dc7e
00018360 0000                       Map_dc7e_10: 	dc.w Map_dc7e_A4-Map_dc7e
00018362 0000                       Map_dc7e_12: 	dc.w Map_dc7e_AA-Map_dc7e
00018364 0000                       Map_dc7e_14: 	dc.w Map_dc7e_B0-Map_dc7e
00018366 0000                       Map_dc7e_16: 	dc.w Map_dc7e_B1-Map_dc7e
00018368 0000                       Map_dc7e_18: 	dc.w Map_dc7e_BC-Map_dc7e
0001836A 06                         Map_dc7e_1A: 	dc.b $6
0001836B EC01 000A E4               	dc.b $EC, $1, $0, $A, $E4
00018370 EC05 000C 0C               	dc.b $EC, $5, $0, $C, $C
00018375 FC0E 2010 E4               	dc.b $FC, $E, $20, $10, $E4
0001837A FC0E 201C 04               	dc.b $FC, $E, $20, $1C, $4
0001837F 140C 2028 EC               	dc.b $14, $C, $20, $28, $EC
00018384 1400 202C 0C               	dc.b $14, $0, $20, $2C, $C
00018389 02                         Map_dc7e_39: 	dc.b $2
0001838A E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
0001838F EC0D 0002 EC               	dc.b $EC, $D, $0, $2, $EC
00018394 02                         Map_dc7e_44: 	dc.b $2
00018395 E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
0001839A EC0D 0035 EC               	dc.b $EC, $D, $0, $35, $EC
0001839F 03                         Map_dc7e_4F: 	dc.b $3
000183A0 E408 003D F4               	dc.b $E4, $8, $0, $3D, $F4
000183A5 EC09 0040 EC               	dc.b $EC, $9, $0, $40, $EC
000183AA EC05 0046 04               	dc.b $EC, $5, $0, $46, $4
000183AF 03                         Map_dc7e_5F: 	dc.b $3
000183B0 E408 004A F4               	dc.b $E4, $8, $0, $4A, $F4
000183B5 EC09 004D EC               	dc.b $EC, $9, $0, $4D, $EC
000183BA EC05 0053 04               	dc.b $EC, $5, $0, $53, $4
000183BF 03                         Map_dc7e_6F: 	dc.b $3
000183C0 E408 0057 F4               	dc.b $E4, $8, $0, $57, $F4
000183C5 EC09 005A EC               	dc.b $EC, $9, $0, $5A, $EC
000183CA EC05 0060 04               	dc.b $EC, $5, $0, $60, $4
000183CF 03                         Map_dc7e_7F: 	dc.b $3
000183D0 E404 0064 04               	dc.b $E4, $4, $0, $64, $4
000183D5 E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
000183DA EC0D 0035 EC               	dc.b $EC, $D, $0, $35, $EC
000183DF 04                         Map_dc7e_8F: 	dc.b $4
000183E0 E409 0066 F4               	dc.b $E4, $9, $0, $66, $F4
000183E5 E408 0057 F4               	dc.b $E4, $8, $0, $57, $F4
000183EA EC09 005A EC               	dc.b $EC, $9, $0, $5A, $EC
000183EF EC05 0060 04               	dc.b $EC, $5, $0, $60, $4
000183F4 01                         Map_dc7e_A4: 	dc.b $1
000183F5 0405 002D 22               	dc.b $4, $5, $0, $2D, $22
000183FA 01                         Map_dc7e_AA: 	dc.b $1
000183FB 0405 0031 22               	dc.b $4, $5, $0, $31, $22
00018400 00                         Map_dc7e_B0: 	dc.b $0
00018401 02                         Map_dc7e_B1: 	dc.b $2
00018402 0008 012A 22               	dc.b $0, $8, $1, $2A, $22
00018407 0808 112A 22               	dc.b $8, $8, $11, $2A, $22
0001840C 02                         Map_dc7e_BC: 	dc.b $2
0001840D F80B 012D 22               	dc.b $F8, $B, $1, $2D, $22
00018412 0001 0139 3A               	dc.b $0, $1, $1, $39, $3A
00018418 00                         	even
00018418 00                         	even
00018418                            
00018418                            ; ---------------------------------------------------------------------------
00018418                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
00018418                            ; ---------------------------------------------------------------------------
00018418                            Map_BossItems:
00018418                            	include "_maps\Boss items.asm"
00018418                            ; ---------------------------------------------------------------------------
00018418                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
00018418                            ; ---------------------------------------------------------------------------
00018418 0000 0000                  		dc.w byte_17DE4-Map_BossItems, byte_17DEA-Map_BossItems
0001841C 0000 0000                  		dc.w byte_17DF6-Map_BossItems, byte_17DFC-Map_BossItems
00018420 0000 0000                  		dc.w byte_17E02-Map_BossItems, byte_17E08-Map_BossItems
00018424 0000 0000                  		dc.w byte_17E1E-Map_BossItems, byte_17E2A-Map_BossItems
00018428 01                         byte_17DE4:	dc.b 1
00018429 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001842E 02                         byte_17DEA:	dc.b 2
0001842F FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8
00018434 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00018439 00                         		dc.b 0
0001843A 01                         byte_17DF6:	dc.b 1
0001843B FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC
00018440 01                         byte_17DFC:	dc.b 1
00018441 1409 0007 F4               		dc.b $14, 9, 0,	7, $F4
00018446 01                         byte_17E02:	dc.b 1
00018447 1405 000D F8               		dc.b $14, 5, 0,	$D, $F8
0001844C 04                         byte_17E08:	dc.b 4
0001844D F004 0011 F8               		dc.b $F0, 4, 0,	$11, $F8
00018452 F801 0013 F8               		dc.b $F8, 1, 0,	$13, $F8
00018457 F801 0813 00               		dc.b $F8, 1, 8,	$13, 0
0001845C 0804 0015 F8               		dc.b 8,	4, 0, $15, $F8
00018461 00                         		dc.b 0
00018462 02                         byte_17E1E:	dc.b 2
00018463 0005 0017 00               		dc.b 0,	5, 0, $17, 0
00018468 0000 001B 10               		dc.b 0,	0, 0, $1B, $10
0001846D 00                         		dc.b 0
0001846E 02                         byte_17E2A:	dc.b 2
0001846F 1804 001C 00               		dc.b $18, 4, 0,	$1C, 0
00018474 000B 001E 10               		dc.b 0,	$B, 0, $1E, $10
0001847A 00                         		even
0001847A 00                         		even
0001847A                            
0001847A                            ; ===========================================================================
0001847A                            ; ---------------------------------------------------------------------------
0001847A                            ; Object 77 - Eggman (LZ)
0001847A                            ; ---------------------------------------------------------------------------
0001847A                            
0001847A                            Obj77:					; XREF: Obj_Index
0001847A 7000                       		moveq	#0,d0
0001847C 1028 0024                  		move.b	$24(a0),d0
00018480 323B 0000                  		move.w	Obj77_Index(pc,d0.w),d1
00018484 4EFB 1000                  		jmp	Obj77_Index(pc,d1.w)
00018488                            ; ===========================================================================
00018488 0000                       Obj77_Index:	dc.w Obj77_Main-Obj77_Index
0001848A 0000                       		dc.w Obj77_ShipMain-Obj77_Index
0001848C 0000                       		dc.w Obj77_FaceMain-Obj77_Index
0001848E 0000                       		dc.w Obj77_FlameMain-Obj77_Index
00018490                            
00018490 0200                       Obj77_ObjData:	dc.b 2,	0		; routine number, animation
00018492 0401                       		dc.b 4,	1
00018494 0607                       		dc.b 6,	7
00018496                            ; ===========================================================================
00018496                            
00018496                            Obj77_Main:				; XREF: Obj77_Index
00018496 317C 1E10 0008             		move.w	#$1E10,8(a0)
0001849C 317C 05C0 000C             		move.w	#$5C0,$C(a0)
000184A2 3168 0008 0030             		move.w	8(a0),$30(a0)
000184A8 3168 000C 0038             		move.w	$C(a0),$38(a0)
000184AE 117C 000F 0020             		move.b	#$F,$20(a0)
000184B4 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
000184BA 117C 0004 0018             		move.b	#4,$18(a0)
000184C0 45FA FFCE                  		lea	Obj77_ObjData(pc),a2
000184C4 2248                       		movea.l	a0,a1
000184C6 7202                       		moveq	#2,d1
000184C8 6000                       		bra.s	Obj77_LoadBoss
000184CA                            ; ===========================================================================
000184CA                            
000184CA                            Obj77_Loop:
000184CA 4EB9 0000 E044             		jsr	SingleObjLoad2
000184D0 6600                       		bne.s	Obj77_ShipMain
000184D2 12BC 0077                  		move.b	#$77,0(a1)
000184D6 3368 0008 0008             		move.w	8(a0),8(a1)
000184DC 3368 000C 000C             		move.w	$C(a0),$C(a1)
000184E2                            
000184E2                            Obj77_LoadBoss:				; XREF: Obj77_Main
000184E2 08A8 0000 0022             		bclr	#0,$22(a0)
000184E8 4229 0025                  		clr.b	$25(a1)
000184EC 135A 0024                  		move.b	(a2)+,$24(a1)
000184F0 135A 001C                  		move.b	(a2)+,$1C(a1)
000184F4 1368 0018 0018             		move.b	$18(a0),$18(a1)
000184FA 237C 0001 8350 0004        		move.l	#Map_Eggman,4(a1)
00018502 337C 0400 0002             		move.w	#$400,2(a1)
00018508 137C 0004 0001             		move.b	#4,1(a1)
0001850E 137C 0020 0019             		move.b	#$20,$19(a1)
00018514 2348 0034                  		move.l	a0,$34(a1)
00018518 51C9 FFB0                  		dbf	d1,Obj77_Loop
0001851C                            
0001851C                            Obj77_ShipMain:
0001851C 43F8 D000                  		lea	($FFFFD000).w,a1
00018520 7000                       		moveq	#0,d0
00018522 1028 0025                  		move.b	$25(a0),d0
00018526 323B 0000                  		move.w	Obj77_ShipIndex(pc,d0.w),d1
0001852A 4EBB 1000                  		jsr	Obj77_ShipIndex(pc,d1.w)
0001852E 43F9 0001 8300             		lea	(Ani_Eggman).l,a1
00018534 4EB9 0000 AC42             		jsr	AnimateSprite
0001853A 7003                       		moveq	#3,d0
0001853C C028 0022                  		and.b	$22(a0),d0
00018540 0228 00FC 0001             		andi.b	#$FC,1(a0)
00018546 8128 0001                  		or.b	d0,1(a0)
0001854A 4EF9 0000 DBA8             		jmp	DisplaySprite
00018550                            ; ===========================================================================
00018550 0000 0000                  Obj77_ShipIndex:dc.w loc_17F1E-Obj77_ShipIndex,	loc_17FA0-Obj77_ShipIndex
00018554 0000 0000                  		dc.w loc_17FE0-Obj77_ShipIndex,	loc_1801E-Obj77_ShipIndex
00018558 0000 0000                  		dc.w loc_180BC-Obj77_ShipIndex,	loc_180F6-Obj77_ShipIndex
0001855C 0000 0000                  		dc.w loc_1812A-Obj77_ShipIndex,	loc_18152-Obj77_ShipIndex
00018560                            ; ===========================================================================
00018560                            
00018560                            loc_17F1E:				; XREF: Obj77_ShipIndex
00018560 3029 0008                  		move.w	8(a1),d0
00018564 0C40 1DA0                  		cmpi.w	#$1DA0,d0
00018568 6500                       		bcs.s	loc_17F38
0001856A 317C FE80 0012             		move.w	#-$180,$12(a0)
00018570 317C 0060 0010             		move.w	#$60,$10(a0)
00018576 5428 0025                  		addq.b	#2,$25(a0)
0001857A                            
0001857A                            loc_17F38:
0001857A 6100 F974                  		bsr.w	BossMove
0001857E 3168 0038 000C             		move.w	$38(a0),$C(a0)
00018584 3168 0030 0008             		move.w	$30(a0),8(a0)
0001858A                            
0001858A                            loc_17F48:
0001858A 4A28 003D                  		tst.b	$3D(a0)
0001858E 6600                       		bne.s	loc_17F8E
00018590 4A28 0022                  		tst.b	$22(a0)
00018594 6B00                       		bmi.s	loc_17F92
00018596 4A28 0020                  		tst.b	$20(a0)
0001859A 6600                       		bne.s	locret_17F8C
0001859C 4A28 003E                  		tst.b	$3E(a0)
000185A0 6600                       		bne.s	loc_17F70
000185A2 117C 0020 003E             		move.b	#$20,$3E(a0)
000185A8 303C 00AC                  		move.w	#$AC,d0
000185AC 4EB9 0000 15BC             		jsr	(PlaySound_Special).l
000185B2                            
000185B2                            loc_17F70:
000185B2 43F8 FB22                  		lea	($FFFFFB22).w,a1
000185B6 7000                       		moveq	#0,d0
000185B8 4A51                       		tst.w	(a1)
000185BA 6600                       		bne.s	loc_17F7E
000185BC 303C 0EEE                  		move.w	#$EEE,d0
000185C0                            
000185C0                            loc_17F7E:
000185C0 3280                       		move.w	d0,(a1)
000185C2 5328 003E                  		subq.b	#1,$3E(a0)
000185C6 6600                       		bne.s	locret_17F8C
000185C8 117C 000F 0020             		move.b	#$F,$20(a0)
000185CE                            
000185CE                            locret_17F8C:
000185CE 4E75                       		rts	
000185D0                            ; ===========================================================================
000185D0                            
000185D0                            loc_17F8E:				; XREF: loc_17F48
000185D0 6000 F8DC                  		bra.w	BossDefeated
000185D4                            ; ===========================================================================
000185D4                            
000185D4                            loc_17F92:				; XREF: loc_17F48
000185D4 7064                       		moveq	#100,d0
000185D6 6100 0000                  		bsr.w	AddPoints
000185DA 117C 00FF 003D             		move.b	#-1,$3D(a0)
000185E0 4E75                       		rts	
000185E2                            ; ===========================================================================
000185E2                            
000185E2                            loc_17FA0:				; XREF: Obj77_ShipIndex
000185E2 70FE                       		moveq	#-2,d0
000185E4 0C68 1E48 0030             		cmpi.w	#$1E48,$30(a0)
000185EA 6500                       		bcs.s	loc_17FB6
000185EC 317C 1E48 0030             		move.w	#$1E48,$30(a0)
000185F2 4268 0010                  		clr.w	$10(a0)
000185F6 5240                       		addq.w	#1,d0
000185F8                            
000185F8                            loc_17FB6:
000185F8 0C68 0500 0038             		cmpi.w	#$500,$38(a0)
000185FE 6E00                       		bgt.s	loc_17FCA
00018600 317C 0500 0038             		move.w	#$500,$38(a0)
00018606 4268 0012                  		clr.w	$12(a0)
0001860A 5240                       		addq.w	#1,d0
0001860C                            
0001860C                            loc_17FCA:
0001860C 6600                       		bne.s	loc_17FDC
0001860E 317C 0140 0010             		move.w	#$140,$10(a0)
00018614 317C FE00 0012             		move.w	#-$200,$12(a0)
0001861A 5428 0025                  		addq.b	#2,$25(a0)
0001861E                            
0001861E                            loc_17FDC:
0001861E 6000 FF5A                  		bra.w	loc_17F38
00018622                            ; ===========================================================================
00018622                            
00018622                            loc_17FE0:				; XREF: Obj77_ShipIndex
00018622 70FE                       		moveq	#-2,d0
00018624 0C68 1E70 0030             		cmpi.w	#$1E70,$30(a0)
0001862A 6500                       		bcs.s	loc_17FF6
0001862C 317C 1E70 0030             		move.w	#$1E70,$30(a0)
00018632 4268 0010                  		clr.w	$10(a0)
00018636 5240                       		addq.w	#1,d0
00018638                            
00018638                            loc_17FF6:
00018638 0C68 04C0 0038             		cmpi.w	#$4C0,$38(a0)
0001863E 6E00                       		bgt.s	loc_1800A
00018640 317C 04C0 0038             		move.w	#$4C0,$38(a0)
00018646 4268 0012                  		clr.w	$12(a0)
0001864A 5240                       		addq.w	#1,d0
0001864C                            
0001864C                            loc_1800A:
0001864C 6600                       		bne.s	loc_1801A
0001864E 317C FE80 0012             		move.w	#-$180,$12(a0)
00018654 5428 0025                  		addq.b	#2,$25(a0)
00018658 4228 003F                  		clr.b	$3F(a0)
0001865C                            
0001865C                            loc_1801A:
0001865C 6000 FF1C                  		bra.w	loc_17F38
00018660                            ; ===========================================================================
00018660                            
00018660                            loc_1801E:				; XREF: Obj77_ShipIndex
00018660 0C68 0100 0038             		cmpi.w	#$100,$38(a0)
00018666 6E00                       		bgt.s	loc_1804E
00018668 317C 0100 0038             		move.w	#$100,$38(a0)
0001866E 317C 0140 0010             		move.w	#$140,$10(a0)
00018674 317C FF80 0012             		move.w	#-$80,$12(a0)
0001867A 4A28 003D                  		tst.b	$3D(a0)
0001867E 6700                       		beq.s	loc_18046
00018680 E1E8 0010                  		asl	$10(a0)
00018684 E1E8 0012                  		asl	$12(a0)
00018688                            
00018688                            loc_18046:
00018688 5428 0025                  		addq.b	#2,$25(a0)
0001868C 6000 FEEC                  		bra.w	loc_17F38
00018690                            ; ===========================================================================
00018690                            
00018690                            loc_1804E:
00018690 08E8 0000 0022             		bset	#0,$22(a0)
00018696 5428 003F                  		addq.b	#2,$3F(a0)
0001869A 1028 003F                  		move.b	$3F(a0),d0
0001869E 4EB9 0000 2C22             		jsr	(CalcSine).l
000186A4 4A41                       		tst.w	d1
000186A6 6A00                       		bpl.s	loc_1806C
000186A8 08A8 0000 0022             		bclr	#0,$22(a0)
000186AE                            
000186AE                            loc_1806C:
000186AE E840                       		asr.w	#4,d0
000186B0 4840                       		swap	d0
000186B2 4240                       		clr.w	d0
000186B4 D0A8 0030                  		add.l	$30(a0),d0
000186B8 4840                       		swap	d0
000186BA 3140 0008                  		move.w	d0,8(a0)
000186BE 3028 0012                  		move.w	$12(a0),d0
000186C2 3238 D00C                  		move.w	($FFFFD00C).w,d1
000186C6 9268 000C                  		sub.w	$C(a0),d1
000186CA 6500                       		bcs.s	loc_180A2
000186CC 0441 0048                  		subi.w	#$48,d1
000186D0 6500                       		bcs.s	loc_180A2
000186D2 E240                       		asr.w	#1,d0
000186D4 0441 0028                  		subi.w	#$28,d1
000186D8 6500                       		bcs.s	loc_180A2
000186DA E240                       		asr.w	#1,d0
000186DC 0441 0028                  		subi.w	#$28,d1
000186E0 6500                       		bcs.s	loc_180A2
000186E2 7000                       		moveq	#0,d0
000186E4                            
000186E4                            loc_180A2:
000186E4 48C0                       		ext.l	d0
000186E6 E180                       		asl.l	#8,d0
000186E8 4A28 003D                  		tst.b	$3D(a0)
000186EC 6700                       		beq.s	loc_180AE
000186EE D080                       		add.l	d0,d0
000186F0                            
000186F0                            loc_180AE:
000186F0 D1A8 0038                  		add.l	d0,$38(a0)
000186F4 3168 0038 000C             		move.w	$38(a0),$C(a0)
000186FA 6000 FE8E                  		bra.w	loc_17F48
000186FE                            ; ===========================================================================
000186FE                            
000186FE                            loc_180BC:				; XREF: Obj77_ShipIndex
000186FE 70FE                       		moveq	#-2,d0
00018700 0C68 1F4C 0030             		cmpi.w	#$1F4C,$30(a0)
00018706 6500                       		bcs.s	loc_180D2
00018708 317C 1F4C 0030             		move.w	#$1F4C,$30(a0)
0001870E 4268 0010                  		clr.w	$10(a0)
00018712 5240                       		addq.w	#1,d0
00018714                            
00018714                            loc_180D2:
00018714 0C68 00C0 0038             		cmpi.w	#$C0,$38(a0)
0001871A 6E00                       		bgt.s	loc_180E6
0001871C 317C 00C0 0038             		move.w	#$C0,$38(a0)
00018722 4268 0012                  		clr.w	$12(a0)
00018726 5240                       		addq.w	#1,d0
00018728                            
00018728                            loc_180E6:
00018728 6600                       		bne.s	loc_180F2
0001872A 5428 0025                  		addq.b	#2,$25(a0)
0001872E 08A8 0000 0022             		bclr	#0,$22(a0)
00018734                            
00018734                            loc_180F2:
00018734 6000 FE44                  		bra.w	loc_17F38
00018738                            ; ===========================================================================
00018738                            
00018738                            loc_180F6:				; XREF: Obj77_ShipIndex
00018738 4A28 003D                  		tst.b	$3D(a0)
0001873C 6600                       		bne.s	loc_18112
0001873E 0C69 1EC8 0008             		cmpi.w	#$1EC8,8(a1)
00018744 6D00                       		blt.s	loc_18126
00018746 0C69 00F0 000C             		cmpi.w	#$F0,$C(a1)
0001874C 6E00                       		bgt.s	loc_18126
0001874E 117C 0032 003C             		move.b	#$32,$3C(a0)
00018754                            
00018754                            loc_18112:
00018754 303C 0082                  		move.w	#$82,d0
00018758 4EB9 0000 15B6             		jsr	(PlaySound).l	; play LZ music
0001875E 08E8 0000 0022             		bset	#0,$22(a0)
00018764 5428 0025                  		addq.b	#2,$25(a0)
00018768                            
00018768                            loc_18126:
00018768 6000 FE10                  		bra.w	loc_17F38
0001876C                            ; ===========================================================================
0001876C                            
0001876C                            loc_1812A:				; XREF: Obj77_ShipIndex
0001876C 4A28 003D                  		tst.b	$3D(a0)
00018770 6600                       		bne.s	loc_18136
00018772 5328 003C                  		subq.b	#1,$3C(a0)
00018776 6600                       		bne.s	loc_1814E
00018778                            
00018778                            loc_18136:
00018778 4228 003C                  		clr.b	$3C(a0)
0001877C 317C 0400 0010             		move.w	#$400,$10(a0)
00018782 317C FFC0 0012             		move.w	#-$40,$12(a0)
00018788 4228 003D                  		clr.b	$3D(a0)
0001878C 5428 0025                  		addq.b	#2,$25(a0)
00018790                            
00018790                            loc_1814E:
00018790 6000 FDE8                  		bra.w	loc_17F38
00018794                            ; ===========================================================================
00018794                            
00018794                            loc_18152:				; XREF: Obj77_ShipIndex
00018794 0C78 2030 F72A             		cmpi.w	#$2030,($FFFFF72A).w
0001879A 6400                       		bcc.s	loc_18160
0001879C 5478 F72A                  		addq.w	#2,($FFFFF72A).w
000187A0 6000                       		bra.s	loc_18166
000187A2                            ; ===========================================================================
000187A2                            
000187A2                            loc_18160:
000187A2 4A28 0001                  		tst.b	1(a0)
000187A6 6A00                       		bpl.s	Obj77_ShipDel
000187A8                            
000187A8                            loc_18166:
000187A8 6000 FDD0                  		bra.w	loc_17F38
000187AC                            ; ===========================================================================
000187AC                            
000187AC                            Obj77_ShipDel:
000187AC 4EF9 0000 DBE4             		jmp	DeleteObject
000187B2                            ; ===========================================================================
000187B2                            
000187B2                            Obj77_FaceMain:				; XREF: Obj77_Index
000187B2 2268 0034                  		movea.l	$34(a0),a1
000187B6 1011                       		move.b	(a1),d0
000187B8 B010                       		cmp.b	(a0),d0
000187BA 6600                       		bne.s	Obj77_FaceDel
000187BC 7000                       		moveq	#0,d0
000187BE 1029 0025                  		move.b	$25(a1),d0
000187C2 7201                       		moveq	#1,d1
000187C4 4A28 003D                  		tst.b	$3D(a0)
000187C8 6700                       		beq.s	loc_1818C
000187CA 720A                       		moveq	#$A,d1
000187CC 6000                       		bra.s	loc_181A0
000187CE                            ; ===========================================================================
000187CE                            
000187CE                            loc_1818C:
000187CE 4A29 0020                  		tst.b	$20(a1)
000187D2 6600                       		bne.s	loc_18196
000187D4 7205                       		moveq	#5,d1
000187D6 6000                       		bra.s	loc_181A0
000187D8                            ; ===========================================================================
000187D8                            
000187D8                            loc_18196:
000187D8 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
000187DE 6500                       		bcs.s	loc_181A0
000187E0 7204                       		moveq	#4,d1
000187E2                            
000187E2                            loc_181A0:
000187E2 1141 001C                  		move.b	d1,$1C(a0)
000187E6 0C00 000E                  		cmpi.b	#$E,d0
000187EA 6600                       		bne.s	loc_181B6
000187EC 117C 0006 001C             		move.b	#6,$1C(a0)
000187F2 4A28 0001                  		tst.b	1(a0)
000187F6 6A00                       		bpl.s	Obj77_FaceDel
000187F8                            
000187F8                            loc_181B6:
000187F8 6000                       		bra.s	Obj77_Display
000187FA                            ; ===========================================================================
000187FA                            
000187FA                            Obj77_FaceDel:
000187FA 4EF9 0000 DBE4             		jmp	DeleteObject
00018800                            ; ===========================================================================
00018800                            
00018800                            Obj77_FlameMain:			; XREF: Obj77_Index
00018800 117C 0007 001C             		move.b	#7,$1C(a0)
00018806 2268 0034                  		movea.l	$34(a0),a1
0001880A 1011                       		move.b	(a1),d0
0001880C B010                       		cmp.b	(a0),d0
0001880E 6600                       		bne.s	Obj77_FlameDel
00018810 0C29 000E 0025             		cmpi.b	#$E,$25(a1)
00018816 6600                       		bne.s	loc_181F0
00018818 117C 000B 001C             		move.b	#$B,$1C(a0)
0001881E 4A28 0001                  		tst.b	1(a0)
00018822 6A00                       		bpl.s	Obj77_FlameDel
00018824 6000                       		bra.s	loc_181F0
00018826                            ; ===========================================================================
00018826 4A69 0010                  		tst.w	$10(a1)
0001882A 6700                       		beq.s	loc_181F0
0001882C 117C 0008 001C             		move.b	#8,$1C(a0)
00018832                            
00018832                            loc_181F0:
00018832 6000                       		bra.s	Obj77_Display
00018834                            ; ===========================================================================
00018834                            
00018834                            Obj77_FlameDel:				; XREF: Obj77_FlameMain
00018834 4EF9 0000 DBE4             		jmp	DeleteObject
0001883A                            ; ===========================================================================
0001883A                            
0001883A                            Obj77_Display:
0001883A 43F9 0001 8300             		lea	(Ani_Eggman).l,a1
00018840 4EB9 0000 AC42             		jsr	AnimateSprite
00018846 2268 0034                  		movea.l	$34(a0),a1
0001884A 3169 0008 0008             		move.w	8(a1),8(a0)
00018850 3169 000C 000C             		move.w	$C(a1),$C(a0)
00018856 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001885C 7003                       		moveq	#3,d0
0001885E C028 0022                  		and.b	$22(a0),d0
00018862 0228 00FC 0001             		andi.b	#-4,1(a0)
00018868 8128 0001                  		or.b	d0,1(a0)
0001886C 4EF9 0000 DBA8             		jmp	DisplaySprite
00018872                            ; ===========================================================================
00018872                            ; ---------------------------------------------------------------------------
00018872                            ; Object 73 - Eggman (MZ)
00018872                            ; ---------------------------------------------------------------------------
00018872                            
00018872                            Obj73:					; XREF: Obj_Index
00018872 7000                       		moveq	#0,d0
00018874 1028 0024                  		move.b	$24(a0),d0
00018878 323B 0000                  		move.w	Obj73_Index(pc,d0.w),d1
0001887C 4EFB 1000                  		jmp	Obj73_Index(pc,d1.w)
00018880                            ; ===========================================================================
00018880 0000                       Obj73_Index:	dc.w Obj73_Main-Obj73_Index
00018882 0000                       		dc.w Obj73_ShipMain-Obj73_Index
00018884 0000                       		dc.w Obj73_FaceMain-Obj73_Index
00018886 0000                       		dc.w Obj73_FlameMain-Obj73_Index
00018888 0000                       		dc.w Obj73_TubeMain-Obj73_Index
0001888A                            
0001888A 0200 04                    Obj73_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
0001888D 0401 04                    		dc.b 4,	1, 4
00018890 0607 04                    		dc.b 6,	7, 4
00018893 0800 03                    		dc.b 8,	0, 3
00018896                            ; ===========================================================================
00018896                            
00018896                            Obj73_Main:				; XREF: Obj73_Index
00018896 3168 0008 0030             		move.w	8(a0),$30(a0)
0001889C 3168 000C 0038             		move.w	$C(a0),$38(a0)
000188A2 117C 000F 0020             		move.b	#$F,$20(a0)
000188A8 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
000188AE 45FA FFDA                  		lea	Obj73_ObjData(pc),a2
000188B2 2248                       		movea.l	a0,a1
000188B4 7203                       		moveq	#3,d1
000188B6 6000                       		bra.s	Obj73_LoadBoss
000188B8                            ; ===========================================================================
000188B8                            
000188B8                            Obj73_Loop:
000188B8 4EB9 0000 E044             		jsr	SingleObjLoad2
000188BE 6600                       		bne.s	Obj73_ShipMain
000188C0 12BC 0073                  		move.b	#$73,0(a1)
000188C4 3368 0008 0008             		move.w	8(a0),8(a1)
000188CA 3368 000C 000C             		move.w	$C(a0),$C(a1)
000188D0                            
000188D0                            Obj73_LoadBoss:				; XREF: Obj73_Main
000188D0 08A8 0000 0022             		bclr	#0,$22(a0)
000188D6 4229 0025                  		clr.b	$25(a1)
000188DA 135A 0024                  		move.b	(a2)+,$24(a1)
000188DE 135A 001C                  		move.b	(a2)+,$1C(a1)
000188E2 135A 0018                  		move.b	(a2)+,$18(a1)
000188E6 237C 0001 8350 0004        		move.l	#Map_Eggman,4(a1)
000188EE 337C 0400 0002             		move.w	#$400,2(a1)
000188F4 137C 0004 0001             		move.b	#4,1(a1)
000188FA 137C 0020 0019             		move.b	#$20,$19(a1)
00018900 2348 0034                  		move.l	a0,$34(a1)
00018904 51C9 FFB2                  		dbf	d1,Obj73_Loop	; repeat sequence 3 more times
00018908                            
00018908                            Obj73_ShipMain:
00018908 7000                       		moveq	#0,d0
0001890A 1028 0025                  		move.b	$25(a0),d0
0001890E 323B 0000                  		move.w	Obj73_ShipIndex(pc,d0.w),d1
00018912 4EBB 1000                  		jsr	Obj73_ShipIndex(pc,d1.w)
00018916 43F9 0001 8300             		lea	(Ani_Eggman).l,a1
0001891C 4EB9 0000 AC42             		jsr	AnimateSprite
00018922 7003                       		moveq	#3,d0
00018924 C028 0022                  		and.b	$22(a0),d0
00018928 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001892E 8128 0001                  		or.b	d0,1(a0)
00018932 4EF9 0000 DBA8             		jmp	DisplaySprite
00018938                            ; ===========================================================================
00018938 0000                       Obj73_ShipIndex:dc.w loc_18302-Obj73_ShipIndex
0001893A 0000                       		dc.w loc_183AA-Obj73_ShipIndex
0001893C 0000                       		dc.w loc_184F6-Obj73_ShipIndex
0001893E 0000                       		dc.w loc_1852C-Obj73_ShipIndex
00018940 0000                       		dc.w loc_18582-Obj73_ShipIndex
00018942                            ; ===========================================================================
00018942                            
00018942                            loc_18302:				; XREF: Obj73_ShipIndex
00018942 1028 003F                  		move.b	$3F(a0),d0
00018946 5428 003F                  		addq.b	#2,$3F(a0)
0001894A 4EB9 0000 2C22             		jsr	(CalcSine).l
00018950 E440                       		asr.w	#2,d0
00018952 3140 0012                  		move.w	d0,$12(a0)
00018956 317C FF00 0010             		move.w	#-$100,$10(a0)
0001895C 6100 F592                  		bsr.w	BossMove
00018960 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
00018966 6600                       		bne.s	loc_18334
00018968 5428 0025                  		addq.b	#2,$25(a0)
0001896C 4228 0028                  		clr.b	$28(a0)
00018970 42A8 0010                  		clr.l	$10(a0)
00018974                            
00018974                            loc_18334:
00018974 4EB9 0000 2BFC             		jsr	(RandomNumber).l
0001897A 1140 0034                  		move.b	d0,$34(a0)
0001897E                            
0001897E                            loc_1833E:
0001897E 3168 0038 000C             		move.w	$38(a0),$C(a0)
00018984 3168 0030 0008             		move.w	$30(a0),8(a0)
0001898A 0C28 0004 0025             		cmpi.b	#4,$25(a0)
00018990 6400                       		bcc.s	locret_18390
00018992 4A28 0022                  		tst.b	$22(a0)
00018996 6B00                       		bmi.s	loc_18392
00018998 4A28 0020                  		tst.b	$20(a0)
0001899C 6600                       		bne.s	locret_18390
0001899E 4A28 003E                  		tst.b	$3E(a0)
000189A2 6600                       		bne.s	loc_18374
000189A4 117C 0028 003E             		move.b	#$28,$3E(a0)
000189AA 303C 00AC                  		move.w	#$AC,d0
000189AE 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play boss damage sound
000189B4                            
000189B4                            loc_18374:
000189B4 43F8 FB22                  		lea	($FFFFFB22).w,a1
000189B8 7000                       		moveq	#0,d0
000189BA 4A51                       		tst.w	(a1)
000189BC 6600                       		bne.s	loc_18382
000189BE 303C 0EEE                  		move.w	#$EEE,d0
000189C2                            
000189C2                            loc_18382:
000189C2 3280                       		move.w	d0,(a1)
000189C4 5328 003E                  		subq.b	#1,$3E(a0)
000189C8 6600                       		bne.s	locret_18390
000189CA 117C 000F 0020             		move.b	#$F,$20(a0)
000189D0                            
000189D0                            locret_18390:
000189D0 4E75                       		rts	
000189D2                            ; ===========================================================================
000189D2                            
000189D2                            loc_18392:				; XREF: loc_1833E
000189D2 7064                       		moveq	#100,d0
000189D4 6100 0000                  		bsr.w	AddPoints
000189D8 117C 0004 0025             		move.b	#4,$25(a0)
000189DE 317C 00B4 003C             		move.w	#$B4,$3C(a0)
000189E4 4268 0010                  		clr.w	$10(a0)
000189E8 4E75                       		rts	
000189EA                            ; ===========================================================================
000189EA                            
000189EA                            loc_183AA:				; XREF: Obj73_ShipIndex
000189EA 7000                       		moveq	#0,d0
000189EC 1028 0028                  		move.b	$28(a0),d0
000189F0 303B 0000                  		move.w	off_183C2(pc,d0.w),d0
000189F4 4EBB 0000                  		jsr	off_183C2(pc,d0.w)
000189F8 0228 0006 0028             		andi.b	#6,$28(a0)
000189FE 6000 FF7E                  		bra.w	loc_1833E
00018A02                            ; ===========================================================================
00018A02 0000                       off_183C2:	dc.w loc_183CA-off_183C2
00018A04 0000                       		dc.w Obj73_MakeLava2-off_183C2
00018A06 0000                       		dc.w loc_183CA-off_183C2
00018A08 0000                       		dc.w Obj73_MakeLava2-off_183C2
00018A0A                            ; ===========================================================================
00018A0A                            
00018A0A                            loc_183CA:				; XREF: off_183C2
00018A0A 4A68 0010                  		tst.w	$10(a0)
00018A0E 6600                       		bne.s	loc_183FE
00018A10 7040                       		moveq	#$40,d0
00018A12 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
00018A18 6700                       		beq.s	loc_183E6
00018A1A 6500                       		bcs.s	loc_183DE
00018A1C 4440                       		neg.w	d0
00018A1E                            
00018A1E                            loc_183DE:
00018A1E 3140 0012                  		move.w	d0,$12(a0)
00018A22 6000 F4CC                  		bra.w	BossMove
00018A26                            ; ===========================================================================
00018A26                            
00018A26                            loc_183E6:
00018A26 317C 0200 0010             		move.w	#$200,$10(a0)
00018A2C 317C 0100 0012             		move.w	#$100,$12(a0)
00018A32 0828 0000 0022             		btst	#0,$22(a0)
00018A38 6600                       		bne.s	loc_183FE
00018A3A 4468 0010                  		neg.w	$10(a0)
00018A3E                            
00018A3E                            loc_183FE:
00018A3E 0C28 0018 003E             		cmpi.b	#$18,$3E(a0)
00018A44 6400                       		bcc.s	Obj73_MakeLava
00018A46 6100 F4A8                  		bsr.w	BossMove
00018A4A 5968 0012                  		subq.w	#4,$12(a0)
00018A4E                            
00018A4E                            Obj73_MakeLava:
00018A4E 5328 0034                  		subq.b	#1,$34(a0)
00018A52 6400                       		bcc.s	loc_1845C
00018A54 4EB9 0000 E02E             		jsr	SingleObjLoad
00018A5A 6600                       		bne.s	loc_1844A
00018A5C 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
00018A60 337C 02E8 000C             		move.w	#$2E8,$C(a1)	; set Y	position
00018A66 4EB9 0000 2BFC             		jsr	(RandomNumber).l
00018A6C 0280 0000 FFFF             		andi.l	#$FFFF,d0
00018A72 80FC 0050                  		divu.w	#$50,d0
00018A76 4840                       		swap	d0
00018A78 0640 1878                  		addi.w	#$1878,d0
00018A7C 3340 0008                  		move.w	d0,8(a1)
00018A80 EE09                       		lsr.b	#7,d1
00018A82 337C 00FF 0028             		move.w	#$FF,$28(a1)
00018A88                            
00018A88                            loc_1844A:
00018A88 4EB9 0000 2BFC             		jsr	(RandomNumber).l
00018A8E 0200 001F                  		andi.b	#$1F,d0
00018A92 0600 0040                  		addi.b	#$40,d0
00018A96 1140 0034                  		move.b	d0,$34(a0)
00018A9A                            
00018A9A                            loc_1845C:
00018A9A 0828 0000 0022             		btst	#0,$22(a0)
00018AA0 6700                       		beq.s	loc_18474
00018AA2 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
00018AA8 6D00                       		blt.s	locret_1849C
00018AAA 317C 1910 0030             		move.w	#$1910,$30(a0)
00018AB0 6000                       		bra.s	loc_18482
00018AB2                            ; ===========================================================================
00018AB2                            
00018AB2                            loc_18474:
00018AB2 0C68 1830 0030             		cmpi.w	#$1830,$30(a0)
00018AB8 6E00                       		bgt.s	locret_1849C
00018ABA 317C 1830 0030             		move.w	#$1830,$30(a0)
00018AC0                            
00018AC0                            loc_18482:
00018AC0 4268 0010                  		clr.w	$10(a0)
00018AC4 317C FE80 0012             		move.w	#-$180,$12(a0)
00018ACA 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
00018AD0 6400                       		bcc.s	loc_18498
00018AD2 4468 0012                  		neg.w	$12(a0)
00018AD6                            
00018AD6                            loc_18498:
00018AD6 5428 0028                  		addq.b	#2,$28(a0)
00018ADA                            
00018ADA                            locret_1849C:
00018ADA 4E75                       		rts	
00018ADC                            ; ===========================================================================
00018ADC                            
00018ADC                            Obj73_MakeLava2:			; XREF: off_183C2
00018ADC 6100 F412                  		bsr.w	BossMove
00018AE0 3028 0038                  		move.w	$38(a0),d0
00018AE4 0440 022C                  		subi.w	#$22C,d0
00018AE8 6E00                       		bgt.s	locret_184F4
00018AEA 303C 022C                  		move.w	#$22C,d0
00018AEE 4A68 0012                  		tst.w	$12(a0)
00018AF2 6700                       		beq.s	loc_184EA
00018AF4 4268 0012                  		clr.w	$12(a0)
00018AF8 317C 0050 003C             		move.w	#$50,$3C(a0)
00018AFE 0868 0000 0022             		bchg	#0,$22(a0)
00018B04 4EB9 0000 E02E             		jsr	SingleObjLoad
00018B0A 6600                       		bne.s	loc_184EA
00018B0C 3368 0030 0008             		move.w	$30(a0),8(a1)
00018B12 3368 0038 000C             		move.w	$38(a0),$C(a1)
00018B18 0669 0018 000C             		addi.w	#$18,$C(a1)
00018B1E 12BC 0074                  		move.b	#$74,(a1)	; load lava ball object
00018B22 137C 0001 0028             		move.b	#1,$28(a1)
00018B28                            
00018B28                            loc_184EA:
00018B28 5368 003C                  		subq.w	#1,$3C(a0)
00018B2C 6600                       		bne.s	locret_184F4
00018B2E 5428 0028                  		addq.b	#2,$28(a0)
00018B32                            
00018B32                            locret_184F4:
00018B32 4E75                       		rts	
00018B34                            ; ===========================================================================
00018B34                            
00018B34                            loc_184F6:				; XREF: Obj73_ShipIndex
00018B34 5368 003C                  		subq.w	#1,$3C(a0)
00018B38 6B00                       		bmi.s	loc_18500
00018B3A 6000 F372                  		bra.w	BossDefeated
00018B3E                            ; ===========================================================================
00018B3E                            
00018B3E                            loc_18500:
00018B3E 08E8 0000 0022             		bset	#0,$22(a0)
00018B44 08A8 0007 0022             		bclr	#7,$22(a0)
00018B4A 4268 0010                  		clr.w	$10(a0)
00018B4E 5428 0025                  		addq.b	#2,$25(a0)
00018B52 317C FFDA 003C             		move.w	#-$26,$3C(a0)
00018B58 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00018B5C 6600                       		bne.s	locret_1852A
00018B5E 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00018B64 4268 0012                  		clr.w	$12(a0)
00018B68                            
00018B68                            locret_1852A:
00018B68 4E75                       		rts	
00018B6A                            ; ===========================================================================
00018B6A                            
00018B6A                            loc_1852C:				; XREF: Obj73_ShipIndex
00018B6A 5268 003C                  		addq.w	#1,$3C(a0)
00018B6E 6700                       		beq.s	loc_18544
00018B70 6A00                       		bpl.s	loc_1854E
00018B72 0C68 0270 0038             		cmpi.w	#$270,$38(a0)
00018B78 6400                       		bcc.s	loc_18544
00018B7A 0668 0018 0012             		addi.w	#$18,$12(a0)
00018B80 6000                       		bra.s	loc_1857A
00018B82                            ; ===========================================================================
00018B82                            
00018B82                            loc_18544:
00018B82 4268 0012                  		clr.w	$12(a0)
00018B86 4268 003C                  		clr.w	$3C(a0)
00018B8A 6000                       		bra.s	loc_1857A
00018B8C                            ; ===========================================================================
00018B8C                            
00018B8C                            loc_1854E:
00018B8C 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00018B92 6500                       		bcs.s	loc_18566
00018B94 6700                       		beq.s	loc_1856C
00018B96 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00018B9C 6500                       		bcs.s	loc_1857A
00018B9E 5428 0025                  		addq.b	#2,$25(a0)
00018BA2 6000                       		bra.s	loc_1857A
00018BA4                            ; ===========================================================================
00018BA4                            
00018BA4                            loc_18566:
00018BA4 5168 0012                  		subq.w	#8,$12(a0)
00018BA8 6000                       		bra.s	loc_1857A
00018BAA                            ; ===========================================================================
00018BAA                            
00018BAA                            loc_1856C:
00018BAA 4268 0012                  		clr.w	$12(a0)
00018BAE 303C 0083                  		move.w	#$83,d0
00018BB2 4EB9 0000 15B6             		jsr	(PlaySound).l	; play MZ music
00018BB8                            
00018BB8                            loc_1857A:
00018BB8 6100 F336                  		bsr.w	BossMove
00018BBC 6000 FDC0                  		bra.w	loc_1833E
00018BC0                            ; ===========================================================================
00018BC0                            
00018BC0                            loc_18582:				; XREF: Obj73_ShipIndex
00018BC0 317C 0500 0010             		move.w	#$500,$10(a0)
00018BC6 317C FFC0 0012             		move.w	#-$40,$12(a0)
00018BCC 0C78 1960 F72A             		cmpi.w	#$1960,($FFFFF72A).w
00018BD2 6400                       		bcc.s	loc_1859C
00018BD4 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00018BD8 6000                       		bra.s	loc_185A2
00018BDA                            ; ===========================================================================
00018BDA                            
00018BDA                            loc_1859C:
00018BDA 4A28 0001                  		tst.b	1(a0)
00018BDE 6A00                       		bpl.s	Obj73_ShipDel
00018BE0                            
00018BE0                            loc_185A2:
00018BE0 6100 F30E                  		bsr.w	BossMove
00018BE4 6000 FD98                  		bra.w	loc_1833E
00018BE8                            ; ===========================================================================
00018BE8                            
00018BE8                            Obj73_ShipDel:
00018BE8 4EF9 0000 DBE4             		jmp	DeleteObject
00018BEE                            ; ===========================================================================
00018BEE                            
00018BEE                            Obj73_FaceMain:				; XREF: Obj73_Index
00018BEE 7000                       		moveq	#0,d0
00018BF0 7201                       		moveq	#1,d1
00018BF2 2268 0034                  		movea.l	$34(a0),a1
00018BF6 1029 0025                  		move.b	$25(a1),d0
00018BFA 5540                       		subq.w	#2,d0
00018BFC 6600                       		bne.s	loc_185D2
00018BFE 0829 0001 0028             		btst	#1,$28(a1)
00018C04 6700                       		beq.s	loc_185DA
00018C06 4A69 0012                  		tst.w	$12(a1)
00018C0A 6600                       		bne.s	loc_185DA
00018C0C 7204                       		moveq	#4,d1
00018C0E 6000                       		bra.s	loc_185EE
00018C10                            ; ===========================================================================
00018C10                            
00018C10                            loc_185D2:
00018C10 5500                       		subq.b	#2,d0
00018C12 6B00                       		bmi.s	loc_185DA
00018C14 720A                       		moveq	#$A,d1
00018C16 6000                       		bra.s	loc_185EE
00018C18                            ; ===========================================================================
00018C18                            
00018C18                            loc_185DA:
00018C18 4A29 0020                  		tst.b	$20(a1)
00018C1C 6600                       		bne.s	loc_185E4
00018C1E 7205                       		moveq	#5,d1
00018C20 6000                       		bra.s	loc_185EE
00018C22                            ; ===========================================================================
00018C22                            
00018C22                            loc_185E4:
00018C22 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00018C28 6500                       		bcs.s	loc_185EE
00018C2A 7204                       		moveq	#4,d1
00018C2C                            
00018C2C                            loc_185EE:
00018C2C 1141 001C                  		move.b	d1,$1C(a0)
00018C30 5900                       		subq.b	#4,d0
00018C32 6600                       		bne.s	loc_18602
00018C34 117C 0006 001C             		move.b	#6,$1C(a0)
00018C3A 4A28 0001                  		tst.b	1(a0)
00018C3E 6A00                       		bpl.s	Obj73_FaceDel
00018C40                            
00018C40                            loc_18602:
00018C40 6000                       		bra.s	Obj73_Display
00018C42                            ; ===========================================================================
00018C42                            
00018C42                            Obj73_FaceDel:
00018C42 4EF9 0000 DBE4             		jmp	DeleteObject
00018C48                            ; ===========================================================================
00018C48                            
00018C48                            Obj73_FlameMain:			; XREF: Obj73_Index
00018C48 117C 0007 001C             		move.b	#7,$1C(a0)
00018C4E 2268 0034                  		movea.l	$34(a0),a1
00018C52 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00018C58 6D00                       		blt.s	loc_1862A
00018C5A 117C 000B 001C             		move.b	#$B,$1C(a0)
00018C60 4A28 0001                  		tst.b	1(a0)
00018C64 6A00                       		bpl.s	Obj73_FlameDel
00018C66 6000                       		bra.s	loc_18636
00018C68                            ; ===========================================================================
00018C68                            
00018C68                            loc_1862A:
00018C68 4A69 0010                  		tst.w	$10(a1)
00018C6C 6700                       		beq.s	loc_18636
00018C6E 117C 0008 001C             		move.b	#8,$1C(a0)
00018C74                            
00018C74                            loc_18636:
00018C74 6000                       		bra.s	Obj73_Display
00018C76                            ; ===========================================================================
00018C76                            
00018C76                            Obj73_FlameDel:				; XREF: Obj73_FlameMain
00018C76 4EF9 0000 DBE4             		jmp	DeleteObject
00018C7C                            ; ===========================================================================
00018C7C                            
00018C7C                            Obj73_Display:
00018C7C 43F9 0001 8300             		lea	(Ani_Eggman).l,a1
00018C82 4EB9 0000 AC42             		jsr	AnimateSprite
00018C88                            
00018C88                            loc_1864A:
00018C88 2268 0034                  		movea.l	$34(a0),a1
00018C8C 3169 0008 0008             		move.w	8(a1),8(a0)
00018C92 3169 000C 000C             		move.w	$C(a1),$C(a0)
00018C98 1169 0022 0022             		move.b	$22(a1),$22(a0)
00018C9E 7003                       		moveq	#3,d0
00018CA0 C028 0022                  		and.b	$22(a0),d0
00018CA4 0228 00FC 0001             		andi.b	#-4,1(a0)
00018CAA 8128 0001                  		or.b	d0,1(a0)
00018CAE 4EF9 0000 DBA8             		jmp	DisplaySprite
00018CB4                            ; ===========================================================================
00018CB4                            
00018CB4                            Obj73_TubeMain:				; XREF: Obj73_Index
00018CB4 2268 0034                  		movea.l	$34(a0),a1
00018CB8 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00018CBE 6600                       		bne.s	loc_18688
00018CC0 4A28 0001                  		tst.b	1(a0)
00018CC4 6A00                       		bpl.s	Obj73_TubeDel
00018CC6                            
00018CC6                            loc_18688:
00018CC6 217C 0001 8418 0004        		move.l	#Map_BossItems,4(a0)
00018CCE 317C 246C 0002             		move.w	#$246C,2(a0)
00018CD4 117C 0004 001A             		move.b	#4,$1A(a0)
00018CDA 60AC                       		bra.s	loc_1864A
00018CDC                            ; ===========================================================================
00018CDC                            
00018CDC                            Obj73_TubeDel:
00018CDC 4EF9 0000 DBE4             		jmp	DeleteObject
00018CE2                            ; ===========================================================================
00018CE2                            ; ---------------------------------------------------------------------------
00018CE2                            ; Object 74 - lava that	Eggman drops (MZ)
00018CE2                            ; ---------------------------------------------------------------------------
00018CE2                            
00018CE2                            Obj74:					; XREF: Obj_Index
00018CE2 7000                       		moveq	#0,d0
00018CE4 1028 0024                  		move.b	$24(a0),d0
00018CE8 303B 0000                  		move.w	Obj74_Index(pc,d0.w),d0
00018CEC 4EBB 0000                  		jsr	Obj74_Index(pc,d0.w)
00018CF0 4EF9 0000 DBA8             		jmp	DisplaySprite
00018CF6                            ; ===========================================================================
00018CF6 0000                       Obj74_Index:	dc.w Obj74_Main-Obj74_Index
00018CF8 0000                       		dc.w Obj74_Action-Obj74_Index
00018CFA 0000                       		dc.w loc_18886-Obj74_Index
00018CFC 0000                       		dc.w Obj74_Delete3-Obj74_Index
00018CFE                            ; ===========================================================================
00018CFE                            
00018CFE                            Obj74_Main:				; XREF: Obj74_Index
00018CFE 117C 0008 0016             		move.b	#8,$16(a0)
00018D04 117C 0008 0017             		move.b	#8,$17(a0)
00018D0A 217C 0000 B86C 0004        		move.l	#Map_obj14,4(a0)
00018D12 317C 0345 0002             		move.w	#$345,2(a0)
00018D18 117C 0004 0001             		move.b	#4,1(a0)
00018D1E 117C 0005 0018             		move.b	#5,$18(a0)
00018D24 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018D2A 117C 0008 0019             		move.b	#8,$19(a0)
00018D30 5428 0024                  		addq.b	#2,$24(a0)
00018D34 4A28 0028                  		tst.b	$28(a0)
00018D38 6600                       		bne.s	loc_1870A
00018D3A 117C 008B 0020             		move.b	#$8B,$20(a0)
00018D40 5428 0024                  		addq.b	#2,$24(a0)
00018D44 6000 0000                  		bra.w	loc_18886
00018D48                            ; ===========================================================================
00018D48                            
00018D48                            loc_1870A:
00018D48 117C 001E 0029             		move.b	#$1E,$29(a0)
00018D4E 303C 00AE                  		move.w	#$AE,d0
00018D52 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play lava sound
00018D58                            
00018D58                            Obj74_Action:				; XREF: Obj74_Index
00018D58 7000                       		moveq	#0,d0
00018D5A 1028 0025                  		move.b	$25(a0),d0
00018D5E 303B 0000                  		move.w	Obj74_Index2(pc,d0.w),d0
00018D62 4EBB 0000                  		jsr	Obj74_Index2(pc,d0.w)
00018D66 4EB9 0000 DB82             		jsr	SpeedToPos
00018D6C 43F9 0000 EA62             		lea	(Ani_obj14).l,a1
00018D72 4EB9 0000 AC42             		jsr	AnimateSprite
00018D78 0C68 02E8 000C             		cmpi.w	#$2E8,$C(a0)
00018D7E 6200                       		bhi.s	Obj74_Delete
00018D80 4E75                       		rts	
00018D82                            ; ===========================================================================
00018D82                            
00018D82                            Obj74_Delete:
00018D82 4EF9 0000 DBE4             		jmp	DeleteObject
00018D88                            ; ===========================================================================
00018D88 0000                       Obj74_Index2:	dc.w Obj74_Drop-Obj74_Index2
00018D8A 0000                       		dc.w Obj74_MakeFlame-Obj74_Index2
00018D8C 0000                       		dc.w Obj74_Duplicate-Obj74_Index2
00018D8E 0000                       		dc.w Obj74_FallEdge-Obj74_Index2
00018D90                            ; ===========================================================================
00018D90                            
00018D90                            Obj74_Drop:				; XREF: Obj74_Index2
00018D90 08E8 0001 0022             		bset	#1,$22(a0)
00018D96 5328 0029                  		subq.b	#1,$29(a0)
00018D9A 6A00                       		bpl.s	locret_18780
00018D9C 117C 008B 0020             		move.b	#$8B,$20(a0)
00018DA2 4228 0028                  		clr.b	$28(a0)
00018DA6 0668 0018 0012             		addi.w	#$18,$12(a0)
00018DAC 08A8 0001 0022             		bclr	#1,$22(a0)
00018DB2 6100 C698                  		bsr.w	ObjHitFloor
00018DB6 4A41                       		tst.w	d1
00018DB8 6A00                       		bpl.s	locret_18780
00018DBA 5428 0025                  		addq.b	#2,$25(a0)
00018DBE                            
00018DBE                            locret_18780:
00018DBE 4E75                       		rts	
00018DC0                            ; ===========================================================================
00018DC0                            
00018DC0                            Obj74_MakeFlame:			; XREF: Obj74_Index2
00018DC0 5568 000C                  		subq.w	#2,$C(a0)
00018DC4 08E8 0007 0002             		bset	#7,2(a0)
00018DCA 317C 00A0 0010             		move.w	#$A0,$10(a0)
00018DD0 4268 0012                  		clr.w	$12(a0)
00018DD4 3168 0008 0030             		move.w	8(a0),$30(a0)
00018DDA 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018DE0 117C 0003 0029             		move.b	#3,$29(a0)
00018DE6 4EB9 0000 E044             		jsr	SingleObjLoad2
00018DEC 6600                       		bne.s	loc_187CA
00018DEE 47D1                       		lea	(a1),a3
00018DF0 45D0                       		lea	(a0),a2
00018DF2 7003                       		moveq	#3,d0
00018DF4                            
00018DF4                            Obj74_Loop:
00018DF4 26DA                       		move.l	(a2)+,(a3)+
00018DF6 26DA                       		move.l	(a2)+,(a3)+
00018DF8 26DA                       		move.l	(a2)+,(a3)+
00018DFA 26DA                       		move.l	(a2)+,(a3)+
00018DFC 51C8 FFF6                  		dbf	d0,Obj74_Loop
00018E00                            
00018E00 4469 0010                  		neg.w	$10(a1)
00018E04 5429 0025                  		addq.b	#2,$25(a1)
00018E08                            
00018E08                            loc_187CA:
00018E08 5428 0025                  		addq.b	#2,$25(a0)
00018E0C 4E75                       		rts	
00018E0E                            
00018E0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018E0E                            
00018E0E                            
00018E0E                            Obj74_Duplicate2:			; XREF: Obj74_Duplicate
00018E0E 4EB9 0000 E044             		jsr	SingleObjLoad2
00018E14 6600                       		bne.s	locret_187EE
00018E16 3368 0008 0008             		move.w	8(a0),8(a1)
00018E1C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018E22 12BC 0074                  		move.b	#$74,(a1)
00018E26 337C 0067 0028             		move.w	#$67,$28(a1)
00018E2C                            
00018E2C                            locret_187EE:
00018E2C 4E75                       		rts	
00018E2E                            ; End of function Obj74_Duplicate2
00018E2E                            
00018E2E                            ; ===========================================================================
00018E2E                            
00018E2E                            Obj74_Duplicate:			; XREF: Obj74_Index2
00018E2E 6100 C61C                  		bsr.w	ObjHitFloor
00018E32 4A41                       		tst.w	d1
00018E34 6A00                       		bpl.s	loc_18826
00018E36 3028 0008                  		move.w	8(a0),d0
00018E3A 0C40 1940                  		cmpi.w	#$1940,d0
00018E3E 6E00                       		bgt.s	loc_1882C
00018E40 3228 0030                  		move.w	$30(a0),d1
00018E44 B240                       		cmp.w	d0,d1
00018E46 6700                       		beq.s	loc_1881E
00018E48 0240 0010                  		andi.w	#$10,d0
00018E4C 0241 0010                  		andi.w	#$10,d1
00018E50 B240                       		cmp.w	d0,d1
00018E52 6700                       		beq.s	loc_1881E
00018E54 61B8                       		bsr.s	Obj74_Duplicate2
00018E56 3168 0008 0032             		move.w	8(a0),$32(a0)
00018E5C                            
00018E5C                            loc_1881E:
00018E5C 3168 0008 0030             		move.w	8(a0),$30(a0)
00018E62 4E75                       		rts	
00018E64                            ; ===========================================================================
00018E64                            
00018E64                            loc_18826:
00018E64 5428 0025                  		addq.b	#2,$25(a0)
00018E68 4E75                       		rts	
00018E6A                            ; ===========================================================================
00018E6A                            
00018E6A                            loc_1882C:
00018E6A 5428 0024                  		addq.b	#2,$24(a0)
00018E6E 4E75                       		rts	
00018E70                            ; ===========================================================================
00018E70                            
00018E70                            Obj74_FallEdge:				; XREF: Obj74_Index2
00018E70 08A8 0001 0022             		bclr	#1,$22(a0)
00018E76 0668 0024 0012             		addi.w	#$24,$12(a0)	; make flame fall
00018E7C 3028 0008                  		move.w	8(a0),d0
00018E80 9068 0032                  		sub.w	$32(a0),d0
00018E84 6A00                       		bpl.s	loc_1884A
00018E86 4440                       		neg.w	d0
00018E88                            
00018E88                            loc_1884A:
00018E88 0C40 0012                  		cmpi.w	#$12,d0
00018E8C 6600                       		bne.s	loc_18856
00018E8E 08A8 0007 0002             		bclr	#7,2(a0)
00018E94                            
00018E94                            loc_18856:
00018E94 6100 C5B6                  		bsr.w	ObjHitFloor
00018E98 4A41                       		tst.w	d1
00018E9A 6A00                       		bpl.s	locret_1887E
00018E9C 5328 0029                  		subq.b	#1,$29(a0)
00018EA0 6700                       		beq.s	Obj74_Delete2
00018EA2 4268 0012                  		clr.w	$12(a0)
00018EA6 3168 0032 0008             		move.w	$32(a0),8(a0)
00018EAC 3168 0038 000C             		move.w	$38(a0),$C(a0)
00018EB2 08E8 0007 0002             		bset	#7,2(a0)
00018EB8 5528 0025                  		subq.b	#2,$25(a0)
00018EBC                            
00018EBC                            locret_1887E:
00018EBC 4E75                       		rts	
00018EBE                            ; ===========================================================================
00018EBE                            
00018EBE                            Obj74_Delete2:
00018EBE 4EF9 0000 DBE4             		jmp	DeleteObject
00018EC4                            ; ===========================================================================
00018EC4                            
00018EC4                            loc_18886:				; XREF: Obj74_Index
00018EC4 08E8 0007 0002             		bset	#7,2(a0)
00018ECA 5328 0029                  		subq.b	#1,$29(a0)
00018ECE 6600                       		bne.s	Obj74_Animate
00018ED0 117C 0001 001C             		move.b	#1,$1C(a0)
00018ED6 5968 000C                  		subq.w	#4,$C(a0)
00018EDA 4228 0020                  		clr.b	$20(a0)
00018EDE                            
00018EDE                            Obj74_Animate:
00018EDE 43F9 0000 EA62             		lea	(Ani_obj14).l,a1
00018EE4 4EF9 0000 AC42             		jmp	AnimateSprite
00018EEA                            ; ===========================================================================
00018EEA                            
00018EEA                            Obj74_Delete3:				; XREF: Obj74_Index
00018EEA 4EF9 0000 DBE4             		jmp	DeleteObject
00018EF0                            ; ===========================================================================
00018EF0                            
00018EF0                            Obj7A_Delete:
00018EF0 4EF9 0000 DBE4             		jmp	DeleteObject
00018EF6                            ; ===========================================================================
00018EF6                            ; ---------------------------------------------------------------------------
00018EF6                            ; Object 7A - Eggman (SLZ)
00018EF6                            ; ---------------------------------------------------------------------------
00018EF6                            
00018EF6                            Obj7A:					; XREF: Obj_Index
00018EF6 7000                       		moveq	#0,d0
00018EF8 1028 0024                  		move.b	$24(a0),d0
00018EFC 323B 0000                  		move.w	Obj7A_Index(pc,d0.w),d1
00018F00 4EFB 1000                  		jmp	Obj7A_Index(pc,d1.w)
00018F04                            ; ===========================================================================
00018F04 0000                       Obj7A_Index:	dc.w Obj7A_Main-Obj7A_Index
00018F06 0000                       		dc.w Obj7A_ShipMain-Obj7A_Index
00018F08 0000                       		dc.w Obj7A_FaceMain-Obj7A_Index
00018F0A 0000                       		dc.w Obj7A_FlameMain-Obj7A_Index
00018F0C 0000                       		dc.w Obj7A_TubeMain-Obj7A_Index
00018F0E                            
00018F0E 0200 04                    Obj7A_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
00018F11 0401 04                    		dc.b 4,	1, 4
00018F14 0607 04                    		dc.b 6,	7, 4
00018F17 0800 03                    		dc.b 8,	0, 3
00018F1A                            ; ===========================================================================
00018F1A                            
00018F1A                            Obj7A_Main:				; XREF: Obj7A_Index
00018F1A 317C 2188 0008             		move.w	#$2188,8(a0)
00018F20 317C 0228 000C             		move.w	#$228,$C(a0)
00018F26 3168 0008 0030             		move.w	8(a0),$30(a0)
00018F2C 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018F32 117C 000F 0020             		move.b	#$F,$20(a0)
00018F38 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00018F3E 45FA FFCE                  		lea	Obj7A_ObjData(pc),a2
00018F42 2248                       		movea.l	a0,a1
00018F44 7203                       		moveq	#3,d1
00018F46 6000                       		bra.s	Obj7A_LoadBoss
00018F48                            ; ===========================================================================
00018F48                            
00018F48                            Obj7A_Loop:
00018F48 4EB9 0000 E044             		jsr	SingleObjLoad2
00018F4E 6600                       		bne.s	loc_1895C
00018F50 12BC 007A                  		move.b	#$7A,0(a1)
00018F54 3368 0008 0008             		move.w	8(a0),8(a1)
00018F5A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018F60                            
00018F60                            Obj7A_LoadBoss:				; XREF: Obj7A_Main
00018F60 08A8 0000 0022             		bclr	#0,$22(a0)
00018F66 4229 0025                  		clr.b	$25(a1)
00018F6A 135A 0024                  		move.b	(a2)+,$24(a1)
00018F6E 135A 001C                  		move.b	(a2)+,$1C(a1)
00018F72 135A 0018                  		move.b	(a2)+,$18(a1)
00018F76 237C 0001 8350 0004        		move.l	#Map_Eggman,4(a1)
00018F7E 337C 0400 0002             		move.w	#$400,2(a1)
00018F84 137C 0004 0001             		move.b	#4,1(a1)
00018F8A 137C 0020 0019             		move.b	#$20,$19(a1)
00018F90 2348 0034                  		move.l	a0,$34(a1)
00018F94 51C9 FFB2                  		dbf	d1,Obj7A_Loop	; repeat sequence 3 more times
00018F98                            
00018F98                            loc_1895C:
00018F98 43F8 D040                  		lea	($FFFFD040).w,a1
00018F9C 45E8 002A                  		lea	$2A(a0),a2
00018FA0 705E                       		moveq	#$5E,d0
00018FA2 723E                       		moveq	#$3E,d1
00018FA4                            
00018FA4                            loc_18968:
00018FA4 B011                       		cmp.b	(a1),d0
00018FA6 6600                       		bne.s	loc_18974
00018FA8 4A29 0028                  		tst.b	$28(a1)
00018FAC 6700                       		beq.s	loc_18974
00018FAE 34C9                       		move.w	a1,(a2)+
00018FB0                            
00018FB0                            loc_18974:
00018FB0 D2FC 0040                  		adda.w	#$40,a1
00018FB4 51C9 FFEE                  		dbf	d1,loc_18968
00018FB8                            
00018FB8                            Obj7A_ShipMain:				; XREF: Obj7A_Index
00018FB8 7000                       		moveq	#0,d0
00018FBA 1028 0025                  		move.b	$25(a0),d0
00018FBE 303B 0000                  		move.w	Obj7A_ShipIndex(pc,d0.w),d0
00018FC2 4EBB 0000                  		jsr	Obj7A_ShipIndex(pc,d0.w)
00018FC6 43F9 0001 8300             		lea	(Ani_Eggman).l,a1
00018FCC 4EB9 0000 AC42             		jsr	AnimateSprite
00018FD2 7003                       		moveq	#3,d0
00018FD4 C028 0022                  		and.b	$22(a0),d0
00018FD8 0228 00FC 0001             		andi.b	#$FC,1(a0)
00018FDE 8128 0001                  		or.b	d0,1(a0)
00018FE2 4EF9 0000 DBA8             		jmp	DisplaySprite
00018FE8                            ; ===========================================================================
00018FE8 0000                       Obj7A_ShipIndex:dc.w loc_189B8-Obj7A_ShipIndex
00018FEA 0000                       		dc.w loc_18A5E-Obj7A_ShipIndex
00018FEC 0000                       		dc.w Obj7A_MakeBall-Obj7A_ShipIndex
00018FEE 0000                       		dc.w loc_18B48-Obj7A_ShipIndex
00018FF0 0000                       		dc.w loc_18B80-Obj7A_ShipIndex
00018FF2 0000                       		dc.w loc_18BC6-Obj7A_ShipIndex
00018FF4                            ; ===========================================================================
00018FF4                            
00018FF4                            loc_189B8:				; XREF: Obj7A_ShipIndex
00018FF4 317C FF00 0010             		move.w	#-$100,$10(a0)
00018FFA 0C68 2120 0030             		cmpi.w	#$2120,$30(a0)
00019000 6400                       		bcc.s	loc_189CA
00019002 5428 0025                  		addq.b	#2,$25(a0)
00019006                            
00019006                            loc_189CA:
00019006 6100 EEE8                  		bsr.w	BossMove
0001900A 1028 003F                  		move.b	$3F(a0),d0
0001900E 5428 003F                  		addq.b	#2,$3F(a0)
00019012 4EB9 0000 2C22             		jsr	(CalcSine).l
00019018 EC40                       		asr.w	#6,d0
0001901A D068 0038                  		add.w	$38(a0),d0
0001901E 3140 000C                  		move.w	d0,$C(a0)
00019022 3168 0030 0008             		move.w	$30(a0),8(a0)
00019028 6000                       		bra.s	loc_189FE
0001902A                            ; ===========================================================================
0001902A                            
0001902A                            loc_189EE:
0001902A 6100 EEC4                  		bsr.w	BossMove
0001902E 3168 0038 000C             		move.w	$38(a0),$C(a0)
00019034 3168 0030 0008             		move.w	$30(a0),8(a0)
0001903A                            
0001903A                            loc_189FE:
0001903A 0C28 0006 0025             		cmpi.b	#6,$25(a0)
00019040 6400                       		bcc.s	locret_18A44
00019042 4A28 0022                  		tst.b	$22(a0)
00019046 6B00                       		bmi.s	loc_18A46
00019048 4A28 0020                  		tst.b	$20(a0)
0001904C 6600                       		bne.s	locret_18A44
0001904E 4A28 003E                  		tst.b	$3E(a0)
00019052 6600                       		bne.s	loc_18A28
00019054 117C 0020 003E             		move.b	#$20,$3E(a0)
0001905A 303C 00AC                  		move.w	#$AC,d0
0001905E 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play boss damage sound
00019064                            
00019064                            loc_18A28:
00019064 43F8 FB22                  		lea	($FFFFFB22).w,a1
00019068 7000                       		moveq	#0,d0
0001906A 4A51                       		tst.w	(a1)
0001906C 6600                       		bne.s	loc_18A36
0001906E 303C 0EEE                  		move.w	#$EEE,d0
00019072                            
00019072                            loc_18A36:
00019072 3280                       		move.w	d0,(a1)
00019074 5328 003E                  		subq.b	#1,$3E(a0)
00019078 6600                       		bne.s	locret_18A44
0001907A 117C 000F 0020             		move.b	#$F,$20(a0)
00019080                            
00019080                            locret_18A44:
00019080 4E75                       		rts	
00019082                            ; ===========================================================================
00019082                            
00019082                            loc_18A46:
00019082 7064                       		moveq	#100,d0
00019084 6100 0000                  		bsr.w	AddPoints
00019088 117C 0006 0025             		move.b	#6,$25(a0)
0001908E 117C 0078 003C             		move.b	#$78,$3C(a0)
00019094 4268 0010                  		clr.w	$10(a0)
00019098 4E75                       		rts	
0001909A                            ; ===========================================================================
0001909A                            
0001909A                            loc_18A5E:				; XREF: Obj7A_ShipIndex
0001909A 3028 0030                  		move.w	$30(a0),d0
0001909E 317C 0200 0010             		move.w	#$200,$10(a0)
000190A4 0828 0000 0022             		btst	#0,$22(a0)
000190AA 6600                       		bne.s	loc_18A7C
000190AC 4468 0010                  		neg.w	$10(a0)
000190B0 0C40 2008                  		cmpi.w	#$2008,d0
000190B4 6E00                       		bgt.s	loc_18A88
000190B6 6000                       		bra.s	loc_18A82
000190B8                            ; ===========================================================================
000190B8                            
000190B8                            loc_18A7C:
000190B8 0C40 2138                  		cmpi.w	#$2138,d0
000190BC 6D00                       		blt.s	loc_18A88
000190BE                            
000190BE                            loc_18A82:
000190BE 0868 0000 0022             		bchg	#0,$22(a0)
000190C4                            
000190C4                            loc_18A88:
000190C4 3028 0008                  		move.w	8(a0),d0
000190C8 72FF                       		moveq	#-1,d1
000190CA 7402                       		moveq	#2,d2
000190CC 45E8 002A                  		lea	$2A(a0),a2
000190D0 7828                       		moveq	#$28,d4
000190D2 4A68 0010                  		tst.w	$10(a0)
000190D6 6A00                       		bpl.s	loc_18A9E
000190D8 4444                       		neg.w	d4
000190DA                            
000190DA                            loc_18A9E:
000190DA 321A                       		move.w	(a2)+,d1
000190DC 2641                       		movea.l	d1,a3
000190DE 082B 0003 0022             		btst	#3,$22(a3)
000190E4 6600                       		bne.s	loc_18AB4
000190E6 362B 0008                  		move.w	8(a3),d3
000190EA D644                       		add.w	d4,d3
000190EC 9640                       		sub.w	d0,d3
000190EE 6700                       		beq.s	loc_18AC0
000190F0                            
000190F0                            loc_18AB4:
000190F0 51CA FFE8                  		dbf	d2,loc_18A9E
000190F4                            
000190F4 1142 0028                  		move.b	d2,$28(a0)
000190F8 6000 FF0C                  		bra.w	loc_189CA
000190FC                            ; ===========================================================================
000190FC                            
000190FC                            loc_18AC0:
000190FC 1142 0028                  		move.b	d2,$28(a0)
00019100 5428 0025                  		addq.b	#2,$25(a0)
00019104 117C 0028 003C             		move.b	#$28,$3C(a0)
0001910A 6000 FEFA                  		bra.w	loc_189CA
0001910E                            ; ===========================================================================
0001910E                            
0001910E                            Obj7A_MakeBall:				; XREF: Obj7A_ShipIndex
0001910E 0C28 0028 003C             		cmpi.b	#$28,$3C(a0)
00019114 6600                       		bne.s	loc_18B36
00019116 70FF                       		moveq	#-1,d0
00019118 1028 0028                  		move.b	$28(a0),d0
0001911C 4880                       		ext.w	d0
0001911E 6B00                       		bmi.s	loc_18B40
00019120 5540                       		subq.w	#2,d0
00019122 4440                       		neg.w	d0
00019124 D040                       		add.w	d0,d0
00019126 43E8 002A                  		lea	$2A(a0),a1
0001912A 3031 0000                  		move.w	(a1,d0.w),d0
0001912E 2440                       		movea.l	d0,a2
00019130 43F8 D040                  		lea	($FFFFD040).w,a1
00019134 723E                       		moveq	#$3E,d1
00019136                            
00019136                            loc_18AFA:
00019136 B0A9 003C                  		cmp.l	$3C(a1),d0
0001913A 6700                       		beq.s	loc_18B40
0001913C D2FC 0040                  		adda.w	#$40,a1
00019140 51C9 FFF4                  		dbf	d1,loc_18AFA
00019144                            
00019144 2F08                       		move.l	a0,-(sp)
00019146 41D2                       		lea	(a2),a0
00019148 4EB9 0000 E044             		jsr	SingleObjLoad2
0001914E 205F                       		movea.l	(sp)+,a0
00019150 6600                       		bne.s	loc_18B40
00019152 12BC 007B                  		move.b	#$7B,(a1)	; load spiked ball object
00019156 3368 0008 0008             		move.w	8(a0),8(a1)
0001915C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019162 0669 0020 000C             		addi.w	#$20,$C(a1)
00019168 136A 0022 0022             		move.b	$22(a2),$22(a1)
0001916E 234A 003C                  		move.l	a2,$3C(a1)
00019172                            
00019172                            loc_18B36:
00019172 5328 003C                  		subq.b	#1,$3C(a0)
00019176 6700                       		beq.s	loc_18B40
00019178 6000 FEC0                  		bra.w	loc_189FE
0001917C                            ; ===========================================================================
0001917C                            
0001917C                            loc_18B40:
0001917C 5528 0025                  		subq.b	#2,$25(a0)
00019180 6000 FE84                  		bra.w	loc_189CA
00019184                            ; ===========================================================================
00019184                            
00019184                            loc_18B48:				; XREF: Obj7A_ShipIndex
00019184 5328 003C                  		subq.b	#1,$3C(a0)
00019188 6B00                       		bmi.s	loc_18B52
0001918A 6000 ED22                  		bra.w	BossDefeated
0001918E                            ; ===========================================================================
0001918E                            
0001918E                            loc_18B52:
0001918E 5428 0025                  		addq.b	#2,$25(a0)
00019192 4268 0012                  		clr.w	$12(a0)
00019196 08E8 0000 0022             		bset	#0,$22(a0)
0001919C 08A8 0007 0022             		bclr	#7,$22(a0)
000191A2 4268 0010                  		clr.w	$10(a0)
000191A6 117C 00E8 003C             		move.b	#-$18,$3C(a0)
000191AC 4A38 F7A7                  		tst.b	($FFFFF7A7).w
000191B0 6600                       		bne.s	loc_18B7C
000191B2 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
000191B8                            
000191B8                            loc_18B7C:
000191B8 6000 FE80                  		bra.w	loc_189FE
000191BC                            ; ===========================================================================
000191BC                            
000191BC                            loc_18B80:				; XREF: Obj7A_ShipIndex
000191BC 5228 003C                  		addq.b	#1,$3C(a0)
000191C0 6700                       		beq.s	loc_18B90
000191C2 6A00                       		bpl.s	loc_18B96
000191C4 0668 0018 0012             		addi.w	#$18,$12(a0)
000191CA 6000                       		bra.s	loc_18BC2
000191CC                            ; ===========================================================================
000191CC                            
000191CC                            loc_18B90:
000191CC 4268 0012                  		clr.w	$12(a0)
000191D0 6000                       		bra.s	loc_18BC2
000191D2                            ; ===========================================================================
000191D2                            
000191D2                            loc_18B96:
000191D2 0C28 0020 003C             		cmpi.b	#$20,$3C(a0)
000191D8 6500                       		bcs.s	loc_18BAE
000191DA 6700                       		beq.s	loc_18BB4
000191DC 0C28 002A 003C             		cmpi.b	#$2A,$3C(a0)
000191E2 6500                       		bcs.s	loc_18BC2
000191E4 5428 0025                  		addq.b	#2,$25(a0)
000191E8 6000                       		bra.s	loc_18BC2
000191EA                            ; ===========================================================================
000191EA                            
000191EA                            loc_18BAE:
000191EA 5168 0012                  		subq.w	#8,$12(a0)
000191EE 6000                       		bra.s	loc_18BC2
000191F0                            ; ===========================================================================
000191F0                            
000191F0                            loc_18BB4:
000191F0 4268 0012                  		clr.w	$12(a0)
000191F4 303C 0084                  		move.w	#$84,d0
000191F8 4EB9 0000 15B6             		jsr	(PlaySound).l	; play SLZ music
000191FE                            
000191FE                            loc_18BC2:
000191FE 6000 FE2A                  		bra.w	loc_189EE
00019202                            ; ===========================================================================
00019202                            
00019202                            loc_18BC6:				; XREF: Obj7A_ShipIndex
00019202 317C 0400 0010             		move.w	#$400,$10(a0)
00019208 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001920E 0C78 2160 F72A             		cmpi.w	#$2160,($FFFFF72A).w
00019214 6400                       		bcc.s	loc_18BE0
00019216 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001921A 6000                       		bra.s	loc_18BE8
0001921C                            ; ===========================================================================
0001921C                            
0001921C                            loc_18BE0:
0001921C 4A28 0001                  		tst.b	1(a0)
00019220 6A00 FCCE                  		bpl.w	Obj7A_Delete
00019224                            
00019224                            loc_18BE8:
00019224 6100 ECCA                  		bsr.w	BossMove
00019228 6000 FDDC                  		bra.w	loc_189CA
0001922C                            ; ===========================================================================
0001922C                            
0001922C                            Obj7A_FaceMain:				; XREF: Obj7A_Index
0001922C 7000                       		moveq	#0,d0
0001922E 7201                       		moveq	#1,d1
00019230 2268 0034                  		movea.l	$34(a0),a1
00019234 1029 0025                  		move.b	$25(a1),d0
00019238 0C00 0006                  		cmpi.b	#6,d0
0001923C 6B00                       		bmi.s	loc_18C06
0001923E 720A                       		moveq	#$A,d1
00019240 6000                       		bra.s	loc_18C1A
00019242                            ; ===========================================================================
00019242                            
00019242                            loc_18C06:
00019242 4A29 0020                  		tst.b	$20(a1)
00019246 6600                       		bne.s	loc_18C10
00019248 7205                       		moveq	#5,d1
0001924A 6000                       		bra.s	loc_18C1A
0001924C                            ; ===========================================================================
0001924C                            
0001924C                            loc_18C10:
0001924C 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00019252 6500                       		bcs.s	loc_18C1A
00019254 7204                       		moveq	#4,d1
00019256                            
00019256                            loc_18C1A:
00019256 1141 001C                  		move.b	d1,$1C(a0)
0001925A 0C00 000A                  		cmpi.b	#$A,d0
0001925E 6600                       		bne.s	loc_18C32
00019260 117C 0006 001C             		move.b	#6,$1C(a0)
00019266 4A28 0001                  		tst.b	1(a0)
0001926A 6A00 FC84                  		bpl.w	Obj7A_Delete
0001926E                            
0001926E                            loc_18C32:
0001926E 6000                       		bra.s	loc_18C6C
00019270                            ; ===========================================================================
00019270                            
00019270                            Obj7A_FlameMain:			; XREF: Obj7A_Index
00019270 117C 0008 001C             		move.b	#8,$1C(a0)
00019276 2268 0034                  		movea.l	$34(a0),a1
0001927A 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00019280 6600                       		bne.s	loc_18C56
00019282 4A28 0001                  		tst.b	1(a0)
00019286 6A00 FC68                  		bpl.w	Obj7A_Delete
0001928A 117C 000B 001C             		move.b	#$B,$1C(a0)
00019290 6000                       		bra.s	loc_18C6C
00019292                            ; ===========================================================================
00019292                            
00019292                            loc_18C56:
00019292 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00019298 6E00                       		bgt.s	loc_18C6C
0001929A 0C29 0004 0025             		cmpi.b	#4,$25(a1)
000192A0 6D00                       		blt.s	loc_18C6C
000192A2 117C 0007 001C             		move.b	#7,$1C(a0)
000192A8                            
000192A8                            loc_18C6C:
000192A8 43F9 0001 8300             		lea	(Ani_Eggman).l,a1
000192AE 4EB9 0000 AC42             		jsr	AnimateSprite
000192B4                            
000192B4                            loc_18C78:
000192B4 2268 0034                  		movea.l	$34(a0),a1
000192B8 3169 0008 0008             		move.w	8(a1),8(a0)
000192BE 3169 000C 000C             		move.w	$C(a1),$C(a0)
000192C4 1169 0022 0022             		move.b	$22(a1),$22(a0)
000192CA 7003                       		moveq	#3,d0
000192CC C028 0022                  		and.b	$22(a0),d0
000192D0 0228 00FC 0001             		andi.b	#-4,1(a0)
000192D6 8128 0001                  		or.b	d0,1(a0)
000192DA 4EF9 0000 DBA8             		jmp	DisplaySprite
000192E0                            ; ===========================================================================
000192E0                            
000192E0                            Obj7A_TubeMain:				; XREF: Obj7A_Index
000192E0 2268 0034                  		movea.l	$34(a0),a1
000192E4 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
000192EA 6600                       		bne.s	loc_18CB8
000192EC 4A28 0001                  		tst.b	1(a0)
000192F0 6A00 FBFE                  		bpl.w	Obj7A_Delete
000192F4                            
000192F4                            loc_18CB8:
000192F4 217C 0001 8418 0004        		move.l	#Map_BossItems,4(a0)
000192FC 317C 246C 0002             		move.w	#$246C,2(a0)
00019302 117C 0003 001A             		move.b	#3,$1A(a0)
00019308 60AA                       		bra.s	loc_18C78
0001930A                            ; ===========================================================================
0001930A                            ; ---------------------------------------------------------------------------
0001930A                            ; Object 7B - exploding	spikeys	that Eggman drops (SLZ)
0001930A                            ; ---------------------------------------------------------------------------
0001930A                            
0001930A                            Obj7B:					; XREF: Obj_Index
0001930A 7000                       		moveq	#0,d0
0001930C 1028 0024                  		move.b	$24(a0),d0
00019310 303B 0000                  		move.w	Obj7B_Index(pc,d0.w),d0
00019314 4EBB 0000                  		jsr	Obj7B_Index(pc,d0.w)
00019318 3028 0030                  		move.w	$30(a0),d0
0001931C 0240 FF80                  		andi.w	#$FF80,d0
00019320 3238 F700                  		move.w	($FFFFF700).w,d1
00019324 0441 0080                  		subi.w	#$80,d1
00019328 0241 FF80                  		andi.w	#$FF80,d1
0001932C 9041                       		sub.w	d1,d0
0001932E 6B00 FBC0                  		bmi.w	Obj7A_Delete
00019332 0C40 0280                  		cmpi.w	#$280,d0
00019336 6200 FBB8                  		bhi.w	Obj7A_Delete
0001933A 4EF9 0000 DBA8             		jmp	DisplaySprite
00019340                            ; ===========================================================================
00019340 0000                       Obj7B_Index:	dc.w Obj7B_Main-Obj7B_Index
00019342 0000                       		dc.w Obj7B_Fall-Obj7B_Index
00019344 0000                       		dc.w loc_18DC6-Obj7B_Index
00019346 0000                       		dc.w loc_18EAA-Obj7B_Index
00019348 0000                       		dc.w Obj7B_Explode-Obj7B_Index
0001934A 0000                       		dc.w Obj7B_MoveFrag-Obj7B_Index
0001934C                            ; ===========================================================================
0001934C                            
0001934C                            Obj7B_Main:				; XREF: Obj7B_Index
0001934C 217C 0001 1F6E 0004        		move.l	#Map_obj5Ea,4(a0)
00019354 317C 0518 0002             		move.w	#$518,2(a0)
0001935A 117C 0001 001A             		move.b	#1,$1A(a0)
00019360 0028 0004 0001             		ori.b	#4,1(a0)
00019366 117C 0004 0018             		move.b	#4,$18(a0)
0001936C 117C 008B 0020             		move.b	#$8B,$20(a0)
00019372 117C 000C 0019             		move.b	#$C,$19(a0)
00019378 2268 003C                  		movea.l	$3C(a0),a1
0001937C 3169 0008 0030             		move.w	8(a1),$30(a0)
00019382 3169 000C 0034             		move.w	$C(a1),$34(a0)
00019388 08E8 0000 0022             		bset	#0,$22(a0)
0001938E 3028 0008                  		move.w	8(a0),d0
00019392 B069 0008                  		cmp.w	8(a1),d0
00019396 6E00                       		bgt.s	loc_18D68
00019398 08A8 0000 0022             		bclr	#0,$22(a0)
0001939E 117C 0002 003A             		move.b	#2,$3A(a0)
000193A4                            
000193A4                            loc_18D68:
000193A4 5428 0024                  		addq.b	#2,$24(a0)
000193A8                            
000193A8                            Obj7B_Fall:				; XREF: Obj7B_Index
000193A8 4EB9 0000 DB56             		jsr	ObjectFall
000193AE 2268 003C                  		movea.l	$3C(a0),a1
000193B2 45F9 0000 0000             		lea	(word_19018).l,a2
000193B8 7000                       		moveq	#0,d0
000193BA 1029 001A                  		move.b	$1A(a1),d0
000193BE 3228 0008                  		move.w	8(a0),d1
000193C2 9268 0030                  		sub.w	$30(a0),d1
000193C6 6400                       		bcc.s	loc_18D8E
000193C8 5440                       		addq.w	#2,d0
000193CA                            
000193CA                            loc_18D8E:
000193CA D040                       		add.w	d0,d0
000193CC 3228 0034                  		move.w	$34(a0),d1
000193D0 D272 0000                  		add.w	(a2,d0.w),d1
000193D4 B268 000C                  		cmp.w	$C(a0),d1
000193D8 6E00                       		bgt.s	locret_18DC4
000193DA 2268 003C                  		movea.l	$3C(a0),a1
000193DE 7202                       		moveq	#2,d1
000193E0 0828 0000 0022             		btst	#0,$22(a0)
000193E6 6700                       		beq.s	loc_18DAE
000193E8 7200                       		moveq	#0,d1
000193EA                            
000193EA                            loc_18DAE:
000193EA 317C 00F0 0028             		move.w	#$F0,$28(a0)
000193F0 117C 000A 001F             		move.b	#10,$1F(a0)	; set frame duration to	10 frames
000193F6 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
000193FC 6000 0000                  		bra.w	loc_18FA2
00019400                            ; ===========================================================================
00019400                            
00019400                            locret_18DC4:
00019400 4E75                       		rts	
00019402                            ; ===========================================================================
00019402                            
00019402                            loc_18DC6:				; XREF: Obj7B_Index
00019402 2268 003C                  		movea.l	$3C(a0),a1
00019406 7000                       		moveq	#0,d0
00019408 1028 003A                  		move.b	$3A(a0),d0
0001940C 9029 003A                  		sub.b	$3A(a1),d0
00019410 6700                       		beq.s	loc_18E2A
00019412 6400                       		bcc.s	loc_18DDA
00019414 4400                       		neg.b	d0
00019416                            
00019416                            loc_18DDA:
00019416 323C F7E8                  		move.w	#-$818,d1
0001941A 343C FEEC                  		move.w	#-$114,d2
0001941E 0C00 0001                  		cmpi.b	#1,d0
00019422 6700                       		beq.s	loc_18E00
00019424 323C F6A0                  		move.w	#-$960,d1
00019428 343C FF0C                  		move.w	#-$F4,d2
0001942C 0C69 09C0 0038             		cmpi.w	#$9C0,$38(a1)
00019432 6D00                       		blt.s	loc_18E00
00019434 323C F5E0                  		move.w	#-$A20,d1
00019438 343C FF80                  		move.w	#-$80,d2
0001943C                            
0001943C                            loc_18E00:
0001943C 3141 0012                  		move.w	d1,$12(a0)
00019440 3142 0010                  		move.w	d2,$10(a0)
00019444 3028 0008                  		move.w	8(a0),d0
00019448 9068 0030                  		sub.w	$30(a0),d0
0001944C 6400                       		bcc.s	loc_18E16
0001944E 4468 0010                  		neg.w	$10(a0)
00019452                            
00019452                            loc_18E16:
00019452 117C 0001 001A             		move.b	#1,$1A(a0)
00019458 317C 0020 0028             		move.w	#$20,$28(a0)
0001945E 5428 0024                  		addq.b	#2,$24(a0)
00019462 6000 0000                  		bra.w	loc_18EAA
00019466                            ; ===========================================================================
00019466                            
00019466                            loc_18E2A:				; XREF: loc_18DC6
00019466 45F9 0000 0000             		lea	(word_19018).l,a2
0001946C 7000                       		moveq	#0,d0
0001946E 1029 001A                  		move.b	$1A(a1),d0
00019472 343C 0028                  		move.w	#$28,d2
00019476 3228 0008                  		move.w	8(a0),d1
0001947A 9268 0030                  		sub.w	$30(a0),d1
0001947E 6400                       		bcc.s	loc_18E48
00019480 4442                       		neg.w	d2
00019482 5440                       		addq.w	#2,d0
00019484                            
00019484                            loc_18E48:
00019484 D040                       		add.w	d0,d0
00019486 3228 0034                  		move.w	$34(a0),d1
0001948A D272 0000                  		add.w	(a2,d0.w),d1
0001948E 3141 000C                  		move.w	d1,$C(a0)
00019492 D468 0030                  		add.w	$30(a0),d2
00019496 3142 0008                  		move.w	d2,8(a0)
0001949A 4268 000E                  		clr.w	$E(a0)
0001949E 4268 000A                  		clr.w	$A(a0)
000194A2 5368 0028                  		subq.w	#1,$28(a0)
000194A6 6600                       		bne.s	loc_18E7A
000194A8 317C 0020 0028             		move.w	#$20,$28(a0)
000194AE 117C 0008 0024             		move.b	#8,$24(a0)
000194B4 4E75                       		rts	
000194B6                            ; ===========================================================================
000194B6                            
000194B6                            loc_18E7A:
000194B6 0C68 0078 0028             		cmpi.w	#$78,$28(a0)
000194BC 6600                       		bne.s	loc_18E88
000194BE 117C 0005 001F             		move.b	#5,$1F(a0)
000194C4                            
000194C4                            loc_18E88:
000194C4 0C68 003C 0028             		cmpi.w	#$3C,$28(a0)
000194CA 6600                       		bne.s	loc_18E96
000194CC 117C 0002 001F             		move.b	#2,$1F(a0)
000194D2                            
000194D2                            loc_18E96:
000194D2 5328 001E                  		subq.b	#1,$1E(a0)
000194D6 6E00                       		bgt.s	locret_18EA8
000194D8 0868 0000 001A             		bchg	#0,$1A(a0)
000194DE 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
000194E4                            
000194E4                            locret_18EA8:
000194E4 4E75                       		rts	
000194E6                            ; ===========================================================================
000194E6                            
000194E6                            loc_18EAA:				; XREF: Obj7B_Index
000194E6 43F8 D040                  		lea	($FFFFD040).w,a1
000194EA 707A                       		moveq	#$7A,d0
000194EC 7240                       		moveq	#$40,d1
000194EE 743E                       		moveq	#$3E,d2
000194F0                            
000194F0                            loc_18EB4:
000194F0 B011                       		cmp.b	(a1),d0
000194F2 6700                       		beq.s	loc_18EC0
000194F4 D2C1                       		adda.w	d1,a1
000194F6 51CA FFF8                  		dbf	d2,loc_18EB4
000194FA                            
000194FA 6000                       		bra.s	loc_18F38
000194FC                            ; ===========================================================================
000194FC                            
000194FC                            loc_18EC0:
000194FC 3029 0008                  		move.w	8(a1),d0
00019500 3229 000C                  		move.w	$C(a1),d1
00019504 3428 0008                  		move.w	8(a0),d2
00019508 3628 000C                  		move.w	$C(a0),d3
0001950C 45FA 0000                  		lea	byte_19022(pc),a2
00019510 47FA 0000                  		lea	byte_19026(pc),a3
00019514 181A                       		move.b	(a2)+,d4
00019516 4884                       		ext.w	d4
00019518 D044                       		add.w	d4,d0
0001951A 181B                       		move.b	(a3)+,d4
0001951C 4884                       		ext.w	d4
0001951E D444                       		add.w	d4,d2
00019520 B440                       		cmp.w	d0,d2
00019522 6500                       		bcs.s	loc_18F38
00019524 181A                       		move.b	(a2)+,d4
00019526 4884                       		ext.w	d4
00019528 D044                       		add.w	d4,d0
0001952A 181B                       		move.b	(a3)+,d4
0001952C 4884                       		ext.w	d4
0001952E D444                       		add.w	d4,d2
00019530 B042                       		cmp.w	d2,d0
00019532 6500                       		bcs.s	loc_18F38
00019534 181A                       		move.b	(a2)+,d4
00019536 4884                       		ext.w	d4
00019538 D244                       		add.w	d4,d1
0001953A 181B                       		move.b	(a3)+,d4
0001953C 4884                       		ext.w	d4
0001953E D644                       		add.w	d4,d3
00019540 B641                       		cmp.w	d1,d3
00019542 6500                       		bcs.s	loc_18F38
00019544 181A                       		move.b	(a2)+,d4
00019546 4884                       		ext.w	d4
00019548 D244                       		add.w	d4,d1
0001954A 181B                       		move.b	(a3)+,d4
0001954C 4884                       		ext.w	d4
0001954E D644                       		add.w	d4,d3
00019550 B243                       		cmp.w	d3,d1
00019552 6500                       		bcs.s	loc_18F38
00019554 5428 0024                  		addq.b	#2,$24(a0)
00019558 4268 0028                  		clr.w	$28(a0)
0001955C 4229 0020                  		clr.b	$20(a1)
00019560 5329 0021                  		subq.b	#1,$21(a1)
00019564 6600                       		bne.s	loc_18F38
00019566 08E9 0007 0022             		bset	#7,$22(a1)
0001956C 4268 0010                  		clr.w	$10(a0)
00019570 4268 0012                  		clr.w	$12(a0)
00019574                            
00019574                            loc_18F38:
00019574 4A68 0012                  		tst.w	$12(a0)
00019578 6A00                       		bpl.s	loc_18F5C
0001957A 4EB9 0000 DB56             		jsr	ObjectFall
00019580 3028 0034                  		move.w	$34(a0),d0
00019584 0440 002F                  		subi.w	#$2F,d0
00019588 B068 000C                  		cmp.w	$C(a0),d0
0001958C 6E00                       		bgt.s	loc_18F58
0001958E 4EB9 0000 DB56             		jsr	ObjectFall
00019594                            
00019594                            loc_18F58:
00019594 6000 FF20                  		bra.w	loc_18E7A
00019598                            ; ===========================================================================
00019598                            
00019598                            loc_18F5C:
00019598 4EB9 0000 DB56             		jsr	ObjectFall
0001959E 2268 003C                  		movea.l	$3C(a0),a1
000195A2 45F9 0000 0000             		lea	(word_19018).l,a2
000195A8 7000                       		moveq	#0,d0
000195AA 1029 001A                  		move.b	$1A(a1),d0
000195AE 3228 0008                  		move.w	8(a0),d1
000195B2 9268 0030                  		sub.w	$30(a0),d1
000195B6 6400                       		bcc.s	loc_18F7E
000195B8 5440                       		addq.w	#2,d0
000195BA                            
000195BA                            loc_18F7E:
000195BA D040                       		add.w	d0,d0
000195BC 3228 0034                  		move.w	$34(a0),d1
000195C0 D272 0000                  		add.w	(a2,d0.w),d1
000195C4 B268 000C                  		cmp.w	$C(a0),d1
000195C8 6ECA                       		bgt.s	loc_18F58
000195CA 2268 003C                  		movea.l	$3C(a0),a1
000195CE 7202                       		moveq	#2,d1
000195D0 4A68 0010                  		tst.w	$10(a0)
000195D4 6B00                       		bmi.s	loc_18F9C
000195D6 7200                       		moveq	#0,d1
000195D8                            
000195D8                            loc_18F9C:
000195D8 317C 0000 0028             		move.w	#0,$28(a0)
000195DE                            
000195DE                            loc_18FA2:
000195DE 1341 003A                  		move.b	d1,$3A(a1)
000195E2 1141 003A                  		move.b	d1,$3A(a0)
000195E6 B229 001A                  		cmp.b	$1A(a1),d1
000195EA 6700                       		beq.s	loc_19008
000195EC 08A9 0003 0022             		bclr	#3,$22(a1)
000195F2 6700                       		beq.s	loc_19008
000195F4 4229 0025                  		clr.b	$25(a1)
000195F8 137C 0002 0024             		move.b	#2,$24(a1)
000195FE 45F8 D000                  		lea	($FFFFD000).w,a2
00019602 3568 0012 0012             		move.w	$12(a0),$12(a2)
00019608 446A 0012                  		neg.w	$12(a2)
0001960C 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
00019612 6600                       		bne.s	loc_18FDC
00019614 E0EA 0012                  		asr	$12(a2)
00019618                            
00019618                            loc_18FDC:
00019618 08EA 0001 0022             		bset	#1,$22(a2)
0001961E 08AA 0003 0022             		bclr	#3,$22(a2)
00019624 422A 003C                  		clr.b	$3C(a2)
00019628 2F08                       		move.l	a0,-(sp)
0001962A 41D2                       		lea	(a2),a0
0001962C 4EBA A3A2                  		jsr	Obj01_ChkRoll
00019630 205F                       		movea.l	(sp)+,a0
00019632 157C 0002 0024             		move.b	#2,$24(a2)
00019638 303C 00CC                  		move.w	#$CC,d0
0001963C 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play "spring" sound
00019642                            
00019642                            loc_19008:
00019642 4268 0010                  		clr.w	$10(a0)
00019646 4268 0012                  		clr.w	$12(a0)
0001964A 5428 0024                  		addq.b	#2,$24(a0)
0001964E 6000 FE66                  		bra.w	loc_18E7A
00019652                            ; ===========================================================================
00019652 FFF8 FFE4 FFD1 FFE4 FFF8   word_19018:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
0001965C                            		even
0001965C E830 E830                  byte_19022:	dc.b $E8, $30, $E8, $30
00019660                            		even
00019660 08F0 08F0                  byte_19026:	dc.b 8,	$F0, 8,	$F0
00019664                            		even
00019664                            ; ===========================================================================
00019664                            
00019664                            Obj7B_Explode:				; XREF: Obj7B_Index
00019664 10BC 003F                  		move.b	#$3F,(a0)
00019668 4228 0024                  		clr.b	$24(a0)
0001966C 0C68 0020 0028             		cmpi.w	#$20,$28(a0)
00019672 6700                       		beq.s	Obj7B_MakeFrag
00019674 4E75                       		rts	
00019676                            ; ===========================================================================
00019676                            
00019676                            Obj7B_MakeFrag:
00019676 3168 0034 000C             		move.w	$34(a0),$C(a0)
0001967C 7203                       		moveq	#3,d1
0001967E 45FA 0000                  		lea	Obj7B_FragSpeed(pc),a2
00019682                            
00019682                            Obj7B_Loop:
00019682 4EB9 0000 E02E             		jsr	SingleObjLoad
00019688 6600                       		bne.s	loc_1909A
0001968A 12BC 007B                  		move.b	#$7B,(a1)	; load shrapnel	object
0001968E 137C 000A 0024             		move.b	#$A,$24(a1)
00019694 237C 0000 0000 0004        		move.l	#Map_obj7B,4(a1)
0001969C 137C 0003 0018             		move.b	#3,$18(a1)
000196A2 337C 0518 0002             		move.w	#$518,2(a1)
000196A8 3368 0008 0008             		move.w	8(a0),8(a1)
000196AE 3368 000C 000C             		move.w	$C(a0),$C(a1)
000196B4 335A 0010                  		move.w	(a2)+,$10(a1)
000196B8 335A 0012                  		move.w	(a2)+,$12(a1)
000196BC 137C 0098 0020             		move.b	#$98,$20(a1)
000196C2 0029 0004 0001             		ori.b	#4,1(a1)
000196C8 08E9 0007 0001             		bset	#7,1(a1)
000196CE 137C 000C 0019             		move.b	#$C,$19(a1)
000196D4                            
000196D4                            loc_1909A:
000196D4 51C9 FFAC                  		dbf	d1,Obj7B_Loop	; repeat sequence 3 more times
000196D8                            
000196D8 4E75                       		rts	
000196DA                            ; ===========================================================================
000196DA FF00 FCC0                  Obj7B_FragSpeed:dc.w $FF00, $FCC0	; horizontal, vertical
000196DE FF60 FDC0                  		dc.w $FF60, $FDC0
000196E2 0100 FCC0                  		dc.w $100, $FCC0
000196E6 00A0 FDC0                  		dc.w $A0, $FDC0
000196EA                            ; ===========================================================================
000196EA                            
000196EA                            Obj7B_MoveFrag:				; XREF: Obj7B_Index
000196EA 4EB9 0000 DB82             		jsr	SpeedToPos
000196F0 3168 0008 0030             		move.w	8(a0),$30(a0)
000196F6 3168 000C 0034             		move.w	$C(a0),$34(a0)
000196FC 0668 0018 0012             		addi.w	#$18,$12(a0)
00019702 7004                       		moveq	#4,d0
00019704 C078 FE0E                  		and.w	($FFFFFE0E).w,d0
00019708 E448                       		lsr.w	#2,d0
0001970A 1140 001A                  		move.b	d0,$1A(a0)
0001970E 4A28 0001                  		tst.b	1(a0)
00019712 6A00 F7DC                  		bpl.w	Obj7A_Delete
00019716 4E75                       		rts	
00019718                            ; ===========================================================================
00019718                            ; ---------------------------------------------------------------------------
00019718                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
00019718                            ; ---------------------------------------------------------------------------
00019718                            Map_obj7B:
00019718                            	include "_maps\obj7B.asm"
00019718                            ; ---------------------------------------------------------------------------
00019718                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
00019718                            ; ---------------------------------------------------------------------------
00019718 0000                       		dc.w byte_190E2-Map_obj7B
0001971A 0000                       		dc.w byte_190E8-Map_obj7B
0001971C 01                         byte_190E2:	dc.b 1
0001971D FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
00019722 01                         byte_190E8:	dc.b 1
00019723 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
00019728                            		even
00019728                            		even
00019728                            
00019728                            ; ===========================================================================
00019728                            ; ---------------------------------------------------------------------------
00019728                            ; Object 75 - Eggman (SYZ)
00019728                            ; ---------------------------------------------------------------------------
00019728                            
00019728                            Obj75:					; XREF: Obj_Index
00019728 7000                       		moveq	#0,d0
0001972A 1028 0024                  		move.b	$24(a0),d0
0001972E 323B 0000                  		move.w	Obj75_Index(pc,d0.w),d1
00019732 4EFB 1000                  		jmp	Obj75_Index(pc,d1.w)
00019736                            ; ===========================================================================
00019736 0000                       Obj75_Index:	dc.w Obj75_Main-Obj75_Index
00019738 0000                       		dc.w Obj75_ShipMain-Obj75_Index
0001973A 0000                       		dc.w Obj75_FaceMain-Obj75_Index
0001973C 0000                       		dc.w Obj75_FlameMain-Obj75_Index
0001973E 0000                       		dc.w Obj75_SpikeMain-Obj75_Index
00019740                            
00019740 0200 05                    Obj75_ObjData:	dc.b 2,	0, 5		; routine number, animation, priority
00019743 0401 05                    		dc.b 4,	1, 5
00019746 0607 05                    		dc.b 6,	7, 5
00019749 0800 05                    		dc.b 8,	0, 5
0001974C                            ; ===========================================================================
0001974C                            
0001974C                            Obj75_Main:				; XREF: Obj75_Index
0001974C 317C 2DB0 0008             		move.w	#$2DB0,8(a0)
00019752 317C 04DA 000C             		move.w	#$4DA,$C(a0)
00019758 3168 0008 0030             		move.w	8(a0),$30(a0)
0001975E 3168 000C 0038             		move.w	$C(a0),$38(a0)
00019764 117C 000F 0020             		move.b	#$F,$20(a0)
0001976A 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00019770 45FA FFCE                  		lea	Obj75_ObjData(pc),a2
00019774 2248                       		movea.l	a0,a1
00019776 7203                       		moveq	#3,d1
00019778 6000                       		bra.s	Obj75_LoadBoss
0001977A                            ; ===========================================================================
0001977A                            
0001977A                            Obj75_Loop:
0001977A 4EB9 0000 E044             		jsr	SingleObjLoad2
00019780 6600                       		bne.s	Obj75_ShipMain
00019782 12BC 0075                  		move.b	#$75,(a1)
00019786 3368 0008 0008             		move.w	8(a0),8(a1)
0001978C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019792                            
00019792                            Obj75_LoadBoss:				; XREF: Obj75_Main
00019792 08A8 0000 0022             		bclr	#0,$22(a0)
00019798 4229 0025                  		clr.b	$25(a1)
0001979C 135A 0024                  		move.b	(a2)+,$24(a1)
000197A0 135A 001C                  		move.b	(a2)+,$1C(a1)
000197A4 135A 0018                  		move.b	(a2)+,$18(a1)
000197A8 237C 0001 8350 0004        		move.l	#Map_Eggman,4(a1)
000197B0 337C 0400 0002             		move.w	#$400,2(a1)
000197B6 137C 0004 0001             		move.b	#4,1(a1)
000197BC 137C 0020 0019             		move.b	#$20,$19(a1)
000197C2 2348 0034                  		move.l	a0,$34(a1)
000197C6 51C9 FFB2                  		dbf	d1,Obj75_Loop	; repeat sequence 3 more times
000197CA                            
000197CA                            Obj75_ShipMain:				; XREF: Obj75_Index
000197CA 7000                       		moveq	#0,d0
000197CC 1028 0025                  		move.b	$25(a0),d0
000197D0 323B 0000                  		move.w	Obj75_ShipIndex(pc,d0.w),d1
000197D4 4EBB 1000                  		jsr	Obj75_ShipIndex(pc,d1.w)
000197D8 43F9 0001 8300             		lea	(Ani_Eggman).l,a1
000197DE 4EB9 0000 AC42             		jsr	AnimateSprite
000197E4 7003                       		moveq	#3,d0
000197E6 C028 0022                  		and.b	$22(a0),d0
000197EA 0228 00FC 0001             		andi.b	#$FC,1(a0)
000197F0 8128 0001                  		or.b	d0,1(a0)
000197F4 4EF9 0000 DBA8             		jmp	DisplaySprite
000197FA                            ; ===========================================================================
000197FA 0000 0000                  Obj75_ShipIndex:dc.w loc_191CC-Obj75_ShipIndex,	loc_19270-Obj75_ShipIndex
000197FE 0000 0000                  		dc.w loc_192EC-Obj75_ShipIndex,	loc_19474-Obj75_ShipIndex
00019802 0000 0000                  		dc.w loc_194AC-Obj75_ShipIndex,	loc_194F2-Obj75_ShipIndex
00019806                            ; ===========================================================================
00019806                            
00019806                            loc_191CC:				; XREF: Obj75_ShipIndex
00019806 317C FF00 0010             		move.w	#-$100,$10(a0)
0001980C 0C68 2D38 0030             		cmpi.w	#$2D38,$30(a0)
00019812 6400                       		bcc.s	loc_191DE
00019814 5428 0025                  		addq.b	#2,$25(a0)
00019818                            
00019818                            loc_191DE:
00019818 1028 003F                  		move.b	$3F(a0),d0
0001981C 5428 003F                  		addq.b	#2,$3F(a0)
00019820 4EB9 0000 2C22             		jsr	(CalcSine).l
00019826 E440                       		asr.w	#2,d0
00019828 3140 0012                  		move.w	d0,$12(a0)
0001982C                            
0001982C                            loc_191F2:
0001982C 6100 E6C2                  		bsr.w	BossMove
00019830 3168 0038 000C             		move.w	$38(a0),$C(a0)
00019836 3168 0030 0008             		move.w	$30(a0),8(a0)
0001983C                            
0001983C                            loc_19202:
0001983C 3028 0008                  		move.w	8(a0),d0
00019840 0440 2C00                  		subi.w	#$2C00,d0
00019844 EA48                       		lsr.w	#5,d0
00019846 1140 0034                  		move.b	d0,$34(a0)
0001984A 0C28 0006 0025             		cmpi.b	#6,$25(a0)
00019850 6400                       		bcc.s	locret_19256
00019852 4A28 0022                  		tst.b	$22(a0)
00019856 6B00                       		bmi.s	loc_19258
00019858 4A28 0020                  		tst.b	$20(a0)
0001985C 6600                       		bne.s	locret_19256
0001985E 4A28 003E                  		tst.b	$3E(a0)
00019862 6600                       		bne.s	loc_1923A
00019864 117C 0020 003E             		move.b	#$20,$3E(a0)
0001986A 303C 00AC                  		move.w	#$AC,d0
0001986E 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play boss damage sound
00019874                            
00019874                            loc_1923A:
00019874 43F8 FB22                  		lea	($FFFFFB22).w,a1
00019878 7000                       		moveq	#0,d0
0001987A 4A51                       		tst.w	(a1)
0001987C 6600                       		bne.s	loc_19248
0001987E 303C 0EEE                  		move.w	#$EEE,d0
00019882                            
00019882                            loc_19248:
00019882 3280                       		move.w	d0,(a1)
00019884 5328 003E                  		subq.b	#1,$3E(a0)
00019888 6600                       		bne.s	locret_19256
0001988A 117C 000F 0020             		move.b	#$F,$20(a0)
00019890                            
00019890                            locret_19256:
00019890 4E75                       		rts	
00019892                            ; ===========================================================================
00019892                            
00019892                            loc_19258:				; XREF: loc_19202
00019892 7064                       		moveq	#100,d0
00019894 6100 0000                  		bsr.w	AddPoints
00019898 117C 0006 0025             		move.b	#6,$25(a0)
0001989E 317C 00B4 003C             		move.w	#$B4,$3C(a0)
000198A4 4268 0010                  		clr.w	$10(a0)
000198A8 4E75                       		rts	
000198AA                            ; ===========================================================================
000198AA                            
000198AA                            loc_19270:				; XREF: Obj75_ShipIndex
000198AA 3028 0030                  		move.w	$30(a0),d0
000198AE 317C 0140 0010             		move.w	#$140,$10(a0)
000198B4 0828 0000 0022             		btst	#0,$22(a0)
000198BA 6600                       		bne.s	loc_1928E
000198BC 4468 0010                  		neg.w	$10(a0)
000198C0 0C40 2C08                  		cmpi.w	#$2C08,d0
000198C4 6E00                       		bgt.s	loc_1929E
000198C6 6000                       		bra.s	loc_19294
000198C8                            ; ===========================================================================
000198C8                            
000198C8                            loc_1928E:
000198C8 0C40 2D38                  		cmpi.w	#$2D38,d0
000198CC 6D00                       		blt.s	loc_1929E
000198CE                            
000198CE                            loc_19294:
000198CE 0868 0000 0022             		bchg	#0,$22(a0)
000198D4 4228 003D                  		clr.b	$3D(a0)
000198D8                            
000198D8                            loc_1929E:
000198D8 0440 2C10                  		subi.w	#$2C10,d0
000198DC 0240 001F                  		andi.w	#$1F,d0
000198E0 0440 001F                  		subi.w	#$1F,d0
000198E4 6A00                       		bpl.s	loc_192AE
000198E6 4440                       		neg.w	d0
000198E8                            
000198E8                            loc_192AE:
000198E8 5340                       		subq.w	#1,d0
000198EA 6E00                       		bgt.s	loc_192E8
000198EC 4A28 003D                  		tst.b	$3D(a0)
000198F0 6600                       		bne.s	loc_192E8
000198F2 3238 D008                  		move.w	($FFFFD008).w,d1
000198F6 0441 2C00                  		subi.w	#$2C00,d1
000198FA EA41                       		asr.w	#5,d1
000198FC B228 0034                  		cmp.b	$34(a0),d1
00019900 6600                       		bne.s	loc_192E8
00019902 7000                       		moveq	#0,d0
00019904 1028 0034                  		move.b	$34(a0),d0
00019908 EB40                       		asl.w	#5,d0
0001990A 0640 2C10                  		addi.w	#$2C10,d0
0001990E 3140 0030                  		move.w	d0,$30(a0)
00019912 6100 0000                  		bsr.w	Obj75_FindBlocks
00019916 5428 0025                  		addq.b	#2,$25(a0)
0001991A 4268 0028                  		clr.w	$28(a0)
0001991E 4268 0010                  		clr.w	$10(a0)
00019922                            
00019922                            loc_192E8:
00019922 6000 FEF4                  		bra.w	loc_191DE
00019926                            ; ===========================================================================
00019926                            
00019926                            loc_192EC:				; XREF: Obj75_ShipIndex
00019926 7000                       		moveq	#0,d0
00019928 1028 0028                  		move.b	$28(a0),d0
0001992C 303B 0000                  		move.w	off_192FA(pc,d0.w),d0
00019930 4EFB 0000                  		jmp	off_192FA(pc,d0.w)
00019934                            ; ===========================================================================
00019934 0000                       off_192FA:	dc.w loc_19302-off_192FA
00019936 0000                       		dc.w loc_19348-off_192FA
00019938 0000                       		dc.w loc_1938E-off_192FA
0001993A 0000                       		dc.w loc_193D0-off_192FA
0001993C                            ; ===========================================================================
0001993C                            
0001993C                            loc_19302:				; XREF: off_192FA
0001993C 317C 0180 0012             		move.w	#$180,$12(a0)
00019942 3028 0038                  		move.w	$38(a0),d0
00019946 0C40 0556                  		cmpi.w	#$556,d0
0001994A 6500                       		bcs.s	loc_19344
0001994C 317C 0556 0038             		move.w	#$556,$38(a0)
00019952 4268 003C                  		clr.w	$3C(a0)
00019956 70FF                       		moveq	#-1,d0
00019958 3028 0036                  		move.w	$36(a0),d0
0001995C 6700                       		beq.s	loc_1933C
0001995E 2240                       		movea.l	d0,a1
00019960 137C 00FF 0029             		move.b	#-1,$29(a1)
00019966 117C 00FF 0029             		move.b	#-1,$29(a0)
0001996C 2348 0034                  		move.l	a0,$34(a1)
00019970 317C 0032 003C             		move.w	#$32,$3C(a0)
00019976                            
00019976                            loc_1933C:
00019976 4268 0012                  		clr.w	$12(a0)
0001997A 5428 0028                  		addq.b	#2,$28(a0)
0001997E                            
0001997E                            loc_19344:
0001997E 6000 FEAC                  		bra.w	loc_191F2
00019982                            ; ===========================================================================
00019982                            
00019982                            loc_19348:				; XREF: off_192FA
00019982 5368 003C                  		subq.w	#1,$3C(a0)
00019986 6A00                       		bpl.s	loc_19366
00019988 5428 0028                  		addq.b	#2,$28(a0)
0001998C 317C F800 0012             		move.w	#-$800,$12(a0)
00019992 4A68 0036                  		tst.w	$36(a0)
00019996 6600                       		bne.s	loc_19362
00019998 E0E8 0012                  		asr	$12(a0)
0001999C                            
0001999C                            loc_19362:
0001999C 7000                       		moveq	#0,d0
0001999E 6000                       		bra.s	loc_1937C
000199A0                            ; ===========================================================================
000199A0                            
000199A0                            loc_19366:
000199A0 7000                       		moveq	#0,d0
000199A2 0C68 001E 003C             		cmpi.w	#$1E,$3C(a0)
000199A8 6E00                       		bgt.s	loc_1937C
000199AA 7002                       		moveq	#2,d0
000199AC 0828 0001 003D             		btst	#1,$3D(a0)
000199B2 6700                       		beq.s	loc_1937C
000199B4 4440                       		neg.w	d0
000199B6                            
000199B6                            loc_1937C:
000199B6 D068 0038                  		add.w	$38(a0),d0
000199BA 3140 000C                  		move.w	d0,$C(a0)
000199BE 3168 0030 0008             		move.w	$30(a0),8(a0)
000199C4 6000 FE76                  		bra.w	loc_19202
000199C8                            ; ===========================================================================
000199C8                            
000199C8                            loc_1938E:				; XREF: off_192FA
000199C8 303C 04DA                  		move.w	#$4DA,d0
000199CC 4A68 0036                  		tst.w	$36(a0)
000199D0 6700                       		beq.s	loc_1939C
000199D2 0440 0018                  		subi.w	#$18,d0
000199D6                            
000199D6                            loc_1939C:
000199D6 B068 0038                  		cmp.w	$38(a0),d0
000199DA 6D00                       		blt.s	loc_193BE
000199DC 317C 0008 003C             		move.w	#8,$3C(a0)
000199E2 4A68 0036                  		tst.w	$36(a0)
000199E6 6700                       		beq.s	loc_193B4
000199E8 317C 002D 003C             		move.w	#$2D,$3C(a0)
000199EE                            
000199EE                            loc_193B4:
000199EE 5428 0028                  		addq.b	#2,$28(a0)
000199F2 4268 0012                  		clr.w	$12(a0)
000199F6 6000                       		bra.s	loc_193CC
000199F8                            ; ===========================================================================
000199F8                            
000199F8                            loc_193BE:
000199F8 0C68 FFC0 0012             		cmpi.w	#-$40,$12(a0)
000199FE 6C00                       		bge.s	loc_193CC
00019A00 0668 000C 0012             		addi.w	#$C,$12(a0)
00019A06                            
00019A06                            loc_193CC:
00019A06 6000 FE24                  		bra.w	loc_191F2
00019A0A                            ; ===========================================================================
00019A0A                            
00019A0A                            loc_193D0:				; XREF: off_192FA
00019A0A 5368 003C                  		subq.w	#1,$3C(a0)
00019A0E 6E00                       		bgt.s	loc_19406
00019A10 6B00                       		bmi.s	loc_193EE
00019A12 70FF                       		moveq	#-1,d0
00019A14 3028 0036                  		move.w	$36(a0),d0
00019A18 6700                       		beq.s	loc_193E8
00019A1A 2240                       		movea.l	d0,a1
00019A1C 137C 000A 0029             		move.b	#$A,$29(a1)
00019A22                            
00019A22                            loc_193E8:
00019A22 4268 0036                  		clr.w	$36(a0)
00019A26 6000                       		bra.s	loc_19406
00019A28                            ; ===========================================================================
00019A28                            
00019A28                            loc_193EE:
00019A28 0C68 FFE2 003C             		cmpi.w	#-$1E,$3C(a0)
00019A2E 6600                       		bne.s	loc_19406
00019A30 4228 0029                  		clr.b	$29(a0)
00019A34 5528 0025                  		subq.b	#2,$25(a0)
00019A38 117C 00FF 003D             		move.b	#-1,$3D(a0)
00019A3E 6000                       		bra.s	loc_19446
00019A40                            ; ===========================================================================
00019A40                            
00019A40                            loc_19406:
00019A40 7001                       		moveq	#1,d0
00019A42 4A68 0036                  		tst.w	$36(a0)
00019A46 6700                       		beq.s	loc_19410
00019A48 7002                       		moveq	#2,d0
00019A4A                            
00019A4A                            loc_19410:
00019A4A 0C68 04DA 0038             		cmpi.w	#$4DA,$38(a0)
00019A50 6700                       		beq.s	loc_19424
00019A52 6D00                       		blt.s	loc_1941C
00019A54 4440                       		neg.w	d0
00019A56                            
00019A56                            loc_1941C:
00019A56 4A68 0036                  		tst.w	$36(a0)
00019A5A D168 0038                  		add.w	d0,$38(a0)
00019A5E                            
00019A5E                            loc_19424:
00019A5E 7000                       		moveq	#0,d0
00019A60 4A68 0036                  		tst.w	$36(a0)
00019A64 6700                       		beq.s	loc_19438
00019A66 7002                       		moveq	#2,d0
00019A68 0828 0000 003D             		btst	#0,$3D(a0)
00019A6E 6700                       		beq.s	loc_19438
00019A70 4440                       		neg.w	d0
00019A72                            
00019A72                            loc_19438:
00019A72 D068 0038                  		add.w	$38(a0),d0
00019A76 3140 000C                  		move.w	d0,$C(a0)
00019A7A 3168 0030 0008             		move.w	$30(a0),8(a0)
00019A80                            
00019A80                            loc_19446:
00019A80 6000 FDBA                  		bra.w	loc_19202
00019A84                            
00019A84                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019A84                            
00019A84                            
00019A84                            Obj75_FindBlocks:			; XREF: loc_192AE
00019A84 4268 0036                  		clr.w	$36(a0)
00019A88 43F8 D040                  		lea	($FFFFD040).w,a1
00019A8C 703E                       		moveq	#$3E,d0
00019A8E 7276                       		moveq	#$76,d1
00019A90 1428 0034                  		move.b	$34(a0),d2
00019A94                            
00019A94                            Obj75_FindLoop:
00019A94 B211                       		cmp.b	(a1),d1		; is object a SYZ boss block?
00019A96 6600                       		bne.s	loc_1946A	; if not, branch
00019A98 B429 0028                  		cmp.b	$28(a1),d2
00019A9C 6600                       		bne.s	loc_1946A
00019A9E 3149 0036                  		move.w	a1,$36(a0)
00019AA2 6000                       		bra.s	locret_19472
00019AA4                            ; ===========================================================================
00019AA4                            
00019AA4                            loc_1946A:
00019AA4 43E9 0040                  		lea	$40(a1),a1	; next object RAM entry
00019AA8 51C8 FFEA                  		dbf	d0,Obj75_FindLoop
00019AAC                            
00019AAC                            locret_19472:
00019AAC 4E75                       		rts	
00019AAE                            ; End of function Obj75_FindBlocks
00019AAE                            
00019AAE                            ; ===========================================================================
00019AAE                            
00019AAE                            loc_19474:				; XREF: Obj75_ShipIndex
00019AAE 5368 003C                  		subq.w	#1,$3C(a0)
00019AB2 6B00                       		bmi.s	loc_1947E
00019AB4 6000 E3F8                  		bra.w	BossDefeated
00019AB8                            ; ===========================================================================
00019AB8                            
00019AB8                            loc_1947E:
00019AB8 5428 0025                  		addq.b	#2,$25(a0)
00019ABC 4268 0012                  		clr.w	$12(a0)
00019AC0 08E8 0000 0022             		bset	#0,$22(a0)
00019AC6 08A8 0007 0022             		bclr	#7,$22(a0)
00019ACC 4268 0010                  		clr.w	$10(a0)
00019AD0 317C FFFF 003C             		move.w	#-1,$3C(a0)
00019AD6 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00019ADA 6600                       		bne.s	loc_194A8
00019ADC 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00019AE2                            
00019AE2                            loc_194A8:
00019AE2 6000 FD58                  		bra.w	loc_19202
00019AE6                            ; ===========================================================================
00019AE6                            
00019AE6                            loc_194AC:				; XREF: Obj75_ShipIndex
00019AE6 5268 003C                  		addq.w	#1,$3C(a0)
00019AEA 6700                       		beq.s	loc_194BC
00019AEC 6A00                       		bpl.s	loc_194C2
00019AEE 0668 0018 0012             		addi.w	#$18,$12(a0)
00019AF4 6000                       		bra.s	loc_194EE
00019AF6                            ; ===========================================================================
00019AF6                            
00019AF6                            loc_194BC:
00019AF6 4268 0012                  		clr.w	$12(a0)
00019AFA 6000                       		bra.s	loc_194EE
00019AFC                            ; ===========================================================================
00019AFC                            
00019AFC                            loc_194C2:
00019AFC 0C68 0020 003C             		cmpi.w	#$20,$3C(a0)
00019B02 6500                       		bcs.s	loc_194DA
00019B04 6700                       		beq.s	loc_194E0
00019B06 0C68 002A 003C             		cmpi.w	#$2A,$3C(a0)
00019B0C 6500                       		bcs.s	loc_194EE
00019B0E 5428 0025                  		addq.b	#2,$25(a0)
00019B12 6000                       		bra.s	loc_194EE
00019B14                            ; ===========================================================================
00019B14                            
00019B14                            loc_194DA:
00019B14 5168 0012                  		subq.w	#8,$12(a0)
00019B18 6000                       		bra.s	loc_194EE
00019B1A                            ; ===========================================================================
00019B1A                            
00019B1A                            loc_194E0:
00019B1A 4268 0012                  		clr.w	$12(a0)
00019B1E 303C 0085                  		move.w	#$85,d0
00019B22 4EB9 0000 15B6             		jsr	(PlaySound).l	; play SYZ music
00019B28                            
00019B28                            loc_194EE:
00019B28 6000 FD02                  		bra.w	loc_191F2
00019B2C                            ; ===========================================================================
00019B2C                            
00019B2C                            loc_194F2:				; XREF: Obj75_ShipIndex
00019B2C 317C 0400 0010             		move.w	#$400,$10(a0)
00019B32 317C FFC0 0012             		move.w	#-$40,$12(a0)
00019B38 0C78 2D40 F72A             		cmpi.w	#$2D40,($FFFFF72A).w
00019B3E 6400                       		bcc.s	loc_1950C
00019B40 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00019B44 6000                       		bra.s	loc_19512
00019B46                            ; ===========================================================================
00019B46                            
00019B46                            loc_1950C:
00019B46 4A28 0001                  		tst.b	1(a0)
00019B4A 6A00                       		bpl.s	Obj75_ShipDelete
00019B4C                            
00019B4C                            loc_19512:
00019B4C 6100 E3A2                  		bsr.w	BossMove
00019B50 6000 FCC6                  		bra.w	loc_191DE
00019B54                            ; ===========================================================================
00019B54                            
00019B54                            Obj75_ShipDelete:
00019B54 4EF9 0000 DBE4             		jmp	DeleteObject
00019B5A                            ; ===========================================================================
00019B5A                            
00019B5A                            Obj75_FaceMain:				; XREF: Obj75_Index
00019B5A 7201                       		moveq	#1,d1
00019B5C 2268 0034                  		movea.l	$34(a0),a1
00019B60 7000                       		moveq	#0,d0
00019B62 1029 0025                  		move.b	$25(a1),d0
00019B66 303B 0000                  		move.w	off_19546(pc,d0.w),d0
00019B6A 4EBB 0000                  		jsr	off_19546(pc,d0.w)
00019B6E 1141 001C                  		move.b	d1,$1C(a0)
00019B72 1010                       		move.b	(a0),d0
00019B74 B011                       		cmp.b	(a1),d0
00019B76 6600                       		bne.s	Obj75_FaceDelete
00019B78 6000                       		bra.s	loc_195BE
00019B7A                            ; ===========================================================================
00019B7A                            
00019B7A                            Obj75_FaceDelete:
00019B7A 4EF9 0000 DBE4             		jmp	DeleteObject
00019B80                            ; ===========================================================================
00019B80 0000 0000                  off_19546:	dc.w loc_19574-off_19546, loc_19574-off_19546
00019B84 0000 0000                  		dc.w loc_1955A-off_19546, loc_19552-off_19546
00019B88 0000 0000                  		dc.w loc_19552-off_19546, loc_19556-off_19546
00019B8C                            ; ===========================================================================
00019B8C                            
00019B8C                            loc_19552:				; XREF: off_19546
00019B8C 720A                       		moveq	#$A,d1
00019B8E 4E75                       		rts	
00019B90                            ; ===========================================================================
00019B90                            
00019B90                            loc_19556:				; XREF: off_19546
00019B90 7206                       		moveq	#6,d1
00019B92 4E75                       		rts	
00019B94                            ; ===========================================================================
00019B94                            
00019B94                            loc_1955A:				; XREF: off_19546
00019B94 7000                       		moveq	#0,d0
00019B96 1029 0028                  		move.b	$28(a1),d0
00019B9A 303B 0000                  		move.w	off_19568(pc,d0.w),d0
00019B9E 4EFB 0000                  		jmp	off_19568(pc,d0.w)
00019BA2                            ; ===========================================================================
00019BA2 0000 0000                  off_19568:	dc.w loc_19570-off_19568, loc_19572-off_19568
00019BA6 0000 0000                  		dc.w loc_19570-off_19568, loc_19570-off_19568
00019BAA                            ; ===========================================================================
00019BAA                            
00019BAA                            loc_19570:				; XREF: off_19568
00019BAA 6000                       		bra.s	loc_19574
00019BAC                            ; ===========================================================================
00019BAC                            
00019BAC                            loc_19572:				; XREF: off_19568
00019BAC 7206                       		moveq	#6,d1
00019BAE                            
00019BAE                            loc_19574:				; XREF: off_19546
00019BAE 4A29 0020                  		tst.b	$20(a1)
00019BB2 6600                       		bne.s	loc_1957E
00019BB4 7205                       		moveq	#5,d1
00019BB6 4E75                       		rts	
00019BB8                            ; ===========================================================================
00019BB8                            
00019BB8                            loc_1957E:
00019BB8 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00019BBE 6500                       		bcs.s	locret_19588
00019BC0 7204                       		moveq	#4,d1
00019BC2                            
00019BC2                            locret_19588:
00019BC2 4E75                       		rts	
00019BC4                            ; ===========================================================================
00019BC4                            
00019BC4                            Obj75_FlameMain:			; XREF: Obj75_Index
00019BC4 117C 0007 001C             		move.b	#7,$1C(a0)
00019BCA 2268 0034                  		movea.l	$34(a0),a1
00019BCE 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00019BD4 6600                       		bne.s	loc_195AA
00019BD6 117C 000B 001C             		move.b	#$B,$1C(a0)
00019BDC 4A28 0001                  		tst.b	1(a0)
00019BE0 6A00                       		bpl.s	Obj75_FlameDelete
00019BE2 6000                       		bra.s	loc_195B6
00019BE4                            ; ===========================================================================
00019BE4                            
00019BE4                            loc_195AA:
00019BE4 4A69 0010                  		tst.w	$10(a1)
00019BE8 6700                       		beq.s	loc_195B6
00019BEA 117C 0008 001C             		move.b	#8,$1C(a0)
00019BF0                            
00019BF0                            loc_195B6:
00019BF0 6000                       		bra.s	loc_195BE
00019BF2                            ; ===========================================================================
00019BF2                            
00019BF2                            Obj75_FlameDelete:
00019BF2 4EF9 0000 DBE4             		jmp	DeleteObject
00019BF8                            ; ===========================================================================
00019BF8                            
00019BF8                            loc_195BE:
00019BF8 43F9 0001 8300             		lea	(Ani_Eggman).l,a1
00019BFE 4EB9 0000 AC42             		jsr	AnimateSprite
00019C04 2268 0034                  		movea.l	$34(a0),a1
00019C08 3169 0008 0008             		move.w	8(a1),8(a0)
00019C0E 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019C14                            
00019C14                            loc_195DA:
00019C14 1169 0022 0022             		move.b	$22(a1),$22(a0)
00019C1A 7003                       		moveq	#3,d0
00019C1C C028 0022                  		and.b	$22(a0),d0
00019C20 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019C26 8128 0001                  		or.b	d0,1(a0)
00019C2A 4EF9 0000 DBA8             		jmp	DisplaySprite
00019C30                            ; ===========================================================================
00019C30                            
00019C30                            Obj75_SpikeMain:			; XREF: Obj75_Index
00019C30 217C 0001 8418 0004        		move.l	#Map_BossItems,4(a0)
00019C38 317C 246C 0002             		move.w	#$246C,2(a0)
00019C3E 117C 0005 001A             		move.b	#5,$1A(a0)
00019C44 2268 0034                  		movea.l	$34(a0),a1
00019C48 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00019C4E 6600                       		bne.s	loc_1961C
00019C50 4A28 0001                  		tst.b	1(a0)
00019C54 6A00                       		bpl.s	Obj75_SpikeDelete
00019C56                            
00019C56                            loc_1961C:
00019C56 3169 0008 0008             		move.w	8(a1),8(a0)
00019C5C 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019C62 3028 003C                  		move.w	$3C(a0),d0
00019C66 0C29 0004 0025             		cmpi.b	#4,$25(a1)
00019C6C 6600                       		bne.s	loc_19652
00019C6E 0C29 0006 0028             		cmpi.b	#6,$28(a1)
00019C74 6700                       		beq.s	loc_1964C
00019C76 4A29 0028                  		tst.b	$28(a1)
00019C7A 6600                       		bne.s	loc_19658
00019C7C 0C40 0094                  		cmpi.w	#$94,d0
00019C80 6C00                       		bge.s	loc_19658
00019C82 5E40                       		addq.w	#7,d0
00019C84 6000                       		bra.s	loc_19658
00019C86                            ; ===========================================================================
00019C86                            
00019C86                            loc_1964C:
00019C86 4A69 003C                  		tst.w	$3C(a1)
00019C8A 6A00                       		bpl.s	loc_19658
00019C8C                            
00019C8C                            loc_19652:
00019C8C 4A40                       		tst.w	d0
00019C8E 6F00                       		ble.s	loc_19658
00019C90 5B40                       		subq.w	#5,d0
00019C92                            
00019C92                            loc_19658:
00019C92 3140 003C                  		move.w	d0,$3C(a0)
00019C96 E440                       		asr.w	#2,d0
00019C98 D168 000C                  		add.w	d0,$C(a0)
00019C9C 117C 0008 0019             		move.b	#8,$19(a0)
00019CA2 117C 000C 0016             		move.b	#$C,$16(a0)
00019CA8 4228 0020                  		clr.b	$20(a0)
00019CAC 2268 0034                  		movea.l	$34(a0),a1
00019CB0 4A29 0020                  		tst.b	$20(a1)
00019CB4 6700                       		beq.s	loc_19688
00019CB6 4A29 0029                  		tst.b	$29(a1)
00019CBA 6600                       		bne.s	loc_19688
00019CBC 117C 0084 0020             		move.b	#$84,$20(a0)
00019CC2                            
00019CC2                            loc_19688:
00019CC2 6000 FF50                  		bra.w	loc_195DA
00019CC6                            ; ===========================================================================
00019CC6                            
00019CC6                            Obj75_SpikeDelete:
00019CC6 4EF9 0000 DBE4             		jmp	DeleteObject
00019CCC                            ; ===========================================================================
00019CCC                            ; ---------------------------------------------------------------------------
00019CCC                            ; Object 76 - blocks that Eggman picks up (SYZ)
00019CCC                            ; ---------------------------------------------------------------------------
00019CCC                            
00019CCC                            Obj76:					; XREF: Obj_Index
00019CCC 7000                       		moveq	#0,d0
00019CCE 1028 0024                  		move.b	$24(a0),d0
00019CD2 323B 0000                  		move.w	Obj76_Index(pc,d0.w),d1
00019CD6 4EFB 1000                  		jmp	Obj76_Index(pc,d1.w)
00019CDA                            ; ===========================================================================
00019CDA 0000                       Obj76_Index:	dc.w Obj76_Main-Obj76_Index
00019CDC 0000                       		dc.w Obj76_Action-Obj76_Index
00019CDE 0000                       		dc.w loc_19762-Obj76_Index
00019CE0                            ; ===========================================================================
00019CE0                            
00019CE0                            Obj76_Main:				; XREF: Obj76_Index
00019CE0 7800                       		moveq	#0,d4
00019CE2 3A3C 2C10                  		move.w	#$2C10,d5
00019CE6 7C09                       		moveq	#9,d6
00019CE8 43D0                       		lea	(a0),a1
00019CEA 6000                       		bra.s	Obj76_MakeBlock
00019CEC                            ; ===========================================================================
00019CEC                            
00019CEC                            Obj76_Loop:
00019CEC 4EB9 0000 E02E             		jsr	SingleObjLoad
00019CF2 6600                       		bne.s	Obj76_ExitLoop
00019CF4                            
00019CF4                            Obj76_MakeBlock:			; XREF: Obj76_Main
00019CF4 12BC 0076                  		move.b	#$76,(a1)
00019CF8 237C 0000 0000 0004        		move.l	#Map_obj76,4(a1)
00019D00 337C 4000 0002             		move.w	#$4000,2(a1)
00019D06 137C 0004 0001             		move.b	#4,1(a1)
00019D0C 137C 0010 0019             		move.b	#$10,$19(a1)
00019D12 137C 0010 0016             		move.b	#$10,$16(a1)
00019D18 137C 0003 0018             		move.b	#3,$18(a1)
00019D1E 3345 0008                  		move.w	d5,8(a1)	; set x-position
00019D22 337C 0582 000C             		move.w	#$582,$C(a1)
00019D28 3344 0028                  		move.w	d4,$28(a1)
00019D2C 0644 0101                  		addi.w	#$101,d4
00019D30 0645 0020                  		addi.w	#$20,d5		; add $20 to next x-position
00019D34 5429 0024                  		addq.b	#2,$24(a1)
00019D38 51CE FFB2                  		dbf	d6,Obj76_Loop	; repeat sequence 9 more times
00019D3C                            
00019D3C                            Obj76_ExitLoop:
00019D3C 4E75                       		rts	
00019D3E                            ; ===========================================================================
00019D3E                            
00019D3E                            Obj76_Action:				; XREF: Obj76_Index
00019D3E 1028 0029                  		move.b	$29(a0),d0
00019D42 B028 0028                  		cmp.b	$28(a0),d0
00019D46 6700                       		beq.s	Obj76_Solid
00019D48 4A00                       		tst.b	d0
00019D4A 6B00                       		bmi.s	loc_19718
00019D4C                            
00019D4C                            loc_19712:
00019D4C 6100 0000                  		bsr.w	Obj76_Break
00019D50 6000                       		bra.s	Obj76_Display
00019D52                            ; ===========================================================================
00019D52                            
00019D52                            loc_19718:
00019D52 2268 0034                  		movea.l	$34(a0),a1
00019D56 4A29 0021                  		tst.b	$21(a1)
00019D5A 67F0                       		beq.s	loc_19712
00019D5C 3169 0008 0008             		move.w	8(a1),8(a0)
00019D62 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019D68 0668 002C 000C             		addi.w	#$2C,$C(a0)
00019D6E B2C8                       		cmpa.w	a0,a1
00019D70 6500                       		bcs.s	Obj76_Display
00019D72 3029 0012                  		move.w	$12(a1),d0
00019D76 48C0                       		ext.l	d0
00019D78 E080                       		asr.l	#8,d0
00019D7A D168 000C                  		add.w	d0,$C(a0)
00019D7E 6000                       		bra.s	Obj76_Display
00019D80                            ; ===========================================================================
00019D80                            
00019D80                            Obj76_Solid:				; XREF: Obj76_Action
00019D80 323C 001B                  		move.w	#$1B,d1
00019D84 343C 0010                  		move.w	#$10,d2
00019D88 363C 0011                  		move.w	#$11,d3
00019D8C 3828 0008                  		move.w	8(a0),d4
00019D90 4EB9 0000 FF78             		jsr	SolidObject
00019D96                            
00019D96                            Obj76_Display:				; XREF: Obj76_Action
00019D96 4EF9 0000 DBA8             		jmp	DisplaySprite
00019D9C                            ; ===========================================================================
00019D9C                            
00019D9C                            loc_19762:				; XREF: Obj76_Index
00019D9C 4A28 0001                  		tst.b	1(a0)
00019DA0 6A00                       		bpl.s	Obj76_Delete
00019DA2 4EB9 0000 DB56             		jsr	ObjectFall
00019DA8 4EF9 0000 DBA8             		jmp	DisplaySprite
00019DAE                            ; ===========================================================================
00019DAE                            
00019DAE                            Obj76_Delete:
00019DAE 4EF9 0000 DBE4             		jmp	DeleteObject
00019DB4                            
00019DB4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019DB4                            
00019DB4                            
00019DB4                            Obj76_Break:				; XREF: Obj76_Action
00019DB4 49FA 0000                  		lea	Obj76_FragSpeed(pc),a4
00019DB8 4BFA 0000                  		lea	Obj76_FragPos(pc),a5
00019DBC 7801                       		moveq	#1,d4
00019DBE 7203                       		moveq	#3,d1
00019DC0 7438                       		moveq	#$38,d2
00019DC2 5428 0024                  		addq.b	#2,$24(a0)
00019DC6 117C 0008 0019             		move.b	#8,$19(a0)
00019DCC 117C 0008 0016             		move.b	#8,$16(a0)
00019DD2 43D0                       		lea	(a0),a1
00019DD4 6000                       		bra.s	Obj76_MakeFrag
00019DD6                            ; ===========================================================================
00019DD6                            
00019DD6                            Obj76_LoopFrag:
00019DD6 4EB9 0000 E044             		jsr	SingleObjLoad2
00019DDC 6600                       		bne.s	loc_197D4
00019DDE                            
00019DDE                            Obj76_MakeFrag:
00019DDE 45D0                       		lea	(a0),a2
00019DE0 47D1                       		lea	(a1),a3
00019DE2 7603                       		moveq	#3,d3
00019DE4                            
00019DE4                            loc_197AA:
00019DE4 26DA                       		move.l	(a2)+,(a3)+
00019DE6 26DA                       		move.l	(a2)+,(a3)+
00019DE8 26DA                       		move.l	(a2)+,(a3)+
00019DEA 26DA                       		move.l	(a2)+,(a3)+
00019DEC 51CB FFF6                  		dbf	d3,loc_197AA
00019DF0                            
00019DF0 335C 0010                  		move.w	(a4)+,$10(a1)
00019DF4 335C 0012                  		move.w	(a4)+,$12(a1)
00019DF8 361D                       		move.w	(a5)+,d3
00019DFA D769 0008                  		add.w	d3,8(a1)
00019DFE 361D                       		move.w	(a5)+,d3
00019E00 D769 000C                  		add.w	d3,$C(a1)
00019E04 1344 001A                  		move.b	d4,$1A(a1)
00019E08 5244                       		addq.w	#1,d4
00019E0A 51C9 FFCA                  		dbf	d1,Obj76_LoopFrag ; repeat sequence 3 more times
00019E0E                            
00019E0E                            loc_197D4:
00019E0E 303C 00CB                  		move.w	#$CB,d0
00019E12 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play smashing sound
00019E18                            ; End of function Obj76_Break
00019E18                            
00019E18                            ; ===========================================================================
00019E18 FE80 FE00                  Obj76_FragSpeed:dc.w $FE80, $FE00
00019E1C 0180 FE00                  		dc.w $180, $FE00
00019E20 FF00 FF00                  		dc.w $FF00, $FF00
00019E24 0100 FF00                  		dc.w $100, $FF00
00019E28 FFF8 FFF8                  Obj76_FragPos:	dc.w $FFF8, $FFF8
00019E2C 0010 0000                  		dc.w $10, 0
00019E30 0000 0010                  		dc.w 0,	$10
00019E34 0010 0010                  		dc.w $10, $10
00019E38                            ; ---------------------------------------------------------------------------
00019E38                            ; Sprite mappings - blocks that	Eggman picks up (SYZ)
00019E38                            ; ---------------------------------------------------------------------------
00019E38                            Map_obj76:
00019E38                            	include "_maps\obj76.asm"
00019E38                            ; ---------------------------------------------------------------------------
00019E38                            ; Sprite mappings - blocks that	Robotnik picks up (SYZ)
00019E38                            ; ---------------------------------------------------------------------------
00019E38 0000 0000                  		dc.w byte_19808-Map_obj76, byte_19814-Map_obj76
00019E3C 0000 0000                  		dc.w byte_1981A-Map_obj76, byte_19820-Map_obj76
00019E40 0000                       		dc.w byte_19826-Map_obj76
00019E42 02                         byte_19808:	dc.b 2
00019E43 F00D 0071 F0               		dc.b $F0, $D, 0, $71, $F0
00019E48 000D 0079 F0               		dc.b 0,	$D, 0, $79, $F0
00019E4D 00                         		dc.b 0
00019E4E 01                         byte_19814:	dc.b 1
00019E4F F805 0071 F8               		dc.b $F8, 5, 0,	$71, $F8
00019E54 01                         byte_1981A:	dc.b 1
00019E55 F805 0075 F8               		dc.b $F8, 5, 0,	$75, $F8
00019E5A 01                         byte_19820:	dc.b 1
00019E5B F805 0079 F8               		dc.b $F8, 5, 0,	$79, $F8
00019E60 01                         byte_19826:	dc.b 1
00019E61 F805 007D F8               		dc.b $F8, 5, 0,	$7D, $F8
00019E66                            		even
00019E66                            		even
00019E66                            
00019E66                            ; ===========================================================================
00019E66                            
00019E66                            loc_1982C:				; XREF: loc_19C62; loc_19C80
00019E66 4EF9 0000 DBE4             		jmp	DeleteObject
00019E6C                            ; ===========================================================================
00019E6C                            ; ---------------------------------------------------------------------------
00019E6C                            ; Object 82 - Eggman (SBZ2)
00019E6C                            ; ---------------------------------------------------------------------------
00019E6C                            
00019E6C                            Obj82:					; XREF: Obj_Index
00019E6C 7000                       		moveq	#0,d0
00019E6E 1028 0024                  		move.b	$24(a0),d0
00019E72 323B 0000                  		move.w	Obj82_Index(pc,d0.w),d1
00019E76 4EFB 1000                  		jmp	Obj82_Index(pc,d1.w)
00019E7A                            ; ===========================================================================
00019E7A 0000                       Obj82_Index:	dc.w Obj82_Main-Obj82_Index
00019E7C 0000                       		dc.w Obj82_Eggman-Obj82_Index
00019E7E 0000                       		dc.w Obj82_Switch-Obj82_Index
00019E80                            
00019E80 0200 03                    Obj82_ObjData:	dc.b 2,	0, 3		; routine number, animation, priority
00019E83 0400 03                    		dc.b 4,	0, 3
00019E86                            ; ===========================================================================
00019E86                            
00019E86                            Obj82_Main:				; XREF: Obj82_Index
00019E86 45FA FFF8                  		lea	Obj82_ObjData(pc),a2
00019E8A 317C 2160 0008             		move.w	#$2160,8(a0)
00019E90 317C 05A4 000C             		move.w	#$5A4,$C(a0)
00019E96 117C 000F 0020             		move.b	#$F,$20(a0)
00019E9C 117C 0010 0021             		move.b	#$10,$21(a0)
00019EA2 08A8 0000 0022             		bclr	#0,$22(a0)
00019EA8 4228 0025                  		clr.b	$25(a0)
00019EAC 115A 0024                  		move.b	(a2)+,$24(a0)
00019EB0 115A 001C                  		move.b	(a2)+,$1C(a0)
00019EB4 115A 0018                  		move.b	(a2)+,$18(a0)
00019EB8 217C 0000 0000 0004        		move.l	#Map_obj82,4(a0)
00019EC0 317C 0400 0002             		move.w	#$400,2(a0)
00019EC6 117C 0004 0001             		move.b	#4,1(a0)
00019ECC 08E8 0007 0001             		bset	#7,1(a0)
00019ED2 117C 0020 0019             		move.b	#$20,$19(a0)
00019ED8 4EB9 0000 E044             		jsr	SingleObjLoad2
00019EDE 6600                       		bne.s	Obj82_Eggman
00019EE0 2348 0034                  		move.l	a0,$34(a1)
00019EE4 12BC 0082                  		move.b	#$82,(a1)	; load switch object
00019EE8 337C 2130 0008             		move.w	#$2130,8(a1)
00019EEE 337C 05BC 000C             		move.w	#$5BC,$C(a1)
00019EF4 4228 0025                  		clr.b	$25(a0)
00019EF8 135A 0024                  		move.b	(a2)+,$24(a1)
00019EFC 135A 001C                  		move.b	(a2)+,$1C(a1)
00019F00 135A 0018                  		move.b	(a2)+,$18(a1)
00019F04 237C 0000 C39C 0004        		move.l	#Map_obj32,4(a1)
00019F0C 337C 04A4 0002             		move.w	#$4A4,2(a1)
00019F12 137C 0004 0001             		move.b	#4,1(a1)
00019F18 08E9 0007 0001             		bset	#7,1(a1)
00019F1E 137C 0010 0019             		move.b	#$10,$19(a1)
00019F24 137C 0000 001A             		move.b	#0,$1A(a1)
00019F2A                            
00019F2A                            Obj82_Eggman:				; XREF: Obj82_Index
00019F2A 7000                       		moveq	#0,d0
00019F2C 1028 0025                  		move.b	$25(a0),d0
00019F30 323B 0000                  		move.w	Obj82_EggIndex(pc,d0.w),d1
00019F34 4EBB 1000                  		jsr	Obj82_EggIndex(pc,d1.w)
00019F38 43FA 0000                  		lea	Ani_obj82(pc),a1
00019F3C 4EB9 0000 AC42             		jsr	AnimateSprite
00019F42 4EF9 0000 DBA8             		jmp	DisplaySprite
00019F48                            ; ===========================================================================
00019F48 0000                       Obj82_EggIndex:	dc.w Obj82_ChkSonic-Obj82_EggIndex
00019F4A 0000                       		dc.w Obj82_PreLeap-Obj82_EggIndex
00019F4C 0000                       		dc.w Obj82_Leap-Obj82_EggIndex
00019F4E 0000                       		dc.w loc_19934-Obj82_EggIndex
00019F50                            ; ===========================================================================
00019F50                            
00019F50                            Obj82_ChkSonic:				; XREF: Obj82_EggIndex
00019F50 3028 0008                  		move.w	8(a0),d0
00019F54 9078 D008                  		sub.w	($FFFFD008).w,d0
00019F58 0C40 0080                  		cmpi.w	#128,d0		; is Sonic within 128 pixels of	Eggman?
00019F5C 6400                       		bcc.s	loc_19934	; if not, branch
00019F5E 5428 0025                  		addq.b	#2,$25(a0)
00019F62 317C 00B4 003C             		move.w	#180,$3C(a0)	; set delay to 3 seconds
00019F68 117C 0001 001C             		move.b	#1,$1C(a0)
00019F6E                            
00019F6E                            loc_19934:				; XREF: Obj82_EggIndex
00019F6E 4EF9 0000 DB82             		jmp	SpeedToPos
00019F74                            ; ===========================================================================
00019F74                            
00019F74                            Obj82_PreLeap:				; XREF: Obj82_EggIndex
00019F74 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from time delay
00019F78 6600                       		bne.s	loc_19954	; if time remains, branch
00019F7A 5428 0025                  		addq.b	#2,$25(a0)
00019F7E 117C 0002 001C             		move.b	#2,$1C(a0)
00019F84 5868 000C                  		addq.w	#4,$C(a0)
00019F88 317C 000F 003C             		move.w	#15,$3C(a0)
00019F8E                            
00019F8E                            loc_19954:
00019F8E 60DE                       		bra.s	loc_19934
00019F90                            ; ===========================================================================
00019F90                            
00019F90                            Obj82_Leap:				; XREF: Obj82_EggIndex
00019F90 5368 003C                  		subq.w	#1,$3C(a0)
00019F94 6E00                       		bgt.s	loc_199D0
00019F96 6600                       		bne.s	loc_1996A
00019F98 317C FF04 0010             		move.w	#-$FC,$10(a0)	; make Eggman leap
00019F9E 317C FC40 0012             		move.w	#-$3C0,$12(a0)
00019FA4                            
00019FA4                            loc_1996A:
00019FA4 0C68 2132 0008             		cmpi.w	#$2132,8(a0)
00019FAA 6E00                       		bgt.s	loc_19976
00019FAC 4268 0010                  		clr.w	$10(a0)
00019FB0                            
00019FB0                            loc_19976:
00019FB0 0668 0024 0012             		addi.w	#$24,$12(a0)
00019FB6 4A68 0012                  		tst.w	$12(a0)
00019FBA 6B00                       		bmi.s	Obj82_FindBlocks
00019FBC 0C68 0595 000C             		cmpi.w	#$595,$C(a0)
00019FC2 6500                       		bcs.s	Obj82_FindBlocks
00019FC4 317C 5357 0028             		move.w	#$5357,$28(a0)
00019FCA 0C68 059B 000C             		cmpi.w	#$59B,$C(a0)
00019FD0 6500                       		bcs.s	Obj82_FindBlocks
00019FD2 317C 059B 000C             		move.w	#$59B,$C(a0)
00019FD8 4268 0012                  		clr.w	$12(a0)
00019FDC                            
00019FDC                            Obj82_FindBlocks:
00019FDC 3028 0010                  		move.w	$10(a0),d0
00019FE0 8068 0012                  		or.w	$12(a0),d0
00019FE4 6600                       		bne.s	loc_199D0
00019FE6 43F8 D000                  		lea	($FFFFD000).w,a1 ; start at the	first object RAM
00019FEA 703E                       		moveq	#$3E,d0
00019FEC 7240                       		moveq	#$40,d1
00019FEE                            
00019FEE                            Obj82_FindLoop:	
00019FEE D2C1                       		adda.w	d1,a1		; jump to next object RAM
00019FF0 0C11 0083                  		cmpi.b	#$83,(a1)	; is object a block? (object $83)
00019FF4 57C8 FFF8                  		dbeq	d0,Obj82_FindLoop ; if not, repeat (max	$3E times)
00019FF8                            
00019FF8 6600                       		bne.s	loc_199D0
00019FFA 337C 474F 0028             		move.w	#$474F,$28(a1)	; set block to disintegrate
0001A000 5428 0025                  		addq.b	#2,$25(a0)
0001A004 117C 0001 001C             		move.b	#1,$1C(a0)
0001A00A                            
0001A00A                            loc_199D0:
0001A00A 6000 FF62                  		bra.w	loc_19934
0001A00E                            ; ===========================================================================
0001A00E                            
0001A00E                            Obj82_Switch:				; XREF: Obj82_Index
0001A00E 7000                       		moveq	#0,d0
0001A010 1028 0025                  		move.b	$25(a0),d0
0001A014 303B 0000                  		move.w	Obj82_SwIndex(pc,d0.w),d0
0001A018 4EFB 0000                  		jmp	Obj82_SwIndex(pc,d0.w)
0001A01C                            ; ===========================================================================
0001A01C 0000                       Obj82_SwIndex:	dc.w loc_199E6-Obj82_SwIndex
0001A01E 0000                       		dc.w Obj82_SwDisplay-Obj82_SwIndex
0001A020                            ; ===========================================================================
0001A020                            
0001A020                            loc_199E6:				; XREF: Obj82_SwIndex
0001A020 2268 0034                  		movea.l	$34(a0),a1
0001A024 0C69 5357 0028             		cmpi.w	#$5357,$28(a1)
0001A02A 6600                       		bne.s	Obj82_SwDisplay
0001A02C 117C 0001 001A             		move.b	#1,$1A(a0)
0001A032 5428 0025                  		addq.b	#2,$25(a0)
0001A036                            
0001A036                            Obj82_SwDisplay:			; XREF: Obj82_SwIndex
0001A036 4EF9 0000 DBA8             		jmp	DisplaySprite
0001A03C                            ; ===========================================================================
0001A03C                            Ani_obj82:
0001A03C                            	include "_anim\obj82.asm"
0001A03C                            ; ---------------------------------------------------------------------------
0001A03C                            ; Animation script - Eggman (SBZ2)
0001A03C                            ; ---------------------------------------------------------------------------
0001A03C 0000                       		dc.w byte_19A10-Ani_obj82
0001A03E 0000                       		dc.w byte_19A14-Ani_obj82
0001A040 0000                       		dc.w byte_19A18-Ani_obj82
0001A042 0000                       		dc.w byte_19A20-Ani_obj82
0001A044 0000                       		dc.w byte_19A24-Ani_obj82
0001A046 0000                       		dc.w byte_19A2A-Ani_obj82
0001A048 0000                       		dc.w byte_19A30-Ani_obj82
0001A04A 7E00 FF00                  byte_19A10:	dc.b $7E, 0, $FF, 0
0001A04E 0601 02FF                  byte_19A14:	dc.b 6,	1, 2, $FF
0001A052 0E03 0404 0000 00FF        byte_19A18:	dc.b $E, 3, 4, 4, 0, 0,	0, $FF
0001A05A 0005 09FF                  byte_19A20:	dc.b 0,	5, 9, $FF
0001A05E 0607 0408 04FF             byte_19A24:	dc.b 6,	7, 4, 8, 4, $FF
0001A064 0F04 0303 FF00             byte_19A2A:	dc.b $F, 4, 3, 3, $FF, 0
0001A06A 7E06 FF00                  byte_19A30:	dc.b $7E, 6, $FF, 0
0001A06E                            		even
0001A06E                            		even
0001A06E                            
0001A06E                            ; ---------------------------------------------------------------------------
0001A06E                            ; Sprite mappings - Eggman (SBZ2)
0001A06E                            ; ---------------------------------------------------------------------------
0001A06E                            Map_obj82:
0001A06E                            	include "_maps\obj82.asm"
0001A06E                            ; ================================================================================
0001A06E                            ; Sprite Mappings - generated by Flex 2 Fri Mar 21 2025 21:13:29 GMT-0500 (Central Daylight Time)
0001A06E                            ; ================================================================================
0001A06E                            
0001A06E                            DATAA16Z12RYSAF:
0001A06E 0000 0000                  	dc.w DATAA16Z12RYSAF_0-DATAA16Z12RYSAF, DATAA16Z12RYSAF_1-DATAA16Z12RYSAF
0001A072 0000 0000                  	dc.w DATAA16Z12RYSAF_2-DATAA16Z12RYSAF, DATAA16Z12RYSAF_3-DATAA16Z12RYSAF
0001A076 0000 0000                  	dc.w DATAA16Z12RYSAF_4-DATAA16Z12RYSAF, DATAA16Z12RYSAF_5-DATAA16Z12RYSAF
0001A07A 0000 0000                  	dc.w DATAA16Z12RYSAF_6-DATAA16Z12RYSAF, DATAA16Z12RYSAF_7-DATAA16Z12RYSAF
0001A07E 0000 0000                  	dc.w DATAA16Z12RYSAF_8-DATAA16Z12RYSAF, DATAA16Z12RYSAF_9-DATAA16Z12RYSAF
0001A082 0000                       	dc.w DATAA16Z12RYSAF_A-DATAA16Z12RYSAF
0001A084 03                         DATAA16Z12RYSAF_0: dc.b $3
0001A085 FC00 006D E8               	dc.b $FC, $0, $0, $6D, $E8
0001A08A E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A08F 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A094 04                         DATAA16Z12RYSAF_1: dc.b $4
0001A095 E80D 000C F0               	dc.b $E8, $D, $0, $C, $F0
0001A09A E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A09F 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A0A4 FC00 006D E8               	dc.b $FC, $0, $0, $6D, $E8
0001A0A9 04                         DATAA16Z12RYSAF_2: dc.b $4
0001A0AA E90D 000C F0               	dc.b $E9, $D, $0, $C, $F0
0001A0AF E90E 0000 F0               	dc.b $E9, $E, $0, $0, $F0
0001A0B4 010F 005D F0               	dc.b $1, $F, $0, $5D, $F0
0001A0B9 FD00 006D E8               	dc.b $FD, $0, $0, $6D, $E8
0001A0BE 03                         DATAA16Z12RYSAF_3: dc.b $3
0001A0BF E80F 006E E8               	dc.b $E8, $F, $0, $6E, $E8
0001A0C4 080D 007E E8               	dc.b $8, $D, $0, $7E, $E8
0001A0C9 F005 0086 08               	dc.b $F0, $5, $0, $86, $8
0001A0CE 04                         DATAA16Z12RYSAF_4: dc.b $4
0001A0CF E00F 008A E8               	dc.b $E0, $F, $0, $8A, $E8
0001A0D4 000C 009A E8               	dc.b $0, $C, $0, $9A, $E8
0001A0D9 0806 009E F0               	dc.b $8, $6, $0, $9E, $F0
0001A0DE E805 00A4 08               	dc.b $E8, $5, $0, $A4, $8
0001A0E3 04                         DATAA16Z12RYSAF_5: dc.b $4
0001A0E4 E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001A0E9 E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001A0EE E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A0F3 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A0F8 07                         DATAA16Z12RYSAF_6: dc.b $7
0001A0F9 E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001A0FE E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001A103 0409 082E 00               	dc.b $4, $9, $8, $2E, $0
0001A108 0405 0834 E8               	dc.b $4, $5, $8, $34, $E8
0001A10D F00F 081E F0               	dc.b $F0, $F, $8, $1E, $F0
0001A112 F104 0838 10               	dc.b $F1, $4, $8, $38, $10
0001A117 F104 0038 E0               	dc.b $F1, $4, $0, $38, $E0
0001A11C 04                         DATAA16Z12RYSAF_7: dc.b $4
0001A11D 080D 00A8 E4               	dc.b $8, $D, $0, $A8, $E4
0001A122 E80F 00B0 EC               	dc.b $E8, $F, $0, $B0, $EC
0001A127 0805 00C0 04               	dc.b $8, $5, $0, $C0, $4
0001A12C F005 00C4 0C               	dc.b $F0, $5, $0, $C4, $C
0001A131 05                         DATAA16Z12RYSAF_8: dc.b $5
0001A132 0C05 00C8 E4               	dc.b $C, $5, $0, $C8, $E4
0001A137 E40F 00CC EC               	dc.b $E4, $F, $0, $CC, $EC
0001A13C 040C 00DC EC               	dc.b $4, $C, $0, $DC, $EC
0001A141 0C05 00E0 FC               	dc.b $C, $5, $0, $E0, $FC
0001A146 EC04 00E4 0C               	dc.b $EC, $4, $0, $E4, $C
0001A14B 08                         DATAA16Z12RYSAF_9: dc.b $8
0001A14C E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001A151 E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001A156 E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A15B 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A160 E00D 3ECE F0               	dc.b $E0, $D, $3E, $CE, $F0
0001A165 F00D 3ECE F0               	dc.b $F0, $D, $3E, $CE, $F0
0001A16A 000D 3ECE F0               	dc.b $0, $D, $3E, $CE, $F0
0001A16F 100D 3ECE F0               	dc.b $10, $D, $3E, $CE, $F0
0001A174 03                         DATAA16Z12RYSAF_A: dc.b $3
0001A175 EC0D 003A E4               	dc.b $EC, $D, $0, $3A, $E4
0001A17A F408 0042 04               	dc.b $F4, $8, $0, $42, $4
0001A17F EC0D 0045 FC               	dc.b $EC, $D, $0, $45, $FC
0001A184                            	even
0001A184                            	even
0001A184                            
0001A184                            ; ===========================================================================
0001A184                            ; ---------------------------------------------------------------------------
0001A184                            ; Object 83 - blocks that disintegrate Eggman	presses	a switch (SBZ2)
0001A184                            ; ---------------------------------------------------------------------------
0001A184                            
0001A184                            Obj83:					; XREF: Obj_Index
0001A184 7000                       		moveq	#0,d0
0001A186 1028 0024                  		move.b	$24(a0),d0
0001A18A 323B 0000                  		move.w	Obj83_Index(pc,d0.w),d1
0001A18E 4EFB 1000                  		jmp	Obj83_Index(pc,d1.w)
0001A192                            ; ===========================================================================
0001A192 0000                       Obj83_Index:	dc.w Obj83_Main-Obj83_Index
0001A194 0000                       		dc.w Obj83_ChkBreak-Obj83_Index
0001A196 0000                       		dc.w loc_19C36-Obj83_Index
0001A198 0000                       		dc.w loc_19C62-Obj83_Index
0001A19A 0000                       		dc.w loc_19C72-Obj83_Index
0001A19C 0000                       		dc.w loc_19C80-Obj83_Index
0001A19E                            ; ===========================================================================
0001A19E                            
0001A19E                            Obj83_Main:				; XREF: Obj83_Index
0001A19E 317C 2080 0008             		move.w	#$2080,8(a0)
0001A1A4 317C 05D0 000C             		move.w	#$5D0,$C(a0)
0001A1AA 117C 0080 0019             		move.b	#$80,$19(a0)
0001A1B0 117C 0010 0016             		move.b	#$10,$16(a0)
0001A1B6 117C 0004 0001             		move.b	#4,1(a0)
0001A1BC 08E8 0007 0001             		bset	#7,1(a0)
0001A1C2 7800                       		moveq	#0,d4
0001A1C4 3A3C 2010                  		move.w	#$2010,d5
0001A1C8 7C07                       		moveq	#7,d6
0001A1CA 45E8 0030                  		lea	$30(a0),a2
0001A1CE                            
0001A1CE                            Obj83_MakeBlock:
0001A1CE 4EB9 0000 E02E             		jsr	SingleObjLoad
0001A1D4 6600                       		bne.s	Obj83_ExitMake
0001A1D6 34C9                       		move.w	a1,(a2)+
0001A1D8 12BC 0083                  		move.b	#$83,(a1)	; load block object
0001A1DC 237C 0000 0000 0004        		move.l	#Map_obj83,4(a1)
0001A1E4 337C 4518 0002             		move.w	#$4518,2(a1)
0001A1EA 137C 0004 0001             		move.b	#4,1(a1)
0001A1F0 137C 0010 0019             		move.b	#$10,$19(a1)
0001A1F6 137C 0010 0016             		move.b	#$10,$16(a1)
0001A1FC 137C 0003 0018             		move.b	#3,$18(a1)
0001A202 3345 0008                  		move.w	d5,8(a1)	; set X	position
0001A206 337C 05D0 000C             		move.w	#$5D0,$C(a1)
0001A20C 0645 0020                  		addi.w	#$20,d5		; add $20 for next X position
0001A210 137C 0008 0024             		move.b	#8,$24(a1)
0001A216 51CE FFB6                  		dbf	d6,Obj83_MakeBlock ; repeat sequence 7 more times
0001A21A                            
0001A21A                            Obj83_ExitMake:
0001A21A 5428 0024                  		addq.b	#2,$24(a0)
0001A21E 4E75                       		rts	
0001A220                            ; ===========================================================================
0001A220                            
0001A220                            Obj83_ChkBreak:				; XREF: Obj83_Index
0001A220 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001A226 6600                       		bne.s	Obj83_Solid	; if not, branch
0001A228 4228 001A                  		clr.b	$1A(a0)
0001A22C 5428 0024                  		addq.b	#2,$24(a0)	; next subroutine
0001A230                            
0001A230                            Obj83_Solid:
0001A230 7000                       		moveq	#0,d0
0001A232 1028 001A                  		move.b	$1A(a0),d0
0001A236 4400                       		neg.b	d0
0001A238 4880                       		ext.w	d0
0001A23A 5040                       		addq.w	#8,d0
0001A23C E940                       		asl.w	#4,d0
0001A23E 383C 2100                  		move.w	#$2100,d4
0001A242 9840                       		sub.w	d0,d4
0001A244 1140 0019                  		move.b	d0,$19(a0)
0001A248 3144 0008                  		move.w	d4,8(a0)
0001A24C 720B                       		moveq	#$B,d1
0001A24E D240                       		add.w	d0,d1
0001A250 7410                       		moveq	#$10,d2
0001A252 7611                       		moveq	#$11,d3
0001A254 4EF9 0000 FF78             		jmp	SolidObject
0001A25A                            ; ===========================================================================
0001A25A                            
0001A25A                            loc_19C36:				; XREF: Obj83_Index
0001A25A 0428 000E 001E             		subi.b	#$E,$1E(a0)
0001A260 6400                       		bcc.s	Obj83_Solid2
0001A262 70FF                       		moveq	#-1,d0
0001A264 1028 001A                  		move.b	$1A(a0),d0
0001A268 4880                       		ext.w	d0
0001A26A D040                       		add.w	d0,d0
0001A26C 3030 0030                  		move.w	$30(a0,d0.w),d0
0001A270 2240                       		movea.l	d0,a1
0001A272 337C 474F 0028             		move.w	#$474F,$28(a1)
0001A278 5228 001A                  		addq.b	#1,$1A(a0)
0001A27C 0C28 0008 001A             		cmpi.b	#8,$1A(a0)
0001A282 6700                       		beq.s	loc_19C62
0001A284                            
0001A284                            Obj83_Solid2:
0001A284 60AA                       		bra.s	Obj83_Solid
0001A286                            ; ===========================================================================
0001A286                            
0001A286                            loc_19C62:				; XREF: Obj83_Index
0001A286 08A8 0003 0022             		bclr	#3,$22(a0)
0001A28C 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001A292 6000 FBD2                  		bra.w	loc_1982C
0001A296                            ; ===========================================================================
0001A296                            
0001A296                            loc_19C72:				; XREF: Obj83_Index
0001A296 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001A29C 6700                       		beq.s	Obj83_Break	; if yes, branch
0001A29E 4EF9 0000 DBA8             		jmp	DisplaySprite
0001A2A4                            ; ===========================================================================
0001A2A4                            
0001A2A4                            loc_19C80:				; XREF: Obj83_Index
0001A2A4 4A28 0001                  		tst.b	1(a0)
0001A2A8 6A00 FBBC                  		bpl.w	loc_1982C
0001A2AC 4EB9 0000 DB56             		jsr	ObjectFall
0001A2B2 4EF9 0000 DBA8             		jmp	DisplaySprite
0001A2B8                            ; ===========================================================================
0001A2B8                            
0001A2B8                            Obj83_Break:				; XREF: loc_19C72
0001A2B8 49FA 0000                  		lea	Obj83_FragSpeed(pc),a4
0001A2BC 4BFA 0000                  		lea	Obj83_FragPos(pc),a5
0001A2C0 7801                       		moveq	#1,d4
0001A2C2 7203                       		moveq	#3,d1
0001A2C4 7438                       		moveq	#$38,d2
0001A2C6 5428 0024                  		addq.b	#2,$24(a0)
0001A2CA 117C 0008 0019             		move.b	#8,$19(a0)
0001A2D0 117C 0008 0016             		move.b	#8,$16(a0)
0001A2D6 43D0                       		lea	(a0),a1
0001A2D8 6000                       		bra.s	Obj83_MakeFrag
0001A2DA                            ; ===========================================================================
0001A2DA                            
0001A2DA                            Obj83_LoopFrag:
0001A2DA 4EB9 0000 E044             		jsr	SingleObjLoad2
0001A2E0 6600                       		bne.s	Obj83_BreakSnd
0001A2E2                            
0001A2E2                            Obj83_MakeFrag:				; XREF: Obj83_Break
0001A2E2 45D0                       		lea	(a0),a2
0001A2E4 47D1                       		lea	(a1),a3
0001A2E6 7603                       		moveq	#3,d3
0001A2E8                            
0001A2E8                            loc_19CC4:
0001A2E8 26DA                       		move.l	(a2)+,(a3)+
0001A2EA 26DA                       		move.l	(a2)+,(a3)+
0001A2EC 26DA                       		move.l	(a2)+,(a3)+
0001A2EE 26DA                       		move.l	(a2)+,(a3)+
0001A2F0 51CB FFF6                  		dbf	d3,loc_19CC4
0001A2F4                            
0001A2F4 335C 0012                  		move.w	(a4)+,$12(a1)
0001A2F8 361D                       		move.w	(a5)+,d3
0001A2FA D769 0008                  		add.w	d3,8(a1)
0001A2FE 361D                       		move.w	(a5)+,d3
0001A300 D769 000C                  		add.w	d3,$C(a1)
0001A304 1344 001A                  		move.b	d4,$1A(a1)
0001A308 5244                       		addq.w	#1,d4
0001A30A 51C9 FFCE                  		dbf	d1,Obj83_LoopFrag ; repeat sequence 3 more times
0001A30E                            
0001A30E                            Obj83_BreakSnd:
0001A30E 303C 00CB                  		move.w	#$CB,d0
0001A312 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play smashing sound
0001A318 4EF9 0000 DBA8             		jmp	DisplaySprite
0001A31E                            ; ===========================================================================
0001A31E 0080 0000                  Obj83_FragSpeed:dc.w $80, 0
0001A322 0120 00C0                  		dc.w $120, $C0
0001A326 FFF8 FFF8                  Obj83_FragPos:	dc.w $FFF8, $FFF8
0001A32A 0010 0000                  		dc.w $10, 0
0001A32E 0000 0010                  		dc.w 0,	$10
0001A332 0010 0010                  		dc.w $10, $10
0001A336                            ; ---------------------------------------------------------------------------
0001A336                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001A336                            ; ---------------------------------------------------------------------------
0001A336                            Map_obj83:
0001A336                            	include "_maps\obj83.asm"
0001A336                            ; ---------------------------------------------------------------------------
0001A336                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001A336                            ; ---------------------------------------------------------------------------
0001A336 0000 0000                  		dc.w byte_19D1C-Map_obj83, byte_19D22-Map_obj83
0001A33A 0000 0000                  		dc.w byte_19D2E-Map_obj83, byte_19D3A-Map_obj83
0001A33E 0000                       		dc.w byte_19D46-Map_obj83
0001A340 01                         byte_19D1C:	dc.b 1
0001A341 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001A346 02                         byte_19D22:	dc.b 2
0001A347 F801 0000 F8               		dc.b $F8, 1, 0,	0, $F8
0001A34C F801 0004 00               		dc.b $F8, 1, 0,	4, 0
0001A351 00                         		dc.b 0
0001A352 02                         byte_19D2E:	dc.b 2
0001A353 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
0001A358 F801 000C 00               		dc.b $F8, 1, 0,	$C, 0
0001A35D 00                         		dc.b 0
0001A35E 02                         byte_19D3A:	dc.b 2
0001A35F F801 0002 F8               		dc.b $F8, 1, 0,	2, $F8
0001A364 F801 0006 00               		dc.b $F8, 1, 0,	6, 0
0001A369 00                         		dc.b 0
0001A36A 02                         byte_19D46:	dc.b 2
0001A36B F801 000A F8               		dc.b $F8, 1, 0,	$A, $F8
0001A370 F801 000E 00               		dc.b $F8, 1, 0,	$E, 0
0001A376 00                         		even
0001A376 00                         		even
0001A376                            
0001A376                            ; ===========================================================================
0001A376                            ; ---------------------------------------------------------------------------
0001A376                            ; Object 85 - Eggman (FZ)
0001A376                            ; ---------------------------------------------------------------------------
0001A376                            
0001A376                            Obj85_Delete:
0001A376 4EF9 0000 DBE4             		jmp	DeleteObject
0001A37C                            ; ===========================================================================
0001A37C                            
0001A37C                            Obj85:					; XREF: Obj_Index
0001A37C 7000                       		moveq	#0,d0
0001A37E 1028 0024                  		move.b	$24(a0),d0
0001A382 303B 0000                  		move.w	Obj85_Index(pc,d0.w),d0
0001A386 4EFB 0000                  		jmp	Obj85_Index(pc,d0.w)
0001A38A                            ; ===========================================================================
0001A38A 0000                       Obj85_Index:	dc.w Obj85_Main-Obj85_Index
0001A38C 0000                       		dc.w Obj85_Eggman-Obj85_Index
0001A38E 0000                       		dc.w loc_1A38E-Obj85_Index
0001A390 0000                       		dc.w loc_1A346-Obj85_Index
0001A392 0000                       		dc.w loc_1A2C6-Obj85_Index
0001A394 0000                       		dc.w loc_1A3AC-Obj85_Index
0001A396 0000                       		dc.w loc_1A264-Obj85_Index
0001A398                            
0001A398 0100 0100 0470             Obj85_ObjData:	dc.w $100, $100, $470	; X pos, Y pos,	VRAM setting
0001A39E 0001 A06E                  		dc.l Map_obj82		; mappings pointer
0001A3A2 25B0 0590 0300             		dc.w $25B0, $590, $300
0001A3A8 0000 0000                  		dc.l Map_obj84
0001A3AC 26E0 0596 03A0             		dc.w $26E0, $596, $3A0
0001A3B2 0000 0000                  		dc.l Map_FZBoss
0001A3B6 26E0 0596 0470             		dc.w $26E0, $596, $470
0001A3BC 0001 A06E                  		dc.l Map_obj82
0001A3C0 26E0 0596 0400             		dc.w $26E0, $596, $400
0001A3C6 0001 8350                  		dc.l Map_Eggman
0001A3CA 26E0 0596 0400             		dc.w $26E0, $596, $400
0001A3D0 0001 8350                  		dc.l Map_Eggman
0001A3D4                            
0001A3D4 0200 0420 19               Obj85_ObjData2:	dc.b 2,	0, 4, $20, $19	; routine num, animation, sprite priority, width, height
0001A3D9 0400 0112 08               		dc.b 4,	0, 1, $12, 8
0001A3DE 0600 0300 00               		dc.b 6,	0, 3, 0, 0
0001A3E3 0800 0300 00               		dc.b 8,	0, 3, 0, 0
0001A3E8 0A00 0320 20               		dc.b $A, 0, 3, $20, $20
0001A3ED 0C00 0300 00               		dc.b $C, 0, 3, 0, 0
0001A3F2                            ; ===========================================================================
0001A3F2                            
0001A3F2                            Obj85_Main:				; XREF: Obj85_Index
0001A3F2 45FA FFA4                  		lea	Obj85_ObjData(pc),a2
0001A3F6 47FA FFDC                  		lea	Obj85_ObjData2(pc),a3
0001A3FA 2248                       		movea.l	a0,a1
0001A3FC 7205                       		moveq	#5,d1
0001A3FE 6000                       		bra.s	Obj85_LoadBoss
0001A400                            ; ===========================================================================
0001A400                            
0001A400                            Obj85_Loop:
0001A400 4EB9 0000 E044             		jsr	SingleObjLoad2
0001A406 6600                       		bne.s	loc_19E20
0001A408                            
0001A408                            Obj85_LoadBoss:				; XREF: Obj85_Main
0001A408 12BC 0085                  		move.b	#$85,(a1)
0001A40C 335A 0008                  		move.w	(a2)+,8(a1)
0001A410 335A 000C                  		move.w	(a2)+,$C(a1)
0001A414 335A 0002                  		move.w	(a2)+,2(a1)
0001A418 235A 0004                  		move.l	(a2)+,4(a1)
0001A41C 135B 0024                  		move.b	(a3)+,$24(a1)
0001A420 135B 001C                  		move.b	(a3)+,$1C(a1)
0001A424 135B 0018                  		move.b	(a3)+,$18(a1)
0001A428 135B 0017                  		move.b	(a3)+,$17(a1)
0001A42C 135B 0016                  		move.b	(a3)+,$16(a1)
0001A430 137C 0004 0001             		move.b	#4,1(a1)
0001A436 08E8 0007 0001             		bset	#7,1(a0)
0001A43C 2348 0034                  		move.l	a0,$34(a1)
0001A440 51C9 FFBE                  		dbf	d1,Obj85_Loop
0001A444                            
0001A444                            loc_19E20:
0001A444 45E8 0036                  		lea	$36(a0),a2
0001A448 4EB9 0000 E02E             		jsr	SingleObjLoad
0001A44E 6600                       		bne.s	loc_19E5A
0001A450 12BC 0086                  		move.b	#$86,(a1)	; load energy ball object
0001A454 3489                       		move.w	a1,(a2)
0001A456 2348 0034                  		move.l	a0,$34(a1)
0001A45A 45E8 0038                  		lea	$38(a0),a2
0001A45E 7400                       		moveq	#0,d2
0001A460 7203                       		moveq	#3,d1
0001A462                            
0001A462                            loc_19E3E:
0001A462 4EB9 0000 E044             		jsr	SingleObjLoad2
0001A468 6600                       		bne.s	loc_19E5A
0001A46A 34C9                       		move.w	a1,(a2)+
0001A46C 12BC 0084                  		move.b	#$84,(a1)	; load crushing	cylinder object
0001A470 2348 0034                  		move.l	a0,$34(a1)
0001A474 1342 0028                  		move.b	d2,$28(a1)
0001A478 5442                       		addq.w	#2,d2
0001A47A 51C9 FFE6                  		dbf	d1,loc_19E3E
0001A47E                            
0001A47E                            loc_19E5A:
0001A47E 317C 0000 0034             		move.w	#0,$34(a0)
0001A484 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001A48A 317C FFFF 0030             		move.w	#-1,$30(a0)
0001A490                            
0001A490                            Obj85_Eggman:				; XREF: Obj85_Index
0001A490 7000                       		moveq	#0,d0
0001A492 1028 0034                  		move.b	$34(a0),d0
0001A496 303B 0000                  		move.w	off_19E80(pc,d0.w),d0
0001A49A 4EBB 0000                  		jsr	off_19E80(pc,d0.w)
0001A49E 4EF9 0000 DBA8             		jmp	DisplaySprite
0001A4A4                            ; ===========================================================================
0001A4A4 0000 0000                  off_19E80:	dc.w loc_19E90-off_19E80, loc_19EA8-off_19E80
0001A4A8 0000 0000                  		dc.w loc_19FE6-off_19E80, loc_1A02A-off_19E80
0001A4AC 0000 0000                  		dc.w loc_1A074-off_19E80, loc_1A112-off_19E80
0001A4B0 0000 0000                  		dc.w loc_1A192-off_19E80, loc_1A1D4-off_19E80
0001A4B4                            ; ===========================================================================
0001A4B4                            
0001A4B4                            loc_19E90:				; XREF: off_19E80
0001A4B4 4AB8 F680                  		tst.l	($FFFFF680).w
0001A4B8 6600                       		bne.s	loc_19EA2
0001A4BA 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
0001A4C0 6500                       		bcs.s	loc_19EA2
0001A4C2 5428 0034                  		addq.b	#2,$34(a0)
0001A4C6                            
0001A4C6                            loc_19EA2:
0001A4C6 52B8 F636                  		addq.l	#1,($FFFFF636).w
0001A4CA 4E75                       		rts	
0001A4CC                            ; ===========================================================================
0001A4CC                            
0001A4CC                            loc_19EA8:				; XREF: off_19E80
0001A4CC 4A68 0030                  		tst.w	$30(a0)
0001A4D0 6A00                       		bpl.s	loc_19F10
0001A4D2 4268 0030                  		clr.w	$30(a0)
0001A4D6 4EB9 0000 2BFC             		jsr	(RandomNumber).l
0001A4DC 0240 000C                  		andi.w	#$C,d0
0001A4E0 3200                       		move.w	d0,d1
0001A4E2 5441                       		addq.w	#2,d1
0001A4E4 4A80                       		tst.l	d0
0001A4E6 6A00                       		bpl.s	loc_19EC6
0001A4E8 C141                       		exg	d1,d0
0001A4EA                            
0001A4EA                            loc_19EC6:
0001A4EA 43FA 0000                  		lea	word_19FD6(pc),a1
0001A4EE 3031 0000                  		move.w	(a1,d0.w),d0
0001A4F2 3231 1000                  		move.w	(a1,d1.w),d1
0001A4F6 3140 0030                  		move.w	d0,$30(a0)
0001A4FA 74FF                       		moveq	#-1,d2
0001A4FC 3430 0038                  		move.w	$38(a0,d0.w),d2
0001A500 2242                       		movea.l	d2,a1
0001A502 137C 00FF 0029             		move.b	#-1,$29(a1)
0001A508 337C FFFF 0030             		move.w	#-1,$30(a1)
0001A50E 3430 1038                  		move.w	$38(a0,d1.w),d2
0001A512 2242                       		movea.l	d2,a1
0001A514 137C 0001 0029             		move.b	#1,$29(a1)
0001A51A 337C 0000 0030             		move.w	#0,$30(a1)
0001A520 317C 0001 0032             		move.w	#1,$32(a0)
0001A526 4228 0035                  		clr.b	$35(a0)
0001A52A 303C 00B7                  		move.w	#$B7,d0
0001A52E 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play rumbling sound
0001A534                            
0001A534                            loc_19F10:
0001A534 4A68 0032                  		tst.w	$32(a0)
0001A538 6B00 0000                  		bmi.w	loc_19FA6
0001A53C 08A8 0000 0022             		bclr	#0,$22(a0)
0001A542 3038 D008                  		move.w	($FFFFD008).w,d0
0001A546 9068 0008                  		sub.w	8(a0),d0
0001A54A 6500                       		bcs.s	loc_19F2E
0001A54C 08E8 0000 0022             		bset	#0,$22(a0)
0001A552                            
0001A552                            loc_19F2E:
0001A552 323C 002B                  		move.w	#$2B,d1
0001A556 343C 0014                  		move.w	#$14,d2
0001A55A 363C 0014                  		move.w	#$14,d3
0001A55E 3828 0008                  		move.w	8(a0),d4
0001A562 4EB9 0000 FF78             		jsr	SolidObject
0001A568 4A44                       		tst.w	d4
0001A56A 6E00                       		bgt.s	loc_19F50
0001A56C                            
0001A56C                            loc_19F48:
0001A56C 4A28 0035                  		tst.b	$35(a0)
0001A570 6600                       		bne.s	loc_19F88
0001A572 6000                       		bra.s	loc_19F96
0001A574                            ; ===========================================================================
0001A574                            
0001A574                            loc_19F50:
0001A574 5E78 F636                  		addq.w	#7,($FFFFF636).w
0001A578 0C38 0002 D01C             		cmpi.b	#2,($FFFFD01C).w
0001A57E 66EC                       		bne.s	loc_19F48
0001A580 303C 0300                  		move.w	#$300,d0
0001A584 0828 0000 0022             		btst	#0,$22(a0)
0001A58A 6600                       		bne.s	loc_19F6A
0001A58C 4440                       		neg.w	d0
0001A58E                            
0001A58E                            loc_19F6A:
0001A58E 31C0 D010                  		move.w	d0,($FFFFD010).w
0001A592 4A28 0035                  		tst.b	$35(a0)
0001A596 6600                       		bne.s	loc_19F88
0001A598 5328 0021                  		subq.b	#1,$21(a0)
0001A59C 117C 0064 0035             		move.b	#$64,$35(a0)
0001A5A2 303C 00AC                  		move.w	#$AC,d0
0001A5A6 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001A5AC                            
0001A5AC                            loc_19F88:
0001A5AC 5328 0035                  		subq.b	#1,$35(a0)
0001A5B0 6700                       		beq.s	loc_19F96
0001A5B2 117C 0003 001C             		move.b	#3,$1C(a0)
0001A5B8 6000                       		bra.s	loc_19F9C
0001A5BA                            ; ===========================================================================
0001A5BA                            
0001A5BA                            loc_19F96:
0001A5BA 117C 0001 001C             		move.b	#1,$1C(a0)
0001A5C0                            
0001A5C0                            loc_19F9C:
0001A5C0 43FA FA7A                  		lea	Ani_obj82(pc),a1
0001A5C4 4EF9 0000 AC42             		jmp	AnimateSprite
0001A5CA                            ; ===========================================================================
0001A5CA                            
0001A5CA                            loc_19FA6:
0001A5CA 4A28 0021                  		tst.b	$21(a0)
0001A5CE 6700                       		beq.s	loc_19FBC
0001A5D0 5428 0034                  		addq.b	#2,$34(a0)
0001A5D4 317C FFFF 0030             		move.w	#-1,$30(a0)
0001A5DA 4268 0032                  		clr.w	$32(a0)
0001A5DE 4E75                       		rts	
0001A5E0                            ; ===========================================================================
0001A5E0                            
0001A5E0                            loc_19FBC:
0001A5E0 117C 0006 0034             		move.b	#6,$34(a0)
0001A5E6 317C 25C0 0008             		move.w	#$25C0,8(a0)
0001A5EC 317C 053C 000C             		move.w	#$53C,$C(a0)
0001A5F2 117C 0014 0016             		move.b	#$14,$16(a0)
0001A5F8 4E75                       		rts	
0001A5FA                            ; ===========================================================================
0001A5FA 0000 0002 0002 0004 0004+  word_19FD6:	dc.w 0,	2, 2, 4, 4, 6, 6, 0
0001A60A                            ; ===========================================================================
0001A60A                            
0001A60A                            loc_19FE6:				; XREF: off_19E80
0001A60A 70FF                       		moveq	#-1,d0
0001A60C 3028 0036                  		move.w	$36(a0),d0
0001A610 2240                       		movea.l	d0,a1
0001A612 4A68 0030                  		tst.w	$30(a0)
0001A616 6A00                       		bpl.s	loc_1A000
0001A618 4268 0030                  		clr.w	$30(a0)
0001A61C 137C 00FF 0029             		move.b	#-1,$29(a1)
0001A622 6100                       		bsr.s	loc_1A020
0001A624                            
0001A624                            loc_1A000:
0001A624 700F                       		moveq	#$F,d0
0001A626 C078 FE0E                  		and.w	($FFFFFE0E).w,d0
0001A62A 6600                       		bne.s	loc_1A00A
0001A62C 6100                       		bsr.s	loc_1A020
0001A62E                            
0001A62E                            loc_1A00A:
0001A62E 4A68 0032                  		tst.w	$32(a0)
0001A632 6700                       		beq.s	locret_1A01E
0001A634 5528 0034                  		subq.b	#2,$34(a0)
0001A638 317C FFFF 0030             		move.w	#-1,$30(a0)
0001A63E 4268 0032                  		clr.w	$32(a0)
0001A642                            
0001A642                            locret_1A01E:
0001A642 4E75                       		rts	
0001A644                            ; ===========================================================================
0001A644                            
0001A644                            loc_1A020:
0001A644 303C 00B1                  		move.w	#$B1,d0
0001A648 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play electricity sound
0001A64E                            ; ===========================================================================
0001A64E                            
0001A64E                            loc_1A02A:				; XREF: off_19E80
0001A64E 117C 0030 0017             		move.b	#$30,$17(a0)
0001A654 08E8 0000 0022             		bset	#0,$22(a0)
0001A65A 4EB9 0000 DB82             		jsr	SpeedToPos
0001A660 117C 0006 001A             		move.b	#6,$1A(a0)
0001A666 0668 0010 0012             		addi.w	#$10,$12(a0)
0001A66C 0C68 059C 000C             		cmpi.w	#$59C,$C(a0)
0001A672 6500                       		bcs.s	loc_1A070
0001A674 317C 059C 000C             		move.w	#$59C,$C(a0)
0001A67A 5428 0034                  		addq.b	#2,$34(a0)
0001A67E 117C 0020 0017             		move.b	#$20,$17(a0)
0001A684 317C 0100 0010             		move.w	#$100,$10(a0)
0001A68A 317C FF00 0012             		move.w	#-$100,$12(a0)
0001A690 5438 F742                  		addq.b	#2,($FFFFF742).w
0001A694                            
0001A694                            loc_1A070:
0001A694 6000 0000                  		bra.w	loc_1A166
0001A698                            ; ===========================================================================
0001A698                            
0001A698                            loc_1A074:				; XREF: off_19E80
0001A698 08E8 0000 0022             		bset	#0,$22(a0)
0001A69E 117C 0004 001C             		move.b	#4,$1C(a0)
0001A6A4 4EB9 0000 DB82             		jsr	SpeedToPos
0001A6AA 0668 0010 0012             		addi.w	#$10,$12(a0)
0001A6B0 0C68 05A3 000C             		cmpi.w	#$5A3,$C(a0)
0001A6B6 6500                       		bcs.s	loc_1A09A
0001A6B8 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001A6BE                            
0001A6BE                            loc_1A09A:
0001A6BE 317C 0400 0010             		move.w	#$400,$10(a0)
0001A6C4 3028 0008                  		move.w	8(a0),d0
0001A6C8 9078 D008                  		sub.w	($FFFFD008).w,d0
0001A6CC 6A00                       		bpl.s	loc_1A0B4
0001A6CE 317C 0500 0010             		move.w	#$500,$10(a0)
0001A6D4 6000 0000                  		bra.w	loc_1A0F2
0001A6D8                            ; ===========================================================================
0001A6D8                            
0001A6D8                            loc_1A0B4:
0001A6D8 0440 0070                  		subi.w	#$70,d0
0001A6DC 6500                       		bcs.s	loc_1A0F2
0001A6DE 0468 0100 0010             		subi.w	#$100,$10(a0)
0001A6E4 5140                       		subq.w	#8,d0
0001A6E6 6500                       		bcs.s	loc_1A0F2
0001A6E8 0468 0100 0010             		subi.w	#$100,$10(a0)
0001A6EE 5140                       		subq.w	#8,d0
0001A6F0 6500                       		bcs.s	loc_1A0F2
0001A6F2 0468 0080 0010             		subi.w	#$80,$10(a0)
0001A6F8 5140                       		subq.w	#8,d0
0001A6FA 6500                       		bcs.s	loc_1A0F2
0001A6FC 0468 0080 0010             		subi.w	#$80,$10(a0)
0001A702 5140                       		subq.w	#8,d0
0001A704 6500                       		bcs.s	loc_1A0F2
0001A706 0468 0080 0010             		subi.w	#$80,$10(a0)
0001A70C 0440 0038                  		subi.w	#$38,d0
0001A710 6500                       		bcs.s	loc_1A0F2
0001A712 4268 0010                  		clr.w	$10(a0)
0001A716                            
0001A716                            loc_1A0F2:
0001A716 0C68 26A0 0008             		cmpi.w	#$26A0,8(a0)
0001A71C 6500                       		bcs.s	loc_1A110
0001A71E 317C 26A0 0008             		move.w	#$26A0,8(a0)
0001A724 317C 0240 0010             		move.w	#$240,$10(a0)
0001A72A 317C FB40 0012             		move.w	#-$4C0,$12(a0)
0001A730 5428 0034                  		addq.b	#2,$34(a0)
0001A734                            
0001A734                            loc_1A110:
0001A734 6000                       		bra.s	loc_1A15C
0001A736                            ; ===========================================================================
0001A736                            
0001A736                            loc_1A112:				; XREF: off_19E80
0001A736 4EB9 0000 DB82             		jsr	SpeedToPos
0001A73C 0C68 26E0 0008             		cmpi.w	#$26E0,8(a0)
0001A742 6500                       		bcs.s	loc_1A124
0001A744 4268 0010                  		clr.w	$10(a0)
0001A748                            
0001A748                            loc_1A124:
0001A748 0668 0034 0012             		addi.w	#$34,$12(a0)
0001A74E 4A68 0012                  		tst.w	$12(a0)
0001A752 6B00                       		bmi.s	loc_1A142
0001A754 0C68 0592 000C             		cmpi.w	#$592,$C(a0)
0001A75A 6500                       		bcs.s	loc_1A142
0001A75C 317C 0592 000C             		move.w	#$592,$C(a0)
0001A762 4268 0012                  		clr.w	$12(a0)
0001A766                            
0001A766                            loc_1A142:
0001A766 3028 0010                  		move.w	$10(a0),d0
0001A76A 8068 0012                  		or.w	$12(a0),d0
0001A76E 6600                       		bne.s	loc_1A15C
0001A770 5428 0034                  		addq.b	#2,$34(a0)
0001A774 317C FE80 0012             		move.w	#-$180,$12(a0)
0001A77A 117C 0001 0021             		move.b	#1,$21(a0)
0001A780                            
0001A780                            loc_1A15C:
0001A780 43FA F8BA                  		lea	Ani_obj82(pc),a1
0001A784 4EB9 0000 AC42             		jsr	AnimateSprite
0001A78A                            
0001A78A                            loc_1A166:
0001A78A 0C78 2700 F72A             		cmpi.w	#$2700,($FFFFF72A).w
0001A790 6C00                       		bge.s	loc_1A172
0001A792 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001A796                            
0001A796                            loc_1A172:
0001A796 0C28 000C 0034             		cmpi.b	#$C,$34(a0)
0001A79C 6C00                       		bge.s	locret_1A190
0001A79E 323C 001B                  		move.w	#$1B,d1
0001A7A2 343C 0070                  		move.w	#$70,d2
0001A7A6 363C 0071                  		move.w	#$71,d3
0001A7AA 3828 0008                  		move.w	8(a0),d4
0001A7AE 4EF9 0000 FF78             		jmp	SolidObject
0001A7B4                            ; ===========================================================================
0001A7B4                            
0001A7B4                            locret_1A190:
0001A7B4 4E75                       		rts	
0001A7B6                            ; ===========================================================================
0001A7B6                            
0001A7B6                            loc_1A192:				; XREF: off_19E80
0001A7B6 217C 0001 8350 0004        		move.l	#Map_Eggman,4(a0)
0001A7BE 317C 0400 0002             		move.w	#$400,2(a0)
0001A7C4 117C 0000 001C             		move.b	#0,$1C(a0)
0001A7CA 08E8 0000 0022             		bset	#0,$22(a0)
0001A7D0 4EB9 0000 DB82             		jsr	SpeedToPos
0001A7D6 0C68 0544 000C             		cmpi.w	#$544,$C(a0)
0001A7DC 6400                       		bcc.s	loc_1A1D0
0001A7DE 317C 0180 0010             		move.w	#$180,$10(a0)
0001A7E4 317C FFE8 0012             		move.w	#-$18,$12(a0)
0001A7EA 117C 000F 0020             		move.b	#$F,$20(a0)
0001A7F0 5428 0034                  		addq.b	#2,$34(a0)
0001A7F4                            
0001A7F4                            loc_1A1D0:
0001A7F4 6000 FF8A                  		bra.w	loc_1A15C
0001A7F8                            ; ===========================================================================
0001A7F8                            
0001A7F8                            loc_1A1D4:				; XREF: off_19E80
0001A7F8 08E8 0000 0022             		bset	#0,$22(a0)
0001A7FE 4EB9 0000 DB82             		jsr	SpeedToPos
0001A804 4A68 0030                  		tst.w	$30(a0)
0001A808 6600                       		bne.s	loc_1A1FC
0001A80A 4A28 0020                  		tst.b	$20(a0)
0001A80E 6600                       		bne.s	loc_1A216
0001A810 317C 001E 0030             		move.w	#$1E,$30(a0)
0001A816 303C 00AC                  		move.w	#$AC,d0
0001A81A 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001A820                            
0001A820                            loc_1A1FC:
0001A820 5368 0030                  		subq.w	#1,$30(a0)
0001A824 6600                       		bne.s	loc_1A216
0001A826 4A28 0022                  		tst.b	$22(a0)
0001A82A 6A00                       		bpl.s	loc_1A210
0001A82C 317C 0060 0012             		move.w	#$60,$12(a0)
0001A832 6000                       		bra.s	loc_1A216
0001A834                            ; ===========================================================================
0001A834                            
0001A834                            loc_1A210:
0001A834 117C 000F 0020             		move.b	#$F,$20(a0)
0001A83A                            
0001A83A                            loc_1A216:
0001A83A 0C78 2790 D008             		cmpi.w	#$2790,($FFFFD008).w
0001A840 6D00                       		blt.s	loc_1A23A
0001A842 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w
0001A848 31FC 0000 F602             		move.w	#0,($FFFFF602).w
0001A84E 4278 D014                  		clr.w	($FFFFD014).w
0001A852 4A68 0012                  		tst.w	$12(a0)
0001A856 6A00                       		bpl.s	loc_1A248
0001A858 31FC 0100 F602             		move.w	#$100,($FFFFF602).w
0001A85E                            
0001A85E                            loc_1A23A:
0001A85E 0C78 27E0 D008             		cmpi.w	#$27E0,($FFFFD008).w
0001A864 6D00                       		blt.s	loc_1A248
0001A866 31FC 27E0 D008             		move.w	#$27E0,($FFFFD008).w
0001A86C                            
0001A86C                            loc_1A248:
0001A86C 0C68 2900 0008             		cmpi.w	#$2900,8(a0)
0001A872 6500                       		bcs.s	loc_1A260
0001A874 4A28 0001                  		tst.b	1(a0)
0001A878 6B00                       		bmi.s	loc_1A260
0001A87A 11FC 0018 F600             		move.b	#$18,($FFFFF600).w
0001A880 6000 FAF4                  		bra.w	Obj85_Delete
0001A884                            ; ===========================================================================
0001A884                            
0001A884                            loc_1A260:
0001A884 6000 FEFA                  		bra.w	loc_1A15C
0001A888                            ; ===========================================================================
0001A888                            
0001A888                            loc_1A264:				; XREF: Obj85_Index
0001A888 2268 0034                  		movea.l	$34(a0),a1
0001A88C 1011                       		move.b	(a1),d0
0001A88E B010                       		cmp.b	(a0),d0
0001A890 6600 FAE4                  		bne.w	Obj85_Delete
0001A894 117C 0007 001C             		move.b	#7,$1C(a0)
0001A89A 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001A8A0 6C00                       		bge.s	loc_1A280
0001A8A2 6000                       		bra.s	loc_1A2A6
0001A8A4                            ; ===========================================================================
0001A8A4                            
0001A8A4                            loc_1A280:
0001A8A4 4A69 0010                  		tst.w	$10(a1)
0001A8A8 6700                       		beq.s	loc_1A28C
0001A8AA 117C 000B 001C             		move.b	#$B,$1C(a0)
0001A8B0                            
0001A8B0                            loc_1A28C:
0001A8B0 43FA DA4E                  		lea	Ani_Eggman(pc),a1
0001A8B4 4EB9 0000 AC42             		jsr	AnimateSprite
0001A8BA                            
0001A8BA                            loc_1A296:
0001A8BA 2268 0034                  		movea.l	$34(a0),a1
0001A8BE 3169 0008 0008             		move.w	8(a1),8(a0)
0001A8C4 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A8CA                            
0001A8CA                            loc_1A2A6:
0001A8CA 2268 0034                  		movea.l	$34(a0),a1
0001A8CE 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001A8D4 7003                       		moveq	#3,d0
0001A8D6 C028 0022                  		and.b	$22(a0),d0
0001A8DA 0228 00FC 0001             		andi.b	#-4,1(a0)
0001A8E0 8128 0001                  		or.b	d0,1(a0)
0001A8E4 4EF9 0000 DBA8             		jmp	DisplaySprite
0001A8EA                            ; ===========================================================================
0001A8EA                            
0001A8EA                            loc_1A2C6:				; XREF: Obj85_Index
0001A8EA 2268 0034                  		movea.l	$34(a0),a1
0001A8EE 1011                       		move.b	(a1),d0
0001A8F0 B010                       		cmp.b	(a0),d0
0001A8F2 6600 FA82                  		bne.w	Obj85_Delete
0001A8F6 0CA9 0001 8350 0004        		cmpi.l	#Map_Eggman,4(a1)
0001A8FE 6700                       		beq.s	loc_1A2E4
0001A900 117C 000A 001A             		move.b	#$A,$1A(a0)
0001A906 60C2                       		bra.s	loc_1A2A6
0001A908                            ; ===========================================================================
0001A908                            
0001A908                            loc_1A2E4:
0001A908 117C 0001 001C             		move.b	#1,$1C(a0)
0001A90E 4A29 0021                  		tst.b	$21(a1)
0001A912 6F00                       		ble.s	loc_1A312
0001A914 117C 0006 001C             		move.b	#6,$1C(a0)
0001A91A 217C 0001 8350 0004        		move.l	#Map_Eggman,4(a0)
0001A922 317C 0400 0002             		move.w	#$400,2(a0)
0001A928 43FA D9D6                  		lea	Ani_Eggman(pc),a1
0001A92C 4EB9 0000 AC42             		jsr	AnimateSprite
0001A932 6000 FF86                  		bra.w	loc_1A296
0001A936                            ; ===========================================================================
0001A936                            
0001A936                            loc_1A312:
0001A936 4A28 0001                  		tst.b	1(a0)
0001A93A 6A00 FA3A                  		bpl.w	Obj85_Delete
0001A93E 6100 D56E                  		bsr.w	BossDefeated
0001A942 117C 0002 0018             		move.b	#2,$18(a0)
0001A948 117C 0000 001C             		move.b	#0,$1C(a0)
0001A94E 217C 0000 0000 0004        		move.l	#Map_Eggman2,4(a0)
0001A956 317C 03A0 0002             		move.w	#$3A0,2(a0)
0001A95C 43FA 0000                  		lea	Ani_obj85(pc),a1
0001A960 4EB9 0000 AC42             		jsr	AnimateSprite
0001A966 6000 FF52                  		bra.w	loc_1A296
0001A96A                            ; ===========================================================================
0001A96A                            
0001A96A                            loc_1A346:				; XREF: Obj85_Index
0001A96A 08E8 0000 0022             		bset	#0,$22(a0)
0001A970 2268 0034                  		movea.l	$34(a0),a1
0001A974 0CA9 0001 8350 0004        		cmpi.l	#Map_Eggman,4(a1)
0001A97C 6700                       		beq.s	loc_1A35E
0001A97E 6000 FF4A                  		bra.w	loc_1A2A6
0001A982                            ; ===========================================================================
0001A982                            
0001A982                            loc_1A35E:
0001A982 3169 0008 0008             		move.w	8(a1),8(a0)
0001A988 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A98E 4A28 001E                  		tst.b	$1E(a0)
0001A992 6600                       		bne.s	loc_1A376
0001A994 117C 0014 001E             		move.b	#$14,$1E(a0)
0001A99A                            
0001A99A                            loc_1A376:
0001A99A 5328 001E                  		subq.b	#1,$1E(a0)
0001A99E 6E00                       		bgt.s	loc_1A38A
0001A9A0 5228 001A                  		addq.b	#1,$1A(a0)
0001A9A4 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0001A9AA 6E00 F9CA                  		bgt.w	Obj85_Delete
0001A9AE                            
0001A9AE                            loc_1A38A:
0001A9AE 6000 FF0A                  		bra.w	loc_1A296
0001A9B2                            ; ===========================================================================
0001A9B2                            
0001A9B2                            loc_1A38E:				; XREF: Obj85_Index
0001A9B2 117C 000B 001A             		move.b	#$B,$1A(a0)
0001A9B8 3038 D008                  		move.w	($FFFFD008).w,d0
0001A9BC 9068 0008                  		sub.w	8(a0),d0
0001A9C0 6500                       		bcs.s	loc_1A3A6
0001A9C2 4A28 0001                  		tst.b	1(a0)
0001A9C6 6A00 F9AE                  		bpl.w	Obj85_Delete
0001A9CA                            
0001A9CA                            loc_1A3A6:
0001A9CA 4EF9 0000 DBA8             		jmp	DisplaySprite
0001A9D0                            ; ===========================================================================
0001A9D0                            
0001A9D0                            loc_1A3AC:				; XREF: Obj85_Index
0001A9D0 117C 0000 001A             		move.b	#0,$1A(a0)
0001A9D6 08E8 0000 0022             		bset	#0,$22(a0)
0001A9DC 2268 0034                  		movea.l	$34(a0),a1
0001A9E0 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001A9E6 6600                       		bne.s	loc_1A3D0
0001A9E8 0CA9 0001 8350 0004        		cmpi.l	#Map_Eggman,4(a1)
0001A9F0 6700 F984                  		beq.w	Obj85_Delete
0001A9F4                            
0001A9F4                            loc_1A3D0:
0001A9F4 6000 FED4                  		bra.w	loc_1A2A6
0001A9F8                            ; ===========================================================================
0001A9F8                            Ani_obj85:
0001A9F8                            	include "_anim\obj85.asm"
0001A9F8                            ; ---------------------------------------------------------------------------
0001A9F8                            ; Animation script - Eggman (FZ)
0001A9F8                            ; ---------------------------------------------------------------------------
0001A9F8 0000                       		dc.w byte_1A3D6-Ani_obj85
0001A9FA 0300 01FF                  byte_1A3D6:	dc.b 3,	0, 1, $FF
0001A9FE                            		even
0001A9FE                            		even
0001A9FE                            
0001A9FE                            Map_Eggman2:
0001A9FE                            	include "_maps\Eggman2.asm"
0001A9FE                            ; ---------------------------------------------------------------------------
0001A9FE                            ; Sprite mappings - Eggman (FZ)
0001A9FE                            ; ---------------------------------------------------------------------------
0001A9FE 0000                       		dc.w byte_1A3DE-Map_Eggman2
0001AA00 0000                       		dc.w byte_1A3FD-Map_Eggman2
0001AA02 06                         byte_1A3DE:	dc.b 6
0001AA03 E408 0020 F4               		dc.b $E4, 8, 0,	$20, $F4
0001AA08 EC0D 0023 E4               		dc.b $EC, $D, 0, $23, $E4
0001AA0D EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001AA12 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001AA17 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001AA1C 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001AA21 06                         byte_1A3FD:	dc.b 6
0001AA22 E40A 0031 F4               		dc.b $E4, $A, 0, $31, $F4
0001AA27 EC05 0023 E4               		dc.b $EC, 5, 0,	$23, $E4
0001AA2C EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001AA31 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001AA36 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001AA3B 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001AA40                            		even
0001AA40                            		even
0001AA40                            
0001AA40                            Map_FZBoss:
0001AA40                            	include "_maps\FZ boss.asm"
0001AA40                            ; ---------------------------------------------------------------------------
0001AA40                            ; Sprite mappings - boss (FZ)
0001AA40                            ; ---------------------------------------------------------------------------
0001AA40 0000                       		dc.w byte_1A422-Map_FZBoss
0001AA42 0000                       		dc.w byte_1A42D-Map_FZBoss
0001AA44 0000                       		dc.w byte_1A43D-Map_FZBoss
0001AA46 02                         byte_1A422:	dc.b 2
0001AA47 140E 2800 F4               		dc.b $14, $E, $28, 0, $F4
0001AA4C 2400 280C EC               		dc.b $24, 0, $28, $C, $EC
0001AA51 03                         byte_1A42D:	dc.b 3
0001AA52 0C05 280D 0C               		dc.b $C, 5, $28, $D, $C
0001AA57 1C00 2811 0C               		dc.b $1C, 0, $28, $11, $C
0001AA5C 140D 2812 EC               		dc.b $14, $D, $28, $12,	$EC
0001AA61 02                         byte_1A43D:	dc.b 2
0001AA62 0C01 281A 0C               		dc.b $C, 1, $28, $1A, $C
0001AA67 140C 281C EC               		dc.b $14, $C, $28, $1C,	$EC
0001AA6C                            		even
0001AA6C                            		even
0001AA6C                            
0001AA6C                            ; ===========================================================================
0001AA6C                            
0001AA6C                            Obj84_Delete:
0001AA6C 4EF9 0000 DBE4             		jmp	DeleteObject
0001AA72                            ; ===========================================================================
0001AA72                            ; ---------------------------------------------------------------------------
0001AA72                            ; Object 84 - cylinder Eggman	hides in (FZ)
0001AA72                            ; ---------------------------------------------------------------------------
0001AA72                            
0001AA72                            Obj84:					; XREF: Obj_Index
0001AA72 7000                       		moveq	#0,d0
0001AA74 1028 0024                  		move.b	$24(a0),d0
0001AA78 303B 0000                  		move.w	Obj84_Index(pc,d0.w),d0
0001AA7C 4EFB 0000                  		jmp	Obj84_Index(pc,d0.w)
0001AA80                            ; ===========================================================================
0001AA80 0000                       Obj84_Index:	dc.w Obj84_Main-Obj84_Index
0001AA82 0000                       		dc.w loc_1A4CE-Obj84_Index
0001AA84 0000                       		dc.w loc_1A57E-Obj84_Index
0001AA86                            
0001AA86 24D0 0620                  Obj84_PosData:	dc.w $24D0, $620
0001AA8A 2550 0620                  		dc.w $2550, $620
0001AA8E 2490 04C0                  		dc.w $2490, $4C0
0001AA92 2510 04C0                  		dc.w $2510, $4C0
0001AA96                            ; ===========================================================================
0001AA96                            
0001AA96                            Obj84_Main:				; XREF: Obj84_Index
0001AA96 43FA FFEE                  		lea	Obj84_PosData(pc),a1
0001AA9A 7000                       		moveq	#0,d0
0001AA9C 1028 0028                  		move.b	$28(a0),d0
0001AAA0 D040                       		add.w	d0,d0
0001AAA2 D2C0                       		adda.w	d0,a1
0001AAA4 117C 0004 0001             		move.b	#4,1(a0)
0001AAAA 08E8 0007 0001             		bset	#7,1(a0)
0001AAB0 08E8 0004 0001             		bset	#4,1(a0)
0001AAB6 317C 0300 0002             		move.w	#$300,2(a0)
0001AABC 217C 0000 0000 0004        		move.l	#Map_obj84,4(a0)
0001AAC4 3159 0008                  		move.w	(a1)+,8(a0)
0001AAC8 3151 000C                  		move.w	(a1),$C(a0)
0001AACC 3159 0038                  		move.w	(a1)+,$38(a0)
0001AAD0 117C 0020 0016             		move.b	#$20,$16(a0)
0001AAD6 117C 0060 0017             		move.b	#$60,$17(a0)
0001AADC 117C 0020 0019             		move.b	#$20,$19(a0)
0001AAE2 117C 0060 0016             		move.b	#$60,$16(a0)
0001AAE8 117C 0003 0018             		move.b	#3,$18(a0)
0001AAEE 5428 0024                  		addq.b	#2,$24(a0)
0001AAF2                            
0001AAF2                            loc_1A4CE:				; XREF: Obj84_Index
0001AAF2 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001AAF8 6F00                       		ble.s	loc_1A4DC
0001AAFA 08E8 0001 0001             		bset	#1,1(a0)
0001AB00                            
0001AB00                            loc_1A4DC:
0001AB00 42A8 003C                  		clr.l	$3C(a0)
0001AB04 4A28 0029                  		tst.b	$29(a0)
0001AB08 6700                       		beq.s	loc_1A4EA
0001AB0A 5428 0024                  		addq.b	#2,$24(a0)
0001AB0E                            
0001AB0E                            loc_1A4EA:
0001AB0E 2028 003C                  		move.l	$3C(a0),d0
0001AB12 2228 0038                  		move.l	$38(a0),d1
0001AB16 D280                       		add.l	d0,d1
0001AB18 4841                       		swap	d1
0001AB1A 3141 000C                  		move.w	d1,$C(a0)
0001AB1E 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0001AB24 6600                       		bne.s	loc_1A524
0001AB26 4A68 0030                  		tst.w	$30(a0)
0001AB2A 6A00                       		bpl.s	loc_1A524
0001AB2C 70F6                       		moveq	#-$A,d0
0001AB2E 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001AB34 6F00                       		ble.s	loc_1A514
0001AB36 700E                       		moveq	#$E,d0
0001AB38                            
0001AB38                            loc_1A514:
0001AB38 D240                       		add.w	d0,d1
0001AB3A 2268 0034                  		movea.l	$34(a0),a1
0001AB3E 3341 000C                  		move.w	d1,$C(a1)
0001AB42 3368 0008 0008             		move.w	8(a0),8(a1)
0001AB48                            
0001AB48                            loc_1A524:
0001AB48 323C 002B                  		move.w	#$2B,d1
0001AB4C 343C 0060                  		move.w	#$60,d2
0001AB50 363C 0061                  		move.w	#$61,d3
0001AB54 3828 0008                  		move.w	8(a0),d4
0001AB58 4EB9 0000 FF78             		jsr	SolidObject
0001AB5E 7000                       		moveq	#0,d0
0001AB60 3228 003C                  		move.w	$3C(a0),d1
0001AB64 6A00                       		bpl.s	loc_1A550
0001AB66 4441                       		neg.w	d1
0001AB68 5141                       		subq.w	#8,d1
0001AB6A 6500                       		bcs.s	loc_1A55C
0001AB6C 5200                       		addq.b	#1,d0
0001AB6E E841                       		asr.w	#4,d1
0001AB70 D041                       		add.w	d1,d0
0001AB72 6000                       		bra.s	loc_1A55C
0001AB74                            ; ===========================================================================
0001AB74                            
0001AB74                            loc_1A550:
0001AB74 0441 0027                  		subi.w	#$27,d1
0001AB78 6500                       		bcs.s	loc_1A55C
0001AB7A 5200                       		addq.b	#1,d0
0001AB7C E841                       		asr.w	#4,d1
0001AB7E D041                       		add.w	d1,d0
0001AB80                            
0001AB80                            loc_1A55C:
0001AB80 1140 001A                  		move.b	d0,$1A(a0)
0001AB84 3038 D008                  		move.w	($FFFFD008).w,d0
0001AB88 9068 0008                  		sub.w	8(a0),d0
0001AB8C 6B00                       		bmi.s	loc_1A578
0001AB8E 0440 0140                  		subi.w	#$140,d0
0001AB92 6B00                       		bmi.s	loc_1A578
0001AB94 4A28 0001                  		tst.b	1(a0)
0001AB98 6A00 FED2                  		bpl.w	Obj84_Delete
0001AB9C                            
0001AB9C                            loc_1A578:
0001AB9C 4EF9 0000 DBA8             		jmp	DisplaySprite
0001ABA2                            ; ===========================================================================
0001ABA2                            
0001ABA2                            loc_1A57E:				; XREF: Obj84_Index
0001ABA2 7000                       		moveq	#0,d0
0001ABA4 1028 0028                  		move.b	$28(a0),d0
0001ABA8 303B 0000                  		move.w	off_1A590(pc,d0.w),d0
0001ABAC 4EBB 0000                  		jsr	off_1A590(pc,d0.w)
0001ABB0 6000 FF5C                  		bra.w	loc_1A4EA
0001ABB4                            ; ===========================================================================
0001ABB4 0000                       off_1A590:	dc.w loc_1A598-off_1A590
0001ABB6 0000                       		dc.w loc_1A598-off_1A590
0001ABB8 0000                       		dc.w loc_1A604-off_1A590
0001ABBA 0000                       		dc.w loc_1A604-off_1A590
0001ABBC                            ; ===========================================================================
0001ABBC                            
0001ABBC                            loc_1A598:				; XREF: off_1A590
0001ABBC 4A28 0029                  		tst.b	$29(a0)
0001ABC0 6600                       		bne.s	loc_1A5D4
0001ABC2 2268 0034                  		movea.l	$34(a0),a1
0001ABC6 4A29 0021                  		tst.b	$21(a1)
0001ABCA 6600                       		bne.s	loc_1A5B4
0001ABCC 6100 D2E0                  		bsr.w	BossDefeated
0001ABD0 04A8 0001 0000 003C        		subi.l	#$10000,$3C(a0)
0001ABD8                            
0001ABD8                            loc_1A5B4:
0001ABD8 06A8 0002 0000 003C        		addi.l	#$20000,$3C(a0)
0001ABE0 6400                       		bcc.s	locret_1A602
0001ABE2 42A8 003C                  		clr.l	$3C(a0)
0001ABE6 2268 0034                  		movea.l	$34(a0),a1
0001ABEA 5369 0032                  		subq.w	#1,$32(a1)
0001ABEE 4269 0030                  		clr.w	$30(a1)
0001ABF2 5528 0024                  		subq.b	#2,$24(a0)
0001ABF6 4E75                       		rts	
0001ABF8                            ; ===========================================================================
0001ABF8                            
0001ABF8                            loc_1A5D4:
0001ABF8 0C68 FFF0 003C             		cmpi.w	#-$10,$3C(a0)
0001ABFE 6C00                       		bge.s	loc_1A5E4
0001AC00 04A8 0002 8000 003C        		subi.l	#$28000,$3C(a0)
0001AC08                            
0001AC08                            loc_1A5E4:
0001AC08 04A8 0000 8000 003C        		subi.l	#$8000,$3C(a0)
0001AC10 0C68 FF60 003C             		cmpi.w	#-$A0,$3C(a0)
0001AC16 6E00                       		bgt.s	locret_1A602
0001AC18 4268 003E                  		clr.w	$3E(a0)
0001AC1C 317C FF60 003C             		move.w	#-$A0,$3C(a0)
0001AC22 4228 0029                  		clr.b	$29(a0)
0001AC26                            
0001AC26                            locret_1A602:
0001AC26 4E75                       		rts	
0001AC28                            ; ===========================================================================
0001AC28                            
0001AC28                            loc_1A604:				; XREF: off_1A590
0001AC28 08E8 0001 0001             		bset	#1,1(a0)
0001AC2E 4A28 0029                  		tst.b	$29(a0)
0001AC32 6600                       		bne.s	loc_1A646
0001AC34 2268 0034                  		movea.l	$34(a0),a1
0001AC38 4A29 0021                  		tst.b	$21(a1)
0001AC3C 6600                       		bne.s	loc_1A626
0001AC3E 6100 D26E                  		bsr.w	BossDefeated
0001AC42 06A8 0001 0000 003C        		addi.l	#$10000,$3C(a0)
0001AC4A                            
0001AC4A                            loc_1A626:
0001AC4A 04A8 0002 0000 003C        		subi.l	#$20000,$3C(a0)
0001AC52 6400                       		bcc.s	locret_1A674
0001AC54 42A8 003C                  		clr.l	$3C(a0)
0001AC58 2268 0034                  		movea.l	$34(a0),a1
0001AC5C 5369 0032                  		subq.w	#1,$32(a1)
0001AC60 4269 0030                  		clr.w	$30(a1)
0001AC64 5528 0024                  		subq.b	#2,$24(a0)
0001AC68 4E75                       		rts	
0001AC6A                            ; ===========================================================================
0001AC6A                            
0001AC6A                            loc_1A646:
0001AC6A 0C68 0010 003C             		cmpi.w	#$10,$3C(a0)
0001AC70 6D00                       		blt.s	loc_1A656
0001AC72 06A8 0002 8000 003C        		addi.l	#$28000,$3C(a0)
0001AC7A                            
0001AC7A                            loc_1A656:
0001AC7A 06A8 0000 8000 003C        		addi.l	#$8000,$3C(a0)
0001AC82 0C68 00A0 003C             		cmpi.w	#$A0,$3C(a0)
0001AC88 6D00                       		blt.s	locret_1A674
0001AC8A 4268 003E                  		clr.w	$3E(a0)
0001AC8E 317C 00A0 003C             		move.w	#$A0,$3C(a0)
0001AC94 4228 0029                  		clr.b	$29(a0)
0001AC98                            
0001AC98                            locret_1A674:
0001AC98 4E75                       		rts	
0001AC9A                            ; ===========================================================================
0001AC9A                            ; ---------------------------------------------------------------------------
0001AC9A                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001AC9A                            ; ---------------------------------------------------------------------------
0001AC9A                            Map_obj84:
0001AC9A                            	include "_maps\obj84.asm"
0001AC9A                            ; ---------------------------------------------------------------------------
0001AC9A                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001AC9A                            ; ---------------------------------------------------------------------------
0001AC9A 0000 0000                  		dc.w byte_1A68E-Map_obj84, byte_1A6AD-Map_obj84
0001AC9E 0000 0000                  		dc.w byte_1A6D6-Map_obj84, byte_1A709-Map_obj84
0001ACA2 0000 0000                  		dc.w byte_1A746-Map_obj84, byte_1A788-Map_obj84
0001ACA6 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001ACAA 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001ACAE 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A7CF-Map_obj84
0001ACB2 06                         byte_1A68E:	dc.b 6
0001ACB3 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001ACB8 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001ACBD B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001ACC2 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001ACC7 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001ACCC B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001ACD1 08                         byte_1A6AD:	dc.b 8
0001ACD2 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001ACD7 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001ACDC B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001ACE1 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001ACE6 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001ACEB B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001ACF0 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001ACF5 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001ACFA 0A                         byte_1A6D6:	dc.b $A
0001ACFB A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AD00 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AD05 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AD0A B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AD0F B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AD14 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AD19 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001AD1E D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001AD23 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001AD28 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001AD2D 0C                         byte_1A709:	dc.b $C
0001AD2E A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AD33 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AD38 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AD3D B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AD42 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AD47 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AD4C D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001AD51 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001AD56 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001AD5B F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001AD60 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001AD65 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001AD6A 0D                         byte_1A746:	dc.b $D
0001AD6B A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AD70 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AD75 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AD7A B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AD7F B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AD84 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AD89 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001AD8E D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001AD93 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001AD98 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001AD9D 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001ADA2 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001ADA7 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001ADAC 0E                         byte_1A788:	dc.b $E
0001ADAD A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001ADB2 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001ADB7 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001ADBC B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001ADC1 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001ADC6 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001ADCB D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001ADD0 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001ADD5 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001ADDA F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001ADDF 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001ADE4 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001ADE9 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001ADEE 580F 4050 F0               		dc.b $58, $F, $40, $50,	$F0
0001ADF3 02                         byte_1A7CF:	dc.b 2
0001ADF4 F804 0068 F0               		dc.b $F8, 4, 0,	$68, $F0
0001ADF9 000C 006A F0               		dc.b 0,	$C, 0, $6A, $F0
0001ADFE                            		even
0001ADFE                            		even
0001ADFE                            
0001ADFE                            ; ===========================================================================
0001ADFE                            ; ---------------------------------------------------------------------------
0001ADFE                            ; Object 86 - energy balls (FZ)
0001ADFE                            ; ---------------------------------------------------------------------------
0001ADFE                            
0001ADFE                            Obj86:					; XREF: Obj_Index
0001ADFE 7000                       		moveq	#0,d0
0001AE00 1028 0024                  		move.b	$24(a0),d0
0001AE04 303B 0000                  		move.w	Obj86_Index(pc,d0.w),d0
0001AE08 4EFB 0000                  		jmp	Obj86_Index(pc,d0.w)
0001AE0C                            ; ===========================================================================
0001AE0C 0000                       Obj86_Index:	dc.w Obj86_Main-Obj86_Index
0001AE0E 0000                       		dc.w Obj86_Generator-Obj86_Index
0001AE10 0000                       		dc.w Obj86_MakeBalls-Obj86_Index
0001AE12 0000                       		dc.w loc_1A962-Obj86_Index
0001AE14 0000                       		dc.w loc_1A982-Obj86_Index
0001AE16                            ; ===========================================================================
0001AE16                            
0001AE16                            Obj86_Main:				; XREF: Obj86_Index
0001AE16 317C 2588 0008             		move.w	#$2588,8(a0)
0001AE1C 317C 053C 000C             		move.w	#$53C,$C(a0)
0001AE22 317C 0300 0002             		move.w	#$300,2(a0)
0001AE28 217C 0000 0000 0004        		move.l	#Map_obj86,4(a0)
0001AE30 117C 0000 001C             		move.b	#0,$1C(a0)
0001AE36 117C 0003 0018             		move.b	#3,$18(a0)
0001AE3C 117C 0008 0017             		move.b	#8,$17(a0)
0001AE42 117C 0008 0016             		move.b	#8,$16(a0)
0001AE48 117C 0004 0001             		move.b	#4,1(a0)
0001AE4E 08E8 0007 0001             		bset	#7,1(a0)
0001AE54 5428 0024                  		addq.b	#2,$24(a0)
0001AE58                            
0001AE58                            Obj86_Generator:			; XREF: Obj86_Index
0001AE58 2268 0034                  		movea.l	$34(a0),a1
0001AE5C 0C29 0006 0034             		cmpi.b	#6,$34(a1)
0001AE62 6600                       		bne.s	loc_1A850
0001AE64 10BC 003F                  		move.b	#$3F,(a0)
0001AE68 117C 0000 0024             		move.b	#0,$24(a0)
0001AE6E 4EF9 0000 DBA8             		jmp	DisplaySprite
0001AE74                            ; ===========================================================================
0001AE74                            
0001AE74                            loc_1A850:
0001AE74 117C 0000 001C             		move.b	#0,$1C(a0)
0001AE7A 4A28 0029                  		tst.b	$29(a0)
0001AE7E 6700                       		beq.s	loc_1A86C
0001AE80 5428 0024                  		addq.b	#2,$24(a0)
0001AE84 117C 0001 001C             		move.b	#1,$1C(a0)
0001AE8A 117C 003E 0028             		move.b	#$3E,$28(a0)
0001AE90                            
0001AE90                            loc_1A86C:
0001AE90 323C 0013                  		move.w	#$13,d1
0001AE94 343C 0008                  		move.w	#8,d2
0001AE98 363C 0011                  		move.w	#$11,d3
0001AE9C 3828 0008                  		move.w	8(a0),d4
0001AEA0 4EB9 0000 FF78             		jsr	SolidObject
0001AEA6 3038 D008                  		move.w	($FFFFD008).w,d0
0001AEAA 9068 0008                  		sub.w	8(a0),d0
0001AEAE 6B00                       		bmi.s	loc_1A89A
0001AEB0 0440 0140                  		subi.w	#$140,d0
0001AEB4 6B00                       		bmi.s	loc_1A89A
0001AEB6 4A28 0001                  		tst.b	1(a0)
0001AEBA 6A00 FBB0                  		bpl.w	Obj84_Delete
0001AEBE                            
0001AEBE                            loc_1A89A:
0001AEBE 43FA 0000                  		lea	Ani_obj86(pc),a1
0001AEC2 4EB9 0000 AC42             		jsr	AnimateSprite
0001AEC8 4EF9 0000 DBA8             		jmp	DisplaySprite
0001AECE                            ; ===========================================================================
0001AECE                            
0001AECE                            Obj86_MakeBalls:			; XREF: Obj86_Index
0001AECE 4A28 0029                  		tst.b	$29(a0)
0001AED2 6700 0000                  		beq.w	loc_1A954
0001AED6 4228 0029                  		clr.b	$29(a0)
0001AEDA D068 0030                  		add.w	$30(a0),d0
0001AEDE 0240 001E                  		andi.w	#$1E,d0
0001AEE2 D4C0                       		adda.w	d0,a2
0001AEE4 5868 0030                  		addq.w	#4,$30(a0)
0001AEE8 4268 0032                  		clr.w	$32(a0)
0001AEEC 7403                       		moveq	#3,d2
0001AEEE                            
0001AEEE                            Obj86_Loop:
0001AEEE 4EB9 0000 E044             		jsr	SingleObjLoad2
0001AEF4 6600 0000                  		bne.w	loc_1A954
0001AEF8 12BC 0086                  		move.b	#$86,(a1)
0001AEFC 3368 0008 0008             		move.w	8(a0),8(a1)
0001AF02 337C 053C 000C             		move.w	#$53C,$C(a1)
0001AF08 137C 0008 0024             		move.b	#8,$24(a1)
0001AF0E 337C 2300 0002             		move.w	#$2300,2(a1)
0001AF14 237C 0000 0000 0004        		move.l	#Map_obj86a,4(a1)
0001AF1C 137C 000C 0016             		move.b	#$C,$16(a1)
0001AF22 137C 000C 0017             		move.b	#$C,$17(a1)
0001AF28 137C 0000 0020             		move.b	#0,$20(a1)
0001AF2E 137C 0003 0018             		move.b	#3,$18(a1)
0001AF34 337C 003E 0028             		move.w	#$3E,$28(a1)
0001AF3A 137C 0004 0001             		move.b	#4,1(a1)
0001AF40 08E9 0007 0001             		bset	#7,1(a1)
0001AF46 2348 0034                  		move.l	a0,$34(a1)
0001AF4A 4EB9 0000 2BFC             		jsr	(RandomNumber).l
0001AF50 3228 0032                  		move.w	$32(a0),d1
0001AF54 C3FC FFB1                  		muls.w	#-$4F,d1
0001AF58 0641 2578                  		addi.w	#$2578,d1
0001AF5C 0240 001F                  		andi.w	#$1F,d0
0001AF60 0440 0010                  		subi.w	#$10,d0
0001AF64 D041                       		add.w	d1,d0
0001AF66 3340 0030                  		move.w	d0,$30(a1)
0001AF6A 5268 0032                  		addq.w	#1,$32(a0)
0001AF6E 3168 0032 0038             		move.w	$32(a0),$38(a0)
0001AF74 51CA FF78                  		dbf	d2,Obj86_Loop	; repeat sequence 3 more times
0001AF78                            
0001AF78                            loc_1A954:
0001AF78 4A68 0032                  		tst.w	$32(a0)
0001AF7C 6600                       		bne.s	loc_1A95E
0001AF7E 5428 0024                  		addq.b	#2,$24(a0)
0001AF82                            
0001AF82                            loc_1A95E:
0001AF82 6000 FF0C                  		bra.w	loc_1A86C
0001AF86                            ; ===========================================================================
0001AF86                            
0001AF86                            loc_1A962:				; XREF: Obj86_Index
0001AF86 117C 0002 001C             		move.b	#2,$1C(a0)
0001AF8C 4A68 0038                  		tst.w	$38(a0)
0001AF90 6600                       		bne.s	loc_1A97E
0001AF92 117C 0002 0024             		move.b	#2,$24(a0)
0001AF98 2268 0034                  		movea.l	$34(a0),a1
0001AF9C 337C FFFF 0032             		move.w	#-1,$32(a1)
0001AFA2                            
0001AFA2                            loc_1A97E:
0001AFA2 6000 FEEC                  		bra.w	loc_1A86C
0001AFA6                            ; ===========================================================================
0001AFA6                            
0001AFA6                            loc_1A982:				; XREF: Obj86_Index
0001AFA6 7000                       		moveq	#0,d0
0001AFA8 1028 0025                  		move.b	$25(a0),d0
0001AFAC 303B 0000                  		move.w	Obj86_Index2(pc,d0.w),d0
0001AFB0 4EBB 0000                  		jsr	Obj86_Index2(pc,d0.w)
0001AFB4 43FA 0000                  		lea	Ani_obj86a(pc),a1
0001AFB8 4EB9 0000 AC42             		jsr	AnimateSprite
0001AFBE 4EF9 0000 DBA8             		jmp	DisplaySprite
0001AFC4                            ; ===========================================================================
0001AFC4 0000                       Obj86_Index2:	dc.w loc_1A9A6-Obj86_Index2
0001AFC6 0000                       		dc.w loc_1A9C0-Obj86_Index2
0001AFC8 0000                       		dc.w loc_1AA1E-Obj86_Index2
0001AFCA                            ; ===========================================================================
0001AFCA                            
0001AFCA                            loc_1A9A6:				; XREF: Obj86_Index2
0001AFCA 3028 0030                  		move.w	$30(a0),d0
0001AFCE 9068 0008                  		sub.w	8(a0),d0
0001AFD2 E940                       		asl.w	#4,d0
0001AFD4 3140 0010                  		move.w	d0,$10(a0)
0001AFD8 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001AFDE 5428 0025                  		addq.b	#2,$25(a0)
0001AFE2 4E75                       		rts	
0001AFE4                            ; ===========================================================================
0001AFE4                            
0001AFE4                            loc_1A9C0:				; XREF: Obj86_Index2
0001AFE4 4A68 0010                  		tst.w	$10(a0)
0001AFE8 6700                       		beq.s	loc_1A9E6
0001AFEA 4EB9 0000 DB82             		jsr	SpeedToPos
0001AFF0 3028 0008                  		move.w	8(a0),d0
0001AFF4 9068 0030                  		sub.w	$30(a0),d0
0001AFF8 6400                       		bcc.s	loc_1A9E6
0001AFFA 4268 0010                  		clr.w	$10(a0)
0001AFFE D168 0008                  		add.w	d0,8(a0)
0001B002 2268 0034                  		movea.l	$34(a0),a1
0001B006 5369 0032                  		subq.w	#1,$32(a1)
0001B00A                            
0001B00A                            loc_1A9E6:
0001B00A 117C 0000 001C             		move.b	#0,$1C(a0)
0001B010 5368 0028                  		subq.w	#1,$28(a0)
0001B014 6600                       		bne.s	locret_1AA1C
0001B016 5428 0025                  		addq.b	#2,$25(a0)
0001B01A 117C 0001 001C             		move.b	#1,$1C(a0)
0001B020 117C 009A 0020             		move.b	#$9A,$20(a0)
0001B026 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001B02C 7000                       		moveq	#0,d0
0001B02E 3038 D008                  		move.w	($FFFFD008).w,d0
0001B032 9068 0008                  		sub.w	8(a0),d0
0001B036 3140 0010                  		move.w	d0,$10(a0)
0001B03A 317C 0140 0012             		move.w	#$140,$12(a0)
0001B040                            
0001B040                            locret_1AA1C:
0001B040 4E75                       		rts	
0001B042                            ; ===========================================================================
0001B042                            
0001B042                            loc_1AA1E:				; XREF: Obj86_Index2
0001B042 4EB9 0000 DB82             		jsr	SpeedToPos
0001B048 0C68 05E0 000C             		cmpi.w	#$5E0,$C(a0)
0001B04E 6400                       		bcc.s	loc_1AA34
0001B050 5368 0028                  		subq.w	#1,$28(a0)
0001B054 6700                       		beq.s	loc_1AA34
0001B056 4E75                       		rts	
0001B058                            ; ===========================================================================
0001B058                            
0001B058                            loc_1AA34:
0001B058 2268 0034                  		movea.l	$34(a0),a1
0001B05C 5369 0038                  		subq.w	#1,$38(a1)
0001B060 6000 FA0A                  		bra.w	Obj84_Delete
0001B064                            ; ===========================================================================
0001B064                            Ani_obj86:
0001B064                            	include "_anim\obj86.asm"
0001B064                            ; ---------------------------------------------------------------------------
0001B064                            ; Animation script - energy ball launcher (FZ)
0001B064                            ; ---------------------------------------------------------------------------
0001B064 0000                       		dc.w byte_1AA46-Ani_obj86
0001B066 0000                       		dc.w byte_1AA4A-Ani_obj86
0001B068 0000                       		dc.w byte_1AA50-Ani_obj86
0001B06A 7E00 FF00                  byte_1AA46:	dc.b $7E, 0, $FF, 0
0001B06E 0100 0200 03FF             byte_1AA4A:	dc.b 1,	0, 2, 0, 3, $FF
0001B074 0101 0201 03FF             byte_1AA50:	dc.b 1,	1, 2, 1, 3, $FF
0001B07A                            		even
0001B07A                            		even
0001B07A                            
0001B07A                            ; ---------------------------------------------------------------------------
0001B07A                            ; Sprite mappings - energy ball	launcher (FZ)
0001B07A                            ; ---------------------------------------------------------------------------
0001B07A                            Map_obj86:
0001B07A                            	include "_maps\obj86.asm"
0001B07A                            ; ---------------------------------------------------------------------------
0001B07A                            ; Sprite mappings - energy ball	launcher (FZ)
0001B07A                            ; ---------------------------------------------------------------------------
0001B07A 0000 0000                  		dc.w byte_1AA5E-Map_obj86, byte_1AA64-Map_obj86
0001B07E 0000 0000                  		dc.w byte_1AA6A-Map_obj86, byte_1AA70-Map_obj86
0001B082 01                         byte_1AA5E:	dc.b 1
0001B083 F805 006E F8               		dc.b $F8, 5, 0,	$6E, $F8
0001B088 01                         byte_1AA64:	dc.b 1
0001B089 F805 0076 F8               		dc.b $F8, 5, 0,	$76, $F8
0001B08E 01                         byte_1AA6A:	dc.b 1
0001B08F F805 0072 F8               		dc.b $F8, 5, 0,	$72, $F8
0001B094 01                         byte_1AA70:	dc.b 1
0001B095 F805 1072 F8               		dc.b $F8, 5, $10, $72, $F8
0001B09A                            		even
0001B09A                            		even
0001B09A                            
0001B09A                            Ani_obj86a:
0001B09A                            	include "_anim\obj86a.asm"
0001B09A                            ; ---------------------------------------------------------------------------
0001B09A                            ; Animation script - energy balls (FZ)
0001B09A                            ; ---------------------------------------------------------------------------
0001B09A 0000                       		dc.w byte_1AA7A-Ani_obj86a
0001B09C 0000                       		dc.w byte_1AA9C-Ani_obj86a
0001B09E 0100 0A08 0A01 0A09 0A06+  byte_1AA7A:	dc.b 1,	0, $A, 8, $A, 1, $A, 9,	$A, 6, $A, 7, $A, 0, $A
0001B0AD 080A 010A 090A 060A 070A+  		dc.b 8,	$A, 1, $A, 9, $A, 6, $A, 7, $A,	2, $A, 3, $A, 4
0001B0BC 0A05 FF00                  		dc.b $A, 5, $FF, 0
0001B0C0 0006 0501 0507 0501 05FF   byte_1AA9C:	dc.b 0,	6, 5, 1, 5, 7, 5, 1, 5,	$FF
0001B0CA                            		even
0001B0CA                            		even
0001B0CA                            
0001B0CA                            ; ---------------------------------------------------------------------------
0001B0CA                            ; Sprite mappings - energy balls (FZ)
0001B0CA                            ; ---------------------------------------------------------------------------
0001B0CA                            Map_obj86a:
0001B0CA                            	include "_maps\obj86a.asm"
0001B0CA                            ; ---------------------------------------------------------------------------
0001B0CA                            ; Sprite mappings - energy balls (FZ)
0001B0CA                            ; ---------------------------------------------------------------------------
0001B0CA 0000 0000                  		dc.w byte_1AABC-Map_obj86a, byte_1AAC7-Map_obj86a
0001B0CE 0000 0000                  		dc.w byte_1AAD2-Map_obj86a, byte_1AADD-Map_obj86a
0001B0D2 0000 0000                  		dc.w byte_1AAE8-Map_obj86a, byte_1AAF3-Map_obj86a
0001B0D6 0000 0000                  		dc.w byte_1AAFE-Map_obj86a, byte_1AB04-Map_obj86a
0001B0DA 0000 0000                  		dc.w byte_1AB0A-Map_obj86a, byte_1AB15-Map_obj86a
0001B0DE 0000                       		dc.w byte_1AB20-Map_obj86a
0001B0E0 02                         byte_1AABC:	dc.b 2
0001B0E1 F00D 007A F0               		dc.b $F0, $D, 0, $7A, $F0
0001B0E6 000D 187A F0               		dc.b 0,	$D, $18, $7A, $F0
0001B0EB 02                         byte_1AAC7:	dc.b 2
0001B0EC F406 0082 F4               		dc.b $F4, 6, 0,	$82, $F4
0001B0F1 F402 1882 04               		dc.b $F4, 2, $18, $82, 4
0001B0F6 02                         byte_1AAD2:	dc.b 2
0001B0F7 F804 0088 F8               		dc.b $F8, 4, 0,	$88, $F8
0001B0FC 0004 1088 F8               		dc.b 0,	4, $10,	$88, $F8
0001B101 02                         byte_1AADD:	dc.b 2
0001B102 F804 008A F8               		dc.b $F8, 4, 0,	$8A, $F8
0001B107 0004 108A F8               		dc.b 0,	4, $10,	$8A, $F8
0001B10C 02                         byte_1AAE8:	dc.b 2
0001B10D F804 008C F8               		dc.b $F8, 4, 0,	$8C, $F8
0001B112 0004 108C F8               		dc.b 0,	4, $10,	$8C, $F8
0001B117 02                         byte_1AAF3:	dc.b 2
0001B118 F406 008E F4               		dc.b $F4, 6, 0,	$8E, $F4
0001B11D F402 188E 04               		dc.b $F4, 2, $18, $8E, 4
0001B122 01                         byte_1AAFE:	dc.b 1
0001B123 F805 0094 F8               		dc.b $F8, 5, 0,	$94, $F8
0001B128 01                         byte_1AB04:	dc.b 1
0001B129 F805 0098 F8               		dc.b $F8, 5, 0,	$98, $F8
0001B12E 02                         byte_1AB0A:	dc.b 2
0001B12F F00D 087A F0               		dc.b $F0, $D, 8, $7A, $F0
0001B134 000D 107A F0               		dc.b 0,	$D, $10, $7A, $F0
0001B139 02                         byte_1AB15:	dc.b 2
0001B13A F406 1082 F4               		dc.b $F4, 6, $10, $82, $F4
0001B13F F402 0882 04               		dc.b $F4, 2, 8,	$82, 4
0001B144 00                         byte_1AB20:	dc.b 0
0001B146 00                         		even
0001B146 00                         		even
0001B146                            
0001B146                            ; ===========================================================================
0001B146                            ; ---------------------------------------------------------------------------
0001B146                            ; Object 3E - prison capsule
0001B146                            ; ---------------------------------------------------------------------------
0001B146                            
0001B146                            Obj3E:					; XREF: Obj_Index
0001B146 7000                       		moveq	#0,d0
0001B148 1028 0024                  		move.b	$24(a0),d0
0001B14C 323B 0000                  		move.w	Obj3E_Index(pc,d0.w),d1
0001B150 4EBB 1000                  		jsr	Obj3E_Index(pc,d1.w)
0001B154 3028 0008                  		move.w	8(a0),d0
0001B158 0240 FF80                  		andi.w	#$FF80,d0
0001B15C 3238 F700                  		move.w	($FFFFF700).w,d1
0001B160 0441 0080                  		subi.w	#$80,d1
0001B164 0241 FF80                  		andi.w	#$FF80,d1
0001B168 9041                       		sub.w	d1,d0
0001B16A 0C40 0280                  		cmpi.w	#$280,d0
0001B16E 6200                       		bhi.s	Obj3E_Delete
0001B170 4EF9 0000 DBA8             		jmp	DisplaySprite
0001B176                            ; ===========================================================================
0001B176                            
0001B176                            Obj3E_Delete:
0001B176 4EF9 0000 DBE4             		jmp	DeleteObject
0001B17C                            ; ===========================================================================
0001B17C 0000                       Obj3E_Index:	dc.w Obj3E_Main-Obj3E_Index
0001B17E 0000                       		dc.w Obj3E_BodyMain-Obj3E_Index
0001B180 0000                       		dc.w Obj3E_Switched-Obj3E_Index
0001B182 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001B184 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001B186 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001B188 0000                       		dc.w Obj3E_Animals-Obj3E_Index
0001B18A 0000                       		dc.w Obj3E_EndAct-Obj3E_Index
0001B18C                            
0001B18C 0220 0400                  Obj3E_Var:	dc.b 2,	$20, 4,	0	; routine, width, priority, frame
0001B190 040C 0501                  		dc.b 4,	$C, 5, 1
0001B194 0610 0403                  		dc.b 6,	$10, 4,	3
0001B198 0810 0305                  		dc.b 8,	$10, 3,	5
0001B19C                            ; ===========================================================================
0001B19C                            
0001B19C                            Obj3E_Main:				; XREF: Obj3E_Index
0001B19C 217C 0000 0000 0004        		move.l	#Map_obj3E,4(a0)
0001B1A4 317C 049D 0002             		move.w	#$49D,2(a0)
0001B1AA 117C 0004 0001             		move.b	#4,1(a0)
0001B1B0 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001B1B6 7000                       		moveq	#0,d0
0001B1B8 1028 0028                  		move.b	$28(a0),d0
0001B1BC E548                       		lsl.w	#2,d0
0001B1BE 43FB 00CC                  		lea	Obj3E_Var(pc,d0.w),a1
0001B1C2 1159 0024                  		move.b	(a1)+,$24(a0)
0001B1C6 1159 0019                  		move.b	(a1)+,$19(a0)
0001B1CA 1159 0018                  		move.b	(a1)+,$18(a0)
0001B1CE 1159 001A                  		move.b	(a1)+,$1A(a0)
0001B1D2 0C40 0008                  		cmpi.w	#8,d0		; is object type number	02?
0001B1D6 6600                       		bne.s	Obj3E_Not02	; if not, branch
0001B1D8 117C 0006 0020             		move.b	#6,$20(a0)
0001B1DE 117C 0008 0021             		move.b	#8,$21(a0)
0001B1E4                            
0001B1E4                            Obj3E_Not02:
0001B1E4 4E75                       		rts	
0001B1E6                            ; ===========================================================================
0001B1E6                            
0001B1E6                            Obj3E_BodyMain:				; XREF: Obj3E_Index
0001B1E6 0C38 0002 F7A7             		cmpi.b	#2,($FFFFF7A7).w
0001B1EC 6700                       		beq.s	Obj3E_ChkOpened
0001B1EE 323C 002B                  		move.w	#$2B,d1
0001B1F2 343C 0018                  		move.w	#$18,d2
0001B1F6 363C 0018                  		move.w	#$18,d3
0001B1FA 3828 0008                  		move.w	8(a0),d4
0001B1FE 4EF9 0000 FF78             		jmp	SolidObject
0001B204                            ; ===========================================================================
0001B204                            
0001B204                            Obj3E_ChkOpened:
0001B204 4A28 0025                  		tst.b	$25(a0)		; has the prison been opened?
0001B208 6700                       		beq.s	Obj3E_DoOpen	; if yes, branch
0001B20A 4228 0025                  		clr.b	$25(a0)
0001B20E 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001B214 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001B21A                            
0001B21A                            Obj3E_DoOpen:
0001B21A 117C 0002 001A             		move.b	#2,$1A(a0)	; use frame number 2 (destroyed	prison)
0001B220 4E75                       		rts	
0001B222                            ; ===========================================================================
0001B222                            
0001B222                            Obj3E_Switched:				; XREF: Obj3E_Index
0001B222 323C 0017                  		move.w	#$17,d1
0001B226 343C 0008                  		move.w	#8,d2
0001B22A 363C 0008                  		move.w	#8,d3
0001B22E 3828 0008                  		move.w	8(a0),d4
0001B232 4EB9 0000 FF78             		jsr	SolidObject
0001B238 43F9 0000 0000             		lea	(Ani_obj3E).l,a1
0001B23E 4EB9 0000 AC42             		jsr	AnimateSprite
0001B244 3168 0030 000C             		move.w	$30(a0),$C(a0)
0001B24A 4A28 0025                  		tst.b	$25(a0)
0001B24E 6700                       		beq.s	locret_1AC60
0001B250 5068 000C                  		addq.w	#8,$C(a0)
0001B254 117C 000A 0024             		move.b	#$A,$24(a0)
0001B25A 317C 003C 001E             		move.w	#$3C,$1E(a0)
0001B260 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0001B264 4238 F7AA                  		clr.b	($FFFFF7AA).w	; lock screen position
0001B268 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0001B26E 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0001B274 6700                       		beq.s	Obj3E_MoveLeft	; GMZ: If not, branch
0001B276 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; make Sonic run to	the right
0001B27C 6000                       		bra.s	Obj3E_ContinueCode
0001B27E                            
0001B27E                            Obj3E_MoveLeft:
0001B27E 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0001B284                            
0001B284                            Obj3E_ContinueCode:
0001B284 4228 0025                  		clr.b	$25(a0)
0001B288 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001B28E 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001B294                            
0001B294                            locret_1AC60:
0001B294 4E75                       		rts	
0001B296                            ; ===========================================================================
0001B296                            
0001B296                            Obj3E_Explosion:			; XREF: Obj3E_Index
0001B296 7007                       		moveq	#7,d0
0001B298 C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001B29C 6600                       		bne.s	loc_1ACA0
0001B29E 4EB9 0000 E02E             		jsr	SingleObjLoad
0001B2A4 6600                       		bne.s	loc_1ACA0
0001B2A6 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
0001B2AA 3368 0008 0008             		move.w	8(a0),8(a1)
0001B2B0 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B2B6 4EB9 0000 2BFC             		jsr	(RandomNumber).l
0001B2BC 7200                       		moveq	#0,d1
0001B2BE 1200                       		move.b	d0,d1
0001B2C0 E409                       		lsr.b	#2,d1
0001B2C2 0441 0020                  		subi.w	#$20,d1
0001B2C6 D369 0008                  		add.w	d1,8(a1)
0001B2CA E048                       		lsr.w	#8,d0
0001B2CC E608                       		lsr.b	#3,d0
0001B2CE D169 000C                  		add.w	d0,$C(a1)
0001B2D2                            
0001B2D2                            loc_1ACA0:
0001B2D2 5368 001E                  		subq.w	#1,$1E(a0)
0001B2D6 6700                       		beq.s	Obj3E_MakeAnimal
0001B2D8 4E75                       		rts	
0001B2DA                            ; ===========================================================================
0001B2DA                            
0001B2DA                            Obj3E_MakeAnimal:
0001B2DA 11FC 0002 F7A7             		move.b	#2,($FFFFF7A7).w
0001B2E0 117C 000C 0024             		move.b	#$C,$24(a0)	; replace explosions with animals
0001B2E6 117C 0006 001A             		move.b	#6,$1A(a0)
0001B2EC 317C 0096 001E             		move.w	#$96,$1E(a0)
0001B2F2 0668 0020 000C             		addi.w	#$20,$C(a0)
0001B2F8 7C07                       		moveq	#7,d6
0001B2FA 3A3C 009A                  		move.w	#$9A,d5
0001B2FE 78E4                       		moveq	#-$1C,d4
0001B300                            
0001B300                            Obj3E_Loop:
0001B300 4EB9 0000 E02E             		jsr	SingleObjLoad
0001B306 6600                       		bne.s	locret_1ACF8
0001B308 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001B30C 3368 0008 0008             		move.w	8(a0),8(a1)
0001B312 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B318 D969 0008                  		add.w	d4,8(a1)
0001B31C 5E44                       		addq.w	#7,d4
0001B31E 3345 0036                  		move.w	d5,$36(a1)
0001B322 5145                       		subq.w	#8,d5
0001B324 51CE FFDA                  		dbf	d6,Obj3E_Loop	; repeat 7 more	times
0001B328                            
0001B328                            locret_1ACF8:
0001B328 4E75                       		rts	
0001B32A                            ; ===========================================================================
0001B32A                            
0001B32A                            Obj3E_Animals:				; XREF: Obj3E_Index
0001B32A 7007                       		moveq	#7,d0
0001B32C C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001B330 6600                       		bne.s	loc_1AD38
0001B332 4EB9 0000 E02E             		jsr	SingleObjLoad
0001B338 6600                       		bne.s	loc_1AD38
0001B33A 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001B33E 3368 0008 0008             		move.w	8(a0),8(a1)
0001B344 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B34A 4EB9 0000 2BFC             		jsr	(RandomNumber).l
0001B350 0240 001F                  		andi.w	#$1F,d0
0001B354 5D40                       		subq.w	#6,d0
0001B356 4A41                       		tst.w	d1
0001B358 6A00                       		bpl.s	loc_1AD2E
0001B35A 4440                       		neg.w	d0
0001B35C                            
0001B35C                            loc_1AD2E:
0001B35C D169 0008                  		add.w	d0,8(a1)
0001B360 337C 000C 0036             		move.w	#$C,$36(a1)
0001B366                            
0001B366                            loc_1AD38:
0001B366 5368 001E                  		subq.w	#1,$1E(a0)
0001B36A 6600                       		bne.s	locret_1AD48
0001B36C 5428 0024                  		addq.b	#2,$24(a0)
0001B370 317C 00B4 001E             		move.w	#180,$1E(a0)
0001B376                            
0001B376                            locret_1AD48:
0001B376 4E75                       		rts	
0001B378                            ; ===========================================================================
0001B378                            
0001B378                            Obj3E_EndAct:				; XREF: Obj3E_Index
0001B378 703E                       		moveq	#$3E,d0
0001B37A 7228                       		moveq	#$28,d1
0001B37C 7440                       		moveq	#$40,d2
0001B37E 43F8 D040                  		lea	($FFFFD040).w,a1 ; load	object RAM
0001B382                            
0001B382                            Obj3E_FindObj28:
0001B382 B211                       		cmp.b	(a1),d1		; is object $28	(animal) loaded?
0001B384 6700                       		beq.s	Obj3E_Obj28Found ; if yes, branch
0001B386 D2C2                       		adda.w	d2,a1		; next object RAM
0001B388 51C8 FFF8                  		dbf	d0,Obj3E_FindObj28 ; repeat $3E	times
0001B38C                            
0001B38C 4EB9 0000 F234             		jsr	GotThroughAct
0001B392 4EF9 0000 DBE4             		jmp	DeleteObject
0001B398                            ; ===========================================================================
0001B398                            
0001B398                            Obj3E_Obj28Found:
0001B398 4E75                       		rts	
0001B39A                            ; ===========================================================================
0001B39A                            Ani_obj3E:
0001B39A                            	include "_anim\obj3E.asm"
0001B39A                            ; ---------------------------------------------------------------------------
0001B39A                            ; Animation script - prison capsule
0001B39A                            ; ---------------------------------------------------------------------------
0001B39A 0000                       		dc.w byte_1AD70-Ani_obj3E
0001B39C 0000                       		dc.w byte_1AD70-Ani_obj3E
0001B39E 0201 03FF                  byte_1AD70:	dc.b 2,	1, 3, $FF
0001B3A2                            		even
0001B3A2                            		even
0001B3A2                            
0001B3A2                            ; ---------------------------------------------------------------------------
0001B3A2                            ; Sprite mappings - prison capsule
0001B3A2                            ; ---------------------------------------------------------------------------
0001B3A2                            Map_obj3E:
0001B3A2                            	include "_maps\obj3E.asm"
0001B3A2                            ; ---------------------------------------------------------------------------
0001B3A2                            ; Sprite mappings - prison capsule
0001B3A2                            ; ---------------------------------------------------------------------------
0001B3A2 0000 0000                  		dc.w byte_1AD82-Map_obj3E, byte_1ADA6-Map_obj3E
0001B3A6 0000 0000                  		dc.w byte_1ADAC-Map_obj3E, byte_1ADCB-Map_obj3E
0001B3AA 0000 0000                  		dc.w byte_1ADD1-Map_obj3E, byte_1ADDC-Map_obj3E
0001B3AE 0000                       		dc.w byte_1ADE2-Map_obj3E
0001B3B0 07                         byte_1AD82:	dc.b 7
0001B3B1 E00C 2000 F0               		dc.b $E0, $C, $20, 0, $F0
0001B3B6 E80D 2004 E0               		dc.b $E8, $D, $20, 4, $E0
0001B3BB E80D 200C 00               		dc.b $E8, $D, $20, $C, 0
0001B3C0 F80E 2014 E0               		dc.b $F8, $E, $20, $14,	$E0
0001B3C5 F80E 2020 00               		dc.b $F8, $E, $20, $20,	0
0001B3CA 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001B3CF 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001B3D4 01                         byte_1ADA6:	dc.b 1
0001B3D5 F809 003C F4               		dc.b $F8, 9, 0,	$3C, $F4
0001B3DA 06                         byte_1ADAC:	dc.b 6
0001B3DB 0008 2042 E0               		dc.b 0,	8, $20,	$42, $E0
0001B3E0 080C 2045 E0               		dc.b 8,	$C, $20, $45, $E0
0001B3E5 0004 2049 10               		dc.b 0,	4, $20,	$49, $10
0001B3EA 080C 204B 00               		dc.b 8,	$C, $20, $4B, 0
0001B3EF 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001B3F4 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001B3F9 01                         byte_1ADCB:	dc.b 1
0001B3FA F809 004F F4               		dc.b $F8, 9, 0,	$4F, $F4
0001B3FF 02                         byte_1ADD1:	dc.b 2
0001B400 E80E 2055 F0               		dc.b $E8, $E, $20, $55,	$F0
0001B405 000E 2061 F0               		dc.b 0,	$E, $20, $61, $F0
0001B40A 01                         byte_1ADDC:	dc.b 1
0001B40B F007 206D F8               		dc.b $F0, 7, $20, $6D, $F8
0001B410 00                         byte_1ADE2:	dc.b 0
0001B412 00                         		even
0001B412 00                         		even
0001B412                            
0001B412                            ; ---------------------------------------------------------------------------
0001B412                            ; Object touch response	subroutine - $20(a0) in	the object RAM
0001B412                            ; ---------------------------------------------------------------------------
0001B412                            
0001B412                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B412                            
0001B412                            
0001B412                            TouchResponse:				; XREF: Obj01
0001B412 4E71                       		nop	
0001B414 3428 0008                  		move.w	8(a0),d2	; load Sonic's x-axis value
0001B418 3628 000C                  		move.w	$C(a0),d3	; load Sonic's y-axis value
0001B41C 5142                       		subq.w	#8,d2
0001B41E 7A00                       		moveq	#0,d5
0001B420 1A28 0016                  		move.b	$16(a0),d5	; load Sonic's height
0001B424 5705                       		subq.b	#3,d5
0001B426 9645                       		sub.w	d5,d3
0001B428 0C28 0039 001A             		cmpi.b	#$39,$1A(a0)	; is Sonic ducking?
0001B42E 6600                       		bne.s	Touch_NoDuck	; if not, branch
0001B430 0643 000C                  		addi.w	#$C,d3
0001B434 7A0A                       		moveq	#$A,d5
0001B436                            
0001B436                            Touch_NoDuck:
0001B436 383C 0010                  		move.w	#$10,d4
0001B43A DA45                       		add.w	d5,d5
0001B43C 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking the object RAM
0001B440 3C3C 005F                  		move.w	#$5F,d6
0001B444                            
0001B444                            Touch_Loop:
0001B444 4A29 0001                  		tst.b	1(a1)
0001B448 6A00                       		bpl.s	Touch_NextObj
0001B44A 1029 0020                  		move.b	$20(a1),d0	; load touch response number
0001B44E 6600                       		bne.s	Touch_Height	; if touch response is not 0, branch
0001B450                            
0001B450                            Touch_NextObj:
0001B450 43E9 0040                  		lea	$40(a1),a1	; next object RAM
0001B454 51CE FFEE                  		dbf	d6,Touch_Loop	; repeat $5F more times
0001B458                            
0001B458 7000                       		moveq	#0,d0
0001B45A 4E75                       		rts	
0001B45C                            ; ===========================================================================
0001B45C 1414                       Touch_Sizes:	dc.b  $14, $14		; width, height
0001B45E 0C14                       		dc.b   $C, $14
0001B460 140C                       		dc.b  $14,  $C
0001B462 0410                       		dc.b	4, $10
0001B464 0C12                       		dc.b   $C, $12
0001B466 1010                       		dc.b  $10, $10
0001B468 0606                       		dc.b	6,   6
0001B46A 180C                       		dc.b  $18,  $C
0001B46C 0C10                       		dc.b   $C, $10
0001B46E 100C                       		dc.b  $10,  $C
0001B470 0808                       		dc.b	8,   8
0001B472 1410                       		dc.b  $14, $10
0001B474 1408                       		dc.b  $14,   8
0001B476 0E0E                       		dc.b   $E,  $E
0001B478 1818                       		dc.b  $18, $18
0001B47A 2810                       		dc.b  $28, $10
0001B47C 1018                       		dc.b  $10, $18
0001B47E 0810                       		dc.b	8, $10
0001B480 2070                       		dc.b  $20, $70
0001B482 4020                       		dc.b  $40, $20
0001B484 8020                       		dc.b  $80, $20
0001B486 2020                       		dc.b  $20, $20
0001B488 0808                       		dc.b	8,   8
0001B48A 0404                       		dc.b	4,   4
0001B48C 2008                       		dc.b  $20,   8
0001B48E 0C0C                       		dc.b   $C,  $C
0001B490 0804                       		dc.b	8,   4
0001B492 1804                       		dc.b  $18,   4
0001B494 2804                       		dc.b  $28,   4
0001B496 0408                       		dc.b	4,   8
0001B498 0418                       		dc.b	4, $18
0001B49A 0428                       		dc.b	4, $28
0001B49C 0420                       		dc.b	4, $20
0001B49E 1818                       		dc.b  $18, $18
0001B4A0 0C18                       		dc.b   $C, $18
0001B4A2 4808                       		dc.b  $48,   8
0001B4A4                            ; ===========================================================================
0001B4A4                            
0001B4A4                            Touch_Height:				; XREF: TouchResponse
0001B4A4 0240 003F                  		andi.w	#$3F,d0
0001B4A8 D040                       		add.w	d0,d0
0001B4AA 45FB 00AE                  		lea	Touch_Sizes-2(pc,d0.w),a2
0001B4AE 7200                       		moveq	#0,d1
0001B4B0 121A                       		move.b	(a2)+,d1
0001B4B2 3029 0008                  		move.w	8(a1),d0
0001B4B6 9041                       		sub.w	d1,d0
0001B4B8 9042                       		sub.w	d2,d0
0001B4BA 6400                       		bcc.s	loc_1AE98
0001B4BC D241                       		add.w	d1,d1
0001B4BE D041                       		add.w	d1,d0
0001B4C0 6500                       		bcs.s	Touch_Width
0001B4C2 6000 FF8C                  		bra.w	Touch_NextObj
0001B4C6                            ; ===========================================================================
0001B4C6                            
0001B4C6                            loc_1AE98:
0001B4C6 B044                       		cmp.w	d4,d0
0001B4C8 6200 FF86                  		bhi.w	Touch_NextObj
0001B4CC                            
0001B4CC                            Touch_Width:
0001B4CC 7200                       		moveq	#0,d1
0001B4CE 121A                       		move.b	(a2)+,d1
0001B4D0 3029 000C                  		move.w	$C(a1),d0
0001B4D4 9041                       		sub.w	d1,d0
0001B4D6 9043                       		sub.w	d3,d0
0001B4D8 6400                       		bcc.s	loc_1AEB6
0001B4DA D241                       		add.w	d1,d1
0001B4DC D240                       		add.w	d0,d1
0001B4DE 6500                       		bcs.s	Touch_ChkValue
0001B4E0 6000 FF6E                  		bra.w	Touch_NextObj
0001B4E4                            ; ===========================================================================
0001B4E4                            
0001B4E4                            loc_1AEB6:
0001B4E4 B045                       		cmp.w	d5,d0
0001B4E6 6200 FF68                  		bhi.w	Touch_NextObj
0001B4EA                            
0001B4EA                            Touch_ChkValue:
0001B4EA 1229 0020                  		move.b	$20(a1),d1	; load touch response number
0001B4EE 0201 00C0                  		andi.b	#$C0,d1		; is touch response $40	or higher?
0001B4F2 6700 0000                  		beq.w	Touch_Enemy	; if not, branch
0001B4F6 0C01 00C0                  		cmpi.b	#$C0,d1		; is touch response $C0	or higher?
0001B4FA 6700 0000                  		beq.w	Touch_Special	; if yes, branch
0001B4FE 4A01                       		tst.b	d1		; is touch response $80-$BF ?
0001B500 6B00 0000                  		bmi.w	Touch_ChkHurt	; if yes, branch
0001B504                            
0001B504                            ; touch	response is $40-$7F
0001B504                            
0001B504 1029 0020                  		move.b	$20(a1),d0
0001B508 0200 003F                  		andi.b	#$3F,d0
0001B50C 0C00 0006                  		cmpi.b	#6,d0		; is touch response $46	?
0001B510 6700                       		beq.s	Touch_Monitor	; if yes, branch
0001B512 0C68 005A 0030             		cmpi.w	#$5A,$30(a0)
0001B518 6400 0000                  		bcc.w	locret_1AEF2
0001B51C 5429 0024                  		addq.b	#2,$24(a1)	; advance the object's routine counter
0001B520                            
0001B520                            locret_1AEF2:
0001B520 4E75                       		rts	
0001B522                            ; ===========================================================================
0001B522                            
0001B522                            Touch_Monitor:
0001B522 4A68 0012                  		tst.w	$12(a0)		; is Sonic moving upwards?
0001B526 6A00                       		bpl.s	loc_1AF1E	; if not, branch
0001B528 3028 000C                  		move.w	$C(a0),d0
0001B52C 0440 0010                  		subi.w	#$10,d0
0001B530 B069 000C                  		cmp.w	$C(a1),d0
0001B534 6500                       		bcs.s	locret_1AF2E
0001B536 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001B53A 337C FE80 0012             		move.w	#-$180,$12(a1)
0001B540 4A29 0025                  		tst.b	$25(a1)
0001B544 6600                       		bne.s	locret_1AF2E
0001B546 5829 0025                  		addq.b	#4,$25(a1)	; advance the monitor's routine counter
0001B54A 4E75                       		rts	
0001B54C                            ; ===========================================================================
0001B54C                            
0001B54C                            loc_1AF1E:
0001B54C 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling/jumping?
0001B552 6600                       		bne.s	locret_1AF2E
0001B554 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001B558 5429 0024                  		addq.b	#2,$24(a1)	; advance the monitor's routine counter
0001B55C                            
0001B55C                            locret_1AF2E:
0001B55C 4E75                       		rts	
0001B55E                            ; ===========================================================================
0001B55E                            
0001B55E                            Touch_Enemy:				; XREF: Touch_ChkValue
0001B55E 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001B562 6600                       		bne.s	loc_1AF40	; if yes, branch
0001B564 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling?
0001B56A 6600 0000                  		bne.w	Touch_ChkHurt	; if not, branch
0001B56E                            
0001B56E                            loc_1AF40:
0001B56E 4A29 0021                  		tst.b	$21(a1)
0001B572 6700                       		beq.s	Touch_KillEnemy
0001B574 4468 0010                  		neg.w	$10(a0)
0001B578 4468 0012                  		neg.w	$12(a0)
0001B57C E0E8 0010                  		asr	$10(a0)
0001B580 E0E8 0012                  		asr	$12(a0)
0001B584 137C 0000 0020             		move.b	#0,$20(a1)
0001B58A 5329 0021                  		subq.b	#1,$21(a1)
0001B58E 6600                       		bne.s	locret_1AF68
0001B590 08E9 0007 0022             		bset	#7,$22(a1)
0001B596                            
0001B596                            locret_1AF68:
0001B596 4E75                       		rts	
0001B598                            ; ===========================================================================
0001B598                            
0001B598                            Touch_KillEnemy:
0001B598 08E9 0007 0022             		bset	#7,$22(a1)
0001B59E 7000                       		moveq	#0,d0
0001B5A0 3038 F7D0                  		move.w	($FFFFF7D0).w,d0
0001B5A4 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w ; add 2 to item bonus counter
0001B5A8 0C40 0006                  		cmpi.w	#6,d0
0001B5AC 6500                       		bcs.s	loc_1AF82
0001B5AE 7006                       		moveq	#6,d0
0001B5B0                            
0001B5B0                            loc_1AF82:
0001B5B0 3340 003E                  		move.w	d0,$3E(a1)
0001B5B4 303B 0000                  		move.w	Enemy_Points(pc,d0.w),d0
0001B5B8 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 enemies been destroyed?
0001B5BE 6500                       		bcs.s	loc_1AF9C	; if not, branch
0001B5C0 303C 03E8                  		move.w	#1000,d0	; fix bonus to 10000
0001B5C4 337C 000A 003E             		move.w	#$A,$3E(a1)
0001B5CA                            
0001B5CA                            loc_1AF9C:
0001B5CA 6100 0000                  		bsr.w	AddPoints
0001B5CE 7400                       		moveq	#0,d2	; GMZ
0001B5D0 7205                       		moveq	#5,d1	; GMZ: Amount of explosion objects
0001B5D2 2449                       		move.l	a1,a2	; GMZ: Save a1 address on a2
0001B5D4                            
0001B5D4                            TouchKE_Explode:
0001B5D4 12BC 0027                  		move.b	#$27,0(a1)	; change object	to points
0001B5D8 137C 0000 0024             		move.b	#0,$24(a1)
0001B5DE 1342 0028                  		move.b	d2,$28(a1)	; GMZ: Set subtype
0001B5E2                            
0001B5E2                            TouchKE_NextExplosion:
0001B5E2 5802                       		addq.b	#4,d2
0001B5E4 4EB9 0000 E02E             		jsr	SingleObjLoad
0001B5EA 6600                       		bne.s	TouchKE_NoExplosion
0001B5EC 336A 0008 0008             		move.w	8(a2),8(a1)
0001B5F2 336A 000C 000C             		move.w	$C(a2),$C(a1)
0001B5F8 51C9 FFDA                  		dbf	d1,TouchKE_Explode
0001B5FC                            
0001B5FC                            TouchKE_NoExplosion:
0001B5FC 224A                       		move.l	a2,a1	; GMZ: Restore original a1 address
0001B5FE 4A68 0012                  		tst.w	$12(a0)
0001B602 6B00                       		bmi.s	loc_1AFC2
0001B604 3028 000C                  		move.w	$C(a0),d0
0001B608 B069 000C                  		cmp.w	$C(a1),d0
0001B60C 6400                       		bcc.s	loc_1AFCA
0001B60E 4468 0012                  		neg.w	$12(a0)
0001B612 4E75                       		rts	
0001B614                            ; ===========================================================================
0001B614                            
0001B614                            loc_1AFC2:
0001B614 0668 0100 0012             		addi.w	#$100,$12(a0)
0001B61A 4E75                       		rts	
0001B61C                            ; ===========================================================================
0001B61C                            
0001B61C                            loc_1AFCA:
0001B61C 0468 0100 0012             		subi.w	#$100,$12(a0)
0001B622 4E75                       		rts	
0001B624                            ; ===========================================================================
0001B624 000A 0014 0032 0064        Enemy_Points:	dc.w 10, 20, 50, 100
0001B62C                            ; ===========================================================================
0001B62C                            
0001B62C                            loc_1AFDA:				; XREF: Touch_CatKiller
0001B62C 08E9 0007 0022             		bset	#7,$22(a1)
0001B632                            
0001B632                            Touch_ChkHurt:				; XREF: Touch_ChkValue
0001B632 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001B636 6700                       		beq.s	Touch_Hurt	; if not, branch
0001B638                            
0001B638                            loc_1AFE6:				; XREF: Touch_Hurt
0001B638 70FF                       		moveq	#-1,d0
0001B63A 4E75                       		rts	
0001B63C                            ; ===========================================================================
0001B63C                            
0001B63C                            Touch_Hurt:				; XREF: Touch_ChkHurt
0001B63C 4E71                       		nop	
0001B63E 4A68 0030                  		tst.w	$30(a0)
0001B642 66F4                       		bne.s	loc_1AFE6
0001B644 2449                       		movea.l	a1,a2
0001B646                            
0001B646                            ; End of function TouchResponse
0001B646                            ; continue straight to HurtSonic
0001B646                            
0001B646                            ; ---------------------------------------------------------------------------
0001B646                            ; Hurting Sonic	subroutine
0001B646                            ; ---------------------------------------------------------------------------
0001B646                            
0001B646                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B646                            
0001B646                            
0001B646                            HurtSonic:
0001B646 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have a shield?
0001B64A 6600                       		bne.s	Hurt_Shield	; if yes, branch
0001B64C 4A78 FE20                  		tst.w	($FFFFFE20).w	; does Sonic have any rings?
0001B650 6700 0000                  		beq.w	Hurt_NoRings	; if not, branch
0001B654 4EB9 0000 E02E             		jsr	SingleObjLoad
0001B65A 6600                       		bne.s	Hurt_Shield
0001B65C 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	multi rings object
0001B660 3368 0008 0008             		move.w	8(a0),8(a1)
0001B666 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B66C                            
0001B66C                            Hurt_Shield:
0001B66C 11FC 0000 FE2C             		move.b	#0,($FFFFFE2C).w ; remove shield
0001B672 117C 0004 0024             		move.b	#4,$24(a0)
0001B678 6100 8750                  		bsr.w	Sonic_ResetOnFloor
0001B67C 08E8 0001 0022             		bset	#1,$22(a0)
0001B682 317C FC00 0012             		move.w	#-$400,$12(a0)	; make Sonic bounce away from the object
0001B688 317C FE00 0010             		move.w	#-$200,$10(a0)
0001B68E 0828 0006 0022             		btst	#6,$22(a0)
0001B694 6700                       		beq.s	Hurt_Reverse
0001B696 317C FE00 0012             		move.w	#-$200,$12(a0)
0001B69C 317C FF00 0010             		move.w	#-$100,$10(a0)
0001B6A2                            
0001B6A2                            Hurt_Reverse:
0001B6A2 3028 0008                  		move.w	8(a0),d0
0001B6A6 B06A 0008                  		cmp.w	8(a2),d0
0001B6AA 6500                       		bcs.s	Hurt_ChkSpikes	; if Sonic is left of the object, branch
0001B6AC 4468 0010                  		neg.w	$10(a0)		; if Sonic is right of the object, reverse
0001B6B0                            
0001B6B0                            Hurt_ChkSpikes:
0001B6B0 317C 0000 0014             		move.w	#0,$14(a0)
0001B6B6 117C 001A 001C             		move.b	#$1A,$1C(a0)
0001B6BC 317C 0078 0030             		move.w	#$78,$30(a0)
0001B6C2 303C 00A3                  		move.w	#$A3,d0		; load normal damage sound
0001B6C6 0C12 0036                  		cmpi.b	#$36,(a2)	; was damage caused by spikes?
0001B6CA 6600                       		bne.s	Hurt_Sound	; if not, branch
0001B6CC 0C12 0016                  		cmpi.b	#$16,(a2)	; was damage caused by LZ harpoon?
0001B6D0 6600                       		bne.s	Hurt_Sound	; if not, branch
0001B6D2 303C 00A6                  		move.w	#$A6,d0		; load spikes damage sound
0001B6D6                            
0001B6D6                            Hurt_Sound:
0001B6D6 4EB9 0000 15BC             		jsr	(PlaySound_Special).l
0001B6DC 70FF                       		moveq	#-1,d0
0001B6DE 4E75                       		rts	
0001B6E0                            ; ===========================================================================
0001B6E0                            
0001B6E0                            Hurt_NoRings:
0001B6E0 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat on?
0001B6E4 6600 FF86                  		bne.w	Hurt_Shield	; if yes, branch
0001B6E8                            ; End of function HurtSonic
0001B6E8                            
0001B6E8                            ; ---------------------------------------------------------------------------
0001B6E8                            ; Subroutine to	kill Sonic
0001B6E8                            ; ---------------------------------------------------------------------------
0001B6E8                            
0001B6E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B6E8                            
0001B6E8                            
0001B6E8                            KillSonic:
0001B6E8 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	active?
0001B6EC 6600                       		bne.s	Kill_NoDeath	; if yes, branch
0001B6EE 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; remove invincibility
0001B6F4 117C 0006 0024             		move.b	#6,$24(a0)
0001B6FA 6100 86CE                  		bsr.w	Sonic_ResetOnFloor
0001B6FE 08E8 0001 0022             		bset	#1,$22(a0)
0001B704 317C F900 0012             		move.w	#-$700,$12(a0)
0001B70A 317C 0000 0010             		move.w	#0,$10(a0)
0001B710 317C 0000 0014             		move.w	#0,$14(a0)
0001B716 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001B71C 117C 0018 001C             		move.b	#$18,$1C(a0)
0001B722 08E8 0007 0002             		bset	#7,2(a0)
0001B728 303C 00A3                  		move.w	#$A3,d0		; play normal death sound
0001B72C 0C12 0036                  		cmpi.b	#$36,(a2)	; check	if you were killed by spikes
0001B730 6600                       		bne.s	Kill_Sound
0001B732 303C 00A6                  		move.w	#$A6,d0		; play spikes death sound
0001B736                            
0001B736                            Kill_Sound:
0001B736 4EB9 0000 15BC             		jsr	(PlaySound_Special).l
0001B73C                            
0001B73C                            Kill_NoDeath:
0001B73C 70FF                       		moveq	#-1,d0
0001B73E 4E75                       		rts	
0001B740                            ; End of function KillSonic
0001B740                            
0001B740                            
0001B740                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B740                            
0001B740                            
0001B740                            Touch_Special:				; XREF: Touch_ChkValue
0001B740 1229 0020                  		move.b	$20(a1),d1
0001B744 0201 003F                  		andi.b	#$3F,d1
0001B748 0C01 000B                  		cmpi.b	#$B,d1		; is touch response $CB	?
0001B74C 6700                       		beq.s	Touch_CatKiller	; if yes, branch
0001B74E 0C01 000C                  		cmpi.b	#$C,d1		; is touch response $CC	?
0001B752 6700                       		beq.s	Touch_Yadrin	; if yes, branch
0001B754 0C01 0017                  		cmpi.b	#$17,d1		; is touch response $D7	?
0001B758 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001B75A 0C01 0021                  		cmpi.b	#$21,d1		; is touch response $E1	?
0001B75E 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001B760 4E75                       		rts	
0001B762                            ; ===========================================================================
0001B762                            
0001B762                            Touch_CatKiller:			; XREF: Touch_Special
0001B762 6000 FEC8                  		bra.w	loc_1AFDA
0001B766                            ; ===========================================================================
0001B766                            
0001B766                            Touch_Yadrin:				; XREF: Touch_Special
0001B766 9A40                       		sub.w	d0,d5
0001B768 0C45 0008                  		cmpi.w	#8,d5
0001B76C 6400                       		bcc.s	loc_1B144
0001B76E 3029 0008                  		move.w	8(a1),d0
0001B772 5940                       		subq.w	#4,d0
0001B774 0829 0000 0022             		btst	#0,$22(a1)
0001B77A 6700                       		beq.s	loc_1B130
0001B77C 0440 0010                  		subi.w	#$10,d0
0001B780                            
0001B780                            loc_1B130:
0001B780 9042                       		sub.w	d2,d0
0001B782 6400                       		bcc.s	loc_1B13C
0001B784 0640 0018                  		addi.w	#$18,d0
0001B788 6500                       		bcs.s	loc_1B140
0001B78A 6000                       		bra.s	loc_1B144
0001B78C                            ; ===========================================================================
0001B78C                            
0001B78C                            loc_1B13C:
0001B78C B044                       		cmp.w	d4,d0
0001B78E 6200                       		bhi.s	loc_1B144
0001B790                            
0001B790                            loc_1B140:
0001B790 6000 FEA0                  		bra.w	Touch_ChkHurt
0001B794                            ; ===========================================================================
0001B794                            
0001B794                            loc_1B144:
0001B794 6000 FDC8                  		bra.w	Touch_Enemy
0001B798                            ; ===========================================================================
0001B798                            
0001B798                            Touch_D7orE1:				; XREF: Touch_Special
0001B798 5229 0021                  		addq.b	#1,$21(a1)
0001B79C 4E75                       		rts	
0001B79E                            ; End of function Touch_Special
0001B79E                            
0001B79E                            ; ---------------------------------------------------------------------------
0001B79E                            ; Subroutine to	show the special stage layout
0001B79E                            ; ---------------------------------------------------------------------------
0001B79E                            
0001B79E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B79E                            
0001B79E                            
0001B79E                            SS_ShowLayout:				; XREF: SpecialStage
0001B79E 6100 0000                  		bsr.w	SS_AniWallsRings
0001B7A2 6100 0000                  		bsr.w	SS_AniItems
0001B7A6 3F05                       		move.w	d5,-(sp)
0001B7A8 43F8 8000                  		lea	($FFFF8000).w,a1
0001B7AC 1038 F780                  		move.b	($FFFFF780).w,d0
0001B7B0 0200 00FC                  		andi.b	#$FC,d0
0001B7B4 4EB9 0000 2C22             		jsr	(CalcSine).l
0001B7BA 3800                       		move.w	d0,d4
0001B7BC 3A01                       		move.w	d1,d5
0001B7BE C9FC 0018                  		muls.w	#$18,d4
0001B7C2 CBFC 0018                  		muls.w	#$18,d5
0001B7C6 7400                       		moveq	#0,d2
0001B7C8 3438 F700                  		move.w	($FFFFF700).w,d2
0001B7CC 84FC 0018                  		divu.w	#$18,d2
0001B7D0 4842                       		swap	d2
0001B7D2 4442                       		neg.w	d2
0001B7D4 0642 FF4C                  		addi.w	#-$B4,d2
0001B7D8 7600                       		moveq	#0,d3
0001B7DA 3638 F704                  		move.w	($FFFFF704).w,d3
0001B7DE 86FC 0018                  		divu.w	#$18,d3
0001B7E2 4843                       		swap	d3
0001B7E4 4443                       		neg.w	d3
0001B7E6 0643 FF4C                  		addi.w	#-$B4,d3
0001B7EA 3E3C 000F                  		move.w	#$F,d7
0001B7EE                            
0001B7EE                            loc_1B19E:
0001B7EE 48A7 E000                  		movem.w	d0-d2,-(sp)
0001B7F2 48A7 C000                  		movem.w	d0-d1,-(sp)
0001B7F6 4440                       		neg.w	d0
0001B7F8 C3C2                       		muls.w	d2,d1
0001B7FA C1C3                       		muls.w	d3,d0
0001B7FC 2C00                       		move.l	d0,d6
0001B7FE DC81                       		add.l	d1,d6
0001B800 4C9F 0003                  		movem.w	(sp)+,d0-d1
0001B804 C1C2                       		muls.w	d2,d0
0001B806 C3C3                       		muls.w	d3,d1
0001B808 D280                       		add.l	d0,d1
0001B80A 2406                       		move.l	d6,d2
0001B80C 3C3C 000F                  		move.w	#$F,d6
0001B810                            
0001B810                            loc_1B1C0:
0001B810 2002                       		move.l	d2,d0
0001B812 E080                       		asr.l	#8,d0
0001B814 32C0                       		move.w	d0,(a1)+
0001B816 2001                       		move.l	d1,d0
0001B818 E080                       		asr.l	#8,d0
0001B81A 32C0                       		move.w	d0,(a1)+
0001B81C D485                       		add.l	d5,d2
0001B81E D284                       		add.l	d4,d1
0001B820 51CE FFEE                  		dbf	d6,loc_1B1C0
0001B824                            
0001B824 4C9F 0007                  		movem.w	(sp)+,d0-d2
0001B828 0643 0018                  		addi.w	#$18,d3
0001B82C 51CF FFC0                  		dbf	d7,loc_1B19E
0001B830                            
0001B830 3A1F                       		move.w	(sp)+,d5
0001B832 41F9 00FF 0000             		lea	($FF0000).l,a0
0001B838 7000                       		moveq	#0,d0
0001B83A 3038 F704                  		move.w	($FFFFF704).w,d0
0001B83E 80FC 0018                  		divu.w	#$18,d0
0001B842 C0FC 0080                  		mulu.w	#$80,d0
0001B846 D1C0                       		adda.l	d0,a0
0001B848 7000                       		moveq	#0,d0
0001B84A 3038 F700                  		move.w	($FFFFF700).w,d0
0001B84E 80FC 0018                  		divu.w	#$18,d0
0001B852 D0C0                       		adda.w	d0,a0
0001B854 49F8 8000                  		lea	($FFFF8000).w,a4
0001B858 3E3C 000F                  		move.w	#$F,d7
0001B85C                            
0001B85C                            loc_1B20C:
0001B85C 3C3C 000F                  		move.w	#$F,d6
0001B860                            
0001B860                            loc_1B210:
0001B860 7000                       		moveq	#0,d0
0001B862 1018                       		move.b	(a0)+,d0
0001B864 6700                       		beq.s	loc_1B268
0001B866 0C00 004E                  		cmpi.b	#$4E,d0
0001B86A 6200                       		bhi.s	loc_1B268
0001B86C 3614                       		move.w	(a4),d3
0001B86E 0643 0120                  		addi.w	#$120,d3
0001B872 0C43 0070                  		cmpi.w	#$70,d3
0001B876 6500                       		bcs.s	loc_1B268
0001B878 0C43 01D0                  		cmpi.w	#$1D0,d3
0001B87C 6400                       		bcc.s	loc_1B268
0001B87E 342C 0002                  		move.w	2(a4),d2
0001B882 0642 00F0                  		addi.w	#$F0,d2
0001B886 0C42 0070                  		cmpi.w	#$70,d2
0001B88A 6500                       		bcs.s	loc_1B268
0001B88C 0C42 0170                  		cmpi.w	#$170,d2
0001B890 6400                       		bcc.s	loc_1B268
0001B892 4BF9 00FF 4000             		lea	($FF4000).l,a5
0001B898 E748                       		lsl.w	#3,d0
0001B89A 4BF5 0000                  		lea	(a5,d0.w),a5
0001B89E 225D                       		movea.l	(a5)+,a1
0001B8A0 321D                       		move.w	(a5)+,d1
0001B8A2 D241                       		add.w	d1,d1
0001B8A4 D2F1 1000                  		adda.w	(a1,d1.w),a1
0001B8A8 365D                       		movea.w	(a5)+,a3
0001B8AA 7200                       		moveq	#0,d1
0001B8AC 1219                       		move.b	(a1)+,d1
0001B8AE 5301                       		subq.b	#1,d1
0001B8B0 6B00                       		bmi.s	loc_1B268
0001B8B2 4EB9 0000 DD06             		jsr	sub_D762
0001B8B8                            
0001B8B8                            loc_1B268:
0001B8B8 584C                       		addq.w	#4,a4
0001B8BA 51CE FFA4                  		dbf	d6,loc_1B210
0001B8BE                            
0001B8BE 41E8 0070                  		lea	$70(a0),a0
0001B8C2 51CF FF98                  		dbf	d7,loc_1B20C
0001B8C6                            
0001B8C6 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0001B8CA 0C05 0050                  		cmpi.b	#$50,d5
0001B8CE 6700                       		beq.s	loc_1B288
0001B8D0 24BC 0000 0000             		move.l	#0,(a2)
0001B8D6 4E75                       		rts	
0001B8D8                            ; ===========================================================================
0001B8D8                            
0001B8D8                            loc_1B288:
0001B8D8 157C 0000 FFFB             		move.b	#0,-5(a2)
0001B8DE 4E75                       		rts	
0001B8E0                            ; End of function SS_ShowLayout
0001B8E0                            
0001B8E0                            ; ---------------------------------------------------------------------------
0001B8E0                            ; Subroutine to	animate	walls and rings	in the special stage
0001B8E0                            ; ---------------------------------------------------------------------------
0001B8E0                            
0001B8E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B8E0                            
0001B8E0                            
0001B8E0                            SS_AniWallsRings:			; XREF: SS_ShowLayout
0001B8E0 43F9 00FF 400C             		lea	($FF400C).l,a1
0001B8E6 7000                       		moveq	#0,d0
0001B8E8 1038 F780                  		move.b	($FFFFF780).w,d0
0001B8EC E408                       		lsr.b	#2,d0
0001B8EE 0240 000F                  		andi.w	#$F,d0
0001B8F2 7223                       		moveq	#$23,d1
0001B8F4                            
0001B8F4                            loc_1B2A4:
0001B8F4 3280                       		move.w	d0,(a1)
0001B8F6 5049                       		addq.w	#8,a1
0001B8F8 51C9 FFFA                  		dbf	d1,loc_1B2A4
0001B8FC                            
0001B8FC 43F9 00FF 4005             		lea	($FF4005).l,a1
0001B902 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
0001B906 6A00                       		bpl.s	loc_1B2C8
0001B908 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
0001B90E 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
0001B912 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
0001B918                            
0001B918                            loc_1B2C8:
0001B918 1378 FEC3 01D0             		move.b	($FFFFFEC3).w,$1D0(a1)
0001B91E 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
0001B922 6A00                       		bpl.s	loc_1B2E4
0001B924 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
0001B92A 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
0001B92E 0238 0001 FEC5             		andi.b	#1,($FFFFFEC5).w
0001B934                            
0001B934                            loc_1B2E4:
0001B934 1038 FEC5                  		move.b	($FFFFFEC5).w,d0
0001B938 1340 0138                  		move.b	d0,$138(a1)
0001B93C 1340 0160                  		move.b	d0,$160(a1)
0001B940 1340 0148                  		move.b	d0,$148(a1)
0001B944 1340 0150                  		move.b	d0,$150(a1)
0001B948 1340 01D8                  		move.b	d0,$1D8(a1)
0001B94C 1340 01E0                  		move.b	d0,$1E0(a1)
0001B950 1340 01E8                  		move.b	d0,$1E8(a1)
0001B954 1340 01F0                  		move.b	d0,$1F0(a1)
0001B958 1340 01F8                  		move.b	d0,$1F8(a1)
0001B95C 1340 0200                  		move.b	d0,$200(a1)
0001B960 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
0001B964 6A00                       		bpl.s	loc_1B326
0001B966 11FC 0004 FEC6             		move.b	#4,($FFFFFEC6).w
0001B96C 5238 FEC7                  		addq.b	#1,($FFFFFEC7).w
0001B970 0238 0003 FEC7             		andi.b	#3,($FFFFFEC7).w
0001B976                            
0001B976                            loc_1B326:
0001B976 1038 FEC7                  		move.b	($FFFFFEC7).w,d0
0001B97A 1340 0168                  		move.b	d0,$168(a1)
0001B97E 1340 0170                  		move.b	d0,$170(a1)
0001B982 1340 0178                  		move.b	d0,$178(a1)
0001B986 1340 0180                  		move.b	d0,$180(a1)
0001B98A 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
0001B98E 6A00                       		bpl.s	loc_1B350
0001B990 11FC 0007 FEC0             		move.b	#7,($FFFFFEC0).w
0001B996 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
0001B99A 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
0001B9A0                            
0001B9A0                            loc_1B350:
0001B9A0 43F9 00FF 4016             		lea	($FF4016).l,a1
0001B9A6 41F9 0000 0000             		lea	(SS_WaRiVramSet).l,a0
0001B9AC 7000                       		moveq	#0,d0
0001B9AE 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
0001B9B2 D040                       		add.w	d0,d0
0001B9B4 41F0 0000                  		lea	(a0,d0.w),a0
0001B9B8 3290                       		move.w	(a0),(a1)
0001B9BA 3368 0002 0008             		move.w	2(a0),8(a1)
0001B9C0 3368 0004 0010             		move.w	4(a0),$10(a1)
0001B9C6 3368 0006 0018             		move.w	6(a0),$18(a1)
0001B9CC 3368 0008 0020             		move.w	8(a0),$20(a1)
0001B9D2 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001B9D8 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001B9DE 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001B9E4 D0FC 0020                  		adda.w	#$20,a0
0001B9E8 D2FC 0048                  		adda.w	#$48,a1
0001B9EC 3290                       		move.w	(a0),(a1)
0001B9EE 3368 0002 0008             		move.w	2(a0),8(a1)
0001B9F4 3368 0004 0010             		move.w	4(a0),$10(a1)
0001B9FA 3368 0006 0018             		move.w	6(a0),$18(a1)
0001BA00 3368 0008 0020             		move.w	8(a0),$20(a1)
0001BA06 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001BA0C 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001BA12 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001BA18 D0FC 0020                  		adda.w	#$20,a0
0001BA1C D2FC 0048                  		adda.w	#$48,a1
0001BA20 3290                       		move.w	(a0),(a1)
0001BA22 3368 0002 0008             		move.w	2(a0),8(a1)
0001BA28 3368 0004 0010             		move.w	4(a0),$10(a1)
0001BA2E 3368 0006 0018             		move.w	6(a0),$18(a1)
0001BA34 3368 0008 0020             		move.w	8(a0),$20(a1)
0001BA3A 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001BA40 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001BA46 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001BA4C D0FC 0020                  		adda.w	#$20,a0
0001BA50 D2FC 0048                  		adda.w	#$48,a1
0001BA54 3290                       		move.w	(a0),(a1)
0001BA56 3368 0002 0008             		move.w	2(a0),8(a1)
0001BA5C 3368 0004 0010             		move.w	4(a0),$10(a1)
0001BA62 3368 0006 0018             		move.w	6(a0),$18(a1)
0001BA68 3368 0008 0020             		move.w	8(a0),$20(a1)
0001BA6E 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001BA74 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001BA7A 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001BA80 D0FC 0020                  		adda.w	#$20,a0
0001BA84 D2FC 0048                  		adda.w	#$48,a1
0001BA88 4E75                       		rts	
0001BA8A                            ; End of function SS_AniWallsRings
0001BA8A                            
0001BA8A                            ; ===========================================================================
0001BA8A 0142 6142 0142 0142 0142+  SS_WaRiVramSet:	dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001BA9A 0142 6142 0142 0142 0142+  		dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001BAAA 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001BABA 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001BACA 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001BADA 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001BAEA 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001BAFA 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001BB0A                            ; ---------------------------------------------------------------------------
0001BB0A                            ; Subroutine to	remove items when you collect them in the special stage
0001BB0A                            ; ---------------------------------------------------------------------------
0001BB0A                            
0001BB0A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BB0A                            
0001BB0A                            
0001BB0A                            SS_RemoveCollectedItem:			; XREF: Obj09_ChkItems
0001BB0A 45F9 00FF 4400             		lea	($FF4400).l,a2
0001BB10 303C 001F                  		move.w	#$1F,d0
0001BB14                            
0001BB14                            loc_1B4C4:
0001BB14 4A12                       		tst.b	(a2)
0001BB16 6700                       		beq.s	locret_1B4CE
0001BB18 504A                       		addq.w	#8,a2
0001BB1A 51C8 FFF8                  		dbf	d0,loc_1B4C4
0001BB1E                            
0001BB1E                            locret_1B4CE:
0001BB1E 4E75                       		rts	
0001BB20                            ; End of function SS_RemoveCollectedItem
0001BB20                            
0001BB20                            ; ---------------------------------------------------------------------------
0001BB20                            ; Subroutine to	animate	special	stage items when you touch them
0001BB20                            ; ---------------------------------------------------------------------------
0001BB20                            
0001BB20                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BB20                            
0001BB20                            
0001BB20                            SS_AniItems:				; XREF: SS_ShowLayout
0001BB20 41F9 00FF 4400             		lea	($FF4400).l,a0
0001BB26 3E3C 001F                  		move.w	#$1F,d7
0001BB2A                            
0001BB2A                            loc_1B4DA:
0001BB2A 7000                       		moveq	#0,d0
0001BB2C 1010                       		move.b	(a0),d0
0001BB2E 6700                       		beq.s	loc_1B4E8
0001BB30 E548                       		lsl.w	#2,d0
0001BB32 227B 0000                  		movea.l	SS_AniIndex-4(pc,d0.w),a1
0001BB36 4E91                       		jsr	(a1)
0001BB38                            
0001BB38                            loc_1B4E8:
0001BB38 5048                       		addq.w	#8,a0
0001BB3A                            
0001BB3A                            loc_1B4EA:
0001BB3A 51CF FFEE                  		dbf	d7,loc_1B4DA
0001BB3E                            
0001BB3E 4E75                       		rts	
0001BB40                            ; End of function SS_AniItems
0001BB40                            
0001BB40                            ; ===========================================================================
0001BB40 0000 0000                  SS_AniIndex:	dc.l SS_AniRingSparks
0001BB44 0000 0000                  		dc.l SS_AniBumper
0001BB48 0000 0000                  		dc.l SS_Ani1Up
0001BB4C 0000 0000                  		dc.l SS_AniReverse
0001BB50 0000 0000                  		dc.l SS_AniEmeraldSparks
0001BB54 0000 0000                  		dc.l SS_AniGlassBlock
0001BB58                            ; ===========================================================================
0001BB58                            
0001BB58                            SS_AniRingSparks:			; XREF: SS_AniIndex
0001BB58 5328 0002                  		subq.b	#1,2(a0)
0001BB5C 6A00                       		bpl.s	locret_1B530
0001BB5E 117C 0005 0002             		move.b	#5,2(a0)
0001BB64 7000                       		moveq	#0,d0
0001BB66 1028 0003                  		move.b	3(a0),d0
0001BB6A 5228 0003                  		addq.b	#1,3(a0)
0001BB6E 2268 0004                  		movea.l	4(a0),a1
0001BB72 103B 0000                  		move.b	SS_AniRingData(pc,d0.w),d0
0001BB76 1280                       		move.b	d0,(a1)
0001BB78 6600                       		bne.s	locret_1B530
0001BB7A 4290                       		clr.l	(a0)
0001BB7C 42A8 0004                  		clr.l	4(a0)
0001BB80                            
0001BB80                            locret_1B530:
0001BB80 4E75                       		rts	
0001BB82                            ; ===========================================================================
0001BB82 4243 4445 0000             SS_AniRingData:	dc.b $42, $43, $44, $45, 0, 0
0001BB88                            ; ===========================================================================
0001BB88                            
0001BB88                            SS_AniBumper:				; XREF: SS_AniIndex
0001BB88 5328 0002                  		subq.b	#1,2(a0)
0001BB8C 6A00                       		bpl.s	locret_1B566
0001BB8E 117C 0007 0002             		move.b	#7,2(a0)
0001BB94 7000                       		moveq	#0,d0
0001BB96 1028 0003                  		move.b	3(a0),d0
0001BB9A 5228 0003                  		addq.b	#1,3(a0)
0001BB9E 2268 0004                  		movea.l	4(a0),a1
0001BBA2 103B 0000                  		move.b	SS_AniBumpData(pc,d0.w),d0
0001BBA6 6600                       		bne.s	loc_1B564
0001BBA8 4290                       		clr.l	(a0)
0001BBAA 42A8 0004                  		clr.l	4(a0)
0001BBAE 12BC 0025                  		move.b	#$25,(a1)
0001BBB2 4E75                       		rts	
0001BBB4                            ; ===========================================================================
0001BBB4                            
0001BBB4                            loc_1B564:
0001BBB4 1280                       		move.b	d0,(a1)
0001BBB6                            
0001BBB6                            locret_1B566:
0001BBB6 4E75                       		rts	
0001BBB8                            ; ===========================================================================
0001BBB8 3233 3233 0000             SS_AniBumpData:	dc.b $32, $33, $32, $33, 0, 0
0001BBBE                            ; ===========================================================================
0001BBBE                            
0001BBBE                            SS_Ani1Up:				; XREF: SS_AniIndex
0001BBBE 5328 0002                  		subq.b	#1,2(a0)
0001BBC2 6A00                       		bpl.s	locret_1B596
0001BBC4 117C 0005 0002             		move.b	#5,2(a0)
0001BBCA 7000                       		moveq	#0,d0
0001BBCC 1028 0003                  		move.b	3(a0),d0
0001BBD0 5228 0003                  		addq.b	#1,3(a0)
0001BBD4 2268 0004                  		movea.l	4(a0),a1
0001BBD8 103B 0000                  		move.b	SS_Ani1UpData(pc,d0.w),d0
0001BBDC 1280                       		move.b	d0,(a1)
0001BBDE 6600                       		bne.s	locret_1B596
0001BBE0 4290                       		clr.l	(a0)
0001BBE2 42A8 0004                  		clr.l	4(a0)
0001BBE6                            
0001BBE6                            locret_1B596:
0001BBE6 4E75                       		rts	
0001BBE8                            ; ===========================================================================
0001BBE8 4647 4849 0000             SS_Ani1UpData:	dc.b $46, $47, $48, $49, 0, 0
0001BBEE                            ; ===========================================================================
0001BBEE                            
0001BBEE                            SS_AniReverse:				; XREF: SS_AniIndex
0001BBEE 5328 0002                  		subq.b	#1,2(a0)
0001BBF2 6A00                       		bpl.s	locret_1B5CC
0001BBF4 117C 0007 0002             		move.b	#7,2(a0)
0001BBFA 7000                       		moveq	#0,d0
0001BBFC 1028 0003                  		move.b	3(a0),d0
0001BC00 5228 0003                  		addq.b	#1,3(a0)
0001BC04 2268 0004                  		movea.l	4(a0),a1
0001BC08 103B 0000                  		move.b	SS_AniRevData(pc,d0.w),d0
0001BC0C 6600                       		bne.s	loc_1B5CA
0001BC0E 4290                       		clr.l	(a0)
0001BC10 42A8 0004                  		clr.l	4(a0)
0001BC14 12BC 002B                  		move.b	#$2B,(a1)
0001BC18 4E75                       		rts	
0001BC1A                            ; ===========================================================================
0001BC1A                            
0001BC1A                            loc_1B5CA:
0001BC1A 1280                       		move.b	d0,(a1)
0001BC1C                            
0001BC1C                            locret_1B5CC:
0001BC1C 4E75                       		rts	
0001BC1E                            ; ===========================================================================
0001BC1E 2B31 2B31 0000             SS_AniRevData:	dc.b $2B, $31, $2B, $31, 0, 0
0001BC24                            ; ===========================================================================
0001BC24                            
0001BC24                            SS_AniEmeraldSparks:			; XREF: SS_AniIndex
0001BC24 5328 0002                  		subq.b	#1,2(a0)
0001BC28 6A00                       		bpl.s	locret_1B60C
0001BC2A 117C 0005 0002             		move.b	#5,2(a0)
0001BC30 7000                       		moveq	#0,d0
0001BC32 1028 0003                  		move.b	3(a0),d0
0001BC36 5228 0003                  		addq.b	#1,3(a0)
0001BC3A 2268 0004                  		movea.l	4(a0),a1
0001BC3E 103B 0000                  		move.b	SS_AniEmerData(pc,d0.w),d0
0001BC42 1280                       		move.b	d0,(a1)
0001BC44 6600                       		bne.s	locret_1B60C
0001BC46 4290                       		clr.l	(a0)
0001BC48 42A8 0004                  		clr.l	4(a0)
0001BC4C 11FC 0004 D024             		move.b	#4,($FFFFD024).w
0001BC52 303C 00A8                  		move.w	#$A8,d0
0001BC56 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play special stage GOAL	sound
0001BC5C                            
0001BC5C                            locret_1B60C:
0001BC5C 4E75                       		rts	
0001BC5E                            ; ===========================================================================
0001BC5E 4647 4849 0000             SS_AniEmerData:	dc.b $46, $47, $48, $49, 0, 0
0001BC64                            ; ===========================================================================
0001BC64                            
0001BC64                            SS_AniGlassBlock:			; XREF: SS_AniIndex
0001BC64 5328 0002                  		subq.b	#1,2(a0)
0001BC68 6A00                       		bpl.s	locret_1B640
0001BC6A 117C 0001 0002             		move.b	#1,2(a0)
0001BC70 7000                       		moveq	#0,d0
0001BC72 1028 0003                  		move.b	3(a0),d0
0001BC76 5228 0003                  		addq.b	#1,3(a0)
0001BC7A 2268 0004                  		movea.l	4(a0),a1
0001BC7E 103B 0000                  		move.b	SS_AniGlassData(pc,d0.w),d0
0001BC82 1280                       		move.b	d0,(a1)
0001BC84 6600                       		bne.s	locret_1B640
0001BC86 12A8 0004                  		move.b	4(a0),(a1)
0001BC8A 4290                       		clr.l	(a0)
0001BC8C 42A8 0004                  		clr.l	4(a0)
0001BC90                            
0001BC90                            locret_1B640:
0001BC90 4E75                       		rts	
0001BC92                            ; ===========================================================================
0001BC92 4B4C 4D4E 4B4C 4D4E 0000   SS_AniGlassData:dc.b $4B, $4C, $4D, $4E, $4B, $4C, $4D,	$4E, 0,	0
0001BC9C                            ; ---------------------------------------------------------------------------
0001BC9C                            ; Special stage	layout pointers
0001BC9C                            ; ---------------------------------------------------------------------------
0001BC9C                            SS_LayoutIndex:
0001BC9C                            	include "_inc\Special stage layout pointers.asm"
0001BC9C                            ; ---------------------------------------------------------------------------
0001BC9C                            ; Special stage	layout pointers
0001BC9C                            ; ---------------------------------------------------------------------------
0001BC9C 0000 0000                  	dc.l SS_1
0001BCA0 0000 0000                  	dc.l SS_2
0001BCA4 0000 0000                  	dc.l SS_3
0001BCA8 0000 0000                  	dc.l SS_4
0001BCAC 0000 0000                  	dc.l SS_5
0001BCB0 0000 0000                  	dc.l SS_6
0001BCB4                            	even
0001BCB4                            	even
0001BCB4                            
0001BCB4                            ; ---------------------------------------------------------------------------
0001BCB4                            ; Special stage	start locations
0001BCB4                            ; ---------------------------------------------------------------------------
0001BCB4                            SS_StartLoc:	incbin	misc\sloc_ss.bin
0001BCCC                            		even
0001BCCC                            
0001BCCC                            ; ---------------------------------------------------------------------------
0001BCCC                            ; Subroutine to	load special stage layout
0001BCCC                            ; ---------------------------------------------------------------------------
0001BCCC                            
0001BCCC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BCCC                            
0001BCCC                            
0001BCCC                            SS_Load:				; XREF: SpecialStage
0001BCCC 7000                       		moveq	#0,d0
0001BCCE 1038 FE16                  		move.b	($FFFFFE16).w,d0 ; load	number of last special stage entered
0001BCD2 5238 FE16                  		addq.b	#1,($FFFFFE16).w
0001BCD6 0C38 0006 FE16             		cmpi.b	#6,($FFFFFE16).w
0001BCDC 6500                       		bcs.s	SS_ChkEmldNum
0001BCDE 11FC 0000 FE16             		move.b	#0,($FFFFFE16).w ; reset if higher than	6
0001BCE4                            
0001BCE4                            SS_ChkEmldNum:
0001BCE4 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all emeralds?
0001BCEA 6700                       		beq.s	SS_LoadData	; if yes, branch
0001BCEC 7200                       		moveq	#0,d1
0001BCEE 1238 FE57                  		move.b	($FFFFFE57).w,d1
0001BCF2 5301                       		subq.b	#1,d1
0001BCF4 6500                       		bcs.s	SS_LoadData
0001BCF6 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0001BCFA                            
0001BCFA                            SS_ChkEmldLoop:	
0001BCFA B033 1000                  		cmp.b	(a3,d1.w),d0
0001BCFE 6600                       		bne.s	SS_ChkEmldRepeat
0001BD00 60CA                       		bra.s	SS_Load
0001BD02                            ; ===========================================================================
0001BD02                            
0001BD02                            SS_ChkEmldRepeat:
0001BD02 51C9 FFF6                  		dbf	d1,SS_ChkEmldLoop
0001BD06                            
0001BD06                            SS_LoadData:
0001BD06 E548                       		lsl.w	#2,d0
0001BD08 43FB 00AA                  		lea	SS_StartLoc(pc,d0.w),a1
0001BD0C 31D9 D008                  		move.w	(a1)+,($FFFFD008).w
0001BD10 31D9 D00C                  		move.w	(a1)+,($FFFFD00C).w
0001BD14 207B 0086                  		movea.l	SS_LayoutIndex(pc,d0.w),a0
0001BD18 43F9 00FF 4000             		lea	($FF4000).l,a1
0001BD1E 303C 0000                  		move.w	#0,d0
0001BD22 4EB9 0000 193E             		jsr	(EniDec).l
0001BD28 43F9 00FF 0000             		lea	($FF0000).l,a1
0001BD2E 303C 0FFF                  		move.w	#$FFF,d0
0001BD32                            
0001BD32                            SS_ClrRAM3:
0001BD32 4299                       		clr.l	(a1)+
0001BD34 51C8 FFFC                  		dbf	d0,SS_ClrRAM3
0001BD38                            
0001BD38 43F9 00FF 1020             		lea	($FF1020).l,a1
0001BD3E 41F9 00FF 4000             		lea	($FF4000).l,a0
0001BD44 723F                       		moveq	#$3F,d1
0001BD46                            
0001BD46                            loc_1B6F6:
0001BD46 743F                       		moveq	#$3F,d2
0001BD48                            
0001BD48                            loc_1B6F8:
0001BD48 12D8                       		move.b	(a0)+,(a1)+
0001BD4A 51CA FFFC                  		dbf	d2,loc_1B6F8
0001BD4E                            
0001BD4E 43E9 0040                  		lea	$40(a1),a1
0001BD52 51C9 FFF2                  		dbf	d1,loc_1B6F6
0001BD56                            
0001BD56 43F9 00FF 4008             		lea	($FF4008).l,a1
0001BD5C 41F9 0000 0000             		lea	(SS_MapIndex).l,a0
0001BD62 724D                       		moveq	#$4D,d1
0001BD64                            
0001BD64                            loc_1B714:
0001BD64 22D8                       		move.l	(a0)+,(a1)+
0001BD66 32FC 0000                  		move.w	#0,(a1)+
0001BD6A 1368 FFFC FFFF             		move.b	-4(a0),-1(a1)
0001BD70 32D8                       		move.w	(a0)+,(a1)+
0001BD72 51C9 FFF0                  		dbf	d1,loc_1B714
0001BD76                            
0001BD76 43F9 00FF 4400             		lea	($FF4400).l,a1
0001BD7C 323C 003F                  		move.w	#$3F,d1
0001BD80                            
0001BD80                            loc_1B730:
0001BD80                            
0001BD80 4299                       		clr.l	(a1)+
0001BD82 51C9 FFFC                  		dbf	d1,loc_1B730
0001BD86                            
0001BD86 4E75                       		rts	
0001BD88                            ; End of function SS_Load
0001BD88                            
0001BD88                            ; ===========================================================================
0001BD88                            ; ---------------------------------------------------------------------------
0001BD88                            ; Special stage	mappings and VRAM pointers
0001BD88                            ; ---------------------------------------------------------------------------
0001BD88                            SS_MapIndex:
0001BD88                            	include "_inc\Special stage mappings and VRAM pointers.asm"
0001BD88                            ; ---------------------------------------------------------------------------
0001BD88                            ; Special stage	mappings and VRAM pointers
0001BD88                            ; ---------------------------------------------------------------------------
0001BD88 0000 0000                  	dc.l Map_SSWalls	; address of mappings
0001BD8C 0142                       	dc.w $142		; VRAM setting
0001BD8E 0000 0000                  	dc.l Map_SSWalls
0001BD92 0142                       	dc.w $142
0001BD94 0000 0000                  	dc.l Map_SSWalls
0001BD98 0142                       	dc.w $142
0001BD9A 0000 0000                  	dc.l Map_SSWalls
0001BD9E 0142                       	dc.w $142
0001BDA0 0000 0000                  	dc.l Map_SSWalls
0001BDA4 0142                       	dc.w $142
0001BDA6 0000 0000                  	dc.l Map_SSWalls
0001BDAA 0142                       	dc.w $142
0001BDAC 0000 0000                  	dc.l Map_SSWalls
0001BDB0 0142                       	dc.w $142
0001BDB2 0000 0000                  	dc.l Map_SSWalls
0001BDB6 0142                       	dc.w $142
0001BDB8 0000 0000                  	dc.l Map_SSWalls
0001BDBC 0142                       	dc.w $142
0001BDBE 0000 0000                  	dc.l Map_SSWalls
0001BDC2 2142                       	dc.w $2142
0001BDC4 0000 0000                  	dc.l Map_SSWalls
0001BDC8 2142                       	dc.w $2142
0001BDCA 0000 0000                  	dc.l Map_SSWalls
0001BDCE 2142                       	dc.w $2142
0001BDD0 0000 0000                  	dc.l Map_SSWalls
0001BDD4 2142                       	dc.w $2142
0001BDD6 0000 0000                  	dc.l Map_SSWalls
0001BDDA 2142                       	dc.w $2142
0001BDDC 0000 0000                  	dc.l Map_SSWalls
0001BDE0 2142                       	dc.w $2142
0001BDE2 0000 0000                  	dc.l Map_SSWalls
0001BDE6 2142                       	dc.w $2142
0001BDE8 0000 0000                  	dc.l Map_SSWalls
0001BDEC 2142                       	dc.w $2142
0001BDEE 0000 0000                  	dc.l Map_SSWalls
0001BDF2 2142                       	dc.w $2142
0001BDF4 0000 0000                  	dc.l Map_SSWalls
0001BDF8 4142                       	dc.w $4142
0001BDFA 0000 0000                  	dc.l Map_SSWalls
0001BDFE 4142                       	dc.w $4142
0001BE00 0000 0000                  	dc.l Map_SSWalls
0001BE04 4142                       	dc.w $4142
0001BE06 0000 0000                  	dc.l Map_SSWalls
0001BE0A 4142                       	dc.w $4142
0001BE0C 0000 0000                  	dc.l Map_SSWalls
0001BE10 4142                       	dc.w $4142
0001BE12 0000 0000                  	dc.l Map_SSWalls
0001BE16 4142                       	dc.w $4142
0001BE18 0000 0000                  	dc.l Map_SSWalls
0001BE1C 4142                       	dc.w $4142
0001BE1E 0000 0000                  	dc.l Map_SSWalls
0001BE22 4142                       	dc.w $4142
0001BE24 0000 0000                  	dc.l Map_SSWalls
0001BE28 4142                       	dc.w $4142
0001BE2A 0000 0000                  	dc.l Map_SSWalls
0001BE2E 6142                       	dc.w $6142
0001BE30 0000 0000                  	dc.l Map_SSWalls
0001BE34 6142                       	dc.w $6142
0001BE36 0000 0000                  	dc.l Map_SSWalls
0001BE3A 6142                       	dc.w $6142
0001BE3C 0000 0000                  	dc.l Map_SSWalls
0001BE40 6142                       	dc.w $6142
0001BE42 0000 0000                  	dc.l Map_SSWalls
0001BE46 6142                       	dc.w $6142
0001BE48 0000 0000                  	dc.l Map_SSWalls
0001BE4C 6142                       	dc.w $6142
0001BE4E 0000 0000                  	dc.l Map_SSWalls
0001BE52 6142                       	dc.w $6142
0001BE54 0000 0000                  	dc.l Map_SSWalls
0001BE58 6142                       	dc.w $6142
0001BE5A 0000 0000                  	dc.l Map_SSWalls
0001BE5E 6142                       	dc.w $6142
0001BE60 0000 F09C                  	dc.l Map_obj47
0001BE64 023B                       	dc.w $23B
0001BE66 0000 0000                  	dc.l Map_SS_R
0001BE6A 0570                       	dc.w $570
0001BE6C 0000 0000                  	dc.l Map_SS_R
0001BE70 0251                       	dc.w $251
0001BE72 0000 0000                  	dc.l Map_SS_R
0001BE76 0370                       	dc.w $370
0001BE78 0000 0000                  	dc.l Map_SS_Up
0001BE7C 0263                       	dc.w $263
0001BE7E 0000 0000                  	dc.l Map_SS_Down
0001BE82 0263                       	dc.w $263
0001BE84 0000 0000                  	dc.l Map_SS_R
0001BE88 22F0                       	dc.w $22F0
0001BE8A 0000 0000                  	dc.l Map_SS_Glass
0001BE8E 0470                       	dc.w $470
0001BE90 0000 0000                  	dc.l Map_SS_Glass
0001BE94 05F0                       	dc.w $5F0
0001BE96 0000 0000                  	dc.l Map_SS_Glass
0001BE9A 65F0                       	dc.w $65F0
0001BE9C 0000 0000                  	dc.l Map_SS_Glass
0001BEA0 25F0                       	dc.w $25F0
0001BEA2 0000 0000                  	dc.l Map_SS_Glass
0001BEA6 45F0                       	dc.w $45F0
0001BEA8 0000 0000                  	dc.l Map_SS_R
0001BEAC 02F0                       	dc.w $2F0
0001BEAE 0100 F09C                  	dc.l Map_obj47+$1000000	; add frame no.	* $1000000
0001BEB2 023B                       	dc.w $23B
0001BEB4 0200 F09C                  	dc.l Map_obj47+$2000000
0001BEB8 023B                       	dc.w $23B
0001BEBA 0000 0000                  	dc.l Map_SS_R
0001BEBE 0797                       	dc.w $797
0001BEC0 0000 0000                  	dc.l Map_SS_R
0001BEC4 07A0                       	dc.w $7A0
0001BEC6 0000 0000                  	dc.l Map_SS_R
0001BECA 07A9                       	dc.w $7A9
0001BECC 0000 0000                  	dc.l Map_SS_R
0001BED0 0797                       	dc.w $797
0001BED2 0000 0000                  	dc.l Map_SS_R
0001BED6 07A0                       	dc.w $7A0
0001BED8 0000 0000                  	dc.l Map_SS_R
0001BEDC 07A9                       	dc.w $7A9
0001BEDE 0000 A3E0                  	dc.l Map_obj25
0001BEE2 27B2                       	dc.w $27B2
0001BEE4 0000 0000                  	dc.l Map_SS_Chaos3
0001BEE8 0770                       	dc.w $770
0001BEEA 0000 0000                  	dc.l Map_SS_Chaos3
0001BEEE 2770                       	dc.w $2770
0001BEF0 0000 0000                  	dc.l Map_SS_Chaos3
0001BEF4 4770                       	dc.w $4770
0001BEF6 0000 0000                  	dc.l Map_SS_Chaos3
0001BEFA 6770                       	dc.w $6770
0001BEFC 0000 0000                  	dc.l Map_SS_Chaos1
0001BF00 0770                       	dc.w $770
0001BF02 0000 0000                  	dc.l Map_SS_Chaos2
0001BF06 0770                       	dc.w $770
0001BF08 0000 0000                  	dc.l Map_SS_R
0001BF0C 04F0                       	dc.w $4F0
0001BF0E 0400 A3E0                  	dc.l Map_obj25+$4000000
0001BF12 27B2                       	dc.w $27B2
0001BF14 0500 A3E0                  	dc.l Map_obj25+$5000000
0001BF18 27B2                       	dc.w $27B2
0001BF1A 0600 A3E0                  	dc.l Map_obj25+$6000000
0001BF1E 27B2                       	dc.w $27B2
0001BF20 0700 A3E0                  	dc.l Map_obj25+$7000000
0001BF24 27B2                       	dc.w $27B2
0001BF26 0000 0000                  	dc.l Map_SS_Glass
0001BF2A 23F0                       	dc.w $23F0
0001BF2C 0000 0000                  	dc.l Map_SS_Glass+$1000000
0001BF30 23F0                       	dc.w $23F0
0001BF32 0000 0000                  	dc.l Map_SS_Glass+$2000000
0001BF36 23F0                       	dc.w $23F0
0001BF38 0000 0000                  	dc.l Map_SS_Glass+$3000000
0001BF3C 23F0                       	dc.w $23F0
0001BF3E 0000 0000                  	dc.l Map_SS_R+$2000000
0001BF42 04F0                       	dc.w $4F0
0001BF44 0000 0000                  	dc.l Map_SS_Glass
0001BF48 05F0                       	dc.w $5F0
0001BF4A 0000 0000                  	dc.l Map_SS_Glass
0001BF4E 65F0                       	dc.w $65F0
0001BF50 0000 0000                  	dc.l Map_SS_Glass
0001BF54 25F0                       	dc.w $25F0
0001BF56 0000 0000                  	dc.l Map_SS_Glass
0001BF5A 45F0                       	dc.w $45F0
0001BF5A 45F0                       	dc.w $45F0
0001BF5C                            
0001BF5C                            ; ---------------------------------------------------------------------------
0001BF5C                            ; Sprite mappings - special stage "R" block
0001BF5C                            ; ---------------------------------------------------------------------------
0001BF5C                            Map_SS_R:
0001BF5C                            	include "_maps\SSRblock.asm"
0001BF5C                            ; ---------------------------------------------------------------------------
0001BF5C                            ; Sprite mappings - special stage "R" block
0001BF5C                            ; ---------------------------------------------------------------------------
0001BF5C 0000 0000                  		dc.w byte_1B912-Map_SS_R, byte_1B918-Map_SS_R
0001BF60 0000                       		dc.w byte_1B91E-Map_SS_R
0001BF62 01                         byte_1B912:	dc.b 1
0001BF63 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001BF68 01                         byte_1B918:	dc.b 1
0001BF69 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001BF6E 00                         byte_1B91E:	dc.b 0
0001BF70 00                         		even
0001BF70 00                         		even
0001BF70                            
0001BF70                            ; ---------------------------------------------------------------------------
0001BF70                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001BF70                            ; ---------------------------------------------------------------------------
0001BF70                            Map_SS_Glass:
0001BF70                            	include "_maps\SSglassblock.asm"
0001BF70                            ; ---------------------------------------------------------------------------
0001BF70                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001BF70                            ; ---------------------------------------------------------------------------
0001BF70 0000 0000                  		dc.w byte_1B928-Map_SS_Glass, byte_1B92E-Map_SS_Glass
0001BF74 0000 0000                  		dc.w byte_1B934-Map_SS_Glass, byte_1B93A-Map_SS_Glass
0001BF78 01                         byte_1B928:	dc.b 1
0001BF79 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001BF7E 01                         byte_1B92E:	dc.b 1
0001BF7F F40A 0800 F4               		dc.b $F4, $A, 8, 0, $F4
0001BF84 01                         byte_1B934:	dc.b 1
0001BF85 F40A 1800 F4               		dc.b $F4, $A, $18, 0, $F4
0001BF8A 01                         byte_1B93A:	dc.b 1
0001BF8B F40A 1000 F4               		dc.b $F4, $A, $10, 0, $F4
0001BF90                            		even
0001BF90                            		even
0001BF90                            
0001BF90                            ; ---------------------------------------------------------------------------
0001BF90                            ; Sprite mappings - special stage "UP" block
0001BF90                            ; ---------------------------------------------------------------------------
0001BF90                            Map_SS_Up:
0001BF90                            	include "_maps\SSUPblock.asm"
0001BF90                            ; ---------------------------------------------------------------------------
0001BF90                            ; Sprite mappings - special stage "UP" block
0001BF90                            ; ---------------------------------------------------------------------------
0001BF90 0000                       		dc.w byte_1B944-Map_SS_Up
0001BF92 0000                       		dc.w byte_1B94A-Map_SS_Up
0001BF94 01                         byte_1B944:	dc.b 1
0001BF95 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001BF9A 01                         byte_1B94A:	dc.b 1
0001BF9B F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001BFA0                            		even
0001BFA0                            		even
0001BFA0                            
0001BFA0                            ; ---------------------------------------------------------------------------
0001BFA0                            ; Sprite mappings - special stage "DOWN" block
0001BFA0                            ; ---------------------------------------------------------------------------
0001BFA0                            Map_SS_Down:
0001BFA0                            	include "_maps\SSDOWNblock.asm"
0001BFA0                            ; ---------------------------------------------------------------------------
0001BFA0                            ; Sprite mappings - special stage "DOWN" block
0001BFA0                            ; ---------------------------------------------------------------------------
0001BFA0 0000                       		dc.w byte_1B954-Map_SS_Down
0001BFA2 0000                       		dc.w byte_1B95A-Map_SS_Down
0001BFA4 01                         byte_1B954:	dc.b 1
0001BFA5 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001BFAA 01                         byte_1B95A:	dc.b 1
0001BFAB F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001BFB0                            		even
0001BFB0                            		even
0001BFB0                            
0001BFB0                            ; ---------------------------------------------------------------------------
0001BFB0                            ; Sprite mappings - special stage chaos	emeralds
0001BFB0                            ; ---------------------------------------------------------------------------
0001BFB0 0000                       Map_SS_Chaos1:	dc.w byte_1B96C-Map_SS_Chaos1
0001BFB2 0000                       		dc.w byte_1B97E-Map_SS_Chaos1
0001BFB4 0000                       Map_SS_Chaos2:	dc.w byte_1B972-Map_SS_Chaos2
0001BFB6 0000                       		dc.w byte_1B97E-Map_SS_Chaos2
0001BFB8 0000                       Map_SS_Chaos3:	dc.w byte_1B978-Map_SS_Chaos3
0001BFBA 0000                       		dc.w byte_1B97E-Map_SS_Chaos3
0001BFBC 01                         byte_1B96C:	dc.b 1
0001BFBD F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001BFC2 01                         byte_1B972:	dc.b 1
0001BFC3 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0001BFC8 01                         byte_1B978:	dc.b 1
0001BFC9 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0001BFCE 01                         byte_1B97E:	dc.b 1
0001BFCF F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001BFD4                            		even
0001BFD4                            ; ===========================================================================
0001BFD4                            ; ---------------------------------------------------------------------------
0001BFD4                            ; Object 09 - Sonic (special stage)
0001BFD4                            ; ---------------------------------------------------------------------------
0001BFD4                            
0001BFD4                            Obj09:					; XREF: Obj_Index
0001BFD4 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
0001BFD8 6700                       		beq.s	Obj09_Normal	; if not, branch
0001BFDA 6100 0000                  		bsr.w	SS_FixCamera
0001BFDE 6000 0000                  		bra.w	DebugMode
0001BFE2                            ; ===========================================================================
0001BFE2                            
0001BFE2                            Obj09_Normal:
0001BFE2 7000                       		moveq	#0,d0
0001BFE4 1028 0024                  		move.b	$24(a0),d0
0001BFE8 323B 0000                  		move.w	Obj09_Index(pc,d0.w),d1
0001BFEC 4EFB 1000                  		jmp	Obj09_Index(pc,d1.w)
0001BFF0                            ; ===========================================================================
0001BFF0 0000                       Obj09_Index:	dc.w Obj09_Main-Obj09_Index
0001BFF2 0000                       		dc.w Obj09_ChkDebug-Obj09_Index
0001BFF4 0000                       		dc.w Obj09_ExitStage-Obj09_Index
0001BFF6 0000                       		dc.w Obj09_Exit2-Obj09_Index
0001BFF8                            ; ===========================================================================
0001BFF8                            
0001BFF8                            Obj09_Main:				; XREF: Obj09_Index
0001BFF8 5428 0024                  		addq.b	#2,$24(a0)
0001BFFC 117C 000E 0016             		move.b	#$E,$16(a0)
0001C002 117C 0007 0017             		move.b	#7,$17(a0)
0001C008 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
0001C010 317C 0780 0002             		move.w	#$780,2(a0)
0001C016 117C 0004 0001             		move.b	#4,1(a0)
0001C01C 117C 0000 0018             		move.b	#0,$18(a0)
0001C022 117C 0002 001C             		move.b	#2,$1C(a0)
0001C028 08E8 0002 0022             		bset	#2,$22(a0)
0001C02E 08E8 0001 0022             		bset	#1,$22(a0)
0001C034                            
0001C034                            Obj09_ChkDebug:				; XREF: Obj09_Index
0001C034 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat enabled?
0001C038 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001C03A 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001C040 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001C042 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring
0001C048                            
0001C048                            Obj09_NoDebug:
0001C048 117C 0000 0030             		move.b	#0,$30(a0)
0001C04E 7000                       		moveq	#0,d0
0001C050 1028 0022                  		move.b	$22(a0),d0
0001C054 0240 0002                  		andi.w	#2,d0
0001C058 323B 0000                  		move.w	Obj09_Modes(pc,d0.w),d1
0001C05C 4EBB 1000                  		jsr	Obj09_Modes(pc,d1.w)
0001C060 4EBA 8200                  		jsr	LoadSonicDynPLC
0001C064 4EF9 0000 DBA8             		jmp	DisplaySprite
0001C06A                            ; ===========================================================================
0001C06A 0000                       Obj09_Modes:	dc.w Obj09_OnWall-Obj09_Modes
0001C06C 0000                       		dc.w Obj09_InAir-Obj09_Modes
0001C06E                            ; ===========================================================================
0001C06E                            
0001C06E                            Obj09_OnWall:				; XREF: Obj09_Modes
0001C06E 6100 0000                  		bsr.w	Obj09_Jump
0001C072 6100 0000                  		bsr.w	Obj09_Move
0001C076 6100 0000                  		bsr.w	Obj09_Fall
0001C07A 6000                       		bra.s	Obj09_Display
0001C07C                            ; ===========================================================================
0001C07C                            
0001C07C                            Obj09_InAir:				; XREF: Obj09_Modes
0001C07C 6100 0000                  		bsr.w	nullsub_2
0001C080 6100 0000                  		bsr.w	Obj09_Move
0001C084 6100 0000                  		bsr.w	Obj09_Fall
0001C088                            
0001C088                            Obj09_Display:				; XREF: Obj09_OnWall
0001C088 6100 0000                  		bsr.w	Obj09_ChkItems
0001C08C 6100 0000                  		bsr.w	Obj09_ChkItems2
0001C090 4EB9 0000 DB82             		jsr	SpeedToPos
0001C096 6100 0000                  		bsr.w	SS_FixCamera
0001C09A 3038 F780                  		move.w	($FFFFF780).w,d0
0001C09E D078 F782                  		add.w	($FFFFF782).w,d0
0001C0A2 31C0 F780                  		move.w	d0,($FFFFF780).w
0001C0A6 4EB9 0001 3FE6             		jsr	Sonic_Animate
0001C0AC 4E75                       		rts	
0001C0AE                            
0001C0AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C0AE                            
0001C0AE                            
0001C0AE                            Obj09_Move:				; XREF: Obj09_OnWall; Obj09_InAir
0001C0AE 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
0001C0B4 6700                       		beq.s	Obj09_ChkRight	; if not, branch
0001C0B6 6100 0000                  		bsr.w	Obj09_MoveLeft
0001C0BA                            
0001C0BA                            Obj09_ChkRight:
0001C0BA 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
0001C0C0 6700                       		beq.s	loc_1BA78	; if not, branch
0001C0C2 6100 0000                  		bsr.w	Obj09_MoveRight
0001C0C6                            
0001C0C6                            loc_1BA78:
0001C0C6 1038 F602                  		move.b	($FFFFF602).w,d0
0001C0CA 0200 000C                  		andi.b	#$C,d0
0001C0CE 6600                       		bne.s	loc_1BAA8
0001C0D0 3028 0014                  		move.w	$14(a0),d0
0001C0D4 6700                       		beq.s	loc_1BAA8
0001C0D6 6B00                       		bmi.s	loc_1BA9A
0001C0D8 0440 000C                  		subi.w	#$C,d0
0001C0DC 6400                       		bcc.s	loc_1BA94
0001C0DE 303C 0000                  		move.w	#0,d0
0001C0E2                            
0001C0E2                            loc_1BA94:
0001C0E2 3140 0014                  		move.w	d0,$14(a0)
0001C0E6 6000                       		bra.s	loc_1BAA8
0001C0E8                            ; ===========================================================================
0001C0E8                            
0001C0E8                            loc_1BA9A:
0001C0E8 0640 000C                  		addi.w	#$C,d0
0001C0EC 6400                       		bcc.s	loc_1BAA4
0001C0EE 303C 0000                  		move.w	#0,d0
0001C0F2                            
0001C0F2                            loc_1BAA4:
0001C0F2 3140 0014                  		move.w	d0,$14(a0)
0001C0F6                            
0001C0F6                            loc_1BAA8:
0001C0F6 1038 F780                  		move.b	($FFFFF780).w,d0
0001C0FA 0600 0020                  		addi.b	#$20,d0
0001C0FE 0200 00C0                  		andi.b	#$C0,d0
0001C102 4400                       		neg.b	d0
0001C104 4EB9 0000 2C22             		jsr	(CalcSine).l
0001C10A C3E8 0014                  		muls.w	$14(a0),d1
0001C10E D3A8 0008                  		add.l	d1,8(a0)
0001C112 C1E8 0014                  		muls.w	$14(a0),d0
0001C116 D1A8 000C                  		add.l	d0,$C(a0)
0001C11A 48E7 C000                  		movem.l	d0-d1,-(sp)
0001C11E 2428 000C                  		move.l	$C(a0),d2
0001C122 2628 0008                  		move.l	8(a0),d3
0001C126 6100 0000                  		bsr.w	sub_1BCE8
0001C12A 6700                       		beq.s	loc_1BAF2
0001C12C 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001C130 93A8 0008                  		sub.l	d1,8(a0)
0001C134 91A8 000C                  		sub.l	d0,$C(a0)
0001C138 317C 0000 0014             		move.w	#0,$14(a0)
0001C13E 4E75                       		rts	
0001C140                            ; ===========================================================================
0001C140                            
0001C140                            loc_1BAF2:
0001C140 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001C144 4E75                       		rts	
0001C146                            ; End of function Obj09_Move
0001C146                            
0001C146                            
0001C146                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C146                            
0001C146                            
0001C146                            Obj09_MoveLeft:				; XREF: Obj09_Move
0001C146 08E8 0000 0022             		bset	#0,$22(a0)
0001C14C 3028 0014                  		move.w	$14(a0),d0
0001C150 6700                       		beq.s	loc_1BB06
0001C152 6A00                       		bpl.s	loc_1BB1A
0001C154                            
0001C154                            loc_1BB06:
0001C154 0440 000C                  		subi.w	#$C,d0
0001C158 0C40 F800                  		cmpi.w	#-$800,d0
0001C15C 6E00                       		bgt.s	loc_1BB14
0001C15E 303C F800                  		move.w	#-$800,d0
0001C162                            
0001C162                            loc_1BB14:
0001C162 3140 0014                  		move.w	d0,$14(a0)
0001C166 4E75                       		rts	
0001C168                            ; ===========================================================================
0001C168                            
0001C168                            loc_1BB1A:
0001C168 0440 0040                  		subi.w	#$40,d0
0001C16C 6400                       		bcc.s	loc_1BB22
0001C16E 4E71                       		nop	
0001C170                            
0001C170                            loc_1BB22:
0001C170 3140 0014                  		move.w	d0,$14(a0)
0001C174 4E75                       		rts	
0001C176                            ; End of function Obj09_MoveLeft
0001C176                            
0001C176                            
0001C176                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C176                            
0001C176                            
0001C176                            Obj09_MoveRight:			; XREF: Obj09_Move
0001C176 08A8 0000 0022             		bclr	#0,$22(a0)
0001C17C 3028 0014                  		move.w	$14(a0),d0
0001C180 6B00                       		bmi.s	loc_1BB48
0001C182 0640 000C                  		addi.w	#$C,d0
0001C186 0C40 0800                  		cmpi.w	#$800,d0
0001C18A 6D00                       		blt.s	loc_1BB42
0001C18C 303C 0800                  		move.w	#$800,d0
0001C190                            
0001C190                            loc_1BB42:
0001C190 3140 0014                  		move.w	d0,$14(a0)
0001C194 6000                       		bra.s	locret_1BB54
0001C196                            ; ===========================================================================
0001C196                            
0001C196                            loc_1BB48:
0001C196 0640 0040                  		addi.w	#$40,d0
0001C19A 6400                       		bcc.s	loc_1BB50
0001C19C 4E71                       		nop	
0001C19E                            
0001C19E                            loc_1BB50:
0001C19E 3140 0014                  		move.w	d0,$14(a0)
0001C1A2                            
0001C1A2                            locret_1BB54:
0001C1A2 4E75                       		rts	
0001C1A4                            ; End of function Obj09_MoveRight
0001C1A4                            
0001C1A4                            
0001C1A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C1A4                            
0001C1A4                            
0001C1A4                            Obj09_Jump:				; XREF: Obj09_OnWall
0001C1A4 1038 F603                  		move.b	($FFFFF603).w,d0
0001C1A8 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
0001C1AC 6700                       		beq.s	Obj09_NoJump	; if not, branch
0001C1AE 1038 F780                  		move.b	($FFFFF780).w,d0
0001C1B2 0200 00FC                  		andi.b	#$FC,d0
0001C1B6 4400                       		neg.b	d0
0001C1B8 0400 0040                  		subi.b	#$40,d0
0001C1BC 4EB9 0000 2C22             		jsr	(CalcSine).l
0001C1C2 C3FC 0680                  		muls.w	#$680,d1
0001C1C6 E081                       		asr.l	#8,d1
0001C1C8 3141 0010                  		move.w	d1,$10(a0)
0001C1CC C1FC 0680                  		muls.w	#$680,d0
0001C1D0 E080                       		asr.l	#8,d0
0001C1D2 3140 0012                  		move.w	d0,$12(a0)
0001C1D6 08E8 0001 0022             		bset	#1,$22(a0)
0001C1DC 303C 00A0                  		move.w	#$A0,d0
0001C1E0 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play jumping sound
0001C1E6                            
0001C1E6                            Obj09_NoJump:
0001C1E6 4E75                       		rts	
0001C1E8                            ; End of function Obj09_Jump
0001C1E8                            
0001C1E8                            
0001C1E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C1E8                            
0001C1E8                            
0001C1E8                            nullsub_2:				; XREF: Obj09_InAir
0001C1E8 4E75                       		rts	
0001C1EA                            ; End of function nullsub_2
0001C1EA                            
0001C1EA                            ; ===========================================================================
0001C1EA                            ; ---------------------------------------------------------------------------
0001C1EA                            ; unused subroutine to limit Sonic's upward vertical speed
0001C1EA                            ; ---------------------------------------------------------------------------
0001C1EA 323C FC00                  		move.w	#-$400,d1
0001C1EE B268 0012                  		cmp.w	$12(a0),d1
0001C1F2 6F00                       		ble.s	locret_1BBB4
0001C1F4 1038 F602                  		move.b	($FFFFF602).w,d0
0001C1F8 0200 0070                  		andi.b	#$70,d0
0001C1FC 6600                       		bne.s	locret_1BBB4
0001C1FE 3141 0012                  		move.w	d1,$12(a0)
0001C202                            
0001C202                            locret_1BBB4:
0001C202 4E75                       		rts	
0001C204                            ; ---------------------------------------------------------------------------
0001C204                            ; Subroutine to	fix the	camera on Sonic's position (special stage)
0001C204                            ; ---------------------------------------------------------------------------
0001C204                            
0001C204                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C204                            
0001C204                            
0001C204                            SS_FixCamera:				; XREF: Obj09
0001C204 3428 000C                  		move.w	$C(a0),d2
0001C208 3628 0008                  		move.w	8(a0),d3
0001C20C 3038 F700                  		move.w	($FFFFF700).w,d0
0001C210 0443 00A0                  		subi.w	#$A0,d3
0001C214 6500                       		bcs.s	loc_1BBCE
0001C216 9043                       		sub.w	d3,d0
0001C218 9178 F700                  		sub.w	d0,($FFFFF700).w
0001C21C                            
0001C21C                            loc_1BBCE:
0001C21C 3038 F704                  		move.w	($FFFFF704).w,d0
0001C220 0442 0070                  		subi.w	#$70,d2
0001C224 6500                       		bcs.s	locret_1BBDE
0001C226 9042                       		sub.w	d2,d0
0001C228 9178 F704                  		sub.w	d0,($FFFFF704).w
0001C22C                            
0001C22C                            locret_1BBDE:
0001C22C 4E75                       		rts	
0001C22E                            ; End of function SS_FixCamera
0001C22E                            
0001C22E                            ; ===========================================================================
0001C22E                            
0001C22E                            Obj09_ExitStage:			; XREF: Obj09_Index
0001C22E 0678 0040 F782             		addi.w	#$40,($FFFFF782).w
0001C234 0C78 1800 F782             		cmpi.w	#$1800,($FFFFF782).w
0001C23A 6600                       		bne.s	loc_1BBF4
0001C23C 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001C242                            
0001C242                            loc_1BBF4:
0001C242 0C78 3000 F782             		cmpi.w	#$3000,($FFFFF782).w
0001C248 6D00                       		blt.s	loc_1BC12
0001C24A 31FC 0000 F782             		move.w	#0,($FFFFF782).w
0001C250 31FC 4000 F780             		move.w	#$4000,($FFFFF780).w
0001C256 5428 0024                  		addq.b	#2,$24(a0)
0001C25A 317C 003C 0038             		move.w	#$3C,$38(a0)
0001C260                            
0001C260                            loc_1BC12:
0001C260 3038 F780                  		move.w	($FFFFF780).w,d0
0001C264 D078 F782                  		add.w	($FFFFF782).w,d0
0001C268 31C0 F780                  		move.w	d0,($FFFFF780).w
0001C26C 4EB9 0001 3FE6             		jsr	Sonic_Animate
0001C272 4EB9 0001 4262             		jsr	LoadSonicDynPLC
0001C278 6100 FF8A                  		bsr.w	SS_FixCamera
0001C27C 4EF9 0000 DBA8             		jmp	DisplaySprite
0001C282                            ; ===========================================================================
0001C282                            
0001C282                            Obj09_Exit2:				; XREF: Obj09_Index
0001C282 5368 0038                  		subq.w	#1,$38(a0)
0001C286 6600                       		bne.s	loc_1BC40
0001C288 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001C28E                            
0001C28E                            loc_1BC40:
0001C28E 4EB9 0001 3FE6             		jsr	Sonic_Animate
0001C294 4EB9 0001 4262             		jsr	LoadSonicDynPLC
0001C29A 6100 FF68                  		bsr.w	SS_FixCamera
0001C29E 4EF9 0000 DBA8             		jmp	DisplaySprite
0001C2A4                            
0001C2A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C2A4                            
0001C2A4                            
0001C2A4                            Obj09_Fall:				; XREF: Obj09_OnWall; Obj09_InAir
0001C2A4 2428 000C                  		move.l	$C(a0),d2
0001C2A8 2628 0008                  		move.l	8(a0),d3
0001C2AC 1038 F780                  		move.b	($FFFFF780).w,d0
0001C2B0 0200 00FC                  		andi.b	#$FC,d0
0001C2B4 4EB9 0000 2C22             		jsr	(CalcSine).l
0001C2BA 3828 0010                  		move.w	$10(a0),d4
0001C2BE 48C4                       		ext.l	d4
0001C2C0 E184                       		asl.l	#8,d4
0001C2C2 C1FC 002A                  		muls.w	#$2A,d0
0001C2C6 D084                       		add.l	d4,d0
0001C2C8 3828 0012                  		move.w	$12(a0),d4
0001C2CC 48C4                       		ext.l	d4
0001C2CE E184                       		asl.l	#8,d4
0001C2D0 C3FC 002A                  		muls.w	#$2A,d1
0001C2D4 D284                       		add.l	d4,d1
0001C2D6 D680                       		add.l	d0,d3
0001C2D8 6100 0000                  		bsr.w	sub_1BCE8
0001C2DC 6700                       		beq.s	loc_1BCB0
0001C2DE 9680                       		sub.l	d0,d3
0001C2E0 7000                       		moveq	#0,d0
0001C2E2 3140 0010                  		move.w	d0,$10(a0)
0001C2E6 08A8 0001 0022             		bclr	#1,$22(a0)
0001C2EC D481                       		add.l	d1,d2
0001C2EE 6100 0000                  		bsr.w	sub_1BCE8
0001C2F2 6700                       		beq.s	loc_1BCC6
0001C2F4 9481                       		sub.l	d1,d2
0001C2F6 7200                       		moveq	#0,d1
0001C2F8 3141 0012                  		move.w	d1,$12(a0)
0001C2FC 4E75                       		rts	
0001C2FE                            ; ===========================================================================
0001C2FE                            
0001C2FE                            loc_1BCB0:
0001C2FE D481                       		add.l	d1,d2
0001C300 6100 0000                  		bsr.w	sub_1BCE8
0001C304 6700                       		beq.s	loc_1BCD4
0001C306 9481                       		sub.l	d1,d2
0001C308 7200                       		moveq	#0,d1
0001C30A 3141 0012                  		move.w	d1,$12(a0)
0001C30E 08A8 0001 0022             		bclr	#1,$22(a0)
0001C314                            
0001C314                            loc_1BCC6:
0001C314 E080                       		asr.l	#8,d0
0001C316 E081                       		asr.l	#8,d1
0001C318 3140 0010                  		move.w	d0,$10(a0)
0001C31C 3141 0012                  		move.w	d1,$12(a0)
0001C320 4E75                       		rts	
0001C322                            ; ===========================================================================
0001C322                            
0001C322                            loc_1BCD4:
0001C322 E080                       		asr.l	#8,d0
0001C324 E081                       		asr.l	#8,d1
0001C326 3140 0010                  		move.w	d0,$10(a0)
0001C32A 3141 0012                  		move.w	d1,$12(a0)
0001C32E 08E8 0001 0022             		bset	#1,$22(a0)
0001C334 4E75                       		rts	
0001C336                            ; End of function Obj09_Fall
0001C336                            
0001C336                            
0001C336                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C336                            
0001C336                            
0001C336                            sub_1BCE8:				; XREF: Obj09_Move; Obj09_Fall
0001C336 43F9 00FF 0000             		lea	($FF0000).l,a1
0001C33C 7800                       		moveq	#0,d4
0001C33E 4842                       		swap	d2
0001C340 3802                       		move.w	d2,d4
0001C342 4842                       		swap	d2
0001C344 0644 0044                  		addi.w	#$44,d4
0001C348 88FC 0018                  		divu.w	#$18,d4
0001C34C C8FC 0080                  		mulu.w	#$80,d4
0001C350 D3C4                       		adda.l	d4,a1
0001C352 7800                       		moveq	#0,d4
0001C354 4843                       		swap	d3
0001C356 3803                       		move.w	d3,d4
0001C358 4843                       		swap	d3
0001C35A 0644 0014                  		addi.w	#$14,d4
0001C35E 88FC 0018                  		divu.w	#$18,d4
0001C362 D2C4                       		adda.w	d4,a1
0001C364 7A00                       		moveq	#0,d5
0001C366 1819                       		move.b	(a1)+,d4
0001C368 6100                       		bsr.s	sub_1BD30
0001C36A 1819                       		move.b	(a1)+,d4
0001C36C 6100                       		bsr.s	sub_1BD30
0001C36E D2FC 007E                  		adda.w	#$7E,a1
0001C372 1819                       		move.b	(a1)+,d4
0001C374 6100                       		bsr.s	sub_1BD30
0001C376 1819                       		move.b	(a1)+,d4
0001C378 6100                       		bsr.s	sub_1BD30
0001C37A 4A05                       		tst.b	d5
0001C37C 4E75                       		rts	
0001C37E                            ; End of function sub_1BCE8
0001C37E                            
0001C37E                            
0001C37E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C37E                            
0001C37E                            
0001C37E                            sub_1BD30:				; XREF: sub_1BCE8
0001C37E 6700                       		beq.s	locret_1BD44
0001C380 0C04 0028                  		cmpi.b	#$28,d4
0001C384 6700                       		beq.s	locret_1BD44
0001C386 0C04 003A                  		cmpi.b	#$3A,d4
0001C38A 6500                       		bcs.s	loc_1BD46
0001C38C 0C04 004B                  		cmpi.b	#$4B,d4
0001C390 6400                       		bcc.s	loc_1BD46
0001C392                            
0001C392                            locret_1BD44:
0001C392 4E75                       		rts	
0001C394                            ; ===========================================================================
0001C394                            
0001C394                            loc_1BD46:
0001C394 1144 0030                  		move.b	d4,$30(a0)
0001C398 2149 0032                  		move.l	a1,$32(a0)
0001C39C 7AFF                       		moveq	#-1,d5
0001C39E 4E75                       		rts	
0001C3A0                            ; End of function sub_1BD30
0001C3A0                            
0001C3A0                            
0001C3A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C3A0                            
0001C3A0                            
0001C3A0                            Obj09_ChkItems:				; XREF: Obj09_Display
0001C3A0 43F9 00FF 0000             		lea	($FF0000).l,a1
0001C3A6 7800                       		moveq	#0,d4
0001C3A8 3828 000C                  		move.w	$C(a0),d4
0001C3AC 0644 0050                  		addi.w	#$50,d4
0001C3B0 88FC 0018                  		divu.w	#$18,d4
0001C3B4 C8FC 0080                  		mulu.w	#$80,d4
0001C3B8 D3C4                       		adda.l	d4,a1
0001C3BA 7800                       		moveq	#0,d4
0001C3BC 3828 0008                  		move.w	8(a0),d4
0001C3C0 0644 0020                  		addi.w	#$20,d4
0001C3C4 88FC 0018                  		divu.w	#$18,d4
0001C3C8 D2C4                       		adda.w	d4,a1
0001C3CA 1811                       		move.b	(a1),d4
0001C3CC 6600                       		bne.s	Obj09_ChkCont
0001C3CE 4A28 003A                  		tst.b	$3A(a0)
0001C3D2 6600 0000                  		bne.w	Obj09_MakeGhostSolid
0001C3D6 7800                       		moveq	#0,d4
0001C3D8 4E75                       		rts	
0001C3DA                            ; ===========================================================================
0001C3DA                            
0001C3DA                            Obj09_ChkCont:
0001C3DA 0C04 003A                  		cmpi.b	#$3A,d4		; is the item a	ring?
0001C3DE 6600                       		bne.s	Obj09_Chk1Up
0001C3E0 6100 F728                  		bsr.w	SS_RemoveCollectedItem
0001C3E4 6600                       		bne.s	Obj09_GetCont
0001C3E6 14BC 0001                  		move.b	#1,(a2)
0001C3EA 2549 0004                  		move.l	a1,4(a2)
0001C3EE                            
0001C3EE                            Obj09_GetCont:
0001C3EE 4EB9 0000 A0C8             		jsr	CollectRing
0001C3F4 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; check if you have 50 rings
0001C3FA 6500                       		bcs.s	Obj09_NoCont
0001C3FC 08F8 0000 FE1B             		bset	#0,($FFFFFE1B).w
0001C402 6600                       		bne.s	Obj09_NoCont
0001C404 5238 FE18                  		addq.b	#1,($FFFFFE18).w ; add 1 to number of continues
0001C408 303C 00BF                  		move.w	#$BF,d0
0001C40C 4EB9 0000 15B6             		jsr	(PlaySound).l	; play extra continue sound
0001C412                            
0001C412                            Obj09_NoCont:
0001C412 7800                       		moveq	#0,d4
0001C414 4E75                       		rts	
0001C416                            ; ===========================================================================
0001C416                            
0001C416                            Obj09_Chk1Up:
0001C416 0C04 0028                  		cmpi.b	#$28,d4		; is the item an extra life?
0001C41A 6600                       		bne.s	Obj09_ChkEmer
0001C41C 6100 F6EC                  		bsr.w	SS_RemoveCollectedItem
0001C420 6600                       		bne.s	Obj09_Get1Up
0001C422 14BC 0003                  		move.b	#3,(a2)
0001C426 2549 0004                  		move.l	a1,4(a2)
0001C42A                            
0001C42A                            Obj09_Get1Up:
0001C42A 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to number of lives
0001C42E 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to lives counter
0001C432 303C 0088                  		move.w	#$88,d0
0001C436 4EB9 0000 15B6             		jsr	(PlaySound).l	; play extra life music
0001C43C 7800                       		moveq	#0,d4
0001C43E 4E75                       		rts	
0001C440                            ; ===========================================================================
0001C440                            
0001C440                            Obj09_ChkEmer:
0001C440 0C04 003B                  		cmpi.b	#$3B,d4		; is the item an emerald?
0001C444 6500                       		bcs.s	Obj09_ChkGhost
0001C446 0C04 0040                  		cmpi.b	#$40,d4
0001C44A 6200                       		bhi.s	Obj09_ChkGhost
0001C44C 6100 F6BC                  		bsr.w	SS_RemoveCollectedItem
0001C450 6600                       		bne.s	Obj09_GetEmer
0001C452 14BC 0005                  		move.b	#5,(a2)
0001C456 2549 0004                  		move.l	a1,4(a2)
0001C45A                            
0001C45A                            Obj09_GetEmer:
0001C45A 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all the emeralds?
0001C460 6700                       		beq.s	Obj09_NoEmer	; if yes, branch
0001C462 0404 003B                  		subi.b	#$3B,d4
0001C466 7000                       		moveq	#0,d0
0001C468 1038 FE57                  		move.b	($FFFFFE57).w,d0
0001C46C 45F8 FE58                  		lea	($FFFFFE58).w,a2
0001C470 1584 0000                  		move.b	d4,(a2,d0.w)
0001C474 5238 FE57                  		addq.b	#1,($FFFFFE57).w ; add 1 to number of emeralds
0001C478                            
0001C478                            Obj09_NoEmer:
0001C478 303C 0093                  		move.w	#$93,d0
0001C47C 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play emerald music
0001C482 7800                       		moveq	#0,d4
0001C484 4E75                       		rts	
0001C486                            ; ===========================================================================
0001C486                            
0001C486                            Obj09_ChkGhost:
0001C486 0C04 0041                  		cmpi.b	#$41,d4		; is the item a	ghost block?
0001C48A 6600                       		bne.s	Obj09_ChkGhostTag
0001C48C 117C 0001 003A             		move.b	#1,$3A(a0)	; mark the ghost block as "passed"
0001C492                            
0001C492                            Obj09_ChkGhostTag:
0001C492 0C04 004A                  		cmpi.b	#$4A,d4		; is the item a	switch for ghost blocks?
0001C496 6600                       		bne.s	Obj09_NoGhost
0001C498 0C28 0001 003A             		cmpi.b	#1,$3A(a0)	; have the ghost blocks	been passed?
0001C49E 6600                       		bne.s	Obj09_NoGhost	; if not, branch
0001C4A0 117C 0002 003A             		move.b	#2,$3A(a0)	; mark the ghost blocks	as "solid"
0001C4A6                            
0001C4A6                            Obj09_NoGhost:
0001C4A6 78FF                       		moveq	#-1,d4
0001C4A8 4E75                       		rts	
0001C4AA                            ; ===========================================================================
0001C4AA                            
0001C4AA                            Obj09_MakeGhostSolid:
0001C4AA 0C28 0002 003A             		cmpi.b	#2,$3A(a0)	; is the ghost marked as "solid"?
0001C4B0 6600                       		bne.s	Obj09_GhostNotSolid ; if not, branch
0001C4B2 43F9 00FF 1020             		lea	($FF1020).l,a1
0001C4B8 723F                       		moveq	#$3F,d1
0001C4BA                            
0001C4BA                            Obj09_GhostLoop2:
0001C4BA 743F                       		moveq	#$3F,d2
0001C4BC                            
0001C4BC                            Obj09_GhostLoop:
0001C4BC 0C11 0041                  		cmpi.b	#$41,(a1)	; is the item a	ghost block?
0001C4C0 6600                       		bne.s	Obj09_NoReplace	; if not, branch
0001C4C2 12BC 002C                  		move.b	#$2C,(a1)	; replace ghost	block with a solid block
0001C4C6                            
0001C4C6                            Obj09_NoReplace:
0001C4C6 5249                       		addq.w	#1,a1
0001C4C8 51CA FFF2                  		dbf	d2,Obj09_GhostLoop
0001C4CC 43E9 0040                  		lea	$40(a1),a1
0001C4D0 51C9 FFE8                  		dbf	d1,Obj09_GhostLoop2
0001C4D4                            
0001C4D4                            Obj09_GhostNotSolid:
0001C4D4 4228 003A                  		clr.b	$3A(a0)
0001C4D8 7800                       		moveq	#0,d4
0001C4DA 4E75                       		rts	
0001C4DC                            ; End of function Obj09_ChkItems
0001C4DC                            
0001C4DC                            
0001C4DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C4DC                            
0001C4DC                            
0001C4DC                            Obj09_ChkItems2:			; XREF: Obj09_Display
0001C4DC 1028 0030                  		move.b	$30(a0),d0
0001C4E0 6600                       		bne.s	Obj09_ChkBumper
0001C4E2 5328 0036                  		subq.b	#1,$36(a0)
0001C4E6 6A00                       		bpl.s	loc_1BEA0
0001C4E8 117C 0000 0036             		move.b	#0,$36(a0)
0001C4EE                            
0001C4EE                            loc_1BEA0:
0001C4EE 5328 0037                  		subq.b	#1,$37(a0)
0001C4F2 6A00                       		bpl.s	locret_1BEAC
0001C4F4 117C 0000 0037             		move.b	#0,$37(a0)
0001C4FA                            
0001C4FA                            locret_1BEAC:
0001C4FA 4E75                       		rts	
0001C4FC                            ; ===========================================================================
0001C4FC                            
0001C4FC                            Obj09_ChkBumper:
0001C4FC 0C00 0025                  		cmpi.b	#$25,d0		; is the item a	bumper?
0001C500 6600                       		bne.s	Obj09_GOAL
0001C502 2228 0032                  		move.l	$32(a0),d1
0001C506 0481 00FF 0001             		subi.l	#$FF0001,d1
0001C50C 3401                       		move.w	d1,d2
0001C50E 0241 007F                  		andi.w	#$7F,d1
0001C512 C2FC 0018                  		mulu.w	#$18,d1
0001C516 0441 0014                  		subi.w	#$14,d1
0001C51A EE4A                       		lsr.w	#7,d2
0001C51C 0242 007F                  		andi.w	#$7F,d2
0001C520 C4FC 0018                  		mulu.w	#$18,d2
0001C524 0442 0044                  		subi.w	#$44,d2
0001C528 9268 0008                  		sub.w	8(a0),d1
0001C52C 9468 000C                  		sub.w	$C(a0),d2
0001C530 4EB9 0000 2EF0             		jsr	(CalcAngle).l
0001C536 4EB9 0000 2C22             		jsr	(CalcSine).l
0001C53C C3FC F900                  		muls.w	#-$700,d1
0001C540 E081                       		asr.l	#8,d1
0001C542 3141 0010                  		move.w	d1,$10(a0)
0001C546 C1FC F900                  		muls.w	#-$700,d0
0001C54A E080                       		asr.l	#8,d0
0001C54C 3140 0012                  		move.w	d0,$12(a0)
0001C550 08E8 0001 0022             		bset	#1,$22(a0)
0001C556 6100 F5B2                  		bsr.w	SS_RemoveCollectedItem
0001C55A 6600                       		bne.s	Obj09_BumpSnd
0001C55C 14BC 0002                  		move.b	#2,(a2)
0001C560 2028 0032                  		move.l	$32(a0),d0
0001C564 5380                       		subq.l	#1,d0
0001C566 2540 0004                  		move.l	d0,4(a2)
0001C56A                            
0001C56A                            Obj09_BumpSnd:
0001C56A 303C 00B4                  		move.w	#$B4,d0
0001C56E 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play bumper sound
0001C574                            ; ===========================================================================
0001C574                            
0001C574                            Obj09_GOAL:
0001C574 0C00 0027                  		cmpi.b	#$27,d0		; is the item a	"GOAL"?
0001C578 6600                       		bne.s	Obj09_UPblock
0001C57A 5428 0024                  		addq.b	#2,$24(a0)	; run routine "Obj09_ExitStage"
0001C57E 303C 00A8                  		move.w	#$A8,d0		; change item
0001C582 4EB9 0000 15BC             		jsr	(PlaySound_Special).l ;	play "GOAL" sound
0001C588 4E75                       		rts	
0001C58A                            ; ===========================================================================
0001C58A                            
0001C58A                            Obj09_UPblock:
0001C58A 0C00 0029                  		cmpi.b	#$29,d0		; is the item an "UP" block?
0001C58E 6600                       		bne.s	Obj09_DOWNblock
0001C590 4A28 0036                  		tst.b	$36(a0)
0001C594 6600 0000                  		bne.w	Obj09_NoGlass
0001C598 117C 001E 0036             		move.b	#$1E,$36(a0)
0001C59E 0838 0006 F783             		btst	#6,($FFFFF783).w
0001C5A4 6700                       		beq.s	Obj09_UPsnd
0001C5A6 E1F8 F782                  		asl	($FFFFF782).w	; increase stage rotation speed
0001C5AA 2268 0032                  		movea.l	$32(a0),a1
0001C5AE 5389                       		subq.l	#1,a1
0001C5B0 12BC 002A                  		move.b	#$2A,(a1)	; change item to a "DOWN" block
0001C5B4                            
0001C5B4                            Obj09_UPsnd:
0001C5B4 303C 00A9                  		move.w	#$A9,d0
0001C5B8 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play up/down sound
0001C5BE                            ; ===========================================================================
0001C5BE                            
0001C5BE                            Obj09_DOWNblock:
0001C5BE 0C00 002A                  		cmpi.b	#$2A,d0		; is the item a	"DOWN" block?
0001C5C2 6600                       		bne.s	Obj09_Rblock
0001C5C4 4A28 0036                  		tst.b	$36(a0)
0001C5C8 6600 0000                  		bne.w	Obj09_NoGlass
0001C5CC 117C 001E 0036             		move.b	#$1E,$36(a0)
0001C5D2 0838 0006 F783             		btst	#6,($FFFFF783).w
0001C5D8 6600                       		bne.s	Obj09_DOWNsnd
0001C5DA E0F8 F782                  		asr	($FFFFF782).w	; reduce stage rotation	speed
0001C5DE 2268 0032                  		movea.l	$32(a0),a1
0001C5E2 5389                       		subq.l	#1,a1
0001C5E4 12BC 0029                  		move.b	#$29,(a1)	; change item to an "UP" block
0001C5E8                            
0001C5E8                            Obj09_DOWNsnd:
0001C5E8 303C 00A9                  		move.w	#$A9,d0
0001C5EC 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play up/down sound
0001C5F2                            ; ===========================================================================
0001C5F2                            
0001C5F2                            Obj09_Rblock:
0001C5F2 0C00 002B                  		cmpi.b	#$2B,d0		; is the item an "R" block?
0001C5F6 6600                       		bne.s	Obj09_ChkGlass
0001C5F8 4A28 0037                  		tst.b	$37(a0)
0001C5FC 6600 0000                  		bne.w	Obj09_NoGlass
0001C600 117C 001E 0037             		move.b	#$1E,$37(a0)
0001C606 6100 F502                  		bsr.w	SS_RemoveCollectedItem
0001C60A 6600                       		bne.s	Obj09_RevStage
0001C60C 14BC 0004                  		move.b	#4,(a2)
0001C610 2028 0032                  		move.l	$32(a0),d0
0001C614 5380                       		subq.l	#1,d0
0001C616 2540 0004                  		move.l	d0,4(a2)
0001C61A                            
0001C61A                            Obj09_RevStage:
0001C61A 4478 F782                  		neg.w	($FFFFF782).w	; reverse stage	rotation
0001C61E 303C 00A9                  		move.w	#$A9,d0
0001C622 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play sound
0001C628                            ; ===========================================================================
0001C628                            
0001C628                            Obj09_ChkGlass:
0001C628 0C00 002D                  		cmpi.b	#$2D,d0		; is the item a	glass block?
0001C62C 6700                       		beq.s	Obj09_Glass	; if yes, branch
0001C62E 0C00 002E                  		cmpi.b	#$2E,d0
0001C632 6700                       		beq.s	Obj09_Glass
0001C634 0C00 002F                  		cmpi.b	#$2F,d0
0001C638 6700                       		beq.s	Obj09_Glass
0001C63A 0C00 0030                  		cmpi.b	#$30,d0
0001C63E 6600                       		bne.s	Obj09_NoGlass	; if not, branch
0001C640                            
0001C640                            Obj09_Glass:
0001C640 6100 F4C8                  		bsr.w	SS_RemoveCollectedItem
0001C644 6600                       		bne.s	Obj09_GlassSnd
0001C646 14BC 0006                  		move.b	#6,(a2)
0001C64A 2268 0032                  		movea.l	$32(a0),a1
0001C64E 5389                       		subq.l	#1,a1
0001C650 2549 0004                  		move.l	a1,4(a2)
0001C654 1011                       		move.b	(a1),d0
0001C656 5200                       		addq.b	#1,d0		; change glass type when touched
0001C658 0C00 0030                  		cmpi.b	#$30,d0
0001C65C 6300                       		bls.s	Obj09_GlassUpdate ; if glass is	still there, branch
0001C65E 4200                       		clr.b	d0		; remove the glass block when it's destroyed
0001C660                            
0001C660                            Obj09_GlassUpdate:
0001C660 1540 0004                  		move.b	d0,4(a2)	; update the stage layout
0001C664                            
0001C664                            Obj09_GlassSnd:
0001C664 303C 00BA                  		move.w	#$BA,d0
0001C668 4EF9 0000 15BC             		jmp	(PlaySound_Special).l ;	play glass block sound
0001C66E                            ; ===========================================================================
0001C66E                            
0001C66E                            Obj09_NoGlass:
0001C66E 4E75                       		rts	
0001C670                            ; End of function Obj09_ChkItems2
0001C670                            
0001C670                            ; ===========================================================================
0001C670                            ; ---------------------------------------------------------------------------
0001C670                            ; Object 10 - blank
0001C670                            ; ---------------------------------------------------------------------------
0001C670                            
0001C670                            Obj10:					; XREF: Obj_Index
0001C670 4E75                       		rts	
0001C672                            ; ---------------------------------------------------------------------------
0001C672                            ; Subroutine to	animate	level graphics
0001C672                            ; ---------------------------------------------------------------------------
0001C672                            
0001C672                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C672                            
0001C672                            
0001C672                            AniArt_Load:				; XREF: Demo_Time; loc_F54
0001C672 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001C676 6600                       		bne.s	AniArt_Pause	; if yes, branch
0001C678 4DF9 00C0 0000             		lea	($C00000).l,a6
0001C67E 6100 0000                  		bsr.w	AniArt_GiantRing
0001C682 7000                       		moveq	#0,d0
0001C684 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001C688 D040                       		add.w	d0,d0
0001C68A 303B 0000                  		move.w	AniArt_Index(pc,d0.w),d0
0001C68E 4EFB 0000                  		jmp	AniArt_Index(pc,d0.w)
0001C692                            ; ===========================================================================
0001C692                            
0001C692                            AniArt_Pause:
0001C692 4E75                       		rts	
0001C694                            ; End of function AniArt_Load
0001C694                            
0001C694                            ; ===========================================================================
0001C694 0000 0000                  AniArt_Index:	dc.w AniArt_GHZ-AniArt_Index, AniArt_none-AniArt_Index
0001C698 0000 0000                  		dc.w AniArt_MZ-AniArt_Index, AniArt_none-AniArt_Index
0001C69C 0000 0000                  		dc.w AniArt_none-AniArt_Index, AniArt_SBZ-AniArt_Index
0001C6A0 0000                       		dc.w AniArt_Ending-AniArt_Index
0001C6A2                            ; ===========================================================================
0001C6A2                            ; ---------------------------------------------------------------------------
0001C6A2                            ; Animated pattern routine - Green Hill
0001C6A2                            ; ---------------------------------------------------------------------------
0001C6A2                            
0001C6A2                            AniArt_GHZ:				; XREF: AniArt_Index
0001C6A2 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001C6A6 6A00                       		bpl.s	loc_1C08A
0001C6A8 11FC 0005 F7B1             		move.b	#5,($FFFFF7B1).w ; time	to display each	frame for
0001C6AE 43F9 0000 0000             		lea	(Art_GhzWater).l,a1 ; load waterfall patterns
0001C6B4 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C6B8 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001C6BC 0240 0001                  		andi.w	#1,d0
0001C6C0 6700                       		beq.s	loc_1C078
0001C6C2 43E9 0100                  		lea	$100(a1),a1	; load next frame
0001C6C6                            
0001C6C6                            loc_1C078:
0001C6C6 23FC 6F00 0001 00C0 0004   		move.l	#$6F000001,($C00004).l ; VRAM address
0001C6D0 323C 0007                  		move.w	#7,d1		; number of 8x8	tiles
0001C6D4 6000 0000                  		bra.w	LoadTiles
0001C6D8                            ; ===========================================================================
0001C6D8                            
0001C6D8                            loc_1C08A:
0001C6D8 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001C6DC 6A00                       		bpl.s	loc_1C0C0
0001C6DE 11FC 000F F7B3             		move.b	#$F,($FFFFF7B3).w
0001C6E4 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001C6EA 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001C6EE 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001C6F2 0240 0001                  		andi.w	#1,d0
0001C6F6 6700                       		beq.s	loc_1C0AE
0001C6F8 43E9 0200                  		lea	$200(a1),a1
0001C6FC                            
0001C6FC                            loc_1C0AE:
0001C6FC 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001C706 323C 000F                  		move.w	#$F,d1
0001C70A 6000 0000                  		bra.w	LoadTiles
0001C70E                            ; ===========================================================================
0001C70E                            
0001C70E                            loc_1C0C0:
0001C70E 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001C712 6A00                       		bpl.s	locret_1C10C
0001C714 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001C71A 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001C71E 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001C722 0240 0003                  		andi.w	#3,d0
0001C726 103B 0000                  		move.b	byte_1C10E(pc,d0.w),d0
0001C72A 0800 0000                  		btst	#0,d0
0001C72E 6600                       		bne.s	loc_1C0E8
0001C730 11FC 007F F7B5             		move.b	#$7F,($FFFFF7B5).w
0001C736                            
0001C736                            loc_1C0E8:
0001C736 EF48                       		lsl.w	#7,d0
0001C738 3200                       		move.w	d0,d1
0001C73A D040                       		add.w	d0,d0
0001C73C D041                       		add.w	d1,d0
0001C73E 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001C748 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001C74E 43F1 0000                  		lea	(a1,d0.w),a1
0001C752 323C 000B                  		move.w	#$B,d1
0001C756 6100 0000                  		bsr.w	LoadTiles
0001C75A                            
0001C75A                            locret_1C10C:
0001C75A 4E75                       		rts	
0001C75C                            ; ===========================================================================
0001C75C 0001 0201                  byte_1C10E:	dc.b 0,	1, 2, 1
0001C760                            ; ===========================================================================
0001C760                            ; ---------------------------------------------------------------------------
0001C760                            ; Animated pattern routine - Marble
0001C760                            ; ---------------------------------------------------------------------------
0001C760                            
0001C760                            AniArt_MZ:				; XREF: AniArt_Index
0001C760 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001C764 6A00                       		bpl.s	loc_1C150
0001C766 11FC 0013 F7B1             		move.b	#$13,($FFFFF7B1).w
0001C76C 43F9 0000 0000             		lea	(Art_MzLava1).l,a1 ; load lava surface patterns
0001C772 7000                       		moveq	#0,d0
0001C774 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C778 5200                       		addq.b	#1,d0
0001C77A 0C00 0003                  		cmpi.b	#3,d0
0001C77E 6600                       		bne.s	loc_1C134
0001C780 7000                       		moveq	#0,d0
0001C782                            
0001C782                            loc_1C134:
0001C782 11C0 F7B0                  		move.b	d0,($FFFFF7B0).w
0001C786 C0FC 0100                  		mulu.w	#$100,d0
0001C78A D2C0                       		adda.w	d0,a1
0001C78C 23FC 5C40 0001 00C0 0004   		move.l	#$5C400001,($C00004).l
0001C796 323C 0007                  		move.w	#7,d1
0001C79A 6100 0000                  		bsr.w	LoadTiles
0001C79E                            
0001C79E                            loc_1C150:
0001C79E 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001C7A2 6A00                       		bpl.s	loc_1C1AE
0001C7A4 11FC 0001 F7B3             		move.b	#1,($FFFFF7B3).w
0001C7AA 7000                       		moveq	#0,d0
0001C7AC 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C7B0 49F9 0000 0000             		lea	(Art_MzLava2).l,a4 ; load lava patterns
0001C7B6 EE58                       		ror.w	#7,d0
0001C7B8 D8C0                       		adda.w	d0,a4
0001C7BA 23FC 5A40 0001 00C0 0004   		move.l	#$5A400001,($C00004).l
0001C7C4 7600                       		moveq	#0,d3
0001C7C6 1638 F7B2                  		move.b	($FFFFF7B2).w,d3
0001C7CA 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001C7CE 1638 FE68                  		move.b	($FFFFFE68).w,d3
0001C7D2 343C 0003                  		move.w	#3,d2
0001C7D6                            
0001C7D6                            loc_1C188:
0001C7D6 3003                       		move.w	d3,d0
0001C7D8 D040                       		add.w	d0,d0
0001C7DA 0240 001E                  		andi.w	#$1E,d0
0001C7DE 47F9 0000 0000             		lea	(AniArt_MZextra).l,a3
0001C7E4 3033 0000                  		move.w	(a3,d0.w),d0
0001C7E8 47F3 0000                  		lea	(a3,d0.w),a3
0001C7EC 224C                       		movea.l	a4,a1
0001C7EE 323C 001F                  		move.w	#$1F,d1
0001C7F2 4E93                       		jsr	(a3)
0001C7F4 5843                       		addq.w	#4,d3
0001C7F6 51CA FFDE                  		dbf	d2,loc_1C188
0001C7FA 4E75                       		rts	
0001C7FC                            ; ===========================================================================
0001C7FC                            
0001C7FC                            loc_1C1AE:
0001C7FC 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001C800 6A00 0000                  		bpl.w	locret_1C1EA
0001C804 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001C80A 43F9 0000 0000             		lea	(Art_MzTorch).l,a1 ; load torch	patterns
0001C810 7000                       		moveq	#0,d0
0001C812 1038 F7B6                  		move.b	($FFFFF7B6).w,d0
0001C816 5238 F7B6                  		addq.b	#1,($FFFFF7B6).w
0001C81A 0238 0003 F7B6             		andi.b	#3,($FFFFF7B6).w
0001C820 C0FC 00C0                  		mulu.w	#$C0,d0
0001C824 D2C0                       		adda.w	d0,a1
0001C826 23FC 5E40 0001 00C0 0004   		move.l	#$5E400001,($C00004).l
0001C830 323C 0005                  		move.w	#5,d1
0001C834 6000 0000                  		bra.w	LoadTiles
0001C838                            ; ===========================================================================
0001C838                            
0001C838                            locret_1C1EA:
0001C838 4E75                       		rts	
0001C83A                            ; ===========================================================================
0001C83A                            ; ---------------------------------------------------------------------------
0001C83A                            ; Animated pattern routine - Scrap Brain
0001C83A                            ; ---------------------------------------------------------------------------
0001C83A                            
0001C83A                            AniArt_SBZ:				; XREF: AniArt_Index
0001C83A 4A38 F7B4                  		tst.b	($FFFFF7B4).w
0001C83E 6700                       		beq.s	loc_1C1F8
0001C840 5338 F7B4                  		subq.b	#1,($FFFFF7B4).w
0001C844 6000                       		bra.s	loc_1C250
0001C846                            ; ===========================================================================
0001C846                            
0001C846                            loc_1C1F8:
0001C846 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001C84A 6A00                       		bpl.s	loc_1C250
0001C84C 11FC 0007 F7B1             		move.b	#7,($FFFFF7B1).w
0001C852 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
0001C858 23FC 4900 0002 00C0 0004   		move.l	#$49000002,($C00004).l
0001C862 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C866 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001C86A 0240 0007                  		andi.w	#7,d0
0001C86E 6700                       		beq.s	loc_1C234
0001C870 5340                       		subq.w	#1,d0
0001C872 C0FC 0180                  		mulu.w	#$180,d0
0001C876 43F1 0000                  		lea	(a1,d0.w),a1
0001C87A 323C 000B                  		move.w	#$B,d1
0001C87E 6000 0000                  		bra.w	LoadTiles
0001C882                            ; ===========================================================================
0001C882                            
0001C882                            loc_1C234:
0001C882 11FC 00B4 F7B4             		move.b	#$B4,($FFFFF7B4).w
0001C888                            
0001C888                            loc_1C23A:
0001C888 323C 0005                  		move.w	#5,d1
0001C88C 6100 0000                  		bsr.w	LoadTiles
0001C890 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001C896 323C 0005                  		move.w	#5,d1
0001C89A 6000 0000                  		bra.w	LoadTiles
0001C89E                            ; ===========================================================================
0001C89E                            
0001C89E                            loc_1C250:
0001C89E 4A38 F7B5                  		tst.b	($FFFFF7B5).w
0001C8A2 6700                       		beq.s	loc_1C25C
0001C8A4 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001C8A8 6000                       		bra.s	locret_1C2A0
0001C8AA                            ; ===========================================================================
0001C8AA                            
0001C8AA                            loc_1C25C:
0001C8AA 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001C8AE 6A00                       		bpl.s	locret_1C2A0
0001C8B0 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001C8B6 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001C8BC 23FC 4A80 0002 00C0 0004   		move.l	#$4A800002,($C00004).l
0001C8C6 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001C8CA 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001C8CE 0240 0007                  		andi.w	#7,d0
0001C8D2 6700                       		beq.s	loc_1C298
0001C8D4 5340                       		subq.w	#1,d0
0001C8D6 C0FC 0180                  		mulu.w	#$180,d0
0001C8DA 43F1 0000                  		lea	(a1,d0.w),a1
0001C8DE 323C 000B                  		move.w	#$B,d1
0001C8E2 6000 0000                  		bra.w	LoadTiles
0001C8E6                            ; ===========================================================================
0001C8E6                            
0001C8E6                            loc_1C298:
0001C8E6 11FC 0078 F7B5             		move.b	#$78,($FFFFF7B5).w
0001C8EC 609A                       		bra.s	loc_1C23A
0001C8EE                            ; ===========================================================================
0001C8EE                            
0001C8EE                            locret_1C2A0:
0001C8EE 4E75                       		rts	
0001C8F0                            ; ===========================================================================
0001C8F0                            ; ---------------------------------------------------------------------------
0001C8F0                            ; Animated pattern routine - ending sequence
0001C8F0                            ; ---------------------------------------------------------------------------
0001C8F0                            
0001C8F0                            AniArt_Ending:				; XREF: AniArt_Index
0001C8F0 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001C8F4 6A00                       		bpl.s	loc_1C2F4
0001C8F6 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001C8FC 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001C902 45F8 9400                  		lea	($FFFF9400).w,a2
0001C906 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001C90A 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001C90E 0240 0001                  		andi.w	#1,d0
0001C912 6700                       		beq.s	loc_1C2CE
0001C914 43E9 0200                  		lea	$200(a1),a1
0001C918 45EA 0200                  		lea	$200(a2),a2
0001C91C                            
0001C91C                            loc_1C2CE:
0001C91C 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001C926 323C 000F                  		move.w	#$F,d1
0001C92A 6100 0000                  		bsr.w	LoadTiles
0001C92E 224A                       		movea.l	a2,a1
0001C930 23FC 7200 0001 00C0 0004   		move.l	#$72000001,($C00004).l
0001C93A 323C 000F                  		move.w	#$F,d1
0001C93E 6000 0000                  		bra.w	LoadTiles
0001C942                            ; ===========================================================================
0001C942                            
0001C942                            loc_1C2F4:
0001C942 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001C946 6A00                       		bpl.s	loc_1C33C
0001C948 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001C94E 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001C952 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001C956 0240 0007                  		andi.w	#7,d0
0001C95A 103B 0000                  		move.b	byte_1C334(pc,d0.w),d0
0001C95E EF48                       		lsl.w	#7,d0
0001C960 3200                       		move.w	d0,d1
0001C962 D040                       		add.w	d0,d0
0001C964 D041                       		add.w	d1,d0
0001C966 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001C970 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001C976 43F1 0000                  		lea	(a1,d0.w),a1
0001C97A 323C 000B                  		move.w	#$B,d1
0001C97E 6000 0000                  		bra.w	LoadTiles
0001C982                            ; ===========================================================================
0001C982 0000 0001 0202 0201        byte_1C334:	dc.b 0,	0, 0, 1, 2, 2, 2, 1
0001C98A                            ; ===========================================================================
0001C98A                            
0001C98A                            loc_1C33C:
0001C98A 5338 F7B9                  		subq.b	#1,($FFFFF7B9).w
0001C98E 6A00                       		bpl.s	loc_1C37A
0001C990 11FC 000E F7B9             		move.b	#$E,($FFFFF7B9).w
0001C996 1038 F7B8                  		move.b	($FFFFF7B8).w,d0
0001C99A 5238 F7B8                  		addq.b	#1,($FFFFF7B8).w
0001C99E 0240 0003                  		andi.w	#3,d0
0001C9A2 103B 0000                  		move.b	byte_1C376(pc,d0.w),d0
0001C9A6 E148                       		lsl.w	#8,d0
0001C9A8 D040                       		add.w	d0,d0
0001C9AA 23FC 7000 0001 00C0 0004   		move.l	#$70000001,($C00004).l
0001C9B4 43F8 9800                  		lea	($FFFF9800).w,a1 ; load	special	flower patterns	(from RAM)
0001C9B8 43F1 0000                  		lea	(a1,d0.w),a1
0001C9BC 323C 000F                  		move.w	#$F,d1
0001C9C0 6000 0000                  		bra.w	LoadTiles
0001C9C4                            ; ===========================================================================
0001C9C4 0001 0201                  byte_1C376:	dc.b 0,	1, 2, 1
0001C9C8                            ; ===========================================================================
0001C9C8                            
0001C9C8                            loc_1C37A:
0001C9C8 5338 F7BB                  		subq.b	#1,($FFFFF7BB).w
0001C9CC 6A00                       		bpl.s	locret_1C3B4
0001C9CE 11FC 000B F7BB             		move.b	#$B,($FFFFF7BB).w
0001C9D4 1038 F7BA                  		move.b	($FFFFF7BA).w,d0
0001C9D8 5238 F7BA                  		addq.b	#1,($FFFFF7BA).w
0001C9DC 0240 0003                  		andi.w	#3,d0
0001C9E0 103B 00E2                  		move.b	byte_1C376(pc,d0.w),d0
0001C9E4 E148                       		lsl.w	#8,d0
0001C9E6 D040                       		add.w	d0,d0
0001C9E8 23FC 6800 0001 00C0 0004   		move.l	#$68000001,($C00004).l
0001C9F2 43F8 9E00                  		lea	($FFFF9E00).w,a1 ; load	special	flower patterns	(from RAM)
0001C9F6 43F1 0000                  		lea	(a1,d0.w),a1
0001C9FA 323C 000F                  		move.w	#$F,d1
0001C9FE 6000 0000                  		bra.w	LoadTiles
0001CA02                            ; ===========================================================================
0001CA02                            
0001CA02                            locret_1C3B4:
0001CA02 4E75                       		rts	
0001CA04                            ; ===========================================================================
0001CA04                            
0001CA04                            AniArt_none:				; XREF: AniArt_Index
0001CA04 4E75                       		rts	
0001CA06                            
0001CA06                            ; ---------------------------------------------------------------------------
0001CA06                            ; Subroutine to	load (d1 - 1) 8x8 tiles
0001CA06                            ; ---------------------------------------------------------------------------
0001CA06                            
0001CA06                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CA06                            
0001CA06                            
0001CA06                            LoadTiles:
0001CA06 2C99                       		move.l	(a1)+,(a6)
0001CA08 2C99                       		move.l	(a1)+,(a6)
0001CA0A 2C99                       		move.l	(a1)+,(a6)
0001CA0C 2C99                       		move.l	(a1)+,(a6)
0001CA0E 2C99                       		move.l	(a1)+,(a6)
0001CA10 2C99                       		move.l	(a1)+,(a6)
0001CA12 2C99                       		move.l	(a1)+,(a6)
0001CA14 2C99                       		move.l	(a1)+,(a6)
0001CA16 51C9 FFEE                  		dbf	d1,LoadTiles
0001CA1A 4E75                       		rts	
0001CA1C                            ; End of function LoadTiles
0001CA1C                            
0001CA1C                            ; ===========================================================================
0001CA1C                            ; ---------------------------------------------------------------------------
0001CA1C                            ; Animated pattern routine - more Marble Zone
0001CA1C                            ; ---------------------------------------------------------------------------
0001CA1C 0000 0000                  AniArt_MZextra:	dc.w loc_1C3EE-AniArt_MZextra, loc_1C3FA-AniArt_MZextra
0001CA20 0000 0000                  		dc.w loc_1C410-AniArt_MZextra, loc_1C41E-AniArt_MZextra
0001CA24 0000 0000                  		dc.w loc_1C434-AniArt_MZextra, loc_1C442-AniArt_MZextra
0001CA28 0000 0000                  		dc.w loc_1C458-AniArt_MZextra, loc_1C466-AniArt_MZextra
0001CA2C 0000 0000                  		dc.w loc_1C47C-AniArt_MZextra, loc_1C48A-AniArt_MZextra
0001CA30 0000 0000                  		dc.w loc_1C4A0-AniArt_MZextra, loc_1C4AE-AniArt_MZextra
0001CA34 0000 0000                  		dc.w loc_1C4C4-AniArt_MZextra, loc_1C4D2-AniArt_MZextra
0001CA38 0000 0000                  		dc.w loc_1C4E8-AniArt_MZextra, loc_1C4FA-AniArt_MZextra
0001CA3C                            ; ===========================================================================
0001CA3C                            
0001CA3C                            loc_1C3EE:				; XREF: AniArt_MZextra
0001CA3C 2C91                       		move.l	(a1),(a6)
0001CA3E 43E9 0010                  		lea	$10(a1),a1
0001CA42 51C9 FFF8                  		dbf	d1,loc_1C3EE
0001CA46 4E75                       		rts	
0001CA48                            ; ===========================================================================
0001CA48                            
0001CA48                            loc_1C3FA:				; XREF: AniArt_MZextra
0001CA48 2029 0002                  		move.l	2(a1),d0
0001CA4C 1029 0001                  		move.b	1(a1),d0
0001CA50 E098                       		ror.l	#8,d0
0001CA52 2C80                       		move.l	d0,(a6)
0001CA54 43E9 0010                  		lea	$10(a1),a1
0001CA58 51C9 FFEE                  		dbf	d1,loc_1C3FA
0001CA5C 4E75                       		rts	
0001CA5E                            ; ===========================================================================
0001CA5E                            
0001CA5E                            loc_1C410:				; XREF: AniArt_MZextra
0001CA5E 2CA9 0002                  		move.l	2(a1),(a6)
0001CA62 43E9 0010                  		lea	$10(a1),a1
0001CA66 51C9 FFF6                  		dbf	d1,loc_1C410
0001CA6A 4E75                       		rts	
0001CA6C                            ; ===========================================================================
0001CA6C                            
0001CA6C                            loc_1C41E:				; XREF: AniArt_MZextra
0001CA6C 2029 0004                  		move.l	4(a1),d0
0001CA70 1029 0003                  		move.b	3(a1),d0
0001CA74 E098                       		ror.l	#8,d0
0001CA76 2C80                       		move.l	d0,(a6)
0001CA78 43E9 0010                  		lea	$10(a1),a1
0001CA7C 51C9 FFEE                  		dbf	d1,loc_1C41E
0001CA80 4E75                       		rts	
0001CA82                            ; ===========================================================================
0001CA82                            
0001CA82                            loc_1C434:				; XREF: AniArt_MZextra
0001CA82 2CA9 0004                  		move.l	4(a1),(a6)
0001CA86 43E9 0010                  		lea	$10(a1),a1
0001CA8A 51C9 FFF6                  		dbf	d1,loc_1C434
0001CA8E 4E75                       		rts	
0001CA90                            ; ===========================================================================
0001CA90                            
0001CA90                            loc_1C442:				; XREF: AniArt_MZextra
0001CA90 2029 0006                  		move.l	6(a1),d0
0001CA94 1029 0005                  		move.b	5(a1),d0
0001CA98 E098                       		ror.l	#8,d0
0001CA9A 2C80                       		move.l	d0,(a6)
0001CA9C 43E9 0010                  		lea	$10(a1),a1
0001CAA0 51C9 FFEE                  		dbf	d1,loc_1C442
0001CAA4 4E75                       		rts	
0001CAA6                            ; ===========================================================================
0001CAA6                            
0001CAA6                            loc_1C458:				; XREF: AniArt_MZextra
0001CAA6 2CA9 0006                  		move.l	6(a1),(a6)
0001CAAA 43E9 0010                  		lea	$10(a1),a1
0001CAAE 51C9 FFF6                  		dbf	d1,loc_1C458
0001CAB2 4E75                       		rts	
0001CAB4                            ; ===========================================================================
0001CAB4                            
0001CAB4                            loc_1C466:				; XREF: AniArt_MZextra
0001CAB4 2029 0008                  		move.l	8(a1),d0
0001CAB8 1029 0007                  		move.b	7(a1),d0
0001CABC E098                       		ror.l	#8,d0
0001CABE 2C80                       		move.l	d0,(a6)
0001CAC0 43E9 0010                  		lea	$10(a1),a1
0001CAC4 51C9 FFEE                  		dbf	d1,loc_1C466
0001CAC8 4E75                       		rts	
0001CACA                            ; ===========================================================================
0001CACA                            
0001CACA                            loc_1C47C:				; XREF: AniArt_MZextra
0001CACA 2CA9 0008                  		move.l	8(a1),(a6)
0001CACE 43E9 0010                  		lea	$10(a1),a1
0001CAD2 51C9 FFF6                  		dbf	d1,loc_1C47C
0001CAD6 4E75                       		rts	
0001CAD8                            ; ===========================================================================
0001CAD8                            
0001CAD8                            loc_1C48A:				; XREF: AniArt_MZextra
0001CAD8 2029 000A                  		move.l	$A(a1),d0
0001CADC 1029 0009                  		move.b	9(a1),d0
0001CAE0 E098                       		ror.l	#8,d0
0001CAE2 2C80                       		move.l	d0,(a6)
0001CAE4 43E9 0010                  		lea	$10(a1),a1
0001CAE8 51C9 FFEE                  		dbf	d1,loc_1C48A
0001CAEC 4E75                       		rts	
0001CAEE                            ; ===========================================================================
0001CAEE                            
0001CAEE                            loc_1C4A0:				; XREF: AniArt_MZextra
0001CAEE 2CA9 000A                  		move.l	$A(a1),(a6)
0001CAF2 43E9 0010                  		lea	$10(a1),a1
0001CAF6 51C9 FFF6                  		dbf	d1,loc_1C4A0
0001CAFA 4E75                       		rts	
0001CAFC                            ; ===========================================================================
0001CAFC                            
0001CAFC                            loc_1C4AE:				; XREF: AniArt_MZextra
0001CAFC 2029 000C                  		move.l	$C(a1),d0
0001CB00 1029 000B                  		move.b	$B(a1),d0
0001CB04 E098                       		ror.l	#8,d0
0001CB06 2C80                       		move.l	d0,(a6)
0001CB08 43E9 0010                  		lea	$10(a1),a1
0001CB0C 51C9 FFEE                  		dbf	d1,loc_1C4AE
0001CB10 4E75                       		rts	
0001CB12                            ; ===========================================================================
0001CB12                            
0001CB12                            loc_1C4C4:				; XREF: AniArt_MZextra
0001CB12 2CA9 000C                  		move.l	$C(a1),(a6)
0001CB16 43E9 0010                  		lea	$10(a1),a1
0001CB1A 51C9 FFF6                  		dbf	d1,loc_1C4C4
0001CB1E 4E75                       		rts	
0001CB20                            ; ===========================================================================
0001CB20                            
0001CB20                            loc_1C4D2:				; XREF: AniArt_MZextra
0001CB20 2029 000C                  		move.l	$C(a1),d0
0001CB24 E198                       		rol.l	#8,d0
0001CB26 1011                       		move.b	0(a1),d0
0001CB28 2C80                       		move.l	d0,(a6)
0001CB2A 43E9 0010                  		lea	$10(a1),a1
0001CB2E 51C9 FFF0                  		dbf	d1,loc_1C4D2
0001CB32 4E75                       		rts	
0001CB34                            ; ===========================================================================
0001CB34                            
0001CB34                            loc_1C4E8:				; XREF: AniArt_MZextra
0001CB34 3CA9 000E                  		move.w	$E(a1),(a6)
0001CB38 3C91                       		move.w	0(a1),(a6)
0001CB3A 43E9 0010                  		lea	$10(a1),a1
0001CB3E 51C9 FFF4                  		dbf	d1,loc_1C4E8
0001CB42 4E75                       		rts	
0001CB44                            ; ===========================================================================
0001CB44                            
0001CB44                            loc_1C4FA:				; XREF: AniArt_MZextra
0001CB44 2011                       		move.l	0(a1),d0
0001CB46 1029 000F                  		move.b	$F(a1),d0
0001CB4A E098                       		ror.l	#8,d0
0001CB4C 2C80                       		move.l	d0,(a6)
0001CB4E 43E9 0010                  		lea	$10(a1),a1
0001CB52 51C9 FFF0                  		dbf	d1,loc_1C4FA
0001CB56 4E75                       		rts	
0001CB58                            
0001CB58                            ; ---------------------------------------------------------------------------
0001CB58                            ; Animated pattern routine - giant ring
0001CB58                            ; ---------------------------------------------------------------------------
0001CB58                            
0001CB58                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CB58                            
0001CB58                            
0001CB58                            AniArt_GiantRing:			; XREF: AniArt_Load
0001CB58 4A78 F7BE                  		tst.w	($FFFFF7BE).w
0001CB5C 6600                       		bne.s	loc_1C518
0001CB5E 4E75                       		rts	
0001CB60                            ; ===========================================================================
0001CB60                            
0001CB60                            loc_1C518:
0001CB60 0478 01C0 F7BE             		subi.w	#$1C0,($FFFFF7BE).w
0001CB66 43F9 0000 0000             		lea	(Art_BigRing).l,a1 ; load giant	ring patterns
0001CB6C 7000                       		moveq	#0,d0
0001CB6E 3038 F7BE                  		move.w	($FFFFF7BE).w,d0
0001CB72 43F1 0000                  		lea	(a1,d0.w),a1
0001CB76 0640 8000                  		addi.w	#$8000,d0
0001CB7A E588                       		lsl.l	#2,d0
0001CB7C E448                       		lsr.w	#2,d0
0001CB7E 0040 4000                  		ori.w	#$4000,d0
0001CB82 4840                       		swap	d0
0001CB84 2D40 0004                  		move.l	d0,4(a6)
0001CB88 323C 000D                  		move.w	#$D,d1
0001CB8C 6000 FE78                  		bra.w	LoadTiles
0001CB90                            ; End of function AniArt_GiantRing
0001CB90                            
0001CB90                            ; ===========================================================================
0001CB90                            ; ---------------------------------------------------------------------------
0001CB90                            ; Object 21 - SCORE, TIME, RINGS
0001CB90                            ; ---------------------------------------------------------------------------
0001CB90                            
0001CB90                            Obj21:					; XREF: Obj_Index
0001CB90 7000                       		moveq	#0,d0
0001CB92 1028 0024                  		move.b	$24(a0),d0
0001CB96 323B 0000                  		move.w	Obj21_Index(pc,d0.w),d1
0001CB9A 4EFB 1000                  		jmp	Obj21_Index(pc,d1.w)
0001CB9E                            ; ===========================================================================
0001CB9E 0000                       Obj21_Index:	dc.w Obj21_Main-Obj21_Index
0001CBA0 0000                       		dc.w Obj21_Flash-Obj21_Index
0001CBA2                            ; ===========================================================================
0001CBA2                            
0001CBA2                            Obj21_Main:				; XREF: Obj21_Main
0001CBA2 5428 0024                  		addq.b	#2,$24(a0)
0001CBA6 317C 0090 0008             		move.w	#$90,8(a0)
0001CBAC 317C 0108 000A             		move.w	#$108,$A(a0)
0001CBB2 217C 0000 0000 0004        		move.l	#Map_obj21,4(a0)
0001CBBA 317C 06CA 0002             		move.w	#$6CA,2(a0)
0001CBC0 117C 0000 0001             		move.b	#0,1(a0)
0001CBC6 117C 0000 0018             		move.b	#0,$18(a0)
0001CBCC                            
0001CBCC                            Obj21_Flash:				; XREF: Obj21_Main
0001CBCC 4A78 FE20                  		tst.w	($FFFFFE20).w	; do you have any rings?
0001CBD0 6700                       		beq.s	Obj21_Flash2	; if not, branch
0001CBD2 4228 001A                  		clr.b	$1A(a0)		; make all counters yellow
0001CBD6 4EF9 0000 DBA8             		jmp	DisplaySprite
0001CBDC                            ; ===========================================================================
0001CBDC                            
0001CBDC                            Obj21_Flash2:
0001CBDC 7000                       		moveq	#0,d0
0001CBDE 0838 0003 FE05             		btst	#3,($FFFFFE05).w
0001CBE4 6600                       		bne.s	Obj21_Display
0001CBE6 5240                       		addq.w	#1,d0		; make ring counter flash red
0001CBE8 0C38 0009 FE23             		cmpi.b	#9,($FFFFFE23).w ; have	9 minutes elapsed?
0001CBEE 6600                       		bne.s	Obj21_Display	; if not, branch
0001CBF0 5440                       		addq.w	#2,d0		; make time counter flash red
0001CBF2                            
0001CBF2                            Obj21_Display:
0001CBF2 1140 001A                  		move.b	d0,$1A(a0)
0001CBF6 4EF9 0000 DBA8             		jmp	DisplaySprite
0001CBFC                            ; ===========================================================================
0001CBFC                            ; ---------------------------------------------------------------------------
0001CBFC                            ; Sprite mappings - SCORE, TIME, RINGS
0001CBFC                            ; ---------------------------------------------------------------------------
0001CBFC                            Map_obj21:
0001CBFC                            	include "_maps\obj21.asm"
0001CBFC                            ; ---------------------------------------------------------------------------
0001CBFC                            ; Sprite mappings - SCORE, TIME, RINGS
0001CBFC                            ; ---------------------------------------------------------------------------
0001CBFC 0000 0000                  		dc.w byte_1C5BC-Map_obj21, byte_1C5F0-Map_obj21
0001CC00 0000 0000                  		dc.w byte_1C624-Map_obj21, byte_1C658-Map_obj21
0001CC04 0A                         byte_1C5BC:	dc.b $A
0001CC05 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001CC0A 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001CC0F 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001CC14 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001CC19 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001CC1E A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001CC23 A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001CC28 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001CC2D 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001CC32 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001CC37 00                         		dc.b 0
0001CC38 0A                         byte_1C5F0:	dc.b $A
0001CC39 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001CC3E 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001CC43 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001CC48 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001CC4D 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001CC52 A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001CC57 A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001CC5C A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001CC61 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001CC66 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001CC6B 00                         		dc.b 0
0001CC6C 0A                         byte_1C624:	dc.b $A
0001CC6D 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001CC72 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001CC77 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001CC7C 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001CC81 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001CC86 A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001CC8B A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001CC90 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001CC95 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001CC9A 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001CC9F 00                         		dc.b 0
0001CCA0 0A                         byte_1C658:	dc.b $A
0001CCA1 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001CCA6 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001CCAB 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001CCB0 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001CCB5 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001CCBA A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001CCBF A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001CCC4 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001CCC9 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001CCCE 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001CCD4 00                         		even
0001CCD4 00                         		even
0001CCD4                            
0001CCD4                            ; ---------------------------------------------------------------------------
0001CCD4                            ; Add points subroutine
0001CCD4                            ; ---------------------------------------------------------------------------
0001CCD4                            
0001CCD4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CCD4                            
0001CCD4                            
0001CCD4                            AddPoints:
0001CCD4 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; set score counter to	update
0001CCDA 45F8 FFC0                  		lea	($FFFFFFC0).w,a2
0001CCDE 47F8 FE26                  		lea	($FFFFFE26).w,a3
0001CCE2 D193                       		add.l	d0,(a3)		; add d0*10 to the score
0001CCE4 223C 000F 423F             		move.l	#999999,d1
0001CCEA B293                       		cmp.l	(a3),d1		; is #999999 higher than the score?
0001CCEC 6200 0000                  		bhi.w	loc_1C6AC	; if yes, branch
0001CCF0 2681                       		move.l	d1,(a3)		; reset	score to #999999
0001CCF2 2481                       		move.l	d1,(a2)
0001CCF4                            
0001CCF4                            loc_1C6AC:
0001CCF4 2013                       		move.l	(a3),d0
0001CCF6 B092                       		cmp.l	(a2),d0
0001CCF8 6500 0000                  		bcs.w	locret_1C6B6
0001CCFC 2480                       		move.l	d0,(a2)
0001CCFE                            
0001CCFE                            locret_1C6B6:
0001CCFE 4E75                       		rts	
0001CD00                            ; End of function AddPoints
0001CD00                            
0001CD00                            ; ---------------------------------------------------------------------------
0001CD00                            ; Subroutine to	update the HUD
0001CD00                            ; ---------------------------------------------------------------------------
0001CD00                            
0001CD00                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CD00                            
0001CD00                            
0001CD00                            HudUpdate:
0001CD00 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	on?
0001CD04 6600 0000                  		bne.w	HudDebug	; if yes, branch
0001CD08 4A38 FE1F                  		tst.b	($FFFFFE1F).w	; does the score need updating?
0001CD0C 6700                       		beq.s	Hud_ChkRings	; if not, branch
0001CD0E 4238 FE1F                  		clr.b	($FFFFFE1F).w
0001CD12 203C 5C80 0003             		move.l	#$5C800003,d0	; set VRAM address
0001CD18 2238 FE26                  		move.l	($FFFFFE26).w,d1 ; load	score
0001CD1C 6100 0000                  		bsr.w	Hud_Score
0001CD20                            
0001CD20                            Hud_ChkRings:
0001CD20 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001CD24 6700                       		beq.s	Hud_ChkTime	; if not, branch
0001CD26 6A00                       		bpl.s	loc_1C6E4
0001CD28 6100 0000                  		bsr.w	Hud_LoadZero
0001CD2C                            
0001CD2C                            loc_1C6E4:
0001CD2C 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001CD30 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001CD36 7200                       		moveq	#0,d1
0001CD38 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001CD3C 6100 0000                  		bsr.w	Hud_Rings
0001CD40                            
0001CD40                            Hud_ChkTime:
0001CD40 4A38 FE1E                  		tst.b	($FFFFFE1E).w	; does the time	need updating?
0001CD44 6700                       		beq.s	Hud_ChkLives	; if not, branch
0001CD46 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001CD4A 6600                       		bne.s	Hud_ChkLives	; if yes, branch
0001CD4C 43F8 FE22                  		lea	($FFFFFE22).w,a1
0001CD50 0C99 0009 3B3B             		cmpi.l	#$93B3B,(a1)+	; is the time 9.59?
0001CD56 6700                       		beq.s	TimeOver	; if yes, branch
0001CD58 5221                       		addq.b	#1,-(a1)
0001CD5A 0C11 003C                  		cmpi.b	#60,(a1)
0001CD5E 6500                       		bcs.s	Hud_ChkLives
0001CD60 12BC 0000                  		move.b	#0,(a1)
0001CD64 5221                       		addq.b	#1,-(a1)
0001CD66 0C11 003C                  		cmpi.b	#60,(a1)
0001CD6A 6500                       		bcs.s	loc_1C734
0001CD6C 12BC 0000                  		move.b	#0,(a1)
0001CD70 5221                       		addq.b	#1,-(a1)
0001CD72 0C11 0009                  		cmpi.b	#9,(a1)
0001CD76 6500                       		bcs.s	loc_1C734
0001CD78 12BC 0009                  		move.b	#9,(a1)
0001CD7C                            
0001CD7C                            loc_1C734:
0001CD7C 203C 5E40 0003             		move.l	#$5E400003,d0
0001CD82 7200                       		moveq	#0,d1
0001CD84 1238 FE23                  		move.b	($FFFFFE23).w,d1 ; load	minutes
0001CD88 6100 0000                  		bsr.w	Hud_Mins
0001CD8C 203C 5EC0 0003             		move.l	#$5EC00003,d0
0001CD92 7200                       		moveq	#0,d1
0001CD94 1238 FE24                  		move.b	($FFFFFE24).w,d1 ; load	seconds
0001CD98 6100 0000                  		bsr.w	Hud_Secs
0001CD9C                            
0001CD9C                            Hud_ChkLives:
0001CD9C 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001CDA0 6700                       		beq.s	Hud_ChkBonus	; if not, branch
0001CDA2 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001CDA6 6100 0000                  		bsr.w	Hud_Lives
0001CDAA                            
0001CDAA                            Hud_ChkBonus:
0001CDAA 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; do time/ring bonus counters need updating?
0001CDAE 6700                       		beq.s	Hud_End		; if not, branch
0001CDB0 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001CDB4 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l
0001CDBE 7200                       		moveq	#0,d1
0001CDC0 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001CDC4 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001CDC8 7200                       		moveq	#0,d1
0001CDCA 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001CDCE 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001CDD2                            
0001CDD2                            Hud_End:
0001CDD2 4E75                       		rts	
0001CDD4                            ; ===========================================================================
0001CDD4                            
0001CDD4                            TimeOver:				; XREF: Hud_ChkTime
0001CDD4 4238 FE1E                  		clr.b	($FFFFFE1E).w
0001CDD8 41F8 D000                  		lea	($FFFFD000).w,a0
0001CDDC 2448                       		movea.l	a0,a2
0001CDDE 6100 E908                  		bsr.w	KillSonic
0001CDE2 11FC 0001 FE1A             		move.b	#1,($FFFFFE1A).w
0001CDE8 4E75                       		rts	
0001CDEA                            ; ===========================================================================
0001CDEA                            
0001CDEA                            HudDebug:				; XREF: HudUpdate
0001CDEA 6100 0000                  		bsr.w	HudDb_XY
0001CDEE 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001CDF2 6700                       		beq.s	HudDb_ObjCount	; if not, branch
0001CDF4 6A00                       		bpl.s	HudDb_Rings
0001CDF6 6100 0000                  		bsr.w	Hud_LoadZero
0001CDFA                            
0001CDFA                            HudDb_Rings:
0001CDFA 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001CDFE 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001CE04 7200                       		moveq	#0,d1
0001CE06 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001CE0A 6100 0000                  		bsr.w	Hud_Rings
0001CE0E                            
0001CE0E                            HudDb_ObjCount:
0001CE0E 203C 5EC0 0003             		move.l	#$5EC00003,d0	; set VRAM address
0001CE14 7200                       		moveq	#0,d1
0001CE16 1238 F62C                  		move.b	($FFFFF62C).w,d1 ; load	"number	of objects" counter
0001CE1A 6100 0000                  		bsr.w	Hud_Secs
0001CE1E 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001CE22 6700                       		beq.s	HudDb_ChkBonus	; if not, branch
0001CE24 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001CE28 6100 0000                  		bsr.w	Hud_Lives
0001CE2C                            
0001CE2C                            HudDb_ChkBonus:
0001CE2C 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; does the ring/time bonus counter need	updating?
0001CE30 6700                       		beq.s	HudDb_End	; if not, branch
0001CE32 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001CE36 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l ; set VRAM address
0001CE40 7200                       		moveq	#0,d1
0001CE42 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001CE46 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001CE4A 7200                       		moveq	#0,d1
0001CE4C 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001CE50 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001CE54                            
0001CE54                            HudDb_End:
0001CE54 4E75                       		rts	
0001CE56                            ; End of function HudUpdate
0001CE56                            
0001CE56                            ; ---------------------------------------------------------------------------
0001CE56                            ; Subroutine to	load "0" on the	HUD
0001CE56                            ; ---------------------------------------------------------------------------
0001CE56                            
0001CE56                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CE56                            
0001CE56                            
0001CE56                            Hud_LoadZero:				; XREF: HudUpdate
0001CE56 23FC 5F40 0003 00C0 0004   		move.l	#$5F400003,($C00004).l
0001CE60 45FA 0000                  		lea	Hud_TilesZero(pc),a2
0001CE64 343C 0002                  		move.w	#2,d2
0001CE68 6000                       		bra.s	loc_1C83E
0001CE6A                            ; End of function Hud_LoadZero
0001CE6A                            
0001CE6A                            ; ---------------------------------------------------------------------------
0001CE6A                            ; Subroutine to	load uncompressed HUD patterns ("E", "0", colon)
0001CE6A                            ; ---------------------------------------------------------------------------
0001CE6A                            
0001CE6A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CE6A                            
0001CE6A                            
0001CE6A                            Hud_Base:				; XREF: Level; SS_EndLoop; EndingSequence
0001CE6A 4DF9 00C0 0000             		lea	($C00000).l,a6
0001CE70 6100 0000                  		bsr.w	Hud_Lives
0001CE74 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l
0001CE7E 45FA 0000                  		lea	Hud_TilesBase(pc),a2
0001CE82 343C 000E                  		move.w	#$E,d2
0001CE86                            
0001CE86                            loc_1C83E:				; XREF: Hud_LoadZero
0001CE86 43FA 0000                  		lea	Art_Hud(pc),a1
0001CE8A                            
0001CE8A                            loc_1C842:
0001CE8A 323C 000F                  		move.w	#$F,d1
0001CE8E 101A                       		move.b	(a2)+,d0
0001CE90 6B00                       		bmi.s	loc_1C85E
0001CE92 4880                       		ext.w	d0
0001CE94 EB48                       		lsl.w	#5,d0
0001CE96 47F1 0000                  		lea	(a1,d0.w),a3
0001CE9A                            
0001CE9A                            loc_1C852:
0001CE9A 2C9B                       		move.l	(a3)+,(a6)
0001CE9C 51C9 FFFC                  		dbf	d1,loc_1C852
0001CEA0                            
0001CEA0                            loc_1C858:
0001CEA0 51CA FFE8                  		dbf	d2,loc_1C842
0001CEA4                            
0001CEA4 4E75                       		rts	
0001CEA6                            ; ===========================================================================
0001CEA6                            
0001CEA6                            loc_1C85E:
0001CEA6 2CBC 0000 0000             		move.l	#0,(a6)
0001CEAC 51C9 FFF8                  		dbf	d1,loc_1C85E
0001CEB0                            
0001CEB0 60EE                       		bra.s	loc_1C858
0001CEB2                            ; End of function Hud_Base
0001CEB2                            
0001CEB2                            ; ===========================================================================
0001CEB2 16FF FFFF FFFF FF00 0014+  Hud_TilesBase:	dc.b $16, $FF, $FF, $FF, $FF, $FF, $FF,	0, 0, $14, 0, 0
0001CEBE FFFF 0000                  Hud_TilesZero:	dc.b $FF, $FF, 0, 0
0001CEC2                            ; ---------------------------------------------------------------------------
0001CEC2                            ; Subroutine to	load debug mode	numbers	patterns
0001CEC2                            ; ---------------------------------------------------------------------------
0001CEC2                            
0001CEC2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CEC2                            
0001CEC2                            
0001CEC2                            HudDb_XY:				; XREF: HudDebug
0001CEC2 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l ; set VRAM address
0001CECC 3238 F700                  		move.w	($FFFFF700).w,d1 ; load	camera x-position
0001CED0 4841                       		swap	d1
0001CED2 3238 D008                  		move.w	($FFFFD008).w,d1 ; load	Sonic's x-position
0001CED6 6100                       		bsr.s	HudDb_XY2
0001CED8 3238 F704                  		move.w	($FFFFF704).w,d1 ; load	camera y-position
0001CEDC 4841                       		swap	d1
0001CEDE 3238 D00C                  		move.w	($FFFFD00C).w,d1 ; load	Sonic's y-position
0001CEE2                            ; End of function HudDb_XY
0001CEE2                            
0001CEE2                            
0001CEE2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CEE2                            
0001CEE2                            
0001CEE2                            HudDb_XY2:
0001CEE2 7C07                       		moveq	#7,d6
0001CEE4 43F9 0000 05F0             		lea	(Art_Text).l,a1
0001CEEA                            
0001CEEA                            HudDb_XYLoop:
0001CEEA E959                       		rol.w	#4,d1
0001CEEC 3401                       		move.w	d1,d2
0001CEEE 0242 000F                  		andi.w	#$F,d2
0001CEF2 0C42 000A                  		cmpi.w	#$A,d2
0001CEF6 6500                       		bcs.s	loc_1C8B2
0001CEF8 5E42                       		addq.w	#7,d2
0001CEFA                            
0001CEFA                            loc_1C8B2:
0001CEFA EB4A                       		lsl.w	#5,d2
0001CEFC 47F1 2000                  		lea	(a1,d2.w),a3
0001CF00 2C9B                       		move.l	(a3)+,(a6)
0001CF02 2C9B                       		move.l	(a3)+,(a6)
0001CF04 2C9B                       		move.l	(a3)+,(a6)
0001CF06 2C9B                       		move.l	(a3)+,(a6)
0001CF08 2C9B                       		move.l	(a3)+,(a6)
0001CF0A 2C9B                       		move.l	(a3)+,(a6)
0001CF0C 2C9B                       		move.l	(a3)+,(a6)
0001CF0E 2C9B                       		move.l	(a3)+,(a6)
0001CF10 4841                       		swap	d1
0001CF12 51CE FFD6                  		dbf	d6,HudDb_XYLoop	; repeat 7 more	times
0001CF16                            
0001CF16 4E75                       		rts	
0001CF18                            ; End of function HudDb_XY2
0001CF18                            
0001CF18                            ; ---------------------------------------------------------------------------
0001CF18                            ; Subroutine to	load rings numbers patterns
0001CF18                            ; ---------------------------------------------------------------------------
0001CF18                            
0001CF18                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CF18                            
0001CF18                            
0001CF18                            Hud_Rings:				; XREF: HudUpdate
0001CF18 45F9 0000 0000             		lea	(Hud_100).l,a2
0001CF1E 7C02                       		moveq	#2,d6
0001CF20 6000                       		bra.s	Hud_LoadArt
0001CF22                            ; End of function Hud_Rings
0001CF22                            
0001CF22                            ; ---------------------------------------------------------------------------
0001CF22                            ; Subroutine to	load score numbers patterns
0001CF22                            ; ---------------------------------------------------------------------------
0001CF22                            
0001CF22                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CF22                            
0001CF22                            
0001CF22                            Hud_Score:				; XREF: HudUpdate
0001CF22 45F9 0000 0000             		lea	(Hud_100000).l,a2
0001CF28 7C05                       		moveq	#5,d6
0001CF2A                            
0001CF2A                            Hud_LoadArt:
0001CF2A 7800                       		moveq	#0,d4
0001CF2C 43FA 0000                  		lea	Art_Hud(pc),a1
0001CF30                            
0001CF30                            Hud_ScoreLoop:
0001CF30 7400                       		moveq	#0,d2
0001CF32 261A                       		move.l	(a2)+,d3
0001CF34                            
0001CF34                            loc_1C8EC:
0001CF34 9283                       		sub.l	d3,d1
0001CF36 6500                       		bcs.s	loc_1C8F4
0001CF38 5242                       		addq.w	#1,d2
0001CF3A 60F8                       		bra.s	loc_1C8EC
0001CF3C                            ; ===========================================================================
0001CF3C                            
0001CF3C                            loc_1C8F4:
0001CF3C D283                       		add.l	d3,d1
0001CF3E 4A42                       		tst.w	d2
0001CF40 6700                       		beq.s	loc_1C8FE
0001CF42 383C 0001                  		move.w	#1,d4
0001CF46                            
0001CF46                            loc_1C8FE:
0001CF46 4A44                       		tst.w	d4
0001CF48 6700                       		beq.s	loc_1C92C
0001CF4A ED4A                       		lsl.w	#6,d2
0001CF4C 2D40 0004                  		move.l	d0,4(a6)
0001CF50 47F1 2000                  		lea	(a1,d2.w),a3
0001CF54 2C9B                       		move.l	(a3)+,(a6)
0001CF56 2C9B                       		move.l	(a3)+,(a6)
0001CF58 2C9B                       		move.l	(a3)+,(a6)
0001CF5A 2C9B                       		move.l	(a3)+,(a6)
0001CF5C 2C9B                       		move.l	(a3)+,(a6)
0001CF5E 2C9B                       		move.l	(a3)+,(a6)
0001CF60 2C9B                       		move.l	(a3)+,(a6)
0001CF62 2C9B                       		move.l	(a3)+,(a6)
0001CF64 2C9B                       		move.l	(a3)+,(a6)
0001CF66 2C9B                       		move.l	(a3)+,(a6)
0001CF68 2C9B                       		move.l	(a3)+,(a6)
0001CF6A 2C9B                       		move.l	(a3)+,(a6)
0001CF6C 2C9B                       		move.l	(a3)+,(a6)
0001CF6E 2C9B                       		move.l	(a3)+,(a6)
0001CF70 2C9B                       		move.l	(a3)+,(a6)
0001CF72 2C9B                       		move.l	(a3)+,(a6)
0001CF74                            
0001CF74                            loc_1C92C:
0001CF74 0680 0040 0000             		addi.l	#$400000,d0
0001CF7A 51CE FFB4                  		dbf	d6,Hud_ScoreLoop
0001CF7E                            
0001CF7E 4E75                       		rts	
0001CF80                            ; End of function Hud_Score
0001CF80                            
0001CF80                            ; ---------------------------------------------------------------------------
0001CF80                            ; Subroutine to	load countdown numbers on the continue screen
0001CF80                            ; ---------------------------------------------------------------------------
0001CF80                            
0001CF80                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CF80                            
0001CF80                            
0001CF80                            ContScrCounter:				; XREF: ContinueScreen
0001CF80 23FC 5F80 0003 00C0 0004   		move.l	#$5F800003,($C00004).l ; set VRAM address
0001CF8A 4DF9 00C0 0000             		lea	($C00000).l,a6
0001CF90 45F9 0000 0000             		lea	(Hud_10).l,a2
0001CF96 7C01                       		moveq	#1,d6
0001CF98 7800                       		moveq	#0,d4
0001CF9A 43FA 0000                  		lea	Art_Hud(pc),a1 ; load numbers patterns
0001CF9E                            
0001CF9E                            ContScr_Loop:
0001CF9E 7400                       		moveq	#0,d2
0001CFA0 261A                       		move.l	(a2)+,d3
0001CFA2                            
0001CFA2                            loc_1C95A:
0001CFA2 9283                       		sub.l	d3,d1
0001CFA4 6500                       		bcs.s	loc_1C962
0001CFA6 5242                       		addq.w	#1,d2
0001CFA8 60F8                       		bra.s	loc_1C95A
0001CFAA                            ; ===========================================================================
0001CFAA                            
0001CFAA                            loc_1C962:
0001CFAA D283                       		add.l	d3,d1
0001CFAC ED4A                       		lsl.w	#6,d2
0001CFAE 47F1 2000                  		lea	(a1,d2.w),a3
0001CFB2 2C9B                       		move.l	(a3)+,(a6)
0001CFB4 2C9B                       		move.l	(a3)+,(a6)
0001CFB6 2C9B                       		move.l	(a3)+,(a6)
0001CFB8 2C9B                       		move.l	(a3)+,(a6)
0001CFBA 2C9B                       		move.l	(a3)+,(a6)
0001CFBC 2C9B                       		move.l	(a3)+,(a6)
0001CFBE 2C9B                       		move.l	(a3)+,(a6)
0001CFC0 2C9B                       		move.l	(a3)+,(a6)
0001CFC2 2C9B                       		move.l	(a3)+,(a6)
0001CFC4 2C9B                       		move.l	(a3)+,(a6)
0001CFC6 2C9B                       		move.l	(a3)+,(a6)
0001CFC8 2C9B                       		move.l	(a3)+,(a6)
0001CFCA 2C9B                       		move.l	(a3)+,(a6)
0001CFCC 2C9B                       		move.l	(a3)+,(a6)
0001CFCE 2C9B                       		move.l	(a3)+,(a6)
0001CFD0 2C9B                       		move.l	(a3)+,(a6)
0001CFD2 51CE FFCA                  		dbf	d6,ContScr_Loop	; repeat 1 more	time
0001CFD6                            
0001CFD6 4E75                       		rts	
0001CFD8                            ; End of function ContScrCounter
0001CFD8                            
0001CFD8                            ; ===========================================================================
0001CFD8                            ; ---------------------------------------------------------------------------
0001CFD8                            ; HUD counter sizes
0001CFD8                            ; ---------------------------------------------------------------------------
0001CFD8 0001 86A0                  Hud_100000:	dc.l 100000		; XREF: Hud_Score
0001CFDC 0000 2710                  Hud_10000:	dc.l 10000
0001CFE0 0000 03E8                  Hud_1000:	dc.l 1000		; XREF: Hud_TimeRingBonus
0001CFE4 0000 0064                  Hud_100:	dc.l 100		; XREF: Hud_Rings
0001CFE8 0000 000A                  Hud_10:		dc.l 10			; XREF: ContScrCounter; Hud_Secs; Hud_Lives
0001CFEC 0000 0001                  Hud_1:		dc.l 1			; XREF: Hud_Mins
0001CFF0                            
0001CFF0                            ; ---------------------------------------------------------------------------
0001CFF0                            ; Subroutine to	load time numbers patterns
0001CFF0                            ; ---------------------------------------------------------------------------
0001CFF0                            
0001CFF0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CFF0                            
0001CFF0                            
0001CFF0                            Hud_Mins:				; XREF: Hud_ChkTime
0001CFF0 45F9 0001 CFEC             		lea	(Hud_1).l,a2
0001CFF6 7C00                       		moveq	#0,d6
0001CFF8 6000                       		bra.s	loc_1C9BA
0001CFFA                            ; End of function Hud_Mins
0001CFFA                            
0001CFFA                            
0001CFFA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CFFA                            
0001CFFA                            
0001CFFA                            Hud_Secs:				; XREF: Hud_ChkTime
0001CFFA 45F9 0001 CFE8             		lea	(Hud_10).l,a2
0001D000 7C01                       		moveq	#1,d6
0001D002                            
0001D002                            loc_1C9BA:
0001D002 7800                       		moveq	#0,d4
0001D004 43FA 0000                  		lea	Art_Hud(pc),a1
0001D008                            
0001D008                            Hud_TimeLoop:
0001D008 7400                       		moveq	#0,d2
0001D00A 261A                       		move.l	(a2)+,d3
0001D00C                            
0001D00C                            loc_1C9C4:
0001D00C 9283                       		sub.l	d3,d1
0001D00E 6500                       		bcs.s	loc_1C9CC
0001D010 5242                       		addq.w	#1,d2
0001D012 60F8                       		bra.s	loc_1C9C4
0001D014                            ; ===========================================================================
0001D014                            
0001D014                            loc_1C9CC:
0001D014 D283                       		add.l	d3,d1
0001D016 4A42                       		tst.w	d2
0001D018 6700                       		beq.s	loc_1C9D6
0001D01A 383C 0001                  		move.w	#1,d4
0001D01E                            
0001D01E                            loc_1C9D6:
0001D01E ED4A                       		lsl.w	#6,d2
0001D020 2D40 0004                  		move.l	d0,4(a6)
0001D024 47F1 2000                  		lea	(a1,d2.w),a3
0001D028 2C9B                       		move.l	(a3)+,(a6)
0001D02A 2C9B                       		move.l	(a3)+,(a6)
0001D02C 2C9B                       		move.l	(a3)+,(a6)
0001D02E 2C9B                       		move.l	(a3)+,(a6)
0001D030 2C9B                       		move.l	(a3)+,(a6)
0001D032 2C9B                       		move.l	(a3)+,(a6)
0001D034 2C9B                       		move.l	(a3)+,(a6)
0001D036 2C9B                       		move.l	(a3)+,(a6)
0001D038 2C9B                       		move.l	(a3)+,(a6)
0001D03A 2C9B                       		move.l	(a3)+,(a6)
0001D03C 2C9B                       		move.l	(a3)+,(a6)
0001D03E 2C9B                       		move.l	(a3)+,(a6)
0001D040 2C9B                       		move.l	(a3)+,(a6)
0001D042 2C9B                       		move.l	(a3)+,(a6)
0001D044 2C9B                       		move.l	(a3)+,(a6)
0001D046 2C9B                       		move.l	(a3)+,(a6)
0001D048 0680 0040 0000             		addi.l	#$400000,d0
0001D04E 51CE FFB8                  		dbf	d6,Hud_TimeLoop
0001D052                            
0001D052 4E75                       		rts	
0001D054                            ; End of function Hud_Secs
0001D054                            
0001D054                            ; ---------------------------------------------------------------------------
0001D054                            ; Subroutine to	load time/ring bonus numbers patterns
0001D054                            ; ---------------------------------------------------------------------------
0001D054                            
0001D054                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D054                            
0001D054                            
0001D054                            Hud_TimeRingBonus:			; XREF: Hud_ChkBonus
0001D054 45F9 0001 CFE0             		lea	(Hud_1000).l,a2
0001D05A 7C03                       		moveq	#3,d6
0001D05C 7800                       		moveq	#0,d4
0001D05E 43FA 0000                  		lea	Art_Hud(pc),a1
0001D062                            
0001D062                            Hud_BonusLoop:
0001D062 7400                       		moveq	#0,d2
0001D064 261A                       		move.l	(a2)+,d3
0001D066                            
0001D066                            loc_1CA1E:
0001D066 9283                       		sub.l	d3,d1
0001D068 6500                       		bcs.s	loc_1CA26
0001D06A 5242                       		addq.w	#1,d2
0001D06C 60F8                       		bra.s	loc_1CA1E
0001D06E                            ; ===========================================================================
0001D06E                            
0001D06E                            loc_1CA26:
0001D06E D283                       		add.l	d3,d1
0001D070 4A42                       		tst.w	d2
0001D072 6700                       		beq.s	loc_1CA30
0001D074 383C 0001                  		move.w	#1,d4
0001D078                            
0001D078                            loc_1CA30:
0001D078 4A44                       		tst.w	d4
0001D07A 6700                       		beq.s	Hud_ClrBonus
0001D07C ED4A                       		lsl.w	#6,d2
0001D07E 47F1 2000                  		lea	(a1,d2.w),a3
0001D082 2C9B                       		move.l	(a3)+,(a6)
0001D084 2C9B                       		move.l	(a3)+,(a6)
0001D086 2C9B                       		move.l	(a3)+,(a6)
0001D088 2C9B                       		move.l	(a3)+,(a6)
0001D08A 2C9B                       		move.l	(a3)+,(a6)
0001D08C 2C9B                       		move.l	(a3)+,(a6)
0001D08E 2C9B                       		move.l	(a3)+,(a6)
0001D090 2C9B                       		move.l	(a3)+,(a6)
0001D092 2C9B                       		move.l	(a3)+,(a6)
0001D094 2C9B                       		move.l	(a3)+,(a6)
0001D096 2C9B                       		move.l	(a3)+,(a6)
0001D098 2C9B                       		move.l	(a3)+,(a6)
0001D09A 2C9B                       		move.l	(a3)+,(a6)
0001D09C 2C9B                       		move.l	(a3)+,(a6)
0001D09E 2C9B                       		move.l	(a3)+,(a6)
0001D0A0 2C9B                       		move.l	(a3)+,(a6)
0001D0A2                            
0001D0A2                            loc_1CA5A:
0001D0A2 51CE FFBE                  		dbf	d6,Hud_BonusLoop ; repeat 3 more times
0001D0A6                            
0001D0A6 4E75                       		rts	
0001D0A8                            ; ===========================================================================
0001D0A8                            
0001D0A8                            Hud_ClrBonus:
0001D0A8 7A0F                       		moveq	#$F,d5
0001D0AA                            
0001D0AA                            Hud_ClrBonusLoop:
0001D0AA 2CBC 0000 0000             		move.l	#0,(a6)
0001D0B0 51CD FFF8                  		dbf	d5,Hud_ClrBonusLoop
0001D0B4                            
0001D0B4 60EC                       		bra.s	loc_1CA5A
0001D0B6                            ; End of function Hud_TimeRingBonus
0001D0B6                            
0001D0B6                            ; ---------------------------------------------------------------------------
0001D0B6                            ; Subroutine to	load uncompressed lives	counter	patterns
0001D0B6                            ; ---------------------------------------------------------------------------
0001D0B6                            
0001D0B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D0B6                            
0001D0B6                            
0001D0B6                            Hud_Lives:				; XREF: Hud_ChkLives
0001D0B6 203C 7BA0 0003             		move.l	#$7BA00003,d0	; set VRAM address
0001D0BC 7200                       		moveq	#0,d1
0001D0BE 1238 FE12                  		move.b	($FFFFFE12).w,d1 ; load	number of lives
0001D0C2 45F9 0001 CFE8             		lea	(Hud_10).l,a2
0001D0C8 7C01                       		moveq	#1,d6
0001D0CA 7800                       		moveq	#0,d4
0001D0CC 43FA 0000                  		lea	Art_LivesNums(pc),a1
0001D0D0                            
0001D0D0                            Hud_LivesLoop:
0001D0D0 2D40 0004                  		move.l	d0,4(a6)
0001D0D4 7400                       		moveq	#0,d2
0001D0D6 261A                       		move.l	(a2)+,d3
0001D0D8                            
0001D0D8                            loc_1CA90:
0001D0D8 9283                       		sub.l	d3,d1
0001D0DA 6500                       		bcs.s	loc_1CA98
0001D0DC 5242                       		addq.w	#1,d2
0001D0DE 60F8                       		bra.s	loc_1CA90
0001D0E0                            ; ===========================================================================
0001D0E0                            
0001D0E0                            loc_1CA98:
0001D0E0 D283                       		add.l	d3,d1
0001D0E2 4A42                       		tst.w	d2
0001D0E4 6700                       		beq.s	loc_1CAA2
0001D0E6 383C 0001                  		move.w	#1,d4
0001D0EA                            
0001D0EA                            loc_1CAA2:
0001D0EA 4A44                       		tst.w	d4
0001D0EC 6700                       		beq.s	Hud_ClrLives
0001D0EE                            
0001D0EE                            loc_1CAA6:
0001D0EE EB4A                       		lsl.w	#5,d2
0001D0F0 47F1 2000                  		lea	(a1,d2.w),a3
0001D0F4 2C9B                       		move.l	(a3)+,(a6)
0001D0F6 2C9B                       		move.l	(a3)+,(a6)
0001D0F8 2C9B                       		move.l	(a3)+,(a6)
0001D0FA 2C9B                       		move.l	(a3)+,(a6)
0001D0FC 2C9B                       		move.l	(a3)+,(a6)
0001D0FE 2C9B                       		move.l	(a3)+,(a6)
0001D100 2C9B                       		move.l	(a3)+,(a6)
0001D102 2C9B                       		move.l	(a3)+,(a6)
0001D104                            
0001D104                            loc_1CABC:
0001D104 0680 0040 0000             		addi.l	#$400000,d0
0001D10A 51CE FFC4                  		dbf	d6,Hud_LivesLoop ; repeat 1 more time
0001D10E                            
0001D10E 4E75                       		rts	
0001D110                            ; ===========================================================================
0001D110                            
0001D110                            Hud_ClrLives:
0001D110 4A46                       		tst.w	d6
0001D112 67DA                       		beq.s	loc_1CAA6
0001D114 7A07                       		moveq	#7,d5
0001D116                            
0001D116                            Hud_ClrLivesLoop:
0001D116 2CBC 0000 0000             		move.l	#0,(a6)
0001D11C 51CD FFF8                  		dbf	d5,Hud_ClrLivesLoop
0001D120 60E2                       		bra.s	loc_1CABC
0001D122                            ; End of function Hud_Lives
0001D122                            
0001D122                            ; ===========================================================================
0001D122                            Art_Hud:	incbin	artunc\HUD.bin		; 8x16 pixel numbers on HUD
0001D422                            		even
0001D422                            Art_LivesNums:	incbin	artunc\livescnt.bin	; 8x8 pixel numbers on lives counter
0001D562                            		even
0001D562                            ; ===========================================================================
0001D562                            ; ---------------------------------------------------------------------------
0001D562                            ; When debug mode is currently in use
0001D562                            ; ---------------------------------------------------------------------------
0001D562                            
0001D562                            DebugMode:				; XREF: Obj01; Obj09
0001D562 7000                       		moveq	#0,d0
0001D564 1038 FE08                  		move.b	($FFFFFE08).w,d0
0001D568 323B 0000                  		move.w	Debug_Index(pc,d0.w),d1
0001D56C 4EFB 1000                  		jmp	Debug_Index(pc,d1.w)
0001D570                            ; ===========================================================================
0001D570 0000                       Debug_Index:	dc.w Debug_Main-Debug_Index
0001D572 0000                       		dc.w Debug_Skip-Debug_Index
0001D574                            ; ===========================================================================
0001D574                            
0001D574                            Debug_Main:				; XREF: Debug_Index
0001D574 5438 FE08                  		addq.b	#2,($FFFFFE08).w
0001D578 31F8 F72C FEF0             		move.w	($FFFFF72C).w,($FFFFFEF0).w ; buffer level x-boundary
0001D57E 31F8 F726 FEF2             		move.w	($FFFFF726).w,($FFFFFEF2).w ; buffer level y-boundary
0001D584 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0001D58A 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
0001D590 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
0001D596 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
0001D59C 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
0001D5A2 117C 0000 001A             		move.b	#0,$1A(a0)
0001D5A8 117C 0000 001C             		move.b	#0,$1C(a0)
0001D5AE 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)?
0001D5B4 6600                       		bne.s	Debug_Zone	; if not, branch
0001D5B6 31FC 0000 F782             		move.w	#0,($FFFFF782).w ; stop	special	stage rotating
0001D5BC 31FC 0000 F780             		move.w	#0,($FFFFF780).w ; make	special	stage "upright"
0001D5C2 7006                       		moveq	#6,d0		; use 6th debug	item list
0001D5C4 6000                       		bra.s	Debug_UseList
0001D5C6                            ; ===========================================================================
0001D5C6                            
0001D5C6                            Debug_Zone:
0001D5C6 7000                       		moveq	#0,d0
0001D5C8 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001D5CC                            
0001D5CC                            Debug_UseList:
0001D5CC 45F9 0000 0000             		lea	(DebugList).l,a2
0001D5D2 D040                       		add.w	d0,d0
0001D5D4 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001D5D8 3C1A                       		move.w	(a2)+,d6
0001D5DA BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001D5DE 6200                       		bhi.s	loc_1CF9E
0001D5E0 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w
0001D5E6                            
0001D5E6                            loc_1CF9E:
0001D5E6 6100 0000                  		bsr.w	Debug_ShowItem
0001D5EA 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001D5F0 11FC 0001 FE0B             		move.b	#1,($FFFFFE0B).w
0001D5F6                            
0001D5F6                            Debug_Skip:				; XREF: Debug_Index
0001D5F6 7006                       		moveq	#6,d0
0001D5F8 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
0001D5FE 6700                       		beq.s	loc_1CFBE
0001D600 7000                       		moveq	#0,d0
0001D602 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001D606                            
0001D606                            loc_1CFBE:
0001D606 45F9 0000 0000             		lea	(DebugList).l,a2
0001D60C D040                       		add.w	d0,d0
0001D60E D4F2 0000                  		adda.w	(a2,d0.w),a2
0001D612 3C1A                       		move.w	(a2)+,d6
0001D614 6100 0000                  		bsr.w	Debug_Control
0001D618 4EF9 0000 DBA8             		jmp	DisplaySprite
0001D61E                            
0001D61E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D61E                            
0001D61E                            
0001D61E                            Debug_Control:
0001D61E 7800                       		moveq	#0,d4
0001D620 323C 0001                  		move.w	#1,d1
0001D624 1838 F605                  		move.b	($FFFFF605).w,d4
0001D628 0244 000F                  		andi.w	#$F,d4		; is up/down/left/right	pressed?
0001D62C 6600                       		bne.s	loc_1D018	; if yes, branch
0001D62E 1038 F604                  		move.b	($FFFFF604).w,d0
0001D632 0240 000F                  		andi.w	#$F,d0
0001D636 6600                       		bne.s	loc_1D000
0001D638 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001D63E 11FC 000F FE0B             		move.b	#$F,($FFFFFE0B).w
0001D644 6000 0000                  		bra.w	Debug_BackItem
0001D648                            ; ===========================================================================
0001D648                            
0001D648                            loc_1D000:
0001D648 5338 FE0A                  		subq.b	#1,($FFFFFE0A).w
0001D64C 6600                       		bne.s	loc_1D01C
0001D64E 11FC 0001 FE0A             		move.b	#1,($FFFFFE0A).w
0001D654 5238 FE0B                  		addq.b	#1,($FFFFFE0B).w
0001D658 6600                       		bne.s	loc_1D018
0001D65A 11FC 00FF FE0B             		move.b	#-1,($FFFFFE0B).w
0001D660                            
0001D660                            loc_1D018:
0001D660 1838 F604                  		move.b	($FFFFF604).w,d4
0001D664                            
0001D664                            loc_1D01C:
0001D664 7200                       		moveq	#0,d1
0001D666 1238 FE0B                  		move.b	($FFFFFE0B).w,d1
0001D66A 5241                       		addq.w	#1,d1
0001D66C 4841                       		swap	d1
0001D66E E881                       		asr.l	#4,d1
0001D670 2428 000C                  		move.l	$C(a0),d2
0001D674 2628 0008                  		move.l	8(a0),d3
0001D678 0804 0000                  		btst	#0,d4		; is up	being pressed?
0001D67C 6700                       		beq.s	loc_1D03C	; if not, branch
0001D67E 9481                       		sub.l	d1,d2
0001D680 6400                       		bcc.s	loc_1D03C
0001D682 7400                       		moveq	#0,d2
0001D684                            
0001D684                            loc_1D03C:
0001D684 0804 0001                  		btst	#1,d4		; is down being	pressed?
0001D688 6700                       		beq.s	loc_1D052	; if not, branch
0001D68A D481                       		add.l	d1,d2
0001D68C 0C82 07FF 0000             		cmpi.l	#$7FF0000,d2
0001D692 6500                       		bcs.s	loc_1D052
0001D694 243C 07FF 0000             		move.l	#$7FF0000,d2
0001D69A                            
0001D69A                            loc_1D052:
0001D69A 0804 0002                  		btst	#2,d4
0001D69E 6700                       		beq.s	loc_1D05E
0001D6A0 9681                       		sub.l	d1,d3
0001D6A2 6400                       		bcc.s	loc_1D05E
0001D6A4 7600                       		moveq	#0,d3
0001D6A6                            
0001D6A6                            loc_1D05E:
0001D6A6 0804 0003                  		btst	#3,d4
0001D6AA 6700                       		beq.s	loc_1D066
0001D6AC D681                       		add.l	d1,d3
0001D6AE                            
0001D6AE                            loc_1D066:
0001D6AE 2142 000C                  		move.l	d2,$C(a0)
0001D6B2 2143 0008                  		move.l	d3,8(a0)
0001D6B6                            
0001D6B6                            Debug_BackItem:
0001D6B6 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
0001D6BC 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001D6BE 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001D6C4 6700                       		beq.s	Debug_NextItem	; if not, branch
0001D6C6 5338 FE06                  		subq.b	#1,($FFFFFE06).w ; go back 1 item
0001D6CA 6400                       		bcc.s	Debug_NoLoop
0001D6CC DD38 FE06                  		add.b	d6,($FFFFFE06).w
0001D6D0 6000                       		bra.s	Debug_NoLoop
0001D6D2                            ; ===========================================================================
0001D6D2                            
0001D6D2                            Debug_NextItem:
0001D6D2 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
0001D6D8 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001D6DA 5238 FE06                  		addq.b	#1,($FFFFFE06).w ; go forwards 1 item
0001D6DE BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001D6E2 6200                       		bhi.s	Debug_NoLoop
0001D6E4 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w ; loop	back to	first item
0001D6EA                            
0001D6EA                            Debug_NoLoop:
0001D6EA 6000 0000                  		bra.w	Debug_ShowItem
0001D6EE                            ; ===========================================================================
0001D6EE                            
0001D6EE                            Debug_MakeItem:
0001D6EE 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001D6F4 6700                       		beq.s	Debug_Exit	; if not, branch
0001D6F6 4EB9 0000 E02E             		jsr	SingleObjLoad
0001D6FC 6600                       		bne.s	Debug_Exit
0001D6FE 3368 0008 0008             		move.w	8(a0),8(a1)
0001D704 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001D70A 12A8 0004                  		move.b	4(a0),0(a1)	; create object
0001D70E 1368 0001 0001             		move.b	1(a0),1(a1)
0001D714 1368 0001 0022             		move.b	1(a0),$22(a1)
0001D71A 0229 007F 0022             		andi.b	#$7F,$22(a1)
0001D720 7000                       		moveq	#0,d0
0001D722 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001D726 E748                       		lsl.w	#3,d0
0001D728 1372 0004 0028             		move.b	4(a2,d0.w),$28(a1)
0001D72E 4E75                       		rts	
0001D730                            ; ===========================================================================
0001D730                            
0001D730                            Debug_Exit:
0001D730 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001D736 6700                       		beq.s	Debug_DoNothing	; if not, branch
0001D738 7000                       		moveq	#0,d0
0001D73A 31C0 FE08                  		move.w	d0,($FFFFFE08).w ; deactivate debug mode
0001D73E 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001D746 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001D74C 11C0 D01C                  		move.b	d0,($FFFFD01C).w
0001D750 3140 000A                  		move.w	d0,$A(a0)
0001D754 3140 000E                  		move.w	d0,$E(a0)
0001D758 31F8 FEF0 F72C             		move.w	($FFFFFEF0).w,($FFFFF72C).w ; restore level boundaries
0001D75E 31F8 FEF2 F726             		move.w	($FFFFFEF2).w,($FFFFF726).w
0001D764 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; are you in	the special stage?
0001D76A 6600                       		bne.s	Debug_DoNothing	; if not, branch
0001D76C 4278 F780                  		clr.w	($FFFFF780).w
0001D770 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set new level rotation speed
0001D776 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001D77E 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001D784 11FC 0002 D01C             		move.b	#2,($FFFFD01C).w
0001D78A 08F8 0002 D022             		bset	#2,($FFFFD022).w
0001D790 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001D796                            
0001D796                            Debug_DoNothing:
0001D796 4E75                       		rts	
0001D798                            ; End of function Debug_Control
0001D798                            
0001D798                            
0001D798                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D798                            
0001D798                            
0001D798                            Debug_ShowItem:				; XREF: Debug_Main
0001D798 7000                       		moveq	#0,d0
0001D79A 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001D79E E748                       		lsl.w	#3,d0
0001D7A0 2172 0000 0004             		move.l	(a2,d0.w),4(a0)	; load mappings	for item
0001D7A6 3172 0006 0002             		move.w	6(a2,d0.w),2(a0) ; load	VRAM setting for item
0001D7AC 1172 0005 001A             		move.b	5(a2,d0.w),$1A(a0) ; load frame	number for item
0001D7B2 4E75                       		rts	
0001D7B4                            ; End of function Debug_ShowItem
0001D7B4                            
0001D7B4                            ; ===========================================================================
0001D7B4                            ; ---------------------------------------------------------------------------
0001D7B4                            ; Debug	list pointers
0001D7B4                            ; ---------------------------------------------------------------------------
0001D7B4                            DebugList:
0001D7B4                            	include "_inc\Debug list pointers.asm"
0001D7B4                            ; ---------------------------------------------------------------------------
0001D7B4                            ; Debug	list pointers
0001D7B4                            ; ---------------------------------------------------------------------------
0001D7B4 0000                       	dc.w Debug_GHZ-DebugList
0001D7B6 0000                       	dc.w Debug_LZ-DebugList
0001D7B8 0000                       	dc.w Debug_MZ-DebugList
0001D7BA 0000                       	dc.w Debug_SLZ-DebugList
0001D7BC 0000                       	dc.w Debug_SYZ-DebugList
0001D7BE 0000                       	dc.w Debug_SBZ-DebugList
0001D7C0 0000                       	dc.w Debug_Ending-DebugList
0001D7C0 0000                       	dc.w Debug_Ending-DebugList
0001D7C2                            
0001D7C2                            ; ---------------------------------------------------------------------------
0001D7C2                            ; Debug	list - Green Hill
0001D7C2                            ; ---------------------------------------------------------------------------
0001D7C2                            Debug_GHZ:
0001D7C2                            	include "_inc\Debug list - GHZ.asm"
0001D7C2                            ; ---------------------------------------------------------------------------
0001D7C2                            ; Debug	list - Green Hill
0001D7C2                            ; ---------------------------------------------------------------------------
0001D7C2 0010                       	dc.w $10			; number of items in list
0001D7C4 2500 A3E0                  	dc.l Map_obj25+$25000000	; mappings pointer, object type * 10^6
0001D7C8 0000 27B2                  	dc.b 0,	0, $27,	$B2		; subtype, frame, VRAM setting (2 bytes)
0001D7CC 2600 A9E6                  	dc.l Map_obj26+$26000000
0001D7D0 0000 0680                  	dc.b 0,	0, 6, $80
0001D7D4 1F00 9BD8                  	dc.l Map_obj1F+$1F000000
0001D7D8 0000 0400                  	dc.b 0,	0, 4, 0
0001D7DC 2200 9E94                  	dc.l Map_obj22+$22000000
0001D7E0 0000 0444                  	dc.b 0,	0, 4, $44
0001D7E4 2B00 B090                  	dc.l Map_obj2B+$2B000000
0001D7E8 0000 047B                  	dc.b 0,	0, 4, $7B
0001D7EC 3600 D590                  	dc.l Map_obj36+$36000000
0001D7F0 0000 051B                  	dc.b 0,	0, 5, $1B
0001D7F4 1800 8586                  	dc.l Map_obj18+$18000000
0001D7F8 0000 4000                  	dc.b 0,	0, $40,	0
0001D7FC 3B00 D6B6                  	dc.l Map_obj3B+$3B000000
0001D800 0000 63D0                  	dc.b 0,	0, $63,	$D0
0001D804 4000 FD42                  	dc.l Map_obj40+$40000000
0001D808 0000 04F0                  	dc.b 0,	0, 4, $F0
0001D80C 4100 E2BC                  	dc.l Map_obj41+$41000000
0001D810 0000 0523                  	dc.b 0,	0, 5, $23
0001D814 4200 E4E2                  	dc.l Map_obj42+$42000000
0001D818 0000 249B                  	dc.b 0,	0, $24,	$9B
0001D81C 4400 E7F0                  	dc.l Map_obj44+$44000000
0001D820 0000 434C                  	dc.b 0,	0, $43,	$4C
0001D824 1900 85F4                  	dc.l Map_obj48+$19000000
0001D828 0000 43AA                  	dc.b 0,	0, $43,	$AA
0001D82C 7901 772A                  	dc.l Map_obj79+$79000000
0001D830 0100 07A0                  	dc.b 1,	0, 7, $A0
0001D834 4B00 A420                  	dc.l Map_obj4B+$4B000000
0001D838 0000 2400                  	dc.b 0,	0, $24,	0
0001D83C 7D01 787A                  	dc.l Map_obj7D+$7D000000
0001D840 0101 84B6                  	dc.b 1,	1, $84,	$B6
0001D844                            	even
0001D844                            	even
0001D844                            
0001D844                            ; ---------------------------------------------------------------------------
0001D844                            ; Debug	list - Labyrinth
0001D844                            ; ---------------------------------------------------------------------------
0001D844                            Debug_LZ:
0001D844                            	include "_inc\Debug list - LZ.asm"
0001D844                            ; ---------------------------------------------------------------------------
0001D844                            ; Debug	list - Labyrinth
0001D844                            ; ---------------------------------------------------------------------------
0001D844 0019                       	dc.w $19
0001D846 2500 A3E0                  	dc.l Map_obj25+$25000000
0001D84A 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001D84E 2600 A9E6                  	dc.l Map_obj26+$26000000
0001D852 0000 0680                  	dc.b 0,	0, 6, $80
0001D856 4100 E2BC                  	dc.l Map_obj41+$41000000
0001D85A 0000 0523                  	dc.b 0,	0, 5, $23
0001D85E 2C00 B136                  	dc.l Map_obj2C+$2C000000
0001D862 0800 2486                  	dc.b 8,	0, $24,	$86
0001D866 2D00 B32A                  	dc.l Map_obj2D+$2D000000
0001D86A 0002 84A6                  	dc.b 0,	2, $84,	$A6
0001D86E 1601 2516                  	dc.l Map_obj16+$16000000
0001D872 0000 03CC                  	dc.b 0,	0, 3, $CC
0001D876 1601 2516                  	dc.l Map_obj16+$16000000
0001D87A 0203 03CC                  	dc.b 2,	3, 3, $CC
0001D87E 3300 C7DC                  	dc.l Map_obj33+$33000000
0001D882 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001D886 3200 C39C                  	dc.l Map_obj32+$32000000
0001D88A 0000 0513                  	dc.b 0,	0, 5, $13
0001D88E 3600 D590                  	dc.l Map_obj36+$36000000
0001D892 0000 051B                  	dc.b 0,	0, 5, $1B
0001D896 5201 0638                  	dc.l Map_obj52a+$52000000
0001D89A 0400 43BC                  	dc.b 4,	0, $43,	$BC
0001D89E 6101 273E                  	dc.l Map_obj61+$61000000
0001D8A2 0100 43E6                  	dc.b 1,	0, $43,	$E6
0001D8A6 6101 273E                  	dc.l Map_obj61+$61000000
0001D8AA 1301 43E6                  	dc.b $13, 1, $43, $E6
0001D8AE 6101 273E                  	dc.l Map_obj61+$61000000
0001D8B2 0500 43E6                  	dc.b 5,	0, $43,	$E6
0001D8B6 6201 2892                  	dc.l Map_obj62+$62000000
0001D8BA 0000 443E                  	dc.b 0,	0, $44,	$3E
0001D8BE 6101 273E                  	dc.l Map_obj61+$61000000
0001D8C2 2702 43E6                  	dc.b $27, 2, $43, $E6
0001D8C6 6101 273E                  	dc.l Map_obj61+$61000000
0001D8CA 3003 43E6                  	dc.b $30, 3, $43, $E6
0001D8CE 6301 2BF4                  	dc.l Map_obj63+$63000000
0001D8D2 7F00 03F6                  	dc.b $7F, 0, 3,	$F6
0001D8D6 6001 2460                  	dc.l Map_obj60+$60000000
0001D8DA 0000 0467                  	dc.b 0,	0, 4, $67
0001D8DE 6401 2F3A                  	dc.l Map_obj64+$64000000
0001D8E2 8413 8348                  	dc.b $84, $13, $83, $48
0001D8E6 6501 30C2                  	dc.l Map_obj65+$65000000
0001D8EA 0202 C259                  	dc.b 2,	2, $C2,	$59
0001D8EE 6501 30C2                  	dc.l Map_obj65+$65000000
0001D8F2 0909 C259                  	dc.b 9,	9, $C2,	$59
0001D8F6 0B01 18B0                  	dc.l Map_obj0B+$B000000
0001D8FA 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001D8FE 0C01 1980                  	dc.l Map_obj0C+$C000000
0001D902 0200 4328                  	dc.b 2,	0, $43,	$28
0001D906 7901 772A                  	dc.l Map_obj79+$79000000
0001D90A 0100 07A0                  	dc.b 1,	0, 7, $A0
0001D90E                            	even
0001D90E                            	even
0001D90E                            
0001D90E                            ; ---------------------------------------------------------------------------
0001D90E                            ; Debug	list - Marble
0001D90E                            ; ---------------------------------------------------------------------------
0001D90E                            Debug_MZ:
0001D90E                            	include "_inc\Debug list - MZ.asm"
0001D90E                            ; ---------------------------------------------------------------------------
0001D90E                            ; Debug	list - Marble
0001D90E                            ; ---------------------------------------------------------------------------
0001D90E 0012                       	dc.w $12
0001D910 2500 A3E0                  	dc.l Map_obj25+$25000000
0001D914 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001D918 2600 A9E6                  	dc.l Map_obj26+$26000000
0001D91C 0000 0680                  	dc.b 0,	0, 6, $80
0001D920 2200 9E94                  	dc.l Map_obj22+$22000000
0001D924 0000 0444                  	dc.b 0,	0, 4, $44
0001D928 3600 D590                  	dc.l Map_obj36+$36000000
0001D92C 0000 051B                  	dc.b 0,	0, 5, $1B
0001D930 4100 E2BC                  	dc.l Map_obj41+$41000000
0001D934 0000 0523                  	dc.b 0,	0, 5, $23
0001D938 1300 B86C                  	dc.l Map_obj14+$13000000
0001D93C 0000 0345                  	dc.b 0,	0, 3, $45
0001D940 4600 EEA2                  	dc.l Map_obj46+$46000000
0001D944 0000 4000                  	dc.b 0,	0, $40,	0
0001D948 4C00 F7EE                  	dc.l Map_obj4C+$4C000000
0001D94C 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001D950 4E00 FAD2                  	dc.l Map_obj4E+$4E000000
0001D954 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001D958 3300 C7DC                  	dc.l Map_obj33+$33000000
0001D95C 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001D960 5000 FED0                  	dc.l Map_obj50+$50000000
0001D964 0000 247B                  	dc.b 0,	0, $24,	$7B
0001D968 5101 036C                  	dc.l Map_obj51+$51000000
0001D96C 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001D970 5201 05E2                  	dc.l Map_obj52+$52000000
0001D974 0000 02B8                  	dc.b 0,	0, 2, $B8
0001D978 5300 8B8C                  	dc.l Map_obj53+$53000000
0001D97C 0000 62B8                  	dc.b 0,	0, $62,	$B8
0001D980 5400 F7B4                  	dc.l Map_obj54+$54000000
0001D984 0000 8680                  	dc.b 0,	0, $86,	$80
0001D988 5501 07D6                  	dc.l Map_obj55+$55000000
0001D98C 0000 04B8                  	dc.b 0,	0, 4, $B8
0001D990 7801 73A4                  	dc.l Map_obj78+$78000000
0001D994 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001D998 7901 772A                  	dc.l Map_obj79+$79000000
0001D99C 0100 07A0                  	dc.b 1,	0, 7, $A0
0001D9A0                            	even
0001D9A0                            	even
0001D9A0                            
0001D9A0                            ; ---------------------------------------------------------------------------
0001D9A0                            ; Debug	list - Star Light
0001D9A0                            ; ---------------------------------------------------------------------------
0001D9A0                            Debug_SLZ:
0001D9A0                            	include "_inc\Debug list - SLZ.asm"
0001D9A0                            ; ---------------------------------------------------------------------------
0001D9A0                            ; Debug	list - Star Light
0001D9A0                            ; ---------------------------------------------------------------------------
0001D9A0 000F                       	dc.w $F
0001D9A2 2500 A3E0                  	dc.l Map_obj25+$25000000
0001D9A6 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001D9AA 2600 A9E6                  	dc.l Map_obj26+$26000000
0001D9AE 0000 0680                  	dc.b 0,	0, 6, $80
0001D9B2 5901 12D8                  	dc.l Map_obj59+$59000000
0001D9B6 0000 4000                  	dc.b 0,	0, $40,	0
0001D9BA 5300 8B8C                  	dc.l Map_obj53+$53000000
0001D9BE 0002 44E0                  	dc.b 0,	2, $44,	$E0
0001D9C2 1800 85E4                  	dc.l Map_obj18b+$18000000
0001D9C6 0000 4000                  	dc.b 0,	0, $40,	0
0001D9CA 5A01 1412                  	dc.l Map_obj5A+$5A000000
0001D9CE 0000 4000                  	dc.b 0,	0, $40,	0
0001D9D2 5B01 15CA                  	dc.l Map_obj5B+$5B000000
0001D9D6 0000 4000                  	dc.b 0,	0, $40,	0
0001D9DA 5D01 1B9A                  	dc.l Map_obj5D+$5D000000
0001D9DE 0000 43A0                  	dc.b 0,	0, $43,	$A0
0001D9E2 5E01 1F2C                  	dc.l Map_obj5E+$5E000000
0001D9E6 0000 0374                  	dc.b 0,	0, 3, $74
0001D9EA 4100 E2BC                  	dc.l Map_obj41+$41000000
0001D9EE 0000 0523                  	dc.b 0,	0, 5, $23
0001D9F2 1300 B86C                  	dc.l Map_obj14+$13000000
0001D9F6 0000 0480                  	dc.b 0,	0, 4, $80
0001D9FA 1C00 8C9C                  	dc.l Map_obj1C+$1C000000
0001D9FE 0000 44D8                  	dc.b 0,	0, $44,	$D8
0001DA02 5F01 21AA                  	dc.l Map_obj5F+$5F000000
0001DA06 0000 0400                  	dc.b 0,	0, 4, 0
0001DA0A 6001 2460                  	dc.l Map_obj60+$60000000
0001DA0E 0000 2429                  	dc.b 0,	0, $24,	$29
0001DA12 7901 772A                  	dc.l Map_obj79+$79000000
0001DA16 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DA1A                            	even
0001DA1A                            	even
0001DA1A                            
0001DA1A                            ; ---------------------------------------------------------------------------
0001DA1A                            ; Debug	list - Spring Yard
0001DA1A                            ; ---------------------------------------------------------------------------
0001DA1A                            Debug_SYZ:
0001DA1A                            	include "_inc\Debug list - SYZ.asm"
0001DA1A                            ; ---------------------------------------------------------------------------
0001DA1A                            ; Debug	list - Spring Yard
0001DA1A                            ; ---------------------------------------------------------------------------
0001DA1A 000F                       	dc.w $F
0001DA1C 2500 A3E0                  	dc.l Map_obj25+$25000000
0001DA20 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DA24 2600 A9E6                  	dc.l Map_obj26+$26000000
0001DA28 0000 0680                  	dc.b 0,	0, 6, $80
0001DA2C 3600 D590                  	dc.l Map_obj36+$36000000
0001DA30 0000 051B                  	dc.b 0,	0, 5, $1B
0001DA34 4100 E2BC                  	dc.l Map_obj41+$41000000
0001DA38 0000 0523                  	dc.b 0,	0, 5, $23
0001DA3C 4300 E742                  	dc.l Map_obj43+$43000000
0001DA40 0000 04B8                  	dc.b 0,	0, 4, $B8
0001DA44 1200 EF20                  	dc.l Map_obj12+$12000000
0001DA48 0000 0000                  	dc.b 0,	0, 0, 0
0001DA4C 4700 F09C                  	dc.l Map_obj47+$47000000
0001DA50 0000 0380                  	dc.b 0,	0, 3, $80
0001DA54 1F00 9BD8                  	dc.l Map_obj1F+$1F000000
0001DA58 0000 0400                  	dc.b 0,	0, 4, 0
0001DA5C 2200 9E94                  	dc.l Map_obj22+$22000000
0001DA60 0000 0444                  	dc.b 0,	0, 4, $44
0001DA64 5000 FED0                  	dc.l Map_obj50+$50000000
0001DA68 0000 247B                  	dc.b 0,	0, $24,	$7B
0001DA6C 1800 85D2                  	dc.l Map_obj18a+$18000000
0001DA70 0000 4000                  	dc.b 0,	0, $40,	0
0001DA74 5601 0C98                  	dc.l Map_obj56+$56000000
0001DA78 0000 4000                  	dc.b 0,	0, $40,	0
0001DA7C 3200 C39C                  	dc.l Map_obj32+$32000000
0001DA80 0000 0513                  	dc.b 0,	0, 5, $13
0001DA84 7801 73A4                  	dc.l Map_obj78+$78000000
0001DA88 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001DA8C 7901 772A                  	dc.l Map_obj79+$79000000
0001DA90 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DA94                            	even
0001DA94                            	even
0001DA94                            
0001DA94                            ; ---------------------------------------------------------------------------
0001DA94                            ; Debug	list - Scrap Brain
0001DA94                            ; ---------------------------------------------------------------------------
0001DA94                            Debug_SBZ:
0001DA94                            	include "_inc\Debug list - SBZ.asm"
0001DA94                            ; ---------------------------------------------------------------------------
0001DA94                            ; Debug	list - Scrap Brain
0001DA94                            ; ---------------------------------------------------------------------------
0001DA94 001D                       	dc.w $1D
0001DA96 2500 A3E0                  	dc.l Map_obj25+$25000000
0001DA9A 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DA9E 2600 A9E6                  	dc.l Map_obj26+$26000000
0001DAA2 0000 0680                  	dc.b 0,	0, 6, $80
0001DAA6 5F01 21AA                  	dc.l Map_obj5F+$5F000000
0001DAAA 0000 0400                  	dc.b 0,	0, 4, 0
0001DAAE 6001 2460                  	dc.l Map_obj60+$60000000
0001DAB2 0000 0429                  	dc.b 0,	0, 4, $29
0001DAB6 7801 73A4                  	dc.l Map_obj78+$78000000
0001DABA 0000 22B0                  	dc.b 0,	0, $22,	$B0
0001DABE 1501 1034                  	dc.l Map_obj15b+$15000000
0001DAC2 0702 4391                  	dc.b 7,	2, $43,	$91
0001DAC6 6701 5CB8                  	dc.l Map_obj67+$67000000
0001DACA E000 C344                  	dc.b $E0, 0, $C3, $44
0001DACE 5201 05E2                  	dc.l Map_obj52+$52000000
0001DAD2 2802 22C0                  	dc.b $28, 2, $22, $C0
0001DAD6 3200 C39C                  	dc.l Map_obj32+$32000000
0001DADA 0000 0513                  	dc.b 0,	0, 5, $13
0001DADE 6901 5F12                  	dc.l Map_obj69+$69000000
0001DAE2 0300 4492                  	dc.b 3,	0, $44,	$92
0001DAE6 6901 5F6C                  	dc.l Map_obj69a+$69000000
0001DAEA 8300 04DF                  	dc.b $83, 0, 4,	$DF
0001DAEE 6A01 61CA                  	dc.l Map_obj6A+$6A000000
0001DAF2 0200 43B5                  	dc.b 2,	0, $43,	$B5
0001DAF6 5300 8B8C                  	dc.l Map_obj53+$53000000
0001DAFA 0000 43F5                  	dc.b 0,	0, $43,	$F5
0001DAFE 5201 05E2                  	dc.l Map_obj52+$52000000
0001DB02 3903 4460                  	dc.b $39, 3, $44, $60
0001DB06 6B01 659A                  	dc.l Map_obj6B+$6B000000
0001DB0A 0000 22C0                  	dc.b 0,	0, $22,	$C0
0001DB0E 2A00 8E32                  	dc.l Map_obj2A+$2A000000
0001DB12 0000 42E8                  	dc.b 0,	0, $42,	$E8
0001DB16 6B01 659A                  	dc.l Map_obj6B+$6B000000
0001DB1A 1301 22C0                  	dc.b $13, 1, $22, $C0
0001DB1E 6A01 61CA                  	dc.l Map_obj6A+$6A000000
0001DB22 0100 43B5                  	dc.b 1,	0, $43,	$B5
0001DB26 6B01 659A                  	dc.l Map_obj6B+$6B000000
0001DB2A 2401 22C0                  	dc.b $24, 1, $22, $C0
0001DB2E 6A01 61CA                  	dc.l Map_obj6A+$6A000000
0001DB32 0402 43B5                  	dc.b 4,	2, $43,	$B5
0001DB36 6B01 659A                  	dc.l Map_obj6B+$6B000000
0001DB3A 3401 22C0                  	dc.b $34, 1, $22, $C0
0001DB3E 6C01 675C                  	dc.l Map_obj6C+$6C000000
0001DB42 0000 44C3                  	dc.b 0,	0, $44,	$C3
0001DB46 6D00 EB92                  	dc.l Map_obj6D+$6D000000
0001DB4A 6400 83D9                  	dc.b $64, 0, $83, $D9
0001DB4E 6D00 EB92                  	dc.l Map_obj6D+$6D000000
0001DB52 640B 83D9                  	dc.b $64, $B, $83, $D9
0001DB56 6E01 6812                  	dc.l Map_obj6E+$6E000000
0001DB5A 0400 047E                  	dc.b 4,	0, 4, $7E
0001DB5E 7001 6C68                  	dc.l Map_obj70+$70000000
0001DB62 0000 42F0                  	dc.b 0,	0, $42,	$F0
0001DB66 7101 1A40                  	dc.l Map_obj71+$71000000
0001DB6A 1100 8680                  	dc.b $11, 0, $86, $80
0001DB6E 1E00 92F0                  	dc.l Map_obj1E+$1E000000
0001DB72 0400 2302                  	dc.b 4,	0, $23,	2
0001DB76 7901 772A                  	dc.l Map_obj79+$79000000
0001DB7A 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DB7E                            	even
0001DB7E                            	even
0001DB7E                            
0001DB7E                            ; ---------------------------------------------------------------------------
0001DB7E                            ; Debug	list - ending sequence / special stage
0001DB7E                            ; ---------------------------------------------------------------------------
0001DB7E                            Debug_Ending:
0001DB7E                            	include "_inc\Debug list - Ending and SS.asm"
0001DB7E                            ; ---------------------------------------------------------------------------
0001DB7E                            ; Debug	list - ending sequence / special stage
0001DB7E                            ; ---------------------------------------------------------------------------
0001DB7E 000D                       	dc.w $D
0001DB80 2500 A3E0                  	dc.l Map_obj25+$25000000
0001DB84 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DB88 4700 F09C                  	dc.l Map_obj47+$47000000
0001DB8C 0000 0380                  	dc.b 0,	0, 3, $80
0001DB90 2800 990A                  	dc.l Map_obj28a+$28000000
0001DB94 0A00 05A0                  	dc.b $A, 0, 5, $A0
0001DB98 2800 990A                  	dc.l Map_obj28a+$28000000
0001DB9C 0B00 05A0                  	dc.b $B, 0, 5, $A0
0001DBA0 2800 990A                  	dc.l Map_obj28a+$28000000
0001DBA4 0C00 05A0                  	dc.b $C, 0, 5, $A0
0001DBA8 2800 98F2                  	dc.l Map_obj28+$28000000
0001DBAC 0D00 0553                  	dc.b $D, 0, 5, $53
0001DBB0 2800 98F2                  	dc.l Map_obj28+$28000000
0001DBB4 0E00 0553                  	dc.b $E, 0, 5, $53
0001DBB8 2800 98F2                  	dc.l Map_obj28+$28000000
0001DBBC 0F00 0573                  	dc.b $F, 0, 5, $73
0001DBC0 2800 98F2                  	dc.l Map_obj28+$28000000
0001DBC4 1000 0573                  	dc.b $10, 0, 5,	$73
0001DBC8 2800 990A                  	dc.l Map_obj28a+$28000000
0001DBCC 1100 0585                  	dc.b $11, 0, 5,	$85
0001DBD0 2800 9922                  	dc.l Map_obj28b+$28000000
0001DBD4 1200 0593                  	dc.b $12, 0, 5,	$93
0001DBD8 2800 990A                  	dc.l Map_obj28a+$28000000
0001DBDC 1300 0565                  	dc.b $13, 0, 5,	$65
0001DBE0 2800 9922                  	dc.l Map_obj28b+$28000000
0001DBE4 1400 05B3                  	dc.b $14, 0, 5,	$B3
0001DBE8                            	even
0001DBE8                            	even
0001DBE8                            
0001DBE8                            ; ---------------------------------------------------------------------------
0001DBE8                            ; Main level load blocks
0001DBE8                            ; ---------------------------------------------------------------------------
0001DBE8                            MainLoadBlocks:
0001DBE8                            	include "_inc\Main level load blocks.asm"
0001DBE8                            ; ---------------------------------------------------------------------------
0001DBE8                            ; Main level load blocks
0001DBE8                            ;
0001DBE8                            ; ===FORMAT===
0001DBE8                            ; level	patterns + (1st	PLC num	* 10^6)
0001DBE8                            ; 16x16	mappings + (2nd	PLC num	* 10^6)
0001DBE8                            ; 256x256 mappings
0001DBE8                            ; blank, music (unused), pal index (unused), pal index
0001DBE8                            ; ---------------------------------------------------------------------------
0001DBE8 0000 0000                  	dc.l Nem_GHZ_2nd+$4000000
0001DBEC 0000 0000                  	dc.l Blk16_GHZ+$5000000
0001DBF0 0000 0000                  	dc.l Blk256_GHZ
0001DBF4 0081 0404                  	dc.b 0,	$81, 4,	4
0001DBF8 0000 0000                  	dc.l Nem_LZ+$6000000
0001DBFC 0000 0000                  	dc.l Blk16_LZ+$7000000
0001DC00 0000 0000                  	dc.l Blk256_LZ
0001DC04 0082 0505                  	dc.b 0,	$82, 5,	5
0001DC08 0000 0000                  	dc.l Nem_MZ+$8000000
0001DC0C 0000 0000                  	dc.l Blk16_MZ+$9000000
0001DC10 0000 0000                  	dc.l Blk256_MZ
0001DC14 0083 0606                  	dc.b 0,	$83, 6,	6
0001DC18 0000 0000                  	dc.l Nem_SLZ+$A000000
0001DC1C 0000 0000                  	dc.l Blk16_SLZ+$B000000
0001DC20 0000 0000                  	dc.l Blk256_SLZ
0001DC24 0084 0707                  	dc.b 0,	$84, 7,	7
0001DC28 0000 0000                  	dc.l Nem_SYZ+$C000000
0001DC2C 0000 0000                  	dc.l Blk16_SYZ+$D000000
0001DC30 0000 0000                  	dc.l Blk256_SYZ
0001DC34 0085 0808                  	dc.b 0,	$85, 8,	8
0001DC38 0000 0000                  	dc.l Nem_SBZ+$E000000
0001DC3C 0000 0000                  	dc.l Blk16_SBZ+$F000000
0001DC40 0000 0000                  	dc.l Blk256_SBZ
0001DC44 0086 0909                  	dc.b 0,	$86, 9,	9
0001DC48 0000 0000                  	dc.l Nem_GHZ_2nd	; main load block for ending
0001DC4C 0000 0000                  	dc.l Blk16_GHZ
0001DC50 0000 0000                  	dc.l Blk256_GHZ
0001DC54 0086 1313                  	dc.b 0,	$86, $13, $13
0001DC58                            	even
0001DC58                            	even
0001DC58                            
0001DC58                            ; ---------------------------------------------------------------------------
0001DC58                            ; Pattern load cues
0001DC58                            ; ---------------------------------------------------------------------------
0001DC58                            ArtLoadCues:
0001DC58                            	include "_inc\Pattern load cues.asm"
0001DC58                            ; ---------------------------------------------------------------------------
0001DC58                            ; Pattern load cues - index
0001DC58                            ; ---------------------------------------------------------------------------
0001DC58 0000 0000                  	dc.w PLC_Main-ArtLoadCues, PLC_Main2-ArtLoadCues
0001DC5C 0000 0000                  	dc.w PLC_Explode-ArtLoadCues, PLC_GameOver-ArtLoadCues
0001DC60 0000 0000                  	dc.w PLC_GHZ-ArtLoadCues, PLC_GHZ2-ArtLoadCues
0001DC64 0000 0000                  	dc.w PLC_LZ-ArtLoadCues, PLC_LZ2-ArtLoadCues
0001DC68 0000 0000                  	dc.w PLC_MZ-ArtLoadCues, PLC_MZ2-ArtLoadCues
0001DC6C 0000 0000                  	dc.w PLC_SLZ-ArtLoadCues, PLC_SLZ2-ArtLoadCues
0001DC70 0000 0000                  	dc.w PLC_SYZ-ArtLoadCues, PLC_SYZ2-ArtLoadCues
0001DC74 0000 0000                  	dc.w PLC_SBZ-ArtLoadCues, PLC_SBZ2-ArtLoadCues
0001DC78 0000 0000                  	dc.w PLC_TitleCard-ArtLoadCues,	PLC_Boss-ArtLoadCues
0001DC7C 0000 0000                  	dc.w PLC_Signpost-ArtLoadCues, PLC_Warp-ArtLoadCues
0001DC80 0000 0000                  	dc.w PLC_SpeStage-ArtLoadCues, PLC_GHZAnimals-ArtLoadCues
0001DC84 0000 0000                  	dc.w PLC_LZAnimals-ArtLoadCues,	PLC_MZAnimals-ArtLoadCues
0001DC88 0000 0000                  	dc.w PLC_SLZAnimals-ArtLoadCues, PLC_SYZAnimals-ArtLoadCues
0001DC8C 0000 0000                  	dc.w PLC_SBZAnimals-ArtLoadCues, PLC_SpeStResult-ArtLoadCues
0001DC90 0000 0000                  	dc.w PLC_Ending-ArtLoadCues, PLC_TryAgain-ArtLoadCues
0001DC94 0000 0000                  	dc.w PLC_EggmanSBZ2-ArtLoadCues, PLC_FZBoss-ArtLoadCues
0001DC98                            ; ---------------------------------------------------------------------------
0001DC98                            ; Pattern load cues - standard block 1
0001DC98                            ; ---------------------------------------------------------------------------
0001DC98 0004                       PLC_Main:	dc.w 4
0001DC9A 0000 0000                  		dc.l Nem_Lamp		; lamppost
0001DC9E F400                       		dc.w $F400
0001DCA0 0000 0000                  		dc.l Nem_Hud		; HUD
0001DCA4 D940                       		dc.w $D940
0001DCA6 0000 0000                  		dc.l Nem_Lives		; lives	counter
0001DCAA FA80                       		dc.w $FA80
0001DCAC 0000 0000                  		dc.l Nem_Ring		; rings
0001DCB0 F640                       		dc.w $F640
0001DCB2 0000 0000                  		dc.l Nem_Points		; points from enemy
0001DCB6 F2E0                       		dc.w $F2E0
0001DCB8                            ; ---------------------------------------------------------------------------
0001DCB8                            ; Pattern load cues - standard block 2
0001DCB8                            ; ---------------------------------------------------------------------------
0001DCB8 0002                       PLC_Main2:	dc.w 2
0001DCBA 0000 0000                  		dc.l Nem_Monitors	; monitors
0001DCBE D000                       		dc.w $D000
0001DCC0 0000 0000                  		dc.l Nem_Shield		; shield
0001DCC4 A820                       		dc.w $A820
0001DCC6 0000 0000                  		dc.l Nem_Stars		; invincibility	stars
0001DCCA AB80                       		dc.w $AB80
0001DCCC                            ; ---------------------------------------------------------------------------
0001DCCC                            ; Pattern load cues - explosion
0001DCCC                            ; ---------------------------------------------------------------------------
0001DCCC 0000                       PLC_Explode:	dc.w 0
0001DCCE 0000 0000                  		dc.l Nem_Explode	; explosion
0001DCD2 B400                       		dc.w $B400
0001DCD4                            ; ---------------------------------------------------------------------------
0001DCD4                            ; Pattern load cues - game/time	over
0001DCD4                            ; ---------------------------------------------------------------------------
0001DCD4 0000                       PLC_GameOver:	dc.w 0
0001DCD6 0000 0000                  		dc.l Nem_GameOver	; game/time over
0001DCDA ABC0                       		dc.w $ABC0
0001DCDC                            ; ---------------------------------------------------------------------------
0001DCDC                            ; Pattern load cues - Green Hill
0001DCDC                            ; ---------------------------------------------------------------------------
0001DCDC 000B                       PLC_GHZ:	dc.w $B
0001DCDE 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0001DCE2 0000                       		dc.w 0
0001DCE4 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001DCE8 39A0                       		dc.w $39A0
0001DCEA 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001DCEE 6B00                       		dc.w $6B00
0001DCF0 0000 0000                  		dc.l Nem_PplRock	; purple rock
0001DCF4 7A00                       		dc.w $7A00
0001DCF6 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001DCFA 8000                       		dc.w $8000
0001DCFC 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001DD00 8880                       		dc.w $8880
0001DD02 0000 0000                  		dc.l Nem_Chopper	; chopper enemy
0001DD06 8F60                       		dc.w $8F60
0001DD08 0000 0000                  		dc.l Nem_Newtron	; newtron enemy
0001DD0C 9360                       		dc.w $9360
0001DD0E 0000 0000                  		dc.l Nem_Motobug	; motobug enemy
0001DD12 9E00                       		dc.w $9E00
0001DD14 0000 0000                  		dc.l Nem_Spikes		; spikes
0001DD18 A360                       		dc.w $A360
0001DD1A 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001DD1E A460                       		dc.w $A460
0001DD20 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001DD24 A660                       		dc.w $A660
0001DD26 0005                       PLC_GHZ2:	dc.w 5
0001DD28 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001DD2C 7000                       		dc.w $7000
0001DD2E 0000 0000                  		dc.l Nem_Bridge		; bridge
0001DD32 71C0                       		dc.w $71C0
0001DD34 0000 0000                  		dc.l Nem_SpikePole	; spiked pole
0001DD38 7300                       		dc.w $7300
0001DD3A 0000 0000                  		dc.l Nem_Ball		; giant	ball
0001DD3E 7540                       		dc.w $7540
0001DD40 0000 0000                  		dc.l Nem_GhzWall1	; breakable wall
0001DD44 A1E0                       		dc.w $A1E0
0001DD46 0000 0000                  		dc.l Nem_GhzWall2	; normal wall
0001DD4A 6980                       		dc.w $6980
0001DD4C                            ; ---------------------------------------------------------------------------
0001DD4C                            ; Pattern load cues - Labyrinth
0001DD4C                            ; ---------------------------------------------------------------------------
0001DD4C 000B                       PLC_LZ:		dc.w $B
0001DD4E 0000 0000                  		dc.l Nem_LZ		; LZ main patterns
0001DD52 0000                       		dc.w 0
0001DD54 0000 0000                  		dc.l Nem_LzBlock1	; block
0001DD58 3C00                       		dc.w $3C00
0001DD5A 0000 0000                  		dc.l Nem_LzBlock2	; blocks
0001DD5E 3E00                       		dc.w $3E00
0001DD60 0000 0000                  		dc.l Nem_Splash		; waterfalls and splash
0001DD64 4B20                       		dc.w $4B20
0001DD66 0000 0000                  		dc.l Nem_Water		; water	surface
0001DD6A 6000                       		dc.w $6000
0001DD6C 0000 0000                  		dc.l Nem_LzSpikeBall	; spiked ball
0001DD70 6200                       		dc.w $6200
0001DD72 0000 0000                  		dc.l Nem_FlapDoor	; flapping door
0001DD76 6500                       		dc.w $6500
0001DD78 0000 0000                  		dc.l Nem_Bubbles	; bubbles and numbers
0001DD7C 6900                       		dc.w $6900
0001DD7E 0000 0000                  		dc.l Nem_LzBlock3	; block
0001DD82 7780                       		dc.w $7780
0001DD84 0000 0000                  		dc.l Nem_LzDoor1	; vertical door
0001DD88 7880                       		dc.w $7880
0001DD8A 0000 0000                  		dc.l Nem_Harpoon	; harpoon
0001DD8E 7980                       		dc.w $7980
0001DD90 0000 0000                  		dc.l Nem_Burrobot	; burrobot enemy
0001DD94 94C0                       		dc.w $94C0
0001DD96 000C                       PLC_LZ2:	dc.w $C
0001DD98 0000 0000                  		dc.l Nem_LzPole		; pole that breaks
0001DD9C 7BC0                       		dc.w $7BC0
0001DD9E 0000 0000                  		dc.l Nem_LzDoor2	; large	horizontal door
0001DDA2 7CC0                       		dc.w $7CC0
0001DDA4 0000 0000                  		dc.l Nem_LzWheel	; wheel
0001DDA8 7EC0                       		dc.w $7EC0
0001DDAA 0000 0000                  		dc.l Nem_Gargoyle	; gargoyle head
0001DDAE 5D20                       		dc.w $5D20
0001DDB0 0000 0000                  		dc.l Nem_LzSonic	; Sonic	holding	his breath
0001DDB4 8800                       		dc.w $8800
0001DDB6 0000 0000                  		dc.l Nem_LzPlatfm	; rising platform
0001DDBA 89E0                       		dc.w $89E0
0001DDBC 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001DDC0 8CE0                       		dc.w $8CE0
0001DDC2 0000 0000                  		dc.l Nem_Jaws		; jaws enemy
0001DDC6 90C0                       		dc.w $90C0
0001DDC8 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001DDCC A1E0                       		dc.w $A1E0
0001DDCE 0000 0000                  		dc.l Nem_Cork		; cork block
0001DDD2 A000                       		dc.w $A000
0001DDD4 0000 0000                  		dc.l Nem_Spikes		; spikes
0001DDD8 A360                       		dc.w $A360
0001DDDA 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001DDDE A460                       		dc.w $A460
0001DDE0 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001DDE4 A660                       		dc.w $A660
0001DDE6                            ; ---------------------------------------------------------------------------
0001DDE6                            ; Pattern load cues - Marble
0001DDE6                            ; ---------------------------------------------------------------------------
0001DDE6 0009                       PLC_MZ:		dc.w 9
0001DDE8 0000 0000                  		dc.l Nem_MZ		; MZ main patterns
0001DDEC 0000                       		dc.w 0
0001DDEE 0000 0000                  		dc.l Nem_MzMetal	; metal	blocks
0001DDF2 6000                       		dc.w $6000
0001DDF4 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001DDF8 68A0                       		dc.w $68A0
0001DDFA 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001DDFE 7000                       		dc.w $7000
0001DE00 0000 0000                  		dc.l Nem_MzGlass	; green	glassy block
0001DE04 71C0                       		dc.w $71C0
0001DE06 0000 0000                  		dc.l Nem_Lava		; lava
0001DE0A 7500                       		dc.w $7500
0001DE0C 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001DE10 8880                       		dc.w $8880
0001DE12 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001DE16 8F60                       		dc.w $8F60
0001DE18 0000 0000                  		dc.l Nem_Basaran	; basaran enemy
0001DE1C 9700                       		dc.w $9700
0001DE1E 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001DE22 9FE0                       		dc.w $9FE0
0001DE24 0004                       PLC_MZ2:	dc.w 4
0001DE26 0000 0000                  		dc.l Nem_MzSwitch	; switch
0001DE2A A260                       		dc.w $A260
0001DE2C 0000 0000                  		dc.l Nem_Spikes		; spikes
0001DE30 A360                       		dc.w $A360
0001DE32 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001DE36 A460                       		dc.w $A460
0001DE38 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001DE3C A660                       		dc.w $A660
0001DE3E 0000 0000                  		dc.l Nem_MzBlock	; green	stone block
0001DE42 5700                       		dc.w $5700
0001DE44                            ; ---------------------------------------------------------------------------
0001DE44                            ; Pattern load cues - Star Light
0001DE44                            ; ---------------------------------------------------------------------------
0001DE44 0008                       PLC_SLZ:	dc.w 8
0001DE46 0000 0000                  		dc.l Nem_SLZ		; SLZ main patterns
0001DE4A 0000                       		dc.w 0
0001DE4C 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001DE50 8000                       		dc.w $8000
0001DE52 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001DE56 8520                       		dc.w $8520
0001DE58 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001DE5C 9000                       		dc.w $9000
0001DE5E 0000 0000                  		dc.l Nem_SlzBlock	; block
0001DE62 9C00                       		dc.w $9C00
0001DE64 0000 0000                  		dc.l Nem_SlzWall	; breakable wall
0001DE68 A260                       		dc.w $A260
0001DE6A 0000 0000                  		dc.l Nem_Spikes		; spikes
0001DE6E A360                       		dc.w $A360
0001DE70 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001DE74 A460                       		dc.w $A460
0001DE76 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001DE7A A660                       		dc.w $A660
0001DE7C 0005                       PLC_SLZ2:	dc.w 5
0001DE7E 0000 0000                  		dc.l Nem_Seesaw		; seesaw
0001DE82 6E80                       		dc.w $6E80
0001DE84 0000 0000                  		dc.l Nem_Fan		; fan
0001DE88 7400                       		dc.w $7400
0001DE8A 0000 0000                  		dc.l Nem_Pylon		; foreground pylon
0001DE8E 7980                       		dc.w $7980
0001DE90 0000 0000                  		dc.l Nem_SlzSwing	; swinging platform
0001DE94 7B80                       		dc.w $7B80
0001DE96 0000 0000                  		dc.l Nem_SlzCannon	; fireball launcher
0001DE9A 9B00                       		dc.w $9B00
0001DE9C 0000 0000                  		dc.l Nem_SlzSpike	; spikeball
0001DEA0 9E00                       		dc.w $9E00
0001DEA2                            ; ---------------------------------------------------------------------------
0001DEA2                            ; Pattern load cues - Spring Yard
0001DEA2                            ; ---------------------------------------------------------------------------
0001DEA2 0004                       PLC_SYZ:	dc.w 4
0001DEA4 0000 0000                  		dc.l Nem_SYZ		; SYZ main patterns
0001DEA8 0000                       		dc.w 0
0001DEAA 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001DEAE 8000                       		dc.w $8000
0001DEB0 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001DEB4 8880                       		dc.w $8880
0001DEB6 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001DEBA 8F60                       		dc.w $8F60
0001DEBC 0000 0000                  		dc.l Nem_Roller		; roller enemy
0001DEC0 9700                       		dc.w $9700
0001DEC2 0007                       PLC_SYZ2:	dc.w 7
0001DEC4 0000 0000                  		dc.l Nem_Bumper		; bumper
0001DEC8 7000                       		dc.w $7000
0001DECA 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001DECE 72C0                       		dc.w $72C0
0001DED0 0000 0000                  		dc.l Nem_SyzSpike2	; small	spikeball
0001DED4 7740                       		dc.w $7740
0001DED6 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001DEDA 9FE0                       		dc.w $9FE0
0001DEDC 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001DEE0 A1E0                       		dc.w $A1E0
0001DEE2 0000 0000                  		dc.l Nem_Spikes		; spikes
0001DEE6 A360                       		dc.w $A360
0001DEE8 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001DEEC A460                       		dc.w $A460
0001DEEE 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001DEF2 A660                       		dc.w $A660
0001DEF4                            ; ---------------------------------------------------------------------------
0001DEF4                            ; Pattern load cues - Scrap Brain
0001DEF4                            ; ---------------------------------------------------------------------------
0001DEF4 000B                       PLC_SBZ:	dc.w $B
0001DEF6 0000 0000                  		dc.l Nem_SBZ		; SBZ main patterns
0001DEFA 0000                       		dc.w 0
0001DEFC 0000 0000                  		dc.l Nem_Stomper	; moving platform and stomper
0001DF00 5800                       		dc.w $5800
0001DF02 0000 0000                  		dc.l Nem_SbzDoor1	; door
0001DF06 5D00                       		dc.w $5D00
0001DF08 0000 0000                  		dc.l Nem_Girder		; girder
0001DF0C 5E00                       		dc.w $5E00
0001DF0E 0000 0000                  		dc.l Nem_BallHog	; ball hog enemy
0001DF12 6040                       		dc.w $6040
0001DF14 0000 0000                  		dc.l Nem_SbzWheel1	; spot on large	wheel
0001DF18 6880                       		dc.w $6880
0001DF1A 0000 0000                  		dc.l Nem_SbzWheel2	; wheel	that grabs Sonic
0001DF1E 6900                       		dc.w $6900
0001DF20 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001DF24 7220                       		dc.w $7220
0001DF26 0000 0000                  		dc.l Nem_Cutter		; pizza	cutter
0001DF2A 76A0                       		dc.w $76A0
0001DF2C 0000 0000                  		dc.l Nem_FlamePipe	; flaming pipe
0001DF30 7B20                       		dc.w $7B20
0001DF32 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001DF36 7EA0                       		dc.w $7EA0
0001DF38 0000 0000                  		dc.l Nem_SbzBlock	; vanishing block
0001DF3C 9860                       		dc.w $9860
0001DF3E 000C                       PLC_SBZ2:	dc.w $C
0001DF40 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001DF44 5600                       		dc.w $5600
0001DF46 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001DF4A 8000                       		dc.w $8000
0001DF4C 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001DF50 8520                       		dc.w $8520
0001DF52 0000 0000                  		dc.l Nem_SlideFloor	; floor	that slides away
0001DF56 8C00                       		dc.w $8C00
0001DF58 0000 0000                  		dc.l Nem_SbzDoor2	; horizontal door
0001DF5C 8DE0                       		dc.w $8DE0
0001DF5E 0000 0000                  		dc.l Nem_Electric	; electric orb
0001DF62 8FC0                       		dc.w $8FC0
0001DF64 0000 0000                  		dc.l Nem_TrapDoor	; trapdoor
0001DF68 9240                       		dc.w $9240
0001DF6A 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001DF6E 7F20                       		dc.w $7F20
0001DF70 0000 0000                  		dc.l Nem_SpinPform	; small	spinning platform
0001DF74 9BE0                       		dc.w $9BE0
0001DF76 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001DF7A A1E0                       		dc.w $A1E0
0001DF7C 0000 0000                  		dc.l Nem_Spikes		; spikes
0001DF80 A360                       		dc.w $A360
0001DF82 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001DF86 A460                       		dc.w $A460
0001DF88 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001DF8C A660                       		dc.w $A660
0001DF8E                            ; ---------------------------------------------------------------------------
0001DF8E                            ; Pattern load cues - title card
0001DF8E                            ; ---------------------------------------------------------------------------
0001DF8E 0000                       PLC_TitleCard:	dc.w 0
0001DF90 0000 0000                  		dc.l Nem_TitleCard
0001DF94 B000                       		dc.w $B000
0001DF96                            ; ---------------------------------------------------------------------------
0001DF96                            ; Pattern load cues - act 3 boss
0001DF96                            ; ---------------------------------------------------------------------------
0001DF96 0005                       PLC_Boss:	dc.w 5
0001DF98 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001DF9C 8000                       		dc.w $8000
0001DF9E 0000 0000                  		dc.l Nem_Weapons	; Eggman's weapons
0001DFA2 8D80                       		dc.w $8D80
0001DFA4 0000 0000                  		dc.l Nem_Prison		; prison capsule
0001DFA8 93A0                       		dc.w $93A0
0001DFAA 0000 0000                  		dc.l Nem_Bomb		; bomb enemy (gets overwritten)
0001DFAE A300                       		dc.w $A300
0001DFB0 0000 0000                  		dc.l Nem_SlzSpike	; spikeball (SLZ boss)
0001DFB4 A300                       		dc.w $A300
0001DFB6 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001DFBA A540                       		dc.w $A540
0001DFBC                            ; ---------------------------------------------------------------------------
0001DFBC                            ; Pattern load cues - act 1/2 signpost
0001DFBC                            ; ---------------------------------------------------------------------------
0001DFBC 0002                       PLC_Signpost:	dc.w 2
0001DFBE 0000 0000                  		dc.l Nem_SignPost	; signpost
0001DFC2 D000                       		dc.w $D000
0001DFC4 0000 0000                  		dc.l Nem_Bonus		; hidden bonus points
0001DFC8 96C0                       		dc.w $96C0
0001DFCA 0000 0000                  		dc.l Nem_BigFlash	; giant	ring flash effect
0001DFCE 8C40                       		dc.w $8C40
0001DFD0                            ; ---------------------------------------------------------------------------
0001DFD0                            ; Pattern load cues - beta special stage warp effect
0001DFD0                            ; ---------------------------------------------------------------------------
0001DFD0 0000                       PLC_Warp:	dc.w 0
0001DFD2 0000 0000                  		dc.l Nem_Warp
0001DFD6 A820                       		dc.w $A820
0001DFD8                            ; ---------------------------------------------------------------------------
0001DFD8                            ; Pattern load cues - special stage
0001DFD8                            ; ---------------------------------------------------------------------------
0001DFD8 0010                       PLC_SpeStage:	dc.w $10
0001DFDA 0000 0000                  		dc.l Nem_SSBgCloud	; bubble and cloud background
0001DFDE 0000                       		dc.w 0
0001DFE0 0000 0000                  		dc.l Nem_SSBgFish	; bird and fish	background
0001DFE4 0A20                       		dc.w $A20
0001DFE6 0000 0000                  		dc.l Nem_SSWalls	; walls
0001DFEA 2840                       		dc.w $2840
0001DFEC 0000 0000                  		dc.l Nem_Bumper		; bumper
0001DFF0 4760                       		dc.w $4760
0001DFF2 0000 0000                  		dc.l Nem_SSGOAL		; GOAL block
0001DFF6 4A20                       		dc.w $4A20
0001DFF8 0000 0000                  		dc.l Nem_SSUpDown	; UP and DOWN blocks
0001DFFC 4C60                       		dc.w $4C60
0001DFFE 0000 0000                  		dc.l Nem_SSRBlock	; R block
0001E002 5E00                       		dc.w $5E00
0001E004 0000 0000                  		dc.l Nem_SS1UpBlock	; 1UP block
0001E008 6E00                       		dc.w $6E00
0001E00A 0000 0000                  		dc.l Nem_SSEmStars	; emerald collection stars
0001E00E 7E00                       		dc.w $7E00
0001E010 0000 0000                  		dc.l Nem_SSRedWhite	; red and white	block
0001E014 8E00                       		dc.w $8E00
0001E016 0000 0000                  		dc.l Nem_SSGhost	; ghost	block
0001E01A 9E00                       		dc.w $9E00
0001E01C 0000 0000                  		dc.l Nem_SSWBlock	; W block
0001E020 AE00                       		dc.w $AE00
0001E022 0000 0000                  		dc.l Nem_SSGlass	; glass	block
0001E026 BE00                       		dc.w $BE00
0001E028 0000 0000                  		dc.l Nem_SSEmerald	; emeralds
0001E02C EE00                       		dc.w $EE00
0001E02E 0000 0000                  		dc.l Nem_SSZone1	; ZONE 1 block
0001E032 F2E0                       		dc.w $F2E0
0001E034 0000 0000                  		dc.l Nem_SSZone2	; ZONE 2 block
0001E038 F400                       		dc.w $F400
0001E03A 0000 0000                  		dc.l Nem_SSZone3	; ZONE 3 block
0001E03E F520                       		dc.w $F520
0001E040 0000 0000                  		dc.l Nem_SSZone4	; ZONE 4 block
0001E044 F2E0                       		dc.w $F2E0
0001E046 0000 0000                  		dc.l Nem_SSZone5	; ZONE 5 block
0001E04A F400                       		dc.w $F400
0001E04C 0000 0000                  		dc.l Nem_SSZone6	; ZONE 6 block
0001E050 F520                       		dc.w $F520
0001E052                            ; ---------------------------------------------------------------------------
0001E052                            ; Pattern load cues - GHZ animals
0001E052                            ; ---------------------------------------------------------------------------
0001E052 0001                       PLC_GHZAnimals:	dc.w 1
0001E054 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E058 B000                       		dc.w $B000
0001E05A 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E05E B240                       		dc.w $B240
0001E060                            ; ---------------------------------------------------------------------------
0001E060                            ; Pattern load cues - LZ animals
0001E060                            ; ---------------------------------------------------------------------------
0001E060 0001                       PLC_LZAnimals:	dc.w 1
0001E062 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001E066 B000                       		dc.w $B000
0001E068 0000 0000                  		dc.l Nem_Seal		; seal
0001E06C B240                       		dc.w $B240
0001E06E                            ; ---------------------------------------------------------------------------
0001E06E                            ; Pattern load cues - MZ animals
0001E06E                            ; ---------------------------------------------------------------------------
0001E06E 0001                       PLC_MZAnimals:	dc.w 1
0001E070 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001E074 B000                       		dc.w $B000
0001E076 0000 0000                  		dc.l Nem_Seal		; seal
0001E07A B240                       		dc.w $B240
0001E07C                            ; ---------------------------------------------------------------------------
0001E07C                            ; Pattern load cues - SLZ animals
0001E07C                            ; ---------------------------------------------------------------------------
0001E07C 0001                       PLC_SLZAnimals:	dc.w 1
0001E07E 0000 0000                  		dc.l Nem_Pig		; pig
0001E082 B000                       		dc.w $B000
0001E084 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E088 B240                       		dc.w $B240
0001E08A                            ; ---------------------------------------------------------------------------
0001E08A                            ; Pattern load cues - SYZ animals
0001E08A                            ; ---------------------------------------------------------------------------
0001E08A 0001                       PLC_SYZAnimals:	dc.w 1
0001E08C 0000 0000                  		dc.l Nem_Pig		; pig
0001E090 B000                       		dc.w $B000
0001E092 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E096 B240                       		dc.w $B240
0001E098                            ; ---------------------------------------------------------------------------
0001E098                            ; Pattern load cues - SBZ animals
0001E098                            ; ---------------------------------------------------------------------------
0001E098 0001                       PLC_SBZAnimals:	dc.w 1
0001E09A 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E09E B000                       		dc.w $B000
0001E0A0 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E0A4 B240                       		dc.w $B240
0001E0A6                            ; ---------------------------------------------------------------------------
0001E0A6                            ; Pattern load cues - special stage results screen
0001E0A6                            ; ---------------------------------------------------------------------------
0001E0A6 0001                       PLC_SpeStResult:dc.w 1
0001E0A8 0000 0000                  		dc.l Nem_ResultEm	; emeralds
0001E0AC A820                       		dc.w $A820
0001E0AE 0000 0000                  		dc.l Nem_MiniSonic	; mini Sonic
0001E0B2 AA20                       		dc.w $AA20
0001E0B4                            ; ---------------------------------------------------------------------------
0001E0B4                            ; Pattern load cues - ending sequence
0001E0B4                            ; ---------------------------------------------------------------------------
0001E0B4 000E                       PLC_Ending:	dc.w $E
0001E0B6 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0001E0BA 0000                       		dc.w 0
0001E0BC 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001E0C0 39A0                       		dc.w $39A0
0001E0C2 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001E0C6 6B00                       		dc.w $6B00
0001E0C8 0000 0000                  		dc.l Nem_EndFlower	; flowers
0001E0CC 7400                       		dc.w $7400
0001E0CE 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001E0D2 78A0                       		dc.w $78A0
0001E0D4 0000 0000                  		dc.l Nem_EndSonic	; Sonic
0001E0D8 7C20                       		dc.w $7C20
0001E0DA 0000 0000                  		dc.l Nem_EndEggman	; Eggman's death (unused)
0001E0DE A480                       		dc.w $A480
0001E0E0 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E0E4 AA60                       		dc.w $AA60
0001E0E6 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E0EA ACA0                       		dc.w $ACA0
0001E0EC 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001E0F0 AE60                       		dc.w $AE60
0001E0F2 0000 0000                  		dc.l Nem_Seal		; seal
0001E0F6 B0A0                       		dc.w $B0A0
0001E0F8 0000 0000                  		dc.l Nem_Pig		; pig
0001E0FC B260                       		dc.w $B260
0001E0FE 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E102 B4A0                       		dc.w $B4A0
0001E104 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001E108 B660                       		dc.w $B660
0001E10A 0000 0000                  		dc.l Nem_EndStH		; "SONIC THE HEDGEHOG"
0001E10E B8A0                       		dc.w $B8A0
0001E110                            ; ---------------------------------------------------------------------------
0001E110                            ; Pattern load cues - "TRY AGAIN" and "END" screens
0001E110                            ; ---------------------------------------------------------------------------
0001E110 0002                       PLC_TryAgain:	dc.w 2
0001E112 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001E116 78A0                       		dc.w $78A0
0001E118 0000 0000                  		dc.l Nem_TryAgain	; Eggman
0001E11C 7C20                       		dc.w $7C20
0001E11E 0000 0000                  		dc.l Nem_CreditText	; credits alphabet
0001E122 B400                       		dc.w $B400
0001E124                            ; ---------------------------------------------------------------------------
0001E124                            ; Pattern load cues - Eggman on SBZ 2
0001E124                            ; ---------------------------------------------------------------------------
0001E124 0002                       PLC_EggmanSBZ2:	dc.w 2
0001E126 0000 0000                  		dc.l Nem_SbzBlock	; block
0001E12A A300                       		dc.w $A300
0001E12C 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman
0001E130 8000                       		dc.w $8000
0001E132 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E136 9400                       		dc.w $9400
0001E138                            ; ---------------------------------------------------------------------------
0001E138                            ; Pattern load cues - final boss
0001E138                            ; ---------------------------------------------------------------------------
0001E138 0004                       PLC_FZBoss:	dc.w 4
0001E13A 0000 0000                  		dc.l Nem_FzEggman	; Eggman after boss
0001E13E 7400                       		dc.w $7400
0001E140 0000 0000                  		dc.l Nem_FzBoss		; FZ boss
0001E144 6000                       		dc.w $6000
0001E146 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001E14A 8000                       		dc.w $8000
0001E14C 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman without ship
0001E150 8E00                       		dc.w $8E00
0001E152 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001E156 A540                       		dc.w $A540
0001E158                            		even
0001E158                            		even
0001E158                            
0001E158                            		incbin	misc\padding.bin
0001E246                            		even
0001E246                            Nem_SegaLogo:	incbin	artnem\segalogo.bin	; large Sega logo
0001E6A8                            		even
0001E6A8                            Eni_SegaLogo:	incbin	mapeni\segalogo.bin	; large Sega logo (mappings)
0001E7A0                            		even
0001E7A0                            Eni_Title:	incbin	mapeni\titlescr.bin	; title screen foreground (mappings)
0001E8B4                            		even
0001E8B4                            Nem_TitleFg:	incbin	artnem\titlefor.bin	; title screen foreground
0001F8C0                            		even
0001F8C0                            Nem_TitleSonic:	incbin	artnem\titleson.bin	; Sonic on title screen
00022B16 00                         		even
00022B16                            Nem_TitleTM:	incbin	artnem\titletm.bin	; TM on title screen
00022B4A                            		even
00022B4A                            Eni_JapNames:	incbin	mapeni\japcreds.bin	; Japanese credits (mappings)
00022C08                            		even
00022C08                            Nem_JapNames:	incbin	artnem\japcreds.bin	; Japanese credits
000230B0                            		even
000230B0                            Eni_Idiot:	incbin	mapeni\idiot.bin	; Idiot (mappings)
0002310E                            		even
0002310E                            Nem_Idiot:	incbin	artnem\idiot.bin	; Idiot
00023D14                            		even
00023D14                            ; ---------------------------------------------------------------------------
00023D14                            ; Sprite mappings - Sonic
00023D14                            ; ---------------------------------------------------------------------------
00023D14                            Map_Sonic:
00023D14                            	include "_maps\Sonic.asm"
00023D14                            Map_d54c:
00023D14 0000                       Map_d54c_0: 	dc.w Map_d54c_B8-Map_d54c
00023D16 0000                       Map_d54c_2: 	dc.w Map_d54c_B9-Map_d54c
00023D18 0000                       Map_d54c_4: 	dc.w Map_d54c_C4-Map_d54c
00023D1A 0000                       Map_d54c_6: 	dc.w Map_d54c_D4-Map_d54c
00023D1C 0000                       Map_d54c_8: 	dc.w Map_d54c_E4-Map_d54c
00023D1E 0000                       Map_d54c_A: 	dc.w Map_d54c_F4-Map_d54c
00023D20 0000                       Map_d54c_C: 	dc.w Map_d54c_104-Map_d54c
00023D22 0000                       Map_d54c_E: 	dc.w Map_d54c_119-Map_d54c
00023D24 0000                       Map_d54c_10: 	dc.w Map_d54c_124-Map_d54c
00023D26 0000                       Map_d54c_12: 	dc.w Map_d54c_12F-Map_d54c
00023D28 0000                       Map_d54c_14: 	dc.w Map_d54c_144-Map_d54c
00023D2A 0000                       Map_d54c_16: 	dc.w Map_d54c_14F-Map_d54c
00023D2C 0000                       Map_d54c_18: 	dc.w Map_d54c_15F-Map_d54c
00023D2E 0000                       Map_d54c_1A: 	dc.w Map_d54c_179-Map_d54c
00023D30 0000                       Map_d54c_1C: 	dc.w Map_d54c_198-Map_d54c
00023D32 0000                       Map_d54c_1E: 	dc.w Map_d54c_1AD-Map_d54c
00023D34 0000                       Map_d54c_20: 	dc.w Map_d54c_1C7-Map_d54c
00023D36 0000                       Map_d54c_22: 	dc.w Map_d54c_1DC-Map_d54c
00023D38 0000                       Map_d54c_24: 	dc.w Map_d54c_1F6-Map_d54c
00023D3A 0000                       Map_d54c_26: 	dc.w Map_d54c_20B-Map_d54c
00023D3C 0000                       Map_d54c_28: 	dc.w Map_d54c_216-Map_d54c
00023D3E 0000                       Map_d54c_2A: 	dc.w Map_d54c_221-Map_d54c
00023D40 0000                       Map_d54c_2C: 	dc.w Map_d54c_236-Map_d54c
00023D42 0000                       Map_d54c_2E: 	dc.w Map_d54c_241-Map_d54c
00023D44 0000                       Map_d54c_30: 	dc.w Map_d54c_251-Map_d54c
00023D46 0000                       Map_d54c_32: 	dc.w Map_d54c_270-Map_d54c
00023D48 0000                       Map_d54c_34: 	dc.w Map_d54c_28F-Map_d54c
00023D4A 0000                       Map_d54c_36: 	dc.w Map_d54c_2A4-Map_d54c
00023D4C 0000                       Map_d54c_38: 	dc.w Map_d54c_2BE-Map_d54c
00023D4E 0000                       Map_d54c_3A: 	dc.w Map_d54c_2D3-Map_d54c
00023D50 0000                       Map_d54c_3C: 	dc.w Map_d54c_2ED-Map_d54c
00023D52 0000                       Map_d54c_3E: 	dc.w Map_d54c_2F8-Map_d54c
00023D54 0000                       Map_d54c_40: 	dc.w Map_d54c_303-Map_d54c
00023D56 0000                       Map_d54c_42: 	dc.w Map_d54c_30E-Map_d54c
00023D58 0000                       Map_d54c_44: 	dc.w Map_d54c_319-Map_d54c
00023D5A 0000                       Map_d54c_46: 	dc.w Map_d54c_32E-Map_d54c
00023D5C 0000                       Map_d54c_48: 	dc.w Map_d54c_33E-Map_d54c
00023D5E 0000                       Map_d54c_4A: 	dc.w Map_d54c_353-Map_d54c
00023D60 0000                       Map_d54c_4C: 	dc.w Map_d54c_363-Map_d54c
00023D62 0000                       Map_d54c_4E: 	dc.w Map_d54c_36E-Map_d54c
00023D64 0000                       Map_d54c_50: 	dc.w Map_d54c_379-Map_d54c
00023D66 0000                       Map_d54c_52: 	dc.w Map_d54c_384-Map_d54c
00023D68 0000                       Map_d54c_54: 	dc.w Map_d54c_38F-Map_d54c
00023D6A 0000                       Map_d54c_56: 	dc.w Map_d54c_3A4-Map_d54c
00023D6C 0000                       Map_d54c_58: 	dc.w Map_d54c_3AF-Map_d54c
00023D6E 0000                       Map_d54c_5A: 	dc.w Map_d54c_3C4-Map_d54c
00023D70 0000                       Map_d54c_5C: 	dc.w Map_d54c_3CF-Map_d54c
00023D72 0000                       Map_d54c_5E: 	dc.w Map_d54c_3D5-Map_d54c
00023D74 0000                       Map_d54c_60: 	dc.w Map_d54c_3DB-Map_d54c
00023D76 0000                       Map_d54c_62: 	dc.w Map_d54c_3E1-Map_d54c
00023D78 0000                       Map_d54c_64: 	dc.w Map_d54c_3E7-Map_d54c
00023D7A 0000                       Map_d54c_66: 	dc.w Map_d54c_3ED-Map_d54c
00023D7C 0000                       Map_d54c_68: 	dc.w Map_d54c_3F8-Map_d54c
00023D7E 0000                       Map_d54c_6A: 	dc.w Map_d54c_3FE-Map_d54c
00023D80 0000                       Map_d54c_6C: 	dc.w Map_d54c_409-Map_d54c
00023D82 0000                       Map_d54c_6E: 	dc.w Map_d54c_40F-Map_d54c
00023D84 0000                       Map_d54c_70: 	dc.w Map_d54c_41A-Map_d54c
00023D86 0000                       Map_d54c_72: 	dc.w Map_d54c_42F-Map_d54c
00023D88 0000                       Map_d54c_74: 	dc.w Map_d54c_44E-Map_d54c
00023D8A 0000                       Map_d54c_76: 	dc.w Map_d54c_459-Map_d54c
00023D8C 0000                       Map_d54c_78: 	dc.w Map_d54c_464-Map_d54c
00023D8E 0000                       Map_d54c_7A: 	dc.w Map_d54c_479-Map_d54c
00023D90 0000                       Map_d54c_7C: 	dc.w Map_d54c_484-Map_d54c
00023D92 0000                       Map_d54c_7E: 	dc.w Map_d54c_494-Map_d54c
00023D94 0000                       Map_d54c_80: 	dc.w Map_d54c_4A9-Map_d54c
00023D96 0000                       Map_d54c_82: 	dc.w Map_d54c_4B9-Map_d54c
00023D98 0000                       Map_d54c_84: 	dc.w Map_d54c_4CE-Map_d54c
00023D9A 0000                       Map_d54c_86: 	dc.w Map_d54c_4E3-Map_d54c
00023D9C 0000                       Map_d54c_88: 	dc.w Map_d54c_4FD-Map_d54c
00023D9E 0000                       Map_d54c_8A: 	dc.w Map_d54c_517-Map_d54c
00023DA0 0000                       Map_d54c_8C: 	dc.w Map_d54c_522-Map_d54c
00023DA2 0000                       Map_d54c_8E: 	dc.w Map_d54c_532-Map_d54c
00023DA4 0000                       Map_d54c_90: 	dc.w Map_d54c_53D-Map_d54c
00023DA6 0000                       Map_d54c_92: 	dc.w Map_d54c_54D-Map_d54c
00023DA8 0000                       Map_d54c_94: 	dc.w Map_d54c_558-Map_d54c
00023DAA 0000                       Map_d54c_96: 	dc.w Map_d54c_568-Map_d54c
00023DAC 0000                       Map_d54c_98: 	dc.w Map_d54c_578-Map_d54c
00023DAE 0000                       Map_d54c_9A: 	dc.w Map_d54c_592-Map_d54c
00023DB0 0000                       Map_d54c_9C: 	dc.w Map_d54c_5AC-Map_d54c
00023DB2 0000                       Map_d54c_9E: 	dc.w Map_d54c_5B7-Map_d54c
00023DB4 0000                       Map_d54c_A0: 	dc.w Map_d54c_5C7-Map_d54c
00023DB6 0000                       Map_d54c_A2: 	dc.w Map_d54c_5CD-Map_d54c
00023DB8 0000                       Map_d54c_A4: 	dc.w Map_d54c_5D3-Map_d54c
00023DBA 0000                       Map_d54c_A6: 	dc.w Map_d54c_5D9-Map_d54c
00023DBC 0000                       Map_d54c_A8: 	dc.w Map_d54c_5EE-Map_d54c
00023DBE 0000                       Map_d54c_AA: 	dc.w Map_d54c_5FE-Map_d54c
00023DC0 0000                       Map_d54c_AC: 	dc.w Map_d54c_60E-Map_d54c
00023DC2 0000                       Map_d54c_AE: 	dc.w Map_d54c_61E-Map_d54c
00023DC4 0000                       Map_d54c_B0: 	dc.w Map_d54c_629-Map_d54c
00023DC6 0000                       Map_d54c_B2: 	dc.w Map_d54c_634-Map_d54c
00023DC8 0000                       Map_d54c_B4: 	dc.w Map_d54c_644-Map_d54c
00023DCA 0000                       Map_d54c_B6: 	dc.w Map_d54c_64F-Map_d54c
00023DCC 00                         Map_d54c_B8: 	dc.b $0
00023DCD 02                         Map_d54c_B9: 	dc.b $2
00023DCE ED0E 0000 ED               	dc.b $ED, $E, $0, $0, $ED
00023DD3 0509 000C F5               	dc.b $5, $9, $0, $C, $F5
00023DD8 03                         Map_d54c_C4: 	dc.b $3
00023DD9 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00023DDE FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00023DE3 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00023DE8 03                         Map_d54c_D4: 	dc.b $3
00023DE9 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00023DEE FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00023DF3 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00023DF8 03                         Map_d54c_E4: 	dc.b $3
00023DF9 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00023DFE FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00023E03 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00023E08 03                         Map_d54c_F4: 	dc.b $3
00023E09 EC0A 0000 F0               	dc.b $EC, $A, $0, $0, $F0
00023E0E 0408 0009 F0               	dc.b $4, $8, $0, $9, $F0
00023E13 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00023E18 04                         Map_d54c_104: 	dc.b $4
00023E19 EB0D 0000 EC               	dc.b $EB, $D, $0, $0, $EC
00023E1E FB09 0008 EC               	dc.b $FB, $9, $0, $8, $EC
00023E23 FB06 000E 04               	dc.b $FB, $6, $0, $E, $4
00023E28 0B04 0014 EC               	dc.b $B, $4, $0, $14, $EC
00023E2D 02                         Map_d54c_119: 	dc.b $2
00023E2E EC0D 0000 ED               	dc.b $EC, $D, $0, $0, $ED
00023E33 FC0E 0008 F5               	dc.b $FC, $E, $0, $8, $F5
00023E38 02                         Map_d54c_124: 	dc.b $2
00023E39 ED09 0000 F3               	dc.b $ED, $9, $0, $0, $F3
00023E3E FD0A 0006 F3               	dc.b $FD, $A, $0, $6, $F3
00023E43 04                         Map_d54c_12F: 	dc.b $4
00023E44 EB09 0000 F4               	dc.b $EB, $9, $0, $0, $F4
00023E49 FB09 0006 EC               	dc.b $FB, $9, $0, $6, $EC
00023E4E FB06 000C 04               	dc.b $FB, $6, $0, $C, $4
00023E53 0B04 0012 EC               	dc.b $B, $4, $0, $12, $EC
00023E58 02                         Map_d54c_144: 	dc.b $2
00023E59 FC0E 0000 EB               	dc.b $FC, $E, $0, $0, $EB
00023E5E EC09 000C F3               	dc.b $EC, $9, $0, $C, $F3
00023E63 03                         Map_d54c_14F: 	dc.b $3
00023E64 ED0D 0000 EC               	dc.b $ED, $D, $0, $0, $EC
00023E69 FD0C 0008 F4               	dc.b $FD, $C, $0, $8, $F4
00023E6E 0509 000C F4               	dc.b $5, $9, $0, $C, $F4
00023E73 05                         Map_d54c_15F: 	dc.b $5
00023E74 EB09 0000 EB               	dc.b $EB, $9, $0, $0, $EB
00023E79 EB06 0006 03               	dc.b $EB, $6, $0, $6, $3
00023E7E FB08 000C EB               	dc.b $FB, $8, $0, $C, $EB
00023E83 0309 000F F3               	dc.b $3, $9, $0, $F, $F3
00023E88 1300 0015 FB               	dc.b $13, $0, $0, $15, $FB
00023E8D 06                         Map_d54c_179: 	dc.b $6
00023E8E EC09 0000 EC               	dc.b $EC, $9, $0, $0, $EC
00023E93 EC01 0006 04               	dc.b $EC, $1, $0, $6, $4
00023E98 FC0C 0008 EC               	dc.b $FC, $C, $0, $8, $EC
00023E9D 0409 000C F4               	dc.b $4, $9, $0, $C, $F4
00023EA2 FC05 0012 0C               	dc.b $FC, $5, $0, $12, $C
00023EA7 F400 0016 14               	dc.b $F4, $0, $0, $16, $14
00023EAC 04                         Map_d54c_198: 	dc.b $4
00023EAD ED09 0000 ED               	dc.b $ED, $9, $0, $0, $ED
00023EB2 ED01 0006 05               	dc.b $ED, $1, $0, $6, $5
00023EB7 FD0D 0008 F5               	dc.b $FD, $D, $0, $8, $F5
00023EBC 0D08 0010 FD               	dc.b $D, $8, $0, $10, $FD
00023EC1 05                         Map_d54c_1AD: 	dc.b $5
00023EC2 EB09 0000 EB               	dc.b $EB, $9, $0, $0, $EB
00023EC7 EB05 0006 03               	dc.b $EB, $5, $0, $6, $3
00023ECC FB0D 000A F3               	dc.b $FB, $D, $0, $A, $F3
00023ED1 0B08 0012 F3               	dc.b $B, $8, $0, $12, $F3
00023ED6 1304 0015 FB               	dc.b $13, $4, $0, $15, $FB
00023EDB 04                         Map_d54c_1C7: 	dc.b $4
00023EDC EC09 0000 EC               	dc.b $EC, $9, $0, $0, $EC
00023EE1 EC01 0006 04               	dc.b $EC, $1, $0, $6, $4
00023EE6 FC0D 0008 F4               	dc.b $FC, $D, $0, $8, $F4
00023EEB 0C08 0010 FC               	dc.b $C, $8, $0, $10, $FC
00023EF0 05                         Map_d54c_1DC: 	dc.b $5
00023EF1 ED09 0000 ED               	dc.b $ED, $9, $0, $0, $ED
00023EF6 ED01 0006 05               	dc.b $ED, $1, $0, $6, $5
00023EFB FD00 0008 ED               	dc.b $FD, $0, $0, $8, $ED
00023F00 FD0D 0009 F5               	dc.b $FD, $D, $0, $9, $F5
00023F05 0D08 0011 FD               	dc.b $D, $8, $0, $11, $FD
00023F0A 04                         Map_d54c_1F6: 	dc.b $4
00023F0B F407 0000 EB               	dc.b $F4, $7, $0, $0, $EB
00023F10 EC09 0008 FB               	dc.b $EC, $9, $0, $8, $FB
00023F15 FC04 000E FB               	dc.b $FC, $4, $0, $E, $FB
00023F1A 0409 0010 FB               	dc.b $4, $9, $0, $10, $FB
00023F1F 02                         Map_d54c_20B: 	dc.b $2
00023F20 F407 0000 EC               	dc.b $F4, $7, $0, $0, $EC
00023F25 EC0B 0008 FC               	dc.b $EC, $B, $0, $8, $FC
00023F2A 02                         Map_d54c_216: 	dc.b $2
00023F2B F406 0000 ED               	dc.b $F4, $6, $0, $0, $ED
00023F30 F40A 0006 FD               	dc.b $F4, $A, $0, $6, $FD
00023F35 04                         Map_d54c_221: 	dc.b $4
00023F36 F406 0000 EB               	dc.b $F4, $6, $0, $0, $EB
00023F3B EC09 0006 FB               	dc.b $EC, $9, $0, $6, $FB
00023F40 FC04 000C FB               	dc.b $FC, $4, $0, $C, $FB
00023F45 0409 000E FB               	dc.b $4, $9, $0, $E, $FB
00023F4A 02                         Map_d54c_236: 	dc.b $2
00023F4B F406 0000 EC               	dc.b $F4, $6, $0, $0, $EC
00023F50 F40B 0006 FC               	dc.b $F4, $B, $0, $6, $FC
00023F55 03                         Map_d54c_241: 	dc.b $3
00023F56 F407 0000 ED               	dc.b $F4, $7, $0, $0, $ED
00023F5B EC00 0008 FD               	dc.b $EC, $0, $0, $8, $FD
00023F60 F40A 0009 FD               	dc.b $F4, $A, $0, $9, $FD
00023F65 06                         Map_d54c_251: 	dc.b $6
00023F66 FD06 0000 EB               	dc.b $FD, $6, $0, $0, $EB
00023F6B ED04 0006 F3               	dc.b $ED, $4, $0, $6, $F3
00023F70 F504 0008 EB               	dc.b $F5, $4, $0, $8, $EB
00023F75 F50A 000A FB               	dc.b $F5, $A, $0, $A, $FB
00023F7A 0D00 0013 FB               	dc.b $D, $0, $0, $13, $FB
00023F7F FD00 0014 13               	dc.b $FD, $0, $0, $14, $13
00023F84 06                         Map_d54c_270: 	dc.b $6
00023F85 FC06 0000 EC               	dc.b $FC, $6, $0, $0, $EC
00023F8A E408 0006 F4               	dc.b $E4, $8, $0, $6, $F4
00023F8F EC04 0009 FC               	dc.b $EC, $4, $0, $9, $FC
00023F94 F404 000B EC               	dc.b $F4, $4, $0, $B, $EC
00023F99 F40A 000D FC               	dc.b $F4, $A, $0, $D, $FC
00023F9E 0C00 0016 FC               	dc.b $C, $0, $0, $16, $FC
00023FA3 04                         Map_d54c_28F: 	dc.b $4
00023FA4 FB06 0000 ED               	dc.b $FB, $6, $0, $0, $ED
00023FA9 F304 0006 ED               	dc.b $F3, $4, $0, $6, $ED
00023FAE EB0A 0008 FD               	dc.b $EB, $A, $0, $8, $FD
00023FB3 0304 0011 FD               	dc.b $3, $4, $0, $11, $FD
00023FB8 05                         Map_d54c_2A4: 	dc.b $5
00023FB9 FD06 0000 EB               	dc.b $FD, $6, $0, $0, $EB
00023FBE ED08 0006 F3               	dc.b $ED, $8, $0, $6, $F3
00023FC3 F504 0009 EB               	dc.b $F5, $4, $0, $9, $EB
00023FC8 F50D 000B FB               	dc.b $F5, $D, $0, $B, $FB
00023FCD 0508 0013 FB               	dc.b $5, $8, $0, $13, $FB
00023FD2 04                         Map_d54c_2BE: 	dc.b $4
00023FD3 FC06 0000 EC               	dc.b $FC, $6, $0, $0, $EC
00023FD8 F404 0006 EC               	dc.b $F4, $4, $0, $6, $EC
00023FDD EC0A 0008 FC               	dc.b $EC, $A, $0, $8, $FC
00023FE2 0404 0011 FC               	dc.b $4, $4, $0, $11, $FC
00023FE7 05                         Map_d54c_2D3: 	dc.b $5
00023FE8 FB06 0000 ED               	dc.b $FB, $6, $0, $0, $ED
00023FED EB0A 0006 FD               	dc.b $EB, $A, $0, $6, $FD
00023FF2 F304 000F ED               	dc.b $F3, $4, $0, $F, $ED
00023FF7 0304 0011 FD               	dc.b $3, $4, $0, $11, $FD
00023FFC 0B00 0013 FD               	dc.b $B, $0, $0, $13, $FD
00024001 02                         Map_d54c_2ED: 	dc.b $2
00024002 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00024007 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
0002400C 02                         Map_d54c_2F8: 	dc.b $2
0002400D EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00024012 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
00024017 02                         Map_d54c_303: 	dc.b $2
00024018 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
0002401D FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
00024022 02                         Map_d54c_30E: 	dc.b $2
00024023 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00024028 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
0002402D 04                         Map_d54c_319: 	dc.b $4
0002402E EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00024033 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00024038 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
0002403D FE00 0014 EE               	dc.b $FE, $0, $0, $14, $EE
00024042 03                         Map_d54c_32E: 	dc.b $3
00024043 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00024048 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
0002404D FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00024052 04                         Map_d54c_33E: 	dc.b $4
00024053 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00024058 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
0002405D FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00024062 FE00 0014 EE               	dc.b $FE, $0, $0, $14, $EE
00024067 03                         Map_d54c_353: 	dc.b $3
00024068 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
0002406D EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00024072 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00024077 02                         Map_d54c_363: 	dc.b $2
00024078 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
0002407D F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00024082 02                         Map_d54c_36E: 	dc.b $2
00024083 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00024088 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
0002408D 02                         Map_d54c_379: 	dc.b $2
0002408E F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00024093 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00024098 02                         Map_d54c_384: 	dc.b $2
00024099 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
0002409E F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
000240A3 04                         Map_d54c_38F: 	dc.b $4
000240A4 FA06 0000 EE               	dc.b $FA, $6, $0, $0, $EE
000240A9 F204 0006 EE               	dc.b $F2, $4, $0, $6, $EE
000240AE EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
000240B3 0A00 0014 FE               	dc.b $A, $0, $0, $14, $FE
000240B8 02                         Map_d54c_3A4: 	dc.b $2
000240B9 F207 0000 EE               	dc.b $F2, $7, $0, $0, $EE
000240BE EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
000240C3 04                         Map_d54c_3AF: 	dc.b $4
000240C4 FA06 0000 EE               	dc.b $FA, $6, $0, $0, $EE
000240C9 F204 0006 EE               	dc.b $F2, $4, $0, $6, $EE
000240CE EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
000240D3 0A00 0014 FE               	dc.b $A, $0, $0, $14, $FE
000240D8 02                         Map_d54c_3C4: 	dc.b $2
000240D9 F207 0000 EE               	dc.b $F2, $7, $0, $0, $EE
000240DE EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
000240E3 01                         Map_d54c_3CF: 	dc.b $1
000240E4 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000240E9 01                         Map_d54c_3D5: 	dc.b $1
000240EA F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000240EF 01                         Map_d54c_3DB: 	dc.b $1
000240F0 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000240F5 01                         Map_d54c_3E1: 	dc.b $1
000240F6 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000240FB 01                         Map_d54c_3E7: 	dc.b $1
000240FC F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00024101 02                         Map_d54c_3ED: 	dc.b $2
00024102 F40E 0000 EC               	dc.b $F4, $E, $0, $0, $EC
00024107 F402 000C 0C               	dc.b $F4, $2, $0, $C, $C
0002410C 01                         Map_d54c_3F8: 	dc.b $1
0002410D F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00024112 02                         Map_d54c_3FE: 	dc.b $2
00024113 EC0B 0000 F4               	dc.b $EC, $B, $0, $0, $F4
00024118 0C08 000C F4               	dc.b $C, $8, $0, $C, $F4
0002411D 01                         Map_d54c_409: 	dc.b $1
0002411E F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00024123 02                         Map_d54c_40F: 	dc.b $2
00024124 ED09 0000 F0               	dc.b $ED, $9, $0, $0, $F0
00024129 FD0E 0006 F0               	dc.b $FD, $E, $0, $6, $F0
0002412E 04                         Map_d54c_41A: 	dc.b $4
0002412F ED09 0000 F0               	dc.b $ED, $9, $0, $0, $F0
00024134 FD0D 0006 F0               	dc.b $FD, $D, $0, $6, $F0
00024139 0D04 000E 00               	dc.b $D, $4, $0, $E, $0
0002413E 0500 0010 E8               	dc.b $5, $0, $0, $10, $E8
00024143 06                         Map_d54c_42F: 	dc.b $6
00024144 F404 0000 F4               	dc.b $F4, $4, $0, $0, $F4
00024149 FC0D 0002 EC               	dc.b $FC, $D, $0, $2, $EC
0002414E 0C08 000A F4               	dc.b $C, $8, $0, $A, $F4
00024153 0C00 000D EC               	dc.b $C, $0, $0, $D, $EC
00024158 FC02 000E 0C               	dc.b $FC, $2, $0, $E, $C
0002415D F400 0011 04               	dc.b $F4, $0, $0, $11, $4
00024162 02                         Map_d54c_44E: 	dc.b $2
00024163 040D 0000 E4               	dc.b $4, $D, $0, $0, $E4
00024168 EC0A 0008 EC               	dc.b $EC, $A, $0, $8, $EC
0002416D 02                         Map_d54c_459: 	dc.b $2
0002416E 040D 0000 E3               	dc.b $4, $D, $0, $0, $E3
00024173 EC0A 0008 EB               	dc.b $EC, $A, $0, $8, $EB
00024178 04                         Map_d54c_464: 	dc.b $4
00024179 F40D 0000 FC               	dc.b $F4, $D, $0, $0, $FC
0002417E F705 0008 EC               	dc.b $F7, $5, $0, $8, $EC
00024183 0408 000C 03               	dc.b $4, $8, $0, $C, $3
00024188 0700 000F EC               	dc.b $7, $0, $0, $F, $EC
0002418D 02                         Map_d54c_479: 	dc.b $2
0002418E F40A 0000 E8               	dc.b $F4, $A, $0, $0, $E8
00024193 F40A 0800 00               	dc.b $F4, $A, $8, $0, $0
00024198 03                         Map_d54c_484: 	dc.b $3
00024199 F40D 0000 EB               	dc.b $F4, $D, $0, $0, $EB
0002419E FC00 0008 0B               	dc.b $FC, $0, $0, $8, $B
000241A3 040C 0009 EC               	dc.b $4, $C, $0, $9, $EC
000241A8 04                         Map_d54c_494: 	dc.b $4
000241A9 F40D 0000 FC               	dc.b $F4, $D, $0, $0, $FC
000241AE F705 0008 EC               	dc.b $F7, $5, $0, $8, $EC
000241B3 0408 000C 02               	dc.b $4, $8, $0, $C, $2
000241B8 0700 000F EC               	dc.b $7, $0, $0, $F, $EC
000241BD 03                         Map_d54c_4A9: 	dc.b $3
000241BE E80B 0000 F0               	dc.b $E8, $B, $0, $0, $F0
000241C3 0804 000C F8               	dc.b $8, $4, $0, $C, $F8
000241C8 1000 000E F8               	dc.b $10, $0, $0, $E, $F8
000241CD 04                         Map_d54c_4B9: 	dc.b $4
000241CE F80E 0000 E8               	dc.b $F8, $E, $0, $0, $E8
000241D3 0005 000C 08               	dc.b $0, $5, $0, $C, $8
000241D8 F800 0010 08               	dc.b $F8, $0, $0, $10, $8
000241DD F000 0011 F8               	dc.b $F0, $0, $0, $11, $F8
000241E2 04                         Map_d54c_4CE: 	dc.b $4
000241E3 F80E 0000 E8               	dc.b $F8, $E, $0, $0, $E8
000241E8 0005 000C 08               	dc.b $0, $5, $0, $C, $8
000241ED F800 0010 08               	dc.b $F8, $0, $0, $10, $8
000241F2 F000 0011 F8               	dc.b $F0, $0, $0, $11, $F8
000241F7 05                         Map_d54c_4E3: 	dc.b $5
000241F8 E80A 0000 F4               	dc.b $E8, $A, $0, $0, $F4
000241FD F001 0009 0C               	dc.b $F0, $1, $0, $9, $C
00024202 0009 000B F4               	dc.b $0, $9, $0, $B, $F4
00024207 1004 0011 F4               	dc.b $10, $4, $0, $11, $F4
0002420C 0000 0013 EC               	dc.b $0, $0, $0, $13, $EC
00024211 05                         Map_d54c_4FD: 	dc.b $5
00024212 E80A 0000 F4               	dc.b $E8, $A, $0, $0, $F4
00024217 E801 0009 0C               	dc.b $E8, $1, $0, $9, $C
0002421C 0009 000B F4               	dc.b $0, $9, $0, $B, $F4
00024221 1004 0011 F4               	dc.b $10, $4, $0, $11, $F4
00024226 0000 0013 EC               	dc.b $0, $0, $0, $13, $EC
0002422B 02                         Map_d54c_517: 	dc.b $2
0002422C ED0A 0000 F3               	dc.b $ED, $A, $0, $0, $F3
00024231 050D 0009 EB               	dc.b $5, $D, $0, $9, $EB
00024236 03                         Map_d54c_522: 	dc.b $3
00024237 EC0A 0000 F3               	dc.b $EC, $A, $0, $0, $F3
0002423C 0408 0009 F3               	dc.b $4, $8, $0, $9, $F3
00024241 0C04 000C F3               	dc.b $C, $4, $0, $C, $F3
00024246 02                         Map_d54c_532: 	dc.b $2
00024247 ED0A 0000 F3               	dc.b $ED, $A, $0, $0, $F3
0002424C 050D 0009 EB               	dc.b $5, $D, $0, $9, $EB
00024251 03                         Map_d54c_53D: 	dc.b $3
00024252 EC0A 0000 F3               	dc.b $EC, $A, $0, $0, $F3
00024257 0408 0009 F3               	dc.b $4, $8, $0, $9, $F3
0002425C 0C04 000C F3               	dc.b $C, $4, $0, $C, $F3
00024261 02                         Map_d54c_54D: 	dc.b $2
00024262 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00024267 FC0E 0006 F0               	dc.b $FC, $E, $0, $6, $F0
0002426C 03                         Map_d54c_558: 	dc.b $3
0002426D EC0A 0000 F0               	dc.b $EC, $A, $0, $0, $F0
00024272 0405 0009 F8               	dc.b $4, $5, $0, $9, $F8
00024277 E400 000D F8               	dc.b $E4, $0, $0, $D, $F8
0002427C 03                         Map_d54c_568: 	dc.b $3
0002427D E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
00024282 E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
00024287 F80B 000A F4               	dc.b $F8, $B, $0, $A, $F4
0002428C 05                         Map_d54c_578: 	dc.b $5
0002428D E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
00024292 E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
00024297 F809 000A F4               	dc.b $F8, $9, $0, $A, $F4
0002429C 080C 0010 F4               	dc.b $8, $C, $0, $10, $F4
000242A1 1000 0014 F4               	dc.b $10, $0, $0, $14, $F4
000242A6 05                         Map_d54c_592: 	dc.b $5
000242A7 E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
000242AC E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
000242B1 F809 000A F4               	dc.b $F8, $9, $0, $A, $F4
000242B6 080C 0010 F4               	dc.b $8, $C, $0, $10, $F4
000242BB 1000 0014 F4               	dc.b $10, $0, $0, $14, $F4
000242C0 02                         Map_d54c_5AC: 	dc.b $2
000242C1 EC08 0000 F0               	dc.b $EC, $8, $0, $0, $F0
000242C6 F40F 0003 F0               	dc.b $F4, $F, $0, $3, $F0
000242CB 03                         Map_d54c_5B7: 	dc.b $3
000242CC EC08 0000 F0               	dc.b $EC, $8, $0, $0, $F0
000242D1 F40E 0003 F0               	dc.b $F4, $E, $0, $3, $F0
000242D6 0C08 000F F8               	dc.b $C, $8, $0, $F, $F8
000242DB 01                         Map_d54c_5C7: 	dc.b $1
000242DC F00B 0000 F4               	dc.b $F0, $B, $0, $0, $F4
000242E1 01                         Map_d54c_5CD: 	dc.b $1
000242E2 F406 0000 F8               	dc.b $F4, $6, $0, $0, $F8
000242E7 01                         Map_d54c_5D3: 	dc.b $1
000242E8 F801 0000 FC               	dc.b $F8, $1, $0, $0, $FC
000242ED 04                         Map_d54c_5D9: 	dc.b $4
000242EE F40D 0800 E4               	dc.b $F4, $D, $8, $0, $E4
000242F3 F705 0808 04               	dc.b $F7, $5, $8, $8, $4
000242F8 0408 080C E5               	dc.b $4, $8, $8, $C, $E5
000242FD 0700 080F 0C               	dc.b $7, $0, $8, $F, $C
00024302 03                         Map_d54c_5EE: 	dc.b $3
00024303 F40D 0800 F5               	dc.b $F4, $D, $8, $0, $F5
00024308 FC00 0808 ED               	dc.b $FC, $0, $8, $8, $ED
0002430D 040C 0809 F4               	dc.b $4, $C, $8, $9, $F4
00024312 03                         Map_d54c_5FE: 	dc.b $3
00024313 F00E 0000 EC               	dc.b $F0, $E, $0, $0, $EC
00024318 F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
0002431D 080C 000E F4               	dc.b $8, $C, $0, $E, $F4
00024322 03                         Map_d54c_60E: 	dc.b $3
00024323 EB09 0000 F4               	dc.b $EB, $9, $0, $0, $F4
00024328 FB0E 0006 EC               	dc.b $FB, $E, $0, $6, $EC
0002432D 0301 0012 0C               	dc.b $3, $1, $0, $12, $C
00024332 02                         Map_d54c_61E: 	dc.b $2
00024333 F00F 0000 EC               	dc.b $F0, $F, $0, $0, $EC
00024338 F802 0010 0C               	dc.b $F8, $2, $0, $10, $C
0002433D 02                         Map_d54c_629: 	dc.b $2
0002433E F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
00024343 EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
00024348 03                         Map_d54c_634: 	dc.b $3
00024349 ED0F 0000 F3               	dc.b $ED, $F, $0, $0, $F3
0002434E 0D00 0010 F3               	dc.b $D, $0, $0, $10, $F3
00024353 0D04 0011 03               	dc.b $D, $4, $0, $11, $3
00024358 02                         Map_d54c_644: 	dc.b $2
00024359 F60F 0000 EE               	dc.b $F6, $F, $0, $0, $EE
0002435E EE08 0010 F6               	dc.b $EE, $8, $0, $10, $F6
00024363 04                         Map_d54c_64F: 	dc.b $4
00024364 ED08 0000 F3               	dc.b $ED, $8, $0, $0, $F3
00024369 F50E 0003 EB               	dc.b $F5, $E, $0, $3, $EB
0002436E F503 000F 0B               	dc.b $F5, $3, $0, $F, $B
00024373 0D08 0013 F3               	dc.b $D, $8, $0, $13, $F3
00024378                            	even
00024378                            	even
00024378                            
00024378                            ; ---------------------------------------------------------------------------
00024378                            ; Uncompressed graphics	loading	array for Sonic
00024378                            ; ---------------------------------------------------------------------------
00024378                            SonicDynPLC:
00024378                            	include "_inc\Sonic dynamic pattern load cues.asm"
00024378                            DPLC_e3d5:
00024378 0000                       DPLC_e3d5_0: 	dc.w DPLC_e3d5_B8-DPLC_e3d5
0002437A 0000                       DPLC_e3d5_2: 	dc.w DPLC_e3d5_B9-DPLC_e3d5
0002437C 0000                       DPLC_e3d5_4: 	dc.w DPLC_e3d5_BE-DPLC_e3d5
0002437E 0000                       DPLC_e3d5_6: 	dc.w DPLC_e3d5_C5-DPLC_e3d5
00024380 0000                       DPLC_e3d5_8: 	dc.w DPLC_e3d5_CC-DPLC_e3d5
00024382 0000                       DPLC_e3d5_A: 	dc.w DPLC_e3d5_D3-DPLC_e3d5
00024384 0000                       DPLC_e3d5_C: 	dc.w DPLC_e3d5_DA-DPLC_e3d5
00024386 0000                       DPLC_e3d5_E: 	dc.w DPLC_e3d5_E3-DPLC_e3d5
00024388 0000                       DPLC_e3d5_10: 	dc.w DPLC_e3d5_E8-DPLC_e3d5
0002438A 0000                       DPLC_e3d5_12: 	dc.w DPLC_e3d5_ED-DPLC_e3d5
0002438C 0000                       DPLC_e3d5_14: 	dc.w DPLC_e3d5_F6-DPLC_e3d5
0002438E 0000                       DPLC_e3d5_16: 	dc.w DPLC_e3d5_FB-DPLC_e3d5
00024390 0000                       DPLC_e3d5_18: 	dc.w DPLC_e3d5_102-DPLC_e3d5
00024392 0000                       DPLC_e3d5_1A: 	dc.w DPLC_e3d5_10D-DPLC_e3d5
00024394 0000                       DPLC_e3d5_1C: 	dc.w DPLC_e3d5_11A-DPLC_e3d5
00024396 0000                       DPLC_e3d5_1E: 	dc.w DPLC_e3d5_123-DPLC_e3d5
00024398 0000                       DPLC_e3d5_20: 	dc.w DPLC_e3d5_12E-DPLC_e3d5
0002439A 0000                       DPLC_e3d5_22: 	dc.w DPLC_e3d5_137-DPLC_e3d5
0002439C 0000                       DPLC_e3d5_24: 	dc.w DPLC_e3d5_142-DPLC_e3d5
0002439E 0000                       DPLC_e3d5_26: 	dc.w DPLC_e3d5_14B-DPLC_e3d5
000243A0 0000                       DPLC_e3d5_28: 	dc.w DPLC_e3d5_150-DPLC_e3d5
000243A2 0000                       DPLC_e3d5_2A: 	dc.w DPLC_e3d5_155-DPLC_e3d5
000243A4 0000                       DPLC_e3d5_2C: 	dc.w DPLC_e3d5_15E-DPLC_e3d5
000243A6 0000                       DPLC_e3d5_2E: 	dc.w DPLC_e3d5_163-DPLC_e3d5
000243A8 0000                       DPLC_e3d5_30: 	dc.w DPLC_e3d5_16A-DPLC_e3d5
000243AA 0000                       DPLC_e3d5_32: 	dc.w DPLC_e3d5_177-DPLC_e3d5
000243AC 0000                       DPLC_e3d5_34: 	dc.w DPLC_e3d5_184-DPLC_e3d5
000243AE 0000                       DPLC_e3d5_36: 	dc.w DPLC_e3d5_18D-DPLC_e3d5
000243B0 0000                       DPLC_e3d5_38: 	dc.w DPLC_e3d5_198-DPLC_e3d5
000243B2 0000                       DPLC_e3d5_3A: 	dc.w DPLC_e3d5_1A1-DPLC_e3d5
000243B4 0000                       DPLC_e3d5_3C: 	dc.w DPLC_e3d5_1AC-DPLC_e3d5
000243B6 0000                       DPLC_e3d5_3E: 	dc.w DPLC_e3d5_1B1-DPLC_e3d5
000243B8 0000                       DPLC_e3d5_40: 	dc.w DPLC_e3d5_1B6-DPLC_e3d5
000243BA 0000                       DPLC_e3d5_42: 	dc.w DPLC_e3d5_1BB-DPLC_e3d5
000243BC 0000                       DPLC_e3d5_44: 	dc.w DPLC_e3d5_1C0-DPLC_e3d5
000243BE 0000                       DPLC_e3d5_46: 	dc.w DPLC_e3d5_1C9-DPLC_e3d5
000243C0 0000                       DPLC_e3d5_48: 	dc.w DPLC_e3d5_1D0-DPLC_e3d5
000243C2 0000                       DPLC_e3d5_4A: 	dc.w DPLC_e3d5_1D9-DPLC_e3d5
000243C4 0000                       DPLC_e3d5_4C: 	dc.w DPLC_e3d5_1E0-DPLC_e3d5
000243C6 0000                       DPLC_e3d5_4E: 	dc.w DPLC_e3d5_1E5-DPLC_e3d5
000243C8 0000                       DPLC_e3d5_50: 	dc.w DPLC_e3d5_1EA-DPLC_e3d5
000243CA 0000                       DPLC_e3d5_52: 	dc.w DPLC_e3d5_1EF-DPLC_e3d5
000243CC 0000                       DPLC_e3d5_54: 	dc.w DPLC_e3d5_1F4-DPLC_e3d5
000243CE 0000                       DPLC_e3d5_56: 	dc.w DPLC_e3d5_1FD-DPLC_e3d5
000243D0 0000                       DPLC_e3d5_58: 	dc.w DPLC_e3d5_202-DPLC_e3d5
000243D2 0000                       DPLC_e3d5_5A: 	dc.w DPLC_e3d5_20B-DPLC_e3d5
000243D4 0000                       DPLC_e3d5_5C: 	dc.w DPLC_e3d5_210-DPLC_e3d5
000243D6 0000                       DPLC_e3d5_5E: 	dc.w DPLC_e3d5_213-DPLC_e3d5
000243D8 0000                       DPLC_e3d5_60: 	dc.w DPLC_e3d5_216-DPLC_e3d5
000243DA 0000                       DPLC_e3d5_62: 	dc.w DPLC_e3d5_219-DPLC_e3d5
000243DC 0000                       DPLC_e3d5_64: 	dc.w DPLC_e3d5_21C-DPLC_e3d5
000243DE 0000                       DPLC_e3d5_66: 	dc.w DPLC_e3d5_21F-DPLC_e3d5
000243E0 0000                       DPLC_e3d5_68: 	dc.w DPLC_e3d5_224-DPLC_e3d5
000243E2 0000                       DPLC_e3d5_6A: 	dc.w DPLC_e3d5_227-DPLC_e3d5
000243E4 0000                       DPLC_e3d5_6C: 	dc.w DPLC_e3d5_22C-DPLC_e3d5
000243E6 0000                       DPLC_e3d5_6E: 	dc.w DPLC_e3d5_22F-DPLC_e3d5
000243E8 0000                       DPLC_e3d5_70: 	dc.w DPLC_e3d5_234-DPLC_e3d5
000243EA 0000                       DPLC_e3d5_72: 	dc.w DPLC_e3d5_23D-DPLC_e3d5
000243EC 0000                       DPLC_e3d5_74: 	dc.w DPLC_e3d5_242-DPLC_e3d5
000243EE 0000                       DPLC_e3d5_76: 	dc.w DPLC_e3d5_247-DPLC_e3d5
000243F0 0000                       DPLC_e3d5_78: 	dc.w DPLC_e3d5_24C-DPLC_e3d5
000243F2 0000                       DPLC_e3d5_7A: 	dc.w DPLC_e3d5_251-DPLC_e3d5
000243F4 0000                       DPLC_e3d5_7C: 	dc.w DPLC_e3d5_254-DPLC_e3d5
000243F6 0000                       DPLC_e3d5_7E: 	dc.w DPLC_e3d5_25B-DPLC_e3d5
000243F8 0000                       DPLC_e3d5_80: 	dc.w DPLC_e3d5_260-DPLC_e3d5
000243FA 0000                       DPLC_e3d5_82: 	dc.w DPLC_e3d5_267-DPLC_e3d5
000243FC 0000                       DPLC_e3d5_84: 	dc.w DPLC_e3d5_270-DPLC_e3d5
000243FE 0000                       DPLC_e3d5_86: 	dc.w DPLC_e3d5_279-DPLC_e3d5
00024400 0000                       DPLC_e3d5_88: 	dc.w DPLC_e3d5_284-DPLC_e3d5
00024402 0000                       DPLC_e3d5_8A: 	dc.w DPLC_e3d5_28F-DPLC_e3d5
00024404 0000                       DPLC_e3d5_8C: 	dc.w DPLC_e3d5_294-DPLC_e3d5
00024406 0000                       DPLC_e3d5_8E: 	dc.w DPLC_e3d5_29B-DPLC_e3d5
00024408 0000                       DPLC_e3d5_90: 	dc.w DPLC_e3d5_2A0-DPLC_e3d5
0002440A 0000                       DPLC_e3d5_92: 	dc.w DPLC_e3d5_2A7-DPLC_e3d5
0002440C 0000                       DPLC_e3d5_94: 	dc.w DPLC_e3d5_2AC-DPLC_e3d5
0002440E 0000                       DPLC_e3d5_96: 	dc.w DPLC_e3d5_2B3-DPLC_e3d5
00024410 0000                       DPLC_e3d5_98: 	dc.w DPLC_e3d5_2BA-DPLC_e3d5
00024412 0000                       DPLC_e3d5_9A: 	dc.w DPLC_e3d5_2C5-DPLC_e3d5
00024414 0000                       DPLC_e3d5_9C: 	dc.w DPLC_e3d5_2D0-DPLC_e3d5
00024416 0000                       DPLC_e3d5_9E: 	dc.w DPLC_e3d5_2D5-DPLC_e3d5
00024418 0000                       DPLC_e3d5_A0: 	dc.w DPLC_e3d5_2DC-DPLC_e3d5
0002441A 0000                       DPLC_e3d5_A2: 	dc.w DPLC_e3d5_2DF-DPLC_e3d5
0002441C 0000                       DPLC_e3d5_A4: 	dc.w DPLC_e3d5_2E2-DPLC_e3d5
0002441E 0000                       DPLC_e3d5_A6: 	dc.w DPLC_e3d5_2E5-DPLC_e3d5
00024420 0000                       DPLC_e3d5_A8: 	dc.w DPLC_e3d5_2EA-DPLC_e3d5
00024422 0000                       DPLC_e3d5_AA: 	dc.w DPLC_e3d5_2F1-DPLC_e3d5
00024424 0000                       DPLC_e3d5_AC: 	dc.w DPLC_e3d5_2F8-DPLC_e3d5
00024426 0000                       DPLC_e3d5_AE: 	dc.w DPLC_e3d5_2FF-DPLC_e3d5
00024428 0000                       DPLC_e3d5_B0: 	dc.w DPLC_e3d5_304-DPLC_e3d5
0002442A 0000                       DPLC_e3d5_B2: 	dc.w DPLC_e3d5_309-DPLC_e3d5
0002442C 0000                       DPLC_e3d5_B4: 	dc.w DPLC_e3d5_30E-DPLC_e3d5
0002442E 0000                       DPLC_e3d5_B6: 	dc.w DPLC_e3d5_313-DPLC_e3d5
00024430 00                         DPLC_e3d5_B8: 	dc.b $0
00024431 02                         DPLC_e3d5_B9: 	dc.b $2
00024432 F000                       	dc.b $F0, $0
00024434 1010                       	dc.b $10, $10
00024436 03                         DPLC_e3d5_BE: 	dc.b $3
00024437 5012                       	dc.b $50, $12
00024439 5018                       	dc.b $50, $18
0002443B 201E                       	dc.b $20, $1E
0002443D 03                         DPLC_e3d5_C5: 	dc.b $3
0002443E 5021                       	dc.b $50, $21
00024440 5018                       	dc.b $50, $18
00024442 201E                       	dc.b $20, $1E
00024444 03                         DPLC_e3d5_CC: 	dc.b $3
00024445 5021                       	dc.b $50, $21
00024447 5018                       	dc.b $50, $18
00024449 2027                       	dc.b $20, $27
0002444B 03                         DPLC_e3d5_D3: 	dc.b $3
0002444C 802A                       	dc.b $80, $2A
0002444E 2033                       	dc.b $20, $33
00024450 2036                       	dc.b $20, $36
00024452 04                         DPLC_e3d5_DA: 	dc.b $4
00024453 7039                       	dc.b $70, $39
00024455 5041                       	dc.b $50, $41
00024457 5047                       	dc.b $50, $47
00024459 104D                       	dc.b $10, $4D
0002445B 02                         DPLC_e3d5_E3: 	dc.b $2
0002445C 7039                       	dc.b $70, $39
0002445E B04F                       	dc.b $B0, $4F
00024460 02                         DPLC_e3d5_E8: 	dc.b $2
00024461 505B                       	dc.b $50, $5B
00024463 8061                       	dc.b $80, $61
00024465 04                         DPLC_e3d5_ED: 	dc.b $4
00024466 505B                       	dc.b $50, $5B
00024468 506A                       	dc.b $50, $6A
0002446A 5070                       	dc.b $50, $70
0002446C 1076                       	dc.b $10, $76
0002446E 02                         DPLC_e3d5_F6: 	dc.b $2
0002446F F4F0                       	dc.b $F4, $F0
00024471 1500                       	dc.b $15, $0
00024473 03                         DPLC_e3d5_FB: 	dc.b $3
00024474 7039                       	dc.b $70, $39
00024476 3078                       	dc.b $30, $78
00024478 507C                       	dc.b $50, $7C
0002447A 05                         DPLC_e3d5_102: 	dc.b $5
0002447B 5082                       	dc.b $50, $82
0002447D 5088                       	dc.b $50, $88
0002447F 208E                       	dc.b $20, $8E
00024481 5091                       	dc.b $50, $91
00024483 0097                       	dc.b $0, $97
00024485 06                         DPLC_e3d5_10D: 	dc.b $6
00024486 5082                       	dc.b $50, $82
00024488 1098                       	dc.b $10, $98
0002448A 309A                       	dc.b $30, $9A
0002448C 509E                       	dc.b $50, $9E
0002448E 30A4                       	dc.b $30, $A4
00024490 00A8                       	dc.b $0, $A8
00024492 04                         DPLC_e3d5_11A: 	dc.b $4
00024493 50A9                       	dc.b $50, $A9
00024495 10AF                       	dc.b $10, $AF
00024497 70B1                       	dc.b $70, $B1
00024499 20B9                       	dc.b $20, $B9
0002449B 05                         DPLC_e3d5_123: 	dc.b $5
0002449C 50BC                       	dc.b $50, $BC
0002449E 30C2                       	dc.b $30, $C2
000244A0 70C6                       	dc.b $70, $C6
000244A2 20CE                       	dc.b $20, $CE
000244A4 10D1                       	dc.b $10, $D1
000244A6 04                         DPLC_e3d5_12E: 	dc.b $4
000244A7 50BC                       	dc.b $50, $BC
000244A9 10D3                       	dc.b $10, $D3
000244AB 70D5                       	dc.b $70, $D5
000244AD 20DD                       	dc.b $20, $DD
000244AF 05                         DPLC_e3d5_137: 	dc.b $5
000244B0 5082                       	dc.b $50, $82
000244B2 1098                       	dc.b $10, $98
000244B4 008E                       	dc.b $0, $8E
000244B6 70E0                       	dc.b $70, $E0
000244B8 20E8                       	dc.b $20, $E8
000244BA 04                         DPLC_e3d5_142: 	dc.b $4
000244BB 70EB                       	dc.b $70, $EB
000244BD 50F3                       	dc.b $50, $F3
000244BF 10F9                       	dc.b $10, $F9
000244C1 50FB                       	dc.b $50, $FB
000244C3 02                         DPLC_e3d5_14B: 	dc.b $2
000244C4 70EB                       	dc.b $70, $EB
000244C6 B101                       	dc.b $B1, $1
000244C8 02                         DPLC_e3d5_150: 	dc.b $2
000244C9 510D                       	dc.b $51, $D
000244CB 8113                       	dc.b $81, $13
000244CD 04                         DPLC_e3d5_155: 	dc.b $4
000244CE 510D                       	dc.b $51, $D
000244D0 511C                       	dc.b $51, $1C
000244D2 1122                       	dc.b $11, $22
000244D4 5124                       	dc.b $51, $24
000244D6 02                         DPLC_e3d5_15E: 	dc.b $2
000244D7 510D                       	dc.b $51, $D
000244D9 B12A                       	dc.b $B1, $2A
000244DB 03                         DPLC_e3d5_163: 	dc.b $3
000244DC 70EB                       	dc.b $70, $EB
000244DE 0101                       	dc.b $1, $1
000244E0 8136                       	dc.b $81, $36
000244E2 06                         DPLC_e3d5_16A: 	dc.b $6
000244E3 513F                       	dc.b $51, $3F
000244E5 1145                       	dc.b $11, $45
000244E7 1147                       	dc.b $11, $47
000244E9 8149                       	dc.b $81, $49
000244EB 0152                       	dc.b $1, $52
000244ED 0153                       	dc.b $1, $53
000244EF 06                         DPLC_e3d5_177: 	dc.b $6
000244F0 513F                       	dc.b $51, $3F
000244F2 2154                       	dc.b $21, $54
000244F4 1157                       	dc.b $11, $57
000244F6 1159                       	dc.b $11, $59
000244F8 815B                       	dc.b $81, $5B
000244FA 0152                       	dc.b $1, $52
000244FC 04                         DPLC_e3d5_184: 	dc.b $4
000244FD 5164                       	dc.b $51, $64
000244FF 116A                       	dc.b $11, $6A
00024501 816C                       	dc.b $81, $6C
00024503 1175                       	dc.b $11, $75
00024505 05                         DPLC_e3d5_18D: 	dc.b $5
00024506 5177                       	dc.b $51, $77
00024508 217D                       	dc.b $21, $7D
0002450A 1180                       	dc.b $11, $80
0002450C 7182                       	dc.b $71, $82
0002450E 218A                       	dc.b $21, $8A
00024510 04                         DPLC_e3d5_198: 	dc.b $4
00024511 5177                       	dc.b $51, $77
00024513 118D                       	dc.b $11, $8D
00024515 818F                       	dc.b $81, $8F
00024517 1198                       	dc.b $11, $98
00024519 05                         DPLC_e3d5_1A1: 	dc.b $5
0002451A 513F                       	dc.b $51, $3F
0002451C 819A                       	dc.b $81, $9A
0002451E 1159                       	dc.b $11, $59
00024520 11A3                       	dc.b $11, $A3
00024522 0152                       	dc.b $1, $52
00024524 02                         DPLC_e3d5_1AC: 	dc.b $2
00024525 51A5                       	dc.b $51, $A5
00024527 B1AB                       	dc.b $B1, $AB
00024529 02                         DPLC_e3d5_1B1: 	dc.b $2
0002452A 505B                       	dc.b $50, $5B
0002452C B1B7                       	dc.b $B1, $B7
0002452E 02                         DPLC_e3d5_1B6: 	dc.b $2
0002452F 51A5                       	dc.b $51, $A5
00024531 B1C3                       	dc.b $B1, $C3
00024533 02                         DPLC_e3d5_1BB: 	dc.b $2
00024534 505B                       	dc.b $50, $5B
00024536 B1CF                       	dc.b $B1, $CF
00024538 04                         DPLC_e3d5_1C0: 	dc.b $4
00024539 51DB                       	dc.b $51, $DB
0002453B 11E1                       	dc.b $11, $E1
0002453D B1E3                       	dc.b $B1, $E3
0002453F 01EF                       	dc.b $1, $EF
00024541 03                         DPLC_e3d5_1C9: 	dc.b $3
00024542 51F0                       	dc.b $51, $F0
00024544 11F6                       	dc.b $11, $F6
00024546 B1F8                       	dc.b $B1, $F8
00024548 04                         DPLC_e3d5_1D0: 	dc.b $4
00024549 51DB                       	dc.b $51, $DB
0002454B 1204                       	dc.b $12, $4
0002454D B206                       	dc.b $B2, $6
0002454F 01EF                       	dc.b $1, $EF
00024551 03                         DPLC_e3d5_1D9: 	dc.b $3
00024552 51F0                       	dc.b $51, $F0
00024554 11F6                       	dc.b $11, $F6
00024556 B212                       	dc.b $B2, $12
00024558 02                         DPLC_e3d5_1E0: 	dc.b $2
00024559 521E                       	dc.b $52, $1E
0002455B B224                       	dc.b $B2, $24
0002455D 02                         DPLC_e3d5_1E5: 	dc.b $2
0002455E 510D                       	dc.b $51, $D
00024560 B230                       	dc.b $B2, $30
00024562 02                         DPLC_e3d5_1EA: 	dc.b $2
00024563 521E                       	dc.b $52, $1E
00024565 B23C                       	dc.b $B2, $3C
00024567 02                         DPLC_e3d5_1EF: 	dc.b $2
00024568 510D                       	dc.b $51, $D
0002456A B248                       	dc.b $B2, $48
0002456C 04                         DPLC_e3d5_1F4: 	dc.b $4
0002456D 5254                       	dc.b $52, $54
0002456F 125A                       	dc.b $12, $5A
00024571 B25C                       	dc.b $B2, $5C
00024573 0268                       	dc.b $2, $68
00024575 02                         DPLC_e3d5_1FD: 	dc.b $2
00024576 7269                       	dc.b $72, $69
00024578 B271                       	dc.b $B2, $71
0002457A 04                         DPLC_e3d5_202: 	dc.b $4
0002457B 5254                       	dc.b $52, $54
0002457D 127D                       	dc.b $12, $7D
0002457F B27F                       	dc.b $B2, $7F
00024581 0268                       	dc.b $2, $68
00024583 02                         DPLC_e3d5_20B: 	dc.b $2
00024584 7269                       	dc.b $72, $69
00024586 B28B                       	dc.b $B2, $8B
00024588 01                         DPLC_e3d5_210: 	dc.b $1
00024589 F297                       	dc.b $F2, $97
0002458B 01                         DPLC_e3d5_213: 	dc.b $1
0002458C F2A7                       	dc.b $F2, $A7
0002458E 01                         DPLC_e3d5_216: 	dc.b $1
0002458F F2B7                       	dc.b $F2, $B7
00024591 01                         DPLC_e3d5_219: 	dc.b $1
00024592 F2C7                       	dc.b $F2, $C7
00024594 01                         DPLC_e3d5_21C: 	dc.b $1
00024595 F2D7                       	dc.b $F2, $D7
00024597 02                         DPLC_e3d5_21F: 	dc.b $2
00024598 B2E7                       	dc.b $B2, $E7
0002459A 22F3                       	dc.b $22, $F3
0002459C 01                         DPLC_e3d5_224: 	dc.b $1
0002459D F2F6                       	dc.b $F2, $F6
0002459F 02                         DPLC_e3d5_227: 	dc.b $2
000245A0 B306                       	dc.b $B3, $6
000245A2 2312                       	dc.b $23, $12
000245A4 01                         DPLC_e3d5_22C: 	dc.b $1
000245A5 F315                       	dc.b $F3, $15
000245A7 02                         DPLC_e3d5_22F: 	dc.b $2
000245A8 5325                       	dc.b $53, $25
000245AA B32B                       	dc.b $B3, $2B
000245AC 04                         DPLC_e3d5_234: 	dc.b $4
000245AD 5337                       	dc.b $53, $37
000245AF 733D                       	dc.b $73, $3D
000245B1 1345                       	dc.b $13, $45
000245B3 0347                       	dc.b $3, $47
000245B5 02                         DPLC_e3d5_23D: 	dc.b $2
000245B6 D348                       	dc.b $D3, $48
000245B8 34EC                       	dc.b $34, $EC
000245BA 02                         DPLC_e3d5_242: 	dc.b $2
000245BB F528                       	dc.b $F5, $28
000245BD 0538                       	dc.b $5, $38
000245BF 02                         DPLC_e3d5_247: 	dc.b $2
000245C0 F539                       	dc.b $F5, $39
000245C2 0549                       	dc.b $5, $49
000245C4 02                         DPLC_e3d5_24C: 	dc.b $2
000245C5 E356                       	dc.b $E3, $56
000245C7 054A                       	dc.b $5, $4A
000245C9 01                         DPLC_e3d5_251: 	dc.b $1
000245CA 8365                       	dc.b $83, $65
000245CC 03                         DPLC_e3d5_254: 	dc.b $3
000245CD 736E                       	dc.b $73, $6E
000245CF 0376                       	dc.b $3, $76
000245D1 3377                       	dc.b $33, $77
000245D3 02                         DPLC_e3d5_25B: 	dc.b $2
000245D4 E37B                       	dc.b $E3, $7B
000245D6 054A                       	dc.b $5, $4A
000245D8 03                         DPLC_e3d5_260: 	dc.b $3
000245D9 B38A                       	dc.b $B3, $8A
000245DB 1396                       	dc.b $13, $96
000245DD 0398                       	dc.b $3, $98
000245DF 04                         DPLC_e3d5_267: 	dc.b $4
000245E0 B399                       	dc.b $B3, $99
000245E2 33A5                       	dc.b $33, $A5
000245E4 03A9                       	dc.b $3, $A9
000245E6 03AA                       	dc.b $3, $AA
000245E8 04                         DPLC_e3d5_270: 	dc.b $4
000245E9 B3AB                       	dc.b $B3, $AB
000245EB 33B7                       	dc.b $33, $B7
000245ED 03BB                       	dc.b $3, $BB
000245EF 03BC                       	dc.b $3, $BC
000245F1 05                         DPLC_e3d5_279: 	dc.b $5
000245F2 83BD                       	dc.b $83, $BD
000245F4 13C6                       	dc.b $13, $C6
000245F6 53C8                       	dc.b $53, $C8
000245F8 13CE                       	dc.b $13, $CE
000245FA 03D0                       	dc.b $3, $D0
000245FC 05                         DPLC_e3d5_284: 	dc.b $5
000245FD 83D1                       	dc.b $83, $D1
000245FF 13DA                       	dc.b $13, $DA
00024601 53C8                       	dc.b $53, $C8
00024603 13CE                       	dc.b $13, $CE
00024605 03D0                       	dc.b $3, $D0
00024607 02                         DPLC_e3d5_28F: 	dc.b $2
00024608 83DC                       	dc.b $83, $DC
0002460A 73E5                       	dc.b $73, $E5
0002460C 03                         DPLC_e3d5_294: 	dc.b $3
0002460D 83ED                       	dc.b $83, $ED
0002460F 23F6                       	dc.b $23, $F6
00024611 13F9                       	dc.b $13, $F9
00024613 02                         DPLC_e3d5_29B: 	dc.b $2
00024614 83FB                       	dc.b $83, $FB
00024616 7404                       	dc.b $74, $4
00024618 03                         DPLC_e3d5_2A0: 	dc.b $3
00024619 83ED                       	dc.b $83, $ED
0002461B 240C                       	dc.b $24, $C
0002461D 140F                       	dc.b $14, $F
0002461F 02                         DPLC_e3d5_2A7: 	dc.b $2
00024620 5411                       	dc.b $54, $11
00024622 B417                       	dc.b $B4, $17
00024624 03                         DPLC_e3d5_2AC: 	dc.b $3
00024625 8423                       	dc.b $84, $23
00024627 342C                       	dc.b $34, $2C
00024629 0430                       	dc.b $4, $30
0002462B 03                         DPLC_e3d5_2B3: 	dc.b $3
0002462C 7431                       	dc.b $74, $31
0002462E 1439                       	dc.b $14, $39
00024630 B43B                       	dc.b $B4, $3B
00024632 05                         DPLC_e3d5_2BA: 	dc.b $5
00024633 7447                       	dc.b $74, $47
00024635 144F                       	dc.b $14, $4F
00024637 5451                       	dc.b $54, $51
00024639 3457                       	dc.b $34, $57
0002463B 045B                       	dc.b $4, $5B
0002463D 05                         DPLC_e3d5_2C5: 	dc.b $5
0002463E 745C                       	dc.b $74, $5C
00024640 144F                       	dc.b $14, $4F
00024642 5464                       	dc.b $54, $64
00024644 3457                       	dc.b $34, $57
00024646 045B                       	dc.b $4, $5B
00024648 02                         DPLC_e3d5_2D0: 	dc.b $2
00024649 246A                       	dc.b $24, $6A
0002464B F46D                       	dc.b $F4, $6D
0002464D 03                         DPLC_e3d5_2D5: 	dc.b $3
0002464E 247D                       	dc.b $24, $7D
00024650 B480                       	dc.b $B4, $80
00024652 248C                       	dc.b $24, $8C
00024654 01                         DPLC_e3d5_2DC: 	dc.b $1
00024655 B48F                       	dc.b $B4, $8F
00024657 01                         DPLC_e3d5_2DF: 	dc.b $1
00024658 549B                       	dc.b $54, $9B
0002465A 01                         DPLC_e3d5_2E2: 	dc.b $1
0002465B 14A1                       	dc.b $14, $A1
0002465D 02                         DPLC_e3d5_2E5: 	dc.b $2
0002465E E356                       	dc.b $E3, $56
00024660 054A                       	dc.b $5, $4A
00024662 03                         DPLC_e3d5_2EA: 	dc.b $3
00024663 736E                       	dc.b $73, $6E
00024665 0376                       	dc.b $3, $76
00024667 3377                       	dc.b $33, $77
00024669 03                         DPLC_e3d5_2F1: 	dc.b $3
0002466A B4A3                       	dc.b $B4, $A3
0002466C 14AF                       	dc.b $14, $AF
0002466E 34B1                       	dc.b $34, $B1
00024670 03                         DPLC_e3d5_2F8: 	dc.b $3
00024671 54B5                       	dc.b $54, $B5
00024673 B4BB                       	dc.b $B4, $BB
00024675 1074                       	dc.b $10, $74
00024677 02                         DPLC_e3d5_2FF: 	dc.b $2
00024678 F4C7                       	dc.b $F4, $C7
0002467A 24D7                       	dc.b $24, $D7
0002467C 02                         DPLC_e3d5_304: 	dc.b $2
0002467D F4DA                       	dc.b $F4, $DA
0002467F 14EA                       	dc.b $14, $EA
00024681 02                         DPLC_e3d5_309: 	dc.b $2
00024682 F502                       	dc.b $F5, $2
00024684 2512                       	dc.b $25, $12
00024686 02                         DPLC_e3d5_30E: 	dc.b $2
00024687 F515                       	dc.b $F5, $15
00024689 2525                       	dc.b $25, $25
0002468B 02                         DPLC_e3d5_313: 	dc.b $2
0002468C F54B                       	dc.b $F5, $4B
0002468E 755B                       	dc.b $75, $5B
00024690                            	even
00024690                            	even
00024690                            
00024690                            ; ---------------------------------------------------------------------------
00024690                            ; Uncompressed graphics	- Sonic
00024690                            ; ---------------------------------------------------------------------------
00024690                            Art_Sonic:	incbin	artunc\sonic.bin	; Sonic
0002F2B0                            		even
0002F2B0                            ; ---------------------------------------------------------------------------
0002F2B0                            ; Compressed graphics - various
0002F2B0                            ; ---------------------------------------------------------------------------
0002F2B0                            Nem_Smoke:	incbin	artnem\xxxsmoke.bin	; unused smoke
0002F3B4                            		even
0002F3B4                            Nem_SyzSparkle:	incbin	artnem\xxxstars.bin	; unused stars
0002F3EE                            		even
0002F3EE                            Nem_Shield:	incbin	artnem\shield.bin	; shield
0002F584                            		even
0002F584                            Nem_Stars:	incbin	artnem\invstars.bin	; invincibility stars
0002F6CC                            		even
0002F6CC                            Nem_LzSonic:	incbin	artnem\xxxlzson.bin	; unused LZ Sonic holding his breath
0002F7D6                            		even
0002F7D6                            Nem_UnkFire:	incbin	artnem\xxxfire.bin	; unused fireball
0002F828                            		even
0002F828                            Nem_Warp:	incbin	artnem\xxxflash.bin	; unused entry to special stage flash
0002FA70                            		even
0002FA70                            Nem_Goggle:	incbin	artnem\xxxgoggl.bin	; unused goggles
0002FBF6                            		even
0002FBF6                            ; ---------------------------------------------------------------------------
0002FBF6                            ; Sprite mappings - walls of the special stage
0002FBF6                            ; ---------------------------------------------------------------------------
0002FBF6                            Map_SSWalls:
0002FBF6                            	include "_maps\SSwalls.asm"
0002FBF6                            ; ---------------------------------------------------------------------------
0002FBF6                            ; Sprite mappings - walls of the special stage
0002FBF6                            ; ---------------------------------------------------------------------------
0002FBF6 0000 0000                  		dc.w byte_2C584-Map_SSWalls, byte_2C58A-Map_SSWalls
0002FBFA 0000 0000                  		dc.w byte_2C590-Map_SSWalls, byte_2C596-Map_SSWalls
0002FBFE 0000 0000                  		dc.w byte_2C59C-Map_SSWalls, byte_2C5A2-Map_SSWalls
0002FC02 0000 0000                  		dc.w byte_2C5A8-Map_SSWalls, byte_2C5AE-Map_SSWalls
0002FC06 0000 0000                  		dc.w byte_2C5B4-Map_SSWalls, byte_2C5BA-Map_SSWalls
0002FC0A 0000 0000                  		dc.w byte_2C5C0-Map_SSWalls, byte_2C5C6-Map_SSWalls
0002FC0E 0000 0000                  		dc.w byte_2C5CC-Map_SSWalls, byte_2C5D2-Map_SSWalls
0002FC12 0000 0000                  		dc.w byte_2C5D8-Map_SSWalls, byte_2C5DE-Map_SSWalls
0002FC16 01                         byte_2C584:	dc.b 1
0002FC17 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0002FC1C 01                         byte_2C58A:	dc.b 1
0002FC1D F00F 0009 F0               		dc.b $F0, $F, 0, 9, $F0
0002FC22 01                         byte_2C590:	dc.b 1
0002FC23 F00F 0019 F0               		dc.b $F0, $F, 0, $19, $F0
0002FC28 01                         byte_2C596:	dc.b 1
0002FC29 F00F 0029 F0               		dc.b $F0, $F, 0, $29, $F0
0002FC2E 01                         byte_2C59C:	dc.b 1
0002FC2F F00F 0039 F0               		dc.b $F0, $F, 0, $39, $F0
0002FC34 01                         byte_2C5A2:	dc.b 1
0002FC35 F00F 0049 F0               		dc.b $F0, $F, 0, $49, $F0
0002FC3A 01                         byte_2C5A8:	dc.b 1
0002FC3B F00F 0059 F0               		dc.b $F0, $F, 0, $59, $F0
0002FC40 01                         byte_2C5AE:	dc.b 1
0002FC41 F00F 0069 F0               		dc.b $F0, $F, 0, $69, $F0
0002FC46 01                         byte_2C5B4:	dc.b 1
0002FC47 F00F 0079 F0               		dc.b $F0, $F, 0, $79, $F0
0002FC4C 01                         byte_2C5BA:	dc.b 1
0002FC4D F00F 0089 F0               		dc.b $F0, $F, 0, $89, $F0
0002FC52 01                         byte_2C5C0:	dc.b 1
0002FC53 F00F 0099 F0               		dc.b $F0, $F, 0, $99, $F0
0002FC58 01                         byte_2C5C6:	dc.b 1
0002FC59 F00F 00A9 F0               		dc.b $F0, $F, 0, $A9, $F0
0002FC5E 01                         byte_2C5CC:	dc.b 1
0002FC5F F00F 00B9 F0               		dc.b $F0, $F, 0, $B9, $F0
0002FC64 01                         byte_2C5D2:	dc.b 1
0002FC65 F00F 00C9 F0               		dc.b $F0, $F, 0, $C9, $F0
0002FC6A 01                         byte_2C5D8:	dc.b 1
0002FC6B F00F 00D9 F0               		dc.b $F0, $F, 0, $D9, $F0
0002FC70 01                         byte_2C5DE:	dc.b 1
0002FC71 F00F 00E9 F0               		dc.b $F0, $F, 0, $E9, $F0
0002FC76                            		even
0002FC76                            		even
0002FC76                            ; ---------------------------------------------------------------------------
0002FC76                            ; Compressed graphics - special stage
0002FC76                            ; ---------------------------------------------------------------------------
0002FC76                            Nem_SSWalls:	incbin	artnem\sswalls.bin	; special stage walls
000305AE                            		even
000305AE                            Eni_SSBg1:	incbin	mapeni\ssbg1.bin	; special stage background (mappings)
000306E2                            		even
000306E2                            Nem_SSBgFish:	incbin	artnem\ssbg1.bin	; special stage birds and fish background
00031372                            		even
00031372                            Eni_SSBg2:	incbin	mapeni\ssbg2.bin	; special stage background (mappings)
00031672                            		even
00031672                            Nem_SSBgCloud:	incbin	artnem\ssbg2.bin	; special stage clouds background
00031B66                            		even
00031B66                            Nem_SSGOAL:	incbin	artnem\ssgoal.bin	; special stage GOAL block
00031C54                            		even
00031C54                            Nem_SSRBlock:	incbin	artnem\ssr.bin		; special stage R block
00031D24                            		even
00031D24                            Nem_SS1UpBlock:	incbin	artnem\ss1up.bin	; special stage 1UP block
00031E1A                            		even
00031E1A                            Nem_SSEmStars:	incbin	artnem\ssemstar.bin	; special stage stars from a collected emerald
00031E78                            		even
00031E78                            Nem_SSRedWhite:	incbin	artnem\ssredwhi.bin	; special stage red/white block
00031F0A                            		even
00031F0A                            Nem_SSZone1:	incbin	artnem\sszone1.bin	; special stage ZONE1 block
00031FCC                            		even
00031FCC                            Nem_SSZone2:	incbin	artnem\sszone2.bin	; ZONE2 block
0003209A                            		even
0003209A                            Nem_SSZone3:	incbin	artnem\sszone3.bin	; ZONE3 block
00032166                            		even
00032166                            Nem_SSZone4:	incbin	artnem\sszone4.bin	; ZONE4 block
0003222E                            		even
0003222E                            Nem_SSZone5:	incbin	artnem\sszone5.bin	; ZONE5 block
000322F8                            		even
000322F8                            Nem_SSZone6:	incbin	artnem\sszone6.bin	; ZONE6 block
000323C8                            		even
000323C8                            Nem_SSUpDown:	incbin	artnem\ssupdown.bin	; special stage UP/DOWN block
000325BC                            		even
000325BC                            Nem_SSEmerald:	incbin	artnem\ssemeral.bin	; special stage chaos emeralds
00032724                            		even
00032724                            Nem_SSGhost:	incbin	artnem\ssghost.bin	; special stage ghost block
000327D4                            		even
000327D4                            Nem_SSWBlock:	incbin	artnem\ssw.bin		; special stage W block
000328AE                            		even
000328AE                            Nem_SSGlass:	incbin	artnem\ssglass.bin	; special stage destroyable glass block
00032932                            		even
00032932                            Nem_ResultEm:	incbin	artnem\ssresems.bin	; chaos emeralds on special stage results screen
00032AB0                            		even
00032AB0                            ; ---------------------------------------------------------------------------
00032AB0                            ; Compressed graphics - GHZ stuff
00032AB0                            ; ---------------------------------------------------------------------------
00032AB0                            Nem_Stalk:	incbin	artnem\ghzstalk.bin	; GHZ flower stalk
00032AFA                            		even
00032AFA                            Nem_Swing:	incbin	artnem\ghzswing.bin	; GHZ swinging platform
00032C14                            		even
00032C14                            Nem_Bridge:	incbin	artnem\ghzbridg.bin	; GHZ bridge
00032D00                            		even
00032D00                            Nem_GhzUnkBlock:incbin	artnem\xxxghzbl.bin	; unused GHZ block
00032D48                            		even
00032D48                            Nem_Ball:	incbin	artnem\ghzball.bin	; GHZ giant ball
00032EE6                            		even
00032EE6                            Nem_Spikes:	incbin	artnem\spikes.bin	; spikes
00032F62                            		even
00032F62                            Nem_GhzLog:	incbin	artnem\xxxghzlo.bin	; unused GHZ log
00033176                            		even
00033176                            Nem_SpikePole:	incbin	artnem\ghzlog.bin	; GHZ spiked log
000332A2                            		even
000332A2                            Nem_PplRock:	incbin	artnem\ghzrock.bin	; GHZ purple rock
000333D0                            		even
000333D0                            Nem_GhzWall1:	incbin	artnem\ghzwall1.bin	; GHZ destroyable wall
0003346E                            		even
0003346E                            Nem_GhzWall2:	incbin	artnem\ghzwall2.bin	; GHZ normal wall
000334CE                            		even
000334CE                            ; ---------------------------------------------------------------------------
000334CE                            ; Compressed graphics - LZ stuff
000334CE                            ; ---------------------------------------------------------------------------
000334CE                            Nem_Water:	incbin	artnem\lzwater.bin	; LZ water surface
000335F2                            		even
000335F2                            Nem_Splash:	incbin	artnem\lzsplash.bin	; LZ waterfalls and splashes
00033DE6                            		even
00033DE6                            Nem_LzSpikeBall:incbin	artnem\lzspball.bin	; LZ spiked ball on chain
00033F66                            		even
00033F66                            Nem_FlapDoor:	incbin	artnem\lzflapdo.bin	; LZ flapping door
000340D0                            		even
000340D0                            Nem_Bubbles:	incbin	artnem\lzbubble.bin	; LZ bubbles and countdown numbers
00034726                            		even
00034726                            Nem_LzBlock3:	incbin	artnem\lzblock3.bin	; LZ 32x16 block
000347DC                            		even
000347DC                            Nem_LzDoor1:	incbin	artnem\lzvdoor.bin	; LZ vertical door
0003487E                            		even
0003487E                            Nem_Harpoon:	incbin	artnem\lzharpoo.bin	; LZ harpoon
000349DA                            		even
000349DA                            Nem_LzPole:	incbin	artnem\lzpole.bin	; LZ pole that breaks
00034A3E                            		even
00034A3E                            Nem_LzDoor2:	incbin	artnem\lzhdoor.bin	; LZ large horizontal door
00034B90                            		even
00034B90                            Nem_LzWheel:	incbin	artnem\lzwheel.bin	; LZ wheel from corner of conveyor belt
00035072                            		even
00035072                            Nem_Gargoyle:	incbin	artnem\lzgargoy.bin	; LZ gargoyle head and spitting fire
000351E2                            		even
000351E2                            Nem_LzBlock2:	incbin	artnem\lzblock2.bin	; LZ blocks
0003549A                            		even
0003549A                            Nem_LzPlatfm:	incbin	artnem\lzptform.bin	; LZ rising platforms
000355D2                            		even
000355D2                            Nem_Cork:	incbin	artnem\lzcork.bin	; LZ cork block
000356FC                            		even
000356FC                            Nem_LzBlock1:	incbin	artnem\lzblock1.bin	; LZ 32x32 block
0003580C                            		even
0003580C                            ; ---------------------------------------------------------------------------
0003580C                            ; Compressed graphics - MZ stuff
0003580C                            ; ---------------------------------------------------------------------------
0003580C                            Nem_MzMetal:	incbin	artnem\mzmetal.bin	; MZ metal blocks
00035A9A                            		even
00035A9A                            Nem_MzSwitch:	incbin	artnem\mzswitch.bin	; MZ switch
00035B58                            		even
00035B58                            Nem_MzGlass:	incbin	artnem\mzglassy.bin	; MZ green glassy block
00035C10                            		even
00035C10                            Nem_GhzGrass:	incbin	artnem\xxxgrass.bin	; unused grass (GHZ or MZ?)
00035C64                            		even
00035C64                            Nem_MzFire:	incbin	artnem\mzfire.bin	; MZ fireballs
00035F42                            		even
00035F42                            Nem_Lava:	incbin	artnem\mzlava.bin	; MZ lava
00036858                            		even
00036858                            Nem_MzBlock:	incbin	artnem\mzblock.bin	; MZ green pushable block
000369BC                            		even
000369BC                            Nem_MzUnkBlock:	incbin	artnem\xxxmzblo.bin	; MZ unused background block
00036A44                            		even
00036A44                            ; ---------------------------------------------------------------------------
00036A44                            ; Compressed graphics - SLZ stuff
00036A44                            ; ---------------------------------------------------------------------------
00036A44                            Nem_Seesaw:	incbin	artnem\slzseesa.bin	; SLZ seesaw
00036C80                            		even
00036C80                            Nem_SlzSpike:	incbin	artnem\slzspike.bin	; SLZ spikeball that sits on a seesaw
00036DC6                            		even
00036DC6                            Nem_Fan:	incbin	artnem\slzfan.bin	; SLZ fan
0003700A                            		even
0003700A                            Nem_SlzWall:	incbin	artnem\slzwall.bin	; SLZ smashable wall
0003706C                            		even
0003706C                            Nem_Pylon:	incbin	artnem\slzpylon.bin	; SLZ foreground pylon
0003714E                            		even
0003714E                            Nem_SlzSwing:	incbin	artnem\slzswing.bin	; SLZ swinging platform
00037330                            		even
00037330                            Nem_SlzBlock:	incbin	artnem\slzblock.bin	; SLZ 32x32 block
0003743C                            		even
0003743C                            Nem_SlzCannon:	incbin	artnem\slzcanno.bin	; SLZ fireball launcher cannon
000374E0                            		even
000374E0                            ; ---------------------------------------------------------------------------
000374E0                            ; Compressed graphics - SYZ stuff
000374E0                            ; ---------------------------------------------------------------------------
000374E0                            Nem_Bumper:	incbin	artnem\syzbumpe.bin	; SYZ bumper
0003764A                            		even
0003764A                            Nem_SyzSpike2:	incbin	artnem\syzsspik.bin	; SYZ small spikeball
000376AC                            		even
000376AC                            Nem_LzSwitch:	incbin	artnem\switch.bin	; LZ/SYZ/SBZ switch
0003778E                            		even
0003778E                            Nem_SyzSpike1:	incbin	artnem\syzlspik.bin	; SYZ/SBZ large spikeball
00037A1C                            		even
00037A1C                            ; ---------------------------------------------------------------------------
00037A1C                            ; Compressed graphics - SBZ stuff
00037A1C                            ; ---------------------------------------------------------------------------
00037A1C                            Nem_SbzWheel1:	incbin	artnem\sbzwhee1.bin	; SBZ spot on rotating wheel that Sonic runs around
00037A70                            		even
00037A70                            Nem_SbzWheel2:	incbin	artnem\sbzwhee2.bin	; SBZ wheel that grabs Sonic
00037D0C                            		even
00037D0C                            Nem_Cutter:	incbin	artnem\sbzcutte.bin	; SBZ pizza cutter
00037F10                            		even
00037F10                            Nem_Stomper:	incbin	artnem\sbzstomp.bin	; SBZ stomper
000380AE                            		even
000380AE                            Nem_SpinPform:	incbin	artnem\sbzpform.bin	; SBZ spinning platform
000383DE                            		even
000383DE                            Nem_TrapDoor:	incbin	artnem\sbztrapd.bin	; SBZ trapdoor
000385BC                            		even
000385BC                            Nem_SbzFloor:	incbin	artnem\sbzfloor.bin	; SBZ collapsing floor
00038614                            		even
00038614                            Nem_Electric:	incbin	artnem\sbzshock.bin	; SBZ electric shock orb
000387DE 00                         		even
000387DE                            Nem_SbzBlock:	incbin	artnem\sbzvanis.bin	; SBZ vanishing block
000388DC                            		even
000388DC                            Nem_FlamePipe:	incbin	artnem\sbzflame.bin	; SBZ flaming pipe
00038A68                            		even
00038A68                            Nem_SbzDoor1:	incbin	artnem\sbzvdoor.bin	; SBZ small vertical door
00038AB8                            		even
00038AB8                            Nem_SlideFloor:	incbin	artnem\sbzslide.bin	; SBZ floor that slides away
00038B10                            		even
00038B10                            Nem_SbzDoor2:	incbin	artnem\sbzhdoor.bin	; SBZ large horizontal door
00038C0C                            		even
00038C0C                            Nem_Girder:	incbin	artnem\sbzgirde.bin	; SBZ crushing girder
00038D22                            		even
00038D22                            ; ---------------------------------------------------------------------------
00038D22                            ; Compressed graphics - enemies
00038D22                            ; ---------------------------------------------------------------------------
00038D22                            Nem_BallHog:	incbin	artnem\ballhog.bin	; ball hog
000390E2                            		even
000390E2                            Nem_Crabmeat:	incbin	artnem\crabmeat.bin	; crabmeat
0003928C 00                         		even
0003928C                            Nem_Buzz:	incbin	artnem\buzzbomb.bin	; buzz bomber
0003964E 00                         		even
0003964E                            Nem_UnkExplode:	incbin	artnem\xxxexplo.bin	; unused explosion
00039836                            		even
00039836                            Nem_Burrobot:	incbin	artnem\burrobot.bin	; burrobot
000399EE 00                         		even
000399EE                            Nem_Chopper:	incbin	artnem\chopper.bin	; chopper
00039C56                            		even
00039C56                            Nem_Jaws:	incbin	artnem\jaws.bin		; jaws
00039EE0                            		even
00039EE0                            Nem_Roller:	incbin	artnem\roller.bin	; roller
0003A504                            		even
0003A504                            Nem_Motobug:	incbin	artnem\motobug.bin	; moto bug
0003A6FA                            		even
0003A6FA                            Nem_Newtron:	incbin	artnem\newtron.bin	; newtron
0003AD18                            		even
0003AD18                            Nem_Yadrin:	incbin	artnem\yadrin.bin	; yadrin
0003B100                            		even
0003B100                            Nem_Basaran:	incbin	artnem\basaran.bin	; basaran
0003B3FC                            		even
0003B3FC                            Nem_Splats:	incbin	artnem\splats.bin	; splats
0003B644                            		even
0003B644                            Nem_Bomb:	incbin	artnem\bomb.bin		; bomb
0003B8DC                            		even
0003B8DC                            Nem_Orbinaut:	incbin	artnem\orbinaut.bin	; orbinaut
0003BABA                            		even
0003BABA                            Nem_Cater:	incbin	artnem\caterkil.bin	; caterkiller
0003BC48                            		even
0003BC48                            ; ---------------------------------------------------------------------------
0003BC48                            ; Compressed graphics - various
0003BC48                            ; ---------------------------------------------------------------------------
0003BC48                            Nem_TitleCard:	incbin	artnem\ttlcards.bin	; title cards
0003C256                            		even
0003C256                            Nem_Hud:	incbin	artnem\hud.bin		; HUD (rings, time, score)
0003C34C                            		even
0003C34C                            Nem_Lives:	incbin	artnem\lifeicon.bin	; life counter icon
0003C452                            		even
0003C452                            Nem_Ring:	incbin	artnem\rings.bin	; rings
0003C546                            		even
0003C546                            Nem_Monitors:	incbin	artnem\monitors.bin	; monitors
0003CA8A                            		even
0003CA8A                            Nem_Explode:	incbin	artnem\explosio.bin	; explosion
0003D0F0                            		even
0003D0F0                            Nem_Points:	incbin	artnem\points.bin	; points from destroyed enemy or object
0003D1A0                            		even
0003D1A0                            Nem_GameOver:	incbin	artnem\gameover.bin	; game over / time over
0003D332                            		even
0003D332                            Nem_HSpring:	incbin	artnem\springh.bin	; horizontal spring
0003D434                            		even
0003D434                            Nem_VSpring:	incbin	artnem\springv.bin	; vertical spring
0003D510                            		even
0003D510                            Nem_SignPost:	incbin	artnem\signpost.bin	; end of level signpost
0003D98C                            		even
0003D98C                            Nem_Lamp:	incbin	artnem\lamppost.bin	; lamppost
0003DA4C                            		even
0003DA4C                            Nem_BigFlash:	incbin	artnem\rngflash.bin	; flash from giant ring
0003DBC0                            		even
0003DBC0                            Nem_Bonus:	incbin	artnem\bonus.bin	; hidden bonuses at end of a level
0003DEC2                            		even
0003DEC2                            ; ---------------------------------------------------------------------------
0003DEC2                            ; Compressed graphics - continue screen
0003DEC2                            ; ---------------------------------------------------------------------------
0003DEC2                            Nem_ContSonic:	incbin	artnem\cntsonic.bin	; Sonic on continue screen
0003E172                            		even
0003E172                            Nem_MiniSonic:	incbin	artnem\cntother.bin	; mini Sonic and text on continue screen
0003E3AC                            		even
0003E3AC                            ; ---------------------------------------------------------------------------
0003E3AC                            ; Compressed graphics - animals
0003E3AC                            ; ---------------------------------------------------------------------------
0003E3AC                            Nem_Rabbit:	incbin	artnem\rabbit.bin	; rabbit
0003E504                            		even
0003E504                            Nem_Chicken:	incbin	artnem\chicken.bin	; chicken
0003E660                            		even
0003E660                            Nem_BlackBird:	incbin	artnem\blackbrd.bin	; blackbird
0003E7DC                            		even
0003E7DC                            Nem_Seal:	incbin	artnem\seal.bin		; seal
0003E8F8                            		even
0003E8F8                            Nem_Pig:	incbin	artnem\pig.bin		; pig
0003EA2E                            		even
0003EA2E                            Nem_Flicky:	incbin	artnem\flicky.bin	; flicky
0003EB68                            		even
0003EB68                            Nem_Squirrel:	incbin	artnem\squirrel.bin	; squirrel
0003ECC4                            		even
0003ECC4                            ; ---------------------------------------------------------------------------
0003ECC4                            ; Compressed graphics - primary patterns and block mappings
0003ECC4                            ; ---------------------------------------------------------------------------
0003ECC4                            Blk16_GHZ:	incbin	map16\ghz.bin
0003F5D8                            		even
0003F5D8                            Nem_GHZ_1st:	incbin	artnem\8x8ghz1.bin	; GHZ primary patterns
00040EE6                            		even
00040EE6                            Nem_GHZ_2nd:	incbin	artnem\8x8ghz2.bin	; GHZ secondary patterns
00042266                            		even
00042266                            Blk256_GHZ:	incbin	map256\ghz.bin
00044564                            		even
00044564                            Blk16_LZ:	incbin	map16\lz.bin
00044C9E                            		even
00044C9E                            Nem_LZ:		incbin	artnem\8x8lz.bin	; LZ primary patterns
000470A0                            		even
000470A0                            Blk256_LZ:	incbin	map256\lz.bin
00049A20                            		even
00049A20                            Blk16_MZ:	incbin	map16\mz.bin
0004A17C                            		even
0004A17C                            Nem_MZ:		incbin	artnem\8x8mz.bin	; MZ primary patterns
0004CA04                            		even
0004CA04                            Blk256_MZ:	incbin	map256\mz.bin
0004E188                            		even
0004E188                            Blk16_SLZ:	incbin	map16\slz.bin
0004E46E                            		even
0004E46E                            Nem_SLZ:	incbin	artnem\8x8slz.bin	; SLZ primary patterns
0004F590                            		even
0004F590                            Blk256_SLZ:	incbin	map256\slz.bin
0004F74A                            		even
0004F74A                            Blk16_SYZ:	incbin	map16\syz.bin
00050370                            		even
00050370                            Nem_SYZ:	incbin	artnem\8x8syz.bin	; SYZ primary patterns
00054902                            		even
00054902                            Blk256_SYZ:	incbin	map256\syz.bin
0005695E                            		even
0005695E                            Blk16_SBZ:	incbin	map16\sbz.bin
000578A6                            		even
000578A6                            Nem_SBZ:	incbin	artnem\8x8sbz.bin	; SBZ primary patterns
0005A26A                            		even
0005A26A                            Blk256_SBZ:	incbin	map256\sbz.bin
0005CD60                            		even
0005CD60                            ; ---------------------------------------------------------------------------
0005CD60                            ; Compressed graphics - bosses and ending sequence
0005CD60                            ; ---------------------------------------------------------------------------
0005CD60                            Nem_Eggman:	incbin	artnem\bossmain.bin	; boss main patterns
0005D57A 00                         		even
0005D57A                            Nem_Weapons:	incbin	artnem\bossxtra.bin	; boss add-ons and weapons
0005D864                            		even
0005D864                            Nem_Prison:	incbin	artnem\prison.bin	; prison capsule
0005E0E8                            		even
0005E0E8                            Nem_Sbz2Eggman:	incbin	artnem\sbz2boss.bin	; Eggman in SBZ2 and FZ
0005EE3E 00                         		even
0005EE3E                            Nem_FzBoss:	incbin	artnem\fzboss.bin	; FZ boss
0005F5A6                            		even
0005F5A6                            Nem_FzEggman:	incbin	artnem\fzboss2.bin	; Eggman after the FZ boss
0005FB26                            		even
0005FB26                            Nem_Exhaust:	incbin	artnem\bossflam.bin	; boss exhaust flame
0005FC46                            		even
0005FC46                            Nem_EndEm:	incbin	artnem\endemera.bin	; ending sequence chaos emeralds
0005FE44                            		even
0005FE44                            Nem_EndSonic:	incbin	artnem\endsonic.bin	; ending sequence Sonic
00061022                            		even
00061022                            Nem_TryAgain:	incbin	artnem\tryagain.bin	; ending "try again" screen
00061966                            		even
00061966                            Nem_EndEggman:	incbin	artnem\xxxend.bin	; unused boss sequence on ending
00061D3C                            		even
00061D3C                            Kos_EndFlowers:	incbin	artkos\flowers.bin	; ending sequence animated flowers
000622CC                            		even
000622CC                            Nem_EndFlower:	incbin	artnem\endflowe.bin	; ending sequence flowers
00062554                            		even
00062554                            Nem_CreditText:	incbin	artnem\credits.bin	; credits alphabet
00062B52                            		even
00062B52                            Nem_EndStH:	incbin	artnem\endtext.bin	; ending sequence "Sonic the Hedgehog" text
00062DDA                            		even
00062DDA                            		incbin	misc\padding2.bin
00062EDE                            		even
00062EDE                            ; ---------------------------------------------------------------------------
00062EDE                            ; Collision data
00062EDE                            ; ---------------------------------------------------------------------------
00062EDE                            AngleMap:	incbin	collide\anglemap.bin	; floor angle map
00062FDE                            		even
00062FDE                            CollArray1:	incbin	collide\carray_n.bin	; normal collision array
00063FDE                            		even
00063FDE                            CollArray2:	incbin	collide\carray_r.bin	; rotated collision array
00064FDE                            		even
00064FDE                            Col_GHZ:	incbin	collide\ghz.bin		; GHZ index
00065196 00                         		even
00065196                            Col_LZ:		incbin	collide\lz.bin		; LZ index
000652FE                            		even
000652FE                            Col_MZ:		incbin	collide\mz.bin		; MZ index
0006548E                            		even
0006548E                            Col_SLZ:	incbin	collide\slz.bin		; SLZ index
00065682                            		even
00065682                            Col_SYZ:	incbin	collide\syz.bin		; SYZ index
00065888                            		even
00065888                            Col_SBZ:	incbin	collide\sbz.bin		; SBZ index
00065B26                            		even
00065B26                            ; ---------------------------------------------------------------------------
00065B26                            ; Special layouts
00065B26                            ; ---------------------------------------------------------------------------
00065B26                            SS_1:		incbin	sslayout\1.bin
00065DA0                            		even
00065DA0                            SS_2:		incbin	sslayout\2.bin
000661B2                            		even
000661B2                            SS_3:		incbin	sslayout\3.bin
0006650E                            		even
0006650E                            SS_4:		incbin	sslayout\4.bin
000669E8                            		even
000669E8                            SS_5:		incbin	sslayout\5.bin
00066EBA                            		even
00066EBA                            SS_6:		incbin	sslayout\6.bin
000671CA                            		even
000671CA                            ; ---------------------------------------------------------------------------
000671CA                            ; Animated uncompressed graphics
000671CA                            ; ---------------------------------------------------------------------------
000671CA                            Art_GhzWater:	incbin	artunc\ghzwater.bin	; GHZ waterfall
000673CA                            		even
000673CA                            Art_GhzFlower1:	incbin	artunc\ghzflowl.bin	; GHZ large flower
000677CA                            		even
000677CA                            Art_GhzFlower2:	incbin	artunc\ghzflows.bin	; GHZ small flower
00067C4A                            		even
00067C4A                            Art_MzLava1:	incbin	artunc\mzlava1.bin	; MZ lava surface
00067F4A                            		even
00067F4A                            Art_MzLava2:	incbin	artunc\mzlava2.bin	; MZ lava
0006854A                            		even
0006854A                            Art_MzTorch:	incbin	artunc\mztorch.bin	; MZ torch in background
0006884A                            		even
0006884A                            Art_SbzSmoke:	incbin	artunc\sbzsmoke.bin	; SBZ smoke in background
000692CA                            		even
000692CA                            
000692CA                            ; ---------------------------------------------------------------------------
000692CA                            ; Level	layout index
000692CA                            ; ---------------------------------------------------------------------------
000692CA 0000 0000 0000             Level_Index:	dc.w Level_GHZ1-Level_Index, Level_GHZbg-Level_Index, byte_68D70-Level_Index
000692D0 0000 0000 0000             		dc.w Level_GHZ2-Level_Index, Level_GHZbg-Level_Index, byte_68E3C-Level_Index
000692D6 0000 0000 0000             		dc.w Level_GHZ3-Level_Index, Level_GHZbg-Level_Index, byte_68F84-Level_Index
000692DC 0000 0000 0000             		dc.w byte_68F88-Level_Index, byte_68F88-Level_Index, byte_68F88-Level_Index
000692E2 0000 0000 0000             		dc.w Level_LZ1-Level_Index, Level_LZbg-Level_Index, byte_69190-Level_Index
000692E8 0000 0000 0000             		dc.w Level_LZ2-Level_Index, Level_LZbg-Level_Index, byte_6922E-Level_Index
000692EE 0000 0000 0000             		dc.w Level_LZ3-Level_Index, Level_LZbg-Level_Index, byte_6934C-Level_Index
000692F4 0000 0000 0000             		dc.w Level_SBZ3-Level_Index, Level_LZbg-Level_Index, byte_6940A-Level_Index
000692FA 0000 0000 0000             		dc.w Level_MZ1-Level_Index, Level_MZ1bg-Level_Index, Level_MZ1-Level_Index
00069300 0000 0000 0000             		dc.w Level_MZ2-Level_Index, Level_MZ2bg-Level_Index, byte_6965C-Level_Index
00069306 0000 0000 0000             		dc.w Level_MZ3-Level_Index, Level_MZ3bg-Level_Index, byte_697E6-Level_Index
0006930C 0000 0000 0000             		dc.w byte_697EA-Level_Index, byte_697EA-Level_Index, byte_697EA-Level_Index
00069312 0000 0000 0000             		dc.w Level_SLZ1-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
00069318 0000 0000 0000             		dc.w Level_SLZ2-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0006931E 0000 0000 0000             		dc.w Level_SLZ3-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
00069324 0000 0000 0000             		dc.w byte_69B84-Level_Index, byte_69B84-Level_Index, byte_69B84-Level_Index
0006932A 0000 0000 0000             		dc.w Level_SYZ1-Level_Index, Level_SYZbg-Level_Index, byte_69C7E-Level_Index
00069330 0000 0000 0000             		dc.w Level_SYZ2-Level_Index, Level_SYZbg-Level_Index, byte_69D86-Level_Index
00069336 0000 0000 0000             		dc.w Level_SYZ3-Level_Index, Level_SYZbg-Level_Index, byte_69EE4-Level_Index
0006933C 0000 0000 0000             		dc.w byte_69EE8-Level_Index, byte_69EE8-Level_Index, byte_69EE8-Level_Index
00069342 0000 0000 0000             		dc.w Level_SBZ1-Level_Index, Level_SBZ1bg-Level_Index, Level_SBZ1bg-Level_Index
00069348 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, Level_SBZ2bg-Level_Index
0006934E 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, byte_6A2F8-Level_Index
00069354 0000 0000 0000             		dc.w byte_6A2FC-Level_Index, byte_6A2FC-Level_Index, byte_6A2FC-Level_Index
0006935A 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
00069360 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
00069366 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
0006936C 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
00069372                            
00069372                            Level_GHZ1:	incbin	levels\ghz1.bin
00069464                            		even
00069464 0000 0000                  byte_68D70:	dc.b 0,	0, 0, 0
00069468                            Level_GHZ2:	incbin	levels\ghz2.bin
00069530                            		even
00069530 0000 0000                  byte_68E3C:	dc.b 0,	0, 0, 0
00069534                            Level_GHZ3:	incbin	levels\ghz3.bin
00069656                            		even
00069656                            Level_GHZbg:	incbin	levels\ghzbg.bin
00069678                            		even
00069678 0000 0000                  byte_68F84:	dc.b 0,	0, 0, 0
0006967C 0000 0000                  byte_68F88:	dc.b 0,	0, 0, 0
00069680                            
00069680                            Level_LZ1:	incbin	levels\lz1.bin
00069782                            		even
00069782                            Level_LZbg:	incbin	levels\lzbg.bin
00069884                            		even
00069884 0000 0000                  byte_69190:	dc.b 0,	0, 0, 0
00069888                            Level_LZ2:	incbin	levels\lz2.bin
00069922                            		even
00069922 0000 0000                  byte_6922E:	dc.b 0,	0, 0, 0
00069926                            Level_LZ3:	incbin	levels\lz3.bin
00069A40                            		even
00069A40 0000 0000                  byte_6934C:	dc.b 0,	0, 0, 0
00069A44                            Level_SBZ3:	incbin	levels\sbz3.bin
00069AFE                            		even
00069AFE 0000 0000                  byte_6940A:	dc.b 0,	0, 0, 0
00069B02                            
00069B02                            Level_MZ1:	incbin	levels\mz1.bin
00069BA0                            		even
00069BA0                            Level_MZ1bg:	incbin	levels\mz1bg.bin
00069C1A                            		even
00069C1A                            Level_MZ2:	incbin	levels\mz2.bin
00069CBE                            		even
00069CBE                            Level_MZ2bg:	incbin	levels\mz2bg.bin
00069D50                            		even
00069D50 0000 0000                  byte_6965C:	dc.b 0,	0, 0, 0
00069D54                            Level_MZ3:	incbin	levels\mz3.bin
00069E36                            		even
00069E36                            Level_MZ3bg:	incbin	levels\mz3bg.bin
00069EDA 00                         		even
00069EDA 0000 0000                  byte_697E6:	dc.b 0,	0, 0, 0
00069EDE 0000 0000                  byte_697EA:	dc.b 0,	0, 0, 0
00069EE2                            
00069EE2                            Level_SLZ1:	incbin	levels\slz1.bin
00069FF4                            		even
00069FF4                            Level_SLZbg:	incbin	levels\slzbg.bin
0006A00E                            		even
0006A00E                            Level_SLZ2:	incbin	levels\slz2.bin
0006A0FE                            		even
0006A0FE                            Level_SLZ3:	incbin	levels\slz3.bin
0006A218                            		even
0006A218 0000 0000                  byte_69B84:	dc.b 0,	0, 0, 0
0006A21C                            
0006A21C                            Level_SYZ1:	incbin	levels\syz1.bin
0006A2D8 00                         		even
0006A2D8                            Level_SYZbg:	incbin	levels\syzbg.bin
0006A312                            		even
0006A312 0000 0000                  byte_69C7E:	dc.b 0,	0, 0, 0
0006A316                            Level_SYZ2:	incbin	levels\syz2.bin
0006A41A                            		even
0006A41A 0000 0000                  byte_69D86:	dc.b 0,	0, 0, 0
0006A41E                            Level_SYZ3:	incbin	levels\syz3.bin
0006A578 00                         		even
0006A578 0000 0000                  byte_69EE4:	dc.b 0,	0, 0, 0
0006A57C 0000 0000                  byte_69EE8:	dc.b 0,	0, 0, 0
0006A580                            
0006A580                            Level_SBZ1:	incbin	levels\sbz1.bin
0006A6A2                            		even
0006A6A2                            Level_SBZ1bg:	incbin	levels\sbz1bg.bin
0006A6E0                            		even
0006A6E0                            Level_SBZ2:	incbin	levels\sbz2.bin
0006A822                            		even
0006A822                            Level_SBZ2bg:	incbin	levels\sbz2bg.bin
0006A98C                            		even
0006A98C 0000 0000                  byte_6A2F8:	dc.b 0,	0, 0, 0
0006A990 0000 0000                  byte_6A2FC:	dc.b 0,	0, 0, 0
0006A994                            Level_End:	incbin	levels\ending.bin
0006A9C4 00                         		even
0006A9C4 0000 0000                  byte_6A320:	dc.b 0,	0, 0, 0
0006A9C8                            
0006A9C8                            ; ---------------------------------------------------------------------------
0006A9C8                            ; Animated uncompressed giant ring graphics
0006A9C8                            ; ---------------------------------------------------------------------------
0006A9C8                            Art_BigRing:	incbin	artunc\bigring.bin
0006B608                            		even
0006B608                            
0006B608                            		incbin	misc\padding3.bin
0006B6A4                            		even
0006B6A4                            
0006B6A4                            ; ---------------------------------------------------------------------------
0006B6A4                            ; Sprite locations index
0006B6A4                            ; ---------------------------------------------------------------------------
0006B6A4 0000 0000                  ObjPos_Index:	dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006B6A8 0000 0000                  		dc.w ObjPos_GHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006B6AC 0000 0000                  		dc.w ObjPos_GHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006B6B0 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006B6B4 0000 0000                  		dc.w ObjPos_LZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006B6B8 0000 0000                  		dc.w ObjPos_LZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006B6BC 0000 0000                  		dc.w ObjPos_LZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006B6C0 0000 0000                  		dc.w ObjPos_SBZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006B6C4 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006B6C8 0000 0000                  		dc.w ObjPos_MZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006B6CC 0000 0000                  		dc.w ObjPos_MZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006B6D0 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006B6D4 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006B6D8 0000 0000                  		dc.w ObjPos_SLZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006B6DC 0000 0000                  		dc.w ObjPos_SLZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006B6E0 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006B6E4 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006B6E8 0000 0000                  		dc.w ObjPos_SYZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006B6EC 0000 0000                  		dc.w ObjPos_SYZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006B6F0 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006B6F4 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006B6F8 0000 0000                  		dc.w ObjPos_SBZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006B6FC 0000 0000                  		dc.w ObjPos_FZ-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006B700 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006B704 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006B708 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006B70C 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006B710 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006B714 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
0006B718 0000 0000                  		dc.w ObjPos_LZ2pf1-ObjPos_Index, ObjPos_LZ2pf2-ObjPos_Index
0006B71C 0000 0000                  		dc.w ObjPos_LZ3pf1-ObjPos_Index, ObjPos_LZ3pf2-ObjPos_Index
0006B720 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
0006B724 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
0006B728 0000 0000                  		dc.w ObjPos_SBZ1pf3-ObjPos_Index, ObjPos_SBZ1pf4-ObjPos_Index
0006B72C 0000 0000                  		dc.w ObjPos_SBZ1pf5-ObjPos_Index, ObjPos_SBZ1pf6-ObjPos_Index
0006B730 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
0006B734 FFFF 0000 0000             		dc.b $FF, $FF, 0, 0, 0,	0
0006B73A                            ObjPos_GHZ1:	incbin	objpos\ghz1.bin
0006BF80                            		even
0006BF80                            ObjPos_GHZ2:	incbin	objpos\ghz2.bin
0006C034                            		even
0006C034                            ObjPos_GHZ3:	incbin	objpos\ghz3.bin
0006CA78                            		even
0006CA78                            ObjPos_LZ1:	incbin	objpos\lz1.bin
0006CE20                            		even
0006CE20                            ObjPos_LZ2:	incbin	objpos\lz2.bin
0006D156                            		even
0006D156                            ObjPos_LZ3:	incbin	objpos\lz3.bin
0006D6A2                            		even
0006D6A2                            ObjPos_SBZ3:	incbin	objpos\sbz3.bin
0006DB3A                            		even
0006DB3A                            ObjPos_LZ1pf1:	incbin	objpos\lz1pf1.bin
0006DB6C                            		even
0006DB6C                            ObjPos_LZ1pf2:	incbin	objpos\lz1pf2.bin
0006DB9E                            		even
0006DB9E                            ObjPos_LZ2pf1:	incbin	objpos\lz2pf1.bin
0006DBD0                            		even
0006DBD0                            ObjPos_LZ2pf2:	incbin	objpos\lz2pf2.bin
0006DC02                            		even
0006DC02                            ObjPos_LZ3pf1:	incbin	objpos\lz3pf1.bin
0006DC4C                            		even
0006DC4C                            ObjPos_LZ3pf2:	incbin	objpos\lz3pf2.bin
0006DC8A                            		even
0006DC8A                            ObjPos_MZ1:	incbin	objpos\mz1.bin
0006DFF6                            		even
0006DFF6                            ObjPos_MZ2:	incbin	objpos\mz2.bin
0006E4A0                            		even
0006E4A0                            ObjPos_MZ3:	incbin	objpos\mz3.bin
0006EA16                            		even
0006EA16                            ObjPos_SLZ1:	incbin	objpos\slz1.bin
0006EF5C                            		even
0006EF5C                            ObjPos_SLZ2:	incbin	objpos\slz2.bin
0006F3C4                            		even
0006F3C4                            ObjPos_SLZ3:	incbin	objpos\slz3.bin
0006F9A6                            		even
0006F9A6                            ObjPos_SYZ1:	incbin	objpos\syz1.bin
00070018                            		even
00070018                            ObjPos_SYZ2:	incbin	objpos\syz2.bin
00070582                            		even
00070582                            ObjPos_SYZ3:	incbin	objpos\syz3.bin
00070B88                            		even
00070B88                            ObjPos_SBZ1:	incbin	objpos\sbz1.bin
000712C6                            		even
000712C6                            ObjPos_SBZ2:	incbin	objpos\sbz2.bin
000719A4                            		even
000719A4                            ObjPos_FZ:	incbin	objpos\fz.bin
000719B6                            		even
000719B6                            ObjPos_SBZ1pf1:	incbin	objpos\sbz1pf1.bin
000719E8                            		even
000719E8                            ObjPos_SBZ1pf2:	incbin	objpos\sbz1pf2.bin
00071A1A                            		even
00071A1A                            ObjPos_SBZ1pf3:	incbin	objpos\sbz1pf3.bin
00071A4C                            		even
00071A4C                            ObjPos_SBZ1pf4:	incbin	objpos\sbz1pf4.bin
00071A7E                            		even
00071A7E                            ObjPos_SBZ1pf5:	incbin	objpos\sbz1pf5.bin
00071AB0                            		even
00071AB0                            ObjPos_SBZ1pf6:	incbin	objpos\sbz1pf6.bin
00071AE8                            		even
00071AE8                            ObjPos_End:	incbin	objpos\ending.bin
00071C44                            		even
00071C44 FFFF 0000 0000             ObjPos_Null:	dc.b $FF, $FF, 0, 0, 0,	0
00071C4A                            ; ---------------------------------------------------------------------------
00071C4A                            		incbin	misc\padding4.bin
00072274                            		even
00072274                            
00072274 0000 0000                  Go_SoundTypes:	dc.l SoundTypes		; XREF: Sound_Play
00072278 0000 0000                  Go_SoundD0:	dc.l SoundD0Index	; XREF: Sound_D0toDF
0007227C 0000 0000                  Go_MusicIndex:	dc.l MusicIndex		; XREF: Sound_81to9F
00072280 0000 0000                  Go_SoundIndex:	dc.l SoundIndex		; XREF: Sound_A0toCF
00072284 0000 0000                  off_719A0:	dc.l byte_71A94		; XREF: Sound_81to9F
00072288 0000 0000                  Go_PSGIndex:	dc.l PSG_Index		; XREF: sub_72926
0007228C                            ; ---------------------------------------------------------------------------
0007228C                            ; PSG instruments used in music
0007228C                            ; ---------------------------------------------------------------------------
0007228C 0000 0000 0000 0000 0000+  PSG_Index:	dc.l PSG1, PSG2, PSG3
00072298 0000 0000 0000 0000 0000+  		dc.l PSG4, PSG5, PSG6
000722A4 0000 0000 0000 0000 0000+  		dc.l PSG7, PSG8, PSG9
000722B0                            PSG1:		incbin	sound\psg1.bin
000722C7                            PSG2:		incbin	sound\psg2.bin
000722CE                            PSG3:		incbin	sound\psg3.bin
000722DF                            PSG4:		incbin	sound\psg4.bin
000722EA                            PSG6:		incbin	sound\psg6.bin
000722F9                            PSG5:		incbin	sound\psg5.bin
00072323                            PSG7:		incbin	sound\psg7.bin
0007233F                            PSG8:		incbin	sound\psg8.bin
00072367                            PSG9:		incbin	sound\psg9.bin
00072378                            
00072378 0772 7326 1508 FF05        byte_71A94:	dc.b 7,	$72, $73, $26, $15, 8, $FF, 5
00072380                            ; ---------------------------------------------------------------------------
00072380                            ; Music	Pointers
00072380                            ; ---------------------------------------------------------------------------
00072380 0000 0000 0000 0000        MusicIndex:	dc.l Music81, Music82
00072388 0000 0000 0000 0000        		dc.l Music83, Music84
00072390 0000 0000 0000 0000        		dc.l Music85, Music86
00072398 0000 0000 0000 0000        		dc.l Music87, Music88
000723A0 0000 0000 0000 0000        		dc.l Music89, Music8A
000723A8 0000 0000 0000 0000        		dc.l Music8B, Music8C
000723B0 0000 0000 0000 0000        		dc.l Music8D, Music8E
000723B8 0000 0000 0000 0000        		dc.l Music8F, Music90
000723C0 0000 0000 0000 0000        		dc.l Music91, Music92
000723C8 0000 0000 0000 0000        		dc.l Music93, Music94
000723D0 0000 0000 0000 0000        		dc.l Music95, Music96
000723D8 0000 0000 0000 0000        		dc.l Music97, Music98
000723E0 0000 0000 0000 0000        		dc.l Music99, Music9A
000723E8 0000 0000 0000 0000        		dc.l Music9B, Music9C
000723F0 0000 0000 0000 0000        		dc.l Music9D, Music9E
000723F8 0000 0000                  		dc.l Music9F
000723FC                            ; ---------------------------------------------------------------------------
000723FC                            ; Type of sound	being played ($90 = music; $70 = normal	sound effect)
000723FC                            ; ---------------------------------------------------------------------------
000723FC 9090 9090 9090 9090 9090+  SoundTypes:	dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$90
0007240C 9090 9090 9090 9090 9090+  		dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$80
0007241C 7070 7070 7070 7070 7068+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $68, $70, $70, $70, $60, $70,	$70
0007242C 6070 6070 7070 7070 7070+  		dc.b $60, $70, $60, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $7F,	$60
0007243C 7070 7070 7070 7070 7070+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $70,	$80
0007244C 8080 8080 8080 8080 8080+  		dc.b $80, $80, $80, $80, $80, $80, $80,	$80, $80, $80, $80, $80, $80, $80, $80,	$90
0007245C 9090 9090                  		dc.b $90, $90, $90, $90
00072460                            
00072460                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00072460                            
00072460                            
00072460                            sub_71B4C:				; XREF: loc_B10; PalToCRAM
00072460 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00072468 4E71                       		nop	
0007246A 4E71                       		nop	
0007246C 4E71                       		nop	
0007246E                            
0007246E                            loc_71B5A:
0007246E 0839 0000 00A1 1100        		btst	#0,($A11100).l
00072476 66F6                       		bne.s	loc_71B5A
00072478                            
00072478 0839 0007 00A0 1FFD        		btst	#7,($A01FFD).l
00072480 6700                       		beq.s	loc_71B82
00072482 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
0007248A 4E71                       		nop	
0007248C 4E71                       		nop	
0007248E 4E71                       		nop	
00072490 4E71                       		nop	
00072492 4E71                       		nop	
00072494 60CA                       		bra.s	sub_71B4C
00072496                            ; ===========================================================================
00072496                            
00072496                            loc_71B82:
00072496 4DF9 00FF F000             		lea	($FFF000).l,a6
0007249C 422E 000E                  		clr.b	$E(a6)
000724A0 4A2E 0003                  		tst.b	3(a6)		; is music paused?
000724A4 6600 0000                  		bne.w	loc_71E50	; if yes, branch
000724A8 532E 0001                  		subq.b	#1,1(a6)
000724AC 6600                       		bne.s	loc_71B9E
000724AE 4EBA 0000                  		jsr	sub_7260C(pc)
000724B2                            
000724B2                            loc_71B9E:
000724B2 102E 0004                  		move.b	4(a6),d0
000724B6 6700                       		beq.s	loc_71BA8
000724B8 4EBA 0000                  		jsr	sub_72504(pc)
000724BC                            
000724BC                            loc_71BA8:
000724BC 4A2E 0024                  		tst.b	$24(a6)
000724C0 6700                       		beq.s	loc_71BB2
000724C2 4EBA 0000                  		jsr	sub_7267C(pc)
000724C6                            
000724C6                            loc_71BB2:
000724C6 4A6E 000A                  		tst.w	$A(a6)		; is music or sound being played?
000724CA 6700                       		beq.s	loc_71BBC	; if not, branch
000724CC 4EBA 0000                  		jsr	Sound_Play(pc)
000724D0                            
000724D0                            loc_71BBC:
000724D0 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
000724D6 6700                       		beq.s	loc_71BC8
000724D8 4EBA 0000                  		jsr	Sound_ChkValue(pc)
000724DC                            
000724DC                            loc_71BC8:
000724DC 4BEE 0040                  		lea	$40(a6),a5
000724E0 4A15                       		tst.b	(a5)
000724E2 6A00                       		bpl.s	loc_71BD4
000724E4 4EBA 0000                  		jsr	sub_71C4E(pc)
000724E8                            
000724E8                            loc_71BD4:
000724E8 422E 0008                  		clr.b	8(a6)
000724EC 7E05                       		moveq	#5,d7
000724EE                            
000724EE                            loc_71BDA:
000724EE DAFC 0030                  		adda.w	#$30,a5
000724F2 4A15                       		tst.b	(a5)
000724F4 6A00                       		bpl.s	loc_71BE6
000724F6 4EBA 0000                  		jsr	sub_71CCA(pc)
000724FA                            
000724FA                            loc_71BE6:
000724FA 51CF FFF2                  		dbf	d7,loc_71BDA
000724FE                            
000724FE 7E02                       		moveq	#2,d7
00072500                            
00072500                            loc_71BEC:
00072500 DAFC 0030                  		adda.w	#$30,a5
00072504 4A15                       		tst.b	(a5)
00072506 6A00                       		bpl.s	loc_71BF8
00072508 4EBA 0000                  		jsr	sub_72850(pc)
0007250C                            
0007250C                            loc_71BF8:
0007250C 51CF FFF2                  		dbf	d7,loc_71BEC
00072510                            
00072510 1D7C 0080 000E             		move.b	#$80,$E(a6)
00072516 7E02                       		moveq	#2,d7
00072518                            
00072518                            loc_71C04:
00072518 DAFC 0030                  		adda.w	#$30,a5
0007251C 4A15                       		tst.b	(a5)
0007251E 6A00                       		bpl.s	loc_71C10
00072520 4EBA 0000                  		jsr	sub_71CCA(pc)
00072524                            
00072524                            loc_71C10:
00072524 51CF FFF2                  		dbf	d7,loc_71C04
00072528                            
00072528 7E02                       		moveq	#2,d7
0007252A                            
0007252A                            loc_71C16:
0007252A DAFC 0030                  		adda.w	#$30,a5
0007252E 4A15                       		tst.b	(a5)
00072530 6A00                       		bpl.s	loc_71C22
00072532 4EBA 0000                  		jsr	sub_72850(pc)
00072536                            
00072536                            loc_71C22:
00072536 51CF FFF2                  		dbf	d7,loc_71C16
0007253A 1D7C 0040 000E             		move.b	#$40,$E(a6)
00072540 DAFC 0030                  		adda.w	#$30,a5
00072544 4A15                       		tst.b	(a5)
00072546 6A00                       		bpl.s	loc_71C38
00072548 4EBA 0000                  		jsr	sub_71CCA(pc)
0007254C                            
0007254C                            loc_71C38:
0007254C DAFC 0030                  		adda.w	#$30,a5
00072550 4A15                       		tst.b	(a5)
00072552 6A00                       		bpl.s	loc_71C44
00072554 4EBA 0000                  		jsr	sub_72850(pc)
00072558                            
00072558                            loc_71C44:
00072558 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00072560 4E75                       		rts	
00072562                            ; End of function sub_71B4C
00072562                            
00072562                            
00072562                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00072562                            
00072562                            
00072562                            sub_71C4E:				; XREF: sub_71B4C
00072562 532D 000E                  		subq.b	#1,$E(a5)
00072566 6600                       		bne.s	locret_71CAA
00072568 1D7C 0080 0008             		move.b	#$80,8(a6)
0007256E 286D 0004                  		movea.l	4(a5),a4
00072572                            
00072572                            loc_71C5E:
00072572 7A00                       		moveq	#0,d5
00072574 1A1C                       		move.b	(a4)+,d5
00072576 0C05 00E0                  		cmpi.b	#-$20,d5
0007257A 6500                       		bcs.s	loc_71C6E
0007257C 4EBA 0000                  		jsr	sub_72A5A(pc)
00072580 60F0                       		bra.s	loc_71C5E
00072582                            ; ===========================================================================
00072582                            
00072582                            loc_71C6E:
00072582 4A05                       		tst.b	d5
00072584 6A00                       		bpl.s	loc_71C84
00072586 1B45 0010                  		move.b	d5,$10(a5)
0007258A 1A1C                       		move.b	(a4)+,d5
0007258C 6A00                       		bpl.s	loc_71C84
0007258E 534C                       		subq.w	#1,a4
00072590 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
00072596 6000                       		bra.s	loc_71C88
00072598                            ; ===========================================================================
00072598                            
00072598                            loc_71C84:
00072598 4EBA 0000                  		jsr	sub_71D40(pc)
0007259C                            
0007259C                            loc_71C88:
0007259C 2B4C 0004                  		move.l	a4,4(a5)
000725A0 0815 0002                  		btst	#2,(a5)
000725A4 6600                       		bne.s	locret_71CAA
000725A6 7000                       		moveq	#0,d0
000725A8 102D 0010                  		move.b	$10(a5),d0
000725AC 0C00 0080                  		cmpi.b	#$80,d0
000725B0 6700                       		beq.s	locret_71CAA
000725B2 0800 0003                  		btst	#3,d0
000725B6 6600                       		bne.s	loc_71CAC
000725B8 13C0 00A0 1FFF             		move.b	d0,($A01FFF).l
000725BE                            
000725BE                            locret_71CAA:
000725BE 4E75                       		rts	
000725C0                            ; ===========================================================================
000725C0                            
000725C0                            loc_71CAC:
000725C0 0400 0088                  		subi.b	#$88,d0
000725C4 103B 0000                  		move.b	byte_71CC4(pc,d0.w),d0
000725C8 13C0 00A0 00EA             		move.b	d0,($A000EA).l
000725CE 13FC 0083 00A0 1FFF        		move.b	#$83,($A01FFF).l
000725D6 4E75                       		rts	
000725D8                            ; End of function sub_71C4E
000725D8                            
000725D8                            ; ===========================================================================
000725D8 1215 1C1D FFFF             byte_71CC4:	dc.b $12, $15, $1C, $1D, $FF, $FF
000725DE                            
000725DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000725DE                            
000725DE                            
000725DE                            sub_71CCA:				; XREF: sub_71B4C
000725DE 532D 000E                  		subq.b	#1,$E(a5)
000725E2 6600                       		bne.s	loc_71CE0
000725E4 0895 0004                  		bclr	#4,(a5)
000725E8 4EBA 0000                  		jsr	sub_71CEC(pc)
000725EC 4EBA 0000                  		jsr	sub_71E18(pc)
000725F0 6000 0000                  		bra.w	loc_726E2
000725F4                            ; ===========================================================================
000725F4                            
000725F4                            loc_71CE0:
000725F4 4EBA 0000                  		jsr	sub_71D9E(pc)
000725F8 4EBA 0000                  		jsr	sub_71DC6(pc)
000725FC 6000 0000                  		bra.w	loc_71E24
00072600                            ; End of function sub_71CCA
00072600                            
00072600                            
00072600                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00072600                            
00072600                            
00072600                            sub_71CEC:				; XREF: sub_71CCA
00072600 286D 0004                  		movea.l	4(a5),a4
00072604 0895 0001                  		bclr	#1,(a5)
00072608                            
00072608                            loc_71CF4:
00072608 7A00                       		moveq	#0,d5
0007260A 1A1C                       		move.b	(a4)+,d5
0007260C 0C05 00E0                  		cmpi.b	#-$20,d5
00072610 6500                       		bcs.s	loc_71D04
00072612 4EBA 0000                  		jsr	sub_72A5A(pc)
00072616 60F0                       		bra.s	loc_71CF4
00072618                            ; ===========================================================================
00072618                            
00072618                            loc_71D04:
00072618 4EBA 0000                  		jsr	sub_726FE(pc)
0007261C 4A05                       		tst.b	d5
0007261E 6A00                       		bpl.s	loc_71D1A
00072620 4EBA 0000                  		jsr	sub_71D22(pc)
00072624 1A1C                       		move.b	(a4)+,d5
00072626 6A00                       		bpl.s	loc_71D1A
00072628 534C                       		subq.w	#1,a4
0007262A 6000 0000                  		bra.w	sub_71D60
0007262E                            ; ===========================================================================
0007262E                            
0007262E                            loc_71D1A:
0007262E 4EBA 0000                  		jsr	sub_71D40(pc)
00072632 6000 0000                  		bra.w	sub_71D60
00072636                            ; End of function sub_71CEC
00072636                            
00072636                            
00072636                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00072636                            
00072636                            
00072636                            sub_71D22:				; XREF: sub_71CEC
00072636 0405 0080                  		subi.b	#$80,d5
0007263A 6700                       		beq.s	loc_71D58
0007263C DA2D 0008                  		add.b	8(a5),d5
00072640 0245 007F                  		andi.w	#$7F,d5
00072644 E34D                       		lsl.w	#1,d5
00072646 41FA 0000                  		lea	word_72790(pc),a0
0007264A 3C30 5000                  		move.w	(a0,d5.w),d6
0007264E 3B46 0010                  		move.w	d6,$10(a5)
00072652 4E75                       		rts	
00072654                            ; End of function sub_71D22
00072654                            
00072654                            
00072654                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00072654                            
00072654                            
00072654                            sub_71D40:				; XREF: sub_71C4E; sub_71CEC; sub_72878
00072654 1005                       		move.b	d5,d0
00072656 122D 0002                  		move.b	2(a5),d1
0007265A                            
0007265A                            loc_71D46:
0007265A 5301                       		subq.b	#1,d1
0007265C 6700                       		beq.s	loc_71D4E
0007265E D005                       		add.b	d5,d0
00072660 60F8                       		bra.s	loc_71D46
00072662                            ; ===========================================================================
00072662                            
00072662                            loc_71D4E:
00072662 1B40 000F                  		move.b	d0,$F(a5)
00072666 1B40 000E                  		move.b	d0,$E(a5)
0007266A 4E75                       		rts	
0007266C                            ; End of function sub_71D40
0007266C                            
0007266C                            ; ===========================================================================
0007266C                            
0007266C                            loc_71D58:				; XREF: sub_71D22
0007266C 08D5 0001                  		bset	#1,(a5)
00072670 426D 0010                  		clr.w	$10(a5)
00072674                            
00072674                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00072674                            
00072674                            
00072674                            sub_71D60:				; XREF: sub_71CEC; sub_72878; sub_728AC
00072674 2B4C 0004                  		move.l	a4,4(a5)
00072678 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
0007267E 0815 0004                  		btst	#4,(a5)
00072682 6600                       		bne.s	locret_71D9C
00072684 1B6D 0013 0012             		move.b	$13(a5),$12(a5)
0007268A 422D 000C                  		clr.b	$C(a5)
0007268E 0815 0003                  		btst	#3,(a5)
00072692 6700                       		beq.s	locret_71D9C
00072694 206D 0014                  		movea.l	$14(a5),a0
00072698 1B58 0018                  		move.b	(a0)+,$18(a5)
0007269C 1B58 0019                  		move.b	(a0)+,$19(a5)
000726A0 1B58 001A                  		move.b	(a0)+,$1A(a5)
000726A4 1018                       		move.b	(a0)+,d0
000726A6 E208                       		lsr.b	#1,d0
000726A8 1B40 001B                  		move.b	d0,$1B(a5)
000726AC 426D 001C                  		clr.w	$1C(a5)
000726B0                            
000726B0                            locret_71D9C:
000726B0 4E75                       		rts	
000726B2                            ; End of function sub_71D60
000726B2                            
000726B2                            
000726B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000726B2                            
000726B2                            
000726B2                            sub_71D9E:				; XREF: sub_71CCA; sub_72850
000726B2 4A2D 0012                  		tst.b	$12(a5)
000726B6 6700                       		beq.s	locret_71DC4
000726B8 532D 0012                  		subq.b	#1,$12(a5)
000726BC 6600                       		bne.s	locret_71DC4
000726BE 08D5 0001                  		bset	#1,(a5)
000726C2 4A2D 0001                  		tst.b	1(a5)
000726C6 6B00 0000                  		bmi.w	loc_71DBE
000726CA 4EBA 0000                  		jsr	sub_726FE(pc)
000726CE 584F                       		addq.w	#4,sp
000726D0 4E75                       		rts	
000726D2                            ; ===========================================================================
000726D2                            
000726D2                            loc_71DBE:
000726D2 4EBA 0000                  		jsr	sub_729A0(pc)
000726D6 584F                       		addq.w	#4,sp
000726D8                            
000726D8                            locret_71DC4:
000726D8 4E75                       		rts	
000726DA                            ; End of function sub_71D9E
000726DA                            
000726DA                            
000726DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000726DA                            
000726DA                            
000726DA                            sub_71DC6:				; XREF: sub_71CCA; sub_72850
000726DA 584F                       		addq.w	#4,sp
000726DC 0815 0003                  		btst	#3,(a5)
000726E0 6700                       		beq.s	locret_71E16
000726E2 4A2D 0018                  		tst.b	$18(a5)
000726E6 6700                       		beq.s	loc_71DDA
000726E8 532D 0018                  		subq.b	#1,$18(a5)
000726EC 4E75                       		rts	
000726EE                            ; ===========================================================================
000726EE                            
000726EE                            loc_71DDA:
000726EE 532D 0019                  		subq.b	#1,$19(a5)
000726F2 6700                       		beq.s	loc_71DE2
000726F4 4E75                       		rts	
000726F6                            ; ===========================================================================
000726F6                            
000726F6                            loc_71DE2:
000726F6 206D 0014                  		movea.l	$14(a5),a0
000726FA 1B68 0001 0019             		move.b	1(a0),$19(a5)
00072700 4A2D 001B                  		tst.b	$1B(a5)
00072704 6600                       		bne.s	loc_71DFE
00072706 1B68 0003 001B             		move.b	3(a0),$1B(a5)
0007270C 442D 001A                  		neg.b	$1A(a5)
00072710 4E75                       		rts	
00072712                            ; ===========================================================================
00072712                            
00072712                            loc_71DFE:
00072712 532D 001B                  		subq.b	#1,$1B(a5)
00072716 1C2D 001A                  		move.b	$1A(a5),d6
0007271A 4886                       		ext.w	d6
0007271C DC6D 001C                  		add.w	$1C(a5),d6
00072720 3B46 001C                  		move.w	d6,$1C(a5)
00072724 DC6D 0010                  		add.w	$10(a5),d6
00072728 594F                       		subq.w	#4,sp
0007272A                            
0007272A                            locret_71E16:
0007272A 4E75                       		rts	
0007272C                            ; End of function sub_71DC6
0007272C                            
0007272C                            
0007272C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007272C                            
0007272C                            
0007272C                            sub_71E18:				; XREF: sub_71CCA
0007272C 0815 0001                  		btst	#1,(a5)
00072730 6600                       		bne.s	locret_71E48
00072732 3C2D 0010                  		move.w	$10(a5),d6
00072736 6700                       		beq.s	loc_71E4A
00072738                            
00072738                            loc_71E24:				; XREF: sub_71CCA
00072738 102D 001E                  		move.b	$1E(a5),d0
0007273C 4880                       		ext.w	d0
0007273E DC40                       		add.w	d0,d6
00072740 0815 0002                  		btst	#2,(a5)
00072744 6600                       		bne.s	locret_71E48
00072746 3206                       		move.w	d6,d1
00072748 E049                       		lsr.w	#8,d1
0007274A 103C 00A4                  		move.b	#-$5C,d0
0007274E 4EBA 0000                  		jsr	sub_72722(pc)
00072752 1206                       		move.b	d6,d1
00072754 103C 00A0                  		move.b	#-$60,d0
00072758 4EBA 0000                  		jsr	sub_72722(pc)
0007275C                            
0007275C                            locret_71E48:
0007275C 4E75                       		rts	
0007275E                            ; ===========================================================================
0007275E                            
0007275E                            loc_71E4A:
0007275E 08D5 0001                  		bset	#1,(a5)
00072762 4E75                       		rts	
00072764                            ; End of function sub_71E18
00072764                            
00072764                            ; ===========================================================================
00072764                            
00072764                            loc_71E50:				; XREF: sub_71B4C
00072764 6B00                       		bmi.s	loc_71E94
00072766 0C2E 0002 0003             		cmpi.b	#2,3(a6)
0007276C 6700 0000                  		beq.w	loc_71EFE
00072770 1D7C 0002 0003             		move.b	#2,3(a6)
00072776 7602                       		moveq	#2,d3
00072778 103C 00B4                  		move.b	#-$4C,d0
0007277C 7200                       		moveq	#0,d1
0007277E                            
0007277E                            loc_71E6A:
0007277E 4EBA 0000                  		jsr	sub_7272E(pc)
00072782 4EBA 0000                  		jsr	sub_72764(pc)
00072786 5200                       		addq.b	#1,d0
00072788 51CB FFF4                  		dbf	d3,loc_71E6A
0007278C                            
0007278C 7602                       		moveq	#2,d3
0007278E 7028                       		moveq	#$28,d0
00072790                            
00072790                            loc_71E7C:
00072790 1203                       		move.b	d3,d1
00072792 4EBA 0000                  		jsr	sub_7272E(pc)
00072796 5801                       		addq.b	#4,d1
00072798 4EBA 0000                  		jsr	sub_7272E(pc)
0007279C 51CB FFF2                  		dbf	d3,loc_71E7C
000727A0                            
000727A0 4EBA 0000                  		jsr	sub_729B6(pc)
000727A4 6000 FDB2                  		bra.w	loc_71C44
000727A8                            ; ===========================================================================
000727A8                            
000727A8                            loc_71E94:				; XREF: loc_71E50
000727A8 422E 0003                  		clr.b	3(a6)
000727AC 7630                       		moveq	#$30,d3
000727AE 4BEE 0040                  		lea	$40(a6),a5
000727B2 7806                       		moveq	#6,d4
000727B4                            
000727B4                            loc_71EA0:
000727B4 0815 0007                  		btst	#7,(a5)
000727B8 6700                       		beq.s	loc_71EB8
000727BA 0815 0002                  		btst	#2,(a5)
000727BE 6600                       		bne.s	loc_71EB8
000727C0 103C 00B4                  		move.b	#-$4C,d0
000727C4 122D 000A                  		move.b	$A(a5),d1
000727C8 4EBA 0000                  		jsr	sub_72722(pc)
000727CC                            
000727CC                            loc_71EB8:
000727CC DAC3                       		adda.w	d3,a5
000727CE 51CC FFE4                  		dbf	d4,loc_71EA0
000727D2                            
000727D2 4BEE 0220                  		lea	$220(a6),a5
000727D6 7802                       		moveq	#2,d4
000727D8                            
000727D8                            loc_71EC4:
000727D8 0815 0007                  		btst	#7,(a5)
000727DC 6700                       		beq.s	loc_71EDC
000727DE 0815 0002                  		btst	#2,(a5)
000727E2 6600                       		bne.s	loc_71EDC
000727E4 103C 00B4                  		move.b	#-$4C,d0
000727E8 122D 000A                  		move.b	$A(a5),d1
000727EC 4EBA 0000                  		jsr	sub_72722(pc)
000727F0                            
000727F0                            loc_71EDC:
000727F0 DAC3                       		adda.w	d3,a5
000727F2 51CC FFE4                  		dbf	d4,loc_71EC4
000727F6                            
000727F6 4BEE 0340                  		lea	$340(a6),a5
000727FA 0815 0007                  		btst	#7,(a5)
000727FE 6700                       		beq.s	loc_71EFE
00072800 0815 0002                  		btst	#2,(a5)
00072804 6600                       		bne.s	loc_71EFE
00072806 103C 00B4                  		move.b	#-$4C,d0
0007280A 122D 000A                  		move.b	$A(a5),d1
0007280E 4EBA 0000                  		jsr	sub_72722(pc)
00072812                            
00072812                            loc_71EFE:
00072812 6000 FD44                  		bra.w	loc_71C44
00072816                            
00072816                            ; ---------------------------------------------------------------------------
00072816                            ; Subroutine to	play a sound or	music track
00072816                            ; ---------------------------------------------------------------------------
00072816                            
00072816                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00072816                            
00072816                            
00072816                            Sound_Play:				; XREF: sub_71B4C
00072816 2079 0007 2274             		movea.l	(Go_SoundTypes).l,a0
0007281C 43EE 000A                  		lea	$A(a6),a1	; load music track number
00072820 1616                       		move.b	0(a6),d3
00072822 7802                       		moveq	#2,d4
00072824                            
00072824                            loc_71F12:
00072824 1011                       		move.b	(a1),d0		; move track number to d0
00072826 1200                       		move.b	d0,d1
00072828 4219                       		clr.b	(a1)+
0007282A 0400 0081                  		subi.b	#$81,d0
0007282E 6500                       		bcs.s	loc_71F3E
00072830 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
00072836 6700                       		beq.s	loc_71F2C
00072838 1D41 000A                  		move.b	d1,$A(a6)
0007283C 6000                       		bra.s	loc_71F3E
0007283E                            ; ===========================================================================
0007283E                            
0007283E                            loc_71F2C:
0007283E 0240 007F                  		andi.w	#$7F,d0
00072842 1430 0000                  		move.b	(a0,d0.w),d2
00072846 B403                       		cmp.b	d3,d2
00072848 6500                       		bcs.s	loc_71F3E
0007284A 1602                       		move.b	d2,d3
0007284C 1D41 0009                  		move.b	d1,9(a6)	; set music flag
00072850                            
00072850                            loc_71F3E:
00072850 51CC FFD2                  		dbf	d4,loc_71F12
00072854                            
00072854 4A03                       		tst.b	d3
00072856 6B00                       		bmi.s	locret_71F4A
00072858 1C83                       		move.b	d3,0(a6)
0007285A                            
0007285A                            locret_71F4A:
0007285A 4E75                       		rts	
0007285C                            ; End of function Sound_Play
0007285C                            
0007285C                            
0007285C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007285C                            
0007285C                            
0007285C                            Sound_ChkValue:				; XREF: sub_71B4C
0007285C 7E00                       		moveq	#0,d7
0007285E 1E2E 0009                  		move.b	9(a6),d7
00072862 6700 0000                  		beq.w	Sound_E4
00072866 6A00                       		bpl.s	locret_71F8C
00072868 1D7C 0080 0009             		move.b	#$80,9(a6)	; reset	music flag
0007286E 0C07 009F                  		cmpi.b	#$9F,d7
00072872 6300 0000                  		bls.w	Sound_81to9F	; music	$81-$9F
00072876 0C07 00A0                  		cmpi.b	#$A0,d7
0007287A 6500 0000                  		bcs.w	locret_71F8C
0007287E 0C07 00CF                  		cmpi.b	#$CF,d7
00072882 6300 0000                  		bls.w	Sound_A0toCF	; sound	$A0-$CF
00072886 0C07 00D0                  		cmpi.b	#$D0,d7
0007288A 6500 0000                  		bcs.w	locret_71F8C
0007288E 0C07 00E0                  		cmpi.b	#$E0,d7
00072892 6500 0000                  		bcs.w	Sound_D0toDF	; sound	$D0-$DF
00072896 0C07 00E5                  		cmpi.b	#$E5,d7
0007289A 6300                       		bls.s	Sound_E0toE5	; sound	$E0-$E5
0007289C                            
0007289C                            locret_71F8C:
0007289C 4E75                       		rts	
0007289E                            ; ===========================================================================
0007289E                            
0007289E                            Sound_E0toE5				; XREF: Sound_ChkValue
0007289E 0407 00E0                  		subi.b	#$E0,d7
000728A2 E54F                       		lsl.w	#2,d7
000728A4 4EFB 7000                  		jmp	Sound_ExIndex(pc,d7.w)
000728A8                            ; ===========================================================================
000728A8                            
000728A8                            Sound_ExIndex:
000728A8 6000 0000                  		bra.w	Sound_E0
000728AC                            ; ===========================================================================
000728AC 6000 0000                  		bra.w	Sound_E1
000728B0                            ; ===========================================================================
000728B0 6000 0000                  		bra.w	Sound_E2
000728B4                            ; ===========================================================================
000728B4 6000 0000                  		bra.w	Sound_E3
000728B8                            ; ===========================================================================
000728B8 6000 0000                  		bra.w	Sound_E4
000728BC                            ; ===========================================================================
000728BC 6000 0000                  		bra.w	Sound_E5
000728C0                            ; ===========================================================================
000728C0                            ; ---------------------------------------------------------------------------
000728C0                            ; Play "Say-gaa" PCM sound
000728C0                            ; ---------------------------------------------------------------------------
000728C0                            
000728C0                            Sound_E1:				  
000728C0 45F9 0000 0000             		lea	(SegaPCM).l,a2			; Load the SEGA PCM sample into a2. It's important that we use a2 since a0 and a1 are going to be used up ahead when reading the joypad ports 
000728C6 263C 0000 0000             		move.l	#(SegaPCM_End-SegaPCM),d3			; Load the size of the SEGA PCM sample into d3 
000728CC 13FC 002A 00A0 4000        		move.b	#$2A,($A04000).l		; $A04000 = $2A -> Write to DAC channel	  
000728D4                            PlayPCM_Loop:	  
000728D4 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
000728DA 303C 0014                  		move.w	#$14,d0				; Write the pitch ($14 in this case) to d0 
000728DE 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)  
000728E2 5383                       		sub.l	#1,d3				; Subtract 1 from the PCM sample size 
000728E4 6700                       		beq.s	return_PlayPCM			; If d3 = 0, we finished playing the PCM sample, so stop playing, leave this loop, and unfreeze the 68K 
000728E6 41F8 F604                  		lea	($FFFFF604).w,a0		; address where JoyPad states are written 
000728EA 43F9 00A1 0003             		lea	($A10003).l,a1			; address where JoyPad states are read from 
000728F0 4EB8 1414                  		jsr	(Joypad_Read).w			; Read only the first joypad port. It's important that we do NOT do the two ports, we don't have the cycles for that 
000728F4 0838 0007 F604             		btst	#7,($FFFFF604).w		; Check for Start button 
000728FA 6600                       		bne.s	return_PlayPCM			; If start is pressed, stop playing, leave this loop, and unfreeze the 68K 
000728FC 60D6                       		bra.s	PlayPCM_Loop			; Otherwise, continue playing PCM sample 
000728FE                            return_PlayPCM: 
000728FE 584F                       		addq.w	#4,sp 
00072900 4E75                       		rts
00072902                            		
00072902                            ; ---------------------------------------------------------------------------
00072902                            ; Play you are an idiot pcm sound
00072902                            ; ---------------------------------------------------------------------------
00072902                            
00072902                            Sound_E5:  
00072902 45F9 0000 0000             		lea	(IdiotPCM).l,a2			; Load the idiot PCM sample into a2. It's important that we use a2 since a0 and a1 are going to be used up ahead when reading the joypad ports 
00072908 263C 0000 0000             		move.l	#(IdiotPCM_End-IdiotPCM),d3			; Load the size of the idiot PCM sample into d3 
0007290E 13FC 002A 00A0 4000        		move.b	#$2A,($A04000).l		; $A04000 = $2A -> Write to DAC channel	  
00072916                            PlayPCM_LoopE5:	  
00072916                            
00072916 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
0007291C                            		
0007291C 5278 FE24                  		addq.w	#1,($FFFFFE24).w
00072920                            		
00072920 1038 FE24                  		move.b	($FFFFFE24).w,d0
00072924 0200 000F                  		andi.b	#$F,d0
00072928 6700                       		beq.s	SfxE5SwapPalette
0007292A                            		
0007292A 303C 0056                  		move.w	#$58-2,d0				; Write the pitch ($58 in this case) to d0  (-28 from the check before)
0007292E 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)   (14 cycles)
00072932 5383                       		sub.l	#1,d3				; Subtract 1 from the PCM sample size 
00072934 67CC                       		beq.s	Sound_E5			; If d3 = 0, we finished playing the PCM sample, DONT STOP
00072936 60DE                       		bra.s	PlayPCM_LoopE5
00072938                            		
00072938                            SfxE5SwapPalette:
00072938                            		
00072938                            		
00072938                            		
00072938 4BF9 00C0 0004             		lea	($C00004).l,a5
0007293E 2ABC 9400 9308             		move.l	#$94000000+((($10>>1)&$FF00)<<8)+$9300+(($10>>1)&$FF),(a5) ; len
00072944                            		
00072944                            		
00072944 0838 0004 FE24             		btst	#4,($FFFFFE24).w
0007294A 6700                       		beq.s	@not_black
0007294C 2ABC 96FD 9598             		move.l	#$96000000+((($FFFFFB30>>1)&$FF00)<<8)+$9500+(($FFFFFB30>>1)&$FF),(a5)	; source	
00072952 6000                       		bra.s	@merge
00072954                            	@not_black:
00072954 2ABC 96FD 9590             		move.l	#$96000000+((($FFFFFB20>>1)&$FF00)<<8)+$9500+(($FFFFFB20>>1)&$FF),(a5)	; source
0007295A                            	@merge:
0007295A 3ABC 977F                  		move.w	#$9700+(((($FFFFFB20>>1)&$FF0000)>>16)&$7F),(a5) ; source
0007295E 3ABC C000                  		move.w	#$C000+(0&$3FFF),(a5) ; dest
00072962 31FC 0080 F640             		move.w	#$80+((0&$C000)>>14),($FFFFF640).w ;dest
00072968 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0007296C                            		
0007296C 303C 004D                  		move.w	#$58-11,d0				; attempt at removing the little jumps
00072970 51C8 FFFE                  		dbf	d0,*				; (14 cycles)
00072974 60A0                       		bra.s	PlayPCM_LoopE5
00072976                            		
00072976                            ; ===========================================================================
00072976                            ; ---------------------------------------------------------------------------
00072976                            ; Play music track $81-$9F
00072976                            ; ---------------------------------------------------------------------------
00072976                            
00072976                            Sound_81to9F:				; XREF: Sound_ChkValue
00072976 0C07 0088                  		cmpi.b	#$88,d7		; is "extra life" music	played?
0007297A 6600                       		bne.s	loc_72024	; if not, branch
0007297C 4A2E 0027                  		tst.b	$27(a6)
00072980 6600 0000                  		bne.w	loc_721B6
00072984 4BEE 0040                  		lea	$40(a6),a5
00072988 7009                       		moveq	#9,d0
0007298A                            
0007298A                            loc_71FE6:
0007298A 0895 0002                  		bclr	#2,(a5)
0007298E DAFC 0030                  		adda.w	#$30,a5
00072992 51C8 FFF6                  		dbf	d0,loc_71FE6
00072996                            
00072996 4BEE 0220                  		lea	$220(a6),a5
0007299A 7005                       		moveq	#5,d0
0007299C                            
0007299C                            loc_71FF8:
0007299C 0895 0007                  		bclr	#7,(a5)
000729A0 DAFC 0030                  		adda.w	#$30,a5
000729A4 51C8 FFF6                  		dbf	d0,loc_71FF8
000729A8 4216                       		clr.b	0(a6)
000729AA 204E                       		movea.l	a6,a0
000729AC 43EE 03A0                  		lea	$3A0(a6),a1
000729B0 303C 0087                  		move.w	#$87,d0
000729B4                            
000729B4                            loc_72012:
000729B4 22D8                       		move.l	(a0)+,(a1)+
000729B6 51C8 FFFC                  		dbf	d0,loc_72012
000729BA                            
000729BA 1D7C 0080 0027             		move.b	#$80,$27(a6)
000729C0 4216                       		clr.b	0(a6)
000729C2 6000                       		bra.s	loc_7202C
000729C4                            ; ===========================================================================
000729C4                            
000729C4                            loc_72024:
000729C4 422E 0027                  		clr.b	$27(a6)
000729C8 422E 0026                  		clr.b	$26(a6)
000729CC                            
000729CC                            loc_7202C:
000729CC 4EBA 0000                  		jsr	sub_725CA(pc)
000729D0 2879 0007 2284             		movea.l	(off_719A0).l,a4
000729D6 0407 0081                  		subi.b	#$81,d7
000729DA 1D74 7000 0029             		move.b	(a4,d7.w),$29(a6)
000729E0 2879 0007 227C             		movea.l	(Go_MusicIndex).l,a4
000729E6 E54F                       		lsl.w	#2,d7
000729E8 2874 7000                  		movea.l	(a4,d7.w),a4
000729EC 7000                       		moveq	#0,d0
000729EE 3014                       		move.w	(a4),d0
000729F0 D08C                       		add.l	a4,d0
000729F2 2D40 0018                  		move.l	d0,$18(a6)
000729F6 102C 0005                  		move.b	5(a4),d0
000729FA 1D40 0028                  		move.b	d0,$28(a6)
000729FE 4A2E 002A                  		tst.b	$2A(a6)
00072A02 6700                       		beq.s	loc_72068
00072A04 102E 0029                  		move.b	$29(a6),d0
00072A08                            
00072A08                            loc_72068:
00072A08 1D40 0002                  		move.b	d0,2(a6)
00072A0C 1D40 0001                  		move.b	d0,1(a6)
00072A10 7200                       		moveq	#0,d1
00072A12 264C                       		movea.l	a4,a3
00072A14 5C4C                       		addq.w	#6,a4
00072A16 7E00                       		moveq	#0,d7
00072A18 1E2B 0002                  		move.b	2(a3),d7
00072A1C 6700 0000                  		beq.w	loc_72114
00072A20 5307                       		subq.b	#1,d7
00072A22 123C 00C0                  		move.b	#-$40,d1
00072A26 182B 0004                  		move.b	4(a3),d4
00072A2A 7C30                       		moveq	#$30,d6
00072A2C 1A3C 0001                  		move.b	#1,d5
00072A30 43EE 0040                  		lea	$40(a6),a1
00072A34 45FA 0000                  		lea	byte_721BA(pc),a2
00072A38                            
00072A38                            loc_72098:
00072A38 08D1 0007                  		bset	#7,(a1)
00072A3C 135A 0001                  		move.b	(a2)+,1(a1)
00072A40 1344 0002                  		move.b	d4,2(a1)
00072A44 1346 000D                  		move.b	d6,$D(a1)
00072A48 1341 000A                  		move.b	d1,$A(a1)
00072A4C 1345 000E                  		move.b	d5,$E(a1)
00072A50 7000                       		moveq	#0,d0
00072A52 301C                       		move.w	(a4)+,d0
00072A54 D08B                       		add.l	a3,d0
00072A56 2340 0004                  		move.l	d0,4(a1)
00072A5A 335C 0008                  		move.w	(a4)+,8(a1)
00072A5E D2C6                       		adda.w	d6,a1
00072A60 51CF FFD6                  		dbf	d7,loc_72098
00072A64 0C2B 0007 0002             		cmpi.b	#7,2(a3)
00072A6A 6600                       		bne.s	loc_720D8
00072A6C 702B                       		moveq	#$2B,d0
00072A6E 7200                       		moveq	#0,d1
00072A70 4EBA 0000                  		jsr	sub_7272E(pc)
00072A74 6000 0000                  		bra.w	loc_72114
00072A78                            ; ===========================================================================
00072A78                            
00072A78                            loc_720D8:
00072A78 7028                       		moveq	#$28,d0
00072A7A 7206                       		moveq	#6,d1
00072A7C 4EBA 0000                  		jsr	sub_7272E(pc)
00072A80 103C 0042                  		move.b	#$42,d0
00072A84 727F                       		moveq	#$7F,d1
00072A86 4EBA 0000                  		jsr	sub_72764(pc)
00072A8A 103C 004A                  		move.b	#$4A,d0
00072A8E 727F                       		moveq	#$7F,d1
00072A90 4EBA 0000                  		jsr	sub_72764(pc)
00072A94 103C 0046                  		move.b	#$46,d0
00072A98 727F                       		moveq	#$7F,d1
00072A9A 4EBA 0000                  		jsr	sub_72764(pc)
00072A9E 103C 004E                  		move.b	#$4E,d0
00072AA2 727F                       		moveq	#$7F,d1
00072AA4 4EBA 0000                  		jsr	sub_72764(pc)
00072AA8 103C 00B6                  		move.b	#-$4A,d0
00072AAC 123C 00C0                  		move.b	#-$40,d1
00072AB0 4EBA 0000                  		jsr	sub_72764(pc)
00072AB4                            
00072AB4                            loc_72114:
00072AB4 7E00                       		moveq	#0,d7
00072AB6 1E2B 0003                  		move.b	3(a3),d7
00072ABA 6700                       		beq.s	loc_72154
00072ABC 5307                       		subq.b	#1,d7
00072ABE 43EE 0190                  		lea	$190(a6),a1
00072AC2 45FA 0000                  		lea	byte_721C2(pc),a2
00072AC6                            
00072AC6                            loc_72126:
00072AC6 08D1 0007                  		bset	#7,(a1)
00072ACA 135A 0001                  		move.b	(a2)+,1(a1)
00072ACE 1344 0002                  		move.b	d4,2(a1)
00072AD2 1346 000D                  		move.b	d6,$D(a1)
00072AD6 1345 000E                  		move.b	d5,$E(a1)
00072ADA 7000                       		moveq	#0,d0
00072ADC 301C                       		move.w	(a4)+,d0
00072ADE D08B                       		add.l	a3,d0
00072AE0 2340 0004                  		move.l	d0,4(a1)
00072AE4 335C 0008                  		move.w	(a4)+,8(a1)
00072AE8 101C                       		move.b	(a4)+,d0
00072AEA 135C 000B                  		move.b	(a4)+,$B(a1)
00072AEE D2C6                       		adda.w	d6,a1
00072AF0 51CF FFD4                  		dbf	d7,loc_72126
00072AF4                            
00072AF4                            loc_72154:
00072AF4 43EE 0220                  		lea	$220(a6),a1
00072AF8 7E05                       		moveq	#5,d7
00072AFA                            
00072AFA                            loc_7215A:
00072AFA 4A11                       		tst.b	(a1)
00072AFC 6A00 0000                  		bpl.w	loc_7217C
00072B00 7000                       		moveq	#0,d0
00072B02 1029 0001                  		move.b	1(a1),d0
00072B06 6B00                       		bmi.s	loc_7216E
00072B08 5500                       		subq.b	#2,d0
00072B0A E508                       		lsl.b	#2,d0
00072B0C 6000                       		bra.s	loc_72170
00072B0E                            ; ===========================================================================
00072B0E                            
00072B0E                            loc_7216E:
00072B0E E608                       		lsr.b	#3,d0
00072B10                            
00072B10                            loc_72170:
00072B10 41FA 0000                  		lea	dword_722CC(pc),a0
00072B14 2070 0000                  		movea.l	(a0,d0.w),a0
00072B18 08D0 0002                  		bset	#2,(a0)
00072B1C                            
00072B1C                            loc_7217C:
00072B1C D2C6                       		adda.w	d6,a1
00072B1E 51CF FFDA                  		dbf	d7,loc_7215A
00072B22                            
00072B22 4A6E 0340                  		tst.w	$340(a6)
00072B26 6A00                       		bpl.s	loc_7218E
00072B28 08EE 0002 0100             		bset	#2,$100(a6)
00072B2E                            
00072B2E                            loc_7218E:
00072B2E 4A6E 0370                  		tst.w	$370(a6)
00072B32 6A00                       		bpl.s	loc_7219A
00072B34 08EE 0002 01F0             		bset	#2,$1F0(a6)
00072B3A                            
00072B3A                            loc_7219A:
00072B3A 4BEE 0070                  		lea	$70(a6),a5
00072B3E 7805                       		moveq	#5,d4
00072B40                            
00072B40                            loc_721A0:
00072B40 4EBA 0000                  		jsr	sub_726FE(pc)
00072B44 DAC6                       		adda.w	d6,a5
00072B46 51CC FFF8                  		dbf	d4,loc_721A0
00072B4A 7802                       		moveq	#2,d4
00072B4C                            
00072B4C                            loc_721AC:
00072B4C 4EBA 0000                  		jsr	sub_729A0(pc)
00072B50 DAC6                       		adda.w	d6,a5
00072B52 51CC FFF8                  		dbf	d4,loc_721AC
00072B56                            
00072B56                            loc_721B6:
00072B56 584F                       		addq.w	#4,sp
00072B58 4E75                       		rts	
00072B5A                            ; ===========================================================================
00072B5A 0600 0102 0405 0600        byte_721BA:	dc.b 6,	0, 1, 2, 4, 5, 6, 0
00072B62                            		even
00072B62 80A0 C000                  byte_721C2:	dc.b $80, $A0, $C0, 0
00072B66                            		even
00072B66                            ; ===========================================================================
00072B66                            ; ---------------------------------------------------------------------------
00072B66                            ; Play normal sound effect
00072B66                            ; ---------------------------------------------------------------------------
00072B66                            
00072B66                            Sound_A0toCF:				; XREF: Sound_ChkValue
00072B66 4A2E 0027                  		tst.b	$27(a6)
00072B6A 6600 0000                  		bne.w	loc_722C6
00072B6E 4A2E 0004                  		tst.b	4(a6)
00072B72 6600 0000                  		bne.w	loc_722C6
00072B76 4A2E 0024                  		tst.b	$24(a6)
00072B7A 6600 0000                  		bne.w	loc_722C6
00072B7E 0C07 00B5                  		cmpi.b	#$B5,d7		; is ring sound	effect played?
00072B82 6600                       		bne.s	Sound_notB5	; if not, branch
00072B84 4A2E 002B                  		tst.b	$2B(a6)
00072B88 6600                       		bne.s	loc_721EE
00072B8A 1E3C 00CE                  		move.b	#$CE,d7		; play ring sound in left speaker
00072B8E                            
00072B8E                            loc_721EE:
00072B8E 086E 0000 002B             		bchg	#0,$2B(a6)	; change speaker
00072B94                            
00072B94                            Sound_notB5:
00072B94 0C07 00A7                  		cmpi.b	#$A7,d7		; is "pushing" sound played?
00072B98 6600                       		bne.s	Sound_notA7	; if not, branch
00072B9A 4A2E 002C                  		tst.b	$2C(a6)
00072B9E 6600 0000                  		bne.w	locret_722C4
00072BA2 1D7C 0080 002C             		move.b	#$80,$2C(a6)
00072BA8                            
00072BA8                            Sound_notA7:
00072BA8 2079 0007 2280             		movea.l	(Go_SoundIndex).l,a0
00072BAE 0407 00A0                  		subi.b	#$A0,d7
00072BB2 E54F                       		lsl.w	#2,d7
00072BB4 2670 7000                  		movea.l	(a0,d7.w),a3
00072BB8 224B                       		movea.l	a3,a1
00072BBA 7200                       		moveq	#0,d1
00072BBC 3219                       		move.w	(a1)+,d1
00072BBE D28B                       		add.l	a3,d1
00072BC0 1A19                       		move.b	(a1)+,d5
00072BC2 1E19                       		move.b	(a1)+,d7
00072BC4 5307                       		subq.b	#1,d7
00072BC6 7C30                       		moveq	#$30,d6
00072BC8                            
00072BC8                            loc_72228:
00072BC8 7600                       		moveq	#0,d3
00072BCA 1629 0001                  		move.b	1(a1),d3
00072BCE 1803                       		move.b	d3,d4
00072BD0 6B00                       		bmi.s	loc_72244
00072BD2 5543                       		subq.w	#2,d3
00072BD4 E54B                       		lsl.w	#2,d3
00072BD6 4BFA 0000                  		lea	dword_722CC(pc),a5
00072BDA 2A75 3000                  		movea.l	(a5,d3.w),a5
00072BDE 08D5 0002                  		bset	#2,(a5)
00072BE2 6000                       		bra.s	loc_7226E
00072BE4                            ; ===========================================================================
00072BE4                            
00072BE4                            loc_72244:
00072BE4 E64B                       		lsr.w	#3,d3
00072BE6 4BFA 0000                  		lea	dword_722CC(pc),a5
00072BEA 2A75 3000                  		movea.l	(a5,d3.w),a5
00072BEE 08D5 0002                  		bset	#2,(a5)
00072BF2 0C04 00C0                  		cmpi.b	#$C0,d4
00072BF6 6600                       		bne.s	loc_7226E
00072BF8 1004                       		move.b	d4,d0
00072BFA 0000 001F                  		ori.b	#$1F,d0
00072BFE 13C0 00C0 0011             		move.b	d0,($C00011).l
00072C04 0840 0005                  		bchg	#5,d0
00072C08 13C0 00C0 0011             		move.b	d0,($C00011).l
00072C0E                            
00072C0E                            loc_7226E:
00072C0E 2A7B 3000                  		movea.l	dword_722EC(pc,d3.w),a5
00072C12 244D                       		movea.l	a5,a2
00072C14 700B                       		moveq	#$B,d0
00072C16                            
00072C16                            loc_72276:
00072C16 429A                       		clr.l	(a2)+
00072C18 51C8 FFFC                  		dbf	d0,loc_72276
00072C1C                            
00072C1C 3A99                       		move.w	(a1)+,(a5)
00072C1E 1B45 0002                  		move.b	d5,2(a5)
00072C22 7000                       		moveq	#0,d0
00072C24 3019                       		move.w	(a1)+,d0
00072C26 D08B                       		add.l	a3,d0
00072C28 2B40 0004                  		move.l	d0,4(a5)
00072C2C 3B59 0008                  		move.w	(a1)+,8(a5)
00072C30 1B7C 0001 000E             		move.b	#1,$E(a5)
00072C36 1B46 000D                  		move.b	d6,$D(a5)
00072C3A 4A04                       		tst.b	d4
00072C3C 6B00                       		bmi.s	loc_722A8
00072C3E 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
00072C44 2B41 0020                  		move.l	d1,$20(a5)
00072C48                            
00072C48                            loc_722A8:
00072C48 51CF FF7E                  		dbf	d7,loc_72228
00072C4C                            
00072C4C 4A2E 0250                  		tst.b	$250(a6)
00072C50 6A00                       		bpl.s	loc_722B8
00072C52 08EE 0002 0340             		bset	#2,$340(a6)
00072C58                            
00072C58                            loc_722B8:
00072C58 4A2E 0310                  		tst.b	$310(a6)
00072C5C 6A00                       		bpl.s	locret_722C4
00072C5E 08EE 0002 0370             		bset	#2,$370(a6)
00072C64                            
00072C64                            locret_722C4:
00072C64 4E75                       		rts	
00072C66                            ; ===========================================================================
00072C66                            
00072C66                            loc_722C6:
00072C66 4216                       		clr.b	0(a6)
00072C68 4E75                       		rts	
00072C6A                            ; ===========================================================================
00072C6A 00FF F0D0                  dword_722CC:	dc.l $FFF0D0
00072C6E 0000 0000                  		dc.l 0
00072C72 00FF F100                  		dc.l $FFF100
00072C76 00FF F130                  		dc.l $FFF130
00072C7A 00FF F190                  		dc.l $FFF190
00072C7E 00FF F1C0                  		dc.l $FFF1C0
00072C82 00FF F1F0                  		dc.l $FFF1F0
00072C86 00FF F1F0                  		dc.l $FFF1F0
00072C8A 00FF F220                  dword_722EC:	dc.l $FFF220
00072C8E 0000 0000                  		dc.l 0
00072C92 00FF F250                  		dc.l $FFF250
00072C96 00FF F280                  		dc.l $FFF280
00072C9A 00FF F2B0                  		dc.l $FFF2B0
00072C9E 00FF F2E0                  		dc.l $FFF2E0
00072CA2 00FF F310                  		dc.l $FFF310
00072CA6 00FF F310                  		dc.l $FFF310
00072CAA                            ; ===========================================================================
00072CAA                            ; ---------------------------------------------------------------------------
00072CAA                            ; Play GHZ waterfall sound
00072CAA                            ; ---------------------------------------------------------------------------
00072CAA                            
00072CAA                            Sound_D0toDF:				; XREF: Sound_ChkValue
00072CAA 4A2E 0027                  		tst.b	$27(a6)
00072CAE 6600 0000                  		bne.w	locret_723C6
00072CB2 4A2E 0004                  		tst.b	4(a6)
00072CB6 6600 0000                  		bne.w	locret_723C6
00072CBA 4A2E 0024                  		tst.b	$24(a6)
00072CBE 6600 0000                  		bne.w	locret_723C6
00072CC2 2079 0007 2278             		movea.l	(Go_SoundD0).l,a0
00072CC8 0407 00D0                  		subi.b	#$D0,d7
00072CCC E54F                       		lsl.w	#2,d7
00072CCE 2670 7000                  		movea.l	(a0,d7.w),a3
00072CD2 224B                       		movea.l	a3,a1
00072CD4 7000                       		moveq	#0,d0
00072CD6 3019                       		move.w	(a1)+,d0
00072CD8 D08B                       		add.l	a3,d0
00072CDA 2D40 0020                  		move.l	d0,$20(a6)
00072CDE 1A19                       		move.b	(a1)+,d5
00072CE0 1E19                       		move.b	(a1)+,d7
00072CE2 5307                       		subq.b	#1,d7
00072CE4 7C30                       		moveq	#$30,d6
00072CE6                            
00072CE6                            loc_72348:
00072CE6 1829 0001                  		move.b	1(a1),d4
00072CEA 6B00                       		bmi.s	loc_7235A
00072CEC 08EE 0002 0100             		bset	#2,$100(a6)
00072CF2 4BEE 0340                  		lea	$340(a6),a5
00072CF6 6000                       		bra.s	loc_72364
00072CF8                            ; ===========================================================================
00072CF8                            
00072CF8                            loc_7235A:
00072CF8 08EE 0002 01F0             		bset	#2,$1F0(a6)
00072CFE 4BEE 0370                  		lea	$370(a6),a5
00072D02                            
00072D02                            loc_72364:
00072D02 244D                       		movea.l	a5,a2
00072D04 700B                       		moveq	#$B,d0
00072D06                            
00072D06                            loc_72368:
00072D06 429A                       		clr.l	(a2)+
00072D08 51C8 FFFC                  		dbf	d0,loc_72368
00072D0C                            
00072D0C 3A99                       		move.w	(a1)+,(a5)
00072D0E 1B45 0002                  		move.b	d5,2(a5)
00072D12 7000                       		moveq	#0,d0
00072D14 3019                       		move.w	(a1)+,d0
00072D16 D08B                       		add.l	a3,d0
00072D18 2B40 0004                  		move.l	d0,4(a5)
00072D1C 3B59 0008                  		move.w	(a1)+,8(a5)
00072D20 1B7C 0001 000E             		move.b	#1,$E(a5)
00072D26 1B46 000D                  		move.b	d6,$D(a5)
00072D2A 4A04                       		tst.b	d4
00072D2C 6B00                       		bmi.s	loc_72396
00072D2E 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
00072D34                            
00072D34                            loc_72396:
00072D34 51CF FFB0                  		dbf	d7,loc_72348
00072D38                            
00072D38 4A2E 0250                  		tst.b	$250(a6)
00072D3C 6A00                       		bpl.s	loc_723A6
00072D3E 08EE 0002 0340             		bset	#2,$340(a6)
00072D44                            
00072D44                            loc_723A6:
00072D44 4A2E 0310                  		tst.b	$310(a6)
00072D48 6A00                       		bpl.s	locret_723C6
00072D4A 08EE 0002 0370             		bset	#2,$370(a6)
00072D50 0004 001F                  		ori.b	#$1F,d4
00072D54 13C4 00C0 0011             		move.b	d4,($C00011).l
00072D5A 0844 0005                  		bchg	#5,d4
00072D5E 13C4 00C0 0011             		move.b	d4,($C00011).l
00072D64                            
00072D64                            locret_723C6:
00072D64 4E75                       		rts	
00072D66                            ; End of function Sound_ChkValue
00072D66                            
00072D66                            ; ===========================================================================
00072D66 00FF F100                  		dc.l $FFF100
00072D6A 00FF F1F0                  		dc.l $FFF1F0
00072D6E 00FF F250                  		dc.l $FFF250
00072D72 00FF F310                  		dc.l $FFF310
00072D76 00FF F340                  		dc.l $FFF340
00072D7A 00FF F370                  		dc.l $FFF370
00072D7E                            
00072D7E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00072D7E                            
00072D7E                            
00072D7E                            Snd_FadeOut1:				; XREF: Sound_E0
00072D7E 4216                       		clr.b	0(a6)
00072D80 4BEE 0220                  		lea	$220(a6),a5
00072D84 7E05                       		moveq	#5,d7
00072D86                            
00072D86                            loc_723EA:
00072D86 4A15                       		tst.b	(a5)
00072D88 6A00 0000                  		bpl.w	loc_72472
00072D8C 0895 0007                  		bclr	#7,(a5)
00072D90 7600                       		moveq	#0,d3
00072D92 162D 0001                  		move.b	1(a5),d3
00072D96 6B00                       		bmi.s	loc_7243C
00072D98 4EBA 0000                  		jsr	sub_726FE(pc)
00072D9C 0C03 0004                  		cmpi.b	#4,d3
00072DA0 6600                       		bne.s	loc_72416
00072DA2 4A2E 0340                  		tst.b	$340(a6)
00072DA6 6A00                       		bpl.s	loc_72416
00072DA8 4BEE 0340                  		lea	$340(a6),a5
00072DAC 226E 0020                  		movea.l	$20(a6),a1
00072DB0 6000                       		bra.s	loc_72428
00072DB2                            ; ===========================================================================
00072DB2                            
00072DB2                            loc_72416:
00072DB2 5503                       		subq.b	#2,d3
00072DB4 E50B                       		lsl.b	#2,d3
00072DB6 41FA FEB2                  		lea	dword_722CC(pc),a0
00072DBA 264D                       		movea.l	a5,a3
00072DBC 2A70 3000                  		movea.l	(a0,d3.w),a5
00072DC0 226E 0018                  		movea.l	$18(a6),a1
00072DC4                            
00072DC4                            loc_72428:
00072DC4 0895 0002                  		bclr	#2,(a5)
00072DC8 08D5 0001                  		bset	#1,(a5)
00072DCC 102D 000B                  		move.b	$B(a5),d0
00072DD0 4EBA 0000                  		jsr	sub_72C4E(pc)
00072DD4 2A4B                       		movea.l	a3,a5
00072DD6 6000                       		bra.s	loc_72472
00072DD8                            ; ===========================================================================
00072DD8                            
00072DD8                            loc_7243C:
00072DD8 4EBA 0000                  		jsr	sub_729A0(pc)
00072DDC 41EE 0370                  		lea	$370(a6),a0
00072DE0 0C03 00E0                  		cmpi.b	#$E0,d3
00072DE4 6700                       		beq.s	loc_7245A
00072DE6 0C03 00C0                  		cmpi.b	#$C0,d3
00072DEA 6700                       		beq.s	loc_7245A
00072DEC E60B                       		lsr.b	#3,d3
00072DEE 41FA FE7A                  		lea	dword_722CC(pc),a0
00072DF2 2070 3000                  		movea.l	(a0,d3.w),a0
00072DF6                            
00072DF6                            loc_7245A:
00072DF6 0890 0002                  		bclr	#2,(a0)
00072DFA 08D0 0001                  		bset	#1,(a0)
00072DFE 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
00072E04 6600                       		bne.s	loc_72472
00072E06 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
00072E0E                            
00072E0E                            loc_72472:
00072E0E DAFC 0030                  		adda.w	#$30,a5
00072E12 51CF FF72                  		dbf	d7,loc_723EA
00072E16                            
00072E16 4E75                       		rts	
00072E18                            ; End of function Snd_FadeOut1
00072E18                            
00072E18                            
00072E18                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00072E18                            
00072E18                            
00072E18                            Snd_FadeOut2:				; XREF: Sound_E0
00072E18 4BEE 0340                  		lea	$340(a6),a5
00072E1C 4A15                       		tst.b	(a5)
00072E1E 6A00                       		bpl.s	loc_724AE
00072E20 0895 0007                  		bclr	#7,(a5)
00072E24 0815 0002                  		btst	#2,(a5)
00072E28 6600                       		bne.s	loc_724AE
00072E2A 4EBA 0000                  		jsr	loc_7270A(pc)
00072E2E 4BEE 0100                  		lea	$100(a6),a5
00072E32 0895 0002                  		bclr	#2,(a5)
00072E36 08D5 0001                  		bset	#1,(a5)
00072E3A 4A15                       		tst.b	(a5)
00072E3C 6A00                       		bpl.s	loc_724AE
00072E3E 226E 0018                  		movea.l	$18(a6),a1
00072E42 102D 000B                  		move.b	$B(a5),d0
00072E46 4EBA 0000                  		jsr	sub_72C4E(pc)
00072E4A                            
00072E4A                            loc_724AE:
00072E4A 4BEE 0370                  		lea	$370(a6),a5
00072E4E 4A15                       		tst.b	(a5)
00072E50 6A00                       		bpl.s	locret_724E4
00072E52 0895 0007                  		bclr	#7,(a5)
00072E56 0815 0002                  		btst	#2,(a5)
00072E5A 6600                       		bne.s	locret_724E4
00072E5C 4EBA 0000                  		jsr	loc_729A6(pc)
00072E60 4BEE 01F0                  		lea	$1F0(a6),a5
00072E64 0895 0002                  		bclr	#2,(a5)
00072E68 08D5 0001                  		bset	#1,(a5)
00072E6C 4A15                       		tst.b	(a5)
00072E6E 6A00                       		bpl.s	locret_724E4
00072E70 0C2D 00E0 0001             		cmpi.b	#-$20,1(a5)
00072E76 6600                       		bne.s	locret_724E4
00072E78 13ED 001F 00C0 0011        		move.b	$1F(a5),($C00011).l
00072E80                            
00072E80                            locret_724E4:
00072E80 4E75                       		rts	
00072E82                            ; End of function Snd_FadeOut2
00072E82                            
00072E82                            ; ===========================================================================
00072E82                            ; ---------------------------------------------------------------------------
00072E82                            ; Fade out music
00072E82                            ; ---------------------------------------------------------------------------
00072E82                            
00072E82                            Sound_E0:				; XREF: Sound_ExIndex
00072E82 4EBA FEFA                  		jsr	Snd_FadeOut1(pc)
00072E86 4EBA FF90                  		jsr	Snd_FadeOut2(pc)
00072E8A 1D7C 0003 0006             		move.b	#3,6(a6)
00072E90 1D7C 0028 0004             		move.b	#$28,4(a6)
00072E96 422E 0040                  		clr.b	$40(a6)
00072E9A 422E 002A                  		clr.b	$2A(a6)
00072E9E 4E75                       		rts	
00072EA0                            
00072EA0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00072EA0                            
00072EA0                            
00072EA0                            sub_72504:				; XREF: sub_71B4C
00072EA0 102E 0006                  		move.b	6(a6),d0
00072EA4 6700                       		beq.s	loc_72510
00072EA6 532E 0006                  		subq.b	#1,6(a6)
00072EAA 4E75                       		rts	
00072EAC                            ; ===========================================================================
00072EAC                            
00072EAC                            loc_72510:
00072EAC 532E 0004                  		subq.b	#1,4(a6)
00072EB0 6700 0000                  		beq.w	Sound_E4
00072EB4 1D7C 0003 0006             		move.b	#3,6(a6)
00072EBA 4BEE 0070                  		lea	$70(a6),a5
00072EBE 7E05                       		moveq	#5,d7
00072EC0                            
00072EC0                            loc_72524:
00072EC0 4A15                       		tst.b	(a5)
00072EC2 6A00                       		bpl.s	loc_72538
00072EC4 522D 0009                  		addq.b	#1,9(a5)
00072EC8 6A00                       		bpl.s	loc_72534
00072ECA 0895 0007                  		bclr	#7,(a5)
00072ECE 6000                       		bra.s	loc_72538
00072ED0                            ; ===========================================================================
00072ED0                            
00072ED0                            loc_72534:
00072ED0 4EBA 0000                  		jsr	sub_72CB4(pc)
00072ED4                            
00072ED4                            loc_72538:
00072ED4 DAFC 0030                  		adda.w	#$30,a5
00072ED8 51CF FFE6                  		dbf	d7,loc_72524
00072EDC                            
00072EDC 7E02                       		moveq	#2,d7
00072EDE                            
00072EDE                            loc_72542:
00072EDE 4A15                       		tst.b	(a5)
00072EE0 6A00                       		bpl.s	loc_72560
00072EE2 522D 0009                  		addq.b	#1,9(a5)
00072EE6 0C2D 0010 0009             		cmpi.b	#$10,9(a5)
00072EEC 6500                       		bcs.s	loc_72558
00072EEE 0895 0007                  		bclr	#7,(a5)
00072EF2 6000                       		bra.s	loc_72560
00072EF4                            ; ===========================================================================
00072EF4                            
00072EF4                            loc_72558:
00072EF4 1C2D 0009                  		move.b	9(a5),d6
00072EF8 4EBA 0000                  		jsr	sub_7296A(pc)
00072EFC                            
00072EFC                            loc_72560:
00072EFC DAFC 0030                  		adda.w	#$30,a5
00072F00 51CF FFDC                  		dbf	d7,loc_72542
00072F04                            
00072F04 4E75                       		rts	
00072F06                            ; End of function sub_72504
00072F06                            
00072F06                            
00072F06                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00072F06                            
00072F06                            
00072F06                            sub_7256A:				; XREF: Sound_E4; sub_725CA
00072F06 7602                       		moveq	#2,d3
00072F08 7028                       		moveq	#$28,d0
00072F0A                            
00072F0A                            loc_7256E:
00072F0A 1203                       		move.b	d3,d1
00072F0C 4EBA 0000                  		jsr	sub_7272E(pc)
00072F10 5801                       		addq.b	#4,d1
00072F12 4EBA 0000                  		jsr	sub_7272E(pc)
00072F16 51CB FFF2                  		dbf	d3,loc_7256E
00072F1A                            
00072F1A 7040                       		moveq	#$40,d0
00072F1C 727F                       		moveq	#$7F,d1
00072F1E 7802                       		moveq	#2,d4
00072F20                            
00072F20                            loc_72584:
00072F20 7603                       		moveq	#3,d3
00072F22                            
00072F22                            loc_72586:
00072F22 4EBA 0000                  		jsr	sub_7272E(pc)
00072F26 4EBA 0000                  		jsr	sub_72764(pc)
00072F2A 5840                       		addq.w	#4,d0
00072F2C 51CB FFF4                  		dbf	d3,loc_72586
00072F30                            
00072F30 0400 000F                  		subi.b	#$F,d0
00072F34 51CC FFEA                  		dbf	d4,loc_72584
00072F38                            
00072F38 4E75                       		rts	
00072F3A                            ; End of function sub_7256A
00072F3A                            
00072F3A                            ; ===========================================================================
00072F3A                            ; ---------------------------------------------------------------------------
00072F3A                            ; Stop music
00072F3A                            ; ---------------------------------------------------------------------------
00072F3A                            
00072F3A                            Sound_E4:				; XREF: Sound_ChkValue; Sound_ExIndex; sub_72504
00072F3A 702B                       		moveq	#$2B,d0
00072F3C 123C 0080                  		move.b	#$80,d1
00072F40 4EBA 0000                  		jsr	sub_7272E(pc)
00072F44 7027                       		moveq	#$27,d0
00072F46 7200                       		moveq	#0,d1
00072F48 4EBA 0000                  		jsr	sub_7272E(pc)
00072F4C 204E                       		movea.l	a6,a0
00072F4E 303C 00E3                  		move.w	#$E3,d0
00072F52                            
00072F52                            loc_725B6:
00072F52 4298                       		clr.l	(a0)+
00072F54 51C8 FFFC                  		dbf	d0,loc_725B6
00072F58                            
00072F58 1D7C 0080 0009             		move.b	#$80,9(a6)	; set music to $80 (silence)
00072F5E 4EBA FFA6                  		jsr	sub_7256A(pc)
00072F62 6000 0000                  		bra.w	sub_729B6
00072F66                            
00072F66                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00072F66                            
00072F66                            
00072F66                            sub_725CA:				; XREF: Sound_ChkValue
00072F66 204E                       		movea.l	a6,a0
00072F68 1216                       		move.b	0(a6),d1
00072F6A 142E 0027                  		move.b	$27(a6),d2
00072F6E 162E 002A                  		move.b	$2A(a6),d3
00072F72 182E 0026                  		move.b	$26(a6),d4
00072F76 3A2E 000A                  		move.w	$A(a6),d5
00072F7A 303C 0087                  		move.w	#$87,d0
00072F7E                            
00072F7E                            loc_725E4:
00072F7E 4298                       		clr.l	(a0)+
00072F80 51C8 FFFC                  		dbf	d0,loc_725E4
00072F84                            
00072F84 1C81                       		move.b	d1,0(a6)
00072F86 1D42 0027                  		move.b	d2,$27(a6)
00072F8A 1D43 002A                  		move.b	d3,$2A(a6)
00072F8E 1D44 0026                  		move.b	d4,$26(a6)
00072F92 3D45 000A                  		move.w	d5,$A(a6)
00072F96 1D7C 0080 0009             		move.b	#$80,9(a6)
00072F9C 4EBA FF68                  		jsr	sub_7256A(pc)
00072FA0 6000 0000                  		bra.w	sub_729B6
00072FA4                            ; End of function sub_725CA
00072FA4                            
00072FA4                            
00072FA4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00072FA4                            
00072FA4                            
00072FA4                            sub_7260C:				; XREF: sub_71B4C
00072FA4 1D6E 0002 0001             		move.b	2(a6),1(a6)
00072FAA 41EE 004E                  		lea	$4E(a6),a0
00072FAE 7030                       		moveq	#$30,d0
00072FB0 7209                       		moveq	#9,d1
00072FB2                            
00072FB2                            loc_7261A:
00072FB2 5210                       		addq.b	#1,(a0)
00072FB4 D0C0                       		adda.w	d0,a0
00072FB6 51C9 FFFA                  		dbf	d1,loc_7261A
00072FBA                            
00072FBA 4E75                       		rts	
00072FBC                            ; End of function sub_7260C
00072FBC                            
00072FBC                            ; ===========================================================================
00072FBC                            ; ---------------------------------------------------------------------------
00072FBC                            ; Speed	up music
00072FBC                            ; ---------------------------------------------------------------------------
00072FBC                            
00072FBC                            Sound_E2:				; XREF: Sound_ExIndex
00072FBC 4A2E 0027                  		tst.b	$27(a6)
00072FC0 6600                       		bne.s	loc_7263E
00072FC2 1D6E 0029 0002             		move.b	$29(a6),2(a6)
00072FC8 1D6E 0029 0001             		move.b	$29(a6),1(a6)
00072FCE 1D7C 0080 002A             		move.b	#$80,$2A(a6)
00072FD4 4E75                       		rts	
00072FD6                            ; ===========================================================================
00072FD6                            
00072FD6                            loc_7263E:
00072FD6 1D6E 03C9 03A2             		move.b	$3C9(a6),$3A2(a6)
00072FDC 1D6E 03C9 03A1             		move.b	$3C9(a6),$3A1(a6)
00072FE2 1D7C 0080 03CA             		move.b	#$80,$3CA(a6)
00072FE8 4E75                       		rts	
00072FEA                            ; ===========================================================================
00072FEA                            ; ---------------------------------------------------------------------------
00072FEA                            ; Change music back to normal speed
00072FEA                            ; ---------------------------------------------------------------------------
00072FEA                            
00072FEA                            Sound_E3:				; XREF: Sound_ExIndex
00072FEA 4A2E 0027                  		tst.b	$27(a6)
00072FEE 6600                       		bne.s	loc_7266A
00072FF0 1D6E 0028 0002             		move.b	$28(a6),2(a6)
00072FF6 1D6E 0028 0001             		move.b	$28(a6),1(a6)
00072FFC 422E 002A                  		clr.b	$2A(a6)
00073000 4E75                       		rts	
00073002                            ; ===========================================================================
00073002                            
00073002                            loc_7266A:
00073002 1D6E 03C8 03A2             		move.b	$3C8(a6),$3A2(a6)
00073008 1D6E 03C8 03A1             		move.b	$3C8(a6),$3A1(a6)
0007300E 422E 03CA                  		clr.b	$3CA(a6)
00073012 4E75                       		rts	
00073014                            
00073014                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00073014                            
00073014                            
00073014                            sub_7267C:				; XREF: sub_71B4C
00073014 4A2E 0025                  		tst.b	$25(a6)
00073018 6700                       		beq.s	loc_72688
0007301A 532E 0025                  		subq.b	#1,$25(a6)
0007301E 4E75                       		rts	
00073020                            ; ===========================================================================
00073020                            
00073020                            loc_72688:
00073020 4A2E 0026                  		tst.b	$26(a6)
00073024 6700                       		beq.s	loc_726D6
00073026 532E 0026                  		subq.b	#1,$26(a6)
0007302A 1D7C 0002 0025             		move.b	#2,$25(a6)
00073030 4BEE 0070                  		lea	$70(a6),a5
00073034 7E05                       		moveq	#5,d7
00073036                            
00073036                            loc_7269E:
00073036 4A15                       		tst.b	(a5)
00073038 6A00                       		bpl.s	loc_726AA
0007303A 532D 0009                  		subq.b	#1,9(a5)
0007303E 4EBA 0000                  		jsr	sub_72CB4(pc)
00073042                            
00073042                            loc_726AA:
00073042 DAFC 0030                  		adda.w	#$30,a5
00073046 51CF FFEE                  		dbf	d7,loc_7269E
0007304A 7E02                       		moveq	#2,d7
0007304C                            
0007304C                            loc_726B4:
0007304C 4A15                       		tst.b	(a5)
0007304E 6A00                       		bpl.s	loc_726CC
00073050 532D 0009                  		subq.b	#1,9(a5)
00073054 1C2D 0009                  		move.b	9(a5),d6
00073058 0C06 0010                  		cmpi.b	#$10,d6
0007305C 6500                       		bcs.s	loc_726C8
0007305E 7C0F                       		moveq	#$F,d6
00073060                            
00073060                            loc_726C8:
00073060 4EBA 0000                  		jsr	sub_7296A(pc)
00073064                            
00073064                            loc_726CC:
00073064 DAFC 0030                  		adda.w	#$30,a5
00073068 51CF FFE2                  		dbf	d7,loc_726B4
0007306C 4E75                       		rts	
0007306E                            ; ===========================================================================
0007306E                            
0007306E                            loc_726D6:
0007306E 08AE 0002 0040             		bclr	#2,$40(a6)
00073074 422E 0024                  		clr.b	$24(a6)
00073078 4E75                       		rts	
0007307A                            ; End of function sub_7267C
0007307A                            
0007307A                            ; ===========================================================================
0007307A                            
0007307A                            loc_726E2:				; XREF: sub_71CCA
0007307A 0815 0001                  		btst	#1,(a5)
0007307E 6600                       		bne.s	locret_726FC
00073080 0815 0002                  		btst	#2,(a5)
00073084 6600                       		bne.s	locret_726FC
00073086 7028                       		moveq	#$28,d0
00073088 122D 0001                  		move.b	1(a5),d1
0007308C 0001 00F0                  		ori.b	#-$10,d1
00073090 6000 0000                  		bra.w	sub_7272E
00073094                            ; ===========================================================================
00073094                            
00073094                            locret_726FC:
00073094 4E75                       		rts	
00073096                            
00073096                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00073096                            
00073096                            
00073096                            sub_726FE:				; XREF: sub_71CEC; sub_71D9E; Sound_ChkValue; Snd_FadeOut1
00073096 0815 0004                  		btst	#4,(a5)
0007309A 6600                       		bne.s	locret_72714
0007309C 0815 0002                  		btst	#2,(a5)
000730A0 6600                       		bne.s	locret_72714
000730A2                            
000730A2                            loc_7270A:				; XREF: Snd_FadeOut2
000730A2 7028                       		moveq	#$28,d0
000730A4 122D 0001                  		move.b	1(a5),d1
000730A8 6000 0000                  		bra.w	sub_7272E
000730AC                            ; ===========================================================================
000730AC                            
000730AC                            locret_72714:
000730AC 4E75                       		rts	
000730AE                            ; End of function sub_726FE
000730AE                            
000730AE                            ; ===========================================================================
000730AE                            
000730AE                            loc_72716:				; XREF: sub_72A5A
000730AE 0815 0002                  		btst	#2,(a5)
000730B2 6600                       		bne.s	locret_72720
000730B4 6000 0000                  		bra.w	sub_72722
000730B8                            ; ===========================================================================
000730B8                            
000730B8                            locret_72720:
000730B8 4E75                       		rts	
000730BA                            
000730BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000730BA                            
000730BA                            
000730BA                            sub_72722:				; XREF: sub_71E18; sub_72C4E; sub_72CB4
000730BA 082D 0002 0001             		btst	#2,1(a5)
000730C0 6600                       		bne.s	loc_7275A
000730C2 D02D 0001                  		add.b	1(a5),d0
000730C6                            ; End of function sub_72722
000730C6                            
000730C6                            
000730C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000730C6                            
000730C6                            
000730C6                            sub_7272E:				; XREF: loc_71E6A
000730C6 1439 00A0 4000             		move.b	($A04000).l,d2
000730CC 0802 0007                  		btst	#7,d2
000730D0 66F4                       		bne.s	sub_7272E
000730D2 13C0 00A0 4000             		move.b	d0,($A04000).l
000730D8 4E71                       		nop	
000730DA 4E71                       		nop	
000730DC 4E71                       		nop	
000730DE                            
000730DE                            loc_72746:
000730DE 1439 00A0 4000             		move.b	($A04000).l,d2
000730E4 0802 0007                  		btst	#7,d2
000730E8 66F4                       		bne.s	loc_72746
000730EA                            
000730EA 13C1 00A0 4001             		move.b	d1,($A04001).l
000730F0 4E75                       		rts	
000730F2                            ; End of function sub_7272E
000730F2                            
000730F2                            ; ===========================================================================
000730F2                            
000730F2                            loc_7275A:				; XREF: sub_72722
000730F2 142D 0001                  		move.b	1(a5),d2
000730F6 0882 0002                  		bclr	#2,d2
000730FA D002                       		add.b	d2,d0
000730FC                            
000730FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000730FC                            
000730FC                            
000730FC                            sub_72764:				; XREF: loc_71E6A; Sound_ChkValue; sub_7256A; sub_72764
000730FC 1439 00A0 4000             		move.b	($A04000).l,d2
00073102 0802 0007                  		btst	#7,d2
00073106 66F4                       		bne.s	sub_72764
00073108 13C0 00A0 4002             		move.b	d0,($A04002).l
0007310E 4E71                       		nop	
00073110 4E71                       		nop	
00073112 4E71                       		nop	
00073114                            
00073114                            loc_7277C:
00073114 1439 00A0 4000             		move.b	($A04000).l,d2
0007311A 0802 0007                  		btst	#7,d2
0007311E 66F4                       		bne.s	loc_7277C
00073120                            
00073120 13C1 00A0 4003             		move.b	d1,($A04003).l
00073126 4E75                       		rts	
00073128                            ; End of function sub_72764
00073128                            
00073128                            ; ===========================================================================
00073128 025E 0284 02AB 02D3 02FE+  word_72790:	dc.w $25E, $284, $2AB, $2D3, $2FE, $32D, $35C, $38F, $3C5
0007313A 03FF 043C 047C 0A5E 0A84+  		dc.w $3FF, $43C, $47C, $A5E, $A84, $AAB, $AD3, $AFE, $B2D
0007314C 0B5C 0B8F 0BC5 0BFF 0C3C+  		dc.w $B5C, $B8F, $BC5, $BFF, $C3C, $C7C, $125E,	$1284
0007315C 12AB 12D3 12FE 132D 135C+  		dc.w $12AB, $12D3, $12FE, $132D, $135C,	$138F, $13C5, $13FF
0007316C 143C 147C 1A5E 1A84 1AAB+  		dc.w $143C, $147C, $1A5E, $1A84, $1AAB,	$1AD3, $1AFE, $1B2D
0007317C 1B5C 1B8F 1BC5 1BFF 1C3C+  		dc.w $1B5C, $1B8F, $1BC5, $1BFF, $1C3C,	$1C7C, $225E, $2284
0007318C 22AB 22D3 22FE 232D 235C+  		dc.w $22AB, $22D3, $22FE, $232D, $235C,	$238F, $23C5, $23FF
0007319C 243C 247C 2A5E 2A84 2AAB+  		dc.w $243C, $247C, $2A5E, $2A84, $2AAB,	$2AD3, $2AFE, $2B2D
000731AC 2B5C 2B8F 2BC5 2BFF 2C3C+  		dc.w $2B5C, $2B8F, $2BC5, $2BFF, $2C3C,	$2C7C, $325E, $3284
000731BC 32AB 32D3 32FE 332D 335C+  		dc.w $32AB, $32D3, $32FE, $332D, $335C,	$338F, $33C5, $33FF
000731CC 343C 347C 3A5E 3A84 3AAB+  		dc.w $343C, $347C, $3A5E, $3A84, $3AAB,	$3AD3, $3AFE, $3B2D
000731DC 3B5C 3B8F 3BC5 3BFF 3C3C+  		dc.w $3B5C, $3B8F, $3BC5, $3BFF, $3C3C,	$3C7C
000731E8                            
000731E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000731E8                            
000731E8                            
000731E8                            sub_72850:				; XREF: sub_71B4C
000731E8 532D 000E                  		subq.b	#1,$E(a5)
000731EC 6600                       		bne.s	loc_72866
000731EE 0895 0004                  		bclr	#4,(a5)
000731F2 4EBA 0000                  		jsr	sub_72878(pc)
000731F6 4EBA 0000                  		jsr	sub_728DC(pc)
000731FA 6000 0000                  		bra.w	loc_7292E
000731FE                            ; ===========================================================================
000731FE                            
000731FE                            loc_72866:
000731FE 4EBA F4B2                  		jsr	sub_71D9E(pc)
00073202 4EBA 0000                  		jsr	sub_72926(pc)
00073206 4EBA F4D2                  		jsr	sub_71DC6(pc)
0007320A 4EBA 0000                  		jsr	sub_728E2(pc)
0007320E 4E75                       		rts	
00073210                            ; End of function sub_72850
00073210                            
00073210                            
00073210                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00073210                            
00073210                            
00073210                            sub_72878:				; XREF: sub_72850
00073210 0895 0001                  		bclr	#1,(a5)
00073214 286D 0004                  		movea.l	4(a5),a4
00073218                            
00073218                            loc_72880:
00073218 7A00                       		moveq	#0,d5
0007321A 1A1C                       		move.b	(a4)+,d5
0007321C 0C05 00E0                  		cmpi.b	#$E0,d5
00073220 6500                       		bcs.s	loc_72890
00073222 4EBA 0000                  		jsr	sub_72A5A(pc)
00073226 60F0                       		bra.s	loc_72880
00073228                            ; ===========================================================================
00073228                            
00073228                            loc_72890:
00073228 4A05                       		tst.b	d5
0007322A 6A00                       		bpl.s	loc_728A4
0007322C 4EBA 0000                  		jsr	sub_728AC(pc)
00073230 1A1C                       		move.b	(a4)+,d5
00073232 4A05                       		tst.b	d5
00073234 6A00                       		bpl.s	loc_728A4
00073236 534C                       		subq.w	#1,a4
00073238 6000 F43A                  		bra.w	sub_71D60
0007323C                            ; ===========================================================================
0007323C                            
0007323C                            loc_728A4:
0007323C 4EBA F416                  		jsr	sub_71D40(pc)
00073240 6000 F432                  		bra.w	sub_71D60
00073244                            ; End of function sub_72878
00073244                            
00073244                            
00073244                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00073244                            
00073244                            
00073244                            sub_728AC:				; XREF: sub_72878
00073244 0405 0081                  		subi.b	#$81,d5
00073248 6500                       		bcs.s	loc_728CA
0007324A DA2D 0008                  		add.b	8(a5),d5
0007324E 0245 007F                  		andi.w	#$7F,d5
00073252 E34D                       		lsl.w	#1,d5
00073254 41FA 0000                  		lea	word_729CE(pc),a0
00073258 3B70 5000 0010             		move.w	(a0,d5.w),$10(a5)
0007325E 6000 F414                  		bra.w	sub_71D60
00073262                            ; ===========================================================================
00073262                            
00073262                            loc_728CA:
00073262 08D5 0001                  		bset	#1,(a5)
00073266 3B7C FFFF 0010             		move.w	#-1,$10(a5)
0007326C 4EBA F406                  		jsr	sub_71D60(pc)
00073270 6000 0000                  		bra.w	sub_729A0
00073274                            ; End of function sub_728AC
00073274                            
00073274                            
00073274                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00073274                            
00073274                            
00073274                            sub_728DC:				; XREF: sub_72850
00073274 3C2D 0010                  		move.w	$10(a5),d6
00073278 6B00                       		bmi.s	loc_72920
0007327A                            ; End of function sub_728DC
0007327A                            
0007327A                            
0007327A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007327A                            
0007327A                            
0007327A                            sub_728E2:				; XREF: sub_72850
0007327A 102D 001E                  		move.b	$1E(a5),d0
0007327E 4880                       		ext.w	d0
00073280 DC40                       		add.w	d0,d6
00073282 0815 0002                  		btst	#2,(a5)
00073286 6600                       		bne.s	locret_7291E
00073288 0815 0001                  		btst	#1,(a5)
0007328C 6600                       		bne.s	locret_7291E
0007328E 102D 0001                  		move.b	1(a5),d0
00073292 0C00 00E0                  		cmpi.b	#$E0,d0
00073296 6600                       		bne.s	loc_72904
00073298 103C 00C0                  		move.b	#$C0,d0
0007329C                            
0007329C                            loc_72904:
0007329C 3206                       		move.w	d6,d1
0007329E 0201 000F                  		andi.b	#$F,d1
000732A2 8001                       		or.b	d1,d0
000732A4 E84E                       		lsr.w	#4,d6
000732A6 0206 003F                  		andi.b	#$3F,d6
000732AA 13C0 00C0 0011             		move.b	d0,($C00011).l
000732B0 13C6 00C0 0011             		move.b	d6,($C00011).l
000732B6                            
000732B6                            locret_7291E:
000732B6 4E75                       		rts	
000732B8                            ; End of function sub_728E2
000732B8                            
000732B8                            ; ===========================================================================
000732B8                            
000732B8                            loc_72920:				; XREF: sub_728DC
000732B8 08D5 0001                  		bset	#1,(a5)
000732BC 4E75                       		rts	
000732BE                            
000732BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000732BE                            
000732BE                            
000732BE                            sub_72926:				; XREF: sub_72850
000732BE 4A2D 000B                  		tst.b	$B(a5)
000732C2 6700 0000                  		beq.w	locret_7298A
000732C6                            
000732C6                            loc_7292E:				; XREF: sub_72850
000732C6 1C2D 0009                  		move.b	9(a5),d6
000732CA 7000                       		moveq	#0,d0
000732CC 102D 000B                  		move.b	$B(a5),d0
000732D0 6700                       		beq.s	sub_7296A
000732D2 2079 0007 2288             		movea.l	(Go_PSGIndex).l,a0
000732D8 5340                       		subq.w	#1,d0
000732DA E548                       		lsl.w	#2,d0
000732DC 2070 0000                  		movea.l	(a0,d0.w),a0
000732E0 102D 000C                  		move.b	$C(a5),d0
000732E4 1030 0000                  		move.b	(a0,d0.w),d0
000732E8 522D 000C                  		addq.b	#1,$C(a5)
000732EC 0800 0007                  		btst	#7,d0
000732F0 6700                       		beq.s	loc_72960
000732F2 0C00 0080                  		cmpi.b	#$80,d0
000732F6 6700                       		beq.s	loc_7299A
000732F8                            
000732F8                            loc_72960:
000732F8 DC40                       		add.w	d0,d6
000732FA 0C06 0010                  		cmpi.b	#$10,d6
000732FE 6500                       		bcs.s	sub_7296A
00073300 7C0F                       		moveq	#$F,d6
00073302                            ; End of function sub_72926
00073302                            
00073302                            
00073302                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00073302                            
00073302                            
00073302                            sub_7296A:				; XREF: sub_72504; sub_7267C; sub_72926
00073302 0815 0001                  		btst	#1,(a5)
00073306 6600                       		bne.s	locret_7298A
00073308 0815 0002                  		btst	#2,(a5)
0007330C 6600                       		bne.s	locret_7298A
0007330E 0815 0004                  		btst	#4,(a5)
00073312 6600                       		bne.s	loc_7298C
00073314                            
00073314                            loc_7297C:
00073314 8C2D 0001                  		or.b	1(a5),d6
00073318 0606 0010                  		addi.b	#$10,d6
0007331C 13C6 00C0 0011             		move.b	d6,($C00011).l
00073322                            
00073322                            locret_7298A:
00073322 4E75                       		rts	
00073324                            ; ===========================================================================
00073324                            
00073324                            loc_7298C:
00073324 4A2D 0013                  		tst.b	$13(a5)
00073328 67EA                       		beq.s	loc_7297C
0007332A 4A2D 0012                  		tst.b	$12(a5)
0007332E 66E4                       		bne.s	loc_7297C
00073330 4E75                       		rts	
00073332                            ; End of function sub_7296A
00073332                            
00073332                            ; ===========================================================================
00073332                            
00073332                            loc_7299A:				; XREF: sub_72926
00073332 532D 000C                  		subq.b	#1,$C(a5)
00073336 4E75                       		rts	
00073338                            
00073338                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00073338                            
00073338                            
00073338                            sub_729A0:				; XREF: sub_71D9E; Sound_ChkValue; Snd_FadeOut1; sub_728AC
00073338 0815 0002                  		btst	#2,(a5)
0007333C 6600                       		bne.s	locret_729B4
0007333E                            
0007333E                            loc_729A6:				; XREF: Snd_FadeOut2
0007333E 102D 0001                  		move.b	1(a5),d0
00073342 0000 001F                  		ori.b	#$1F,d0
00073346 13C0 00C0 0011             		move.b	d0,($C00011).l
0007334C                            
0007334C                            locret_729B4:
0007334C 4E75                       		rts	
0007334E                            ; End of function sub_729A0
0007334E                            
0007334E                            
0007334E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007334E                            
0007334E                            
0007334E                            sub_729B6:				; XREF: loc_71E7C
0007334E 41F9 00C0 0011             		lea	($C00011).l,a0
00073354 10BC 009F                  		move.b	#$9F,(a0)
00073358 10BC 00BF                  		move.b	#$BF,(a0)
0007335C 10BC 00DF                  		move.b	#$DF,(a0)
00073360 10BC 00FF                  		move.b	#$FF,(a0)
00073364 4E75                       		rts	
00073366                            ; End of function sub_729B6
00073366                            
00073366                            ; ===========================================================================
00073366 0356 0326 02F9 02CE 02A5+  word_729CE:	dc.w $356, $326, $2F9, $2CE, $2A5, $280, $25C, $23A, $21A
00073378 01FB 01DF 01C4 01AB 0193+  		dc.w $1FB, $1DF, $1C4, $1AB, $193, $17D, $167, $153, $140
0007338A 012E 011D 010D 00FE 00EF+  		dc.w $12E, $11D, $10D, $FE, $EF, $E2, $D6, $C9,	$BE, $B4
0007339E 00A9 00A0 0097 008F 0087+  		dc.w $A9, $A0, $97, $8F, $87, $7F, $78,	$71, $6B, $65
000733B2 005F 005A 0055 0050 004B+  		dc.w $5F, $5A, $55, $50, $4B, $47, $43,	$40, $3C, $39
000733C6 0036 0033 0030 002D 002B+  		dc.w $36, $33, $30, $2D, $2B, $28, $26,	$24, $22, $20
000733DA 001F 001D 001B 001A 0018+  		dc.w $1F, $1D, $1B, $1A, $18, $17, $16,	$15, $13, $12
000733EE 0011 0000                  		dc.w $11, 0
000733F2                            
000733F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000733F2                            
000733F2                            
000733F2                            sub_72A5A:				; XREF: sub_71C4E; sub_71CEC; sub_72878
000733F2 0445 00E0                  		subi.w	#$E0,d5
000733F6 E54D                       		lsl.w	#2,d5
000733F8 4EFB 5000                  		jmp	loc_72A64(pc,d5.w)
000733FC                            ; End of function sub_72A5A
000733FC                            
000733FC                            ; ===========================================================================
000733FC                            
000733FC                            loc_72A64:
000733FC 6000 0000                  		bra.w	loc_72ACC
00073400                            ; ===========================================================================
00073400 6000 0000                  		bra.w	loc_72AEC
00073404                            ; ===========================================================================
00073404 6000 0000                  		bra.w	loc_72AF2
00073408                            ; ===========================================================================
00073408 6000 0000                  		bra.w	loc_72AF8
0007340C                            ; ===========================================================================
0007340C 6000 0000                  		bra.w	loc_72B14
00073410                            ; ===========================================================================
00073410 6000 0000                  		bra.w	loc_72B9E
00073414                            ; ===========================================================================
00073414 6000 0000                  		bra.w	loc_72BA4
00073418                            ; ===========================================================================
00073418 6000 0000                  		bra.w	loc_72BAE
0007341C                            ; ===========================================================================
0007341C 6000 0000                  		bra.w	loc_72BB4
00073420                            ; ===========================================================================
00073420 6000 0000                  		bra.w	loc_72BBE
00073424                            ; ===========================================================================
00073424 6000 0000                  		bra.w	loc_72BC6
00073428                            ; ===========================================================================
00073428 6000 0000                  		bra.w	loc_72BD0
0007342C                            ; ===========================================================================
0007342C 6000 0000                  		bra.w	loc_72BE6
00073430                            ; ===========================================================================
00073430 6000 0000                  		bra.w	loc_72BEE
00073434                            ; ===========================================================================
00073434 6000 0000                  		bra.w	loc_72BF4
00073438                            ; ===========================================================================
00073438 6000 0000                  		bra.w	loc_72C26
0007343C                            ; ===========================================================================
0007343C 6000 0000                  		bra.w	loc_72D30
00073440                            ; ===========================================================================
00073440 6000 0000                  		bra.w	loc_72D52
00073444                            ; ===========================================================================
00073444 6000 0000                  		bra.w	loc_72D58
00073448                            ; ===========================================================================
00073448 6000 0000                  		bra.w	loc_72E06
0007344C                            ; ===========================================================================
0007344C 6000 0000                  		bra.w	loc_72E20
00073450                            ; ===========================================================================
00073450 6000 0000                  		bra.w	loc_72E26
00073454                            ; ===========================================================================
00073454 6000 0000                  		bra.w	loc_72E2C
00073458                            ; ===========================================================================
00073458 6000 0000                  		bra.w	loc_72E38
0007345C                            ; ===========================================================================
0007345C 6000 0000                  		bra.w	loc_72E52
00073460                            ; ===========================================================================
00073460 6000 0000                  		bra.w	loc_72E64
00073464                            ; ===========================================================================
00073464                            
00073464                            loc_72ACC:				; XREF: loc_72A64
00073464 121C                       		move.b	(a4)+,d1
00073466 4A2D 0001                  		tst.b	1(a5)
0007346A 6B00                       		bmi.s	locret_72AEA
0007346C 102D 000A                  		move.b	$A(a5),d0
00073470 0200 0037                  		andi.b	#$37,d0
00073474 8200                       		or.b	d0,d1
00073476 1B41 000A                  		move.b	d1,$A(a5)
0007347A 103C 00B4                  		move.b	#$B4,d0
0007347E 6000 FC2E                  		bra.w	loc_72716
00073482                            ; ===========================================================================
00073482                            
00073482                            locret_72AEA:
00073482 4E75                       		rts	
00073484                            ; ===========================================================================
00073484                            
00073484                            loc_72AEC:				; XREF: loc_72A64
00073484 1B5C 001E                  		move.b	(a4)+,$1E(a5)
00073488 4E75                       		rts	
0007348A                            ; ===========================================================================
0007348A                            
0007348A                            loc_72AF2:				; XREF: loc_72A64
0007348A 1D5C 0007                  		move.b	(a4)+,7(a6)
0007348E 4E75                       		rts	
00073490                            ; ===========================================================================
00073490                            
00073490                            loc_72AF8:				; XREF: loc_72A64
00073490 7000                       		moveq	#0,d0
00073492 102D 000D                  		move.b	$D(a5),d0
00073496 2875 0000                  		movea.l	(a5,d0.w),a4
0007349A 2BBC 0000 0000 0000        		move.l	#0,(a5,d0.w)
000734A2 544C                       		addq.w	#2,a4
000734A4 5800                       		addq.b	#4,d0
000734A6 1B40 000D                  		move.b	d0,$D(a5)
000734AA 4E75                       		rts	
000734AC                            ; ===========================================================================
000734AC                            
000734AC                            loc_72B14:				; XREF: loc_72A64
000734AC 204E                       		movea.l	a6,a0
000734AE 43EE 03A0                  		lea	$3A0(a6),a1
000734B2 303C 0087                  		move.w	#$87,d0
000734B6                            
000734B6                            loc_72B1E:
000734B6 20D9                       		move.l	(a1)+,(a0)+
000734B8 51C8 FFFC                  		dbf	d0,loc_72B1E
000734BC                            
000734BC 08EE 0002 0040             		bset	#2,$40(a6)
000734C2 264D                       		movea.l	a5,a3
000734C4 1C3C 0028                  		move.b	#$28,d6
000734C8 9C2E 0026                  		sub.b	$26(a6),d6
000734CC 7E05                       		moveq	#5,d7
000734CE 4BEE 0070                  		lea	$70(a6),a5
000734D2                            
000734D2                            loc_72B3A:
000734D2 0815 0007                  		btst	#7,(a5)
000734D6 6700                       		beq.s	loc_72B5C
000734D8 08D5 0001                  		bset	#1,(a5)
000734DC DD2D 0009                  		add.b	d6,9(a5)
000734E0 0815 0002                  		btst	#2,(a5)
000734E4 6600                       		bne.s	loc_72B5C
000734E6 7000                       		moveq	#0,d0
000734E8 102D 000B                  		move.b	$B(a5),d0
000734EC 226E 0018                  		movea.l	$18(a6),a1
000734F0 4EBA 0000                  		jsr	sub_72C4E(pc)
000734F4                            
000734F4                            loc_72B5C:
000734F4 DAFC 0030                  		adda.w	#$30,a5
000734F8 51CF FFD8                  		dbf	d7,loc_72B3A
000734FC                            
000734FC 7E02                       		moveq	#2,d7
000734FE                            
000734FE                            loc_72B66:
000734FE 0815 0007                  		btst	#7,(a5)
00073502 6700                       		beq.s	loc_72B78
00073504 08D5 0001                  		bset	#1,(a5)
00073508 4EBA FE2E                  		jsr	sub_729A0(pc)
0007350C DD2D 0009                  		add.b	d6,9(a5)
00073510                            
00073510                            loc_72B78:
00073510 DAFC 0030                  		adda.w	#$30,a5
00073514 51CF FFE8                  		dbf	d7,loc_72B66
00073518 2A4B                       		movea.l	a3,a5
0007351A 1D7C 0080 0024             		move.b	#$80,$24(a6)
00073520 1D7C 0028 0026             		move.b	#$28,$26(a6)
00073526 422E 0027                  		clr.b	$27(a6)
0007352A 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00073532 504F                       		addq.w	#8,sp
00073534 4E75                       		rts	
00073536                            ; ===========================================================================
00073536                            
00073536                            loc_72B9E:				; XREF: loc_72A64
00073536 1B5C 0002                  		move.b	(a4)+,2(a5)
0007353A 4E75                       		rts	
0007353C                            ; ===========================================================================
0007353C                            
0007353C                            loc_72BA4:				; XREF: loc_72A64
0007353C 101C                       		move.b	(a4)+,d0
0007353E D12D 0009                  		add.b	d0,9(a5)
00073542 6000 0000                  		bra.w	sub_72CB4
00073546                            ; ===========================================================================
00073546                            
00073546                            loc_72BAE:				; XREF: loc_72A64
00073546 08D5 0004                  		bset	#4,(a5)
0007354A 4E75                       		rts	
0007354C                            ; ===========================================================================
0007354C                            
0007354C                            loc_72BB4:				; XREF: loc_72A64
0007354C 1B54 0012                  		move.b	(a4),$12(a5)
00073550 1B5C 0013                  		move.b	(a4)+,$13(a5)
00073554 4E75                       		rts	
00073556                            ; ===========================================================================
00073556                            
00073556                            loc_72BBE:				; XREF: loc_72A64
00073556 101C                       		move.b	(a4)+,d0
00073558 D12D 0008                  		add.b	d0,8(a5)
0007355C 4E75                       		rts	
0007355E                            ; ===========================================================================
0007355E                            
0007355E                            loc_72BC6:				; XREF: loc_72A64
0007355E 1D54 0002                  		move.b	(a4),2(a6)
00073562 1D5C 0001                  		move.b	(a4)+,1(a6)
00073566 4E75                       		rts	
00073568                            ; ===========================================================================
00073568                            
00073568                            loc_72BD0:				; XREF: loc_72A64
00073568 41EE 0040                  		lea	$40(a6),a0
0007356C 101C                       		move.b	(a4)+,d0
0007356E 7230                       		moveq	#$30,d1
00073570 7409                       		moveq	#9,d2
00073572                            
00073572                            loc_72BDA:
00073572 1140 0002                  		move.b	d0,2(a0)
00073576 D0C1                       		adda.w	d1,a0
00073578 51CA FFF8                  		dbf	d2,loc_72BDA
0007357C                            
0007357C 4E75                       		rts	
0007357E                            ; ===========================================================================
0007357E                            
0007357E                            loc_72BE6:				; XREF: loc_72A64
0007357E 101C                       		move.b	(a4)+,d0
00073580 D12D 0009                  		add.b	d0,9(a5)
00073584 4E75                       		rts	
00073586                            ; ===========================================================================
00073586                            
00073586                            loc_72BEE:				; XREF: loc_72A64
00073586 422E 002C                  		clr.b	$2C(a6)
0007358A 4E75                       		rts	
0007358C                            ; ===========================================================================
0007358C                            
0007358C                            loc_72BF4:				; XREF: loc_72A64
0007358C 0895 0007                  		bclr	#7,(a5)
00073590 0895 0004                  		bclr	#4,(a5)
00073594 4EBA FB00                  		jsr	sub_726FE(pc)
00073598 4A2E 0250                  		tst.b	$250(a6)
0007359C 6B00                       		bmi.s	loc_72C22
0007359E 264D                       		movea.l	a5,a3
000735A0 4BEE 0100                  		lea	$100(a6),a5
000735A4 226E 0018                  		movea.l	$18(a6),a1
000735A8 0895 0002                  		bclr	#2,(a5)
000735AC 08D5 0001                  		bset	#1,(a5)
000735B0 102D 000B                  		move.b	$B(a5),d0
000735B4 4EBA 0000                  		jsr	sub_72C4E(pc)
000735B8 2A4B                       		movea.l	a3,a5
000735BA                            
000735BA                            loc_72C22:
000735BA 504F                       		addq.w	#8,sp
000735BC 4E75                       		rts	
000735BE                            ; ===========================================================================
000735BE                            
000735BE                            loc_72C26:				; XREF: loc_72A64
000735BE 7000                       		moveq	#0,d0
000735C0 101C                       		move.b	(a4)+,d0
000735C2 1B40 000B                  		move.b	d0,$B(a5)
000735C6 0815 0002                  		btst	#2,(a5)
000735CA 6600 0000                  		bne.w	locret_72CAA
000735CE 226E 0018                  		movea.l	$18(a6),a1
000735D2 4A2E 000E                  		tst.b	$E(a6)
000735D6 6700                       		beq.s	sub_72C4E
000735D8 226D 0020                  		movea.l	$20(a5),a1
000735DC 4A2E 000E                  		tst.b	$E(a6)
000735E0 6B00                       		bmi.s	sub_72C4E
000735E2 226E 0020                  		movea.l	$20(a6),a1
000735E6                            
000735E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000735E6                            
000735E6                            
000735E6                            sub_72C4E:				; XREF: Snd_FadeOut1; et al
000735E6 5340                       		subq.w	#1,d0
000735E8 6B00                       		bmi.s	loc_72C5C
000735EA 323C 0019                  		move.w	#$19,d1
000735EE                            
000735EE                            loc_72C56:
000735EE D2C1                       		adda.w	d1,a1
000735F0 51C8 FFFC                  		dbf	d0,loc_72C56
000735F4                            
000735F4                            loc_72C5C:
000735F4 1219                       		move.b	(a1)+,d1
000735F6 1B41 001F                  		move.b	d1,$1F(a5)
000735FA 1801                       		move.b	d1,d4
000735FC 103C 00B0                  		move.b	#$B0,d0
00073600 4EBA FAB8                  		jsr	sub_72722(pc)
00073604 45FA 0000                  		lea	byte_72D18(pc),a2
00073608 7613                       		moveq	#$13,d3
0007360A                            
0007360A                            loc_72C72:
0007360A 101A                       		move.b	(a2)+,d0
0007360C 1219                       		move.b	(a1)+,d1
0007360E 4EBA FAAA                  		jsr	sub_72722(pc)
00073612 51CB FFF6                  		dbf	d3,loc_72C72
00073616 7A03                       		moveq	#3,d5
00073618 0244 0007                  		andi.w	#7,d4
0007361C 183B 4000                  		move.b	byte_72CAC(pc,d4.w),d4
00073620 162D 0009                  		move.b	9(a5),d3
00073624                            
00073624                            loc_72C8C:
00073624 101A                       		move.b	(a2)+,d0
00073626 1219                       		move.b	(a1)+,d1
00073628 E20C                       		lsr.b	#1,d4
0007362A 6400                       		bcc.s	loc_72C96
0007362C D203                       		add.b	d3,d1
0007362E                            
0007362E                            loc_72C96:
0007362E 4EBA FA8A                  		jsr	sub_72722(pc)
00073632 51CD FFF0                  		dbf	d5,loc_72C8C
00073636 103C 00B4                  		move.b	#$B4,d0
0007363A 122D 000A                  		move.b	$A(a5),d1
0007363E 4EBA FA7A                  		jsr	sub_72722(pc)
00073642                            
00073642                            locret_72CAA:
00073642 4E75                       		rts	
00073644                            ; End of function sub_72C4E
00073644                            
00073644                            ; ===========================================================================
00073644 0808 0808 0A0E 0E0F        byte_72CAC:	dc.b 8,	8, 8, 8, $A, $E, $E, $F
0007364C                            
0007364C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007364C                            
0007364C                            
0007364C                            sub_72CB4:				; XREF: sub_72504; sub_7267C; loc_72BA4
0007364C 0815 0002                  		btst	#2,(a5)
00073650 6600                       		bne.s	locret_72D16
00073652 7000                       		moveq	#0,d0
00073654 102D 000B                  		move.b	$B(a5),d0
00073658 226E 0018                  		movea.l	$18(a6),a1
0007365C 4A2E 000E                  		tst.b	$E(a6)
00073660 6700                       		beq.s	loc_72CD8
00073662 226E 0020                  		movea.l	$20(a6),a1
00073666 4A2E 000E                  		tst.b	$E(a6)
0007366A 6B00                       		bmi.s	loc_72CD8
0007366C 226E 0020                  		movea.l	$20(a6),a1
00073670                            
00073670                            loc_72CD8:
00073670 5340                       		subq.w	#1,d0
00073672 6B00                       		bmi.s	loc_72CE6
00073674 323C 0019                  		move.w	#$19,d1
00073678                            
00073678                            loc_72CE0:
00073678 D2C1                       		adda.w	d1,a1
0007367A 51C8 FFFC                  		dbf	d0,loc_72CE0
0007367E                            
0007367E                            loc_72CE6:
0007367E D2FC 0015                  		adda.w	#$15,a1
00073682 45FA 0000                  		lea	byte_72D2C(pc),a2
00073686 102D 001F                  		move.b	$1F(a5),d0
0007368A 0240 0007                  		andi.w	#7,d0
0007368E 183B 00B4                  		move.b	byte_72CAC(pc,d0.w),d4
00073692 162D 0009                  		move.b	9(a5),d3
00073696 6B00                       		bmi.s	locret_72D16
00073698 7A03                       		moveq	#3,d5
0007369A                            
0007369A                            loc_72D02:
0007369A 101A                       		move.b	(a2)+,d0
0007369C 1219                       		move.b	(a1)+,d1
0007369E E20C                       		lsr.b	#1,d4
000736A0 6400                       		bcc.s	loc_72D12
000736A2 D203                       		add.b	d3,d1
000736A4 6500                       		bcs.s	loc_72D12
000736A6 4EBA FA12                  		jsr	sub_72722(pc)
000736AA                            
000736AA                            loc_72D12:
000736AA 51CD FFEE                  		dbf	d5,loc_72D02
000736AE                            
000736AE                            locret_72D16:
000736AE 4E75                       		rts	
000736B0                            ; End of function sub_72CB4
000736B0                            
000736B0                            ; ===========================================================================
000736B0 3038 343C 5058 545C 6068   byte_72D18:	dc.b $30, $38, $34, $3C, $50, $58, $54,	$5C, $60, $68
000736BA 646C 7078 747C 8088 848C   		dc.b $64, $6C, $70, $78, $74, $7C, $80,	$88, $84, $8C
000736C4 4048 444C                  byte_72D2C:	dc.b $40, $48, $44, $4C
000736C8                            ; ===========================================================================
000736C8                            
000736C8                            loc_72D30:				; XREF: loc_72A64
000736C8 08D5 0003                  		bset	#3,(a5)
000736CC 2B4C 0014                  		move.l	a4,$14(a5)
000736D0 1B5C 0018                  		move.b	(a4)+,$18(a5)
000736D4 1B5C 0019                  		move.b	(a4)+,$19(a5)
000736D8 1B5C 001A                  		move.b	(a4)+,$1A(a5)
000736DC 101C                       		move.b	(a4)+,d0
000736DE E208                       		lsr.b	#1,d0
000736E0 1B40 001B                  		move.b	d0,$1B(a5)
000736E4 426D 001C                  		clr.w	$1C(a5)
000736E8 4E75                       		rts	
000736EA                            ; ===========================================================================
000736EA                            
000736EA                            loc_72D52:				; XREF: loc_72A64
000736EA 08D5 0003                  		bset	#3,(a5)
000736EE 4E75                       		rts	
000736F0                            ; ===========================================================================
000736F0                            
000736F0                            loc_72D58:				; XREF: loc_72A64
000736F0 0895 0007                  		bclr	#7,(a5)
000736F4 0895 0004                  		bclr	#4,(a5)
000736F8 4A2D 0001                  		tst.b	1(a5)
000736FC 6B00                       		bmi.s	loc_72D74
000736FE 4A2E 0008                  		tst.b	8(a6)
00073702 6B00 0000                  		bmi.w	loc_72E02
00073706 4EBA F98E                  		jsr	sub_726FE(pc)
0007370A 6000                       		bra.s	loc_72D78
0007370C                            ; ===========================================================================
0007370C                            
0007370C                            loc_72D74:
0007370C 4EBA FC2A                  		jsr	sub_729A0(pc)
00073710                            
00073710                            loc_72D78:
00073710 4A2E 000E                  		tst.b	$E(a6)
00073714 6A00 0000                  		bpl.w	loc_72E02
00073718 4216                       		clr.b	0(a6)
0007371A 7000                       		moveq	#0,d0
0007371C 102D 0001                  		move.b	1(a5),d0
00073720 6B00                       		bmi.s	loc_72DCC
00073722 41FA F546                  		lea	dword_722CC(pc),a0
00073726 264D                       		movea.l	a5,a3
00073728 0C00 0004                  		cmpi.b	#4,d0
0007372C 6600                       		bne.s	loc_72DA8
0007372E 4A2E 0340                  		tst.b	$340(a6)
00073732 6A00                       		bpl.s	loc_72DA8
00073734 4BEE 0340                  		lea	$340(a6),a5
00073738 226E 0020                  		movea.l	$20(a6),a1
0007373C 6000                       		bra.s	loc_72DB8
0007373E                            ; ===========================================================================
0007373E                            
0007373E                            loc_72DA8:
0007373E 5500                       		subq.b	#2,d0
00073740 E508                       		lsl.b	#2,d0
00073742 2A70 0000                  		movea.l	(a0,d0.w),a5
00073746 4A15                       		tst.b	(a5)
00073748 6A00                       		bpl.s	loc_72DC8
0007374A 226E 0018                  		movea.l	$18(a6),a1
0007374E                            
0007374E                            loc_72DB8:
0007374E 0895 0002                  		bclr	#2,(a5)
00073752 08D5 0001                  		bset	#1,(a5)
00073756 102D 000B                  		move.b	$B(a5),d0
0007375A 4EBA FE8A                  		jsr	sub_72C4E(pc)
0007375E                            
0007375E                            loc_72DC8:
0007375E 2A4B                       		movea.l	a3,a5
00073760 6000                       		bra.s	loc_72E02
00073762                            ; ===========================================================================
00073762                            
00073762                            loc_72DCC:
00073762 41EE 0370                  		lea	$370(a6),a0
00073766 4A10                       		tst.b	(a0)
00073768 6A00                       		bpl.s	loc_72DE0
0007376A 0C00 00E0                  		cmpi.b	#$E0,d0
0007376E 6700                       		beq.s	loc_72DEA
00073770 0C00 00C0                  		cmpi.b	#$C0,d0
00073774 6700                       		beq.s	loc_72DEA
00073776                            
00073776                            loc_72DE0:
00073776 41FA F4F2                  		lea	dword_722CC(pc),a0
0007377A E608                       		lsr.b	#3,d0
0007377C 2070 0000                  		movea.l	(a0,d0.w),a0
00073780                            
00073780                            loc_72DEA:
00073780 0890 0002                  		bclr	#2,(a0)
00073784 08D0 0001                  		bset	#1,(a0)
00073788 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
0007378E 6600                       		bne.s	loc_72E02
00073790 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
00073798                            
00073798                            loc_72E02:
00073798 504F                       		addq.w	#8,sp
0007379A 4E75                       		rts	
0007379C                            ; ===========================================================================
0007379C                            
0007379C                            loc_72E06:				; XREF: loc_72A64
0007379C 1B7C 00E0 0001             		move.b	#$E0,1(a5)
000737A2 1B5C 001F                  		move.b	(a4)+,$1F(a5)
000737A6 0815 0002                  		btst	#2,(a5)
000737AA 6600                       		bne.s	locret_72E1E
000737AC 13EC FFFF 00C0 0011        		move.b	-1(a4),($C00011).l
000737B4                            
000737B4                            locret_72E1E:
000737B4 4E75                       		rts	
000737B6                            ; ===========================================================================
000737B6                            
000737B6                            loc_72E20:				; XREF: loc_72A64
000737B6 0895 0003                  		bclr	#3,(a5)
000737BA 4E75                       		rts	
000737BC                            ; ===========================================================================
000737BC                            
000737BC                            loc_72E26:				; XREF: loc_72A64
000737BC 1B5C 000B                  		move.b	(a4)+,$B(a5)
000737C0 4E75                       		rts	
000737C2                            ; ===========================================================================
000737C2                            
000737C2                            loc_72E2C:				; XREF: loc_72A64
000737C2 101C                       		move.b	(a4)+,d0
000737C4 E148                       		lsl.w	#8,d0
000737C6 101C                       		move.b	(a4)+,d0
000737C8 D8C0                       		adda.w	d0,a4
000737CA 534C                       		subq.w	#1,a4
000737CC 4E75                       		rts	
000737CE                            ; ===========================================================================
000737CE                            
000737CE                            loc_72E38:				; XREF: loc_72A64
000737CE 7000                       		moveq	#0,d0
000737D0 101C                       		move.b	(a4)+,d0
000737D2 121C                       		move.b	(a4)+,d1
000737D4 4A35 0024                  		tst.b	$24(a5,d0.w)
000737D8 6600                       		bne.s	loc_72E48
000737DA 1B81 0024                  		move.b	d1,$24(a5,d0.w)
000737DE                            
000737DE                            loc_72E48:
000737DE 5335 0024                  		subq.b	#1,$24(a5,d0.w)
000737E2 66DE                       		bne.s	loc_72E2C
000737E4 544C                       		addq.w	#2,a4
000737E6 4E75                       		rts	
000737E8                            ; ===========================================================================
000737E8                            
000737E8                            loc_72E52:				; XREF: loc_72A64
000737E8 7000                       		moveq	#0,d0
000737EA 102D 000D                  		move.b	$D(a5),d0
000737EE 5900                       		subq.b	#4,d0
000737F0 2B8C 0000                  		move.l	a4,(a5,d0.w)
000737F4 1B40 000D                  		move.b	d0,$D(a5)
000737F8 60C8                       		bra.s	loc_72E2C
000737FA                            ; ===========================================================================
000737FA                            
000737FA                            loc_72E64:				; XREF: loc_72A64
000737FA 103C 0088                  		move.b	#$88,d0
000737FE 123C 000F                  		move.b	#$F,d1
00073802 4EBA F8C2                  		jsr	sub_7272E(pc)
00073806 103C 008C                  		move.b	#$8C,d0
0007380A 123C 000F                  		move.b	#$F,d1
0007380E 6000 F8B6                  		bra.w	sub_7272E
00073812                            ; ===========================================================================
00073812                            Kos_Z80:	incbin	sound\z80_1.bin
000738C2 0000                       		dc.w ((SegaPCM&$FF)<<8)+((SegaPCM&$FF00)>>8)
000738C4 21                         		dc.b $21
000738C5 0000                       		dc.w (((EndOfRom-SegaPCM)&$FF)<<8)+(((EndOfRom-SegaPCM)&$FF00)>>8)
000738C7                            		incbin	sound\z80_2.bin
00074F72                            		even
00074F72                            Music81:	incbin	sound\jahl.bin ; 	Green Hill Act 1
0007B772                            		even
0007B772                            Music82:	incbin	sound\music82.bin ; Labyrinth Act 1
00085010                            		even
00085010                            Music83:	incbin	sound\music83.bin ; Marble Act 1
0008559E                            		even
0008559E                            Music84:	include	sound\music84.asm ; Star Light Act 1
0008559E                            music84_Header:
0008559E =00000001                  smpsHeaderStartSong = 1
0008559E 0000                       	smpsHeaderVoice     music84_Voices
000855A0 0603                       	smpsHeaderChan      $06, $03
000855A2 0205                       	smpsHeaderTempo     $02, $05
000855A4                            
000855A8 0000 0000                  	smpsHeaderFM        music84_FM1,	$00, $00
000855AC 0000 0000                  	smpsHeaderFM        music84_FM2,	$00, $00
000855B0 0000 0000                  	smpsHeaderFM        music84_FM3,	$00, $00
000855B4 0000 0000                  	smpsHeaderFM        music84_FM4,	$00, $00
000855B8 0000 0000                  	smpsHeaderFM        music84_FM5,	$00, $00
000855BC 0000 0000 0000             	smpsHeaderPSG       music84_PSG1,	$00, $00, $00, $00
000855C2 0000 0000 0000             	smpsHeaderPSG       music84_PSG2,	$00, $00, $00, $00
000855C8 0000 0000 0000             	smpsHeaderPSG       music84_PSG3,	$00, $00, $00, $00
000855CE                            
000855CE                            ; FM1 Data
000855CE                            music84_FM1:
000855CE E0C0                       	smpsPan             panCenter, $00
000855D2 E107                       	smpsAlterNote       $07
000855D4 9B03 8007                  	dc.b	nD2, $03, nRst, $07
000855D8 E106                       	smpsAlterNote       $06
000855DA 9903 800B                  	dc.b	nC2, $03, nRst, $0B
000855DE E10B                       	smpsAlterNote       $0B
000855E0 9606 800B A201             	dc.b	nA1, $06, nRst, $0B, nA2, $01
000855E6 E10C                       	smpsAlterNote       $0C
000855E8 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
000855EB E10B                       	smpsAlterNote       $0B
000855ED E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000855F0 E109                       	smpsAlterNote       $09
000855F2 E7A0 029E 01               	dc.b	smpsNoAttack, nG2, $02, nF2, $01
000855F7 E108                       	smpsAlterNote       $08
000855F9 8001                       	dc.b	nRst, $01
000855FB E10B                       	smpsAlterNote       $0B
000855FD 9603 A203 8001             	dc.b	nA1, $03, nA2, $03, nRst, $01
00085603 E107                       	smpsAlterNote       $07
00085605 9B03                       	dc.b	nD2, $03
00085607                            
00085607                            music84_Jump04:
00085607 E107                       	smpsAlterNote       $07
00085609 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008560D E10B                       	smpsAlterNote       $0B
0008560F A202 8001                  	dc.b	nA2, $02, nRst, $01
00085613 E107                       	smpsAlterNote       $07
00085615 9B03                       	dc.b	nD2, $03
00085617 E11A                       	smpsAlterNote       $1A
00085619 A301                       	dc.b	nBb2, $01
0008561B E1F2                       	smpsAlterNote       $F2
0008561D E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00085620 E1FF                       	smpsAlterNote       $FF
00085622 E701                       	dc.b	smpsNoAttack, $01
00085624 E111                       	smpsAlterNote       $11
00085626 E701                       	dc.b	smpsNoAttack, $01
00085628 E106                       	smpsAlterNote       $06
0008562A E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
0008562D E107                       	smpsAlterNote       $07
0008562F 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00085633 E108                       	smpsAlterNote       $08
00085635 9C06 8001 9C02 8001        	dc.b	nEb2, $06, nRst, $01, nEb2, $02, nRst, $01
0008563D E109                       	smpsAlterNote       $09
0008563F A003                       	dc.b	nG2, $03
00085641 E10C                       	smpsAlterNote       $0C
00085643 A303 8001                  	dc.b	nBb2, $03, nRst, $01
00085647 E1FD                       	smpsAlterNote       $FD
00085649 A401                       	dc.b	nB2, $01
0008564B E109                       	smpsAlterNote       $09
0008564D E701                       	dc.b	smpsNoAttack, $01
0008564F E106                       	smpsAlterNote       $06
00085651 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00085654 E109                       	smpsAlterNote       $09
00085656 A007                       	dc.b	nG2, $07
00085658 E108                       	smpsAlterNote       $08
0008565A 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
0008565E E107                       	smpsAlterNote       $07
00085660 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
00085666 E10B                       	smpsAlterNote       $0B
00085668 A203 8001                  	dc.b	nA2, $03, nRst, $01
0008566C E107                       	smpsAlterNote       $07
0008566E 9B03                       	dc.b	nD2, $03
00085670 E11A                       	smpsAlterNote       $1A
00085672 A301                       	dc.b	nBb2, $01
00085674 E1F9                       	smpsAlterNote       $F9
00085676 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00085679 E107                       	smpsAlterNote       $07
0008567B E701                       	dc.b	smpsNoAttack, $01
0008567D E111                       	smpsAlterNote       $11
0008567F E701                       	dc.b	smpsNoAttack, $01
00085681 E106                       	smpsAlterNote       $06
00085683 E7A5 0280 01               	dc.b	smpsNoAttack, nC3, $02, nRst, $01
00085688 E107                       	smpsAlterNote       $07
0008568A 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
00085692 E1EC                       	smpsAlterNote       $EC
00085694 A101                       	dc.b	nAb2, $01
00085696 E108                       	smpsAlterNote       $08
00085698 E701                       	dc.b	smpsNoAttack, $01
0008569A E116                       	smpsAlterNote       $16
0008569C E701                       	dc.b	smpsNoAttack, $01
0008569E E1F5                       	smpsAlterNote       $F5
000856A0 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000856A3 E10B                       	smpsAlterNote       $0B
000856A5 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000856A9 E107                       	smpsAlterNote       $07
000856AB 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
000856B1 E109                       	smpsAlterNote       $09
000856B3 9E03 8001                  	dc.b	nF2, $03, nRst, $01
000856B7 E10B                       	smpsAlterNote       $0B
000856B9 9603                       	dc.b	nA1, $03
000856BB E107                       	smpsAlterNote       $07
000856BD 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
000856C3 E10B                       	smpsAlterNote       $0B
000856C5 A203 8001                  	dc.b	nA2, $03, nRst, $01
000856C9 E107                       	smpsAlterNote       $07
000856CB 9B02 8001                  	dc.b	nD2, $02, nRst, $01
000856CF E11A                       	smpsAlterNote       $1A
000856D1 A301                       	dc.b	nBb2, $01
000856D3 E1F9                       	smpsAlterNote       $F9
000856D5 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000856D8 E107                       	smpsAlterNote       $07
000856DA E701                       	dc.b	smpsNoAttack, $01
000856DC E1FB                       	smpsAlterNote       $FB
000856DE E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000856E1 E106                       	smpsAlterNote       $06
000856E3 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000856E7 E107                       	smpsAlterNote       $07
000856E9 9B03                       	dc.b	nD2, $03
000856EB E108                       	smpsAlterNote       $08
000856ED 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
000856F3 E109                       	smpsAlterNote       $09
000856F5 A002 8001                  	dc.b	nG2, $02, nRst, $01
000856F9 E10C                       	smpsAlterNote       $0C
000856FB A303                       	dc.b	nBb2, $03
000856FD E1F0                       	smpsAlterNote       $F0
000856FF A401                       	dc.b	nB2, $01
00085701 E1FD                       	smpsAlterNote       $FD
00085703 E701 E7A5 01               	dc.b	smpsNoAttack, $01, smpsNoAttack, nC3, $01
00085708 E106                       	smpsAlterNote       $06
0008570A 8001                       	dc.b	nRst, $01
0008570C E109                       	smpsAlterNote       $09
0008570E A006 8001                  	dc.b	nG2, $06, nRst, $01
00085712 E108                       	smpsAlterNote       $08
00085714 9C02 8001                  	dc.b	nEb2, $02, nRst, $01
00085718 E107                       	smpsAlterNote       $07
0008571A 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00085720 E10B                       	smpsAlterNote       $0B
00085722 A203                       	dc.b	nA2, $03
00085724 E107                       	smpsAlterNote       $07
00085726 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008572A E1F2                       	smpsAlterNote       $F2
0008572C A401                       	dc.b	nB2, $01
0008572E E1FF                       	smpsAlterNote       $FF
00085730 E701                       	dc.b	smpsNoAttack, $01
00085732 E107                       	smpsAlterNote       $07
00085734 E701                       	dc.b	smpsNoAttack, $01
00085736 E1FB                       	smpsAlterNote       $FB
00085738 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008573B E106                       	smpsAlterNote       $06
0008573D E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00085741 E107                       	smpsAlterNote       $07
00085743 9B02 8001 A706 8001 9B03   	dc.b	nD2, $02, nRst, $01, nD3, $06, nRst, $01, nD2, $03
0008574D E117                       	smpsAlterNote       $17
0008574F A001                       	dc.b	nG2, $01
00085751 E1FA                       	smpsAlterNote       $FA
00085753 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
00085756 E108                       	smpsAlterNote       $08
00085758 E701                       	dc.b	smpsNoAttack, $01
0008575A E1E7                       	smpsAlterNote       $E7
0008575C E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
0008575F E103                       	smpsAlterNote       $03
00085761 E701                       	dc.b	smpsNoAttack, $01
00085763 E10B                       	smpsAlterNote       $0B
00085765 E702                       	dc.b	smpsNoAttack, $02
00085767 E107                       	smpsAlterNote       $07
00085769 9B03 8001 A702 8001        	dc.b	nD2, $03, nRst, $01, nD3, $02, nRst, $01
00085771 E106                       	smpsAlterNote       $06
00085773 9903 A503 8001             	dc.b	nC2, $03, nC3, $03, nRst, $01
00085779 E10C                       	smpsAlterNote       $0C
0008577B 9703 9703 8001             	dc.b	nBb1, $03, nBb1, $03, nRst, $01
00085781 E109                       	smpsAlterNote       $09
00085783 9E03                       	dc.b	nF2, $03
00085785 E10C                       	smpsAlterNote       $0C
00085787 9703 8001                  	dc.b	nBb1, $03, nRst, $01
0008578B E1EA                       	smpsAlterNote       $EA
0008578D A201                       	dc.b	nA2, $01
0008578F E106                       	smpsAlterNote       $06
00085791 E701                       	dc.b	smpsNoAttack, $01
00085793 E1E2                       	smpsAlterNote       $E2
00085795 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00085798 E1F0                       	smpsAlterNote       $F0
0008579A E701                       	dc.b	smpsNoAttack, $01
0008579C E10C                       	smpsAlterNote       $0C
0008579E E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
000857AA E116                       	smpsAlterNote       $16
000857AC 9C01                       	dc.b	nEb2, $01
000857AE E105                       	smpsAlterNote       $05
000857B0 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
000857B3 E1F1                       	smpsAlterNote       $F1
000857B5 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
000857B8 E1FF                       	smpsAlterNote       $FF
000857BA E701                       	dc.b	smpsNoAttack, $01
000857BC E109                       	smpsAlterNote       $09
000857BE E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000857C2 E10C                       	smpsAlterNote       $0C
000857C4 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $01
000857D0 9702 8001 9703             	dc.b	nBb1, $02, nRst, $01, nBb1, $03
000857D6 E109                       	smpsAlterNote       $09
000857D8 9E03 8001                  	dc.b	nF2, $03, nRst, $01
000857DC E10C                       	smpsAlterNote       $0C
000857DE 9703                       	dc.b	nBb1, $03
000857E0 E11A                       	smpsAlterNote       $1A
000857E2 A101                       	dc.b	nAb2, $01
000857E4 E1FB                       	smpsAlterNote       $FB
000857E6 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000857E9 E10A                       	smpsAlterNote       $0A
000857EB E701                       	dc.b	smpsNoAttack, $01
000857ED E1E8                       	smpsAlterNote       $E8
000857EF E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
000857F2 E106                       	smpsAlterNote       $06
000857F4 E701                       	dc.b	smpsNoAttack, $01
000857F6 E10C                       	smpsAlterNote       $0C
000857F8 E702 9703 8001 A306 9703+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nBb1, $03, nRst, $01
00085804 E1F9                       	smpsAlterNote       $F9
00085806 9D01                       	dc.b	nE2, $01
00085808 E108                       	smpsAlterNote       $08
0008580A E701                       	dc.b	smpsNoAttack, $01
0008580C E1F6                       	smpsAlterNote       $F6
0008580E E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00085811 E109                       	smpsAlterNote       $09
00085813 E703 8001                  	dc.b	smpsNoAttack, $03, nRst, $01
00085817 E10C                       	smpsAlterNote       $0C
00085819 9703 9703 8001 A302 8001+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $02, nRst, $01, nBb1, $03
00085825 E108                       	smpsAlterNote       $08
00085827 9D03 8001 9D03             	dc.b	nE2, $03, nRst, $01, nE2, $03
0008582D E106                       	smpsAlterNote       $06
0008582F A403 8001                  	dc.b	nB2, $03, nRst, $01
00085833 E108                       	smpsAlterNote       $08
00085835 9D03                       	dc.b	nE2, $03
00085837 E1EB                       	smpsAlterNote       $EB
00085839 A801                       	dc.b	nEb3, $01
0008583B E109                       	smpsAlterNote       $09
0008583D E701                       	dc.b	smpsNoAttack, $01
0008583F E1FA                       	smpsAlterNote       $FA
00085841 E7A9 01                    	dc.b	smpsNoAttack, nE3, $01
00085844 E108                       	smpsAlterNote       $08
00085846 E703 8001 9D03 A907 9D03+  	dc.b	smpsNoAttack, $03, nRst, $01, nE2, $03, nE3, $07, nE2, $03, nRst, $01
00085852 E1E9                       	smpsAlterNote       $E9
00085854 A301                       	dc.b	nBb2, $01
00085856 E107                       	smpsAlterNote       $07
00085858 E701                       	dc.b	smpsNoAttack, $01
0008585A E1F0                       	smpsAlterNote       $F0
0008585C E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008585F E1F7                       	smpsAlterNote       $F7
00085861 E701                       	dc.b	smpsNoAttack, $01
00085863 E107                       	smpsAlterNote       $07
00085865 E701                       	dc.b	smpsNoAttack, $01
00085867 E106                       	smpsAlterNote       $06
00085869 E701                       	dc.b	smpsNoAttack, $01
0008586B E108                       	smpsAlterNote       $08
0008586D 9D03 8001 9D03             	dc.b	nE2, $03, nRst, $01, nE2, $03
00085873 E106                       	smpsAlterNote       $06
00085875 A403 8001                  	dc.b	nB2, $03, nRst, $01
00085879 E108                       	smpsAlterNote       $08
0008587B 9D03                       	dc.b	nE2, $03
0008587D E10B                       	smpsAlterNote       $0B
0008587F 9603 8001 9602 8001        	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01
00085887 E108                       	smpsAlterNote       $08
00085889 9D03                       	dc.b	nE2, $03
0008588B E10B                       	smpsAlterNote       $0B
0008588D 9603 8001                  	dc.b	nA1, $03, nRst, $01
00085891 E113                       	smpsAlterNote       $13
00085893 A001                       	dc.b	nG2, $01
00085895 E118                       	smpsAlterNote       $18
00085897 E701                       	dc.b	smpsNoAttack, $01
00085899 E1E9                       	smpsAlterNote       $E9
0008589B E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
0008589E E1F3                       	smpsAlterNote       $F3
000858A0 E701                       	dc.b	smpsNoAttack, $01
000858A2 E1FD                       	smpsAlterNote       $FD
000858A4 E701                       	dc.b	smpsNoAttack, $01
000858A6 E102                       	smpsAlterNote       $02
000858A8 E701                       	dc.b	smpsNoAttack, $01
000858AA E107                       	smpsAlterNote       $07
000858AC 8001                       	dc.b	nRst, $01
000858AE E10B                       	smpsAlterNote       $0B
000858B0 9603                       	dc.b	nA1, $03
000858B2 E10C                       	smpsAlterNote       $0C
000858B4 9706 8001 9703             	dc.b	nBb1, $06, nRst, $01, nBb1, $03
000858BA E10B                       	smpsAlterNote       $0B
000858BC 9603 8001 A206 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA2, $06, nRst, $01, nA1, $03, nA2, $03
000858C8 8001 9602 8001             	dc.b	nRst, $01, nA1, $02, nRst, $01
000858CE E107                       	smpsAlterNote       $07
000858D0 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
000858D6 E10B                       	smpsAlterNote       $0B
000858D8 A203                       	dc.b	nA2, $03
000858DA E107                       	smpsAlterNote       $07
000858DC 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000858E0 E1F2                       	smpsAlterNote       $F2
000858E2 A401                       	dc.b	nB2, $01
000858E4 E1FF                       	smpsAlterNote       $FF
000858E6 E701                       	dc.b	smpsNoAttack, $01
000858E8 E107                       	smpsAlterNote       $07
000858EA E701                       	dc.b	smpsNoAttack, $01
000858EC E1FB                       	smpsAlterNote       $FB
000858EE E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000858F1 E106                       	smpsAlterNote       $06
000858F3 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000858F7 E107                       	smpsAlterNote       $07
000858F9 9B02 8001                  	dc.b	nD2, $02, nRst, $01
000858FD E108                       	smpsAlterNote       $08
000858FF 9C06 8001 9C03             	dc.b	nEb2, $06, nRst, $01, nEb2, $03
00085905 E109                       	smpsAlterNote       $09
00085907 A003 8001                  	dc.b	nG2, $03, nRst, $01
0008590B E10C                       	smpsAlterNote       $0C
0008590D A302 8001                  	dc.b	nBb2, $02, nRst, $01
00085911 E1F0                       	smpsAlterNote       $F0
00085913 A401                       	dc.b	nB2, $01
00085915 E109                       	smpsAlterNote       $09
00085917 E701                       	dc.b	smpsNoAttack, $01
00085919 E106                       	smpsAlterNote       $06
0008591B E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008591E E109                       	smpsAlterNote       $09
00085920 A007                       	dc.b	nG2, $07
00085922 E108                       	smpsAlterNote       $08
00085924 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
00085928 E107                       	smpsAlterNote       $07
0008592A 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00085930 E10B                       	smpsAlterNote       $0B
00085932 A202 8001                  	dc.b	nA2, $02, nRst, $01
00085936 E107                       	smpsAlterNote       $07
00085938 9B03                       	dc.b	nD2, $03
0008593A E11A                       	smpsAlterNote       $1A
0008593C A301                       	dc.b	nBb2, $01
0008593E E1F2                       	smpsAlterNote       $F2
00085940 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00085943 E1FF                       	smpsAlterNote       $FF
00085945 E701                       	dc.b	smpsNoAttack, $01
00085947 E111                       	smpsAlterNote       $11
00085949 E701                       	dc.b	smpsNoAttack, $01
0008594B E106                       	smpsAlterNote       $06
0008594D E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00085950 E107                       	smpsAlterNote       $07
00085952 9B03 8001 A706 8001 9B02+  	dc.b	nD2, $03, nRst, $01, nD3, $06, nRst, $01, nD2, $02, nRst, $01
0008595E E117                       	smpsAlterNote       $17
00085960 A001                       	dc.b	nG2, $01
00085962 E1FA                       	smpsAlterNote       $FA
00085964 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
00085967 E116                       	smpsAlterNote       $16
00085969 E701                       	dc.b	smpsNoAttack, $01
0008596B E1F5                       	smpsAlterNote       $F5
0008596D E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00085970 E103                       	smpsAlterNote       $03
00085972 E701                       	dc.b	smpsNoAttack, $01
00085974 E10B                       	smpsAlterNote       $0B
00085976 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008597A E107                       	smpsAlterNote       $07
0008597C 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00085982 E109                       	smpsAlterNote       $09
00085984 9E03                       	dc.b	nF2, $03
00085986 E10B                       	smpsAlterNote       $0B
00085988 9603 8001                  	dc.b	nA1, $03, nRst, $01
0008598C E107                       	smpsAlterNote       $07
0008598E 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
00085994 E10B                       	smpsAlterNote       $0B
00085996 A203 8001                  	dc.b	nA2, $03, nRst, $01
0008599A E107                       	smpsAlterNote       $07
0008599C 9B03                       	dc.b	nD2, $03
0008599E E11A                       	smpsAlterNote       $1A
000859A0 A301                       	dc.b	nBb2, $01
000859A2 E1F9                       	smpsAlterNote       $F9
000859A4 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000859A7 E107                       	smpsAlterNote       $07
000859A9 E701                       	dc.b	smpsNoAttack, $01
000859AB E111                       	smpsAlterNote       $11
000859AD E701                       	dc.b	smpsNoAttack, $01
000859AF E106                       	smpsAlterNote       $06
000859B1 E7A5 0280 01               	dc.b	smpsNoAttack, nC3, $02, nRst, $01
000859B6 E107                       	smpsAlterNote       $07
000859B8 9B03                       	dc.b	nD2, $03
000859BA E108                       	smpsAlterNote       $08
000859BC 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
000859C2 E109                       	smpsAlterNote       $09
000859C4 A003                       	dc.b	nG2, $03
000859C6 E10C                       	smpsAlterNote       $0C
000859C8 A303 8001                  	dc.b	nBb2, $03, nRst, $01
000859CC E1FD                       	smpsAlterNote       $FD
000859CE A401 E7A5 01               	dc.b	nB2, $01, smpsNoAttack, nC3, $01
000859D3 E106                       	smpsAlterNote       $06
000859D5 8001                       	dc.b	nRst, $01
000859D7 E109                       	smpsAlterNote       $09
000859D9 A006 8001                  	dc.b	nG2, $06, nRst, $01
000859DD E108                       	smpsAlterNote       $08
000859DF 9C03                       	dc.b	nEb2, $03
000859E1 E107                       	smpsAlterNote       $07
000859E3 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
000859E9 E10B                       	smpsAlterNote       $0B
000859EB A203 8001                  	dc.b	nA2, $03, nRst, $01
000859EF E107                       	smpsAlterNote       $07
000859F1 9B02 8001                  	dc.b	nD2, $02, nRst, $01
000859F5 E11A                       	smpsAlterNote       $1A
000859F7 A301                       	dc.b	nBb2, $01
000859F9 E1F9                       	smpsAlterNote       $F9
000859FB E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000859FE E107                       	smpsAlterNote       $07
00085A00 E701                       	dc.b	smpsNoAttack, $01
00085A02 E1FB                       	smpsAlterNote       $FB
00085A04 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00085A07 E106                       	smpsAlterNote       $06
00085A09 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00085A0D E107                       	smpsAlterNote       $07
00085A0F 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
00085A17 E1EC                       	smpsAlterNote       $EC
00085A19 A101                       	dc.b	nAb2, $01
00085A1B E108                       	smpsAlterNote       $08
00085A1D E701                       	dc.b	smpsNoAttack, $01
00085A1F E1E7                       	smpsAlterNote       $E7
00085A21 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00085A24 E1F5                       	smpsAlterNote       $F5
00085A26 E701                       	dc.b	smpsNoAttack, $01
00085A28 E10B                       	smpsAlterNote       $0B
00085A2A E702                       	dc.b	smpsNoAttack, $02
00085A2C E107                       	smpsAlterNote       $07
00085A2E 9B03 8001 A703             	dc.b	nD2, $03, nRst, $01, nD3, $03
00085A34 E106                       	smpsAlterNote       $06
00085A36 9903 8001 A503             	dc.b	nC2, $03, nRst, $01, nC3, $03
00085A3C E10C                       	smpsAlterNote       $0C
00085A3E 9703 8001 9702 8001        	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01
00085A46 E109                       	smpsAlterNote       $09
00085A48 9E03                       	dc.b	nF2, $03
00085A4A E10C                       	smpsAlterNote       $0C
00085A4C 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00085A50 E1EA                       	smpsAlterNote       $EA
00085A52 A201                       	dc.b	nA2, $01
00085A54 E106                       	smpsAlterNote       $06
00085A56 E701                       	dc.b	smpsNoAttack, $01
00085A58 E114                       	smpsAlterNote       $14
00085A5A E701                       	dc.b	smpsNoAttack, $01
00085A5C E1F0                       	smpsAlterNote       $F0
00085A5E E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00085A61 E10C                       	smpsAlterNote       $0C
00085A63 E702 8001 9702 8001 A306+  	dc.b	smpsNoAttack, $02, nRst, $01, nBb1, $02, nRst, $01, nBb2, $06, nRst, $01
00085A6F 9703                       	dc.b	nBb1, $03
00085A71 E116                       	smpsAlterNote       $16
00085A73 9C01                       	dc.b	nEb2, $01
00085A75 E105                       	smpsAlterNote       $05
00085A77 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
00085A7A E113                       	smpsAlterNote       $13
00085A7C E701                       	dc.b	smpsNoAttack, $01
00085A7E E1FF                       	smpsAlterNote       $FF
00085A80 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00085A83 E109                       	smpsAlterNote       $09
00085A85 E703                       	dc.b	smpsNoAttack, $03
00085A87 E10C                       	smpsAlterNote       $0C
00085A89 9703 8001 9702 8001 A303+  	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb2, $03, nBb1, $03
00085A95 8001 9703 9703 8001        	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
00085A9D E109                       	smpsAlterNote       $09
00085A9F 9E03                       	dc.b	nF2, $03
00085AA1 E10C                       	smpsAlterNote       $0C
00085AA3 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00085AA7 E1EC                       	smpsAlterNote       $EC
00085AA9 A201                       	dc.b	nA2, $01
00085AAB E10A                       	smpsAlterNote       $0A
00085AAD E701                       	dc.b	smpsNoAttack, $01
00085AAF E1E8                       	smpsAlterNote       $E8
00085AB1 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00085AB4 E1F7                       	smpsAlterNote       $F7
00085AB6 E701                       	dc.b	smpsNoAttack, $01
00085AB8 E10C                       	smpsAlterNote       $0C
00085ABA E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
00085AC6 E1EA                       	smpsAlterNote       $EA
00085AC8 9D01                       	dc.b	nE2, $01
00085ACA E108                       	smpsAlterNote       $08
00085ACC E701                       	dc.b	smpsNoAttack, $01
00085ACE E1F6                       	smpsAlterNote       $F6
00085AD0 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00085AD3 E105                       	smpsAlterNote       $05
00085AD5 E701                       	dc.b	smpsNoAttack, $01
00085AD7 E109                       	smpsAlterNote       $09
00085AD9 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00085ADD E10C                       	smpsAlterNote       $0C
00085ADF 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $01
00085AEB E108                       	smpsAlterNote       $08
00085AED 9D02 8001 9D03             	dc.b	nE2, $02, nRst, $01, nE2, $03
00085AF3 E106                       	smpsAlterNote       $06
00085AF5 A403 8001                  	dc.b	nB2, $03, nRst, $01
00085AF9 E108                       	smpsAlterNote       $08
00085AFB 9D03                       	dc.b	nE2, $03
00085AFD E1EB                       	smpsAlterNote       $EB
00085AFF A801                       	dc.b	nEb3, $01
00085B01 E109                       	smpsAlterNote       $09
00085B03 E701                       	dc.b	smpsNoAttack, $01
00085B05 E1EB                       	smpsAlterNote       $EB
00085B07 E7A9 01                    	dc.b	smpsNoAttack, nE3, $01
00085B0A E108                       	smpsAlterNote       $08
00085B0C E704 9D03 8001 A906 9D03+  	dc.b	smpsNoAttack, $04, nE2, $03, nRst, $01, nE3, $06, nE2, $03, nRst, $01
00085B18 E1E9                       	smpsAlterNote       $E9
00085B1A A301                       	dc.b	nBb2, $01
00085B1C E1F8                       	smpsAlterNote       $F8
00085B1E E701                       	dc.b	smpsNoAttack, $01
00085B20 E116                       	smpsAlterNote       $16
00085B22 E701                       	dc.b	smpsNoAttack, $01
00085B24 E1F7                       	smpsAlterNote       $F7
00085B26 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00085B29 E107                       	smpsAlterNote       $07
00085B2B E701                       	dc.b	smpsNoAttack, $01
00085B2D E1EE                       	smpsAlterNote       $EE
00085B2F E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00085B32 E106                       	smpsAlterNote       $06
00085B34 8001                       	dc.b	nRst, $01
00085B36 E108                       	smpsAlterNote       $08
00085B38 9D03 9D03 8001             	dc.b	nE2, $03, nE2, $03, nRst, $01
00085B3E E106                       	smpsAlterNote       $06
00085B40 A402 8001                  	dc.b	nB2, $02, nRst, $01
00085B44 E108                       	smpsAlterNote       $08
00085B46 9D03                       	dc.b	nE2, $03
00085B48 E10B                       	smpsAlterNote       $0B
00085B4A 9603 8001 9603             	dc.b	nA1, $03, nRst, $01, nA1, $03
00085B50 E108                       	smpsAlterNote       $08
00085B52 9D03 8001                  	dc.b	nE2, $03, nRst, $01
00085B56 E10B                       	smpsAlterNote       $0B
00085B58 9603                       	dc.b	nA1, $03
00085B5A E10E                       	smpsAlterNote       $0E
00085B5C A001                       	dc.b	nG2, $01
00085B5E E118                       	smpsAlterNote       $18
00085B60 E701                       	dc.b	smpsNoAttack, $01
00085B62 E1E9                       	smpsAlterNote       $E9
00085B64 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
00085B67 E1EE                       	smpsAlterNote       $EE
00085B69 E701                       	dc.b	smpsNoAttack, $01
00085B6B E1F8                       	smpsAlterNote       $F8
00085B6D E701                       	dc.b	smpsNoAttack, $01
00085B6F E102                       	smpsAlterNote       $02
00085B71 E701                       	dc.b	smpsNoAttack, $01
00085B73 E107                       	smpsAlterNote       $07
00085B75 8001                       	dc.b	nRst, $01
00085B77 E10B                       	smpsAlterNote       $0B
00085B79 9603                       	dc.b	nA1, $03
00085B7B E10C                       	smpsAlterNote       $0C
00085B7D 9707 9703 8001             	dc.b	nBb1, $07, nBb1, $03, nRst, $01
00085B83 E10B                       	smpsAlterNote       $0B
00085B85 9602 8001 A206 8001 9603+  	dc.b	nA1, $02, nRst, $01, nA2, $06, nRst, $01, nA1, $03, nA2, $03
00085B91 8001 9603                  	dc.b	nRst, $01, nA1, $03
00085B95 E10C                       	smpsAlterNote       $0C
00085B97 9706 800F 9703 9703 8019+  	dc.b	nBb1, $06, nRst, $0F, nBb1, $03, nBb1, $03, nRst, $19, nBb1, $02
00085BA3 8001                       	dc.b	nRst, $01
00085BA5 E10B                       	smpsAlterNote       $0B
00085BA7 9606 800F 9602 8001        	dc.b	nA1, $06, nRst, $0F, nA1, $02, nRst, $01
00085BAF E107                       	smpsAlterNote       $07
00085BB1 9B06 8001                  	dc.b	nD2, $06, nRst, $01
00085BB5 E10B                       	smpsAlterNote       $0B
00085BB7 9603                       	dc.b	nA1, $03
00085BB9 E109                       	smpsAlterNote       $09
00085BBB 9E03 8001                  	dc.b	nF2, $03, nRst, $01
00085BBF E108                       	smpsAlterNote       $08
00085BC1 9D06                       	dc.b	nE2, $06
00085BC3 E107                       	smpsAlterNote       $07
00085BC5 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00085BC9 E106                       	smpsAlterNote       $06
00085BCB 9903                       	dc.b	nC2, $03
00085BCD E10C                       	smpsAlterNote       $0C
00085BCF 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00085BD3 E10B                       	smpsAlterNote       $0B
00085BD5 9603 9603 8001 9602 8001+  	dc.b	nA1, $03, nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03
00085BE1 9603 8001 9603 9603 8001   	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
00085BEB E10C                       	smpsAlterNote       $0C
00085BED 9706 8001 9702 8001 9703+  	dc.b	nBb1, $06, nRst, $01, nBb1, $02, nRst, $01, nBb1, $03, nBb1, $03
00085BF9 8001 9703 9703 8001 9703+  	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03
00085C05 8001                       	dc.b	nRst, $01
00085C07 E10B                       	smpsAlterNote       $0B
00085C09 9602 8001 9603 9603 8001+  	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
00085C15 9603 8001 9602 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03, nA1, $07
00085C21 9603 8001 9603 9603 8001+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $02
00085C2D 8001 9603 9603 8001 9603   	dc.b	nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
00085C37 E10C                       	smpsAlterNote       $0C
00085C39 9707 800E 9703 9703 8019+  	dc.b	nBb1, $07, nRst, $0E, nBb1, $03, nBb1, $03, nRst, $19, nBb1, $03
00085C45 E10B                       	smpsAlterNote       $0B
00085C47 9606 800F 9602 8001        	dc.b	nA1, $06, nRst, $0F, nA1, $02, nRst, $01
00085C4F E107                       	smpsAlterNote       $07
00085C51 9B06 8001                  	dc.b	nD2, $06, nRst, $01
00085C55 E10B                       	smpsAlterNote       $0B
00085C57 9603                       	dc.b	nA1, $03
00085C59 E109                       	smpsAlterNote       $09
00085C5B 9E03 8001                  	dc.b	nF2, $03, nRst, $01
00085C5F E108                       	smpsAlterNote       $08
00085C61 9D06 8001                  	dc.b	nE2, $06, nRst, $01
00085C65 E107                       	smpsAlterNote       $07
00085C67 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00085C6B E106                       	smpsAlterNote       $06
00085C6D 9903                       	dc.b	nC2, $03
00085C6F E10C                       	smpsAlterNote       $0C
00085C71 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00085C75 E10B                       	smpsAlterNote       $0B
00085C77 9603 9603 8001 9603 9603+  	dc.b	nA1, $03, nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
00085C83 9602 8001 9603 9603 8001   	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01
00085C8D E10C                       	smpsAlterNote       $0C
00085C8F 9706 8001 9703 9703 8001+  	dc.b	nBb1, $06, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $02
00085C9B 8001 9703 9703 8001 9703+  	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03
00085CA7 8001                       	dc.b	nRst, $01
00085CA9 E10B                       	smpsAlterNote       $0B
00085CAB 9602 8001 9603 9603 8001+  	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
00085CB7 9603 8001 9603 9603 8001   	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
00085CC1 E10C                       	smpsAlterNote       $0C
00085CC3 9706 9703 8001 9703 9703+  	dc.b	nBb1, $06, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
00085CCF 9703 9703 8001 9702 8001+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb1, $03
00085CDB E10B                       	smpsAlterNote       $0B
00085CDD 9603 8001 9603 9603 8001+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
00085CE9 9603 8001 9602 8001 9603   	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03
00085CF3 E10C                       	smpsAlterNote       $0C
00085CF5 9707 9703 8001 9703 9703+  	dc.b	nBb1, $07, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
00085D01 9702 8001 9703 9703 8001+  	dc.b	nBb1, $02, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03
00085D0D E10B                       	smpsAlterNote       $0B
00085D0F 9603 8001 9602 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03, nA1, $03
00085D1B 8001                       	dc.b	nRst, $01
00085D1D E1EC                       	smpsAlterNote       $EC
00085D1F A101                       	dc.b	nAb2, $01
00085D21 E1FA                       	smpsAlterNote       $FA
00085D23 E701                       	dc.b	smpsNoAttack, $01
00085D25 E116                       	smpsAlterNote       $16
00085D27 E701                       	dc.b	smpsNoAttack, $01
00085D29 E1F5                       	smpsAlterNote       $F5
00085D2B E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00085D2E E10B                       	smpsAlterNote       $0B
00085D30 E702 8001 9603 9606 8001+  	dc.b	smpsNoAttack, $02, nRst, $01, nA1, $03, nA1, $06, nRst, $01, nA1, $03
00085D3C 9603 8001 9603 800B 9602+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nRst, $0B, nA1, $02, nRst, $01
00085D48 E107                       	smpsAlterNote       $07
00085D4A 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00085D50 E10B                       	smpsAlterNote       $0B
00085D52 A203                       	dc.b	nA2, $03
00085D54 E107                       	smpsAlterNote       $07
00085D56 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00085D5A E1F3                       	smpsAlterNote       $F3
00085D5C A401                       	dc.b	nB2, $01
00085D5E E102                       	smpsAlterNote       $02
00085D60 E701                       	dc.b	smpsNoAttack, $01
00085D62 E109                       	smpsAlterNote       $09
00085D64 E701                       	dc.b	smpsNoAttack, $01
00085D66 E102                       	smpsAlterNote       $02
00085D68 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00085D6B E106                       	smpsAlterNote       $06
00085D6D E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00085D71 E107                       	smpsAlterNote       $07
00085D73 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00085D77 E108                       	smpsAlterNote       $08
00085D79 9C06 8001 9C03             	dc.b	nEb2, $06, nRst, $01, nEb2, $03
00085D7F E109                       	smpsAlterNote       $09
00085D81 A003 8001                  	dc.b	nG2, $03, nRst, $01
00085D85 E1F2                       	smpsAlterNote       $F2
00085D87 A401                       	dc.b	nB2, $01
00085D89 E1FF                       	smpsAlterNote       $FF
00085D8B E701                       	dc.b	smpsNoAttack, $01
00085D8D E111                       	smpsAlterNote       $11
00085D8F E701                       	dc.b	smpsNoAttack, $01
00085D91 E1FB                       	smpsAlterNote       $FB
00085D93 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00085D96 E106                       	smpsAlterNote       $06
00085D98 E702                       	dc.b	smpsNoAttack, $02
00085D9A E109                       	smpsAlterNote       $09
00085D9C A007                       	dc.b	nG2, $07
00085D9E E108                       	smpsAlterNote       $08
00085DA0 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
00085DA4 E107                       	smpsAlterNote       $07
00085DA6 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00085DAC E10B                       	smpsAlterNote       $0B
00085DAE A202 8001                  	dc.b	nA2, $02, nRst, $01
00085DB2 E107                       	smpsAlterNote       $07
00085DB4 9B03                       	dc.b	nD2, $03
00085DB6 E11A                       	smpsAlterNote       $1A
00085DB8 A301                       	dc.b	nBb2, $01
00085DBA E1F2                       	smpsAlterNote       $F2
00085DBC E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00085DBF E1FF                       	smpsAlterNote       $FF
00085DC1 E701                       	dc.b	smpsNoAttack, $01
00085DC3 E111                       	smpsAlterNote       $11
00085DC5 E701                       	dc.b	smpsNoAttack, $01
00085DC7 E106                       	smpsAlterNote       $06
00085DC9 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00085DCC E107                       	smpsAlterNote       $07
00085DCE 9B03 8001 A706 8001 9B02+  	dc.b	nD2, $03, nRst, $01, nD3, $06, nRst, $01, nD2, $02, nRst, $01
00085DDA E117                       	smpsAlterNote       $17
00085DDC A001                       	dc.b	nG2, $01
00085DDE E1FA                       	smpsAlterNote       $FA
00085DE0 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
00085DE3 E116                       	smpsAlterNote       $16
00085DE5 E701                       	dc.b	smpsNoAttack, $01
00085DE7 E1F5                       	smpsAlterNote       $F5
00085DE9 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00085DEC E103                       	smpsAlterNote       $03
00085DEE E701                       	dc.b	smpsNoAttack, $01
00085DF0 E10B                       	smpsAlterNote       $0B
00085DF2 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00085DF6 E107                       	smpsAlterNote       $07
00085DF8 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00085DFE E109                       	smpsAlterNote       $09
00085E00 9E03                       	dc.b	nF2, $03
00085E02 E10B                       	smpsAlterNote       $0B
00085E04 9603 8001                  	dc.b	nA1, $03, nRst, $01
00085E08 E107                       	smpsAlterNote       $07
00085E0A 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
00085E10 E10B                       	smpsAlterNote       $0B
00085E12 A203 8001                  	dc.b	nA2, $03, nRst, $01
00085E16 E107                       	smpsAlterNote       $07
00085E18 9B03                       	dc.b	nD2, $03
00085E1A E11A                       	smpsAlterNote       $1A
00085E1C A301                       	dc.b	nBb2, $01
00085E1E E1F9                       	smpsAlterNote       $F9
00085E20 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00085E23 E1FF                       	smpsAlterNote       $FF
00085E25 E701                       	dc.b	smpsNoAttack, $01
00085E27 E111                       	smpsAlterNote       $11
00085E29 E701                       	dc.b	smpsNoAttack, $01
00085E2B E106                       	smpsAlterNote       $06
00085E2D E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00085E30 E107                       	smpsAlterNote       $07
00085E32 9B03                       	dc.b	nD2, $03
00085E34 E108                       	smpsAlterNote       $08
00085E36 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
00085E3C E109                       	smpsAlterNote       $09
00085E3E A003                       	dc.b	nG2, $03
00085E40 E1F0                       	smpsAlterNote       $F0
00085E42 A501                       	dc.b	nC3, $01
00085E44 E106                       	smpsAlterNote       $06
00085E46 E705 8001                  	dc.b	smpsNoAttack, $05, nRst, $01
00085E4A E109                       	smpsAlterNote       $09
00085E4C A006 8001                  	dc.b	nG2, $06, nRst, $01
00085E50 E108                       	smpsAlterNote       $08
00085E52 9C03                       	dc.b	nEb2, $03
00085E54 E107                       	smpsAlterNote       $07
00085E56 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
00085E5C E10B                       	smpsAlterNote       $0B
00085E5E A203 8001                  	dc.b	nA2, $03, nRst, $01
00085E62 E107                       	smpsAlterNote       $07
00085E64 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00085E68 E11A                       	smpsAlterNote       $1A
00085E6A A301                       	dc.b	nBb2, $01
00085E6C E1F9                       	smpsAlterNote       $F9
00085E6E E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00085E71 E107                       	smpsAlterNote       $07
00085E73 E701                       	dc.b	smpsNoAttack, $01
00085E75 E1FB                       	smpsAlterNote       $FB
00085E77 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00085E7A E106                       	smpsAlterNote       $06
00085E7C E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00085E80 E107                       	smpsAlterNote       $07
00085E82 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
00085E8A E1EC                       	smpsAlterNote       $EC
00085E8C A101                       	dc.b	nAb2, $01
00085E8E E108                       	smpsAlterNote       $08
00085E90 E701                       	dc.b	smpsNoAttack, $01
00085E92 E1E7                       	smpsAlterNote       $E7
00085E94 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00085E97 E1F5                       	smpsAlterNote       $F5
00085E99 E701                       	dc.b	smpsNoAttack, $01
00085E9B E10B                       	smpsAlterNote       $0B
00085E9D E702                       	dc.b	smpsNoAttack, $02
00085E9F E107                       	smpsAlterNote       $07
00085EA1 9B03 8001 A703             	dc.b	nD2, $03, nRst, $01, nD3, $03
00085EA7 E106                       	smpsAlterNote       $06
00085EA9 9903 8001 A503             	dc.b	nC2, $03, nRst, $01, nC3, $03
00085EAF E10C                       	smpsAlterNote       $0C
00085EB1 9703 8001 9702 8001        	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01
00085EB9 E109                       	smpsAlterNote       $09
00085EBB 9E03                       	dc.b	nF2, $03
00085EBD E10C                       	smpsAlterNote       $0C
00085EBF 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00085EC3 E1EA                       	smpsAlterNote       $EA
00085EC5 A201                       	dc.b	nA2, $01
00085EC7 E106                       	smpsAlterNote       $06
00085EC9 E701                       	dc.b	smpsNoAttack, $01
00085ECB E114                       	smpsAlterNote       $14
00085ECD E701                       	dc.b	smpsNoAttack, $01
00085ECF E1F0                       	smpsAlterNote       $F0
00085ED1 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00085ED4 E10C                       	smpsAlterNote       $0C
00085ED6 E702 8001 9702 8001 A306+  	dc.b	smpsNoAttack, $02, nRst, $01, nBb1, $02, nRst, $01, nBb2, $06, nRst, $01
00085EE2 9703                       	dc.b	nBb1, $03
00085EE4 E116                       	smpsAlterNote       $16
00085EE6 9C01                       	dc.b	nEb2, $01
00085EE8 E105                       	smpsAlterNote       $05
00085EEA E79D 01                    	dc.b	smpsNoAttack, nE2, $01
00085EED E113                       	smpsAlterNote       $13
00085EEF E701                       	dc.b	smpsNoAttack, $01
00085EF1 E1FF                       	smpsAlterNote       $FF
00085EF3 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00085EF6 E109                       	smpsAlterNote       $09
00085EF8 E703                       	dc.b	smpsNoAttack, $03
00085EFA E10C                       	smpsAlterNote       $0C
00085EFC 9703 8001 9702 8001 A303+  	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb2, $03, nBb1, $03
00085F08 8001 9703 9703 8001        	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
00085F10 E109                       	smpsAlterNote       $09
00085F12 9E03                       	dc.b	nF2, $03
00085F14 E10C                       	smpsAlterNote       $0C
00085F16 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00085F1A E1EA                       	smpsAlterNote       $EA
00085F1C A201                       	dc.b	nA2, $01
00085F1E E106                       	smpsAlterNote       $06
00085F20 E701                       	dc.b	smpsNoAttack, $01
00085F22 E1E2                       	smpsAlterNote       $E2
00085F24 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00085F27 E1F0                       	smpsAlterNote       $F0
00085F29 E701                       	dc.b	smpsNoAttack, $01
00085F2B E10C                       	smpsAlterNote       $0C
00085F2D E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
00085F39 E116                       	smpsAlterNote       $16
00085F3B 9C01                       	dc.b	nEb2, $01
00085F3D E105                       	smpsAlterNote       $05
00085F3F E79D 01                    	dc.b	smpsNoAttack, nE2, $01
00085F42 E1F1                       	smpsAlterNote       $F1
00085F44 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00085F47 E1FF                       	smpsAlterNote       $FF
00085F49 E701                       	dc.b	smpsNoAttack, $01
00085F4B E109                       	smpsAlterNote       $09
00085F4D E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00085F51 E10C                       	smpsAlterNote       $0C
00085F53 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $04
00085F5F E106                       	smpsAlterNote       $06
00085F61 9903                       	dc.b	nC2, $03
00085F63 E107                       	smpsAlterNote       $07
00085F65 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00085F69 E109                       	smpsAlterNote       $09
00085F6B 8003 940D 8004             	dc.b	nRst, $03, nG1, $0D, nRst, $04
00085F71 E107                       	smpsAlterNote       $07
00085F73 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00085F77 E108                       	smpsAlterNote       $08
00085F79 9D03                       	dc.b	nE2, $03
00085F7B E10B                       	smpsAlterNote       $0B
00085F7D 8004 960D 8004             	dc.b	nRst, $04, nA1, $0D, nRst, $04
00085F83 E109                       	smpsAlterNote       $09
00085F85 9E03 A003 8001             	dc.b	nF2, $03, nG2, $03, nRst, $01
00085F8B E10C                       	smpsAlterNote       $0C
00085F8D 8003 970D 8001             	dc.b	nRst, $03, nBb1, $0D, nRst, $01
00085F93 E106                       	smpsAlterNote       $06
00085F95 9903                       	dc.b	nC2, $03
00085F97 E11A                       	smpsAlterNote       $1A
00085F99 A301                       	dc.b	nBb2, $01
00085F9B E1F9                       	smpsAlterNote       $F9
00085F9D E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00085FA0 E1FF                       	smpsAlterNote       $FF
00085FA2 E701                       	dc.b	smpsNoAttack, $01
00085FA4 E111                       	smpsAlterNote       $11
00085FA6 E701                       	dc.b	smpsNoAttack, $01
00085FA8 E106                       	smpsAlterNote       $06
00085FAA E7A5 0399 0380 04          	dc.b	smpsNoAttack, nC3, $03, nC2, $03, nRst, $04
00085FB1 E109                       	smpsAlterNote       $09
00085FB3 A003                       	dc.b	nG2, $03
00085FB5 E106                       	smpsAlterNote       $06
00085FB7 9907                       	dc.b	nC2, $07
00085FB9 E107                       	smpsAlterNote       $07
00085FBB 9B03 8001 9B02 8001        	dc.b	nD2, $03, nRst, $01, nD2, $02, nRst, $01
00085FC3 E10B                       	smpsAlterNote       $0B
00085FC5 A203                       	dc.b	nA2, $03
00085FC7 E107                       	smpsAlterNote       $07
00085FC9 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00085FCD E1F2                       	smpsAlterNote       $F2
00085FCF A401                       	dc.b	nB2, $01
00085FD1 E1F9                       	smpsAlterNote       $F9
00085FD3 E701                       	dc.b	smpsNoAttack, $01
00085FD5 E107                       	smpsAlterNote       $07
00085FD7 E701                       	dc.b	smpsNoAttack, $01
00085FD9 E1FB                       	smpsAlterNote       $FB
00085FDB E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00085FDE E106                       	smpsAlterNote       $06
00085FE0 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00085FE4 E107                       	smpsAlterNote       $07
00085FE6 9B03                       	dc.b	nD2, $03
00085FE8 E108                       	smpsAlterNote       $08
00085FEA 9C06 8001 A803             	dc.b	nEb2, $06, nRst, $01, nEb3, $03
00085FF0 E109                       	smpsAlterNote       $09
00085FF2 A003 8001                  	dc.b	nG2, $03, nRst, $01
00085FF6 E1F2                       	smpsAlterNote       $F2
00085FF8 A401                       	dc.b	nB2, $01
00085FFA E1F9                       	smpsAlterNote       $F9
00085FFC E701                       	dc.b	smpsNoAttack, $01
00085FFE E107                       	smpsAlterNote       $07
00086000 E701                       	dc.b	smpsNoAttack, $01
00086002 E1FB                       	smpsAlterNote       $FB
00086004 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00086007 E106                       	smpsAlterNote       $06
00086009 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008600D E108                       	smpsAlterNote       $08
0008600F 9C06 8001                  	dc.b	nEb2, $06, nRst, $01
00086013 E10C                       	smpsAlterNote       $0C
00086015 A302 8001                  	dc.b	nBb2, $02, nRst, $01
00086019 E107                       	smpsAlterNote       $07
0008601B 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00086021 E10B                       	smpsAlterNote       $0B
00086023 A203                       	dc.b	nA2, $03
00086025 E107                       	smpsAlterNote       $07
00086027 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008602B E1F2                       	smpsAlterNote       $F2
0008602D A401                       	dc.b	nB2, $01
0008602F E1FF                       	smpsAlterNote       $FF
00086031 E701                       	dc.b	smpsNoAttack, $01
00086033 E107                       	smpsAlterNote       $07
00086035 E701                       	dc.b	smpsNoAttack, $01
00086037 E1FB                       	smpsAlterNote       $FB
00086039 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008603C E106                       	smpsAlterNote       $06
0008603E E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00086042 E107                       	smpsAlterNote       $07
00086044 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00086048 E108                       	smpsAlterNote       $08
0008604A 9C06 8001 A803             	dc.b	nEb2, $06, nRst, $01, nEb3, $03
00086050 E109                       	smpsAlterNote       $09
00086052 A003 8001                  	dc.b	nG2, $03, nRst, $01
00086056 E1F2                       	smpsAlterNote       $F2
00086058 A401                       	dc.b	nB2, $01
0008605A E1FF                       	smpsAlterNote       $FF
0008605C E701                       	dc.b	smpsNoAttack, $01
0008605E E111                       	smpsAlterNote       $11
00086060 E701                       	dc.b	smpsNoAttack, $01
00086062 E1FB                       	smpsAlterNote       $FB
00086064 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00086067 E106                       	smpsAlterNote       $06
00086069 E702                       	dc.b	smpsNoAttack, $02
0008606B E108                       	smpsAlterNote       $08
0008606D 9C07                       	dc.b	nEb2, $07
0008606F E10C                       	smpsAlterNote       $0C
00086071 A303 8001                  	dc.b	nBb2, $03, nRst, $01
00086075 E107                       	smpsAlterNote       $07
00086077 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0008607D E10B                       	smpsAlterNote       $0B
0008607F A202 8001                  	dc.b	nA2, $02, nRst, $01
00086083 E107                       	smpsAlterNote       $07
00086085 9B03                       	dc.b	nD2, $03
00086087 E11A                       	smpsAlterNote       $1A
00086089 A301                       	dc.b	nBb2, $01
0008608B E1F2                       	smpsAlterNote       $F2
0008608D E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00086090 E1FF                       	smpsAlterNote       $FF
00086092 E701                       	dc.b	smpsNoAttack, $01
00086094 E111                       	smpsAlterNote       $11
00086096 E701                       	dc.b	smpsNoAttack, $01
00086098 E106                       	smpsAlterNote       $06
0008609A E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
0008609D E107                       	smpsAlterNote       $07
0008609F 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000860A3 E108                       	smpsAlterNote       $08
000860A5 9C06 8001 A802 8001        	dc.b	nEb2, $06, nRst, $01, nEb3, $02, nRst, $01
000860AD E109                       	smpsAlterNote       $09
000860AF A003                       	dc.b	nG2, $03
000860B1 E11A                       	smpsAlterNote       $1A
000860B3 A301                       	dc.b	nBb2, $01
000860B5 E1F2                       	smpsAlterNote       $F2
000860B7 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000860BA E1FF                       	smpsAlterNote       $FF
000860BC E701                       	dc.b	smpsNoAttack, $01
000860BE E111                       	smpsAlterNote       $11
000860C0 E701                       	dc.b	smpsNoAttack, $01
000860C2 E106                       	smpsAlterNote       $06
000860C4 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
000860C7 E108                       	smpsAlterNote       $08
000860C9 9C07                       	dc.b	nEb2, $07
000860CB E10C                       	smpsAlterNote       $0C
000860CD A303 8001                  	dc.b	nBb2, $03, nRst, $01
000860D1 E107                       	smpsAlterNote       $07
000860D3 9B02 8001 9B03 9B03 8001+  	dc.b	nD2, $02, nRst, $01, nD2, $03, nD2, $03, nRst, $01, nD2, $03
000860DF 9B03 8001 9B03 9B03 8001   	dc.b	nD2, $03, nRst, $01, nD2, $03, nD2, $03, nRst, $01
000860E9 E108                       	smpsAlterNote       $08
000860EB 9C06                       	dc.b	nEb2, $06
000860ED E10C                       	smpsAlterNote       $0C
000860EF 9703 8001                  	dc.b	nBb1, $03, nRst, $01
000860F3 E108                       	smpsAlterNote       $08
000860F5 9C03                       	dc.b	nEb2, $03
000860F7 E109                       	smpsAlterNote       $09
000860F9 A003 8001                  	dc.b	nG2, $03, nRst, $01
000860FD E10C                       	smpsAlterNote       $0C
000860FF A302 8001 A303 8007        	dc.b	nBb2, $02, nRst, $01, nBb2, $03, nRst, $07
00086107 E107                       	smpsAlterNote       $07
00086109 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008610D F6F4 F8                    	smpsJump            music84_Jump04
00086110                            
00086110                            ; FM2 Data
00086110                            music84_FM2:
00086110 E0C0                       	smpsPan             panCenter, $00
00086114 E10B                       	smpsAlterNote       $0B
00086116 C603 8007                  	dc.b	nA5, $03, nRst, $07
0008611A E109                       	smpsAlterNote       $09
0008611C C403 800B                  	dc.b	nG5, $03, nRst, $0B
00086120 E108                       	smpsAlterNote       $08
00086122 C103 8004                  	dc.b	nE5, $03, nRst, $04
00086128 E080                       	smpsPan             panLeft, $00
0008612A E10C                       	smpsAlterNote       $0C
0008612C E6F9                       	smpsAlterVol        $F9
0008612E C703                       	dc.b	nBb5, $03
00086130 E10B                       	smpsAlterNote       $0B
00086132 C603 8001                  	dc.b	nA5, $03, nRst, $01
00086136 E109                       	smpsAlterNote       $09
00086138 C402 8001 C203             	dc.b	nG5, $02, nRst, $01, nF5, $03
0008613E E108                       	smpsAlterNote       $08
00086140 C103 8001                  	dc.b	nE5, $03, nRst, $01
00086144 E106                       	smpsAlterNote       $06
00086146 BD03                       	dc.b	nC5, $03
00086148 E10B                       	smpsAlterNote       $0B
0008614A BA03 8001                  	dc.b	nA4, $03, nRst, $01
00086150 E0C0                       	smpsPan             panCenter, $00
00086152 E107                       	smpsAlterNote       $07
00086154 E606                       	smpsAlterVol        $06
00086156 BF03                       	dc.b	nD5, $03
00086158                            
00086158                            music84_Jump03:
00086158 E108                       	smpsAlterNote       $08
0008615A C103 8001                  	dc.b	nE5, $03, nRst, $01
0008615E E109                       	smpsAlterNote       $09
00086160 C202 8001 C403             	dc.b	nF5, $02, nRst, $01, nG5, $03
00086166 E10B                       	smpsAlterNote       $0B
00086168 C607                       	dc.b	nA5, $07
0008616A E107                       	smpsAlterNote       $07
0008616C BF03 8001                  	dc.b	nD5, $03, nRst, $01
00086170 E106                       	smpsAlterNote       $06
00086172 C90D                       	dc.b	nC6, $0D
00086174 E100                       	smpsAlterNote       $00
00086176 E701                       	dc.b	smpsNoAttack, $01
00086178 E1FF                       	smpsAlterNote       $FF
0008617A E701                       	dc.b	smpsNoAttack, $01
0008617C E103                       	smpsAlterNote       $03
0008617E E701                       	dc.b	smpsNoAttack, $01
00086180 E109                       	smpsAlterNote       $09
00086182 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086186 E106                       	smpsAlterNote       $06
00086188 E701                       	dc.b	smpsNoAttack, $01
0008618A E100                       	smpsAlterNote       $00
0008618C E701                       	dc.b	smpsNoAttack, $01
0008618E E10C                       	smpsAlterNote       $0C
00086190 C703 8001                  	dc.b	nBb5, $03, nRst, $01
00086194 E10B                       	smpsAlterNote       $0B
00086196 C603                       	dc.b	nA5, $03
00086198 E109                       	smpsAlterNote       $09
0008619A C403 8001                  	dc.b	nG5, $03, nRst, $01
0008619E E10B                       	smpsAlterNote       $0B
000861A0 C60D                       	dc.b	nA5, $0D
000861A2 E105                       	smpsAlterNote       $05
000861A4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000861A8 E10B                       	smpsAlterNote       $0B
000861AA E701                       	dc.b	smpsNoAttack, $01
000861AC E10E                       	smpsAlterNote       $0E
000861AE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000861B2 E108                       	smpsAlterNote       $08
000861B4 E701                       	dc.b	smpsNoAttack, $01
000861B6 E104                       	smpsAlterNote       $04
000861B8 E701                       	dc.b	smpsNoAttack, $01
000861BA E105                       	smpsAlterNote       $05
000861BC E701                       	dc.b	smpsNoAttack, $01
000861BE E10B                       	smpsAlterNote       $0B
000861C0 E701                       	dc.b	smpsNoAttack, $01
000861C2 E10F                       	smpsAlterNote       $0F
000861C4 E701                       	dc.b	smpsNoAttack, $01
000861C6 E10B                       	smpsAlterNote       $0B
000861C8 E701                       	dc.b	smpsNoAttack, $01
000861CA E108                       	smpsAlterNote       $08
000861CC E701                       	dc.b	smpsNoAttack, $01
000861CE E104                       	smpsAlterNote       $04
000861D0 E701                       	dc.b	smpsNoAttack, $01
000861D2 E108                       	smpsAlterNote       $08
000861D4 E701                       	dc.b	smpsNoAttack, $01
000861D6 E10E                       	smpsAlterNote       $0E
000861D8 E701                       	dc.b	smpsNoAttack, $01
000861DA E10F                       	smpsAlterNote       $0F
000861DC E701                       	dc.b	smpsNoAttack, $01
000861DE E10B                       	smpsAlterNote       $0B
000861E0 E701                       	dc.b	smpsNoAttack, $01
000861E2 E105                       	smpsAlterNote       $05
000861E4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000861E8 E108                       	smpsAlterNote       $08
000861EA E701                       	dc.b	smpsNoAttack, $01
000861EC E10E                       	smpsAlterNote       $0E
000861EE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000861F2 E108                       	smpsAlterNote       $08
000861F4 E701                       	dc.b	smpsNoAttack, $01
000861F6 E105                       	smpsAlterNote       $05
000861F8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000861FC E10B                       	smpsAlterNote       $0B
000861FE E701                       	dc.b	smpsNoAttack, $01
00086200 E10F                       	smpsAlterNote       $0F
00086202 E701 800E                  	dc.b	smpsNoAttack, $01, nRst, $0E
00086206 E107                       	smpsAlterNote       $07
00086208 BF03 8001                  	dc.b	nD5, $03, nRst, $01
0008620C E108                       	smpsAlterNote       $08
0008620E C103                       	dc.b	nE5, $03
00086210 E109                       	smpsAlterNote       $09
00086212 C203 8001 C402 8001        	dc.b	nF5, $03, nRst, $01, nG5, $02, nRst, $01
0008621A E10B                       	smpsAlterNote       $0B
0008621C C606 8001                  	dc.b	nA5, $06, nRst, $01
00086220 E107                       	smpsAlterNote       $07
00086222 BF03                       	dc.b	nD5, $03
00086224 E106                       	smpsAlterNote       $06
00086226 C90D 8001                  	dc.b	nC6, $0D, nRst, $01
0008622A E107                       	smpsAlterNote       $07
0008622C CB03                       	dc.b	nD6, $03
0008622E E10C                       	smpsAlterNote       $0C
00086230 C704 8001                  	dc.b	nBb5, $04, nRst, $01
00086234 E10B                       	smpsAlterNote       $0B
00086236 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008623A E109                       	smpsAlterNote       $09
0008623C C404                       	dc.b	nG5, $04
0008623E E10B                       	smpsAlterNote       $0B
00086240 C60D                       	dc.b	nA5, $0D
00086242 E108                       	smpsAlterNote       $08
00086244 E701                       	dc.b	smpsNoAttack, $01
00086246 E104                       	smpsAlterNote       $04
00086248 E701                       	dc.b	smpsNoAttack, $01
0008624A E108                       	smpsAlterNote       $08
0008624C E701                       	dc.b	smpsNoAttack, $01
0008624E E10B                       	smpsAlterNote       $0B
00086250 E701                       	dc.b	smpsNoAttack, $01
00086252 E10F                       	smpsAlterNote       $0F
00086254 E701                       	dc.b	smpsNoAttack, $01
00086256 E10B                       	smpsAlterNote       $0B
00086258 E701                       	dc.b	smpsNoAttack, $01
0008625A E105                       	smpsAlterNote       $05
0008625C E701                       	dc.b	smpsNoAttack, $01
0008625E E104                       	smpsAlterNote       $04
00086260 E701                       	dc.b	smpsNoAttack, $01
00086262 E108                       	smpsAlterNote       $08
00086264 E701                       	dc.b	smpsNoAttack, $01
00086266 E10E                       	smpsAlterNote       $0E
00086268 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008626C E10B                       	smpsAlterNote       $0B
0008626E E701                       	dc.b	smpsNoAttack, $01
00086270 E105                       	smpsAlterNote       $05
00086272 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086276 E10B                       	smpsAlterNote       $0B
00086278 E701                       	dc.b	smpsNoAttack, $01
0008627A E10E                       	smpsAlterNote       $0E
0008627C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086280 E108                       	smpsAlterNote       $08
00086282 E701                       	dc.b	smpsNoAttack, $01
00086284 E104                       	smpsAlterNote       $04
00086286 E701                       	dc.b	smpsNoAttack, $01
00086288 E105                       	smpsAlterNote       $05
0008628A E701                       	dc.b	smpsNoAttack, $01
0008628C E10B                       	smpsAlterNote       $0B
0008628E E701                       	dc.b	smpsNoAttack, $01
00086290 E10F                       	smpsAlterNote       $0F
00086292 E701                       	dc.b	smpsNoAttack, $01
00086294 E10B                       	smpsAlterNote       $0B
00086296 E701                       	dc.b	smpsNoAttack, $01
00086298 E108                       	smpsAlterNote       $08
0008629A E701                       	dc.b	smpsNoAttack, $01
0008629C E105                       	smpsAlterNote       $05
0008629E 8001                       	dc.b	nRst, $01
000862A0 E109                       	smpsAlterNote       $09
000862A2 C401                       	dc.b	nG5, $01
000862A4 E10B                       	smpsAlterNote       $0B
000862A6 E7C5 02C6 0D80 01C6 04     	dc.b	smpsNoAttack, nAb5, $02, nA5, $0D, nRst, $01, nA5, $04
000862AF E109                       	smpsAlterNote       $09
000862B1 C404 8001                  	dc.b	nG5, $04, nRst, $01
000862B5 E10B                       	smpsAlterNote       $0B
000862B7 C604 8001                  	dc.b	nA5, $04, nRst, $01
000862BB E107                       	smpsAlterNote       $07
000862BD BF0D                       	dc.b	nD5, $0D
000862BF E101                       	smpsAlterNote       $01
000862C1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000862C5 E104                       	smpsAlterNote       $04
000862C7 E701                       	dc.b	smpsNoAttack, $01
000862C9 E10A                       	smpsAlterNote       $0A
000862CB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000862CF E104                       	smpsAlterNote       $04
000862D1 E701                       	dc.b	smpsNoAttack, $01
000862D3 E101                       	smpsAlterNote       $01
000862D5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000862D9 E107                       	smpsAlterNote       $07
000862DB E701                       	dc.b	smpsNoAttack, $01
000862DD E10B                       	smpsAlterNote       $0B
000862DF E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000862E3 E108                       	smpsAlterNote       $08
000862E5 C101                       	dc.b	nE5, $01
000862E7 E109                       	smpsAlterNote       $09
000862E9 E7C2 01C4 01               	dc.b	smpsNoAttack, nF5, $01, nG5, $01
000862EE E10B                       	smpsAlterNote       $0B
000862F0 C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
000862F8 E108                       	smpsAlterNote       $08
000862FA CD06                       	dc.b	nE6, $06
000862FC E109                       	smpsAlterNote       $09
000862FE CE07                       	dc.b	nF6, $07
00086300 E108                       	smpsAlterNote       $08
00086302 CD03 8001                  	dc.b	nE6, $03, nRst, $01
00086306 E106                       	smpsAlterNote       $06
00086308 C903                       	dc.b	nC6, $03
0008630A E109                       	smpsAlterNote       $09
0008630C C403 8001                  	dc.b	nG5, $03, nRst, $01
00086310 E10C                       	smpsAlterNote       $0C
00086312 C70D                       	dc.b	nBb5, $0D
00086314 E106                       	smpsAlterNote       $06
00086316 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008631A E109                       	smpsAlterNote       $09
0008631C E701                       	dc.b	smpsNoAttack, $01
0008631E E10F                       	smpsAlterNote       $0F
00086320 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086324 E109                       	smpsAlterNote       $09
00086326 E701                       	dc.b	smpsNoAttack, $01
00086328 E106                       	smpsAlterNote       $06
0008632A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008632E E10C                       	smpsAlterNote       $0C
00086330 E701                       	dc.b	smpsNoAttack, $01
00086332 E110                       	smpsAlterNote       $10
00086334 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00086338 E10B                       	smpsAlterNote       $0B
0008633A C606 C50E                  	dc.b	nA5, $06, nAb5, $0E
0008633E E105                       	smpsAlterNote       $05
00086340 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086344 E10B                       	smpsAlterNote       $0B
00086346 E701                       	dc.b	smpsNoAttack, $01
00086348 E10E                       	smpsAlterNote       $0E
0008634A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008634E E108                       	smpsAlterNote       $08
00086350 E701                       	dc.b	smpsNoAttack, $01
00086352 E104                       	smpsAlterNote       $04
00086354 E701                       	dc.b	smpsNoAttack, $01
00086356 E105                       	smpsAlterNote       $05
00086358 E701                       	dc.b	smpsNoAttack, $01
0008635A E10B                       	smpsAlterNote       $0B
0008635C E701                       	dc.b	smpsNoAttack, $01
0008635E E10F                       	smpsAlterNote       $0F
00086360 E701                       	dc.b	smpsNoAttack, $01
00086362 E10B                       	smpsAlterNote       $0B
00086364 E701                       	dc.b	smpsNoAttack, $01
00086366 E108                       	smpsAlterNote       $08
00086368 E701                       	dc.b	smpsNoAttack, $01
0008636A E104                       	smpsAlterNote       $04
0008636C E701                       	dc.b	smpsNoAttack, $01
0008636E E108                       	smpsAlterNote       $08
00086370 E701                       	dc.b	smpsNoAttack, $01
00086372 E10E                       	smpsAlterNote       $0E
00086374 E701                       	dc.b	smpsNoAttack, $01
00086376 E10F                       	smpsAlterNote       $0F
00086378 E701                       	dc.b	smpsNoAttack, $01
0008637A E10B                       	smpsAlterNote       $0B
0008637C E701                       	dc.b	smpsNoAttack, $01
0008637E E105                       	smpsAlterNote       $05
00086380 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086384 E108                       	smpsAlterNote       $08
00086386 E701                       	dc.b	smpsNoAttack, $01
00086388 E10E                       	smpsAlterNote       $0E
0008638A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008638E E108                       	smpsAlterNote       $08
00086390 E701                       	dc.b	smpsNoAttack, $01
00086392 E105                       	smpsAlterNote       $05
00086394 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086398 E10B                       	smpsAlterNote       $0B
0008639A E701                       	dc.b	smpsNoAttack, $01
0008639C E10F                       	smpsAlterNote       $0F
0008639E E701                       	dc.b	smpsNoAttack, $01
000863A0 E10E                       	smpsAlterNote       $0E
000863A2 E701                       	dc.b	smpsNoAttack, $01
000863A4 E108                       	smpsAlterNote       $08
000863A6 E701                       	dc.b	smpsNoAttack, $01
000863A8 E104                       	smpsAlterNote       $04
000863AA E701                       	dc.b	smpsNoAttack, $01
000863AC E108                       	smpsAlterNote       $08
000863AE E701                       	dc.b	smpsNoAttack, $01
000863B0 E10E                       	smpsAlterNote       $0E
000863B2 E701                       	dc.b	smpsNoAttack, $01
000863B4 E10F                       	smpsAlterNote       $0F
000863B6 E701                       	dc.b	smpsNoAttack, $01
000863B8 E10B                       	smpsAlterNote       $0B
000863BA E701                       	dc.b	smpsNoAttack, $01
000863BC E105                       	smpsAlterNote       $05
000863BE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000863C2 E108                       	smpsAlterNote       $08
000863C4 E701                       	dc.b	smpsNoAttack, $01
000863C6 E10E                       	smpsAlterNote       $0E
000863C8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000863CC E108                       	smpsAlterNote       $08
000863CE E701                       	dc.b	smpsNoAttack, $01
000863D0 E105                       	smpsAlterNote       $05
000863D2 E701                       	dc.b	smpsNoAttack, $01
000863D4 E10B                       	smpsAlterNote       $0B
000863D6 C60D                       	dc.b	nA5, $0D
000863D8 E108                       	smpsAlterNote       $08
000863DA E701                       	dc.b	smpsNoAttack, $01
000863DC E104                       	smpsAlterNote       $04
000863DE E701                       	dc.b	smpsNoAttack, $01
000863E0 E105                       	smpsAlterNote       $05
000863E2 E701                       	dc.b	smpsNoAttack, $01
000863E4 E10B                       	smpsAlterNote       $0B
000863E6 E701                       	dc.b	smpsNoAttack, $01
000863E8 E10F                       	smpsAlterNote       $0F
000863EA E701                       	dc.b	smpsNoAttack, $01
000863EC E10B                       	smpsAlterNote       $0B
000863EE E701                       	dc.b	smpsNoAttack, $01
000863F0 E108                       	smpsAlterNote       $08
000863F2 E701                       	dc.b	smpsNoAttack, $01
000863F4 E104                       	smpsAlterNote       $04
000863F6 E701                       	dc.b	smpsNoAttack, $01
000863F8 E108                       	smpsAlterNote       $08
000863FA E701                       	dc.b	smpsNoAttack, $01
000863FC E10E                       	smpsAlterNote       $0E
000863FE E701                       	dc.b	smpsNoAttack, $01
00086400 E10F                       	smpsAlterNote       $0F
00086402 E701                       	dc.b	smpsNoAttack, $01
00086406 E109                       	smpsAlterNote       $09
00086408 E6FF                       	smpsAlterVol        $FF
0008640A C206 8001 C203 C203 8001   	dc.b	nF5, $06, nRst, $01, nF5, $03, nF5, $03, nRst, $01
00086414 E108                       	smpsAlterNote       $08
00086416 C103 800E                  	dc.b	nE5, $03, nRst, $0E
0008641C E107                       	smpsAlterNote       $07
0008641E E601                       	smpsAlterVol        $01
00086420 BF03                       	dc.b	nD5, $03
00086422 E108                       	smpsAlterNote       $08
00086424 C103 8001                  	dc.b	nE5, $03, nRst, $01
00086428 E109                       	smpsAlterNote       $09
0008642A C203 C403 8001             	dc.b	nF5, $03, nG5, $03, nRst, $01
00086430 E10B                       	smpsAlterNote       $0B
00086432 C606 8001                  	dc.b	nA5, $06, nRst, $01
00086436 E107                       	smpsAlterNote       $07
00086438 BF02 8001                  	dc.b	nD5, $02, nRst, $01
0008643C E106                       	smpsAlterNote       $06
0008643E C90D                       	dc.b	nC6, $0D
00086440 E103                       	smpsAlterNote       $03
00086442 E701                       	dc.b	smpsNoAttack, $01
00086444 E1FF                       	smpsAlterNote       $FF
00086446 E701                       	dc.b	smpsNoAttack, $01
00086448 E103                       	smpsAlterNote       $03
0008644A E701                       	dc.b	smpsNoAttack, $01
0008644C E109                       	smpsAlterNote       $09
0008644E E701                       	dc.b	smpsNoAttack, $01
00086450 E10A                       	smpsAlterNote       $0A
00086452 E701                       	dc.b	smpsNoAttack, $01
00086454 E106                       	smpsAlterNote       $06
00086456 E701                       	dc.b	smpsNoAttack, $01
00086458 E100                       	smpsAlterNote       $00
0008645A E701                       	dc.b	smpsNoAttack, $01
0008645C E10C                       	smpsAlterNote       $0C
0008645E C703 8001                  	dc.b	nBb5, $03, nRst, $01
00086462 E10B                       	smpsAlterNote       $0B
00086464 C603                       	dc.b	nA5, $03
00086466 E109                       	smpsAlterNote       $09
00086468 C403 8001                  	dc.b	nG5, $03, nRst, $01
0008646C E10B                       	smpsAlterNote       $0B
0008646E C60D                       	dc.b	nA5, $0D
00086470 E105                       	smpsAlterNote       $05
00086472 E701                       	dc.b	smpsNoAttack, $01
00086474 E104                       	smpsAlterNote       $04
00086476 E701                       	dc.b	smpsNoAttack, $01
00086478 E108                       	smpsAlterNote       $08
0008647A E701                       	dc.b	smpsNoAttack, $01
0008647C E10E                       	smpsAlterNote       $0E
0008647E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086482 E10B                       	smpsAlterNote       $0B
00086484 E701                       	dc.b	smpsNoAttack, $01
00086486 E105                       	smpsAlterNote       $05
00086488 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008648C E10B                       	smpsAlterNote       $0B
0008648E E701                       	dc.b	smpsNoAttack, $01
00086490 E10E                       	smpsAlterNote       $0E
00086492 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086496 E108                       	smpsAlterNote       $08
00086498 E701                       	dc.b	smpsNoAttack, $01
0008649A E104                       	smpsAlterNote       $04
0008649C E701                       	dc.b	smpsNoAttack, $01
0008649E E105                       	smpsAlterNote       $05
000864A0 E701                       	dc.b	smpsNoAttack, $01
000864A2 E10B                       	smpsAlterNote       $0B
000864A4 E701                       	dc.b	smpsNoAttack, $01
000864A6 E10F                       	smpsAlterNote       $0F
000864A8 E701                       	dc.b	smpsNoAttack, $01
000864AA E10B                       	smpsAlterNote       $0B
000864AC E701                       	dc.b	smpsNoAttack, $01
000864AE E108                       	smpsAlterNote       $08
000864B0 E701                       	dc.b	smpsNoAttack, $01
000864B2 E104                       	smpsAlterNote       $04
000864B4 E701                       	dc.b	smpsNoAttack, $01
000864B6 E108                       	smpsAlterNote       $08
000864B8 E701                       	dc.b	smpsNoAttack, $01
000864BA E10E                       	smpsAlterNote       $0E
000864BC E701                       	dc.b	smpsNoAttack, $01
000864BE E10F                       	smpsAlterNote       $0F
000864C0 E701                       	dc.b	smpsNoAttack, $01
000864C2 E10B                       	smpsAlterNote       $0B
000864C4 E701                       	dc.b	smpsNoAttack, $01
000864C6 E105                       	smpsAlterNote       $05
000864C8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000864CC E108                       	smpsAlterNote       $08
000864CE E701                       	dc.b	smpsNoAttack, $01
000864D0 E10E                       	smpsAlterNote       $0E
000864D2 E701                       	dc.b	smpsNoAttack, $01
000864D4 E10F                       	smpsAlterNote       $0F
000864D6 800F                       	dc.b	nRst, $0F
000864D8 E107                       	smpsAlterNote       $07
000864DA BF02 8001                  	dc.b	nD5, $02, nRst, $01
000864DE E108                       	smpsAlterNote       $08
000864E0 C103                       	dc.b	nE5, $03
000864E2 E109                       	smpsAlterNote       $09
000864E4 C203 8001 C403             	dc.b	nF5, $03, nRst, $01, nG5, $03
000864EA E10B                       	smpsAlterNote       $0B
000864EC C606 8001                  	dc.b	nA5, $06, nRst, $01
000864F0 E107                       	smpsAlterNote       $07
000864F2 BF03                       	dc.b	nD5, $03
000864F4 E106                       	smpsAlterNote       $06
000864F6 C90E                       	dc.b	nC6, $0E
000864F8 E107                       	smpsAlterNote       $07
000864FA CB03 8001                  	dc.b	nD6, $03, nRst, $01
000864FE E10C                       	smpsAlterNote       $0C
00086500 C704                       	dc.b	nBb5, $04
00086502 E10B                       	smpsAlterNote       $0B
00086504 C604 8001                  	dc.b	nA5, $04, nRst, $01
00086508 E109                       	smpsAlterNote       $09
0008650A C404                       	dc.b	nG5, $04
0008650C E10B                       	smpsAlterNote       $0B
0008650E C60D                       	dc.b	nA5, $0D
00086510 E108                       	smpsAlterNote       $08
00086512 E701                       	dc.b	smpsNoAttack, $01
00086514 E105                       	smpsAlterNote       $05
00086516 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008651A E10B                       	smpsAlterNote       $0B
0008651C E701                       	dc.b	smpsNoAttack, $01
0008651E E10F                       	smpsAlterNote       $0F
00086520 E701                       	dc.b	smpsNoAttack, $01
00086522 E10E                       	smpsAlterNote       $0E
00086524 E701                       	dc.b	smpsNoAttack, $01
00086526 E108                       	smpsAlterNote       $08
00086528 E701                       	dc.b	smpsNoAttack, $01
0008652A E104                       	smpsAlterNote       $04
0008652C E701                       	dc.b	smpsNoAttack, $01
0008652E E108                       	smpsAlterNote       $08
00086530 E701                       	dc.b	smpsNoAttack, $01
00086532 E10B                       	smpsAlterNote       $0B
00086534 E701                       	dc.b	smpsNoAttack, $01
00086536 E10F                       	smpsAlterNote       $0F
00086538 E701                       	dc.b	smpsNoAttack, $01
0008653A E10B                       	smpsAlterNote       $0B
0008653C E701                       	dc.b	smpsNoAttack, $01
0008653E E105                       	smpsAlterNote       $05
00086540 E701                       	dc.b	smpsNoAttack, $01
00086542 E104                       	smpsAlterNote       $04
00086544 E701                       	dc.b	smpsNoAttack, $01
00086546 E108                       	smpsAlterNote       $08
00086548 E701                       	dc.b	smpsNoAttack, $01
0008654A E10E                       	smpsAlterNote       $0E
0008654C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086550 E10B                       	smpsAlterNote       $0B
00086552 E701                       	dc.b	smpsNoAttack, $01
00086554 E105                       	smpsAlterNote       $05
00086556 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008655A E10B                       	smpsAlterNote       $0B
0008655C E701                       	dc.b	smpsNoAttack, $01
0008655E E10E                       	smpsAlterNote       $0E
00086560 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086564 E108                       	smpsAlterNote       $08
00086566 E701                       	dc.b	smpsNoAttack, $01
00086568 E105                       	smpsAlterNote       $05
0008656A 8001                       	dc.b	nRst, $01
0008656C E109                       	smpsAlterNote       $09
0008656E C402                       	dc.b	nG5, $02
00086570 E10B                       	smpsAlterNote       $0B
00086572 E7C5 01C6 0EC6 0480 01     	dc.b	smpsNoAttack, nAb5, $01, nA5, $0E, nA5, $04, nRst, $01
0008657B E109                       	smpsAlterNote       $09
0008657D C404                       	dc.b	nG5, $04
0008657F E10B                       	smpsAlterNote       $0B
00086581 C604 8001                  	dc.b	nA5, $04, nRst, $01
00086585 E107                       	smpsAlterNote       $07
00086587 BF0D                       	dc.b	nD5, $0D
00086589 E101                       	smpsAlterNote       $01
0008658B E701                       	dc.b	smpsNoAttack, $01
0008658D E100                       	smpsAlterNote       $00
0008658F E701                       	dc.b	smpsNoAttack, $01
00086591 E104                       	smpsAlterNote       $04
00086593 E701                       	dc.b	smpsNoAttack, $01
00086595 E10A                       	smpsAlterNote       $0A
00086597 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008659B E107                       	smpsAlterNote       $07
0008659D E701                       	dc.b	smpsNoAttack, $01
0008659F E101                       	smpsAlterNote       $01
000865A1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000865A5 E107                       	smpsAlterNote       $07
000865A7 E701                       	dc.b	smpsNoAttack, $01
000865A9 E10A                       	smpsAlterNote       $0A
000865AB E701                       	dc.b	smpsNoAttack, $01
000865AD E10B                       	smpsAlterNote       $0B
000865AF 8001                       	dc.b	nRst, $01
000865B1 E108                       	smpsAlterNote       $08
000865B3 C101                       	dc.b	nE5, $01
000865B5 E109                       	smpsAlterNote       $09
000865B7 E7C2 01C4 01               	dc.b	smpsNoAttack, nF5, $01, nG5, $01
000865BC E10B                       	smpsAlterNote       $0B
000865BE C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
000865C6 E108                       	smpsAlterNote       $08
000865C8 CD06 8001                  	dc.b	nE6, $06, nRst, $01
000865CC E109                       	smpsAlterNote       $09
000865CE CE06 8001                  	dc.b	nF6, $06, nRst, $01
000865D2 E108                       	smpsAlterNote       $08
000865D4 CD02 8001                  	dc.b	nE6, $02, nRst, $01
000865D8 E106                       	smpsAlterNote       $06
000865DA C903                       	dc.b	nC6, $03
000865DC E109                       	smpsAlterNote       $09
000865DE C403 8001                  	dc.b	nG5, $03, nRst, $01
000865E2 E10C                       	smpsAlterNote       $0C
000865E4 C70D                       	dc.b	nBb5, $0D
000865E6 E109                       	smpsAlterNote       $09
000865E8 E701                       	dc.b	smpsNoAttack, $01
000865EA E105                       	smpsAlterNote       $05
000865EC E701                       	dc.b	smpsNoAttack, $01
000865EE E109                       	smpsAlterNote       $09
000865F0 E701                       	dc.b	smpsNoAttack, $01
000865F2 E10F                       	smpsAlterNote       $0F
000865F4 E701                       	dc.b	smpsNoAttack, $01
000865F6 E110                       	smpsAlterNote       $10
000865F8 E701                       	dc.b	smpsNoAttack, $01
000865FA E10C                       	smpsAlterNote       $0C
000865FC E701                       	dc.b	smpsNoAttack, $01
000865FE E106                       	smpsAlterNote       $06
00086600 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086604 E109                       	smpsAlterNote       $09
00086606 E701                       	dc.b	smpsNoAttack, $01
00086608 E10F                       	smpsAlterNote       $0F
0008660A E701                       	dc.b	smpsNoAttack, $01
0008660C E110                       	smpsAlterNote       $10
0008660E 8001                       	dc.b	nRst, $01
00086610 E10B                       	smpsAlterNote       $0B
00086612 C606 8001 C50D             	dc.b	nA5, $06, nRst, $01, nAb5, $0D
00086618 E105                       	smpsAlterNote       $05
0008661A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008661E E108                       	smpsAlterNote       $08
00086620 E701                       	dc.b	smpsNoAttack, $01
00086622 E10E                       	smpsAlterNote       $0E
00086624 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086628 E108                       	smpsAlterNote       $08
0008662A E701                       	dc.b	smpsNoAttack, $01
0008662C E105                       	smpsAlterNote       $05
0008662E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086632 E10B                       	smpsAlterNote       $0B
00086634 E701                       	dc.b	smpsNoAttack, $01
00086636 E10F                       	smpsAlterNote       $0F
00086638 E701                       	dc.b	smpsNoAttack, $01
0008663A E10E                       	smpsAlterNote       $0E
0008663C E701                       	dc.b	smpsNoAttack, $01
0008663E E108                       	smpsAlterNote       $08
00086640 E701                       	dc.b	smpsNoAttack, $01
00086642 E104                       	smpsAlterNote       $04
00086644 E701                       	dc.b	smpsNoAttack, $01
00086646 E108                       	smpsAlterNote       $08
00086648 E701                       	dc.b	smpsNoAttack, $01
0008664A E10B                       	smpsAlterNote       $0B
0008664C E701                       	dc.b	smpsNoAttack, $01
0008664E E10F                       	smpsAlterNote       $0F
00086650 E701                       	dc.b	smpsNoAttack, $01
00086652 E10B                       	smpsAlterNote       $0B
00086654 E701                       	dc.b	smpsNoAttack, $01
00086656 E105                       	smpsAlterNote       $05
00086658 E701                       	dc.b	smpsNoAttack, $01
0008665A E104                       	smpsAlterNote       $04
0008665C E701                       	dc.b	smpsNoAttack, $01
0008665E E108                       	smpsAlterNote       $08
00086660 E701                       	dc.b	smpsNoAttack, $01
00086662 E10E                       	smpsAlterNote       $0E
00086664 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086668 E10B                       	smpsAlterNote       $0B
0008666A E701                       	dc.b	smpsNoAttack, $01
0008666C E105                       	smpsAlterNote       $05
0008666E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086672 E10B                       	smpsAlterNote       $0B
00086674 E701                       	dc.b	smpsNoAttack, $01
00086676 E10E                       	smpsAlterNote       $0E
00086678 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008667C E108                       	smpsAlterNote       $08
0008667E E701                       	dc.b	smpsNoAttack, $01
00086680 E104                       	smpsAlterNote       $04
00086682 E701                       	dc.b	smpsNoAttack, $01
00086684 E105                       	smpsAlterNote       $05
00086686 E701                       	dc.b	smpsNoAttack, $01
00086688 E10B                       	smpsAlterNote       $0B
0008668A E701                       	dc.b	smpsNoAttack, $01
0008668C E10F                       	smpsAlterNote       $0F
0008668E E701                       	dc.b	smpsNoAttack, $01
00086690 E10B                       	smpsAlterNote       $0B
00086692 E701                       	dc.b	smpsNoAttack, $01
00086694 E108                       	smpsAlterNote       $08
00086696 E701                       	dc.b	smpsNoAttack, $01
00086698 E104                       	smpsAlterNote       $04
0008669A E701                       	dc.b	smpsNoAttack, $01
0008669C E108                       	smpsAlterNote       $08
0008669E E701                       	dc.b	smpsNoAttack, $01
000866A0 E10E                       	smpsAlterNote       $0E
000866A2 E701                       	dc.b	smpsNoAttack, $01
000866A4 E10F                       	smpsAlterNote       $0F
000866A6 E701                       	dc.b	smpsNoAttack, $01
000866A8 E10B                       	smpsAlterNote       $0B
000866AA E701                       	dc.b	smpsNoAttack, $01
000866AC E105                       	smpsAlterNote       $05
000866AE E701                       	dc.b	smpsNoAttack, $01
000866B0 E10B                       	smpsAlterNote       $0B
000866B2 C60E                       	dc.b	nA5, $0E
000866B4 E105                       	smpsAlterNote       $05
000866B6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000866BA E10B                       	smpsAlterNote       $0B
000866BC E701                       	dc.b	smpsNoAttack, $01
000866BE E10E                       	smpsAlterNote       $0E
000866C0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000866C4 E108                       	smpsAlterNote       $08
000866C6 E701                       	dc.b	smpsNoAttack, $01
000866C8 E104                       	smpsAlterNote       $04
000866CA E701                       	dc.b	smpsNoAttack, $01
000866CC E105                       	smpsAlterNote       $05
000866CE E701                       	dc.b	smpsNoAttack, $01
000866D0 E10B                       	smpsAlterNote       $0B
000866D2 E701                       	dc.b	smpsNoAttack, $01
000866D4 E10F                       	smpsAlterNote       $0F
000866D6 E701                       	dc.b	smpsNoAttack, $01
000866D8 E10B                       	smpsAlterNote       $0B
000866DA E701                       	dc.b	smpsNoAttack, $01
000866DC E108                       	smpsAlterNote       $08
000866DE E701                       	dc.b	smpsNoAttack, $01
000866E0 E104                       	smpsAlterNote       $04
000866E2 E701                       	dc.b	smpsNoAttack, $01
000866E4 E108                       	smpsAlterNote       $08
000866E6 E701                       	dc.b	smpsNoAttack, $01
000866E8 E10E                       	smpsAlterNote       $0E
000866EA E701                       	dc.b	smpsNoAttack, $01
000866EC E10F                       	smpsAlterNote       $0F
000866EE E701                       	dc.b	smpsNoAttack, $01
000866F0 E10B                       	smpsAlterNote       $0B
000866F2 E701                       	dc.b	smpsNoAttack, $01
000866F4 E105                       	smpsAlterNote       $05
000866F6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000866FA E108                       	smpsAlterNote       $08
000866FC E701                       	dc.b	smpsNoAttack, $01
000866FE E10E                       	smpsAlterNote       $0E
00086700 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086704 E108                       	smpsAlterNote       $08
00086706 E701                       	dc.b	smpsNoAttack, $01
00086708 E105                       	smpsAlterNote       $05
0008670A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008670E E10B                       	smpsAlterNote       $0B
00086710 E701                       	dc.b	smpsNoAttack, $01
00086712 E10F                       	smpsAlterNote       $0F
00086714 E701                       	dc.b	smpsNoAttack, $01
00086716 E10E                       	smpsAlterNote       $0E
00086718 E701                       	dc.b	smpsNoAttack, $01
0008671A E108                       	smpsAlterNote       $08
0008671C E701                       	dc.b	smpsNoAttack, $01
0008671E E104                       	smpsAlterNote       $04
00086720 E701                       	dc.b	smpsNoAttack, $01
00086722 E108                       	smpsAlterNote       $08
00086724 E701                       	dc.b	smpsNoAttack, $01
00086726 E10E                       	smpsAlterNote       $0E
00086728 E701                       	dc.b	smpsNoAttack, $01
0008672A E10F                       	smpsAlterNote       $0F
0008672C E701                       	dc.b	smpsNoAttack, $01
0008672E E10B                       	smpsAlterNote       $0B
00086730 E701                       	dc.b	smpsNoAttack, $01
00086732 E105                       	smpsAlterNote       $05
00086734 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086738 E108                       	smpsAlterNote       $08
0008673A E701                       	dc.b	smpsNoAttack, $01
0008673C E10E                       	smpsAlterNote       $0E
0008673E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086742 E108                       	smpsAlterNote       $08
00086744 E701                       	dc.b	smpsNoAttack, $01
00086746 E105                       	smpsAlterNote       $05
00086748 E701                       	dc.b	smpsNoAttack, $01
0008674C E10B                       	smpsAlterNote       $0B
0008674E E6FD                       	smpsAlterVol        $FD
00086750 C604 8001                  	dc.b	nA5, $04, nRst, $01
00086754 E109                       	smpsAlterNote       $09
00086756 C404                       	dc.b	nG5, $04
00086758 E10B                       	smpsAlterNote       $0B
0008675A C604 8001                  	dc.b	nA5, $04, nRst, $01
0008675E E107                       	smpsAlterNote       $07
00086760 BF0A BF03 8001             	dc.b	nD5, $0A, nD5, $03, nRst, $01
00086766 E10B                       	smpsAlterNote       $0B
00086768 C604                       	dc.b	nA5, $04
0008676A E109                       	smpsAlterNote       $09
0008676C C404 8001                  	dc.b	nG5, $04, nRst, $01
00086770 E10B                       	smpsAlterNote       $0B
00086772 C604                       	dc.b	nA5, $04
00086774 E108                       	smpsAlterNote       $08
00086776 C10A 8001 C102 8001        	dc.b	nE5, $0A, nRst, $01, nE5, $02, nRst, $01
0008677E E106                       	smpsAlterNote       $06
00086780 C904 8001                  	dc.b	nC6, $04, nRst, $01
00086784 E10C                       	smpsAlterNote       $0C
00086786 C704                       	dc.b	nBb5, $04
00086788 E10B                       	smpsAlterNote       $0B
0008678A C604 8001                  	dc.b	nA5, $04, nRst, $01
0008678E E109                       	smpsAlterNote       $09
00086790 C403 C203 8001 C402 8001   	dc.b	nG5, $03, nF5, $03, nRst, $01, nG5, $02, nRst, $01
0008679A E10B                       	smpsAlterNote       $0B
0008679C C60D                       	dc.b	nA5, $0D
0008679E E108                       	smpsAlterNote       $08
000867A0 E701                       	dc.b	smpsNoAttack, $01
000867A2 E104                       	smpsAlterNote       $04
000867A4 E701                       	dc.b	smpsNoAttack, $01
000867A6 E108                       	smpsAlterNote       $08
000867A8 E701                       	dc.b	smpsNoAttack, $01
000867AA E10E                       	smpsAlterNote       $0E
000867AC E701                       	dc.b	smpsNoAttack, $01
000867AE E10F                       	smpsAlterNote       $0F
000867B0 E701                       	dc.b	smpsNoAttack, $01
000867B2 E10B                       	smpsAlterNote       $0B
000867B4 E701                       	dc.b	smpsNoAttack, $01
000867B6 E105                       	smpsAlterNote       $05
000867B8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000867BC E108                       	smpsAlterNote       $08
000867BE E701                       	dc.b	smpsNoAttack, $01
000867C0 E10E                       	smpsAlterNote       $0E
000867C2 E701                       	dc.b	smpsNoAttack, $01
000867C4 E10F                       	smpsAlterNote       $0F
000867C6 8001                       	dc.b	nRst, $01
000867C8 E109                       	smpsAlterNote       $09
000867CA C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
000867D0 E108                       	smpsAlterNote       $08
000867D2 C10D                       	dc.b	nE5, $0D
000867D4 E102                       	smpsAlterNote       $02
000867D6 E701                       	dc.b	smpsNoAttack, $01
000867D8 E101                       	smpsAlterNote       $01
000867DA E701                       	dc.b	smpsNoAttack, $01
000867DC E105                       	smpsAlterNote       $05
000867DE E701                       	dc.b	smpsNoAttack, $01
000867E0 E10B                       	smpsAlterNote       $0B
000867E2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000867E6 E108                       	smpsAlterNote       $08
000867E8 E701                       	dc.b	smpsNoAttack, $01
000867EA E102                       	smpsAlterNote       $02
000867EC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000867F0 E108                       	smpsAlterNote       $08
000867F2 E701                       	dc.b	smpsNoAttack, $01
000867F4 E10B                       	smpsAlterNote       $0B
000867F6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000867FA E105                       	smpsAlterNote       $05
000867FC E701                       	dc.b	smpsNoAttack, $01
000867FE E101                       	smpsAlterNote       $01
00086800 E701                       	dc.b	smpsNoAttack, $01
00086802 E102                       	smpsAlterNote       $02
00086804 E701                       	dc.b	smpsNoAttack, $01
00086806 E108                       	smpsAlterNote       $08
00086808 E701                       	dc.b	smpsNoAttack, $01
0008680A E10C                       	smpsAlterNote       $0C
0008680C E701                       	dc.b	smpsNoAttack, $01
0008680E E108                       	smpsAlterNote       $08
00086810 E701                       	dc.b	smpsNoAttack, $01
00086812 E105                       	smpsAlterNote       $05
00086814 E701                       	dc.b	smpsNoAttack, $01
00086816 E101                       	smpsAlterNote       $01
00086818 E701                       	dc.b	smpsNoAttack, $01
0008681A E105                       	smpsAlterNote       $05
0008681C E701                       	dc.b	smpsNoAttack, $01
0008681E E10B                       	smpsAlterNote       $0B
00086820 E701                       	dc.b	smpsNoAttack, $01
00086822 E10C                       	smpsAlterNote       $0C
00086824 E701                       	dc.b	smpsNoAttack, $01
00086826 E108                       	smpsAlterNote       $08
00086828 E701                       	dc.b	smpsNoAttack, $01
0008682A E102                       	smpsAlterNote       $02
0008682C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086830 E105                       	smpsAlterNote       $05
00086832 E701                       	dc.b	smpsNoAttack, $01
00086834 E10B                       	smpsAlterNote       $0B
00086836 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008683A E105                       	smpsAlterNote       $05
0008683C E701                       	dc.b	smpsNoAttack, $01
0008683E E102                       	smpsAlterNote       $02
00086840 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086844 E108                       	smpsAlterNote       $08
00086846 E701                       	dc.b	smpsNoAttack, $01
00086848 E10C                       	smpsAlterNote       $0C
0008684A E701                       	dc.b	smpsNoAttack, $01
0008684C E10B                       	smpsAlterNote       $0B
0008684E E701                       	dc.b	smpsNoAttack, $01
00086850 E105                       	smpsAlterNote       $05
00086852 E701                       	dc.b	smpsNoAttack, $01
00086854 E101                       	smpsAlterNote       $01
00086856 E701                       	dc.b	smpsNoAttack, $01
00086858 E105                       	smpsAlterNote       $05
0008685A E701                       	dc.b	smpsNoAttack, $01
0008685C E108                       	smpsAlterNote       $08
0008685E E701                       	dc.b	smpsNoAttack, $01
00086860 E10C                       	smpsAlterNote       $0C
00086862 E701                       	dc.b	smpsNoAttack, $01
00086864 E108                       	smpsAlterNote       $08
00086866 E701                       	dc.b	smpsNoAttack, $01
00086868 E102                       	smpsAlterNote       $02
0008686A E701                       	dc.b	smpsNoAttack, $01
0008686C E101                       	smpsAlterNote       $01
0008686E E701                       	dc.b	smpsNoAttack, $01
00086870 E105                       	smpsAlterNote       $05
00086872 E701                       	dc.b	smpsNoAttack, $01
00086874 E10B                       	smpsAlterNote       $0B
00086876 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008687A E108                       	smpsAlterNote       $08
0008687C E701                       	dc.b	smpsNoAttack, $01
0008687E E102                       	smpsAlterNote       $02
00086880 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086884 E108                       	smpsAlterNote       $08
00086886 E701                       	dc.b	smpsNoAttack, $01
00086888 E10B                       	smpsAlterNote       $0B
0008688A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008688E E105                       	smpsAlterNote       $05
00086890 E701                       	dc.b	smpsNoAttack, $01
00086892 E101                       	smpsAlterNote       $01
00086894 E701                       	dc.b	smpsNoAttack, $01
00086896 E102                       	smpsAlterNote       $02
00086898 E701                       	dc.b	smpsNoAttack, $01
0008689A E108                       	smpsAlterNote       $08
0008689C E701                       	dc.b	smpsNoAttack, $01
0008689E E10C                       	smpsAlterNote       $0C
000868A0 E701                       	dc.b	smpsNoAttack, $01
000868A2 E108                       	smpsAlterNote       $08
000868A4 E701                       	dc.b	smpsNoAttack, $01
000868A6 E105                       	smpsAlterNote       $05
000868A8 E701                       	dc.b	smpsNoAttack, $01
000868AA E101                       	smpsAlterNote       $01
000868AC E701                       	dc.b	smpsNoAttack, $01
000868AE E105                       	smpsAlterNote       $05
000868B0 E701                       	dc.b	smpsNoAttack, $01
000868B2 E10B                       	smpsAlterNote       $0B
000868B4 E701                       	dc.b	smpsNoAttack, $01
000868B6 E10C                       	smpsAlterNote       $0C
000868B8 E701                       	dc.b	smpsNoAttack, $01
000868BA E108                       	smpsAlterNote       $08
000868BC E701                       	dc.b	smpsNoAttack, $01
000868BE E102                       	smpsAlterNote       $02
000868C0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000868C4 E105                       	smpsAlterNote       $05
000868C6 E701                       	dc.b	smpsNoAttack, $01
000868C8 E10B                       	smpsAlterNote       $0B
000868CA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000868CE E105                       	smpsAlterNote       $05
000868D0 E701                       	dc.b	smpsNoAttack, $01
000868D2 E101                       	smpsAlterNote       $01
000868D4 E701                       	dc.b	smpsNoAttack, $01
000868D6 E102                       	smpsAlterNote       $02
000868D8 E701                       	dc.b	smpsNoAttack, $01
000868DA E108                       	smpsAlterNote       $08
000868DC E701                       	dc.b	smpsNoAttack, $01
000868DE E10C                       	smpsAlterNote       $0C
000868E0 E701                       	dc.b	smpsNoAttack, $01
000868E2 E108                       	smpsAlterNote       $08
000868E4 E701                       	dc.b	smpsNoAttack, $01
000868E6 E105                       	smpsAlterNote       $05
000868E8 E701                       	dc.b	smpsNoAttack, $01
000868EA E101                       	smpsAlterNote       $01
000868EC E701                       	dc.b	smpsNoAttack, $01
000868EE E105                       	smpsAlterNote       $05
000868F0 E701                       	dc.b	smpsNoAttack, $01
000868F2 E10B                       	smpsAlterNote       $0B
000868F4 E701                       	dc.b	smpsNoAttack, $01
000868F6 E10C                       	smpsAlterNote       $0C
000868F8 E701                       	dc.b	smpsNoAttack, $01
000868FA E108                       	smpsAlterNote       $08
000868FC E701                       	dc.b	smpsNoAttack, $01
000868FE E102                       	smpsAlterNote       $02
00086900 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086904 E105                       	smpsAlterNote       $05
00086906 E701                       	dc.b	smpsNoAttack, $01
00086908 E10B                       	smpsAlterNote       $0B
0008690A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008690E E105                       	smpsAlterNote       $05
00086910 E701                       	dc.b	smpsNoAttack, $01
00086912 E102                       	smpsAlterNote       $02
00086914 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086918 E108                       	smpsAlterNote       $08
0008691A E701                       	dc.b	smpsNoAttack, $01
0008691C E10C                       	smpsAlterNote       $0C
0008691E E701                       	dc.b	smpsNoAttack, $01
00086920 E10B                       	smpsAlterNote       $0B
00086922 E701                       	dc.b	smpsNoAttack, $01
00086924 E105                       	smpsAlterNote       $05
00086926 E701                       	dc.b	smpsNoAttack, $01
00086928 E101                       	smpsAlterNote       $01
0008692A E701                       	dc.b	smpsNoAttack, $01
0008692C E105                       	smpsAlterNote       $05
0008692E E701                       	dc.b	smpsNoAttack, $01
00086930 E108                       	smpsAlterNote       $08
00086932 E701                       	dc.b	smpsNoAttack, $01
00086934 E10C                       	smpsAlterNote       $0C
00086936 E701                       	dc.b	smpsNoAttack, $01
0008693A E10B                       	smpsAlterNote       $0B
0008693C C604 8001                  	dc.b	nA5, $04, nRst, $01
00086940 E109                       	smpsAlterNote       $09
00086942 C404                       	dc.b	nG5, $04
00086944 E10B                       	smpsAlterNote       $0B
00086946 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008694A E107                       	smpsAlterNote       $07
0008694C BF0A BF03 8001             	dc.b	nD5, $0A, nD5, $03, nRst, $01
00086952 E10B                       	smpsAlterNote       $0B
00086954 C604                       	dc.b	nA5, $04
00086956 E109                       	smpsAlterNote       $09
00086958 C404 8001                  	dc.b	nG5, $04, nRst, $01
0008695C E10B                       	smpsAlterNote       $0B
0008695E C604                       	dc.b	nA5, $04
00086960 E108                       	smpsAlterNote       $08
00086962 C10A 8001 C103             	dc.b	nE5, $0A, nRst, $01, nE5, $03
00086968 E106                       	smpsAlterNote       $06
0008696A C904 8001                  	dc.b	nC6, $04, nRst, $01
0008696E E10C                       	smpsAlterNote       $0C
00086970 C704                       	dc.b	nBb5, $04
00086972 E10B                       	smpsAlterNote       $0B
00086974 C604 8001                  	dc.b	nA5, $04, nRst, $01
00086978 E109                       	smpsAlterNote       $09
0008697A C403 C203 8001 C402 8001   	dc.b	nG5, $03, nF5, $03, nRst, $01, nG5, $02, nRst, $01
00086984 E10B                       	smpsAlterNote       $0B
00086986 C60D                       	dc.b	nA5, $0D
00086988 E108                       	smpsAlterNote       $08
0008698A E701                       	dc.b	smpsNoAttack, $01
0008698C E104                       	smpsAlterNote       $04
0008698E E701                       	dc.b	smpsNoAttack, $01
00086990 E108                       	smpsAlterNote       $08
00086992 E701                       	dc.b	smpsNoAttack, $01
00086994 E10B                       	smpsAlterNote       $0B
00086996 E701                       	dc.b	smpsNoAttack, $01
00086998 E10F                       	smpsAlterNote       $0F
0008699A E701                       	dc.b	smpsNoAttack, $01
0008699C E10B                       	smpsAlterNote       $0B
0008699E E701                       	dc.b	smpsNoAttack, $01
000869A0 E105                       	smpsAlterNote       $05
000869A2 E701                       	dc.b	smpsNoAttack, $01
000869A4 E104                       	smpsAlterNote       $04
000869A6 E701                       	dc.b	smpsNoAttack, $01
000869A8 E108                       	smpsAlterNote       $08
000869AA E701                       	dc.b	smpsNoAttack, $01
000869AC E10E                       	smpsAlterNote       $0E
000869AE E701                       	dc.b	smpsNoAttack, $01
000869B0 E10F                       	smpsAlterNote       $0F
000869B2 8001                       	dc.b	nRst, $01
000869B4 E109                       	smpsAlterNote       $09
000869B6 C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
000869BC E108                       	smpsAlterNote       $08
000869BE C10D                       	dc.b	nE5, $0D
000869C0 E105                       	smpsAlterNote       $05
000869C2 E701                       	dc.b	smpsNoAttack, $01
000869C4 E101                       	smpsAlterNote       $01
000869C6 E701                       	dc.b	smpsNoAttack, $01
000869C8 E105                       	smpsAlterNote       $05
000869CA E701                       	dc.b	smpsNoAttack, $01
000869CC E10B                       	smpsAlterNote       $0B
000869CE E701                       	dc.b	smpsNoAttack, $01
000869D0 E10C                       	smpsAlterNote       $0C
000869D2 E701                       	dc.b	smpsNoAttack, $01
000869D4 E108                       	smpsAlterNote       $08
000869D6 E701                       	dc.b	smpsNoAttack, $01
000869D8 E102                       	smpsAlterNote       $02
000869DA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000869DE E105                       	smpsAlterNote       $05
000869E0 E701                       	dc.b	smpsNoAttack, $01
000869E2 E10B                       	smpsAlterNote       $0B
000869E4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000869E8 E105                       	smpsAlterNote       $05
000869EA E701                       	dc.b	smpsNoAttack, $01
000869EC E102                       	smpsAlterNote       $02
000869EE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000869F2 E108                       	smpsAlterNote       $08
000869F4 E701                       	dc.b	smpsNoAttack, $01
000869F6 E10C                       	smpsAlterNote       $0C
000869F8 E701                       	dc.b	smpsNoAttack, $01
000869FA E10B                       	smpsAlterNote       $0B
000869FC E701                       	dc.b	smpsNoAttack, $01
000869FE E105                       	smpsAlterNote       $05
00086A00 E701                       	dc.b	smpsNoAttack, $01
00086A02 E101                       	smpsAlterNote       $01
00086A04 E701                       	dc.b	smpsNoAttack, $01
00086A06 E105                       	smpsAlterNote       $05
00086A08 E701                       	dc.b	smpsNoAttack, $01
00086A0A E108                       	smpsAlterNote       $08
00086A0C E701                       	dc.b	smpsNoAttack, $01
00086A0E E10C                       	smpsAlterNote       $0C
00086A10 E701                       	dc.b	smpsNoAttack, $01
00086A12 E108                       	smpsAlterNote       $08
00086A14 E701                       	dc.b	smpsNoAttack, $01
00086A16 E102                       	smpsAlterNote       $02
00086A18 E701                       	dc.b	smpsNoAttack, $01
00086A1A E101                       	smpsAlterNote       $01
00086A1C E701                       	dc.b	smpsNoAttack, $01
00086A1E E105                       	smpsAlterNote       $05
00086A20 E701                       	dc.b	smpsNoAttack, $01
00086A22 E10B                       	smpsAlterNote       $0B
00086A24 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086A28 E108                       	smpsAlterNote       $08
00086A2A E701                       	dc.b	smpsNoAttack, $01
00086A2C E102                       	smpsAlterNote       $02
00086A2E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086A32 E108                       	smpsAlterNote       $08
00086A34 E701                       	dc.b	smpsNoAttack, $01
00086A36 E10B                       	smpsAlterNote       $0B
00086A38 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086A3C E105                       	smpsAlterNote       $05
00086A3E E701                       	dc.b	smpsNoAttack, $01
00086A40 E101                       	smpsAlterNote       $01
00086A42 E701                       	dc.b	smpsNoAttack, $01
00086A44 E102                       	smpsAlterNote       $02
00086A46 E701                       	dc.b	smpsNoAttack, $01
00086A48 E108                       	smpsAlterNote       $08
00086A4A E701                       	dc.b	smpsNoAttack, $01
00086A4C E10C                       	smpsAlterNote       $0C
00086A4E E701                       	dc.b	smpsNoAttack, $01
00086A50 E108                       	smpsAlterNote       $08
00086A52 E701                       	dc.b	smpsNoAttack, $01
00086A54 E105                       	smpsAlterNote       $05
00086A56 E701                       	dc.b	smpsNoAttack, $01
00086A58 E101                       	smpsAlterNote       $01
00086A5A E701                       	dc.b	smpsNoAttack, $01
00086A5C E105                       	smpsAlterNote       $05
00086A5E E701                       	dc.b	smpsNoAttack, $01
00086A60 E10B                       	smpsAlterNote       $0B
00086A62 E701                       	dc.b	smpsNoAttack, $01
00086A64 E10C                       	smpsAlterNote       $0C
00086A66 E701                       	dc.b	smpsNoAttack, $01
00086A68 E108                       	smpsAlterNote       $08
00086A6A E701                       	dc.b	smpsNoAttack, $01
00086A6C E102                       	smpsAlterNote       $02
00086A6E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086A72 E108                       	smpsAlterNote       $08
00086A74 E701                       	dc.b	smpsNoAttack, $01
00086A76 E10B                       	smpsAlterNote       $0B
00086A78 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086A7C E105                       	smpsAlterNote       $05
00086A7E E701                       	dc.b	smpsNoAttack, $01
00086A80 E101                       	smpsAlterNote       $01
00086A82 E701                       	dc.b	smpsNoAttack, $01
00086A84 E102                       	smpsAlterNote       $02
00086A86 E701                       	dc.b	smpsNoAttack, $01
00086A88 E108                       	smpsAlterNote       $08
00086A8A E701                       	dc.b	smpsNoAttack, $01
00086A8C E10C                       	smpsAlterNote       $0C
00086A8E E701                       	dc.b	smpsNoAttack, $01
00086A90 E108                       	smpsAlterNote       $08
00086A92 E701                       	dc.b	smpsNoAttack, $01
00086A94 E105                       	smpsAlterNote       $05
00086A96 E701                       	dc.b	smpsNoAttack, $01
00086A98 E101                       	smpsAlterNote       $01
00086A9A E701                       	dc.b	smpsNoAttack, $01
00086A9C E105                       	smpsAlterNote       $05
00086A9E E701                       	dc.b	smpsNoAttack, $01
00086AA0 E10B                       	smpsAlterNote       $0B
00086AA2 E701                       	dc.b	smpsNoAttack, $01
00086AA4 E10C                       	smpsAlterNote       $0C
00086AA6 E701                       	dc.b	smpsNoAttack, $01
00086AA8 E108                       	smpsAlterNote       $08
00086AAA E701                       	dc.b	smpsNoAttack, $01
00086AAC E102                       	smpsAlterNote       $02
00086AAE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086AB2 E105                       	smpsAlterNote       $05
00086AB4 E701                       	dc.b	smpsNoAttack, $01
00086AB6 E10B                       	smpsAlterNote       $0B
00086AB8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086ABC E105                       	smpsAlterNote       $05
00086ABE E701                       	dc.b	smpsNoAttack, $01
00086AC0 E102                       	smpsAlterNote       $02
00086AC2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086AC6 E108                       	smpsAlterNote       $08
00086AC8 E701                       	dc.b	smpsNoAttack, $01
00086ACA E10C                       	smpsAlterNote       $0C
00086ACC E701                       	dc.b	smpsNoAttack, $01
00086ACE E10B                       	smpsAlterNote       $0B
00086AD0 E701                       	dc.b	smpsNoAttack, $01
00086AD2 E105                       	smpsAlterNote       $05
00086AD4 E701                       	dc.b	smpsNoAttack, $01
00086AD6 E101                       	smpsAlterNote       $01
00086AD8 E701                       	dc.b	smpsNoAttack, $01
00086ADA E105                       	smpsAlterNote       $05
00086ADC E701                       	dc.b	smpsNoAttack, $01
00086ADE E108                       	smpsAlterNote       $08
00086AE0 E701                       	dc.b	smpsNoAttack, $01
00086AE2 E10C                       	smpsAlterNote       $0C
00086AE4 E701                       	dc.b	smpsNoAttack, $01
00086AE6 E108                       	smpsAlterNote       $08
00086AE8 E701                       	dc.b	smpsNoAttack, $01
00086AEA E102                       	smpsAlterNote       $02
00086AEC E701                       	dc.b	smpsNoAttack, $01
00086AEE E101                       	smpsAlterNote       $01
00086AF0 E701                       	dc.b	smpsNoAttack, $01
00086AF2 E105                       	smpsAlterNote       $05
00086AF4 E701                       	dc.b	smpsNoAttack, $01
00086AF6 E10B                       	smpsAlterNote       $0B
00086AF8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086AFC E108                       	smpsAlterNote       $08
00086AFE E701                       	dc.b	smpsNoAttack, $01
00086B00 E102                       	smpsAlterNote       $02
00086B02 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086B06 E108                       	smpsAlterNote       $08
00086B08 E701                       	dc.b	smpsNoAttack, $01
00086B0A E10B                       	smpsAlterNote       $0B
00086B0C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086B10 E105                       	smpsAlterNote       $05
00086B12 E701                       	dc.b	smpsNoAttack, $01
00086B14 E102                       	smpsAlterNote       $02
00086B16 8001                       	dc.b	nRst, $01
00086B18 E107                       	smpsAlterNote       $07
00086B1A BF01 8001                  	dc.b	nD5, $01, nRst, $01
00086B1E E108                       	smpsAlterNote       $08
00086B20 C001 C10E                  	dc.b	nEb5, $01, nE5, $0E
00086B24 E102                       	smpsAlterNote       $02
00086B26 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086B2A E108                       	smpsAlterNote       $08
00086B2C E701                       	dc.b	smpsNoAttack, $01
00086B2E E10B                       	smpsAlterNote       $0B
00086B30 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086B34 E105                       	smpsAlterNote       $05
00086B36 E701                       	dc.b	smpsNoAttack, $01
00086B38 E101                       	smpsAlterNote       $01
00086B3A E701                       	dc.b	smpsNoAttack, $01
00086B3C E102                       	smpsAlterNote       $02
00086B3E E701                       	dc.b	smpsNoAttack, $01
00086B40 E108                       	smpsAlterNote       $08
00086B42 E701                       	dc.b	smpsNoAttack, $01
00086B44 E10C                       	smpsAlterNote       $0C
00086B46 E701                       	dc.b	smpsNoAttack, $01
00086B48 E108                       	smpsAlterNote       $08
00086B4A E701                       	dc.b	smpsNoAttack, $01
00086B4C E105                       	smpsAlterNote       $05
00086B4E E701                       	dc.b	smpsNoAttack, $01
00086B50 E101                       	smpsAlterNote       $01
00086B52 E701                       	dc.b	smpsNoAttack, $01
00086B54 E105                       	smpsAlterNote       $05
00086B56 E701                       	dc.b	smpsNoAttack, $01
00086B58 E10B                       	smpsAlterNote       $0B
00086B5A E701                       	dc.b	smpsNoAttack, $01
00086B5C E10C                       	smpsAlterNote       $0C
00086B5E E701                       	dc.b	smpsNoAttack, $01
00086B60 E108                       	smpsAlterNote       $08
00086B62 E701                       	dc.b	smpsNoAttack, $01
00086B64 E102                       	smpsAlterNote       $02
00086B66 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086B6A E105                       	smpsAlterNote       $05
00086B6C E701                       	dc.b	smpsNoAttack, $01
00086B6E E10B                       	smpsAlterNote       $0B
00086B70 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086B74 E105                       	smpsAlterNote       $05
00086B76 E701                       	dc.b	smpsNoAttack, $01
00086B78 E102                       	smpsAlterNote       $02
00086B7A E701                       	dc.b	smpsNoAttack, $01
00086B7C E109                       	smpsAlterNote       $09
00086B7E C40A C207                  	dc.b	nG5, $0A, nF5, $07
00086B82 E108                       	smpsAlterNote       $08
00086B84 C10D                       	dc.b	nE5, $0D
00086B86 E105                       	smpsAlterNote       $05
00086B88 E701                       	dc.b	smpsNoAttack, $01
00086B8A E101                       	smpsAlterNote       $01
00086B8C E701                       	dc.b	smpsNoAttack, $01
00086B8E E102                       	smpsAlterNote       $02
00086B90 E701                       	dc.b	smpsNoAttack, $01
00086B92 E108                       	smpsAlterNote       $08
00086B94 E701                       	dc.b	smpsNoAttack, $01
00086B96 E10C                       	smpsAlterNote       $0C
00086B98 E701                       	dc.b	smpsNoAttack, $01
00086B9A E108                       	smpsAlterNote       $08
00086B9C E701                       	dc.b	smpsNoAttack, $01
00086B9E E105                       	smpsAlterNote       $05
00086BA0 E701                       	dc.b	smpsNoAttack, $01
00086BA2 E101                       	smpsAlterNote       $01
00086BA4 E701                       	dc.b	smpsNoAttack, $01
00086BA6 E105                       	smpsAlterNote       $05
00086BA8 E701                       	dc.b	smpsNoAttack, $01
00086BAA E10B                       	smpsAlterNote       $0B
00086BAC E701                       	dc.b	smpsNoAttack, $01
00086BAE E10C                       	smpsAlterNote       $0C
00086BB0 E701                       	dc.b	smpsNoAttack, $01
00086BB2 E108                       	smpsAlterNote       $08
00086BB4 E701                       	dc.b	smpsNoAttack, $01
00086BB6 E102                       	smpsAlterNote       $02
00086BB8 E701 E701 800E             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $0E
00086BC0 E10B                       	smpsAlterNote       $0B
00086BC2 BA01 8001                  	dc.b	nA4, $01, nRst, $01
00086BC6 E10C                       	smpsAlterNote       $0C
00086BC8 BB01 8001                  	dc.b	nBb4, $01, nRst, $01
00086BCC E10B                       	smpsAlterNote       $0B
00086BCE BA03 BA06 8001             	dc.b	nA4, $03, nA4, $06, nRst, $01
00086BD4 E107                       	smpsAlterNote       $07
00086BD6 BF03                       	dc.b	nD5, $03
00086BD8 E108                       	smpsAlterNote       $08
00086BDA C103 8001                  	dc.b	nE5, $03, nRst, $01
00086BDE E109                       	smpsAlterNote       $09
00086BE0 C203 C403 8001             	dc.b	nF5, $03, nG5, $03, nRst, $01
00086BE6 E10B                       	smpsAlterNote       $0B
00086BE8 C606 8001                  	dc.b	nA5, $06, nRst, $01
00086BEC E107                       	smpsAlterNote       $07
00086BEE BF02 8001                  	dc.b	nD5, $02, nRst, $01
00086BF2 E106                       	smpsAlterNote       $06
00086BF4 C90D                       	dc.b	nC6, $0D
00086BF6 E103                       	smpsAlterNote       $03
00086BF8 E701                       	dc.b	smpsNoAttack, $01
00086BFA E1FF                       	smpsAlterNote       $FF
00086BFC E701                       	dc.b	smpsNoAttack, $01
00086BFE E103                       	smpsAlterNote       $03
00086C00 E701                       	dc.b	smpsNoAttack, $01
00086C02 E109                       	smpsAlterNote       $09
00086C04 E701                       	dc.b	smpsNoAttack, $01
00086C06 E10A                       	smpsAlterNote       $0A
00086C08 E701                       	dc.b	smpsNoAttack, $01
00086C0A E106                       	smpsAlterNote       $06
00086C0C E701                       	dc.b	smpsNoAttack, $01
00086C0E E100                       	smpsAlterNote       $00
00086C10 E701                       	dc.b	smpsNoAttack, $01
00086C12 E10C                       	smpsAlterNote       $0C
00086C14 C703 8001                  	dc.b	nBb5, $03, nRst, $01
00086C18 E10B                       	smpsAlterNote       $0B
00086C1A C603                       	dc.b	nA5, $03
00086C1C E109                       	smpsAlterNote       $09
00086C1E C403 8001                  	dc.b	nG5, $03, nRst, $01
00086C22 E10B                       	smpsAlterNote       $0B
00086C24 C60D                       	dc.b	nA5, $0D
00086C26 E105                       	smpsAlterNote       $05
00086C28 E701                       	dc.b	smpsNoAttack, $01
00086C2A E104                       	smpsAlterNote       $04
00086C2C E701                       	dc.b	smpsNoAttack, $01
00086C2E E108                       	smpsAlterNote       $08
00086C30 E701                       	dc.b	smpsNoAttack, $01
00086C32 E10E                       	smpsAlterNote       $0E
00086C34 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086C38 E10B                       	smpsAlterNote       $0B
00086C3A E701                       	dc.b	smpsNoAttack, $01
00086C3C E105                       	smpsAlterNote       $05
00086C3E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086C42 E10B                       	smpsAlterNote       $0B
00086C44 E701                       	dc.b	smpsNoAttack, $01
00086C46 E10E                       	smpsAlterNote       $0E
00086C48 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086C4C E108                       	smpsAlterNote       $08
00086C4E E701                       	dc.b	smpsNoAttack, $01
00086C50 E104                       	smpsAlterNote       $04
00086C52 E701                       	dc.b	smpsNoAttack, $01
00086C54 E105                       	smpsAlterNote       $05
00086C56 E701                       	dc.b	smpsNoAttack, $01
00086C58 E10B                       	smpsAlterNote       $0B
00086C5A E701                       	dc.b	smpsNoAttack, $01
00086C5C E10F                       	smpsAlterNote       $0F
00086C5E E701                       	dc.b	smpsNoAttack, $01
00086C60 E10B                       	smpsAlterNote       $0B
00086C62 E701                       	dc.b	smpsNoAttack, $01
00086C64 E108                       	smpsAlterNote       $08
00086C66 E701                       	dc.b	smpsNoAttack, $01
00086C68 E104                       	smpsAlterNote       $04
00086C6A E701                       	dc.b	smpsNoAttack, $01
00086C6C E108                       	smpsAlterNote       $08
00086C6E E701                       	dc.b	smpsNoAttack, $01
00086C70 E10E                       	smpsAlterNote       $0E
00086C72 E701                       	dc.b	smpsNoAttack, $01
00086C74 E10F                       	smpsAlterNote       $0F
00086C76 E701                       	dc.b	smpsNoAttack, $01
00086C78 E10B                       	smpsAlterNote       $0B
00086C7A E701                       	dc.b	smpsNoAttack, $01
00086C7C E105                       	smpsAlterNote       $05
00086C7E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086C82 E108                       	smpsAlterNote       $08
00086C84 E701                       	dc.b	smpsNoAttack, $01
00086C86 E10E                       	smpsAlterNote       $0E
00086C88 E701                       	dc.b	smpsNoAttack, $01
00086C8A E10F                       	smpsAlterNote       $0F
00086C8C 800F                       	dc.b	nRst, $0F
00086C8E E107                       	smpsAlterNote       $07
00086C90 BF02 8001                  	dc.b	nD5, $02, nRst, $01
00086C94 E108                       	smpsAlterNote       $08
00086C96 C103                       	dc.b	nE5, $03
00086C98 E109                       	smpsAlterNote       $09
00086C9A C203 8001 C403             	dc.b	nF5, $03, nRst, $01, nG5, $03
00086CA0 E10B                       	smpsAlterNote       $0B
00086CA2 C607                       	dc.b	nA5, $07
00086CA4 E107                       	smpsAlterNote       $07
00086CA6 BF03 8001                  	dc.b	nD5, $03, nRst, $01
00086CAA E106                       	smpsAlterNote       $06
00086CAC C90D                       	dc.b	nC6, $0D
00086CAE E107                       	smpsAlterNote       $07
00086CB0 CB03 8001                  	dc.b	nD6, $03, nRst, $01
00086CB4 E10C                       	smpsAlterNote       $0C
00086CB6 C704                       	dc.b	nBb5, $04
00086CB8 E10B                       	smpsAlterNote       $0B
00086CBA C604 8001                  	dc.b	nA5, $04, nRst, $01
00086CBE E109                       	smpsAlterNote       $09
00086CC0 C404                       	dc.b	nG5, $04
00086CC2 E10B                       	smpsAlterNote       $0B
00086CC4 C60D                       	dc.b	nA5, $0D
00086CC6 E108                       	smpsAlterNote       $08
00086CC8 E701                       	dc.b	smpsNoAttack, $01
00086CCA E105                       	smpsAlterNote       $05
00086CCC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086CD0 E10B                       	smpsAlterNote       $0B
00086CD2 E701                       	dc.b	smpsNoAttack, $01
00086CD4 E10F                       	smpsAlterNote       $0F
00086CD6 E701                       	dc.b	smpsNoAttack, $01
00086CD8 E10E                       	smpsAlterNote       $0E
00086CDA E701                       	dc.b	smpsNoAttack, $01
00086CDC E108                       	smpsAlterNote       $08
00086CDE E701                       	dc.b	smpsNoAttack, $01
00086CE0 E104                       	smpsAlterNote       $04
00086CE2 E701                       	dc.b	smpsNoAttack, $01
00086CE4 E108                       	smpsAlterNote       $08
00086CE6 E701                       	dc.b	smpsNoAttack, $01
00086CE8 E10B                       	smpsAlterNote       $0B
00086CEA E701                       	dc.b	smpsNoAttack, $01
00086CEC E10F                       	smpsAlterNote       $0F
00086CEE E701                       	dc.b	smpsNoAttack, $01
00086CF0 E10B                       	smpsAlterNote       $0B
00086CF2 E701                       	dc.b	smpsNoAttack, $01
00086CF4 E105                       	smpsAlterNote       $05
00086CF6 E701                       	dc.b	smpsNoAttack, $01
00086CF8 E104                       	smpsAlterNote       $04
00086CFA E701                       	dc.b	smpsNoAttack, $01
00086CFC E108                       	smpsAlterNote       $08
00086CFE E701                       	dc.b	smpsNoAttack, $01
00086D00 E10E                       	smpsAlterNote       $0E
00086D02 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086D06 E10B                       	smpsAlterNote       $0B
00086D08 E701                       	dc.b	smpsNoAttack, $01
00086D0A E105                       	smpsAlterNote       $05
00086D0C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086D10 E10B                       	smpsAlterNote       $0B
00086D12 E701                       	dc.b	smpsNoAttack, $01
00086D14 E10E                       	smpsAlterNote       $0E
00086D16 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086D1A E108                       	smpsAlterNote       $08
00086D1C E701                       	dc.b	smpsNoAttack, $01
00086D1E E105                       	smpsAlterNote       $05
00086D20 8001                       	dc.b	nRst, $01
00086D22 E109                       	smpsAlterNote       $09
00086D24 C401 8001                  	dc.b	nG5, $01, nRst, $01
00086D28 E10B                       	smpsAlterNote       $0B
00086D2A C501 C60E C604 8001        	dc.b	nAb5, $01, nA5, $0E, nA5, $04, nRst, $01
00086D32 E109                       	smpsAlterNote       $09
00086D34 C404                       	dc.b	nG5, $04
00086D36 E10B                       	smpsAlterNote       $0B
00086D38 C604 8001                  	dc.b	nA5, $04, nRst, $01
00086D3C E107                       	smpsAlterNote       $07
00086D3E BF0D                       	dc.b	nD5, $0D
00086D40 E101                       	smpsAlterNote       $01
00086D42 E701                       	dc.b	smpsNoAttack, $01
00086D44 E100                       	smpsAlterNote       $00
00086D46 E701                       	dc.b	smpsNoAttack, $01
00086D48 E104                       	smpsAlterNote       $04
00086D4A E701                       	dc.b	smpsNoAttack, $01
00086D4C E10A                       	smpsAlterNote       $0A
00086D4E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086D52 E107                       	smpsAlterNote       $07
00086D54 E701                       	dc.b	smpsNoAttack, $01
00086D56 E101                       	smpsAlterNote       $01
00086D58 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086D5C E107                       	smpsAlterNote       $07
00086D5E E701                       	dc.b	smpsNoAttack, $01
00086D60 E10A                       	smpsAlterNote       $0A
00086D62 E701                       	dc.b	smpsNoAttack, $01
00086D64 E10B                       	smpsAlterNote       $0B
00086D66 8001                       	dc.b	nRst, $01
00086D68 E108                       	smpsAlterNote       $08
00086D6A 8001                       	dc.b	nRst, $01
00086D6C E109                       	smpsAlterNote       $09
00086D6E 8001 C401                  	dc.b	nRst, $01, nG5, $01
00086D72 E10B                       	smpsAlterNote       $0B
00086D74 C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
00086D7C E108                       	smpsAlterNote       $08
00086D7E CD06 8001                  	dc.b	nE6, $06, nRst, $01
00086D82 E109                       	smpsAlterNote       $09
00086D84 CE06 8001                  	dc.b	nF6, $06, nRst, $01
00086D88 E108                       	smpsAlterNote       $08
00086D8A CD02 8001                  	dc.b	nE6, $02, nRst, $01
00086D8E E106                       	smpsAlterNote       $06
00086D90 C903                       	dc.b	nC6, $03
00086D92 E109                       	smpsAlterNote       $09
00086D94 C403 8001                  	dc.b	nG5, $03, nRst, $01
00086D98 E10C                       	smpsAlterNote       $0C
00086D9A C70D                       	dc.b	nBb5, $0D
00086D9C E109                       	smpsAlterNote       $09
00086D9E E701                       	dc.b	smpsNoAttack, $01
00086DA0 E105                       	smpsAlterNote       $05
00086DA2 E701                       	dc.b	smpsNoAttack, $01
00086DA4 E109                       	smpsAlterNote       $09
00086DA6 E701                       	dc.b	smpsNoAttack, $01
00086DA8 E10F                       	smpsAlterNote       $0F
00086DAA E701                       	dc.b	smpsNoAttack, $01
00086DAC E110                       	smpsAlterNote       $10
00086DAE E701                       	dc.b	smpsNoAttack, $01
00086DB0 E10C                       	smpsAlterNote       $0C
00086DB2 E701                       	dc.b	smpsNoAttack, $01
00086DB4 E106                       	smpsAlterNote       $06
00086DB6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086DBA E109                       	smpsAlterNote       $09
00086DBC E701                       	dc.b	smpsNoAttack, $01
00086DBE E10F                       	smpsAlterNote       $0F
00086DC0 E701                       	dc.b	smpsNoAttack, $01
00086DC2 E110                       	smpsAlterNote       $10
00086DC4 8001                       	dc.b	nRst, $01
00086DC6 E10B                       	smpsAlterNote       $0B
00086DC8 C606 8001                  	dc.b	nA5, $06, nRst, $01
00086DCC E109                       	smpsAlterNote       $09
00086DCE C40D                       	dc.b	nG5, $0D
00086DD0 E103                       	smpsAlterNote       $03
00086DD2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086DD6 E106                       	smpsAlterNote       $06
00086DD8 E701                       	dc.b	smpsNoAttack, $01
00086DDA E10C                       	smpsAlterNote       $0C
00086DDC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086DE0 E106                       	smpsAlterNote       $06
00086DE2 E701                       	dc.b	smpsNoAttack, $01
00086DE4 E103                       	smpsAlterNote       $03
00086DE6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086DEA E109                       	smpsAlterNote       $09
00086DEC E701                       	dc.b	smpsNoAttack, $01
00086DEE E10D                       	smpsAlterNote       $0D
00086DF0 E701                       	dc.b	smpsNoAttack, $01
00086DF2 E10C                       	smpsAlterNote       $0C
00086DF4 E701                       	dc.b	smpsNoAttack, $01
00086DF6 E106                       	smpsAlterNote       $06
00086DF8 E701                       	dc.b	smpsNoAttack, $01
00086DFA E102                       	smpsAlterNote       $02
00086DFC E701                       	dc.b	smpsNoAttack, $01
00086DFE E103                       	smpsAlterNote       $03
00086E00 8001                       	dc.b	nRst, $01
00086E02 E10B                       	smpsAlterNote       $0B
00086E04 C60D                       	dc.b	nA5, $0D
00086E06 E108                       	smpsAlterNote       $08
00086E08 E701                       	dc.b	smpsNoAttack, $01
00086E0A E104                       	smpsAlterNote       $04
00086E0C E701                       	dc.b	smpsNoAttack, $01
00086E0E E108                       	smpsAlterNote       $08
00086E10 E701                       	dc.b	smpsNoAttack, $01
00086E12 E10B                       	smpsAlterNote       $0B
00086E14 E701                       	dc.b	smpsNoAttack, $01
00086E16 E10F                       	smpsAlterNote       $0F
00086E18 E701                       	dc.b	smpsNoAttack, $01
00086E1A E10B                       	smpsAlterNote       $0B
00086E1C E701                       	dc.b	smpsNoAttack, $01
00086E1E E105                       	smpsAlterNote       $05
00086E20 E701                       	dc.b	smpsNoAttack, $01
00086E22 E104                       	smpsAlterNote       $04
00086E24 E701                       	dc.b	smpsNoAttack, $01
00086E26 E108                       	smpsAlterNote       $08
00086E28 E701                       	dc.b	smpsNoAttack, $01
00086E2A E10E                       	smpsAlterNote       $0E
00086E2C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086E30 E10B                       	smpsAlterNote       $0B
00086E32 E701                       	dc.b	smpsNoAttack, $01
00086E34 E105                       	smpsAlterNote       $05
00086E36 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086E3A E10C                       	smpsAlterNote       $0C
00086E3C C70E                       	dc.b	nBb5, $0E
00086E3E E106                       	smpsAlterNote       $06
00086E40 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086E44 E10C                       	smpsAlterNote       $0C
00086E46 E701                       	dc.b	smpsNoAttack, $01
00086E48 E10F                       	smpsAlterNote       $0F
00086E4A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086E4E E109                       	smpsAlterNote       $09
00086E50 E701                       	dc.b	smpsNoAttack, $01
00086E52 E105                       	smpsAlterNote       $05
00086E54 E701                       	dc.b	smpsNoAttack, $01
00086E56 E106                       	smpsAlterNote       $06
00086E58 E701                       	dc.b	smpsNoAttack, $01
00086E5A E10C                       	smpsAlterNote       $0C
00086E5C E701                       	dc.b	smpsNoAttack, $01
00086E5E E110                       	smpsAlterNote       $10
00086E60 E701                       	dc.b	smpsNoAttack, $01
00086E62 E10C                       	smpsAlterNote       $0C
00086E64 E701                       	dc.b	smpsNoAttack, $01
00086E66 E109                       	smpsAlterNote       $09
00086E68 E701                       	dc.b	smpsNoAttack, $01
00086E6A E105                       	smpsAlterNote       $05
00086E6C E701                       	dc.b	smpsNoAttack, $01
00086E6E E106                       	smpsAlterNote       $06
00086E70 8001 C90C                  	dc.b	nRst, $01, nC6, $0C
00086E74 E107                       	smpsAlterNote       $07
00086E76 CA01 E7CB 01               	dc.b	nCs6, $01, smpsNoAttack, nD6, $01
00086E7B E108                       	smpsAlterNote       $08
00086E7D CD0D                       	dc.b	nE6, $0D
00086E7F E107                       	smpsAlterNote       $07
00086E81 CB0D                       	dc.b	nD6, $0D
00086E83 E104                       	smpsAlterNote       $04
00086E85 E701                       	dc.b	smpsNoAttack, $01
00086E87 E100                       	smpsAlterNote       $00
00086E89 E701                       	dc.b	smpsNoAttack, $01
00086E8B E101                       	smpsAlterNote       $01
00086E8D E701                       	dc.b	smpsNoAttack, $01
00086E8F E107                       	smpsAlterNote       $07
00086E91 E701                       	dc.b	smpsNoAttack, $01
00086E93 E10B                       	smpsAlterNote       $0B
00086E95 E701                       	dc.b	smpsNoAttack, $01
00086E97 E107                       	smpsAlterNote       $07
00086E99 E701                       	dc.b	smpsNoAttack, $01
00086E9B E104                       	smpsAlterNote       $04
00086E9D E701                       	dc.b	smpsNoAttack, $01
00086E9F E100                       	smpsAlterNote       $00
00086EA1 E701                       	dc.b	smpsNoAttack, $01
00086EA3 E104                       	smpsAlterNote       $04
00086EA5 E701                       	dc.b	smpsNoAttack, $01
00086EA7 E10A                       	smpsAlterNote       $0A
00086EA9 E701                       	dc.b	smpsNoAttack, $01
00086EAB E10B                       	smpsAlterNote       $0B
00086EAD E701                       	dc.b	smpsNoAttack, $01
00086EAF E108                       	smpsAlterNote       $08
00086EB1 CC0D                       	dc.b	nEb6, $0D
00086EB3 E105                       	smpsAlterNote       $05
00086EB5 E701                       	dc.b	smpsNoAttack, $01
00086EB7 E101                       	smpsAlterNote       $01
00086EB9 E701                       	dc.b	smpsNoAttack, $01
00086EBB E102                       	smpsAlterNote       $02
00086EBD E701                       	dc.b	smpsNoAttack, $01
00086EBF E108                       	smpsAlterNote       $08
00086EC1 E701                       	dc.b	smpsNoAttack, $01
00086EC3 E106                       	smpsAlterNote       $06
00086EC5 C903 8004 C902 C902 8001+  	dc.b	nC6, $03, nRst, $04, nC6, $02, nC6, $02, nRst, $01, nC6, $01
00086ED1 8001                       	dc.b	nRst, $01
00086ED3 E107                       	smpsAlterNote       $07
00086ED5 CB0D                       	dc.b	nD6, $0D
00086ED7 E104                       	smpsAlterNote       $04
00086ED9 E701                       	dc.b	smpsNoAttack, $01
00086EDB E100                       	smpsAlterNote       $00
00086EDD E701                       	dc.b	smpsNoAttack, $01
00086EDF E104                       	smpsAlterNote       $04
00086EE1 E701                       	dc.b	smpsNoAttack, $01
00086EE3 E107                       	smpsAlterNote       $07
00086EE5 E701                       	dc.b	smpsNoAttack, $01
00086EE7 E10B                       	smpsAlterNote       $0B
00086EE9 E701                       	dc.b	smpsNoAttack, $01
00086EEB E107                       	smpsAlterNote       $07
00086EED E701                       	dc.b	smpsNoAttack, $01
00086EEF E101                       	smpsAlterNote       $01
00086EF1 E701                       	dc.b	smpsNoAttack, $01
00086EF3 E100                       	smpsAlterNote       $00
00086EF5 E701                       	dc.b	smpsNoAttack, $01
00086EF7 E104                       	smpsAlterNote       $04
00086EF9 E701                       	dc.b	smpsNoAttack, $01
00086EFB E10A                       	smpsAlterNote       $0A
00086EFD E701                       	dc.b	smpsNoAttack, $01
00086EFF E10B                       	smpsAlterNote       $0B
00086F01 8001                       	dc.b	nRst, $01
00086F03 E109                       	smpsAlterNote       $09
00086F05 CE0A                       	dc.b	nF6, $0A
00086F07 E108                       	smpsAlterNote       $08
00086F09 CC07                       	dc.b	nEb6, $07
00086F0B E106                       	smpsAlterNote       $06
00086F0D C903 8004 C902 C902 C902+  	dc.b	nC6, $03, nRst, $04, nC6, $02, nC6, $02, nC6, $02, nRst, $01
00086F19 E107                       	smpsAlterNote       $07
00086F1B CB0D                       	dc.b	nD6, $0D
00086F1D E101                       	smpsAlterNote       $01
00086F1F E701                       	dc.b	smpsNoAttack, $01
00086F21 E100                       	smpsAlterNote       $00
00086F23 E701                       	dc.b	smpsNoAttack, $01
00086F25 E104                       	smpsAlterNote       $04
00086F27 E701                       	dc.b	smpsNoAttack, $01
00086F29 E10A                       	smpsAlterNote       $0A
00086F2B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086F2F E107                       	smpsAlterNote       $07
00086F31 E701                       	dc.b	smpsNoAttack, $01
00086F33 E101                       	smpsAlterNote       $01
00086F35 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086F39 E107                       	smpsAlterNote       $07
00086F3B E701                       	dc.b	smpsNoAttack, $01
00086F3D E10A                       	smpsAlterNote       $0A
00086F3F E701                       	dc.b	smpsNoAttack, $01
00086F41 E10B                       	smpsAlterNote       $0B
00086F43 8001                       	dc.b	nRst, $01
00086F45 E108                       	smpsAlterNote       $08
00086F47 CC0D                       	dc.b	nEb6, $0D
00086F49 E102                       	smpsAlterNote       $02
00086F4B E701                       	dc.b	smpsNoAttack, $01
00086F4D E101                       	smpsAlterNote       $01
00086F4F E701                       	dc.b	smpsNoAttack, $01
00086F51 E105                       	smpsAlterNote       $05
00086F53 E701                       	dc.b	smpsNoAttack, $01
00086F55 E108                       	smpsAlterNote       $08
00086F57 8001                       	dc.b	nRst, $01
00086F59 E106                       	smpsAlterNote       $06
00086F5B C903 8004 C901 8001 C902+  	dc.b	nC6, $03, nRst, $04, nC6, $01, nRst, $01, nC6, $02, nC6, $02
00086F67 8001                       	dc.b	nRst, $01
00086F69 E107                       	smpsAlterNote       $07
00086F6B CB0D                       	dc.b	nD6, $0D
00086F6D E101                       	smpsAlterNote       $01
00086F6F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086F73 E104                       	smpsAlterNote       $04
00086F75 E701                       	dc.b	smpsNoAttack, $01
00086F77 E10A                       	smpsAlterNote       $0A
00086F79 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086F7D E104                       	smpsAlterNote       $04
00086F7F E701                       	dc.b	smpsNoAttack, $01
00086F81 E101                       	smpsAlterNote       $01
00086F83 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00086F87 E107                       	smpsAlterNote       $07
00086F89 E701                       	dc.b	smpsNoAttack, $01
00086F8B E10B                       	smpsAlterNote       $0B
00086F8D E701                       	dc.b	smpsNoAttack, $01
00086F8F E10A                       	smpsAlterNote       $0A
00086F91 E701                       	dc.b	smpsNoAttack, $01
00086F93 E104                       	smpsAlterNote       $04
00086F95 E701                       	dc.b	smpsNoAttack, $01
00086F97 E100                       	smpsAlterNote       $00
00086F99 E701                       	dc.b	smpsNoAttack, $01
00086F9B E101                       	smpsAlterNote       $01
00086F9D 801C                       	dc.b	nRst, $1C
00086FA1 E107                       	smpsAlterNote       $07
00086FA3 BF03 8001                  	dc.b	nD5, $03, nRst, $01
00086FA7 E603                       	smpsAlterVol        $03
00086FA9 F6F1 AD                    	smpsJump            music84_Jump03
00086FAC                            
00086FAC                            ; FM3 Data
00086FAC                            music84_FM3:
00086FAC E0C0                       	smpsPan             panCenter, $00
00086FB0 E109                       	smpsAlterNote       $09
00086FB2 C203 8007                  	dc.b	nF5, $03, nRst, $07
00086FB6 E108                       	smpsAlterNote       $08
00086FB8 C103 800B                  	dc.b	nE5, $03, nRst, $0B
00086FBC E10B                       	smpsAlterNote       $0B
00086FBE BA03 8006                  	dc.b	nA4, $03, nRst, $06
00086FC4 E040                       	smpsPan             panRight, $00
00086FC6 E110                       	smpsAlterNote       $10
00086FC8 E6F9                       	smpsAlterVol        $F9
00086FCA C702 8001                  	dc.b	nBb5, $02, nRst, $01
00086FCE E10F                       	smpsAlterNote       $0F
00086FD0 C603                       	dc.b	nA5, $03
00086FD2 E10D                       	smpsAlterNote       $0D
00086FD4 C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
00086FDA E10C                       	smpsAlterNote       $0C
00086FDC C103 8001                  	dc.b	nE5, $03, nRst, $01
00086FE0 E10A                       	smpsAlterNote       $0A
00086FE2 BD02 8001                  	dc.b	nC5, $02, nRst, $01
00086FE6 E10F                       	smpsAlterNote       $0F
00086FE8 BA01 8001                  	dc.b	nA4, $01, nRst, $01
00086FEC E0C0                       	smpsPan             panCenter, $00
00086FF0 E109                       	smpsAlterNote       $09
00086FF2 E609                       	smpsAlterVol        $09
00086FF4 B603                       	dc.b	nF4, $03
00086FF6                            
00086FF6                            music84_Jump02:
00086FF6 E70A                       	dc.b	smpsNoAttack, $0A
00086FF8 E103                       	smpsAlterNote       $03
00086FFA E701                       	dc.b	smpsNoAttack, $01
00086FFC E102                       	smpsAlterNote       $02
00086FFE E701                       	dc.b	smpsNoAttack, $01
00087000 E106                       	smpsAlterNote       $06
00087002 E701                       	dc.b	smpsNoAttack, $01
00087004 E10C                       	smpsAlterNote       $0C
00087006 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008700A E109                       	smpsAlterNote       $09
0008700C E701                       	dc.b	smpsNoAttack, $01
0008700E E103                       	smpsAlterNote       $03
00087010 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087014 E109                       	smpsAlterNote       $09
00087016 E701                       	dc.b	smpsNoAttack, $01
00087018 E10C                       	smpsAlterNote       $0C
0008701A E701                       	dc.b	smpsNoAttack, $01
0008701C E10D                       	smpsAlterNote       $0D
0008701E 8001                       	dc.b	nRst, $01
00087020 E109                       	smpsAlterNote       $09
00087022 B80D                       	dc.b	nG4, $0D
00087024 E103                       	smpsAlterNote       $03
00087026 E701                       	dc.b	smpsNoAttack, $01
00087028 E102                       	smpsAlterNote       $02
0008702A E701                       	dc.b	smpsNoAttack, $01
0008702C E106                       	smpsAlterNote       $06
0008702E E701                       	dc.b	smpsNoAttack, $01
00087030 E10C                       	smpsAlterNote       $0C
00087032 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087036 E109                       	smpsAlterNote       $09
00087038 E701                       	dc.b	smpsNoAttack, $01
0008703A E103                       	smpsAlterNote       $03
0008703C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087040 E109                       	smpsAlterNote       $09
00087042 E701                       	dc.b	smpsNoAttack, $01
00087044 E10C                       	smpsAlterNote       $0C
00087046 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008704A E106                       	smpsAlterNote       $06
0008704C E701                       	dc.b	smpsNoAttack, $01
0008704E E102                       	smpsAlterNote       $02
00087050 E701                       	dc.b	smpsNoAttack, $01
00087052 E103                       	smpsAlterNote       $03
00087054 E701                       	dc.b	smpsNoAttack, $01
00087056 E109                       	smpsAlterNote       $09
00087058 E701                       	dc.b	smpsNoAttack, $01
0008705A E10D                       	smpsAlterNote       $0D
0008705C E701                       	dc.b	smpsNoAttack, $01
0008705E E109                       	smpsAlterNote       $09
00087060 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00087064 E10B                       	smpsAlterNote       $0B
00087066 BA0D                       	dc.b	nA4, $0D
00087068 E105                       	smpsAlterNote       $05
0008706A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008706E E108                       	smpsAlterNote       $08
00087070 E701                       	dc.b	smpsNoAttack, $01
00087072 E10E                       	smpsAlterNote       $0E
00087074 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087078 E108                       	smpsAlterNote       $08
0008707A E701                       	dc.b	smpsNoAttack, $01
0008707C E104                       	smpsAlterNote       $04
0008707E E701                       	dc.b	smpsNoAttack, $01
00087080 E105                       	smpsAlterNote       $05
00087082 E701                       	dc.b	smpsNoAttack, $01
00087084 E10B                       	smpsAlterNote       $0B
00087086 E701                       	dc.b	smpsNoAttack, $01
00087088 E10F                       	smpsAlterNote       $0F
0008708A E701                       	dc.b	smpsNoAttack, $01
0008708C E10B                       	smpsAlterNote       $0B
0008708E E701                       	dc.b	smpsNoAttack, $01
00087090 E108                       	smpsAlterNote       $08
00087092 E701                       	dc.b	smpsNoAttack, $01
00087094 E104                       	smpsAlterNote       $04
00087096 E701                       	dc.b	smpsNoAttack, $01
00087098 E108                       	smpsAlterNote       $08
0008709A E701                       	dc.b	smpsNoAttack, $01
0008709C E10E                       	smpsAlterNote       $0E
0008709E E701                       	dc.b	smpsNoAttack, $01
000870A0 E10F                       	smpsAlterNote       $0F
000870A2 E701                       	dc.b	smpsNoAttack, $01
000870A4 E10B                       	smpsAlterNote       $0B
000870A6 E701                       	dc.b	smpsNoAttack, $01
000870A8 E105                       	smpsAlterNote       $05
000870AA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000870AE E108                       	smpsAlterNote       $08
000870B0 E701                       	dc.b	smpsNoAttack, $01
000870B2 E10E                       	smpsAlterNote       $0E
000870B4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000870B8 E108                       	smpsAlterNote       $08
000870BA E701                       	dc.b	smpsNoAttack, $01
000870BC E105                       	smpsAlterNote       $05
000870BE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000870C2 E10B                       	smpsAlterNote       $0B
000870C4 E701                       	dc.b	smpsNoAttack, $01
000870C6 E10F                       	smpsAlterNote       $0F
000870C8 E701                       	dc.b	smpsNoAttack, $01
000870CA E10E                       	smpsAlterNote       $0E
000870CC E701                       	dc.b	smpsNoAttack, $01
000870CE E108                       	smpsAlterNote       $08
000870D0 E701                       	dc.b	smpsNoAttack, $01
000870D2 E104                       	smpsAlterNote       $04
000870D4 E701                       	dc.b	smpsNoAttack, $01
000870D6 E105                       	smpsAlterNote       $05
000870D8 8001                       	dc.b	nRst, $01
000870DA E108                       	smpsAlterNote       $08
000870DC B50A                       	dc.b	nE4, $0A
000870DE E109                       	smpsAlterNote       $09
000870E0 B60D                       	dc.b	nF4, $0D
000870E2 E106                       	smpsAlterNote       $06
000870E4 E701                       	dc.b	smpsNoAttack, $01
000870E6 E103                       	smpsAlterNote       $03
000870E8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000870EC E109                       	smpsAlterNote       $09
000870EE E701                       	dc.b	smpsNoAttack, $01
000870F0 E10D                       	smpsAlterNote       $0D
000870F2 E701                       	dc.b	smpsNoAttack, $01
000870F4 E10C                       	smpsAlterNote       $0C
000870F6 E701                       	dc.b	smpsNoAttack, $01
000870F8 E106                       	smpsAlterNote       $06
000870FA E701                       	dc.b	smpsNoAttack, $01
000870FC E102                       	smpsAlterNote       $02
000870FE E701                       	dc.b	smpsNoAttack, $01
00087100 E106                       	smpsAlterNote       $06
00087102 E701                       	dc.b	smpsNoAttack, $01
00087104 E109                       	smpsAlterNote       $09
00087106 E701                       	dc.b	smpsNoAttack, $01
00087108 E10D                       	smpsAlterNote       $0D
0008710A E701                       	dc.b	smpsNoAttack, $01
0008710C E109                       	smpsAlterNote       $09
0008710E B80D                       	dc.b	nG4, $0D
00087110 E106                       	smpsAlterNote       $06
00087112 E701                       	dc.b	smpsNoAttack, $01
00087114 E103                       	smpsAlterNote       $03
00087116 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008711A E109                       	smpsAlterNote       $09
0008711C E701                       	dc.b	smpsNoAttack, $01
0008711E E10D                       	smpsAlterNote       $0D
00087120 E701                       	dc.b	smpsNoAttack, $01
00087122 E10C                       	smpsAlterNote       $0C
00087124 E701                       	dc.b	smpsNoAttack, $01
00087126 E106                       	smpsAlterNote       $06
00087128 E701                       	dc.b	smpsNoAttack, $01
0008712A E102                       	smpsAlterNote       $02
0008712C E701                       	dc.b	smpsNoAttack, $01
0008712E E106                       	smpsAlterNote       $06
00087130 E701                       	dc.b	smpsNoAttack, $01
00087132 E109                       	smpsAlterNote       $09
00087134 E701                       	dc.b	smpsNoAttack, $01
00087136 E10D                       	smpsAlterNote       $0D
00087138 E701                       	dc.b	smpsNoAttack, $01
0008713A E109                       	smpsAlterNote       $09
0008713C E701                       	dc.b	smpsNoAttack, $01
0008713E E103                       	smpsAlterNote       $03
00087140 E701                       	dc.b	smpsNoAttack, $01
00087142 E102                       	smpsAlterNote       $02
00087144 E701                       	dc.b	smpsNoAttack, $01
00087146 E106                       	smpsAlterNote       $06
00087148 E701                       	dc.b	smpsNoAttack, $01
0008714A E10C                       	smpsAlterNote       $0C
0008714C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087150 E109                       	smpsAlterNote       $09
00087152 E701                       	dc.b	smpsNoAttack, $01
00087154 E10B                       	smpsAlterNote       $0B
00087156 BA0D                       	dc.b	nA4, $0D
00087158 E108                       	smpsAlterNote       $08
0008715A E701                       	dc.b	smpsNoAttack, $01
0008715C E104                       	smpsAlterNote       $04
0008715E E701                       	dc.b	smpsNoAttack, $01
00087160 E108                       	smpsAlterNote       $08
00087162 E701                       	dc.b	smpsNoAttack, $01
00087164 E10B                       	smpsAlterNote       $0B
00087166 E701                       	dc.b	smpsNoAttack, $01
00087168 E10F                       	smpsAlterNote       $0F
0008716A E701                       	dc.b	smpsNoAttack, $01
0008716C E10B                       	smpsAlterNote       $0B
0008716E E701                       	dc.b	smpsNoAttack, $01
00087170 E105                       	smpsAlterNote       $05
00087172 E701                       	dc.b	smpsNoAttack, $01
00087174 E104                       	smpsAlterNote       $04
00087176 E701                       	dc.b	smpsNoAttack, $01
00087178 E108                       	smpsAlterNote       $08
0008717A E701                       	dc.b	smpsNoAttack, $01
0008717C E10E                       	smpsAlterNote       $0E
0008717E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087182 E10B                       	smpsAlterNote       $0B
00087184 E701                       	dc.b	smpsNoAttack, $01
00087186 E105                       	smpsAlterNote       $05
00087188 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008718C E10B                       	smpsAlterNote       $0B
0008718E E701                       	dc.b	smpsNoAttack, $01
00087190 E10E                       	smpsAlterNote       $0E
00087192 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087196 E108                       	smpsAlterNote       $08
00087198 E701                       	dc.b	smpsNoAttack, $01
0008719A E104                       	smpsAlterNote       $04
0008719C E701                       	dc.b	smpsNoAttack, $01
0008719E E105                       	smpsAlterNote       $05
000871A0 E701                       	dc.b	smpsNoAttack, $01
000871A2 E10B                       	smpsAlterNote       $0B
000871A4 E701                       	dc.b	smpsNoAttack, $01
000871A6 E10F                       	smpsAlterNote       $0F
000871A8 E701                       	dc.b	smpsNoAttack, $01
000871AA E10B                       	smpsAlterNote       $0B
000871AC E701                       	dc.b	smpsNoAttack, $01
000871AE E108                       	smpsAlterNote       $08
000871B0 E701                       	dc.b	smpsNoAttack, $01
000871B2 E105                       	smpsAlterNote       $05
000871B4 8001                       	dc.b	nRst, $01
000871B6 E109                       	smpsAlterNote       $09
000871B8 B609 8001                  	dc.b	nF4, $09, nRst, $01
000871BC E108                       	smpsAlterNote       $08
000871BE B506 8001                  	dc.b	nE4, $06, nRst, $01
000871C2 E107                       	smpsAlterNote       $07
000871C4 B30D 8001                  	dc.b	nD4, $0D, nRst, $01
000871C8 E108                       	smpsAlterNote       $08
000871CA B502 8001                  	dc.b	nE4, $02, nRst, $01
000871CE E109                       	smpsAlterNote       $09
000871D0 B603 B803 8001             	dc.b	nF4, $03, nG4, $03, nRst, $01
000871D6 E10B                       	smpsAlterNote       $0B
000871D8 BA0D                       	dc.b	nA4, $0D
000871DA E108                       	smpsAlterNote       $08
000871DC E701                       	dc.b	smpsNoAttack, $01
000871DE E104                       	smpsAlterNote       $04
000871E0 E701                       	dc.b	smpsNoAttack, $01
000871E2 E108                       	smpsAlterNote       $08
000871E4 E701                       	dc.b	smpsNoAttack, $01
000871E6 E10E                       	smpsAlterNote       $0E
000871E8 E701                       	dc.b	smpsNoAttack, $01
000871EA E10F                       	smpsAlterNote       $0F
000871EC E701                       	dc.b	smpsNoAttack, $01
000871EE E10B                       	smpsAlterNote       $0B
000871F0 E701                       	dc.b	smpsNoAttack, $01
000871F2 E105                       	smpsAlterNote       $05
000871F4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000871F8 E108                       	smpsAlterNote       $08
000871FA E701                       	dc.b	smpsNoAttack, $01
000871FC E10E                       	smpsAlterNote       $0E
000871FE E701                       	dc.b	smpsNoAttack, $01
00087200 E10F                       	smpsAlterNote       $0F
00087202 8001                       	dc.b	nRst, $01
00087204 E109                       	smpsAlterNote       $09
00087206 C20D                       	dc.b	nF5, $0D
00087208 E103                       	smpsAlterNote       $03
0008720A E701                       	dc.b	smpsNoAttack, $01
0008720C E102                       	smpsAlterNote       $02
0008720E E701                       	dc.b	smpsNoAttack, $01
00087210 E106                       	smpsAlterNote       $06
00087212 E701                       	dc.b	smpsNoAttack, $01
00087214 E10C                       	smpsAlterNote       $0C
00087216 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008721A E109                       	smpsAlterNote       $09
0008721C E701                       	dc.b	smpsNoAttack, $01
0008721E E103                       	smpsAlterNote       $03
00087220 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087224 E109                       	smpsAlterNote       $09
00087226 E701                       	dc.b	smpsNoAttack, $01
00087228 E10C                       	smpsAlterNote       $0C
0008722A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008722E E106                       	smpsAlterNote       $06
00087230 E701                       	dc.b	smpsNoAttack, $01
00087232 E102                       	smpsAlterNote       $02
00087234 E701                       	dc.b	smpsNoAttack, $01
00087236 E103                       	smpsAlterNote       $03
00087238 E701                       	dc.b	smpsNoAttack, $01
0008723A E109                       	smpsAlterNote       $09
0008723C E701                       	dc.b	smpsNoAttack, $01
0008723E E10D                       	smpsAlterNote       $0D
00087240 E701                       	dc.b	smpsNoAttack, $01
00087242 E109                       	smpsAlterNote       $09
00087244 E701                       	dc.b	smpsNoAttack, $01
00087246 E106                       	smpsAlterNote       $06
00087248 E701                       	dc.b	smpsNoAttack, $01
0008724A E102                       	smpsAlterNote       $02
0008724C E701                       	dc.b	smpsNoAttack, $01
0008724E E106                       	smpsAlterNote       $06
00087250 E701                       	dc.b	smpsNoAttack, $01
00087252 E10C                       	smpsAlterNote       $0C
00087254 E701                       	dc.b	smpsNoAttack, $01
00087256 E10D                       	smpsAlterNote       $0D
00087258 E701                       	dc.b	smpsNoAttack, $01
0008725A E109                       	smpsAlterNote       $09
0008725C E701                       	dc.b	smpsNoAttack, $01
0008725E E103                       	smpsAlterNote       $03
00087260 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087264 E106                       	smpsAlterNote       $06
00087266 E701                       	dc.b	smpsNoAttack, $01
00087268 E10C                       	smpsAlterNote       $0C
0008726A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008726E E106                       	smpsAlterNote       $06
00087270 E701                       	dc.b	smpsNoAttack, $01
00087272 E103                       	smpsAlterNote       $03
00087274 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087278 E109                       	smpsAlterNote       $09
0008727A E701                       	dc.b	smpsNoAttack, $01
0008727C E10D                       	smpsAlterNote       $0D
0008727E E701                       	dc.b	smpsNoAttack, $01
00087280 E10C                       	smpsAlterNote       $0C
00087282 E701                       	dc.b	smpsNoAttack, $01
00087284 E106                       	smpsAlterNote       $06
00087286 E701                       	dc.b	smpsNoAttack, $01
00087288 E102                       	smpsAlterNote       $02
0008728A E701                       	dc.b	smpsNoAttack, $01
0008728C E106                       	smpsAlterNote       $06
0008728E E701                       	dc.b	smpsNoAttack, $01
00087290 E109                       	smpsAlterNote       $09
00087292 E701                       	dc.b	smpsNoAttack, $01
00087294 E10D                       	smpsAlterNote       $0D
00087296 E701                       	dc.b	smpsNoAttack, $01
00087298 E109                       	smpsAlterNote       $09
0008729A E701                       	dc.b	smpsNoAttack, $01
0008729C E103                       	smpsAlterNote       $03
0008729E E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000872A2 E109                       	smpsAlterNote       $09
000872A4 C206                       	dc.b	nF5, $06
000872A6 E108                       	smpsAlterNote       $08
000872A8 C10E                       	dc.b	nE5, $0E
000872AA E102                       	smpsAlterNote       $02
000872AC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000872B0 E108                       	smpsAlterNote       $08
000872B2 E701                       	dc.b	smpsNoAttack, $01
000872B4 E10B                       	smpsAlterNote       $0B
000872B6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000872BA E105                       	smpsAlterNote       $05
000872BC E701                       	dc.b	smpsNoAttack, $01
000872BE E101                       	smpsAlterNote       $01
000872C0 E701                       	dc.b	smpsNoAttack, $01
000872C2 E102                       	smpsAlterNote       $02
000872C4 E701                       	dc.b	smpsNoAttack, $01
000872C6 E108                       	smpsAlterNote       $08
000872C8 E701                       	dc.b	smpsNoAttack, $01
000872CA E10C                       	smpsAlterNote       $0C
000872CC E701                       	dc.b	smpsNoAttack, $01
000872CE E107                       	smpsAlterNote       $07
000872D0 BF0E                       	dc.b	nD5, $0E
000872D2 E101                       	smpsAlterNote       $01
000872D4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000872D8 E107                       	smpsAlterNote       $07
000872DA E701                       	dc.b	smpsNoAttack, $01
000872DC E10A                       	smpsAlterNote       $0A
000872DE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000872E2 E104                       	smpsAlterNote       $04
000872E4 E701                       	dc.b	smpsNoAttack, $01
000872E6 E100                       	smpsAlterNote       $00
000872E8 E701                       	dc.b	smpsNoAttack, $01
000872EA E104                       	smpsAlterNote       $04
000872EC E701                       	dc.b	smpsNoAttack, $01
000872EE E107                       	smpsAlterNote       $07
000872F0 E701                       	dc.b	smpsNoAttack, $01
000872F2 E10B                       	smpsAlterNote       $0B
000872F4 E701                       	dc.b	smpsNoAttack, $01
000872F6 E107                       	smpsAlterNote       $07
000872F8 E701                       	dc.b	smpsNoAttack, $01
000872FA E101                       	smpsAlterNote       $01
000872FC E701                       	dc.b	smpsNoAttack, $01
000872FE E100                       	smpsAlterNote       $00
00087300 E701                       	dc.b	smpsNoAttack, $01
00087302 E104                       	smpsAlterNote       $04
00087304 E701                       	dc.b	smpsNoAttack, $01
00087306 E10A                       	smpsAlterNote       $0A
00087308 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008730C E107                       	smpsAlterNote       $07
0008730E E701                       	dc.b	smpsNoAttack, $01
00087310 E101                       	smpsAlterNote       $01
00087312 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087316 E107                       	smpsAlterNote       $07
00087318 E701                       	dc.b	smpsNoAttack, $01
0008731A E10A                       	smpsAlterNote       $0A
0008731C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087320 E104                       	smpsAlterNote       $04
00087322 E701                       	dc.b	smpsNoAttack, $01
00087324 E100                       	smpsAlterNote       $00
00087326 E701                       	dc.b	smpsNoAttack, $01
00087328 E101                       	smpsAlterNote       $01
0008732A E701                       	dc.b	smpsNoAttack, $01
0008732C E107                       	smpsAlterNote       $07
0008732E E701                       	dc.b	smpsNoAttack, $01
00087330 E10B                       	smpsAlterNote       $0B
00087332 E701                       	dc.b	smpsNoAttack, $01
00087334 E107                       	smpsAlterNote       $07
00087336 E701                       	dc.b	smpsNoAttack, $01
00087338 E104                       	smpsAlterNote       $04
0008733A E701                       	dc.b	smpsNoAttack, $01
0008733C E100                       	smpsAlterNote       $00
0008733E E701                       	dc.b	smpsNoAttack, $01
00087340 E104                       	smpsAlterNote       $04
00087342 E701                       	dc.b	smpsNoAttack, $01
00087344 E10A                       	smpsAlterNote       $0A
00087346 E701                       	dc.b	smpsNoAttack, $01
00087348 E10B                       	smpsAlterNote       $0B
0008734A E701                       	dc.b	smpsNoAttack, $01
0008734C E107                       	smpsAlterNote       $07
0008734E E701                       	dc.b	smpsNoAttack, $01
00087350 E101                       	smpsAlterNote       $01
00087352 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087356 E104                       	smpsAlterNote       $04
00087358 E701                       	dc.b	smpsNoAttack, $01
0008735A E10A                       	smpsAlterNote       $0A
0008735C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087360 E104                       	smpsAlterNote       $04
00087362 E701                       	dc.b	smpsNoAttack, $01
00087364 E101                       	smpsAlterNote       $01
00087366 E701                       	dc.b	smpsNoAttack, $01
0008736A E107                       	smpsAlterNote       $07
0008736C E6FF                       	smpsAlterVol        $FF
0008736E BF06 8001 BF03 BF03 8001+  	dc.b	nD5, $06, nRst, $01, nD5, $03, nD5, $03, nRst, $01, nCs5, $03
0008737A 8004                       	dc.b	nRst, $04
0008737E E109                       	smpsAlterNote       $09
00087380 E602                       	smpsAlterVol        $02
00087382 B803 B603 8001             	dc.b	nG4, $03, nF4, $03, nRst, $01
00087388 E108                       	smpsAlterNote       $08
0008738A B502 8001                  	dc.b	nE4, $02, nRst, $01
0008738E E109                       	smpsAlterNote       $09
00087390 B60D                       	dc.b	nF4, $0D
00087392 E106                       	smpsAlterNote       $06
00087394 E701                       	dc.b	smpsNoAttack, $01
00087396 E102                       	smpsAlterNote       $02
00087398 E701                       	dc.b	smpsNoAttack, $01
0008739A E106                       	smpsAlterNote       $06
0008739C E701                       	dc.b	smpsNoAttack, $01
0008739E E109                       	smpsAlterNote       $09
000873A0 E701                       	dc.b	smpsNoAttack, $01
000873A2 E10D                       	smpsAlterNote       $0D
000873A4 E701                       	dc.b	smpsNoAttack, $01
000873A6 E109                       	smpsAlterNote       $09
000873A8 E701                       	dc.b	smpsNoAttack, $01
000873AA E103                       	smpsAlterNote       $03
000873AC E701                       	dc.b	smpsNoAttack, $01
000873AE E102                       	smpsAlterNote       $02
000873B0 E701                       	dc.b	smpsNoAttack, $01
000873B2 E106                       	smpsAlterNote       $06
000873B4 E701                       	dc.b	smpsNoAttack, $01
000873B6 E10C                       	smpsAlterNote       $0C
000873B8 E701                       	dc.b	smpsNoAttack, $01
000873BA E10D                       	smpsAlterNote       $0D
000873BC 8001                       	dc.b	nRst, $01
000873BE E109                       	smpsAlterNote       $09
000873C0 B80D                       	dc.b	nG4, $0D
000873C2 E106                       	smpsAlterNote       $06
000873C4 E701                       	dc.b	smpsNoAttack, $01
000873C6 E102                       	smpsAlterNote       $02
000873C8 E701                       	dc.b	smpsNoAttack, $01
000873CA E106                       	smpsAlterNote       $06
000873CC E701                       	dc.b	smpsNoAttack, $01
000873CE E10C                       	smpsAlterNote       $0C
000873D0 E701                       	dc.b	smpsNoAttack, $01
000873D2 E10D                       	smpsAlterNote       $0D
000873D4 E701                       	dc.b	smpsNoAttack, $01
000873D6 E109                       	smpsAlterNote       $09
000873D8 E701                       	dc.b	smpsNoAttack, $01
000873DA E103                       	smpsAlterNote       $03
000873DC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000873E0 E106                       	smpsAlterNote       $06
000873E2 E701                       	dc.b	smpsNoAttack, $01
000873E4 E10C                       	smpsAlterNote       $0C
000873E6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000873EA E106                       	smpsAlterNote       $06
000873EC E701                       	dc.b	smpsNoAttack, $01
000873EE E103                       	smpsAlterNote       $03
000873F0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000873F4 E109                       	smpsAlterNote       $09
000873F6 E701                       	dc.b	smpsNoAttack, $01
000873F8 E10D                       	smpsAlterNote       $0D
000873FA E701                       	dc.b	smpsNoAttack, $01
000873FC E10C                       	smpsAlterNote       $0C
000873FE E701                       	dc.b	smpsNoAttack, $01
00087400 E109                       	smpsAlterNote       $09
00087402 8001                       	dc.b	nRst, $01
00087404 E10B                       	smpsAlterNote       $0B
00087406 BA03                       	dc.b	nA4, $03
00087408 E10C                       	smpsAlterNote       $0C
0008740A BB03 8001                  	dc.b	nBb4, $03, nRst, $01
0008740E E10B                       	smpsAlterNote       $0B
00087410 BA02 8001 C603             	dc.b	nA4, $02, nRst, $01, nA5, $03
00087416 E10C                       	smpsAlterNote       $0C
00087418 C703 8001                  	dc.b	nBb5, $03, nRst, $01
0008741C E10B                       	smpsAlterNote       $0B
0008741E C603 D203 8001             	dc.b	nA5, $03, nA6, $03, nRst, $01
00087424 E10C                       	smpsAlterNote       $0C
00087426 D303                       	dc.b	nBb6, $03
00087428 E10B                       	smpsAlterNote       $0B
0008742A D20D                       	dc.b	nA6, $0D
0008742C E108                       	smpsAlterNote       $08
0008742E E701                       	dc.b	smpsNoAttack, $01
00087430 E104                       	smpsAlterNote       $04
00087432 E701                       	dc.b	smpsNoAttack, $01
00087434 E105                       	smpsAlterNote       $05
00087436 E701                       	dc.b	smpsNoAttack, $01
00087438 E10B                       	smpsAlterNote       $0B
0008743A E701                       	dc.b	smpsNoAttack, $01
0008743C E10F                       	smpsAlterNote       $0F
0008743E E701                       	dc.b	smpsNoAttack, $01
00087440 E10B                       	smpsAlterNote       $0B
00087442 E701                       	dc.b	smpsNoAttack, $01
00087444 E108                       	smpsAlterNote       $08
00087446 E701                       	dc.b	smpsNoAttack, $01
00087448 E104                       	smpsAlterNote       $04
0008744A E701                       	dc.b	smpsNoAttack, $01
0008744C E108                       	smpsAlterNote       $08
0008744E E701                       	dc.b	smpsNoAttack, $01
00087450 E10E                       	smpsAlterNote       $0E
00087452 E701                       	dc.b	smpsNoAttack, $01
00087454 E10F                       	smpsAlterNote       $0F
00087456 E701                       	dc.b	smpsNoAttack, $01
00087458 E10B                       	smpsAlterNote       $0B
0008745A E701                       	dc.b	smpsNoAttack, $01
0008745C E105                       	smpsAlterNote       $05
0008745E E701 E701 8007             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $07
00087464 E109                       	smpsAlterNote       $09
00087466 CE07                       	dc.b	nF6, $07
00087468 E108                       	smpsAlterNote       $08
0008746A CD06 8001                  	dc.b	nE6, $06, nRst, $01
0008746E E109                       	smpsAlterNote       $09
00087470 CE03 8001                  	dc.b	nF6, $03, nRst, $01
00087474 E108                       	smpsAlterNote       $08
00087476 CC0D                       	dc.b	nEb6, $0D
00087478 E102                       	smpsAlterNote       $02
0008747A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008747E E108                       	smpsAlterNote       $08
00087480 E701                       	dc.b	smpsNoAttack, $01
00087482 E10B                       	smpsAlterNote       $0B
00087484 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087488 E105                       	smpsAlterNote       $05
0008748A E701                       	dc.b	smpsNoAttack, $01
0008748C E101                       	smpsAlterNote       $01
0008748E E701                       	dc.b	smpsNoAttack, $01
00087490 E102                       	smpsAlterNote       $02
00087492 E701                       	dc.b	smpsNoAttack, $01
00087494 E108                       	smpsAlterNote       $08
00087496 E701                       	dc.b	smpsNoAttack, $01
00087498 E10C                       	smpsAlterNote       $0C
0008749A E701                       	dc.b	smpsNoAttack, $01
0008749C E108                       	smpsAlterNote       $08
0008749E E701                       	dc.b	smpsNoAttack, $01
000874A0 E105                       	smpsAlterNote       $05
000874A2 E701                       	dc.b	smpsNoAttack, $01
000874A4 E101                       	smpsAlterNote       $01
000874A6 E701                       	dc.b	smpsNoAttack, $01
000874A8 E105                       	smpsAlterNote       $05
000874AA E701                       	dc.b	smpsNoAttack, $01
000874AC E10B                       	smpsAlterNote       $0B
000874AE E701                       	dc.b	smpsNoAttack, $01
000874B0 E10C                       	smpsAlterNote       $0C
000874B2 E701                       	dc.b	smpsNoAttack, $01
000874B4 E108                       	smpsAlterNote       $08
000874B6 E701                       	dc.b	smpsNoAttack, $01
000874B8 E107                       	smpsAlterNote       $07
000874BA CB03 8001 CA03 CB03 8001   	dc.b	nD6, $03, nRst, $01, nCs6, $03, nD6, $03, nRst, $01
000874C4 E10B                       	smpsAlterNote       $0B
000874C6 C602 8001 C503 C603 8001   	dc.b	nA5, $02, nRst, $01, nAb5, $03, nA5, $03, nRst, $01
000874D0 E109                       	smpsAlterNote       $09
000874D2 C203                       	dc.b	nF5, $03
000874D4 E108                       	smpsAlterNote       $08
000874D6 C103 8001                  	dc.b	nE5, $03, nRst, $01
000874DA E109                       	smpsAlterNote       $09
000874DC C20D                       	dc.b	nF5, $0D
000874DE E108                       	smpsAlterNote       $08
000874E0 C10E                       	dc.b	nE5, $0E
000874E2 E107                       	smpsAlterNote       $07
000874E4 BF0D                       	dc.b	nD5, $0D
000874E6 E104                       	smpsAlterNote       $04
000874E8 E701                       	dc.b	smpsNoAttack, $01
000874EA E100                       	smpsAlterNote       $00
000874EC E701                       	dc.b	smpsNoAttack, $01
000874EE E104                       	smpsAlterNote       $04
000874F0 E701                       	dc.b	smpsNoAttack, $01
000874F2 E107                       	smpsAlterNote       $07
000874F4 E701                       	dc.b	smpsNoAttack, $01
000874F6 E10B                       	smpsAlterNote       $0B
000874F8 E701                       	dc.b	smpsNoAttack, $01
000874FA E107                       	smpsAlterNote       $07
000874FC E701                       	dc.b	smpsNoAttack, $01
000874FE E101                       	smpsAlterNote       $01
00087500 E701                       	dc.b	smpsNoAttack, $01
00087502 E100                       	smpsAlterNote       $00
00087504 E701                       	dc.b	smpsNoAttack, $01
00087506 E104                       	smpsAlterNote       $04
00087508 E701                       	dc.b	smpsNoAttack, $01
0008750A E10A                       	smpsAlterNote       $0A
0008750C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087510 E107                       	smpsAlterNote       $07
00087512 E701                       	dc.b	smpsNoAttack, $01
00087514 E101                       	smpsAlterNote       $01
00087516 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008751A E107                       	smpsAlterNote       $07
0008751C E701                       	dc.b	smpsNoAttack, $01
0008751E E10A                       	smpsAlterNote       $0A
00087520 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087524 E104                       	smpsAlterNote       $04
00087526 E701                       	dc.b	smpsNoAttack, $01
00087528 E100                       	smpsAlterNote       $00
0008752A E701                       	dc.b	smpsNoAttack, $01
0008752C E101                       	smpsAlterNote       $01
0008752E E701                       	dc.b	smpsNoAttack, $01
00087530 E107                       	smpsAlterNote       $07
00087532 E701                       	dc.b	smpsNoAttack, $01
00087534 E10B                       	smpsAlterNote       $0B
00087536 E701                       	dc.b	smpsNoAttack, $01
00087538 E107                       	smpsAlterNote       $07
0008753A E701                       	dc.b	smpsNoAttack, $01
0008753C E104                       	smpsAlterNote       $04
0008753E E701                       	dc.b	smpsNoAttack, $01
00087540 E100                       	smpsAlterNote       $00
00087542 E701                       	dc.b	smpsNoAttack, $01
00087544 E104                       	smpsAlterNote       $04
00087546 E701                       	dc.b	smpsNoAttack, $01
00087548 E10A                       	smpsAlterNote       $0A
0008754A E701                       	dc.b	smpsNoAttack, $01
0008754C E10B                       	smpsAlterNote       $0B
0008754E E701                       	dc.b	smpsNoAttack, $01
00087550 E107                       	smpsAlterNote       $07
00087552 E701                       	dc.b	smpsNoAttack, $01
00087554 E101                       	smpsAlterNote       $01
00087556 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008755A E104                       	smpsAlterNote       $04
0008755C E701                       	dc.b	smpsNoAttack, $01
0008755E E10A                       	smpsAlterNote       $0A
00087560 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087564 E104                       	smpsAlterNote       $04
00087566 E701                       	dc.b	smpsNoAttack, $01
00087568 E101                       	smpsAlterNote       $01
0008756A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008756E E107                       	smpsAlterNote       $07
00087570 E701                       	dc.b	smpsNoAttack, $01
00087572 E10B                       	smpsAlterNote       $0B
00087574 E701                       	dc.b	smpsNoAttack, $01
00087576 E10A                       	smpsAlterNote       $0A
00087578 E701                       	dc.b	smpsNoAttack, $01
0008757A E104                       	smpsAlterNote       $04
0008757C E701                       	dc.b	smpsNoAttack, $01
0008757E E100                       	smpsAlterNote       $00
00087580 E701                       	dc.b	smpsNoAttack, $01
00087582 E104                       	smpsAlterNote       $04
00087584 E701                       	dc.b	smpsNoAttack, $01
00087586 E107                       	smpsAlterNote       $07
00087588 E701                       	dc.b	smpsNoAttack, $01
0008758A E10B                       	smpsAlterNote       $0B
0008758C E701                       	dc.b	smpsNoAttack, $01
0008758E E107                       	smpsAlterNote       $07
00087590 E701                       	dc.b	smpsNoAttack, $01
00087592 E101                       	smpsAlterNote       $01
00087594 E701                       	dc.b	smpsNoAttack, $01
00087596 E100                       	smpsAlterNote       $00
00087598 E701                       	dc.b	smpsNoAttack, $01
0008759A E104                       	smpsAlterNote       $04
0008759C E701                       	dc.b	smpsNoAttack, $01
0008759E E10A                       	smpsAlterNote       $0A
000875A0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000875A4 E107                       	smpsAlterNote       $07
000875A6 E701                       	dc.b	smpsNoAttack, $01
000875A8 E101                       	smpsAlterNote       $01
000875AA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000875AE E107                       	smpsAlterNote       $07
000875B0 E701                       	dc.b	smpsNoAttack, $01
000875B2 E10A                       	smpsAlterNote       $0A
000875B4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000875B8 E104                       	smpsAlterNote       $04
000875BA E701                       	dc.b	smpsNoAttack, $01
000875BC E100                       	smpsAlterNote       $00
000875BE E701                       	dc.b	smpsNoAttack, $01
000875C0 E101                       	smpsAlterNote       $01
000875C2 E701                       	dc.b	smpsNoAttack, $01
000875C4 E107                       	smpsAlterNote       $07
000875C6 E701                       	dc.b	smpsNoAttack, $01
000875C8 E10B                       	smpsAlterNote       $0B
000875CA E701                       	dc.b	smpsNoAttack, $01
000875CC E107                       	smpsAlterNote       $07
000875CE E701                       	dc.b	smpsNoAttack, $01
000875D0 E104                       	smpsAlterNote       $04
000875D2 E701                       	dc.b	smpsNoAttack, $01
000875D4 E100                       	smpsAlterNote       $00
000875D6 E701                       	dc.b	smpsNoAttack, $01
000875D8 E101                       	smpsAlterNote       $01
000875DA 8001                       	dc.b	nRst, $01
000875DC E109                       	smpsAlterNote       $09
000875DE C20D                       	dc.b	nF5, $0D
000875E0 E106                       	smpsAlterNote       $06
000875E2 E701                       	dc.b	smpsNoAttack, $01
000875E4 E102                       	smpsAlterNote       $02
000875E6 E701                       	dc.b	smpsNoAttack, $01
000875E8 E106                       	smpsAlterNote       $06
000875EA E701                       	dc.b	smpsNoAttack, $01
000875EC E10C                       	smpsAlterNote       $0C
000875EE E701                       	dc.b	smpsNoAttack, $01
000875F0 E10D                       	smpsAlterNote       $0D
000875F2 E701                       	dc.b	smpsNoAttack, $01
000875F4 E109                       	smpsAlterNote       $09
000875F6 E701                       	dc.b	smpsNoAttack, $01
000875F8 E103                       	smpsAlterNote       $03
000875FA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000875FE E106                       	smpsAlterNote       $06
00087600 E701                       	dc.b	smpsNoAttack, $01
00087602 E10C                       	smpsAlterNote       $0C
00087604 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087608 E106                       	smpsAlterNote       $06
0008760A E701                       	dc.b	smpsNoAttack, $01
0008760C E103                       	smpsAlterNote       $03
0008760E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087612 E109                       	smpsAlterNote       $09
00087614 E701                       	dc.b	smpsNoAttack, $01
00087616 E10D                       	smpsAlterNote       $0D
00087618 E701                       	dc.b	smpsNoAttack, $01
0008761A E10C                       	smpsAlterNote       $0C
0008761C E701                       	dc.b	smpsNoAttack, $01
0008761E E109                       	smpsAlterNote       $09
00087620 8001                       	dc.b	nRst, $01
00087622 E108                       	smpsAlterNote       $08
00087624 C10D                       	dc.b	nE5, $0D
00087626 E109                       	smpsAlterNote       $09
00087628 C20A 8001                  	dc.b	nF5, $0A, nRst, $01
0008762C E108                       	smpsAlterNote       $08
0008762E C10D                       	dc.b	nE5, $0D
00087630 E102                       	smpsAlterNote       $02
00087632 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087636 E105                       	smpsAlterNote       $05
00087638 E701                       	dc.b	smpsNoAttack, $01
0008763A E108                       	smpsAlterNote       $08
0008763C 8001                       	dc.b	nRst, $01
0008763E E107                       	smpsAlterNote       $07
00087640 BF0D                       	dc.b	nD5, $0D
00087642 E108                       	smpsAlterNote       $08
00087644 C107                       	dc.b	nE5, $07
00087646 E109                       	smpsAlterNote       $09
00087648 C207 C406 8001             	dc.b	nF5, $07, nG5, $06, nRst, $01
0008764E E10B                       	smpsAlterNote       $0B
00087650 C603                       	dc.b	nA5, $03
00087652 E10C                       	smpsAlterNote       $0C
00087654 C707 C703 8001             	dc.b	nBb5, $07, nBb5, $03, nRst, $01
0008765A E10B                       	smpsAlterNote       $0B
0008765C C603 D206 8001             	dc.b	nA5, $03, nA6, $06, nRst, $01
00087662 E109                       	smpsAlterNote       $09
00087664 D003                       	dc.b	nG6, $03
00087666 E108                       	smpsAlterNote       $08
00087668 CD02 8001                  	dc.b	nE6, $02, nRst, $01
0008766C E10B                       	smpsAlterNote       $0B
0008766E C601 8001                  	dc.b	nA5, $01, nRst, $01
00087672 E108                       	smpsAlterNote       $08
00087674 C102                       	dc.b	nE5, $02
00087678 E10C                       	smpsAlterNote       $0C
0008767A E6FB                       	smpsAlterVol        $FB
0008767C A306 800F A303 A303 8019+  	dc.b	nBb2, $06, nRst, $0F, nBb2, $03, nBb2, $03, nRst, $19, nBb2, $02
00087688 8001                       	dc.b	nRst, $01
0008768A E10B                       	smpsAlterNote       $0B
0008768C A206 800F A202 8001        	dc.b	nA2, $06, nRst, $0F, nA2, $02, nRst, $01
00087694 E107                       	smpsAlterNote       $07
00087696 A706 8001                  	dc.b	nD3, $06, nRst, $01
0008769A E10B                       	smpsAlterNote       $0B
0008769C A203                       	dc.b	nA2, $03
0008769E E109                       	smpsAlterNote       $09
000876A0 AA03 8001                  	dc.b	nF3, $03, nRst, $01
000876A4 E108                       	smpsAlterNote       $08
000876A6 A906                       	dc.b	nE3, $06
000876A8 E107                       	smpsAlterNote       $07
000876AA A703 8001                  	dc.b	nD3, $03, nRst, $01
000876AE E106                       	smpsAlterNote       $06
000876B0 A503                       	dc.b	nC3, $03
000876B2 E10C                       	smpsAlterNote       $0C
000876B4 A303 8001                  	dc.b	nBb2, $03, nRst, $01
000876B8 E10B                       	smpsAlterNote       $0B
000876BA A203 8004                  	dc.b	nA2, $03, nRst, $04
000876BE E11B                       	smpsAlterNote       $1B
000876C0 C401                       	dc.b	nG5, $01
000876C2 E1F4                       	smpsAlterNote       $F4
000876C4 E7C5 01                    	dc.b	smpsNoAttack, nAb5, $01
000876C7 E106                       	smpsAlterNote       $06
000876C9 E701                       	dc.b	smpsNoAttack, $01
000876CB E10F                       	smpsAlterNote       $0F
000876CD E701                       	dc.b	smpsNoAttack, $01
000876CF E1E4                       	smpsAlterNote       $E4
000876D1 E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
000876D4 E1F6                       	smpsAlterNote       $F6
000876D6 E701                       	dc.b	smpsNoAttack, $01
000876D8 E108                       	smpsAlterNote       $08
000876DA E701                       	dc.b	smpsNoAttack, $01
000876DC E10B                       	smpsAlterNote       $0B
000876DE E706                       	dc.b	smpsNoAttack, $06
000876E0 E105                       	smpsAlterNote       $05
000876E2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000876E6 E108                       	smpsAlterNote       $08
000876E8 E701                       	dc.b	smpsNoAttack, $01
000876EA E10E                       	smpsAlterNote       $0E
000876EC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000876F0 E108                       	smpsAlterNote       $08
000876F2 E701                       	dc.b	smpsNoAttack, $01
000876F4 E105                       	smpsAlterNote       $05
000876F6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000876FA E10B                       	smpsAlterNote       $0B
000876FC E701                       	dc.b	smpsNoAttack, $01
000876FE E10F                       	smpsAlterNote       $0F
00087700 E701                       	dc.b	smpsNoAttack, $01
00087702 E10E                       	smpsAlterNote       $0E
00087704 E701                       	dc.b	smpsNoAttack, $01
00087706 E108                       	smpsAlterNote       $08
00087708 E701                       	dc.b	smpsNoAttack, $01
0008770A E104                       	smpsAlterNote       $04
0008770C E701                       	dc.b	smpsNoAttack, $01
0008770E E108                       	smpsAlterNote       $08
00087710 E701                       	dc.b	smpsNoAttack, $01
00087712 E10B                       	smpsAlterNote       $0B
00087714 E701                       	dc.b	smpsNoAttack, $01
00087716 E10F                       	smpsAlterNote       $0F
00087718 E701                       	dc.b	smpsNoAttack, $01
0008771A E10B                       	smpsAlterNote       $0B
0008771C E701                       	dc.b	smpsNoAttack, $01
0008771E E105                       	smpsAlterNote       $05
00087720 E701                       	dc.b	smpsNoAttack, $01
00087722 E104                       	smpsAlterNote       $04
00087724 E701                       	dc.b	smpsNoAttack, $01
00087726 E108                       	smpsAlterNote       $08
00087728 E701                       	dc.b	smpsNoAttack, $01
0008772A E10E                       	smpsAlterNote       $0E
0008772C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087730 E10B                       	smpsAlterNote       $0B
00087732 E701                       	dc.b	smpsNoAttack, $01
00087734 E105                       	smpsAlterNote       $05
00087736 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008773A E10B                       	smpsAlterNote       $0B
0008773C E701                       	dc.b	smpsNoAttack, $01
0008773E E10E                       	smpsAlterNote       $0E
00087740 E701                       	dc.b	smpsNoAttack, $01
00087742 E10F                       	smpsAlterNote       $0F
00087744 8001                       	dc.b	nRst, $01
00087746 E109                       	smpsAlterNote       $09
00087748 C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
0008774E E108                       	smpsAlterNote       $08
00087750 C101 8001                  	dc.b	nE5, $01, nRst, $01
00087754 E109                       	smpsAlterNote       $09
00087756 C202                       	dc.b	nF5, $02
00087758 E108                       	smpsAlterNote       $08
0008775A C102                       	dc.b	nE5, $02
0008775C E107                       	smpsAlterNote       $07
0008775E BF02 8001                  	dc.b	nD5, $02, nRst, $01
00087762 E108                       	smpsAlterNote       $08
00087764 C101 8001                  	dc.b	nE5, $01, nRst, $01
00087768 E107                       	smpsAlterNote       $07
0008776A BF02                       	dc.b	nD5, $02
0008776C E106                       	smpsAlterNote       $06
0008776E BD02 8001                  	dc.b	nC5, $02, nRst, $01
00087772 E107                       	smpsAlterNote       $07
00087774 BF01 8001                  	dc.b	nD5, $01, nRst, $01
00087778 E106                       	smpsAlterNote       $06
0008777A BD02                       	dc.b	nC5, $02
0008777C E10C                       	smpsAlterNote       $0C
0008777E BB02                       	dc.b	nBb4, $02
00087780 E106                       	smpsAlterNote       $06
00087782 BD02 8001                  	dc.b	nC5, $02, nRst, $01
00087786 E10C                       	smpsAlterNote       $0C
00087788 BB01 8001                  	dc.b	nBb4, $01, nRst, $01
0008778C E10B                       	smpsAlterNote       $0B
0008778E BA02                       	dc.b	nA4, $02
00087790 E10C                       	smpsAlterNote       $0C
00087792 BB02                       	dc.b	nBb4, $02
00087794 E10B                       	smpsAlterNote       $0B
00087796 BA02 8001 B901 8001 BA02   	dc.b	nA4, $02, nRst, $01, nAb4, $01, nRst, $01, nA4, $02
000877A0 E108                       	smpsAlterNote       $08
000877A2 B502 8001 C101 8001        	dc.b	nE4, $02, nRst, $01, nE5, $01, nRst, $01
000877AA E107                       	smpsAlterNote       $07
000877AC BE02                       	dc.b	nCs5, $02
000877AE E10B                       	smpsAlterNote       $0B
000877B0 BA02                       	dc.b	nA4, $02
000877B2 E109                       	smpsAlterNote       $09
000877B4 B802 8001                  	dc.b	nG4, $02, nRst, $01
000877B8 E108                       	smpsAlterNote       $08
000877BA B501 8001                  	dc.b	nE4, $01, nRst, $01
000877BE E10B                       	smpsAlterNote       $0B
000877C0 AE02                       	dc.b	nA3, $02
000877C2 E10C                       	smpsAlterNote       $0C
000877C4 A307 800E A303 A303 8019+  	dc.b	nBb2, $07, nRst, $0E, nBb2, $03, nBb2, $03, nRst, $19, nBb2, $03
000877D0 E10B                       	smpsAlterNote       $0B
000877D2 A206 800F A202 8001        	dc.b	nA2, $06, nRst, $0F, nA2, $02, nRst, $01
000877DA E107                       	smpsAlterNote       $07
000877DC A706 8001                  	dc.b	nD3, $06, nRst, $01
000877E0 E10B                       	smpsAlterNote       $0B
000877E2 A203                       	dc.b	nA2, $03
000877E4 E109                       	smpsAlterNote       $09
000877E6 AA03 8001                  	dc.b	nF3, $03, nRst, $01
000877EA E108                       	smpsAlterNote       $08
000877EC A906 8001                  	dc.b	nE3, $06, nRst, $01
000877F0 E107                       	smpsAlterNote       $07
000877F2 A702 8001                  	dc.b	nD3, $02, nRst, $01
000877F6 E106                       	smpsAlterNote       $06
000877F8 A503                       	dc.b	nC3, $03
000877FA E10C                       	smpsAlterNote       $0C
000877FC A303 8001                  	dc.b	nBb2, $03, nRst, $01
00087802 E107                       	smpsAlterNote       $07
00087804 B20D                       	dc.b	nCs4, $0D
00087806 E104                       	smpsAlterNote       $04
00087808 E701                       	dc.b	smpsNoAttack, $01
0008780A E100                       	smpsAlterNote       $00
0008780C E701                       	dc.b	smpsNoAttack, $01
0008780E E104                       	smpsAlterNote       $04
00087810 E701                       	dc.b	smpsNoAttack, $01
00087812 E10A                       	smpsAlterNote       $0A
00087814 E701                       	dc.b	smpsNoAttack, $01
00087816 E10B                       	smpsAlterNote       $0B
00087818 E701                       	dc.b	smpsNoAttack, $01
0008781A E107                       	smpsAlterNote       $07
0008781C E701                       	dc.b	smpsNoAttack, $01
0008781E E101                       	smpsAlterNote       $01
00087820 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087824 E104                       	smpsAlterNote       $04
00087826 E701                       	dc.b	smpsNoAttack, $01
00087828 E10A                       	smpsAlterNote       $0A
0008782A E701                       	dc.b	smpsNoAttack, $01
0008782C E10B                       	smpsAlterNote       $0B
0008782E 8001                       	dc.b	nRst, $01
00087830 E107                       	smpsAlterNote       $07
00087832 B30D                       	dc.b	nD4, $0D
00087834 E104                       	smpsAlterNote       $04
00087836 E701                       	dc.b	smpsNoAttack, $01
00087838 E100                       	smpsAlterNote       $00
0008783A E701                       	dc.b	smpsNoAttack, $01
0008783C E104                       	smpsAlterNote       $04
0008783E E701                       	dc.b	smpsNoAttack, $01
00087840 E10A                       	smpsAlterNote       $0A
00087842 E701                       	dc.b	smpsNoAttack, $01
00087844 E10B                       	smpsAlterNote       $0B
00087846 E701                       	dc.b	smpsNoAttack, $01
00087848 E107                       	smpsAlterNote       $07
0008784A E701                       	dc.b	smpsNoAttack, $01
0008784C E101                       	smpsAlterNote       $01
0008784E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087852 E104                       	smpsAlterNote       $04
00087854 E701                       	dc.b	smpsNoAttack, $01
00087856 E10A                       	smpsAlterNote       $0A
00087858 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008785C E104                       	smpsAlterNote       $04
0008785E E701                       	dc.b	smpsNoAttack, $01
00087860 E101                       	smpsAlterNote       $01
00087862 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087866 E107                       	smpsAlterNote       $07
00087868 E701                       	dc.b	smpsNoAttack, $01
0008786A E10B                       	smpsAlterNote       $0B
0008786C E701                       	dc.b	smpsNoAttack, $01
0008786E E10A                       	smpsAlterNote       $0A
00087870 E701                       	dc.b	smpsNoAttack, $01
00087872 E107                       	smpsAlterNote       $07
00087874 8001                       	dc.b	nRst, $01
00087876 E108                       	smpsAlterNote       $08
00087878 B50D                       	dc.b	nE4, $0D
0008787A E102                       	smpsAlterNote       $02
0008787C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087880 E105                       	smpsAlterNote       $05
00087882 E701                       	dc.b	smpsNoAttack, $01
00087884 E10B                       	smpsAlterNote       $0B
00087886 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008788A E105                       	smpsAlterNote       $05
0008788C E701                       	dc.b	smpsNoAttack, $01
0008788E E102                       	smpsAlterNote       $02
00087890 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087894 E108                       	smpsAlterNote       $08
00087896 E701                       	dc.b	smpsNoAttack, $01
00087898 E10C                       	smpsAlterNote       $0C
0008789A E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008789E E107                       	smpsAlterNote       $07
000878A0 B30D                       	dc.b	nD4, $0D
000878A2 E101                       	smpsAlterNote       $01
000878A4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000878A8 E104                       	smpsAlterNote       $04
000878AA E701                       	dc.b	smpsNoAttack, $01
000878AC E10A                       	smpsAlterNote       $0A
000878AE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000878B2 E104                       	smpsAlterNote       $04
000878B4 E701                       	dc.b	smpsNoAttack, $01
000878B6 E101                       	smpsAlterNote       $01
000878B8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000878BC E107                       	smpsAlterNote       $07
000878BE E701                       	dc.b	smpsNoAttack, $01
000878C0 E10B                       	smpsAlterNote       $0B
000878C2 E701                       	dc.b	smpsNoAttack, $01
000878C4 E10A                       	smpsAlterNote       $0A
000878C6 E701                       	dc.b	smpsNoAttack, $01
000878C8 E104                       	smpsAlterNote       $04
000878CA E701                       	dc.b	smpsNoAttack, $01
000878CC E100                       	smpsAlterNote       $00
000878CE E701                       	dc.b	smpsNoAttack, $01
000878D0 E104                       	smpsAlterNote       $04
000878D2 E701                       	dc.b	smpsNoAttack, $01
000878D4 E107                       	smpsAlterNote       $07
000878D6 E701                       	dc.b	smpsNoAttack, $01
000878D8 E10B                       	smpsAlterNote       $0B
000878DA E701                       	dc.b	smpsNoAttack, $01
000878DC E107                       	smpsAlterNote       $07
000878DE E701 B20E                  	dc.b	smpsNoAttack, $01, nCs4, $0E
000878E2 E101                       	smpsAlterNote       $01
000878E4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000878E8 E107                       	smpsAlterNote       $07
000878EA E701                       	dc.b	smpsNoAttack, $01
000878EC E10A                       	smpsAlterNote       $0A
000878EE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000878F2 E104                       	smpsAlterNote       $04
000878F4 E701                       	dc.b	smpsNoAttack, $01
000878F6 E100                       	smpsAlterNote       $00
000878F8 E701                       	dc.b	smpsNoAttack, $01
000878FA E101                       	smpsAlterNote       $01
000878FC E701                       	dc.b	smpsNoAttack, $01
000878FE E107                       	smpsAlterNote       $07
00087900 E701                       	dc.b	smpsNoAttack, $01
00087902 E10B                       	smpsAlterNote       $0B
00087904 E701                       	dc.b	smpsNoAttack, $01
00087906 E107                       	smpsAlterNote       $07
00087908 B30E                       	dc.b	nD4, $0E
0008790A E101                       	smpsAlterNote       $01
0008790C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087910 E107                       	smpsAlterNote       $07
00087912 E701                       	dc.b	smpsNoAttack, $01
00087914 E10A                       	smpsAlterNote       $0A
00087916 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008791A E104                       	smpsAlterNote       $04
0008791C E701                       	dc.b	smpsNoAttack, $01
0008791E E100                       	smpsAlterNote       $00
00087920 E701                       	dc.b	smpsNoAttack, $01
00087922 E101                       	smpsAlterNote       $01
00087924 E701                       	dc.b	smpsNoAttack, $01
00087926 E107                       	smpsAlterNote       $07
00087928 E701                       	dc.b	smpsNoAttack, $01
0008792A E10B                       	smpsAlterNote       $0B
0008792C E701                       	dc.b	smpsNoAttack, $01
0008792E E107                       	smpsAlterNote       $07
00087930 E701                       	dc.b	smpsNoAttack, $01
00087932 E104                       	smpsAlterNote       $04
00087934 E701                       	dc.b	smpsNoAttack, $01
00087936 E100                       	smpsAlterNote       $00
00087938 E701                       	dc.b	smpsNoAttack, $01
0008793A E104                       	smpsAlterNote       $04
0008793C E701                       	dc.b	smpsNoAttack, $01
0008793E E10A                       	smpsAlterNote       $0A
00087940 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087944 E107                       	smpsAlterNote       $07
00087946 E701 B20D                  	dc.b	smpsNoAttack, $01, nCs4, $0D
0008794A E104                       	smpsAlterNote       $04
0008794C E701                       	dc.b	smpsNoAttack, $01
0008794E E100                       	smpsAlterNote       $00
00087950 E701                       	dc.b	smpsNoAttack, $01
00087952 E101                       	smpsAlterNote       $01
00087954 E701                       	dc.b	smpsNoAttack, $01
00087956 E107                       	smpsAlterNote       $07
00087958 E701                       	dc.b	smpsNoAttack, $01
0008795A E10B                       	smpsAlterNote       $0B
0008795C E701                       	dc.b	smpsNoAttack, $01
0008795E E107                       	smpsAlterNote       $07
00087960 E701                       	dc.b	smpsNoAttack, $01
00087962 E104                       	smpsAlterNote       $04
00087964 E701                       	dc.b	smpsNoAttack, $01
00087966 E100                       	smpsAlterNote       $00
00087968 E701                       	dc.b	smpsNoAttack, $01
0008796A E104                       	smpsAlterNote       $04
0008796C E701                       	dc.b	smpsNoAttack, $01
0008796E E10A                       	smpsAlterNote       $0A
00087970 E701                       	dc.b	smpsNoAttack, $01
00087972 E10B                       	smpsAlterNote       $0B
00087974 E701                       	dc.b	smpsNoAttack, $01
00087978 E6FF                       	smpsAlterVol        $FF
0008797A A206 8001 A203 A203 8001+  	dc.b	nA2, $06, nRst, $01, nA2, $03, nA2, $03, nRst, $01, nA2, $03
00087986 800B A202 8001             	dc.b	nRst, $0B, nA2, $02, nRst, $01
0008798E E109                       	smpsAlterNote       $09
00087990 E601                       	smpsAlterVol        $01
00087992 B60D                       	dc.b	nF4, $0D
00087994 E106                       	smpsAlterNote       $06
00087996 E701                       	dc.b	smpsNoAttack, $01
00087998 E102                       	smpsAlterNote       $02
0008799A E701                       	dc.b	smpsNoAttack, $01
0008799C E106                       	smpsAlterNote       $06
0008799E E701                       	dc.b	smpsNoAttack, $01
000879A0 E109                       	smpsAlterNote       $09
000879A2 E701                       	dc.b	smpsNoAttack, $01
000879A4 E10D                       	smpsAlterNote       $0D
000879A6 E701                       	dc.b	smpsNoAttack, $01
000879A8 E109                       	smpsAlterNote       $09
000879AA E701                       	dc.b	smpsNoAttack, $01
000879AC E103                       	smpsAlterNote       $03
000879AE E701                       	dc.b	smpsNoAttack, $01
000879B0 E102                       	smpsAlterNote       $02
000879B2 E701                       	dc.b	smpsNoAttack, $01
000879B4 E106                       	smpsAlterNote       $06
000879B6 E701                       	dc.b	smpsNoAttack, $01
000879B8 E10C                       	smpsAlterNote       $0C
000879BA E701                       	dc.b	smpsNoAttack, $01
000879BC E10D                       	smpsAlterNote       $0D
000879BE 8001                       	dc.b	nRst, $01
000879C0 E109                       	smpsAlterNote       $09
000879C2 B80D                       	dc.b	nG4, $0D
000879C4 E106                       	smpsAlterNote       $06
000879C6 E701                       	dc.b	smpsNoAttack, $01
000879C8 E102                       	smpsAlterNote       $02
000879CA E701                       	dc.b	smpsNoAttack, $01
000879CC E106                       	smpsAlterNote       $06
000879CE E701                       	dc.b	smpsNoAttack, $01
000879D0 E109                       	smpsAlterNote       $09
000879D2 E701                       	dc.b	smpsNoAttack, $01
000879D4 E10D                       	smpsAlterNote       $0D
000879D6 E701                       	dc.b	smpsNoAttack, $01
000879D8 E109                       	smpsAlterNote       $09
000879DA E701                       	dc.b	smpsNoAttack, $01
000879DC E103                       	smpsAlterNote       $03
000879DE E701                       	dc.b	smpsNoAttack, $01
000879E0 E102                       	smpsAlterNote       $02
000879E2 E701                       	dc.b	smpsNoAttack, $01
000879E4 E106                       	smpsAlterNote       $06
000879E6 E701                       	dc.b	smpsNoAttack, $01
000879E8 E10C                       	smpsAlterNote       $0C
000879EA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000879EE E106                       	smpsAlterNote       $06
000879F0 E701                       	dc.b	smpsNoAttack, $01
000879F2 E103                       	smpsAlterNote       $03
000879F4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000879F8 E109                       	smpsAlterNote       $09
000879FA E701                       	dc.b	smpsNoAttack, $01
000879FC E10D                       	smpsAlterNote       $0D
000879FE E701                       	dc.b	smpsNoAttack, $01
00087A00 E10C                       	smpsAlterNote       $0C
00087A02 E701                       	dc.b	smpsNoAttack, $01
00087A04 E109                       	smpsAlterNote       $09
00087A06 8001                       	dc.b	nRst, $01
00087A08 E10B                       	smpsAlterNote       $0B
00087A0A BA0D                       	dc.b	nA4, $0D
00087A0C E105                       	smpsAlterNote       $05
00087A0E E701                       	dc.b	smpsNoAttack, $01
00087A10 E104                       	smpsAlterNote       $04
00087A12 E701                       	dc.b	smpsNoAttack, $01
00087A14 E108                       	smpsAlterNote       $08
00087A16 E701                       	dc.b	smpsNoAttack, $01
00087A18 E10E                       	smpsAlterNote       $0E
00087A1A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087A1E E10B                       	smpsAlterNote       $0B
00087A20 E701                       	dc.b	smpsNoAttack, $01
00087A22 E105                       	smpsAlterNote       $05
00087A24 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087A28 E10B                       	smpsAlterNote       $0B
00087A2A E701                       	dc.b	smpsNoAttack, $01
00087A2C E10E                       	smpsAlterNote       $0E
00087A2E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087A32 E108                       	smpsAlterNote       $08
00087A34 E701                       	dc.b	smpsNoAttack, $01
00087A36 E104                       	smpsAlterNote       $04
00087A38 E701                       	dc.b	smpsNoAttack, $01
00087A3A E105                       	smpsAlterNote       $05
00087A3C E701                       	dc.b	smpsNoAttack, $01
00087A3E E10B                       	smpsAlterNote       $0B
00087A40 E701                       	dc.b	smpsNoAttack, $01
00087A42 E10F                       	smpsAlterNote       $0F
00087A44 E701                       	dc.b	smpsNoAttack, $01
00087A46 E10B                       	smpsAlterNote       $0B
00087A48 E701                       	dc.b	smpsNoAttack, $01
00087A4A E108                       	smpsAlterNote       $08
00087A4C E701                       	dc.b	smpsNoAttack, $01
00087A4E E104                       	smpsAlterNote       $04
00087A50 E701                       	dc.b	smpsNoAttack, $01
00087A52 E108                       	smpsAlterNote       $08
00087A54 E701                       	dc.b	smpsNoAttack, $01
00087A56 E10E                       	smpsAlterNote       $0E
00087A58 E701                       	dc.b	smpsNoAttack, $01
00087A5A E10F                       	smpsAlterNote       $0F
00087A5C E701                       	dc.b	smpsNoAttack, $01
00087A5E E10B                       	smpsAlterNote       $0B
00087A60 E701                       	dc.b	smpsNoAttack, $01
00087A62 E105                       	smpsAlterNote       $05
00087A64 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087A68 E108                       	smpsAlterNote       $08
00087A6A E701                       	dc.b	smpsNoAttack, $01
00087A6C E10E                       	smpsAlterNote       $0E
00087A6E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087A72 E108                       	smpsAlterNote       $08
00087A74 E701                       	dc.b	smpsNoAttack, $01
00087A76 E105                       	smpsAlterNote       $05
00087A78 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087A7C E108                       	smpsAlterNote       $08
00087A7E B50A 8001                  	dc.b	nE4, $0A, nRst, $01
00087A82 E109                       	smpsAlterNote       $09
00087A84 B60D                       	dc.b	nF4, $0D
00087A86 E103                       	smpsAlterNote       $03
00087A88 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087A8C E106                       	smpsAlterNote       $06
00087A8E E701                       	dc.b	smpsNoAttack, $01
00087A90 E10C                       	smpsAlterNote       $0C
00087A92 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087A96 E106                       	smpsAlterNote       $06
00087A98 E701                       	dc.b	smpsNoAttack, $01
00087A9A E103                       	smpsAlterNote       $03
00087A9C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087AA0 E109                       	smpsAlterNote       $09
00087AA2 E701                       	dc.b	smpsNoAttack, $01
00087AA4 E10D                       	smpsAlterNote       $0D
00087AA6 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00087AAA E109                       	smpsAlterNote       $09
00087AAC B80D                       	dc.b	nG4, $0D
00087AAE E103                       	smpsAlterNote       $03
00087AB0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087AB4 E109                       	smpsAlterNote       $09
00087AB6 E701                       	dc.b	smpsNoAttack, $01
00087AB8 E10C                       	smpsAlterNote       $0C
00087ABA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087ABE E106                       	smpsAlterNote       $06
00087AC0 E701                       	dc.b	smpsNoAttack, $01
00087AC2 E102                       	smpsAlterNote       $02
00087AC4 E701                       	dc.b	smpsNoAttack, $01
00087AC6 E103                       	smpsAlterNote       $03
00087AC8 E701                       	dc.b	smpsNoAttack, $01
00087ACA E109                       	smpsAlterNote       $09
00087ACC E701                       	dc.b	smpsNoAttack, $01
00087ACE E10D                       	smpsAlterNote       $0D
00087AD0 E701                       	dc.b	smpsNoAttack, $01
00087AD2 E109                       	smpsAlterNote       $09
00087AD4 E701                       	dc.b	smpsNoAttack, $01
00087AD6 E106                       	smpsAlterNote       $06
00087AD8 E701                       	dc.b	smpsNoAttack, $01
00087ADA E102                       	smpsAlterNote       $02
00087ADC E701                       	dc.b	smpsNoAttack, $01
00087ADE E106                       	smpsAlterNote       $06
00087AE0 E701                       	dc.b	smpsNoAttack, $01
00087AE2 E10C                       	smpsAlterNote       $0C
00087AE4 E701                       	dc.b	smpsNoAttack, $01
00087AE6 E10D                       	smpsAlterNote       $0D
00087AE8 E701                       	dc.b	smpsNoAttack, $01
00087AEA E109                       	smpsAlterNote       $09
00087AEC E701                       	dc.b	smpsNoAttack, $01
00087AEE E10B                       	smpsAlterNote       $0B
00087AF0 BA0D                       	dc.b	nA4, $0D
00087AF2 E108                       	smpsAlterNote       $08
00087AF4 E701                       	dc.b	smpsNoAttack, $01
00087AF6 E105                       	smpsAlterNote       $05
00087AF8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087AFC E10B                       	smpsAlterNote       $0B
00087AFE E701                       	dc.b	smpsNoAttack, $01
00087B00 E10F                       	smpsAlterNote       $0F
00087B02 E701                       	dc.b	smpsNoAttack, $01
00087B04 E10E                       	smpsAlterNote       $0E
00087B06 E701                       	dc.b	smpsNoAttack, $01
00087B08 E108                       	smpsAlterNote       $08
00087B0A E701                       	dc.b	smpsNoAttack, $01
00087B0C E104                       	smpsAlterNote       $04
00087B0E E701                       	dc.b	smpsNoAttack, $01
00087B10 E108                       	smpsAlterNote       $08
00087B12 E701                       	dc.b	smpsNoAttack, $01
00087B14 E10B                       	smpsAlterNote       $0B
00087B16 E701                       	dc.b	smpsNoAttack, $01
00087B18 E10F                       	smpsAlterNote       $0F
00087B1A E701                       	dc.b	smpsNoAttack, $01
00087B1C E10B                       	smpsAlterNote       $0B
00087B1E E701                       	dc.b	smpsNoAttack, $01
00087B20 E105                       	smpsAlterNote       $05
00087B22 E701                       	dc.b	smpsNoAttack, $01
00087B24 E104                       	smpsAlterNote       $04
00087B26 E701                       	dc.b	smpsNoAttack, $01
00087B28 E108                       	smpsAlterNote       $08
00087B2A E701                       	dc.b	smpsNoAttack, $01
00087B2C E10E                       	smpsAlterNote       $0E
00087B2E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087B32 E10B                       	smpsAlterNote       $0B
00087B34 E701                       	dc.b	smpsNoAttack, $01
00087B36 E105                       	smpsAlterNote       $05
00087B38 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087B3C E10B                       	smpsAlterNote       $0B
00087B3E E701                       	dc.b	smpsNoAttack, $01
00087B40 E10E                       	smpsAlterNote       $0E
00087B42 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087B46 E108                       	smpsAlterNote       $08
00087B48 E701                       	dc.b	smpsNoAttack, $01
00087B4A E105                       	smpsAlterNote       $05
00087B4C 8001                       	dc.b	nRst, $01
00087B4E E109                       	smpsAlterNote       $09
00087B50 B60A                       	dc.b	nF4, $0A
00087B52 E108                       	smpsAlterNote       $08
00087B54 B507                       	dc.b	nE4, $07
00087B56 E107                       	smpsAlterNote       $07
00087B58 B30D 8001                  	dc.b	nD4, $0D, nRst, $01
00087B5C E108                       	smpsAlterNote       $08
00087B5E B503                       	dc.b	nE4, $03
00087B60 E109                       	smpsAlterNote       $09
00087B62 B603 8001 B802 8001        	dc.b	nF4, $03, nRst, $01, nG4, $02, nRst, $01
00087B6A E10B                       	smpsAlterNote       $0B
00087B6C BA0D                       	dc.b	nA4, $0D
00087B6E E108                       	smpsAlterNote       $08
00087B70 E701                       	dc.b	smpsNoAttack, $01
00087B72 E104                       	smpsAlterNote       $04
00087B74 E701                       	dc.b	smpsNoAttack, $01
00087B76 E108                       	smpsAlterNote       $08
00087B78 E701                       	dc.b	smpsNoAttack, $01
00087B7A E10B                       	smpsAlterNote       $0B
00087B7C E701                       	dc.b	smpsNoAttack, $01
00087B7E E10F                       	smpsAlterNote       $0F
00087B80 E701                       	dc.b	smpsNoAttack, $01
00087B82 E10B                       	smpsAlterNote       $0B
00087B84 E701                       	dc.b	smpsNoAttack, $01
00087B86 E105                       	smpsAlterNote       $05
00087B88 E701                       	dc.b	smpsNoAttack, $01
00087B8A E104                       	smpsAlterNote       $04
00087B8C E701                       	dc.b	smpsNoAttack, $01
00087B8E E108                       	smpsAlterNote       $08
00087B90 E701                       	dc.b	smpsNoAttack, $01
00087B92 E10E                       	smpsAlterNote       $0E
00087B94 E701                       	dc.b	smpsNoAttack, $01
00087B96 E10F                       	smpsAlterNote       $0F
00087B98 8001                       	dc.b	nRst, $01
00087B9A E109                       	smpsAlterNote       $09
00087B9C C20D                       	dc.b	nF5, $0D
00087B9E E106                       	smpsAlterNote       $06
00087BA0 E701                       	dc.b	smpsNoAttack, $01
00087BA2 E102                       	smpsAlterNote       $02
00087BA4 E701                       	dc.b	smpsNoAttack, $01
00087BA6 E106                       	smpsAlterNote       $06
00087BA8 E701                       	dc.b	smpsNoAttack, $01
00087BAA E109                       	smpsAlterNote       $09
00087BAC E701                       	dc.b	smpsNoAttack, $01
00087BAE E10D                       	smpsAlterNote       $0D
00087BB0 E701                       	dc.b	smpsNoAttack, $01
00087BB2 E109                       	smpsAlterNote       $09
00087BB4 E701                       	dc.b	smpsNoAttack, $01
00087BB6 E103                       	smpsAlterNote       $03
00087BB8 E701                       	dc.b	smpsNoAttack, $01
00087BBA E102                       	smpsAlterNote       $02
00087BBC E701                       	dc.b	smpsNoAttack, $01
00087BBE E106                       	smpsAlterNote       $06
00087BC0 E701                       	dc.b	smpsNoAttack, $01
00087BC2 E10C                       	smpsAlterNote       $0C
00087BC4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087BC8 E109                       	smpsAlterNote       $09
00087BCA E701                       	dc.b	smpsNoAttack, $01
00087BCC E103                       	smpsAlterNote       $03
00087BCE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087BD2 E109                       	smpsAlterNote       $09
00087BD4 E701                       	dc.b	smpsNoAttack, $01
00087BD6 E10C                       	smpsAlterNote       $0C
00087BD8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087BDC E106                       	smpsAlterNote       $06
00087BDE E701                       	dc.b	smpsNoAttack, $01
00087BE0 E102                       	smpsAlterNote       $02
00087BE2 E701                       	dc.b	smpsNoAttack, $01
00087BE4 E103                       	smpsAlterNote       $03
00087BE6 E701                       	dc.b	smpsNoAttack, $01
00087BE8 E109                       	smpsAlterNote       $09
00087BEA E701                       	dc.b	smpsNoAttack, $01
00087BEC E10D                       	smpsAlterNote       $0D
00087BEE E701                       	dc.b	smpsNoAttack, $01
00087BF0 E109                       	smpsAlterNote       $09
00087BF2 E701                       	dc.b	smpsNoAttack, $01
00087BF4 E106                       	smpsAlterNote       $06
00087BF6 E701                       	dc.b	smpsNoAttack, $01
00087BF8 E102                       	smpsAlterNote       $02
00087BFA E701                       	dc.b	smpsNoAttack, $01
00087BFC E106                       	smpsAlterNote       $06
00087BFE E701                       	dc.b	smpsNoAttack, $01
00087C00 E10C                       	smpsAlterNote       $0C
00087C02 E701                       	dc.b	smpsNoAttack, $01
00087C04 E10D                       	smpsAlterNote       $0D
00087C06 E701                       	dc.b	smpsNoAttack, $01
00087C08 E109                       	smpsAlterNote       $09
00087C0A E701                       	dc.b	smpsNoAttack, $01
00087C0C E103                       	smpsAlterNote       $03
00087C0E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087C12 E106                       	smpsAlterNote       $06
00087C14 E701                       	dc.b	smpsNoAttack, $01
00087C16 E10C                       	smpsAlterNote       $0C
00087C18 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087C1C E106                       	smpsAlterNote       $06
00087C1E E701                       	dc.b	smpsNoAttack, $01
00087C20 E103                       	smpsAlterNote       $03
00087C22 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087C26 E109                       	smpsAlterNote       $09
00087C28 E701                       	dc.b	smpsNoAttack, $01
00087C2A E10D                       	smpsAlterNote       $0D
00087C2C E701                       	dc.b	smpsNoAttack, $01
00087C2E E10C                       	smpsAlterNote       $0C
00087C30 E701                       	dc.b	smpsNoAttack, $01
00087C32 E106                       	smpsAlterNote       $06
00087C34 E701                       	dc.b	smpsNoAttack, $01
00087C36 E103                       	smpsAlterNote       $03
00087C38 8001                       	dc.b	nRst, $01
00087C3A E109                       	smpsAlterNote       $09
00087C3C C206 8001                  	dc.b	nF5, $06, nRst, $01
00087C42 E10C                       	smpsAlterNote       $0C
00087C44 E601                       	smpsAlterVol        $01
00087C46 BB0D                       	dc.b	nBb4, $0D
00087C48 E106                       	smpsAlterNote       $06
00087C4A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087C4E E109                       	smpsAlterNote       $09
00087C50 E701                       	dc.b	smpsNoAttack, $01
00087C52 E10F                       	smpsAlterNote       $0F
00087C54 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087C58 E109                       	smpsAlterNote       $09
00087C5A E701                       	dc.b	smpsNoAttack, $01
00087C5C E106                       	smpsAlterNote       $06
00087C5E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087C62 E10C                       	smpsAlterNote       $0C
00087C64 E701                       	dc.b	smpsNoAttack, $01
00087C66 E110                       	smpsAlterNote       $10
00087C68 E701                       	dc.b	smpsNoAttack, $01
00087C6A E10F                       	smpsAlterNote       $0F
00087C6C E701                       	dc.b	smpsNoAttack, $01
00087C6E E109                       	smpsAlterNote       $09
00087C70 E701                       	dc.b	smpsNoAttack, $01
00087C72 E105                       	smpsAlterNote       $05
00087C74 E701                       	dc.b	smpsNoAttack, $01
00087C76 E106                       	smpsAlterNote       $06
00087C78 8001 BD0D                  	dc.b	nRst, $01, nC5, $0D
00087C7C E103                       	smpsAlterNote       $03
00087C7E E701                       	dc.b	smpsNoAttack, $01
00087C80 E1FF                       	smpsAlterNote       $FF
00087C82 E701                       	dc.b	smpsNoAttack, $01
00087C84 E103                       	smpsAlterNote       $03
00087C86 E701                       	dc.b	smpsNoAttack, $01
00087C88 E106                       	smpsAlterNote       $06
00087C8A E701                       	dc.b	smpsNoAttack, $01
00087C8C E10A                       	smpsAlterNote       $0A
00087C8E E701                       	dc.b	smpsNoAttack, $01
00087C90 E106                       	smpsAlterNote       $06
00087C92 E701                       	dc.b	smpsNoAttack, $01
00087C94 E100                       	smpsAlterNote       $00
00087C96 E701                       	dc.b	smpsNoAttack, $01
00087C98 E1FF                       	smpsAlterNote       $FF
00087C9A E701                       	dc.b	smpsNoAttack, $01
00087C9C E103                       	smpsAlterNote       $03
00087C9E E701                       	dc.b	smpsNoAttack, $01
00087CA0 E109                       	smpsAlterNote       $09
00087CA2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087CA6 E106                       	smpsAlterNote       $06
00087CA8 E701                       	dc.b	smpsNoAttack, $01
00087CAA E100                       	smpsAlterNote       $00
00087CAC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087CB0 E107                       	smpsAlterNote       $07
00087CB2 BF0E                       	dc.b	nD5, $0E
00087CB4 E101                       	smpsAlterNote       $01
00087CB6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087CBA E107                       	smpsAlterNote       $07
00087CBC E701                       	dc.b	smpsNoAttack, $01
00087CBE E10A                       	smpsAlterNote       $0A
00087CC0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087CC4 E104                       	smpsAlterNote       $04
00087CC6 E701                       	dc.b	smpsNoAttack, $01
00087CC8 E100                       	smpsAlterNote       $00
00087CCA E701                       	dc.b	smpsNoAttack, $01
00087CCC E101                       	smpsAlterNote       $01
00087CCE E701                       	dc.b	smpsNoAttack, $01
00087CD0 E107                       	smpsAlterNote       $07
00087CD2 E701                       	dc.b	smpsNoAttack, $01
00087CD4 E10B                       	smpsAlterNote       $0B
00087CD6 E701                       	dc.b	smpsNoAttack, $01
00087CD8 E107                       	smpsAlterNote       $07
00087CDA E701                       	dc.b	smpsNoAttack, $01
00087CDC E104                       	smpsAlterNote       $04
00087CDE E701                       	dc.b	smpsNoAttack, $01
00087CE0 E100                       	smpsAlterNote       $00
00087CE2 E701                       	dc.b	smpsNoAttack, $01
00087CE4 E101                       	smpsAlterNote       $01
00087CE6 8001                       	dc.b	nRst, $01
00087CE8 E108                       	smpsAlterNote       $08
00087CEA C10C                       	dc.b	nE5, $0C
00087CEC E109                       	smpsAlterNote       $09
00087CEE C201 8001                  	dc.b	nF5, $01, nRst, $01
00087CF2 E10A                       	smpsAlterNote       $0A
00087CF4 8001                       	dc.b	nRst, $01
00087CF6 E109                       	smpsAlterNote       $09
00087CF8 C40C C20D                  	dc.b	nG5, $0C, nF5, $0D
00087CFC E106                       	smpsAlterNote       $06
00087CFE E701                       	dc.b	smpsNoAttack, $01
00087D00 E102                       	smpsAlterNote       $02
00087D02 E701                       	dc.b	smpsNoAttack, $01
00087D04 E103                       	smpsAlterNote       $03
00087D06 E701                       	dc.b	smpsNoAttack, $01
00087D08 E109                       	smpsAlterNote       $09
00087D0A E701                       	dc.b	smpsNoAttack, $01
00087D0C E10D                       	smpsAlterNote       $0D
00087D0E E701                       	dc.b	smpsNoAttack, $01
00087D10 E109                       	smpsAlterNote       $09
00087D12 E701                       	dc.b	smpsNoAttack, $01
00087D14 E106                       	smpsAlterNote       $06
00087D16 E701                       	dc.b	smpsNoAttack, $01
00087D18 E102                       	smpsAlterNote       $02
00087D1A E701                       	dc.b	smpsNoAttack, $01
00087D1C E106                       	smpsAlterNote       $06
00087D1E E701                       	dc.b	smpsNoAttack, $01
00087D20 E10C                       	smpsAlterNote       $0C
00087D22 E701                       	dc.b	smpsNoAttack, $01
00087D24 E10D                       	smpsAlterNote       $0D
00087D26 E701                       	dc.b	smpsNoAttack, $01
00087D28 E109                       	smpsAlterNote       $09
00087D2A C40D                       	dc.b	nG5, $0D
00087D2C E106                       	smpsAlterNote       $06
00087D2E E701                       	dc.b	smpsNoAttack, $01
00087D30 E102                       	smpsAlterNote       $02
00087D32 E701                       	dc.b	smpsNoAttack, $01
00087D34 E103                       	smpsAlterNote       $03
00087D36 E701                       	dc.b	smpsNoAttack, $01
00087D38 E109                       	smpsAlterNote       $09
00087D3A E701                       	dc.b	smpsNoAttack, $01
00087D3C E108                       	smpsAlterNote       $08
00087D3E C007 C002 C002 8001 C001+  	dc.b	nEb5, $07, nEb5, $02, nEb5, $02, nRst, $01, nEb5, $01, nRst, $01
00087D4A E109                       	smpsAlterNote       $09
00087D4C C20D                       	dc.b	nF5, $0D
00087D4E E106                       	smpsAlterNote       $06
00087D50 E701                       	dc.b	smpsNoAttack, $01
00087D52 E102                       	smpsAlterNote       $02
00087D54 E701                       	dc.b	smpsNoAttack, $01
00087D56 E106                       	smpsAlterNote       $06
00087D58 E701                       	dc.b	smpsNoAttack, $01
00087D5A E109                       	smpsAlterNote       $09
00087D5C E701                       	dc.b	smpsNoAttack, $01
00087D5E E10D                       	smpsAlterNote       $0D
00087D60 E701                       	dc.b	smpsNoAttack, $01
00087D62 E109                       	smpsAlterNote       $09
00087D64 E701                       	dc.b	smpsNoAttack, $01
00087D66 E103                       	smpsAlterNote       $03
00087D68 E701                       	dc.b	smpsNoAttack, $01
00087D6A E102                       	smpsAlterNote       $02
00087D6C E701                       	dc.b	smpsNoAttack, $01
00087D6E E106                       	smpsAlterNote       $06
00087D70 E701                       	dc.b	smpsNoAttack, $01
00087D72 E10C                       	smpsAlterNote       $0C
00087D74 E701                       	dc.b	smpsNoAttack, $01
00087D76 E10D                       	smpsAlterNote       $0D
00087D78 8001                       	dc.b	nRst, $01
00087D7A E112                       	smpsAlterNote       $12
00087D7C C401                       	dc.b	nG5, $01
00087D7E E1EB                       	smpsAlterNote       $EB
00087D80 E7C5 01                    	dc.b	smpsNoAttack, nAb5, $01
00087D83 E1FD                       	smpsAlterNote       $FD
00087D85 E701                       	dc.b	smpsNoAttack, $01
00087D87 E10F                       	smpsAlterNote       $0F
00087D89 E701                       	dc.b	smpsNoAttack, $01
00087D8B E118                       	smpsAlterNote       $18
00087D8D E701                       	dc.b	smpsNoAttack, $01
00087D8F E1ED                       	smpsAlterNote       $ED
00087D91 E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
00087D94 E1FF                       	smpsAlterNote       $FF
00087D96 E701                       	dc.b	smpsNoAttack, $01
00087D98 E10B                       	smpsAlterNote       $0B
00087D9A E703                       	dc.b	smpsNoAttack, $03
00087D9C E109                       	smpsAlterNote       $09
00087D9E C407                       	dc.b	nG5, $07
00087DA0 E108                       	smpsAlterNote       $08
00087DA2 C006 8001 C002 C002 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $02, nEb5, $02, nEb5, $02, nRst, $01
00087DAE E109                       	smpsAlterNote       $09
00087DB0 C20D                       	dc.b	nF5, $0D
00087DB2 E103                       	smpsAlterNote       $03
00087DB4 E701                       	dc.b	smpsNoAttack, $01
00087DB6 E102                       	smpsAlterNote       $02
00087DB8 E701                       	dc.b	smpsNoAttack, $01
00087DBA E106                       	smpsAlterNote       $06
00087DBC E701                       	dc.b	smpsNoAttack, $01
00087DBE E10C                       	smpsAlterNote       $0C
00087DC0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087DC4 E109                       	smpsAlterNote       $09
00087DC6 E701                       	dc.b	smpsNoAttack, $01
00087DC8 E103                       	smpsAlterNote       $03
00087DCA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087DCE E109                       	smpsAlterNote       $09
00087DD0 E701                       	dc.b	smpsNoAttack, $01
00087DD2 E10C                       	smpsAlterNote       $0C
00087DD4 E701                       	dc.b	smpsNoAttack, $01
00087DD6 E10D                       	smpsAlterNote       $0D
00087DD8 8001                       	dc.b	nRst, $01
00087DDA E10B                       	smpsAlterNote       $0B
00087DDC C609 8001                  	dc.b	nA5, $09, nRst, $01
00087DE0 E109                       	smpsAlterNote       $09
00087DE2 B806 8001                  	dc.b	nG4, $06, nRst, $01
00087DE6 E108                       	smpsAlterNote       $08
00087DE8 C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
00087DF4 8001                       	dc.b	nRst, $01
00087DF6 E109                       	smpsAlterNote       $09
00087DF8 C20D                       	dc.b	nF5, $0D
00087DFA E103                       	smpsAlterNote       $03
00087DFC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087E00 E106                       	smpsAlterNote       $06
00087E02 E701                       	dc.b	smpsNoAttack, $01
00087E04 E10C                       	smpsAlterNote       $0C
00087E06 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087E0A E106                       	smpsAlterNote       $06
00087E0C E701                       	dc.b	smpsNoAttack, $01
00087E0E E103                       	smpsAlterNote       $03
00087E10 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087E14 E109                       	smpsAlterNote       $09
00087E16 E701                       	dc.b	smpsNoAttack, $01
00087E18 E10D                       	smpsAlterNote       $0D
00087E1A E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00087E20 E108                       	smpsAlterNote       $08
00087E22 E6FF                       	smpsAlterVol        $FF
00087E24 A806                       	dc.b	nEb3, $06
00087E26 E10C                       	smpsAlterNote       $0C
00087E28 A303 8001                  	dc.b	nBb2, $03, nRst, $01
00087E2C E108                       	smpsAlterNote       $08
00087E2E A803                       	dc.b	nEb3, $03
00087E30 E109                       	smpsAlterNote       $09
00087E32 AC03 8001                  	dc.b	nG3, $03, nRst, $01
00087E36 E10C                       	smpsAlterNote       $0C
00087E38 AF02 8001 AF03 8007        	dc.b	nBb3, $02, nRst, $01, nBb3, $03, nRst, $07
00087E42 E109                       	smpsAlterNote       $09
00087E44 E602                       	smpsAlterVol        $02
00087E46 B604                       	dc.b	nF4, $04
00087E48 E602                       	smpsAlterVol        $02
00087E4A F6F1 AA                    	smpsJump            music84_Jump02
00087E4D                            
00087E4D                            ; FM4 Data
00087E4D                            music84_FM4:
00087E4F E040                       	smpsPan             panRight, $00
00087E51 8003                       	dc.b	nRst, $03
00087E53 E10F                       	smpsAlterNote       $0F
00087E55 C603 8008                  	dc.b	nA5, $03, nRst, $08
00087E59 E10D                       	smpsAlterNote       $0D
00087E5B C403 800A                  	dc.b	nG5, $03, nRst, $0A
00087E5F E10C                       	smpsAlterNote       $0C
00087E61 C103 8004                  	dc.b	nE5, $03, nRst, $04
00087E67 E6FE                       	smpsAlterVol        $FE
00087E69 E110                       	smpsAlterNote       $10
00087E6B C703 8001                  	dc.b	nBb5, $03, nRst, $01
00087E6F E10F                       	smpsAlterNote       $0F
00087E71 C602 8001                  	dc.b	nA5, $02, nRst, $01
00087E75 E10D                       	smpsAlterNote       $0D
00087E77 C403 C401 E7C2 0280 01     	dc.b	nG5, $03, nG5, $01, smpsNoAttack, nF5, $02, nRst, $01
00087E80 E10C                       	smpsAlterNote       $0C
00087E82 C103                       	dc.b	nE5, $03
00087E84 E10A                       	smpsAlterNote       $0A
00087E86 BD03 8001                  	dc.b	nC5, $03, nRst, $01
00087E8C 03                         	dc.b	$03
00087E8D                            
00087E8D                            music84_Jump01:
00087E8D E10B                       	smpsAlterNote       $0B
00087E8F BF03 8001                  	dc.b	nD5, $03, nRst, $01
00087E93 E10C                       	smpsAlterNote       $0C
00087E95 C102 8001                  	dc.b	nE5, $02, nRst, $01
00087E99 E10D                       	smpsAlterNote       $0D
00087E9B C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
00087EA5 E10B                       	smpsAlterNote       $0B
00087EA7 BF03 C90D                  	dc.b	nD5, $03, nC6, $0D
00087EAB E107                       	smpsAlterNote       $07
00087EAD E701                       	dc.b	smpsNoAttack, $01
00087EAF E103                       	smpsAlterNote       $03
00087EB1 E701                       	dc.b	smpsNoAttack, $01
00087EB3 E104                       	smpsAlterNote       $04
00087EB5 E701                       	dc.b	smpsNoAttack, $01
00087EB7 E10A                       	smpsAlterNote       $0A
00087EB9 E701                       	dc.b	smpsNoAttack, $01
00087EBB E10E                       	smpsAlterNote       $0E
00087EBD E701                       	dc.b	smpsNoAttack, $01
00087EBF E10A                       	smpsAlterNote       $0A
00087EC1 E701                       	dc.b	smpsNoAttack, $01
00087EC3 E107                       	smpsAlterNote       $07
00087EC5 E701                       	dc.b	smpsNoAttack, $01
00087EC7 E104                       	smpsAlterNote       $04
00087EC9 8001                       	dc.b	nRst, $01
00087ECB E110                       	smpsAlterNote       $10
00087ECD C703                       	dc.b	nBb5, $03
00087ECF E10F                       	smpsAlterNote       $0F
00087ED1 C603 8001                  	dc.b	nA5, $03, nRst, $01
00087ED5 E10D                       	smpsAlterNote       $0D
00087ED7 C402 8001 C60D             	dc.b	nG5, $02, nRst, $01, nA5, $0D
00087EDD E10C                       	smpsAlterNote       $0C
00087EDF E701                       	dc.b	smpsNoAttack, $01
00087EE1 E108                       	smpsAlterNote       $08
00087EE3 E701                       	dc.b	smpsNoAttack, $01
00087EE5 E10C                       	smpsAlterNote       $0C
00087EE7 E701                       	dc.b	smpsNoAttack, $01
00087EE9 E10F                       	smpsAlterNote       $0F
00087EEB E701                       	dc.b	smpsNoAttack, $01
00087EED E113                       	smpsAlterNote       $13
00087EEF E701                       	dc.b	smpsNoAttack, $01
00087EF1 E10F                       	smpsAlterNote       $0F
00087EF3 E701                       	dc.b	smpsNoAttack, $01
00087EF5 E109                       	smpsAlterNote       $09
00087EF7 E701                       	dc.b	smpsNoAttack, $01
00087EF9 E108                       	smpsAlterNote       $08
00087EFB E701                       	dc.b	smpsNoAttack, $01
00087EFD E10C                       	smpsAlterNote       $0C
00087EFF E701                       	dc.b	smpsNoAttack, $01
00087F01 E112                       	smpsAlterNote       $12
00087F03 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087F07 E10C                       	smpsAlterNote       $0C
00087F09 E701                       	dc.b	smpsNoAttack, $01
00087F0B E109                       	smpsAlterNote       $09
00087F0D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087F11 E10F                       	smpsAlterNote       $0F
00087F13 E701                       	dc.b	smpsNoAttack, $01
00087F15 E113                       	smpsAlterNote       $13
00087F17 E701                       	dc.b	smpsNoAttack, $01
00087F19 E112                       	smpsAlterNote       $12
00087F1B E701                       	dc.b	smpsNoAttack, $01
00087F1D E10C                       	smpsAlterNote       $0C
00087F1F E701                       	dc.b	smpsNoAttack, $01
00087F21 E108                       	smpsAlterNote       $08
00087F23 E701                       	dc.b	smpsNoAttack, $01
00087F25 E10C                       	smpsAlterNote       $0C
00087F27 E701                       	dc.b	smpsNoAttack, $01
00087F29 E10F                       	smpsAlterNote       $0F
00087F2B E701                       	dc.b	smpsNoAttack, $01
00087F2D E113                       	smpsAlterNote       $13
00087F2F E701                       	dc.b	smpsNoAttack, $01
00087F31 E10F                       	smpsAlterNote       $0F
00087F33 E701                       	dc.b	smpsNoAttack, $01
00087F35 E109                       	smpsAlterNote       $09
00087F37 E701                       	dc.b	smpsNoAttack, $01
00087F39 E108                       	smpsAlterNote       $08
00087F3B E701                       	dc.b	smpsNoAttack, $01
00087F3D E10C                       	smpsAlterNote       $0C
00087F3F E701                       	dc.b	smpsNoAttack, $01
00087F41 E112                       	smpsAlterNote       $12
00087F43 E701                       	dc.b	smpsNoAttack, $01
00087F45 E113                       	smpsAlterNote       $13
00087F47 800F                       	dc.b	nRst, $0F
00087F49 E10B                       	smpsAlterNote       $0B
00087F4B BF03                       	dc.b	nD5, $03
00087F4D E10C                       	smpsAlterNote       $0C
00087F4F C103 8001                  	dc.b	nE5, $03, nRst, $01
00087F53 E10D                       	smpsAlterNote       $0D
00087F55 C202 8001 C403 C607        	dc.b	nF5, $02, nRst, $01, nG5, $03, nA5, $07
00087F5D E10B                       	smpsAlterNote       $0B
00087F5F BF03 8001 C90D CB03 8001   	dc.b	nD5, $03, nRst, $01, nC6, $0D, nD6, $03, nRst, $01
00087F69 E110                       	smpsAlterNote       $10
00087F6B C704                       	dc.b	nBb5, $04
00087F6D E10F                       	smpsAlterNote       $0F
00087F6F C604 8001                  	dc.b	nA5, $04, nRst, $01
00087F73 E10D                       	smpsAlterNote       $0D
00087F75 C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
00087F7B E109                       	smpsAlterNote       $09
00087F7D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087F81 E10F                       	smpsAlterNote       $0F
00087F83 E701                       	dc.b	smpsNoAttack, $01
00087F85 E112                       	smpsAlterNote       $12
00087F87 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087F8B E10C                       	smpsAlterNote       $0C
00087F8D E701                       	dc.b	smpsNoAttack, $01
00087F8F E108                       	smpsAlterNote       $08
00087F91 E701                       	dc.b	smpsNoAttack, $01
00087F93 E109                       	smpsAlterNote       $09
00087F95 E701                       	dc.b	smpsNoAttack, $01
00087F97 E10F                       	smpsAlterNote       $0F
00087F99 E701                       	dc.b	smpsNoAttack, $01
00087F9B E113                       	smpsAlterNote       $13
00087F9D E701                       	dc.b	smpsNoAttack, $01
00087F9F E10F                       	smpsAlterNote       $0F
00087FA1 E701                       	dc.b	smpsNoAttack, $01
00087FA3 E10C                       	smpsAlterNote       $0C
00087FA5 E701                       	dc.b	smpsNoAttack, $01
00087FA7 E108                       	smpsAlterNote       $08
00087FA9 E701                       	dc.b	smpsNoAttack, $01
00087FAB E10C                       	smpsAlterNote       $0C
00087FAD E701                       	dc.b	smpsNoAttack, $01
00087FAF E112                       	smpsAlterNote       $12
00087FB1 E701                       	dc.b	smpsNoAttack, $01
00087FB3 E113                       	smpsAlterNote       $13
00087FB5 E701                       	dc.b	smpsNoAttack, $01
00087FB7 E10F                       	smpsAlterNote       $0F
00087FB9 E701                       	dc.b	smpsNoAttack, $01
00087FBB E109                       	smpsAlterNote       $09
00087FBD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087FC1 E10C                       	smpsAlterNote       $0C
00087FC3 E701                       	dc.b	smpsNoAttack, $01
00087FC5 E112                       	smpsAlterNote       $12
00087FC7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00087FCB E10C                       	smpsAlterNote       $0C
00087FCD E701                       	dc.b	smpsNoAttack, $01
00087FCF E109                       	smpsAlterNote       $09
00087FD1 E701                       	dc.b	smpsNoAttack, $01
00087FD3 E10D                       	smpsAlterNote       $0D
00087FD5 C401 8001                  	dc.b	nG5, $01, nRst, $01
00087FD9 E10F                       	smpsAlterNote       $0F
00087FDB C501 8001 C60D C604 8001   	dc.b	nAb5, $01, nRst, $01, nA5, $0D, nA5, $04, nRst, $01
00087FE5 E10D                       	smpsAlterNote       $0D
00087FE7 C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
00087FED E10B                       	smpsAlterNote       $0B
00087FEF BF0D                       	dc.b	nD5, $0D
00087FF1 E108                       	smpsAlterNote       $08
00087FF3 E701                       	dc.b	smpsNoAttack, $01
00087FF5 E104                       	smpsAlterNote       $04
00087FF7 E701                       	dc.b	smpsNoAttack, $01
00087FF9 E108                       	smpsAlterNote       $08
00087FFB E701                       	dc.b	smpsNoAttack, $01
00087FFD E10B                       	smpsAlterNote       $0B
00087FFF E701                       	dc.b	smpsNoAttack, $01
00088001 E10F                       	smpsAlterNote       $0F
00088003 E701                       	dc.b	smpsNoAttack, $01
00088005 E10B                       	smpsAlterNote       $0B
00088007 E701                       	dc.b	smpsNoAttack, $01
00088009 E105                       	smpsAlterNote       $05
0008800B E701                       	dc.b	smpsNoAttack, $01
0008800D E104                       	smpsAlterNote       $04
0008800F E701                       	dc.b	smpsNoAttack, $01
00088011 E108                       	smpsAlterNote       $08
00088013 E701                       	dc.b	smpsNoAttack, $01
00088015 E10E                       	smpsAlterNote       $0E
00088017 E701                       	dc.b	smpsNoAttack, $01
00088019 E10F                       	smpsAlterNote       $0F
0008801B 8001                       	dc.b	nRst, $01
0008801D E10C                       	smpsAlterNote       $0C
0008801F C101                       	dc.b	nE5, $01
00088021 E10D                       	smpsAlterNote       $0D
00088023 C201 C401 C607             	dc.b	nF5, $01, nG5, $01, nA5, $07
00088029 E10F                       	smpsAlterNote       $0F
0008802B C606 8001                  	dc.b	nA5, $06, nRst, $01
0008802F E10C                       	smpsAlterNote       $0C
00088031 CD06 8001                  	dc.b	nE6, $06, nRst, $01
00088035 E10D                       	smpsAlterNote       $0D
00088037 CE06 8001                  	dc.b	nF6, $06, nRst, $01
0008803B E10C                       	smpsAlterNote       $0C
0008803D CD03                       	dc.b	nE6, $03
0008803F E10A                       	smpsAlterNote       $0A
00088041 C903 8001                  	dc.b	nC6, $03, nRst, $01
00088045 E10D                       	smpsAlterNote       $0D
00088047 C402 8001 C70D E701        	dc.b	nG5, $02, nRst, $01, nBb5, $0D, smpsNoAttack, $01
0008804F E109                       	smpsAlterNote       $09
00088051 E701                       	dc.b	smpsNoAttack, $01
00088053 E10D                       	smpsAlterNote       $0D
00088055 E701                       	dc.b	smpsNoAttack, $01
00088057 E110                       	smpsAlterNote       $10
00088059 E701                       	dc.b	smpsNoAttack, $01
0008805B E114                       	smpsAlterNote       $14
0008805D E701                       	dc.b	smpsNoAttack, $01
0008805F E110                       	smpsAlterNote       $10
00088061 E701                       	dc.b	smpsNoAttack, $01
00088063 E10A                       	smpsAlterNote       $0A
00088065 E701                       	dc.b	smpsNoAttack, $01
00088067 E109                       	smpsAlterNote       $09
00088069 E701                       	dc.b	smpsNoAttack, $01
0008806B E10D                       	smpsAlterNote       $0D
0008806D E701                       	dc.b	smpsNoAttack, $01
0008806F E113                       	smpsAlterNote       $13
00088071 E701                       	dc.b	smpsNoAttack, $01
00088073 E114                       	smpsAlterNote       $14
00088075 8001                       	dc.b	nRst, $01
00088077 E10F                       	smpsAlterNote       $0F
00088079 C606 8001 C50D             	dc.b	nA5, $06, nRst, $01, nAb5, $0D
0008807F E10C                       	smpsAlterNote       $0C
00088081 E701                       	dc.b	smpsNoAttack, $01
00088083 E108                       	smpsAlterNote       $08
00088085 E701                       	dc.b	smpsNoAttack, $01
00088087 E10C                       	smpsAlterNote       $0C
00088089 E701                       	dc.b	smpsNoAttack, $01
0008808B E112                       	smpsAlterNote       $12
0008808D E701                       	dc.b	smpsNoAttack, $01
0008808F E113                       	smpsAlterNote       $13
00088091 E701                       	dc.b	smpsNoAttack, $01
00088093 E10F                       	smpsAlterNote       $0F
00088095 E701                       	dc.b	smpsNoAttack, $01
00088097 E109                       	smpsAlterNote       $09
00088099 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008809D E10C                       	smpsAlterNote       $0C
0008809F E701                       	dc.b	smpsNoAttack, $01
000880A1 E112                       	smpsAlterNote       $12
000880A3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000880A7 E10C                       	smpsAlterNote       $0C
000880A9 E701                       	dc.b	smpsNoAttack, $01
000880AB E109                       	smpsAlterNote       $09
000880AD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000880B1 E10F                       	smpsAlterNote       $0F
000880B3 E701                       	dc.b	smpsNoAttack, $01
000880B5 E113                       	smpsAlterNote       $13
000880B7 E701                       	dc.b	smpsNoAttack, $01
000880B9 E112                       	smpsAlterNote       $12
000880BB E701                       	dc.b	smpsNoAttack, $01
000880BD E10C                       	smpsAlterNote       $0C
000880BF E701                       	dc.b	smpsNoAttack, $01
000880C1 E108                       	smpsAlterNote       $08
000880C3 E701                       	dc.b	smpsNoAttack, $01
000880C5 E10C                       	smpsAlterNote       $0C
000880C7 E701                       	dc.b	smpsNoAttack, $01
000880C9 E10F                       	smpsAlterNote       $0F
000880CB E701                       	dc.b	smpsNoAttack, $01
000880CD E113                       	smpsAlterNote       $13
000880CF E701                       	dc.b	smpsNoAttack, $01
000880D1 E10F                       	smpsAlterNote       $0F
000880D3 E701                       	dc.b	smpsNoAttack, $01
000880D5 E109                       	smpsAlterNote       $09
000880D7 E701                       	dc.b	smpsNoAttack, $01
000880D9 E108                       	smpsAlterNote       $08
000880DB E701                       	dc.b	smpsNoAttack, $01
000880DD E10C                       	smpsAlterNote       $0C
000880DF E701                       	dc.b	smpsNoAttack, $01
000880E1 E112                       	smpsAlterNote       $12
000880E3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000880E7 E10F                       	smpsAlterNote       $0F
000880E9 E701                       	dc.b	smpsNoAttack, $01
000880EB E109                       	smpsAlterNote       $09
000880ED E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000880F1 E10F                       	smpsAlterNote       $0F
000880F3 E701                       	dc.b	smpsNoAttack, $01
000880F5 E113                       	smpsAlterNote       $13
000880F7 E701                       	dc.b	smpsNoAttack, $01
000880F9 E112                       	smpsAlterNote       $12
000880FB E701                       	dc.b	smpsNoAttack, $01
000880FD E10C                       	smpsAlterNote       $0C
000880FF E701                       	dc.b	smpsNoAttack, $01
00088101 E108                       	smpsAlterNote       $08
00088103 E701                       	dc.b	smpsNoAttack, $01
00088105 E10C                       	smpsAlterNote       $0C
00088107 E701                       	dc.b	smpsNoAttack, $01
00088109 E10F                       	smpsAlterNote       $0F
0008810B E701                       	dc.b	smpsNoAttack, $01
0008810D E113                       	smpsAlterNote       $13
0008810F E701                       	dc.b	smpsNoAttack, $01
00088111 E10F                       	smpsAlterNote       $0F
00088113 E701                       	dc.b	smpsNoAttack, $01
00088115 E109                       	smpsAlterNote       $09
00088117 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008811B E10F                       	smpsAlterNote       $0F
0008811D C60D                       	dc.b	nA5, $0D
0008811F E109                       	smpsAlterNote       $09
00088121 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088125 E10C                       	smpsAlterNote       $0C
00088127 E701                       	dc.b	smpsNoAttack, $01
00088129 E112                       	smpsAlterNote       $12
0008812B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008812F E10C                       	smpsAlterNote       $0C
00088131 E701                       	dc.b	smpsNoAttack, $01
00088133 E109                       	smpsAlterNote       $09
00088135 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088139 E10F                       	smpsAlterNote       $0F
0008813B E701                       	dc.b	smpsNoAttack, $01
0008813D E113                       	smpsAlterNote       $13
0008813F E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00088145 E10D                       	smpsAlterNote       $0D
00088147 C206 C203 8001 C203        	dc.b	nF5, $06, nF5, $03, nRst, $01, nF5, $03
0008814F E10C                       	smpsAlterNote       $0C
00088151 C103 800E                  	dc.b	nE5, $03, nRst, $0E
00088157 E6FF                       	smpsAlterVol        $FF
00088159 E10B                       	smpsAlterNote       $0B
0008815B BF03 8001                  	dc.b	nD5, $03, nRst, $01
0008815F E10C                       	smpsAlterNote       $0C
00088161 C103                       	dc.b	nE5, $03
00088163 E10D                       	smpsAlterNote       $0D
00088165 C203 8001 C403 C606 8001   	dc.b	nF5, $03, nRst, $01, nG5, $03, nA5, $06, nRst, $01
0008816F E10B                       	smpsAlterNote       $0B
00088171 BF03 C90D                  	dc.b	nD5, $03, nC6, $0D
00088175 E107                       	smpsAlterNote       $07
00088177 E701                       	dc.b	smpsNoAttack, $01
00088179 E104                       	smpsAlterNote       $04
0008817B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008817F E10A                       	smpsAlterNote       $0A
00088181 E701                       	dc.b	smpsNoAttack, $01
00088183 E10D                       	smpsAlterNote       $0D
00088185 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088189 E107                       	smpsAlterNote       $07
0008818B E701                       	dc.b	smpsNoAttack, $01
0008818D E104                       	smpsAlterNote       $04
0008818F 8001                       	dc.b	nRst, $01
00088191 E110                       	smpsAlterNote       $10
00088193 C703                       	dc.b	nBb5, $03
00088195 E10F                       	smpsAlterNote       $0F
00088197 C603 8001                  	dc.b	nA5, $03, nRst, $01
0008819B E10D                       	smpsAlterNote       $0D
0008819D C403 C60D                  	dc.b	nG5, $03, nA5, $0D
000881A1 E10C                       	smpsAlterNote       $0C
000881A3 E701                       	dc.b	smpsNoAttack, $01
000881A5 E108                       	smpsAlterNote       $08
000881A7 E701                       	dc.b	smpsNoAttack, $01
000881A9 E109                       	smpsAlterNote       $09
000881AB E701                       	dc.b	smpsNoAttack, $01
000881AD E10F                       	smpsAlterNote       $0F
000881AF E701                       	dc.b	smpsNoAttack, $01
000881B1 E113                       	smpsAlterNote       $13
000881B3 E701                       	dc.b	smpsNoAttack, $01
000881B5 E10F                       	smpsAlterNote       $0F
000881B7 E701                       	dc.b	smpsNoAttack, $01
000881B9 E10C                       	smpsAlterNote       $0C
000881BB E701                       	dc.b	smpsNoAttack, $01
000881BD E108                       	smpsAlterNote       $08
000881BF E701                       	dc.b	smpsNoAttack, $01
000881C1 E10C                       	smpsAlterNote       $0C
000881C3 E701                       	dc.b	smpsNoAttack, $01
000881C5 E112                       	smpsAlterNote       $12
000881C7 E701                       	dc.b	smpsNoAttack, $01
000881C9 E113                       	smpsAlterNote       $13
000881CB E701                       	dc.b	smpsNoAttack, $01
000881CD E10F                       	smpsAlterNote       $0F
000881CF E701                       	dc.b	smpsNoAttack, $01
000881D1 E109                       	smpsAlterNote       $09
000881D3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000881D7 E10C                       	smpsAlterNote       $0C
000881D9 E701                       	dc.b	smpsNoAttack, $01
000881DB E112                       	smpsAlterNote       $12
000881DD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000881E1 E10C                       	smpsAlterNote       $0C
000881E3 E701                       	dc.b	smpsNoAttack, $01
000881E5 E109                       	smpsAlterNote       $09
000881E7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000881EB E10F                       	smpsAlterNote       $0F
000881ED E701                       	dc.b	smpsNoAttack, $01
000881EF E113                       	smpsAlterNote       $13
000881F1 E701                       	dc.b	smpsNoAttack, $01
000881F3 E112                       	smpsAlterNote       $12
000881F5 E701                       	dc.b	smpsNoAttack, $01
000881F7 E10C                       	smpsAlterNote       $0C
000881F9 E701                       	dc.b	smpsNoAttack, $01
000881FB E108                       	smpsAlterNote       $08
000881FD E701                       	dc.b	smpsNoAttack, $01
000881FF E10C                       	smpsAlterNote       $0C
00088201 E701                       	dc.b	smpsNoAttack, $01
00088203 E10F                       	smpsAlterNote       $0F
00088205 E701                       	dc.b	smpsNoAttack, $01
00088207 E113                       	smpsAlterNote       $13
00088209 E701                       	dc.b	smpsNoAttack, $01
0008820B E10F                       	smpsAlterNote       $0F
0008820D BA03 8001                  	dc.b	nA4, $03, nRst, $01
00088211 E110                       	smpsAlterNote       $10
00088213 BB03                       	dc.b	nBb4, $03
00088215 E10F                       	smpsAlterNote       $0F
00088217 BA06 8001                  	dc.b	nA4, $06, nRst, $01
0008821B E10B                       	smpsAlterNote       $0B
0008821D BF03                       	dc.b	nD5, $03
0008821F E10C                       	smpsAlterNote       $0C
00088221 C103 8001                  	dc.b	nE5, $03, nRst, $01
00088225 E10D                       	smpsAlterNote       $0D
00088227 C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
00088231 E10B                       	smpsAlterNote       $0B
00088233 BF02 8001 C90D 8001 CB02+  	dc.b	nD5, $02, nRst, $01, nC6, $0D, nRst, $01, nD6, $02, nRst, $01
0008823F E110                       	smpsAlterNote       $10
00088241 C704 8001                  	dc.b	nBb5, $04, nRst, $01
00088245 E10F                       	smpsAlterNote       $0F
00088247 C604                       	dc.b	nA5, $04
00088249 E10D                       	smpsAlterNote       $0D
0008824B C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
00088251 E109                       	smpsAlterNote       $09
00088253 E701                       	dc.b	smpsNoAttack, $01
00088255 E108                       	smpsAlterNote       $08
00088257 E701                       	dc.b	smpsNoAttack, $01
00088259 E10C                       	smpsAlterNote       $0C
0008825B E701                       	dc.b	smpsNoAttack, $01
0008825D E112                       	smpsAlterNote       $12
0008825F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088263 E10F                       	smpsAlterNote       $0F
00088265 E701                       	dc.b	smpsNoAttack, $01
00088267 E109                       	smpsAlterNote       $09
00088269 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008826D E10F                       	smpsAlterNote       $0F
0008826F E701                       	dc.b	smpsNoAttack, $01
00088271 E112                       	smpsAlterNote       $12
00088273 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088277 E10C                       	smpsAlterNote       $0C
00088279 E701                       	dc.b	smpsNoAttack, $01
0008827B E108                       	smpsAlterNote       $08
0008827D E701                       	dc.b	smpsNoAttack, $01
0008827F E109                       	smpsAlterNote       $09
00088281 E701                       	dc.b	smpsNoAttack, $01
00088283 E10F                       	smpsAlterNote       $0F
00088285 E701                       	dc.b	smpsNoAttack, $01
00088287 E113                       	smpsAlterNote       $13
00088289 E701                       	dc.b	smpsNoAttack, $01
0008828B E10F                       	smpsAlterNote       $0F
0008828D E701                       	dc.b	smpsNoAttack, $01
0008828F E10C                       	smpsAlterNote       $0C
00088291 E701                       	dc.b	smpsNoAttack, $01
00088293 E108                       	smpsAlterNote       $08
00088295 E701                       	dc.b	smpsNoAttack, $01
00088297 E10C                       	smpsAlterNote       $0C
00088299 E701                       	dc.b	smpsNoAttack, $01
0008829B E112                       	smpsAlterNote       $12
0008829D E701                       	dc.b	smpsNoAttack, $01
0008829F E113                       	smpsAlterNote       $13
000882A1 E701                       	dc.b	smpsNoAttack, $01
000882A3 E10F                       	smpsAlterNote       $0F
000882A5 E701                       	dc.b	smpsNoAttack, $01
000882A7 E109                       	smpsAlterNote       $09
000882A9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000882AD E10C                       	smpsAlterNote       $0C
000882AF E701                       	dc.b	smpsNoAttack, $01
000882B1 E112                       	smpsAlterNote       $12
000882B3 E701                       	dc.b	smpsNoAttack, $01
000882B5 E113                       	smpsAlterNote       $13
000882B7 8001                       	dc.b	nRst, $01
000882B9 E10F                       	smpsAlterNote       $0F
000882BB C602 C602 C602 8001 C601+  	dc.b	nA5, $02, nA5, $02, nA5, $02, nRst, $01, nA5, $01, nRst, $01
000882C7 C602 C602 8001 C604        	dc.b	nA5, $02, nA5, $02, nRst, $01, nA5, $04
000882CF E10D                       	smpsAlterNote       $0D
000882D1 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
000882D7 E10B                       	smpsAlterNote       $0B
000882D9 BF0D                       	dc.b	nD5, $0D
000882DB E108                       	smpsAlterNote       $08
000882DD E701                       	dc.b	smpsNoAttack, $01
000882DF E104                       	smpsAlterNote       $04
000882E1 E701                       	dc.b	smpsNoAttack, $01
000882E3 E105                       	smpsAlterNote       $05
000882E5 E701                       	dc.b	smpsNoAttack, $01
000882E7 E10B                       	smpsAlterNote       $0B
000882E9 E701                       	dc.b	smpsNoAttack, $01
000882EB E10F                       	smpsAlterNote       $0F
000882ED E701                       	dc.b	smpsNoAttack, $01
000882EF E10B                       	smpsAlterNote       $0B
000882F1 E701                       	dc.b	smpsNoAttack, $01
000882F3 E108                       	smpsAlterNote       $08
000882F5 E701                       	dc.b	smpsNoAttack, $01
000882F7 E104                       	smpsAlterNote       $04
000882F9 E701                       	dc.b	smpsNoAttack, $01
000882FB E108                       	smpsAlterNote       $08
000882FD E701                       	dc.b	smpsNoAttack, $01
000882FF E10E                       	smpsAlterNote       $0E
00088301 E701                       	dc.b	smpsNoAttack, $01
00088303 E10F                       	smpsAlterNote       $0F
00088305 E701                       	dc.b	smpsNoAttack, $01
00088307 E10C                       	smpsAlterNote       $0C
00088309 C101                       	dc.b	nE5, $01
0008830B E10D                       	smpsAlterNote       $0D
0008830D C201 C401 8001 C606        	dc.b	nF5, $01, nG5, $01, nRst, $01, nA5, $06
00088315 E10F                       	smpsAlterNote       $0F
00088317 C607                       	dc.b	nA5, $07
00088319 E10C                       	smpsAlterNote       $0C
0008831B CD07                       	dc.b	nE6, $07
0008831D E10D                       	smpsAlterNote       $0D
0008831F CE06 8001                  	dc.b	nF6, $06, nRst, $01
00088323 E10C                       	smpsAlterNote       $0C
00088325 CD03                       	dc.b	nE6, $03
00088327 E10A                       	smpsAlterNote       $0A
00088329 C903 8001                  	dc.b	nC6, $03, nRst, $01
0008832D E10D                       	smpsAlterNote       $0D
0008832F C403 C70D E701             	dc.b	nG5, $03, nBb5, $0D, smpsNoAttack, $01
00088335 E10A                       	smpsAlterNote       $0A
00088337 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008833B E110                       	smpsAlterNote       $10
0008833D E701                       	dc.b	smpsNoAttack, $01
0008833F E114                       	smpsAlterNote       $14
00088341 E701                       	dc.b	smpsNoAttack, $01
00088343 E113                       	smpsAlterNote       $13
00088345 E701                       	dc.b	smpsNoAttack, $01
00088347 E10D                       	smpsAlterNote       $0D
00088349 E701                       	dc.b	smpsNoAttack, $01
0008834B E109                       	smpsAlterNote       $09
0008834D E701                       	dc.b	smpsNoAttack, $01
0008834F E10D                       	smpsAlterNote       $0D
00088351 E701                       	dc.b	smpsNoAttack, $01
00088353 E110                       	smpsAlterNote       $10
00088355 E701                       	dc.b	smpsNoAttack, $01
00088357 E114                       	smpsAlterNote       $14
00088359 E701                       	dc.b	smpsNoAttack, $01
0008835B E10F                       	smpsAlterNote       $0F
0008835D C607 C50D                  	dc.b	nA5, $07, nAb5, $0D
00088361 E10C                       	smpsAlterNote       $0C
00088363 E701                       	dc.b	smpsNoAttack, $01
00088365 E108                       	smpsAlterNote       $08
00088367 E701                       	dc.b	smpsNoAttack, $01
00088369 E10C                       	smpsAlterNote       $0C
0008836B E701                       	dc.b	smpsNoAttack, $01
0008836D E10F                       	smpsAlterNote       $0F
0008836F E701                       	dc.b	smpsNoAttack, $01
00088371 E113                       	smpsAlterNote       $13
00088373 E701                       	dc.b	smpsNoAttack, $01
00088375 E10F                       	smpsAlterNote       $0F
00088377 E701                       	dc.b	smpsNoAttack, $01
00088379 E109                       	smpsAlterNote       $09
0008837B E701                       	dc.b	smpsNoAttack, $01
0008837D E108                       	smpsAlterNote       $08
0008837F E701                       	dc.b	smpsNoAttack, $01
00088381 E10C                       	smpsAlterNote       $0C
00088383 E701                       	dc.b	smpsNoAttack, $01
00088385 E112                       	smpsAlterNote       $12
00088387 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008838B E10F                       	smpsAlterNote       $0F
0008838D E701                       	dc.b	smpsNoAttack, $01
0008838F E109                       	smpsAlterNote       $09
00088391 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088395 E10F                       	smpsAlterNote       $0F
00088397 E701                       	dc.b	smpsNoAttack, $01
00088399 E112                       	smpsAlterNote       $12
0008839B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008839F E10C                       	smpsAlterNote       $0C
000883A1 E701                       	dc.b	smpsNoAttack, $01
000883A3 E108                       	smpsAlterNote       $08
000883A5 E701                       	dc.b	smpsNoAttack, $01
000883A7 E109                       	smpsAlterNote       $09
000883A9 E701                       	dc.b	smpsNoAttack, $01
000883AB E10F                       	smpsAlterNote       $0F
000883AD E701                       	dc.b	smpsNoAttack, $01
000883AF E113                       	smpsAlterNote       $13
000883B1 E701                       	dc.b	smpsNoAttack, $01
000883B3 E10F                       	smpsAlterNote       $0F
000883B5 E701                       	dc.b	smpsNoAttack, $01
000883B7 E10C                       	smpsAlterNote       $0C
000883B9 E701                       	dc.b	smpsNoAttack, $01
000883BB E108                       	smpsAlterNote       $08
000883BD E701                       	dc.b	smpsNoAttack, $01
000883BF E10C                       	smpsAlterNote       $0C
000883C1 E701                       	dc.b	smpsNoAttack, $01
000883C3 E112                       	smpsAlterNote       $12
000883C5 E701                       	dc.b	smpsNoAttack, $01
000883C7 E113                       	smpsAlterNote       $13
000883C9 E701                       	dc.b	smpsNoAttack, $01
000883CB E10F                       	smpsAlterNote       $0F
000883CD E701                       	dc.b	smpsNoAttack, $01
000883CF E109                       	smpsAlterNote       $09
000883D1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000883D5 E10C                       	smpsAlterNote       $0C
000883D7 E701                       	dc.b	smpsNoAttack, $01
000883D9 E112                       	smpsAlterNote       $12
000883DB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000883DF E10C                       	smpsAlterNote       $0C
000883E1 E701                       	dc.b	smpsNoAttack, $01
000883E3 E109                       	smpsAlterNote       $09
000883E5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000883E9 E10F                       	smpsAlterNote       $0F
000883EB E701                       	dc.b	smpsNoAttack, $01
000883ED E113                       	smpsAlterNote       $13
000883EF E701                       	dc.b	smpsNoAttack, $01
000883F1 E112                       	smpsAlterNote       $12
000883F3 E701                       	dc.b	smpsNoAttack, $01
000883F5 E10C                       	smpsAlterNote       $0C
000883F7 E701                       	dc.b	smpsNoAttack, $01
000883F9 E109                       	smpsAlterNote       $09
000883FB 8001                       	dc.b	nRst, $01
000883FD E10F                       	smpsAlterNote       $0F
000883FF C60D                       	dc.b	nA5, $0D
00088401 E10C                       	smpsAlterNote       $0C
00088403 E701                       	dc.b	smpsNoAttack, $01
00088405 E108                       	smpsAlterNote       $08
00088407 E701                       	dc.b	smpsNoAttack, $01
00088409 E10C                       	smpsAlterNote       $0C
0008840B E701                       	dc.b	smpsNoAttack, $01
0008840D E112                       	smpsAlterNote       $12
0008840F E701                       	dc.b	smpsNoAttack, $01
00088411 E113                       	smpsAlterNote       $13
00088413 E701                       	dc.b	smpsNoAttack, $01
00088415 E10F                       	smpsAlterNote       $0F
00088417 E701                       	dc.b	smpsNoAttack, $01
00088419 E109                       	smpsAlterNote       $09
0008841B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008841F E10C                       	smpsAlterNote       $0C
00088421 E701                       	dc.b	smpsNoAttack, $01
00088423 E112                       	smpsAlterNote       $12
00088425 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088429 E10C                       	smpsAlterNote       $0C
0008842B E701                       	dc.b	smpsNoAttack, $01
0008842D E109                       	smpsAlterNote       $09
0008842F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088433 E10F                       	smpsAlterNote       $0F
00088435 E701                       	dc.b	smpsNoAttack, $01
00088437 E113                       	smpsAlterNote       $13
00088439 E701                       	dc.b	smpsNoAttack, $01
0008843B E112                       	smpsAlterNote       $12
0008843D E701                       	dc.b	smpsNoAttack, $01
0008843F E10C                       	smpsAlterNote       $0C
00088441 E701                       	dc.b	smpsNoAttack, $01
00088443 E108                       	smpsAlterNote       $08
00088445 E701                       	dc.b	smpsNoAttack, $01
00088447 E10C                       	smpsAlterNote       $0C
00088449 E701                       	dc.b	smpsNoAttack, $01
0008844B E10F                       	smpsAlterNote       $0F
0008844D E701                       	dc.b	smpsNoAttack, $01
0008844F E113                       	smpsAlterNote       $13
00088451 E701                       	dc.b	smpsNoAttack, $01
00088453 E10F                       	smpsAlterNote       $0F
00088455 E701                       	dc.b	smpsNoAttack, $01
00088457 E109                       	smpsAlterNote       $09
00088459 E701                       	dc.b	smpsNoAttack, $01
0008845B E108                       	smpsAlterNote       $08
0008845D E701                       	dc.b	smpsNoAttack, $01
0008845F E10C                       	smpsAlterNote       $0C
00088461 E701                       	dc.b	smpsNoAttack, $01
00088463 E112                       	smpsAlterNote       $12
00088465 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088469 E10F                       	smpsAlterNote       $0F
0008846B E701                       	dc.b	smpsNoAttack, $01
0008846D E109                       	smpsAlterNote       $09
0008846F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088473 E10F                       	smpsAlterNote       $0F
00088475 E701                       	dc.b	smpsNoAttack, $01
00088477 E112                       	smpsAlterNote       $12
00088479 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008847D E10C                       	smpsAlterNote       $0C
0008847F E701                       	dc.b	smpsNoAttack, $01
00088481 E108                       	smpsAlterNote       $08
00088483 E701                       	dc.b	smpsNoAttack, $01
00088485 E10C                       	smpsAlterNote       $0C
00088487 E701                       	dc.b	smpsNoAttack, $01
00088489 E10F                       	smpsAlterNote       $0F
0008848B E701                       	dc.b	smpsNoAttack, $01
0008848D E113                       	smpsAlterNote       $13
0008848F E701                       	dc.b	smpsNoAttack, $01
00088491 E10F                       	smpsAlterNote       $0F
00088493 E701                       	dc.b	smpsNoAttack, $01
00088495 E109                       	smpsAlterNote       $09
00088497 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008849D E601                       	smpsAlterVol        $01
0008849F E10F                       	smpsAlterNote       $0F
000884A1 C604                       	dc.b	nA5, $04
000884A3 E10D                       	smpsAlterNote       $0D
000884A5 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
000884AB E10B                       	smpsAlterNote       $0B
000884AD BF0A 8001 BF02 8001        	dc.b	nD5, $0A, nRst, $01, nD5, $02, nRst, $01
000884B5 E10F                       	smpsAlterNote       $0F
000884B7 C604 8001                  	dc.b	nA5, $04, nRst, $01
000884BB E10D                       	smpsAlterNote       $0D
000884BD C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
000884C3 E10C                       	smpsAlterNote       $0C
000884C5 C109 8001 C103             	dc.b	nE5, $09, nRst, $01, nE5, $03
000884CB E10A                       	smpsAlterNote       $0A
000884CD C904 8001                  	dc.b	nC6, $04, nRst, $01
000884D1 E110                       	smpsAlterNote       $10
000884D3 C704 8001                  	dc.b	nBb5, $04, nRst, $01
000884D7 E10F                       	smpsAlterNote       $0F
000884D9 C604                       	dc.b	nA5, $04
000884DB E10D                       	smpsAlterNote       $0D
000884DD C403 8001 C202 8001 C403+  	dc.b	nG5, $03, nRst, $01, nF5, $02, nRst, $01, nG5, $03, nA5, $0E
000884E9 E109                       	smpsAlterNote       $09
000884EB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000884EF E10F                       	smpsAlterNote       $0F
000884F1 E701                       	dc.b	smpsNoAttack, $01
000884F3 E112                       	smpsAlterNote       $12
000884F5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000884F9 E10C                       	smpsAlterNote       $0C
000884FB E701                       	dc.b	smpsNoAttack, $01
000884FD E108                       	smpsAlterNote       $08
000884FF E701                       	dc.b	smpsNoAttack, $01
00088501 E10C                       	smpsAlterNote       $0C
00088503 E701                       	dc.b	smpsNoAttack, $01
00088505 E10F                       	smpsAlterNote       $0F
00088507 E701                       	dc.b	smpsNoAttack, $01
00088509 E113                       	smpsAlterNote       $13
0008850B E701                       	dc.b	smpsNoAttack, $01
0008850D E10D                       	smpsAlterNote       $0D
0008850F C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
00088515 E10C                       	smpsAlterNote       $0C
00088517 C10D                       	dc.b	nE5, $0D
00088519 E109                       	smpsAlterNote       $09
0008851B E701                       	dc.b	smpsNoAttack, $01
0008851D E105                       	smpsAlterNote       $05
0008851F E701                       	dc.b	smpsNoAttack, $01
00088521 E106                       	smpsAlterNote       $06
00088523 E701                       	dc.b	smpsNoAttack, $01
00088525 E10C                       	smpsAlterNote       $0C
00088527 E701                       	dc.b	smpsNoAttack, $01
00088529 E110                       	smpsAlterNote       $10
0008852B E701                       	dc.b	smpsNoAttack, $01
0008852D E10C                       	smpsAlterNote       $0C
0008852F E701                       	dc.b	smpsNoAttack, $01
00088531 E109                       	smpsAlterNote       $09
00088533 E701                       	dc.b	smpsNoAttack, $01
00088535 E105                       	smpsAlterNote       $05
00088537 E701                       	dc.b	smpsNoAttack, $01
00088539 E109                       	smpsAlterNote       $09
0008853B E701                       	dc.b	smpsNoAttack, $01
0008853D E10F                       	smpsAlterNote       $0F
0008853F E701                       	dc.b	smpsNoAttack, $01
00088541 E110                       	smpsAlterNote       $10
00088543 E701                       	dc.b	smpsNoAttack, $01
00088545 E10C                       	smpsAlterNote       $0C
00088547 E701                       	dc.b	smpsNoAttack, $01
00088549 E106                       	smpsAlterNote       $06
0008854B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008854F E109                       	smpsAlterNote       $09
00088551 E701                       	dc.b	smpsNoAttack, $01
00088553 E10F                       	smpsAlterNote       $0F
00088555 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088559 E109                       	smpsAlterNote       $09
0008855B E701                       	dc.b	smpsNoAttack, $01
0008855D E106                       	smpsAlterNote       $06
0008855F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088563 E10C                       	smpsAlterNote       $0C
00088565 E701                       	dc.b	smpsNoAttack, $01
00088567 E110                       	smpsAlterNote       $10
00088569 E701                       	dc.b	smpsNoAttack, $01
0008856B E10F                       	smpsAlterNote       $0F
0008856D E701                       	dc.b	smpsNoAttack, $01
0008856F E109                       	smpsAlterNote       $09
00088571 E701                       	dc.b	smpsNoAttack, $01
00088573 E105                       	smpsAlterNote       $05
00088575 E701                       	dc.b	smpsNoAttack, $01
00088577 E109                       	smpsAlterNote       $09
00088579 E701                       	dc.b	smpsNoAttack, $01
0008857B E10C                       	smpsAlterNote       $0C
0008857D E701                       	dc.b	smpsNoAttack, $01
0008857F E110                       	smpsAlterNote       $10
00088581 E701                       	dc.b	smpsNoAttack, $01
00088583 E10C                       	smpsAlterNote       $0C
00088585 E701                       	dc.b	smpsNoAttack, $01
00088587 E106                       	smpsAlterNote       $06
00088589 E701                       	dc.b	smpsNoAttack, $01
0008858B E105                       	smpsAlterNote       $05
0008858D E701                       	dc.b	smpsNoAttack, $01
0008858F E109                       	smpsAlterNote       $09
00088591 E701                       	dc.b	smpsNoAttack, $01
00088593 E10F                       	smpsAlterNote       $0F
00088595 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088599 E10C                       	smpsAlterNote       $0C
0008859B E701                       	dc.b	smpsNoAttack, $01
0008859D E106                       	smpsAlterNote       $06
0008859F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000885A3 E10C                       	smpsAlterNote       $0C
000885A5 E701                       	dc.b	smpsNoAttack, $01
000885A7 E10F                       	smpsAlterNote       $0F
000885A9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000885AD E109                       	smpsAlterNote       $09
000885AF E701                       	dc.b	smpsNoAttack, $01
000885B1 E105                       	smpsAlterNote       $05
000885B3 E701                       	dc.b	smpsNoAttack, $01
000885B5 E106                       	smpsAlterNote       $06
000885B7 E701                       	dc.b	smpsNoAttack, $01
000885B9 E10C                       	smpsAlterNote       $0C
000885BB E701                       	dc.b	smpsNoAttack, $01
000885BD E110                       	smpsAlterNote       $10
000885BF E701                       	dc.b	smpsNoAttack, $01
000885C1 E10C                       	smpsAlterNote       $0C
000885C3 E701                       	dc.b	smpsNoAttack, $01
000885C5 E109                       	smpsAlterNote       $09
000885C7 E701                       	dc.b	smpsNoAttack, $01
000885C9 E105                       	smpsAlterNote       $05
000885CB E701                       	dc.b	smpsNoAttack, $01
000885CD E109                       	smpsAlterNote       $09
000885CF E701                       	dc.b	smpsNoAttack, $01
000885D1 E10F                       	smpsAlterNote       $0F
000885D3 E701                       	dc.b	smpsNoAttack, $01
000885D5 E110                       	smpsAlterNote       $10
000885D7 E701                       	dc.b	smpsNoAttack, $01
000885D9 E10C                       	smpsAlterNote       $0C
000885DB E701                       	dc.b	smpsNoAttack, $01
000885DD E106                       	smpsAlterNote       $06
000885DF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000885E3 E109                       	smpsAlterNote       $09
000885E5 E701                       	dc.b	smpsNoAttack, $01
000885E7 E10F                       	smpsAlterNote       $0F
000885E9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000885ED E109                       	smpsAlterNote       $09
000885EF E701                       	dc.b	smpsNoAttack, $01
000885F1 E106                       	smpsAlterNote       $06
000885F3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000885F7 E10C                       	smpsAlterNote       $0C
000885F9 E701                       	dc.b	smpsNoAttack, $01
000885FB E110                       	smpsAlterNote       $10
000885FD E701                       	dc.b	smpsNoAttack, $01
000885FF E10F                       	smpsAlterNote       $0F
00088601 E701                       	dc.b	smpsNoAttack, $01
00088603 E109                       	smpsAlterNote       $09
00088605 E701                       	dc.b	smpsNoAttack, $01
00088607 E105                       	smpsAlterNote       $05
00088609 E701                       	dc.b	smpsNoAttack, $01
0008860B E109                       	smpsAlterNote       $09
0008860D E701                       	dc.b	smpsNoAttack, $01
0008860F E10C                       	smpsAlterNote       $0C
00088611 E701                       	dc.b	smpsNoAttack, $01
00088613 E110                       	smpsAlterNote       $10
00088615 E701                       	dc.b	smpsNoAttack, $01
00088617 E10C                       	smpsAlterNote       $0C
00088619 E701                       	dc.b	smpsNoAttack, $01
0008861B E106                       	smpsAlterNote       $06
0008861D E701                       	dc.b	smpsNoAttack, $01
0008861F E105                       	smpsAlterNote       $05
00088621 E701                       	dc.b	smpsNoAttack, $01
00088623 E109                       	smpsAlterNote       $09
00088625 E701                       	dc.b	smpsNoAttack, $01
00088627 E10F                       	smpsAlterNote       $0F
00088629 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008862D E109                       	smpsAlterNote       $09
0008862F E701                       	dc.b	smpsNoAttack, $01
00088631 E106                       	smpsAlterNote       $06
00088633 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088637 E10C                       	smpsAlterNote       $0C
00088639 E701                       	dc.b	smpsNoAttack, $01
0008863B E110                       	smpsAlterNote       $10
0008863D E701                       	dc.b	smpsNoAttack, $01
0008863F E10F                       	smpsAlterNote       $0F
00088641 E701                       	dc.b	smpsNoAttack, $01
00088643 E109                       	smpsAlterNote       $09
00088645 E701                       	dc.b	smpsNoAttack, $01
00088647 E105                       	smpsAlterNote       $05
00088649 E701                       	dc.b	smpsNoAttack, $01
0008864B E109                       	smpsAlterNote       $09
0008864D E701                       	dc.b	smpsNoAttack, $01
0008864F E10C                       	smpsAlterNote       $0C
00088651 E701                       	dc.b	smpsNoAttack, $01
00088653 E110                       	smpsAlterNote       $10
00088655 E701                       	dc.b	smpsNoAttack, $01
00088657 E10C                       	smpsAlterNote       $0C
00088659 E701                       	dc.b	smpsNoAttack, $01
0008865B E106                       	smpsAlterNote       $06
0008865D E701                       	dc.b	smpsNoAttack, $01
0008865F E105                       	smpsAlterNote       $05
00088661 E701                       	dc.b	smpsNoAttack, $01
00088663 E109                       	smpsAlterNote       $09
00088665 E701                       	dc.b	smpsNoAttack, $01
00088667 E10F                       	smpsAlterNote       $0F
00088669 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008866D E10C                       	smpsAlterNote       $0C
0008866F E701                       	dc.b	smpsNoAttack, $01
00088671 E106                       	smpsAlterNote       $06
00088673 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088677 E10C                       	smpsAlterNote       $0C
00088679 E701                       	dc.b	smpsNoAttack, $01
0008867B E10F                       	smpsAlterNote       $0F
0008867D E701                       	dc.b	smpsNoAttack, $01
0008867F E110                       	smpsAlterNote       $10
00088681 8001                       	dc.b	nRst, $01
00088683 E10F                       	smpsAlterNote       $0F
00088685 C604                       	dc.b	nA5, $04
00088687 E10D                       	smpsAlterNote       $0D
00088689 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
0008868F E10B                       	smpsAlterNote       $0B
00088691 BF0A 8001 BF03             	dc.b	nD5, $0A, nRst, $01, nD5, $03
00088697 E10F                       	smpsAlterNote       $0F
00088699 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008869D E10D                       	smpsAlterNote       $0D
0008869F C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
000886A5 E10C                       	smpsAlterNote       $0C
000886A7 C10A C103 8001             	dc.b	nE5, $0A, nE5, $03, nRst, $01
000886AD E10A                       	smpsAlterNote       $0A
000886AF C904                       	dc.b	nC6, $04
000886B1 E110                       	smpsAlterNote       $10
000886B3 C704 8001                  	dc.b	nBb5, $04, nRst, $01
000886B7 E10F                       	smpsAlterNote       $0F
000886B9 C604                       	dc.b	nA5, $04
000886BB E10D                       	smpsAlterNote       $0D
000886BD C403 8001 C202 8001 C403+  	dc.b	nG5, $03, nRst, $01, nF5, $02, nRst, $01, nG5, $03, nA5, $0E
000886C9 E109                       	smpsAlterNote       $09
000886CB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000886CF E10F                       	smpsAlterNote       $0F
000886D1 E701                       	dc.b	smpsNoAttack, $01
000886D3 E112                       	smpsAlterNote       $12
000886D5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000886D9 E10C                       	smpsAlterNote       $0C
000886DB E701                       	dc.b	smpsNoAttack, $01
000886DD E108                       	smpsAlterNote       $08
000886DF E701                       	dc.b	smpsNoAttack, $01
000886E1 E109                       	smpsAlterNote       $09
000886E3 E701                       	dc.b	smpsNoAttack, $01
000886E5 E10F                       	smpsAlterNote       $0F
000886E7 E701                       	dc.b	smpsNoAttack, $01
000886E9 E113                       	smpsAlterNote       $13
000886EB E701                       	dc.b	smpsNoAttack, $01
000886ED E10D                       	smpsAlterNote       $0D
000886EF C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
000886F5 E10C                       	smpsAlterNote       $0C
000886F7 C10D                       	dc.b	nE5, $0D
000886F9 E109                       	smpsAlterNote       $09
000886FB E701                       	dc.b	smpsNoAttack, $01
000886FD E106                       	smpsAlterNote       $06
000886FF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088703 E10C                       	smpsAlterNote       $0C
00088705 E701                       	dc.b	smpsNoAttack, $01
00088707 E110                       	smpsAlterNote       $10
00088709 E701                       	dc.b	smpsNoAttack, $01
0008870B E10F                       	smpsAlterNote       $0F
0008870D E701                       	dc.b	smpsNoAttack, $01
0008870F E109                       	smpsAlterNote       $09
00088711 E701                       	dc.b	smpsNoAttack, $01
00088713 E105                       	smpsAlterNote       $05
00088715 E701                       	dc.b	smpsNoAttack, $01
00088717 E109                       	smpsAlterNote       $09
00088719 E701                       	dc.b	smpsNoAttack, $01
0008871B E10C                       	smpsAlterNote       $0C
0008871D E701                       	dc.b	smpsNoAttack, $01
0008871F E110                       	smpsAlterNote       $10
00088721 E701                       	dc.b	smpsNoAttack, $01
00088723 E10C                       	smpsAlterNote       $0C
00088725 E701                       	dc.b	smpsNoAttack, $01
00088727 E106                       	smpsAlterNote       $06
00088729 E701                       	dc.b	smpsNoAttack, $01
0008872B E105                       	smpsAlterNote       $05
0008872D E701                       	dc.b	smpsNoAttack, $01
0008872F E109                       	smpsAlterNote       $09
00088731 E701                       	dc.b	smpsNoAttack, $01
00088733 E10F                       	smpsAlterNote       $0F
00088735 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088739 E10C                       	smpsAlterNote       $0C
0008873B E701                       	dc.b	smpsNoAttack, $01
0008873D E106                       	smpsAlterNote       $06
0008873F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088743 E10C                       	smpsAlterNote       $0C
00088745 E701                       	dc.b	smpsNoAttack, $01
00088747 E10F                       	smpsAlterNote       $0F
00088749 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008874D E109                       	smpsAlterNote       $09
0008874F E701                       	dc.b	smpsNoAttack, $01
00088751 E105                       	smpsAlterNote       $05
00088753 E701                       	dc.b	smpsNoAttack, $01
00088755 E106                       	smpsAlterNote       $06
00088757 E701                       	dc.b	smpsNoAttack, $01
00088759 E10C                       	smpsAlterNote       $0C
0008875B E701                       	dc.b	smpsNoAttack, $01
0008875D E110                       	smpsAlterNote       $10
0008875F E701                       	dc.b	smpsNoAttack, $01
00088761 E10C                       	smpsAlterNote       $0C
00088763 E701                       	dc.b	smpsNoAttack, $01
00088765 E109                       	smpsAlterNote       $09
00088767 E701                       	dc.b	smpsNoAttack, $01
00088769 E105                       	smpsAlterNote       $05
0008876B E701                       	dc.b	smpsNoAttack, $01
0008876D E109                       	smpsAlterNote       $09
0008876F E701                       	dc.b	smpsNoAttack, $01
00088771 E10F                       	smpsAlterNote       $0F
00088773 E701                       	dc.b	smpsNoAttack, $01
00088775 E110                       	smpsAlterNote       $10
00088777 E701                       	dc.b	smpsNoAttack, $01
00088779 E10C                       	smpsAlterNote       $0C
0008877B E701                       	dc.b	smpsNoAttack, $01
0008877D E106                       	smpsAlterNote       $06
0008877F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088783 E109                       	smpsAlterNote       $09
00088785 E701                       	dc.b	smpsNoAttack, $01
00088787 E10F                       	smpsAlterNote       $0F
00088789 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008878D E109                       	smpsAlterNote       $09
0008878F E701                       	dc.b	smpsNoAttack, $01
00088791 E106                       	smpsAlterNote       $06
00088793 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088797 E10C                       	smpsAlterNote       $0C
00088799 E701                       	dc.b	smpsNoAttack, $01
0008879B E110                       	smpsAlterNote       $10
0008879D E701                       	dc.b	smpsNoAttack, $01
0008879F E10F                       	smpsAlterNote       $0F
000887A1 E701                       	dc.b	smpsNoAttack, $01
000887A3 E109                       	smpsAlterNote       $09
000887A5 E701                       	dc.b	smpsNoAttack, $01
000887A7 E105                       	smpsAlterNote       $05
000887A9 E701                       	dc.b	smpsNoAttack, $01
000887AB E109                       	smpsAlterNote       $09
000887AD E701                       	dc.b	smpsNoAttack, $01
000887AF E10F                       	smpsAlterNote       $0F
000887B1 E701                       	dc.b	smpsNoAttack, $01
000887B3 E110                       	smpsAlterNote       $10
000887B5 E701                       	dc.b	smpsNoAttack, $01
000887B7 E10C                       	smpsAlterNote       $0C
000887B9 E701                       	dc.b	smpsNoAttack, $01
000887BB E106                       	smpsAlterNote       $06
000887BD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000887C1 E109                       	smpsAlterNote       $09
000887C3 E701                       	dc.b	smpsNoAttack, $01
000887C5 E10F                       	smpsAlterNote       $0F
000887C7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000887CB E109                       	smpsAlterNote       $09
000887CD E701                       	dc.b	smpsNoAttack, $01
000887CF E106                       	smpsAlterNote       $06
000887D1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000887D5 E10C                       	smpsAlterNote       $0C
000887D7 E701                       	dc.b	smpsNoAttack, $01
000887D9 E110                       	smpsAlterNote       $10
000887DB E701                       	dc.b	smpsNoAttack, $01
000887DD E10F                       	smpsAlterNote       $0F
000887DF E701                       	dc.b	smpsNoAttack, $01
000887E1 E109                       	smpsAlterNote       $09
000887E3 E701                       	dc.b	smpsNoAttack, $01
000887E5 E105                       	smpsAlterNote       $05
000887E7 E701                       	dc.b	smpsNoAttack, $01
000887E9 E109                       	smpsAlterNote       $09
000887EB E701                       	dc.b	smpsNoAttack, $01
000887ED E10C                       	smpsAlterNote       $0C
000887EF E701                       	dc.b	smpsNoAttack, $01
000887F1 E110                       	smpsAlterNote       $10
000887F3 E701                       	dc.b	smpsNoAttack, $01
000887F5 E10C                       	smpsAlterNote       $0C
000887F7 E701                       	dc.b	smpsNoAttack, $01
000887F9 E106                       	smpsAlterNote       $06
000887FB E701                       	dc.b	smpsNoAttack, $01
000887FD E105                       	smpsAlterNote       $05
000887FF E701                       	dc.b	smpsNoAttack, $01
00088801 E109                       	smpsAlterNote       $09
00088803 E701                       	dc.b	smpsNoAttack, $01
00088805 E10F                       	smpsAlterNote       $0F
00088807 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008880B E10C                       	smpsAlterNote       $0C
0008880D E701                       	dc.b	smpsNoAttack, $01
0008880F E106                       	smpsAlterNote       $06
00088811 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088815 E10C                       	smpsAlterNote       $0C
00088817 E701                       	dc.b	smpsNoAttack, $01
00088819 E10F                       	smpsAlterNote       $0F
0008881B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008881F E109                       	smpsAlterNote       $09
00088821 E701                       	dc.b	smpsNoAttack, $01
00088823 E105                       	smpsAlterNote       $05
00088825 E701                       	dc.b	smpsNoAttack, $01
00088827 E106                       	smpsAlterNote       $06
00088829 E701                       	dc.b	smpsNoAttack, $01
0008882B E10C                       	smpsAlterNote       $0C
0008882D E701                       	dc.b	smpsNoAttack, $01
0008882F E110                       	smpsAlterNote       $10
00088831 E701                       	dc.b	smpsNoAttack, $01
00088833 E10C                       	smpsAlterNote       $0C
00088835 E701                       	dc.b	smpsNoAttack, $01
00088837 E109                       	smpsAlterNote       $09
00088839 E701                       	dc.b	smpsNoAttack, $01
0008883B E105                       	smpsAlterNote       $05
0008883D E701                       	dc.b	smpsNoAttack, $01
0008883F E109                       	smpsAlterNote       $09
00088841 E701                       	dc.b	smpsNoAttack, $01
00088843 E10F                       	smpsAlterNote       $0F
00088845 E701                       	dc.b	smpsNoAttack, $01
00088847 E110                       	smpsAlterNote       $10
00088849 E701                       	dc.b	smpsNoAttack, $01
0008884B E10C                       	smpsAlterNote       $0C
0008884D E701                       	dc.b	smpsNoAttack, $01
0008884F E106                       	smpsAlterNote       $06
00088851 E701                       	dc.b	smpsNoAttack, $01
00088853 E10B                       	smpsAlterNote       $0B
00088855 BF02                       	dc.b	nD5, $02
00088857 E10C                       	smpsAlterNote       $0C
00088859 C001 8001 C10D             	dc.b	nEb5, $01, nRst, $01, nE5, $0D
0008885F E109                       	smpsAlterNote       $09
00088861 E701                       	dc.b	smpsNoAttack, $01
00088863 E105                       	smpsAlterNote       $05
00088865 E701                       	dc.b	smpsNoAttack, $01
00088867 E109                       	smpsAlterNote       $09
00088869 E701                       	dc.b	smpsNoAttack, $01
0008886B E10F                       	smpsAlterNote       $0F
0008886D E701                       	dc.b	smpsNoAttack, $01
0008886F E110                       	smpsAlterNote       $10
00088871 E701                       	dc.b	smpsNoAttack, $01
00088873 E10C                       	smpsAlterNote       $0C
00088875 E701                       	dc.b	smpsNoAttack, $01
00088877 E106                       	smpsAlterNote       $06
00088879 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008887D E109                       	smpsAlterNote       $09
0008887F E701                       	dc.b	smpsNoAttack, $01
00088881 E10F                       	smpsAlterNote       $0F
00088883 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088887 E109                       	smpsAlterNote       $09
00088889 E701                       	dc.b	smpsNoAttack, $01
0008888B E106                       	smpsAlterNote       $06
0008888D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088891 E10C                       	smpsAlterNote       $0C
00088893 E701                       	dc.b	smpsNoAttack, $01
00088895 E110                       	smpsAlterNote       $10
00088897 E701                       	dc.b	smpsNoAttack, $01
00088899 E10F                       	smpsAlterNote       $0F
0008889B E701                       	dc.b	smpsNoAttack, $01
0008889D E109                       	smpsAlterNote       $09
0008889F E701                       	dc.b	smpsNoAttack, $01
000888A1 E105                       	smpsAlterNote       $05
000888A3 E701                       	dc.b	smpsNoAttack, $01
000888A5 E109                       	smpsAlterNote       $09
000888A7 E701                       	dc.b	smpsNoAttack, $01
000888A9 E10C                       	smpsAlterNote       $0C
000888AB E701                       	dc.b	smpsNoAttack, $01
000888AD E110                       	smpsAlterNote       $10
000888AF E701                       	dc.b	smpsNoAttack, $01
000888B1 E10C                       	smpsAlterNote       $0C
000888B3 E701                       	dc.b	smpsNoAttack, $01
000888B5 E106                       	smpsAlterNote       $06
000888B7 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000888BB E10D                       	smpsAlterNote       $0D
000888BD C409 8001 C206 8001        	dc.b	nG5, $09, nRst, $01, nF5, $06, nRst, $01
000888C5 E10C                       	smpsAlterNote       $0C
000888C7 C10D                       	dc.b	nE5, $0D
000888C9 E106                       	smpsAlterNote       $06
000888CB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000888CF E109                       	smpsAlterNote       $09
000888D1 E701                       	dc.b	smpsNoAttack, $01
000888D3 E10F                       	smpsAlterNote       $0F
000888D5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000888D9 E109                       	smpsAlterNote       $09
000888DB E701                       	dc.b	smpsNoAttack, $01
000888DD E106                       	smpsAlterNote       $06
000888DF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000888E3 E10C                       	smpsAlterNote       $0C
000888E5 E701                       	dc.b	smpsNoAttack, $01
000888E7 E110                       	smpsAlterNote       $10
000888E9 E701                       	dc.b	smpsNoAttack, $01
000888EB E10F                       	smpsAlterNote       $0F
000888ED E701                       	dc.b	smpsNoAttack, $01
000888EF E109                       	smpsAlterNote       $09
000888F1 E701                       	dc.b	smpsNoAttack, $01
000888F3 E105                       	smpsAlterNote       $05
000888F5 E701                       	dc.b	smpsNoAttack, $01
000888F7 E106                       	smpsAlterNote       $06
000888F9 800F                       	dc.b	nRst, $0F
000888FD E6FF                       	smpsAlterVol        $FF
000888FF E10F                       	smpsAlterNote       $0F
00088901 BA01                       	dc.b	nA4, $01
00088903 E110                       	smpsAlterNote       $10
00088905 BB02                       	dc.b	nBb4, $02
00088907 E10F                       	smpsAlterNote       $0F
00088909 BA03 8001 BA06             	dc.b	nA4, $03, nRst, $01, nA4, $06
0008890F E10B                       	smpsAlterNote       $0B
00088911 BF03 8001                  	dc.b	nD5, $03, nRst, $01
00088915 E10C                       	smpsAlterNote       $0C
00088917 C103                       	dc.b	nE5, $03
00088919 E10D                       	smpsAlterNote       $0D
0008891B C203 8001 C403 C606 8001   	dc.b	nF5, $03, nRst, $01, nG5, $03, nA5, $06, nRst, $01
00088925 E10B                       	smpsAlterNote       $0B
00088927 BF03 C90E                  	dc.b	nD5, $03, nC6, $0E
0008892B E104                       	smpsAlterNote       $04
0008892D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088931 E10A                       	smpsAlterNote       $0A
00088933 E701                       	dc.b	smpsNoAttack, $01
00088935 E10D                       	smpsAlterNote       $0D
00088937 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008893B E107                       	smpsAlterNote       $07
0008893D E701                       	dc.b	smpsNoAttack, $01
0008893F E104                       	smpsAlterNote       $04
00088941 8001                       	dc.b	nRst, $01
00088943 E110                       	smpsAlterNote       $10
00088945 C703                       	dc.b	nBb5, $03
00088947 E10F                       	smpsAlterNote       $0F
00088949 C603 8001                  	dc.b	nA5, $03, nRst, $01
0008894D E10D                       	smpsAlterNote       $0D
0008894F C403 C60D                  	dc.b	nG5, $03, nA5, $0D
00088953 E10C                       	smpsAlterNote       $0C
00088955 E701                       	dc.b	smpsNoAttack, $01
00088957 E108                       	smpsAlterNote       $08
00088959 E701                       	dc.b	smpsNoAttack, $01
0008895B E109                       	smpsAlterNote       $09
0008895D E701                       	dc.b	smpsNoAttack, $01
0008895F E10F                       	smpsAlterNote       $0F
00088961 E701                       	dc.b	smpsNoAttack, $01
00088963 E113                       	smpsAlterNote       $13
00088965 E701                       	dc.b	smpsNoAttack, $01
00088967 E10F                       	smpsAlterNote       $0F
00088969 E701                       	dc.b	smpsNoAttack, $01
0008896B E10C                       	smpsAlterNote       $0C
0008896D E701                       	dc.b	smpsNoAttack, $01
0008896F E108                       	smpsAlterNote       $08
00088971 E701                       	dc.b	smpsNoAttack, $01
00088973 E10C                       	smpsAlterNote       $0C
00088975 E701                       	dc.b	smpsNoAttack, $01
00088977 E112                       	smpsAlterNote       $12
00088979 E701                       	dc.b	smpsNoAttack, $01
0008897B E113                       	smpsAlterNote       $13
0008897D E701                       	dc.b	smpsNoAttack, $01
0008897F E10F                       	smpsAlterNote       $0F
00088981 E701                       	dc.b	smpsNoAttack, $01
00088983 E109                       	smpsAlterNote       $09
00088985 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088989 E10C                       	smpsAlterNote       $0C
0008898B E701                       	dc.b	smpsNoAttack, $01
0008898D E112                       	smpsAlterNote       $12
0008898F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088993 E10C                       	smpsAlterNote       $0C
00088995 E701                       	dc.b	smpsNoAttack, $01
00088997 E109                       	smpsAlterNote       $09
00088999 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008899D E10F                       	smpsAlterNote       $0F
0008899F E701                       	dc.b	smpsNoAttack, $01
000889A1 E113                       	smpsAlterNote       $13
000889A3 E701                       	dc.b	smpsNoAttack, $01
000889A5 E112                       	smpsAlterNote       $12
000889A7 E701                       	dc.b	smpsNoAttack, $01
000889A9 E10C                       	smpsAlterNote       $0C
000889AB E701                       	dc.b	smpsNoAttack, $01
000889AD E108                       	smpsAlterNote       $08
000889AF E701                       	dc.b	smpsNoAttack, $01
000889B1 E10C                       	smpsAlterNote       $0C
000889B3 E701                       	dc.b	smpsNoAttack, $01
000889B5 E10F                       	smpsAlterNote       $0F
000889B7 E701                       	dc.b	smpsNoAttack, $01
000889B9 E113                       	smpsAlterNote       $13
000889BB E701 800E                  	dc.b	smpsNoAttack, $01, nRst, $0E
000889BF E10B                       	smpsAlterNote       $0B
000889C1 BF03                       	dc.b	nD5, $03
000889C3 E10C                       	smpsAlterNote       $0C
000889C5 C103 8001                  	dc.b	nE5, $03, nRst, $01
000889C9 E10D                       	smpsAlterNote       $0D
000889CB C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
000889D5 E10B                       	smpsAlterNote       $0B
000889D7 BF02 8001 C90D 8001 CB02+  	dc.b	nD5, $02, nRst, $01, nC6, $0D, nRst, $01, nD6, $02, nRst, $01
000889E3 E110                       	smpsAlterNote       $10
000889E5 C704 8001                  	dc.b	nBb5, $04, nRst, $01
000889E9 E10F                       	smpsAlterNote       $0F
000889EB C604                       	dc.b	nA5, $04
000889ED E10D                       	smpsAlterNote       $0D
000889EF C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
000889F5 E109                       	smpsAlterNote       $09
000889F7 E701                       	dc.b	smpsNoAttack, $01
000889F9 E108                       	smpsAlterNote       $08
000889FB E701                       	dc.b	smpsNoAttack, $01
000889FD E10C                       	smpsAlterNote       $0C
000889FF E701                       	dc.b	smpsNoAttack, $01
00088A01 E112                       	smpsAlterNote       $12
00088A03 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088A07 E10F                       	smpsAlterNote       $0F
00088A09 E701                       	dc.b	smpsNoAttack, $01
00088A0B E109                       	smpsAlterNote       $09
00088A0D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088A11 E10F                       	smpsAlterNote       $0F
00088A13 E701                       	dc.b	smpsNoAttack, $01
00088A15 E112                       	smpsAlterNote       $12
00088A17 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088A1B E10C                       	smpsAlterNote       $0C
00088A1D E701                       	dc.b	smpsNoAttack, $01
00088A1F E108                       	smpsAlterNote       $08
00088A21 E701                       	dc.b	smpsNoAttack, $01
00088A23 E109                       	smpsAlterNote       $09
00088A25 E701                       	dc.b	smpsNoAttack, $01
00088A27 E10F                       	smpsAlterNote       $0F
00088A29 E701                       	dc.b	smpsNoAttack, $01
00088A2B E113                       	smpsAlterNote       $13
00088A2D E701                       	dc.b	smpsNoAttack, $01
00088A2F E10F                       	smpsAlterNote       $0F
00088A31 E701                       	dc.b	smpsNoAttack, $01
00088A33 E10C                       	smpsAlterNote       $0C
00088A35 E701                       	dc.b	smpsNoAttack, $01
00088A37 E108                       	smpsAlterNote       $08
00088A39 E701                       	dc.b	smpsNoAttack, $01
00088A3B E10C                       	smpsAlterNote       $0C
00088A3D E701                       	dc.b	smpsNoAttack, $01
00088A3F E112                       	smpsAlterNote       $12
00088A41 E701                       	dc.b	smpsNoAttack, $01
00088A43 E113                       	smpsAlterNote       $13
00088A45 E701                       	dc.b	smpsNoAttack, $01
00088A47 E10F                       	smpsAlterNote       $0F
00088A49 E701                       	dc.b	smpsNoAttack, $01
00088A4B E109                       	smpsAlterNote       $09
00088A4D E701                       	dc.b	smpsNoAttack, $01
00088A4F E10D                       	smpsAlterNote       $0D
00088A51 C402                       	dc.b	nG5, $02
00088A53 E10F                       	smpsAlterNote       $0F
00088A55 C501 8001 C60D 8001 C604   	dc.b	nAb5, $01, nRst, $01, nA5, $0D, nRst, $01, nA5, $04
00088A5F E10D                       	smpsAlterNote       $0D
00088A61 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
00088A67 E10B                       	smpsAlterNote       $0B
00088A69 BF0D                       	dc.b	nD5, $0D
00088A6B E108                       	smpsAlterNote       $08
00088A6D E701                       	dc.b	smpsNoAttack, $01
00088A6F E104                       	smpsAlterNote       $04
00088A71 E701                       	dc.b	smpsNoAttack, $01
00088A73 E105                       	smpsAlterNote       $05
00088A75 E701                       	dc.b	smpsNoAttack, $01
00088A77 E10B                       	smpsAlterNote       $0B
00088A79 E701                       	dc.b	smpsNoAttack, $01
00088A7B E10F                       	smpsAlterNote       $0F
00088A7D E701                       	dc.b	smpsNoAttack, $01
00088A7F E10B                       	smpsAlterNote       $0B
00088A81 E701                       	dc.b	smpsNoAttack, $01
00088A83 E108                       	smpsAlterNote       $08
00088A85 E701                       	dc.b	smpsNoAttack, $01
00088A87 E104                       	smpsAlterNote       $04
00088A89 E701                       	dc.b	smpsNoAttack, $01
00088A8B E108                       	smpsAlterNote       $08
00088A8D E701                       	dc.b	smpsNoAttack, $01
00088A8F E10E                       	smpsAlterNote       $0E
00088A91 E701                       	dc.b	smpsNoAttack, $01
00088A93 E10F                       	smpsAlterNote       $0F
00088A95 E701                       	dc.b	smpsNoAttack, $01
00088A97 E10C                       	smpsAlterNote       $0C
00088A99 C101                       	dc.b	nE5, $01
00088A9B E10D                       	smpsAlterNote       $0D
00088A9D C201 C401 8001 C606        	dc.b	nF5, $01, nG5, $01, nRst, $01, nA5, $06
00088AA5 E10F                       	smpsAlterNote       $0F
00088AA7 C607                       	dc.b	nA5, $07
00088AA9 E10C                       	smpsAlterNote       $0C
00088AAB CD07                       	dc.b	nE6, $07
00088AAD E10D                       	smpsAlterNote       $0D
00088AAF CE06 8001                  	dc.b	nF6, $06, nRst, $01
00088AB3 E10C                       	smpsAlterNote       $0C
00088AB5 CD03                       	dc.b	nE6, $03
00088AB7 E10A                       	smpsAlterNote       $0A
00088AB9 C903 8001                  	dc.b	nC6, $03, nRst, $01
00088ABD E10D                       	smpsAlterNote       $0D
00088ABF C403 C70D E701             	dc.b	nG5, $03, nBb5, $0D, smpsNoAttack, $01
00088AC5 E10A                       	smpsAlterNote       $0A
00088AC7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088ACB E110                       	smpsAlterNote       $10
00088ACD E701                       	dc.b	smpsNoAttack, $01
00088ACF E114                       	smpsAlterNote       $14
00088AD1 E701                       	dc.b	smpsNoAttack, $01
00088AD3 E113                       	smpsAlterNote       $13
00088AD5 E701                       	dc.b	smpsNoAttack, $01
00088AD7 E10D                       	smpsAlterNote       $0D
00088AD9 E701                       	dc.b	smpsNoAttack, $01
00088ADB E109                       	smpsAlterNote       $09
00088ADD E701                       	dc.b	smpsNoAttack, $01
00088ADF E10D                       	smpsAlterNote       $0D
00088AE1 E701                       	dc.b	smpsNoAttack, $01
00088AE3 E110                       	smpsAlterNote       $10
00088AE5 E701                       	dc.b	smpsNoAttack, $01
00088AE7 E114                       	smpsAlterNote       $14
00088AE9 E701                       	dc.b	smpsNoAttack, $01
00088AEB E10F                       	smpsAlterNote       $0F
00088AED C607                       	dc.b	nA5, $07
00088AEF E10D                       	smpsAlterNote       $0D
00088AF1 C40D                       	dc.b	nG5, $0D
00088AF3 E10A                       	smpsAlterNote       $0A
00088AF5 E701                       	dc.b	smpsNoAttack, $01
00088AF7 E106                       	smpsAlterNote       $06
00088AF9 E701                       	dc.b	smpsNoAttack, $01
00088AFB E10A                       	smpsAlterNote       $0A
00088AFD E701                       	dc.b	smpsNoAttack, $01
00088AFF E10D                       	smpsAlterNote       $0D
00088B01 E701                       	dc.b	smpsNoAttack, $01
00088B03 E111                       	smpsAlterNote       $11
00088B05 E701                       	dc.b	smpsNoAttack, $01
00088B07 E10D                       	smpsAlterNote       $0D
00088B09 E701                       	dc.b	smpsNoAttack, $01
00088B0B E107                       	smpsAlterNote       $07
00088B0D E701                       	dc.b	smpsNoAttack, $01
00088B0F E106                       	smpsAlterNote       $06
00088B11 E701                       	dc.b	smpsNoAttack, $01
00088B13 E10A                       	smpsAlterNote       $0A
00088B15 E701                       	dc.b	smpsNoAttack, $01
00088B17 E110                       	smpsAlterNote       $10
00088B19 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088B1D E10D                       	smpsAlterNote       $0D
00088B1F E701                       	dc.b	smpsNoAttack, $01
00088B21 E107                       	smpsAlterNote       $07
00088B23 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088B27 E10F                       	smpsAlterNote       $0F
00088B29 C60E                       	dc.b	nA5, $0E
00088B2B E109                       	smpsAlterNote       $09
00088B2D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088B31 E10F                       	smpsAlterNote       $0F
00088B33 E701                       	dc.b	smpsNoAttack, $01
00088B35 E112                       	smpsAlterNote       $12
00088B37 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088B3B E10C                       	smpsAlterNote       $0C
00088B3D E701                       	dc.b	smpsNoAttack, $01
00088B3F E108                       	smpsAlterNote       $08
00088B41 E701                       	dc.b	smpsNoAttack, $01
00088B43 E109                       	smpsAlterNote       $09
00088B45 E701                       	dc.b	smpsNoAttack, $01
00088B47 E10F                       	smpsAlterNote       $0F
00088B49 E701                       	dc.b	smpsNoAttack, $01
00088B4B E113                       	smpsAlterNote       $13
00088B4D E701                       	dc.b	smpsNoAttack, $01
00088B4F E10F                       	smpsAlterNote       $0F
00088B51 E701                       	dc.b	smpsNoAttack, $01
00088B53 E10C                       	smpsAlterNote       $0C
00088B55 E701                       	dc.b	smpsNoAttack, $01
00088B57 E108                       	smpsAlterNote       $08
00088B59 E701                       	dc.b	smpsNoAttack, $01
00088B5B E109                       	smpsAlterNote       $09
00088B5D 8001                       	dc.b	nRst, $01
00088B5F E110                       	smpsAlterNote       $10
00088B61 C70D                       	dc.b	nBb5, $0D
00088B63 E10D                       	smpsAlterNote       $0D
00088B65 E701                       	dc.b	smpsNoAttack, $01
00088B67 E109                       	smpsAlterNote       $09
00088B69 E701                       	dc.b	smpsNoAttack, $01
00088B6B E10D                       	smpsAlterNote       $0D
00088B6D E701                       	dc.b	smpsNoAttack, $01
00088B6F E113                       	smpsAlterNote       $13
00088B71 E701                       	dc.b	smpsNoAttack, $01
00088B73 E114                       	smpsAlterNote       $14
00088B75 E701                       	dc.b	smpsNoAttack, $01
00088B77 E110                       	smpsAlterNote       $10
00088B79 E701                       	dc.b	smpsNoAttack, $01
00088B7B E10A                       	smpsAlterNote       $0A
00088B7D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088B81 E10D                       	smpsAlterNote       $0D
00088B83 E701                       	dc.b	smpsNoAttack, $01
00088B85 E113                       	smpsAlterNote       $13
00088B87 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088B8B E10D                       	smpsAlterNote       $0D
00088B8D E701                       	dc.b	smpsNoAttack, $01
00088B8F E10A                       	smpsAlterNote       $0A
00088B91 E701 E701 C90C 8001 8001   	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nC6, $0C, nRst, $01, nRst, $01
00088B9B E10B                       	smpsAlterNote       $0B
00088B9D 8001                       	dc.b	nRst, $01
00088B9F E10C                       	smpsAlterNote       $0C
00088BA1 CD0C 8001                  	dc.b	nE6, $0C, nRst, $01
00088BA5 E10B                       	smpsAlterNote       $0B
00088BA7 CB0D                       	dc.b	nD6, $0D
00088BA9 E105                       	smpsAlterNote       $05
00088BAB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088BAF E108                       	smpsAlterNote       $08
00088BB1 E701                       	dc.b	smpsNoAttack, $01
00088BB3 E10E                       	smpsAlterNote       $0E
00088BB5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088BB9 E108                       	smpsAlterNote       $08
00088BBB E701                       	dc.b	smpsNoAttack, $01
00088BBD E105                       	smpsAlterNote       $05
00088BBF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088BC3 E10B                       	smpsAlterNote       $0B
00088BC5 E701                       	dc.b	smpsNoAttack, $01
00088BC7 E10F                       	smpsAlterNote       $0F
00088BC9 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00088BCD E10C                       	smpsAlterNote       $0C
00088BCF CC0D                       	dc.b	nEb6, $0D
00088BD1 E106                       	smpsAlterNote       $06
00088BD3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088BD7 E109                       	smpsAlterNote       $09
00088BD9 E701                       	dc.b	smpsNoAttack, $01
00088BDB E10C                       	smpsAlterNote       $0C
00088BDD 8001                       	dc.b	nRst, $01
00088BDF E10A                       	smpsAlterNote       $0A
00088BE1 C906 8001 C901 8001 C902+  	dc.b	nC6, $06, nRst, $01, nC6, $01, nRst, $01, nC6, $02, nC6, $02
00088BED CB0E                       	dc.b	nD6, $0E
00088BEF E105                       	smpsAlterNote       $05
00088BF1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088BF5 E10B                       	smpsAlterNote       $0B
00088BF7 E701                       	dc.b	smpsNoAttack, $01
00088BF9 E10E                       	smpsAlterNote       $0E
00088BFB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088BFF E108                       	smpsAlterNote       $08
00088C01 E701                       	dc.b	smpsNoAttack, $01
00088C03 E104                       	smpsAlterNote       $04
00088C05 E701                       	dc.b	smpsNoAttack, $01
00088C07 E105                       	smpsAlterNote       $05
00088C09 E701                       	dc.b	smpsNoAttack, $01
00088C0B E10B                       	smpsAlterNote       $0B
00088C0D E701                       	dc.b	smpsNoAttack, $01
00088C0F E10F                       	smpsAlterNote       $0F
00088C11 E701                       	dc.b	smpsNoAttack, $01
00088C13 E10D                       	smpsAlterNote       $0D
00088C15 CE0A 8001                  	dc.b	nF6, $0A, nRst, $01
00088C19 E10C                       	smpsAlterNote       $0C
00088C1B CC06 8001                  	dc.b	nEb6, $06, nRst, $01
00088C1F E10A                       	smpsAlterNote       $0A
00088C21 C906 C902 8001 C901 8001+  	dc.b	nC6, $06, nC6, $02, nRst, $01, nC6, $01, nRst, $01, nC6, $02
00088C2D CB0D                       	dc.b	nD6, $0D
00088C2F E108                       	smpsAlterNote       $08
00088C31 E701                       	dc.b	smpsNoAttack, $01
00088C33 E104                       	smpsAlterNote       $04
00088C35 E701                       	dc.b	smpsNoAttack, $01
00088C37 E105                       	smpsAlterNote       $05
00088C39 E701                       	dc.b	smpsNoAttack, $01
00088C3B E10B                       	smpsAlterNote       $0B
00088C3D E701                       	dc.b	smpsNoAttack, $01
00088C3F E10F                       	smpsAlterNote       $0F
00088C41 E701                       	dc.b	smpsNoAttack, $01
00088C43 E10B                       	smpsAlterNote       $0B
00088C45 E701                       	dc.b	smpsNoAttack, $01
00088C47 E108                       	smpsAlterNote       $08
00088C49 E701                       	dc.b	smpsNoAttack, $01
00088C4B E104                       	smpsAlterNote       $04
00088C4D E701                       	dc.b	smpsNoAttack, $01
00088C4F E108                       	smpsAlterNote       $08
00088C51 E701                       	dc.b	smpsNoAttack, $01
00088C53 E10E                       	smpsAlterNote       $0E
00088C55 E701                       	dc.b	smpsNoAttack, $01
00088C57 E10F                       	smpsAlterNote       $0F
00088C59 E701                       	dc.b	smpsNoAttack, $01
00088C5B E10C                       	smpsAlterNote       $0C
00088C5D CC0D                       	dc.b	nEb6, $0D
00088C5F E109                       	smpsAlterNote       $09
00088C61 E701                       	dc.b	smpsNoAttack, $01
00088C63 E105                       	smpsAlterNote       $05
00088C65 E701                       	dc.b	smpsNoAttack, $01
00088C67 E106                       	smpsAlterNote       $06
00088C69 E701                       	dc.b	smpsNoAttack, $01
00088C6B E10C                       	smpsAlterNote       $0C
00088C6D E701                       	dc.b	smpsNoAttack, $01
00088C6F E10A                       	smpsAlterNote       $0A
00088C71 C907 C902 C902 8001 C901+  	dc.b	nC6, $07, nC6, $02, nC6, $02, nRst, $01, nC6, $01, nRst, $01
00088C7D CB0D                       	dc.b	nD6, $0D
00088C7F E108                       	smpsAlterNote       $08
00088C81 E701                       	dc.b	smpsNoAttack, $01
00088C83 E104                       	smpsAlterNote       $04
00088C85 E701                       	dc.b	smpsNoAttack, $01
00088C87 E108                       	smpsAlterNote       $08
00088C89 E701                       	dc.b	smpsNoAttack, $01
00088C8B E10B                       	smpsAlterNote       $0B
00088C8D E701                       	dc.b	smpsNoAttack, $01
00088C8F E10F                       	smpsAlterNote       $0F
00088C91 E701                       	dc.b	smpsNoAttack, $01
00088C93 E10B                       	smpsAlterNote       $0B
00088C95 E701                       	dc.b	smpsNoAttack, $01
00088C97 E105                       	smpsAlterNote       $05
00088C99 E701                       	dc.b	smpsNoAttack, $01
00088C9B E104                       	smpsAlterNote       $04
00088C9D E701                       	dc.b	smpsNoAttack, $01
00088C9F E108                       	smpsAlterNote       $08
00088CA1 E701                       	dc.b	smpsNoAttack, $01
00088CA3 E10E                       	smpsAlterNote       $0E
00088CA5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088CA9 E10B                       	smpsAlterNote       $0B
00088CAB E701                       	dc.b	smpsNoAttack, $01
00088CAD E105                       	smpsAlterNote       $05
00088CAF E701 E701 8019             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $19
00088CB7 03                         	dc.b	$03
00088CB8 E601                       	smpsAlterVol        $01
00088CBA F6F1 D1                    	smpsJump            music84_Jump01
00088CBD                            
00088CBD                            ; FM5 Data
00088CBD                            music84_FM5:
00088CBF E080                       	smpsPan             panLeft, $00
00088CC1 8003                       	dc.b	nRst, $03
00088CC3 E10D                       	smpsAlterNote       $0D
00088CC5 C203 8008                  	dc.b	nF5, $03, nRst, $08
00088CC9 E10C                       	smpsAlterNote       $0C
00088CCB C103 800A                  	dc.b	nE5, $03, nRst, $0A
00088CCF E10F                       	smpsAlterNote       $0F
00088CD1 BA03 8006                  	dc.b	nA4, $03, nRst, $06
00088CD7 E6FE                       	smpsAlterVol        $FE
00088CD9 C703 C603 8001             	dc.b	nBb5, $03, nA5, $03, nRst, $01
00088CDF E10D                       	smpsAlterNote       $0D
00088CE1 C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
00088CE7 E10C                       	smpsAlterNote       $0C
00088CE9 C102 8001                  	dc.b	nE5, $02, nRst, $01
00088CED E10A                       	smpsAlterNote       $0A
00088CEF BD01 8001                  	dc.b	nC5, $01, nRst, $01
00088CF5 03                         	dc.b	$03
00088CF6                            
00088CF6                            music84_Jump00:
00088CF6 8004                       	dc.b	nRst, $04
00088CF8 E602                       	smpsAlterVol        $02
00088CFA E10D                       	smpsAlterNote       $0D
00088CFC B60D                       	dc.b	nF4, $0D
00088CFE E107                       	smpsAlterNote       $07
00088D00 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088D04 E10A                       	smpsAlterNote       $0A
00088D06 E701                       	dc.b	smpsNoAttack, $01
00088D08 E110                       	smpsAlterNote       $10
00088D0A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088D0E E10A                       	smpsAlterNote       $0A
00088D10 E701                       	dc.b	smpsNoAttack, $01
00088D12 E107                       	smpsAlterNote       $07
00088D14 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088D18 E10D                       	smpsAlterNote       $0D
00088D1A E701                       	dc.b	smpsNoAttack, $01
00088D1C E111                       	smpsAlterNote       $11
00088D1E E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00088D22 E10D                       	smpsAlterNote       $0D
00088D24 B80D                       	dc.b	nG4, $0D
00088D26 E107                       	smpsAlterNote       $07
00088D28 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088D2C E10A                       	smpsAlterNote       $0A
00088D2E E701                       	dc.b	smpsNoAttack, $01
00088D30 E110                       	smpsAlterNote       $10
00088D32 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088D36 E10A                       	smpsAlterNote       $0A
00088D38 E701                       	dc.b	smpsNoAttack, $01
00088D3A E107                       	smpsAlterNote       $07
00088D3C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088D40 E10D                       	smpsAlterNote       $0D
00088D42 E701                       	dc.b	smpsNoAttack, $01
00088D44 E111                       	smpsAlterNote       $11
00088D46 E701                       	dc.b	smpsNoAttack, $01
00088D48 E110                       	smpsAlterNote       $10
00088D4A E701                       	dc.b	smpsNoAttack, $01
00088D4C E10A                       	smpsAlterNote       $0A
00088D4E E701                       	dc.b	smpsNoAttack, $01
00088D50 E106                       	smpsAlterNote       $06
00088D52 E701                       	dc.b	smpsNoAttack, $01
00088D54 E10A                       	smpsAlterNote       $0A
00088D56 E701                       	dc.b	smpsNoAttack, $01
00088D58 E10D                       	smpsAlterNote       $0D
00088D5A E701                       	dc.b	smpsNoAttack, $01
00088D5C E111                       	smpsAlterNote       $11
00088D5E E701                       	dc.b	smpsNoAttack, $01
00088D60 E10D                       	smpsAlterNote       $0D
00088D62 E701                       	dc.b	smpsNoAttack, $01
00088D64 E10F                       	smpsAlterNote       $0F
00088D66 BA0E                       	dc.b	nA4, $0E
00088D68 E109                       	smpsAlterNote       $09
00088D6A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088D6E E10F                       	smpsAlterNote       $0F
00088D70 E701                       	dc.b	smpsNoAttack, $01
00088D72 E112                       	smpsAlterNote       $12
00088D74 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088D78 E10C                       	smpsAlterNote       $0C
00088D7A E701                       	dc.b	smpsNoAttack, $01
00088D7C E108                       	smpsAlterNote       $08
00088D7E E701                       	dc.b	smpsNoAttack, $01
00088D80 E109                       	smpsAlterNote       $09
00088D82 E701                       	dc.b	smpsNoAttack, $01
00088D84 E10F                       	smpsAlterNote       $0F
00088D86 E701                       	dc.b	smpsNoAttack, $01
00088D88 E113                       	smpsAlterNote       $13
00088D8A E701                       	dc.b	smpsNoAttack, $01
00088D8C E10F                       	smpsAlterNote       $0F
00088D8E E701                       	dc.b	smpsNoAttack, $01
00088D90 E109                       	smpsAlterNote       $09
00088D92 E701                       	dc.b	smpsNoAttack, $01
00088D94 E108                       	smpsAlterNote       $08
00088D96 E701                       	dc.b	smpsNoAttack, $01
00088D98 E10C                       	smpsAlterNote       $0C
00088D9A E701                       	dc.b	smpsNoAttack, $01
00088D9C E112                       	smpsAlterNote       $12
00088D9E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088DA2 E10F                       	smpsAlterNote       $0F
00088DA4 E701                       	dc.b	smpsNoAttack, $01
00088DA6 E109                       	smpsAlterNote       $09
00088DA8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088DAC E10F                       	smpsAlterNote       $0F
00088DAE E701                       	dc.b	smpsNoAttack, $01
00088DB0 E112                       	smpsAlterNote       $12
00088DB2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088DB6 E10C                       	smpsAlterNote       $0C
00088DB8 E701                       	dc.b	smpsNoAttack, $01
00088DBA E108                       	smpsAlterNote       $08
00088DBC E701                       	dc.b	smpsNoAttack, $01
00088DBE E109                       	smpsAlterNote       $09
00088DC0 E701                       	dc.b	smpsNoAttack, $01
00088DC2 E10F                       	smpsAlterNote       $0F
00088DC4 E701                       	dc.b	smpsNoAttack, $01
00088DC6 E113                       	smpsAlterNote       $13
00088DC8 E701                       	dc.b	smpsNoAttack, $01
00088DCA E10F                       	smpsAlterNote       $0F
00088DCC E701                       	dc.b	smpsNoAttack, $01
00088DCE E10C                       	smpsAlterNote       $0C
00088DD0 E701                       	dc.b	smpsNoAttack, $01
00088DD2 E108                       	smpsAlterNote       $08
00088DD4 E701                       	dc.b	smpsNoAttack, $01
00088DD6 E109                       	smpsAlterNote       $09
00088DD8 8001                       	dc.b	nRst, $01
00088DDA E10C                       	smpsAlterNote       $0C
00088DDC B50A                       	dc.b	nE4, $0A
00088DDE E10D                       	smpsAlterNote       $0D
00088DE0 B60D                       	dc.b	nF4, $0D
00088DE2 E10A                       	smpsAlterNote       $0A
00088DE4 E701                       	dc.b	smpsNoAttack, $01
00088DE6 E106                       	smpsAlterNote       $06
00088DE8 E701                       	dc.b	smpsNoAttack, $01
00088DEA E107                       	smpsAlterNote       $07
00088DEC E701                       	dc.b	smpsNoAttack, $01
00088DEE E10D                       	smpsAlterNote       $0D
00088DF0 E701                       	dc.b	smpsNoAttack, $01
00088DF2 E111                       	smpsAlterNote       $11
00088DF4 E701                       	dc.b	smpsNoAttack, $01
00088DF6 E10D                       	smpsAlterNote       $0D
00088DF8 E701                       	dc.b	smpsNoAttack, $01
00088DFA E10A                       	smpsAlterNote       $0A
00088DFC E701                       	dc.b	smpsNoAttack, $01
00088DFE E106                       	smpsAlterNote       $06
00088E00 E701                       	dc.b	smpsNoAttack, $01
00088E02 E10A                       	smpsAlterNote       $0A
00088E04 E701                       	dc.b	smpsNoAttack, $01
00088E06 E110                       	smpsAlterNote       $10
00088E08 E701                       	dc.b	smpsNoAttack, $01
00088E0A E111                       	smpsAlterNote       $11
00088E0C E701                       	dc.b	smpsNoAttack, $01
00088E0E E10D                       	smpsAlterNote       $0D
00088E10 B80D                       	dc.b	nG4, $0D
00088E12 E10A                       	smpsAlterNote       $0A
00088E14 E701                       	dc.b	smpsNoAttack, $01
00088E16 E106                       	smpsAlterNote       $06
00088E18 E701                       	dc.b	smpsNoAttack, $01
00088E1A E107                       	smpsAlterNote       $07
00088E1C E701                       	dc.b	smpsNoAttack, $01
00088E1E E10D                       	smpsAlterNote       $0D
00088E20 E701                       	dc.b	smpsNoAttack, $01
00088E22 E111                       	smpsAlterNote       $11
00088E24 E701                       	dc.b	smpsNoAttack, $01
00088E26 E10D                       	smpsAlterNote       $0D
00088E28 E701                       	dc.b	smpsNoAttack, $01
00088E2A E10A                       	smpsAlterNote       $0A
00088E2C E701                       	dc.b	smpsNoAttack, $01
00088E2E E106                       	smpsAlterNote       $06
00088E30 E701                       	dc.b	smpsNoAttack, $01
00088E32 E10A                       	smpsAlterNote       $0A
00088E34 E701                       	dc.b	smpsNoAttack, $01
00088E36 E110                       	smpsAlterNote       $10
00088E38 E701                       	dc.b	smpsNoAttack, $01
00088E3A E111                       	smpsAlterNote       $11
00088E3C E701                       	dc.b	smpsNoAttack, $01
00088E3E E10D                       	smpsAlterNote       $0D
00088E40 E701                       	dc.b	smpsNoAttack, $01
00088E42 E107                       	smpsAlterNote       $07
00088E44 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088E48 E10A                       	smpsAlterNote       $0A
00088E4A E701                       	dc.b	smpsNoAttack, $01
00088E4C E110                       	smpsAlterNote       $10
00088E4E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088E52 E10D                       	smpsAlterNote       $0D
00088E54 8001                       	dc.b	nRst, $01
00088E56 E10F                       	smpsAlterNote       $0F
00088E58 BA0D                       	dc.b	nA4, $0D
00088E5A E10C                       	smpsAlterNote       $0C
00088E5C E701                       	dc.b	smpsNoAttack, $01
00088E5E E108                       	smpsAlterNote       $08
00088E60 E701                       	dc.b	smpsNoAttack, $01
00088E62 E10C                       	smpsAlterNote       $0C
00088E64 E701                       	dc.b	smpsNoAttack, $01
00088E66 E112                       	smpsAlterNote       $12
00088E68 E701                       	dc.b	smpsNoAttack, $01
00088E6A E113                       	smpsAlterNote       $13
00088E6C E701                       	dc.b	smpsNoAttack, $01
00088E6E E10F                       	smpsAlterNote       $0F
00088E70 E701                       	dc.b	smpsNoAttack, $01
00088E72 E109                       	smpsAlterNote       $09
00088E74 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088E78 E10C                       	smpsAlterNote       $0C
00088E7A E701                       	dc.b	smpsNoAttack, $01
00088E7C E112                       	smpsAlterNote       $12
00088E7E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088E82 E10C                       	smpsAlterNote       $0C
00088E84 E701                       	dc.b	smpsNoAttack, $01
00088E86 E109                       	smpsAlterNote       $09
00088E88 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088E8C E10F                       	smpsAlterNote       $0F
00088E8E E701                       	dc.b	smpsNoAttack, $01
00088E90 E113                       	smpsAlterNote       $13
00088E92 E701                       	dc.b	smpsNoAttack, $01
00088E94 E112                       	smpsAlterNote       $12
00088E96 E701                       	dc.b	smpsNoAttack, $01
00088E98 E10C                       	smpsAlterNote       $0C
00088E9A E701                       	dc.b	smpsNoAttack, $01
00088E9C E108                       	smpsAlterNote       $08
00088E9E E701                       	dc.b	smpsNoAttack, $01
00088EA0 E10C                       	smpsAlterNote       $0C
00088EA2 E701                       	dc.b	smpsNoAttack, $01
00088EA4 E10F                       	smpsAlterNote       $0F
00088EA6 E701                       	dc.b	smpsNoAttack, $01
00088EA8 E113                       	smpsAlterNote       $13
00088EAA E701                       	dc.b	smpsNoAttack, $01
00088EAC E10F                       	smpsAlterNote       $0F
00088EAE E701                       	dc.b	smpsNoAttack, $01
00088EB0 E109                       	smpsAlterNote       $09
00088EB2 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00088EB6 E10D                       	smpsAlterNote       $0D
00088EB8 B609 8001                  	dc.b	nF4, $09, nRst, $01
00088EBC E10C                       	smpsAlterNote       $0C
00088EBE B506 8001                  	dc.b	nE4, $06, nRst, $01
00088EC2 E10B                       	smpsAlterNote       $0B
00088EC4 B30D                       	dc.b	nD4, $0D
00088EC6 E10C                       	smpsAlterNote       $0C
00088EC8 B503 8001                  	dc.b	nE4, $03, nRst, $01
00088ECC E10D                       	smpsAlterNote       $0D
00088ECE B603 B803 8001 BA0D        	dc.b	nF4, $03, nG4, $03, nRst, $01, nA4, $0D
00088ED6 E109                       	smpsAlterNote       $09
00088ED8 E701                       	dc.b	smpsNoAttack, $01
00088EDA E108                       	smpsAlterNote       $08
00088EDC E701                       	dc.b	smpsNoAttack, $01
00088EDE E10C                       	smpsAlterNote       $0C
00088EE0 E701                       	dc.b	smpsNoAttack, $01
00088EE2 E112                       	smpsAlterNote       $12
00088EE4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088EE8 E10F                       	smpsAlterNote       $0F
00088EEA E701                       	dc.b	smpsNoAttack, $01
00088EEC E109                       	smpsAlterNote       $09
00088EEE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088EF2 E10F                       	smpsAlterNote       $0F
00088EF4 E701                       	dc.b	smpsNoAttack, $01
00088EF6 E112                       	smpsAlterNote       $12
00088EF8 E701                       	dc.b	smpsNoAttack, $01
00088EFA E113                       	smpsAlterNote       $13
00088EFC 8001                       	dc.b	nRst, $01
00088EFE E10D                       	smpsAlterNote       $0D
00088F00 C20D                       	dc.b	nF5, $0D
00088F02 E107                       	smpsAlterNote       $07
00088F04 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088F08 E10A                       	smpsAlterNote       $0A
00088F0A E701                       	dc.b	smpsNoAttack, $01
00088F0C E110                       	smpsAlterNote       $10
00088F0E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088F12 E10A                       	smpsAlterNote       $0A
00088F14 E701                       	dc.b	smpsNoAttack, $01
00088F16 E107                       	smpsAlterNote       $07
00088F18 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088F1C E10D                       	smpsAlterNote       $0D
00088F1E E701                       	dc.b	smpsNoAttack, $01
00088F20 E111                       	smpsAlterNote       $11
00088F22 E701                       	dc.b	smpsNoAttack, $01
00088F24 E110                       	smpsAlterNote       $10
00088F26 E701                       	dc.b	smpsNoAttack, $01
00088F28 E10A                       	smpsAlterNote       $0A
00088F2A E701                       	dc.b	smpsNoAttack, $01
00088F2C E106                       	smpsAlterNote       $06
00088F2E E701                       	dc.b	smpsNoAttack, $01
00088F30 E10A                       	smpsAlterNote       $0A
00088F32 E701                       	dc.b	smpsNoAttack, $01
00088F34 E10D                       	smpsAlterNote       $0D
00088F36 E701                       	dc.b	smpsNoAttack, $01
00088F38 E111                       	smpsAlterNote       $11
00088F3A E701                       	dc.b	smpsNoAttack, $01
00088F3C E10D                       	smpsAlterNote       $0D
00088F3E E701                       	dc.b	smpsNoAttack, $01
00088F40 E107                       	smpsAlterNote       $07
00088F42 E701                       	dc.b	smpsNoAttack, $01
00088F44 E106                       	smpsAlterNote       $06
00088F46 E701                       	dc.b	smpsNoAttack, $01
00088F48 E10A                       	smpsAlterNote       $0A
00088F4A E701                       	dc.b	smpsNoAttack, $01
00088F4C E110                       	smpsAlterNote       $10
00088F4E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088F52 E10D                       	smpsAlterNote       $0D
00088F54 E701                       	dc.b	smpsNoAttack, $01
00088F56 E107                       	smpsAlterNote       $07
00088F58 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088F5C E10D                       	smpsAlterNote       $0D
00088F5E E701                       	dc.b	smpsNoAttack, $01
00088F60 E110                       	smpsAlterNote       $10
00088F62 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088F66 E10A                       	smpsAlterNote       $0A
00088F68 E701                       	dc.b	smpsNoAttack, $01
00088F6A E106                       	smpsAlterNote       $06
00088F6C E701                       	dc.b	smpsNoAttack, $01
00088F6E E107                       	smpsAlterNote       $07
00088F70 E701                       	dc.b	smpsNoAttack, $01
00088F72 E10D                       	smpsAlterNote       $0D
00088F74 E701                       	dc.b	smpsNoAttack, $01
00088F76 E111                       	smpsAlterNote       $11
00088F78 E701                       	dc.b	smpsNoAttack, $01
00088F7A E10D                       	smpsAlterNote       $0D
00088F7C E701                       	dc.b	smpsNoAttack, $01
00088F7E E10A                       	smpsAlterNote       $0A
00088F80 E701                       	dc.b	smpsNoAttack, $01
00088F82 E106                       	smpsAlterNote       $06
00088F84 E701                       	dc.b	smpsNoAttack, $01
00088F86 E10A                       	smpsAlterNote       $0A
00088F88 E701                       	dc.b	smpsNoAttack, $01
00088F8A E110                       	smpsAlterNote       $10
00088F8C E701                       	dc.b	smpsNoAttack, $01
00088F8E E111                       	smpsAlterNote       $11
00088F90 E701                       	dc.b	smpsNoAttack, $01
00088F92 E10D                       	smpsAlterNote       $0D
00088F94 E701                       	dc.b	smpsNoAttack, $01
00088F96 E107                       	smpsAlterNote       $07
00088F98 E701                       	dc.b	smpsNoAttack, $01
00088F9A E10D                       	smpsAlterNote       $0D
00088F9C C207                       	dc.b	nF5, $07
00088F9E E10C                       	smpsAlterNote       $0C
00088FA0 C10D                       	dc.b	nE5, $0D
00088FA2 E109                       	smpsAlterNote       $09
00088FA4 E701                       	dc.b	smpsNoAttack, $01
00088FA6 E106                       	smpsAlterNote       $06
00088FA8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088FAC E10C                       	smpsAlterNote       $0C
00088FAE E701                       	dc.b	smpsNoAttack, $01
00088FB0 E110                       	smpsAlterNote       $10
00088FB2 E701                       	dc.b	smpsNoAttack, $01
00088FB4 E10F                       	smpsAlterNote       $0F
00088FB6 E701                       	dc.b	smpsNoAttack, $01
00088FB8 E109                       	smpsAlterNote       $09
00088FBA E701                       	dc.b	smpsNoAttack, $01
00088FBC E105                       	smpsAlterNote       $05
00088FBE E701                       	dc.b	smpsNoAttack, $01
00088FC0 E109                       	smpsAlterNote       $09
00088FC2 E701                       	dc.b	smpsNoAttack, $01
00088FC4 E10C                       	smpsAlterNote       $0C
00088FC6 E701                       	dc.b	smpsNoAttack, $01
00088FC8 E110                       	smpsAlterNote       $10
00088FCA E701                       	dc.b	smpsNoAttack, $01
00088FCC E10B                       	smpsAlterNote       $0B
00088FCE BF0D                       	dc.b	nD5, $0D
00088FD0 E108                       	smpsAlterNote       $08
00088FD2 E701                       	dc.b	smpsNoAttack, $01
00088FD4 E105                       	smpsAlterNote       $05
00088FD6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00088FDA E10B                       	smpsAlterNote       $0B
00088FDC E701                       	dc.b	smpsNoAttack, $01
00088FDE E10F                       	smpsAlterNote       $0F
00088FE0 E701                       	dc.b	smpsNoAttack, $01
00088FE2 E10E                       	smpsAlterNote       $0E
00088FE4 E701                       	dc.b	smpsNoAttack, $01
00088FE6 E108                       	smpsAlterNote       $08
00088FE8 E701                       	dc.b	smpsNoAttack, $01
00088FEA E104                       	smpsAlterNote       $04
00088FEC E701                       	dc.b	smpsNoAttack, $01
00088FEE E108                       	smpsAlterNote       $08
00088FF0 E701                       	dc.b	smpsNoAttack, $01
00088FF2 E10E                       	smpsAlterNote       $0E
00088FF4 E701                       	dc.b	smpsNoAttack, $01
00088FF6 E10F                       	smpsAlterNote       $0F
00088FF8 E701                       	dc.b	smpsNoAttack, $01
00088FFA E10B                       	smpsAlterNote       $0B
00088FFC E701                       	dc.b	smpsNoAttack, $01
00088FFE E105                       	smpsAlterNote       $05
00089000 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089004 E108                       	smpsAlterNote       $08
00089006 E701                       	dc.b	smpsNoAttack, $01
00089008 E10E                       	smpsAlterNote       $0E
0008900A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008900E E108                       	smpsAlterNote       $08
00089010 E701                       	dc.b	smpsNoAttack, $01
00089012 E105                       	smpsAlterNote       $05
00089014 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089018 E10B                       	smpsAlterNote       $0B
0008901A E701                       	dc.b	smpsNoAttack, $01
0008901C E10F                       	smpsAlterNote       $0F
0008901E E701                       	dc.b	smpsNoAttack, $01
00089020 E10E                       	smpsAlterNote       $0E
00089022 E701                       	dc.b	smpsNoAttack, $01
00089024 E108                       	smpsAlterNote       $08
00089026 E701                       	dc.b	smpsNoAttack, $01
00089028 E104                       	smpsAlterNote       $04
0008902A E701                       	dc.b	smpsNoAttack, $01
0008902C E108                       	smpsAlterNote       $08
0008902E E701                       	dc.b	smpsNoAttack, $01
00089030 E10B                       	smpsAlterNote       $0B
00089032 E701                       	dc.b	smpsNoAttack, $01
00089034 E10F                       	smpsAlterNote       $0F
00089036 E701                       	dc.b	smpsNoAttack, $01
00089038 E10B                       	smpsAlterNote       $0B
0008903A E701                       	dc.b	smpsNoAttack, $01
0008903C E105                       	smpsAlterNote       $05
0008903E E701                       	dc.b	smpsNoAttack, $01
00089040 E104                       	smpsAlterNote       $04
00089042 E701                       	dc.b	smpsNoAttack, $01
00089044 E108                       	smpsAlterNote       $08
00089046 E701                       	dc.b	smpsNoAttack, $01
00089048 E10E                       	smpsAlterNote       $0E
0008904A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008904E E10B                       	smpsAlterNote       $0B
00089050 E701                       	dc.b	smpsNoAttack, $01
00089052 E105                       	smpsAlterNote       $05
00089054 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089058 E10B                       	smpsAlterNote       $0B
0008905A E701                       	dc.b	smpsNoAttack, $01
0008905C E10E                       	smpsAlterNote       $0E
0008905E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089062 E108                       	smpsAlterNote       $08
00089064 E701                       	dc.b	smpsNoAttack, $01
00089066 E105                       	smpsAlterNote       $05
00089068 8001                       	dc.b	nRst, $01
0008906C E601                       	smpsAlterVol        $01
0008906E E10B                       	smpsAlterNote       $0B
00089070 BF06 8001 BF03 BF03 8001+  	dc.b	nD5, $06, nRst, $01, nD5, $03, nD5, $03, nRst, $01, nCs5, $03
0008907C 8004                       	dc.b	nRst, $04
00089080 E6FF                       	smpsAlterVol        $FF
00089082 E10D                       	smpsAlterNote       $0D
00089084 B802 8001 B603 B601        	dc.b	nG4, $02, nRst, $01, nF4, $03, nF4, $01
0008908C E10C                       	smpsAlterNote       $0C
0008908E E7B5 0280 01               	dc.b	smpsNoAttack, nE4, $02, nRst, $01
00089093 E10D                       	smpsAlterNote       $0D
00089095 B60D                       	dc.b	nF4, $0D
00089097 E10A                       	smpsAlterNote       $0A
00089099 E701                       	dc.b	smpsNoAttack, $01
0008909B E106                       	smpsAlterNote       $06
0008909D E701                       	dc.b	smpsNoAttack, $01
0008909F E10A                       	smpsAlterNote       $0A
000890A1 E701                       	dc.b	smpsNoAttack, $01
000890A3 E110                       	smpsAlterNote       $10
000890A5 E701                       	dc.b	smpsNoAttack, $01
000890A7 E111                       	smpsAlterNote       $11
000890A9 E701                       	dc.b	smpsNoAttack, $01
000890AB E10D                       	smpsAlterNote       $0D
000890AD E701                       	dc.b	smpsNoAttack, $01
000890AF E107                       	smpsAlterNote       $07
000890B1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000890B5 E10A                       	smpsAlterNote       $0A
000890B7 E701                       	dc.b	smpsNoAttack, $01
000890B9 E110                       	smpsAlterNote       $10
000890BB E701                       	dc.b	smpsNoAttack, $01
000890BD E111                       	smpsAlterNote       $11
000890BF 8001                       	dc.b	nRst, $01
000890C1 E10D                       	smpsAlterNote       $0D
000890C3 B80D                       	dc.b	nG4, $0D
000890C5 E10A                       	smpsAlterNote       $0A
000890C7 E701                       	dc.b	smpsNoAttack, $01
000890C9 E106                       	smpsAlterNote       $06
000890CB E701                       	dc.b	smpsNoAttack, $01
000890CD E10A                       	smpsAlterNote       $0A
000890CF E701                       	dc.b	smpsNoAttack, $01
000890D1 E110                       	smpsAlterNote       $10
000890D3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000890D7 E10D                       	smpsAlterNote       $0D
000890D9 E701                       	dc.b	smpsNoAttack, $01
000890DB E107                       	smpsAlterNote       $07
000890DD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000890E1 E10D                       	smpsAlterNote       $0D
000890E3 E701                       	dc.b	smpsNoAttack, $01
000890E5 E110                       	smpsAlterNote       $10
000890E7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000890EB E10A                       	smpsAlterNote       $0A
000890ED E701                       	dc.b	smpsNoAttack, $01
000890EF E106                       	smpsAlterNote       $06
000890F1 E701                       	dc.b	smpsNoAttack, $01
000890F3 E107                       	smpsAlterNote       $07
000890F5 E701                       	dc.b	smpsNoAttack, $01
000890F7 E10D                       	smpsAlterNote       $0D
000890F9 E701                       	dc.b	smpsNoAttack, $01
000890FB E111                       	smpsAlterNote       $11
000890FD E701                       	dc.b	smpsNoAttack, $01
000890FF E10D                       	smpsAlterNote       $0D
00089101 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00089105 E10F                       	smpsAlterNote       $0F
00089107 BA02 8001                  	dc.b	nA4, $02, nRst, $01
0008910B E110                       	smpsAlterNote       $10
0008910D BB03                       	dc.b	nBb4, $03
0008910F E10F                       	smpsAlterNote       $0F
00089111 BA03 8001 C603             	dc.b	nA4, $03, nRst, $01, nA5, $03
00089117 E110                       	smpsAlterNote       $10
00089119 C703 8001                  	dc.b	nBb5, $03, nRst, $01
0008911D E10F                       	smpsAlterNote       $0F
0008911F C603 D203 8001             	dc.b	nA5, $03, nA6, $03, nRst, $01
00089125 E110                       	smpsAlterNote       $10
00089127 D302 8001                  	dc.b	nBb6, $02, nRst, $01
0008912B E10F                       	smpsAlterNote       $0F
0008912D D20D                       	dc.b	nA6, $0D
0008912F E10C                       	smpsAlterNote       $0C
00089131 E701                       	dc.b	smpsNoAttack, $01
00089133 E108                       	smpsAlterNote       $08
00089135 E701                       	dc.b	smpsNoAttack, $01
00089137 E10C                       	smpsAlterNote       $0C
00089139 E701                       	dc.b	smpsNoAttack, $01
0008913B E10F                       	smpsAlterNote       $0F
0008913D E701                       	dc.b	smpsNoAttack, $01
0008913F E113                       	smpsAlterNote       $13
00089141 E701                       	dc.b	smpsNoAttack, $01
00089143 E10F                       	smpsAlterNote       $0F
00089145 E701                       	dc.b	smpsNoAttack, $01
00089147 E109                       	smpsAlterNote       $09
00089149 E701                       	dc.b	smpsNoAttack, $01
0008914B E108                       	smpsAlterNote       $08
0008914D E701                       	dc.b	smpsNoAttack, $01
0008914F E10C                       	smpsAlterNote       $0C
00089151 E701                       	dc.b	smpsNoAttack, $01
00089153 E112                       	smpsAlterNote       $12
00089155 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089159 E10F                       	smpsAlterNote       $0F
0008915B E701                       	dc.b	smpsNoAttack, $01
0008915D E109                       	smpsAlterNote       $09
0008915F E701 E701 8007             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $07
00089165 E10D                       	smpsAlterNote       $0D
00089167 CE07                       	dc.b	nF6, $07
00089169 E10C                       	smpsAlterNote       $0C
0008916B CD06 8001                  	dc.b	nE6, $06, nRst, $01
0008916F E10D                       	smpsAlterNote       $0D
00089171 CE03                       	dc.b	nF6, $03
00089173 E10C                       	smpsAlterNote       $0C
00089175 CC0D                       	dc.b	nEb6, $0D
00089177 E109                       	smpsAlterNote       $09
00089179 E701                       	dc.b	smpsNoAttack, $01
0008917B E106                       	smpsAlterNote       $06
0008917D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089181 E10C                       	smpsAlterNote       $0C
00089183 E701                       	dc.b	smpsNoAttack, $01
00089185 E110                       	smpsAlterNote       $10
00089187 E701                       	dc.b	smpsNoAttack, $01
00089189 E10F                       	smpsAlterNote       $0F
0008918B E701                       	dc.b	smpsNoAttack, $01
0008918D E109                       	smpsAlterNote       $09
0008918F E701                       	dc.b	smpsNoAttack, $01
00089191 E105                       	smpsAlterNote       $05
00089193 E701                       	dc.b	smpsNoAttack, $01
00089195 E109                       	smpsAlterNote       $09
00089197 E701                       	dc.b	smpsNoAttack, $01
00089199 E10C                       	smpsAlterNote       $0C
0008919B E701                       	dc.b	smpsNoAttack, $01
0008919D E110                       	smpsAlterNote       $10
0008919F E701                       	dc.b	smpsNoAttack, $01
000891A1 E10C                       	smpsAlterNote       $0C
000891A3 E701                       	dc.b	smpsNoAttack, $01
000891A5 E106                       	smpsAlterNote       $06
000891A7 E701                       	dc.b	smpsNoAttack, $01
000891A9 E105                       	smpsAlterNote       $05
000891AB E701                       	dc.b	smpsNoAttack, $01
000891AD E109                       	smpsAlterNote       $09
000891AF E701                       	dc.b	smpsNoAttack, $01
000891B1 E10F                       	smpsAlterNote       $0F
000891B3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000891B7 E10C                       	smpsAlterNote       $0C
000891B9 E701                       	dc.b	smpsNoAttack, $01
000891BB E10B                       	smpsAlterNote       $0B
000891BD CB03 8001 CA02 8001 CB03   	dc.b	nD6, $03, nRst, $01, nCs6, $02, nRst, $01, nD6, $03
000891C7 E10F                       	smpsAlterNote       $0F
000891C9 C603 8001 C503 C603 8001   	dc.b	nA5, $03, nRst, $01, nAb5, $03, nA5, $03, nRst, $01
000891D3 E10D                       	smpsAlterNote       $0D
000891D5 C203                       	dc.b	nF5, $03
000891D7 E10C                       	smpsAlterNote       $0C
000891D9 C103 8001                  	dc.b	nE5, $03, nRst, $01
000891DD E10D                       	smpsAlterNote       $0D
000891DF C20D                       	dc.b	nF5, $0D
000891E1 E10C                       	smpsAlterNote       $0C
000891E3 C10D 8001                  	dc.b	nE5, $0D, nRst, $01
000891E7 E10B                       	smpsAlterNote       $0B
000891E9 BF0D                       	dc.b	nD5, $0D
000891EB E108                       	smpsAlterNote       $08
000891ED E701                       	dc.b	smpsNoAttack, $01
000891EF E104                       	smpsAlterNote       $04
000891F1 E701                       	dc.b	smpsNoAttack, $01
000891F3 E108                       	smpsAlterNote       $08
000891F5 E701                       	dc.b	smpsNoAttack, $01
000891F7 E10E                       	smpsAlterNote       $0E
000891F9 E701                       	dc.b	smpsNoAttack, $01
000891FB E10F                       	smpsAlterNote       $0F
000891FD E701                       	dc.b	smpsNoAttack, $01
000891FF E10B                       	smpsAlterNote       $0B
00089201 E701                       	dc.b	smpsNoAttack, $01
00089203 E105                       	smpsAlterNote       $05
00089205 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089209 E108                       	smpsAlterNote       $08
0008920B E701                       	dc.b	smpsNoAttack, $01
0008920D E10E                       	smpsAlterNote       $0E
0008920F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089213 E108                       	smpsAlterNote       $08
00089215 E701                       	dc.b	smpsNoAttack, $01
00089217 E105                       	smpsAlterNote       $05
00089219 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008921D E10B                       	smpsAlterNote       $0B
0008921F E701                       	dc.b	smpsNoAttack, $01
00089221 E10F                       	smpsAlterNote       $0F
00089223 E701                       	dc.b	smpsNoAttack, $01
00089225 E10E                       	smpsAlterNote       $0E
00089227 E701                       	dc.b	smpsNoAttack, $01
00089229 E108                       	smpsAlterNote       $08
0008922B E701                       	dc.b	smpsNoAttack, $01
0008922D E104                       	smpsAlterNote       $04
0008922F E701                       	dc.b	smpsNoAttack, $01
00089231 E108                       	smpsAlterNote       $08
00089233 E701                       	dc.b	smpsNoAttack, $01
00089235 E10B                       	smpsAlterNote       $0B
00089237 E701                       	dc.b	smpsNoAttack, $01
00089239 E10F                       	smpsAlterNote       $0F
0008923B E701                       	dc.b	smpsNoAttack, $01
0008923D E10B                       	smpsAlterNote       $0B
0008923F E701                       	dc.b	smpsNoAttack, $01
00089241 E105                       	smpsAlterNote       $05
00089243 E701                       	dc.b	smpsNoAttack, $01
00089245 E104                       	smpsAlterNote       $04
00089247 E701                       	dc.b	smpsNoAttack, $01
00089249 E108                       	smpsAlterNote       $08
0008924B E701                       	dc.b	smpsNoAttack, $01
0008924D E10E                       	smpsAlterNote       $0E
0008924F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089253 E10B                       	smpsAlterNote       $0B
00089255 E701                       	dc.b	smpsNoAttack, $01
00089257 E105                       	smpsAlterNote       $05
00089259 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008925D E10B                       	smpsAlterNote       $0B
0008925F E701                       	dc.b	smpsNoAttack, $01
00089261 E10E                       	smpsAlterNote       $0E
00089263 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089267 E108                       	smpsAlterNote       $08
00089269 E701                       	dc.b	smpsNoAttack, $01
0008926B E104                       	smpsAlterNote       $04
0008926D E701                       	dc.b	smpsNoAttack, $01
0008926F E105                       	smpsAlterNote       $05
00089271 E701                       	dc.b	smpsNoAttack, $01
00089273 E10B                       	smpsAlterNote       $0B
00089275 E701                       	dc.b	smpsNoAttack, $01
00089277 E10F                       	smpsAlterNote       $0F
00089279 E701                       	dc.b	smpsNoAttack, $01
0008927B E10B                       	smpsAlterNote       $0B
0008927D E701                       	dc.b	smpsNoAttack, $01
0008927F E108                       	smpsAlterNote       $08
00089281 E701                       	dc.b	smpsNoAttack, $01
00089283 E104                       	smpsAlterNote       $04
00089285 E701                       	dc.b	smpsNoAttack, $01
00089287 E108                       	smpsAlterNote       $08
00089289 E701                       	dc.b	smpsNoAttack, $01
0008928B E10E                       	smpsAlterNote       $0E
0008928D E701                       	dc.b	smpsNoAttack, $01
0008928F E10F                       	smpsAlterNote       $0F
00089291 E701                       	dc.b	smpsNoAttack, $01
00089293 E10B                       	smpsAlterNote       $0B
00089295 E701                       	dc.b	smpsNoAttack, $01
00089297 E105                       	smpsAlterNote       $05
00089299 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008929D E108                       	smpsAlterNote       $08
0008929F E701                       	dc.b	smpsNoAttack, $01
000892A1 E10E                       	smpsAlterNote       $0E
000892A3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000892A7 E108                       	smpsAlterNote       $08
000892A9 E701                       	dc.b	smpsNoAttack, $01
000892AB E105                       	smpsAlterNote       $05
000892AD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000892B1 E10B                       	smpsAlterNote       $0B
000892B3 E701                       	dc.b	smpsNoAttack, $01
000892B5 E10F                       	smpsAlterNote       $0F
000892B7 E701                       	dc.b	smpsNoAttack, $01
000892B9 E10E                       	smpsAlterNote       $0E
000892BB E701                       	dc.b	smpsNoAttack, $01
000892BD E108                       	smpsAlterNote       $08
000892BF E701                       	dc.b	smpsNoAttack, $01
000892C1 E104                       	smpsAlterNote       $04
000892C3 E701                       	dc.b	smpsNoAttack, $01
000892C5 E108                       	smpsAlterNote       $08
000892C7 E701                       	dc.b	smpsNoAttack, $01
000892C9 E10B                       	smpsAlterNote       $0B
000892CB E701                       	dc.b	smpsNoAttack, $01
000892CD E10F                       	smpsAlterNote       $0F
000892CF E701                       	dc.b	smpsNoAttack, $01
000892D1 E10B                       	smpsAlterNote       $0B
000892D3 E701                       	dc.b	smpsNoAttack, $01
000892D5 E105                       	smpsAlterNote       $05
000892D7 E701                       	dc.b	smpsNoAttack, $01
000892D9 E104                       	smpsAlterNote       $04
000892DB E701                       	dc.b	smpsNoAttack, $01
000892DD E105                       	smpsAlterNote       $05
000892DF 8001                       	dc.b	nRst, $01
000892E1 E10D                       	smpsAlterNote       $0D
000892E3 C20D                       	dc.b	nF5, $0D
000892E5 E107                       	smpsAlterNote       $07
000892E7 E701                       	dc.b	smpsNoAttack, $01
000892E9 E106                       	smpsAlterNote       $06
000892EB E701                       	dc.b	smpsNoAttack, $01
000892ED E10A                       	smpsAlterNote       $0A
000892EF E701                       	dc.b	smpsNoAttack, $01
000892F1 E110                       	smpsAlterNote       $10
000892F3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000892F7 E10D                       	smpsAlterNote       $0D
000892F9 E701                       	dc.b	smpsNoAttack, $01
000892FB E107                       	smpsAlterNote       $07
000892FD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089301 E10D                       	smpsAlterNote       $0D
00089303 E701                       	dc.b	smpsNoAttack, $01
00089305 E110                       	smpsAlterNote       $10
00089307 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008930B E10A                       	smpsAlterNote       $0A
0008930D E701                       	dc.b	smpsNoAttack, $01
0008930F E106                       	smpsAlterNote       $06
00089311 E701                       	dc.b	smpsNoAttack, $01
00089313 E107                       	smpsAlterNote       $07
00089315 E701                       	dc.b	smpsNoAttack, $01
00089317 E10D                       	smpsAlterNote       $0D
00089319 E701                       	dc.b	smpsNoAttack, $01
0008931B E111                       	smpsAlterNote       $11
0008931D E701                       	dc.b	smpsNoAttack, $01
0008931F E10D                       	smpsAlterNote       $0D
00089321 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00089325 E10C                       	smpsAlterNote       $0C
00089327 C10D                       	dc.b	nE5, $0D
00089329 E10D                       	smpsAlterNote       $0D
0008932B C20A                       	dc.b	nF5, $0A
0008932D E10C                       	smpsAlterNote       $0C
0008932F C10E                       	dc.b	nE5, $0E
00089331 E106                       	smpsAlterNote       $06
00089333 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089337 E10C                       	smpsAlterNote       $0C
00089339 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008933D E10B                       	smpsAlterNote       $0B
0008933F BF0D                       	dc.b	nD5, $0D
00089341 E10C                       	smpsAlterNote       $0C
00089343 C107                       	dc.b	nE5, $07
00089345 E10D                       	smpsAlterNote       $0D
00089347 C206 8001 C406 8001 C603   	dc.b	nF5, $06, nRst, $01, nG5, $06, nRst, $01, nA5, $03
00089351 E110                       	smpsAlterNote       $10
00089353 C707 C703 8001             	dc.b	nBb5, $07, nBb5, $03, nRst, $01
00089359 E10F                       	smpsAlterNote       $0F
0008935B C602 8001 D206 8001        	dc.b	nA5, $02, nRst, $01, nA6, $06, nRst, $01
00089363 E10D                       	smpsAlterNote       $0D
00089365 D003                       	dc.b	nG6, $03
00089369 E0C0                       	smpsPan             panCenter, $00
0008936B E6FF                       	smpsAlterVol        $FF
0008936D AA06 800F AA03 AA03 8019+  	dc.b	nF3, $06, nRst, $0F, nF3, $03, nF3, $03, nRst, $19, nF3, $02
00089379 8001                       	dc.b	nRst, $01
0008937B E10C                       	smpsAlterNote       $0C
0008937D A906 800F A902 8001        	dc.b	nE3, $06, nRst, $0F, nE3, $02, nRst, $01
00089387 E604                       	smpsAlterVol        $04
00089389 E10B                       	smpsAlterNote       $0B
0008938B B306 8001                  	dc.b	nD4, $06, nRst, $01
0008938F E10F                       	smpsAlterNote       $0F
00089391 AE03                       	dc.b	nA3, $03
00089393 E10D                       	smpsAlterNote       $0D
00089395 B603 8001                  	dc.b	nF4, $03, nRst, $01
00089399 E10C                       	smpsAlterNote       $0C
0008939B B506 8001                  	dc.b	nE4, $06, nRst, $01
0008939F E10B                       	smpsAlterNote       $0B
000893A1 B302 8001                  	dc.b	nD4, $02, nRst, $01
000893A5 E10A                       	smpsAlterNote       $0A
000893A7 B103                       	dc.b	nC4, $03
000893A9 E110                       	smpsAlterNote       $10
000893AB AF03 8001                  	dc.b	nBb3, $03, nRst, $01
000893AF E10F                       	smpsAlterNote       $0F
000893B1 AE03 800A                  	dc.b	nA3, $03, nRst, $0A
000893B5 E080                       	smpsPan             panLeft, $00
000893B7 01                         	dc.b	$01
000893BA E6FB                       	smpsAlterVol        $FB
000893BC E1E4                       	smpsAlterNote       $E4
000893BE C501                       	dc.b	nAb5, $01
000893C0 E1F4                       	smpsAlterNote       $F4
000893C2 E701                       	dc.b	smpsNoAttack, $01
000893C4 E104                       	smpsAlterNote       $04
000893C6 E701                       	dc.b	smpsNoAttack, $01
000893C8 E114                       	smpsAlterNote       $14
000893CA E701                       	dc.b	smpsNoAttack, $01
000893CC E11C                       	smpsAlterNote       $1C
000893CE E701                       	dc.b	smpsNoAttack, $01
000893D0 E1EF                       	smpsAlterNote       $EF
000893D2 E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
000893D5 E1FF                       	smpsAlterNote       $FF
000893D7 E701                       	dc.b	smpsNoAttack, $01
000893D9 E10F                       	smpsAlterNote       $0F
000893DB C606                       	dc.b	nA5, $06
000893DD E109                       	smpsAlterNote       $09
000893DF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000893E3 E10F                       	smpsAlterNote       $0F
000893E5 E701                       	dc.b	smpsNoAttack, $01
000893E7 E112                       	smpsAlterNote       $12
000893E9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000893ED E10C                       	smpsAlterNote       $0C
000893EF E701                       	dc.b	smpsNoAttack, $01
000893F1 E108                       	smpsAlterNote       $08
000893F3 E701                       	dc.b	smpsNoAttack, $01
000893F5 E109                       	smpsAlterNote       $09
000893F7 E701                       	dc.b	smpsNoAttack, $01
000893F9 E10F                       	smpsAlterNote       $0F
000893FB E701                       	dc.b	smpsNoAttack, $01
000893FD E113                       	smpsAlterNote       $13
000893FF E701                       	dc.b	smpsNoAttack, $01
00089401 E10F                       	smpsAlterNote       $0F
00089403 E701                       	dc.b	smpsNoAttack, $01
00089405 E10C                       	smpsAlterNote       $0C
00089407 E701                       	dc.b	smpsNoAttack, $01
00089409 E108                       	smpsAlterNote       $08
0008940B E701                       	dc.b	smpsNoAttack, $01
0008940D E10C                       	smpsAlterNote       $0C
0008940F E701                       	dc.b	smpsNoAttack, $01
00089411 E112                       	smpsAlterNote       $12
00089413 E701                       	dc.b	smpsNoAttack, $01
00089415 E113                       	smpsAlterNote       $13
00089417 E701                       	dc.b	smpsNoAttack, $01
00089419 E10F                       	smpsAlterNote       $0F
0008941B E701                       	dc.b	smpsNoAttack, $01
0008941D E109                       	smpsAlterNote       $09
0008941F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089423 E10C                       	smpsAlterNote       $0C
00089425 E701                       	dc.b	smpsNoAttack, $01
00089427 E112                       	smpsAlterNote       $12
00089429 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008942D E10C                       	smpsAlterNote       $0C
0008942F E701                       	dc.b	smpsNoAttack, $01
00089431 E109                       	smpsAlterNote       $09
00089433 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089437 E10F                       	smpsAlterNote       $0F
00089439 E701                       	dc.b	smpsNoAttack, $01
0008943B E113                       	smpsAlterNote       $13
0008943D E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00089441 E10D                       	smpsAlterNote       $0D
00089443 C402 8001 C203             	dc.b	nG5, $02, nRst, $01, nF5, $03
00089449 E10C                       	smpsAlterNote       $0C
0008944B C102 8001                  	dc.b	nE5, $02, nRst, $01
0008944F E10D                       	smpsAlterNote       $0D
00089451 C201 8001                  	dc.b	nF5, $01, nRst, $01
00089455 E10C                       	smpsAlterNote       $0C
00089457 C102                       	dc.b	nE5, $02
00089459 E10B                       	smpsAlterNote       $0B
0008945B BF02 8001                  	dc.b	nD5, $02, nRst, $01
0008945F E10C                       	smpsAlterNote       $0C
00089461 C101 8001                  	dc.b	nE5, $01, nRst, $01
00089465 E10B                       	smpsAlterNote       $0B
00089467 BF02                       	dc.b	nD5, $02
00089469 E10A                       	smpsAlterNote       $0A
0008946B BD02 BF02 8001 BD01 8001   	dc.b	nC5, $02, nD5, $02, nRst, $01, nC5, $01, nRst, $01
00089475 E110                       	smpsAlterNote       $10
00089477 BB02                       	dc.b	nBb4, $02
00089479 E10A                       	smpsAlterNote       $0A
0008947B BD02 8001                  	dc.b	nC5, $02, nRst, $01
0008947F E110                       	smpsAlterNote       $10
00089481 BB01 8001                  	dc.b	nBb4, $01, nRst, $01
00089485 E10F                       	smpsAlterNote       $0F
00089487 BA01 8001                  	dc.b	nA4, $01, nRst, $01
0008948B E110                       	smpsAlterNote       $10
0008948D BB02                       	dc.b	nBb4, $02
0008948F E10F                       	smpsAlterNote       $0F
00089491 BA02 8001 B901 8001 BA02   	dc.b	nA4, $02, nRst, $01, nAb4, $01, nRst, $01, nA4, $02
0008949B E10C                       	smpsAlterNote       $0C
0008949D B502 B501 C101 8001        	dc.b	nE4, $02, nE4, $01, nE5, $01, nRst, $01
000894A5 E10B                       	smpsAlterNote       $0B
000894A7 BE01 8001                  	dc.b	nCs5, $01, nRst, $01
000894AB E10F                       	smpsAlterNote       $0F
000894AD BA02                       	dc.b	nA4, $02
000894B1 E0C0                       	smpsPan             panCenter, $00
000894B3 E601                       	smpsAlterVol        $01
000894B5 E109                       	smpsAlterNote       $09
000894B7 AA07 800E AA03 AA07 8015+  	dc.b	nF3, $07, nRst, $0E, nF3, $03, nF3, $07, nRst, $15, nF3, $03
000894C3 E108                       	smpsAlterNote       $08
000894C5 A906 800F A903             	dc.b	nE3, $06, nRst, $0F, nE3, $03
000894CB E107                       	smpsAlterNote       $07
000894CD B306 8001 AE03             	dc.b	nD4, $06, nRst, $01, nA3, $03
000894D3 E109                       	smpsAlterNote       $09
000894D5 B603 8001                  	dc.b	nF4, $03, nRst, $01
000894D9 E108                       	smpsAlterNote       $08
000894DB B506 8001                  	dc.b	nE4, $06, nRst, $01
000894DF E107                       	smpsAlterNote       $07
000894E1 B302 8001                  	dc.b	nD4, $02, nRst, $01
000894E5 E106                       	smpsAlterNote       $06
000894E7 B103                       	dc.b	nC4, $03
000894E9 E10C                       	smpsAlterNote       $0C
000894EB AF03 8001                  	dc.b	nBb3, $03, nRst, $01
000894F1 E080                       	smpsPan             panLeft, $00
000894F3 07                         	dc.b	$07
000894F4 E6FE                       	smpsAlterVol        $FE
000894F6 E10B                       	smpsAlterNote       $0B
000894F8 B20D                       	dc.b	nCs4, $0D
000894FA E105                       	smpsAlterNote       $05
000894FC E701                       	dc.b	smpsNoAttack, $01
000894FE E104                       	smpsAlterNote       $04
00089500 E701                       	dc.b	smpsNoAttack, $01
00089502 E108                       	smpsAlterNote       $08
00089504 E701                       	dc.b	smpsNoAttack, $01
00089506 E10E                       	smpsAlterNote       $0E
00089508 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008950C E10B                       	smpsAlterNote       $0B
0008950E E701                       	dc.b	smpsNoAttack, $01
00089510 E105                       	smpsAlterNote       $05
00089512 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089516 E10B                       	smpsAlterNote       $0B
00089518 E701                       	dc.b	smpsNoAttack, $01
0008951A E10E                       	smpsAlterNote       $0E
0008951C E701                       	dc.b	smpsNoAttack, $01
0008951E E10F                       	smpsAlterNote       $0F
00089520 8001                       	dc.b	nRst, $01
00089522 E10B                       	smpsAlterNote       $0B
00089524 B30D                       	dc.b	nD4, $0D
00089526 E105                       	smpsAlterNote       $05
00089528 E701                       	dc.b	smpsNoAttack, $01
0008952A E104                       	smpsAlterNote       $04
0008952C E701                       	dc.b	smpsNoAttack, $01
0008952E E108                       	smpsAlterNote       $08
00089530 E701                       	dc.b	smpsNoAttack, $01
00089532 E10E                       	smpsAlterNote       $0E
00089534 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089538 E10B                       	smpsAlterNote       $0B
0008953A E701                       	dc.b	smpsNoAttack, $01
0008953C E105                       	smpsAlterNote       $05
0008953E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089542 E10B                       	smpsAlterNote       $0B
00089544 E701                       	dc.b	smpsNoAttack, $01
00089546 E10E                       	smpsAlterNote       $0E
00089548 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008954C E108                       	smpsAlterNote       $08
0008954E E701                       	dc.b	smpsNoAttack, $01
00089550 E104                       	smpsAlterNote       $04
00089552 E701                       	dc.b	smpsNoAttack, $01
00089554 E105                       	smpsAlterNote       $05
00089556 E701                       	dc.b	smpsNoAttack, $01
00089558 E10B                       	smpsAlterNote       $0B
0008955A E701                       	dc.b	smpsNoAttack, $01
0008955C E10F                       	smpsAlterNote       $0F
0008955E E701                       	dc.b	smpsNoAttack, $01
00089560 E10B                       	smpsAlterNote       $0B
00089562 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00089566 E10C                       	smpsAlterNote       $0C
00089568 B50D                       	dc.b	nE4, $0D
0008956A E106                       	smpsAlterNote       $06
0008956C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089570 E10C                       	smpsAlterNote       $0C
00089572 E701                       	dc.b	smpsNoAttack, $01
00089574 E10F                       	smpsAlterNote       $0F
00089576 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008957A E109                       	smpsAlterNote       $09
0008957C E701                       	dc.b	smpsNoAttack, $01
0008957E E105                       	smpsAlterNote       $05
00089580 E701                       	dc.b	smpsNoAttack, $01
00089582 E106                       	smpsAlterNote       $06
00089584 E701                       	dc.b	smpsNoAttack, $01
00089586 E10C                       	smpsAlterNote       $0C
00089588 E701                       	dc.b	smpsNoAttack, $01
0008958A E110                       	smpsAlterNote       $10
0008958C E701                       	dc.b	smpsNoAttack, $01
0008958E E10B                       	smpsAlterNote       $0B
00089590 B30E                       	dc.b	nD4, $0E
00089592 E105                       	smpsAlterNote       $05
00089594 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089598 E10B                       	smpsAlterNote       $0B
0008959A E701                       	dc.b	smpsNoAttack, $01
0008959C E10E                       	smpsAlterNote       $0E
0008959E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000895A2 E108                       	smpsAlterNote       $08
000895A4 E701                       	dc.b	smpsNoAttack, $01
000895A6 E104                       	smpsAlterNote       $04
000895A8 E701                       	dc.b	smpsNoAttack, $01
000895AA E105                       	smpsAlterNote       $05
000895AC E701                       	dc.b	smpsNoAttack, $01
000895AE E10B                       	smpsAlterNote       $0B
000895B0 E701                       	dc.b	smpsNoAttack, $01
000895B2 E10F                       	smpsAlterNote       $0F
000895B4 E701                       	dc.b	smpsNoAttack, $01
000895B6 E10B                       	smpsAlterNote       $0B
000895B8 E701                       	dc.b	smpsNoAttack, $01
000895BA E108                       	smpsAlterNote       $08
000895BC E701                       	dc.b	smpsNoAttack, $01
000895BE E104                       	smpsAlterNote       $04
000895C0 E701                       	dc.b	smpsNoAttack, $01
000895C2 E108                       	smpsAlterNote       $08
000895C4 E701                       	dc.b	smpsNoAttack, $01
000895C6 E10E                       	smpsAlterNote       $0E
000895C8 E701                       	dc.b	smpsNoAttack, $01
000895CA E10F                       	smpsAlterNote       $0F
000895CC E701                       	dc.b	smpsNoAttack, $01
000895CE E10B                       	smpsAlterNote       $0B
000895D0 E701 B20D                  	dc.b	smpsNoAttack, $01, nCs4, $0D
000895D4 E108                       	smpsAlterNote       $08
000895D6 E701                       	dc.b	smpsNoAttack, $01
000895D8 E105                       	smpsAlterNote       $05
000895DA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000895DE E10B                       	smpsAlterNote       $0B
000895E0 E701                       	dc.b	smpsNoAttack, $01
000895E2 E10F                       	smpsAlterNote       $0F
000895E4 E701                       	dc.b	smpsNoAttack, $01
000895E6 E10E                       	smpsAlterNote       $0E
000895E8 E701                       	dc.b	smpsNoAttack, $01
000895EA E108                       	smpsAlterNote       $08
000895EC E701                       	dc.b	smpsNoAttack, $01
000895EE E104                       	smpsAlterNote       $04
000895F0 E701                       	dc.b	smpsNoAttack, $01
000895F2 E108                       	smpsAlterNote       $08
000895F4 E701                       	dc.b	smpsNoAttack, $01
000895F6 E10B                       	smpsAlterNote       $0B
000895F8 E701                       	dc.b	smpsNoAttack, $01
000895FA E10F                       	smpsAlterNote       $0F
000895FC E701                       	dc.b	smpsNoAttack, $01
000895FE E10B                       	smpsAlterNote       $0B
00089600 B30D                       	dc.b	nD4, $0D
00089602 E108                       	smpsAlterNote       $08
00089604 E701                       	dc.b	smpsNoAttack, $01
00089606 E105                       	smpsAlterNote       $05
00089608 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008960C E10B                       	smpsAlterNote       $0B
0008960E E701                       	dc.b	smpsNoAttack, $01
00089610 E10F                       	smpsAlterNote       $0F
00089612 E701                       	dc.b	smpsNoAttack, $01
00089614 E10E                       	smpsAlterNote       $0E
00089616 E701                       	dc.b	smpsNoAttack, $01
00089618 E108                       	smpsAlterNote       $08
0008961A E701                       	dc.b	smpsNoAttack, $01
0008961C E104                       	smpsAlterNote       $04
0008961E E701                       	dc.b	smpsNoAttack, $01
00089620 E108                       	smpsAlterNote       $08
00089622 E701                       	dc.b	smpsNoAttack, $01
00089624 E10B                       	smpsAlterNote       $0B
00089626 E701                       	dc.b	smpsNoAttack, $01
00089628 E10F                       	smpsAlterNote       $0F
0008962A E701                       	dc.b	smpsNoAttack, $01
0008962C E10B                       	smpsAlterNote       $0B
0008962E E701                       	dc.b	smpsNoAttack, $01
00089630 E105                       	smpsAlterNote       $05
00089632 E701                       	dc.b	smpsNoAttack, $01
00089634 E104                       	smpsAlterNote       $04
00089636 E701                       	dc.b	smpsNoAttack, $01
00089638 E108                       	smpsAlterNote       $08
0008963A E701                       	dc.b	smpsNoAttack, $01
0008963C E10E                       	smpsAlterNote       $0E
0008963E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089642 E10B                       	smpsAlterNote       $0B
00089644 8001 B20D                  	dc.b	nRst, $01, nCs4, $0D
00089648 E108                       	smpsAlterNote       $08
0008964A E701                       	dc.b	smpsNoAttack, $01
0008964C E104                       	smpsAlterNote       $04
0008964E E701                       	dc.b	smpsNoAttack, $01
00089650 E108                       	smpsAlterNote       $08
00089652 E701                       	dc.b	smpsNoAttack, $01
00089654 E10B                       	smpsAlterNote       $0B
00089656 E701                       	dc.b	smpsNoAttack, $01
0008965A E0C0                       	smpsPan             panCenter, $00
0008965C E601                       	smpsAlterVol        $01
0008965E E108                       	smpsAlterNote       $08
00089660 A906 8001 A903 A903 8001+  	dc.b	nE3, $06, nRst, $01, nE3, $03, nE3, $03, nRst, $01, nE3, $06
0008966C 8008 A902 8001             	dc.b	nRst, $08, nE3, $02, nRst, $01
00089674 E080                       	smpsPan             panLeft, $00
00089676 07                         	dc.b	$07
00089677 E6FF                       	smpsAlterVol        $FF
00089679 E10D                       	smpsAlterNote       $0D
0008967B B60D                       	dc.b	nF4, $0D
0008967D E10A                       	smpsAlterNote       $0A
0008967F E701                       	dc.b	smpsNoAttack, $01
00089681 E106                       	smpsAlterNote       $06
00089683 E701                       	dc.b	smpsNoAttack, $01
00089685 E10A                       	smpsAlterNote       $0A
00089687 E701                       	dc.b	smpsNoAttack, $01
00089689 E110                       	smpsAlterNote       $10
0008968B E701                       	dc.b	smpsNoAttack, $01
0008968D E111                       	smpsAlterNote       $11
0008968F E701                       	dc.b	smpsNoAttack, $01
00089691 E10D                       	smpsAlterNote       $0D
00089693 E701                       	dc.b	smpsNoAttack, $01
00089695 E107                       	smpsAlterNote       $07
00089697 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008969B E10A                       	smpsAlterNote       $0A
0008969D E701                       	dc.b	smpsNoAttack, $01
0008969F E110                       	smpsAlterNote       $10
000896A1 E701                       	dc.b	smpsNoAttack, $01
000896A3 E111                       	smpsAlterNote       $11
000896A5 8001                       	dc.b	nRst, $01
000896A7 E10D                       	smpsAlterNote       $0D
000896A9 B80D                       	dc.b	nG4, $0D
000896AB E10A                       	smpsAlterNote       $0A
000896AD E701                       	dc.b	smpsNoAttack, $01
000896AF E106                       	smpsAlterNote       $06
000896B1 E701                       	dc.b	smpsNoAttack, $01
000896B3 E10A                       	smpsAlterNote       $0A
000896B5 E701                       	dc.b	smpsNoAttack, $01
000896B7 E110                       	smpsAlterNote       $10
000896B9 E701                       	dc.b	smpsNoAttack, $01
000896BB E111                       	smpsAlterNote       $11
000896BD E701                       	dc.b	smpsNoAttack, $01
000896BF E10D                       	smpsAlterNote       $0D
000896C1 E701                       	dc.b	smpsNoAttack, $01
000896C3 E107                       	smpsAlterNote       $07
000896C5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000896C9 E10D                       	smpsAlterNote       $0D
000896CB E701                       	dc.b	smpsNoAttack, $01
000896CD E110                       	smpsAlterNote       $10
000896CF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000896D3 E10A                       	smpsAlterNote       $0A
000896D5 E701                       	dc.b	smpsNoAttack, $01
000896D7 E106                       	smpsAlterNote       $06
000896D9 E701                       	dc.b	smpsNoAttack, $01
000896DB E107                       	smpsAlterNote       $07
000896DD E701                       	dc.b	smpsNoAttack, $01
000896DF E10D                       	smpsAlterNote       $0D
000896E1 E701                       	dc.b	smpsNoAttack, $01
000896E3 E111                       	smpsAlterNote       $11
000896E5 E701                       	dc.b	smpsNoAttack, $01
000896E7 E10D                       	smpsAlterNote       $0D
000896E9 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000896ED E10F                       	smpsAlterNote       $0F
000896EF BA0D                       	dc.b	nA4, $0D
000896F1 E109                       	smpsAlterNote       $09
000896F3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000896F7 E10C                       	smpsAlterNote       $0C
000896F9 E701                       	dc.b	smpsNoAttack, $01
000896FB E112                       	smpsAlterNote       $12
000896FD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089701 E10C                       	smpsAlterNote       $0C
00089703 E701                       	dc.b	smpsNoAttack, $01
00089705 E109                       	smpsAlterNote       $09
00089707 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008970B E10F                       	smpsAlterNote       $0F
0008970D E701                       	dc.b	smpsNoAttack, $01
0008970F E113                       	smpsAlterNote       $13
00089711 E701                       	dc.b	smpsNoAttack, $01
00089713 E112                       	smpsAlterNote       $12
00089715 E701                       	dc.b	smpsNoAttack, $01
00089717 E10C                       	smpsAlterNote       $0C
00089719 E701                       	dc.b	smpsNoAttack, $01
0008971B E108                       	smpsAlterNote       $08
0008971D E701                       	dc.b	smpsNoAttack, $01
0008971F E10C                       	smpsAlterNote       $0C
00089721 E701                       	dc.b	smpsNoAttack, $01
00089723 E10F                       	smpsAlterNote       $0F
00089725 E701                       	dc.b	smpsNoAttack, $01
00089727 E113                       	smpsAlterNote       $13
00089729 E701                       	dc.b	smpsNoAttack, $01
0008972B E10F                       	smpsAlterNote       $0F
0008972D E701                       	dc.b	smpsNoAttack, $01
0008972F E109                       	smpsAlterNote       $09
00089731 E701                       	dc.b	smpsNoAttack, $01
00089733 E108                       	smpsAlterNote       $08
00089735 E701                       	dc.b	smpsNoAttack, $01
00089737 E10C                       	smpsAlterNote       $0C
00089739 E701                       	dc.b	smpsNoAttack, $01
0008973B E112                       	smpsAlterNote       $12
0008973D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089741 E10F                       	smpsAlterNote       $0F
00089743 E701                       	dc.b	smpsNoAttack, $01
00089745 E109                       	smpsAlterNote       $09
00089747 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008974B E10F                       	smpsAlterNote       $0F
0008974D E701                       	dc.b	smpsNoAttack, $01
0008974F E112                       	smpsAlterNote       $12
00089751 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089755 E10C                       	smpsAlterNote       $0C
00089757 E701                       	dc.b	smpsNoAttack, $01
00089759 E108                       	smpsAlterNote       $08
0008975B E701                       	dc.b	smpsNoAttack, $01
0008975D E109                       	smpsAlterNote       $09
0008975F E701                       	dc.b	smpsNoAttack, $01
00089761 E10C                       	smpsAlterNote       $0C
00089763 B50A                       	dc.b	nE4, $0A
00089765 E10D                       	smpsAlterNote       $0D
00089767 B60E                       	dc.b	nF4, $0E
00089769 E107                       	smpsAlterNote       $07
0008976B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008976F E10D                       	smpsAlterNote       $0D
00089771 E701                       	dc.b	smpsNoAttack, $01
00089773 E110                       	smpsAlterNote       $10
00089775 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089779 E10A                       	smpsAlterNote       $0A
0008977B E701                       	dc.b	smpsNoAttack, $01
0008977D E106                       	smpsAlterNote       $06
0008977F E701                       	dc.b	smpsNoAttack, $01
00089781 E107                       	smpsAlterNote       $07
00089783 E701                       	dc.b	smpsNoAttack, $01
00089785 E10D                       	smpsAlterNote       $0D
00089787 E701                       	dc.b	smpsNoAttack, $01
00089789 E111                       	smpsAlterNote       $11
0008978B E701                       	dc.b	smpsNoAttack, $01
0008978D E10D                       	smpsAlterNote       $0D
0008978F B80D                       	dc.b	nG4, $0D
00089791 E10A                       	smpsAlterNote       $0A
00089793 E701                       	dc.b	smpsNoAttack, $01
00089795 E107                       	smpsAlterNote       $07
00089797 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008979B E10D                       	smpsAlterNote       $0D
0008979D E701                       	dc.b	smpsNoAttack, $01
0008979F E111                       	smpsAlterNote       $11
000897A1 E701                       	dc.b	smpsNoAttack, $01
000897A3 E110                       	smpsAlterNote       $10
000897A5 E701                       	dc.b	smpsNoAttack, $01
000897A7 E10A                       	smpsAlterNote       $0A
000897A9 E701                       	dc.b	smpsNoAttack, $01
000897AB E106                       	smpsAlterNote       $06
000897AD E701                       	dc.b	smpsNoAttack, $01
000897AF E10A                       	smpsAlterNote       $0A
000897B1 E701                       	dc.b	smpsNoAttack, $01
000897B3 E10D                       	smpsAlterNote       $0D
000897B5 E701                       	dc.b	smpsNoAttack, $01
000897B7 E111                       	smpsAlterNote       $11
000897B9 E701                       	dc.b	smpsNoAttack, $01
000897BB E10D                       	smpsAlterNote       $0D
000897BD E701                       	dc.b	smpsNoAttack, $01
000897BF E107                       	smpsAlterNote       $07
000897C1 E701                       	dc.b	smpsNoAttack, $01
000897C3 E106                       	smpsAlterNote       $06
000897C5 E701                       	dc.b	smpsNoAttack, $01
000897C7 E10A                       	smpsAlterNote       $0A
000897C9 E701                       	dc.b	smpsNoAttack, $01
000897CB E110                       	smpsAlterNote       $10
000897CD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000897D1 E10D                       	smpsAlterNote       $0D
000897D3 E701                       	dc.b	smpsNoAttack, $01
000897D5 E10F                       	smpsAlterNote       $0F
000897D7 BA0D                       	dc.b	nA4, $0D
000897D9 E10C                       	smpsAlterNote       $0C
000897DB E701                       	dc.b	smpsNoAttack, $01
000897DD E108                       	smpsAlterNote       $08
000897DF E701                       	dc.b	smpsNoAttack, $01
000897E1 E109                       	smpsAlterNote       $09
000897E3 E701                       	dc.b	smpsNoAttack, $01
000897E5 E10F                       	smpsAlterNote       $0F
000897E7 E701                       	dc.b	smpsNoAttack, $01
000897E9 E113                       	smpsAlterNote       $13
000897EB E701                       	dc.b	smpsNoAttack, $01
000897ED E10F                       	smpsAlterNote       $0F
000897EF E701                       	dc.b	smpsNoAttack, $01
000897F1 E10C                       	smpsAlterNote       $0C
000897F3 E701                       	dc.b	smpsNoAttack, $01
000897F5 E108                       	smpsAlterNote       $08
000897F7 E701                       	dc.b	smpsNoAttack, $01
000897F9 E10C                       	smpsAlterNote       $0C
000897FB E701                       	dc.b	smpsNoAttack, $01
000897FD E112                       	smpsAlterNote       $12
000897FF E701                       	dc.b	smpsNoAttack, $01
00089801 E113                       	smpsAlterNote       $13
00089803 E701                       	dc.b	smpsNoAttack, $01
00089805 E10F                       	smpsAlterNote       $0F
00089807 E701                       	dc.b	smpsNoAttack, $01
00089809 E109                       	smpsAlterNote       $09
0008980B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008980F E10C                       	smpsAlterNote       $0C
00089811 E701                       	dc.b	smpsNoAttack, $01
00089813 E112                       	smpsAlterNote       $12
00089815 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089819 E10C                       	smpsAlterNote       $0C
0008981B E701                       	dc.b	smpsNoAttack, $01
0008981D E109                       	smpsAlterNote       $09
0008981F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089823 E10F                       	smpsAlterNote       $0F
00089825 E701                       	dc.b	smpsNoAttack, $01
00089827 E113                       	smpsAlterNote       $13
00089829 E701                       	dc.b	smpsNoAttack, $01
0008982B E112                       	smpsAlterNote       $12
0008982D E701                       	dc.b	smpsNoAttack, $01
0008982F E10C                       	smpsAlterNote       $0C
00089831 E701                       	dc.b	smpsNoAttack, $01
00089833 E109                       	smpsAlterNote       $09
00089835 8001                       	dc.b	nRst, $01
00089837 E10D                       	smpsAlterNote       $0D
00089839 B60A                       	dc.b	nF4, $0A
0008983B E10C                       	smpsAlterNote       $0C
0008983D B506 8001                  	dc.b	nE4, $06, nRst, $01
00089841 E10B                       	smpsAlterNote       $0B
00089843 B30D 8001                  	dc.b	nD4, $0D, nRst, $01
00089847 E10C                       	smpsAlterNote       $0C
00089849 B503                       	dc.b	nE4, $03
0008984B E10D                       	smpsAlterNote       $0D
0008984D B603 8001 B802 8001 BA0D   	dc.b	nF4, $03, nRst, $01, nG4, $02, nRst, $01, nA4, $0D
00089857 E10C                       	smpsAlterNote       $0C
00089859 E701                       	dc.b	smpsNoAttack, $01
0008985B E108                       	smpsAlterNote       $08
0008985D E701                       	dc.b	smpsNoAttack, $01
0008985F E10C                       	smpsAlterNote       $0C
00089861 E701                       	dc.b	smpsNoAttack, $01
00089863 E112                       	smpsAlterNote       $12
00089865 E701                       	dc.b	smpsNoAttack, $01
00089867 E113                       	smpsAlterNote       $13
00089869 E701                       	dc.b	smpsNoAttack, $01
0008986B E10F                       	smpsAlterNote       $0F
0008986D E701                       	dc.b	smpsNoAttack, $01
0008986F E109                       	smpsAlterNote       $09
00089871 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089875 E10C                       	smpsAlterNote       $0C
00089877 E701                       	dc.b	smpsNoAttack, $01
00089879 E112                       	smpsAlterNote       $12
0008987B E701                       	dc.b	smpsNoAttack, $01
0008987D E113                       	smpsAlterNote       $13
0008987F 8001                       	dc.b	nRst, $01
00089881 E10D                       	smpsAlterNote       $0D
00089883 C20D                       	dc.b	nF5, $0D
00089885 E10A                       	smpsAlterNote       $0A
00089887 E701                       	dc.b	smpsNoAttack, $01
00089889 E106                       	smpsAlterNote       $06
0008988B E701                       	dc.b	smpsNoAttack, $01
0008988D E10A                       	smpsAlterNote       $0A
0008988F E701                       	dc.b	smpsNoAttack, $01
00089891 E110                       	smpsAlterNote       $10
00089893 E701                       	dc.b	smpsNoAttack, $01
00089895 E111                       	smpsAlterNote       $11
00089897 E701                       	dc.b	smpsNoAttack, $01
00089899 E10D                       	smpsAlterNote       $0D
0008989B E701                       	dc.b	smpsNoAttack, $01
0008989D E107                       	smpsAlterNote       $07
0008989F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000898A3 E10A                       	smpsAlterNote       $0A
000898A5 E701                       	dc.b	smpsNoAttack, $01
000898A7 E110                       	smpsAlterNote       $10
000898A9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000898AD E10A                       	smpsAlterNote       $0A
000898AF E701                       	dc.b	smpsNoAttack, $01
000898B1 E107                       	smpsAlterNote       $07
000898B3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000898B7 E10D                       	smpsAlterNote       $0D
000898B9 E701                       	dc.b	smpsNoAttack, $01
000898BB E111                       	smpsAlterNote       $11
000898BD E701                       	dc.b	smpsNoAttack, $01
000898BF E110                       	smpsAlterNote       $10
000898C1 E701                       	dc.b	smpsNoAttack, $01
000898C3 E10A                       	smpsAlterNote       $0A
000898C5 E701                       	dc.b	smpsNoAttack, $01
000898C7 E106                       	smpsAlterNote       $06
000898C9 E701                       	dc.b	smpsNoAttack, $01
000898CB E10A                       	smpsAlterNote       $0A
000898CD E701                       	dc.b	smpsNoAttack, $01
000898CF E10D                       	smpsAlterNote       $0D
000898D1 E701                       	dc.b	smpsNoAttack, $01
000898D3 E111                       	smpsAlterNote       $11
000898D5 E701                       	dc.b	smpsNoAttack, $01
000898D7 E10D                       	smpsAlterNote       $0D
000898D9 E701                       	dc.b	smpsNoAttack, $01
000898DB E107                       	smpsAlterNote       $07
000898DD E701                       	dc.b	smpsNoAttack, $01
000898DF E106                       	smpsAlterNote       $06
000898E1 E701                       	dc.b	smpsNoAttack, $01
000898E3 E10A                       	smpsAlterNote       $0A
000898E5 E701                       	dc.b	smpsNoAttack, $01
000898E7 E110                       	smpsAlterNote       $10
000898E9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000898ED E10D                       	smpsAlterNote       $0D
000898EF E701                       	dc.b	smpsNoAttack, $01
000898F1 E107                       	smpsAlterNote       $07
000898F3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000898F7 E10D                       	smpsAlterNote       $0D
000898F9 E701                       	dc.b	smpsNoAttack, $01
000898FB E110                       	smpsAlterNote       $10
000898FD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089901 E10A                       	smpsAlterNote       $0A
00089903 E701                       	dc.b	smpsNoAttack, $01
00089905 E106                       	smpsAlterNote       $06
00089907 E701                       	dc.b	smpsNoAttack, $01
00089909 E107                       	smpsAlterNote       $07
0008990B E701                       	dc.b	smpsNoAttack, $01
0008990D E10D                       	smpsAlterNote       $0D
0008990F E701                       	dc.b	smpsNoAttack, $01
00089911 E111                       	smpsAlterNote       $11
00089913 E701                       	dc.b	smpsNoAttack, $01
00089915 E10D                       	smpsAlterNote       $0D
00089917 E701                       	dc.b	smpsNoAttack, $01
00089919 E10A                       	smpsAlterNote       $0A
0008991B E701                       	dc.b	smpsNoAttack, $01
0008991D E107                       	smpsAlterNote       $07
0008991F 8001                       	dc.b	nRst, $01
00089921 E10D                       	smpsAlterNote       $0D
00089923 C206 8001                  	dc.b	nF5, $06, nRst, $01
00089929 E601                       	smpsAlterVol        $01
0008992B E110                       	smpsAlterNote       $10
0008992D BB0D                       	dc.b	nBb4, $0D
0008992F E10A                       	smpsAlterNote       $0A
00089931 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089935 E110                       	smpsAlterNote       $10
00089937 E701                       	dc.b	smpsNoAttack, $01
00089939 E113                       	smpsAlterNote       $13
0008993B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008993F E10D                       	smpsAlterNote       $0D
00089941 E701                       	dc.b	smpsNoAttack, $01
00089943 E109                       	smpsAlterNote       $09
00089945 E701                       	dc.b	smpsNoAttack, $01
00089947 E10A                       	smpsAlterNote       $0A
00089949 E701                       	dc.b	smpsNoAttack, $01
0008994B E110                       	smpsAlterNote       $10
0008994D E701                       	dc.b	smpsNoAttack, $01
0008994F E114                       	smpsAlterNote       $14
00089951 E701                       	dc.b	smpsNoAttack, $01
00089953 E110                       	smpsAlterNote       $10
00089955 E701                       	dc.b	smpsNoAttack, $01
00089957 E10D                       	smpsAlterNote       $0D
00089959 E701                       	dc.b	smpsNoAttack, $01
0008995B E109                       	smpsAlterNote       $09
0008995D E701                       	dc.b	smpsNoAttack, $01
0008995F E10A                       	smpsAlterNote       $0A
00089961 8001 BD0D                  	dc.b	nRst, $01, nC5, $0D
00089965 E107                       	smpsAlterNote       $07
00089967 E701                       	dc.b	smpsNoAttack, $01
00089969 E103                       	smpsAlterNote       $03
0008996B E701                       	dc.b	smpsNoAttack, $01
0008996D E107                       	smpsAlterNote       $07
0008996F E701                       	dc.b	smpsNoAttack, $01
00089971 E10D                       	smpsAlterNote       $0D
00089973 E701                       	dc.b	smpsNoAttack, $01
00089975 E10E                       	smpsAlterNote       $0E
00089977 E701                       	dc.b	smpsNoAttack, $01
00089979 E10A                       	smpsAlterNote       $0A
0008997B E701                       	dc.b	smpsNoAttack, $01
0008997D E104                       	smpsAlterNote       $04
0008997F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089983 E107                       	smpsAlterNote       $07
00089985 E701                       	dc.b	smpsNoAttack, $01
00089987 E10D                       	smpsAlterNote       $0D
00089989 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008998D E107                       	smpsAlterNote       $07
0008998F E701                       	dc.b	smpsNoAttack, $01
00089991 E104                       	smpsAlterNote       $04
00089993 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089997 E10B                       	smpsAlterNote       $0B
00089999 BF0D                       	dc.b	nD5, $0D
0008999B E108                       	smpsAlterNote       $08
0008999D E701                       	dc.b	smpsNoAttack, $01
0008999F E105                       	smpsAlterNote       $05
000899A1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000899A5 E10B                       	smpsAlterNote       $0B
000899A7 E701                       	dc.b	smpsNoAttack, $01
000899A9 E10F                       	smpsAlterNote       $0F
000899AB E701                       	dc.b	smpsNoAttack, $01
000899AD E10E                       	smpsAlterNote       $0E
000899AF E701                       	dc.b	smpsNoAttack, $01
000899B1 E108                       	smpsAlterNote       $08
000899B3 E701                       	dc.b	smpsNoAttack, $01
000899B5 E104                       	smpsAlterNote       $04
000899B7 E701                       	dc.b	smpsNoAttack, $01
000899B9 E108                       	smpsAlterNote       $08
000899BB E701                       	dc.b	smpsNoAttack, $01
000899BD E10B                       	smpsAlterNote       $0B
000899BF E701                       	dc.b	smpsNoAttack, $01
000899C1 E10F                       	smpsAlterNote       $0F
000899C3 E701                       	dc.b	smpsNoAttack, $01
000899C5 E10B                       	smpsAlterNote       $0B
000899C7 E701                       	dc.b	smpsNoAttack, $01
000899C9 E105                       	smpsAlterNote       $05
000899CB E701                       	dc.b	smpsNoAttack, $01
000899CD E104                       	smpsAlterNote       $04
000899CF E701                       	dc.b	smpsNoAttack, $01
000899D1 E105                       	smpsAlterNote       $05
000899D3 8001                       	dc.b	nRst, $01
000899D5 E10C                       	smpsAlterNote       $0C
000899D7 C10C                       	dc.b	nE5, $0C
000899D9 E10D                       	smpsAlterNote       $0D
000899DB C201                       	dc.b	nF5, $01
000899DD E10E                       	smpsAlterNote       $0E
000899DF C301 8001                  	dc.b	nFs5, $01, nRst, $01
000899E3 E10D                       	smpsAlterNote       $0D
000899E5 C40C C20D                  	dc.b	nG5, $0C, nF5, $0D
000899E9 E10A                       	smpsAlterNote       $0A
000899EB E701                       	dc.b	smpsNoAttack, $01
000899ED E106                       	smpsAlterNote       $06
000899EF E701                       	dc.b	smpsNoAttack, $01
000899F1 E10A                       	smpsAlterNote       $0A
000899F3 E701                       	dc.b	smpsNoAttack, $01
000899F5 E10D                       	smpsAlterNote       $0D
000899F7 E701                       	dc.b	smpsNoAttack, $01
000899F9 E111                       	smpsAlterNote       $11
000899FB E701                       	dc.b	smpsNoAttack, $01
000899FD E10D                       	smpsAlterNote       $0D
000899FF E701                       	dc.b	smpsNoAttack, $01
00089A01 E107                       	smpsAlterNote       $07
00089A03 E701                       	dc.b	smpsNoAttack, $01
00089A05 E106                       	smpsAlterNote       $06
00089A07 E701                       	dc.b	smpsNoAttack, $01
00089A09 E10A                       	smpsAlterNote       $0A
00089A0B E701                       	dc.b	smpsNoAttack, $01
00089A0D E110                       	smpsAlterNote       $10
00089A0F E701                       	dc.b	smpsNoAttack, $01
00089A11 E111                       	smpsAlterNote       $11
00089A13 8001                       	dc.b	nRst, $01
00089A15 E10D                       	smpsAlterNote       $0D
00089A17 C40D                       	dc.b	nG5, $0D
00089A19 E10A                       	smpsAlterNote       $0A
00089A1B E701                       	dc.b	smpsNoAttack, $01
00089A1D E106                       	smpsAlterNote       $06
00089A1F E701                       	dc.b	smpsNoAttack, $01
00089A21 E10A                       	smpsAlterNote       $0A
00089A23 E701                       	dc.b	smpsNoAttack, $01
00089A25 E10D                       	smpsAlterNote       $0D
00089A27 E701                       	dc.b	smpsNoAttack, $01
00089A29 E10C                       	smpsAlterNote       $0C
00089A2B C006 8001 C002 C002 8001+  	dc.b	nEb5, $06, nRst, $01, nEb5, $02, nEb5, $02, nRst, $01, nEb5, $01
00089A37 8001                       	dc.b	nRst, $01
00089A39 E10D                       	smpsAlterNote       $0D
00089A3B C20D                       	dc.b	nF5, $0D
00089A3D E10A                       	smpsAlterNote       $0A
00089A3F E701                       	dc.b	smpsNoAttack, $01
00089A41 E106                       	smpsAlterNote       $06
00089A43 E701                       	dc.b	smpsNoAttack, $01
00089A45 E10A                       	smpsAlterNote       $0A
00089A47 E701                       	dc.b	smpsNoAttack, $01
00089A49 E110                       	smpsAlterNote       $10
00089A4B E701                       	dc.b	smpsNoAttack, $01
00089A4D E111                       	smpsAlterNote       $11
00089A4F E701                       	dc.b	smpsNoAttack, $01
00089A51 E10D                       	smpsAlterNote       $0D
00089A53 E701                       	dc.b	smpsNoAttack, $01
00089A55 E107                       	smpsAlterNote       $07
00089A57 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089A5B E10A                       	smpsAlterNote       $0A
00089A5D E701                       	dc.b	smpsNoAttack, $01
00089A5F E110                       	smpsAlterNote       $10
00089A61 E701                       	dc.b	smpsNoAttack, $01
00089A63 E111                       	smpsAlterNote       $11
00089A65 8001                       	dc.b	nRst, $01
00089A67 E10F                       	smpsAlterNote       $0F
00089A69 C60A                       	dc.b	nA5, $0A
00089A6B E10D                       	smpsAlterNote       $0D
00089A6D C406 8001                  	dc.b	nG5, $06, nRst, $01
00089A71 E10C                       	smpsAlterNote       $0C
00089A73 C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
00089A7F 8001                       	dc.b	nRst, $01
00089A81 E10D                       	smpsAlterNote       $0D
00089A83 C20D                       	dc.b	nF5, $0D
00089A85 E107                       	smpsAlterNote       $07
00089A87 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089A8B E10A                       	smpsAlterNote       $0A
00089A8D E701                       	dc.b	smpsNoAttack, $01
00089A8F E110                       	smpsAlterNote       $10
00089A91 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089A95 E10A                       	smpsAlterNote       $0A
00089A97 E701                       	dc.b	smpsNoAttack, $01
00089A99 E107                       	smpsAlterNote       $07
00089A9B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089A9F E10D                       	smpsAlterNote       $0D
00089AA1 E701                       	dc.b	smpsNoAttack, $01
00089AA3 E111                       	smpsAlterNote       $11
00089AA5 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00089AA9 E10D                       	smpsAlterNote       $0D
00089AAB C40D                       	dc.b	nG5, $0D
00089AAD E107                       	smpsAlterNote       $07
00089AAF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089AB3 E10A                       	smpsAlterNote       $0A
00089AB5 E701                       	dc.b	smpsNoAttack, $01
00089AB7 E10D                       	smpsAlterNote       $0D
00089AB9 8001                       	dc.b	nRst, $01
00089ABB E10C                       	smpsAlterNote       $0C
00089ABD C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
00089AC9 E10D                       	smpsAlterNote       $0D
00089ACB C20E                       	dc.b	nF5, $0E
00089ACD E107                       	smpsAlterNote       $07
00089ACF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00089AD3 E10D                       	smpsAlterNote       $0D
00089AD5 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00089ADB E0C0                       	smpsPan             panCenter, $00
00089ADD E603                       	smpsAlterVol        $03
00089ADF E108                       	smpsAlterNote       $08
00089AE1 B406                       	dc.b	nEb4, $06
00089AE3 E10C                       	smpsAlterNote       $0C
00089AE5 AF03 8001                  	dc.b	nBb3, $03, nRst, $01
00089AE9 E108                       	smpsAlterNote       $08
00089AEB B403                       	dc.b	nEb4, $03
00089AED E109                       	smpsAlterNote       $09
00089AEF B803 8001                  	dc.b	nG4, $03, nRst, $01
00089AF3 E10C                       	smpsAlterNote       $0C
00089AF5 BB03 BB03 8008             	dc.b	nBb4, $03, nBb4, $03, nRst, $08
00089AFD 03                         	dc.b	$03
00089AFE E6FD                       	smpsAlterVol        $FD
00089B00 F6F1 F4                    	smpsJump            music84_Jump00
00089B03                            
00089B03                            ; PSG1 Data
00089B03                            music84_PSG1:
00089B03 E1FD                       	smpsAlterNote       $FD
00089B05 EC04                       	smpsPSGAlterVol     $04
00089B07 9203                       	dc.b	nF1, $03
00089B09 E1FE                       	smpsAlterNote       $FE
00089B0B 9603                       	dc.b	nA1, $03
00089B0D EC04                       	smpsPSGAlterVol     $04
00089B0F E701                       	dc.b	smpsNoAttack, $01
00089B11 E1FF                       	smpsAlterNote       $FF
00089B13 ECFC                       	smpsPSGAlterVol     $FC
00089B15 9B03                       	dc.b	nD2, $03
00089B17 E1FD                       	smpsAlterNote       $FD
00089B19 9403                       	dc.b	nG1, $03
00089B1B EC04                       	smpsPSGAlterVol     $04
00089B1D E701                       	dc.b	smpsNoAttack, $01
00089B1F E1FE                       	smpsAlterNote       $FE
00089B21 ECFC                       	smpsPSGAlterVol     $FC
00089B23 9703                       	dc.b	nBb1, $03
00089B25 E1FF                       	smpsAlterNote       $FF
00089B27 9B03                       	dc.b	nD2, $03
00089B29 EC04                       	smpsPSGAlterVol     $04
00089B2B E701                       	dc.b	smpsNoAttack, $01
00089B2D E1FE                       	smpsAlterNote       $FE
00089B2F ECFC                       	smpsPSGAlterVol     $FC
00089B31 A002                       	dc.b	nG2, $02
00089B33 EC04                       	smpsPSGAlterVol     $04
00089B35 E701                       	dc.b	smpsNoAttack, $01
00089B37 E1FF                       	smpsAlterNote       $FF
00089B39 ECFC                       	smpsPSGAlterVol     $FC
00089B3B A203                       	dc.b	nA2, $03
00089B3D EC0B                       	smpsPSGAlterVol     $0B
00089B3F 800A                       	dc.b	nRst, $0A
00089B41 E105                       	smpsAlterNote       $05
00089B43 01                         	dc.b	$01
00089B44 E1FC                       	smpsAlterNote       $FC
00089B46 01                         	dc.b	$01
00089B47 E105                       	smpsAlterNote       $05
00089B49 01                         	dc.b	$01
00089B4A E1FD                       	smpsAlterNote       $FD
00089B4C 01                         	dc.b	$01
00089B4D E105                       	smpsAlterNote       $05
00089B4F 01                         	dc.b	$01
00089B50 E1FD                       	smpsAlterNote       $FD
00089B52 01                         	dc.b	$01
00089B53 E1FA                       	smpsAlterNote       $FA
00089B55 01                         	dc.b	$01
00089B56 E1FC                       	smpsAlterNote       $FC
00089B58 01                         	dc.b	$01
00089B59 E105                       	smpsAlterNote       $05
00089B5B 01                         	dc.b	$01
00089B5C E108                       	smpsAlterNote       $08
00089B5E 0101                       	dc.b	$01, $01
00089B60 E105                       	smpsAlterNote       $05
00089B62 01                         	dc.b	$01
00089B63 E1FA                       	smpsAlterNote       $FA
00089B65 0101                       	dc.b	$01, $01
00089B67 E1FD                       	smpsAlterNote       $FD
00089B69 01                         	dc.b	$01
00089B6A E105                       	smpsAlterNote       $05
00089B6C 01                         	dc.b	$01
00089B6D E108                       	smpsAlterNote       $08
00089B6F 01                         	dc.b	$01
00089B70 E105                       	smpsAlterNote       $05
00089B72 01                         	dc.b	$01
00089B73 E1FC                       	smpsAlterNote       $FC
00089B75 01                         	dc.b	$01
00089B76 E105                       	smpsAlterNote       $05
00089B78 01                         	dc.b	$01
00089B79 E1FD                       	smpsAlterNote       $FD
00089B7B 01                         	dc.b	$01
00089B7C                            
00089B7C                            music84_Jump07:
00089B7C E105                       	smpsAlterNote       $05
00089B7E 8001                       	dc.b	nRst, $01
00089B80 E1FD                       	smpsAlterNote       $FD
00089B82 01                         	dc.b	$01
00089B83 E1FA                       	smpsAlterNote       $FA
00089B85 01                         	dc.b	$01
00089B86 E1FC                       	smpsAlterNote       $FC
00089B88 01                         	dc.b	$01
00089B89 E1FD                       	smpsAlterNote       $FD
00089B8B ECF5                       	smpsPSGAlterVol     $F5
00089B8D 9206                       	dc.b	nF1, $06
00089B8F EC04                       	smpsPSGAlterVol     $04
00089B91 E701                       	dc.b	smpsNoAttack, $01
00089B93 EC07                       	smpsPSGAlterVol     $07
00089B95 8003                       	dc.b	nRst, $03
00089B97 ECF5                       	smpsPSGAlterVol     $F5
00089B99 9206                       	dc.b	nF1, $06
00089B9B EC04                       	smpsPSGAlterVol     $04
00089B9D E701                       	dc.b	smpsNoAttack, $01
00089B9F EC07                       	smpsPSGAlterVol     $07
00089BA1 8006                       	dc.b	nRst, $06
00089BA3 E100                       	smpsAlterNote       $00
00089BA5 01                         	dc.b	$01
00089BA6 E104                       	smpsAlterNote       $04
00089BA8 01                         	dc.b	$01
00089BA9 E100                       	smpsAlterNote       $00
00089BAB 01                         	dc.b	$01
00089BAC E1FB                       	smpsAlterNote       $FB
00089BAE 01                         	dc.b	$01
00089BAF E1FD                       	smpsAlterNote       $FD
00089BB1 ECF5                       	smpsPSGAlterVol     $F5
00089BB3 9406                       	dc.b	nG1, $06
00089BB5 EC04                       	smpsPSGAlterVol     $04
00089BB7 E701                       	dc.b	smpsNoAttack, $01
00089BB9 EC07                       	smpsPSGAlterVol     $07
00089BBB 8003                       	dc.b	nRst, $03
00089BBD ECF5                       	smpsPSGAlterVol     $F5
00089BBF 9407                       	dc.b	nG1, $07
00089BC1 EC0B                       	smpsPSGAlterVol     $0B
00089BC3 8006                       	dc.b	nRst, $06
00089BC5 E100                       	smpsAlterNote       $00
00089BC7 01                         	dc.b	$01
00089BC8 E103                       	smpsAlterNote       $03
00089BCA 0101                       	dc.b	$01, $01
00089BCC E1FD                       	smpsAlterNote       $FD
00089BCE 01                         	dc.b	$01
00089BCF ECF5                       	smpsPSGAlterVol     $F5
00089BD1 9207                       	dc.b	nF1, $07
00089BD3 EC0B                       	smpsPSGAlterVol     $0B
00089BD5 8004                       	dc.b	nRst, $04
00089BD7 ECF5                       	smpsPSGAlterVol     $F5
00089BD9 9206                       	dc.b	nF1, $06
00089BDB EC04                       	smpsPSGAlterVol     $04
00089BDD E701                       	dc.b	smpsNoAttack, $01
00089BDF EC07                       	smpsPSGAlterVol     $07
00089BE1 8006                       	dc.b	nRst, $06
00089BE3 E103                       	smpsAlterNote       $03
00089BE5 01                         	dc.b	$01
00089BE6 E104                       	smpsAlterNote       $04
00089BE8 01                         	dc.b	$01
00089BE9 E100                       	smpsAlterNote       $00
00089BEB 01                         	dc.b	$01
00089BEC E1FA                       	smpsAlterNote       $FA
00089BEE 01                         	dc.b	$01
00089BEF E1FD                       	smpsAlterNote       $FD
00089BF1 ECF5                       	smpsPSGAlterVol     $F5
00089BF3 9206                       	dc.b	nF1, $06
00089BF5 EC04                       	smpsPSGAlterVol     $04
00089BF7 E701                       	dc.b	smpsNoAttack, $01
00089BF9 EC07                       	smpsPSGAlterVol     $07
00089BFB 8003                       	dc.b	nRst, $03
00089BFD ECF5                       	smpsPSGAlterVol     $F5
00089BFF 9106                       	dc.b	nE1, $06
00089C01 EC04                       	smpsPSGAlterVol     $04
00089C03 E701                       	dc.b	smpsNoAttack, $01
00089C05 EC07                       	smpsPSGAlterVol     $07
00089C07 8006                       	dc.b	nRst, $06
00089C09 E100                       	smpsAlterNote       $00
00089C0B 01                         	dc.b	$01
00089C0C E104                       	smpsAlterNote       $04
00089C0E 01                         	dc.b	$01
00089C0F E100                       	smpsAlterNote       $00
00089C11 01                         	dc.b	$01
00089C12 E1FD                       	smpsAlterNote       $FD
00089C14 01                         	dc.b	$01
00089C15 ECF5                       	smpsPSGAlterVol     $F5
00089C17 9206                       	dc.b	nF1, $06
00089C19 EC04                       	smpsPSGAlterVol     $04
00089C1B E701                       	dc.b	smpsNoAttack, $01
00089C1D EC07                       	smpsPSGAlterVol     $07
00089C1F 8003                       	dc.b	nRst, $03
00089C21 ECF5                       	smpsPSGAlterVol     $F5
00089C23 9207                       	dc.b	nF1, $07
00089C25 EC0B                       	smpsPSGAlterVol     $0B
00089C27 8007                       	dc.b	nRst, $07
00089C29 E103                       	smpsAlterNote       $03
00089C2B 0101                       	dc.b	$01, $01
00089C2D E1FD                       	smpsAlterNote       $FD
00089C2F 01                         	dc.b	$01
00089C30 E1FB                       	smpsAlterNote       $FB
00089C32 01                         	dc.b	$01
00089C33 E1FD                       	smpsAlterNote       $FD
00089C35 ECF5                       	smpsPSGAlterVol     $F5
00089C37 9406                       	dc.b	nG1, $06
00089C39 EC0B                       	smpsPSGAlterVol     $0B
00089C3B 8004                       	dc.b	nRst, $04
00089C3D ECF5                       	smpsPSGAlterVol     $F5
00089C3F 9406                       	dc.b	nG1, $06
00089C41 EC04                       	smpsPSGAlterVol     $04
00089C43 E701                       	dc.b	smpsNoAttack, $01
00089C45 EC07                       	smpsPSGAlterVol     $07
00089C47 8006                       	dc.b	nRst, $06
00089C49 E100                       	smpsAlterNote       $00
00089C4B 01                         	dc.b	$01
00089C4C E104                       	smpsAlterNote       $04
00089C4E 01                         	dc.b	$01
00089C4F E100                       	smpsAlterNote       $00
00089C51 01                         	dc.b	$01
00089C52 E1F9                       	smpsAlterNote       $F9
00089C54 01                         	dc.b	$01
00089C55 E1FD                       	smpsAlterNote       $FD
00089C57 ECF5                       	smpsPSGAlterVol     $F5
00089C59 9206                       	dc.b	nF1, $06
00089C5B EC04                       	smpsPSGAlterVol     $04
00089C5D E701                       	dc.b	smpsNoAttack, $01
00089C5F EC07                       	smpsPSGAlterVol     $07
00089C61 8003                       	dc.b	nRst, $03
00089C63 ECF5                       	smpsPSGAlterVol     $F5
00089C65 9207                       	dc.b	nF1, $07
00089C67 EC0B                       	smpsPSGAlterVol     $0B
00089C69 8006                       	dc.b	nRst, $06
00089C6B E100                       	smpsAlterNote       $00
00089C6D 01                         	dc.b	$01
00089C6E E104                       	smpsAlterNote       $04
00089C70 01                         	dc.b	$01
00089C71 E103                       	smpsAlterNote       $03
00089C73 01                         	dc.b	$01
00089C74 E1FD                       	smpsAlterNote       $FD
00089C76 01                         	dc.b	$01
00089C77 ECF5                       	smpsPSGAlterVol     $F5
00089C79 9207                       	dc.b	nF1, $07
00089C7B EC0B                       	smpsPSGAlterVol     $0B
00089C7D 8004                       	dc.b	nRst, $04
00089C7F ECF5                       	smpsPSGAlterVol     $F5
00089C81 9206                       	dc.b	nF1, $06
00089C83 EC0B                       	smpsPSGAlterVol     $0B
00089C85 8007                       	dc.b	nRst, $07
00089C87 E103                       	smpsAlterNote       $03
00089C89 0101                       	dc.b	$01, $01
00089C8B E100                       	smpsAlterNote       $00
00089C8D 01                         	dc.b	$01
00089C8E E1FA                       	smpsAlterNote       $FA
00089C90 01                         	dc.b	$01
00089C91 E1FD                       	smpsAlterNote       $FD
00089C93 ECF5                       	smpsPSGAlterVol     $F5
00089C95 9206                       	dc.b	nF1, $06
00089C97 EC04                       	smpsPSGAlterVol     $04
00089C99 E701                       	dc.b	smpsNoAttack, $01
00089C9B EC07                       	smpsPSGAlterVol     $07
00089C9D 8003                       	dc.b	nRst, $03
00089C9F ECF5                       	smpsPSGAlterVol     $F5
00089CA1 9206                       	dc.b	nF1, $06
00089CA3 EC04                       	smpsPSGAlterVol     $04
00089CA5 E701                       	dc.b	smpsNoAttack, $01
00089CA7 EC07                       	smpsPSGAlterVol     $07
00089CA9 8006                       	dc.b	nRst, $06
00089CAB E100                       	smpsAlterNote       $00
00089CAD 01                         	dc.b	$01
00089CAE E104                       	smpsAlterNote       $04
00089CB0 01                         	dc.b	$01
00089CB1 E100                       	smpsAlterNote       $00
00089CB3 01                         	dc.b	$01
00089CB4 E1FD                       	smpsAlterNote       $FD
00089CB6 01                         	dc.b	$01
00089CB7 ECF5                       	smpsPSGAlterVol     $F5
00089CB9 9206                       	dc.b	nF1, $06
00089CBB EC04                       	smpsPSGAlterVol     $04
00089CBD E701                       	dc.b	smpsNoAttack, $01
00089CBF EC07                       	smpsPSGAlterVol     $07
00089CC1 8003                       	dc.b	nRst, $03
00089CC3 ECF5                       	smpsPSGAlterVol     $F5
00089CC5 9207                       	dc.b	nF1, $07
00089CC7 EC0B                       	smpsPSGAlterVol     $0B
00089CC9 8007                       	dc.b	nRst, $07
00089CCB E103                       	smpsAlterNote       $03
00089CCD 0101                       	dc.b	$01, $01
00089CCF E1FD                       	smpsAlterNote       $FD
00089CD1 01                         	dc.b	$01
00089CD2 E1FA                       	smpsAlterNote       $FA
00089CD4 01                         	dc.b	$01
00089CD5 E1FD                       	smpsAlterNote       $FD
00089CD7 ECF5                       	smpsPSGAlterVol     $F5
00089CD9 9206                       	dc.b	nF1, $06
00089CDB EC0B                       	smpsPSGAlterVol     $0B
00089CDD 8004                       	dc.b	nRst, $04
00089CDF ECF5                       	smpsPSGAlterVol     $F5
00089CE1 9206                       	dc.b	nF1, $06
00089CE3 EC04                       	smpsPSGAlterVol     $04
00089CE5 E701                       	dc.b	smpsNoAttack, $01
00089CE7 EC07                       	smpsPSGAlterVol     $07
00089CE9 8006                       	dc.b	nRst, $06
00089CEB E103                       	smpsAlterNote       $03
00089CED 01                         	dc.b	$01
00089CEE E104                       	smpsAlterNote       $04
00089CF0 01                         	dc.b	$01
00089CF1 E100                       	smpsAlterNote       $00
00089CF3 01                         	dc.b	$01
00089CF4 E1FA                       	smpsAlterNote       $FA
00089CF6 01                         	dc.b	$01
00089CF7 E1FD                       	smpsAlterNote       $FD
00089CF9 ECF5                       	smpsPSGAlterVol     $F5
00089CFB 9206                       	dc.b	nF1, $06
00089CFD EC04                       	smpsPSGAlterVol     $04
00089CFF E701                       	dc.b	smpsNoAttack, $01
00089D01 EC07                       	smpsPSGAlterVol     $07
00089D03 8003                       	dc.b	nRst, $03
00089D05 ECF5                       	smpsPSGAlterVol     $F5
00089D07 9206                       	dc.b	nF1, $06
00089D09 EC04                       	smpsPSGAlterVol     $04
00089D0B E701                       	dc.b	smpsNoAttack, $01
00089D0D EC07                       	smpsPSGAlterVol     $07
00089D0F 8006                       	dc.b	nRst, $06
00089D11 E100                       	smpsAlterNote       $00
00089D13 01                         	dc.b	$01
00089D14 E104                       	smpsAlterNote       $04
00089D16 01                         	dc.b	$01
00089D17 E103                       	smpsAlterNote       $03
00089D19 01                         	dc.b	$01
00089D1A E1FD                       	smpsAlterNote       $FD
00089D1C 01                         	dc.b	$01
00089D1D ECF5                       	smpsPSGAlterVol     $F5
00089D1F 9107                       	dc.b	nE1, $07
00089D21 EC0B                       	smpsPSGAlterVol     $0B
00089D23 8004                       	dc.b	nRst, $04
00089D25 ECF5                       	smpsPSGAlterVol     $F5
00089D27 9106                       	dc.b	nE1, $06
00089D29 EC0B                       	smpsPSGAlterVol     $0B
00089D2B 8007                       	dc.b	nRst, $07
00089D2D E103                       	smpsAlterNote       $03
00089D2F 0101                       	dc.b	$01, $01
00089D31 E100                       	smpsAlterNote       $00
00089D33 01                         	dc.b	$01
00089D34 E1FA                       	smpsAlterNote       $FA
00089D36 01                         	dc.b	$01
00089D37 E1FD                       	smpsAlterNote       $FD
00089D39 ECF5                       	smpsPSGAlterVol     $F5
00089D3B 9106                       	dc.b	nE1, $06
00089D3D EC04                       	smpsPSGAlterVol     $04
00089D3F E701                       	dc.b	smpsNoAttack, $01
00089D41 EC07                       	smpsPSGAlterVol     $07
00089D43 8003                       	dc.b	nRst, $03
00089D45 ECF5                       	smpsPSGAlterVol     $F5
00089D47 9106                       	dc.b	nE1, $06
00089D49 EC04                       	smpsPSGAlterVol     $04
00089D4B E701                       	dc.b	smpsNoAttack, $01
00089D4D EC07                       	smpsPSGAlterVol     $07
00089D4F 8006                       	dc.b	nRst, $06
00089D51 E100                       	smpsAlterNote       $00
00089D53 01                         	dc.b	$01
00089D54 E104                       	smpsAlterNote       $04
00089D56 01                         	dc.b	$01
00089D57 E100                       	smpsAlterNote       $00
00089D59 01                         	dc.b	$01
00089D5A E1FA                       	smpsAlterNote       $FA
00089D5C 01                         	dc.b	$01
00089D5D E1FD                       	smpsAlterNote       $FD
00089D5F ECF5                       	smpsPSGAlterVol     $F5
00089D61 9106                       	dc.b	nE1, $06
00089D63 EC04                       	smpsPSGAlterVol     $04
00089D65 E701                       	dc.b	smpsNoAttack, $01
00089D67 EC07                       	smpsPSGAlterVol     $07
00089D69 8003                       	dc.b	nRst, $03
00089D6B ECF5                       	smpsPSGAlterVol     $F5
00089D6D 9107 9106                  	dc.b	nE1, $07, nE1, $06
00089D71 EC04                       	smpsPSGAlterVol     $04
00089D73 E701                       	dc.b	smpsNoAttack, $01
00089D75 ECFC                       	smpsPSGAlterVol     $FC
00089D77 9103 9103                  	dc.b	nE1, $03, nE1, $03
00089D7B EC04                       	smpsPSGAlterVol     $04
00089D7D E701                       	dc.b	smpsNoAttack, $01
00089D7F ECFC                       	smpsPSGAlterVol     $FC
00089D81 9106                       	dc.b	nE1, $06
00089D83 EC04                       	smpsPSGAlterVol     $04
00089D85 E701                       	dc.b	smpsNoAttack, $01
00089D87 EC07                       	smpsPSGAlterVol     $07
00089D89 8006                       	dc.b	nRst, $06
00089D8B E100                       	smpsAlterNote       $00
00089D8D 01                         	dc.b	$01
00089D8E E104                       	smpsAlterNote       $04
00089D90 01                         	dc.b	$01
00089D91 E100                       	smpsAlterNote       $00
00089D93 01                         	dc.b	$01
00089D94 E1FA                       	smpsAlterNote       $FA
00089D96 01                         	dc.b	$01
00089D97 E1F9                       	smpsAlterNote       $F9
00089D99 01                         	dc.b	$01
00089D9A E1FD                       	smpsAlterNote       $FD
00089D9C 01                         	dc.b	$01
00089D9D E103                       	smpsAlterNote       $03
00089D9F 01                         	dc.b	$01
00089DA0 E104                       	smpsAlterNote       $04
00089DA2 01                         	dc.b	$01
00089DA3 E100                       	smpsAlterNote       $00
00089DA5 01                         	dc.b	$01
00089DA6 E1FA                       	smpsAlterNote       $FA
00089DA8 0101                       	dc.b	$01, $01
00089DAA E1FD                       	smpsAlterNote       $FD
00089DAC ECF5                       	smpsPSGAlterVol     $F5
00089DAE 9206                       	dc.b	nF1, $06
00089DB0 EC04                       	smpsPSGAlterVol     $04
00089DB2 E701                       	dc.b	smpsNoAttack, $01
00089DB4 EC07                       	smpsPSGAlterVol     $07
00089DB6 8003                       	dc.b	nRst, $03
00089DB8 ECF5                       	smpsPSGAlterVol     $F5
00089DBA 9206                       	dc.b	nF1, $06
00089DBC EC04                       	smpsPSGAlterVol     $04
00089DBE E701                       	dc.b	smpsNoAttack, $01
00089DC0 EC07                       	smpsPSGAlterVol     $07
00089DC2 8006                       	dc.b	nRst, $06
00089DC4 E100                       	smpsAlterNote       $00
00089DC6 01                         	dc.b	$01
00089DC7 E104                       	smpsAlterNote       $04
00089DC9 01                         	dc.b	$01
00089DCA E103                       	smpsAlterNote       $03
00089DCC 01                         	dc.b	$01
00089DCD E1FD                       	smpsAlterNote       $FD
00089DCF 01                         	dc.b	$01
00089DD0 ECF5                       	smpsPSGAlterVol     $F5
00089DD2 9407                       	dc.b	nG1, $07
00089DD4 EC0B                       	smpsPSGAlterVol     $0B
00089DD6 8004                       	dc.b	nRst, $04
00089DD8 ECF5                       	smpsPSGAlterVol     $F5
00089DDA 9406                       	dc.b	nG1, $06
00089DDC EC0B                       	smpsPSGAlterVol     $0B
00089DDE 8007                       	dc.b	nRst, $07
00089DE0 E103                       	smpsAlterNote       $03
00089DE2 0101                       	dc.b	$01, $01
00089DE4 E1FD                       	smpsAlterNote       $FD
00089DE6 01                         	dc.b	$01
00089DE7 E1F9                       	smpsAlterNote       $F9
00089DE9 01                         	dc.b	$01
00089DEA E1FD                       	smpsAlterNote       $FD
00089DEC ECF5                       	smpsPSGAlterVol     $F5
00089DEE 9206                       	dc.b	nF1, $06
00089DF0 EC04                       	smpsPSGAlterVol     $04
00089DF2 E701                       	dc.b	smpsNoAttack, $01
00089DF4 EC07                       	smpsPSGAlterVol     $07
00089DF6 8003                       	dc.b	nRst, $03
00089DF8 ECF5                       	smpsPSGAlterVol     $F5
00089DFA 9206                       	dc.b	nF1, $06
00089DFC EC04                       	smpsPSGAlterVol     $04
00089DFE E701                       	dc.b	smpsNoAttack, $01
00089E00 EC07                       	smpsPSGAlterVol     $07
00089E02 8006                       	dc.b	nRst, $06
00089E04 E100                       	smpsAlterNote       $00
00089E06 01                         	dc.b	$01
00089E07 E104                       	smpsAlterNote       $04
00089E09 01                         	dc.b	$01
00089E0A E100                       	smpsAlterNote       $00
00089E0C 01                         	dc.b	$01
00089E0D E1FA                       	smpsAlterNote       $FA
00089E0F 01                         	dc.b	$01
00089E10 E1FD                       	smpsAlterNote       $FD
00089E12 ECF5                       	smpsPSGAlterVol     $F5
00089E14 9206                       	dc.b	nF1, $06
00089E16 EC04                       	smpsPSGAlterVol     $04
00089E18 E701                       	dc.b	smpsNoAttack, $01
00089E1A EC07                       	smpsPSGAlterVol     $07
00089E1C 8003                       	dc.b	nRst, $03
00089E1E ECF5                       	smpsPSGAlterVol     $F5
00089E20 9107                       	dc.b	nE1, $07
00089E22 EC0B                       	smpsPSGAlterVol     $0B
00089E24 8006                       	dc.b	nRst, $06
00089E26 E100                       	smpsAlterNote       $00
00089E28 01                         	dc.b	$01
00089E29 E103                       	smpsAlterNote       $03
00089E2B 0101                       	dc.b	$01, $01
00089E2D E1FD                       	smpsAlterNote       $FD
00089E2F 01                         	dc.b	$01
00089E30 ECF5                       	smpsPSGAlterVol     $F5
00089E32 9207                       	dc.b	nF1, $07
00089E34 EC0B                       	smpsPSGAlterVol     $0B
00089E36 8004                       	dc.b	nRst, $04
00089E38 ECF5                       	smpsPSGAlterVol     $F5
00089E3A 9206                       	dc.b	nF1, $06
00089E3C EC04                       	smpsPSGAlterVol     $04
00089E3E E701                       	dc.b	smpsNoAttack, $01
00089E40 EC07                       	smpsPSGAlterVol     $07
00089E42 8006                       	dc.b	nRst, $06
00089E44 E103                       	smpsAlterNote       $03
00089E46 01                         	dc.b	$01
00089E47 E104                       	smpsAlterNote       $04
00089E49 01                         	dc.b	$01
00089E4A E100                       	smpsAlterNote       $00
00089E4C 01                         	dc.b	$01
00089E4D E1FB                       	smpsAlterNote       $FB
00089E4F 01                         	dc.b	$01
00089E50 E1FD                       	smpsAlterNote       $FD
00089E52 ECF5                       	smpsPSGAlterVol     $F5
00089E54 9406                       	dc.b	nG1, $06
00089E56 EC04                       	smpsPSGAlterVol     $04
00089E58 E701                       	dc.b	smpsNoAttack, $01
00089E5A EC07                       	smpsPSGAlterVol     $07
00089E5C 8003                       	dc.b	nRst, $03
00089E5E ECF5                       	smpsPSGAlterVol     $F5
00089E60 9406                       	dc.b	nG1, $06
00089E62 EC04                       	smpsPSGAlterVol     $04
00089E64 E701                       	dc.b	smpsNoAttack, $01
00089E66 EC07                       	smpsPSGAlterVol     $07
00089E68 8006                       	dc.b	nRst, $06
00089E6A E100                       	smpsAlterNote       $00
00089E6C 01                         	dc.b	$01
00089E6D E104                       	smpsAlterNote       $04
00089E6F 01                         	dc.b	$01
00089E70 E100                       	smpsAlterNote       $00
00089E72 01                         	dc.b	$01
00089E73 E1FD                       	smpsAlterNote       $FD
00089E75 01                         	dc.b	$01
00089E76 ECF5                       	smpsPSGAlterVol     $F5
00089E78 9206                       	dc.b	nF1, $06
00089E7A EC04                       	smpsPSGAlterVol     $04
00089E7C E701                       	dc.b	smpsNoAttack, $01
00089E7E EC07                       	smpsPSGAlterVol     $07
00089E80 8003                       	dc.b	nRst, $03
00089E82 ECF5                       	smpsPSGAlterVol     $F5
00089E84 9207                       	dc.b	nF1, $07
00089E86 EC0B                       	smpsPSGAlterVol     $0B
00089E88 8007                       	dc.b	nRst, $07
00089E8A E103                       	smpsAlterNote       $03
00089E8C 0101                       	dc.b	$01, $01
00089E8E E1FD                       	smpsAlterNote       $FD
00089E90 01                         	dc.b	$01
00089E91 E1FA                       	smpsAlterNote       $FA
00089E93 01                         	dc.b	$01
00089E94 E1FD                       	smpsAlterNote       $FD
00089E96 ECF5                       	smpsPSGAlterVol     $F5
00089E98 9206                       	dc.b	nF1, $06
00089E9A EC0B                       	smpsPSGAlterVol     $0B
00089E9C 8004                       	dc.b	nRst, $04
00089E9E ECF5                       	smpsPSGAlterVol     $F5
00089EA0 9206                       	dc.b	nF1, $06
00089EA2 EC04                       	smpsPSGAlterVol     $04
00089EA4 E701                       	dc.b	smpsNoAttack, $01
00089EA6 EC07                       	smpsPSGAlterVol     $07
00089EA8 8006                       	dc.b	nRst, $06
00089EAA E100                       	smpsAlterNote       $00
00089EAC 01                         	dc.b	$01
00089EAD E104                       	smpsAlterNote       $04
00089EAF 01                         	dc.b	$01
00089EB0 E100                       	smpsAlterNote       $00
00089EB2 01                         	dc.b	$01
00089EB3 E1FA                       	smpsAlterNote       $FA
00089EB5 01                         	dc.b	$01
00089EB6 E1FD                       	smpsAlterNote       $FD
00089EB8 ECF5                       	smpsPSGAlterVol     $F5
00089EBA 9206                       	dc.b	nF1, $06
00089EBC EC04                       	smpsPSGAlterVol     $04
00089EBE E704                       	dc.b	smpsNoAttack, $04
00089EC0 ECFC                       	smpsPSGAlterVol     $FC
00089EC2 9207                       	dc.b	nF1, $07
00089EC4 EC0B                       	smpsPSGAlterVol     $0B
00089EC6 8006                       	dc.b	nRst, $06
00089EC8 E100                       	smpsAlterNote       $00
00089ECA 01                         	dc.b	$01
00089ECB E104                       	smpsAlterNote       $04
00089ECD 01                         	dc.b	$01
00089ECE E103                       	smpsAlterNote       $03
00089ED0 01                         	dc.b	$01
00089ED1 E1FD                       	smpsAlterNote       $FD
00089ED3 01                         	dc.b	$01
00089ED4 ECF5                       	smpsPSGAlterVol     $F5
00089ED6 9207                       	dc.b	nF1, $07
00089ED8 EC0B                       	smpsPSGAlterVol     $0B
00089EDA 8004                       	dc.b	nRst, $04
00089EDC ECF5                       	smpsPSGAlterVol     $F5
00089EDE 9206                       	dc.b	nF1, $06
00089EE0 EC0B                       	smpsPSGAlterVol     $0B
00089EE2 8007                       	dc.b	nRst, $07
00089EE4 E103                       	smpsAlterNote       $03
00089EE6 0101                       	dc.b	$01, $01
00089EE8 E100                       	smpsAlterNote       $00
00089EEA 01                         	dc.b	$01
00089EEB E1FA                       	smpsAlterNote       $FA
00089EED 01                         	dc.b	$01
00089EEE E1FD                       	smpsAlterNote       $FD
00089EF0 ECF5                       	smpsPSGAlterVol     $F5
00089EF2 9206                       	dc.b	nF1, $06
00089EF4 EC04                       	smpsPSGAlterVol     $04
00089EF6 E704                       	dc.b	smpsNoAttack, $04
00089EF8 ECFC                       	smpsPSGAlterVol     $FC
00089EFA 9206                       	dc.b	nF1, $06
00089EFC EC04                       	smpsPSGAlterVol     $04
00089EFE E701                       	dc.b	smpsNoAttack, $01
00089F00 EC07                       	smpsPSGAlterVol     $07
00089F02 8006                       	dc.b	nRst, $06
00089F04 E100                       	smpsAlterNote       $00
00089F06 01                         	dc.b	$01
00089F07 E104                       	smpsAlterNote       $04
00089F09 01                         	dc.b	$01
00089F0A E100                       	smpsAlterNote       $00
00089F0C 01                         	dc.b	$01
00089F0D E1FD                       	smpsAlterNote       $FD
00089F0F 01                         	dc.b	$01
00089F10 ECF5                       	smpsPSGAlterVol     $F5
00089F12 9206                       	dc.b	nF1, $06
00089F14 EC04                       	smpsPSGAlterVol     $04
00089F16 E701                       	dc.b	smpsNoAttack, $01
00089F18 EC07                       	smpsPSGAlterVol     $07
00089F1A 8003                       	dc.b	nRst, $03
00089F1C ECF5                       	smpsPSGAlterVol     $F5
00089F1E 9207                       	dc.b	nF1, $07
00089F20 EC0B                       	smpsPSGAlterVol     $0B
00089F22 8007                       	dc.b	nRst, $07
00089F24 E103                       	smpsAlterNote       $03
00089F26 0101                       	dc.b	$01, $01
00089F28 E1FD                       	smpsAlterNote       $FD
00089F2A 01                         	dc.b	$01
00089F2B E1FA                       	smpsAlterNote       $FA
00089F2D 01                         	dc.b	$01
00089F2E E1FD                       	smpsAlterNote       $FD
00089F30 ECF5                       	smpsPSGAlterVol     $F5
00089F32 9106                       	dc.b	nE1, $06
00089F34 EC0B                       	smpsPSGAlterVol     $0B
00089F36 8004                       	dc.b	nRst, $04
00089F38 ECF5                       	smpsPSGAlterVol     $F5
00089F3A 9106                       	dc.b	nE1, $06
00089F3C EC04                       	smpsPSGAlterVol     $04
00089F3E E701                       	dc.b	smpsNoAttack, $01
00089F40 EC07                       	smpsPSGAlterVol     $07
00089F42 8006                       	dc.b	nRst, $06
00089F44 E100                       	smpsAlterNote       $00
00089F46 01                         	dc.b	$01
00089F47 E104                       	smpsAlterNote       $04
00089F49 01                         	dc.b	$01
00089F4A E100                       	smpsAlterNote       $00
00089F4C 01                         	dc.b	$01
00089F4D E1FA                       	smpsAlterNote       $FA
00089F4F 01                         	dc.b	$01
00089F50 E1FD                       	smpsAlterNote       $FD
00089F52 ECF5                       	smpsPSGAlterVol     $F5
00089F54 9106                       	dc.b	nE1, $06
00089F56 EC04                       	smpsPSGAlterVol     $04
00089F58 E701                       	dc.b	smpsNoAttack, $01
00089F5A EC07                       	smpsPSGAlterVol     $07
00089F5C 8003                       	dc.b	nRst, $03
00089F5E ECF5                       	smpsPSGAlterVol     $F5
00089F60 9106                       	dc.b	nE1, $06
00089F62 EC04                       	smpsPSGAlterVol     $04
00089F64 E701                       	dc.b	smpsNoAttack, $01
00089F66 EC07                       	smpsPSGAlterVol     $07
00089F68 8006                       	dc.b	nRst, $06
00089F6A E100                       	smpsAlterNote       $00
00089F6C 01                         	dc.b	$01
00089F6D E104                       	smpsAlterNote       $04
00089F6F 01                         	dc.b	$01
00089F70 E103                       	smpsAlterNote       $03
00089F72 01                         	dc.b	$01
00089F73 E1FD                       	smpsAlterNote       $FD
00089F75 01                         	dc.b	$01
00089F76 ECF5                       	smpsPSGAlterVol     $F5
00089F78 9107                       	dc.b	nE1, $07
00089F7A EC0B                       	smpsPSGAlterVol     $0B
00089F7C 8004                       	dc.b	nRst, $04
00089F7E ECF5                       	smpsPSGAlterVol     $F5
00089F80 9106                       	dc.b	nE1, $06
00089F82 EC0B                       	smpsPSGAlterVol     $0B
00089F84 8007                       	dc.b	nRst, $07
00089F86 E103                       	smpsAlterNote       $03
00089F88 0101                       	dc.b	$01, $01
00089F8A E100                       	smpsAlterNote       $00
00089F8C 01                         	dc.b	$01
00089F8D E1FA                       	smpsAlterNote       $FA
00089F8F 01                         	dc.b	$01
00089F90 E1FD                       	smpsAlterNote       $FD
00089F92 ECF5                       	smpsPSGAlterVol     $F5
00089F94 9106                       	dc.b	nE1, $06
00089F96 EC04                       	smpsPSGAlterVol     $04
00089F98 E701                       	dc.b	smpsNoAttack, $01
00089F9A EC07                       	smpsPSGAlterVol     $07
00089F9C 8003                       	dc.b	nRst, $03
00089F9E ECF5                       	smpsPSGAlterVol     $F5
00089FA0 9106                       	dc.b	nE1, $06
00089FA2 EC04                       	smpsPSGAlterVol     $04
00089FA4 E701                       	dc.b	smpsNoAttack, $01
00089FA6 EC07                       	smpsPSGAlterVol     $07
00089FA8 8003                       	dc.b	nRst, $03
00089FAA ECF5                       	smpsPSGAlterVol     $F5
00089FAC 9207                       	dc.b	nF1, $07
00089FAE EC0B                       	smpsPSGAlterVol     $0B
00089FB0 8006                       	dc.b	nRst, $06
00089FB2 E100                       	smpsAlterNote       $00
00089FB4 01                         	dc.b	$01
00089FB5 E104                       	smpsAlterNote       $04
00089FB7 01                         	dc.b	$01
00089FB8 E103                       	smpsAlterNote       $03
00089FBA 01                         	dc.b	$01
00089FBB E1FD                       	smpsAlterNote       $FD
00089FBD 01                         	dc.b	$01
00089FBE E1F9                       	smpsAlterNote       $F9
00089FC0 01                         	dc.b	$01
00089FC1 E1FD                       	smpsAlterNote       $FD
00089FC3 01                         	dc.b	$01
00089FC4 E100                       	smpsAlterNote       $00
00089FC6 01                         	dc.b	$01
00089FC7 E104                       	smpsAlterNote       $04
00089FC9 01                         	dc.b	$01
00089FCA E1FD                       	smpsAlterNote       $FD
00089FCC ECF5                       	smpsPSGAlterVol     $F5
00089FCE 9203 9203                  	dc.b	nF1, $03, nF1, $03
00089FD2 EC04                       	smpsPSGAlterVol     $04
00089FD4 E701                       	dc.b	smpsNoAttack, $01
00089FD6 EC07                       	smpsPSGAlterVol     $07
00089FD8 8009                       	dc.b	nRst, $09
00089FDA E100                       	smpsAlterNote       $00
00089FDC 01                         	dc.b	$01
00089FDD E104                       	smpsAlterNote       $04
00089FDF 01                         	dc.b	$01
00089FE0 E103                       	smpsAlterNote       $03
00089FE2 01                         	dc.b	$01
00089FE3 E1FD                       	smpsAlterNote       $FD
00089FE5 01                         	dc.b	$01
00089FE6 E1F9                       	smpsAlterNote       $F9
00089FE8 01                         	dc.b	$01
00089FE9 E1FD                       	smpsAlterNote       $FD
00089FEB 01                         	dc.b	$01
00089FEC E100                       	smpsAlterNote       $00
00089FEE 01                         	dc.b	$01
00089FEF E104                       	smpsAlterNote       $04
00089FF1 01                         	dc.b	$01
00089FF2 E100                       	smpsAlterNote       $00
00089FF4 01                         	dc.b	$01
00089FF5 E1FA                       	smpsAlterNote       $FA
00089FF7 01                         	dc.b	$01
00089FF8 E1F9                       	smpsAlterNote       $F9
00089FFA 01                         	dc.b	$01
00089FFB E1FD                       	smpsAlterNote       $FD
00089FFD 01                         	dc.b	$01
00089FFE E103                       	smpsAlterNote       $03
0008A000 0101                       	dc.b	$01, $01
0008A002 E100                       	smpsAlterNote       $00
0008A004 01                         	dc.b	$01
0008A005 E1FD                       	smpsAlterNote       $FD
0008A007 ECF5                       	smpsPSGAlterVol     $F5
0008A009 9202                       	dc.b	nF1, $02
0008A00B EC04                       	smpsPSGAlterVol     $04
0008A00D E701                       	dc.b	smpsNoAttack, $01
0008A00F ECFC                       	smpsPSGAlterVol     $FC
0008A011 9106                       	dc.b	nE1, $06
0008A013 EC04                       	smpsPSGAlterVol     $04
0008A015 E701                       	dc.b	smpsNoAttack, $01
0008A017 EC07                       	smpsPSGAlterVol     $07
0008A019 8006                       	dc.b	nRst, $06
0008A01B E100                       	smpsAlterNote       $00
0008A01D 01                         	dc.b	$01
0008A01E E104                       	smpsAlterNote       $04
0008A020 01                         	dc.b	$01
0008A021 E100                       	smpsAlterNote       $00
0008A023 01                         	dc.b	$01
0008A024 E1FD                       	smpsAlterNote       $FD
0008A026 01                         	dc.b	$01
0008A027 E1F9                       	smpsAlterNote       $F9
0008A029 01                         	dc.b	$01
0008A02A E1FD                       	smpsAlterNote       $FD
0008A02C 01                         	dc.b	$01
0008A02D E103                       	smpsAlterNote       $03
0008A02F 01                         	dc.b	$01
0008A030 E104                       	smpsAlterNote       $04
0008A032 01                         	dc.b	$01
0008A033 E1FD                       	smpsAlterNote       $FD
0008A035 ECF5                       	smpsPSGAlterVol     $F5
0008A037 9102                       	dc.b	nE1, $02
0008A039 EC04                       	smpsPSGAlterVol     $04
0008A03B E701                       	dc.b	smpsNoAttack, $01
0008A03D ECFC                       	smpsPSGAlterVol     $FC
0008A03F 920D                       	dc.b	nF1, $0D
0008A041 E100                       	smpsAlterNote       $00
0008A043 E701                       	dc.b	smpsNoAttack, $01
0008A045 E104                       	smpsAlterNote       $04
0008A047 E701                       	dc.b	smpsNoAttack, $01
0008A049 E100                       	smpsAlterNote       $00
0008A04B E701                       	dc.b	smpsNoAttack, $01
0008A04D E1FD                       	smpsAlterNote       $FD
0008A04F E701                       	dc.b	smpsNoAttack, $01
0008A051 E1F9                       	smpsAlterNote       $F9
0008A053 E701                       	dc.b	smpsNoAttack, $01
0008A055 E1FD                       	smpsAlterNote       $FD
0008A057 E701                       	dc.b	smpsNoAttack, $01
0008A059 E103                       	smpsAlterNote       $03
0008A05B E701                       	dc.b	smpsNoAttack, $01
0008A05D E104                       	smpsAlterNote       $04
0008A05F E701                       	dc.b	smpsNoAttack, $01
0008A061 E100                       	smpsAlterNote       $00
0008A063 E701                       	dc.b	smpsNoAttack, $01
0008A065 E1FA                       	smpsAlterNote       $FA
0008A067 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A06B E1FD                       	smpsAlterNote       $FD
0008A06D E701                       	dc.b	smpsNoAttack, $01
0008A06F E103                       	smpsAlterNote       $03
0008A071 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A075 E1FD                       	smpsAlterNote       $FD
0008A077 E701                       	dc.b	smpsNoAttack, $01
0008A079 E1F9                       	smpsAlterNote       $F9
0008A07B E701                       	dc.b	smpsNoAttack, $01
0008A07D E1FA                       	smpsAlterNote       $FA
0008A07F E701                       	dc.b	smpsNoAttack, $01
0008A081 E100                       	smpsAlterNote       $00
0008A083 EC04                       	smpsPSGAlterVol     $04
0008A085 E701                       	dc.b	smpsNoAttack, $01
0008A087 EC07                       	smpsPSGAlterVol     $07
0008A089 E104                       	smpsAlterNote       $04
0008A08B 8001                       	dc.b	nRst, $01
0008A08D E100                       	smpsAlterNote       $00
0008A08F 01                         	dc.b	$01
0008A090 E1FD                       	smpsAlterNote       $FD
0008A092 01                         	dc.b	$01
0008A093 E1F9                       	smpsAlterNote       $F9
0008A095 01                         	dc.b	$01
0008A096 E1FD                       	smpsAlterNote       $FD
0008A098 01                         	dc.b	$01
0008A099 E103                       	smpsAlterNote       $03
0008A09B 01                         	dc.b	$01
0008A09C E104                       	smpsAlterNote       $04
0008A09E 01                         	dc.b	$01
0008A09F E1FD                       	smpsAlterNote       $FD
0008A0A1 ECF5                       	smpsPSGAlterVol     $F5
0008A0A3 9106                       	dc.b	nE1, $06
0008A0A5 EC04                       	smpsPSGAlterVol     $04
0008A0A7 E701                       	dc.b	smpsNoAttack, $01
0008A0A9 EC07                       	smpsPSGAlterVol     $07
0008A0AB 8003                       	dc.b	nRst, $03
0008A0AD ECF5                       	smpsPSGAlterVol     $F5
0008A0AF 9106                       	dc.b	nE1, $06
0008A0B1 EC04                       	smpsPSGAlterVol     $04
0008A0B3 E701                       	dc.b	smpsNoAttack, $01
0008A0B5 EC07                       	smpsPSGAlterVol     $07
0008A0B7 8006                       	dc.b	nRst, $06
0008A0B9 E100                       	smpsAlterNote       $00
0008A0BB 01                         	dc.b	$01
0008A0BC E104                       	smpsAlterNote       $04
0008A0BE 01                         	dc.b	$01
0008A0BF E100                       	smpsAlterNote       $00
0008A0C1 01                         	dc.b	$01
0008A0C2 E1FA                       	smpsAlterNote       $FA
0008A0C4 01                         	dc.b	$01
0008A0C5 E1FD                       	smpsAlterNote       $FD
0008A0C7 ECF5                       	smpsPSGAlterVol     $F5
0008A0C9 9206                       	dc.b	nF1, $06
0008A0CB EC04                       	smpsPSGAlterVol     $04
0008A0CD E701                       	dc.b	smpsNoAttack, $01
0008A0CF EC07                       	smpsPSGAlterVol     $07
0008A0D1 8003                       	dc.b	nRst, $03
0008A0D3 ECF5                       	smpsPSGAlterVol     $F5
0008A0D5 9207                       	dc.b	nF1, $07
0008A0D7 EC0B                       	smpsPSGAlterVol     $0B
0008A0D9 8006                       	dc.b	nRst, $06
0008A0DB E100                       	smpsAlterNote       $00
0008A0DD 01                         	dc.b	$01
0008A0DE E103                       	smpsAlterNote       $03
0008A0E0 0101                       	dc.b	$01, $01
0008A0E2 E1FD                       	smpsAlterNote       $FD
0008A0E4 01                         	dc.b	$01
0008A0E5 ECF5                       	smpsPSGAlterVol     $F5
0008A0E7 9107                       	dc.b	nE1, $07
0008A0E9 EC0B                       	smpsPSGAlterVol     $0B
0008A0EB 8004                       	dc.b	nRst, $04
0008A0ED ECF5                       	smpsPSGAlterVol     $F5
0008A0EF 9106                       	dc.b	nE1, $06
0008A0F1 EC04                       	smpsPSGAlterVol     $04
0008A0F3 E701                       	dc.b	smpsNoAttack, $01
0008A0F5 EC07                       	smpsPSGAlterVol     $07
0008A0F7 8006                       	dc.b	nRst, $06
0008A0F9 E103                       	smpsAlterNote       $03
0008A0FB 01                         	dc.b	$01
0008A0FC E104                       	smpsAlterNote       $04
0008A0FE 01                         	dc.b	$01
0008A0FF E100                       	smpsAlterNote       $00
0008A101 01                         	dc.b	$01
0008A102 E1FA                       	smpsAlterNote       $FA
0008A104 01                         	dc.b	$01
0008A105 E1FD                       	smpsAlterNote       $FD
0008A107 ECF5                       	smpsPSGAlterVol     $F5
0008A109 9106                       	dc.b	nE1, $06
0008A10B EC04                       	smpsPSGAlterVol     $04
0008A10D E701                       	dc.b	smpsNoAttack, $01
0008A10F EC07                       	smpsPSGAlterVol     $07
0008A111 8003                       	dc.b	nRst, $03
0008A113 ECF5                       	smpsPSGAlterVol     $F5
0008A115 9106                       	dc.b	nE1, $06
0008A117 EC04                       	smpsPSGAlterVol     $04
0008A119 E701                       	dc.b	smpsNoAttack, $01
0008A11B EC07                       	smpsPSGAlterVol     $07
0008A11D 8003                       	dc.b	nRst, $03
0008A11F ECF5                       	smpsPSGAlterVol     $F5
0008A121 9207                       	dc.b	nF1, $07
0008A123 EC0B                       	smpsPSGAlterVol     $0B
0008A125 8006                       	dc.b	nRst, $06
0008A127 E100                       	smpsAlterNote       $00
0008A129 01                         	dc.b	$01
0008A12A E103                       	smpsAlterNote       $03
0008A12C 0101                       	dc.b	$01, $01
0008A12E E1FD                       	smpsAlterNote       $FD
0008A130 01                         	dc.b	$01
0008A131 E1F9                       	smpsAlterNote       $F9
0008A133 01                         	dc.b	$01
0008A134 E1FA                       	smpsAlterNote       $FA
0008A136 01                         	dc.b	$01
0008A137 E100                       	smpsAlterNote       $00
0008A139 01                         	dc.b	$01
0008A13A E104                       	smpsAlterNote       $04
0008A13C 01                         	dc.b	$01
0008A13D E1FD                       	smpsAlterNote       $FD
0008A13F ECF5                       	smpsPSGAlterVol     $F5
0008A141 9203 9203                  	dc.b	nF1, $03, nF1, $03
0008A145 EC04                       	smpsPSGAlterVol     $04
0008A147 E701                       	dc.b	smpsNoAttack, $01
0008A149 EC07                       	smpsPSGAlterVol     $07
0008A14B 8009                       	dc.b	nRst, $09
0008A14D E100                       	smpsAlterNote       $00
0008A14F 01                         	dc.b	$01
0008A150 E103                       	smpsAlterNote       $03
0008A152 0101                       	dc.b	$01, $01
0008A154 E1FD                       	smpsAlterNote       $FD
0008A156 01                         	dc.b	$01
0008A157 E1F9                       	smpsAlterNote       $F9
0008A159 01                         	dc.b	$01
0008A15A E1FA                       	smpsAlterNote       $FA
0008A15C 01                         	dc.b	$01
0008A15D E100                       	smpsAlterNote       $00
0008A15F 01                         	dc.b	$01
0008A160 E104                       	smpsAlterNote       $04
0008A162 01                         	dc.b	$01
0008A163 E100                       	smpsAlterNote       $00
0008A165 01                         	dc.b	$01
0008A166 E1FD                       	smpsAlterNote       $FD
0008A168 01                         	dc.b	$01
0008A169 E1F9                       	smpsAlterNote       $F9
0008A16B 01                         	dc.b	$01
0008A16C E1FD                       	smpsAlterNote       $FD
0008A16E 01                         	dc.b	$01
0008A16F E103                       	smpsAlterNote       $03
0008A171 01                         	dc.b	$01
0008A172 E104                       	smpsAlterNote       $04
0008A174 01                         	dc.b	$01
0008A175 E100                       	smpsAlterNote       $00
0008A177 01                         	dc.b	$01
0008A178 E1FD                       	smpsAlterNote       $FD
0008A17A ECF5                       	smpsPSGAlterVol     $F5
0008A17C 9203 9106                  	dc.b	nF1, $03, nE1, $06
0008A180 EC04                       	smpsPSGAlterVol     $04
0008A182 E701                       	dc.b	smpsNoAttack, $01
0008A184 EC07                       	smpsPSGAlterVol     $07
0008A186 8006                       	dc.b	nRst, $06
0008A188 E100                       	smpsAlterNote       $00
0008A18A 01                         	dc.b	$01
0008A18B E104                       	smpsAlterNote       $04
0008A18D 01                         	dc.b	$01
0008A18E E103                       	smpsAlterNote       $03
0008A190 01                         	dc.b	$01
0008A191 E1FD                       	smpsAlterNote       $FD
0008A193 01                         	dc.b	$01
0008A194 E1F9                       	smpsAlterNote       $F9
0008A196 01                         	dc.b	$01
0008A197 E1FD                       	smpsAlterNote       $FD
0008A199 01                         	dc.b	$01
0008A19A E100                       	smpsAlterNote       $00
0008A19C 01                         	dc.b	$01
0008A19D E104                       	smpsAlterNote       $04
0008A19F 01                         	dc.b	$01
0008A1A0 E1FD                       	smpsAlterNote       $FD
0008A1A2 ECF5                       	smpsPSGAlterVol     $F5
0008A1A4 9103 920D                  	dc.b	nE1, $03, nF1, $0D
0008A1A8 E100                       	smpsAlterNote       $00
0008A1AA E701                       	dc.b	smpsNoAttack, $01
0008A1AC E104                       	smpsAlterNote       $04
0008A1AE E701                       	dc.b	smpsNoAttack, $01
0008A1B0 E100                       	smpsAlterNote       $00
0008A1B2 E701                       	dc.b	smpsNoAttack, $01
0008A1B4 E1FD                       	smpsAlterNote       $FD
0008A1B6 E701                       	dc.b	smpsNoAttack, $01
0008A1B8 E1F9                       	smpsAlterNote       $F9
0008A1BA E701                       	dc.b	smpsNoAttack, $01
0008A1BC E1FD                       	smpsAlterNote       $FD
0008A1BE E701                       	dc.b	smpsNoAttack, $01
0008A1C0 E103                       	smpsAlterNote       $03
0008A1C2 E701                       	dc.b	smpsNoAttack, $01
0008A1C4 E104                       	smpsAlterNote       $04
0008A1C6 E701                       	dc.b	smpsNoAttack, $01
0008A1C8 E100                       	smpsAlterNote       $00
0008A1CA E701                       	dc.b	smpsNoAttack, $01
0008A1CC E1FA                       	smpsAlterNote       $FA
0008A1CE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A1D2 E1FD                       	smpsAlterNote       $FD
0008A1D4 E701                       	dc.b	smpsNoAttack, $01
0008A1D6 E103                       	smpsAlterNote       $03
0008A1D8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A1DC E100                       	smpsAlterNote       $00
0008A1DE E701                       	dc.b	smpsNoAttack, $01
0008A1E0 E1FA                       	smpsAlterNote       $FA
0008A1E2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008A1E6 E100                       	smpsAlterNote       $00
0008A1E8 EC04                       	smpsPSGAlterVol     $04
0008A1EA E701                       	dc.b	smpsNoAttack, $01
0008A1EC EC07                       	smpsPSGAlterVol     $07
0008A1EE E104                       	smpsAlterNote       $04
0008A1F0 8001                       	dc.b	nRst, $01
0008A1F2 E103                       	smpsAlterNote       $03
0008A1F4 01                         	dc.b	$01
0008A1F5 E1FD                       	smpsAlterNote       $FD
0008A1F7 01                         	dc.b	$01
0008A1F8 E1F9                       	smpsAlterNote       $F9
0008A1FA 01                         	dc.b	$01
0008A1FB E1FD                       	smpsAlterNote       $FD
0008A1FD 01                         	dc.b	$01
0008A1FE E100                       	smpsAlterNote       $00
0008A200 01                         	dc.b	$01
0008A201 E104                       	smpsAlterNote       $04
0008A203 01                         	dc.b	$01
0008A204 E1FD                       	smpsAlterNote       $FD
0008A206 ECF5                       	smpsPSGAlterVol     $F5
0008A208 9106                       	dc.b	nE1, $06
0008A20A EC04                       	smpsPSGAlterVol     $04
0008A20C E701                       	dc.b	smpsNoAttack, $01
0008A20E EC07                       	smpsPSGAlterVol     $07
0008A210 8003                       	dc.b	nRst, $03
0008A212 ECF5                       	smpsPSGAlterVol     $F5
0008A214 9106                       	dc.b	nE1, $06
0008A216 EC04                       	smpsPSGAlterVol     $04
0008A218 E701                       	dc.b	smpsNoAttack, $01
0008A21A EC07                       	smpsPSGAlterVol     $07
0008A21C 8006                       	dc.b	nRst, $06
0008A21E E100                       	smpsAlterNote       $00
0008A220 01                         	dc.b	$01
0008A221 E104                       	smpsAlterNote       $04
0008A223 01                         	dc.b	$01
0008A224 E100                       	smpsAlterNote       $00
0008A226 01                         	dc.b	$01
0008A227 E1FD                       	smpsAlterNote       $FD
0008A229 01                         	dc.b	$01
0008A22A ECF5                       	smpsPSGAlterVol     $F5
0008A22C 9206                       	dc.b	nF1, $06
0008A22E EC04                       	smpsPSGAlterVol     $04
0008A230 E701                       	dc.b	smpsNoAttack, $01
0008A232 EC07                       	smpsPSGAlterVol     $07
0008A234 8003                       	dc.b	nRst, $03
0008A236 ECF5                       	smpsPSGAlterVol     $F5
0008A238 9207                       	dc.b	nF1, $07
0008A23A EC0B                       	smpsPSGAlterVol     $0B
0008A23C 8007                       	dc.b	nRst, $07
0008A23E E103                       	smpsAlterNote       $03
0008A240 0101                       	dc.b	$01, $01
0008A242 E1FD                       	smpsAlterNote       $FD
0008A244 01                         	dc.b	$01
0008A245 E1FA                       	smpsAlterNote       $FA
0008A247 01                         	dc.b	$01
0008A248 E1FD                       	smpsAlterNote       $FD
0008A24A ECF5                       	smpsPSGAlterVol     $F5
0008A24C 9106                       	dc.b	nE1, $06
0008A24E EC0B                       	smpsPSGAlterVol     $0B
0008A250 8004                       	dc.b	nRst, $04
0008A252 ECF5                       	smpsPSGAlterVol     $F5
0008A254 9106                       	dc.b	nE1, $06
0008A256 EC04                       	smpsPSGAlterVol     $04
0008A258 E701                       	dc.b	smpsNoAttack, $01
0008A25A EC07                       	smpsPSGAlterVol     $07
0008A25C 8006                       	dc.b	nRst, $06
0008A25E E100                       	smpsAlterNote       $00
0008A260 01                         	dc.b	$01
0008A261 E104                       	smpsAlterNote       $04
0008A263 01                         	dc.b	$01
0008A264 E100                       	smpsAlterNote       $00
0008A266 01                         	dc.b	$01
0008A267 E1FA                       	smpsAlterNote       $FA
0008A269 01                         	dc.b	$01
0008A26A E1FD                       	smpsAlterNote       $FD
0008A26C ECF5                       	smpsPSGAlterVol     $F5
0008A26E 9206                       	dc.b	nF1, $06
0008A270 EC04                       	smpsPSGAlterVol     $04
0008A272 E701                       	dc.b	smpsNoAttack, $01
0008A274 EC07                       	smpsPSGAlterVol     $07
0008A276 8003                       	dc.b	nRst, $03
0008A278 ECF5                       	smpsPSGAlterVol     $F5
0008A27A 9206                       	dc.b	nF1, $06
0008A27C EC04                       	smpsPSGAlterVol     $04
0008A27E E701                       	dc.b	smpsNoAttack, $01
0008A280 EC07                       	smpsPSGAlterVol     $07
0008A282 8006                       	dc.b	nRst, $06
0008A284 E100                       	smpsAlterNote       $00
0008A286 01                         	dc.b	$01
0008A287 E104                       	smpsAlterNote       $04
0008A289 01                         	dc.b	$01
0008A28A E103                       	smpsAlterNote       $03
0008A28C 01                         	dc.b	$01
0008A28D E1FD                       	smpsAlterNote       $FD
0008A28F 01                         	dc.b	$01
0008A290 ECF5                       	smpsPSGAlterVol     $F5
0008A292 9107                       	dc.b	nE1, $07
0008A294 EC0B                       	smpsPSGAlterVol     $0B
0008A296 8004                       	dc.b	nRst, $04
0008A298 ECF5                       	smpsPSGAlterVol     $F5
0008A29A 9106                       	dc.b	nE1, $06
0008A29C EC0B                       	smpsPSGAlterVol     $0B
0008A29E 8007                       	dc.b	nRst, $07
0008A2A0 E103                       	smpsAlterNote       $03
0008A2A2 0101                       	dc.b	$01, $01
0008A2A4 E100                       	smpsAlterNote       $00
0008A2A6 01                         	dc.b	$01
0008A2A7 E1FA                       	smpsAlterNote       $FA
0008A2A9 01                         	dc.b	$01
0008A2AA E1FD                       	smpsAlterNote       $FD
0008A2AC ECF5                       	smpsPSGAlterVol     $F5
0008A2AE 9206                       	dc.b	nF1, $06
0008A2B0 EC04                       	smpsPSGAlterVol     $04
0008A2B2 E701                       	dc.b	smpsNoAttack, $01
0008A2B4 EC07                       	smpsPSGAlterVol     $07
0008A2B6 8003                       	dc.b	nRst, $03
0008A2B8 ECF5                       	smpsPSGAlterVol     $F5
0008A2BA 9206                       	dc.b	nF1, $06
0008A2BC EC04                       	smpsPSGAlterVol     $04
0008A2BE E701                       	dc.b	smpsNoAttack, $01
0008A2C0 EC07                       	smpsPSGAlterVol     $07
0008A2C2 8006                       	dc.b	nRst, $06
0008A2C4 E100                       	smpsAlterNote       $00
0008A2C6 01                         	dc.b	$01
0008A2C7 E104                       	smpsAlterNote       $04
0008A2C9 01                         	dc.b	$01
0008A2CA E100                       	smpsAlterNote       $00
0008A2CC 01                         	dc.b	$01
0008A2CD E1FD                       	smpsAlterNote       $FD
0008A2CF 01                         	dc.b	$01
0008A2D0 ECF5                       	smpsPSGAlterVol     $F5
0008A2D2 9106                       	dc.b	nE1, $06
0008A2D4 EC04                       	smpsPSGAlterVol     $04
0008A2D6 E701                       	dc.b	smpsNoAttack, $01
0008A2D8 EC07                       	smpsPSGAlterVol     $07
0008A2DA 8003                       	dc.b	nRst, $03
0008A2DC ECF5                       	smpsPSGAlterVol     $F5
0008A2DE 9107 9106                  	dc.b	nE1, $07, nE1, $06
0008A2E2 EC04                       	smpsPSGAlterVol     $04
0008A2E4 E701                       	dc.b	smpsNoAttack, $01
0008A2E6 ECFC                       	smpsPSGAlterVol     $FC
0008A2E8 9103                       	dc.b	nE1, $03
0008A2EA EC04                       	smpsPSGAlterVol     $04
0008A2EC E701                       	dc.b	smpsNoAttack, $01
0008A2EE ECFC                       	smpsPSGAlterVol     $FC
0008A2F0 9102                       	dc.b	nE1, $02
0008A2F2 EC04                       	smpsPSGAlterVol     $04
0008A2F4 E701                       	dc.b	smpsNoAttack, $01
0008A2F6 ECFC                       	smpsPSGAlterVol     $FC
0008A2F8 9103                       	dc.b	nE1, $03
0008A2FA EC0B                       	smpsPSGAlterVol     $0B
0008A2FC 800A                       	dc.b	nRst, $0A
0008A2FE E100                       	smpsAlterNote       $00
0008A300 01                         	dc.b	$01
0008A301 E104                       	smpsAlterNote       $04
0008A303 01                         	dc.b	$01
0008A304 E100                       	smpsAlterNote       $00
0008A306 01                         	dc.b	$01
0008A307 E1FA                       	smpsAlterNote       $FA
0008A309 01                         	dc.b	$01
0008A30A E1F9                       	smpsAlterNote       $F9
0008A30C 01                         	dc.b	$01
0008A30D E1FD                       	smpsAlterNote       $FD
0008A30F 01                         	dc.b	$01
0008A310 E103                       	smpsAlterNote       $03
0008A312 0101                       	dc.b	$01, $01
0008A314 E100                       	smpsAlterNote       $00
0008A316 01                         	dc.b	$01
0008A317 E1FA                       	smpsAlterNote       $FA
0008A319 0101                       	dc.b	$01, $01
0008A31B E1FD                       	smpsAlterNote       $FD
0008A31D ECF5                       	smpsPSGAlterVol     $F5
0008A31F 9206                       	dc.b	nF1, $06
0008A321 EC04                       	smpsPSGAlterVol     $04
0008A323 E704                       	dc.b	smpsNoAttack, $04
0008A325 ECFC                       	smpsPSGAlterVol     $FC
0008A327 9206                       	dc.b	nF1, $06
0008A329 EC04                       	smpsPSGAlterVol     $04
0008A32B E701                       	dc.b	smpsNoAttack, $01
0008A32D EC07                       	smpsPSGAlterVol     $07
0008A32F 8006                       	dc.b	nRst, $06
0008A331 E100                       	smpsAlterNote       $00
0008A333 01                         	dc.b	$01
0008A334 E104                       	smpsAlterNote       $04
0008A336 01                         	dc.b	$01
0008A337 E103                       	smpsAlterNote       $03
0008A339 01                         	dc.b	$01
0008A33A E1FD                       	smpsAlterNote       $FD
0008A33C 01                         	dc.b	$01
0008A33D ECF5                       	smpsPSGAlterVol     $F5
0008A33F 9407                       	dc.b	nG1, $07
0008A341 EC0B                       	smpsPSGAlterVol     $0B
0008A343 8004                       	dc.b	nRst, $04
0008A345 ECF5                       	smpsPSGAlterVol     $F5
0008A347 9406                       	dc.b	nG1, $06
0008A349 EC0B                       	smpsPSGAlterVol     $0B
0008A34B 8007                       	dc.b	nRst, $07
0008A34D E103                       	smpsAlterNote       $03
0008A34F 0101                       	dc.b	$01, $01
0008A351 E1FD                       	smpsAlterNote       $FD
0008A353 01                         	dc.b	$01
0008A354 E1F9                       	smpsAlterNote       $F9
0008A356 01                         	dc.b	$01
0008A357 E1FD                       	smpsAlterNote       $FD
0008A359 ECF5                       	smpsPSGAlterVol     $F5
0008A35B 9206                       	dc.b	nF1, $06
0008A35D EC04                       	smpsPSGAlterVol     $04
0008A35F E701                       	dc.b	smpsNoAttack, $01
0008A361 EC07                       	smpsPSGAlterVol     $07
0008A363 8003                       	dc.b	nRst, $03
0008A365 ECF5                       	smpsPSGAlterVol     $F5
0008A367 9206                       	dc.b	nF1, $06
0008A369 EC04                       	smpsPSGAlterVol     $04
0008A36B E701                       	dc.b	smpsNoAttack, $01
0008A36D EC07                       	smpsPSGAlterVol     $07
0008A36F 8006                       	dc.b	nRst, $06
0008A371 E100                       	smpsAlterNote       $00
0008A373 01                         	dc.b	$01
0008A374 E104                       	smpsAlterNote       $04
0008A376 01                         	dc.b	$01
0008A377 E100                       	smpsAlterNote       $00
0008A379 01                         	dc.b	$01
0008A37A E1FA                       	smpsAlterNote       $FA
0008A37C 01                         	dc.b	$01
0008A37D E1FD                       	smpsAlterNote       $FD
0008A37F ECF5                       	smpsPSGAlterVol     $F5
0008A381 9206                       	dc.b	nF1, $06
0008A383 EC04                       	smpsPSGAlterVol     $04
0008A385 E701                       	dc.b	smpsNoAttack, $01
0008A387 EC07                       	smpsPSGAlterVol     $07
0008A389 8003                       	dc.b	nRst, $03
0008A38B ECF5                       	smpsPSGAlterVol     $F5
0008A38D 9107                       	dc.b	nE1, $07
0008A38F EC0B                       	smpsPSGAlterVol     $0B
0008A391 8006                       	dc.b	nRst, $06
0008A393 E100                       	smpsAlterNote       $00
0008A395 01                         	dc.b	$01
0008A396 E103                       	smpsAlterNote       $03
0008A398 0101                       	dc.b	$01, $01
0008A39A E1FD                       	smpsAlterNote       $FD
0008A39C 01                         	dc.b	$01
0008A39D ECF5                       	smpsPSGAlterVol     $F5
0008A39F 9207                       	dc.b	nF1, $07
0008A3A1 EC0B                       	smpsPSGAlterVol     $0B
0008A3A3 8004                       	dc.b	nRst, $04
0008A3A5 ECF5                       	smpsPSGAlterVol     $F5
0008A3A7 9206                       	dc.b	nF1, $06
0008A3A9 EC04                       	smpsPSGAlterVol     $04
0008A3AB E701                       	dc.b	smpsNoAttack, $01
0008A3AD EC07                       	smpsPSGAlterVol     $07
0008A3AF 8006                       	dc.b	nRst, $06
0008A3B1 E103                       	smpsAlterNote       $03
0008A3B3 01                         	dc.b	$01
0008A3B4 E104                       	smpsAlterNote       $04
0008A3B6 01                         	dc.b	$01
0008A3B7 E100                       	smpsAlterNote       $00
0008A3B9 01                         	dc.b	$01
0008A3BA E1FB                       	smpsAlterNote       $FB
0008A3BC 01                         	dc.b	$01
0008A3BD E1FD                       	smpsAlterNote       $FD
0008A3BF ECF5                       	smpsPSGAlterVol     $F5
0008A3C1 9406                       	dc.b	nG1, $06
0008A3C3 EC04                       	smpsPSGAlterVol     $04
0008A3C5 E701                       	dc.b	smpsNoAttack, $01
0008A3C7 EC07                       	smpsPSGAlterVol     $07
0008A3C9 8003                       	dc.b	nRst, $03
0008A3CB ECF5                       	smpsPSGAlterVol     $F5
0008A3CD 9406                       	dc.b	nG1, $06
0008A3CF EC04                       	smpsPSGAlterVol     $04
0008A3D1 E701                       	dc.b	smpsNoAttack, $01
0008A3D3 EC07                       	smpsPSGAlterVol     $07
0008A3D5 8006                       	dc.b	nRst, $06
0008A3D7 E100                       	smpsAlterNote       $00
0008A3D9 01                         	dc.b	$01
0008A3DA E104                       	smpsAlterNote       $04
0008A3DC 01                         	dc.b	$01
0008A3DD E100                       	smpsAlterNote       $00
0008A3DF 01                         	dc.b	$01
0008A3E0 E1FD                       	smpsAlterNote       $FD
0008A3E2 01                         	dc.b	$01
0008A3E3 ECF5                       	smpsPSGAlterVol     $F5
0008A3E5 9206                       	dc.b	nF1, $06
0008A3E7 EC04                       	smpsPSGAlterVol     $04
0008A3E9 E701                       	dc.b	smpsNoAttack, $01
0008A3EB EC07                       	smpsPSGAlterVol     $07
0008A3ED 8003                       	dc.b	nRst, $03
0008A3EF ECF5                       	smpsPSGAlterVol     $F5
0008A3F1 9207                       	dc.b	nF1, $07
0008A3F3 EC0B                       	smpsPSGAlterVol     $0B
0008A3F5 8007                       	dc.b	nRst, $07
0008A3F7 E103                       	smpsAlterNote       $03
0008A3F9 0101                       	dc.b	$01, $01
0008A3FB E1FD                       	smpsAlterNote       $FD
0008A3FD 01                         	dc.b	$01
0008A3FE E1FA                       	smpsAlterNote       $FA
0008A400 01                         	dc.b	$01
0008A401 E1FD                       	smpsAlterNote       $FD
0008A403 ECF5                       	smpsPSGAlterVol     $F5
0008A405 9206                       	dc.b	nF1, $06
0008A407 EC0B                       	smpsPSGAlterVol     $0B
0008A409 8004                       	dc.b	nRst, $04
0008A40B ECF5                       	smpsPSGAlterVol     $F5
0008A40D 9206                       	dc.b	nF1, $06
0008A40F EC04                       	smpsPSGAlterVol     $04
0008A411 E701                       	dc.b	smpsNoAttack, $01
0008A413 EC07                       	smpsPSGAlterVol     $07
0008A415 8006                       	dc.b	nRst, $06
0008A417 E100                       	smpsAlterNote       $00
0008A419 01                         	dc.b	$01
0008A41A E104                       	smpsAlterNote       $04
0008A41C 01                         	dc.b	$01
0008A41D E100                       	smpsAlterNote       $00
0008A41F 01                         	dc.b	$01
0008A420 E1FA                       	smpsAlterNote       $FA
0008A422 01                         	dc.b	$01
0008A423 E1FD                       	smpsAlterNote       $FD
0008A425 ECF5                       	smpsPSGAlterVol     $F5
0008A427 9206                       	dc.b	nF1, $06
0008A429 EC04                       	smpsPSGAlterVol     $04
0008A42B E701                       	dc.b	smpsNoAttack, $01
0008A42D EC07                       	smpsPSGAlterVol     $07
0008A42F 8003                       	dc.b	nRst, $03
0008A431 ECF5                       	smpsPSGAlterVol     $F5
0008A433 9207                       	dc.b	nF1, $07
0008A435 EC0B                       	smpsPSGAlterVol     $0B
0008A437 8006                       	dc.b	nRst, $06
0008A439 E100                       	smpsAlterNote       $00
0008A43B 01                         	dc.b	$01
0008A43C E103                       	smpsAlterNote       $03
0008A43E 0101                       	dc.b	$01, $01
0008A440 E1FD                       	smpsAlterNote       $FD
0008A442 01                         	dc.b	$01
0008A443 ECF5                       	smpsPSGAlterVol     $F5
0008A445 9207                       	dc.b	nF1, $07
0008A447 EC0B                       	smpsPSGAlterVol     $0B
0008A449 8004                       	dc.b	nRst, $04
0008A44B ECF5                       	smpsPSGAlterVol     $F5
0008A44D 9206                       	dc.b	nF1, $06
0008A44F EC0B                       	smpsPSGAlterVol     $0B
0008A451 8007                       	dc.b	nRst, $07
0008A453 E103                       	smpsAlterNote       $03
0008A455 0101                       	dc.b	$01, $01
0008A457 E100                       	smpsAlterNote       $00
0008A459 01                         	dc.b	$01
0008A45A E1FA                       	smpsAlterNote       $FA
0008A45C 01                         	dc.b	$01
0008A45D E1FD                       	smpsAlterNote       $FD
0008A45F ECF5                       	smpsPSGAlterVol     $F5
0008A461 9206                       	dc.b	nF1, $06
0008A463 EC04                       	smpsPSGAlterVol     $04
0008A465 E701                       	dc.b	smpsNoAttack, $01
0008A467 EC07                       	smpsPSGAlterVol     $07
0008A469 8003                       	dc.b	nRst, $03
0008A46B ECF5                       	smpsPSGAlterVol     $F5
0008A46D 9206                       	dc.b	nF1, $06
0008A46F EC04                       	smpsPSGAlterVol     $04
0008A471 E701                       	dc.b	smpsNoAttack, $01
0008A473 EC07                       	smpsPSGAlterVol     $07
0008A475 8006                       	dc.b	nRst, $06
0008A477 E100                       	smpsAlterNote       $00
0008A479 01                         	dc.b	$01
0008A47A E104                       	smpsAlterNote       $04
0008A47C 01                         	dc.b	$01
0008A47D E100                       	smpsAlterNote       $00
0008A47F 01                         	dc.b	$01
0008A480 E1FD                       	smpsAlterNote       $FD
0008A482 01                         	dc.b	$01
0008A483 ECF5                       	smpsPSGAlterVol     $F5
0008A485 9206                       	dc.b	nF1, $06
0008A487 EC04                       	smpsPSGAlterVol     $04
0008A489 E701                       	dc.b	smpsNoAttack, $01
0008A48B EC07                       	smpsPSGAlterVol     $07
0008A48D 8003                       	dc.b	nRst, $03
0008A48F ECF5                       	smpsPSGAlterVol     $F5
0008A491 9207                       	dc.b	nF1, $07
0008A493 EC0B                       	smpsPSGAlterVol     $0B
0008A495 8007                       	dc.b	nRst, $07
0008A497 E104                       	smpsAlterNote       $04
0008A499 0101                       	dc.b	$01, $01
0008A49B E1FB                       	smpsAlterNote       $FB
0008A49D 01                         	dc.b	$01
0008A49E E1F6                       	smpsAlterNote       $F6
0008A4A0 0101                       	dc.b	$01, $01
0008A4A2 E1FF                       	smpsAlterNote       $FF
0008A4A4 01                         	dc.b	$01
0008A4A5 E105                       	smpsAlterNote       $05
0008A4A7 01                         	dc.b	$01
0008A4A8 E104                       	smpsAlterNote       $04
0008A4AA 01                         	dc.b	$01
0008A4AB E1FB                       	smpsAlterNote       $FB
0008A4AD 01                         	dc.b	$01
0008A4AE E1F5                       	smpsAlterNote       $F5
0008A4B0 01                         	dc.b	$01
0008A4B1 E1FC                       	smpsAlterNote       $FC
0008A4B3 ECF5                       	smpsPSGAlterVol     $F5
0008A4B5 8B0E                       	dc.b	nBb0, $0E
0008A4B7 E102                       	smpsAlterNote       $02
0008A4B9 EC0B                       	smpsPSGAlterVol     $0B
0008A4BB 8001                       	dc.b	nRst, $01
0008A4BD E101                       	smpsAlterNote       $01
0008A4BF 01                         	dc.b	$01
0008A4C0 E1FC                       	smpsAlterNote       $FC
0008A4C2 01                         	dc.b	$01
0008A4C3 E1F9                       	smpsAlterNote       $F9
0008A4C5 0101                       	dc.b	$01, $01
0008A4C7 E1FF                       	smpsAlterNote       $FF
0008A4C9 01                         	dc.b	$01
0008A4CA E102                       	smpsAlterNote       $02
0008A4CC 01                         	dc.b	$01
0008A4CD E1FF                       	smpsAlterNote       $FF
0008A4CF 01                         	dc.b	$01
0008A4D0 E1FC                       	smpsAlterNote       $FC
0008A4D2 01                         	dc.b	$01
0008A4D3 E1F8                       	smpsAlterNote       $F8
0008A4D5 01                         	dc.b	$01
0008A4D6 E1FC                       	smpsAlterNote       $FC
0008A4D8 01                         	dc.b	$01
0008A4D9 E101                       	smpsAlterNote       $01
0008A4DB 01                         	dc.b	$01
0008A4DC E102                       	smpsAlterNote       $02
0008A4DE 01                         	dc.b	$01
0008A4DF E1FF                       	smpsAlterNote       $FF
0008A4E1 01                         	dc.b	$01
0008A4E2 E1FB                       	smpsAlterNote       $FB
0008A4E4 ECF5                       	smpsPSGAlterVol     $F5
0008A4E6 8D0D                       	dc.b	nC1, $0D
0008A4E8 E101                       	smpsAlterNote       $01
0008A4EA EC0B                       	smpsPSGAlterVol     $0B
0008A4EC 8001                       	dc.b	nRst, $01
0008A4EE E102                       	smpsAlterNote       $02
0008A4F0 01                         	dc.b	$01
0008A4F1 E1FF                       	smpsAlterNote       $FF
0008A4F3 01                         	dc.b	$01
0008A4F4 E1F9                       	smpsAlterNote       $F9
0008A4F6 0101                       	dc.b	$01, $01
0008A4F8 E1FC                       	smpsAlterNote       $FC
0008A4FA 01                         	dc.b	$01
0008A4FB E101                       	smpsAlterNote       $01
0008A4FD 0101                       	dc.b	$01, $01
0008A4FF E1FC                       	smpsAlterNote       $FC
0008A501 01                         	dc.b	$01
0008A502 E1F9                       	smpsAlterNote       $F9
0008A504 0101                       	dc.b	$01, $01
0008A506 E1FF                       	smpsAlterNote       $FF
0008A508 01                         	dc.b	$01
0008A509 E102                       	smpsAlterNote       $02
0008A50B 01                         	dc.b	$01
0008A50C E101                       	smpsAlterNote       $01
0008A50E 01                         	dc.b	$01
0008A50F E1FC                       	smpsAlterNote       $FC
0008A511 ECF5                       	smpsPSGAlterVol     $F5
0008A513 8F0D                       	dc.b	nD1, $0D
0008A515 E1FF                       	smpsAlterNote       $FF
0008A517 EC04                       	smpsPSGAlterVol     $04
0008A519 E701                       	dc.b	smpsNoAttack, $01
0008A51B EC07                       	smpsPSGAlterVol     $07
0008A51D E103                       	smpsAlterNote       $03
0008A51F 8001                       	dc.b	nRst, $01
0008A521 E102                       	smpsAlterNote       $02
0008A523 01                         	dc.b	$01
0008A524 E1FD                       	smpsAlterNote       $FD
0008A526 01                         	dc.b	$01
0008A527 E1F9                       	smpsAlterNote       $F9
0008A529 01                         	dc.b	$01
0008A52A E1FD                       	smpsAlterNote       $FD
0008A52C 01                         	dc.b	$01
0008A52D E100                       	smpsAlterNote       $00
0008A52F 01                         	dc.b	$01
0008A530 E103                       	smpsAlterNote       $03
0008A532 01                         	dc.b	$01
0008A533 E100                       	smpsAlterNote       $00
0008A535 01                         	dc.b	$01
0008A536 E1FA                       	smpsAlterNote       $FA
0008A538 01                         	dc.b	$01
0008A539 E1F9                       	smpsAlterNote       $F9
0008A53B 01                         	dc.b	$01
0008A53C E1FD                       	smpsAlterNote       $FD
0008A53E 01                         	dc.b	$01
0008A53F E102                       	smpsAlterNote       $02
0008A541 0101                       	dc.b	$01, $01
0008A543 E100                       	smpsAlterNote       $00
0008A545 01                         	dc.b	$01
0008A546 E1FD                       	smpsAlterNote       $FD
0008A548 ECF5                       	smpsPSGAlterVol     $F5
0008A54A 910D                       	dc.b	nE1, $0D
0008A54C E103                       	smpsAlterNote       $03
0008A54E EC0B                       	smpsPSGAlterVol     $0B
0008A550 8001 01                    	dc.b	nRst, $01, $01
0008A553 E100                       	smpsAlterNote       $00
0008A555 01                         	dc.b	$01
0008A556 E1FA                       	smpsAlterNote       $FA
0008A558 0101                       	dc.b	$01, $01
0008A55A E100                       	smpsAlterNote       $00
0008A55C 01                         	dc.b	$01
0008A55D E103                       	smpsAlterNote       $03
0008A55F 01                         	dc.b	$01
0008A560 E1FD                       	smpsAlterNote       $FD
0008A562 ECF5                       	smpsPSGAlterVol     $F5
0008A564 9206                       	dc.b	nF1, $06
0008A566 EC04                       	smpsPSGAlterVol     $04
0008A568 E701                       	dc.b	smpsNoAttack, $01
0008A56A EC07                       	smpsPSGAlterVol     $07
0008A56C 8003                       	dc.b	nRst, $03
0008A56E ECF5                       	smpsPSGAlterVol     $F5
0008A570 9207                       	dc.b	nF1, $07
0008A572 EC0B                       	smpsPSGAlterVol     $0B
0008A574 8006                       	dc.b	nRst, $06
0008A576 E100                       	smpsAlterNote       $00
0008A578 01                         	dc.b	$01
0008A579 E103                       	smpsAlterNote       $03
0008A57B 0101                       	dc.b	$01, $01
0008A57D E1FD                       	smpsAlterNote       $FD
0008A57F 01                         	dc.b	$01
0008A580 ECF5                       	smpsPSGAlterVol     $F5
0008A582 9407                       	dc.b	nG1, $07
0008A584 EC0B                       	smpsPSGAlterVol     $0B
0008A586 8004                       	dc.b	nRst, $04
0008A588 ECF5                       	smpsPSGAlterVol     $F5
0008A58A 9406                       	dc.b	nG1, $06
0008A58C EC04                       	smpsPSGAlterVol     $04
0008A58E E701                       	dc.b	smpsNoAttack, $01
0008A590 EC07                       	smpsPSGAlterVol     $07
0008A592 8006                       	dc.b	nRst, $06
0008A594 E103                       	smpsAlterNote       $03
0008A596 01                         	dc.b	$01
0008A597 E104                       	smpsAlterNote       $04
0008A599 01                         	dc.b	$01
0008A59A E100                       	smpsAlterNote       $00
0008A59C 01                         	dc.b	$01
0008A59D E1F9                       	smpsAlterNote       $F9
0008A59F 01                         	dc.b	$01
0008A5A0 E1FD                       	smpsAlterNote       $FD
0008A5A2 ECF5                       	smpsPSGAlterVol     $F5
0008A5A4 9206                       	dc.b	nF1, $06
0008A5A6 EC04                       	smpsPSGAlterVol     $04
0008A5A8 E701                       	dc.b	smpsNoAttack, $01
0008A5AA EC07                       	smpsPSGAlterVol     $07
0008A5AC 8003                       	dc.b	nRst, $03
0008A5AE ECF5                       	smpsPSGAlterVol     $F5
0008A5B0 9206                       	dc.b	nF1, $06
0008A5B2 EC04                       	smpsPSGAlterVol     $04
0008A5B4 E701                       	dc.b	smpsNoAttack, $01
0008A5B6 EC07                       	smpsPSGAlterVol     $07
0008A5B8 8006                       	dc.b	nRst, $06
0008A5BA E100                       	smpsAlterNote       $00
0008A5BC 01                         	dc.b	$01
0008A5BD E104                       	smpsAlterNote       $04
0008A5BF 01                         	dc.b	$01
0008A5C0 E103                       	smpsAlterNote       $03
0008A5C2 01                         	dc.b	$01
0008A5C3 E1FD                       	smpsAlterNote       $FD
0008A5C5 01                         	dc.b	$01
0008A5C6 ECF5                       	smpsPSGAlterVol     $F5
0008A5C8 9407                       	dc.b	nG1, $07
0008A5CA EC0B                       	smpsPSGAlterVol     $0B
0008A5CC 8004                       	dc.b	nRst, $04
0008A5CE ECF5                       	smpsPSGAlterVol     $F5
0008A5D0 9406                       	dc.b	nG1, $06
0008A5D2 EC0B                       	smpsPSGAlterVol     $0B
0008A5D4 8007                       	dc.b	nRst, $07
0008A5D6 E103                       	smpsAlterNote       $03
0008A5D8 0101                       	dc.b	$01, $01
0008A5DA E100                       	smpsAlterNote       $00
0008A5DC 01                         	dc.b	$01
0008A5DD E1F9                       	smpsAlterNote       $F9
0008A5DF 01                         	dc.b	$01
0008A5E0 E1FD                       	smpsAlterNote       $FD
0008A5E2 ECF5                       	smpsPSGAlterVol     $F5
0008A5E4 9206                       	dc.b	nF1, $06
0008A5E6 EC04                       	smpsPSGAlterVol     $04
0008A5E8 E701                       	dc.b	smpsNoAttack, $01
0008A5EA EC07                       	smpsPSGAlterVol     $07
0008A5EC 8003                       	dc.b	nRst, $03
0008A5EE ECF5                       	smpsPSGAlterVol     $F5
0008A5F0 9206                       	dc.b	nF1, $06
0008A5F2 EC04                       	smpsPSGAlterVol     $04
0008A5F4 E701                       	dc.b	smpsNoAttack, $01
0008A5F6 EC07                       	smpsPSGAlterVol     $07
0008A5F8 8006                       	dc.b	nRst, $06
0008A5FA E100                       	smpsAlterNote       $00
0008A5FC 01                         	dc.b	$01
0008A5FD E104                       	smpsAlterNote       $04
0008A5FF 01                         	dc.b	$01
0008A600 E100                       	smpsAlterNote       $00
0008A602 01                         	dc.b	$01
0008A603 E1FB                       	smpsAlterNote       $FB
0008A605 01                         	dc.b	$01
0008A606 E1FD                       	smpsAlterNote       $FD
0008A608 ECF5                       	smpsPSGAlterVol     $F5
0008A60A 9406                       	dc.b	nG1, $06
0008A60C EC04                       	smpsPSGAlterVol     $04
0008A60E E701                       	dc.b	smpsNoAttack, $01
0008A610 EC07                       	smpsPSGAlterVol     $07
0008A612 8003                       	dc.b	nRst, $03
0008A614 ECF5                       	smpsPSGAlterVol     $F5
0008A616 9407                       	dc.b	nG1, $07
0008A618 EC0B                       	smpsPSGAlterVol     $0B
0008A61A 8006                       	dc.b	nRst, $06
0008A61C E100                       	smpsAlterNote       $00
0008A61E 01                         	dc.b	$01
0008A61F E103                       	smpsAlterNote       $03
0008A621 0101                       	dc.b	$01, $01
0008A623 E1FD                       	smpsAlterNote       $FD
0008A625 01                         	dc.b	$01
0008A626 ECF5                       	smpsPSGAlterVol     $F5
0008A628 9207                       	dc.b	nF1, $07
0008A62A EC0B                       	smpsPSGAlterVol     $0B
0008A62C 8004                       	dc.b	nRst, $04
0008A62E ECF5                       	smpsPSGAlterVol     $F5
0008A630 9206                       	dc.b	nF1, $06
0008A632 EC04                       	smpsPSGAlterVol     $04
0008A634 E701                       	dc.b	smpsNoAttack, $01
0008A636 ECFC                       	smpsPSGAlterVol     $FC
0008A638 E1FC                       	smpsAlterNote       $FC
0008A63A 9006 8B03                  	dc.b	nEb1, $06, nBb0, $03
0008A63E EC04                       	smpsPSGAlterVol     $04
0008A640 E701                       	dc.b	smpsNoAttack, $01
0008A642 ECFC                       	smpsPSGAlterVol     $FC
0008A644 9003                       	dc.b	nEb1, $03
0008A646 E1FD                       	smpsAlterNote       $FD
0008A648 9403                       	dc.b	nG1, $03
0008A64A EC04                       	smpsPSGAlterVol     $04
0008A64C E701                       	dc.b	smpsNoAttack, $01
0008A64E E1FE                       	smpsAlterNote       $FE
0008A650 ECFC                       	smpsPSGAlterVol     $FC
0008A652 9703 9703                  	dc.b	nBb1, $03, nBb1, $03
0008A656 EC04                       	smpsPSGAlterVol     $04
0008A658 E701                       	dc.b	smpsNoAttack, $01
0008A65A EC07                       	smpsPSGAlterVol     $07
0008A65C 8009                       	dc.b	nRst, $09
0008A65E E100                       	smpsAlterNote       $00
0008A660 01                         	dc.b	$01
0008A661 F6F5 19                    	smpsJump            music84_Jump07
0008A664                            
0008A664                            ; PSG2 Data
0008A664                            music84_PSG2:
0008A664 E1FC                       	smpsAlterNote       $FC
0008A666 EC04                       	smpsPSGAlterVol     $04
0008A668 8F03                       	dc.b	nD1, $03
0008A66A E1FD                       	smpsAlterNote       $FD
0008A66C 9203                       	dc.b	nF1, $03
0008A66E EC04                       	smpsPSGAlterVol     $04
0008A670 E701                       	dc.b	smpsNoAttack, $01
0008A672 E1FE                       	smpsAlterNote       $FE
0008A674 ECFC                       	smpsPSGAlterVol     $FC
0008A676 9603                       	dc.b	nA1, $03
0008A678 E1FD                       	smpsAlterNote       $FD
0008A67A 9103                       	dc.b	nE1, $03
0008A67C EC04                       	smpsPSGAlterVol     $04
0008A67E E701                       	dc.b	smpsNoAttack, $01
0008A680 ECFC                       	smpsPSGAlterVol     $FC
0008A682 9403                       	dc.b	nG1, $03
0008A684 E1FE                       	smpsAlterNote       $FE
0008A686 9703                       	dc.b	nBb1, $03
0008A688 EC04                       	smpsPSGAlterVol     $04
0008A68A E701                       	dc.b	smpsNoAttack, $01
0008A68C E1FF                       	smpsAlterNote       $FF
0008A68E ECFC                       	smpsPSGAlterVol     $FC
0008A690 9B02                       	dc.b	nD2, $02
0008A692 EC04                       	smpsPSGAlterVol     $04
0008A694 E701                       	dc.b	smpsNoAttack, $01
0008A696 ECFC                       	smpsPSGAlterVol     $FC
0008A698 E1FE                       	smpsAlterNote       $FE
0008A69A 9A03                       	dc.b	nCs2, $03
0008A69C EC0B                       	smpsPSGAlterVol     $0B
0008A69E 800A                       	dc.b	nRst, $0A
0008A6A0 E102                       	smpsAlterNote       $02
0008A6A2 01                         	dc.b	$01
0008A6A3 E10A                       	smpsAlterNote       $0A
0008A6A5 01                         	dc.b	$01
0008A6A6 E102                       	smpsAlterNote       $02
0008A6A8 01                         	dc.b	$01
0008A6A9 E1FC                       	smpsAlterNote       $FC
0008A6AB 01                         	dc.b	$01
0008A6AC E10A                       	smpsAlterNote       $0A
0008A6AE 01                         	dc.b	$01
0008A6AF E1FC                       	smpsAlterNote       $FC
0008A6B1 01                         	dc.b	$01
0008A6B2 E108                       	smpsAlterNote       $08
0008A6B4 01                         	dc.b	$01
0008A6B5 E10A                       	smpsAlterNote       $0A
0008A6B7 01                         	dc.b	$01
0008A6B8 E102                       	smpsAlterNote       $02
0008A6BA 01                         	dc.b	$01
0008A6BB E1F7                       	smpsAlterNote       $F7
0008A6BD 0101                       	dc.b	$01, $01
0008A6BF E102                       	smpsAlterNote       $02
0008A6C1 01                         	dc.b	$01
0008A6C2 E108                       	smpsAlterNote       $08
0008A6C4 0101                       	dc.b	$01, $01
0008A6C6 E1FC                       	smpsAlterNote       $FC
0008A6C8 01                         	dc.b	$01
0008A6C9 E10A                       	smpsAlterNote       $0A
0008A6CB 01                         	dc.b	$01
0008A6CC E1F7                       	smpsAlterNote       $F7
0008A6CE 01                         	dc.b	$01
0008A6CF E102                       	smpsAlterNote       $02
0008A6D1 01                         	dc.b	$01
0008A6D2 E10A                       	smpsAlterNote       $0A
0008A6D4 01                         	dc.b	$01
0008A6D5 E102                       	smpsAlterNote       $02
0008A6D7 01                         	dc.b	$01
0008A6D8 E1FC                       	smpsAlterNote       $FC
0008A6DA 01                         	dc.b	$01
0008A6DB                            
0008A6DB                            music84_Jump06:
0008A6DB E10A                       	smpsAlterNote       $0A
0008A6DD 8001                       	dc.b	nRst, $01
0008A6DF E1FC                       	smpsAlterNote       $FC
0008A6E1 01                         	dc.b	$01
0008A6E2 E108                       	smpsAlterNote       $08
0008A6E4 01                         	dc.b	$01
0008A6E5 E10A                       	smpsAlterNote       $0A
0008A6E7 01                         	dc.b	$01
0008A6E8 E1FC                       	smpsAlterNote       $FC
0008A6EA ECF5                       	smpsPSGAlterVol     $F5
0008A6EC 8F06                       	dc.b	nD1, $06
0008A6EE EC04                       	smpsPSGAlterVol     $04
0008A6F0 E701                       	dc.b	smpsNoAttack, $01
0008A6F2 EC07                       	smpsPSGAlterVol     $07
0008A6F4 8003                       	dc.b	nRst, $03
0008A6F6 ECF5                       	smpsPSGAlterVol     $F5
0008A6F8 8F06                       	dc.b	nD1, $06
0008A6FA EC04                       	smpsPSGAlterVol     $04
0008A6FC E701                       	dc.b	smpsNoAttack, $01
0008A6FE EC07                       	smpsPSGAlterVol     $07
0008A700 8006                       	dc.b	nRst, $06
0008A702 E1FF                       	smpsAlterNote       $FF
0008A704 01                         	dc.b	$01
0008A705 E102                       	smpsAlterNote       $02
0008A707 01                         	dc.b	$01
0008A708 E1FF                       	smpsAlterNote       $FF
0008A70A 01                         	dc.b	$01
0008A70B E1F9                       	smpsAlterNote       $F9
0008A70D 01                         	dc.b	$01
0008A70E E1FC                       	smpsAlterNote       $FC
0008A710 ECF5                       	smpsPSGAlterVol     $F5
0008A712 9006                       	dc.b	nEb1, $06
0008A714 EC04                       	smpsPSGAlterVol     $04
0008A716 E701                       	dc.b	smpsNoAttack, $01
0008A718 EC07                       	smpsPSGAlterVol     $07
0008A71A 8003                       	dc.b	nRst, $03
0008A71C ECF5                       	smpsPSGAlterVol     $F5
0008A71E 9007                       	dc.b	nEb1, $07
0008A720 EC0B                       	smpsPSGAlterVol     $0B
0008A722 8006                       	dc.b	nRst, $06
0008A724 E1FF                       	smpsAlterNote       $FF
0008A726 01                         	dc.b	$01
0008A727 E103                       	smpsAlterNote       $03
0008A729 0101                       	dc.b	$01, $01
0008A72B E1FC                       	smpsAlterNote       $FC
0008A72D 01                         	dc.b	$01
0008A72E ECF5                       	smpsPSGAlterVol     $F5
0008A730 8F07                       	dc.b	nD1, $07
0008A732 EC0B                       	smpsPSGAlterVol     $0B
0008A734 8004                       	dc.b	nRst, $04
0008A736 ECF5                       	smpsPSGAlterVol     $F5
0008A738 8F06                       	dc.b	nD1, $06
0008A73A EC04                       	smpsPSGAlterVol     $04
0008A73C E701                       	dc.b	smpsNoAttack, $01
0008A73E EC07                       	smpsPSGAlterVol     $07
0008A740 8006                       	dc.b	nRst, $06
0008A742 E102                       	smpsAlterNote       $02
0008A744 01                         	dc.b	$01
0008A745 E103                       	smpsAlterNote       $03
0008A747 01                         	dc.b	$01
0008A748 E1FF                       	smpsAlterNote       $FF
0008A74A 01                         	dc.b	$01
0008A74B E1F9                       	smpsAlterNote       $F9
0008A74D 01                         	dc.b	$01
0008A74E E1FC                       	smpsAlterNote       $FC
0008A750 ECF5                       	smpsPSGAlterVol     $F5
0008A752 8F06                       	dc.b	nD1, $06
0008A754 EC04                       	smpsPSGAlterVol     $04
0008A756 E701                       	dc.b	smpsNoAttack, $01
0008A758 EC07                       	smpsPSGAlterVol     $07
0008A75A 8003                       	dc.b	nRst, $03
0008A75C ECF5                       	smpsPSGAlterVol     $F5
0008A75E 8F06                       	dc.b	nD1, $06
0008A760 EC04                       	smpsPSGAlterVol     $04
0008A762 E701                       	dc.b	smpsNoAttack, $01
0008A764 EC07                       	smpsPSGAlterVol     $07
0008A766 8006                       	dc.b	nRst, $06
0008A768 E1FF                       	smpsAlterNote       $FF
0008A76A 01                         	dc.b	$01
0008A76B E103                       	smpsAlterNote       $03
0008A76D 01                         	dc.b	$01
0008A76E E1FF                       	smpsAlterNote       $FF
0008A770 01                         	dc.b	$01
0008A771 E1FC                       	smpsAlterNote       $FC
0008A773 01                         	dc.b	$01
0008A774 ECF5                       	smpsPSGAlterVol     $F5
0008A776 8F06                       	dc.b	nD1, $06
0008A778 EC04                       	smpsPSGAlterVol     $04
0008A77A E701                       	dc.b	smpsNoAttack, $01
0008A77C EC07                       	smpsPSGAlterVol     $07
0008A77E 8003                       	dc.b	nRst, $03
0008A780 ECF5                       	smpsPSGAlterVol     $F5
0008A782 8F07                       	dc.b	nD1, $07
0008A784 EC0B                       	smpsPSGAlterVol     $0B
0008A786 8007                       	dc.b	nRst, $07
0008A788 E101                       	smpsAlterNote       $01
0008A78A 0101                       	dc.b	$01, $01
0008A78C E1FC                       	smpsAlterNote       $FC
0008A78E 01                         	dc.b	$01
0008A78F E1F9                       	smpsAlterNote       $F9
0008A791 01                         	dc.b	$01
0008A792 E1FC                       	smpsAlterNote       $FC
0008A794 ECF5                       	smpsPSGAlterVol     $F5
0008A796 9006                       	dc.b	nEb1, $06
0008A798 EC0B                       	smpsPSGAlterVol     $0B
0008A79A 8004                       	dc.b	nRst, $04
0008A79C ECF5                       	smpsPSGAlterVol     $F5
0008A79E 9006                       	dc.b	nEb1, $06
0008A7A0 EC04                       	smpsPSGAlterVol     $04
0008A7A2 E701                       	dc.b	smpsNoAttack, $01
0008A7A4 EC07                       	smpsPSGAlterVol     $07
0008A7A6 8006                       	dc.b	nRst, $06
0008A7A8 E100                       	smpsAlterNote       $00
0008A7AA 01                         	dc.b	$01
0008A7AB E102                       	smpsAlterNote       $02
0008A7AD 01                         	dc.b	$01
0008A7AE E100                       	smpsAlterNote       $00
0008A7B0 01                         	dc.b	$01
0008A7B1 E1FD                       	smpsAlterNote       $FD
0008A7B3 01                         	dc.b	$01
0008A7B4 E1FF                       	smpsAlterNote       $FF
0008A7B6 ECF5                       	smpsPSGAlterVol     $F5
0008A7B8 9B06                       	dc.b	nD2, $06
0008A7BA EC04                       	smpsPSGAlterVol     $04
0008A7BC E701                       	dc.b	smpsNoAttack, $01
0008A7BE EC07                       	smpsPSGAlterVol     $07
0008A7C0 8003                       	dc.b	nRst, $03
0008A7C2 ECF5                       	smpsPSGAlterVol     $F5
0008A7C4 9B07                       	dc.b	nD2, $07
0008A7C6 EC0B                       	smpsPSGAlterVol     $0B
0008A7C8 8006                       	dc.b	nRst, $06
0008A7CA E102                       	smpsAlterNote       $02
0008A7CC 01                         	dc.b	$01
0008A7CD E106                       	smpsAlterNote       $06
0008A7CF 01                         	dc.b	$01
0008A7D0 E105                       	smpsAlterNote       $05
0008A7D2 01                         	dc.b	$01
0008A7D3 E1FF                       	smpsAlterNote       $FF
0008A7D5 01                         	dc.b	$01
0008A7D6 ECF5                       	smpsPSGAlterVol     $F5
0008A7D8 9B07                       	dc.b	nD2, $07
0008A7DA EC0B                       	smpsPSGAlterVol     $0B
0008A7DC 8004                       	dc.b	nRst, $04
0008A7DE ECF5                       	smpsPSGAlterVol     $F5
0008A7E0 9B06                       	dc.b	nD2, $06
0008A7E2 EC0B                       	smpsPSGAlterVol     $0B
0008A7E4 8007                       	dc.b	nRst, $07
0008A7E6 E105                       	smpsAlterNote       $05
0008A7E8 0101                       	dc.b	$01, $01
0008A7EA E102                       	smpsAlterNote       $02
0008A7EC 01                         	dc.b	$01
0008A7ED E1FC                       	smpsAlterNote       $FC
0008A7EF 01                         	dc.b	$01
0008A7F0 E1FF                       	smpsAlterNote       $FF
0008A7F2 ECF5                       	smpsPSGAlterVol     $F5
0008A7F4 9B06                       	dc.b	nD2, $06
0008A7F6 EC04                       	smpsPSGAlterVol     $04
0008A7F8 E701                       	dc.b	smpsNoAttack, $01
0008A7FA EC07                       	smpsPSGAlterVol     $07
0008A7FC 8003                       	dc.b	nRst, $03
0008A7FE ECF5                       	smpsPSGAlterVol     $F5
0008A800 9B06                       	dc.b	nD2, $06
0008A802 EC04                       	smpsPSGAlterVol     $04
0008A804 E701                       	dc.b	smpsNoAttack, $01
0008A806 EC07                       	smpsPSGAlterVol     $07
0008A808 8006                       	dc.b	nRst, $06
0008A80A E102                       	smpsAlterNote       $02
0008A80C 01                         	dc.b	$01
0008A80D E106                       	smpsAlterNote       $06
0008A80F 01                         	dc.b	$01
0008A810 E102                       	smpsAlterNote       $02
0008A812 01                         	dc.b	$01
0008A813 E1FF                       	smpsAlterNote       $FF
0008A815 01                         	dc.b	$01
0008A816 ECF5                       	smpsPSGAlterVol     $F5
0008A818 9B06                       	dc.b	nD2, $06
0008A81A EC04                       	smpsPSGAlterVol     $04
0008A81C E701                       	dc.b	smpsNoAttack, $01
0008A81E EC07                       	smpsPSGAlterVol     $07
0008A820 8003                       	dc.b	nRst, $03
0008A822 ECF5                       	smpsPSGAlterVol     $F5
0008A824 9B07                       	dc.b	nD2, $07
0008A826 EC0B                       	smpsPSGAlterVol     $0B
0008A828 8007                       	dc.b	nRst, $07
0008A82A E105                       	smpsAlterNote       $05
0008A82C 0101                       	dc.b	$01, $01
0008A82E E1FF                       	smpsAlterNote       $FF
0008A830 01                         	dc.b	$01
0008A831 E1FC                       	smpsAlterNote       $FC
0008A833 01                         	dc.b	$01
0008A834 E1FF                       	smpsAlterNote       $FF
0008A836 ECF5                       	smpsPSGAlterVol     $F5
0008A838 9B06                       	dc.b	nD2, $06
0008A83A EC0B                       	smpsPSGAlterVol     $0B
0008A83C 8004                       	dc.b	nRst, $04
0008A83E ECF5                       	smpsPSGAlterVol     $F5
0008A840 9B06                       	dc.b	nD2, $06
0008A842 EC04                       	smpsPSGAlterVol     $04
0008A844 E701                       	dc.b	smpsNoAttack, $01
0008A846 EC07                       	smpsPSGAlterVol     $07
0008A848 8006                       	dc.b	nRst, $06
0008A84A E105                       	smpsAlterNote       $05
0008A84C 01                         	dc.b	$01
0008A84D E106                       	smpsAlterNote       $06
0008A84F 01                         	dc.b	$01
0008A850 E102                       	smpsAlterNote       $02
0008A852 01                         	dc.b	$01
0008A853 E1FC                       	smpsAlterNote       $FC
0008A855 01                         	dc.b	$01
0008A856 E1FF                       	smpsAlterNote       $FF
0008A858 ECF5                       	smpsPSGAlterVol     $F5
0008A85A 9B06                       	dc.b	nD2, $06
0008A85C EC04                       	smpsPSGAlterVol     $04
0008A85E E701                       	dc.b	smpsNoAttack, $01
0008A860 EC07                       	smpsPSGAlterVol     $07
0008A862 8003                       	dc.b	nRst, $03
0008A864 ECF5                       	smpsPSGAlterVol     $F5
0008A866 9B06                       	dc.b	nD2, $06
0008A868 EC04                       	smpsPSGAlterVol     $04
0008A86A E701                       	dc.b	smpsNoAttack, $01
0008A86C EC07                       	smpsPSGAlterVol     $07
0008A86E 8006                       	dc.b	nRst, $06
0008A870 E102                       	smpsAlterNote       $02
0008A872 01                         	dc.b	$01
0008A873 E106                       	smpsAlterNote       $06
0008A875 01                         	dc.b	$01
0008A876 E105                       	smpsAlterNote       $05
0008A878 01                         	dc.b	$01
0008A879 E1FF                       	smpsAlterNote       $FF
0008A87B 01                         	dc.b	$01
0008A87C ECF5                       	smpsPSGAlterVol     $F5
0008A87E 9B07                       	dc.b	nD2, $07
0008A880 EC0B                       	smpsPSGAlterVol     $0B
0008A882 8004                       	dc.b	nRst, $04
0008A884 ECF5                       	smpsPSGAlterVol     $F5
0008A886 9B06                       	dc.b	nD2, $06
0008A888 EC0B                       	smpsPSGAlterVol     $0B
0008A88A 8007                       	dc.b	nRst, $07
0008A88C E105                       	smpsAlterNote       $05
0008A88E 0101                       	dc.b	$01, $01
0008A890 E102                       	smpsAlterNote       $02
0008A892 01                         	dc.b	$01
0008A893 E1FC                       	smpsAlterNote       $FC
0008A895 01                         	dc.b	$01
0008A896 E1FF                       	smpsAlterNote       $FF
0008A898 ECF5                       	smpsPSGAlterVol     $F5
0008A89A 9B06                       	dc.b	nD2, $06
0008A89C EC04                       	smpsPSGAlterVol     $04
0008A89E E701                       	dc.b	smpsNoAttack, $01
0008A8A0 EC07                       	smpsPSGAlterVol     $07
0008A8A2 8003                       	dc.b	nRst, $03
0008A8A4 ECF5                       	smpsPSGAlterVol     $F5
0008A8A6 9B06                       	dc.b	nD2, $06
0008A8A8 EC04                       	smpsPSGAlterVol     $04
0008A8AA E701                       	dc.b	smpsNoAttack, $01
0008A8AC EC07                       	smpsPSGAlterVol     $07
0008A8AE 8006                       	dc.b	nRst, $06
0008A8B0 E102                       	smpsAlterNote       $02
0008A8B2 01                         	dc.b	$01
0008A8B3 E106                       	smpsAlterNote       $06
0008A8B5 01                         	dc.b	$01
0008A8B6 E102                       	smpsAlterNote       $02
0008A8B8 01                         	dc.b	$01
0008A8B9 E1FF                       	smpsAlterNote       $FF
0008A8BB 01                         	dc.b	$01
0008A8BC ECF5                       	smpsPSGAlterVol     $F5
0008A8BE 9B06                       	dc.b	nD2, $06
0008A8C0 EC04                       	smpsPSGAlterVol     $04
0008A8C2 E701                       	dc.b	smpsNoAttack, $01
0008A8C4 EC07                       	smpsPSGAlterVol     $07
0008A8C6 8003                       	dc.b	nRst, $03
0008A8C8 ECF5                       	smpsPSGAlterVol     $F5
0008A8CA 9B07                       	dc.b	nD2, $07
0008A8CC E1FE                       	smpsAlterNote       $FE
0008A8CE 9706                       	dc.b	nBb1, $06
0008A8D0 EC04                       	smpsPSGAlterVol     $04
0008A8D2 E701                       	dc.b	smpsNoAttack, $01
0008A8D4 ECFC                       	smpsPSGAlterVol     $FC
0008A8D6 9703                       	dc.b	nBb1, $03
0008A8D8 EC04                       	smpsPSGAlterVol     $04
0008A8DA E701                       	dc.b	smpsNoAttack, $01
0008A8DC ECFC                       	smpsPSGAlterVol     $FC
0008A8DE 9702                       	dc.b	nBb1, $02
0008A8E0 EC04                       	smpsPSGAlterVol     $04
0008A8E2 E701                       	dc.b	smpsNoAttack, $01
0008A8E4 ECFC                       	smpsPSGAlterVol     $FC
0008A8E6 9606                       	dc.b	nA1, $06
0008A8E8 EC04                       	smpsPSGAlterVol     $04
0008A8EA E701                       	dc.b	smpsNoAttack, $01
0008A8EC EC07                       	smpsPSGAlterVol     $07
0008A8EE 8006                       	dc.b	nRst, $06
0008A8F0 E101                       	smpsAlterNote       $01
0008A8F2 01                         	dc.b	$01
0008A8F3 E107                       	smpsAlterNote       $07
0008A8F5 01                         	dc.b	$01
0008A8F6 E101                       	smpsAlterNote       $01
0008A8F8 01                         	dc.b	$01
0008A8F9 E1F8                       	smpsAlterNote       $F8
0008A8FB 01                         	dc.b	$01
0008A8FC E1F7                       	smpsAlterNote       $F7
0008A8FE 01                         	dc.b	$01
0008A8FF E1FC                       	smpsAlterNote       $FC
0008A901 01                         	dc.b	$01
0008A902 E106                       	smpsAlterNote       $06
0008A904 01                         	dc.b	$01
0008A905 E107                       	smpsAlterNote       $07
0008A907 01                         	dc.b	$01
0008A908 E101                       	smpsAlterNote       $01
0008A90A 01                         	dc.b	$01
0008A90B E1F8                       	smpsAlterNote       $F8
0008A90D 0101                       	dc.b	$01, $01
0008A90F E1FC                       	smpsAlterNote       $FC
0008A911 ECF5                       	smpsPSGAlterVol     $F5
0008A913 8F06                       	dc.b	nD1, $06
0008A915 EC04                       	smpsPSGAlterVol     $04
0008A917 E701                       	dc.b	smpsNoAttack, $01
0008A919 EC07                       	smpsPSGAlterVol     $07
0008A91B 8003                       	dc.b	nRst, $03
0008A91D ECF5                       	smpsPSGAlterVol     $F5
0008A91F 8F06                       	dc.b	nD1, $06
0008A921 EC04                       	smpsPSGAlterVol     $04
0008A923 E701                       	dc.b	smpsNoAttack, $01
0008A925 EC07                       	smpsPSGAlterVol     $07
0008A927 8006                       	dc.b	nRst, $06
0008A929 E1FF                       	smpsAlterNote       $FF
0008A92B 01                         	dc.b	$01
0008A92C E102                       	smpsAlterNote       $02
0008A92E 01                         	dc.b	$01
0008A92F E101                       	smpsAlterNote       $01
0008A931 01                         	dc.b	$01
0008A932 E1FC                       	smpsAlterNote       $FC
0008A934 01                         	dc.b	$01
0008A935 ECF5                       	smpsPSGAlterVol     $F5
0008A937 9007                       	dc.b	nEb1, $07
0008A939 EC0B                       	smpsPSGAlterVol     $0B
0008A93B 8004                       	dc.b	nRst, $04
0008A93D ECF5                       	smpsPSGAlterVol     $F5
0008A93F 9006                       	dc.b	nEb1, $06
0008A941 EC0B                       	smpsPSGAlterVol     $0B
0008A943 8007                       	dc.b	nRst, $07
0008A945 E103                       	smpsAlterNote       $03
0008A947 0101                       	dc.b	$01, $01
0008A949 E1FC                       	smpsAlterNote       $FC
0008A94B 01                         	dc.b	$01
0008A94C E1F9                       	smpsAlterNote       $F9
0008A94E 01                         	dc.b	$01
0008A94F E1FC                       	smpsAlterNote       $FC
0008A951 ECF5                       	smpsPSGAlterVol     $F5
0008A953 8F06                       	dc.b	nD1, $06
0008A955 EC04                       	smpsPSGAlterVol     $04
0008A957 E701                       	dc.b	smpsNoAttack, $01
0008A959 EC07                       	smpsPSGAlterVol     $07
0008A95B 8003                       	dc.b	nRst, $03
0008A95D ECF5                       	smpsPSGAlterVol     $F5
0008A95F 8F06                       	dc.b	nD1, $06
0008A961 EC04                       	smpsPSGAlterVol     $04
0008A963 E701                       	dc.b	smpsNoAttack, $01
0008A965 EC07                       	smpsPSGAlterVol     $07
0008A967 8006                       	dc.b	nRst, $06
0008A969 E1FF                       	smpsAlterNote       $FF
0008A96B 01                         	dc.b	$01
0008A96C E103                       	smpsAlterNote       $03
0008A96E 01                         	dc.b	$01
0008A96F E1FF                       	smpsAlterNote       $FF
0008A971 01                         	dc.b	$01
0008A972 E1F9                       	smpsAlterNote       $F9
0008A974 01                         	dc.b	$01
0008A975 E1FC                       	smpsAlterNote       $FC
0008A977 ECF5                       	smpsPSGAlterVol     $F5
0008A979 8F06                       	dc.b	nD1, $06
0008A97B EC04                       	smpsPSGAlterVol     $04
0008A97D E701                       	dc.b	smpsNoAttack, $01
0008A97F EC07                       	smpsPSGAlterVol     $07
0008A981 8003                       	dc.b	nRst, $03
0008A983 ECF5                       	smpsPSGAlterVol     $F5
0008A985 8F07                       	dc.b	nD1, $07
0008A987 EC0B                       	smpsPSGAlterVol     $0B
0008A989 8006                       	dc.b	nRst, $06
0008A98B E1FF                       	smpsAlterNote       $FF
0008A98D 01                         	dc.b	$01
0008A98E E102                       	smpsAlterNote       $02
0008A990 0101                       	dc.b	$01, $01
0008A992 E1FC                       	smpsAlterNote       $FC
0008A994 01                         	dc.b	$01
0008A995 ECF5                       	smpsPSGAlterVol     $F5
0008A997 8F07                       	dc.b	nD1, $07
0008A999 EC0B                       	smpsPSGAlterVol     $0B
0008A99B 8004                       	dc.b	nRst, $04
0008A99D ECF5                       	smpsPSGAlterVol     $F5
0008A99F 8F06                       	dc.b	nD1, $06
0008A9A1 EC04                       	smpsPSGAlterVol     $04
0008A9A3 E701                       	dc.b	smpsNoAttack, $01
0008A9A5 EC07                       	smpsPSGAlterVol     $07
0008A9A7 8006                       	dc.b	nRst, $06
0008A9A9 E101                       	smpsAlterNote       $01
0008A9AB 01                         	dc.b	$01
0008A9AC E102                       	smpsAlterNote       $02
0008A9AE 01                         	dc.b	$01
0008A9AF E1FF                       	smpsAlterNote       $FF
0008A9B1 01                         	dc.b	$01
0008A9B2 E1F9                       	smpsAlterNote       $F9
0008A9B4 01                         	dc.b	$01
0008A9B5 E1FC                       	smpsAlterNote       $FC
0008A9B7 ECF5                       	smpsPSGAlterVol     $F5
0008A9B9 9006                       	dc.b	nEb1, $06
0008A9BB EC04                       	smpsPSGAlterVol     $04
0008A9BD E701                       	dc.b	smpsNoAttack, $01
0008A9BF EC07                       	smpsPSGAlterVol     $07
0008A9C1 8003                       	dc.b	nRst, $03
0008A9C3 ECF5                       	smpsPSGAlterVol     $F5
0008A9C5 9006                       	dc.b	nEb1, $06
0008A9C7 EC04                       	smpsPSGAlterVol     $04
0008A9C9 E701                       	dc.b	smpsNoAttack, $01
0008A9CB EC07                       	smpsPSGAlterVol     $07
0008A9CD 8006                       	dc.b	nRst, $06
0008A9CF E100                       	smpsAlterNote       $00
0008A9D1 01                         	dc.b	$01
0008A9D2 E102                       	smpsAlterNote       $02
0008A9D4 01                         	dc.b	$01
0008A9D5 E100                       	smpsAlterNote       $00
0008A9D7 01                         	dc.b	$01
0008A9D8 E1FF                       	smpsAlterNote       $FF
0008A9DA 01                         	dc.b	$01
0008A9DB ECF5                       	smpsPSGAlterVol     $F5
0008A9DD 9B06                       	dc.b	nD2, $06
0008A9DF EC04                       	smpsPSGAlterVol     $04
0008A9E1 E701                       	dc.b	smpsNoAttack, $01
0008A9E3 EC07                       	smpsPSGAlterVol     $07
0008A9E5 8003                       	dc.b	nRst, $03
0008A9E7 ECF5                       	smpsPSGAlterVol     $F5
0008A9E9 9B07                       	dc.b	nD2, $07
0008A9EB EC0B                       	smpsPSGAlterVol     $0B
0008A9ED 8007                       	dc.b	nRst, $07
0008A9EF E105                       	smpsAlterNote       $05
0008A9F1 0101                       	dc.b	$01, $01
0008A9F3 E1FF                       	smpsAlterNote       $FF
0008A9F5 01                         	dc.b	$01
0008A9F6 E1FC                       	smpsAlterNote       $FC
0008A9F8 01                         	dc.b	$01
0008A9F9 E1FF                       	smpsAlterNote       $FF
0008A9FB ECF5                       	smpsPSGAlterVol     $F5
0008A9FD 9B06                       	dc.b	nD2, $06
0008A9FF EC0B                       	smpsPSGAlterVol     $0B
0008AA01 8004                       	dc.b	nRst, $04
0008AA03 ECF5                       	smpsPSGAlterVol     $F5
0008AA05 9B06                       	dc.b	nD2, $06
0008AA07 EC04                       	smpsPSGAlterVol     $04
0008AA09 E701                       	dc.b	smpsNoAttack, $01
0008AA0B EC07                       	smpsPSGAlterVol     $07
0008AA0D 8006                       	dc.b	nRst, $06
0008AA0F E102                       	smpsAlterNote       $02
0008AA11 01                         	dc.b	$01
0008AA12 E106                       	smpsAlterNote       $06
0008AA14 01                         	dc.b	$01
0008AA15 E102                       	smpsAlterNote       $02
0008AA17 01                         	dc.b	$01
0008AA18 E1FC                       	smpsAlterNote       $FC
0008AA1A 01                         	dc.b	$01
0008AA1B E1FF                       	smpsAlterNote       $FF
0008AA1D ECF5                       	smpsPSGAlterVol     $F5
0008AA1F 9B06                       	dc.b	nD2, $06
0008AA21 EC04                       	smpsPSGAlterVol     $04
0008AA23 E701                       	dc.b	smpsNoAttack, $01
0008AA25 EC07                       	smpsPSGAlterVol     $07
0008AA27 8003                       	dc.b	nRst, $03
0008AA29 ECF5                       	smpsPSGAlterVol     $F5
0008AA2B 9B07                       	dc.b	nD2, $07
0008AA2D EC0B                       	smpsPSGAlterVol     $0B
0008AA2F 8006                       	dc.b	nRst, $06
0008AA31 E102                       	smpsAlterNote       $02
0008AA33 01                         	dc.b	$01
0008AA34 E105                       	smpsAlterNote       $05
0008AA36 0101                       	dc.b	$01, $01
0008AA38 E1FF                       	smpsAlterNote       $FF
0008AA3A 01                         	dc.b	$01
0008AA3B ECF5                       	smpsPSGAlterVol     $F5
0008AA3D 9B07                       	dc.b	nD2, $07
0008AA3F EC0B                       	smpsPSGAlterVol     $0B
0008AA41 8004                       	dc.b	nRst, $04
0008AA43 ECF5                       	smpsPSGAlterVol     $F5
0008AA45 9B06                       	dc.b	nD2, $06
0008AA47 EC0B                       	smpsPSGAlterVol     $0B
0008AA49 8007                       	dc.b	nRst, $07
0008AA4B E105                       	smpsAlterNote       $05
0008AA4D 0101                       	dc.b	$01, $01
0008AA4F E102                       	smpsAlterNote       $02
0008AA51 01                         	dc.b	$01
0008AA52 E1FC                       	smpsAlterNote       $FC
0008AA54 01                         	dc.b	$01
0008AA55 E1FF                       	smpsAlterNote       $FF
0008AA57 ECF5                       	smpsPSGAlterVol     $F5
0008AA59 9B06                       	dc.b	nD2, $06
0008AA5B EC04                       	smpsPSGAlterVol     $04
0008AA5D E701                       	dc.b	smpsNoAttack, $01
0008AA5F EC07                       	smpsPSGAlterVol     $07
0008AA61 8003                       	dc.b	nRst, $03
0008AA63 ECF5                       	smpsPSGAlterVol     $F5
0008AA65 9B06                       	dc.b	nD2, $06
0008AA67 EC04                       	smpsPSGAlterVol     $04
0008AA69 E701                       	dc.b	smpsNoAttack, $01
0008AA6B EC07                       	smpsPSGAlterVol     $07
0008AA6D 8006                       	dc.b	nRst, $06
0008AA6F E102                       	smpsAlterNote       $02
0008AA71 01                         	dc.b	$01
0008AA72 E106                       	smpsAlterNote       $06
0008AA74 01                         	dc.b	$01
0008AA75 E102                       	smpsAlterNote       $02
0008AA77 01                         	dc.b	$01
0008AA78 E1FF                       	smpsAlterNote       $FF
0008AA7A 01                         	dc.b	$01
0008AA7B ECF5                       	smpsPSGAlterVol     $F5
0008AA7D 9B06                       	dc.b	nD2, $06
0008AA7F EC04                       	smpsPSGAlterVol     $04
0008AA81 E701                       	dc.b	smpsNoAttack, $01
0008AA83 EC07                       	smpsPSGAlterVol     $07
0008AA85 8003                       	dc.b	nRst, $03
0008AA87 ECF5                       	smpsPSGAlterVol     $F5
0008AA89 9B07                       	dc.b	nD2, $07
0008AA8B EC0B                       	smpsPSGAlterVol     $0B
0008AA8D 8007                       	dc.b	nRst, $07
0008AA8F E105                       	smpsAlterNote       $05
0008AA91 0101                       	dc.b	$01, $01
0008AA93 E1FF                       	smpsAlterNote       $FF
0008AA95 01                         	dc.b	$01
0008AA96 E1FC                       	smpsAlterNote       $FC
0008AA98 01                         	dc.b	$01
0008AA99 E1FF                       	smpsAlterNote       $FF
0008AA9B ECF5                       	smpsPSGAlterVol     $F5
0008AA9D 9B06                       	dc.b	nD2, $06
0008AA9F EC0B                       	smpsPSGAlterVol     $0B
0008AAA1 8004                       	dc.b	nRst, $04
0008AAA3 ECF5                       	smpsPSGAlterVol     $F5
0008AAA5 9B06                       	dc.b	nD2, $06
0008AAA7 EC04                       	smpsPSGAlterVol     $04
0008AAA9 E701                       	dc.b	smpsNoAttack, $01
0008AAAB EC07                       	smpsPSGAlterVol     $07
0008AAAD 8006                       	dc.b	nRst, $06
0008AAAF E102                       	smpsAlterNote       $02
0008AAB1 01                         	dc.b	$01
0008AAB2 E106                       	smpsAlterNote       $06
0008AAB4 01                         	dc.b	$01
0008AAB5 E102                       	smpsAlterNote       $02
0008AAB7 01                         	dc.b	$01
0008AAB8 E1FC                       	smpsAlterNote       $FC
0008AABA 01                         	dc.b	$01
0008AABB E1FF                       	smpsAlterNote       $FF
0008AABD ECF5                       	smpsPSGAlterVol     $F5
0008AABF 9B06                       	dc.b	nD2, $06
0008AAC1 EC04                       	smpsPSGAlterVol     $04
0008AAC3 E701                       	dc.b	smpsNoAttack, $01
0008AAC5 EC07                       	smpsPSGAlterVol     $07
0008AAC7 8003                       	dc.b	nRst, $03
0008AAC9 ECF5                       	smpsPSGAlterVol     $F5
0008AACB 9B06                       	dc.b	nD2, $06
0008AACD EC04                       	smpsPSGAlterVol     $04
0008AACF E701                       	dc.b	smpsNoAttack, $01
0008AAD1 EC07                       	smpsPSGAlterVol     $07
0008AAD3 8006                       	dc.b	nRst, $06
0008AAD5 E102                       	smpsAlterNote       $02
0008AAD7 01                         	dc.b	$01
0008AAD8 E106                       	smpsAlterNote       $06
0008AADA 01                         	dc.b	$01
0008AADB E105                       	smpsAlterNote       $05
0008AADD 01                         	dc.b	$01
0008AADE E1FF                       	smpsAlterNote       $FF
0008AAE0 01                         	dc.b	$01
0008AAE1 ECF5                       	smpsPSGAlterVol     $F5
0008AAE3 9B07                       	dc.b	nD2, $07
0008AAE5 EC0B                       	smpsPSGAlterVol     $0B
0008AAE7 8004                       	dc.b	nRst, $04
0008AAE9 ECF5                       	smpsPSGAlterVol     $F5
0008AAEB 9B06                       	dc.b	nD2, $06
0008AAED EC0B                       	smpsPSGAlterVol     $0B
0008AAEF 8007                       	dc.b	nRst, $07
0008AAF1 E105                       	smpsAlterNote       $05
0008AAF3 0101                       	dc.b	$01, $01
0008AAF5 E101                       	smpsAlterNote       $01
0008AAF7 01                         	dc.b	$01
0008AAF8 E1FB                       	smpsAlterNote       $FB
0008AAFA 01                         	dc.b	$01
0008AAFB E1FE                       	smpsAlterNote       $FE
0008AAFD ECF5                       	smpsPSGAlterVol     $F5
0008AAFF 9A06                       	dc.b	nCs2, $06
0008AB01 EC04                       	smpsPSGAlterVol     $04
0008AB03 E701                       	dc.b	smpsNoAttack, $01
0008AB05 EC07                       	smpsPSGAlterVol     $07
0008AB07 8003                       	dc.b	nRst, $03
0008AB09 ECF5                       	smpsPSGAlterVol     $F5
0008AB0B 9A06                       	dc.b	nCs2, $06
0008AB0D EC04                       	smpsPSGAlterVol     $04
0008AB0F E701                       	dc.b	smpsNoAttack, $01
0008AB11 EC07                       	smpsPSGAlterVol     $07
0008AB13 8003                       	dc.b	nRst, $03
0008AB15 E1FC                       	smpsAlterNote       $FC
0008AB17 ECF5                       	smpsPSGAlterVol     $F5
0008AB19 8F07                       	dc.b	nD1, $07
0008AB1B EC0B                       	smpsPSGAlterVol     $0B
0008AB1D 8006                       	dc.b	nRst, $06
0008AB1F E1FF                       	smpsAlterNote       $FF
0008AB21 01                         	dc.b	$01
0008AB22 E103                       	smpsAlterNote       $03
0008AB24 01                         	dc.b	$01
0008AB25 E102                       	smpsAlterNote       $02
0008AB27 01                         	dc.b	$01
0008AB28 E1FC                       	smpsAlterNote       $FC
0008AB2A 01                         	dc.b	$01
0008AB2B E1F8                       	smpsAlterNote       $F8
0008AB2D 01                         	dc.b	$01
0008AB2E E1FC                       	smpsAlterNote       $FC
0008AB30 01                         	dc.b	$01
0008AB31 E1FF                       	smpsAlterNote       $FF
0008AB33 01                         	dc.b	$01
0008AB34 E103                       	smpsAlterNote       $03
0008AB36 01                         	dc.b	$01
0008AB37 E1FC                       	smpsAlterNote       $FC
0008AB39 ECF5                       	smpsPSGAlterVol     $F5
0008AB3B 8F03 8F03                  	dc.b	nD1, $03, nD1, $03
0008AB3F EC04                       	smpsPSGAlterVol     $04
0008AB41 E701                       	dc.b	smpsNoAttack, $01
0008AB43 EC07                       	smpsPSGAlterVol     $07
0008AB45 8009                       	dc.b	nRst, $09
0008AB47 E1FF                       	smpsAlterNote       $FF
0008AB49 01                         	dc.b	$01
0008AB4A E103                       	smpsAlterNote       $03
0008AB4C 01                         	dc.b	$01
0008AB4D E102                       	smpsAlterNote       $02
0008AB4F 01                         	dc.b	$01
0008AB50 E1FC                       	smpsAlterNote       $FC
0008AB52 01                         	dc.b	$01
0008AB53 E1F8                       	smpsAlterNote       $F8
0008AB55 01                         	dc.b	$01
0008AB56 E1FC                       	smpsAlterNote       $FC
0008AB58 01                         	dc.b	$01
0008AB59 E1FF                       	smpsAlterNote       $FF
0008AB5B 01                         	dc.b	$01
0008AB5C E103                       	smpsAlterNote       $03
0008AB5E 01                         	dc.b	$01
0008AB5F E1FF                       	smpsAlterNote       $FF
0008AB61 01                         	dc.b	$01
0008AB62 E1F9                       	smpsAlterNote       $F9
0008AB64 01                         	dc.b	$01
0008AB65 E1F8                       	smpsAlterNote       $F8
0008AB67 01                         	dc.b	$01
0008AB68 E1FC                       	smpsAlterNote       $FC
0008AB6A 01                         	dc.b	$01
0008AB6B E102                       	smpsAlterNote       $02
0008AB6D 0101                       	dc.b	$01, $01
0008AB6F E1FF                       	smpsAlterNote       $FF
0008AB71 01                         	dc.b	$01
0008AB72 E1FC                       	smpsAlterNote       $FC
0008AB74 ECF5                       	smpsPSGAlterVol     $F5
0008AB76 8F02                       	dc.b	nD1, $02
0008AB78 EC04                       	smpsPSGAlterVol     $04
0008AB7A E701                       	dc.b	smpsNoAttack, $01
0008AB7C ECFC                       	smpsPSGAlterVol     $FC
0008AB7E E1FB                       	smpsAlterNote       $FB
0008AB80 8D06                       	dc.b	nC1, $06
0008AB82 EC04                       	smpsPSGAlterVol     $04
0008AB84 E701                       	dc.b	smpsNoAttack, $01
0008AB86 EC07                       	smpsPSGAlterVol     $07
0008AB88 8006                       	dc.b	nRst, $06
0008AB8A E1FE                       	smpsAlterNote       $FE
0008AB8C 01                         	dc.b	$01
0008AB8D E102                       	smpsAlterNote       $02
0008AB8F 01                         	dc.b	$01
0008AB90 E1FE                       	smpsAlterNote       $FE
0008AB92 01                         	dc.b	$01
0008AB93 E1FB                       	smpsAlterNote       $FB
0008AB95 01                         	dc.b	$01
0008AB96 E1F7                       	smpsAlterNote       $F7
0008AB98 01                         	dc.b	$01
0008AB99 E1FB                       	smpsAlterNote       $FB
0008AB9B 01                         	dc.b	$01
0008AB9C E101                       	smpsAlterNote       $01
0008AB9E 01                         	dc.b	$01
0008AB9F E102                       	smpsAlterNote       $02
0008ABA1 01                         	dc.b	$01
0008ABA2 E1FB                       	smpsAlterNote       $FB
0008ABA4 ECF5                       	smpsPSGAlterVol     $F5
0008ABA6 8D02                       	dc.b	nC1, $02
0008ABA8 EC04                       	smpsPSGAlterVol     $04
0008ABAA E701                       	dc.b	smpsNoAttack, $01
0008ABAC E1FC                       	smpsAlterNote       $FC
0008ABAE ECFC                       	smpsPSGAlterVol     $FC
0008ABB0 8F0D                       	dc.b	nD1, $0D
0008ABB2 E1FF                       	smpsAlterNote       $FF
0008ABB4 E701                       	dc.b	smpsNoAttack, $01
0008ABB6 E103                       	smpsAlterNote       $03
0008ABB8 E701                       	dc.b	smpsNoAttack, $01
0008ABBA E1FF                       	smpsAlterNote       $FF
0008ABBC E701                       	dc.b	smpsNoAttack, $01
0008ABBE E1FC                       	smpsAlterNote       $FC
0008ABC0 E701                       	dc.b	smpsNoAttack, $01
0008ABC2 E1F8                       	smpsAlterNote       $F8
0008ABC4 E701                       	dc.b	smpsNoAttack, $01
0008ABC6 E1FC                       	smpsAlterNote       $FC
0008ABC8 E701                       	dc.b	smpsNoAttack, $01
0008ABCA E102                       	smpsAlterNote       $02
0008ABCC E701                       	dc.b	smpsNoAttack, $01
0008ABCE E103                       	smpsAlterNote       $03
0008ABD0 E701                       	dc.b	smpsNoAttack, $01
0008ABD2 E1FF                       	smpsAlterNote       $FF
0008ABD4 E701                       	dc.b	smpsNoAttack, $01
0008ABD6 E1F9                       	smpsAlterNote       $F9
0008ABD8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ABDC E1FC                       	smpsAlterNote       $FC
0008ABDE E701                       	dc.b	smpsNoAttack, $01
0008ABE0 E102                       	smpsAlterNote       $02
0008ABE2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ABE6 E1FC                       	smpsAlterNote       $FC
0008ABE8 E701                       	dc.b	smpsNoAttack, $01
0008ABEA E1F9                       	smpsAlterNote       $F9
0008ABEC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ABF0 E1FF                       	smpsAlterNote       $FF
0008ABF2 EC04                       	smpsPSGAlterVol     $04
0008ABF4 E701                       	dc.b	smpsNoAttack, $01
0008ABF6 EC07                       	smpsPSGAlterVol     $07
0008ABF8 E103                       	smpsAlterNote       $03
0008ABFA 8001                       	dc.b	nRst, $01
0008ABFC E102                       	smpsAlterNote       $02
0008ABFE 01                         	dc.b	$01
0008ABFF E1FB                       	smpsAlterNote       $FB
0008AC01 01                         	dc.b	$01
0008AC02 E1F7                       	smpsAlterNote       $F7
0008AC04 01                         	dc.b	$01
0008AC05 E1FB                       	smpsAlterNote       $FB
0008AC07 01                         	dc.b	$01
0008AC08 E102                       	smpsAlterNote       $02
0008AC0A 01                         	dc.b	$01
0008AC0B E103                       	smpsAlterNote       $03
0008AC0D 01                         	dc.b	$01
0008AC0E E1FB                       	smpsAlterNote       $FB
0008AC10 ECF5                       	smpsPSGAlterVol     $F5
0008AC12 8E06                       	dc.b	nCs1, $06
0008AC14 EC04                       	smpsPSGAlterVol     $04
0008AC16 E701                       	dc.b	smpsNoAttack, $01
0008AC18 EC07                       	smpsPSGAlterVol     $07
0008AC1A 8003                       	dc.b	nRst, $03
0008AC1C ECF5                       	smpsPSGAlterVol     $F5
0008AC1E 8E06                       	dc.b	nCs1, $06
0008AC20 EC04                       	smpsPSGAlterVol     $04
0008AC22 E701                       	dc.b	smpsNoAttack, $01
0008AC24 EC07                       	smpsPSGAlterVol     $07
0008AC26 8006                       	dc.b	nRst, $06
0008AC28 E1FE                       	smpsAlterNote       $FE
0008AC2A 01                         	dc.b	$01
0008AC2B E102                       	smpsAlterNote       $02
0008AC2D 01                         	dc.b	$01
0008AC2E E1FE                       	smpsAlterNote       $FE
0008AC30 01                         	dc.b	$01
0008AC31 E1F9                       	smpsAlterNote       $F9
0008AC33 01                         	dc.b	$01
0008AC34 E1FC                       	smpsAlterNote       $FC
0008AC36 ECF5                       	smpsPSGAlterVol     $F5
0008AC38 8F06                       	dc.b	nD1, $06
0008AC3A EC04                       	smpsPSGAlterVol     $04
0008AC3C E701                       	dc.b	smpsNoAttack, $01
0008AC3E EC07                       	smpsPSGAlterVol     $07
0008AC40 8003                       	dc.b	nRst, $03
0008AC42 ECF5                       	smpsPSGAlterVol     $F5
0008AC44 8F07                       	dc.b	nD1, $07
0008AC46 EC0B                       	smpsPSGAlterVol     $0B
0008AC48 8006                       	dc.b	nRst, $06
0008AC4A E1FF                       	smpsAlterNote       $FF
0008AC4C 01                         	dc.b	$01
0008AC4D E102                       	smpsAlterNote       $02
0008AC4F 0101                       	dc.b	$01, $01
0008AC51 E1FB                       	smpsAlterNote       $FB
0008AC53 01                         	dc.b	$01
0008AC54 ECF5                       	smpsPSGAlterVol     $F5
0008AC56 8E07                       	dc.b	nCs1, $07
0008AC58 EC0B                       	smpsPSGAlterVol     $0B
0008AC5A 8004                       	dc.b	nRst, $04
0008AC5C ECF5                       	smpsPSGAlterVol     $F5
0008AC5E 8E06                       	dc.b	nCs1, $06
0008AC60 EC04                       	smpsPSGAlterVol     $04
0008AC62 E701                       	dc.b	smpsNoAttack, $01
0008AC64 EC07                       	smpsPSGAlterVol     $07
0008AC66 8006                       	dc.b	nRst, $06
0008AC68 E101                       	smpsAlterNote       $01
0008AC6A 01                         	dc.b	$01
0008AC6B E102                       	smpsAlterNote       $02
0008AC6D 01                         	dc.b	$01
0008AC6E E1FE                       	smpsAlterNote       $FE
0008AC70 01                         	dc.b	$01
0008AC71 E1F8                       	smpsAlterNote       $F8
0008AC73 01                         	dc.b	$01
0008AC74 E1FB                       	smpsAlterNote       $FB
0008AC76 ECF5                       	smpsPSGAlterVol     $F5
0008AC78 8E06                       	dc.b	nCs1, $06
0008AC7A EC04                       	smpsPSGAlterVol     $04
0008AC7C E701                       	dc.b	smpsNoAttack, $01
0008AC7E EC07                       	smpsPSGAlterVol     $07
0008AC80 8003                       	dc.b	nRst, $03
0008AC82 ECF5                       	smpsPSGAlterVol     $F5
0008AC84 8E06                       	dc.b	nCs1, $06
0008AC86 EC04                       	smpsPSGAlterVol     $04
0008AC88 E701                       	dc.b	smpsNoAttack, $01
0008AC8A EC07                       	smpsPSGAlterVol     $07
0008AC8C 8004                       	dc.b	nRst, $04
0008AC8E E1FC                       	smpsAlterNote       $FC
0008AC90 ECF5                       	smpsPSGAlterVol     $F5
0008AC92 8F06                       	dc.b	nD1, $06
0008AC94 EC0B                       	smpsPSGAlterVol     $0B
0008AC96 8006                       	dc.b	nRst, $06
0008AC98 E1FF                       	smpsAlterNote       $FF
0008AC9A 01                         	dc.b	$01
0008AC9B E102                       	smpsAlterNote       $02
0008AC9D 0101                       	dc.b	$01, $01
0008AC9F E1FC                       	smpsAlterNote       $FC
0008ACA1 01                         	dc.b	$01
0008ACA2 E1F8                       	smpsAlterNote       $F8
0008ACA4 01                         	dc.b	$01
0008ACA5 E1F9                       	smpsAlterNote       $F9
0008ACA7 01                         	dc.b	$01
0008ACA8 E1FF                       	smpsAlterNote       $FF
0008ACAA 01                         	dc.b	$01
0008ACAB E103                       	smpsAlterNote       $03
0008ACAD 01                         	dc.b	$01
0008ACAE E1FC                       	smpsAlterNote       $FC
0008ACB0 ECF5                       	smpsPSGAlterVol     $F5
0008ACB2 8F03 8F03                  	dc.b	nD1, $03, nD1, $03
0008ACB6 EC04                       	smpsPSGAlterVol     $04
0008ACB8 E701                       	dc.b	smpsNoAttack, $01
0008ACBA EC07                       	smpsPSGAlterVol     $07
0008ACBC 8009                       	dc.b	nRst, $09
0008ACBE E1FF                       	smpsAlterNote       $FF
0008ACC0 01                         	dc.b	$01
0008ACC1 E102                       	smpsAlterNote       $02
0008ACC3 0101                       	dc.b	$01, $01
0008ACC5 E1FC                       	smpsAlterNote       $FC
0008ACC7 01                         	dc.b	$01
0008ACC8 E1F8                       	smpsAlterNote       $F8
0008ACCA 01                         	dc.b	$01
0008ACCB E1F9                       	smpsAlterNote       $F9
0008ACCD 01                         	dc.b	$01
0008ACCE E1FF                       	smpsAlterNote       $FF
0008ACD0 01                         	dc.b	$01
0008ACD1 E103                       	smpsAlterNote       $03
0008ACD3 01                         	dc.b	$01
0008ACD4 E1FF                       	smpsAlterNote       $FF
0008ACD6 01                         	dc.b	$01
0008ACD7 E1FC                       	smpsAlterNote       $FC
0008ACD9 01                         	dc.b	$01
0008ACDA E1F8                       	smpsAlterNote       $F8
0008ACDC 01                         	dc.b	$01
0008ACDD E1FC                       	smpsAlterNote       $FC
0008ACDF 01                         	dc.b	$01
0008ACE0 E102                       	smpsAlterNote       $02
0008ACE2 01                         	dc.b	$01
0008ACE3 E103                       	smpsAlterNote       $03
0008ACE5 01                         	dc.b	$01
0008ACE6 E1FF                       	smpsAlterNote       $FF
0008ACE8 01                         	dc.b	$01
0008ACE9 E1FC                       	smpsAlterNote       $FC
0008ACEB ECF5                       	smpsPSGAlterVol     $F5
0008ACED 8F03                       	dc.b	nD1, $03
0008ACEF E1FB                       	smpsAlterNote       $FB
0008ACF1 8D06                       	dc.b	nC1, $06
0008ACF3 EC04                       	smpsPSGAlterVol     $04
0008ACF5 E701                       	dc.b	smpsNoAttack, $01
0008ACF7 EC07                       	smpsPSGAlterVol     $07
0008ACF9 8006                       	dc.b	nRst, $06
0008ACFB E1FE                       	smpsAlterNote       $FE
0008ACFD 01                         	dc.b	$01
0008ACFE E102                       	smpsAlterNote       $02
0008AD00 01                         	dc.b	$01
0008AD01 E101                       	smpsAlterNote       $01
0008AD03 01                         	dc.b	$01
0008AD04 E1FB                       	smpsAlterNote       $FB
0008AD06 01                         	dc.b	$01
0008AD07 E1F7                       	smpsAlterNote       $F7
0008AD09 01                         	dc.b	$01
0008AD0A E1FB                       	smpsAlterNote       $FB
0008AD0C 01                         	dc.b	$01
0008AD0D E1FE                       	smpsAlterNote       $FE
0008AD0F 01                         	dc.b	$01
0008AD10 E102                       	smpsAlterNote       $02
0008AD12 01                         	dc.b	$01
0008AD13 E1FB                       	smpsAlterNote       $FB
0008AD15 ECF5                       	smpsPSGAlterVol     $F5
0008AD17 8D03                       	dc.b	nC1, $03
0008AD19 E1FC                       	smpsAlterNote       $FC
0008AD1B 8F0D                       	dc.b	nD1, $0D
0008AD1D E1FF                       	smpsAlterNote       $FF
0008AD1F E701                       	dc.b	smpsNoAttack, $01
0008AD21 E103                       	smpsAlterNote       $03
0008AD23 E701                       	dc.b	smpsNoAttack, $01
0008AD25 E1FF                       	smpsAlterNote       $FF
0008AD27 E701                       	dc.b	smpsNoAttack, $01
0008AD29 E1FC                       	smpsAlterNote       $FC
0008AD2B E701                       	dc.b	smpsNoAttack, $01
0008AD2D E1F8                       	smpsAlterNote       $F8
0008AD2F E701                       	dc.b	smpsNoAttack, $01
0008AD31 E1FC                       	smpsAlterNote       $FC
0008AD33 E701                       	dc.b	smpsNoAttack, $01
0008AD35 E102                       	smpsAlterNote       $02
0008AD37 E701                       	dc.b	smpsNoAttack, $01
0008AD39 E103                       	smpsAlterNote       $03
0008AD3B E701                       	dc.b	smpsNoAttack, $01
0008AD3D E1FF                       	smpsAlterNote       $FF
0008AD3F E701                       	dc.b	smpsNoAttack, $01
0008AD41 E1F9                       	smpsAlterNote       $F9
0008AD43 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AD47 E1FC                       	smpsAlterNote       $FC
0008AD49 E701                       	dc.b	smpsNoAttack, $01
0008AD4B E102                       	smpsAlterNote       $02
0008AD4D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AD51 E1FF                       	smpsAlterNote       $FF
0008AD53 E701                       	dc.b	smpsNoAttack, $01
0008AD55 E1F9                       	smpsAlterNote       $F9
0008AD57 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008AD5B E1FF                       	smpsAlterNote       $FF
0008AD5D EC04                       	smpsPSGAlterVol     $04
0008AD5F E701                       	dc.b	smpsNoAttack, $01
0008AD61 EC07                       	smpsPSGAlterVol     $07
0008AD63 E103                       	smpsAlterNote       $03
0008AD65 8001                       	dc.b	nRst, $01
0008AD67 E102                       	smpsAlterNote       $02
0008AD69 01                         	dc.b	$01
0008AD6A E1FB                       	smpsAlterNote       $FB
0008AD6C 01                         	dc.b	$01
0008AD6D E1F7                       	smpsAlterNote       $F7
0008AD6F 01                         	dc.b	$01
0008AD70 E1FB                       	smpsAlterNote       $FB
0008AD72 01                         	dc.b	$01
0008AD73 E1FF                       	smpsAlterNote       $FF
0008AD75 01                         	dc.b	$01
0008AD76 E103                       	smpsAlterNote       $03
0008AD78 01                         	dc.b	$01
0008AD79 E1FB                       	smpsAlterNote       $FB
0008AD7B ECF5                       	smpsPSGAlterVol     $F5
0008AD7D 8E06                       	dc.b	nCs1, $06
0008AD7F EC04                       	smpsPSGAlterVol     $04
0008AD81 E701                       	dc.b	smpsNoAttack, $01
0008AD83 EC07                       	smpsPSGAlterVol     $07
0008AD85 8003                       	dc.b	nRst, $03
0008AD87 ECF5                       	smpsPSGAlterVol     $F5
0008AD89 8E06                       	dc.b	nCs1, $06
0008AD8B EC04                       	smpsPSGAlterVol     $04
0008AD8D E701                       	dc.b	smpsNoAttack, $01
0008AD8F EC07                       	smpsPSGAlterVol     $07
0008AD91 8006                       	dc.b	nRst, $06
0008AD93 E1FE                       	smpsAlterNote       $FE
0008AD95 01                         	dc.b	$01
0008AD96 E102                       	smpsAlterNote       $02
0008AD98 01                         	dc.b	$01
0008AD99 E1FE                       	smpsAlterNote       $FE
0008AD9B 01                         	dc.b	$01
0008AD9C E1FC                       	smpsAlterNote       $FC
0008AD9E 01                         	dc.b	$01
0008AD9F ECF5                       	smpsPSGAlterVol     $F5
0008ADA1 8F06                       	dc.b	nD1, $06
0008ADA3 EC04                       	smpsPSGAlterVol     $04
0008ADA5 E701                       	dc.b	smpsNoAttack, $01
0008ADA7 EC07                       	smpsPSGAlterVol     $07
0008ADA9 8003                       	dc.b	nRst, $03
0008ADAB ECF5                       	smpsPSGAlterVol     $F5
0008ADAD 8F07                       	dc.b	nD1, $07
0008ADAF EC0B                       	smpsPSGAlterVol     $0B
0008ADB1 8007                       	dc.b	nRst, $07
0008ADB3 E102                       	smpsAlterNote       $02
0008ADB5 0101                       	dc.b	$01, $01
0008ADB7 E1FB                       	smpsAlterNote       $FB
0008ADB9 01                         	dc.b	$01
0008ADBA E1F8                       	smpsAlterNote       $F8
0008ADBC 01                         	dc.b	$01
0008ADBD E1FB                       	smpsAlterNote       $FB
0008ADBF ECF5                       	smpsPSGAlterVol     $F5
0008ADC1 8E06                       	dc.b	nCs1, $06
0008ADC3 EC0B                       	smpsPSGAlterVol     $0B
0008ADC5 8004                       	dc.b	nRst, $04
0008ADC7 ECF5                       	smpsPSGAlterVol     $F5
0008ADC9 8E06                       	dc.b	nCs1, $06
0008ADCB EC04                       	smpsPSGAlterVol     $04
0008ADCD E701                       	dc.b	smpsNoAttack, $01
0008ADCF EC07                       	smpsPSGAlterVol     $07
0008ADD1 8006                       	dc.b	nRst, $06
0008ADD3 E1FE                       	smpsAlterNote       $FE
0008ADD5 01                         	dc.b	$01
0008ADD6 E102                       	smpsAlterNote       $02
0008ADD8 01                         	dc.b	$01
0008ADD9 E1FE                       	smpsAlterNote       $FE
0008ADDB 01                         	dc.b	$01
0008ADDC E1F9                       	smpsAlterNote       $F9
0008ADDE 01                         	dc.b	$01
0008ADDF E1FC                       	smpsAlterNote       $FC
0008ADE1 ECF5                       	smpsPSGAlterVol     $F5
0008ADE3 8F06                       	dc.b	nD1, $06
0008ADE5 EC04                       	smpsPSGAlterVol     $04
0008ADE7 E701                       	dc.b	smpsNoAttack, $01
0008ADE9 EC07                       	smpsPSGAlterVol     $07
0008ADEB 8003                       	dc.b	nRst, $03
0008ADED ECF5                       	smpsPSGAlterVol     $F5
0008ADEF 8F06                       	dc.b	nD1, $06
0008ADF1 EC04                       	smpsPSGAlterVol     $04
0008ADF3 E701                       	dc.b	smpsNoAttack, $01
0008ADF5 EC07                       	smpsPSGAlterVol     $07
0008ADF7 8006                       	dc.b	nRst, $06
0008ADF9 E1FF                       	smpsAlterNote       $FF
0008ADFB 01                         	dc.b	$01
0008ADFC E103                       	smpsAlterNote       $03
0008ADFE 01                         	dc.b	$01
0008ADFF E102                       	smpsAlterNote       $02
0008AE01 01                         	dc.b	$01
0008AE02 E1FB                       	smpsAlterNote       $FB
0008AE04 01                         	dc.b	$01
0008AE05 ECF5                       	smpsPSGAlterVol     $F5
0008AE07 8E07                       	dc.b	nCs1, $07
0008AE09 EC0B                       	smpsPSGAlterVol     $0B
0008AE0B 8004                       	dc.b	nRst, $04
0008AE0D ECF5                       	smpsPSGAlterVol     $F5
0008AE0F 8E06                       	dc.b	nCs1, $06
0008AE11 EC0B                       	smpsPSGAlterVol     $0B
0008AE13 8007                       	dc.b	nRst, $07
0008AE15 E101                       	smpsAlterNote       $01
0008AE17 0101                       	dc.b	$01, $01
0008AE19 E1FE                       	smpsAlterNote       $FE
0008AE1B 01                         	dc.b	$01
0008AE1C E1F9                       	smpsAlterNote       $F9
0008AE1E 01                         	dc.b	$01
0008AE1F E1FC                       	smpsAlterNote       $FC
0008AE21 ECF5                       	smpsPSGAlterVol     $F5
0008AE23 8F06                       	dc.b	nD1, $06
0008AE25 EC04                       	smpsPSGAlterVol     $04
0008AE27 E701                       	dc.b	smpsNoAttack, $01
0008AE29 EC07                       	smpsPSGAlterVol     $07
0008AE2B 8003                       	dc.b	nRst, $03
0008AE2D ECF5                       	smpsPSGAlterVol     $F5
0008AE2F 8F06                       	dc.b	nD1, $06
0008AE31 EC04                       	smpsPSGAlterVol     $04
0008AE33 E701                       	dc.b	smpsNoAttack, $01
0008AE35 EC07                       	smpsPSGAlterVol     $07
0008AE37 8006                       	dc.b	nRst, $06
0008AE39 E1FF                       	smpsAlterNote       $FF
0008AE3B 01                         	dc.b	$01
0008AE3C E103                       	smpsAlterNote       $03
0008AE3E 01                         	dc.b	$01
0008AE3F E1FF                       	smpsAlterNote       $FF
0008AE41 01                         	dc.b	$01
0008AE42 E1FB                       	smpsAlterNote       $FB
0008AE44 01                         	dc.b	$01
0008AE45 ECF5                       	smpsPSGAlterVol     $F5
0008AE47 8E06                       	dc.b	nCs1, $06
0008AE49 EC04                       	smpsPSGAlterVol     $04
0008AE4B E701                       	dc.b	smpsNoAttack, $01
0008AE4D EC07                       	smpsPSGAlterVol     $07
0008AE4F 8003                       	dc.b	nRst, $03
0008AE51 ECF5                       	smpsPSGAlterVol     $F5
0008AE53 8E07                       	dc.b	nCs1, $07
0008AE55 E1FF                       	smpsAlterNote       $FF
0008AE57 9B06                       	dc.b	nD2, $06
0008AE59 EC04                       	smpsPSGAlterVol     $04
0008AE5B E701                       	dc.b	smpsNoAttack, $01
0008AE5D ECFC                       	smpsPSGAlterVol     $FC
0008AE5F 9B03                       	dc.b	nD2, $03
0008AE61 EC04                       	smpsPSGAlterVol     $04
0008AE63 E701                       	dc.b	smpsNoAttack, $01
0008AE65 ECFC                       	smpsPSGAlterVol     $FC
0008AE67 9B02                       	dc.b	nD2, $02
0008AE69 EC04                       	smpsPSGAlterVol     $04
0008AE6B E701                       	dc.b	smpsNoAttack, $01
0008AE6D ECFC                       	smpsPSGAlterVol     $FC
0008AE6F E1FE                       	smpsAlterNote       $FE
0008AE71 9A03                       	dc.b	nCs2, $03
0008AE73 EC0B                       	smpsPSGAlterVol     $0B
0008AE75 800A                       	dc.b	nRst, $0A
0008AE77 E102                       	smpsAlterNote       $02
0008AE79 01                         	dc.b	$01
0008AE7A E10A                       	smpsAlterNote       $0A
0008AE7C 01                         	dc.b	$01
0008AE7D E102                       	smpsAlterNote       $02
0008AE7F 01                         	dc.b	$01
0008AE80 E1F7                       	smpsAlterNote       $F7
0008AE82 01                         	dc.b	$01
0008AE83 E10A                       	smpsAlterNote       $0A
0008AE85 01                         	dc.b	$01
0008AE86 E1FC                       	smpsAlterNote       $FC
0008AE88 01                         	dc.b	$01
0008AE89 E108                       	smpsAlterNote       $08
0008AE8B 0101                       	dc.b	$01, $01
0008AE8D E102                       	smpsAlterNote       $02
0008AE8F 01                         	dc.b	$01
0008AE90 E1F7                       	smpsAlterNote       $F7
0008AE92 0101                       	dc.b	$01, $01
0008AE94 E1FC                       	smpsAlterNote       $FC
0008AE96 ECF5                       	smpsPSGAlterVol     $F5
0008AE98 8F06                       	dc.b	nD1, $06
0008AE9A EC04                       	smpsPSGAlterVol     $04
0008AE9C E701                       	dc.b	smpsNoAttack, $01
0008AE9E EC07                       	smpsPSGAlterVol     $07
0008AEA0 8003                       	dc.b	nRst, $03
0008AEA2 ECF5                       	smpsPSGAlterVol     $F5
0008AEA4 8F06                       	dc.b	nD1, $06
0008AEA6 EC04                       	smpsPSGAlterVol     $04
0008AEA8 E701                       	dc.b	smpsNoAttack, $01
0008AEAA EC07                       	smpsPSGAlterVol     $07
0008AEAC 8006                       	dc.b	nRst, $06
0008AEAE E1FF                       	smpsAlterNote       $FF
0008AEB0 01                         	dc.b	$01
0008AEB1 E102                       	smpsAlterNote       $02
0008AEB3 01                         	dc.b	$01
0008AEB4 E101                       	smpsAlterNote       $01
0008AEB6 01                         	dc.b	$01
0008AEB7 E1FC                       	smpsAlterNote       $FC
0008AEB9 01                         	dc.b	$01
0008AEBA ECF5                       	smpsPSGAlterVol     $F5
0008AEBC 9007                       	dc.b	nEb1, $07
0008AEBE EC0B                       	smpsPSGAlterVol     $0B
0008AEC0 8004                       	dc.b	nRst, $04
0008AEC2 ECF5                       	smpsPSGAlterVol     $F5
0008AEC4 9006                       	dc.b	nEb1, $06
0008AEC6 EC0B                       	smpsPSGAlterVol     $0B
0008AEC8 8007                       	dc.b	nRst, $07
0008AECA E103                       	smpsAlterNote       $03
0008AECC 0101                       	dc.b	$01, $01
0008AECE E1FF                       	smpsAlterNote       $FF
0008AED0 01                         	dc.b	$01
0008AED1 E1F9                       	smpsAlterNote       $F9
0008AED3 01                         	dc.b	$01
0008AED4 E1FC                       	smpsAlterNote       $FC
0008AED6 ECF5                       	smpsPSGAlterVol     $F5
0008AED8 8F06                       	dc.b	nD1, $06
0008AEDA EC04                       	smpsPSGAlterVol     $04
0008AEDC E701                       	dc.b	smpsNoAttack, $01
0008AEDE EC07                       	smpsPSGAlterVol     $07
0008AEE0 8003                       	dc.b	nRst, $03
0008AEE2 ECF5                       	smpsPSGAlterVol     $F5
0008AEE4 8F06                       	dc.b	nD1, $06
0008AEE6 EC04                       	smpsPSGAlterVol     $04
0008AEE8 E701                       	dc.b	smpsNoAttack, $01
0008AEEA EC07                       	smpsPSGAlterVol     $07
0008AEEC 8006                       	dc.b	nRst, $06
0008AEEE E1FF                       	smpsAlterNote       $FF
0008AEF0 01                         	dc.b	$01
0008AEF1 E103                       	smpsAlterNote       $03
0008AEF3 01                         	dc.b	$01
0008AEF4 E1FF                       	smpsAlterNote       $FF
0008AEF6 01                         	dc.b	$01
0008AEF7 E1F9                       	smpsAlterNote       $F9
0008AEF9 01                         	dc.b	$01
0008AEFA E1FC                       	smpsAlterNote       $FC
0008AEFC ECF5                       	smpsPSGAlterVol     $F5
0008AEFE 8F06                       	dc.b	nD1, $06
0008AF00 EC04                       	smpsPSGAlterVol     $04
0008AF02 E701                       	dc.b	smpsNoAttack, $01
0008AF04 EC07                       	smpsPSGAlterVol     $07
0008AF06 8003                       	dc.b	nRst, $03
0008AF08 ECF5                       	smpsPSGAlterVol     $F5
0008AF0A 8F07                       	dc.b	nD1, $07
0008AF0C EC0B                       	smpsPSGAlterVol     $0B
0008AF0E 8006                       	dc.b	nRst, $06
0008AF10 E1FF                       	smpsAlterNote       $FF
0008AF12 01                         	dc.b	$01
0008AF13 E102                       	smpsAlterNote       $02
0008AF15 0101                       	dc.b	$01, $01
0008AF17 E1FC                       	smpsAlterNote       $FC
0008AF19 01                         	dc.b	$01
0008AF1A ECF5                       	smpsPSGAlterVol     $F5
0008AF1C 8F07                       	dc.b	nD1, $07
0008AF1E EC0B                       	smpsPSGAlterVol     $0B
0008AF20 8004                       	dc.b	nRst, $04
0008AF22 ECF5                       	smpsPSGAlterVol     $F5
0008AF24 8F06                       	dc.b	nD1, $06
0008AF26 EC04                       	smpsPSGAlterVol     $04
0008AF28 E701                       	dc.b	smpsNoAttack, $01
0008AF2A EC07                       	smpsPSGAlterVol     $07
0008AF2C 8006                       	dc.b	nRst, $06
0008AF2E E101                       	smpsAlterNote       $01
0008AF30 01                         	dc.b	$01
0008AF31 E102                       	smpsAlterNote       $02
0008AF33 01                         	dc.b	$01
0008AF34 E1FF                       	smpsAlterNote       $FF
0008AF36 01                         	dc.b	$01
0008AF37 E1F9                       	smpsAlterNote       $F9
0008AF39 01                         	dc.b	$01
0008AF3A E1FC                       	smpsAlterNote       $FC
0008AF3C ECF5                       	smpsPSGAlterVol     $F5
0008AF3E 9006                       	dc.b	nEb1, $06
0008AF40 EC04                       	smpsPSGAlterVol     $04
0008AF42 E701                       	dc.b	smpsNoAttack, $01
0008AF44 EC07                       	smpsPSGAlterVol     $07
0008AF46 8003                       	dc.b	nRst, $03
0008AF48 ECF5                       	smpsPSGAlterVol     $F5
0008AF4A 9006                       	dc.b	nEb1, $06
0008AF4C EC04                       	smpsPSGAlterVol     $04
0008AF4E E701                       	dc.b	smpsNoAttack, $01
0008AF50 EC07                       	smpsPSGAlterVol     $07
0008AF52 8006                       	dc.b	nRst, $06
0008AF54 E100                       	smpsAlterNote       $00
0008AF56 01                         	dc.b	$01
0008AF57 E102                       	smpsAlterNote       $02
0008AF59 01                         	dc.b	$01
0008AF5A E100                       	smpsAlterNote       $00
0008AF5C 01                         	dc.b	$01
0008AF5D E1FF                       	smpsAlterNote       $FF
0008AF5F 01                         	dc.b	$01
0008AF60 ECF5                       	smpsPSGAlterVol     $F5
0008AF62 9B06                       	dc.b	nD2, $06
0008AF64 EC04                       	smpsPSGAlterVol     $04
0008AF66 E701                       	dc.b	smpsNoAttack, $01
0008AF68 EC07                       	smpsPSGAlterVol     $07
0008AF6A 8003                       	dc.b	nRst, $03
0008AF6C ECF5                       	smpsPSGAlterVol     $F5
0008AF6E 9B07                       	dc.b	nD2, $07
0008AF70 EC0B                       	smpsPSGAlterVol     $0B
0008AF72 8007                       	dc.b	nRst, $07
0008AF74 E105                       	smpsAlterNote       $05
0008AF76 0101                       	dc.b	$01, $01
0008AF78 E1FF                       	smpsAlterNote       $FF
0008AF7A 01                         	dc.b	$01
0008AF7B E1FC                       	smpsAlterNote       $FC
0008AF7D 01                         	dc.b	$01
0008AF7E E1FF                       	smpsAlterNote       $FF
0008AF80 ECF5                       	smpsPSGAlterVol     $F5
0008AF82 9B06                       	dc.b	nD2, $06
0008AF84 EC0B                       	smpsPSGAlterVol     $0B
0008AF86 8004                       	dc.b	nRst, $04
0008AF88 ECF5                       	smpsPSGAlterVol     $F5
0008AF8A 9B06                       	dc.b	nD2, $06
0008AF8C EC04                       	smpsPSGAlterVol     $04
0008AF8E E701                       	dc.b	smpsNoAttack, $01
0008AF90 EC07                       	smpsPSGAlterVol     $07
0008AF92 8006                       	dc.b	nRst, $06
0008AF94 E102                       	smpsAlterNote       $02
0008AF96 01                         	dc.b	$01
0008AF97 E106                       	smpsAlterNote       $06
0008AF99 01                         	dc.b	$01
0008AF9A E102                       	smpsAlterNote       $02
0008AF9C 01                         	dc.b	$01
0008AF9D E1FC                       	smpsAlterNote       $FC
0008AF9F 01                         	dc.b	$01
0008AFA0 E1FF                       	smpsAlterNote       $FF
0008AFA2 ECF5                       	smpsPSGAlterVol     $F5
0008AFA4 9B06                       	dc.b	nD2, $06
0008AFA6 EC04                       	smpsPSGAlterVol     $04
0008AFA8 E701                       	dc.b	smpsNoAttack, $01
0008AFAA EC07                       	smpsPSGAlterVol     $07
0008AFAC 8003                       	dc.b	nRst, $03
0008AFAE ECF5                       	smpsPSGAlterVol     $F5
0008AFB0 9B07                       	dc.b	nD2, $07
0008AFB2 EC0B                       	smpsPSGAlterVol     $0B
0008AFB4 8006                       	dc.b	nRst, $06
0008AFB6 E102                       	smpsAlterNote       $02
0008AFB8 01                         	dc.b	$01
0008AFB9 E105                       	smpsAlterNote       $05
0008AFBB 0101                       	dc.b	$01, $01
0008AFBD E1FF                       	smpsAlterNote       $FF
0008AFBF 01                         	dc.b	$01
0008AFC0 ECF5                       	smpsPSGAlterVol     $F5
0008AFC2 9B07                       	dc.b	nD2, $07
0008AFC4 EC0B                       	smpsPSGAlterVol     $0B
0008AFC6 8004                       	dc.b	nRst, $04
0008AFC8 ECF5                       	smpsPSGAlterVol     $F5
0008AFCA 9B06                       	dc.b	nD2, $06
0008AFCC EC04                       	smpsPSGAlterVol     $04
0008AFCE E701                       	dc.b	smpsNoAttack, $01
0008AFD0 EC07                       	smpsPSGAlterVol     $07
0008AFD2 8006                       	dc.b	nRst, $06
0008AFD4 E105                       	smpsAlterNote       $05
0008AFD6 0101                       	dc.b	$01, $01
0008AFD8 E102                       	smpsAlterNote       $02
0008AFDA 01                         	dc.b	$01
0008AFDB E1FC                       	smpsAlterNote       $FC
0008AFDD 01                         	dc.b	$01
0008AFDE E1FF                       	smpsAlterNote       $FF
0008AFE0 ECF5                       	smpsPSGAlterVol     $F5
0008AFE2 9B06                       	dc.b	nD2, $06
0008AFE4 EC04                       	smpsPSGAlterVol     $04
0008AFE6 E701                       	dc.b	smpsNoAttack, $01
0008AFE8 EC07                       	smpsPSGAlterVol     $07
0008AFEA 8003                       	dc.b	nRst, $03
0008AFEC ECF5                       	smpsPSGAlterVol     $F5
0008AFEE 9B06                       	dc.b	nD2, $06
0008AFF0 EC04                       	smpsPSGAlterVol     $04
0008AFF2 E701                       	dc.b	smpsNoAttack, $01
0008AFF4 EC07                       	smpsPSGAlterVol     $07
0008AFF6 8006                       	dc.b	nRst, $06
0008AFF8 E102                       	smpsAlterNote       $02
0008AFFA 01                         	dc.b	$01
0008AFFB E106                       	smpsAlterNote       $06
0008AFFD 01                         	dc.b	$01
0008AFFE E102                       	smpsAlterNote       $02
0008B000 01                         	dc.b	$01
0008B001 E1FF                       	smpsAlterNote       $FF
0008B003 01                         	dc.b	$01
0008B004 ECF5                       	smpsPSGAlterVol     $F5
0008B006 9B06                       	dc.b	nD2, $06
0008B008 EC04                       	smpsPSGAlterVol     $04
0008B00A E701                       	dc.b	smpsNoAttack, $01
0008B00C EC07                       	smpsPSGAlterVol     $07
0008B00E 8003                       	dc.b	nRst, $03
0008B010 ECF5                       	smpsPSGAlterVol     $F5
0008B012 9B07                       	dc.b	nD2, $07
0008B014 EC0B                       	smpsPSGAlterVol     $0B
0008B016 8007                       	dc.b	nRst, $07
0008B018 E107                       	smpsAlterNote       $07
0008B01A 0101                       	dc.b	$01, $01
0008B01C E1FE                       	smpsAlterNote       $FE
0008B01E 01                         	dc.b	$01
0008B01F E1FA                       	smpsAlterNote       $FA
0008B021 0101                       	dc.b	$01, $01
0008B023 E103                       	smpsAlterNote       $03
0008B025 01                         	dc.b	$01
0008B026 E109                       	smpsAlterNote       $09
0008B028 01                         	dc.b	$01
0008B029 E107                       	smpsAlterNote       $07
0008B02B 01                         	dc.b	$01
0008B02C E1FE                       	smpsAlterNote       $FE
0008B02E 01                         	dc.b	$01
0008B02F E108                       	smpsAlterNote       $08
0008B031 01                         	dc.b	$01
0008B032 E1FD                       	smpsAlterNote       $FD
0008B034 ECF5                       	smpsPSGAlterVol     $F5
0008B036 940E                       	dc.b	nG1, $0E
0008B038 E103                       	smpsAlterNote       $03
0008B03A EC0B                       	smpsPSGAlterVol     $0B
0008B03C 8001 01                    	dc.b	nRst, $01, $01
0008B03F E1FD                       	smpsAlterNote       $FD
0008B041 01                         	dc.b	$01
0008B042 E1FB                       	smpsAlterNote       $FB
0008B044 0101                       	dc.b	$01, $01
0008B046 E100                       	smpsAlterNote       $00
0008B048 01                         	dc.b	$01
0008B049 E103                       	smpsAlterNote       $03
0008B04B 01                         	dc.b	$01
0008B04C E100                       	smpsAlterNote       $00
0008B04E 01                         	dc.b	$01
0008B04F E1FD                       	smpsAlterNote       $FD
0008B051 01                         	dc.b	$01
0008B052 E1FA                       	smpsAlterNote       $FA
0008B054 01                         	dc.b	$01
0008B055 E1FD                       	smpsAlterNote       $FD
0008B057 01                         	dc.b	$01
0008B058 E103                       	smpsAlterNote       $03
0008B05A 0101                       	dc.b	$01, $01
0008B05C E100                       	smpsAlterNote       $00
0008B05E 01                         	dc.b	$01
0008B05F E1FE                       	smpsAlterNote       $FE
0008B061 ECF5                       	smpsPSGAlterVol     $F5
0008B063 960D                       	dc.b	nA1, $0D
0008B065 E104                       	smpsAlterNote       $04
0008B067 EC0B                       	smpsPSGAlterVol     $0B
0008B069 8001 01                    	dc.b	nRst, $01, $01
0008B06C E101                       	smpsAlterNote       $01
0008B06E 01                         	dc.b	$01
0008B06F E1FB                       	smpsAlterNote       $FB
0008B071 0101                       	dc.b	$01, $01
0008B073 E1FE                       	smpsAlterNote       $FE
0008B075 01                         	dc.b	$01
0008B076 E104                       	smpsAlterNote       $04
0008B078 0101                       	dc.b	$01, $01
0008B07A E1FE                       	smpsAlterNote       $FE
0008B07C 01                         	dc.b	$01
0008B07D E1FB                       	smpsAlterNote       $FB
0008B07F 0101                       	dc.b	$01, $01
0008B081 E101                       	smpsAlterNote       $01
0008B083 01                         	dc.b	$01
0008B084 E104                       	smpsAlterNote       $04
0008B086 0101                       	dc.b	$01, $01
0008B088 E1FE                       	smpsAlterNote       $FE
0008B08A ECF5                       	smpsPSGAlterVol     $F5
0008B08C 970D                       	dc.b	nBb1, $0D
0008B08E E101                       	smpsAlterNote       $01
0008B090 EC04                       	smpsPSGAlterVol     $04
0008B092 E701                       	dc.b	smpsNoAttack, $01
0008B094 EC07                       	smpsPSGAlterVol     $07
0008B096 E104                       	smpsAlterNote       $04
0008B098 8001                       	dc.b	nRst, $01
0008B09A E103                       	smpsAlterNote       $03
0008B09C 01                         	dc.b	$01
0008B09D E1FE                       	smpsAlterNote       $FE
0008B09F 01                         	dc.b	$01
0008B0A0 E1FA                       	smpsAlterNote       $FA
0008B0A2 01                         	dc.b	$01
0008B0A3 E1FE                       	smpsAlterNote       $FE
0008B0A5 01                         	dc.b	$01
0008B0A6 E101                       	smpsAlterNote       $01
0008B0A8 01                         	dc.b	$01
0008B0A9 E104                       	smpsAlterNote       $04
0008B0AB 01                         	dc.b	$01
0008B0AC E101                       	smpsAlterNote       $01
0008B0AE 01                         	dc.b	$01
0008B0AF E1FB                       	smpsAlterNote       $FB
0008B0B1 01                         	dc.b	$01
0008B0B2 E1FA                       	smpsAlterNote       $FA
0008B0B4 01                         	dc.b	$01
0008B0B5 E1FE                       	smpsAlterNote       $FE
0008B0B7 01                         	dc.b	$01
0008B0B8 E103                       	smpsAlterNote       $03
0008B0BA 0101                       	dc.b	$01, $01
0008B0BC E101                       	smpsAlterNote       $01
0008B0BE 01                         	dc.b	$01
0008B0BF E1FE                       	smpsAlterNote       $FE
0008B0C1 ECF5                       	smpsPSGAlterVol     $F5
0008B0C3 990D                       	dc.b	nC2, $0D
0008B0C5 E104                       	smpsAlterNote       $04
0008B0C7 EC0B                       	smpsPSGAlterVol     $0B
0008B0C9 8001 01                    	dc.b	nRst, $01, $01
0008B0CC E102                       	smpsAlterNote       $02
0008B0CE 01                         	dc.b	$01
0008B0CF E1FC                       	smpsAlterNote       $FC
0008B0D1 0101                       	dc.b	$01, $01
0008B0D3 E102                       	smpsAlterNote       $02
0008B0D5 01                         	dc.b	$01
0008B0D6 E104                       	smpsAlterNote       $04
0008B0D8 01                         	dc.b	$01
0008B0D9 E1FF                       	smpsAlterNote       $FF
0008B0DB ECF5                       	smpsPSGAlterVol     $F5
0008B0DD 9B06                       	dc.b	nD2, $06
0008B0DF EC04                       	smpsPSGAlterVol     $04
0008B0E1 E701                       	dc.b	smpsNoAttack, $01
0008B0E3 EC07                       	smpsPSGAlterVol     $07
0008B0E5 8003                       	dc.b	nRst, $03
0008B0E7 ECF5                       	smpsPSGAlterVol     $F5
0008B0E9 9B07                       	dc.b	nD2, $07
0008B0EB EC0B                       	smpsPSGAlterVol     $0B
0008B0ED 8006                       	dc.b	nRst, $06
0008B0EF E101                       	smpsAlterNote       $01
0008B0F1 01                         	dc.b	$01
0008B0F2 E104                       	smpsAlterNote       $04
0008B0F4 0101                       	dc.b	$01, $01
0008B0F6 E1FE                       	smpsAlterNote       $FE
0008B0F8 01                         	dc.b	$01
0008B0F9 E1FC                       	smpsAlterNote       $FC
0008B0FB 01                         	dc.b	$01
0008B0FC E1FE                       	smpsAlterNote       $FE
0008B0FE ECF5                       	smpsPSGAlterVol     $F5
0008B100 9C06                       	dc.b	nEb2, $06
0008B102 EC0B                       	smpsPSGAlterVol     $0B
0008B104 8004                       	dc.b	nRst, $04
0008B106 ECF5                       	smpsPSGAlterVol     $F5
0008B108 9C06                       	dc.b	nEb2, $06
0008B10A EC04                       	smpsPSGAlterVol     $04
0008B10C E701                       	dc.b	smpsNoAttack, $01
0008B10E EC07                       	smpsPSGAlterVol     $07
0008B110 8006                       	dc.b	nRst, $06
0008B112 E105                       	smpsAlterNote       $05
0008B114 01                         	dc.b	$01
0008B115 E106                       	smpsAlterNote       $06
0008B117 01                         	dc.b	$01
0008B118 E102                       	smpsAlterNote       $02
0008B11A 01                         	dc.b	$01
0008B11B E1FB                       	smpsAlterNote       $FB
0008B11D 01                         	dc.b	$01
0008B11E E1FF                       	smpsAlterNote       $FF
0008B120 ECF5                       	smpsPSGAlterVol     $F5
0008B122 9B06                       	dc.b	nD2, $06
0008B124 EC04                       	smpsPSGAlterVol     $04
0008B126 E701                       	dc.b	smpsNoAttack, $01
0008B128 EC07                       	smpsPSGAlterVol     $07
0008B12A 8003                       	dc.b	nRst, $03
0008B12C ECF5                       	smpsPSGAlterVol     $F5
0008B12E 9B06                       	dc.b	nD2, $06
0008B130 EC04                       	smpsPSGAlterVol     $04
0008B132 E701                       	dc.b	smpsNoAttack, $01
0008B134 EC07                       	smpsPSGAlterVol     $07
0008B136 8006                       	dc.b	nRst, $06
0008B138 E101                       	smpsAlterNote       $01
0008B13A 01                         	dc.b	$01
0008B13B E105                       	smpsAlterNote       $05
0008B13D 01                         	dc.b	$01
0008B13E E104                       	smpsAlterNote       $04
0008B140 01                         	dc.b	$01
0008B141 E1FE                       	smpsAlterNote       $FE
0008B143 01                         	dc.b	$01
0008B144 ECF5                       	smpsPSGAlterVol     $F5
0008B146 9C07                       	dc.b	nEb2, $07
0008B148 EC0B                       	smpsPSGAlterVol     $0B
0008B14A 8004                       	dc.b	nRst, $04
0008B14C ECF5                       	smpsPSGAlterVol     $F5
0008B14E 9C06                       	dc.b	nEb2, $06
0008B150 EC0B                       	smpsPSGAlterVol     $0B
0008B152 8007                       	dc.b	nRst, $07
0008B154 E105                       	smpsAlterNote       $05
0008B156 0101                       	dc.b	$01, $01
0008B158 E102                       	smpsAlterNote       $02
0008B15A 01                         	dc.b	$01
0008B15B E1FB                       	smpsAlterNote       $FB
0008B15D 01                         	dc.b	$01
0008B15E E1FF                       	smpsAlterNote       $FF
0008B160 ECF5                       	smpsPSGAlterVol     $F5
0008B162 9B06                       	dc.b	nD2, $06
0008B164 EC04                       	smpsPSGAlterVol     $04
0008B166 E701                       	dc.b	smpsNoAttack, $01
0008B168 EC07                       	smpsPSGAlterVol     $07
0008B16A 8003                       	dc.b	nRst, $03
0008B16C ECF5                       	smpsPSGAlterVol     $F5
0008B16E 9B06                       	dc.b	nD2, $06
0008B170 EC04                       	smpsPSGAlterVol     $04
0008B172 E701                       	dc.b	smpsNoAttack, $01
0008B174 EC07                       	smpsPSGAlterVol     $07
0008B176 8006                       	dc.b	nRst, $06
0008B178 E101                       	smpsAlterNote       $01
0008B17A 01                         	dc.b	$01
0008B17B E105                       	smpsAlterNote       $05
0008B17D 01                         	dc.b	$01
0008B17E E101                       	smpsAlterNote       $01
0008B180 01                         	dc.b	$01
0008B181 E1FC                       	smpsAlterNote       $FC
0008B183 01                         	dc.b	$01
0008B184 E1FE                       	smpsAlterNote       $FE
0008B186 ECF5                       	smpsPSGAlterVol     $F5
0008B188 9C06                       	dc.b	nEb2, $06
0008B18A EC04                       	smpsPSGAlterVol     $04
0008B18C E701                       	dc.b	smpsNoAttack, $01
0008B18E EC07                       	smpsPSGAlterVol     $07
0008B190 8003                       	dc.b	nRst, $03
0008B192 ECF5                       	smpsPSGAlterVol     $F5
0008B194 9C07                       	dc.b	nEb2, $07
0008B196 EC0B                       	smpsPSGAlterVol     $0B
0008B198 8006                       	dc.b	nRst, $06
0008B19A E102                       	smpsAlterNote       $02
0008B19C 01                         	dc.b	$01
0008B19D E105                       	smpsAlterNote       $05
0008B19F 0101                       	dc.b	$01, $01
0008B1A1 E1FF                       	smpsAlterNote       $FF
0008B1A3 01                         	dc.b	$01
0008B1A4 ECF5                       	smpsPSGAlterVol     $F5
0008B1A6 9B07                       	dc.b	nD2, $07
0008B1A8 EC0B                       	smpsPSGAlterVol     $0B
0008B1AA 8004                       	dc.b	nRst, $04
0008B1AC ECF5                       	smpsPSGAlterVol     $F5
0008B1AE 9B06                       	dc.b	nD2, $06
0008B1B0 EC04                       	smpsPSGAlterVol     $04
0008B1B2 E701                       	dc.b	smpsNoAttack, $01
0008B1B4 EC07                       	smpsPSGAlterVol     $07
0008B1B6 8002                       	dc.b	nRst, $02
0008B1B8 E1FC                       	smpsAlterNote       $FC
0008B1BA ECF5                       	smpsPSGAlterVol     $F5
0008B1BC 9006                       	dc.b	nEb1, $06
0008B1BE EC04                       	smpsPSGAlterVol     $04
0008B1C0 E701                       	dc.b	smpsNoAttack, $01
0008B1C2 ECFC                       	smpsPSGAlterVol     $FC
0008B1C4 8B03 9003                  	dc.b	nBb0, $03, nEb1, $03
0008B1C8 EC04                       	smpsPSGAlterVol     $04
0008B1CA E701                       	dc.b	smpsNoAttack, $01
0008B1CC E1FD                       	smpsAlterNote       $FD
0008B1CE ECFC                       	smpsPSGAlterVol     $FC
0008B1D0 9402                       	dc.b	nG1, $02
0008B1D2 EC04                       	smpsPSGAlterVol     $04
0008B1D4 E701                       	dc.b	smpsNoAttack, $01
0008B1D6 E1FE                       	smpsAlterNote       $FE
0008B1D8 ECFC                       	smpsPSGAlterVol     $FC
0008B1DA 9703 9703                  	dc.b	nBb1, $03, nBb1, $03
0008B1DE EC04                       	smpsPSGAlterVol     $04
0008B1E0 E701                       	dc.b	smpsNoAttack, $01
0008B1E2 EC07                       	smpsPSGAlterVol     $07
0008B1E4 8008                       	dc.b	nRst, $08
0008B1E6 F6F4 F3                    	smpsJump            music84_Jump06
0008B1E9                            
0008B1E9                            ; PSG3 Data
0008B1E9                            music84_PSG3:
0008B1E9 F500                       	smpsPSGvoice        $00
0008B1EB E1FF                       	smpsAlterNote       $FF
0008B1ED EC0F                       	smpsPSGAlterVol     $0F
0008B1EF 803A                       	dc.b	nRst, $3A
0008B1F1                            
0008B1F1                            music84_Jump05:
0008B1F1 8068 6868 6868 6868 6868+  	dc.b	nRst, $68, $68, $68, $68, $68, $68, $68, $68, $68, $68, $68
0008B1FD 6868 6868 6868 6868 6802   	dc.b	$68, $68, $68, $68, $68, $68, $68, $68, $68, $02
0008B207 F6FF E8                    	smpsJump            music84_Jump05
0008B20A                            
0008B20A                            ; DAC Data
0008B20A                            music84_DAC:
0008B20A E0C0                       	smpsPan             panCenter, $00
0008B20C 8001 8203 8102 8101 8103+  	dc.b	nRst, $01, dSnare, $03, dKick, $02, dKick, $01, dKick, $03, dKick, $01
0008B218 8203 8102 8101 8204 8103+  	dc.b	dSnare, $03, dKick, $02, dKick, $01, dSnare, $04, dKick, $03, dSnare, $07
0008B224 8104 8103 8104 8103 8104+  	dc.b	dKick, $04, dKick, $03, dKick, $04, dKick, $03, dKick, $04, dKick, $03
0008B230 8203 8107 8207 8106 8101+  	dc.b	dSnare, $03, dKick, $07, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03
0008B23C 8107 8103 8207 8103 8104+  	dc.b	dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04, dSnare, $07
0008B248 8107 8206 8107 8204 8107+  	dc.b	dKick, $07, dSnare, $06, dKick, $07, dSnare, $04, dKick, $07, dKick, $03
0008B254 8207 8103 8104 8207 8106+  	dc.b	dSnare, $07, dKick, $03, dKick, $04, dSnare, $07, dKick, $06, dKick, $01
0008B260 8206 8107 8204 8106 8104+  	dc.b	dSnare, $06, dKick, $07, dSnare, $04, dKick, $06, dKick, $04, dSnare, $07
0008B26C 8103 8103 8101 8206 8107+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07, dSnare, $07
0008B278 8107 8203 8107 8104 8206+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $06, dKick, $04
0008B284 8103 8207 8107 8207 8107+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03
0008B290 8107 8103 8101 8206 8104+  	dc.b	dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04, dKick, $03
0008B29C 8207 8107 8207 8106 8101+  	dc.b	dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03
0008B2A8 8107 8103 8207 8103 8104+  	dc.b	dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04, dSnare, $07
0008B2B4 8106 8101 8206 8107 8204+  	dc.b	dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04, dKick, $06
0008B2C0 8104 8207 8103 8104 8206+  	dc.b	dKick, $04, dSnare, $07, dKick, $03, dKick, $04, dSnare, $06, dKick, $07
0008B2CC 8207 8107 8203 8107 8202+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dSnare, $02, dKick, $02
0008B2D8 8103 8207 8101 8101 8101+  	dc.b	dKick, $03, dSnare, $07, dKick, $01, dKick, $01, dKick, $01, dKick, $01
0008B2E4 8206 8107 8207 8107 8203+  	dc.b	dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07
0008B2F0 8103 8101 8206 8104 8103+  	dc.b	dKick, $03, dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07
0008B2FC 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
0008B308 8207 8103 8101 8103 8207+  	dc.b	dSnare, $07, dKick, $03, dKick, $01, dKick, $03, dSnare, $07, dKick, $07
0008B314 8206 8101 8106 8204 8107+  	dc.b	dSnare, $06, dKick, $01, dKick, $06, dSnare, $04, dKick, $07, dKick, $03
0008B320 8207 8103 8104 8207 8106+  	dc.b	dSnare, $07, dKick, $03, dKick, $04, dSnare, $07, dKick, $06, dKick, $01
0008B32C 8206 8107 8203 8101 8106+  	dc.b	dSnare, $06, dKick, $07, dSnare, $03, dKick, $01, dKick, $06, dKick, $04
0008B338 8207 8103 8103 8101 8206+  	dc.b	dSnare, $07, dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07
0008B344 8207 8107 8203 8107 8104+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $06
0008B350 8104 8103 8207 8107 8207+  	dc.b	dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
0008B35C 8203 8107 8103 8101 8206+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04
0008B368 8103 8207 8107 8207 8106+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01
0008B374 8203 8107 8103 8207 8103+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
0008B380 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04
0008B38C 8106 8104 8207 8104 8103+  	dc.b	dKick, $06, dKick, $04, dSnare, $07, dKick, $04, dKick, $03, dSnare, $07
0008B398 8106 8207 8107 8203 8107+  	dc.b	dKick, $06, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04
0008B3A4 8206 8101 8103 8103 8101+  	dc.b	dSnare, $06, dKick, $01, dKick, $03, dKick, $03, dKick, $01, dSnare, $06
0008B3B0 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
0008B3BC 8101 8206 8104 8103 8207+  	dc.b	dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $07
0008B3C8 8207 8106 8101 8203 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $03, dKick, $07, dKick, $03
0008B3D4 8207 8103 8101 8103 8207+  	dc.b	dSnare, $07, dKick, $03, dKick, $01, dKick, $03, dSnare, $07, dKick, $07
0008B3E0 8206 8107 8204 8107 8103+  	dc.b	dSnare, $06, dKick, $07, dSnare, $04, dKick, $07, dKick, $03, dSnare, $07
0008B3EC 8103 8104 8207 8214 8204+  	dc.b	dKick, $03, dKick, $04, dSnare, $07, dSnare, $14, dSnare, $04, dSnare, $1B
0008B3F8 8203 8101 8214 8203 8207+  	dc.b	dSnare, $03, dKick, $01, dSnare, $14, dSnare, $03, dSnare, $07, dKick, $04
0008B404 8206 8107 8207 8107 8207+  	dc.b	dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
0008B410 8203 8107 8103 8101 8206+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04
0008B41C 8103 8207 8107 8207 8106+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01
0008B428 8203 8107 8103 8207 8103+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
0008B434 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04
0008B440 8106 8104 8207 8103 8104+  	dc.b	dKick, $06, dKick, $04, dSnare, $07, dKick, $03, dKick, $04, dSnare, $06
0008B44C 8107 8207 8107 8204 8207+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $04, dSnare, $07, dKick, $01
0008B458 8102 8104 8109 8101 8206+  	dc.b	dKick, $02, dKick, $04, dKick, $09, dKick, $01, dSnare, $06, dKick, $07
0008B464 8207 8107 8203 8107 8103+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dKick, $01
0008B470 8206 8104 8103 8207 8107+  	dc.b	dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07
0008B47C 8107 8203 8107 8103 8207+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $04
0008B488 8103 8207 8107 8206 8101+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $06, dKick, $01, dKick, $06
0008B494 8204 8107 8103 8207 8103+  	dc.b	dSnare, $04, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
0008B4A0 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $03
0008B4AC 8101 8106 8104 8207 8103+  	dc.b	dKick, $01, dKick, $06, dKick, $04, dSnare, $07, dKick, $03, dKick, $03
0008B4B8 8101 8206 8107 8207 8107+  	dc.b	dKick, $01, dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03
0008B4C4 8107 8104 8206 8104 8103+  	dc.b	dKick, $07, dKick, $04, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07
0008B4D0 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
0008B4DC 8101 8206 8104 8103 8207+  	dc.b	dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $03
0008B4E8 8104 8207 8106 8101 8203+  	dc.b	dKick, $04, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03, dKick, $07
0008B4F4 8103 8208 8102 8104 8203+  	dc.b	dKick, $03, dSnare, $08, dKick, $02, dKick, $04, dSnare, $03, dKick, $04
0008B500 8103 8103 8101 8203 8103+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $03, dKick, $03, dKick, $01
0008B50C 8203 8103 8202 8101 8202+  	dc.b	dSnare, $03, dKick, $03, dSnare, $02, dKick, $01, dSnare, $02, dSnare, $02
0008B518 8202 8201 8101 8201 8102+  	dc.b	dSnare, $02, dSnare, $01, dKick, $01, dSnare, $01, dKick, $02, dKick, $02
0008B524 8102 8101 8102 8102 8102+  	dc.b	dKick, $02, dKick, $01, dKick, $02, dKick, $02, dKick, $02, dKick, $01
0008B530 8102 8202 8102 8101 8101+  	dc.b	dKick, $02, dSnare, $02, dKick, $02, dKick, $01, dKick, $01, dKick, $07
0008B53C 8207 8107 8203 8107 8104+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $07
0008B548 8103 8103 8101 8206 8107+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07, dSnare, $07
0008B554 8107 8203 8107 8103 8101+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06
0008B560 8104 8103 8207 8107 8207+  	dc.b	dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
0008B56C 8203 8107 8103 8207 8104+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $04, dKick, $03
0008B578 8207 8107 8206 8107 8204+  	dc.b	dSnare, $07, dKick, $07, dSnare, $06, dKick, $07, dSnare, $04, dKick, $07
0008B584 8103 8207 8203 8204 8107+  	dc.b	dKick, $03, dSnare, $07, dSnare, $03, dSnare, $04, dKick, $07, dKick, $17
0008B590 E0C0                       	smpsPan             panCenter, $00
0008B592 F2                         	smpsStop
0008B593                            
0008B593                            music84_Voices:
0008B593                            ;	Voice $00
0008B593                            ;	$3D
0008B593                            ;	$41, $31, $41, $51, 	$11, $11, $11, $11, 	$0A, $00, $00, $00
0008B593                            ;	$0B, $00, $00, $00, 	$F7, $F8, $F8, $F8, 	$1A, $14, $20, $14
0008B593                            	smpsVcAlgorithm     $05
0008B593                            	smpsVcFeedback      $07
0008B593                            	smpsVcUnusedBits    $00
0008B593                            	smpsVcDetune        $05, $04, $03, $04
0008B593                            	smpsVcCoarseFreq    $01, $01, $01, $01
0008B593                            	smpsVcRateScale     $00, $00, $00, $00
0008B593                            	smpsVcAttackRate    $11, $11, $11, $11
0008B593                            	smpsVcAmpMod        $00, $00, $00, $00
0008B593                            	smpsVcDecayRate1    $00, $00, $00, $0A
0008B593                            	smpsVcDecayRate2    $00, $00, $00, $0B
0008B593                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
0008B593                            	smpsVcReleaseRate   $08, $08, $08, $07
0008B593 3D41 3141 5111 1111 110A+  	smpsVcTotalLevel    $14, $20, $14, $1A
0008B5AC                            
0008B5AC                            ;	Voice $01
0008B5AC                            ;	$04
0008B5AC                            ;	$5A, $41, $3A, $41, 	$5F, $1F, $5F, $1F, 	$00, $0E, $00, $0E
0008B5AC                            ;	$00, $05, $00, $05, 	$E6, $86, $E6, $86, 	$19, $10, $19, $10
0008B5AC                            	smpsVcAlgorithm     $04
0008B5AC                            	smpsVcFeedback      $00
0008B5AC                            	smpsVcUnusedBits    $00
0008B5AC                            	smpsVcDetune        $04, $03, $04, $05
0008B5AC                            	smpsVcCoarseFreq    $01, $0A, $01, $0A
0008B5AC                            	smpsVcRateScale     $00, $01, $00, $01
0008B5AC                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0008B5AC                            	smpsVcAmpMod        $00, $00, $00, $00
0008B5AC                            	smpsVcDecayRate1    $0E, $00, $0E, $00
0008B5AC                            	smpsVcDecayRate2    $05, $00, $05, $00
0008B5AC                            	smpsVcDecayLevel    $08, $0E, $08, $0E
0008B5AC                            	smpsVcReleaseRate   $06, $06, $06, $06
0008B5AC 045A 413A 415F 1F5F 1F00+  	smpsVcTotalLevel    $10, $19, $10, $19
0008B5C5                            
0008B5C5                            ;	Voice $02
0008B5C5                            ;	$30
0008B5C5                            ;	$6C, $03, $21, $41, 	$14, $1F, $1F, $1F, 	$0D, $0C, $0E, $01
0008B5C5                            ;	$01, $01, $01, $01, 	$FF, $C8, $BB, $89, 	$24, $27, $14, $10
0008B5C5                            	smpsVcAlgorithm     $00
0008B5C5                            	smpsVcFeedback      $06
0008B5C5                            	smpsVcUnusedBits    $00
0008B5C5                            	smpsVcDetune        $04, $02, $00, $06
0008B5C5                            	smpsVcCoarseFreq    $01, $01, $03, $0C
0008B5C5                            	smpsVcRateScale     $00, $00, $00, $00
0008B5C5                            	smpsVcAttackRate    $1F, $1F, $1F, $14
0008B5C5                            	smpsVcAmpMod        $00, $00, $00, $00
0008B5C5                            	smpsVcDecayRate1    $01, $0E, $0C, $0D
0008B5C5                            	smpsVcDecayRate2    $01, $01, $01, $01
0008B5C5                            	smpsVcDecayLevel    $08, $0B, $0C, $0F
0008B5C5                            	smpsVcReleaseRate   $09, $0B, $08, $0F
0008B5C5 306C 0321 4114 1F1F 1F0D+  	smpsVcTotalLevel    $10, $14, $27, $24
0008B5DE                            
0008B5DE                            ;	Voice $03
0008B5DE                            ;	$3A
0008B5DE                            ;	$01, $21, $61, $41, 	$14, $14, $19, $18, 	$09, $09, $0D, $09
0008B5DE                            ;	$00, $00, $00, $00, 	$F7, $BF, $FF, $E8, 	$26, $16, $1E, $10
0008B5DE                            	smpsVcAlgorithm     $02
0008B5DE                            	smpsVcFeedback      $07
0008B5DE                            	smpsVcUnusedBits    $00
0008B5DE                            	smpsVcDetune        $04, $06, $02, $00
0008B5DE                            	smpsVcCoarseFreq    $01, $01, $01, $01
0008B5DE                            	smpsVcRateScale     $00, $00, $00, $00
0008B5DE                            	smpsVcAttackRate    $18, $19, $14, $14
0008B5DE                            	smpsVcAmpMod        $00, $00, $00, $00
0008B5DE                            	smpsVcDecayRate1    $09, $0D, $09, $09
0008B5DE                            	smpsVcDecayRate2    $00, $00, $00, $00
0008B5DE                            	smpsVcDecayLevel    $0E, $0F, $0B, $0F
0008B5DE                            	smpsVcReleaseRate   $08, $0F, $0F, $07
0008B5DE 3A01 2161 4114 1419 1809+  	smpsVcTotalLevel    $10, $1E, $16, $26
0008B5F7                            
0008B5F7                            ;	Voice $04
0008B5F7                            ;	$3C
0008B5F7                            ;	$3A, $02, $00, $70, 	$1F, $10, $1F, $10, 	$00, $00, $00, $00
0008B5F7                            ;	$00, $00, $00, $00, 	$F2, $FA, $F2, $FA, 	$30, $1F, $24, $18
0008B5F7                            	smpsVcAlgorithm     $04
0008B5F7                            	smpsVcFeedback      $07
0008B5F7                            	smpsVcUnusedBits    $00
0008B5F7                            	smpsVcDetune        $07, $00, $00, $03
0008B5F7                            	smpsVcCoarseFreq    $00, $00, $02, $0A
0008B5F7                            	smpsVcRateScale     $00, $00, $00, $00
0008B5F7                            	smpsVcAttackRate    $10, $1F, $10, $1F
0008B5F7                            	smpsVcAmpMod        $00, $00, $00, $00
0008B5F7                            	smpsVcDecayRate1    $00, $00, $00, $00
0008B5F7                            	smpsVcDecayRate2    $00, $00, $00, $00
0008B5F7                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
0008B5F7                            	smpsVcReleaseRate   $0A, $02, $0A, $02
0008B5F7 3C3A 0200 701F 101F 1000+  	smpsVcTotalLevel    $18, $24, $1F, $30
0008B610                            
0008B610                            ;	Voice $05
0008B610                            ;	$38
0008B610                            ;	$00, $21, $61, $41, 	$10, $1F, $1F, $1F, 	$17, $00, $03, $00
0008B610                            ;	$0B, $08, $08, $00, 	$A5, $F5, $F5, $F8, 	$1D, $10, $11, $14
0008B610                            	smpsVcAlgorithm     $00
0008B610                            	smpsVcFeedback      $07
0008B610                            	smpsVcUnusedBits    $00
0008B610                            	smpsVcDetune        $04, $06, $02, $00
0008B610                            	smpsVcCoarseFreq    $01, $01, $01, $00
0008B610                            	smpsVcRateScale     $00, $00, $00, $00
0008B610                            	smpsVcAttackRate    $1F, $1F, $1F, $10
0008B610                            	smpsVcAmpMod        $00, $00, $00, $00
0008B610                            	smpsVcDecayRate1    $00, $03, $00, $17
0008B610                            	smpsVcDecayRate2    $00, $08, $08, $0B
0008B610                            	smpsVcDecayLevel    $0F, $0F, $0F, $0A
0008B610                            	smpsVcReleaseRate   $08, $05, $05, $05
0008B610 3800 2161 4110 1F1F 1F17+  	smpsVcTotalLevel    $14, $11, $10, $1D
0008B629                            
0008B629                            
0008B62A 00                         		even
0008B62A                            Music85:	incbin	sound\glass2.bin ; Spring Yard Act 1
0008F83A                            		even
0008F83A                            Music86:	incbin	sound\music86.bin; Scrap Brain Act 1
00093392 00                         		even
00093392                            Music87:	include	sound\music87.asm; Invincibility
00093392                            triple_Header:
00093392 =00000001                  smpsHeaderStartSong = 1
00093392 0000                       	smpsHeaderVoice     triple_Voices
00093394 0501                       	smpsHeaderChan      $05, $01
00093396 0200                       	smpsHeaderTempo     $02, $00
00093398                            
0009339C 0000 F40A                  	smpsHeaderFM        triple_FM1,	$F4, $0A
000933A0 0000 000F                  	smpsHeaderFM        triple_FM2,	$00, $0F
000933A4 0000 000B                  	smpsHeaderFM        triple_FM3,	$00, $0B
000933A8 0000 0013                  	smpsHeaderFM        triple_FM4,	$00, $13
000933AC 0000 0C01 0000             	smpsHeaderPSG       triple_PSG1,	$0C, $01, $00, $00
000933B2                            
000933B2                            ; DAC Data
000933B2                            triple_DAC:
000933B2 E0C0                       	smpsPan             panCenter, $00
000933B4 8203 0381 8182             	dc.b	dSnare, $03, $03, dKick, dKick, dSnare
000933BA                            
000933BA                            triple_Loop01:
000933BA 8282 82                    	dc.b	dSnare, dSnare, dSnare
000933BD                            
000933BD                            triple_Loop00:
000933BD 8106 8281 8281 8203 8106+  	dc.b	dKick, $06, dSnare, dKick, dSnare, dKick, dSnare, $03, dKick, $06, $03, dSnare
000933C9 06                         	dc.b	$06
000933CA F700 08FF EF               	smpsLoop            $00, $08, triple_Loop00
000933CF 810C 8209 0981 0682 0903+  	dc.b	dKick, $0C, dSnare, $09, $09, dKick, $06, dSnare, $09, $03, dKick, $0C
000933DB 8209 0981 0682 03          	dc.b	dSnare, $09, $09, dKick, $06, dSnare, $03
000933E2 F701 02FF D4               	smpsLoop            $01, $02, triple_Loop01
000933E7 0303 1B                    	dc.b	$03, $03, $1B
000933EA E0C0                       	smpsPan             panCenter, $00
000933EC F6FF C4                    	smpsJump triple_DAC
000933EF                            
000933EF                            ; FM1 Data
000933EF                            triple_FM1:
000933EF E0C0                       	smpsPan             panCenter, $00
000933F3 8018                       	dc.b	nRst, $18
000933F5                            
000933F5                            triple_Loop0B:
000933F5 AC06 B8                    	dc.b	nG3, $06, nG4
000933F8 F700 04FF F9               	smpsLoop            $00, $04, triple_Loop0B
000933FD                            
000933FD                            triple_Loop0C:
000933FD A7B3                       	dc.b	nD3, nD4
000933FF F700 04FF FA               	smpsLoop            $00, $04, triple_Loop0C
00093404                            
00093404                            triple_Loop0D:
00093404 A9B5                       	dc.b	nE3, nE4
00093406 F700 04FF FA               	smpsLoop            $00, $04, triple_Loop0D
0009340B A5B1 A5B1 A7B3 A7B3        	dc.b	nC3, nC4, nC3, nC4, nD3, nD4, nD3, nD4
00093413 F701 02FF DE               	smpsLoop            $01, $02, triple_Loop0B
00093418 A4B0 A4B0 A0AC A0AC A203+  	dc.b	nB2, nB3, nB2, nB3, nG2, nG3, nG2, nG3, nA2, $03, nRst, nA3
00093424 80A6 80B2 80A4 A6A7 A9A6+  	dc.b	nRst, nCs3, nRst, nCs4, nRst, nB2, nCs3, nD3, nE3, nCs3, nEb3, nF3
00093430 AD                         	dc.b	nAb3
00093431 F702 02FF C0               	smpsLoop            $02, $02, triple_Loop0B
00093436 8018                       	dc.b	nRst, $18
00093438 E0C0                       	smpsPan             panCenter, $00
0009343C F6FF B1                    	smpsJump triple_FM1
0009343F                            
0009343F                            ; FM2 Data
0009343F                            triple_FM2:
0009343F E0C0                       	smpsPan             panCenter, $00
00093443 8018                       	dc.b	nRst, $18
00093445                            
00093445                            triple_Loop07:
00093445 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
00093451 C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
0009345D F700 02FF E4               	smpsLoop            $00, $02, triple_Loop07
00093462 8003                       	dc.b	nRst, $03
00093464                            
00093464                            triple_Loop08:
00093464 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
0009346A F700 03FF F6               	smpsLoop            $00, $03, triple_Loop08
0009346F B809 BC03 8009             	dc.b	nG4, $09, nB4, $03, nRst, $09
00093475                            
00093475                            triple_Loop09:
00093475 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
00093481 C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
0009348D F700 02FF E4               	smpsLoop            $00, $02, triple_Loop09
00093492 8003                       	dc.b	nRst, $03
00093494                            
00093494                            triple_Loop0A:
00093494 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
0009349A F700 03FF F6               	smpsLoop            $00, $03, triple_Loop0A
0009349F B809 BC03 8021             	dc.b	nG4, $09, nB4, $03, nRst, $21
000934A5 E0C0                       	smpsPan             panCenter, $00
000934A9 F6FF 94                    	smpsJump triple_FM2
000934AC                            
000934AC                            ; FM3 Data
000934AC                            triple_FM3:
000934AC E0C0                       	smpsPan             panCenter, $00
000934B0 8018                       	dc.b	nRst, $18
000934B2                            
000934B2                            triple_Loop06:
000934B2 B830 B7B8 36B3 2A          	dc.b	nG4, $30, nFs4, nG4, $36, nD4, $2A
000934B9 F700 02FF F5               	smpsLoop            $00, $02, triple_Loop06
000934BE 8030 B802 BABC BDBF C1BA+  	dc.b	nRst, $30, nG4, $02, nA4, nB4, nC5, nD5, nE5, nA4, nB4, nCs5
000934CA BFC1 C3BC BEC0 C1C3 C5BE+  	dc.b	nD5, nE5, nFs5, nB4, nCs5, nEb5, nE5, nFs5, nAb5, nCs5, nEb5, nF5
000934D6 C3C5 C7                    	dc.b	nFs5, nAb5, nBb5
000934D9 F701 02FF D5               	smpsLoop            $01, $02, triple_Loop06
000934DE 8018                       	dc.b	nRst, $18
000934E0 E0C0                       	smpsPan             panCenter, $00
000934E4 F6FF C6                    	smpsJump triple_FM3
000934E7                            
000934E7                            ; FM4 Data
000934E7                            triple_FM4:
000934E7 E103                       	smpsAlterNote       $03
000934EB E0C0                       	smpsPan             panCenter, $00
000934ED 8018                       	dc.b	nRst, $18
000934EF                            
000934EF                            triple_Loop02:
000934EF C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
000934FB C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
00093507 F700 02FF E4               	smpsLoop            $00, $02, triple_Loop02
0009350C 8003                       	dc.b	nRst, $03
0009350E                            
0009350E                            triple_Loop03:
0009350E B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
00093514 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop03
00093519 B809 BC03 8009             	dc.b	nG4, $09, nB4, $03, nRst, $09
0009351F                            
0009351F                            triple_Loop04:
0009351F C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
0009352B C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
00093537 F700 02FF E4               	smpsLoop            $00, $02, triple_Loop04
0009353C 8003                       	dc.b	nRst, $03
0009353E                            
0009353E                            triple_Loop05:
0009353E B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
00093544 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop05
00093549 B809 BC03 8021             	dc.b	nG4, $09, nB4, $03, nRst, $21
0009354F E0C0                       	smpsPan             panCenter, $00
00093551 F6FF 94                    	smpsJump triple_FM4
00093554                            
00093554                            ; PSG1 Data
00093554                            triple_PSG1:
00093554 8018                       	dc.b	nRst, $18
00093556                            
00093556                            triple_Loop0E:
00093556 A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
00093562 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
0009356E 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
0009357A 9402 8004                  	dc.b	nG1, $02, nRst, $04
0009357E F700 07FF D4               	smpsLoop            $00, $07, triple_Loop0E
00093583 A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
0009358F 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
0009359B 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
000935A7 9402 8007                  	dc.b	nG1, $02, nRst, $07
000935AB                            
000935AB                            triple_Loop0F:
000935AB 9109 9403 800C             	dc.b	nE1, $09, nG1, $03, nRst, $0C
000935B1 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop0F
000935B6 9109 9403 8009             	dc.b	nE1, $09, nG1, $03, nRst, $09
000935BC                            
000935BC                            triple_Loop10:
000935BC A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
000935C8 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
000935D4 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
000935E0 9402 8004                  	dc.b	nG1, $02, nRst, $04
000935E4 F700 07FF D4               	smpsLoop            $00, $07, triple_Loop10
000935E9 A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
000935F5 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
00093601 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
0009360D 9402 8007                  	dc.b	nG1, $02, nRst, $07
00093611                            
00093611                            triple_Loop11:
00093611 9109 9403 800C             	dc.b	nE1, $09, nG1, $03, nRst, $0C
00093617 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop11
0009361C 9109 9403 8021             	dc.b	nE1, $09, nG1, $03, nRst, $21
00093622 F500                       	smpsPSGvoice        $00
00093624 F6FF 2E                    	smpsJump triple_PSG1
00093627                            
00093627                            triple_Voices:
00093627                            ;	Voice $00
00093627                            ;	$3A
00093627                            ;	$01, $07, $01, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
00093627                            ;	$00, $00, $00, $00, 	$1F, $FF, $1F, $0F, 	$18, $28, $27, $80
00093627                            	smpsVcAlgorithm     $02
00093627                            	smpsVcFeedback      $07
00093627                            	smpsVcUnusedBits    $00
00093627                            	smpsVcDetune        $00, $00, $00, $00
00093627                            	smpsVcCoarseFreq    $01, $01, $07, $01
00093627                            	smpsVcRateScale     $01, $02, $02, $02
00093627                            	smpsVcAttackRate    $13, $0D, $0E, $0E
00093627                            	smpsVcAmpMod        $00, $00, $00, $00
00093627                            	smpsVcDecayRate1    $03, $0E, $0E, $0E
00093627                            	smpsVcDecayRate2    $00, $00, $00, $00
00093627                            	smpsVcDecayLevel    $00, $01, $0F, $01
00093627                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00093627 3A01 0701 018E 8E8D 530E+  	smpsVcTotalLevel    $00, $27, $28, $18
00093640                            
00093640                            ;	Voice $01
00093640                            ;	$20
00093640                            ;	$7A, $31, $00, $00, 	$9F, $D8, $DC, $DF, 	$10, $0A, $04, $04
00093640                            ;	$0F, $08, $08, $08, 	$5F, $5F, $BF, $BF, 	$14, $2B, $17, $80
00093640                            	smpsVcAlgorithm     $00
00093640                            	smpsVcFeedback      $04
00093640                            	smpsVcUnusedBits    $00
00093640                            	smpsVcDetune        $00, $00, $03, $07
00093640                            	smpsVcCoarseFreq    $00, $00, $01, $0A
00093640                            	smpsVcRateScale     $03, $03, $03, $02
00093640                            	smpsVcAttackRate    $1F, $1C, $18, $1F
00093640                            	smpsVcAmpMod        $00, $00, $00, $00
00093640                            	smpsVcDecayRate1    $04, $04, $0A, $10
00093640                            	smpsVcDecayRate2    $08, $08, $08, $0F
00093640                            	smpsVcDecayLevel    $0B, $0B, $05, $05
00093640                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00093640 207A 3100 009F D8DC DF10+  	smpsVcTotalLevel    $00, $17, $2B, $14
00093640 207A 3100 009F D8DC DF10+  	smpsVcTotalLevel    $00, $17, $2B, $14
0009365A 00                         		even
0009365A                            Music88:	incbin	sound\music88.bin; Extra Life
00093748                            		even
00093748                            Music89:	incbin	sound\music89.bin; Special Stage
00097610 00                         		even
00097610                            Music8A:	incbin	sound\music8A.bin; Title Screen
000977DA                            		even
000977DA                            Music8B:	incbin	sound\music8B.bin; Ending Theme
00097A74                            		even
00097A74                            Music8C:	incbin	sound\music8C.bin; VS Boss
00097C90                            		even
00097C90                            Music8D:	incbin	sound\music8D.bin; Final Zone
00097EAC                            		even
00097EAC                            Music8E:	incbin	sound\fle.bin ;		Act Clear
0009831A 00                         		even
0009831A                            Music8F:	incbin	sound\music8F.bin ; Game Over
0009895A 00                         		even
0009895A                            Music90:	incbin	sound\music90.bin ; Continue
00098AB8                            		even
00098AB8                            Music91:	incbin	sound\music91.bin ; Credits
00099D86                            		even
00099D86                            Music92:	incbin	sound\music92.bin ; Drowning
00099EB0                            		even
00099EB0                            Music93:	incbin	sound\music93.bin ; Chaos Emerald
00099F80                            		even
00099F80                            Music94:	incbin	sound\music94.bin ; Green Hill Act 2
00099FBA 00                         		even
00099FBA                            Music95:	incbin	sound\music95.bin ; Green Hill Act 3
00099FF4 00                         		even
00099FF4                            Music96:	incbin	sound\music96.bin ; Labyrinth Act 2
0009A02E 00                         		even
0009A02E                            Music97:	incbin	sound\music97.bin ; Labyrinth Act 3
0009A068 00                         		even
0009A068                            Music98:	incbin	sound\music98.bin ; Marble Act 2
0009A0A2 00                         		even
0009A0A2                            Music99:	incbin	sound\music99.bin ; Marble Act 3
0009A0DC 00                         		even
0009A0DC                            Music9A:	incbin	sound\music9A.bin ; Star Light Act 2
0009A116 00                         		even
0009A116                            Music9B:	incbin	sound\music9B.bin ; Star Light Act 3
0009A150 00                         		even
0009A150                            Music9C:	incbin	sound\music9C.bin ; Spring Yard Act 2
0009A18A 00                         		even
0009A18A                            Music9D:	incbin	sound\music9D.bin ; Spring Yard Act 3
0009A1C4 00                         		even
0009A1C4                            Music9E:	incbin	sound\music9E.bin ; Scrap Brain Act 2
0009A6B4                            		even
0009A6B4                            Music9F:	incbin	sound\music9F.bin ; Scrap Brain Act 3
0009A6EE 00                         		even
0009A6EE                            ; ---------------------------------------------------------------------------
0009A6EE                            ; Sound	effect pointers
0009A6EE                            ; ---------------------------------------------------------------------------
0009A6EE 0000 0000 0000 0000 0000+  SoundIndex:	dc.l SoundA0, SoundA1, SoundA2
0009A6FA 0000 0000 0000 0000 0000+  		dc.l SoundA3, SoundA4, SoundA5
0009A706 0000 0000 0000 0000 0000+  		dc.l SoundA6, SoundA7, SoundA8
0009A712 0000 0000 0000 0000 0000+  		dc.l SoundA9, SoundAA, SoundAB
0009A71E 0000 0000 0000 0000 0000+  		dc.l SoundAC, SoundAD, SoundAE
0009A72A 0000 0000 0000 0000 0000+  		dc.l SoundAF, SoundB0, SoundB1
0009A736 0000 0000 0000 0000 0000+  		dc.l SoundB2, SoundB3, SoundB4
0009A742 0000 0000 0000 0000 0000+  		dc.l SoundB5, SoundB6, SoundB7
0009A74E 0000 0000 0000 0000 0000+  		dc.l SoundB8, SoundB9, SoundBA
0009A75A 0000 0000 0000 0000 0000+  		dc.l SoundBB, SoundBC, SoundBD
0009A766 0000 0000 0000 0000 0000+  		dc.l SoundBE, SoundBF, SoundC0
0009A772 0000 0000 0000 0000 0000+  		dc.l SoundC1, SoundC2, SoundC3
0009A77E 0000 0000 0000 0000 0000+  		dc.l SoundC4, SoundC5, SoundC6
0009A78A 0000 0000 0000 0000 0000+  		dc.l SoundC7, SoundC8, SoundC9
0009A796 0000 0000 0000 0000 0000+  		dc.l SoundCA, SoundCB, SoundCC
0009A7A2 0000 0000 0000 0000 0000+  		dc.l SoundCD, SoundCE, SoundCF
0009A7AE 0000 0000                  SoundD0Index:	dc.l SoundD0
0009A7B2                            SoundA0:	incbin	sound\soundA0.bin
0009A7C8                            		even
0009A7C8                            SoundA1:	incbin	sound\soundA1.bin
0009A7F2                            		even
0009A7F2                            SoundA2:	incbin	sound\soundA2.bin
0009A812                            		even
0009A812                            SoundA3:	incbin	sound\soundA3.bin
0009A844                            		even
0009A844                            SoundA4:	incbin	sound\soundA4.bin
0009A87A                            		even
0009A87A                            SoundA5:	incbin	sound\soundA5.bin
0009A8A6                            		even
0009A8A6                            SoundA6:	incbin	sound\soundA6.bin
0009A8D6                            		even
0009A8D6                            SoundA7:	incbin	sound\soundA7.bin
0009A906                            		even
0009A906                            SoundA8:	incbin	sound\soundA8.bin
0009A93A                            		even
0009A93A                            SoundA9:	incbin	sound\soundA9.bin
0009A94C                            		even
0009A94C                            SoundAA:	incbin	sound\soundAA.bin
0009A98E                            		even
0009A98E                            SoundAB:	incbin	sound\soundAB.bin
0009A9AE                            		even
0009A9AE                            SoundAC:	incbin	sound\soundAC.bin
0009A9E2                            		even
0009A9E2                            SoundAD:	incbin	sound\soundAD.bin
0009AA18                            		even
0009AA18                            SoundAE:	incbin	sound\soundAE.bin
0009AA62                            		even
0009AA62                            SoundAF:	incbin	sound\soundAF.bin
0009AA90                            		even
0009AA90                            SoundB0:	incbin	sound\soundB0.bin
0009AAC2                            		even
0009AAC2                            SoundB1:	incbin	sound\soundB1.bin
0009AAEE                            		even
0009AAEE                            SoundB2:	incbin	sound\soundB2.bin
0009AB3E                            		even
0009AB3E                            SoundB3:	incbin	sound\soundB3.bin
0009AB88                            		even
0009AB88                            SoundB4:	include	sound\soundB4.asm
0009AB88                            SndB4_Bumper_Header:
0009AB88 =00000001                  smpsHeaderStartSong = 1
0009AB88 0000                       	smpsHeaderVoice     SndB4_Bumper_Voices
0009AB8A 01                         	smpsHeaderTempoSFX  $01
0009AB8B 03                         	smpsHeaderChanSFX   $03
0009AB8C                            
0009AB9E                            
0009AB9E                            ; FM5 Data
0009AB9E                            SndB4_Bumper_FM5:
0009ABA0 F600 00                    	smpsJump            SndB4_Bumper_Jump00
0009ABA3                            
0009ABA3                            ; FM4 Data
0009ABA3                            SndB4_Bumper_FM4:
0009ABA3 F2                         	smpsStop
0009ABA4                            
0009ABA4                            SndB4_Bumper_Jump00:
0009ABA4 A020                       	dc.b	nG2, $20
0009ABA6 F2                         	smpsStop
0009ABA7                            
0009ABA7                            ; FM3 Data
0009ABA7                            SndB4_Bumper_FM3:
0009ABA7 F2                         	smpsStop
0009ABA8                            
0009ABA8                            SndB4_Bumper_Voices:
0009ABA8                            ;	Voice $00
0009ABA8                            ;	$32
0009ABA8                            ;	$04, $20, $70, $70, 	$1F, $1F, $1F, $1F, 	$09, $00, $00, $08
0009ABA8                            ;	$09, $00, $00, $0B, 	$00, $00, $00, $0F, 	$0C, $00, $30, $00
0009ABA8                            	smpsVcAlgorithm     $02
0009ABA8                            	smpsVcFeedback      $06
0009ABA8                            	smpsVcUnusedBits    $00
0009ABA8                            	smpsVcDetune        $07, $07, $02, $00
0009ABA8                            	smpsVcCoarseFreq    $00, $00, $00, $04
0009ABA8                            	smpsVcRateScale     $00, $00, $00, $00
0009ABA8                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0009ABA8                            	smpsVcAmpMod        $00, $00, $00, $00
0009ABA8                            	smpsVcDecayRate1    $08, $00, $00, $09
0009ABA8                            	smpsVcDecayRate2    $0B, $00, $00, $09
0009ABA8                            	smpsVcDecayLevel    $00, $00, $00, $00
0009ABA8                            	smpsVcReleaseRate   $0F, $00, $00, $00
0009ABA8 3204 2070 701F 1F1F 1F09+  	smpsVcTotalLevel    $00, $30, $00, $0C
0009ABA8 3204 2070 701F 1F1F 1F09+  	smpsVcTotalLevel    $00, $30, $00, $0C
0009ABC2 00                         		even
0009ABC2                            SoundB5:	incbin	sound\soundB5.bin
0009ABE0 00                         		even
0009ABE0                            SoundB6:	incbin	sound\soundB6.bin
0009ABFE                            		even
0009ABFE                            SoundB7:	incbin	sound\soundB7.bin
0009AC3A                            		even
0009AC3A                            SoundB8:	incbin	sound\soundB8.bin
0009AC58                            		even
0009AC58                            SoundB9:	incbin	sound\soundB9.bin
0009ACBC                            		even
0009ACBC                            SoundBA:	incbin	sound\soundBA.bin
0009ACE4                            		even
0009ACE4                            SoundBB:	incbin	sound\soundBB.bin
0009AD10                            		even
0009AD10                            SoundBC:	incbin	sound\soundBC.bin
0009AD52                            		even
0009AD52                            SoundBD:	incbin	sound\soundBD.bin
0009ADA6                            		even
0009ADA6                            SoundBE:	incbin	sound\soundBE.bin
0009ADE0                            		even
0009ADE0                            SoundBF:	incbin	sound\soundBF.bin
0009AE52                            		even
0009AE52                            SoundC0:	incbin	sound\soundC0.bin
0009AE80                            		even
0009AE80                            SoundC1:	incbin	sound\soundC1.bin
0009AEDA                            		even
0009AEDA                            SoundC2:	incbin	sound\soundC2.bin
0009AF04                            		even
0009AF04                            SoundC3:	incbin	sound\soundC3.bin
0009AF7E                            		even
0009AF7E                            SoundC4:	incbin	sound\soundC4.bin
0009B07C                            		even
0009B07C                            SoundC5:	incbin	sound\soundC5.bin
0009B0E4                            		even
0009B0E4                            SoundC6:	incbin	sound\soundC6.bin
0009B126                            		even
0009B126                            SoundC7:	incbin	sound\soundC7.bin
0009B154                            		even
0009B154                            SoundC8:	incbin	sound\soundC8.bin
0009B166                            		even
0009B166                            SoundC9:	incbin	sound\soundC9.bin
0009B194                            		even
0009B194                            SoundCA:	incbin	sound\soundCA.bin
0009B1C2                            		even
0009B1C2                            SoundCB:	incbin	sound\soundCB.bin
0009B20E                            		even
0009B20E                            SoundCC:	incbin	sound\C9.ssf
0009B23C                            		even
0009B23C                            SoundCD:	incbin	sound\soundCD.bin
0009B24A                            		even
0009B24A                            SoundCE:	incbin	sound\soundCE.bin
0009B268 00                         		even
0009B268                            SoundCF:	incbin	sound\soundCF.bin
0009B2A0                            		even
0009B2A0                            SoundD0:	incbin	sound\soundD0.bin
0009B2DA                            		even
0009B2DA                            SegaPCM:	incbin	sound\segapcm.bin
000B5430                            SegaPCM_end:	even
000B5430                            
000B5430                            IdiotPCM:	incbin	sound\youare.bin
000BF502 00                         IdiotPCM_end:	even
000BF502                            
000BF502                            ; end of 'ROM'
000BF502                            EndOfRom:
000BF502                            
000BF502                            
